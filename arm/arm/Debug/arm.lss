
arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f68  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00401f68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000120  20000434  0040239c  00020434  2**2
                  ALLOC
  3 .stack        00003004  20000554  004024bc  00020434  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  6 .debug_info   000152d7  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003169  00000000  00000000  00035792  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000645f  00000000  00000000  000388fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009c0  00000000  00000000  0003ed5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a88  00000000  00000000  0003f71a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001aa2a  00000000  00000000  000401a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cd14  00000000  00000000  0005abcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006aa4a  00000000  00000000  000678e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001760  00000000  00000000  000d232c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 35 00 20 15 13 40 00 11 13 40 00 11 13 40 00     X5. ..@...@...@.
  400010:	11 13 40 00 11 13 40 00 11 13 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	11 13 40 00 11 13 40 00 00 00 00 00 11 13 40 00     ..@...@.......@.
  40003c:	11 13 40 00 11 13 40 00 11 13 40 00 11 13 40 00     ..@...@...@...@.
  40004c:	11 13 40 00 11 13 40 00 11 13 40 00 11 13 40 00     ..@...@...@...@.
  40005c:	11 13 40 00 11 13 40 00 41 16 40 00 55 16 40 00     ..@...@.A.@.U.@.
  40006c:	69 16 40 00 7d 16 40 00 91 16 40 00 11 13 40 00     i.@.}.@...@...@.
  40007c:	11 13 40 00 11 13 40 00 11 13 40 00 11 13 40 00     ..@...@...@...@.
  40008c:	11 13 40 00 11 13 40 00 11 13 40 00 11 13 40 00     ..@...@...@...@.
  40009c:	11 13 40 00 11 13 40 00 11 13 40 00 11 13 40 00     ..@...@...@...@.
  4000ac:	11 13 40 00 11 13 40 00 11 13 40 00 11 13 40 00     ..@...@...@...@.
  4000bc:	11 13 40 00 11 13 40 00 11 13 40 00 11 13 40 00     ..@...@...@...@.
  4000cc:	11 13 40 00 11 13 40 00 11 13 40 00 11 13 40 00     ..@...@...@...@.
  4000dc:	11 13 40 00 11 13 40 00 11 13 40 00 11 13 40 00     ..@...@...@...@.
  4000ec:	11 13 40 00 11 13 40 00 11 13 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000434 	.word	0x20000434
  400114:	00000000 	.word	0x00000000
  400118:	00401f68 	.word	0x00401f68

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00401f68 	.word	0x00401f68
  400158:	20000438 	.word	0x20000438
  40015c:	00401f68 	.word	0x00401f68
  400160:	00000000 	.word	0x00000000

00400164 <bsp_hw_init>:
static void m_bsp_gpio_init(void);
static void m_bsp_sdcard_init(void);

/* Function definitions ----------------------------------------------- */
void bsp_hw_init(void)
{
  400164:	b570      	push	{r4, r5, r6, lr}
  400166:	b084      	sub	sp, #16
/**
 * @brief I2C init
 */
static void m_bsp_i2c_init(void)
{
  twi_master_options_t opt = {
  400168:	2300      	movs	r3, #0
  40016a:	9303      	str	r3, [sp, #12]
  40016c:	4b12      	ldr	r3, [pc, #72]	; (4001b8 <bsp_hw_init+0x54>)
  40016e:	9302      	str	r3, [sp, #8]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400170:	4b12      	ldr	r3, [pc, #72]	; (4001bc <bsp_hw_init+0x58>)
  400172:	9301      	str	r3, [sp, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400174:	2011      	movs	r0, #17
  400176:	4c12      	ldr	r4, [pc, #72]	; (4001c0 <bsp_hw_init+0x5c>)
  400178:	47a0      	blx	r4
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
  40017a:	a901      	add	r1, sp, #4
  40017c:	4811      	ldr	r0, [pc, #68]	; (4001c4 <bsp_hw_init+0x60>)
  40017e:	4b12      	ldr	r3, [pc, #72]	; (4001c8 <bsp_hw_init+0x64>)
  400180:	4798      	blx	r3
  400182:	2009      	movs	r0, #9
  400184:	47a0      	blx	r4

  // Enable PIOA clock to detect Card Detect (CD) change
  sysclk_enable_peripheral_clock(ID_PIOA);

  // Configure SD card pins as per MCI peripheral (periph C)
  pio_set_peripheral(PIOA, PIO_PERIPH_C, PIO_PA30C_MCDA0 | // MCI Data 0
  400186:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
  40018a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40018e:	480f      	ldr	r0, [pc, #60]	; (4001cc <bsp_hw_init+0x68>)
  400190:	4b0f      	ldr	r3, [pc, #60]	; (4001d0 <bsp_hw_init+0x6c>)
  400192:	4798      	blx	r3
                                         PIO_PA27C_MCDA3 | // MCI Data 3
                                         PIO_PA28C_MCCDA | // MCI Command
                                         PIO_PA29C_MCCK);  // MCI Clock

  // Initialize SD MMC stack
  sd_mmc_init();
  400194:	4b0f      	ldr	r3, [pc, #60]	; (4001d4 <bsp_hw_init+0x70>)
  400196:	4798      	blx	r3

  //  Wait until SD stack initialized and SD card inserted
  do
  {
    // Check if stack ready
    status = sd_mmc_test_unit_ready(0);
  400198:	2400      	movs	r4, #0
  40019a:	4e0f      	ldr	r6, [pc, #60]	; (4001d8 <bsp_hw_init+0x74>)
    if (status == CTRL_FAIL)
    {
      // Wait for a card to be inserted
      while (sd_mmc_check(0) != CTRL_NO_PRESENT)
  40019c:	4d0f      	ldr	r5, [pc, #60]	; (4001dc <bsp_hw_init+0x78>)
  40019e:	e003      	b.n	4001a8 <bsp_hw_init+0x44>
  4001a0:	4620      	mov	r0, r4
  4001a2:	47a8      	blx	r5
  4001a4:	2802      	cmp	r0, #2
  4001a6:	d1fb      	bne.n	4001a0 <bsp_hw_init+0x3c>
    status = sd_mmc_test_unit_ready(0);
  4001a8:	4620      	mov	r0, r4
  4001aa:	47b0      	blx	r6
    if (status == CTRL_FAIL)
  4001ac:	2801      	cmp	r0, #1
  4001ae:	d0f7      	beq.n	4001a0 <bsp_hw_init+0x3c>
      {
        // Use a timeout here for real projects.
      }
    }
  } while (status != CTRL_GOOD);
  4001b0:	2800      	cmp	r0, #0
  4001b2:	d1f9      	bne.n	4001a8 <bsp_hw_init+0x44>
}
  4001b4:	b004      	add	sp, #16
  4001b6:	bd70      	pop	{r4, r5, r6, pc}
  4001b8:	00061a80 	.word	0x00061a80
  4001bc:	05b8d800 	.word	0x05b8d800
  4001c0:	00401a35 	.word	0x00401a35
  4001c4:	400a8000 	.word	0x400a8000
  4001c8:	00401b41 	.word	0x00401b41
  4001cc:	400e0e00 	.word	0x400e0e00
  4001d0:	004018b1 	.word	0x004018b1
  4001d4:	004003d1 	.word	0x004003d1
  4001d8:	00400c95 	.word	0x00400c95
  4001dc:	004003f1 	.word	0x004003f1

004001e0 <bsp_i2c_write>:
{
  4001e0:	b510      	push	{r4, lr}
  packet_write.chip        = slave_addr;        // TWI slave bus address
  4001e2:	4c06      	ldr	r4, [pc, #24]	; (4001fc <bsp_i2c_write+0x1c>)
  4001e4:	7420      	strb	r0, [r4, #16]
  packet_write.addr[0]     = reg_addr;          // TWI slave memory address data
  4001e6:	7021      	strb	r1, [r4, #0]
  packet_write.addr_length = sizeof(reg_addr);  // TWI slave memory address data size
  4001e8:	2101      	movs	r1, #1
  4001ea:	6061      	str	r1, [r4, #4]
  packet_write.buffer      = (void *)p_data;    // Transfer data source buffer
  4001ec:	60a2      	str	r2, [r4, #8]
  packet_write.length      = len;               // Transfer data size (bytes)
  4001ee:	60e3      	str	r3, [r4, #12]
  return twi_master_write(TWI0, &packet_write);
  4001f0:	4621      	mov	r1, r4
  4001f2:	4803      	ldr	r0, [pc, #12]	; (400200 <bsp_i2c_write+0x20>)
  4001f4:	4b03      	ldr	r3, [pc, #12]	; (400204 <bsp_i2c_write+0x24>)
  4001f6:	4798      	blx	r3
}
  4001f8:	bd10      	pop	{r4, pc}
  4001fa:	bf00      	nop
  4001fc:	20000450 	.word	0x20000450
  400200:	400a8000 	.word	0x400a8000
  400204:	00401ba5 	.word	0x00401ba5

00400208 <bsp_can_init>:
can_mb_conf_t m_can1_mailbox;

/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
void bsp_can_init(void)
{
  400208:	b538      	push	{r3, r4, r5, lr}
  uint32_t ul_sysclk = sysclk_get_cpu_hz();

  pmc_enable_periph_clk(ID_CAN1);
  40020a:	2026      	movs	r0, #38	; 0x26
  40020c:	4b13      	ldr	r3, [pc, #76]	; (40025c <bsp_can_init+0x54>)
  40020e:	4798      	blx	r3

  can_init(CAN1, ul_sysclk, CAN_BPS_1000K);
  400210:	4d13      	ldr	r5, [pc, #76]	; (400260 <bsp_can_init+0x58>)
  400212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400216:	4913      	ldr	r1, [pc, #76]	; (400264 <bsp_can_init+0x5c>)
  400218:	4628      	mov	r0, r5
  40021a:	4b13      	ldr	r3, [pc, #76]	; (400268 <bsp_can_init+0x60>)
  40021c:	4798      	blx	r3
  can_reset_all_mailbox(CAN1);
  40021e:	4628      	mov	r0, r5
  400220:	4b12      	ldr	r3, [pc, #72]	; (40026c <bsp_can_init+0x64>)
  400222:	4798      	blx	r3

  m_can1_mailbox.ul_mb_idx   = 0;
  400224:	4c12      	ldr	r4, [pc, #72]	; (400270 <bsp_can_init+0x68>)
  400226:	2300      	movs	r3, #0
  400228:	6023      	str	r3, [r4, #0]
  m_can1_mailbox.uc_obj_type = CAN_MB_TX_MODE;
  40022a:	2203      	movs	r2, #3
  40022c:	7122      	strb	r2, [r4, #4]
  m_can1_mailbox.uc_tx_prio  = 15;
  40022e:	220f      	movs	r2, #15
  400230:	71e2      	strb	r2, [r4, #7]
  m_can1_mailbox.uc_id_ver   = 0;
  400232:	7163      	strb	r3, [r4, #5]
  m_can1_mailbox.ul_id_msk   = 0;
  400234:	60e3      	str	r3, [r4, #12]
  can_mailbox_init(CAN1, &m_can1_mailbox);
  400236:	4621      	mov	r1, r4
  400238:	4628      	mov	r0, r5
  40023a:	4b0e      	ldr	r3, [pc, #56]	; (400274 <bsp_can_init+0x6c>)
  40023c:	4798      	blx	r3
  
  m_can1_mailbox.ul_id     = CAN_MID_MIDvA(0x07);
  40023e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  400242:	6123      	str	r3, [r4, #16]
  m_can1_mailbox.ul_datal  = 0x12345678;
  400244:	4b0c      	ldr	r3, [pc, #48]	; (400278 <bsp_can_init+0x70>)
  400246:	61a3      	str	r3, [r4, #24]
  m_can1_mailbox.ul_datah  = 0x87654321;
  400248:	4b0c      	ldr	r3, [pc, #48]	; (40027c <bsp_can_init+0x74>)
  40024a:	61e3      	str	r3, [r4, #28]
  m_can1_mailbox.uc_length = 8;
  40024c:	2308      	movs	r3, #8
  40024e:	71a3      	strb	r3, [r4, #6]
  can_mailbox_write(CAN1, &m_can1_mailbox);
  400250:	4621      	mov	r1, r4
  400252:	4628      	mov	r0, r5
  400254:	4b0a      	ldr	r3, [pc, #40]	; (400280 <bsp_can_init+0x78>)
  400256:	4798      	blx	r3
  400258:	bd38      	pop	{r3, r4, r5, pc}
  40025a:	bf00      	nop
  40025c:	00401a35 	.word	0x00401a35
  400260:	40014000 	.word	0x40014000
  400264:	05b8d800 	.word	0x05b8d800
  400268:	004017b5 	.word	0x004017b5
  40026c:	00401791 	.word	0x00401791
  400270:	2000050c 	.word	0x2000050c
  400274:	004016a5 	.word	0x004016a5
  400278:	12345678 	.word	0x12345678
  40027c:	87654321 	.word	0x87654321
  400280:	00401727 	.word	0x00401727

00400284 <sys_init>:
/* Private function prototypes ---------------------------------------- */
static void m_sys_sdcard_test(void);

/* Function definitions ----------------------------------------------- */
void sys_init(void)
{
  400284:	b508      	push	{r3, lr}
  sysclk_init();  // Initialize System Clock
  400286:	4b04      	ldr	r3, [pc, #16]	; (400298 <sys_init+0x14>)
  400288:	4798      	blx	r3
  board_init();   // Board init
  40028a:	4b04      	ldr	r3, [pc, #16]	; (40029c <sys_init+0x18>)
  40028c:	4798      	blx	r3
  bsp_hw_init();  // Hardware init
  40028e:	4b04      	ldr	r3, [pc, #16]	; (4002a0 <sys_init+0x1c>)
  400290:	4798      	blx	r3
  bsp_can_init(); // Can bus init
  400292:	4b04      	ldr	r3, [pc, #16]	; (4002a4 <sys_init+0x20>)
  400294:	4798      	blx	r3
  400296:	bd08      	pop	{r3, pc}
  400298:	00401571 	.word	0x00401571
  40029c:	00400ce5 	.word	0x00400ce5
  4002a0:	00400165 	.word	0x00400165
  4002a4:	00400209 	.word	0x00400209

004002a8 <sys_run>:
}

void sys_run(void)
{
  4002a8:	b510      	push	{r4, lr}
  4002aa:	b082      	sub	sp, #8
  uint8_t data = 0x99;
  4002ac:	aa02      	add	r2, sp, #8
  4002ae:	2399      	movs	r3, #153	; 0x99
  4002b0:	f802 3d01 	strb.w	r3, [r2, #-1]!

  bsp_i2c_write(0x77, 0x11, &data, 1);
  4002b4:	2301      	movs	r3, #1
  4002b6:	2111      	movs	r1, #17
  4002b8:	2077      	movs	r0, #119	; 0x77
  4002ba:	4c02      	ldr	r4, [pc, #8]	; (4002c4 <sys_run+0x1c>)
  4002bc:	47a0      	blx	r4
}
  4002be:	b002      	add	sp, #8
  4002c0:	bd10      	pop	{r4, pc}
  4002c2:	bf00      	nop
  4002c4:	004001e1 	.word	0x004001e1

004002c8 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  4002c8:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  4002ca:	4b06      	ldr	r3, [pc, #24]	; (4002e4 <sd_mmc_configure_slot+0x1c>)
  4002cc:	6819      	ldr	r1, [r3, #0]
  4002ce:	7f8b      	ldrb	r3, [r1, #30]
  4002d0:	3300      	adds	r3, #0
  4002d2:	bf18      	it	ne
  4002d4:	2301      	movne	r3, #1
  4002d6:	7b4a      	ldrb	r2, [r1, #13]
  4002d8:	6809      	ldr	r1, [r1, #0]
  4002da:	4803      	ldr	r0, [pc, #12]	; (4002e8 <sd_mmc_configure_slot+0x20>)
  4002dc:	7800      	ldrb	r0, [r0, #0]
  4002de:	4c03      	ldr	r4, [pc, #12]	; (4002ec <sd_mmc_configure_slot+0x24>)
  4002e0:	47a0      	blx	r4
  4002e2:	bd10      	pop	{r4, pc}
  4002e4:	20000464 	.word	0x20000464
  4002e8:	20000488 	.word	0x20000488
  4002ec:	00400fc1 	.word	0x00400fc1

004002f0 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  4002f0:	b108      	cbz	r0, 4002f6 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  4002f2:	2004      	movs	r0, #4
  4002f4:	4770      	bx	lr
{
  4002f6:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4002f8:	4b0e      	ldr	r3, [pc, #56]	; (400334 <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  4002fa:	7a9b      	ldrb	r3, [r3, #10]
  4002fc:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4002fe:	b2db      	uxtb	r3, r3
  400300:	2b01      	cmp	r3, #1
  400302:	d90d      	bls.n	400320 <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  400304:	2200      	movs	r2, #0
  400306:	4b0c      	ldr	r3, [pc, #48]	; (400338 <sd_mmc_select_slot+0x48>)
  400308:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40030a:	4c0a      	ldr	r4, [pc, #40]	; (400334 <sd_mmc_select_slot+0x44>)
  40030c:	4b0b      	ldr	r3, [pc, #44]	; (40033c <sd_mmc_select_slot+0x4c>)
  40030e:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400310:	4b0b      	ldr	r3, [pc, #44]	; (400340 <sd_mmc_select_slot+0x50>)
  400312:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400314:	7aa0      	ldrb	r0, [r4, #10]
  400316:	2802      	cmp	r0, #2
  400318:	bf14      	ite	ne
  40031a:	2000      	movne	r0, #0
  40031c:	2001      	moveq	r0, #1
  40031e:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  400320:	4b04      	ldr	r3, [pc, #16]	; (400334 <sd_mmc_select_slot+0x44>)
  400322:	2202      	movs	r2, #2
  400324:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  400326:	4a07      	ldr	r2, [pc, #28]	; (400344 <sd_mmc_select_slot+0x54>)
  400328:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40032a:	2201      	movs	r2, #1
  40032c:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  40032e:	2200      	movs	r2, #0
  400330:	779a      	strb	r2, [r3, #30]
  400332:	e7e7      	b.n	400304 <sd_mmc_select_slot+0x14>
  400334:	20000468 	.word	0x20000468
  400338:	20000488 	.word	0x20000488
  40033c:	20000464 	.word	0x20000464
  400340:	004002c9 	.word	0x004002c9
  400344:	00061a80 	.word	0x00061a80

00400348 <sdio_cmd52>:
{
  400348:	b538      	push	{r3, r4, r5, lr}
  40034a:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  40034c:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  40034e:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  400352:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  400356:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  40035a:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  40035c:	4311      	orrs	r1, r2
  40035e:	f241 3034 	movw	r0, #4916	; 0x1334
  400362:	4b05      	ldr	r3, [pc, #20]	; (400378 <sdio_cmd52+0x30>)
  400364:	4798      	blx	r3
  400366:	4605      	mov	r5, r0
  400368:	b908      	cbnz	r0, 40036e <sdio_cmd52+0x26>
}
  40036a:	4628      	mov	r0, r5
  40036c:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  40036e:	4b03      	ldr	r3, [pc, #12]	; (40037c <sdio_cmd52+0x34>)
  400370:	4798      	blx	r3
  400372:	7020      	strb	r0, [r4, #0]
	return true;
  400374:	e7f9      	b.n	40036a <sdio_cmd52+0x22>
  400376:	bf00      	nop
  400378:	004010a1 	.word	0x004010a1
  40037c:	004010cd 	.word	0x004010cd

00400380 <sd_mmc_cmd9_mci>:
{
  400380:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  400382:	4b09      	ldr	r3, [pc, #36]	; (4003a8 <sd_mmc_cmd9_mci+0x28>)
  400384:	681b      	ldr	r3, [r3, #0]
  400386:	8919      	ldrh	r1, [r3, #8]
  400388:	0409      	lsls	r1, r1, #16
  40038a:	f641 3009 	movw	r0, #6921	; 0x1b09
  40038e:	4b07      	ldr	r3, [pc, #28]	; (4003ac <sd_mmc_cmd9_mci+0x2c>)
  400390:	4798      	blx	r3
  400392:	4604      	mov	r4, r0
  400394:	b908      	cbnz	r0, 40039a <sd_mmc_cmd9_mci+0x1a>
}
  400396:	4620      	mov	r0, r4
  400398:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  40039a:	4b03      	ldr	r3, [pc, #12]	; (4003a8 <sd_mmc_cmd9_mci+0x28>)
  40039c:	6818      	ldr	r0, [r3, #0]
  40039e:	300e      	adds	r0, #14
  4003a0:	4b03      	ldr	r3, [pc, #12]	; (4003b0 <sd_mmc_cmd9_mci+0x30>)
  4003a2:	4798      	blx	r3
	return true;
  4003a4:	e7f7      	b.n	400396 <sd_mmc_cmd9_mci+0x16>
  4003a6:	bf00      	nop
  4003a8:	20000464 	.word	0x20000464
  4003ac:	004010a1 	.word	0x004010a1
  4003b0:	004010d9 	.word	0x004010d9

004003b4 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  4003b4:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  4003b6:	4b04      	ldr	r3, [pc, #16]	; (4003c8 <sd_mmc_deselect_slot+0x14>)
  4003b8:	781b      	ldrb	r3, [r3, #0]
  4003ba:	b103      	cbz	r3, 4003be <sd_mmc_deselect_slot+0xa>
  4003bc:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  4003be:	2000      	movs	r0, #0
  4003c0:	4b02      	ldr	r3, [pc, #8]	; (4003cc <sd_mmc_deselect_slot+0x18>)
  4003c2:	4798      	blx	r3
	}
}
  4003c4:	e7fa      	b.n	4003bc <sd_mmc_deselect_slot+0x8>
  4003c6:	bf00      	nop
  4003c8:	20000488 	.word	0x20000488
  4003cc:	00401079 	.word	0x00401079

004003d0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4003d0:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4003d2:	2204      	movs	r2, #4
  4003d4:	4b03      	ldr	r3, [pc, #12]	; (4003e4 <sd_mmc_init+0x14>)
  4003d6:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4003d8:	22ff      	movs	r2, #255	; 0xff
  4003da:	4b03      	ldr	r3, [pc, #12]	; (4003e8 <sd_mmc_init+0x18>)
  4003dc:	701a      	strb	r2, [r3, #0]
	driver_init();
  4003de:	4b03      	ldr	r3, [pc, #12]	; (4003ec <sd_mmc_init+0x1c>)
  4003e0:	4798      	blx	r3
  4003e2:	bd08      	pop	{r3, pc}
  4003e4:	20000468 	.word	0x20000468
  4003e8:	20000488 	.word	0x20000488
  4003ec:	00400f89 	.word	0x00400f89

004003f0 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  4003f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4003f4:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4003f6:	4ba7      	ldr	r3, [pc, #668]	; (400694 <sd_mmc_check+0x2a4>)
  4003f8:	4798      	blx	r3
  4003fa:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4003fc:	2801      	cmp	r0, #1
  4003fe:	d005      	beq.n	40040c <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  400400:	4ba5      	ldr	r3, [pc, #660]	; (400698 <sd_mmc_check+0x2a8>)
  400402:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  400404:	4620      	mov	r0, r4
  400406:	b015      	add	sp, #84	; 0x54
  400408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  40040c:	ae14      	add	r6, sp, #80	; 0x50
  40040e:	2308      	movs	r3, #8
  400410:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  400414:	4ba1      	ldr	r3, [pc, #644]	; (40069c <sd_mmc_check+0x2ac>)
  400416:	681b      	ldr	r3, [r3, #0]
  400418:	2701      	movs	r7, #1
  40041a:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  40041c:	2500      	movs	r5, #0
  40041e:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  400420:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
  400422:	4b9f      	ldr	r3, [pc, #636]	; (4006a0 <sd_mmc_check+0x2b0>)
  400424:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  400426:	9600      	str	r6, [sp, #0]
  400428:	462b      	mov	r3, r5
  40042a:	2206      	movs	r2, #6
  40042c:	4629      	mov	r1, r5
  40042e:	4638      	mov	r0, r7
  400430:	4e9c      	ldr	r6, [pc, #624]	; (4006a4 <sd_mmc_check+0x2b4>)
  400432:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400434:	4629      	mov	r1, r5
  400436:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40043a:	4b9b      	ldr	r3, [pc, #620]	; (4006a8 <sd_mmc_check+0x2b8>)
  40043c:	4798      	blx	r3
  40043e:	b930      	cbnz	r0, 40044e <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  400440:	4b96      	ldr	r3, [pc, #600]	; (40069c <sd_mmc_check+0x2ac>)
  400442:	681b      	ldr	r3, [r3, #0]
  400444:	2403      	movs	r4, #3
  400446:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  400448:	4b93      	ldr	r3, [pc, #588]	; (400698 <sd_mmc_check+0x2a8>)
  40044a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  40044c:	e7da      	b.n	400404 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  40044e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  400452:	f245 5008 	movw	r0, #21768	; 0x5508
  400456:	4b94      	ldr	r3, [pc, #592]	; (4006a8 <sd_mmc_check+0x2b8>)
  400458:	4798      	blx	r3
  40045a:	2800      	cmp	r0, #0
  40045c:	f040 8093 	bne.w	400586 <sd_mmc_check+0x196>
	*v2 = 0;
  400460:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  400464:	2100      	movs	r1, #0
  400466:	f244 5005 	movw	r0, #17669	; 0x4505
  40046a:	4b8f      	ldr	r3, [pc, #572]	; (4006a8 <sd_mmc_check+0x2b8>)
  40046c:	4798      	blx	r3
  40046e:	2800      	cmp	r0, #0
  400470:	f040 8097 	bne.w	4005a2 <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400474:	4b89      	ldr	r3, [pc, #548]	; (40069c <sd_mmc_check+0x2ac>)
  400476:	681b      	ldr	r3, [r3, #0]
  400478:	7adb      	ldrb	r3, [r3, #11]
  40047a:	f013 0f01 	tst.w	r3, #1
  40047e:	f040 80b5 	bne.w	4005ec <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400482:	2100      	movs	r1, #0
  400484:	f245 1003 	movw	r0, #20739	; 0x5103
  400488:	4b87      	ldr	r3, [pc, #540]	; (4006a8 <sd_mmc_check+0x2b8>)
  40048a:	4798      	blx	r3
  40048c:	2800      	cmp	r0, #0
  40048e:	d0d7      	beq.n	400440 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400490:	4d82      	ldr	r5, [pc, #520]	; (40069c <sd_mmc_check+0x2ac>)
  400492:	682e      	ldr	r6, [r5, #0]
  400494:	4b85      	ldr	r3, [pc, #532]	; (4006ac <sd_mmc_check+0x2bc>)
  400496:	4798      	blx	r3
  400498:	0c00      	lsrs	r0, r0, #16
  40049a:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40049c:	682b      	ldr	r3, [r5, #0]
  40049e:	7adb      	ldrb	r3, [r3, #11]
  4004a0:	f013 0f01 	tst.w	r3, #1
  4004a4:	d034      	beq.n	400510 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  4004a6:	4b82      	ldr	r3, [pc, #520]	; (4006b0 <sd_mmc_check+0x2c0>)
  4004a8:	4798      	blx	r3
  4004aa:	2800      	cmp	r0, #0
  4004ac:	d0c8      	beq.n	400440 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  4004ae:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4004b0:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  4004b2:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4004b6:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4004ba:	497e      	ldr	r1, [pc, #504]	; (4006b4 <sd_mmc_check+0x2c4>)
  4004bc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  4004c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4004c4:	fb02 f201 	mul.w	r2, r2, r1
  4004c8:	497b      	ldr	r1, [pc, #492]	; (4006b8 <sd_mmc_check+0x2c8>)
  4004ca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4004ce:	fb02 f201 	mul.w	r2, r2, r1
  4004d2:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  4004d4:	7b9a      	ldrb	r2, [r3, #14]
  4004d6:	0992      	lsrs	r2, r2, #6
  4004d8:	f040 820b 	bne.w	4008f2 <sd_mmc_check+0x502>
  4004dc:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4004de:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4004e0:	7d1a      	ldrb	r2, [r3, #20]
  4004e2:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4004e4:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  4004e8:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4004ec:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4004ee:	7dd9      	ldrb	r1, [r3, #23]
  4004f0:	0049      	lsls	r1, r1, #1
  4004f2:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  4004f6:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4004fa:	3201      	adds	r2, #1
  4004fc:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400500:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400502:	408a      	lsls	r2, r1
  400504:	7cd9      	ldrb	r1, [r3, #19]
  400506:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40050a:	408a      	lsls	r2, r1
				/ 1024;
  40050c:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  40050e:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400510:	4b62      	ldr	r3, [pc, #392]	; (40069c <sd_mmc_check+0x2ac>)
  400512:	681b      	ldr	r3, [r3, #0]
  400514:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400516:	0409      	lsls	r1, r1, #16
  400518:	f243 1007 	movw	r0, #12551	; 0x3107
  40051c:	4b62      	ldr	r3, [pc, #392]	; (4006a8 <sd_mmc_check+0x2b8>)
  40051e:	4798      	blx	r3
  400520:	2800      	cmp	r0, #0
  400522:	d08d      	beq.n	400440 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400524:	4b5d      	ldr	r3, [pc, #372]	; (40069c <sd_mmc_check+0x2ac>)
  400526:	681b      	ldr	r3, [r3, #0]
  400528:	7ada      	ldrb	r2, [r3, #11]
  40052a:	f012 0f01 	tst.w	r2, #1
  40052e:	f040 81ed 	bne.w	40090c <sd_mmc_check+0x51c>
	if (IS_SDIO()) {
  400532:	4b5a      	ldr	r3, [pc, #360]	; (40069c <sd_mmc_check+0x2ac>)
  400534:	681b      	ldr	r3, [r3, #0]
  400536:	7adb      	ldrb	r3, [r3, #11]
  400538:	f013 0f04 	tst.w	r3, #4
  40053c:	f000 829c 	beq.w	400a78 <sd_mmc_check+0x688>
  400540:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  400542:	2700      	movs	r7, #0
  400544:	4e57      	ldr	r6, [pc, #348]	; (4006a4 <sd_mmc_check+0x2b4>)
  400546:	f1a5 0309 	sub.w	r3, r5, #9
  40054a:	aa03      	add	r2, sp, #12
  40054c:	4413      	add	r3, r2
  40054e:	9300      	str	r3, [sp, #0]
  400550:	463b      	mov	r3, r7
  400552:	462a      	mov	r2, r5
  400554:	4639      	mov	r1, r7
  400556:	4638      	mov	r0, r7
  400558:	47b0      	blx	r6
		addr_old++;
  40055a:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  40055c:	2d0d      	cmp	r5, #13
  40055e:	d1f2      	bne.n	400546 <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400560:	f89d 300d 	ldrb.w	r3, [sp, #13]
  400564:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400568:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40056c:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  400570:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400574:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400578:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  40057c:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40057e:	f04f 0800 	mov.w	r8, #0
  400582:	4f48      	ldr	r7, [pc, #288]	; (4006a4 <sd_mmc_check+0x2b4>)
  400584:	e239      	b.n	4009fa <sd_mmc_check+0x60a>
	resp = driver_get_response();
  400586:	4b49      	ldr	r3, [pc, #292]	; (4006ac <sd_mmc_check+0x2bc>)
  400588:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40058a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40058e:	f000 8347 	beq.w	400c20 <sd_mmc_check+0x830>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400592:	f3c0 000b 	ubfx	r0, r0, #0, #12
  400596:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40059a:	f47f af51 	bne.w	400440 <sd_mmc_check+0x50>
	*v2 = 1;
  40059e:	46b9      	mov	r9, r7
  4005a0:	e760      	b.n	400464 <sd_mmc_check+0x74>
	resp = driver_get_response();
  4005a2:	4b42      	ldr	r3, [pc, #264]	; (4006ac <sd_mmc_check+0x2bc>)
  4005a4:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  4005a6:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  4005aa:	f43f af63 	beq.w	400474 <sd_mmc_check+0x84>
  4005ae:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  4005b2:	f244 5805 	movw	r8, #17669	; 0x4505
  4005b6:	4e3c      	ldr	r6, [pc, #240]	; (4006a8 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4005b8:	4f3c      	ldr	r7, [pc, #240]	; (4006ac <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  4005ba:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  4005be:	4640      	mov	r0, r8
  4005c0:	47b0      	blx	r6
  4005c2:	2800      	cmp	r0, #0
  4005c4:	f43f af3c 	beq.w	400440 <sd_mmc_check+0x50>
		resp = driver_get_response();
  4005c8:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  4005ca:	2800      	cmp	r0, #0
  4005cc:	db02      	blt.n	4005d4 <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  4005ce:	3d01      	subs	r5, #1
  4005d0:	d1f3      	bne.n	4005ba <sd_mmc_check+0x1ca>
  4005d2:	e735      	b.n	400440 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  4005d4:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  4005d8:	d104      	bne.n	4005e4 <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  4005da:	4b30      	ldr	r3, [pc, #192]	; (40069c <sd_mmc_check+0x2ac>)
  4005dc:	681b      	ldr	r3, [r3, #0]
  4005de:	2204      	movs	r2, #4
  4005e0:	72da      	strb	r2, [r3, #11]
  4005e2:	e74e      	b.n	400482 <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  4005e4:	4b2d      	ldr	r3, [pc, #180]	; (40069c <sd_mmc_check+0x2ac>)
  4005e6:	681b      	ldr	r3, [r3, #0]
  4005e8:	2205      	movs	r2, #5
  4005ea:	72da      	strb	r2, [r3, #11]
  4005ec:	f1b9 0f00 	cmp.w	r9, #0
  4005f0:	4f32      	ldr	r7, [pc, #200]	; (4006bc <sd_mmc_check+0x2cc>)
  4005f2:	bf14      	ite	ne
  4005f4:	46b9      	movne	r9, r7
  4005f6:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  4005fa:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4005fe:	f04f 0800 	mov.w	r8, #0
  400602:	4e29      	ldr	r6, [pc, #164]	; (4006a8 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400604:	4f29      	ldr	r7, [pc, #164]	; (4006ac <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400606:	4641      	mov	r1, r8
  400608:	f241 1037 	movw	r0, #4407	; 0x1137
  40060c:	47b0      	blx	r6
  40060e:	b148      	cbz	r0, 400624 <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  400610:	4649      	mov	r1, r9
  400612:	f244 5029 	movw	r0, #17705	; 0x4529
  400616:	47b0      	blx	r6
  400618:	b120      	cbz	r0, 400624 <sd_mmc_check+0x234>
		resp = driver_get_response();
  40061a:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  40061c:	2800      	cmp	r0, #0
  40061e:	db20      	blt.n	400662 <sd_mmc_check+0x272>
		if (retry-- == 0) {
  400620:	3d01      	subs	r5, #1
  400622:	d1f0      	bne.n	400606 <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  400624:	4b1d      	ldr	r3, [pc, #116]	; (40069c <sd_mmc_check+0x2ac>)
  400626:	681b      	ldr	r3, [r3, #0]
  400628:	2202      	movs	r2, #2
  40062a:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40062c:	2100      	movs	r1, #0
  40062e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400632:	4b1d      	ldr	r3, [pc, #116]	; (4006a8 <sd_mmc_check+0x2b8>)
  400634:	4798      	blx	r3
  400636:	2800      	cmp	r0, #0
  400638:	f43f af02 	beq.w	400440 <sd_mmc_check+0x50>
  40063c:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400640:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4006bc <sd_mmc_check+0x2cc>
  400644:	4e18      	ldr	r6, [pc, #96]	; (4006a8 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400646:	4f19      	ldr	r7, [pc, #100]	; (4006ac <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  400648:	4641      	mov	r1, r8
  40064a:	f244 5001 	movw	r0, #17665	; 0x4501
  40064e:	47b0      	blx	r6
  400650:	2800      	cmp	r0, #0
  400652:	f43f aef5 	beq.w	400440 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400656:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  400658:	2800      	cmp	r0, #0
  40065a:	db31      	blt.n	4006c0 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  40065c:	3d01      	subs	r5, #1
  40065e:	d1f3      	bne.n	400648 <sd_mmc_check+0x258>
  400660:	e6ee      	b.n	400440 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  400662:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400666:	d005      	beq.n	400674 <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400668:	4b0c      	ldr	r3, [pc, #48]	; (40069c <sd_mmc_check+0x2ac>)
  40066a:	681a      	ldr	r2, [r3, #0]
  40066c:	7ad3      	ldrb	r3, [r2, #11]
  40066e:	f043 0308 	orr.w	r3, r3, #8
  400672:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400674:	4b09      	ldr	r3, [pc, #36]	; (40069c <sd_mmc_check+0x2ac>)
  400676:	681b      	ldr	r3, [r3, #0]
  400678:	7adb      	ldrb	r3, [r3, #11]
  40067a:	f013 0f01 	tst.w	r3, #1
  40067e:	f43f af00 	beq.w	400482 <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400682:	2100      	movs	r1, #0
  400684:	f645 3002 	movw	r0, #23298	; 0x5b02
  400688:	4b07      	ldr	r3, [pc, #28]	; (4006a8 <sd_mmc_check+0x2b8>)
  40068a:	4798      	blx	r3
  40068c:	2800      	cmp	r0, #0
  40068e:	f47f aef8 	bne.w	400482 <sd_mmc_check+0x92>
  400692:	e6d5      	b.n	400440 <sd_mmc_check+0x50>
  400694:	004002f1 	.word	0x004002f1
  400698:	004003b5 	.word	0x004003b5
  40069c:	20000464 	.word	0x20000464
  4006a0:	0040107d 	.word	0x0040107d
  4006a4:	00400349 	.word	0x00400349
  4006a8:	004010a1 	.word	0x004010a1
  4006ac:	004010cd 	.word	0x004010cd
  4006b0:	00400381 	.word	0x00400381
  4006b4:	00401e78 	.word	0x00401e78
  4006b8:	00401e94 	.word	0x00401e94
  4006bc:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  4006c0:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  4006c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4006c8:	d027      	beq.n	40071a <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4006ca:	2100      	movs	r1, #0
  4006cc:	f645 3002 	movw	r0, #23298	; 0x5b02
  4006d0:	4ba7      	ldr	r3, [pc, #668]	; (400970 <sd_mmc_check+0x580>)
  4006d2:	4798      	blx	r3
  4006d4:	2800      	cmp	r0, #0
  4006d6:	f43f aeb3 	beq.w	400440 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  4006da:	4ba6      	ldr	r3, [pc, #664]	; (400974 <sd_mmc_check+0x584>)
  4006dc:	681b      	ldr	r3, [r3, #0]
  4006de:	2201      	movs	r2, #1
  4006e0:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4006e2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4006e6:	f241 1003 	movw	r0, #4355	; 0x1103
  4006ea:	4ba1      	ldr	r3, [pc, #644]	; (400970 <sd_mmc_check+0x580>)
  4006ec:	4798      	blx	r3
  4006ee:	2800      	cmp	r0, #0
  4006f0:	f43f aea6 	beq.w	400440 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  4006f4:	4ba0      	ldr	r3, [pc, #640]	; (400978 <sd_mmc_check+0x588>)
  4006f6:	4798      	blx	r3
  4006f8:	2800      	cmp	r0, #0
  4006fa:	f43f aea1 	beq.w	400440 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4006fe:	4b9d      	ldr	r3, [pc, #628]	; (400974 <sd_mmc_check+0x584>)
  400700:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400702:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  400704:	f3c3 0383 	ubfx	r3, r3, #2, #4
  400708:	3b01      	subs	r3, #1
  40070a:	2b03      	cmp	r3, #3
  40070c:	d80c      	bhi.n	400728 <sd_mmc_check+0x338>
  40070e:	e8df f013 	tbh	[pc, r3, lsl #1]
  400712:	00cc      	.short	0x00cc
  400714:	00d200cf 	.word	0x00d200cf
  400718:	00d5      	.short	0x00d5
				sd_mmc_card->type |= CARD_TYPE_HC;
  40071a:	4b96      	ldr	r3, [pc, #600]	; (400974 <sd_mmc_check+0x584>)
  40071c:	681a      	ldr	r2, [r3, #0]
  40071e:	7ad3      	ldrb	r3, [r2, #11]
  400720:	f043 0308 	orr.w	r3, r3, #8
  400724:	72d3      	strb	r3, [r2, #11]
  400726:	e7d0      	b.n	4006ca <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  400728:	2312      	movs	r3, #18
  40072a:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40072c:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  40072e:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400732:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400736:	4991      	ldr	r1, [pc, #580]	; (40097c <sd_mmc_check+0x58c>)
  400738:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  40073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400740:	fb03 f301 	mul.w	r3, r3, r1
  400744:	498e      	ldr	r1, [pc, #568]	; (400980 <sd_mmc_check+0x590>)
  400746:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40074a:	fb03 f301 	mul.w	r3, r3, r1
  40074e:	6013      	str	r3, [r2, #0]
  400750:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400752:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400754:	7d13      	ldrb	r3, [r2, #20]
  400756:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400758:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  40075c:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400760:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  400764:	f640 71ff 	movw	r1, #4095	; 0xfff
  400768:	428b      	cmp	r3, r1
  40076a:	d00f      	beq.n	40078c <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40076c:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40076e:	7dd1      	ldrb	r1, [r2, #23]
  400770:	0049      	lsls	r1, r1, #1
  400772:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400776:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400778:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  40077c:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40077e:	408b      	lsls	r3, r1
  400780:	7cd1      	ldrb	r1, [r2, #19]
  400782:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  400786:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400788:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  40078a:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  40078c:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40078e:	0409      	lsls	r1, r1, #16
  400790:	f243 1007 	movw	r0, #12551	; 0x3107
  400794:	4b76      	ldr	r3, [pc, #472]	; (400970 <sd_mmc_check+0x580>)
  400796:	4798      	blx	r3
  400798:	2800      	cmp	r0, #0
  40079a:	f43f ae51 	beq.w	400440 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  40079e:	4b75      	ldr	r3, [pc, #468]	; (400974 <sd_mmc_check+0x584>)
  4007a0:	681b      	ldr	r3, [r3, #0]
  4007a2:	7b1b      	ldrb	r3, [r3, #12]
  4007a4:	2b3f      	cmp	r3, #63	; 0x3f
  4007a6:	f240 8096 	bls.w	4008d6 <sd_mmc_check+0x4e6>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  4007aa:	2100      	movs	r1, #0
  4007ac:	9100      	str	r1, [sp, #0]
  4007ae:	2301      	movs	r3, #1
  4007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4007b4:	4873      	ldr	r0, [pc, #460]	; (400984 <sd_mmc_check+0x594>)
  4007b6:	4d74      	ldr	r5, [pc, #464]	; (400988 <sd_mmc_check+0x598>)
  4007b8:	47a8      	blx	r5
  4007ba:	2800      	cmp	r0, #0
  4007bc:	f43f ae40 	beq.w	400440 <sd_mmc_check+0x50>
  4007c0:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  4007c2:	4e72      	ldr	r6, [pc, #456]	; (40098c <sd_mmc_check+0x59c>)
  4007c4:	a803      	add	r0, sp, #12
  4007c6:	47b0      	blx	r6
  4007c8:	2800      	cmp	r0, #0
  4007ca:	f43f ae39 	beq.w	400440 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4007ce:	3501      	adds	r5, #1
  4007d0:	b2ad      	uxth	r5, r5
  4007d2:	2d32      	cmp	r5, #50	; 0x32
  4007d4:	d1f6      	bne.n	4007c4 <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  4007d6:	9e03      	ldr	r6, [sp, #12]
  4007d8:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  4007dc:	4b65      	ldr	r3, [pc, #404]	; (400974 <sd_mmc_check+0x584>)
  4007de:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007e0:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4007e2:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4007e4:	7d1b      	ldrb	r3, [r3, #20]
  4007e6:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4007e8:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  4007ec:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4007f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4007f4:	f640 72ff 	movw	r2, #4095	; 0xfff
  4007f8:	4293      	cmp	r3, r2
  4007fa:	d10e      	bne.n	40081a <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  4007fc:	4f63      	ldr	r7, [pc, #396]	; (40098c <sd_mmc_check+0x59c>)
  4007fe:	a804      	add	r0, sp, #16
  400800:	47b8      	blx	r7
  400802:	2800      	cmp	r0, #0
  400804:	f43f ae1c 	beq.w	400440 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  400808:	3501      	adds	r5, #1
  40080a:	b2ad      	uxth	r5, r5
  40080c:	2d35      	cmp	r5, #53	; 0x35
  40080e:	d9f6      	bls.n	4007fe <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  400810:	4b58      	ldr	r3, [pc, #352]	; (400974 <sd_mmc_check+0x584>)
  400812:	681a      	ldr	r2, [r3, #0]
  400814:	9b04      	ldr	r3, [sp, #16]
  400816:	085b      	lsrs	r3, r3, #1
  400818:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  40081a:	4f5c      	ldr	r7, [pc, #368]	; (40098c <sd_mmc_check+0x59c>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40081c:	2d7f      	cmp	r5, #127	; 0x7f
  40081e:	d950      	bls.n	4008c2 <sd_mmc_check+0x4d2>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  400820:	4b5b      	ldr	r3, [pc, #364]	; (400990 <sd_mmc_check+0x5a0>)
  400822:	7818      	ldrb	r0, [r3, #0]
  400824:	4b5b      	ldr	r3, [pc, #364]	; (400994 <sd_mmc_check+0x5a4>)
  400826:	4798      	blx	r3
  400828:	2803      	cmp	r0, #3
  40082a:	d91d      	bls.n	400868 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  40082c:	4b58      	ldr	r3, [pc, #352]	; (400990 <sd_mmc_check+0x5a0>)
  40082e:	7818      	ldrb	r0, [r3, #0]
  400830:	4b58      	ldr	r3, [pc, #352]	; (400994 <sd_mmc_check+0x5a4>)
  400832:	4798      	blx	r3
  400834:	4605      	mov	r5, r0
	switch (bus_width) {
  400836:	2804      	cmp	r0, #4
  400838:	d04b      	beq.n	4008d2 <sd_mmc_check+0x4e2>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40083a:	4b57      	ldr	r3, [pc, #348]	; (400998 <sd_mmc_check+0x5a8>)
  40083c:	4957      	ldr	r1, [pc, #348]	; (40099c <sd_mmc_check+0x5ac>)
  40083e:	2808      	cmp	r0, #8
  400840:	bf18      	it	ne
  400842:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  400844:	f243 1006 	movw	r0, #12550	; 0x3106
  400848:	4b49      	ldr	r3, [pc, #292]	; (400970 <sd_mmc_check+0x580>)
  40084a:	4798      	blx	r3
  40084c:	2800      	cmp	r0, #0
  40084e:	f43f adf7 	beq.w	400440 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400852:	4b53      	ldr	r3, [pc, #332]	; (4009a0 <sd_mmc_check+0x5b0>)
  400854:	4798      	blx	r3
  400856:	f010 0f80 	tst.w	r0, #128	; 0x80
  40085a:	f47f adf1 	bne.w	400440 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  40085e:	4b45      	ldr	r3, [pc, #276]	; (400974 <sd_mmc_check+0x584>)
  400860:	681b      	ldr	r3, [r3, #0]
  400862:	735d      	strb	r5, [r3, #13]
			sd_mmc_configure_slot();
  400864:	4b4f      	ldr	r3, [pc, #316]	; (4009a4 <sd_mmc_check+0x5b4>)
  400866:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400868:	4b4f      	ldr	r3, [pc, #316]	; (4009a8 <sd_mmc_check+0x5b8>)
  40086a:	4798      	blx	r3
  40086c:	b1b0      	cbz	r0, 40089c <sd_mmc_check+0x4ac>
  40086e:	b1ae      	cbz	r6, 40089c <sd_mmc_check+0x4ac>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  400870:	494e      	ldr	r1, [pc, #312]	; (4009ac <sd_mmc_check+0x5bc>)
  400872:	f243 1006 	movw	r0, #12550	; 0x3106
  400876:	4b3e      	ldr	r3, [pc, #248]	; (400970 <sd_mmc_check+0x580>)
  400878:	4798      	blx	r3
  40087a:	2800      	cmp	r0, #0
  40087c:	f43f ade0 	beq.w	400440 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400880:	4b47      	ldr	r3, [pc, #284]	; (4009a0 <sd_mmc_check+0x5b0>)
  400882:	4798      	blx	r3
  400884:	f010 0f80 	tst.w	r0, #128	; 0x80
  400888:	f47f adda 	bne.w	400440 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  40088c:	4b39      	ldr	r3, [pc, #228]	; (400974 <sd_mmc_check+0x584>)
  40088e:	681b      	ldr	r3, [r3, #0]
  400890:	2201      	movs	r2, #1
  400892:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  400894:	4a46      	ldr	r2, [pc, #280]	; (4009b0 <sd_mmc_check+0x5c0>)
  400896:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400898:	4b42      	ldr	r3, [pc, #264]	; (4009a4 <sd_mmc_check+0x5b4>)
  40089a:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  40089c:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40089e:	f44f 7800 	mov.w	r8, #512	; 0x200
  4008a2:	f241 1710 	movw	r7, #4368	; 0x1110
  4008a6:	4e32      	ldr	r6, [pc, #200]	; (400970 <sd_mmc_check+0x580>)
  4008a8:	e01d      	b.n	4008e6 <sd_mmc_check+0x4f6>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  4008aa:	2314      	movs	r3, #20
  4008ac:	7313      	strb	r3, [r2, #12]
  4008ae:	e73d      	b.n	40072c <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  4008b0:	2322      	movs	r3, #34	; 0x22
  4008b2:	7313      	strb	r3, [r2, #12]
  4008b4:	e73a      	b.n	40072c <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  4008b6:	2330      	movs	r3, #48	; 0x30
  4008b8:	7313      	strb	r3, [r2, #12]
  4008ba:	e737      	b.n	40072c <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  4008bc:	2340      	movs	r3, #64	; 0x40
  4008be:	7313      	strb	r3, [r2, #12]
  4008c0:	e734      	b.n	40072c <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  4008c2:	a804      	add	r0, sp, #16
  4008c4:	47b8      	blx	r7
  4008c6:	2800      	cmp	r0, #0
  4008c8:	f43f adba 	beq.w	400440 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4008cc:	3501      	adds	r5, #1
  4008ce:	b2ad      	uxth	r5, r5
  4008d0:	e7a4      	b.n	40081c <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4008d2:	4938      	ldr	r1, [pc, #224]	; (4009b4 <sd_mmc_check+0x5c4>)
  4008d4:	e7b6      	b.n	400844 <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  4008d6:	4b33      	ldr	r3, [pc, #204]	; (4009a4 <sd_mmc_check+0x5b4>)
  4008d8:	4798      	blx	r3
  4008da:	e7df      	b.n	40089c <sd_mmc_check+0x4ac>
  4008dc:	3d01      	subs	r5, #1
	while (retry--) {
  4008de:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  4008e2:	f43f adad 	beq.w	400440 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4008e6:	4641      	mov	r1, r8
  4008e8:	4638      	mov	r0, r7
  4008ea:	47b0      	blx	r6
  4008ec:	2800      	cmp	r0, #0
  4008ee:	d0f5      	beq.n	4008dc <sd_mmc_check+0x4ec>
  4008f0:	e10e      	b.n	400b10 <sd_mmc_check+0x720>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4008f2:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4008f4:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008f6:	7d5a      	ldrb	r2, [r3, #21]
  4008f8:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008fa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  4008fe:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  400900:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  400904:	3201      	adds	r2, #1
  400906:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  400908:	605a      	str	r2, [r3, #4]
  40090a:	e601      	b.n	400510 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  40090c:	8919      	ldrh	r1, [r3, #8]
  40090e:	0409      	lsls	r1, r1, #16
  400910:	f241 1037 	movw	r0, #4407	; 0x1137
  400914:	4b16      	ldr	r3, [pc, #88]	; (400970 <sd_mmc_check+0x580>)
  400916:	4798      	blx	r3
  400918:	2800      	cmp	r0, #0
  40091a:	f43f ad91 	beq.w	400440 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  40091e:	2301      	movs	r3, #1
  400920:	9300      	str	r3, [sp, #0]
  400922:	2208      	movs	r2, #8
  400924:	2100      	movs	r1, #0
  400926:	4824      	ldr	r0, [pc, #144]	; (4009b8 <sd_mmc_check+0x5c8>)
  400928:	4d17      	ldr	r5, [pc, #92]	; (400988 <sd_mmc_check+0x598>)
  40092a:	47a8      	blx	r5
  40092c:	2800      	cmp	r0, #0
  40092e:	f43f ad87 	beq.w	400440 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  400932:	2101      	movs	r1, #1
  400934:	a804      	add	r0, sp, #16
  400936:	4b21      	ldr	r3, [pc, #132]	; (4009bc <sd_mmc_check+0x5cc>)
  400938:	4798      	blx	r3
  40093a:	2800      	cmp	r0, #0
  40093c:	f43f ad80 	beq.w	400440 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400940:	4b1f      	ldr	r3, [pc, #124]	; (4009c0 <sd_mmc_check+0x5d0>)
  400942:	4798      	blx	r3
  400944:	2800      	cmp	r0, #0
  400946:	f43f ad7b 	beq.w	400440 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  40094a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40094e:	f003 030f 	and.w	r3, r3, #15
  400952:	2b01      	cmp	r3, #1
  400954:	d036      	beq.n	4009c4 <sd_mmc_check+0x5d4>
  400956:	b133      	cbz	r3, 400966 <sd_mmc_check+0x576>
  400958:	2b02      	cmp	r3, #2
  40095a:	d038      	beq.n	4009ce <sd_mmc_check+0x5de>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  40095c:	4b05      	ldr	r3, [pc, #20]	; (400974 <sd_mmc_check+0x584>)
  40095e:	681b      	ldr	r3, [r3, #0]
  400960:	2210      	movs	r2, #16
  400962:	731a      	strb	r2, [r3, #12]
  400964:	e5e5      	b.n	400532 <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400966:	4b03      	ldr	r3, [pc, #12]	; (400974 <sd_mmc_check+0x584>)
  400968:	681b      	ldr	r3, [r3, #0]
  40096a:	2210      	movs	r2, #16
  40096c:	731a      	strb	r2, [r3, #12]
  40096e:	e5e0      	b.n	400532 <sd_mmc_check+0x142>
  400970:	004010a1 	.word	0x004010a1
  400974:	20000464 	.word	0x20000464
  400978:	00400381 	.word	0x00400381
  40097c:	00401e78 	.word	0x00401e78
  400980:	00401e38 	.word	0x00401e38
  400984:	00081108 	.word	0x00081108
  400988:	00401109 	.word	0x00401109
  40098c:	004011cd 	.word	0x004011cd
  400990:	20000488 	.word	0x20000488
  400994:	00400fb1 	.word	0x00400fb1
  400998:	01b70000 	.word	0x01b70000
  40099c:	01b70200 	.word	0x01b70200
  4009a0:	004010cd 	.word	0x004010cd
  4009a4:	004002c9 	.word	0x004002c9
  4009a8:	00400fbb 	.word	0x00400fbb
  4009ac:	03b90100 	.word	0x03b90100
  4009b0:	03197500 	.word	0x03197500
  4009b4:	01b70100 	.word	0x01b70100
  4009b8:	00081133 	.word	0x00081133
  4009bc:	0040123d 	.word	0x0040123d
  4009c0:	004012a1 	.word	0x004012a1
		sd_mmc_card->version = CARD_VER_SD_1_10;
  4009c4:	4b98      	ldr	r3, [pc, #608]	; (400c28 <sd_mmc_check+0x838>)
  4009c6:	681b      	ldr	r3, [r3, #0]
  4009c8:	221a      	movs	r2, #26
  4009ca:	731a      	strb	r2, [r3, #12]
  4009cc:	e5b1      	b.n	400532 <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  4009ce:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4009d2:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  4009d4:	4b94      	ldr	r3, [pc, #592]	; (400c28 <sd_mmc_check+0x838>)
  4009d6:	681b      	ldr	r3, [r3, #0]
  4009d8:	bf14      	ite	ne
  4009da:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  4009dc:	2220      	moveq	r2, #32
  4009de:	731a      	strb	r2, [r3, #12]
  4009e0:	e5a7      	b.n	400532 <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  4009e2:	f89d 3011 	ldrb.w	r3, [sp, #17]
  4009e6:	2b00      	cmp	r3, #0
  4009e8:	f43f ad2a 	beq.w	400440 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  4009ec:	3302      	adds	r3, #2
  4009ee:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  4009f0:	f509 7380 	add.w	r3, r9, #256	; 0x100
  4009f4:	429e      	cmp	r6, r3
  4009f6:	f63f ad23 	bhi.w	400440 <sd_mmc_check+0x50>
	addr_new = addr_old;
  4009fa:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4009fc:	ab04      	add	r3, sp, #16
  4009fe:	442b      	add	r3, r5
  400a00:	9300      	str	r3, [sp, #0]
  400a02:	4643      	mov	r3, r8
  400a04:	1972      	adds	r2, r6, r5
  400a06:	4641      	mov	r1, r8
  400a08:	4640      	mov	r0, r8
  400a0a:	47b8      	blx	r7
  400a0c:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  400a0e:	2d03      	cmp	r5, #3
  400a10:	d1f4      	bne.n	4009fc <sd_mmc_check+0x60c>
		if (buf[0] == SDIO_CISTPL_END) {
  400a12:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a16:	2bff      	cmp	r3, #255	; 0xff
  400a18:	f43f ad12 	beq.w	400440 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  400a1c:	2b22      	cmp	r3, #34	; 0x22
  400a1e:	d1e0      	bne.n	4009e2 <sd_mmc_check+0x5f2>
  400a20:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400a24:	2b00      	cmp	r3, #0
  400a26:	d1dc      	bne.n	4009e2 <sd_mmc_check+0x5f2>
  400a28:	ad04      	add	r5, sp, #16
  400a2a:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400a2e:	f04f 0800 	mov.w	r8, #0
  400a32:	4f7e      	ldr	r7, [pc, #504]	; (400c2c <sd_mmc_check+0x83c>)
  400a34:	9500      	str	r5, [sp, #0]
  400a36:	4643      	mov	r3, r8
  400a38:	4632      	mov	r2, r6
  400a3a:	4641      	mov	r1, r8
  400a3c:	4640      	mov	r0, r8
  400a3e:	47b8      	blx	r7
		addr_new++;
  400a40:	3601      	adds	r6, #1
  400a42:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  400a44:	454e      	cmp	r6, r9
  400a46:	d1f5      	bne.n	400a34 <sd_mmc_check+0x644>
	tplfe_max_tran_speed = buf[5];
  400a48:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400a4c:	2b32      	cmp	r3, #50	; 0x32
  400a4e:	bf28      	it	cs
  400a50:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  400a52:	4a75      	ldr	r2, [pc, #468]	; (400c28 <sd_mmc_check+0x838>)
  400a54:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  400a56:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  400a5a:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400a5e:	4974      	ldr	r1, [pc, #464]	; (400c30 <sd_mmc_check+0x840>)
  400a60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400a68:	fb03 f301 	mul.w	r3, r3, r1
  400a6c:	4971      	ldr	r1, [pc, #452]	; (400c34 <sd_mmc_check+0x844>)
  400a6e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400a72:	fb03 f301 	mul.w	r3, r3, r1
  400a76:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400a78:	4b6f      	ldr	r3, [pc, #444]	; (400c38 <sd_mmc_check+0x848>)
  400a7a:	7818      	ldrb	r0, [r3, #0]
  400a7c:	4b6f      	ldr	r3, [pc, #444]	; (400c3c <sd_mmc_check+0x84c>)
  400a7e:	4798      	blx	r3
  400a80:	2803      	cmp	r0, #3
  400a82:	d922      	bls.n	400aca <sd_mmc_check+0x6da>
		if (IS_SDIO()) {
  400a84:	4b68      	ldr	r3, [pc, #416]	; (400c28 <sd_mmc_check+0x838>)
  400a86:	681b      	ldr	r3, [r3, #0]
  400a88:	7adb      	ldrb	r3, [r3, #11]
  400a8a:	f013 0f04 	tst.w	r3, #4
  400a8e:	d146      	bne.n	400b1e <sd_mmc_check+0x72e>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a90:	4b65      	ldr	r3, [pc, #404]	; (400c28 <sd_mmc_check+0x838>)
  400a92:	681b      	ldr	r3, [r3, #0]
  400a94:	7ada      	ldrb	r2, [r3, #11]
  400a96:	f012 0f01 	tst.w	r2, #1
  400a9a:	d014      	beq.n	400ac6 <sd_mmc_check+0x6d6>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400a9c:	8919      	ldrh	r1, [r3, #8]
  400a9e:	0409      	lsls	r1, r1, #16
  400aa0:	f241 1037 	movw	r0, #4407	; 0x1137
  400aa4:	4b66      	ldr	r3, [pc, #408]	; (400c40 <sd_mmc_check+0x850>)
  400aa6:	4798      	blx	r3
  400aa8:	2800      	cmp	r0, #0
  400aaa:	f43f acc9 	beq.w	400440 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400aae:	2102      	movs	r1, #2
  400ab0:	f241 1006 	movw	r0, #4358	; 0x1106
  400ab4:	4b62      	ldr	r3, [pc, #392]	; (400c40 <sd_mmc_check+0x850>)
  400ab6:	4798      	blx	r3
  400ab8:	2800      	cmp	r0, #0
  400aba:	f43f acc1 	beq.w	400440 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400abe:	4b5a      	ldr	r3, [pc, #360]	; (400c28 <sd_mmc_check+0x838>)
  400ac0:	681b      	ldr	r3, [r3, #0]
  400ac2:	2204      	movs	r2, #4
  400ac4:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  400ac6:	4b5f      	ldr	r3, [pc, #380]	; (400c44 <sd_mmc_check+0x854>)
  400ac8:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400aca:	4b5f      	ldr	r3, [pc, #380]	; (400c48 <sd_mmc_check+0x858>)
  400acc:	4798      	blx	r3
  400ace:	b180      	cbz	r0, 400af2 <sd_mmc_check+0x702>
		if (IS_SDIO()) {
  400ad0:	4b55      	ldr	r3, [pc, #340]	; (400c28 <sd_mmc_check+0x838>)
  400ad2:	681b      	ldr	r3, [r3, #0]
  400ad4:	7adb      	ldrb	r3, [r3, #11]
  400ad6:	f013 0f04 	tst.w	r3, #4
  400ada:	d141      	bne.n	400b60 <sd_mmc_check+0x770>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400adc:	4b52      	ldr	r3, [pc, #328]	; (400c28 <sd_mmc_check+0x838>)
  400ade:	681b      	ldr	r3, [r3, #0]
  400ae0:	7ada      	ldrb	r2, [r3, #11]
  400ae2:	f012 0f01 	tst.w	r2, #1
  400ae6:	d002      	beq.n	400aee <sd_mmc_check+0x6fe>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400ae8:	7b1b      	ldrb	r3, [r3, #12]
  400aea:	2b10      	cmp	r3, #16
  400aec:	d85d      	bhi.n	400baa <sd_mmc_check+0x7ba>
		sd_mmc_configure_slot();
  400aee:	4b55      	ldr	r3, [pc, #340]	; (400c44 <sd_mmc_check+0x854>)
  400af0:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400af2:	4b4d      	ldr	r3, [pc, #308]	; (400c28 <sd_mmc_check+0x838>)
  400af4:	681b      	ldr	r3, [r3, #0]
  400af6:	7adb      	ldrb	r3, [r3, #11]
  400af8:	f013 0f01 	tst.w	r3, #1
  400afc:	d008      	beq.n	400b10 <sd_mmc_check+0x720>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400afe:	f44f 7100 	mov.w	r1, #512	; 0x200
  400b02:	f241 1010 	movw	r0, #4368	; 0x1110
  400b06:	4b4e      	ldr	r3, [pc, #312]	; (400c40 <sd_mmc_check+0x850>)
  400b08:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400b0a:	2800      	cmp	r0, #0
  400b0c:	f43f ac98 	beq.w	400440 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400b10:	4b45      	ldr	r3, [pc, #276]	; (400c28 <sd_mmc_check+0x838>)
  400b12:	681b      	ldr	r3, [r3, #0]
  400b14:	2200      	movs	r2, #0
  400b16:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  400b18:	4b4c      	ldr	r3, [pc, #304]	; (400c4c <sd_mmc_check+0x85c>)
  400b1a:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400b1c:	e472      	b.n	400404 <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400b1e:	ab04      	add	r3, sp, #16
  400b20:	9300      	str	r3, [sp, #0]
  400b22:	2300      	movs	r3, #0
  400b24:	2208      	movs	r2, #8
  400b26:	4619      	mov	r1, r3
  400b28:	4618      	mov	r0, r3
  400b2a:	4d40      	ldr	r5, [pc, #256]	; (400c2c <sd_mmc_check+0x83c>)
  400b2c:	47a8      	blx	r5
  400b2e:	2800      	cmp	r0, #0
  400b30:	f43f ac86 	beq.w	400440 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400b34:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400b38:	2b00      	cmp	r3, #0
  400b3a:	daa9      	bge.n	400a90 <sd_mmc_check+0x6a0>
	u8_value = SDIO_BUSWIDTH_4B;
  400b3c:	ab14      	add	r3, sp, #80	; 0x50
  400b3e:	2202      	movs	r2, #2
  400b40:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400b44:	9300      	str	r3, [sp, #0]
  400b46:	2301      	movs	r3, #1
  400b48:	2207      	movs	r2, #7
  400b4a:	2100      	movs	r1, #0
  400b4c:	4618      	mov	r0, r3
  400b4e:	47a8      	blx	r5
  400b50:	2800      	cmp	r0, #0
  400b52:	f43f ac75 	beq.w	400440 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400b56:	4b34      	ldr	r3, [pc, #208]	; (400c28 <sd_mmc_check+0x838>)
  400b58:	681b      	ldr	r3, [r3, #0]
  400b5a:	2204      	movs	r2, #4
  400b5c:	735a      	strb	r2, [r3, #13]
  400b5e:	e797      	b.n	400a90 <sd_mmc_check+0x6a0>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400b60:	ab04      	add	r3, sp, #16
  400b62:	9300      	str	r3, [sp, #0]
  400b64:	2300      	movs	r3, #0
  400b66:	2213      	movs	r2, #19
  400b68:	4619      	mov	r1, r3
  400b6a:	4618      	mov	r0, r3
  400b6c:	4d2f      	ldr	r5, [pc, #188]	; (400c2c <sd_mmc_check+0x83c>)
  400b6e:	47a8      	blx	r5
  400b70:	2800      	cmp	r0, #0
  400b72:	f43f ac65 	beq.w	400440 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400b76:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400b7a:	f013 0f01 	tst.w	r3, #1
  400b7e:	d0ad      	beq.n	400adc <sd_mmc_check+0x6ec>
	u8_value = SDIO_EHS;
  400b80:	ab14      	add	r3, sp, #80	; 0x50
  400b82:	2202      	movs	r2, #2
  400b84:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400b88:	9300      	str	r3, [sp, #0]
  400b8a:	2301      	movs	r3, #1
  400b8c:	2213      	movs	r2, #19
  400b8e:	2100      	movs	r1, #0
  400b90:	4618      	mov	r0, r3
  400b92:	47a8      	blx	r5
  400b94:	2800      	cmp	r0, #0
  400b96:	f43f ac53 	beq.w	400440 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400b9a:	4b23      	ldr	r3, [pc, #140]	; (400c28 <sd_mmc_check+0x838>)
  400b9c:	681b      	ldr	r3, [r3, #0]
  400b9e:	2201      	movs	r2, #1
  400ba0:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400ba2:	681a      	ldr	r2, [r3, #0]
  400ba4:	0052      	lsls	r2, r2, #1
  400ba6:	601a      	str	r2, [r3, #0]
  400ba8:	e798      	b.n	400adc <sd_mmc_check+0x6ec>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400baa:	2540      	movs	r5, #64	; 0x40
  400bac:	462a      	mov	r2, r5
  400bae:	2100      	movs	r1, #0
  400bb0:	a804      	add	r0, sp, #16
  400bb2:	4b27      	ldr	r3, [pc, #156]	; (400c50 <sd_mmc_check+0x860>)
  400bb4:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400bb6:	2301      	movs	r3, #1
  400bb8:	9300      	str	r3, [sp, #0]
  400bba:	462a      	mov	r2, r5
  400bbc:	4925      	ldr	r1, [pc, #148]	; (400c54 <sd_mmc_check+0x864>)
  400bbe:	4826      	ldr	r0, [pc, #152]	; (400c58 <sd_mmc_check+0x868>)
  400bc0:	4d26      	ldr	r5, [pc, #152]	; (400c5c <sd_mmc_check+0x86c>)
  400bc2:	47a8      	blx	r5
  400bc4:	2800      	cmp	r0, #0
  400bc6:	f43f ac3b 	beq.w	400440 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400bca:	2101      	movs	r1, #1
  400bcc:	a804      	add	r0, sp, #16
  400bce:	4b24      	ldr	r3, [pc, #144]	; (400c60 <sd_mmc_check+0x870>)
  400bd0:	4798      	blx	r3
  400bd2:	2800      	cmp	r0, #0
  400bd4:	f43f ac34 	beq.w	400440 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400bd8:	4b22      	ldr	r3, [pc, #136]	; (400c64 <sd_mmc_check+0x874>)
  400bda:	4798      	blx	r3
  400bdc:	2800      	cmp	r0, #0
  400bde:	f43f ac2f 	beq.w	400440 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400be2:	4b21      	ldr	r3, [pc, #132]	; (400c68 <sd_mmc_check+0x878>)
  400be4:	4798      	blx	r3
  400be6:	f010 0f80 	tst.w	r0, #128	; 0x80
  400bea:	f47f ac29 	bne.w	400440 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400bee:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400bf2:	f003 030f 	and.w	r3, r3, #15
  400bf6:	2b0f      	cmp	r3, #15
  400bf8:	f43f af79 	beq.w	400aee <sd_mmc_check+0x6fe>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400bfc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400c00:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400c04:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400c08:	f47f ac1a 	bne.w	400440 <sd_mmc_check+0x50>
	driver_send_clock();
  400c0c:	4b17      	ldr	r3, [pc, #92]	; (400c6c <sd_mmc_check+0x87c>)
  400c0e:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400c10:	4b05      	ldr	r3, [pc, #20]	; (400c28 <sd_mmc_check+0x838>)
  400c12:	681b      	ldr	r3, [r3, #0]
  400c14:	2201      	movs	r2, #1
  400c16:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400c18:	681a      	ldr	r2, [r3, #0]
  400c1a:	0052      	lsls	r2, r2, #1
  400c1c:	601a      	str	r2, [r3, #0]
  400c1e:	e766      	b.n	400aee <sd_mmc_check+0x6fe>
	*v2 = 0;
  400c20:	f04f 0900 	mov.w	r9, #0
  400c24:	e41e      	b.n	400464 <sd_mmc_check+0x74>
  400c26:	bf00      	nop
  400c28:	20000464 	.word	0x20000464
  400c2c:	00400349 	.word	0x00400349
  400c30:	00401e78 	.word	0x00401e78
  400c34:	00401e94 	.word	0x00401e94
  400c38:	20000488 	.word	0x20000488
  400c3c:	00400fb1 	.word	0x00400fb1
  400c40:	004010a1 	.word	0x004010a1
  400c44:	004002c9 	.word	0x004002c9
  400c48:	00400fbb 	.word	0x00400fbb
  400c4c:	004003b5 	.word	0x004003b5
  400c50:	00401c7d 	.word	0x00401c7d
  400c54:	80ffff01 	.word	0x80ffff01
  400c58:	00081106 	.word	0x00081106
  400c5c:	00401109 	.word	0x00401109
  400c60:	0040123d 	.word	0x0040123d
  400c64:	004012a1 	.word	0x004012a1
  400c68:	004010cd 	.word	0x004010cd
  400c6c:	0040107d 	.word	0x0040107d

00400c70 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c70:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c72:	4b05      	ldr	r3, [pc, #20]	; (400c88 <sd_mmc_get_type+0x18>)
  400c74:	4798      	blx	r3
  400c76:	b108      	cbz	r0, 400c7c <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400c78:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400c7a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c7c:	4b03      	ldr	r3, [pc, #12]	; (400c8c <sd_mmc_get_type+0x1c>)
  400c7e:	4798      	blx	r3
	return sd_mmc_card->type;
  400c80:	4b03      	ldr	r3, [pc, #12]	; (400c90 <sd_mmc_get_type+0x20>)
  400c82:	681b      	ldr	r3, [r3, #0]
  400c84:	7ad8      	ldrb	r0, [r3, #11]
  400c86:	bd08      	pop	{r3, pc}
  400c88:	004002f1 	.word	0x004002f1
  400c8c:	004003b5 	.word	0x004003b5
  400c90:	20000464 	.word	0x20000464

00400c94 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400c94:	b510      	push	{r4, lr}
  400c96:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400c98:	4b0f      	ldr	r3, [pc, #60]	; (400cd8 <sd_mmc_test_unit_ready+0x44>)
  400c9a:	4798      	blx	r3
  400c9c:	2801      	cmp	r0, #1
  400c9e:	d018      	beq.n	400cd2 <sd_mmc_test_unit_ready+0x3e>
  400ca0:	b118      	cbz	r0, 400caa <sd_mmc_test_unit_ready+0x16>
  400ca2:	2802      	cmp	r0, #2
  400ca4:	d010      	beq.n	400cc8 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400ca6:	2001      	movs	r0, #1
  400ca8:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400caa:	4b0c      	ldr	r3, [pc, #48]	; (400cdc <sd_mmc_test_unit_ready+0x48>)
  400cac:	5d1b      	ldrb	r3, [r3, r4]
  400cae:	b10b      	cbz	r3, 400cb4 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400cb0:	2002      	movs	r0, #2
	}
}
  400cb2:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400cb4:	4620      	mov	r0, r4
  400cb6:	4b0a      	ldr	r3, [pc, #40]	; (400ce0 <sd_mmc_test_unit_ready+0x4c>)
  400cb8:	4798      	blx	r3
  400cba:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400cbe:	2800      	cmp	r0, #0
  400cc0:	bf14      	ite	ne
  400cc2:	2000      	movne	r0, #0
  400cc4:	2002      	moveq	r0, #2
  400cc6:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400cc8:	2200      	movs	r2, #0
  400cca:	4b04      	ldr	r3, [pc, #16]	; (400cdc <sd_mmc_test_unit_ready+0x48>)
  400ccc:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400cce:	2002      	movs	r0, #2
  400cd0:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400cd2:	2003      	movs	r0, #3
  400cd4:	bd10      	pop	{r4, pc}
  400cd6:	bf00      	nop
  400cd8:	004003f1 	.word	0x004003f1
  400cdc:	2000048c 	.word	0x2000048c
  400ce0:	00400c71 	.word	0x00400c71

00400ce4 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400ce4:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400ce6:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  400cea:	4b70      	ldr	r3, [pc, #448]	; (400eac <board_init+0x1c8>)
  400cec:	605c      	str	r4, [r3, #4]
  400cee:	2009      	movs	r0, #9
  400cf0:	4d6f      	ldr	r5, [pc, #444]	; (400eb0 <board_init+0x1cc>)
  400cf2:	47a8      	blx	r5
  400cf4:	200a      	movs	r0, #10
  400cf6:	47a8      	blx	r5
  400cf8:	200b      	movs	r0, #11
  400cfa:	47a8      	blx	r5
  400cfc:	200c      	movs	r0, #12
  400cfe:	47a8      	blx	r5
  400d00:	200d      	movs	r0, #13
  400d02:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d04:	4b6b      	ldr	r3, [pc, #428]	; (400eb4 <board_init+0x1d0>)
  400d06:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400d0a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d10:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d12:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400d16:	2104      	movs	r1, #4
  400d18:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d1a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400d1e:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d20:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d24:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400d26:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  400d28:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400d2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400d2e:	f022 0204 	bic.w	r2, r2, #4
  400d32:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400d34:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d36:	f022 0204 	bic.w	r2, r2, #4
  400d3a:	675a      	str	r2, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400d3c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400d40:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400d44:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400d48:	4a5b      	ldr	r2, [pc, #364]	; (400eb8 <board_init+0x1d4>)
  400d4a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  400d4e:	6610      	str	r0, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400d50:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d54:	6550      	str	r0, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d56:	6250      	str	r0, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d58:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400d5c:	6f15      	ldr	r5, [r2, #112]	; 0x70
  400d5e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  400d62:	6715      	str	r5, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400d64:	6f55      	ldr	r5, [r2, #116]	; 0x74
  400d66:	4305      	orrs	r5, r0
  400d68:	6755      	str	r5, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400d6a:	6050      	str	r0, [r2, #4]
		base->PIO_PUDR = mask;
  400d6c:	6614      	str	r4, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400d6e:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d72:	6554      	str	r4, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d74:	6254      	str	r4, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d76:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400d7a:	6f10      	ldr	r0, [r2, #112]	; 0x70
  400d7c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  400d80:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400d82:	6f50      	ldr	r0, [r2, #116]	; 0x74
  400d84:	4320      	orrs	r0, r4
  400d86:	6750      	str	r0, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400d88:	6054      	str	r4, [r2, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d8a:	484c      	ldr	r0, [pc, #304]	; (400ebc <board_init+0x1d8>)
  400d8c:	6101      	str	r1, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d8e:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d92:	2208      	movs	r2, #8
  400d94:	6102      	str	r2, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d96:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
		base->PIO_PUDR = mask;
  400d9a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d9e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400da0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400da4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400da6:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400da8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400dac:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400dae:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  400db2:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400db4:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400db6:	4308      	orrs	r0, r1
  400db8:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400dba:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400dbc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400dc0:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400dc2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400dc6:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400dc8:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400dca:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400dce:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400dd0:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  400dd4:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400dd6:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400dd8:	4308      	orrs	r0, r1
  400dda:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ddc:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400dde:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400de2:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400de4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400de8:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400dea:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400dec:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400df0:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400df2:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  400df6:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400df8:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400dfa:	4308      	orrs	r0, r1
  400dfc:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400dfe:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400e00:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  400e04:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e06:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e0a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e0c:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e0e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400e12:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400e14:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  400e18:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400e1a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400e1c:	4308      	orrs	r0, r1
  400e1e:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e20:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400e22:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400e26:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e28:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e2c:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e2e:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e30:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400e34:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400e36:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  400e3a:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400e3c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400e3e:	4308      	orrs	r0, r1
  400e40:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e42:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400e44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e48:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e4a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e4e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e50:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e52:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400e56:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400e58:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  400e5c:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400e5e:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400e60:	4308      	orrs	r0, r1
  400e62:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e64:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  400e66:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e6c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e6e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400e74:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e76:	f021 0108 	bic.w	r1, r1, #8
  400e7a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e7c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400e7e:	f021 0108 	bic.w	r1, r1, #8
  400e82:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400e84:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400e86:	2210      	movs	r2, #16
  400e88:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e8e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400e90:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400e96:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e98:	f021 0110 	bic.w	r1, r1, #16
  400e9c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e9e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400ea0:	f021 0110 	bic.w	r1, r1, #16
  400ea4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400ea6:	605a      	str	r2, [r3, #4]
  400ea8:	bd38      	pop	{r3, r4, r5, pc}
  400eaa:	bf00      	nop
  400eac:	400e1850 	.word	0x400e1850
  400eb0:	00401a35 	.word	0x00401a35
  400eb4:	400e1400 	.word	0x400e1400
  400eb8:	400e1200 	.word	0x400e1200
  400ebc:	400e1600 	.word	0x400e1600

00400ec0 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  400ec0:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  400ec2:	4b08      	ldr	r3, [pc, #32]	; (400ee4 <hsmci_reset+0x24>)
  400ec4:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  400ec6:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  400ec8:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  400eca:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  400ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  400ece:	2680      	movs	r6, #128	; 0x80
  400ed0:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  400ed2:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  400ed4:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  400ed6:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  400ed8:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  400eda:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  400edc:	2205      	movs	r2, #5
  400ede:	601a      	str	r2, [r3, #0]
}
  400ee0:	bc70      	pop	{r4, r5, r6}
  400ee2:	4770      	bx	lr
  400ee4:	40080000 	.word	0x40080000

00400ee8 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  400ee8:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  400eea:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  400eee:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  400ef0:	f411 7f80 	tst.w	r1, #256	; 0x100
  400ef4:	d004      	beq.n	400f00 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  400ef6:	f411 6f00 	tst.w	r1, #2048	; 0x800
  400efa:	d00d      	beq.n	400f18 <hsmci_send_cmd_execute+0x30>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  400efc:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  400f00:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  400f04:	bf18      	it	ne
  400f06:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  400f0a:	4b1d      	ldr	r3, [pc, #116]	; (400f80 <hsmci_send_cmd_execute+0x98>)
  400f0c:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  400f0e:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  400f10:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  400f12:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  400f16:	e00d      	b.n	400f34 <hsmci_send_cmd_execute+0x4c>
		} else if (cmd & SDMMC_RESP_BUSY) {
  400f18:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  400f1c:	bf14      	ite	ne
  400f1e:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  400f22:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  400f26:	e7eb      	b.n	400f00 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400f28:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  400f2c:	d10c      	bne.n	400f48 <hsmci_send_cmd_execute+0x60>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  400f2e:	f013 0f01 	tst.w	r3, #1
  400f32:	d10d      	bne.n	400f50 <hsmci_send_cmd_execute+0x68>
		sr = HSMCI->HSMCI_SR;
  400f34:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  400f36:	2a00      	cmp	r2, #0
  400f38:	d0f6      	beq.n	400f28 <hsmci_send_cmd_execute+0x40>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  400f3a:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  400f3e:	d0f6      	beq.n	400f2e <hsmci_send_cmd_execute+0x46>
				hsmci_reset();
  400f40:	4b10      	ldr	r3, [pc, #64]	; (400f84 <hsmci_send_cmd_execute+0x9c>)
  400f42:	4798      	blx	r3
				return false;
  400f44:	2000      	movs	r0, #0
  400f46:	bd08      	pop	{r3, pc}
				hsmci_reset();
  400f48:	4b0e      	ldr	r3, [pc, #56]	; (400f84 <hsmci_send_cmd_execute+0x9c>)
  400f4a:	4798      	blx	r3
				return false;
  400f4c:	2000      	movs	r0, #0
  400f4e:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  400f50:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  400f54:	d103      	bne.n	400f5e <hsmci_send_cmd_execute+0x76>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  400f56:	2001      	movs	r0, #1
  400f58:	bd08      	pop	{r3, pc}
	return true;
  400f5a:	2001      	movs	r0, #1
  400f5c:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  400f5e:	4b08      	ldr	r3, [pc, #32]	; (400f80 <hsmci_send_cmd_execute+0x98>)
  400f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f62:	f04f 32ff 	mov.w	r2, #4294967295
  400f66:	4906      	ldr	r1, [pc, #24]	; (400f80 <hsmci_send_cmd_execute+0x98>)
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  400f68:	f003 0330 	and.w	r3, r3, #48	; 0x30
  400f6c:	2b20      	cmp	r3, #32
  400f6e:	d0f4      	beq.n	400f5a <hsmci_send_cmd_execute+0x72>
		sr = HSMCI->HSMCI_SR;
  400f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  400f72:	3a01      	subs	r2, #1
  400f74:	d1f8      	bne.n	400f68 <hsmci_send_cmd_execute+0x80>
			hsmci_reset();
  400f76:	4b03      	ldr	r3, [pc, #12]	; (400f84 <hsmci_send_cmd_execute+0x9c>)
  400f78:	4798      	blx	r3
			return false;
  400f7a:	2000      	movs	r0, #0
  400f7c:	bd08      	pop	{r3, pc}
  400f7e:	bf00      	nop
  400f80:	40080000 	.word	0x40080000
  400f84:	00400ec1 	.word	0x00400ec1

00400f88 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  400f88:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  400f8a:	2010      	movs	r0, #16
  400f8c:	4b06      	ldr	r3, [pc, #24]	; (400fa8 <hsmci_init+0x20>)
  400f8e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_XDMAC);
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  400f90:	4b06      	ldr	r3, [pc, #24]	; (400fac <hsmci_init+0x24>)
  400f92:	2272      	movs	r2, #114	; 0x72
  400f94:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  400f96:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  400f98:	2211      	movs	r2, #17
  400f9a:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  400f9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  400fa0:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  400fa2:	2205      	movs	r2, #5
  400fa4:	601a      	str	r2, [r3, #0]
  400fa6:	bd08      	pop	{r3, pc}
  400fa8:	00401a35 	.word	0x00401a35
  400fac:	40080000 	.word	0x40080000

00400fb0 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  400fb0:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  400fb2:	bf0c      	ite	eq
  400fb4:	2004      	moveq	r0, #4
  400fb6:	2000      	movne	r0, #0
  400fb8:	4770      	bx	lr

00400fba <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  400fba:	2001      	movs	r0, #1
  400fbc:	4770      	bx	lr
	...

00400fc0 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  400fc0:	b363      	cbz	r3, 40101c <hsmci_select_device+0x5c>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  400fc2:	482a      	ldr	r0, [pc, #168]	; (40106c <hsmci_select_device+0xac>)
  400fc4:	6d43      	ldr	r3, [r0, #84]	; 0x54
  400fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400fca:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  400fcc:	4b28      	ldr	r3, [pc, #160]	; (401070 <hsmci_select_device+0xb0>)
  400fce:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  400fd2:	d333      	bcc.n	40103c <hsmci_select_device+0x7c>
{
  400fd4:	b410      	push	{r4}
		div = (mck / speed) - 2;
  400fd6:	4827      	ldr	r0, [pc, #156]	; (401074 <hsmci_select_device+0xb4>)
  400fd8:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  400fdc:	fb01 0113 	mls	r1, r1, r3, r0
  400fe0:	bb11      	cbnz	r1, 401028 <hsmci_select_device+0x68>
		div = (mck / speed) - 2;
  400fe2:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  400fe4:	4921      	ldr	r1, [pc, #132]	; (40106c <hsmci_select_device+0xac>)
  400fe6:	6848      	ldr	r0, [r1, #4]
  400fe8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  400fec:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  400fee:	684c      	ldr	r4, [r1, #4]
  400ff0:	f3c3 0047 	ubfx	r0, r3, #1, #8
  400ff4:	4320      	orrs	r0, r4
  400ff6:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  400ff8:	f013 0f01 	tst.w	r3, #1
  400ffc:	d016      	beq.n	40102c <hsmci_select_device+0x6c>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  400ffe:	684b      	ldr	r3, [r1, #4]
  401000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401004:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  401006:	2a04      	cmp	r2, #4
  401008:	d016      	beq.n	401038 <hsmci_select_device+0x78>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  40100a:	2a08      	cmp	r2, #8
  40100c:	bf0c      	ite	eq
  40100e:	22c0      	moveq	r2, #192	; 0xc0
  401010:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401012:	4b16      	ldr	r3, [pc, #88]	; (40106c <hsmci_select_device+0xac>)
  401014:	60da      	str	r2, [r3, #12]
}
  401016:	f85d 4b04 	ldr.w	r4, [sp], #4
  40101a:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  40101c:	4813      	ldr	r0, [pc, #76]	; (40106c <hsmci_select_device+0xac>)
  40101e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401024:	6543      	str	r3, [r0, #84]	; 0x54
  401026:	e7d1      	b.n	400fcc <hsmci_select_device+0xc>
			div++;
  401028:	3b01      	subs	r3, #1
  40102a:	e7db      	b.n	400fe4 <hsmci_select_device+0x24>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  40102c:	490f      	ldr	r1, [pc, #60]	; (40106c <hsmci_select_device+0xac>)
  40102e:	684b      	ldr	r3, [r1, #4]
  401030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401034:	604b      	str	r3, [r1, #4]
  401036:	e7e6      	b.n	401006 <hsmci_select_device+0x46>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401038:	2280      	movs	r2, #128	; 0x80
  40103a:	e7ea      	b.n	401012 <hsmci_select_device+0x52>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40103c:	4b0b      	ldr	r3, [pc, #44]	; (40106c <hsmci_select_device+0xac>)
  40103e:	6859      	ldr	r1, [r3, #4]
  401040:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  401044:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401046:	6859      	ldr	r1, [r3, #4]
  401048:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  40104a:	4908      	ldr	r1, [pc, #32]	; (40106c <hsmci_select_device+0xac>)
  40104c:	684b      	ldr	r3, [r1, #4]
  40104e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401052:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  401054:	2a04      	cmp	r2, #4
  401056:	d006      	beq.n	401066 <hsmci_select_device+0xa6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  401058:	2a08      	cmp	r2, #8
  40105a:	bf0c      	ite	eq
  40105c:	22c0      	moveq	r2, #192	; 0xc0
  40105e:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401060:	4b02      	ldr	r3, [pc, #8]	; (40106c <hsmci_select_device+0xac>)
  401062:	60da      	str	r2, [r3, #12]
  401064:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401066:	2280      	movs	r2, #128	; 0x80
  401068:	e7fa      	b.n	401060 <hsmci_select_device+0xa0>
  40106a:	bf00      	nop
  40106c:	40080000 	.word	0x40080000
  401070:	05b8d7ff 	.word	0x05b8d7ff
  401074:	05b8d800 	.word	0x05b8d800

00401078 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  401078:	4770      	bx	lr
	...

0040107c <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40107c:	4b07      	ldr	r3, [pc, #28]	; (40109c <hsmci_send_clock+0x20>)
  40107e:	685a      	ldr	r2, [r3, #4]
  401080:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401084:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  401086:	2200      	movs	r2, #0
  401088:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  40108a:	f44f 6210 	mov.w	r2, #2304	; 0x900
  40108e:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  401090:	461a      	mov	r2, r3
  401092:	6c13      	ldr	r3, [r2, #64]	; 0x40
  401094:	f013 0f01 	tst.w	r3, #1
  401098:	d0fb      	beq.n	401092 <hsmci_send_clock+0x16>
}
  40109a:	4770      	bx	lr
  40109c:	40080000 	.word	0x40080000

004010a0 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  4010a0:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4010a2:	4b08      	ldr	r3, [pc, #32]	; (4010c4 <hsmci_send_cmd+0x24>)
  4010a4:	685a      	ldr	r2, [r3, #4]
  4010a6:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4010aa:	605a      	str	r2, [r3, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  4010ac:	685a      	ldr	r2, [r3, #4]
  4010ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  4010b2:	605a      	str	r2, [r3, #4]
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  4010b4:	2400      	movs	r4, #0
  4010b6:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  4010b8:	460a      	mov	r2, r1
  4010ba:	4601      	mov	r1, r0
  4010bc:	4620      	mov	r0, r4
  4010be:	4b02      	ldr	r3, [pc, #8]	; (4010c8 <hsmci_send_cmd+0x28>)
  4010c0:	4798      	blx	r3
}
  4010c2:	bd10      	pop	{r4, pc}
  4010c4:	40080000 	.word	0x40080000
  4010c8:	00400ee9 	.word	0x00400ee9

004010cc <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  4010cc:	4b01      	ldr	r3, [pc, #4]	; (4010d4 <hsmci_get_response+0x8>)
  4010ce:	6a18      	ldr	r0, [r3, #32]
}
  4010d0:	4770      	bx	lr
  4010d2:	bf00      	nop
  4010d4:	40080000 	.word	0x40080000

004010d8 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  4010d8:	b410      	push	{r4}
  4010da:	1d03      	adds	r3, r0, #4
  4010dc:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  4010de:	4c09      	ldr	r4, [pc, #36]	; (401104 <hsmci_get_response_128+0x2c>)
  4010e0:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  4010e2:	0e11      	lsrs	r1, r2, #24
  4010e4:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  4010e8:	0c11      	lsrs	r1, r2, #16
  4010ea:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  4010ee:	0a11      	lsrs	r1, r2, #8
  4010f0:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  4010f4:	f803 2c01 	strb.w	r2, [r3, #-1]
  4010f8:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  4010fa:	4283      	cmp	r3, r0
  4010fc:	d1f0      	bne.n	4010e0 <hsmci_get_response_128+0x8>
		response++;
	}
}
  4010fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  401102:	4770      	bx	lr
  401104:	40080000 	.word	0x40080000

00401108 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  401108:	b570      	push	{r4, r5, r6, lr}
  40110a:	f89d 4010 	ldrb.w	r4, [sp, #16]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  40110e:	b374      	cbz	r4, 40116e <hsmci_adtc_start+0x66>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  401110:	4d29      	ldr	r5, [pc, #164]	; (4011b8 <hsmci_adtc_start+0xb0>)
  401112:	686c      	ldr	r4, [r5, #4]
  401114:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  401118:	606c      	str	r4, [r5, #4]
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  40111a:	4d27      	ldr	r5, [pc, #156]	; (4011b8 <hsmci_adtc_start+0xb0>)
  40111c:	686c      	ldr	r4, [r5, #4]
  40111e:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  401122:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  401124:	f012 0f03 	tst.w	r2, #3
  401128:	d027      	beq.n	40117a <hsmci_adtc_start+0x72>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40112a:	686c      	ldr	r4, [r5, #4]
  40112c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  401130:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  401132:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  401136:	2c00      	cmp	r4, #0
  401138:	bf14      	ite	ne
  40113a:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  40113e:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  401142:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  401146:	d11e      	bne.n	401186 <hsmci_adtc_start+0x7e>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  401148:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  40114c:	4e1a      	ldr	r6, [pc, #104]	; (4011b8 <hsmci_adtc_start+0xb0>)
  40114e:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  401150:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  401154:	d12a      	bne.n	4011ac <hsmci_adtc_start+0xa4>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  401156:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  40115a:	d12a      	bne.n	4011b2 <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  40115c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  401160:	d117      	bne.n	401192 <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  401162:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  401166:	bf18      	it	ne
  401168:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  40116c:	e011      	b.n	401192 <hsmci_adtc_start+0x8a>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  40116e:	4d12      	ldr	r5, [pc, #72]	; (4011b8 <hsmci_adtc_start+0xb0>)
  401170:	686c      	ldr	r4, [r5, #4]
  401172:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
  401176:	606c      	str	r4, [r5, #4]
  401178:	e7cf      	b.n	40111a <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40117a:	4d0f      	ldr	r5, [pc, #60]	; (4011b8 <hsmci_adtc_start+0xb0>)
  40117c:	686c      	ldr	r4, [r5, #4]
  40117e:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  401182:	606c      	str	r4, [r5, #4]
  401184:	e7d5      	b.n	401132 <hsmci_adtc_start+0x2a>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  401186:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  40118a:	f3c2 0508 	ubfx	r5, r2, #0, #9
  40118e:	4e0a      	ldr	r6, [pc, #40]	; (4011b8 <hsmci_adtc_start+0xb0>)
  401190:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  401192:	2600      	movs	r6, #0
  401194:	4d09      	ldr	r5, [pc, #36]	; (4011bc <hsmci_adtc_start+0xb4>)
  401196:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  401198:	4d09      	ldr	r5, [pc, #36]	; (4011c0 <hsmci_adtc_start+0xb8>)
  40119a:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  40119c:	4a09      	ldr	r2, [pc, #36]	; (4011c4 <hsmci_adtc_start+0xbc>)
  40119e:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  4011a0:	460a      	mov	r2, r1
  4011a2:	4601      	mov	r1, r0
  4011a4:	4620      	mov	r0, r4
  4011a6:	4b08      	ldr	r3, [pc, #32]	; (4011c8 <hsmci_adtc_start+0xc0>)
  4011a8:	4798      	blx	r3
}
  4011aa:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  4011ac:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  4011b0:	e7ef      	b.n	401192 <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  4011b2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4011b6:	e7ec      	b.n	401192 <hsmci_adtc_start+0x8a>
  4011b8:	40080000 	.word	0x40080000
  4011bc:	20000494 	.word	0x20000494
  4011c0:	2000048e 	.word	0x2000048e
  4011c4:	20000490 	.word	0x20000490
  4011c8:	00400ee9 	.word	0x00400ee9

004011cc <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  4011cc:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  4011ce:	4915      	ldr	r1, [pc, #84]	; (401224 <hsmci_read_word+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4011d0:	4a15      	ldr	r2, [pc, #84]	; (401228 <hsmci_read_word+0x5c>)
		sr = HSMCI->HSMCI_SR;
  4011d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4011d4:	4213      	tst	r3, r2
  4011d6:	d11b      	bne.n	401210 <hsmci_read_word+0x44>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  4011d8:	f013 0f02 	tst.w	r3, #2
  4011dc:	d0f9      	beq.n	4011d2 <hsmci_read_word+0x6>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  4011de:	4b11      	ldr	r3, [pc, #68]	; (401224 <hsmci_read_word+0x58>)
  4011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011e2:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  4011e4:	4a11      	ldr	r2, [pc, #68]	; (40122c <hsmci_read_word+0x60>)
  4011e6:	6813      	ldr	r3, [r2, #0]
  4011e8:	3304      	adds	r3, #4
  4011ea:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4011ec:	4a10      	ldr	r2, [pc, #64]	; (401230 <hsmci_read_word+0x64>)
  4011ee:	8811      	ldrh	r1, [r2, #0]
  4011f0:	4a10      	ldr	r2, [pc, #64]	; (401234 <hsmci_read_word+0x68>)
  4011f2:	8812      	ldrh	r2, [r2, #0]
  4011f4:	fb02 f201 	mul.w	r2, r2, r1
  4011f8:	4293      	cmp	r3, r2
  4011fa:	d311      	bcc.n	401220 <hsmci_read_word+0x54>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4011fc:	4909      	ldr	r1, [pc, #36]	; (401224 <hsmci_read_word+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4011fe:	4a0a      	ldr	r2, [pc, #40]	; (401228 <hsmci_read_word+0x5c>)
		sr = HSMCI->HSMCI_SR;
  401200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401202:	4213      	tst	r3, r2
  401204:	d108      	bne.n	401218 <hsmci_read_word+0x4c>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401206:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  40120a:	d0f9      	beq.n	401200 <hsmci_read_word+0x34>
	return true;
  40120c:	2001      	movs	r0, #1
  40120e:	bd08      	pop	{r3, pc}
			hsmci_reset();
  401210:	4b09      	ldr	r3, [pc, #36]	; (401238 <hsmci_read_word+0x6c>)
  401212:	4798      	blx	r3
			return false;
  401214:	2000      	movs	r0, #0
  401216:	bd08      	pop	{r3, pc}
			hsmci_reset();
  401218:	4b07      	ldr	r3, [pc, #28]	; (401238 <hsmci_read_word+0x6c>)
  40121a:	4798      	blx	r3
			return false;
  40121c:	2000      	movs	r0, #0
  40121e:	bd08      	pop	{r3, pc}
		return true;
  401220:	2001      	movs	r0, #1
}
  401222:	bd08      	pop	{r3, pc}
  401224:	40080000 	.word	0x40080000
  401228:	c0600000 	.word	0xc0600000
  40122c:	20000494 	.word	0x20000494
  401230:	2000048e 	.word	0x2000048e
  401234:	20000490 	.word	0x20000490
  401238:	00400ec1 	.word	0x00400ec1

0040123c <hsmci_start_read_blocks>:
#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  40123c:	4b15      	ldr	r3, [pc, #84]	; (401294 <hsmci_start_read_blocks+0x58>)
  40123e:	881b      	ldrh	r3, [r3, #0]
  401240:	fb03 f101 	mul.w	r1, r3, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  401244:	f010 0f03 	tst.w	r0, #3
  401248:	d102      	bne.n	401250 <hsmci_start_read_blocks+0x14>
  40124a:	f013 0f03 	tst.w	r3, #3
  40124e:	d01b      	beq.n	401288 <hsmci_start_read_blocks+0x4c>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401250:	4a11      	ldr	r2, [pc, #68]	; (401298 <hsmci_start_read_blocks+0x5c>)
  401252:	6853      	ldr	r3, [r2, #4]
  401254:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401258:	6053      	str	r3, [r2, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  40125a:	4b0f      	ldr	r3, [pc, #60]	; (401298 <hsmci_start_read_blocks+0x5c>)
  40125c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  401260:	685b      	ldr	r3, [r3, #4]
			nb_data : nb_data / 4;
  401262:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401266:	bf0c      	ite	eq
  401268:	088b      	lsreq	r3, r1, #2
  40126a:	460b      	movne	r3, r1
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  40126c:	4a0a      	ldr	r2, [pc, #40]	; (401298 <hsmci_start_read_blocks+0x5c>)
  40126e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	HSMCI->HSMCI_RNCR = 0;
  401272:	2300      	movs	r3, #0
  401274:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  401278:	2001      	movs	r0, #1
  40127a:	f8c2 0120 	str.w	r0, [r2, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  40127e:	4a07      	ldr	r2, [pc, #28]	; (40129c <hsmci_start_read_blocks+0x60>)
  401280:	6813      	ldr	r3, [r2, #0]
  401282:	440b      	add	r3, r1
  401284:	6013      	str	r3, [r2, #0]
	return true;
}
  401286:	4770      	bx	lr
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401288:	4a03      	ldr	r2, [pc, #12]	; (401298 <hsmci_start_read_blocks+0x5c>)
  40128a:	6853      	ldr	r3, [r2, #4]
  40128c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401290:	6053      	str	r3, [r2, #4]
  401292:	e7e2      	b.n	40125a <hsmci_start_read_blocks+0x1e>
  401294:	2000048e 	.word	0x2000048e
  401298:	40080000 	.word	0x40080000
  40129c:	20000494 	.word	0x20000494

004012a0 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  4012a0:	b508      	push	{r3, lr}
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4012a2:	4915      	ldr	r1, [pc, #84]	; (4012f8 <hsmci_wait_end_of_read_blocks+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4012a4:	4a15      	ldr	r2, [pc, #84]	; (4012fc <hsmci_wait_end_of_read_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  4012a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4012a8:	4213      	tst	r3, r2
  4012aa:	d116      	bne.n	4012da <hsmci_wait_end_of_read_blocks+0x3a>
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			hsmci_reset();
			return false;
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  4012ac:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4012b0:	d0f9      	beq.n	4012a6 <hsmci_wait_end_of_read_blocks+0x6>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  4012b2:	4b13      	ldr	r3, [pc, #76]	; (401300 <hsmci_wait_end_of_read_blocks+0x60>)
  4012b4:	881a      	ldrh	r2, [r3, #0]
  4012b6:	4b13      	ldr	r3, [pc, #76]	; (401304 <hsmci_wait_end_of_read_blocks+0x64>)
  4012b8:	881b      	ldrh	r3, [r3, #0]
  4012ba:	fb03 f302 	mul.w	r3, r3, r2
  4012be:	4a12      	ldr	r2, [pc, #72]	; (401308 <hsmci_wait_end_of_read_blocks+0x68>)
  4012c0:	6812      	ldr	r2, [r2, #0]
  4012c2:	4293      	cmp	r3, r2
  4012c4:	d816      	bhi.n	4012f4 <hsmci_wait_end_of_read_blocks+0x54>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4012c6:	490c      	ldr	r1, [pc, #48]	; (4012f8 <hsmci_wait_end_of_read_blocks+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4012c8:	4a0c      	ldr	r2, [pc, #48]	; (4012fc <hsmci_wait_end_of_read_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  4012ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4012cc:	4213      	tst	r3, r2
  4012ce:	d10d      	bne.n	4012ec <hsmci_wait_end_of_read_blocks+0x4c>
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4012d0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4012d4:	d0f9      	beq.n	4012ca <hsmci_wait_end_of_read_blocks+0x2a>
	return true;
  4012d6:	2001      	movs	r0, #1
  4012d8:	bd08      	pop	{r3, pc}
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  4012da:	f240 2202 	movw	r2, #514	; 0x202
  4012de:	4b06      	ldr	r3, [pc, #24]	; (4012f8 <hsmci_wait_end_of_read_blocks+0x58>)
  4012e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			hsmci_reset();
  4012e4:	4b09      	ldr	r3, [pc, #36]	; (40130c <hsmci_wait_end_of_read_blocks+0x6c>)
  4012e6:	4798      	blx	r3
			return false;
  4012e8:	2000      	movs	r0, #0
  4012ea:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4012ec:	4b07      	ldr	r3, [pc, #28]	; (40130c <hsmci_wait_end_of_read_blocks+0x6c>)
  4012ee:	4798      	blx	r3
			return false;
  4012f0:	2000      	movs	r0, #0
  4012f2:	bd08      	pop	{r3, pc}
		return true;
  4012f4:	2001      	movs	r0, #1
}
  4012f6:	bd08      	pop	{r3, pc}
  4012f8:	40080000 	.word	0x40080000
  4012fc:	c0600000 	.word	0xc0600000
  401300:	2000048e 	.word	0x2000048e
  401304:	20000490 	.word	0x20000490
  401308:	20000494 	.word	0x20000494
  40130c:	00400ec1 	.word	0x00400ec1

00401310 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401310:	e7fe      	b.n	401310 <Dummy_Handler>
	...

00401314 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401314:	b500      	push	{lr}
  401316:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  401318:	4b25      	ldr	r3, [pc, #148]	; (4013b0 <Reset_Handler+0x9c>)
  40131a:	4a26      	ldr	r2, [pc, #152]	; (4013b4 <Reset_Handler+0xa0>)
  40131c:	429a      	cmp	r2, r3
  40131e:	d010      	beq.n	401342 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  401320:	4b25      	ldr	r3, [pc, #148]	; (4013b8 <Reset_Handler+0xa4>)
  401322:	4a23      	ldr	r2, [pc, #140]	; (4013b0 <Reset_Handler+0x9c>)
  401324:	429a      	cmp	r2, r3
  401326:	d20c      	bcs.n	401342 <Reset_Handler+0x2e>
  401328:	3b01      	subs	r3, #1
  40132a:	1a9b      	subs	r3, r3, r2
  40132c:	f023 0303 	bic.w	r3, r3, #3
  401330:	3304      	adds	r3, #4
  401332:	4413      	add	r3, r2
  401334:	491f      	ldr	r1, [pc, #124]	; (4013b4 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  401336:	f851 0b04 	ldr.w	r0, [r1], #4
  40133a:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  40133e:	429a      	cmp	r2, r3
  401340:	d1f9      	bne.n	401336 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401342:	4b1e      	ldr	r3, [pc, #120]	; (4013bc <Reset_Handler+0xa8>)
  401344:	4a1e      	ldr	r2, [pc, #120]	; (4013c0 <Reset_Handler+0xac>)
  401346:	429a      	cmp	r2, r3
  401348:	d20a      	bcs.n	401360 <Reset_Handler+0x4c>
  40134a:	3b01      	subs	r3, #1
  40134c:	1a9b      	subs	r3, r3, r2
  40134e:	f023 0303 	bic.w	r3, r3, #3
  401352:	3304      	adds	r3, #4
  401354:	4413      	add	r3, r2
		*pDest++ = 0;
  401356:	2100      	movs	r1, #0
  401358:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  40135c:	4293      	cmp	r3, r2
  40135e:	d1fb      	bne.n	401358 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401360:	4a18      	ldr	r2, [pc, #96]	; (4013c4 <Reset_Handler+0xb0>)
  401362:	4b19      	ldr	r3, [pc, #100]	; (4013c8 <Reset_Handler+0xb4>)
  401364:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401368:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40136a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40136e:	fab3 f383 	clz	r3, r3
  401372:	095b      	lsrs	r3, r3, #5
  401374:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401376:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401378:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40137c:	2200      	movs	r2, #0
  40137e:	4b13      	ldr	r3, [pc, #76]	; (4013cc <Reset_Handler+0xb8>)
  401380:	701a      	strb	r2, [r3, #0]
	return flags;
  401382:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401384:	4a12      	ldr	r2, [pc, #72]	; (4013d0 <Reset_Handler+0xbc>)
  401386:	6813      	ldr	r3, [r2, #0]
  401388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40138c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40138e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401392:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401396:	b129      	cbz	r1, 4013a4 <Reset_Handler+0x90>
		cpu_irq_enable();
  401398:	2201      	movs	r2, #1
  40139a:	4b0c      	ldr	r3, [pc, #48]	; (4013cc <Reset_Handler+0xb8>)
  40139c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40139e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4013a2:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4013a4:	4b0b      	ldr	r3, [pc, #44]	; (4013d4 <Reset_Handler+0xc0>)
  4013a6:	4798      	blx	r3

	/* Branch to main function */
	main();
  4013a8:	4b0b      	ldr	r3, [pc, #44]	; (4013d8 <Reset_Handler+0xc4>)
  4013aa:	4798      	blx	r3
  4013ac:	e7fe      	b.n	4013ac <Reset_Handler+0x98>
  4013ae:	bf00      	nop
  4013b0:	20000000 	.word	0x20000000
  4013b4:	00401f68 	.word	0x00401f68
  4013b8:	20000434 	.word	0x20000434
  4013bc:	20000554 	.word	0x20000554
  4013c0:	20000434 	.word	0x20000434
  4013c4:	e000ed00 	.word	0xe000ed00
  4013c8:	00400000 	.word	0x00400000
  4013cc:	20000000 	.word	0x20000000
  4013d0:	e000ed88 	.word	0xe000ed88
  4013d4:	00401c2d 	.word	0x00401c2d
  4013d8:	0040155d 	.word	0x0040155d

004013dc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4013dc:	4b3b      	ldr	r3, [pc, #236]	; (4014cc <SystemCoreClockUpdate+0xf0>)
  4013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013e0:	f003 0303 	and.w	r3, r3, #3
  4013e4:	2b01      	cmp	r3, #1
  4013e6:	d01d      	beq.n	401424 <SystemCoreClockUpdate+0x48>
  4013e8:	b183      	cbz	r3, 40140c <SystemCoreClockUpdate+0x30>
  4013ea:	2b02      	cmp	r3, #2
  4013ec:	d036      	beq.n	40145c <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4013ee:	4b37      	ldr	r3, [pc, #220]	; (4014cc <SystemCoreClockUpdate+0xf0>)
  4013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4013f6:	2b70      	cmp	r3, #112	; 0x70
  4013f8:	d05f      	beq.n	4014ba <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4013fa:	4b34      	ldr	r3, [pc, #208]	; (4014cc <SystemCoreClockUpdate+0xf0>)
  4013fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4013fe:	4934      	ldr	r1, [pc, #208]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
  401400:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401404:	680b      	ldr	r3, [r1, #0]
  401406:	40d3      	lsrs	r3, r2
  401408:	600b      	str	r3, [r1, #0]
  40140a:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40140c:	4b31      	ldr	r3, [pc, #196]	; (4014d4 <SystemCoreClockUpdate+0xf8>)
  40140e:	695b      	ldr	r3, [r3, #20]
  401410:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401414:	bf14      	ite	ne
  401416:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40141a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40141e:	4b2c      	ldr	r3, [pc, #176]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
  401420:	601a      	str	r2, [r3, #0]
  401422:	e7e4      	b.n	4013ee <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401424:	4b29      	ldr	r3, [pc, #164]	; (4014cc <SystemCoreClockUpdate+0xf0>)
  401426:	6a1b      	ldr	r3, [r3, #32]
  401428:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40142c:	d003      	beq.n	401436 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40142e:	4a2a      	ldr	r2, [pc, #168]	; (4014d8 <SystemCoreClockUpdate+0xfc>)
  401430:	4b27      	ldr	r3, [pc, #156]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
  401432:	601a      	str	r2, [r3, #0]
  401434:	e7db      	b.n	4013ee <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401436:	4a29      	ldr	r2, [pc, #164]	; (4014dc <SystemCoreClockUpdate+0x100>)
  401438:	4b25      	ldr	r3, [pc, #148]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
  40143a:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40143c:	4b23      	ldr	r3, [pc, #140]	; (4014cc <SystemCoreClockUpdate+0xf0>)
  40143e:	6a1b      	ldr	r3, [r3, #32]
  401440:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401444:	2b10      	cmp	r3, #16
  401446:	d005      	beq.n	401454 <SystemCoreClockUpdate+0x78>
  401448:	2b20      	cmp	r3, #32
  40144a:	d1d0      	bne.n	4013ee <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  40144c:	4a22      	ldr	r2, [pc, #136]	; (4014d8 <SystemCoreClockUpdate+0xfc>)
  40144e:	4b20      	ldr	r3, [pc, #128]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
  401450:	601a      	str	r2, [r3, #0]
				break;
  401452:	e7cc      	b.n	4013ee <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  401454:	4a22      	ldr	r2, [pc, #136]	; (4014e0 <SystemCoreClockUpdate+0x104>)
  401456:	4b1e      	ldr	r3, [pc, #120]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
  401458:	601a      	str	r2, [r3, #0]
				break;
  40145a:	e7c8      	b.n	4013ee <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40145c:	4b1b      	ldr	r3, [pc, #108]	; (4014cc <SystemCoreClockUpdate+0xf0>)
  40145e:	6a1b      	ldr	r3, [r3, #32]
  401460:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401464:	d016      	beq.n	401494 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401466:	4a1c      	ldr	r2, [pc, #112]	; (4014d8 <SystemCoreClockUpdate+0xfc>)
  401468:	4b19      	ldr	r3, [pc, #100]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
  40146a:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  40146c:	4b17      	ldr	r3, [pc, #92]	; (4014cc <SystemCoreClockUpdate+0xf0>)
  40146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401470:	f003 0303 	and.w	r3, r3, #3
  401474:	2b02      	cmp	r3, #2
  401476:	d1ba      	bne.n	4013ee <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401478:	4a14      	ldr	r2, [pc, #80]	; (4014cc <SystemCoreClockUpdate+0xf0>)
  40147a:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40147c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40147e:	4814      	ldr	r0, [pc, #80]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401480:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401484:	6803      	ldr	r3, [r0, #0]
  401486:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40148a:	b2d2      	uxtb	r2, r2
  40148c:	fbb3 f3f2 	udiv	r3, r3, r2
  401490:	6003      	str	r3, [r0, #0]
  401492:	e7ac      	b.n	4013ee <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401494:	4a11      	ldr	r2, [pc, #68]	; (4014dc <SystemCoreClockUpdate+0x100>)
  401496:	4b0e      	ldr	r3, [pc, #56]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
  401498:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40149a:	4b0c      	ldr	r3, [pc, #48]	; (4014cc <SystemCoreClockUpdate+0xf0>)
  40149c:	6a1b      	ldr	r3, [r3, #32]
  40149e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014a2:	2b10      	cmp	r3, #16
  4014a4:	d005      	beq.n	4014b2 <SystemCoreClockUpdate+0xd6>
  4014a6:	2b20      	cmp	r3, #32
  4014a8:	d1e0      	bne.n	40146c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4014aa:	4a0b      	ldr	r2, [pc, #44]	; (4014d8 <SystemCoreClockUpdate+0xfc>)
  4014ac:	4b08      	ldr	r3, [pc, #32]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
  4014ae:	601a      	str	r2, [r3, #0]
				break;
  4014b0:	e7dc      	b.n	40146c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4014b2:	4a0b      	ldr	r2, [pc, #44]	; (4014e0 <SystemCoreClockUpdate+0x104>)
  4014b4:	4b06      	ldr	r3, [pc, #24]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
  4014b6:	601a      	str	r2, [r3, #0]
				break;
  4014b8:	e7d8      	b.n	40146c <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4014ba:	4a05      	ldr	r2, [pc, #20]	; (4014d0 <SystemCoreClockUpdate+0xf4>)
  4014bc:	6813      	ldr	r3, [r2, #0]
  4014be:	4909      	ldr	r1, [pc, #36]	; (4014e4 <SystemCoreClockUpdate+0x108>)
  4014c0:	fba1 1303 	umull	r1, r3, r1, r3
  4014c4:	085b      	lsrs	r3, r3, #1
  4014c6:	6013      	str	r3, [r2, #0]
  4014c8:	4770      	bx	lr
  4014ca:	bf00      	nop
  4014cc:	400e0400 	.word	0x400e0400
  4014d0:	20000004 	.word	0x20000004
  4014d4:	400e1810 	.word	0x400e1810
  4014d8:	00b71b00 	.word	0x00b71b00
  4014dc:	003d0900 	.word	0x003d0900
  4014e0:	007a1200 	.word	0x007a1200
  4014e4:	aaaaaaab 	.word	0xaaaaaaab

004014e8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4014e8:	4b12      	ldr	r3, [pc, #72]	; (401534 <system_init_flash+0x4c>)
  4014ea:	4298      	cmp	r0, r3
  4014ec:	d911      	bls.n	401512 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4014ee:	4b12      	ldr	r3, [pc, #72]	; (401538 <system_init_flash+0x50>)
  4014f0:	4298      	cmp	r0, r3
  4014f2:	d913      	bls.n	40151c <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4014f4:	4b11      	ldr	r3, [pc, #68]	; (40153c <system_init_flash+0x54>)
  4014f6:	4298      	cmp	r0, r3
  4014f8:	d914      	bls.n	401524 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4014fa:	4b11      	ldr	r3, [pc, #68]	; (401540 <system_init_flash+0x58>)
  4014fc:	4298      	cmp	r0, r3
  4014fe:	d915      	bls.n	40152c <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401500:	4b10      	ldr	r3, [pc, #64]	; (401544 <system_init_flash+0x5c>)
  401502:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401504:	bf94      	ite	ls
  401506:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40150a:	4a0f      	ldrhi	r2, [pc, #60]	; (401548 <system_init_flash+0x60>)
  40150c:	4b0f      	ldr	r3, [pc, #60]	; (40154c <system_init_flash+0x64>)
  40150e:	601a      	str	r2, [r3, #0]
  401510:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401512:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401516:	4b0d      	ldr	r3, [pc, #52]	; (40154c <system_init_flash+0x64>)
  401518:	601a      	str	r2, [r3, #0]
  40151a:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40151c:	4a0c      	ldr	r2, [pc, #48]	; (401550 <system_init_flash+0x68>)
  40151e:	4b0b      	ldr	r3, [pc, #44]	; (40154c <system_init_flash+0x64>)
  401520:	601a      	str	r2, [r3, #0]
  401522:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401524:	4a0b      	ldr	r2, [pc, #44]	; (401554 <system_init_flash+0x6c>)
  401526:	4b09      	ldr	r3, [pc, #36]	; (40154c <system_init_flash+0x64>)
  401528:	601a      	str	r2, [r3, #0]
  40152a:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40152c:	4a0a      	ldr	r2, [pc, #40]	; (401558 <system_init_flash+0x70>)
  40152e:	4b07      	ldr	r3, [pc, #28]	; (40154c <system_init_flash+0x64>)
  401530:	601a      	str	r2, [r3, #0]
  401532:	4770      	bx	lr
  401534:	01312cff 	.word	0x01312cff
  401538:	026259ff 	.word	0x026259ff
  40153c:	039386ff 	.word	0x039386ff
  401540:	04c4b3ff 	.word	0x04c4b3ff
  401544:	05f5e0ff 	.word	0x05f5e0ff
  401548:	04000500 	.word	0x04000500
  40154c:	400e0a00 	.word	0x400e0a00
  401550:	04000100 	.word	0x04000100
  401554:	04000200 	.word	0x04000200
  401558:	04000300 	.word	0x04000300

0040155c <main>:
/* Function definitions ----------------------------------------------- */
/**
 * @brief Entry
 */
int main(void)
{
  40155c:	b508      	push	{r3, lr}
  sys_init();
  40155e:	4b02      	ldr	r3, [pc, #8]	; (401568 <main+0xc>)
  401560:	4798      	blx	r3

  while (1)
  {
    sys_run();
  401562:	4c02      	ldr	r4, [pc, #8]	; (40156c <main+0x10>)
  401564:	47a0      	blx	r4
  401566:	e7fd      	b.n	401564 <main+0x8>
  401568:	00400285 	.word	0x00400285
  40156c:	004002a9 	.word	0x004002a9

00401570 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401570:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401572:	480e      	ldr	r0, [pc, #56]	; (4015ac <sysclk_init+0x3c>)
  401574:	4b0e      	ldr	r3, [pc, #56]	; (4015b0 <sysclk_init+0x40>)
  401576:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401578:	213e      	movs	r1, #62	; 0x3e
  40157a:	2000      	movs	r0, #0
  40157c:	4b0d      	ldr	r3, [pc, #52]	; (4015b4 <sysclk_init+0x44>)
  40157e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401580:	4c0d      	ldr	r4, [pc, #52]	; (4015b8 <sysclk_init+0x48>)
  401582:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401584:	2800      	cmp	r0, #0
  401586:	d0fc      	beq.n	401582 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401588:	4b0c      	ldr	r3, [pc, #48]	; (4015bc <sysclk_init+0x4c>)
  40158a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40158c:	4a0c      	ldr	r2, [pc, #48]	; (4015c0 <sysclk_init+0x50>)
  40158e:	4b0d      	ldr	r3, [pc, #52]	; (4015c4 <sysclk_init+0x54>)
  401590:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  401592:	4c0d      	ldr	r4, [pc, #52]	; (4015c8 <sysclk_init+0x58>)
  401594:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401596:	2800      	cmp	r0, #0
  401598:	d0fc      	beq.n	401594 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40159a:	2010      	movs	r0, #16
  40159c:	4b0b      	ldr	r3, [pc, #44]	; (4015cc <sysclk_init+0x5c>)
  40159e:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4015a0:	4b0b      	ldr	r3, [pc, #44]	; (4015d0 <sysclk_init+0x60>)
  4015a2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4015a4:	480b      	ldr	r0, [pc, #44]	; (4015d4 <sysclk_init+0x64>)
  4015a6:	4b02      	ldr	r3, [pc, #8]	; (4015b0 <sysclk_init+0x40>)
  4015a8:	4798      	blx	r3
  4015aa:	bd10      	pop	{r4, pc}
  4015ac:	07270e00 	.word	0x07270e00
  4015b0:	004014e9 	.word	0x004014e9
  4015b4:	004019b1 	.word	0x004019b1
  4015b8:	00401a05 	.word	0x00401a05
  4015bc:	00401a15 	.word	0x00401a15
  4015c0:	200f3f01 	.word	0x200f3f01
  4015c4:	400e0400 	.word	0x400e0400
  4015c8:	00401a25 	.word	0x00401a25
  4015cc:	0040194d 	.word	0x0040194d
  4015d0:	004013dd 	.word	0x004013dd
  4015d4:	05b8d800 	.word	0x05b8d800

004015d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4015d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4015dc:	4681      	mov	r9, r0
  4015de:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4015e0:	4b12      	ldr	r3, [pc, #72]	; (40162c <pio_handler_process+0x54>)
  4015e2:	4798      	blx	r3
  4015e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4015e6:	4648      	mov	r0, r9
  4015e8:	4b11      	ldr	r3, [pc, #68]	; (401630 <pio_handler_process+0x58>)
  4015ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4015ec:	4005      	ands	r5, r0
  4015ee:	d013      	beq.n	401618 <pio_handler_process+0x40>
  4015f0:	4c10      	ldr	r4, [pc, #64]	; (401634 <pio_handler_process+0x5c>)
  4015f2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4015f6:	e003      	b.n	401600 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4015f8:	42b4      	cmp	r4, r6
  4015fa:	d00d      	beq.n	401618 <pio_handler_process+0x40>
  4015fc:	3410      	adds	r4, #16
		while (status != 0) {
  4015fe:	b15d      	cbz	r5, 401618 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401600:	6820      	ldr	r0, [r4, #0]
  401602:	42b8      	cmp	r0, r7
  401604:	d1f8      	bne.n	4015f8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401606:	6861      	ldr	r1, [r4, #4]
  401608:	4229      	tst	r1, r5
  40160a:	d0f5      	beq.n	4015f8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40160c:	68e3      	ldr	r3, [r4, #12]
  40160e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401610:	6863      	ldr	r3, [r4, #4]
  401612:	ea25 0503 	bic.w	r5, r5, r3
  401616:	e7ef      	b.n	4015f8 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401618:	4b07      	ldr	r3, [pc, #28]	; (401638 <pio_handler_process+0x60>)
  40161a:	681b      	ldr	r3, [r3, #0]
  40161c:	b123      	cbz	r3, 401628 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40161e:	4b07      	ldr	r3, [pc, #28]	; (40163c <pio_handler_process+0x64>)
  401620:	681b      	ldr	r3, [r3, #0]
  401622:	b10b      	cbz	r3, 401628 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401624:	4648      	mov	r0, r9
  401626:	4798      	blx	r3
  401628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40162c:	00401943 	.word	0x00401943
  401630:	00401947 	.word	0x00401947
  401634:	20000498 	.word	0x20000498
  401638:	2000052c 	.word	0x2000052c
  40163c:	20000508 	.word	0x20000508

00401640 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401640:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401642:	2109      	movs	r1, #9
  401644:	4801      	ldr	r0, [pc, #4]	; (40164c <PIOA_Handler+0xc>)
  401646:	4b02      	ldr	r3, [pc, #8]	; (401650 <PIOA_Handler+0x10>)
  401648:	4798      	blx	r3
  40164a:	bd08      	pop	{r3, pc}
  40164c:	400e0e00 	.word	0x400e0e00
  401650:	004015d9 	.word	0x004015d9

00401654 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401654:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401656:	210a      	movs	r1, #10
  401658:	4801      	ldr	r0, [pc, #4]	; (401660 <PIOB_Handler+0xc>)
  40165a:	4b02      	ldr	r3, [pc, #8]	; (401664 <PIOB_Handler+0x10>)
  40165c:	4798      	blx	r3
  40165e:	bd08      	pop	{r3, pc}
  401660:	400e1000 	.word	0x400e1000
  401664:	004015d9 	.word	0x004015d9

00401668 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401668:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40166a:	210b      	movs	r1, #11
  40166c:	4801      	ldr	r0, [pc, #4]	; (401674 <PIOC_Handler+0xc>)
  40166e:	4b02      	ldr	r3, [pc, #8]	; (401678 <PIOC_Handler+0x10>)
  401670:	4798      	blx	r3
  401672:	bd08      	pop	{r3, pc}
  401674:	400e1200 	.word	0x400e1200
  401678:	004015d9 	.word	0x004015d9

0040167c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40167c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40167e:	210c      	movs	r1, #12
  401680:	4801      	ldr	r0, [pc, #4]	; (401688 <PIOD_Handler+0xc>)
  401682:	4b02      	ldr	r3, [pc, #8]	; (40168c <PIOD_Handler+0x10>)
  401684:	4798      	blx	r3
  401686:	bd08      	pop	{r3, pc}
  401688:	400e1400 	.word	0x400e1400
  40168c:	004015d9 	.word	0x004015d9

00401690 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401690:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401692:	210d      	movs	r1, #13
  401694:	4801      	ldr	r0, [pc, #4]	; (40169c <PIOE_Handler+0xc>)
  401696:	4b02      	ldr	r3, [pc, #8]	; (4016a0 <PIOE_Handler+0x10>)
  401698:	4798      	blx	r3
  40169a:	bd08      	pop	{r3, pc}
  40169c:	400e1600 	.word	0x400e1600
  4016a0:	004015d9 	.word	0x004015d9

004016a4 <can_mailbox_init>:
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  4016a4:	680b      	ldr	r3, [r1, #0]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
  4016a6:	790a      	ldrb	r2, [r1, #4]
  4016a8:	b31a      	cbz	r2, 4016f2 <can_mailbox_init+0x4e>
{
  4016aa:	b430      	push	{r4, r5}
  4016ac:	b2db      	uxtb	r3, r3
  4016ae:	eb00 1243 	add.w	r2, r0, r3, lsl #5
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4016b2:	f8d2 4200 	ldr.w	r4, [r2, #512]	; 0x200
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
  4016b6:	79cd      	ldrb	r5, [r1, #7]
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4016b8:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
  4016bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4016c0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
  4016c4:	794c      	ldrb	r4, [r1, #5]
  4016c6:	b32c      	cbz	r4, 401714 <can_mailbox_init+0x70>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
  4016c8:	68cc      	ldr	r4, [r1, #12]
  4016ca:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
  4016ce:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  4016d2:	690c      	ldr	r4, [r1, #16]
  4016d4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
  4016d8:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4016dc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
  4016e0:	7909      	ldrb	r1, [r1, #4]
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4016e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
  4016e6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4016ea:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
  4016ee:	bc30      	pop	{r4, r5}
  4016f0:	4770      	bx	lr
  4016f2:	b2db      	uxtb	r3, r3
  4016f4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
  4016f8:	2300      	movs	r3, #0
  4016fa:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
  4016fe:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
		p_can->CAN_MB[uc_index].CAN_MID = 0;
  401702:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
  401706:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
  40170a:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
  40170e:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
		return;
  401712:	4770      	bx	lr
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
  401714:	68cc      	ldr	r4, [r1, #12]
  401716:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  40171a:	690c      	ldr	r4, [r1, #16]
  40171c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
  401720:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
  401724:	e7da      	b.n	4016dc <can_mailbox_init+0x38>

00401726 <can_mailbox_write>:
	return (p_can->CAN_MB[uc_index].CAN_MSR);
  401726:	780b      	ldrb	r3, [r1, #0]
  401728:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  40172c:	f8d2 2210 	ldr.w	r2, [r2, #528]	; 0x210
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
  401730:	608a      	str	r2, [r1, #8]
	ul_status = p_mailbox->ul_status;
	if (!(ul_status & CAN_MSR_MRDY)) {
  401732:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
  401736:	d028      	beq.n	40178a <can_mailbox_write+0x64>
{
  401738:	b410      	push	{r4}
		return CAN_MAILBOX_NOT_READY;
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
  40173a:	794a      	ldrb	r2, [r1, #5]
  40173c:	b1fa      	cbz	r2, 40177e <can_mailbox_write+0x58>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  40173e:	690a      	ldr	r2, [r1, #16]
  401740:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  401744:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  401748:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
  40174c:	698c      	ldr	r4, [r1, #24]
  40174e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  401752:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
	if (p_mailbox->uc_length > 4) {
  401756:	798a      	ldrb	r2, [r1, #6]
  401758:	2a04      	cmp	r2, #4
  40175a:	d904      	bls.n	401766 <can_mailbox_write+0x40>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
  40175c:	69cc      	ldr	r4, [r1, #28]
  40175e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  401762:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
  401766:	798a      	ldrb	r2, [r1, #6]
  401768:	0412      	lsls	r2, r2, #16
  40176a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40176e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401772:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c

	return CAN_MAILBOX_TRANSFER_OK;
  401776:	2000      	movs	r0, #0
}
  401778:	f85d 4b04 	ldr.w	r4, [sp], #4
  40177c:	4770      	bx	lr
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  40177e:	690c      	ldr	r4, [r1, #16]
  401780:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  401784:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
  401788:	e7e0      	b.n	40174c <can_mailbox_write+0x26>
		return CAN_MAILBOX_NOT_READY;
  40178a:	2001      	movs	r0, #1
  40178c:	4770      	bx	lr
	...

00401790 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
  401790:	b570      	push	{r4, r5, r6, lr}
  401792:	b088      	sub	sp, #32
  401794:	4606      	mov	r6, r0
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
  401796:	2400      	movs	r4, #0
  401798:	f88d 4004 	strb.w	r4, [sp, #4]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
  40179c:	4d04      	ldr	r5, [pc, #16]	; (4017b0 <can_reset_all_mailbox+0x20>)
		mb_config_t.ul_mb_idx = i;
  40179e:	9400      	str	r4, [sp, #0]
		can_mailbox_init(p_can, &mb_config_t);
  4017a0:	4669      	mov	r1, sp
  4017a2:	4630      	mov	r0, r6
  4017a4:	47a8      	blx	r5
  4017a6:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  4017a8:	2c08      	cmp	r4, #8
  4017aa:	d1f8      	bne.n	40179e <can_reset_all_mailbox+0xe>
	}
}
  4017ac:	b008      	add	sp, #32
  4017ae:	bd70      	pop	{r4, r5, r6, pc}
  4017b0:	004016a5 	.word	0x004016a5

004017b4 <can_init>:
{
  4017b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  4017b6:	f246 13a8 	movw	r3, #25000	; 0x61a8
  4017ba:	fb03 f402 	mul.w	r4, r3, r2
  4017be:	190b      	adds	r3, r1, r4
  4017c0:	3b01      	subs	r3, #1
  4017c2:	fbb3 f3f4 	udiv	r3, r3, r4
  4017c6:	2b80      	cmp	r3, #128	; 0x80
  4017c8:	d866      	bhi.n	401898 <can_init+0xe4>
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
  4017ca:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
  4017ce:	fb04 f402 	mul.w	r4, r4, r2
  4017d2:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
  4017d6:	d861      	bhi.n	40189c <can_init+0xe8>
  4017d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4017dc:	fb03 f202 	mul.w	r2, r3, r2
  4017e0:	2708      	movs	r7, #8
  4017e2:	f04f 36ff 	mov.w	r6, #4294967295
  4017e6:	463b      	mov	r3, r7
  4017e8:	e004      	b.n	4017f4 <can_init+0x40>
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  4017ea:	3301      	adds	r3, #1
  4017ec:	b2db      	uxtb	r3, r3
  4017ee:	4414      	add	r4, r2
  4017f0:	2b1a      	cmp	r3, #26
  4017f2:	d00c      	beq.n	40180e <can_init+0x5a>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
  4017f4:	fbb1 f5f4 	udiv	r5, r1, r4
  4017f8:	2d80      	cmp	r5, #128	; 0x80
  4017fa:	d8f6      	bhi.n	4017ea <can_init+0x36>
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
  4017fc:	fb04 1515 	mls	r5, r4, r5, r1
			if (ul_cur_mod < ul_mod) {
  401800:	42b5      	cmp	r5, r6
  401802:	d2f2      	bcs.n	4017ea <can_init+0x36>
				if (!ul_mod) {
  401804:	b115      	cbz	r5, 40180c <can_init+0x58>
				ul_mod = ul_cur_mod;
  401806:	462e      	mov	r6, r5
				if (!ul_mod) {
  401808:	461f      	mov	r7, r3
  40180a:	e7ee      	b.n	4017ea <can_init+0x36>
  40180c:	461f      	mov	r7, r3
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
  40180e:	fb02 f207 	mul.w	r2, r2, r7
  401812:	fbb1 f1f2 	udiv	r1, r1, r2
	if (uc_prescale < 2) {
  401816:	b2cb      	uxtb	r3, r1
  401818:	2b01      	cmp	r3, #1
  40181a:	d941      	bls.n	4018a0 <can_init+0xec>
  40181c:	4604      	mov	r4, r0
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
  40181e:	f1a7 0208 	sub.w	r2, r7, #8
	p_can->CAN_MR &= ~CAN_MR_CANEN;
  401822:	6803      	ldr	r3, [r0, #0]
  401824:	f023 0301 	bic.w	r3, r3, #1
  401828:	6003      	str	r3, [r0, #0]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  40182a:	4d1e      	ldr	r5, [pc, #120]	; (4018a4 <can_init+0xf0>)
  40182c:	0056      	lsls	r6, r2, #1
  40182e:	18b7      	adds	r7, r6, r2
  401830:	eb05 0747 	add.w	r7, r5, r7, lsl #1
  401834:	78bb      	ldrb	r3, [r7, #2]
  401836:	3b01      	subs	r3, #1
  401838:	011b      	lsls	r3, r3, #4
  40183a:	f003 0370 	and.w	r3, r3, #112	; 0x70
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  40183e:	7878      	ldrb	r0, [r7, #1]
  401840:	3801      	subs	r0, #1
  401842:	0200      	lsls	r0, r0, #8
  401844:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  401848:	4303      	orrs	r3, r0
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  40184a:	78f8      	ldrb	r0, [r7, #3]
  40184c:	3801      	subs	r0, #1
  40184e:	f000 0007 	and.w	r0, r0, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  401852:	4303      	orrs	r3, r0
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  401854:	793a      	ldrb	r2, [r7, #4]
  401856:	3a01      	subs	r2, #1
  401858:	0312      	lsls	r2, r2, #12
  40185a:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  40185e:	4313      	orrs	r3, r2
			CAN_BR_BRP(uc_prescale - 1);
  401860:	b2ca      	uxtb	r2, r1
  401862:	3a01      	subs	r2, #1
  401864:	0412      	lsls	r2, r2, #16
  401866:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  40186a:	4313      	orrs	r3, r2
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  40186c:	6163      	str	r3, [r4, #20]
	can_reset_all_mailbox(p_can);
  40186e:	4620      	mov	r0, r4
  401870:	4b0d      	ldr	r3, [pc, #52]	; (4018a8 <can_init+0xf4>)
  401872:	4798      	blx	r3
	p_can->CAN_MR |= CAN_MR_CANEN;
  401874:	6823      	ldr	r3, [r4, #0]
  401876:	f043 0301 	orr.w	r3, r3, #1
  40187a:	6023      	str	r3, [r4, #0]
  40187c:	2300      	movs	r3, #0
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  40187e:	490b      	ldr	r1, [pc, #44]	; (4018ac <can_init+0xf8>)
	return (p_can->CAN_SR);
  401880:	6922      	ldr	r2, [r4, #16]
		ul_tick++;
  401882:	3301      	adds	r3, #1
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  401884:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
  401888:	d101      	bne.n	40188e <can_init+0xda>
  40188a:	428b      	cmp	r3, r1
  40188c:	d1f8      	bne.n	401880 <can_init+0xcc>
	if (CAN_TIMEOUT == ul_tick) {
  40188e:	4807      	ldr	r0, [pc, #28]	; (4018ac <can_init+0xf8>)
  401890:	1a18      	subs	r0, r3, r0
  401892:	bf18      	it	ne
  401894:	2001      	movne	r0, #1
  401896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
  401898:	2000      	movs	r0, #0
  40189a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40189c:	2000      	movs	r0, #0
  40189e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4018a0:	2000      	movs	r0, #0
}
  4018a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4018a4:	00401ed4 	.word	0x00401ed4
  4018a8:	00401791 	.word	0x00401791
  4018ac:	000186a0 	.word	0x000186a0

004018b0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4018b0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4018b2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4018b6:	d03a      	beq.n	40192e <pio_set_peripheral+0x7e>
  4018b8:	d813      	bhi.n	4018e2 <pio_set_peripheral+0x32>
  4018ba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4018be:	d025      	beq.n	40190c <pio_set_peripheral+0x5c>
  4018c0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4018c4:	d10a      	bne.n	4018dc <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4018c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4018c8:	4313      	orrs	r3, r2
  4018ca:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4018cc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4018ce:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4018d0:	400b      	ands	r3, r1
  4018d2:	ea23 0302 	bic.w	r3, r3, r2
  4018d6:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4018d8:	6042      	str	r2, [r0, #4]
  4018da:	4770      	bx	lr
	switch (ul_type) {
  4018dc:	2900      	cmp	r1, #0
  4018de:	d1fb      	bne.n	4018d8 <pio_set_peripheral+0x28>
  4018e0:	4770      	bx	lr
  4018e2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4018e6:	d021      	beq.n	40192c <pio_set_peripheral+0x7c>
  4018e8:	d809      	bhi.n	4018fe <pio_set_peripheral+0x4e>
  4018ea:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4018ee:	d1f3      	bne.n	4018d8 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4018f0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4018f2:	4313      	orrs	r3, r2
  4018f4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4018f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4018f8:	4313      	orrs	r3, r2
  4018fa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4018fc:	e7ec      	b.n	4018d8 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4018fe:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401902:	d013      	beq.n	40192c <pio_set_peripheral+0x7c>
  401904:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401908:	d010      	beq.n	40192c <pio_set_peripheral+0x7c>
  40190a:	e7e5      	b.n	4018d8 <pio_set_peripheral+0x28>
{
  40190c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40190e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401910:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401912:	43d3      	mvns	r3, r2
  401914:	4021      	ands	r1, r4
  401916:	461c      	mov	r4, r3
  401918:	4019      	ands	r1, r3
  40191a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40191c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40191e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401920:	400b      	ands	r3, r1
  401922:	4023      	ands	r3, r4
  401924:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401926:	6042      	str	r2, [r0, #4]
}
  401928:	f85d 4b04 	ldr.w	r4, [sp], #4
  40192c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40192e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401930:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401932:	400b      	ands	r3, r1
  401934:	ea23 0302 	bic.w	r3, r3, r2
  401938:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40193a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40193c:	4313      	orrs	r3, r2
  40193e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401940:	e7ca      	b.n	4018d8 <pio_set_peripheral+0x28>

00401942 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401942:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401944:	4770      	bx	lr

00401946 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401946:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401948:	4770      	bx	lr
	...

0040194c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40194c:	4a17      	ldr	r2, [pc, #92]	; (4019ac <pmc_switch_mck_to_pllack+0x60>)
  40194e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401954:	4318      	orrs	r0, r3
  401956:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401958:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40195a:	f013 0f08 	tst.w	r3, #8
  40195e:	d10a      	bne.n	401976 <pmc_switch_mck_to_pllack+0x2a>
  401960:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401964:	4911      	ldr	r1, [pc, #68]	; (4019ac <pmc_switch_mck_to_pllack+0x60>)
  401966:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401968:	f012 0f08 	tst.w	r2, #8
  40196c:	d103      	bne.n	401976 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40196e:	3b01      	subs	r3, #1
  401970:	d1f9      	bne.n	401966 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401972:	2001      	movs	r0, #1
  401974:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401976:	4a0d      	ldr	r2, [pc, #52]	; (4019ac <pmc_switch_mck_to_pllack+0x60>)
  401978:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40197a:	f023 0303 	bic.w	r3, r3, #3
  40197e:	f043 0302 	orr.w	r3, r3, #2
  401982:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401984:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401986:	f013 0f08 	tst.w	r3, #8
  40198a:	d10a      	bne.n	4019a2 <pmc_switch_mck_to_pllack+0x56>
  40198c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401990:	4906      	ldr	r1, [pc, #24]	; (4019ac <pmc_switch_mck_to_pllack+0x60>)
  401992:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401994:	f012 0f08 	tst.w	r2, #8
  401998:	d105      	bne.n	4019a6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40199a:	3b01      	subs	r3, #1
  40199c:	d1f9      	bne.n	401992 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40199e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4019a0:	4770      	bx	lr
	return 0;
  4019a2:	2000      	movs	r0, #0
  4019a4:	4770      	bx	lr
  4019a6:	2000      	movs	r0, #0
  4019a8:	4770      	bx	lr
  4019aa:	bf00      	nop
  4019ac:	400e0400 	.word	0x400e0400

004019b0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4019b0:	b9c8      	cbnz	r0, 4019e6 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019b2:	4a11      	ldr	r2, [pc, #68]	; (4019f8 <pmc_switch_mainck_to_xtal+0x48>)
  4019b4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4019b6:	0209      	lsls	r1, r1, #8
  4019b8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4019ba:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4019be:	f023 0303 	bic.w	r3, r3, #3
  4019c2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4019c6:	f043 0301 	orr.w	r3, r3, #1
  4019ca:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4019cc:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4019ce:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019d0:	f013 0f01 	tst.w	r3, #1
  4019d4:	d0fb      	beq.n	4019ce <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4019d6:	4a08      	ldr	r2, [pc, #32]	; (4019f8 <pmc_switch_mainck_to_xtal+0x48>)
  4019d8:	6a13      	ldr	r3, [r2, #32]
  4019da:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4019e2:	6213      	str	r3, [r2, #32]
  4019e4:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019e6:	4904      	ldr	r1, [pc, #16]	; (4019f8 <pmc_switch_mainck_to_xtal+0x48>)
  4019e8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4019ea:	4a04      	ldr	r2, [pc, #16]	; (4019fc <pmc_switch_mainck_to_xtal+0x4c>)
  4019ec:	401a      	ands	r2, r3
  4019ee:	4b04      	ldr	r3, [pc, #16]	; (401a00 <pmc_switch_mainck_to_xtal+0x50>)
  4019f0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4019f2:	620b      	str	r3, [r1, #32]
  4019f4:	4770      	bx	lr
  4019f6:	bf00      	nop
  4019f8:	400e0400 	.word	0x400e0400
  4019fc:	fec8fffc 	.word	0xfec8fffc
  401a00:	01370002 	.word	0x01370002

00401a04 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401a04:	4b02      	ldr	r3, [pc, #8]	; (401a10 <pmc_osc_is_ready_mainck+0xc>)
  401a06:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a08:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401a0c:	4770      	bx	lr
  401a0e:	bf00      	nop
  401a10:	400e0400 	.word	0x400e0400

00401a14 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401a14:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401a18:	4b01      	ldr	r3, [pc, #4]	; (401a20 <pmc_disable_pllack+0xc>)
  401a1a:	629a      	str	r2, [r3, #40]	; 0x28
  401a1c:	4770      	bx	lr
  401a1e:	bf00      	nop
  401a20:	400e0400 	.word	0x400e0400

00401a24 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401a24:	4b02      	ldr	r3, [pc, #8]	; (401a30 <pmc_is_locked_pllack+0xc>)
  401a26:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a28:	f000 0002 	and.w	r0, r0, #2
  401a2c:	4770      	bx	lr
  401a2e:	bf00      	nop
  401a30:	400e0400 	.word	0x400e0400

00401a34 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401a34:	282f      	cmp	r0, #47	; 0x2f
  401a36:	d81e      	bhi.n	401a76 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401a38:	281f      	cmp	r0, #31
  401a3a:	d80c      	bhi.n	401a56 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401a3c:	4b11      	ldr	r3, [pc, #68]	; (401a84 <pmc_enable_periph_clk+0x50>)
  401a3e:	699a      	ldr	r2, [r3, #24]
  401a40:	2301      	movs	r3, #1
  401a42:	4083      	lsls	r3, r0
  401a44:	4393      	bics	r3, r2
  401a46:	d018      	beq.n	401a7a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401a48:	2301      	movs	r3, #1
  401a4a:	fa03 f000 	lsl.w	r0, r3, r0
  401a4e:	4b0d      	ldr	r3, [pc, #52]	; (401a84 <pmc_enable_periph_clk+0x50>)
  401a50:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401a52:	2000      	movs	r0, #0
  401a54:	4770      	bx	lr
		ul_id -= 32;
  401a56:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401a58:	4b0a      	ldr	r3, [pc, #40]	; (401a84 <pmc_enable_periph_clk+0x50>)
  401a5a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401a5e:	2301      	movs	r3, #1
  401a60:	4083      	lsls	r3, r0
  401a62:	4393      	bics	r3, r2
  401a64:	d00b      	beq.n	401a7e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401a66:	2301      	movs	r3, #1
  401a68:	fa03 f000 	lsl.w	r0, r3, r0
  401a6c:	4b05      	ldr	r3, [pc, #20]	; (401a84 <pmc_enable_periph_clk+0x50>)
  401a6e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401a72:	2000      	movs	r0, #0
  401a74:	4770      	bx	lr
		return 1;
  401a76:	2001      	movs	r0, #1
  401a78:	4770      	bx	lr
	return 0;
  401a7a:	2000      	movs	r0, #0
  401a7c:	4770      	bx	lr
  401a7e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401a80:	4770      	bx	lr
  401a82:	bf00      	nop
  401a84:	400e0400 	.word	0x400e0400

00401a88 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401a88:	4b2a      	ldr	r3, [pc, #168]	; (401b34 <twi_set_speed+0xac>)
  401a8a:	4299      	cmp	r1, r3
  401a8c:	d84a      	bhi.n	401b24 <twi_set_speed+0x9c>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401a8e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401a92:	4299      	cmp	r1, r3
  401a94:	d92c      	bls.n	401af0 <twi_set_speed+0x68>
{
  401a96:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401a98:	4c27      	ldr	r4, [pc, #156]	; (401b38 <twi_set_speed+0xb0>)
  401a9a:	fba4 3402 	umull	r3, r4, r4, r2
  401a9e:	0ba4      	lsrs	r4, r4, #14
  401aa0:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401aa2:	4b26      	ldr	r3, [pc, #152]	; (401b3c <twi_set_speed+0xb4>)
  401aa4:	440b      	add	r3, r1
  401aa6:	009b      	lsls	r3, r3, #2
  401aa8:	fbb2 f2f3 	udiv	r2, r2, r3
  401aac:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401aae:	2cff      	cmp	r4, #255	; 0xff
  401ab0:	d93a      	bls.n	401b28 <twi_set_speed+0xa0>
  401ab2:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401ab4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  401ab6:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401ab8:	2cff      	cmp	r4, #255	; 0xff
  401aba:	d90e      	bls.n	401ada <twi_set_speed+0x52>
  401abc:	2907      	cmp	r1, #7
  401abe:	d1f9      	bne.n	401ab4 <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401ac0:	0213      	lsls	r3, r2, #8
  401ac2:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
  401ac4:	0409      	lsls	r1, r1, #16
  401ac6:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  401aca:	430b      	orrs	r3, r1
  401acc:	b2e4      	uxtb	r4, r4
  401ace:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
  401ad0:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401ad2:	2000      	movs	r0, #0
}
  401ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ad8:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401ada:	2aff      	cmp	r2, #255	; 0xff
  401adc:	d9f0      	bls.n	401ac0 <twi_set_speed+0x38>
  401ade:	2906      	cmp	r1, #6
  401ae0:	d8ee      	bhi.n	401ac0 <twi_set_speed+0x38>
			ckdiv++;
  401ae2:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
  401ae4:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401ae6:	2aff      	cmp	r2, #255	; 0xff
  401ae8:	d9ea      	bls.n	401ac0 <twi_set_speed+0x38>
  401aea:	2906      	cmp	r1, #6
  401aec:	d9f9      	bls.n	401ae2 <twi_set_speed+0x5a>
  401aee:	e7e7      	b.n	401ac0 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401af0:	0049      	lsls	r1, r1, #1
  401af2:	fbb2 f2f1 	udiv	r2, r2, r1
  401af6:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401af8:	2aff      	cmp	r2, #255	; 0xff
  401afa:	d911      	bls.n	401b20 <twi_set_speed+0x98>
  401afc:	2300      	movs	r3, #0
			ckdiv++;
  401afe:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
  401b00:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401b02:	2aff      	cmp	r2, #255	; 0xff
  401b04:	d901      	bls.n	401b0a <twi_set_speed+0x82>
  401b06:	2b07      	cmp	r3, #7
  401b08:	d1f9      	bne.n	401afe <twi_set_speed+0x76>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401b0a:	0211      	lsls	r1, r2, #8
  401b0c:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
  401b0e:	041b      	lsls	r3, r3, #16
  401b10:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401b14:	430b      	orrs	r3, r1
  401b16:	b2d2      	uxtb	r2, r2
  401b18:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  401b1a:	6102      	str	r2, [r0, #16]
	return PASS;
  401b1c:	2000      	movs	r0, #0
  401b1e:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401b20:	2300      	movs	r3, #0
  401b22:	e7f2      	b.n	401b0a <twi_set_speed+0x82>
		return FAIL;
  401b24:	2001      	movs	r0, #1
  401b26:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401b28:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
  401b2a:	bf88      	it	hi
  401b2c:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401b2e:	d8d8      	bhi.n	401ae2 <twi_set_speed+0x5a>
	uint32_t ckdiv = 0;
  401b30:	2100      	movs	r1, #0
  401b32:	e7c5      	b.n	401ac0 <twi_set_speed+0x38>
  401b34:	00061a80 	.word	0x00061a80
  401b38:	057619f1 	.word	0x057619f1
  401b3c:	3ffd1200 	.word	0x3ffd1200

00401b40 <twi_master_init>:
{
  401b40:	b538      	push	{r3, r4, r5, lr}
  401b42:	4604      	mov	r4, r0
  401b44:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
  401b46:	f04f 33ff 	mov.w	r3, #4294967295
  401b4a:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
  401b4c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  401b4e:	2380      	movs	r3, #128	; 0x80
  401b50:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  401b52:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
  401b54:	2308      	movs	r3, #8
  401b56:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401b58:	2320      	movs	r3, #32
  401b5a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
  401b5c:	2304      	movs	r3, #4
  401b5e:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401b60:	680a      	ldr	r2, [r1, #0]
  401b62:	6849      	ldr	r1, [r1, #4]
  401b64:	4b05      	ldr	r3, [pc, #20]	; (401b7c <twi_master_init+0x3c>)
  401b66:	4798      	blx	r3
  401b68:	2801      	cmp	r0, #1
  401b6a:	bf14      	ite	ne
  401b6c:	2000      	movne	r0, #0
  401b6e:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
  401b70:	7a6b      	ldrb	r3, [r5, #9]
  401b72:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  401b74:	bf04      	itt	eq
  401b76:	2340      	moveq	r3, #64	; 0x40
  401b78:	6023      	streq	r3, [r4, #0]
}
  401b7a:	bd38      	pop	{r3, r4, r5, pc}
  401b7c:	00401a89 	.word	0x00401a89

00401b80 <twi_mk_addr>:
	if (len == 0)
  401b80:	460a      	mov	r2, r1
  401b82:	b159      	cbz	r1, 401b9c <twi_mk_addr+0x1c>
	val = addr[0];
  401b84:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  401b86:	2901      	cmp	r1, #1
		val |= addr[1];
  401b88:	bfc4      	itt	gt
  401b8a:	7841      	ldrbgt	r1, [r0, #1]
  401b8c:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
  401b90:	2a02      	cmp	r2, #2
  401b92:	dd04      	ble.n	401b9e <twi_mk_addr+0x1e>
		val |= addr[2];
  401b94:	7882      	ldrb	r2, [r0, #2]
  401b96:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  401b9a:	e000      	b.n	401b9e <twi_mk_addr+0x1e>
		return 0;
  401b9c:	2300      	movs	r3, #0
}
  401b9e:	4618      	mov	r0, r3
  401ba0:	4770      	bx	lr
	...

00401ba4 <twi_master_write>:
{
  401ba4:	b570      	push	{r4, r5, r6, lr}
	uint32_t cnt = p_packet->length;
  401ba6:	68cd      	ldr	r5, [r1, #12]
	if (cnt == 0) {
  401ba8:	2d00      	cmp	r5, #0
  401baa:	d035      	beq.n	401c18 <twi_master_write+0x74>
  401bac:	460b      	mov	r3, r1
  401bae:	4604      	mov	r4, r0
	uint8_t *buffer = p_packet->buffer;
  401bb0:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  401bb2:	2000      	movs	r0, #0
  401bb4:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401bb6:	7c0a      	ldrb	r2, [r1, #16]
  401bb8:	0412      	lsls	r2, r2, #16
  401bba:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401bbe:	6849      	ldr	r1, [r1, #4]
  401bc0:	0209      	lsls	r1, r1, #8
  401bc2:	f401 7140 	and.w	r1, r1, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401bc6:	430a      	orrs	r2, r1
  401bc8:	6062      	str	r2, [r4, #4]
	p_twi->TWI_IADR = 0;
  401bca:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401bcc:	6859      	ldr	r1, [r3, #4]
  401bce:	4618      	mov	r0, r3
  401bd0:	4b15      	ldr	r3, [pc, #84]	; (401c28 <twi_master_write+0x84>)
  401bd2:	4798      	blx	r3
  401bd4:	60e0      	str	r0, [r4, #12]
		status = p_twi->TWI_SR;
  401bd6:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bd8:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bdc:	d006      	beq.n	401bec <twi_master_write+0x48>
			return TWI_RECEIVE_NACK;
  401bde:	2505      	movs	r5, #5
  401be0:	e01b      	b.n	401c1a <twi_master_write+0x76>
	while (cnt > 0) {
  401be2:	b15d      	cbz	r5, 401bfc <twi_master_write+0x58>
		status = p_twi->TWI_SR;
  401be4:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401be6:	f413 7f80 	tst.w	r3, #256	; 0x100
  401bea:	d118      	bne.n	401c1e <twi_master_write+0x7a>
		if (!(status & TWI_SR_TXRDY)) {
  401bec:	f013 0f04 	tst.w	r3, #4
  401bf0:	d0f7      	beq.n	401be2 <twi_master_write+0x3e>
		p_twi->TWI_THR = *buffer++;
  401bf2:	7833      	ldrb	r3, [r6, #0]
  401bf4:	6363      	str	r3, [r4, #52]	; 0x34
		cnt--;
  401bf6:	3d01      	subs	r5, #1
		p_twi->TWI_THR = *buffer++;
  401bf8:	3601      	adds	r6, #1
  401bfa:	e7f2      	b.n	401be2 <twi_master_write+0x3e>
		status = p_twi->TWI_SR;
  401bfc:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  401bfe:	f413 7f80 	tst.w	r3, #256	; 0x100
  401c02:	d10e      	bne.n	401c22 <twi_master_write+0x7e>
		if (status & TWI_SR_TXRDY) {
  401c04:	f013 0f04 	tst.w	r3, #4
  401c08:	d0f8      	beq.n	401bfc <twi_master_write+0x58>
	p_twi->TWI_CR = TWI_CR_STOP;
  401c0a:	2302      	movs	r3, #2
  401c0c:	6023      	str	r3, [r4, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401c0e:	6a23      	ldr	r3, [r4, #32]
  401c10:	f013 0f01 	tst.w	r3, #1
  401c14:	d0fb      	beq.n	401c0e <twi_master_write+0x6a>
  401c16:	e000      	b.n	401c1a <twi_master_write+0x76>
		return TWI_INVALID_ARGUMENT;
  401c18:	2501      	movs	r5, #1
}
  401c1a:	4628      	mov	r0, r5
  401c1c:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
  401c1e:	2505      	movs	r5, #5
  401c20:	e7fb      	b.n	401c1a <twi_master_write+0x76>
			return TWI_RECEIVE_NACK;
  401c22:	2505      	movs	r5, #5
  401c24:	e7f9      	b.n	401c1a <twi_master_write+0x76>
  401c26:	bf00      	nop
  401c28:	00401b81 	.word	0x00401b81

00401c2c <__libc_init_array>:
  401c2c:	b570      	push	{r4, r5, r6, lr}
  401c2e:	4e0f      	ldr	r6, [pc, #60]	; (401c6c <__libc_init_array+0x40>)
  401c30:	4d0f      	ldr	r5, [pc, #60]	; (401c70 <__libc_init_array+0x44>)
  401c32:	1b76      	subs	r6, r6, r5
  401c34:	10b6      	asrs	r6, r6, #2
  401c36:	bf18      	it	ne
  401c38:	2400      	movne	r4, #0
  401c3a:	d005      	beq.n	401c48 <__libc_init_array+0x1c>
  401c3c:	3401      	adds	r4, #1
  401c3e:	f855 3b04 	ldr.w	r3, [r5], #4
  401c42:	4798      	blx	r3
  401c44:	42a6      	cmp	r6, r4
  401c46:	d1f9      	bne.n	401c3c <__libc_init_array+0x10>
  401c48:	4e0a      	ldr	r6, [pc, #40]	; (401c74 <__libc_init_array+0x48>)
  401c4a:	4d0b      	ldr	r5, [pc, #44]	; (401c78 <__libc_init_array+0x4c>)
  401c4c:	1b76      	subs	r6, r6, r5
  401c4e:	f000 f979 	bl	401f44 <_init>
  401c52:	10b6      	asrs	r6, r6, #2
  401c54:	bf18      	it	ne
  401c56:	2400      	movne	r4, #0
  401c58:	d006      	beq.n	401c68 <__libc_init_array+0x3c>
  401c5a:	3401      	adds	r4, #1
  401c5c:	f855 3b04 	ldr.w	r3, [r5], #4
  401c60:	4798      	blx	r3
  401c62:	42a6      	cmp	r6, r4
  401c64:	d1f9      	bne.n	401c5a <__libc_init_array+0x2e>
  401c66:	bd70      	pop	{r4, r5, r6, pc}
  401c68:	bd70      	pop	{r4, r5, r6, pc}
  401c6a:	bf00      	nop
  401c6c:	00401f50 	.word	0x00401f50
  401c70:	00401f50 	.word	0x00401f50
  401c74:	00401f58 	.word	0x00401f58
  401c78:	00401f50 	.word	0x00401f50

00401c7c <memset>:
  401c7c:	b470      	push	{r4, r5, r6}
  401c7e:	0786      	lsls	r6, r0, #30
  401c80:	d046      	beq.n	401d10 <memset+0x94>
  401c82:	1e54      	subs	r4, r2, #1
  401c84:	2a00      	cmp	r2, #0
  401c86:	d041      	beq.n	401d0c <memset+0x90>
  401c88:	b2ca      	uxtb	r2, r1
  401c8a:	4603      	mov	r3, r0
  401c8c:	e002      	b.n	401c94 <memset+0x18>
  401c8e:	f114 34ff 	adds.w	r4, r4, #4294967295
  401c92:	d33b      	bcc.n	401d0c <memset+0x90>
  401c94:	f803 2b01 	strb.w	r2, [r3], #1
  401c98:	079d      	lsls	r5, r3, #30
  401c9a:	d1f8      	bne.n	401c8e <memset+0x12>
  401c9c:	2c03      	cmp	r4, #3
  401c9e:	d92e      	bls.n	401cfe <memset+0x82>
  401ca0:	b2cd      	uxtb	r5, r1
  401ca2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401ca6:	2c0f      	cmp	r4, #15
  401ca8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401cac:	d919      	bls.n	401ce2 <memset+0x66>
  401cae:	f103 0210 	add.w	r2, r3, #16
  401cb2:	4626      	mov	r6, r4
  401cb4:	3e10      	subs	r6, #16
  401cb6:	2e0f      	cmp	r6, #15
  401cb8:	f842 5c10 	str.w	r5, [r2, #-16]
  401cbc:	f842 5c0c 	str.w	r5, [r2, #-12]
  401cc0:	f842 5c08 	str.w	r5, [r2, #-8]
  401cc4:	f842 5c04 	str.w	r5, [r2, #-4]
  401cc8:	f102 0210 	add.w	r2, r2, #16
  401ccc:	d8f2      	bhi.n	401cb4 <memset+0x38>
  401cce:	f1a4 0210 	sub.w	r2, r4, #16
  401cd2:	f022 020f 	bic.w	r2, r2, #15
  401cd6:	f004 040f 	and.w	r4, r4, #15
  401cda:	3210      	adds	r2, #16
  401cdc:	2c03      	cmp	r4, #3
  401cde:	4413      	add	r3, r2
  401ce0:	d90d      	bls.n	401cfe <memset+0x82>
  401ce2:	461e      	mov	r6, r3
  401ce4:	4622      	mov	r2, r4
  401ce6:	3a04      	subs	r2, #4
  401ce8:	2a03      	cmp	r2, #3
  401cea:	f846 5b04 	str.w	r5, [r6], #4
  401cee:	d8fa      	bhi.n	401ce6 <memset+0x6a>
  401cf0:	1f22      	subs	r2, r4, #4
  401cf2:	f022 0203 	bic.w	r2, r2, #3
  401cf6:	3204      	adds	r2, #4
  401cf8:	4413      	add	r3, r2
  401cfa:	f004 0403 	and.w	r4, r4, #3
  401cfe:	b12c      	cbz	r4, 401d0c <memset+0x90>
  401d00:	b2c9      	uxtb	r1, r1
  401d02:	441c      	add	r4, r3
  401d04:	f803 1b01 	strb.w	r1, [r3], #1
  401d08:	429c      	cmp	r4, r3
  401d0a:	d1fb      	bne.n	401d04 <memset+0x88>
  401d0c:	bc70      	pop	{r4, r5, r6}
  401d0e:	4770      	bx	lr
  401d10:	4614      	mov	r4, r2
  401d12:	4603      	mov	r3, r0
  401d14:	e7c2      	b.n	401c9c <memset+0x20>
  401d16:	bf00      	nop

00401d18 <register_fini>:
  401d18:	4b02      	ldr	r3, [pc, #8]	; (401d24 <register_fini+0xc>)
  401d1a:	b113      	cbz	r3, 401d22 <register_fini+0xa>
  401d1c:	4802      	ldr	r0, [pc, #8]	; (401d28 <register_fini+0x10>)
  401d1e:	f000 b805 	b.w	401d2c <atexit>
  401d22:	4770      	bx	lr
  401d24:	00000000 	.word	0x00000000
  401d28:	00401d39 	.word	0x00401d39

00401d2c <atexit>:
  401d2c:	2300      	movs	r3, #0
  401d2e:	4601      	mov	r1, r0
  401d30:	461a      	mov	r2, r3
  401d32:	4618      	mov	r0, r3
  401d34:	f000 b81e 	b.w	401d74 <__register_exitproc>

00401d38 <__libc_fini_array>:
  401d38:	b538      	push	{r3, r4, r5, lr}
  401d3a:	4c0a      	ldr	r4, [pc, #40]	; (401d64 <__libc_fini_array+0x2c>)
  401d3c:	4d0a      	ldr	r5, [pc, #40]	; (401d68 <__libc_fini_array+0x30>)
  401d3e:	1b64      	subs	r4, r4, r5
  401d40:	10a4      	asrs	r4, r4, #2
  401d42:	d00a      	beq.n	401d5a <__libc_fini_array+0x22>
  401d44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401d48:	3b01      	subs	r3, #1
  401d4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401d4e:	3c01      	subs	r4, #1
  401d50:	f855 3904 	ldr.w	r3, [r5], #-4
  401d54:	4798      	blx	r3
  401d56:	2c00      	cmp	r4, #0
  401d58:	d1f9      	bne.n	401d4e <__libc_fini_array+0x16>
  401d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401d5e:	f000 b8fb 	b.w	401f58 <_fini>
  401d62:	bf00      	nop
  401d64:	00401f68 	.word	0x00401f68
  401d68:	00401f64 	.word	0x00401f64

00401d6c <__retarget_lock_acquire_recursive>:
  401d6c:	4770      	bx	lr
  401d6e:	bf00      	nop

00401d70 <__retarget_lock_release_recursive>:
  401d70:	4770      	bx	lr
  401d72:	bf00      	nop

00401d74 <__register_exitproc>:
  401d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401d78:	4d2c      	ldr	r5, [pc, #176]	; (401e2c <__register_exitproc+0xb8>)
  401d7a:	4606      	mov	r6, r0
  401d7c:	6828      	ldr	r0, [r5, #0]
  401d7e:	4698      	mov	r8, r3
  401d80:	460f      	mov	r7, r1
  401d82:	4691      	mov	r9, r2
  401d84:	f7ff fff2 	bl	401d6c <__retarget_lock_acquire_recursive>
  401d88:	4b29      	ldr	r3, [pc, #164]	; (401e30 <__register_exitproc+0xbc>)
  401d8a:	681c      	ldr	r4, [r3, #0]
  401d8c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401d90:	2b00      	cmp	r3, #0
  401d92:	d03e      	beq.n	401e12 <__register_exitproc+0x9e>
  401d94:	685a      	ldr	r2, [r3, #4]
  401d96:	2a1f      	cmp	r2, #31
  401d98:	dc1c      	bgt.n	401dd4 <__register_exitproc+0x60>
  401d9a:	f102 0e01 	add.w	lr, r2, #1
  401d9e:	b176      	cbz	r6, 401dbe <__register_exitproc+0x4a>
  401da0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401da4:	2401      	movs	r4, #1
  401da6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401daa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401dae:	4094      	lsls	r4, r2
  401db0:	4320      	orrs	r0, r4
  401db2:	2e02      	cmp	r6, #2
  401db4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401db8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401dbc:	d023      	beq.n	401e06 <__register_exitproc+0x92>
  401dbe:	3202      	adds	r2, #2
  401dc0:	f8c3 e004 	str.w	lr, [r3, #4]
  401dc4:	6828      	ldr	r0, [r5, #0]
  401dc6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401dca:	f7ff ffd1 	bl	401d70 <__retarget_lock_release_recursive>
  401dce:	2000      	movs	r0, #0
  401dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401dd4:	4b17      	ldr	r3, [pc, #92]	; (401e34 <__register_exitproc+0xc0>)
  401dd6:	b30b      	cbz	r3, 401e1c <__register_exitproc+0xa8>
  401dd8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401ddc:	f3af 8000 	nop.w
  401de0:	4603      	mov	r3, r0
  401de2:	b1d8      	cbz	r0, 401e1c <__register_exitproc+0xa8>
  401de4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401de8:	6002      	str	r2, [r0, #0]
  401dea:	2100      	movs	r1, #0
  401dec:	6041      	str	r1, [r0, #4]
  401dee:	460a      	mov	r2, r1
  401df0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401df4:	f04f 0e01 	mov.w	lr, #1
  401df8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401dfc:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401e00:	2e00      	cmp	r6, #0
  401e02:	d0dc      	beq.n	401dbe <__register_exitproc+0x4a>
  401e04:	e7cc      	b.n	401da0 <__register_exitproc+0x2c>
  401e06:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401e0a:	430c      	orrs	r4, r1
  401e0c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401e10:	e7d5      	b.n	401dbe <__register_exitproc+0x4a>
  401e12:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401e16:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401e1a:	e7bb      	b.n	401d94 <__register_exitproc+0x20>
  401e1c:	6828      	ldr	r0, [r5, #0]
  401e1e:	f7ff ffa7 	bl	401d70 <__retarget_lock_release_recursive>
  401e22:	f04f 30ff 	mov.w	r0, #4294967295
  401e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e2a:	bf00      	nop
  401e2c:	20000430 	.word	0x20000430
  401e30:	00401f40 	.word	0x00401f40
  401e34:	00000000 	.word	0x00000000

00401e38 <mmc_trans_multipliers>:
  401e38:	00000000 0000000a 0000000c 0000000d     ................
  401e48:	0000000f 00000014 0000001a 0000001e     ................
  401e58:	00000023 00000028 0000002d 00000034     #...(...-...4...
  401e68:	00000037 0000003c 00000046 00000050     7...<...F...P...

00401e78 <sd_mmc_trans_units>:
  401e78:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00401e94 <sd_trans_multipliers>:
  401e94:	00000000 0000000a 0000000c 0000000d     ................
  401ea4:	0000000f 00000014 00000019 0000001e     ................
  401eb4:	00000023 00000028 0000002d 00000032     #...(...-...2...
  401ec4:	00000037 0000003c 00000046 00000050     7...<...F...P...

00401ed4 <can_bit_time>:
  401ed4:	02020308 02094b03 43020303 0303030a     .....K.....C....
  401ee4:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
  401ef4:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
  401f04:	05050510 06114504 47040505 06060512     .....E.....G....
  401f14:	06134304 44040606 06060714 08154604     .C.....D.....F..
  401f24:	47040606 07070716 08174404 46040708     ...G.....D.....F
  401f34:	08080718 08194304 44040808              .....C.....D

00401f40 <_global_impure_ptr>:
  401f40:	20000008                                ... 

00401f44 <_init>:
  401f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401f46:	bf00      	nop
  401f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401f4a:	bc08      	pop	{r3}
  401f4c:	469e      	mov	lr, r3
  401f4e:	4770      	bx	lr

00401f50 <__init_array_start>:
  401f50:	00401d19 	.word	0x00401d19

00401f54 <__frame_dummy_init_array_entry>:
  401f54:	0040011d                                ..@.

00401f58 <_fini>:
  401f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401f5a:	bf00      	nop
  401f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401f5e:	bc08      	pop	{r3}
  401f60:	469e      	mov	lr, r3
  401f62:	4770      	bx	lr

00401f64 <__fini_array_start>:
  401f64:	004000f9 	.word	0x004000f9
