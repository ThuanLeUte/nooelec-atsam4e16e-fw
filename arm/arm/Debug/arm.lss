
arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b924  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b924  0040b924  0001b924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20000000  0040b92c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a310  200009d0  0040c300  000209d0  2**3
                  ALLOC
  4 .stack        00003000  2000ace0  00416610  000209d0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  7 .debug_info   00024da7  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004df3  00000000  00000000  000457fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001240  00000000  00000000  0004a5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000dd9e  00000000  00000000  0004b831  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00019236  00000000  00000000  000595cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000733c5  00000000  00000000  00072805  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000970d  00000000  00000000  000e5bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000010f8  00000000  00000000  000ef2d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005418  00000000  00000000  000f03d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 dc 00 20 7d 51 40 00 ef 50 40 00 ef 50 40 00     ... }Q@..P@..P@.
  400010:	ef 50 40 00 ef 50 40 00 ef 50 40 00 00 00 00 00     .P@..P@..P@.....
	...
  40002c:	d5 03 40 00 ef 50 40 00 00 00 00 00 e5 04 40 00     ..@..P@.......@.
  40003c:	39 05 40 00 ef 50 40 00 ef 50 40 00 ef 50 40 00     9.@..P@..P@..P@.
  40004c:	ef 50 40 00 ef 50 40 00 ef 50 40 00 ef 50 40 00     .P@..P@..P@..P@.
  40005c:	ef 50 40 00 ef 50 40 00 9d 58 40 00 b5 58 40 00     .P@..P@..X@..X@.
  40006c:	cd 58 40 00 e5 58 40 00 fd 58 40 00 ef 50 40 00     .X@..X@..X@..P@.
  40007c:	ef 50 40 00 ef 50 40 00 ef 50 40 00 ef 50 40 00     .P@..P@..P@..P@.
  40008c:	ef 50 40 00 ef 50 40 00 ef 50 40 00 ef 50 40 00     .P@..P@..P@..P@.
  40009c:	ef 50 40 00 ef 50 40 00 ef 50 40 00 ef 50 40 00     .P@..P@..P@..P@.
  4000ac:	ef 50 40 00 ef 50 40 00 ef 50 40 00 ef 50 40 00     .P@..P@..P@..P@.
  4000bc:	ef 50 40 00 ef 50 40 00 ef 50 40 00 ef 50 40 00     .P@..P@..P@..P@.
  4000cc:	ef 50 40 00 ef 50 40 00 ef 50 40 00 ef 50 40 00     .P@..P@..P@..P@.
  4000dc:	ef 50 40 00 ef 50 40 00 ef 50 40 00 ef 50 40 00     .P@..P@..P@..P@.
  4000ec:	ef 50 40 00 ef 50 40 00 ef 50 40 00                 .P@..P@..P@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009d0 	.word	0x200009d0
  400114:	00000000 	.word	0x00000000
  400118:	0040b92c 	.word	0x0040b92c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	0040b92c 	.word	0x0040b92c
  400158:	200009d4 	.word	0x200009d4
  40015c:	0040b92c 	.word	0x0040b92c
  400160:	00000000 	.word	0x00000000

00400164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  400164:	b480      	push	{r7}
  400166:	b083      	sub	sp, #12
  400168:	af00      	add	r7, sp, #0
  40016a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  40016c:	687b      	ldr	r3, [r7, #4]
  40016e:	f103 0208 	add.w	r2, r3, #8
  400172:	687b      	ldr	r3, [r7, #4]
  400174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400176:	687b      	ldr	r3, [r7, #4]
  400178:	f04f 32ff 	mov.w	r2, #4294967295
  40017c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  40017e:	687b      	ldr	r3, [r7, #4]
  400180:	f103 0208 	add.w	r2, r3, #8
  400184:	687b      	ldr	r3, [r7, #4]
  400186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400188:	687b      	ldr	r3, [r7, #4]
  40018a:	f103 0208 	add.w	r2, r3, #8
  40018e:	687b      	ldr	r3, [r7, #4]
  400190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  400192:	687b      	ldr	r3, [r7, #4]
  400194:	2200      	movs	r2, #0
  400196:	601a      	str	r2, [r3, #0]
}
  400198:	bf00      	nop
  40019a:	370c      	adds	r7, #12
  40019c:	46bd      	mov	sp, r7
  40019e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001a2:	4770      	bx	lr

004001a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  4001a4:	b480      	push	{r7}
  4001a6:	b083      	sub	sp, #12
  4001a8:	af00      	add	r7, sp, #0
  4001aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4001ac:	687b      	ldr	r3, [r7, #4]
  4001ae:	2200      	movs	r2, #0
  4001b0:	611a      	str	r2, [r3, #16]
}
  4001b2:	bf00      	nop
  4001b4:	370c      	adds	r7, #12
  4001b6:	46bd      	mov	sp, r7
  4001b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001bc:	4770      	bx	lr

004001be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  4001be:	b480      	push	{r7}
  4001c0:	b085      	sub	sp, #20
  4001c2:	af00      	add	r7, sp, #0
  4001c4:	6078      	str	r0, [r7, #4]
  4001c6:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  4001c8:	687b      	ldr	r3, [r7, #4]
  4001ca:	685b      	ldr	r3, [r3, #4]
  4001cc:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  4001ce:	68fb      	ldr	r3, [r7, #12]
  4001d0:	685a      	ldr	r2, [r3, #4]
  4001d2:	683b      	ldr	r3, [r7, #0]
  4001d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  4001d6:	687b      	ldr	r3, [r7, #4]
  4001d8:	685a      	ldr	r2, [r3, #4]
  4001da:	683b      	ldr	r3, [r7, #0]
  4001dc:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4001de:	68fb      	ldr	r3, [r7, #12]
  4001e0:	685b      	ldr	r3, [r3, #4]
  4001e2:	683a      	ldr	r2, [r7, #0]
  4001e4:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  4001e6:	68fb      	ldr	r3, [r7, #12]
  4001e8:	683a      	ldr	r2, [r7, #0]
  4001ea:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4001ec:	687b      	ldr	r3, [r7, #4]
  4001ee:	683a      	ldr	r2, [r7, #0]
  4001f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4001f2:	683b      	ldr	r3, [r7, #0]
  4001f4:	687a      	ldr	r2, [r7, #4]
  4001f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4001f8:	687b      	ldr	r3, [r7, #4]
  4001fa:	681b      	ldr	r3, [r3, #0]
  4001fc:	1c5a      	adds	r2, r3, #1
  4001fe:	687b      	ldr	r3, [r7, #4]
  400200:	601a      	str	r2, [r3, #0]
}
  400202:	bf00      	nop
  400204:	3714      	adds	r7, #20
  400206:	46bd      	mov	sp, r7
  400208:	f85d 7b04 	ldr.w	r7, [sp], #4
  40020c:	4770      	bx	lr

0040020e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  40020e:	b480      	push	{r7}
  400210:	b085      	sub	sp, #20
  400212:	af00      	add	r7, sp, #0
  400214:	6078      	str	r0, [r7, #4]
  400216:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  400218:	683b      	ldr	r3, [r7, #0]
  40021a:	681b      	ldr	r3, [r3, #0]
  40021c:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40021e:	68bb      	ldr	r3, [r7, #8]
  400220:	f1b3 3fff 	cmp.w	r3, #4294967295
  400224:	d103      	bne.n	40022e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400226:	687b      	ldr	r3, [r7, #4]
  400228:	691b      	ldr	r3, [r3, #16]
  40022a:	60fb      	str	r3, [r7, #12]
  40022c:	e00c      	b.n	400248 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  40022e:	687b      	ldr	r3, [r7, #4]
  400230:	3308      	adds	r3, #8
  400232:	60fb      	str	r3, [r7, #12]
  400234:	e002      	b.n	40023c <vListInsert+0x2e>
  400236:	68fb      	ldr	r3, [r7, #12]
  400238:	685b      	ldr	r3, [r3, #4]
  40023a:	60fb      	str	r3, [r7, #12]
  40023c:	68fb      	ldr	r3, [r7, #12]
  40023e:	685b      	ldr	r3, [r3, #4]
  400240:	681a      	ldr	r2, [r3, #0]
  400242:	68bb      	ldr	r3, [r7, #8]
  400244:	429a      	cmp	r2, r3
  400246:	d9f6      	bls.n	400236 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400248:	68fb      	ldr	r3, [r7, #12]
  40024a:	685a      	ldr	r2, [r3, #4]
  40024c:	683b      	ldr	r3, [r7, #0]
  40024e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400250:	683b      	ldr	r3, [r7, #0]
  400252:	685b      	ldr	r3, [r3, #4]
  400254:	683a      	ldr	r2, [r7, #0]
  400256:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400258:	683b      	ldr	r3, [r7, #0]
  40025a:	68fa      	ldr	r2, [r7, #12]
  40025c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  40025e:	68fb      	ldr	r3, [r7, #12]
  400260:	683a      	ldr	r2, [r7, #0]
  400262:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400264:	683b      	ldr	r3, [r7, #0]
  400266:	687a      	ldr	r2, [r7, #4]
  400268:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  40026a:	687b      	ldr	r3, [r7, #4]
  40026c:	681b      	ldr	r3, [r3, #0]
  40026e:	1c5a      	adds	r2, r3, #1
  400270:	687b      	ldr	r3, [r7, #4]
  400272:	601a      	str	r2, [r3, #0]
}
  400274:	bf00      	nop
  400276:	3714      	adds	r7, #20
  400278:	46bd      	mov	sp, r7
  40027a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40027e:	4770      	bx	lr

00400280 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  400280:	b480      	push	{r7}
  400282:	b085      	sub	sp, #20
  400284:	af00      	add	r7, sp, #0
  400286:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400288:	687b      	ldr	r3, [r7, #4]
  40028a:	685b      	ldr	r3, [r3, #4]
  40028c:	687a      	ldr	r2, [r7, #4]
  40028e:	6892      	ldr	r2, [r2, #8]
  400290:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400292:	687b      	ldr	r3, [r7, #4]
  400294:	689b      	ldr	r3, [r3, #8]
  400296:	687a      	ldr	r2, [r7, #4]
  400298:	6852      	ldr	r2, [r2, #4]
  40029a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	691b      	ldr	r3, [r3, #16]
  4002a0:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4002a2:	68fb      	ldr	r3, [r7, #12]
  4002a4:	685a      	ldr	r2, [r3, #4]
  4002a6:	687b      	ldr	r3, [r7, #4]
  4002a8:	429a      	cmp	r2, r3
  4002aa:	d103      	bne.n	4002b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	689a      	ldr	r2, [r3, #8]
  4002b0:	68fb      	ldr	r3, [r7, #12]
  4002b2:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	2200      	movs	r2, #0
  4002b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  4002ba:	68fb      	ldr	r3, [r7, #12]
  4002bc:	681b      	ldr	r3, [r3, #0]
  4002be:	1e5a      	subs	r2, r3, #1
  4002c0:	68fb      	ldr	r3, [r7, #12]
  4002c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4002c4:	68fb      	ldr	r3, [r7, #12]
  4002c6:	681b      	ldr	r3, [r3, #0]
}
  4002c8:	4618      	mov	r0, r3
  4002ca:	3714      	adds	r7, #20
  4002cc:	46bd      	mov	sp, r7
  4002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d2:	4770      	bx	lr

004002d4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002d4:	b480      	push	{r7}
  4002d6:	b083      	sub	sp, #12
  4002d8:	af00      	add	r7, sp, #0
  4002da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002dc:	687b      	ldr	r3, [r7, #4]
  4002de:	2b07      	cmp	r3, #7
  4002e0:	d825      	bhi.n	40032e <osc_get_rate+0x5a>
  4002e2:	a201      	add	r2, pc, #4	; (adr r2, 4002e8 <osc_get_rate+0x14>)
  4002e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002e8:	00400309 	.word	0x00400309
  4002ec:	0040030f 	.word	0x0040030f
  4002f0:	00400315 	.word	0x00400315
  4002f4:	0040031b 	.word	0x0040031b
  4002f8:	0040031f 	.word	0x0040031f
  4002fc:	00400323 	.word	0x00400323
  400300:	00400327 	.word	0x00400327
  400304:	0040032b 	.word	0x0040032b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400308:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40030c:	e010      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40030e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400312:	e00d      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400318:	e00a      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40031a:	4b08      	ldr	r3, [pc, #32]	; (40033c <osc_get_rate+0x68>)
  40031c:	e008      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40031e:	4b08      	ldr	r3, [pc, #32]	; (400340 <osc_get_rate+0x6c>)
  400320:	e006      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400322:	4b08      	ldr	r3, [pc, #32]	; (400344 <osc_get_rate+0x70>)
  400324:	e004      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400326:	4b07      	ldr	r3, [pc, #28]	; (400344 <osc_get_rate+0x70>)
  400328:	e002      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40032a:	4b06      	ldr	r3, [pc, #24]	; (400344 <osc_get_rate+0x70>)
  40032c:	e000      	b.n	400330 <osc_get_rate+0x5c>
	}

	return 0;
  40032e:	2300      	movs	r3, #0
}
  400330:	4618      	mov	r0, r3
  400332:	370c      	adds	r7, #12
  400334:	46bd      	mov	sp, r7
  400336:	f85d 7b04 	ldr.w	r7, [sp], #4
  40033a:	4770      	bx	lr
  40033c:	003d0900 	.word	0x003d0900
  400340:	007a1200 	.word	0x007a1200
  400344:	00b71b00 	.word	0x00b71b00

00400348 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400348:	b580      	push	{r7, lr}
  40034a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40034c:	2006      	movs	r0, #6
  40034e:	4b03      	ldr	r3, [pc, #12]	; (40035c <sysclk_get_main_hz+0x14>)
  400350:	4798      	blx	r3
  400352:	4603      	mov	r3, r0
  400354:	011b      	lsls	r3, r3, #4

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400356:	4618      	mov	r0, r3
  400358:	bd80      	pop	{r7, pc}
  40035a:	bf00      	nop
  40035c:	004002d5 	.word	0x004002d5

00400360 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400360:	b580      	push	{r7, lr}
  400362:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400364:	4b02      	ldr	r3, [pc, #8]	; (400370 <sysclk_get_cpu_hz+0x10>)
  400366:	4798      	blx	r3
  400368:	4603      	mov	r3, r0
  40036a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40036c:	4618      	mov	r0, r3
  40036e:	bd80      	pop	{r7, pc}
  400370:	00400349 	.word	0x00400349

00400374 <pxPortInitialiseStack>:
/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters )
{
  400374:	b480      	push	{r7}
  400376:	b085      	sub	sp, #20
  400378:	af00      	add	r7, sp, #0
  40037a:	60f8      	str	r0, [r7, #12]
  40037c:	60b9      	str	r1, [r7, #8]
  40037e:	607a      	str	r2, [r7, #4]
	* interrupt. */

	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;
  400380:	68fb      	ldr	r3, [r7, #12]
  400382:	3b04      	subs	r3, #4
  400384:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  400386:	68fb      	ldr	r3, [r7, #12]
  400388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40038c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40038e:	68fb      	ldr	r3, [r7, #12]
  400390:	3b04      	subs	r3, #4
  400392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400394:	68ba      	ldr	r2, [r7, #8]
  400396:	68fb      	ldr	r3, [r7, #12]
  400398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	3b04      	subs	r3, #4
  40039e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;    /* LR */
  4003a0:	68fb      	ldr	r3, [r7, #12]
  4003a2:	2200      	movs	r2, #0
  4003a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
  4003a6:	68fb      	ldr	r3, [r7, #12]
  4003a8:	3b14      	subs	r3, #20
  4003aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  4003ac:	687a      	ldr	r2, [r7, #4]
  4003ae:	68fb      	ldr	r3, [r7, #12]
  4003b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
  4003b2:	68fb      	ldr	r3, [r7, #12]
  4003b4:	3b04      	subs	r3, #4
  4003b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4003b8:	68fb      	ldr	r3, [r7, #12]
  4003ba:	f06f 0202 	mvn.w	r2, #2
  4003be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  4003c0:	68fb      	ldr	r3, [r7, #12]
  4003c2:	3b20      	subs	r3, #32
  4003c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  4003c6:	68fb      	ldr	r3, [r7, #12]
}
  4003c8:	4618      	mov	r0, r3
  4003ca:	3714      	adds	r7, #20
  4003cc:	46bd      	mov	sp, r7
  4003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003d2:	4770      	bx	lr

004003d4 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  4003d4:	4b05      	ldr	r3, [pc, #20]	; (4003ec <pxCurrentTCBConst2>)
  4003d6:	6819      	ldr	r1, [r3, #0]
  4003d8:	6808      	ldr	r0, [r1, #0]
  4003da:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003de:	f380 8809 	msr	PSP, r0
  4003e2:	f04f 0000 	mov.w	r0, #0
  4003e6:	f380 8811 	msr	BASEPRI, r0
  4003ea:	4770      	bx	lr

004003ec <pxCurrentTCBConst2>:
  4003ec:	2000a9fc 	.word	0x2000a9fc
		" bx r14                          \n"
		"                                   \n"
		" .align 2                        \n"
		"pxCurrentTCBConst2: .word pxCurrentTCB \n"
		);
}
  4003f0:	bf00      	nop
  4003f2:	bf00      	nop

004003f4 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  4003f4:	4804      	ldr	r0, [pc, #16]	; (400408 <prvPortStartFirstTask+0x14>)
  4003f6:	6800      	ldr	r0, [r0, #0]
  4003f8:	6800      	ldr	r0, [r0, #0]
  4003fa:	f380 8808 	msr	MSP, r0
  4003fe:	b662      	cpsie	i
  400400:	df00      	svc	0
  400402:	bf00      	nop
		" msr msp, r0             \n"                         /* Set the msp back to the start of the stack. */
		" cpsie i                 \n"                         /* Globally enable interrupts. */
		" svc 0                   \n"                         /* System call to start first task. */
		" nop                     \n"
		);
}
  400404:	bf00      	nop
  400406:	0000      	.short	0x0000
  400408:	e000ed08 	.word	0xe000ed08

0040040c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  40040c:	b580      	push	{r7, lr}
  40040e:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400410:	4a0e      	ldr	r2, [pc, #56]	; (40044c <xPortStartScheduler+0x40>)
  400412:	4b0e      	ldr	r3, [pc, #56]	; (40044c <xPortStartScheduler+0x40>)
  400414:	681b      	ldr	r3, [r3, #0]
  400416:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40041a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40041c:	4a0b      	ldr	r2, [pc, #44]	; (40044c <xPortStartScheduler+0x40>)
  40041e:	4b0b      	ldr	r3, [pc, #44]	; (40044c <xPortStartScheduler+0x40>)
  400420:	681b      	ldr	r3, [r3, #0]
  400422:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  400426:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  400428:	4b09      	ldr	r3, [pc, #36]	; (400450 <xPortStartScheduler+0x44>)
  40042a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  40042c:	4b09      	ldr	r3, [pc, #36]	; (400454 <xPortStartScheduler+0x48>)
  40042e:	2200      	movs	r2, #0
  400430:	601a      	str	r2, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400432:	4b09      	ldr	r3, [pc, #36]	; (400458 <xPortStartScheduler+0x4c>)
  400434:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  400436:	4a09      	ldr	r2, [pc, #36]	; (40045c <xPortStartScheduler+0x50>)
  400438:	4b08      	ldr	r3, [pc, #32]	; (40045c <xPortStartScheduler+0x50>)
  40043a:	681b      	ldr	r3, [r3, #0]
  40043c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400440:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400442:	4b07      	ldr	r3, [pc, #28]	; (400460 <xPortStartScheduler+0x54>)
  400444:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  400446:	2300      	movs	r3, #0
}
  400448:	4618      	mov	r0, r3
  40044a:	bd80      	pop	{r7, pc}
  40044c:	e000ed20 	.word	0xe000ed20
  400450:	00400569 	.word	0x00400569
  400454:	2000000c 	.word	0x2000000c
  400458:	0040059d 	.word	0x0040059d
  40045c:	e000ef34 	.word	0xe000ef34
  400460:	004003f5 	.word	0x004003f5

00400464 <vPortYieldFromISR>:
}

/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  400464:	b480      	push	{r7}
  400466:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400468:	4b04      	ldr	r3, [pc, #16]	; (40047c <vPortYieldFromISR+0x18>)
  40046a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40046e:	601a      	str	r2, [r3, #0]
}
  400470:	bf00      	nop
  400472:	46bd      	mov	sp, r7
  400474:	f85d 7b04 	ldr.w	r7, [sp], #4
  400478:	4770      	bx	lr
  40047a:	bf00      	nop
  40047c:	e000ed04 	.word	0xe000ed04

00400480 <vPortEnterCritical>:

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400480:	b580      	push	{r7, lr}
  400482:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  400484:	4b04      	ldr	r3, [pc, #16]	; (400498 <vPortEnterCritical+0x18>)
  400486:	4798      	blx	r3
	uxCriticalNesting++;
  400488:	4b04      	ldr	r3, [pc, #16]	; (40049c <vPortEnterCritical+0x1c>)
  40048a:	681b      	ldr	r3, [r3, #0]
  40048c:	3301      	adds	r3, #1
  40048e:	4a03      	ldr	r2, [pc, #12]	; (40049c <vPortEnterCritical+0x1c>)
  400490:	6013      	str	r3, [r2, #0]
}
  400492:	bf00      	nop
  400494:	bd80      	pop	{r7, pc}
  400496:	bf00      	nop
  400498:	004004c9 	.word	0x004004c9
  40049c:	2000000c 	.word	0x2000000c

004004a0 <vPortExitCritical>:

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  4004a0:	b580      	push	{r7, lr}
  4004a2:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  4004a4:	4b06      	ldr	r3, [pc, #24]	; (4004c0 <vPortExitCritical+0x20>)
  4004a6:	681b      	ldr	r3, [r3, #0]
  4004a8:	3b01      	subs	r3, #1
  4004aa:	4a05      	ldr	r2, [pc, #20]	; (4004c0 <vPortExitCritical+0x20>)
  4004ac:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  4004ae:	4b04      	ldr	r3, [pc, #16]	; (4004c0 <vPortExitCritical+0x20>)
  4004b0:	681b      	ldr	r3, [r3, #0]
  4004b2:	2b00      	cmp	r3, #0
  4004b4:	d102      	bne.n	4004bc <vPortExitCritical+0x1c>
		portENABLE_INTERRUPTS();
  4004b6:	2000      	movs	r0, #0
  4004b8:	4b02      	ldr	r3, [pc, #8]	; (4004c4 <vPortExitCritical+0x24>)
  4004ba:	4798      	blx	r3
	}
}
  4004bc:	bf00      	nop
  4004be:	bd80      	pop	{r7, pc}
  4004c0:	2000000c 	.word	0x2000000c
  4004c4:	004004db 	.word	0x004004db

004004c8 <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  4004c8:	f3ef 8011 	mrs	r0, BASEPRI
  4004cc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  4004d0:	f381 8811 	msr	BASEPRI, r1
  4004d4:	4770      	bx	lr
		:: "i" (configMAX_SYSCALL_INTERRUPT_PRIORITY) : "r0", "r1" \
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
  4004d6:	2300      	movs	r3, #0
}
  4004d8:	4618      	mov	r0, r3

004004da <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  4004da:	f380 8811 	msr	BASEPRI, r0
  4004de:	4770      	bx	lr
	( \
		" msr basepri, r0                            \n" \
		" bx lr                                      \n" \
		::: "r0" \
	);
}
  4004e0:	bf00      	nop
	...

004004e4 <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  4004e4:	f3ef 8009 	mrs	r0, PSP
  4004e8:	4b11      	ldr	r3, [pc, #68]	; (400530 <pxCurrentTCBConst>)
  4004ea:	681a      	ldr	r2, [r3, #0]
  4004ec:	f01e 0f10 	tst.w	lr, #16
  4004f0:	bf08      	it	eq
  4004f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4004f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004fa:	6010      	str	r0, [r2, #0]
  4004fc:	e92d 4008 	stmdb	sp!, {r3, lr}
  400500:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  400504:	f380 8811 	msr	BASEPRI, r0
  400508:	f001 f82e 	bl	401568 <vTaskSwitchContext>
  40050c:	f04f 0000 	mov.w	r0, #0
  400510:	f380 8811 	msr	BASEPRI, r0
  400514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400518:	6819      	ldr	r1, [r3, #0]
  40051a:	6808      	ldr	r0, [r1, #0]
  40051c:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400520:	f01e 0f10 	tst.w	lr, #16
  400524:	bf08      	it	eq
  400526:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40052a:	f380 8809 	msr	PSP, r0
  40052e:	4770      	bx	lr

00400530 <pxCurrentTCBConst>:
  400530:	2000a9fc 	.word	0x2000a9fc
		"                                       \n"
		"   .align 2                            \n"
		"pxCurrentTCBConst: .word pxCurrentTCB    \n"
		::"i" (configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  400534:	bf00      	nop
  400536:	bf00      	nop

00400538 <SysTick_Handler>:

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  400538:	b580      	push	{r7, lr}
  40053a:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40053c:	4b06      	ldr	r3, [pc, #24]	; (400558 <SysTick_Handler+0x20>)
  40053e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400542:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  400544:	4b05      	ldr	r3, [pc, #20]	; (40055c <SysTick_Handler+0x24>)
  400546:	4798      	blx	r3
	{
		vTaskIncrementTick();
  400548:	4b05      	ldr	r3, [pc, #20]	; (400560 <SysTick_Handler+0x28>)
  40054a:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  40054c:	2000      	movs	r0, #0
  40054e:	4b05      	ldr	r3, [pc, #20]	; (400564 <SysTick_Handler+0x2c>)
  400550:	4798      	blx	r3
}
  400552:	bf00      	nop
  400554:	bd80      	pop	{r7, pc}
  400556:	bf00      	nop
  400558:	e000ed04 	.word	0xe000ed04
  40055c:	004004c9 	.word	0x004004c9
  400560:	0040141d 	.word	0x0040141d
  400564:	004004db 	.word	0x004004db

00400568 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
  400568:	b598      	push	{r3, r4, r7, lr}
  40056a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
  40056c:	4c07      	ldr	r4, [pc, #28]	; (40058c <vPortSetupTimerInterrupt+0x24>)
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  40056e:	4b08      	ldr	r3, [pc, #32]	; (400590 <vPortSetupTimerInterrupt+0x28>)
  400570:	4798      	blx	r3
  400572:	4602      	mov	r2, r0
  400574:	4b07      	ldr	r3, [pc, #28]	; (400594 <vPortSetupTimerInterrupt+0x2c>)
  400576:	fba3 2302 	umull	r2, r3, r3, r2
  40057a:	099b      	lsrs	r3, r3, #6
  40057c:	3b01      	subs	r3, #1
  40057e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400580:	4b05      	ldr	r3, [pc, #20]	; (400598 <vPortSetupTimerInterrupt+0x30>)
  400582:	2207      	movs	r2, #7
  400584:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
}
  400586:	bf00      	nop
  400588:	bd98      	pop	{r3, r4, r7, pc}
  40058a:	bf00      	nop
  40058c:	e000e014 	.word	0xe000e014
  400590:	00400361 	.word	0x00400361
  400594:	10624dd3 	.word	0x10624dd3
  400598:	e000e010 	.word	0xe000e010

0040059c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40059c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4005ac <vPortEnableVFP+0x10>
  4005a0:	6801      	ldr	r1, [r0, #0]
  4005a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4005a6:	6001      	str	r1, [r0, #0]
  4005a8:	4770      	bx	lr
		"                            \n"
		" orr r1, r1, #( 0xf << 20 ) \n" /* Enable CP10 and CP11 coprocessors, then save back. */
		" str r1, [r0]               \n"
		" bx r14                     "
	);
}
  4005aa:	bf00      	nop
  4005ac:	e000ed88 	.word	0xe000ed88

004005b0 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  4005b0:	b580      	push	{r7, lr}
  4005b2:	b086      	sub	sp, #24
  4005b4:	af00      	add	r7, sp, #0
  4005b6:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  4005b8:	2300      	movs	r3, #0
  4005ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  4005bc:	4b34      	ldr	r3, [pc, #208]	; (400690 <pvPortMalloc+0xe0>)
  4005be:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  4005c0:	4b34      	ldr	r3, [pc, #208]	; (400694 <pvPortMalloc+0xe4>)
  4005c2:	681b      	ldr	r3, [r3, #0]
  4005c4:	2b00      	cmp	r3, #0
  4005c6:	d101      	bne.n	4005cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  4005c8:	4b33      	ldr	r3, [pc, #204]	; (400698 <pvPortMalloc+0xe8>)
  4005ca:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  4005cc:	687b      	ldr	r3, [r7, #4]
  4005ce:	2b00      	cmp	r3, #0
  4005d0:	d00e      	beq.n	4005f0 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4005d2:	2310      	movs	r3, #16
  4005d4:	461a      	mov	r2, r3
  4005d6:	687b      	ldr	r3, [r7, #4]
  4005d8:	4413      	add	r3, r2
  4005da:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4005dc:	687b      	ldr	r3, [r7, #4]
  4005de:	f003 0307 	and.w	r3, r3, #7
  4005e2:	2b00      	cmp	r3, #0
  4005e4:	d004      	beq.n	4005f0 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4005e6:	687b      	ldr	r3, [r7, #4]
  4005e8:	f023 0307 	bic.w	r3, r3, #7
  4005ec:	3308      	adds	r3, #8
  4005ee:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4005f0:	687b      	ldr	r3, [r7, #4]
  4005f2:	2b00      	cmp	r3, #0
  4005f4:	d045      	beq.n	400682 <pvPortMalloc+0xd2>
  4005f6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4005fa:	687b      	ldr	r3, [r7, #4]
  4005fc:	4293      	cmp	r3, r2
  4005fe:	d240      	bcs.n	400682 <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  400600:	4b26      	ldr	r3, [pc, #152]	; (40069c <pvPortMalloc+0xec>)
  400602:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  400604:	4b25      	ldr	r3, [pc, #148]	; (40069c <pvPortMalloc+0xec>)
  400606:	681b      	ldr	r3, [r3, #0]
  400608:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40060a:	e004      	b.n	400616 <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  40060c:	697b      	ldr	r3, [r7, #20]
  40060e:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  400610:	697b      	ldr	r3, [r7, #20]
  400612:	681b      	ldr	r3, [r3, #0]
  400614:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400616:	697b      	ldr	r3, [r7, #20]
  400618:	685a      	ldr	r2, [r3, #4]
  40061a:	687b      	ldr	r3, [r7, #4]
  40061c:	429a      	cmp	r2, r3
  40061e:	d203      	bcs.n	400628 <pvPortMalloc+0x78>
  400620:	697b      	ldr	r3, [r7, #20]
  400622:	681b      	ldr	r3, [r3, #0]
  400624:	2b00      	cmp	r3, #0
  400626:	d1f1      	bne.n	40060c <pvPortMalloc+0x5c>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  400628:	4b1a      	ldr	r3, [pc, #104]	; (400694 <pvPortMalloc+0xe4>)
  40062a:	681b      	ldr	r3, [r3, #0]
  40062c:	697a      	ldr	r2, [r7, #20]
  40062e:	429a      	cmp	r2, r3
  400630:	d027      	beq.n	400682 <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  400632:	693b      	ldr	r3, [r7, #16]
  400634:	681b      	ldr	r3, [r3, #0]
  400636:	2210      	movs	r2, #16
  400638:	4413      	add	r3, r2
  40063a:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  40063c:	697b      	ldr	r3, [r7, #20]
  40063e:	681a      	ldr	r2, [r3, #0]
  400640:	693b      	ldr	r3, [r7, #16]
  400642:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400644:	697b      	ldr	r3, [r7, #20]
  400646:	685a      	ldr	r2, [r3, #4]
  400648:	687b      	ldr	r3, [r7, #4]
  40064a:	1ad3      	subs	r3, r2, r3
  40064c:	2210      	movs	r2, #16
  40064e:	0052      	lsls	r2, r2, #1
  400650:	4293      	cmp	r3, r2
  400652:	d90f      	bls.n	400674 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  400654:	697a      	ldr	r2, [r7, #20]
  400656:	687b      	ldr	r3, [r7, #4]
  400658:	4413      	add	r3, r2
  40065a:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40065c:	697b      	ldr	r3, [r7, #20]
  40065e:	685a      	ldr	r2, [r3, #4]
  400660:	687b      	ldr	r3, [r7, #4]
  400662:	1ad2      	subs	r2, r2, r3
  400664:	68bb      	ldr	r3, [r7, #8]
  400666:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  400668:	697b      	ldr	r3, [r7, #20]
  40066a:	687a      	ldr	r2, [r7, #4]
  40066c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  40066e:	68b8      	ldr	r0, [r7, #8]
  400670:	4b0b      	ldr	r3, [pc, #44]	; (4006a0 <pvPortMalloc+0xf0>)
  400672:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  400674:	4b0b      	ldr	r3, [pc, #44]	; (4006a4 <pvPortMalloc+0xf4>)
  400676:	681a      	ldr	r2, [r3, #0]
  400678:	697b      	ldr	r3, [r7, #20]
  40067a:	685b      	ldr	r3, [r3, #4]
  40067c:	1ad3      	subs	r3, r2, r3
  40067e:	4a09      	ldr	r2, [pc, #36]	; (4006a4 <pvPortMalloc+0xf4>)
  400680:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  400682:	4b09      	ldr	r3, [pc, #36]	; (4006a8 <pvPortMalloc+0xf8>)
  400684:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
  400686:	68fb      	ldr	r3, [r7, #12]
}
  400688:	4618      	mov	r0, r3
  40068a:	3718      	adds	r7, #24
  40068c:	46bd      	mov	sp, r7
  40068e:	bd80      	pop	{r7, pc}
  400690:	004012b5 	.word	0x004012b5
  400694:	2000a9f8 	.word	0x2000a9f8
  400698:	00400701 	.word	0x00400701
  40069c:	2000a9f0 	.word	0x2000a9f0
  4006a0:	00400791 	.word	0x00400791
  4006a4:	20000010 	.word	0x20000010
  4006a8:	004012d1 	.word	0x004012d1

004006ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  4006ac:	b580      	push	{r7, lr}
  4006ae:	b084      	sub	sp, #16
  4006b0:	af00      	add	r7, sp, #0
  4006b2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  4006b4:	687b      	ldr	r3, [r7, #4]
  4006b6:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  4006b8:	687b      	ldr	r3, [r7, #4]
  4006ba:	2b00      	cmp	r3, #0
  4006bc:	d014      	beq.n	4006e8 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  4006be:	2310      	movs	r3, #16
  4006c0:	425b      	negs	r3, r3
  4006c2:	68fa      	ldr	r2, [r7, #12]
  4006c4:	4413      	add	r3, r2
  4006c6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  4006c8:	68fb      	ldr	r3, [r7, #12]
  4006ca:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  4006cc:	4b08      	ldr	r3, [pc, #32]	; (4006f0 <vPortFree+0x44>)
  4006ce:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4006d0:	68bb      	ldr	r3, [r7, #8]
  4006d2:	685a      	ldr	r2, [r3, #4]
  4006d4:	4b07      	ldr	r3, [pc, #28]	; (4006f4 <vPortFree+0x48>)
  4006d6:	681b      	ldr	r3, [r3, #0]
  4006d8:	4413      	add	r3, r2
  4006da:	4a06      	ldr	r2, [pc, #24]	; (4006f4 <vPortFree+0x48>)
  4006dc:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  4006de:	68b8      	ldr	r0, [r7, #8]
  4006e0:	4b05      	ldr	r3, [pc, #20]	; (4006f8 <vPortFree+0x4c>)
  4006e2:	4798      	blx	r3
		}
		xTaskResumeAll();
  4006e4:	4b05      	ldr	r3, [pc, #20]	; (4006fc <vPortFree+0x50>)
  4006e6:	4798      	blx	r3
	}
}
  4006e8:	bf00      	nop
  4006ea:	3710      	adds	r7, #16
  4006ec:	46bd      	mov	sp, r7
  4006ee:	bd80      	pop	{r7, pc}
  4006f0:	004012b5 	.word	0x004012b5
  4006f4:	20000010 	.word	0x20000010
  4006f8:	00400791 	.word	0x00400791
  4006fc:	004012d1 	.word	0x004012d1

00400700 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  400700:	b580      	push	{r7, lr}
  400702:	b082      	sub	sp, #8
  400704:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  400706:	4b1d      	ldr	r3, [pc, #116]	; (40077c <prvHeapInit+0x7c>)
  400708:	4a1d      	ldr	r2, [pc, #116]	; (400780 <prvHeapInit+0x80>)
  40070a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  40070c:	4b1b      	ldr	r3, [pc, #108]	; (40077c <prvHeapInit+0x7c>)
  40070e:	2200      	movs	r2, #0
  400710:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  400712:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  400716:	4b1a      	ldr	r3, [pc, #104]	; (400780 <prvHeapInit+0x80>)
  400718:	4413      	add	r3, r2
  40071a:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  40071c:	2310      	movs	r3, #16
  40071e:	425b      	negs	r3, r3
  400720:	687a      	ldr	r2, [r7, #4]
  400722:	4413      	add	r3, r2
  400724:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  400726:	4a17      	ldr	r2, [pc, #92]	; (400784 <prvHeapInit+0x84>)
  400728:	687b      	ldr	r3, [r7, #4]
  40072a:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  40072c:	4b15      	ldr	r3, [pc, #84]	; (400784 <prvHeapInit+0x84>)
  40072e:	681b      	ldr	r3, [r3, #0]
  400730:	f003 0307 	and.w	r3, r3, #7
  400734:	2b00      	cmp	r3, #0
  400736:	d003      	beq.n	400740 <prvHeapInit+0x40>
  400738:	4b13      	ldr	r3, [pc, #76]	; (400788 <prvHeapInit+0x88>)
  40073a:	4798      	blx	r3
  40073c:	bf00      	nop
  40073e:	e7fd      	b.n	40073c <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  400740:	4b10      	ldr	r3, [pc, #64]	; (400784 <prvHeapInit+0x84>)
  400742:	681b      	ldr	r3, [r3, #0]
  400744:	2200      	movs	r2, #0
  400746:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  400748:	4b0e      	ldr	r3, [pc, #56]	; (400784 <prvHeapInit+0x84>)
  40074a:	681b      	ldr	r3, [r3, #0]
  40074c:	2200      	movs	r2, #0
  40074e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  400750:	4b0b      	ldr	r3, [pc, #44]	; (400780 <prvHeapInit+0x80>)
  400752:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  400754:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  400758:	2210      	movs	r2, #16
  40075a:	1a9a      	subs	r2, r3, r2
  40075c:	683b      	ldr	r3, [r7, #0]
  40075e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  400760:	4b08      	ldr	r3, [pc, #32]	; (400784 <prvHeapInit+0x84>)
  400762:	681a      	ldr	r2, [r3, #0]
  400764:	683b      	ldr	r3, [r7, #0]
  400766:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  400768:	4b08      	ldr	r3, [pc, #32]	; (40078c <prvHeapInit+0x8c>)
  40076a:	681b      	ldr	r3, [r3, #0]
  40076c:	2210      	movs	r2, #16
  40076e:	1a9b      	subs	r3, r3, r2
  400770:	4a06      	ldr	r2, [pc, #24]	; (40078c <prvHeapInit+0x8c>)
  400772:	6013      	str	r3, [r2, #0]
}
  400774:	bf00      	nop
  400776:	3708      	adds	r7, #8
  400778:	46bd      	mov	sp, r7
  40077a:	bd80      	pop	{r7, pc}
  40077c:	2000a9f0 	.word	0x2000a9f0
  400780:	200009f0 	.word	0x200009f0
  400784:	2000a9f8 	.word	0x2000a9f8
  400788:	004004c9 	.word	0x004004c9
  40078c:	20000010 	.word	0x20000010

00400790 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400790:	b480      	push	{r7}
  400792:	b085      	sub	sp, #20
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400798:	4b28      	ldr	r3, [pc, #160]	; (40083c <prvInsertBlockIntoFreeList+0xac>)
  40079a:	60fb      	str	r3, [r7, #12]
  40079c:	e002      	b.n	4007a4 <prvInsertBlockIntoFreeList+0x14>
  40079e:	68fb      	ldr	r3, [r7, #12]
  4007a0:	681b      	ldr	r3, [r3, #0]
  4007a2:	60fb      	str	r3, [r7, #12]
  4007a4:	68fb      	ldr	r3, [r7, #12]
  4007a6:	681a      	ldr	r2, [r3, #0]
  4007a8:	687b      	ldr	r3, [r7, #4]
  4007aa:	429a      	cmp	r2, r3
  4007ac:	d3f7      	bcc.n	40079e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  4007ae:	68fb      	ldr	r3, [r7, #12]
  4007b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  4007b2:	68fb      	ldr	r3, [r7, #12]
  4007b4:	685b      	ldr	r3, [r3, #4]
  4007b6:	68ba      	ldr	r2, [r7, #8]
  4007b8:	441a      	add	r2, r3
  4007ba:	687b      	ldr	r3, [r7, #4]
  4007bc:	429a      	cmp	r2, r3
  4007be:	d108      	bne.n	4007d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4007c0:	68fb      	ldr	r3, [r7, #12]
  4007c2:	685a      	ldr	r2, [r3, #4]
  4007c4:	687b      	ldr	r3, [r7, #4]
  4007c6:	685b      	ldr	r3, [r3, #4]
  4007c8:	441a      	add	r2, r3
  4007ca:	68fb      	ldr	r3, [r7, #12]
  4007cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  4007ce:	68fb      	ldr	r3, [r7, #12]
  4007d0:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  4007d2:	687b      	ldr	r3, [r7, #4]
  4007d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  4007d6:	687b      	ldr	r3, [r7, #4]
  4007d8:	685b      	ldr	r3, [r3, #4]
  4007da:	68ba      	ldr	r2, [r7, #8]
  4007dc:	441a      	add	r2, r3
  4007de:	68fb      	ldr	r3, [r7, #12]
  4007e0:	681b      	ldr	r3, [r3, #0]
  4007e2:	429a      	cmp	r2, r3
  4007e4:	d118      	bne.n	400818 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4007e6:	68fb      	ldr	r3, [r7, #12]
  4007e8:	681a      	ldr	r2, [r3, #0]
  4007ea:	4b15      	ldr	r3, [pc, #84]	; (400840 <prvInsertBlockIntoFreeList+0xb0>)
  4007ec:	681b      	ldr	r3, [r3, #0]
  4007ee:	429a      	cmp	r2, r3
  4007f0:	d00d      	beq.n	40080e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4007f2:	687b      	ldr	r3, [r7, #4]
  4007f4:	685a      	ldr	r2, [r3, #4]
  4007f6:	68fb      	ldr	r3, [r7, #12]
  4007f8:	681b      	ldr	r3, [r3, #0]
  4007fa:	685b      	ldr	r3, [r3, #4]
  4007fc:	441a      	add	r2, r3
  4007fe:	687b      	ldr	r3, [r7, #4]
  400800:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  400802:	68fb      	ldr	r3, [r7, #12]
  400804:	681b      	ldr	r3, [r3, #0]
  400806:	681a      	ldr	r2, [r3, #0]
  400808:	687b      	ldr	r3, [r7, #4]
  40080a:	601a      	str	r2, [r3, #0]
  40080c:	e008      	b.n	400820 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40080e:	4b0c      	ldr	r3, [pc, #48]	; (400840 <prvInsertBlockIntoFreeList+0xb0>)
  400810:	681a      	ldr	r2, [r3, #0]
  400812:	687b      	ldr	r3, [r7, #4]
  400814:	601a      	str	r2, [r3, #0]
  400816:	e003      	b.n	400820 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  400818:	68fb      	ldr	r3, [r7, #12]
  40081a:	681a      	ldr	r2, [r3, #0]
  40081c:	687b      	ldr	r3, [r7, #4]
  40081e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  400820:	68fa      	ldr	r2, [r7, #12]
  400822:	687b      	ldr	r3, [r7, #4]
  400824:	429a      	cmp	r2, r3
  400826:	d002      	beq.n	40082e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  400828:	68fb      	ldr	r3, [r7, #12]
  40082a:	687a      	ldr	r2, [r7, #4]
  40082c:	601a      	str	r2, [r3, #0]
	}
}
  40082e:	bf00      	nop
  400830:	3714      	adds	r7, #20
  400832:	46bd      	mov	sp, r7
  400834:	f85d 7b04 	ldr.w	r7, [sp], #4
  400838:	4770      	bx	lr
  40083a:	bf00      	nop
  40083c:	2000a9f0 	.word	0x2000a9f0
  400840:	2000a9f8 	.word	0x2000a9f8

00400844 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  400844:	b580      	push	{r7, lr}
  400846:	b082      	sub	sp, #8
  400848:	af00      	add	r7, sp, #0
  40084a:	6078      	str	r0, [r7, #4]
  40084c:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  40084e:	687b      	ldr	r3, [r7, #4]
  400850:	2b00      	cmp	r3, #0
  400852:	d103      	bne.n	40085c <xQueueGenericReset+0x18>
  400854:	4b27      	ldr	r3, [pc, #156]	; (4008f4 <xQueueGenericReset+0xb0>)
  400856:	4798      	blx	r3
  400858:	bf00      	nop
  40085a:	e7fd      	b.n	400858 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  40085c:	4b26      	ldr	r3, [pc, #152]	; (4008f8 <xQueueGenericReset+0xb4>)
  40085e:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400860:	687b      	ldr	r3, [r7, #4]
  400862:	681a      	ldr	r2, [r3, #0]
  400864:	687b      	ldr	r3, [r7, #4]
  400866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400868:	6879      	ldr	r1, [r7, #4]
  40086a:	6c09      	ldr	r1, [r1, #64]	; 0x40
  40086c:	fb01 f303 	mul.w	r3, r1, r3
  400870:	441a      	add	r2, r3
  400872:	687b      	ldr	r3, [r7, #4]
  400874:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  400876:	687b      	ldr	r3, [r7, #4]
  400878:	2200      	movs	r2, #0
  40087a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40087c:	687b      	ldr	r3, [r7, #4]
  40087e:	681a      	ldr	r2, [r3, #0]
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  400884:	687b      	ldr	r3, [r7, #4]
  400886:	681a      	ldr	r2, [r3, #0]
  400888:	687b      	ldr	r3, [r7, #4]
  40088a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40088c:	3b01      	subs	r3, #1
  40088e:	6879      	ldr	r1, [r7, #4]
  400890:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400892:	fb01 f303 	mul.w	r3, r1, r3
  400896:	441a      	add	r2, r3
  400898:	687b      	ldr	r3, [r7, #4]
  40089a:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40089c:	687b      	ldr	r3, [r7, #4]
  40089e:	f04f 32ff 	mov.w	r2, #4294967295
  4008a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4008a4:	687b      	ldr	r3, [r7, #4]
  4008a6:	f04f 32ff 	mov.w	r2, #4294967295
  4008aa:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4008ac:	683b      	ldr	r3, [r7, #0]
  4008ae:	2b00      	cmp	r3, #0
  4008b0:	d10e      	bne.n	4008d0 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4008b2:	687b      	ldr	r3, [r7, #4]
  4008b4:	691b      	ldr	r3, [r3, #16]
  4008b6:	2b00      	cmp	r3, #0
  4008b8:	d014      	beq.n	4008e4 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4008ba:	687b      	ldr	r3, [r7, #4]
  4008bc:	3310      	adds	r3, #16
  4008be:	4618      	mov	r0, r3
  4008c0:	4b0e      	ldr	r3, [pc, #56]	; (4008fc <xQueueGenericReset+0xb8>)
  4008c2:	4798      	blx	r3
  4008c4:	4603      	mov	r3, r0
  4008c6:	2b01      	cmp	r3, #1
  4008c8:	d10c      	bne.n	4008e4 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  4008ca:	4b0d      	ldr	r3, [pc, #52]	; (400900 <xQueueGenericReset+0xbc>)
  4008cc:	4798      	blx	r3
  4008ce:	e009      	b.n	4008e4 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4008d0:	687b      	ldr	r3, [r7, #4]
  4008d2:	3310      	adds	r3, #16
  4008d4:	4618      	mov	r0, r3
  4008d6:	4b0b      	ldr	r3, [pc, #44]	; (400904 <xQueueGenericReset+0xc0>)
  4008d8:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4008da:	687b      	ldr	r3, [r7, #4]
  4008dc:	3324      	adds	r3, #36	; 0x24
  4008de:	4618      	mov	r0, r3
  4008e0:	4b08      	ldr	r3, [pc, #32]	; (400904 <xQueueGenericReset+0xc0>)
  4008e2:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  4008e4:	4b08      	ldr	r3, [pc, #32]	; (400908 <xQueueGenericReset+0xc4>)
  4008e6:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  4008e8:	2301      	movs	r3, #1
}
  4008ea:	4618      	mov	r0, r3
  4008ec:	3708      	adds	r7, #8
  4008ee:	46bd      	mov	sp, r7
  4008f0:	bd80      	pop	{r7, pc}
  4008f2:	bf00      	nop
  4008f4:	004004c9 	.word	0x004004c9
  4008f8:	00400481 	.word	0x00400481
  4008fc:	004016f5 	.word	0x004016f5
  400900:	00400465 	.word	0x00400465
  400904:	00400165 	.word	0x00400165
  400908:	004004a1 	.word	0x004004a1

0040090c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  40090c:	b580      	push	{r7, lr}
  40090e:	b088      	sub	sp, #32
  400910:	af00      	add	r7, sp, #0
  400912:	60f8      	str	r0, [r7, #12]
  400914:	60b9      	str	r1, [r7, #8]
  400916:	4613      	mov	r3, r2
  400918:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  40091a:	2300      	movs	r3, #0
  40091c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  40091e:	68fb      	ldr	r3, [r7, #12]
  400920:	2b00      	cmp	r3, #0
  400922:	d02a      	beq.n	40097a <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  400924:	2050      	movs	r0, #80	; 0x50
  400926:	4b1b      	ldr	r3, [pc, #108]	; (400994 <xQueueGenericCreate+0x88>)
  400928:	4798      	blx	r3
  40092a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  40092c:	69bb      	ldr	r3, [r7, #24]
  40092e:	2b00      	cmp	r3, #0
  400930:	d023      	beq.n	40097a <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  400932:	68fb      	ldr	r3, [r7, #12]
  400934:	68ba      	ldr	r2, [r7, #8]
  400936:	fb02 f303 	mul.w	r3, r2, r3
  40093a:	3301      	adds	r3, #1
  40093c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  40093e:	6978      	ldr	r0, [r7, #20]
  400940:	4b14      	ldr	r3, [pc, #80]	; (400994 <xQueueGenericCreate+0x88>)
  400942:	4798      	blx	r3
  400944:	4602      	mov	r2, r0
  400946:	69bb      	ldr	r3, [r7, #24]
  400948:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  40094a:	69bb      	ldr	r3, [r7, #24]
  40094c:	681b      	ldr	r3, [r3, #0]
  40094e:	2b00      	cmp	r3, #0
  400950:	d010      	beq.n	400974 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  400952:	69bb      	ldr	r3, [r7, #24]
  400954:	68fa      	ldr	r2, [r7, #12]
  400956:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  400958:	69bb      	ldr	r3, [r7, #24]
  40095a:	68ba      	ldr	r2, [r7, #8]
  40095c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  40095e:	2101      	movs	r1, #1
  400960:	69b8      	ldr	r0, [r7, #24]
  400962:	4b0d      	ldr	r3, [pc, #52]	; (400998 <xQueueGenericCreate+0x8c>)
  400964:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  400966:	69bb      	ldr	r3, [r7, #24]
  400968:	79fa      	ldrb	r2, [r7, #7]
  40096a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  40096e:	69bb      	ldr	r3, [r7, #24]
  400970:	61fb      	str	r3, [r7, #28]
  400972:	e002      	b.n	40097a <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  400974:	69b8      	ldr	r0, [r7, #24]
  400976:	4b09      	ldr	r3, [pc, #36]	; (40099c <xQueueGenericCreate+0x90>)
  400978:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  40097a:	69fb      	ldr	r3, [r7, #28]
  40097c:	2b00      	cmp	r3, #0
  40097e:	d103      	bne.n	400988 <xQueueGenericCreate+0x7c>
  400980:	4b07      	ldr	r3, [pc, #28]	; (4009a0 <xQueueGenericCreate+0x94>)
  400982:	4798      	blx	r3
  400984:	bf00      	nop
  400986:	e7fd      	b.n	400984 <xQueueGenericCreate+0x78>

	return xReturn;
  400988:	69fb      	ldr	r3, [r7, #28]
}
  40098a:	4618      	mov	r0, r3
  40098c:	3720      	adds	r7, #32
  40098e:	46bd      	mov	sp, r7
  400990:	bd80      	pop	{r7, pc}
  400992:	bf00      	nop
  400994:	004005b1 	.word	0x004005b1
  400998:	00400845 	.word	0x00400845
  40099c:	004006ad 	.word	0x004006ad
  4009a0:	004004c9 	.word	0x004004c9

004009a4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  4009a4:	b580      	push	{r7, lr}
  4009a6:	b088      	sub	sp, #32
  4009a8:	af00      	add	r7, sp, #0
  4009aa:	60f8      	str	r0, [r7, #12]
  4009ac:	60b9      	str	r1, [r7, #8]
  4009ae:	607a      	str	r2, [r7, #4]
  4009b0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  4009b2:	2300      	movs	r3, #0
  4009b4:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  4009b6:	68fb      	ldr	r3, [r7, #12]
  4009b8:	2b00      	cmp	r3, #0
  4009ba:	d103      	bne.n	4009c4 <xQueueGenericSend+0x20>
  4009bc:	4b46      	ldr	r3, [pc, #280]	; (400ad8 <xQueueGenericSend+0x134>)
  4009be:	4798      	blx	r3
  4009c0:	bf00      	nop
  4009c2:	e7fd      	b.n	4009c0 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4009c4:	68bb      	ldr	r3, [r7, #8]
  4009c6:	2b00      	cmp	r3, #0
  4009c8:	d103      	bne.n	4009d2 <xQueueGenericSend+0x2e>
  4009ca:	68fb      	ldr	r3, [r7, #12]
  4009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4009ce:	2b00      	cmp	r3, #0
  4009d0:	d101      	bne.n	4009d6 <xQueueGenericSend+0x32>
  4009d2:	2301      	movs	r3, #1
  4009d4:	e000      	b.n	4009d8 <xQueueGenericSend+0x34>
  4009d6:	2300      	movs	r3, #0
  4009d8:	2b00      	cmp	r3, #0
  4009da:	d103      	bne.n	4009e4 <xQueueGenericSend+0x40>
  4009dc:	4b3e      	ldr	r3, [pc, #248]	; (400ad8 <xQueueGenericSend+0x134>)
  4009de:	4798      	blx	r3
  4009e0:	bf00      	nop
  4009e2:	e7fd      	b.n	4009e0 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4009e4:	4b3d      	ldr	r3, [pc, #244]	; (400adc <xQueueGenericSend+0x138>)
  4009e6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4009e8:	68fb      	ldr	r3, [r7, #12]
  4009ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4009ec:	68fb      	ldr	r3, [r7, #12]
  4009ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4009f0:	429a      	cmp	r2, r3
  4009f2:	d216      	bcs.n	400a22 <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4009f4:	683a      	ldr	r2, [r7, #0]
  4009f6:	68b9      	ldr	r1, [r7, #8]
  4009f8:	68f8      	ldr	r0, [r7, #12]
  4009fa:	4b39      	ldr	r3, [pc, #228]	; (400ae0 <xQueueGenericSend+0x13c>)
  4009fc:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009fe:	68fb      	ldr	r3, [r7, #12]
  400a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400a02:	2b00      	cmp	r3, #0
  400a04:	d009      	beq.n	400a1a <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400a06:	68fb      	ldr	r3, [r7, #12]
  400a08:	3324      	adds	r3, #36	; 0x24
  400a0a:	4618      	mov	r0, r3
  400a0c:	4b35      	ldr	r3, [pc, #212]	; (400ae4 <xQueueGenericSend+0x140>)
  400a0e:	4798      	blx	r3
  400a10:	4603      	mov	r3, r0
  400a12:	2b01      	cmp	r3, #1
  400a14:	d101      	bne.n	400a1a <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  400a16:	4b34      	ldr	r3, [pc, #208]	; (400ae8 <xQueueGenericSend+0x144>)
  400a18:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  400a1a:	4b34      	ldr	r3, [pc, #208]	; (400aec <xQueueGenericSend+0x148>)
  400a1c:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  400a1e:	2301      	movs	r3, #1
  400a20:	e056      	b.n	400ad0 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400a22:	687b      	ldr	r3, [r7, #4]
  400a24:	2b00      	cmp	r3, #0
  400a26:	d103      	bne.n	400a30 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400a28:	4b30      	ldr	r3, [pc, #192]	; (400aec <xQueueGenericSend+0x148>)
  400a2a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400a2c:	2300      	movs	r3, #0
  400a2e:	e04f      	b.n	400ad0 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  400a30:	69fb      	ldr	r3, [r7, #28]
  400a32:	2b00      	cmp	r3, #0
  400a34:	d106      	bne.n	400a44 <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400a36:	f107 0314 	add.w	r3, r7, #20
  400a3a:	4618      	mov	r0, r3
  400a3c:	4b2c      	ldr	r3, [pc, #176]	; (400af0 <xQueueGenericSend+0x14c>)
  400a3e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400a40:	2301      	movs	r3, #1
  400a42:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400a44:	4b29      	ldr	r3, [pc, #164]	; (400aec <xQueueGenericSend+0x148>)
  400a46:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400a48:	4b2a      	ldr	r3, [pc, #168]	; (400af4 <xQueueGenericSend+0x150>)
  400a4a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400a4c:	4b23      	ldr	r3, [pc, #140]	; (400adc <xQueueGenericSend+0x138>)
  400a4e:	4798      	blx	r3
  400a50:	68fb      	ldr	r3, [r7, #12]
  400a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400a54:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a58:	d102      	bne.n	400a60 <xQueueGenericSend+0xbc>
  400a5a:	68fb      	ldr	r3, [r7, #12]
  400a5c:	2200      	movs	r2, #0
  400a5e:	645a      	str	r2, [r3, #68]	; 0x44
  400a60:	68fb      	ldr	r3, [r7, #12]
  400a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400a64:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a68:	d102      	bne.n	400a70 <xQueueGenericSend+0xcc>
  400a6a:	68fb      	ldr	r3, [r7, #12]
  400a6c:	2200      	movs	r2, #0
  400a6e:	649a      	str	r2, [r3, #72]	; 0x48
  400a70:	4b1e      	ldr	r3, [pc, #120]	; (400aec <xQueueGenericSend+0x148>)
  400a72:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400a74:	1d3a      	adds	r2, r7, #4
  400a76:	f107 0314 	add.w	r3, r7, #20
  400a7a:	4611      	mov	r1, r2
  400a7c:	4618      	mov	r0, r3
  400a7e:	4b1e      	ldr	r3, [pc, #120]	; (400af8 <xQueueGenericSend+0x154>)
  400a80:	4798      	blx	r3
  400a82:	4603      	mov	r3, r0
  400a84:	2b00      	cmp	r3, #0
  400a86:	d11d      	bne.n	400ac4 <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400a88:	68f8      	ldr	r0, [r7, #12]
  400a8a:	4b1c      	ldr	r3, [pc, #112]	; (400afc <xQueueGenericSend+0x158>)
  400a8c:	4798      	blx	r3
  400a8e:	4603      	mov	r3, r0
  400a90:	2b00      	cmp	r3, #0
  400a92:	d011      	beq.n	400ab8 <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400a94:	68fb      	ldr	r3, [r7, #12]
  400a96:	3310      	adds	r3, #16
  400a98:	687a      	ldr	r2, [r7, #4]
  400a9a:	4611      	mov	r1, r2
  400a9c:	4618      	mov	r0, r3
  400a9e:	4b18      	ldr	r3, [pc, #96]	; (400b00 <xQueueGenericSend+0x15c>)
  400aa0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400aa2:	68f8      	ldr	r0, [r7, #12]
  400aa4:	4b17      	ldr	r3, [pc, #92]	; (400b04 <xQueueGenericSend+0x160>)
  400aa6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400aa8:	4b17      	ldr	r3, [pc, #92]	; (400b08 <xQueueGenericSend+0x164>)
  400aaa:	4798      	blx	r3
  400aac:	4603      	mov	r3, r0
  400aae:	2b00      	cmp	r3, #0
  400ab0:	d198      	bne.n	4009e4 <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  400ab2:	4b0d      	ldr	r3, [pc, #52]	; (400ae8 <xQueueGenericSend+0x144>)
  400ab4:	4798      	blx	r3
  400ab6:	e795      	b.n	4009e4 <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400ab8:	68f8      	ldr	r0, [r7, #12]
  400aba:	4b12      	ldr	r3, [pc, #72]	; (400b04 <xQueueGenericSend+0x160>)
  400abc:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400abe:	4b12      	ldr	r3, [pc, #72]	; (400b08 <xQueueGenericSend+0x164>)
  400ac0:	4798      	blx	r3
  400ac2:	e78f      	b.n	4009e4 <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400ac4:	68f8      	ldr	r0, [r7, #12]
  400ac6:	4b0f      	ldr	r3, [pc, #60]	; (400b04 <xQueueGenericSend+0x160>)
  400ac8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400aca:	4b0f      	ldr	r3, [pc, #60]	; (400b08 <xQueueGenericSend+0x164>)
  400acc:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400ace:	2300      	movs	r3, #0
		}
	}
}
  400ad0:	4618      	mov	r0, r3
  400ad2:	3720      	adds	r7, #32
  400ad4:	46bd      	mov	sp, r7
  400ad6:	bd80      	pop	{r7, pc}
  400ad8:	004004c9 	.word	0x004004c9
  400adc:	00400481 	.word	0x00400481
  400ae0:	00400d9d 	.word	0x00400d9d
  400ae4:	004016f5 	.word	0x004016f5
  400ae8:	00400465 	.word	0x00400465
  400aec:	004004a1 	.word	0x004004a1
  400af0:	004017b1 	.word	0x004017b1
  400af4:	004012b5 	.word	0x004012b5
  400af8:	004017ed 	.word	0x004017ed
  400afc:	00400f89 	.word	0x00400f89
  400b00:	0040160d 	.word	0x0040160d
  400b04:	00400ead 	.word	0x00400ead
  400b08:	004012d1 	.word	0x004012d1

00400b0c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  400b0c:	b580      	push	{r7, lr}
  400b0e:	b086      	sub	sp, #24
  400b10:	af00      	add	r7, sp, #0
  400b12:	60f8      	str	r0, [r7, #12]
  400b14:	60b9      	str	r1, [r7, #8]
  400b16:	607a      	str	r2, [r7, #4]
  400b18:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  400b1a:	68fb      	ldr	r3, [r7, #12]
  400b1c:	2b00      	cmp	r3, #0
  400b1e:	d103      	bne.n	400b28 <xQueueGenericSendFromISR+0x1c>
  400b20:	4b25      	ldr	r3, [pc, #148]	; (400bb8 <xQueueGenericSendFromISR+0xac>)
  400b22:	4798      	blx	r3
  400b24:	bf00      	nop
  400b26:	e7fd      	b.n	400b24 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400b28:	68bb      	ldr	r3, [r7, #8]
  400b2a:	2b00      	cmp	r3, #0
  400b2c:	d103      	bne.n	400b36 <xQueueGenericSendFromISR+0x2a>
  400b2e:	68fb      	ldr	r3, [r7, #12]
  400b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400b32:	2b00      	cmp	r3, #0
  400b34:	d101      	bne.n	400b3a <xQueueGenericSendFromISR+0x2e>
  400b36:	2301      	movs	r3, #1
  400b38:	e000      	b.n	400b3c <xQueueGenericSendFromISR+0x30>
  400b3a:	2300      	movs	r3, #0
  400b3c:	2b00      	cmp	r3, #0
  400b3e:	d103      	bne.n	400b48 <xQueueGenericSendFromISR+0x3c>
  400b40:	4b1d      	ldr	r3, [pc, #116]	; (400bb8 <xQueueGenericSendFromISR+0xac>)
  400b42:	4798      	blx	r3
  400b44:	bf00      	nop
  400b46:	e7fd      	b.n	400b44 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  400b48:	4b1b      	ldr	r3, [pc, #108]	; (400bb8 <xQueueGenericSendFromISR+0xac>)
  400b4a:	4798      	blx	r3
  400b4c:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400b4e:	68fb      	ldr	r3, [r7, #12]
  400b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400b52:	68fb      	ldr	r3, [r7, #12]
  400b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400b56:	429a      	cmp	r2, r3
  400b58:	d224      	bcs.n	400ba4 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400b5a:	683a      	ldr	r2, [r7, #0]
  400b5c:	68b9      	ldr	r1, [r7, #8]
  400b5e:	68f8      	ldr	r0, [r7, #12]
  400b60:	4b16      	ldr	r3, [pc, #88]	; (400bbc <xQueueGenericSendFromISR+0xb0>)
  400b62:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400b64:	68fb      	ldr	r3, [r7, #12]
  400b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400b68:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b6c:	d112      	bne.n	400b94 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400b6e:	68fb      	ldr	r3, [r7, #12]
  400b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400b72:	2b00      	cmp	r3, #0
  400b74:	d013      	beq.n	400b9e <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400b76:	68fb      	ldr	r3, [r7, #12]
  400b78:	3324      	adds	r3, #36	; 0x24
  400b7a:	4618      	mov	r0, r3
  400b7c:	4b10      	ldr	r3, [pc, #64]	; (400bc0 <xQueueGenericSendFromISR+0xb4>)
  400b7e:	4798      	blx	r3
  400b80:	4603      	mov	r3, r0
  400b82:	2b00      	cmp	r3, #0
  400b84:	d00b      	beq.n	400b9e <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  400b86:	687b      	ldr	r3, [r7, #4]
  400b88:	2b00      	cmp	r3, #0
  400b8a:	d008      	beq.n	400b9e <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  400b8c:	687b      	ldr	r3, [r7, #4]
  400b8e:	2201      	movs	r2, #1
  400b90:	601a      	str	r2, [r3, #0]
  400b92:	e004      	b.n	400b9e <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400b94:	68fb      	ldr	r3, [r7, #12]
  400b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400b98:	1c5a      	adds	r2, r3, #1
  400b9a:	68fb      	ldr	r3, [r7, #12]
  400b9c:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  400b9e:	2301      	movs	r3, #1
  400ba0:	617b      	str	r3, [r7, #20]
  400ba2:	e001      	b.n	400ba8 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400ba4:	2300      	movs	r3, #0
  400ba6:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  400ba8:	6938      	ldr	r0, [r7, #16]
  400baa:	4b06      	ldr	r3, [pc, #24]	; (400bc4 <xQueueGenericSendFromISR+0xb8>)
  400bac:	4798      	blx	r3

	return xReturn;
  400bae:	697b      	ldr	r3, [r7, #20]
}
  400bb0:	4618      	mov	r0, r3
  400bb2:	3718      	adds	r7, #24
  400bb4:	46bd      	mov	sp, r7
  400bb6:	bd80      	pop	{r7, pc}
  400bb8:	004004c9 	.word	0x004004c9
  400bbc:	00400d9d 	.word	0x00400d9d
  400bc0:	004016f5 	.word	0x004016f5
  400bc4:	004004db 	.word	0x004004db

00400bc8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  400bc8:	b580      	push	{r7, lr}
  400bca:	b088      	sub	sp, #32
  400bcc:	af00      	add	r7, sp, #0
  400bce:	60f8      	str	r0, [r7, #12]
  400bd0:	60b9      	str	r1, [r7, #8]
  400bd2:	607a      	str	r2, [r7, #4]
  400bd4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400bd6:	2300      	movs	r3, #0
  400bd8:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  400bda:	68fb      	ldr	r3, [r7, #12]
  400bdc:	2b00      	cmp	r3, #0
  400bde:	d103      	bne.n	400be8 <xQueueGenericReceive+0x20>
  400be0:	4b5f      	ldr	r3, [pc, #380]	; (400d60 <xQueueGenericReceive+0x198>)
  400be2:	4798      	blx	r3
  400be4:	bf00      	nop
  400be6:	e7fd      	b.n	400be4 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400be8:	68bb      	ldr	r3, [r7, #8]
  400bea:	2b00      	cmp	r3, #0
  400bec:	d103      	bne.n	400bf6 <xQueueGenericReceive+0x2e>
  400bee:	68fb      	ldr	r3, [r7, #12]
  400bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400bf2:	2b00      	cmp	r3, #0
  400bf4:	d101      	bne.n	400bfa <xQueueGenericReceive+0x32>
  400bf6:	2301      	movs	r3, #1
  400bf8:	e000      	b.n	400bfc <xQueueGenericReceive+0x34>
  400bfa:	2300      	movs	r3, #0
  400bfc:	2b00      	cmp	r3, #0
  400bfe:	d103      	bne.n	400c08 <xQueueGenericReceive+0x40>
  400c00:	4b57      	ldr	r3, [pc, #348]	; (400d60 <xQueueGenericReceive+0x198>)
  400c02:	4798      	blx	r3
  400c04:	bf00      	nop
  400c06:	e7fd      	b.n	400c04 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400c08:	4b56      	ldr	r3, [pc, #344]	; (400d64 <xQueueGenericReceive+0x19c>)
  400c0a:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  400c0c:	68fb      	ldr	r3, [r7, #12]
  400c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400c10:	2b00      	cmp	r3, #0
  400c12:	d03b      	beq.n	400c8c <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  400c14:	68fb      	ldr	r3, [r7, #12]
  400c16:	68db      	ldr	r3, [r3, #12]
  400c18:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400c1a:	68b9      	ldr	r1, [r7, #8]
  400c1c:	68f8      	ldr	r0, [r7, #12]
  400c1e:	4b52      	ldr	r3, [pc, #328]	; (400d68 <xQueueGenericReceive+0x1a0>)
  400c20:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  400c22:	683b      	ldr	r3, [r7, #0]
  400c24:	2b00      	cmp	r3, #0
  400c26:	d11c      	bne.n	400c62 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  400c28:	68fb      	ldr	r3, [r7, #12]
  400c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400c2c:	1e5a      	subs	r2, r3, #1
  400c2e:	68fb      	ldr	r3, [r7, #12]
  400c30:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400c32:	68fb      	ldr	r3, [r7, #12]
  400c34:	681b      	ldr	r3, [r3, #0]
  400c36:	2b00      	cmp	r3, #0
  400c38:	d104      	bne.n	400c44 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  400c3a:	4b4c      	ldr	r3, [pc, #304]	; (400d6c <xQueueGenericReceive+0x1a4>)
  400c3c:	4798      	blx	r3
  400c3e:	4602      	mov	r2, r0
  400c40:	68fb      	ldr	r3, [r7, #12]
  400c42:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400c44:	68fb      	ldr	r3, [r7, #12]
  400c46:	691b      	ldr	r3, [r3, #16]
  400c48:	2b00      	cmp	r3, #0
  400c4a:	d01b      	beq.n	400c84 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400c4c:	68fb      	ldr	r3, [r7, #12]
  400c4e:	3310      	adds	r3, #16
  400c50:	4618      	mov	r0, r3
  400c52:	4b47      	ldr	r3, [pc, #284]	; (400d70 <xQueueGenericReceive+0x1a8>)
  400c54:	4798      	blx	r3
  400c56:	4603      	mov	r3, r0
  400c58:	2b01      	cmp	r3, #1
  400c5a:	d113      	bne.n	400c84 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  400c5c:	4b45      	ldr	r3, [pc, #276]	; (400d74 <xQueueGenericReceive+0x1ac>)
  400c5e:	4798      	blx	r3
  400c60:	e010      	b.n	400c84 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  400c62:	68fb      	ldr	r3, [r7, #12]
  400c64:	69ba      	ldr	r2, [r7, #24]
  400c66:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c68:	68fb      	ldr	r3, [r7, #12]
  400c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	d009      	beq.n	400c84 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c70:	68fb      	ldr	r3, [r7, #12]
  400c72:	3324      	adds	r3, #36	; 0x24
  400c74:	4618      	mov	r0, r3
  400c76:	4b3e      	ldr	r3, [pc, #248]	; (400d70 <xQueueGenericReceive+0x1a8>)
  400c78:	4798      	blx	r3
  400c7a:	4603      	mov	r3, r0
  400c7c:	2b00      	cmp	r3, #0
  400c7e:	d001      	beq.n	400c84 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  400c80:	4b3c      	ldr	r3, [pc, #240]	; (400d74 <xQueueGenericReceive+0x1ac>)
  400c82:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  400c84:	4b3c      	ldr	r3, [pc, #240]	; (400d78 <xQueueGenericReceive+0x1b0>)
  400c86:	4798      	blx	r3
				return pdPASS;
  400c88:	2301      	movs	r3, #1
  400c8a:	e064      	b.n	400d56 <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400c8c:	687b      	ldr	r3, [r7, #4]
  400c8e:	2b00      	cmp	r3, #0
  400c90:	d103      	bne.n	400c9a <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400c92:	4b39      	ldr	r3, [pc, #228]	; (400d78 <xQueueGenericReceive+0x1b0>)
  400c94:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  400c96:	2300      	movs	r3, #0
  400c98:	e05d      	b.n	400d56 <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  400c9a:	69fb      	ldr	r3, [r7, #28]
  400c9c:	2b00      	cmp	r3, #0
  400c9e:	d106      	bne.n	400cae <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400ca0:	f107 0310 	add.w	r3, r7, #16
  400ca4:	4618      	mov	r0, r3
  400ca6:	4b35      	ldr	r3, [pc, #212]	; (400d7c <xQueueGenericReceive+0x1b4>)
  400ca8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400caa:	2301      	movs	r3, #1
  400cac:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400cae:	4b32      	ldr	r3, [pc, #200]	; (400d78 <xQueueGenericReceive+0x1b0>)
  400cb0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400cb2:	4b33      	ldr	r3, [pc, #204]	; (400d80 <xQueueGenericReceive+0x1b8>)
  400cb4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400cb6:	4b2b      	ldr	r3, [pc, #172]	; (400d64 <xQueueGenericReceive+0x19c>)
  400cb8:	4798      	blx	r3
  400cba:	68fb      	ldr	r3, [r7, #12]
  400cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
  400cc2:	d102      	bne.n	400cca <xQueueGenericReceive+0x102>
  400cc4:	68fb      	ldr	r3, [r7, #12]
  400cc6:	2200      	movs	r2, #0
  400cc8:	645a      	str	r2, [r3, #68]	; 0x44
  400cca:	68fb      	ldr	r3, [r7, #12]
  400ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400cce:	f1b3 3fff 	cmp.w	r3, #4294967295
  400cd2:	d102      	bne.n	400cda <xQueueGenericReceive+0x112>
  400cd4:	68fb      	ldr	r3, [r7, #12]
  400cd6:	2200      	movs	r2, #0
  400cd8:	649a      	str	r2, [r3, #72]	; 0x48
  400cda:	4b27      	ldr	r3, [pc, #156]	; (400d78 <xQueueGenericReceive+0x1b0>)
  400cdc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400cde:	1d3a      	adds	r2, r7, #4
  400ce0:	f107 0310 	add.w	r3, r7, #16
  400ce4:	4611      	mov	r1, r2
  400ce6:	4618      	mov	r0, r3
  400ce8:	4b26      	ldr	r3, [pc, #152]	; (400d84 <xQueueGenericReceive+0x1bc>)
  400cea:	4798      	blx	r3
  400cec:	4603      	mov	r3, r0
  400cee:	2b00      	cmp	r3, #0
  400cf0:	d12b      	bne.n	400d4a <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400cf2:	68f8      	ldr	r0, [r7, #12]
  400cf4:	4b24      	ldr	r3, [pc, #144]	; (400d88 <xQueueGenericReceive+0x1c0>)
  400cf6:	4798      	blx	r3
  400cf8:	4603      	mov	r3, r0
  400cfa:	2b00      	cmp	r3, #0
  400cfc:	d01f      	beq.n	400d3e <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400cfe:	68fb      	ldr	r3, [r7, #12]
  400d00:	681b      	ldr	r3, [r3, #0]
  400d02:	2b00      	cmp	r3, #0
  400d04:	d108      	bne.n	400d18 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  400d06:	4b17      	ldr	r3, [pc, #92]	; (400d64 <xQueueGenericReceive+0x19c>)
  400d08:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400d0a:	68fb      	ldr	r3, [r7, #12]
  400d0c:	685b      	ldr	r3, [r3, #4]
  400d0e:	4618      	mov	r0, r3
  400d10:	4b1e      	ldr	r3, [pc, #120]	; (400d8c <xQueueGenericReceive+0x1c4>)
  400d12:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  400d14:	4b18      	ldr	r3, [pc, #96]	; (400d78 <xQueueGenericReceive+0x1b0>)
  400d16:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400d18:	68fb      	ldr	r3, [r7, #12]
  400d1a:	3324      	adds	r3, #36	; 0x24
  400d1c:	687a      	ldr	r2, [r7, #4]
  400d1e:	4611      	mov	r1, r2
  400d20:	4618      	mov	r0, r3
  400d22:	4b1b      	ldr	r3, [pc, #108]	; (400d90 <xQueueGenericReceive+0x1c8>)
  400d24:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400d26:	68f8      	ldr	r0, [r7, #12]
  400d28:	4b1a      	ldr	r3, [pc, #104]	; (400d94 <xQueueGenericReceive+0x1cc>)
  400d2a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400d2c:	4b1a      	ldr	r3, [pc, #104]	; (400d98 <xQueueGenericReceive+0x1d0>)
  400d2e:	4798      	blx	r3
  400d30:	4603      	mov	r3, r0
  400d32:	2b00      	cmp	r3, #0
  400d34:	f47f af68 	bne.w	400c08 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  400d38:	4b0e      	ldr	r3, [pc, #56]	; (400d74 <xQueueGenericReceive+0x1ac>)
  400d3a:	4798      	blx	r3
  400d3c:	e764      	b.n	400c08 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400d3e:	68f8      	ldr	r0, [r7, #12]
  400d40:	4b14      	ldr	r3, [pc, #80]	; (400d94 <xQueueGenericReceive+0x1cc>)
  400d42:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400d44:	4b14      	ldr	r3, [pc, #80]	; (400d98 <xQueueGenericReceive+0x1d0>)
  400d46:	4798      	blx	r3
  400d48:	e75e      	b.n	400c08 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  400d4a:	68f8      	ldr	r0, [r7, #12]
  400d4c:	4b11      	ldr	r3, [pc, #68]	; (400d94 <xQueueGenericReceive+0x1cc>)
  400d4e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400d50:	4b11      	ldr	r3, [pc, #68]	; (400d98 <xQueueGenericReceive+0x1d0>)
  400d52:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  400d54:	2300      	movs	r3, #0
		}
	}
}
  400d56:	4618      	mov	r0, r3
  400d58:	3720      	adds	r7, #32
  400d5a:	46bd      	mov	sp, r7
  400d5c:	bd80      	pop	{r7, pc}
  400d5e:	bf00      	nop
  400d60:	004004c9 	.word	0x004004c9
  400d64:	00400481 	.word	0x00400481
  400d68:	00400e5d 	.word	0x00400e5d
  400d6c:	00401b6d 	.word	0x00401b6d
  400d70:	004016f5 	.word	0x004016f5
  400d74:	00400465 	.word	0x00400465
  400d78:	004004a1 	.word	0x004004a1
  400d7c:	004017b1 	.word	0x004017b1
  400d80:	004012b5 	.word	0x004012b5
  400d84:	004017ed 	.word	0x004017ed
  400d88:	00400f55 	.word	0x00400f55
  400d8c:	00401bc9 	.word	0x00401bc9
  400d90:	0040160d 	.word	0x0040160d
  400d94:	00400ead 	.word	0x00400ead
  400d98:	004012d1 	.word	0x004012d1

00400d9c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  400d9c:	b580      	push	{r7, lr}
  400d9e:	b084      	sub	sp, #16
  400da0:	af00      	add	r7, sp, #0
  400da2:	60f8      	str	r0, [r7, #12]
  400da4:	60b9      	str	r1, [r7, #8]
  400da6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  400da8:	68fb      	ldr	r3, [r7, #12]
  400daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400dac:	2b00      	cmp	r3, #0
  400dae:	d10c      	bne.n	400dca <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400db0:	68fb      	ldr	r3, [r7, #12]
  400db2:	681b      	ldr	r3, [r3, #0]
  400db4:	2b00      	cmp	r3, #0
  400db6:	d143      	bne.n	400e40 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400db8:	68fb      	ldr	r3, [r7, #12]
  400dba:	685b      	ldr	r3, [r3, #4]
  400dbc:	4618      	mov	r0, r3
  400dbe:	4b25      	ldr	r3, [pc, #148]	; (400e54 <prvCopyDataToQueue+0xb8>)
  400dc0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400dc2:	68fb      	ldr	r3, [r7, #12]
  400dc4:	2200      	movs	r2, #0
  400dc6:	605a      	str	r2, [r3, #4]
  400dc8:	e03a      	b.n	400e40 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  400dca:	687b      	ldr	r3, [r7, #4]
  400dcc:	2b00      	cmp	r3, #0
  400dce:	d119      	bne.n	400e04 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400dd0:	68fb      	ldr	r3, [r7, #12]
  400dd2:	6898      	ldr	r0, [r3, #8]
  400dd4:	68fb      	ldr	r3, [r7, #12]
  400dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400dd8:	461a      	mov	r2, r3
  400dda:	68b9      	ldr	r1, [r7, #8]
  400ddc:	4b1e      	ldr	r3, [pc, #120]	; (400e58 <prvCopyDataToQueue+0xbc>)
  400dde:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400de0:	68fb      	ldr	r3, [r7, #12]
  400de2:	689a      	ldr	r2, [r3, #8]
  400de4:	68fb      	ldr	r3, [r7, #12]
  400de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400de8:	441a      	add	r2, r3
  400dea:	68fb      	ldr	r3, [r7, #12]
  400dec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  400dee:	68fb      	ldr	r3, [r7, #12]
  400df0:	689a      	ldr	r2, [r3, #8]
  400df2:	68fb      	ldr	r3, [r7, #12]
  400df4:	685b      	ldr	r3, [r3, #4]
  400df6:	429a      	cmp	r2, r3
  400df8:	d322      	bcc.n	400e40 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400dfa:	68fb      	ldr	r3, [r7, #12]
  400dfc:	681a      	ldr	r2, [r3, #0]
  400dfe:	68fb      	ldr	r3, [r7, #12]
  400e00:	609a      	str	r2, [r3, #8]
  400e02:	e01d      	b.n	400e40 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400e04:	68fb      	ldr	r3, [r7, #12]
  400e06:	68d8      	ldr	r0, [r3, #12]
  400e08:	68fb      	ldr	r3, [r7, #12]
  400e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e0c:	461a      	mov	r2, r3
  400e0e:	68b9      	ldr	r1, [r7, #8]
  400e10:	4b11      	ldr	r3, [pc, #68]	; (400e58 <prvCopyDataToQueue+0xbc>)
  400e12:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  400e14:	68fb      	ldr	r3, [r7, #12]
  400e16:	68da      	ldr	r2, [r3, #12]
  400e18:	68fb      	ldr	r3, [r7, #12]
  400e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e1c:	425b      	negs	r3, r3
  400e1e:	441a      	add	r2, r3
  400e20:	68fb      	ldr	r3, [r7, #12]
  400e22:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  400e24:	68fb      	ldr	r3, [r7, #12]
  400e26:	68da      	ldr	r2, [r3, #12]
  400e28:	68fb      	ldr	r3, [r7, #12]
  400e2a:	681b      	ldr	r3, [r3, #0]
  400e2c:	429a      	cmp	r2, r3
  400e2e:	d207      	bcs.n	400e40 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400e30:	68fb      	ldr	r3, [r7, #12]
  400e32:	685a      	ldr	r2, [r3, #4]
  400e34:	68fb      	ldr	r3, [r7, #12]
  400e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e38:	425b      	negs	r3, r3
  400e3a:	441a      	add	r2, r3
  400e3c:	68fb      	ldr	r3, [r7, #12]
  400e3e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400e40:	68fb      	ldr	r3, [r7, #12]
  400e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400e44:	1c5a      	adds	r2, r3, #1
  400e46:	68fb      	ldr	r3, [r7, #12]
  400e48:	639a      	str	r2, [r3, #56]	; 0x38
}
  400e4a:	bf00      	nop
  400e4c:	3710      	adds	r7, #16
  400e4e:	46bd      	mov	sp, r7
  400e50:	bd80      	pop	{r7, pc}
  400e52:	bf00      	nop
  400e54:	00401c7d 	.word	0x00401c7d
  400e58:	00406811 	.word	0x00406811

00400e5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  400e5c:	b580      	push	{r7, lr}
  400e5e:	b082      	sub	sp, #8
  400e60:	af00      	add	r7, sp, #0
  400e62:	6078      	str	r0, [r7, #4]
  400e64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  400e66:	687b      	ldr	r3, [r7, #4]
  400e68:	681b      	ldr	r3, [r3, #0]
  400e6a:	2b00      	cmp	r3, #0
  400e6c:	d018      	beq.n	400ea0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  400e6e:	687b      	ldr	r3, [r7, #4]
  400e70:	68da      	ldr	r2, [r3, #12]
  400e72:	687b      	ldr	r3, [r7, #4]
  400e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e76:	441a      	add	r2, r3
  400e78:	687b      	ldr	r3, [r7, #4]
  400e7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  400e7c:	687b      	ldr	r3, [r7, #4]
  400e7e:	68da      	ldr	r2, [r3, #12]
  400e80:	687b      	ldr	r3, [r7, #4]
  400e82:	685b      	ldr	r3, [r3, #4]
  400e84:	429a      	cmp	r2, r3
  400e86:	d303      	bcc.n	400e90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  400e88:	687b      	ldr	r3, [r7, #4]
  400e8a:	681a      	ldr	r2, [r3, #0]
  400e8c:	687b      	ldr	r3, [r7, #4]
  400e8e:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  400e90:	687b      	ldr	r3, [r7, #4]
  400e92:	68d9      	ldr	r1, [r3, #12]
  400e94:	687b      	ldr	r3, [r7, #4]
  400e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e98:	461a      	mov	r2, r3
  400e9a:	6838      	ldr	r0, [r7, #0]
  400e9c:	4b02      	ldr	r3, [pc, #8]	; (400ea8 <prvCopyDataFromQueue+0x4c>)
  400e9e:	4798      	blx	r3
	}
}
  400ea0:	bf00      	nop
  400ea2:	3708      	adds	r7, #8
  400ea4:	46bd      	mov	sp, r7
  400ea6:	bd80      	pop	{r7, pc}
  400ea8:	00406811 	.word	0x00406811

00400eac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  400eac:	b580      	push	{r7, lr}
  400eae:	b082      	sub	sp, #8
  400eb0:	af00      	add	r7, sp, #0
  400eb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400eb4:	4b23      	ldr	r3, [pc, #140]	; (400f44 <prvUnlockQueue+0x98>)
  400eb6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400eb8:	e012      	b.n	400ee0 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400eba:	687b      	ldr	r3, [r7, #4]
  400ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400ebe:	2b00      	cmp	r3, #0
  400ec0:	d013      	beq.n	400eea <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ec2:	687b      	ldr	r3, [r7, #4]
  400ec4:	3324      	adds	r3, #36	; 0x24
  400ec6:	4618      	mov	r0, r3
  400ec8:	4b1f      	ldr	r3, [pc, #124]	; (400f48 <prvUnlockQueue+0x9c>)
  400eca:	4798      	blx	r3
  400ecc:	4603      	mov	r3, r0
  400ece:	2b00      	cmp	r3, #0
  400ed0:	d001      	beq.n	400ed6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  400ed2:	4b1e      	ldr	r3, [pc, #120]	; (400f4c <prvUnlockQueue+0xa0>)
  400ed4:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  400ed6:	687b      	ldr	r3, [r7, #4]
  400ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400eda:	1e5a      	subs	r2, r3, #1
  400edc:	687b      	ldr	r3, [r7, #4]
  400ede:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ee0:	687b      	ldr	r3, [r7, #4]
  400ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400ee4:	2b00      	cmp	r3, #0
  400ee6:	dce8      	bgt.n	400eba <prvUnlockQueue+0xe>
  400ee8:	e000      	b.n	400eec <prvUnlockQueue+0x40>
			}
			else
			{
				break;
  400eea:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400eec:	687b      	ldr	r3, [r7, #4]
  400eee:	f04f 32ff 	mov.w	r2, #4294967295
  400ef2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400ef4:	4b16      	ldr	r3, [pc, #88]	; (400f50 <prvUnlockQueue+0xa4>)
  400ef6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400ef8:	4b12      	ldr	r3, [pc, #72]	; (400f44 <prvUnlockQueue+0x98>)
  400efa:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400efc:	e012      	b.n	400f24 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400efe:	687b      	ldr	r3, [r7, #4]
  400f00:	691b      	ldr	r3, [r3, #16]
  400f02:	2b00      	cmp	r3, #0
  400f04:	d013      	beq.n	400f2e <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400f06:	687b      	ldr	r3, [r7, #4]
  400f08:	3310      	adds	r3, #16
  400f0a:	4618      	mov	r0, r3
  400f0c:	4b0e      	ldr	r3, [pc, #56]	; (400f48 <prvUnlockQueue+0x9c>)
  400f0e:	4798      	blx	r3
  400f10:	4603      	mov	r3, r0
  400f12:	2b00      	cmp	r3, #0
  400f14:	d001      	beq.n	400f1a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  400f16:	4b0d      	ldr	r3, [pc, #52]	; (400f4c <prvUnlockQueue+0xa0>)
  400f18:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  400f1a:	687b      	ldr	r3, [r7, #4]
  400f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400f1e:	1e5a      	subs	r2, r3, #1
  400f20:	687b      	ldr	r3, [r7, #4]
  400f22:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400f24:	687b      	ldr	r3, [r7, #4]
  400f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400f28:	2b00      	cmp	r3, #0
  400f2a:	dce8      	bgt.n	400efe <prvUnlockQueue+0x52>
  400f2c:	e000      	b.n	400f30 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
  400f2e:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  400f30:	687b      	ldr	r3, [r7, #4]
  400f32:	f04f 32ff 	mov.w	r2, #4294967295
  400f36:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  400f38:	4b05      	ldr	r3, [pc, #20]	; (400f50 <prvUnlockQueue+0xa4>)
  400f3a:	4798      	blx	r3
}
  400f3c:	bf00      	nop
  400f3e:	3708      	adds	r7, #8
  400f40:	46bd      	mov	sp, r7
  400f42:	bd80      	pop	{r7, pc}
  400f44:	00400481 	.word	0x00400481
  400f48:	004016f5 	.word	0x004016f5
  400f4c:	004018a1 	.word	0x004018a1
  400f50:	004004a1 	.word	0x004004a1

00400f54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  400f54:	b580      	push	{r7, lr}
  400f56:	b084      	sub	sp, #16
  400f58:	af00      	add	r7, sp, #0
  400f5a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  400f5c:	4b08      	ldr	r3, [pc, #32]	; (400f80 <prvIsQueueEmpty+0x2c>)
  400f5e:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  400f60:	687b      	ldr	r3, [r7, #4]
  400f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400f64:	2b00      	cmp	r3, #0
  400f66:	bf0c      	ite	eq
  400f68:	2301      	moveq	r3, #1
  400f6a:	2300      	movne	r3, #0
  400f6c:	b2db      	uxtb	r3, r3
  400f6e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  400f70:	4b04      	ldr	r3, [pc, #16]	; (400f84 <prvIsQueueEmpty+0x30>)
  400f72:	4798      	blx	r3

	return xReturn;
  400f74:	68fb      	ldr	r3, [r7, #12]
}
  400f76:	4618      	mov	r0, r3
  400f78:	3710      	adds	r7, #16
  400f7a:	46bd      	mov	sp, r7
  400f7c:	bd80      	pop	{r7, pc}
  400f7e:	bf00      	nop
  400f80:	00400481 	.word	0x00400481
  400f84:	004004a1 	.word	0x004004a1

00400f88 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  400f88:	b580      	push	{r7, lr}
  400f8a:	b084      	sub	sp, #16
  400f8c:	af00      	add	r7, sp, #0
  400f8e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  400f90:	4b09      	ldr	r3, [pc, #36]	; (400fb8 <prvIsQueueFull+0x30>)
  400f92:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  400f94:	687b      	ldr	r3, [r7, #4]
  400f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400f98:	687b      	ldr	r3, [r7, #4]
  400f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400f9c:	429a      	cmp	r2, r3
  400f9e:	bf0c      	ite	eq
  400fa0:	2301      	moveq	r3, #1
  400fa2:	2300      	movne	r3, #0
  400fa4:	b2db      	uxtb	r3, r3
  400fa6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  400fa8:	4b04      	ldr	r3, [pc, #16]	; (400fbc <prvIsQueueFull+0x34>)
  400faa:	4798      	blx	r3

	return xReturn;
  400fac:	68fb      	ldr	r3, [r7, #12]
}
  400fae:	4618      	mov	r0, r3
  400fb0:	3710      	adds	r7, #16
  400fb2:	46bd      	mov	sp, r7
  400fb4:	bd80      	pop	{r7, pc}
  400fb6:	bf00      	nop
  400fb8:	00400481 	.word	0x00400481
  400fbc:	004004a1 	.word	0x004004a1

00400fc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  400fc0:	b580      	push	{r7, lr}
  400fc2:	b082      	sub	sp, #8
  400fc4:	af00      	add	r7, sp, #0
  400fc6:	6078      	str	r0, [r7, #4]
  400fc8:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  400fca:	4b12      	ldr	r3, [pc, #72]	; (401014 <vQueueWaitForMessageRestricted+0x54>)
  400fcc:	4798      	blx	r3
  400fce:	687b      	ldr	r3, [r7, #4]
  400fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fd6:	d102      	bne.n	400fde <vQueueWaitForMessageRestricted+0x1e>
  400fd8:	687b      	ldr	r3, [r7, #4]
  400fda:	2200      	movs	r2, #0
  400fdc:	645a      	str	r2, [r3, #68]	; 0x44
  400fde:	687b      	ldr	r3, [r7, #4]
  400fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fe6:	d102      	bne.n	400fee <vQueueWaitForMessageRestricted+0x2e>
  400fe8:	687b      	ldr	r3, [r7, #4]
  400fea:	2200      	movs	r2, #0
  400fec:	649a      	str	r2, [r3, #72]	; 0x48
  400fee:	4b0a      	ldr	r3, [pc, #40]	; (401018 <vQueueWaitForMessageRestricted+0x58>)
  400ff0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  400ff2:	687b      	ldr	r3, [r7, #4]
  400ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400ff6:	2b00      	cmp	r3, #0
  400ff8:	d105      	bne.n	401006 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400ffa:	687b      	ldr	r3, [r7, #4]
  400ffc:	3324      	adds	r3, #36	; 0x24
  400ffe:	6839      	ldr	r1, [r7, #0]
  401000:	4618      	mov	r0, r3
  401002:	4b06      	ldr	r3, [pc, #24]	; (40101c <vQueueWaitForMessageRestricted+0x5c>)
  401004:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  401006:	6878      	ldr	r0, [r7, #4]
  401008:	4b05      	ldr	r3, [pc, #20]	; (401020 <vQueueWaitForMessageRestricted+0x60>)
  40100a:	4798      	blx	r3
	}
  40100c:	bf00      	nop
  40100e:	3708      	adds	r7, #8
  401010:	46bd      	mov	sp, r7
  401012:	bd80      	pop	{r7, pc}
  401014:	00400481 	.word	0x00400481
  401018:	004004a1 	.word	0x004004a1
  40101c:	00401691 	.word	0x00401691
  401020:	00400ead 	.word	0x00400ead

00401024 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  401024:	b590      	push	{r4, r7, lr}
  401026:	b08b      	sub	sp, #44	; 0x2c
  401028:	af02      	add	r7, sp, #8
  40102a:	60f8      	str	r0, [r7, #12]
  40102c:	60b9      	str	r1, [r7, #8]
  40102e:	603b      	str	r3, [r7, #0]
  401030:	4613      	mov	r3, r2
  401032:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  401034:	68fb      	ldr	r3, [r7, #12]
  401036:	2b00      	cmp	r3, #0
  401038:	d103      	bne.n	401042 <xTaskGenericCreate+0x1e>
  40103a:	4b54      	ldr	r3, [pc, #336]	; (40118c <xTaskGenericCreate+0x168>)
  40103c:	4798      	blx	r3
  40103e:	bf00      	nop
  401040:	e7fd      	b.n	40103e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  401042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401044:	2b04      	cmp	r3, #4
  401046:	d903      	bls.n	401050 <xTaskGenericCreate+0x2c>
  401048:	4b50      	ldr	r3, [pc, #320]	; (40118c <xTaskGenericCreate+0x168>)
  40104a:	4798      	blx	r3
  40104c:	bf00      	nop
  40104e:	e7fd      	b.n	40104c <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  401050:	88fb      	ldrh	r3, [r7, #6]
  401052:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401054:	4618      	mov	r0, r3
  401056:	4b4e      	ldr	r3, [pc, #312]	; (401190 <xTaskGenericCreate+0x16c>)
  401058:	4798      	blx	r3
  40105a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  40105c:	69bb      	ldr	r3, [r7, #24]
  40105e:	2b00      	cmp	r3, #0
  401060:	d07d      	beq.n	40115e <xTaskGenericCreate+0x13a>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  401062:	69bb      	ldr	r3, [r7, #24]
  401064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401066:	88fb      	ldrh	r3, [r7, #6]
  401068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  40106c:	3b01      	subs	r3, #1
  40106e:	009b      	lsls	r3, r3, #2
  401070:	4413      	add	r3, r2
  401072:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  401074:	697b      	ldr	r3, [r7, #20]
  401076:	f023 0307 	bic.w	r3, r3, #7
  40107a:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  40107c:	697b      	ldr	r3, [r7, #20]
  40107e:	f003 0307 	and.w	r3, r3, #7
  401082:	2b00      	cmp	r3, #0
  401084:	d003      	beq.n	40108e <xTaskGenericCreate+0x6a>
  401086:	4b41      	ldr	r3, [pc, #260]	; (40118c <xTaskGenericCreate+0x168>)
  401088:	4798      	blx	r3
  40108a:	bf00      	nop
  40108c:	e7fd      	b.n	40108a <xTaskGenericCreate+0x66>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  40108e:	88fb      	ldrh	r3, [r7, #6]
  401090:	9300      	str	r3, [sp, #0]
  401092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401096:	68b9      	ldr	r1, [r7, #8]
  401098:	69b8      	ldr	r0, [r7, #24]
  40109a:	4c3e      	ldr	r4, [pc, #248]	; (401194 <xTaskGenericCreate+0x170>)
  40109c:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40109e:	683a      	ldr	r2, [r7, #0]
  4010a0:	68f9      	ldr	r1, [r7, #12]
  4010a2:	6978      	ldr	r0, [r7, #20]
  4010a4:	4b3c      	ldr	r3, [pc, #240]	; (401198 <xTaskGenericCreate+0x174>)
  4010a6:	4798      	blx	r3
  4010a8:	4602      	mov	r2, r0
  4010aa:	69bb      	ldr	r3, [r7, #24]
  4010ac:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  4010ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4010b0:	2b00      	cmp	r3, #0
  4010b2:	d002      	beq.n	4010ba <xTaskGenericCreate+0x96>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  4010b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4010b6:	69ba      	ldr	r2, [r7, #24]
  4010b8:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  4010ba:	4b38      	ldr	r3, [pc, #224]	; (40119c <xTaskGenericCreate+0x178>)
  4010bc:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4010be:	4b38      	ldr	r3, [pc, #224]	; (4011a0 <xTaskGenericCreate+0x17c>)
  4010c0:	681b      	ldr	r3, [r3, #0]
  4010c2:	3301      	adds	r3, #1
  4010c4:	4a36      	ldr	r2, [pc, #216]	; (4011a0 <xTaskGenericCreate+0x17c>)
  4010c6:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4010c8:	4b36      	ldr	r3, [pc, #216]	; (4011a4 <xTaskGenericCreate+0x180>)
  4010ca:	681b      	ldr	r3, [r3, #0]
  4010cc:	2b00      	cmp	r3, #0
  4010ce:	d109      	bne.n	4010e4 <xTaskGenericCreate+0xc0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4010d0:	4a34      	ldr	r2, [pc, #208]	; (4011a4 <xTaskGenericCreate+0x180>)
  4010d2:	69bb      	ldr	r3, [r7, #24]
  4010d4:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4010d6:	4b32      	ldr	r3, [pc, #200]	; (4011a0 <xTaskGenericCreate+0x17c>)
  4010d8:	681b      	ldr	r3, [r3, #0]
  4010da:	2b01      	cmp	r3, #1
  4010dc:	d10f      	bne.n	4010fe <xTaskGenericCreate+0xda>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  4010de:	4b32      	ldr	r3, [pc, #200]	; (4011a8 <xTaskGenericCreate+0x184>)
  4010e0:	4798      	blx	r3
  4010e2:	e00c      	b.n	4010fe <xTaskGenericCreate+0xda>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4010e4:	4b31      	ldr	r3, [pc, #196]	; (4011ac <xTaskGenericCreate+0x188>)
  4010e6:	681b      	ldr	r3, [r3, #0]
  4010e8:	2b00      	cmp	r3, #0
  4010ea:	d108      	bne.n	4010fe <xTaskGenericCreate+0xda>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4010ec:	4b2d      	ldr	r3, [pc, #180]	; (4011a4 <xTaskGenericCreate+0x180>)
  4010ee:	681b      	ldr	r3, [r3, #0]
  4010f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4010f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4010f4:	429a      	cmp	r2, r3
  4010f6:	d802      	bhi.n	4010fe <xTaskGenericCreate+0xda>
					{
						pxCurrentTCB = pxNewTCB;
  4010f8:	4a2a      	ldr	r2, [pc, #168]	; (4011a4 <xTaskGenericCreate+0x180>)
  4010fa:	69bb      	ldr	r3, [r7, #24]
  4010fc:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  4010fe:	69bb      	ldr	r3, [r7, #24]
  401100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401102:	4b2b      	ldr	r3, [pc, #172]	; (4011b0 <xTaskGenericCreate+0x18c>)
  401104:	681b      	ldr	r3, [r3, #0]
  401106:	429a      	cmp	r2, r3
  401108:	d903      	bls.n	401112 <xTaskGenericCreate+0xee>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  40110a:	69bb      	ldr	r3, [r7, #24]
  40110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40110e:	4a28      	ldr	r2, [pc, #160]	; (4011b0 <xTaskGenericCreate+0x18c>)
  401110:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401112:	4b28      	ldr	r3, [pc, #160]	; (4011b4 <xTaskGenericCreate+0x190>)
  401114:	681a      	ldr	r2, [r3, #0]
  401116:	69bb      	ldr	r3, [r7, #24]
  401118:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  40111a:	4b26      	ldr	r3, [pc, #152]	; (4011b4 <xTaskGenericCreate+0x190>)
  40111c:	681b      	ldr	r3, [r3, #0]
  40111e:	3301      	adds	r3, #1
  401120:	4a24      	ldr	r2, [pc, #144]	; (4011b4 <xTaskGenericCreate+0x190>)
  401122:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  401124:	69bb      	ldr	r3, [r7, #24]
  401126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401128:	4b23      	ldr	r3, [pc, #140]	; (4011b8 <xTaskGenericCreate+0x194>)
  40112a:	681b      	ldr	r3, [r3, #0]
  40112c:	429a      	cmp	r2, r3
  40112e:	d903      	bls.n	401138 <xTaskGenericCreate+0x114>
  401130:	69bb      	ldr	r3, [r7, #24]
  401132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401134:	4a20      	ldr	r2, [pc, #128]	; (4011b8 <xTaskGenericCreate+0x194>)
  401136:	6013      	str	r3, [r2, #0]
  401138:	69bb      	ldr	r3, [r7, #24]
  40113a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40113c:	4613      	mov	r3, r2
  40113e:	009b      	lsls	r3, r3, #2
  401140:	4413      	add	r3, r2
  401142:	009b      	lsls	r3, r3, #2
  401144:	4a1d      	ldr	r2, [pc, #116]	; (4011bc <xTaskGenericCreate+0x198>)
  401146:	441a      	add	r2, r3
  401148:	69bb      	ldr	r3, [r7, #24]
  40114a:	3304      	adds	r3, #4
  40114c:	4619      	mov	r1, r3
  40114e:	4610      	mov	r0, r2
  401150:	4b1b      	ldr	r3, [pc, #108]	; (4011c0 <xTaskGenericCreate+0x19c>)
  401152:	4798      	blx	r3

			xReturn = pdPASS;
  401154:	2301      	movs	r3, #1
  401156:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401158:	4b1a      	ldr	r3, [pc, #104]	; (4011c4 <xTaskGenericCreate+0x1a0>)
  40115a:	4798      	blx	r3
  40115c:	e002      	b.n	401164 <xTaskGenericCreate+0x140>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40115e:	f04f 33ff 	mov.w	r3, #4294967295
  401162:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  401164:	69fb      	ldr	r3, [r7, #28]
  401166:	2b01      	cmp	r3, #1
  401168:	d10b      	bne.n	401182 <xTaskGenericCreate+0x15e>
	{
		if( xSchedulerRunning != pdFALSE )
  40116a:	4b10      	ldr	r3, [pc, #64]	; (4011ac <xTaskGenericCreate+0x188>)
  40116c:	681b      	ldr	r3, [r3, #0]
  40116e:	2b00      	cmp	r3, #0
  401170:	d007      	beq.n	401182 <xTaskGenericCreate+0x15e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401172:	4b0c      	ldr	r3, [pc, #48]	; (4011a4 <xTaskGenericCreate+0x180>)
  401174:	681b      	ldr	r3, [r3, #0]
  401176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40117a:	429a      	cmp	r2, r3
  40117c:	d201      	bcs.n	401182 <xTaskGenericCreate+0x15e>
			{
				portYIELD_WITHIN_API();
  40117e:	4b12      	ldr	r3, [pc, #72]	; (4011c8 <xTaskGenericCreate+0x1a4>)
  401180:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  401182:	69fb      	ldr	r3, [r7, #28]
}
  401184:	4618      	mov	r0, r3
  401186:	3724      	adds	r7, #36	; 0x24
  401188:	46bd      	mov	sp, r7
  40118a:	bd90      	pop	{r4, r7, pc}
  40118c:	004004c9 	.word	0x004004c9
  401190:	00401ad9 	.word	0x00401ad9
  401194:	004018e1 	.word	0x004018e1
  401198:	00400375 	.word	0x00400375
  40119c:	00400481 	.word	0x00400481
  4011a0:	2000aad4 	.word	0x2000aad4
  4011a4:	2000a9fc 	.word	0x2000a9fc
  4011a8:	00401955 	.word	0x00401955
  4011ac:	2000aae4 	.word	0x2000aae4
  4011b0:	2000aadc 	.word	0x2000aadc
  4011b4:	2000aaf8 	.word	0x2000aaf8
  4011b8:	2000aae0 	.word	0x2000aae0
  4011bc:	2000aa00 	.word	0x2000aa00
  4011c0:	004001bf 	.word	0x004001bf
  4011c4:	004004a1 	.word	0x004004a1
  4011c8:	00400465 	.word	0x00400465

004011cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  4011cc:	b580      	push	{r7, lr}
  4011ce:	b084      	sub	sp, #16
  4011d0:	af00      	add	r7, sp, #0
  4011d2:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4011d4:	2300      	movs	r3, #0
  4011d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  4011d8:	687b      	ldr	r3, [r7, #4]
  4011da:	2b00      	cmp	r3, #0
  4011dc:	d012      	beq.n	401204 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  4011de:	4b0e      	ldr	r3, [pc, #56]	; (401218 <vTaskDelay+0x4c>)
  4011e0:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  4011e2:	4b0e      	ldr	r3, [pc, #56]	; (40121c <vTaskDelay+0x50>)
  4011e4:	681a      	ldr	r2, [r3, #0]
  4011e6:	687b      	ldr	r3, [r7, #4]
  4011e8:	4413      	add	r3, r2
  4011ea:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4011ec:	4b0c      	ldr	r3, [pc, #48]	; (401220 <vTaskDelay+0x54>)
  4011ee:	681b      	ldr	r3, [r3, #0]
  4011f0:	3304      	adds	r3, #4
  4011f2:	4618      	mov	r0, r3
  4011f4:	4b0b      	ldr	r3, [pc, #44]	; (401224 <vTaskDelay+0x58>)
  4011f6:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4011f8:	68b8      	ldr	r0, [r7, #8]
  4011fa:	4b0b      	ldr	r3, [pc, #44]	; (401228 <vTaskDelay+0x5c>)
  4011fc:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  4011fe:	4b0b      	ldr	r3, [pc, #44]	; (40122c <vTaskDelay+0x60>)
  401200:	4798      	blx	r3
  401202:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401204:	68fb      	ldr	r3, [r7, #12]
  401206:	2b00      	cmp	r3, #0
  401208:	d101      	bne.n	40120e <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  40120a:	4b09      	ldr	r3, [pc, #36]	; (401230 <vTaskDelay+0x64>)
  40120c:	4798      	blx	r3
		}
	}
  40120e:	bf00      	nop
  401210:	3710      	adds	r7, #16
  401212:	46bd      	mov	sp, r7
  401214:	bd80      	pop	{r7, pc}
  401216:	bf00      	nop
  401218:	004012b5 	.word	0x004012b5
  40121c:	2000aad8 	.word	0x2000aad8
  401220:	2000a9fc 	.word	0x2000a9fc
  401224:	00400281 	.word	0x00400281
  401228:	00401a69 	.word	0x00401a69
  40122c:	004012d1 	.word	0x004012d1
  401230:	00400465 	.word	0x00400465

00401234 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  401234:	b590      	push	{r4, r7, lr}
  401236:	b087      	sub	sp, #28
  401238:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  40123a:	2300      	movs	r3, #0
  40123c:	9303      	str	r3, [sp, #12]
  40123e:	2300      	movs	r3, #0
  401240:	9302      	str	r3, [sp, #8]
  401242:	2300      	movs	r3, #0
  401244:	9301      	str	r3, [sp, #4]
  401246:	2300      	movs	r3, #0
  401248:	9300      	str	r3, [sp, #0]
  40124a:	2300      	movs	r3, #0
  40124c:	2282      	movs	r2, #130	; 0x82
  40124e:	4911      	ldr	r1, [pc, #68]	; (401294 <vTaskStartScheduler+0x60>)
  401250:	4811      	ldr	r0, [pc, #68]	; (401298 <vTaskStartScheduler+0x64>)
  401252:	4c12      	ldr	r4, [pc, #72]	; (40129c <vTaskStartScheduler+0x68>)
  401254:	47a0      	blx	r4
  401256:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401258:	687b      	ldr	r3, [r7, #4]
  40125a:	2b01      	cmp	r3, #1
  40125c:	d102      	bne.n	401264 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  40125e:	4b10      	ldr	r3, [pc, #64]	; (4012a0 <vTaskStartScheduler+0x6c>)
  401260:	4798      	blx	r3
  401262:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  401264:	687b      	ldr	r3, [r7, #4]
  401266:	2b01      	cmp	r3, #1
  401268:	d109      	bne.n	40127e <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  40126a:	4b0e      	ldr	r3, [pc, #56]	; (4012a4 <vTaskStartScheduler+0x70>)
  40126c:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  40126e:	4b0e      	ldr	r3, [pc, #56]	; (4012a8 <vTaskStartScheduler+0x74>)
  401270:	2201      	movs	r2, #1
  401272:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  401274:	4b0d      	ldr	r3, [pc, #52]	; (4012ac <vTaskStartScheduler+0x78>)
  401276:	2200      	movs	r2, #0
  401278:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  40127a:	4b0d      	ldr	r3, [pc, #52]	; (4012b0 <vTaskStartScheduler+0x7c>)
  40127c:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  40127e:	687b      	ldr	r3, [r7, #4]
  401280:	2b00      	cmp	r3, #0
  401282:	d103      	bne.n	40128c <vTaskStartScheduler+0x58>
  401284:	4b07      	ldr	r3, [pc, #28]	; (4012a4 <vTaskStartScheduler+0x70>)
  401286:	4798      	blx	r3
  401288:	bf00      	nop
  40128a:	e7fd      	b.n	401288 <vTaskStartScheduler+0x54>
}
  40128c:	bf00      	nop
  40128e:	370c      	adds	r7, #12
  401290:	46bd      	mov	sp, r7
  401292:	bd90      	pop	{r4, r7, pc}
  401294:	0040ae58 	.word	0x0040ae58
  401298:	004018b9 	.word	0x004018b9
  40129c:	00401025 	.word	0x00401025
  4012a0:	00401d01 	.word	0x00401d01
  4012a4:	004004c9 	.word	0x004004c9
  4012a8:	2000aae4 	.word	0x2000aae4
  4012ac:	2000aad8 	.word	0x2000aad8
  4012b0:	0040040d 	.word	0x0040040d

004012b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  4012b4:	b480      	push	{r7}
  4012b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  4012b8:	4b04      	ldr	r3, [pc, #16]	; (4012cc <vTaskSuspendAll+0x18>)
  4012ba:	681b      	ldr	r3, [r3, #0]
  4012bc:	3301      	adds	r3, #1
  4012be:	4a03      	ldr	r2, [pc, #12]	; (4012cc <vTaskSuspendAll+0x18>)
  4012c0:	6013      	str	r3, [r2, #0]
}
  4012c2:	bf00      	nop
  4012c4:	46bd      	mov	sp, r7
  4012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012ca:	4770      	bx	lr
  4012cc:	2000aae8 	.word	0x2000aae8

004012d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  4012d0:	b590      	push	{r4, r7, lr}
  4012d2:	b083      	sub	sp, #12
  4012d4:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4012d6:	2300      	movs	r3, #0
  4012d8:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  4012da:	4b36      	ldr	r3, [pc, #216]	; (4013b4 <xTaskResumeAll+0xe4>)
  4012dc:	681b      	ldr	r3, [r3, #0]
  4012de:	2b00      	cmp	r3, #0
  4012e0:	d103      	bne.n	4012ea <xTaskResumeAll+0x1a>
  4012e2:	4b35      	ldr	r3, [pc, #212]	; (4013b8 <xTaskResumeAll+0xe8>)
  4012e4:	4798      	blx	r3
  4012e6:	bf00      	nop
  4012e8:	e7fd      	b.n	4012e6 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  4012ea:	4b34      	ldr	r3, [pc, #208]	; (4013bc <xTaskResumeAll+0xec>)
  4012ec:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  4012ee:	4b31      	ldr	r3, [pc, #196]	; (4013b4 <xTaskResumeAll+0xe4>)
  4012f0:	681b      	ldr	r3, [r3, #0]
  4012f2:	3b01      	subs	r3, #1
  4012f4:	4a2f      	ldr	r2, [pc, #188]	; (4013b4 <xTaskResumeAll+0xe4>)
  4012f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4012f8:	4b2e      	ldr	r3, [pc, #184]	; (4013b4 <xTaskResumeAll+0xe4>)
  4012fa:	681b      	ldr	r3, [r3, #0]
  4012fc:	2b00      	cmp	r3, #0
  4012fe:	d152      	bne.n	4013a6 <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  401300:	4b2f      	ldr	r3, [pc, #188]	; (4013c0 <xTaskResumeAll+0xf0>)
  401302:	681b      	ldr	r3, [r3, #0]
  401304:	2b00      	cmp	r3, #0
  401306:	d04e      	beq.n	4013a6 <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  401308:	2300      	movs	r3, #0
  40130a:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40130c:	e027      	b.n	40135e <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  40130e:	4b2d      	ldr	r3, [pc, #180]	; (4013c4 <xTaskResumeAll+0xf4>)
  401310:	68db      	ldr	r3, [r3, #12]
  401312:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  401314:	f104 0318 	add.w	r3, r4, #24
  401318:	4618      	mov	r0, r3
  40131a:	4b2b      	ldr	r3, [pc, #172]	; (4013c8 <xTaskResumeAll+0xf8>)
  40131c:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  40131e:	1d23      	adds	r3, r4, #4
  401320:	4618      	mov	r0, r3
  401322:	4b29      	ldr	r3, [pc, #164]	; (4013c8 <xTaskResumeAll+0xf8>)
  401324:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  401326:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401328:	4b28      	ldr	r3, [pc, #160]	; (4013cc <xTaskResumeAll+0xfc>)
  40132a:	681b      	ldr	r3, [r3, #0]
  40132c:	429a      	cmp	r2, r3
  40132e:	d902      	bls.n	401336 <xTaskResumeAll+0x66>
  401330:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401332:	4a26      	ldr	r2, [pc, #152]	; (4013cc <xTaskResumeAll+0xfc>)
  401334:	6013      	str	r3, [r2, #0]
  401336:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401338:	4613      	mov	r3, r2
  40133a:	009b      	lsls	r3, r3, #2
  40133c:	4413      	add	r3, r2
  40133e:	009b      	lsls	r3, r3, #2
  401340:	4a23      	ldr	r2, [pc, #140]	; (4013d0 <xTaskResumeAll+0x100>)
  401342:	4413      	add	r3, r2
  401344:	1d22      	adds	r2, r4, #4
  401346:	4611      	mov	r1, r2
  401348:	4618      	mov	r0, r3
  40134a:	4b22      	ldr	r3, [pc, #136]	; (4013d4 <xTaskResumeAll+0x104>)
  40134c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40134e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401350:	4b21      	ldr	r3, [pc, #132]	; (4013d8 <xTaskResumeAll+0x108>)
  401352:	681b      	ldr	r3, [r3, #0]
  401354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401356:	429a      	cmp	r2, r3
  401358:	d301      	bcc.n	40135e <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  40135a:	2301      	movs	r3, #1
  40135c:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40135e:	4b19      	ldr	r3, [pc, #100]	; (4013c4 <xTaskResumeAll+0xf4>)
  401360:	681b      	ldr	r3, [r3, #0]
  401362:	2b00      	cmp	r3, #0
  401364:	d1d3      	bne.n	40130e <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401366:	4b1d      	ldr	r3, [pc, #116]	; (4013dc <xTaskResumeAll+0x10c>)
  401368:	681b      	ldr	r3, [r3, #0]
  40136a:	2b00      	cmp	r3, #0
  40136c:	d00d      	beq.n	40138a <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40136e:	e006      	b.n	40137e <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  401370:	4b1b      	ldr	r3, [pc, #108]	; (4013e0 <xTaskResumeAll+0x110>)
  401372:	4798      	blx	r3
						--uxMissedTicks;
  401374:	4b19      	ldr	r3, [pc, #100]	; (4013dc <xTaskResumeAll+0x10c>)
  401376:	681b      	ldr	r3, [r3, #0]
  401378:	3b01      	subs	r3, #1
  40137a:	4a18      	ldr	r2, [pc, #96]	; (4013dc <xTaskResumeAll+0x10c>)
  40137c:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40137e:	4b17      	ldr	r3, [pc, #92]	; (4013dc <xTaskResumeAll+0x10c>)
  401380:	681b      	ldr	r3, [r3, #0]
  401382:	2b00      	cmp	r3, #0
  401384:	d1f4      	bne.n	401370 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  401386:	2301      	movs	r3, #1
  401388:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  40138a:	683b      	ldr	r3, [r7, #0]
  40138c:	2b01      	cmp	r3, #1
  40138e:	d003      	beq.n	401398 <xTaskResumeAll+0xc8>
  401390:	4b14      	ldr	r3, [pc, #80]	; (4013e4 <xTaskResumeAll+0x114>)
  401392:	681b      	ldr	r3, [r3, #0]
  401394:	2b01      	cmp	r3, #1
  401396:	d106      	bne.n	4013a6 <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  401398:	2301      	movs	r3, #1
  40139a:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  40139c:	4b11      	ldr	r3, [pc, #68]	; (4013e4 <xTaskResumeAll+0x114>)
  40139e:	2200      	movs	r2, #0
  4013a0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  4013a2:	4b11      	ldr	r3, [pc, #68]	; (4013e8 <xTaskResumeAll+0x118>)
  4013a4:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  4013a6:	4b11      	ldr	r3, [pc, #68]	; (4013ec <xTaskResumeAll+0x11c>)
  4013a8:	4798      	blx	r3

	return xAlreadyYielded;
  4013aa:	687b      	ldr	r3, [r7, #4]
}
  4013ac:	4618      	mov	r0, r3
  4013ae:	370c      	adds	r7, #12
  4013b0:	46bd      	mov	sp, r7
  4013b2:	bd90      	pop	{r4, r7, pc}
  4013b4:	2000aae8 	.word	0x2000aae8
  4013b8:	004004c9 	.word	0x004004c9
  4013bc:	00400481 	.word	0x00400481
  4013c0:	2000aad4 	.word	0x2000aad4
  4013c4:	2000aa94 	.word	0x2000aa94
  4013c8:	00400281 	.word	0x00400281
  4013cc:	2000aae0 	.word	0x2000aae0
  4013d0:	2000aa00 	.word	0x2000aa00
  4013d4:	004001bf 	.word	0x004001bf
  4013d8:	2000a9fc 	.word	0x2000a9fc
  4013dc:	2000aaec 	.word	0x2000aaec
  4013e0:	0040141d 	.word	0x0040141d
  4013e4:	2000aaf0 	.word	0x2000aaf0
  4013e8:	00400465 	.word	0x00400465
  4013ec:	004004a1 	.word	0x004004a1

004013f0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  4013f0:	b580      	push	{r7, lr}
  4013f2:	b082      	sub	sp, #8
  4013f4:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  4013f6:	4b06      	ldr	r3, [pc, #24]	; (401410 <xTaskGetTickCount+0x20>)
  4013f8:	4798      	blx	r3
	{
		xTicks = xTickCount;
  4013fa:	4b06      	ldr	r3, [pc, #24]	; (401414 <xTaskGetTickCount+0x24>)
  4013fc:	681b      	ldr	r3, [r3, #0]
  4013fe:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  401400:	4b05      	ldr	r3, [pc, #20]	; (401418 <xTaskGetTickCount+0x28>)
  401402:	4798      	blx	r3

	return xTicks;
  401404:	687b      	ldr	r3, [r7, #4]
}
  401406:	4618      	mov	r0, r3
  401408:	3708      	adds	r7, #8
  40140a:	46bd      	mov	sp, r7
  40140c:	bd80      	pop	{r7, pc}
  40140e:	bf00      	nop
  401410:	00400481 	.word	0x00400481
  401414:	2000aad8 	.word	0x2000aad8
  401418:	004004a1 	.word	0x004004a1

0040141c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  40141c:	b580      	push	{r7, lr}
  40141e:	b084      	sub	sp, #16
  401420:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401422:	4b45      	ldr	r3, [pc, #276]	; (401538 <vTaskIncrementTick+0x11c>)
  401424:	681b      	ldr	r3, [r3, #0]
  401426:	2b00      	cmp	r3, #0
  401428:	d17b      	bne.n	401522 <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  40142a:	4b44      	ldr	r3, [pc, #272]	; (40153c <vTaskIncrementTick+0x120>)
  40142c:	681b      	ldr	r3, [r3, #0]
  40142e:	3301      	adds	r3, #1
  401430:	4a42      	ldr	r2, [pc, #264]	; (40153c <vTaskIncrementTick+0x120>)
  401432:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  401434:	4b41      	ldr	r3, [pc, #260]	; (40153c <vTaskIncrementTick+0x120>)
  401436:	681b      	ldr	r3, [r3, #0]
  401438:	2b00      	cmp	r3, #0
  40143a:	d12a      	bne.n	401492 <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  40143c:	4b40      	ldr	r3, [pc, #256]	; (401540 <vTaskIncrementTick+0x124>)
  40143e:	681b      	ldr	r3, [r3, #0]
  401440:	681b      	ldr	r3, [r3, #0]
  401442:	2b00      	cmp	r3, #0
  401444:	d003      	beq.n	40144e <vTaskIncrementTick+0x32>
  401446:	4b3f      	ldr	r3, [pc, #252]	; (401544 <vTaskIncrementTick+0x128>)
  401448:	4798      	blx	r3
  40144a:	bf00      	nop
  40144c:	e7fd      	b.n	40144a <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  40144e:	4b3c      	ldr	r3, [pc, #240]	; (401540 <vTaskIncrementTick+0x124>)
  401450:	681b      	ldr	r3, [r3, #0]
  401452:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  401454:	4b3c      	ldr	r3, [pc, #240]	; (401548 <vTaskIncrementTick+0x12c>)
  401456:	681b      	ldr	r3, [r3, #0]
  401458:	4a39      	ldr	r2, [pc, #228]	; (401540 <vTaskIncrementTick+0x124>)
  40145a:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  40145c:	4a3a      	ldr	r2, [pc, #232]	; (401548 <vTaskIncrementTick+0x12c>)
  40145e:	68fb      	ldr	r3, [r7, #12]
  401460:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  401462:	4b3a      	ldr	r3, [pc, #232]	; (40154c <vTaskIncrementTick+0x130>)
  401464:	681b      	ldr	r3, [r3, #0]
  401466:	3301      	adds	r3, #1
  401468:	4a38      	ldr	r2, [pc, #224]	; (40154c <vTaskIncrementTick+0x130>)
  40146a:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40146c:	4b34      	ldr	r3, [pc, #208]	; (401540 <vTaskIncrementTick+0x124>)
  40146e:	681b      	ldr	r3, [r3, #0]
  401470:	681b      	ldr	r3, [r3, #0]
  401472:	2b00      	cmp	r3, #0
  401474:	d104      	bne.n	401480 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  401476:	4b36      	ldr	r3, [pc, #216]	; (401550 <vTaskIncrementTick+0x134>)
  401478:	f04f 32ff 	mov.w	r2, #4294967295
  40147c:	601a      	str	r2, [r3, #0]
  40147e:	e008      	b.n	401492 <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401480:	4b2f      	ldr	r3, [pc, #188]	; (401540 <vTaskIncrementTick+0x124>)
  401482:	681b      	ldr	r3, [r3, #0]
  401484:	68db      	ldr	r3, [r3, #12]
  401486:	68db      	ldr	r3, [r3, #12]
  401488:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40148a:	68bb      	ldr	r3, [r7, #8]
  40148c:	685b      	ldr	r3, [r3, #4]
  40148e:	4a30      	ldr	r2, [pc, #192]	; (401550 <vTaskIncrementTick+0x134>)
  401490:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  401492:	4b2a      	ldr	r3, [pc, #168]	; (40153c <vTaskIncrementTick+0x120>)
  401494:	681a      	ldr	r2, [r3, #0]
  401496:	4b2e      	ldr	r3, [pc, #184]	; (401550 <vTaskIncrementTick+0x134>)
  401498:	681b      	ldr	r3, [r3, #0]
  40149a:	429a      	cmp	r2, r3
  40149c:	d347      	bcc.n	40152e <vTaskIncrementTick+0x112>
  40149e:	4b28      	ldr	r3, [pc, #160]	; (401540 <vTaskIncrementTick+0x124>)
  4014a0:	681b      	ldr	r3, [r3, #0]
  4014a2:	681b      	ldr	r3, [r3, #0]
  4014a4:	2b00      	cmp	r3, #0
  4014a6:	d104      	bne.n	4014b2 <vTaskIncrementTick+0x96>
  4014a8:	4b29      	ldr	r3, [pc, #164]	; (401550 <vTaskIncrementTick+0x134>)
  4014aa:	f04f 32ff 	mov.w	r2, #4294967295
  4014ae:	601a      	str	r2, [r3, #0]
  4014b0:	e03d      	b.n	40152e <vTaskIncrementTick+0x112>
  4014b2:	4b23      	ldr	r3, [pc, #140]	; (401540 <vTaskIncrementTick+0x124>)
  4014b4:	681b      	ldr	r3, [r3, #0]
  4014b6:	68db      	ldr	r3, [r3, #12]
  4014b8:	68db      	ldr	r3, [r3, #12]
  4014ba:	60bb      	str	r3, [r7, #8]
  4014bc:	68bb      	ldr	r3, [r7, #8]
  4014be:	685b      	ldr	r3, [r3, #4]
  4014c0:	607b      	str	r3, [r7, #4]
  4014c2:	4b1e      	ldr	r3, [pc, #120]	; (40153c <vTaskIncrementTick+0x120>)
  4014c4:	681a      	ldr	r2, [r3, #0]
  4014c6:	687b      	ldr	r3, [r7, #4]
  4014c8:	429a      	cmp	r2, r3
  4014ca:	d203      	bcs.n	4014d4 <vTaskIncrementTick+0xb8>
  4014cc:	4a20      	ldr	r2, [pc, #128]	; (401550 <vTaskIncrementTick+0x134>)
  4014ce:	687b      	ldr	r3, [r7, #4]
  4014d0:	6013      	str	r3, [r2, #0]
  4014d2:	e02c      	b.n	40152e <vTaskIncrementTick+0x112>
  4014d4:	68bb      	ldr	r3, [r7, #8]
  4014d6:	3304      	adds	r3, #4
  4014d8:	4618      	mov	r0, r3
  4014da:	4b1e      	ldr	r3, [pc, #120]	; (401554 <vTaskIncrementTick+0x138>)
  4014dc:	4798      	blx	r3
  4014de:	68bb      	ldr	r3, [r7, #8]
  4014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4014e2:	2b00      	cmp	r3, #0
  4014e4:	d004      	beq.n	4014f0 <vTaskIncrementTick+0xd4>
  4014e6:	68bb      	ldr	r3, [r7, #8]
  4014e8:	3318      	adds	r3, #24
  4014ea:	4618      	mov	r0, r3
  4014ec:	4b19      	ldr	r3, [pc, #100]	; (401554 <vTaskIncrementTick+0x138>)
  4014ee:	4798      	blx	r3
  4014f0:	68bb      	ldr	r3, [r7, #8]
  4014f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4014f4:	4b18      	ldr	r3, [pc, #96]	; (401558 <vTaskIncrementTick+0x13c>)
  4014f6:	681b      	ldr	r3, [r3, #0]
  4014f8:	429a      	cmp	r2, r3
  4014fa:	d903      	bls.n	401504 <vTaskIncrementTick+0xe8>
  4014fc:	68bb      	ldr	r3, [r7, #8]
  4014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401500:	4a15      	ldr	r2, [pc, #84]	; (401558 <vTaskIncrementTick+0x13c>)
  401502:	6013      	str	r3, [r2, #0]
  401504:	68bb      	ldr	r3, [r7, #8]
  401506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401508:	4613      	mov	r3, r2
  40150a:	009b      	lsls	r3, r3, #2
  40150c:	4413      	add	r3, r2
  40150e:	009b      	lsls	r3, r3, #2
  401510:	4a12      	ldr	r2, [pc, #72]	; (40155c <vTaskIncrementTick+0x140>)
  401512:	441a      	add	r2, r3
  401514:	68bb      	ldr	r3, [r7, #8]
  401516:	3304      	adds	r3, #4
  401518:	4619      	mov	r1, r3
  40151a:	4610      	mov	r0, r2
  40151c:	4b10      	ldr	r3, [pc, #64]	; (401560 <vTaskIncrementTick+0x144>)
  40151e:	4798      	blx	r3
  401520:	e7bd      	b.n	40149e <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  401522:	4b10      	ldr	r3, [pc, #64]	; (401564 <vTaskIncrementTick+0x148>)
  401524:	681b      	ldr	r3, [r3, #0]
  401526:	3301      	adds	r3, #1
  401528:	4a0e      	ldr	r2, [pc, #56]	; (401564 <vTaskIncrementTick+0x148>)
  40152a:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  40152c:	e7ff      	b.n	40152e <vTaskIncrementTick+0x112>
  40152e:	bf00      	nop
  401530:	3710      	adds	r7, #16
  401532:	46bd      	mov	sp, r7
  401534:	bd80      	pop	{r7, pc}
  401536:	bf00      	nop
  401538:	2000aae8 	.word	0x2000aae8
  40153c:	2000aad8 	.word	0x2000aad8
  401540:	2000aa8c 	.word	0x2000aa8c
  401544:	004004c9 	.word	0x004004c9
  401548:	2000aa90 	.word	0x2000aa90
  40154c:	2000aaf4 	.word	0x2000aaf4
  401550:	20000014 	.word	0x20000014
  401554:	00400281 	.word	0x00400281
  401558:	2000aae0 	.word	0x2000aae0
  40155c:	2000aa00 	.word	0x2000aa00
  401560:	004001bf 	.word	0x004001bf
  401564:	2000aaec 	.word	0x2000aaec

00401568 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401568:	b580      	push	{r7, lr}
  40156a:	b082      	sub	sp, #8
  40156c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  40156e:	4b21      	ldr	r3, [pc, #132]	; (4015f4 <vTaskSwitchContext+0x8c>)
  401570:	681b      	ldr	r3, [r3, #0]
  401572:	2b00      	cmp	r3, #0
  401574:	d010      	beq.n	401598 <vTaskSwitchContext+0x30>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  401576:	4b20      	ldr	r3, [pc, #128]	; (4015f8 <vTaskSwitchContext+0x90>)
  401578:	2201      	movs	r2, #1
  40157a:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  40157c:	e035      	b.n	4015ea <vTaskSwitchContext+0x82>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40157e:	4b1f      	ldr	r3, [pc, #124]	; (4015fc <vTaskSwitchContext+0x94>)
  401580:	681b      	ldr	r3, [r3, #0]
  401582:	2b00      	cmp	r3, #0
  401584:	d103      	bne.n	40158e <vTaskSwitchContext+0x26>
  401586:	4b1e      	ldr	r3, [pc, #120]	; (401600 <vTaskSwitchContext+0x98>)
  401588:	4798      	blx	r3
  40158a:	bf00      	nop
  40158c:	e7fd      	b.n	40158a <vTaskSwitchContext+0x22>
  40158e:	4b1b      	ldr	r3, [pc, #108]	; (4015fc <vTaskSwitchContext+0x94>)
  401590:	681b      	ldr	r3, [r3, #0]
  401592:	3b01      	subs	r3, #1
  401594:	4a19      	ldr	r2, [pc, #100]	; (4015fc <vTaskSwitchContext+0x94>)
  401596:	6013      	str	r3, [r2, #0]
  401598:	4b18      	ldr	r3, [pc, #96]	; (4015fc <vTaskSwitchContext+0x94>)
  40159a:	681a      	ldr	r2, [r3, #0]
  40159c:	4919      	ldr	r1, [pc, #100]	; (401604 <vTaskSwitchContext+0x9c>)
  40159e:	4613      	mov	r3, r2
  4015a0:	009b      	lsls	r3, r3, #2
  4015a2:	4413      	add	r3, r2
  4015a4:	009b      	lsls	r3, r3, #2
  4015a6:	440b      	add	r3, r1
  4015a8:	681b      	ldr	r3, [r3, #0]
  4015aa:	2b00      	cmp	r3, #0
  4015ac:	d0e7      	beq.n	40157e <vTaskSwitchContext+0x16>
  4015ae:	4b13      	ldr	r3, [pc, #76]	; (4015fc <vTaskSwitchContext+0x94>)
  4015b0:	681a      	ldr	r2, [r3, #0]
  4015b2:	4613      	mov	r3, r2
  4015b4:	009b      	lsls	r3, r3, #2
  4015b6:	4413      	add	r3, r2
  4015b8:	009b      	lsls	r3, r3, #2
  4015ba:	4a12      	ldr	r2, [pc, #72]	; (401604 <vTaskSwitchContext+0x9c>)
  4015bc:	4413      	add	r3, r2
  4015be:	607b      	str	r3, [r7, #4]
  4015c0:	687b      	ldr	r3, [r7, #4]
  4015c2:	685b      	ldr	r3, [r3, #4]
  4015c4:	685a      	ldr	r2, [r3, #4]
  4015c6:	687b      	ldr	r3, [r7, #4]
  4015c8:	605a      	str	r2, [r3, #4]
  4015ca:	687b      	ldr	r3, [r7, #4]
  4015cc:	685a      	ldr	r2, [r3, #4]
  4015ce:	687b      	ldr	r3, [r7, #4]
  4015d0:	3308      	adds	r3, #8
  4015d2:	429a      	cmp	r2, r3
  4015d4:	d104      	bne.n	4015e0 <vTaskSwitchContext+0x78>
  4015d6:	687b      	ldr	r3, [r7, #4]
  4015d8:	685b      	ldr	r3, [r3, #4]
  4015da:	685a      	ldr	r2, [r3, #4]
  4015dc:	687b      	ldr	r3, [r7, #4]
  4015de:	605a      	str	r2, [r3, #4]
  4015e0:	687b      	ldr	r3, [r7, #4]
  4015e2:	685b      	ldr	r3, [r3, #4]
  4015e4:	68db      	ldr	r3, [r3, #12]
  4015e6:	4a08      	ldr	r2, [pc, #32]	; (401608 <vTaskSwitchContext+0xa0>)
  4015e8:	6013      	str	r3, [r2, #0]
}
  4015ea:	bf00      	nop
  4015ec:	3708      	adds	r7, #8
  4015ee:	46bd      	mov	sp, r7
  4015f0:	bd80      	pop	{r7, pc}
  4015f2:	bf00      	nop
  4015f4:	2000aae8 	.word	0x2000aae8
  4015f8:	2000aaf0 	.word	0x2000aaf0
  4015fc:	2000aae0 	.word	0x2000aae0
  401600:	004004c9 	.word	0x004004c9
  401604:	2000aa00 	.word	0x2000aa00
  401608:	2000a9fc 	.word	0x2000a9fc

0040160c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  40160c:	b580      	push	{r7, lr}
  40160e:	b084      	sub	sp, #16
  401610:	af00      	add	r7, sp, #0
  401612:	6078      	str	r0, [r7, #4]
  401614:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  401616:	687b      	ldr	r3, [r7, #4]
  401618:	2b00      	cmp	r3, #0
  40161a:	d103      	bne.n	401624 <vTaskPlaceOnEventList+0x18>
  40161c:	4b14      	ldr	r3, [pc, #80]	; (401670 <vTaskPlaceOnEventList+0x64>)
  40161e:	4798      	blx	r3
  401620:	bf00      	nop
  401622:	e7fd      	b.n	401620 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401624:	4b13      	ldr	r3, [pc, #76]	; (401674 <vTaskPlaceOnEventList+0x68>)
  401626:	681b      	ldr	r3, [r3, #0]
  401628:	3318      	adds	r3, #24
  40162a:	4619      	mov	r1, r3
  40162c:	6878      	ldr	r0, [r7, #4]
  40162e:	4b12      	ldr	r3, [pc, #72]	; (401678 <vTaskPlaceOnEventList+0x6c>)
  401630:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401632:	4b10      	ldr	r3, [pc, #64]	; (401674 <vTaskPlaceOnEventList+0x68>)
  401634:	681b      	ldr	r3, [r3, #0]
  401636:	3304      	adds	r3, #4
  401638:	4618      	mov	r0, r3
  40163a:	4b10      	ldr	r3, [pc, #64]	; (40167c <vTaskPlaceOnEventList+0x70>)
  40163c:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  40163e:	683b      	ldr	r3, [r7, #0]
  401640:	f1b3 3fff 	cmp.w	r3, #4294967295
  401644:	d107      	bne.n	401656 <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401646:	4b0b      	ldr	r3, [pc, #44]	; (401674 <vTaskPlaceOnEventList+0x68>)
  401648:	681b      	ldr	r3, [r3, #0]
  40164a:	3304      	adds	r3, #4
  40164c:	4619      	mov	r1, r3
  40164e:	480c      	ldr	r0, [pc, #48]	; (401680 <vTaskPlaceOnEventList+0x74>)
  401650:	4b0c      	ldr	r3, [pc, #48]	; (401684 <vTaskPlaceOnEventList+0x78>)
  401652:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  401654:	e007      	b.n	401666 <vTaskPlaceOnEventList+0x5a>
			xTimeToWake = xTickCount + xTicksToWait;
  401656:	4b0c      	ldr	r3, [pc, #48]	; (401688 <vTaskPlaceOnEventList+0x7c>)
  401658:	681a      	ldr	r2, [r3, #0]
  40165a:	683b      	ldr	r3, [r7, #0]
  40165c:	4413      	add	r3, r2
  40165e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401660:	68f8      	ldr	r0, [r7, #12]
  401662:	4b0a      	ldr	r3, [pc, #40]	; (40168c <vTaskPlaceOnEventList+0x80>)
  401664:	4798      	blx	r3
}
  401666:	bf00      	nop
  401668:	3710      	adds	r7, #16
  40166a:	46bd      	mov	sp, r7
  40166c:	bd80      	pop	{r7, pc}
  40166e:	bf00      	nop
  401670:	004004c9 	.word	0x004004c9
  401674:	2000a9fc 	.word	0x2000a9fc
  401678:	0040020f 	.word	0x0040020f
  40167c:	00400281 	.word	0x00400281
  401680:	2000aac0 	.word	0x2000aac0
  401684:	004001bf 	.word	0x004001bf
  401688:	2000aad8 	.word	0x2000aad8
  40168c:	00401a69 	.word	0x00401a69

00401690 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  401690:	b580      	push	{r7, lr}
  401692:	b084      	sub	sp, #16
  401694:	af00      	add	r7, sp, #0
  401696:	6078      	str	r0, [r7, #4]
  401698:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  40169a:	687b      	ldr	r3, [r7, #4]
  40169c:	2b00      	cmp	r3, #0
  40169e:	d103      	bne.n	4016a8 <vTaskPlaceOnEventListRestricted+0x18>
  4016a0:	4b0e      	ldr	r3, [pc, #56]	; (4016dc <vTaskPlaceOnEventListRestricted+0x4c>)
  4016a2:	4798      	blx	r3
  4016a4:	bf00      	nop
  4016a6:	e7fd      	b.n	4016a4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4016a8:	4b0d      	ldr	r3, [pc, #52]	; (4016e0 <vTaskPlaceOnEventListRestricted+0x50>)
  4016aa:	681b      	ldr	r3, [r3, #0]
  4016ac:	3318      	adds	r3, #24
  4016ae:	4619      	mov	r1, r3
  4016b0:	6878      	ldr	r0, [r7, #4]
  4016b2:	4b0c      	ldr	r3, [pc, #48]	; (4016e4 <vTaskPlaceOnEventListRestricted+0x54>)
  4016b4:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4016b6:	4b0a      	ldr	r3, [pc, #40]	; (4016e0 <vTaskPlaceOnEventListRestricted+0x50>)
  4016b8:	681b      	ldr	r3, [r3, #0]
  4016ba:	3304      	adds	r3, #4
  4016bc:	4618      	mov	r0, r3
  4016be:	4b0a      	ldr	r3, [pc, #40]	; (4016e8 <vTaskPlaceOnEventListRestricted+0x58>)
  4016c0:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  4016c2:	4b0a      	ldr	r3, [pc, #40]	; (4016ec <vTaskPlaceOnEventListRestricted+0x5c>)
  4016c4:	681a      	ldr	r2, [r3, #0]
  4016c6:	683b      	ldr	r3, [r7, #0]
  4016c8:	4413      	add	r3, r2
  4016ca:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  4016cc:	68f8      	ldr	r0, [r7, #12]
  4016ce:	4b08      	ldr	r3, [pc, #32]	; (4016f0 <vTaskPlaceOnEventListRestricted+0x60>)
  4016d0:	4798      	blx	r3
	}
  4016d2:	bf00      	nop
  4016d4:	3710      	adds	r7, #16
  4016d6:	46bd      	mov	sp, r7
  4016d8:	bd80      	pop	{r7, pc}
  4016da:	bf00      	nop
  4016dc:	004004c9 	.word	0x004004c9
  4016e0:	2000a9fc 	.word	0x2000a9fc
  4016e4:	004001bf 	.word	0x004001bf
  4016e8:	00400281 	.word	0x00400281
  4016ec:	2000aad8 	.word	0x2000aad8
  4016f0:	00401a69 	.word	0x00401a69

004016f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  4016f4:	b580      	push	{r7, lr}
  4016f6:	b084      	sub	sp, #16
  4016f8:	af00      	add	r7, sp, #0
  4016fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4016fc:	687b      	ldr	r3, [r7, #4]
  4016fe:	68db      	ldr	r3, [r3, #12]
  401700:	68db      	ldr	r3, [r3, #12]
  401702:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  401704:	68bb      	ldr	r3, [r7, #8]
  401706:	2b00      	cmp	r3, #0
  401708:	d103      	bne.n	401712 <xTaskRemoveFromEventList+0x1e>
  40170a:	4b21      	ldr	r3, [pc, #132]	; (401790 <xTaskRemoveFromEventList+0x9c>)
  40170c:	4798      	blx	r3
  40170e:	bf00      	nop
  401710:	e7fd      	b.n	40170e <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401712:	68bb      	ldr	r3, [r7, #8]
  401714:	3318      	adds	r3, #24
  401716:	4618      	mov	r0, r3
  401718:	4b1e      	ldr	r3, [pc, #120]	; (401794 <xTaskRemoveFromEventList+0xa0>)
  40171a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40171c:	4b1e      	ldr	r3, [pc, #120]	; (401798 <xTaskRemoveFromEventList+0xa4>)
  40171e:	681b      	ldr	r3, [r3, #0]
  401720:	2b00      	cmp	r3, #0
  401722:	d11d      	bne.n	401760 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401724:	68bb      	ldr	r3, [r7, #8]
  401726:	3304      	adds	r3, #4
  401728:	4618      	mov	r0, r3
  40172a:	4b1a      	ldr	r3, [pc, #104]	; (401794 <xTaskRemoveFromEventList+0xa0>)
  40172c:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  40172e:	68bb      	ldr	r3, [r7, #8]
  401730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401732:	4b1a      	ldr	r3, [pc, #104]	; (40179c <xTaskRemoveFromEventList+0xa8>)
  401734:	681b      	ldr	r3, [r3, #0]
  401736:	429a      	cmp	r2, r3
  401738:	d903      	bls.n	401742 <xTaskRemoveFromEventList+0x4e>
  40173a:	68bb      	ldr	r3, [r7, #8]
  40173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40173e:	4a17      	ldr	r2, [pc, #92]	; (40179c <xTaskRemoveFromEventList+0xa8>)
  401740:	6013      	str	r3, [r2, #0]
  401742:	68bb      	ldr	r3, [r7, #8]
  401744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401746:	4613      	mov	r3, r2
  401748:	009b      	lsls	r3, r3, #2
  40174a:	4413      	add	r3, r2
  40174c:	009b      	lsls	r3, r3, #2
  40174e:	4a14      	ldr	r2, [pc, #80]	; (4017a0 <xTaskRemoveFromEventList+0xac>)
  401750:	441a      	add	r2, r3
  401752:	68bb      	ldr	r3, [r7, #8]
  401754:	3304      	adds	r3, #4
  401756:	4619      	mov	r1, r3
  401758:	4610      	mov	r0, r2
  40175a:	4b12      	ldr	r3, [pc, #72]	; (4017a4 <xTaskRemoveFromEventList+0xb0>)
  40175c:	4798      	blx	r3
  40175e:	e005      	b.n	40176c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401760:	68bb      	ldr	r3, [r7, #8]
  401762:	3318      	adds	r3, #24
  401764:	4619      	mov	r1, r3
  401766:	4810      	ldr	r0, [pc, #64]	; (4017a8 <xTaskRemoveFromEventList+0xb4>)
  401768:	4b0e      	ldr	r3, [pc, #56]	; (4017a4 <xTaskRemoveFromEventList+0xb0>)
  40176a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40176c:	68bb      	ldr	r3, [r7, #8]
  40176e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401770:	4b0e      	ldr	r3, [pc, #56]	; (4017ac <xTaskRemoveFromEventList+0xb8>)
  401772:	681b      	ldr	r3, [r3, #0]
  401774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401776:	429a      	cmp	r2, r3
  401778:	d302      	bcc.n	401780 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  40177a:	2301      	movs	r3, #1
  40177c:	60fb      	str	r3, [r7, #12]
  40177e:	e001      	b.n	401784 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  401780:	2300      	movs	r3, #0
  401782:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  401784:	68fb      	ldr	r3, [r7, #12]
}
  401786:	4618      	mov	r0, r3
  401788:	3710      	adds	r7, #16
  40178a:	46bd      	mov	sp, r7
  40178c:	bd80      	pop	{r7, pc}
  40178e:	bf00      	nop
  401790:	004004c9 	.word	0x004004c9
  401794:	00400281 	.word	0x00400281
  401798:	2000aae8 	.word	0x2000aae8
  40179c:	2000aae0 	.word	0x2000aae0
  4017a0:	2000aa00 	.word	0x2000aa00
  4017a4:	004001bf 	.word	0x004001bf
  4017a8:	2000aa94 	.word	0x2000aa94
  4017ac:	2000a9fc 	.word	0x2000a9fc

004017b0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  4017b0:	b580      	push	{r7, lr}
  4017b2:	b082      	sub	sp, #8
  4017b4:	af00      	add	r7, sp, #0
  4017b6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  4017b8:	687b      	ldr	r3, [r7, #4]
  4017ba:	2b00      	cmp	r3, #0
  4017bc:	d103      	bne.n	4017c6 <vTaskSetTimeOutState+0x16>
  4017be:	4b08      	ldr	r3, [pc, #32]	; (4017e0 <vTaskSetTimeOutState+0x30>)
  4017c0:	4798      	blx	r3
  4017c2:	bf00      	nop
  4017c4:	e7fd      	b.n	4017c2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4017c6:	4b07      	ldr	r3, [pc, #28]	; (4017e4 <vTaskSetTimeOutState+0x34>)
  4017c8:	681a      	ldr	r2, [r3, #0]
  4017ca:	687b      	ldr	r3, [r7, #4]
  4017cc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4017ce:	4b06      	ldr	r3, [pc, #24]	; (4017e8 <vTaskSetTimeOutState+0x38>)
  4017d0:	681a      	ldr	r2, [r3, #0]
  4017d2:	687b      	ldr	r3, [r7, #4]
  4017d4:	605a      	str	r2, [r3, #4]
}
  4017d6:	bf00      	nop
  4017d8:	3708      	adds	r7, #8
  4017da:	46bd      	mov	sp, r7
  4017dc:	bd80      	pop	{r7, pc}
  4017de:	bf00      	nop
  4017e0:	004004c9 	.word	0x004004c9
  4017e4:	2000aaf4 	.word	0x2000aaf4
  4017e8:	2000aad8 	.word	0x2000aad8

004017ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4017ec:	b580      	push	{r7, lr}
  4017ee:	b084      	sub	sp, #16
  4017f0:	af00      	add	r7, sp, #0
  4017f2:	6078      	str	r0, [r7, #4]
  4017f4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  4017f6:	687b      	ldr	r3, [r7, #4]
  4017f8:	2b00      	cmp	r3, #0
  4017fa:	d103      	bne.n	401804 <xTaskCheckForTimeOut+0x18>
  4017fc:	4b22      	ldr	r3, [pc, #136]	; (401888 <xTaskCheckForTimeOut+0x9c>)
  4017fe:	4798      	blx	r3
  401800:	bf00      	nop
  401802:	e7fd      	b.n	401800 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  401804:	683b      	ldr	r3, [r7, #0]
  401806:	2b00      	cmp	r3, #0
  401808:	d103      	bne.n	401812 <xTaskCheckForTimeOut+0x26>
  40180a:	4b1f      	ldr	r3, [pc, #124]	; (401888 <xTaskCheckForTimeOut+0x9c>)
  40180c:	4798      	blx	r3
  40180e:	bf00      	nop
  401810:	e7fd      	b.n	40180e <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  401812:	4b1e      	ldr	r3, [pc, #120]	; (40188c <xTaskCheckForTimeOut+0xa0>)
  401814:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401816:	683b      	ldr	r3, [r7, #0]
  401818:	681b      	ldr	r3, [r3, #0]
  40181a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40181e:	d102      	bne.n	401826 <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  401820:	2300      	movs	r3, #0
  401822:	60fb      	str	r3, [r7, #12]
  401824:	e029      	b.n	40187a <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  401826:	687b      	ldr	r3, [r7, #4]
  401828:	681a      	ldr	r2, [r3, #0]
  40182a:	4b19      	ldr	r3, [pc, #100]	; (401890 <xTaskCheckForTimeOut+0xa4>)
  40182c:	681b      	ldr	r3, [r3, #0]
  40182e:	429a      	cmp	r2, r3
  401830:	d008      	beq.n	401844 <xTaskCheckForTimeOut+0x58>
  401832:	687b      	ldr	r3, [r7, #4]
  401834:	685a      	ldr	r2, [r3, #4]
  401836:	4b17      	ldr	r3, [pc, #92]	; (401894 <xTaskCheckForTimeOut+0xa8>)
  401838:	681b      	ldr	r3, [r3, #0]
  40183a:	429a      	cmp	r2, r3
  40183c:	d802      	bhi.n	401844 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  40183e:	2301      	movs	r3, #1
  401840:	60fb      	str	r3, [r7, #12]
  401842:	e01a      	b.n	40187a <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  401844:	4b13      	ldr	r3, [pc, #76]	; (401894 <xTaskCheckForTimeOut+0xa8>)
  401846:	681a      	ldr	r2, [r3, #0]
  401848:	687b      	ldr	r3, [r7, #4]
  40184a:	685b      	ldr	r3, [r3, #4]
  40184c:	1ad2      	subs	r2, r2, r3
  40184e:	683b      	ldr	r3, [r7, #0]
  401850:	681b      	ldr	r3, [r3, #0]
  401852:	429a      	cmp	r2, r3
  401854:	d20f      	bcs.n	401876 <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  401856:	4b0f      	ldr	r3, [pc, #60]	; (401894 <xTaskCheckForTimeOut+0xa8>)
  401858:	681a      	ldr	r2, [r3, #0]
  40185a:	687b      	ldr	r3, [r7, #4]
  40185c:	685b      	ldr	r3, [r3, #4]
  40185e:	1ad3      	subs	r3, r2, r3
  401860:	683a      	ldr	r2, [r7, #0]
  401862:	6812      	ldr	r2, [r2, #0]
  401864:	1ad2      	subs	r2, r2, r3
  401866:	683b      	ldr	r3, [r7, #0]
  401868:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40186a:	6878      	ldr	r0, [r7, #4]
  40186c:	4b0a      	ldr	r3, [pc, #40]	; (401898 <xTaskCheckForTimeOut+0xac>)
  40186e:	4798      	blx	r3
			xReturn = pdFALSE;
  401870:	2300      	movs	r3, #0
  401872:	60fb      	str	r3, [r7, #12]
  401874:	e001      	b.n	40187a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  401876:	2301      	movs	r3, #1
  401878:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  40187a:	4b08      	ldr	r3, [pc, #32]	; (40189c <xTaskCheckForTimeOut+0xb0>)
  40187c:	4798      	blx	r3

	return xReturn;
  40187e:	68fb      	ldr	r3, [r7, #12]
}
  401880:	4618      	mov	r0, r3
  401882:	3710      	adds	r7, #16
  401884:	46bd      	mov	sp, r7
  401886:	bd80      	pop	{r7, pc}
  401888:	004004c9 	.word	0x004004c9
  40188c:	00400481 	.word	0x00400481
  401890:	2000aaf4 	.word	0x2000aaf4
  401894:	2000aad8 	.word	0x2000aad8
  401898:	004017b1 	.word	0x004017b1
  40189c:	004004a1 	.word	0x004004a1

004018a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  4018a0:	b480      	push	{r7}
  4018a2:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  4018a4:	4b03      	ldr	r3, [pc, #12]	; (4018b4 <vTaskMissedYield+0x14>)
  4018a6:	2201      	movs	r2, #1
  4018a8:	601a      	str	r2, [r3, #0]
}
  4018aa:	bf00      	nop
  4018ac:	46bd      	mov	sp, r7
  4018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018b2:	4770      	bx	lr
  4018b4:	2000aaf0 	.word	0x2000aaf0

004018b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  4018b8:	b580      	push	{r7, lr}
  4018ba:	b082      	sub	sp, #8
  4018bc:	af00      	add	r7, sp, #0
  4018be:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  4018c0:	4b04      	ldr	r3, [pc, #16]	; (4018d4 <prvIdleTask+0x1c>)
  4018c2:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  4018c4:	4b04      	ldr	r3, [pc, #16]	; (4018d8 <prvIdleTask+0x20>)
  4018c6:	681b      	ldr	r3, [r3, #0]
  4018c8:	2b01      	cmp	r3, #1
  4018ca:	d9f9      	bls.n	4018c0 <prvIdleTask+0x8>
			{
				taskYIELD();
  4018cc:	4b03      	ldr	r3, [pc, #12]	; (4018dc <prvIdleTask+0x24>)
  4018ce:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
  4018d0:	e7f6      	b.n	4018c0 <prvIdleTask+0x8>
  4018d2:	bf00      	nop
  4018d4:	004019d9 	.word	0x004019d9
  4018d8:	2000aa00 	.word	0x2000aa00
  4018dc:	00400465 	.word	0x00400465

004018e0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  4018e0:	b580      	push	{r7, lr}
  4018e2:	b084      	sub	sp, #16
  4018e4:	af00      	add	r7, sp, #0
  4018e6:	60f8      	str	r0, [r7, #12]
  4018e8:	60b9      	str	r1, [r7, #8]
  4018ea:	607a      	str	r2, [r7, #4]
  4018ec:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  4018ee:	68fb      	ldr	r3, [r7, #12]
  4018f0:	3334      	adds	r3, #52	; 0x34
  4018f2:	220a      	movs	r2, #10
  4018f4:	68b9      	ldr	r1, [r7, #8]
  4018f6:	4618      	mov	r0, r3
  4018f8:	4b14      	ldr	r3, [pc, #80]	; (40194c <prvInitialiseTCBVariables+0x6c>)
  4018fa:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  4018fc:	68fb      	ldr	r3, [r7, #12]
  4018fe:	2200      	movs	r2, #0
  401900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  401904:	687b      	ldr	r3, [r7, #4]
  401906:	2b04      	cmp	r3, #4
  401908:	d901      	bls.n	40190e <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  40190a:	2304      	movs	r3, #4
  40190c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  40190e:	68fb      	ldr	r3, [r7, #12]
  401910:	687a      	ldr	r2, [r7, #4]
  401912:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  401914:	68fb      	ldr	r3, [r7, #12]
  401916:	687a      	ldr	r2, [r7, #4]
  401918:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40191a:	68fb      	ldr	r3, [r7, #12]
  40191c:	3304      	adds	r3, #4
  40191e:	4618      	mov	r0, r3
  401920:	4b0b      	ldr	r3, [pc, #44]	; (401950 <prvInitialiseTCBVariables+0x70>)
  401922:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401924:	68fb      	ldr	r3, [r7, #12]
  401926:	3318      	adds	r3, #24
  401928:	4618      	mov	r0, r3
  40192a:	4b09      	ldr	r3, [pc, #36]	; (401950 <prvInitialiseTCBVariables+0x70>)
  40192c:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40192e:	68fb      	ldr	r3, [r7, #12]
  401930:	68fa      	ldr	r2, [r7, #12]
  401932:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  401934:	687b      	ldr	r3, [r7, #4]
  401936:	f1c3 0205 	rsb	r2, r3, #5
  40193a:	68fb      	ldr	r3, [r7, #12]
  40193c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40193e:	68fb      	ldr	r3, [r7, #12]
  401940:	68fa      	ldr	r2, [r7, #12]
  401942:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  401944:	bf00      	nop
  401946:	3710      	adds	r7, #16
  401948:	46bd      	mov	sp, r7
  40194a:	bd80      	pop	{r7, pc}
  40194c:	00406b1d 	.word	0x00406b1d
  401950:	004001a5 	.word	0x004001a5

00401954 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  401954:	b580      	push	{r7, lr}
  401956:	b082      	sub	sp, #8
  401958:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  40195a:	2300      	movs	r3, #0
  40195c:	607b      	str	r3, [r7, #4]
  40195e:	e00c      	b.n	40197a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  401960:	687a      	ldr	r2, [r7, #4]
  401962:	4613      	mov	r3, r2
  401964:	009b      	lsls	r3, r3, #2
  401966:	4413      	add	r3, r2
  401968:	009b      	lsls	r3, r3, #2
  40196a:	4a12      	ldr	r2, [pc, #72]	; (4019b4 <prvInitialiseTaskLists+0x60>)
  40196c:	4413      	add	r3, r2
  40196e:	4618      	mov	r0, r3
  401970:	4b11      	ldr	r3, [pc, #68]	; (4019b8 <prvInitialiseTaskLists+0x64>)
  401972:	4798      	blx	r3
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401974:	687b      	ldr	r3, [r7, #4]
  401976:	3301      	adds	r3, #1
  401978:	607b      	str	r3, [r7, #4]
  40197a:	687b      	ldr	r3, [r7, #4]
  40197c:	2b04      	cmp	r3, #4
  40197e:	d9ef      	bls.n	401960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  401980:	480e      	ldr	r0, [pc, #56]	; (4019bc <prvInitialiseTaskLists+0x68>)
  401982:	4b0d      	ldr	r3, [pc, #52]	; (4019b8 <prvInitialiseTaskLists+0x64>)
  401984:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  401986:	480e      	ldr	r0, [pc, #56]	; (4019c0 <prvInitialiseTaskLists+0x6c>)
  401988:	4b0b      	ldr	r3, [pc, #44]	; (4019b8 <prvInitialiseTaskLists+0x64>)
  40198a:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  40198c:	480d      	ldr	r0, [pc, #52]	; (4019c4 <prvInitialiseTaskLists+0x70>)
  40198e:	4b0a      	ldr	r3, [pc, #40]	; (4019b8 <prvInitialiseTaskLists+0x64>)
  401990:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  401992:	480d      	ldr	r0, [pc, #52]	; (4019c8 <prvInitialiseTaskLists+0x74>)
  401994:	4b08      	ldr	r3, [pc, #32]	; (4019b8 <prvInitialiseTaskLists+0x64>)
  401996:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  401998:	480c      	ldr	r0, [pc, #48]	; (4019cc <prvInitialiseTaskLists+0x78>)
  40199a:	4b07      	ldr	r3, [pc, #28]	; (4019b8 <prvInitialiseTaskLists+0x64>)
  40199c:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  40199e:	4b0c      	ldr	r3, [pc, #48]	; (4019d0 <prvInitialiseTaskLists+0x7c>)
  4019a0:	4a06      	ldr	r2, [pc, #24]	; (4019bc <prvInitialiseTaskLists+0x68>)
  4019a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4019a4:	4b0b      	ldr	r3, [pc, #44]	; (4019d4 <prvInitialiseTaskLists+0x80>)
  4019a6:	4a06      	ldr	r2, [pc, #24]	; (4019c0 <prvInitialiseTaskLists+0x6c>)
  4019a8:	601a      	str	r2, [r3, #0]
}
  4019aa:	bf00      	nop
  4019ac:	3708      	adds	r7, #8
  4019ae:	46bd      	mov	sp, r7
  4019b0:	bd80      	pop	{r7, pc}
  4019b2:	bf00      	nop
  4019b4:	2000aa00 	.word	0x2000aa00
  4019b8:	00400165 	.word	0x00400165
  4019bc:	2000aa64 	.word	0x2000aa64
  4019c0:	2000aa78 	.word	0x2000aa78
  4019c4:	2000aa94 	.word	0x2000aa94
  4019c8:	2000aaa8 	.word	0x2000aaa8
  4019cc:	2000aac0 	.word	0x2000aac0
  4019d0:	2000aa8c 	.word	0x2000aa8c
  4019d4:	2000aa90 	.word	0x2000aa90

004019d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  4019d8:	b580      	push	{r7, lr}
  4019da:	b082      	sub	sp, #8
  4019dc:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  4019de:	e028      	b.n	401a32 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  4019e0:	4b18      	ldr	r3, [pc, #96]	; (401a44 <prvCheckTasksWaitingTermination+0x6c>)
  4019e2:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4019e4:	4b18      	ldr	r3, [pc, #96]	; (401a48 <prvCheckTasksWaitingTermination+0x70>)
  4019e6:	681b      	ldr	r3, [r3, #0]
  4019e8:	2b00      	cmp	r3, #0
  4019ea:	bf0c      	ite	eq
  4019ec:	2301      	moveq	r3, #1
  4019ee:	2300      	movne	r3, #0
  4019f0:	b2db      	uxtb	r3, r3
  4019f2:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  4019f4:	4b15      	ldr	r3, [pc, #84]	; (401a4c <prvCheckTasksWaitingTermination+0x74>)
  4019f6:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  4019f8:	687b      	ldr	r3, [r7, #4]
  4019fa:	2b00      	cmp	r3, #0
  4019fc:	d119      	bne.n	401a32 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  4019fe:	4b14      	ldr	r3, [pc, #80]	; (401a50 <prvCheckTasksWaitingTermination+0x78>)
  401a00:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401a02:	4b11      	ldr	r3, [pc, #68]	; (401a48 <prvCheckTasksWaitingTermination+0x70>)
  401a04:	68db      	ldr	r3, [r3, #12]
  401a06:	68db      	ldr	r3, [r3, #12]
  401a08:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401a0a:	683b      	ldr	r3, [r7, #0]
  401a0c:	3304      	adds	r3, #4
  401a0e:	4618      	mov	r0, r3
  401a10:	4b10      	ldr	r3, [pc, #64]	; (401a54 <prvCheckTasksWaitingTermination+0x7c>)
  401a12:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401a14:	4b10      	ldr	r3, [pc, #64]	; (401a58 <prvCheckTasksWaitingTermination+0x80>)
  401a16:	681b      	ldr	r3, [r3, #0]
  401a18:	3b01      	subs	r3, #1
  401a1a:	4a0f      	ldr	r2, [pc, #60]	; (401a58 <prvCheckTasksWaitingTermination+0x80>)
  401a1c:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401a1e:	4b0f      	ldr	r3, [pc, #60]	; (401a5c <prvCheckTasksWaitingTermination+0x84>)
  401a20:	681b      	ldr	r3, [r3, #0]
  401a22:	3b01      	subs	r3, #1
  401a24:	4a0d      	ldr	r2, [pc, #52]	; (401a5c <prvCheckTasksWaitingTermination+0x84>)
  401a26:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  401a28:	4b0d      	ldr	r3, [pc, #52]	; (401a60 <prvCheckTasksWaitingTermination+0x88>)
  401a2a:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  401a2c:	6838      	ldr	r0, [r7, #0]
  401a2e:	4b0d      	ldr	r3, [pc, #52]	; (401a64 <prvCheckTasksWaitingTermination+0x8c>)
  401a30:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401a32:	4b0a      	ldr	r3, [pc, #40]	; (401a5c <prvCheckTasksWaitingTermination+0x84>)
  401a34:	681b      	ldr	r3, [r3, #0]
  401a36:	2b00      	cmp	r3, #0
  401a38:	d1d2      	bne.n	4019e0 <prvCheckTasksWaitingTermination+0x8>
			}
		}
	}
	#endif
}
  401a3a:	bf00      	nop
  401a3c:	3708      	adds	r7, #8
  401a3e:	46bd      	mov	sp, r7
  401a40:	bd80      	pop	{r7, pc}
  401a42:	bf00      	nop
  401a44:	004012b5 	.word	0x004012b5
  401a48:	2000aaa8 	.word	0x2000aaa8
  401a4c:	004012d1 	.word	0x004012d1
  401a50:	00400481 	.word	0x00400481
  401a54:	00400281 	.word	0x00400281
  401a58:	2000aad4 	.word	0x2000aad4
  401a5c:	2000aabc 	.word	0x2000aabc
  401a60:	004004a1 	.word	0x004004a1
  401a64:	00401b49 	.word	0x00401b49

00401a68 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  401a68:	b580      	push	{r7, lr}
  401a6a:	b082      	sub	sp, #8
  401a6c:	af00      	add	r7, sp, #0
  401a6e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401a70:	4b13      	ldr	r3, [pc, #76]	; (401ac0 <prvAddCurrentTaskToDelayedList+0x58>)
  401a72:	681b      	ldr	r3, [r3, #0]
  401a74:	687a      	ldr	r2, [r7, #4]
  401a76:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  401a78:	4b12      	ldr	r3, [pc, #72]	; (401ac4 <prvAddCurrentTaskToDelayedList+0x5c>)
  401a7a:	681b      	ldr	r3, [r3, #0]
  401a7c:	687a      	ldr	r2, [r7, #4]
  401a7e:	429a      	cmp	r2, r3
  401a80:	d209      	bcs.n	401a96 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401a82:	4b11      	ldr	r3, [pc, #68]	; (401ac8 <prvAddCurrentTaskToDelayedList+0x60>)
  401a84:	681a      	ldr	r2, [r3, #0]
  401a86:	4b0e      	ldr	r3, [pc, #56]	; (401ac0 <prvAddCurrentTaskToDelayedList+0x58>)
  401a88:	681b      	ldr	r3, [r3, #0]
  401a8a:	3304      	adds	r3, #4
  401a8c:	4619      	mov	r1, r3
  401a8e:	4610      	mov	r0, r2
  401a90:	4b0e      	ldr	r3, [pc, #56]	; (401acc <prvAddCurrentTaskToDelayedList+0x64>)
  401a92:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  401a94:	e010      	b.n	401ab8 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401a96:	4b0e      	ldr	r3, [pc, #56]	; (401ad0 <prvAddCurrentTaskToDelayedList+0x68>)
  401a98:	681a      	ldr	r2, [r3, #0]
  401a9a:	4b09      	ldr	r3, [pc, #36]	; (401ac0 <prvAddCurrentTaskToDelayedList+0x58>)
  401a9c:	681b      	ldr	r3, [r3, #0]
  401a9e:	3304      	adds	r3, #4
  401aa0:	4619      	mov	r1, r3
  401aa2:	4610      	mov	r0, r2
  401aa4:	4b09      	ldr	r3, [pc, #36]	; (401acc <prvAddCurrentTaskToDelayedList+0x64>)
  401aa6:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401aa8:	4b0a      	ldr	r3, [pc, #40]	; (401ad4 <prvAddCurrentTaskToDelayedList+0x6c>)
  401aaa:	681b      	ldr	r3, [r3, #0]
  401aac:	687a      	ldr	r2, [r7, #4]
  401aae:	429a      	cmp	r2, r3
  401ab0:	d202      	bcs.n	401ab8 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
  401ab2:	4a08      	ldr	r2, [pc, #32]	; (401ad4 <prvAddCurrentTaskToDelayedList+0x6c>)
  401ab4:	687b      	ldr	r3, [r7, #4]
  401ab6:	6013      	str	r3, [r2, #0]
}
  401ab8:	bf00      	nop
  401aba:	3708      	adds	r7, #8
  401abc:	46bd      	mov	sp, r7
  401abe:	bd80      	pop	{r7, pc}
  401ac0:	2000a9fc 	.word	0x2000a9fc
  401ac4:	2000aad8 	.word	0x2000aad8
  401ac8:	2000aa90 	.word	0x2000aa90
  401acc:	0040020f 	.word	0x0040020f
  401ad0:	2000aa8c 	.word	0x2000aa8c
  401ad4:	20000014 	.word	0x20000014

00401ad8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  401ad8:	b580      	push	{r7, lr}
  401ada:	b084      	sub	sp, #16
  401adc:	af00      	add	r7, sp, #0
  401ade:	4603      	mov	r3, r0
  401ae0:	6039      	str	r1, [r7, #0]
  401ae2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401ae4:	204c      	movs	r0, #76	; 0x4c
  401ae6:	4b15      	ldr	r3, [pc, #84]	; (401b3c <prvAllocateTCBAndStack+0x64>)
  401ae8:	4798      	blx	r3
  401aea:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  401aec:	68fb      	ldr	r3, [r7, #12]
  401aee:	2b00      	cmp	r3, #0
  401af0:	d01e      	beq.n	401b30 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401af2:	683b      	ldr	r3, [r7, #0]
  401af4:	2b00      	cmp	r3, #0
  401af6:	d106      	bne.n	401b06 <prvAllocateTCBAndStack+0x2e>
  401af8:	88fb      	ldrh	r3, [r7, #6]
  401afa:	009b      	lsls	r3, r3, #2
  401afc:	4618      	mov	r0, r3
  401afe:	4b0f      	ldr	r3, [pc, #60]	; (401b3c <prvAllocateTCBAndStack+0x64>)
  401b00:	4798      	blx	r3
  401b02:	4603      	mov	r3, r0
  401b04:	e000      	b.n	401b08 <prvAllocateTCBAndStack+0x30>
  401b06:	683b      	ldr	r3, [r7, #0]
  401b08:	68fa      	ldr	r2, [r7, #12]
  401b0a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  401b0c:	68fb      	ldr	r3, [r7, #12]
  401b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b10:	2b00      	cmp	r3, #0
  401b12:	d105      	bne.n	401b20 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  401b14:	68f8      	ldr	r0, [r7, #12]
  401b16:	4b0a      	ldr	r3, [pc, #40]	; (401b40 <prvAllocateTCBAndStack+0x68>)
  401b18:	4798      	blx	r3
			pxNewTCB = NULL;
  401b1a:	2300      	movs	r3, #0
  401b1c:	60fb      	str	r3, [r7, #12]
  401b1e:	e007      	b.n	401b30 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  401b20:	68fb      	ldr	r3, [r7, #12]
  401b22:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401b24:	88fb      	ldrh	r3, [r7, #6]
  401b26:	009b      	lsls	r3, r3, #2
  401b28:	461a      	mov	r2, r3
  401b2a:	21a5      	movs	r1, #165	; 0xa5
  401b2c:	4b05      	ldr	r3, [pc, #20]	; (401b44 <prvAllocateTCBAndStack+0x6c>)
  401b2e:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  401b30:	68fb      	ldr	r3, [r7, #12]
}
  401b32:	4618      	mov	r0, r3
  401b34:	3710      	adds	r7, #16
  401b36:	46bd      	mov	sp, r7
  401b38:	bd80      	pop	{r7, pc}
  401b3a:	bf00      	nop
  401b3c:	004005b1 	.word	0x004005b1
  401b40:	004006ad 	.word	0x004006ad
  401b44:	00406945 	.word	0x00406945

00401b48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  401b48:	b580      	push	{r7, lr}
  401b4a:	b082      	sub	sp, #8
  401b4c:	af00      	add	r7, sp, #0
  401b4e:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401b50:	687b      	ldr	r3, [r7, #4]
  401b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b54:	4618      	mov	r0, r3
  401b56:	4b04      	ldr	r3, [pc, #16]	; (401b68 <prvDeleteTCB+0x20>)
  401b58:	4798      	blx	r3
		vPortFree( pxTCB );
  401b5a:	6878      	ldr	r0, [r7, #4]
  401b5c:	4b02      	ldr	r3, [pc, #8]	; (401b68 <prvDeleteTCB+0x20>)
  401b5e:	4798      	blx	r3
	}
  401b60:	bf00      	nop
  401b62:	3708      	adds	r7, #8
  401b64:	46bd      	mov	sp, r7
  401b66:	bd80      	pop	{r7, pc}
  401b68:	004006ad 	.word	0x004006ad

00401b6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  401b6c:	b480      	push	{r7}
  401b6e:	b083      	sub	sp, #12
  401b70:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401b72:	4b05      	ldr	r3, [pc, #20]	; (401b88 <xTaskGetCurrentTaskHandle+0x1c>)
  401b74:	681b      	ldr	r3, [r3, #0]
  401b76:	607b      	str	r3, [r7, #4]

		return xReturn;
  401b78:	687b      	ldr	r3, [r7, #4]
	}
  401b7a:	4618      	mov	r0, r3
  401b7c:	370c      	adds	r7, #12
  401b7e:	46bd      	mov	sp, r7
  401b80:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b84:	4770      	bx	lr
  401b86:	bf00      	nop
  401b88:	2000a9fc 	.word	0x2000a9fc

00401b8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  401b8c:	b480      	push	{r7}
  401b8e:	b083      	sub	sp, #12
  401b90:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  401b92:	4b0b      	ldr	r3, [pc, #44]	; (401bc0 <xTaskGetSchedulerState+0x34>)
  401b94:	681b      	ldr	r3, [r3, #0]
  401b96:	2b00      	cmp	r3, #0
  401b98:	d102      	bne.n	401ba0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401b9a:	2300      	movs	r3, #0
  401b9c:	607b      	str	r3, [r7, #4]
  401b9e:	e008      	b.n	401bb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401ba0:	4b08      	ldr	r3, [pc, #32]	; (401bc4 <xTaskGetSchedulerState+0x38>)
  401ba2:	681b      	ldr	r3, [r3, #0]
  401ba4:	2b00      	cmp	r3, #0
  401ba6:	d102      	bne.n	401bae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  401ba8:	2301      	movs	r3, #1
  401baa:	607b      	str	r3, [r7, #4]
  401bac:	e001      	b.n	401bb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401bae:	2302      	movs	r3, #2
  401bb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  401bb2:	687b      	ldr	r3, [r7, #4]
	}
  401bb4:	4618      	mov	r0, r3
  401bb6:	370c      	adds	r7, #12
  401bb8:	46bd      	mov	sp, r7
  401bba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bbe:	4770      	bx	lr
  401bc0:	2000aae4 	.word	0x2000aae4
  401bc4:	2000aae8 	.word	0x2000aae8

00401bc8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  401bc8:	b580      	push	{r7, lr}
  401bca:	b084      	sub	sp, #16
  401bcc:	af00      	add	r7, sp, #0
  401bce:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401bd0:	687b      	ldr	r3, [r7, #4]
  401bd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401bd4:	687b      	ldr	r3, [r7, #4]
  401bd6:	2b00      	cmp	r3, #0
  401bd8:	d041      	beq.n	401c5e <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401bda:	68fb      	ldr	r3, [r7, #12]
  401bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bde:	4b22      	ldr	r3, [pc, #136]	; (401c68 <vTaskPriorityInherit+0xa0>)
  401be0:	681b      	ldr	r3, [r3, #0]
  401be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401be4:	429a      	cmp	r2, r3
  401be6:	d23a      	bcs.n	401c5e <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  401be8:	4b1f      	ldr	r3, [pc, #124]	; (401c68 <vTaskPriorityInherit+0xa0>)
  401bea:	681b      	ldr	r3, [r3, #0]
  401bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401bee:	f1c3 0205 	rsb	r2, r3, #5
  401bf2:	68fb      	ldr	r3, [r7, #12]
  401bf4:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401bf6:	68fb      	ldr	r3, [r7, #12]
  401bf8:	6959      	ldr	r1, [r3, #20]
  401bfa:	68fb      	ldr	r3, [r7, #12]
  401bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bfe:	4613      	mov	r3, r2
  401c00:	009b      	lsls	r3, r3, #2
  401c02:	4413      	add	r3, r2
  401c04:	009b      	lsls	r3, r3, #2
  401c06:	4a19      	ldr	r2, [pc, #100]	; (401c6c <vTaskPriorityInherit+0xa4>)
  401c08:	4413      	add	r3, r2
  401c0a:	4299      	cmp	r1, r3
  401c0c:	d122      	bne.n	401c54 <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401c0e:	68fb      	ldr	r3, [r7, #12]
  401c10:	3304      	adds	r3, #4
  401c12:	4618      	mov	r0, r3
  401c14:	4b16      	ldr	r3, [pc, #88]	; (401c70 <vTaskPriorityInherit+0xa8>)
  401c16:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401c18:	4b13      	ldr	r3, [pc, #76]	; (401c68 <vTaskPriorityInherit+0xa0>)
  401c1a:	681b      	ldr	r3, [r3, #0]
  401c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c1e:	68fb      	ldr	r3, [r7, #12]
  401c20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  401c22:	68fb      	ldr	r3, [r7, #12]
  401c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c26:	4b13      	ldr	r3, [pc, #76]	; (401c74 <vTaskPriorityInherit+0xac>)
  401c28:	681b      	ldr	r3, [r3, #0]
  401c2a:	429a      	cmp	r2, r3
  401c2c:	d903      	bls.n	401c36 <vTaskPriorityInherit+0x6e>
  401c2e:	68fb      	ldr	r3, [r7, #12]
  401c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c32:	4a10      	ldr	r2, [pc, #64]	; (401c74 <vTaskPriorityInherit+0xac>)
  401c34:	6013      	str	r3, [r2, #0]
  401c36:	68fb      	ldr	r3, [r7, #12]
  401c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c3a:	4613      	mov	r3, r2
  401c3c:	009b      	lsls	r3, r3, #2
  401c3e:	4413      	add	r3, r2
  401c40:	009b      	lsls	r3, r3, #2
  401c42:	4a0a      	ldr	r2, [pc, #40]	; (401c6c <vTaskPriorityInherit+0xa4>)
  401c44:	441a      	add	r2, r3
  401c46:	68fb      	ldr	r3, [r7, #12]
  401c48:	3304      	adds	r3, #4
  401c4a:	4619      	mov	r1, r3
  401c4c:	4610      	mov	r0, r2
  401c4e:	4b0a      	ldr	r3, [pc, #40]	; (401c78 <vTaskPriorityInherit+0xb0>)
  401c50:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  401c52:	e004      	b.n	401c5e <vTaskPriorityInherit+0x96>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401c54:	4b04      	ldr	r3, [pc, #16]	; (401c68 <vTaskPriorityInherit+0xa0>)
  401c56:	681b      	ldr	r3, [r3, #0]
  401c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c5a:	68fb      	ldr	r3, [r7, #12]
  401c5c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
  401c5e:	bf00      	nop
  401c60:	3710      	adds	r7, #16
  401c62:	46bd      	mov	sp, r7
  401c64:	bd80      	pop	{r7, pc}
  401c66:	bf00      	nop
  401c68:	2000a9fc 	.word	0x2000a9fc
  401c6c:	2000aa00 	.word	0x2000aa00
  401c70:	00400281 	.word	0x00400281
  401c74:	2000aae0 	.word	0x2000aae0
  401c78:	004001bf 	.word	0x004001bf

00401c7c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  401c7c:	b580      	push	{r7, lr}
  401c7e:	b084      	sub	sp, #16
  401c80:	af00      	add	r7, sp, #0
  401c82:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401c84:	687b      	ldr	r3, [r7, #4]
  401c86:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  401c88:	687b      	ldr	r3, [r7, #4]
  401c8a:	2b00      	cmp	r3, #0
  401c8c:	d02c      	beq.n	401ce8 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401c8e:	68fb      	ldr	r3, [r7, #12]
  401c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c92:	68fb      	ldr	r3, [r7, #12]
  401c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401c96:	429a      	cmp	r2, r3
  401c98:	d026      	beq.n	401ce8 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401c9a:	68fb      	ldr	r3, [r7, #12]
  401c9c:	3304      	adds	r3, #4
  401c9e:	4618      	mov	r0, r3
  401ca0:	4b13      	ldr	r3, [pc, #76]	; (401cf0 <vTaskPriorityDisinherit+0x74>)
  401ca2:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  401ca4:	68fb      	ldr	r3, [r7, #12]
  401ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  401ca8:	68fb      	ldr	r3, [r7, #12]
  401caa:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  401cac:	68fb      	ldr	r3, [r7, #12]
  401cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cb0:	f1c3 0205 	rsb	r2, r3, #5
  401cb4:	68fb      	ldr	r3, [r7, #12]
  401cb6:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  401cb8:	68fb      	ldr	r3, [r7, #12]
  401cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401cbc:	4b0d      	ldr	r3, [pc, #52]	; (401cf4 <vTaskPriorityDisinherit+0x78>)
  401cbe:	681b      	ldr	r3, [r3, #0]
  401cc0:	429a      	cmp	r2, r3
  401cc2:	d903      	bls.n	401ccc <vTaskPriorityDisinherit+0x50>
  401cc4:	68fb      	ldr	r3, [r7, #12]
  401cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cc8:	4a0a      	ldr	r2, [pc, #40]	; (401cf4 <vTaskPriorityDisinherit+0x78>)
  401cca:	6013      	str	r3, [r2, #0]
  401ccc:	68fb      	ldr	r3, [r7, #12]
  401cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401cd0:	4613      	mov	r3, r2
  401cd2:	009b      	lsls	r3, r3, #2
  401cd4:	4413      	add	r3, r2
  401cd6:	009b      	lsls	r3, r3, #2
  401cd8:	4a07      	ldr	r2, [pc, #28]	; (401cf8 <vTaskPriorityDisinherit+0x7c>)
  401cda:	441a      	add	r2, r3
  401cdc:	68fb      	ldr	r3, [r7, #12]
  401cde:	3304      	adds	r3, #4
  401ce0:	4619      	mov	r1, r3
  401ce2:	4610      	mov	r0, r2
  401ce4:	4b05      	ldr	r3, [pc, #20]	; (401cfc <vTaskPriorityDisinherit+0x80>)
  401ce6:	4798      	blx	r3
			}
		}
	}
  401ce8:	bf00      	nop
  401cea:	3710      	adds	r7, #16
  401cec:	46bd      	mov	sp, r7
  401cee:	bd80      	pop	{r7, pc}
  401cf0:	00400281 	.word	0x00400281
  401cf4:	2000aae0 	.word	0x2000aae0
  401cf8:	2000aa00 	.word	0x2000aa00
  401cfc:	004001bf 	.word	0x004001bf

00401d00 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  401d00:	b590      	push	{r4, r7, lr}
  401d02:	b087      	sub	sp, #28
  401d04:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  401d06:	2300      	movs	r3, #0
  401d08:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  401d0a:	4b11      	ldr	r3, [pc, #68]	; (401d50 <xTimerCreateTimerTask+0x50>)
  401d0c:	4798      	blx	r3

	if( xTimerQueue != NULL )
  401d0e:	4b11      	ldr	r3, [pc, #68]	; (401d54 <xTimerCreateTimerTask+0x54>)
  401d10:	681b      	ldr	r3, [r3, #0]
  401d12:	2b00      	cmp	r3, #0
  401d14:	d00f      	beq.n	401d36 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401d16:	2300      	movs	r3, #0
  401d18:	9303      	str	r3, [sp, #12]
  401d1a:	2300      	movs	r3, #0
  401d1c:	9302      	str	r3, [sp, #8]
  401d1e:	2300      	movs	r3, #0
  401d20:	9301      	str	r3, [sp, #4]
  401d22:	2304      	movs	r3, #4
  401d24:	9300      	str	r3, [sp, #0]
  401d26:	2300      	movs	r3, #0
  401d28:	f44f 7282 	mov.w	r2, #260	; 0x104
  401d2c:	490a      	ldr	r1, [pc, #40]	; (401d58 <xTimerCreateTimerTask+0x58>)
  401d2e:	480b      	ldr	r0, [pc, #44]	; (401d5c <xTimerCreateTimerTask+0x5c>)
  401d30:	4c0b      	ldr	r4, [pc, #44]	; (401d60 <xTimerCreateTimerTask+0x60>)
  401d32:	47a0      	blx	r4
  401d34:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  401d36:	687b      	ldr	r3, [r7, #4]
  401d38:	2b00      	cmp	r3, #0
  401d3a:	d103      	bne.n	401d44 <xTimerCreateTimerTask+0x44>
  401d3c:	4b09      	ldr	r3, [pc, #36]	; (401d64 <xTimerCreateTimerTask+0x64>)
  401d3e:	4798      	blx	r3
  401d40:	bf00      	nop
  401d42:	e7fd      	b.n	401d40 <xTimerCreateTimerTask+0x40>
	return xReturn;
  401d44:	687b      	ldr	r3, [r7, #4]
}
  401d46:	4618      	mov	r0, r3
  401d48:	370c      	adds	r7, #12
  401d4a:	46bd      	mov	sp, r7
  401d4c:	bd90      	pop	{r4, r7, pc}
  401d4e:	bf00      	nop
  401d50:	0040221d 	.word	0x0040221d
  401d54:	2000ab2c 	.word	0x2000ab2c
  401d58:	0040ae78 	.word	0x0040ae78
  401d5c:	00401e79 	.word	0x00401e79
  401d60:	00401025 	.word	0x00401025
  401d64:	004004c9 	.word	0x004004c9

00401d68 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  401d68:	b590      	push	{r4, r7, lr}
  401d6a:	b089      	sub	sp, #36	; 0x24
  401d6c:	af00      	add	r7, sp, #0
  401d6e:	60f8      	str	r0, [r7, #12]
  401d70:	60b9      	str	r1, [r7, #8]
  401d72:	607a      	str	r2, [r7, #4]
  401d74:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  401d76:	2300      	movs	r3, #0
  401d78:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401d7a:	4b1a      	ldr	r3, [pc, #104]	; (401de4 <xTimerGenericCommand+0x7c>)
  401d7c:	681b      	ldr	r3, [r3, #0]
  401d7e:	2b00      	cmp	r3, #0
  401d80:	d02a      	beq.n	401dd8 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401d82:	68bb      	ldr	r3, [r7, #8]
  401d84:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  401d86:	687b      	ldr	r3, [r7, #4]
  401d88:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  401d8a:	68fb      	ldr	r3, [r7, #12]
  401d8c:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  401d8e:	683b      	ldr	r3, [r7, #0]
  401d90:	2b00      	cmp	r3, #0
  401d92:	d118      	bne.n	401dc6 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401d94:	4b14      	ldr	r3, [pc, #80]	; (401de8 <xTimerGenericCommand+0x80>)
  401d96:	4798      	blx	r3
  401d98:	4603      	mov	r3, r0
  401d9a:	2b01      	cmp	r3, #1
  401d9c:	d109      	bne.n	401db2 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  401d9e:	4b11      	ldr	r3, [pc, #68]	; (401de4 <xTimerGenericCommand+0x7c>)
  401da0:	6818      	ldr	r0, [r3, #0]
  401da2:	f107 0110 	add.w	r1, r7, #16
  401da6:	2300      	movs	r3, #0
  401da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401daa:	4c10      	ldr	r4, [pc, #64]	; (401dec <xTimerGenericCommand+0x84>)
  401dac:	47a0      	blx	r4
  401dae:	61f8      	str	r0, [r7, #28]
  401db0:	e012      	b.n	401dd8 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401db2:	4b0c      	ldr	r3, [pc, #48]	; (401de4 <xTimerGenericCommand+0x7c>)
  401db4:	6818      	ldr	r0, [r3, #0]
  401db6:	f107 0110 	add.w	r1, r7, #16
  401dba:	2300      	movs	r3, #0
  401dbc:	2200      	movs	r2, #0
  401dbe:	4c0b      	ldr	r4, [pc, #44]	; (401dec <xTimerGenericCommand+0x84>)
  401dc0:	47a0      	blx	r4
  401dc2:	61f8      	str	r0, [r7, #28]
  401dc4:	e008      	b.n	401dd8 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401dc6:	4b07      	ldr	r3, [pc, #28]	; (401de4 <xTimerGenericCommand+0x7c>)
  401dc8:	6818      	ldr	r0, [r3, #0]
  401dca:	f107 0110 	add.w	r1, r7, #16
  401dce:	2300      	movs	r3, #0
  401dd0:	683a      	ldr	r2, [r7, #0]
  401dd2:	4c07      	ldr	r4, [pc, #28]	; (401df0 <xTimerGenericCommand+0x88>)
  401dd4:	47a0      	blx	r4
  401dd6:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  401dd8:	69fb      	ldr	r3, [r7, #28]
}
  401dda:	4618      	mov	r0, r3
  401ddc:	3724      	adds	r7, #36	; 0x24
  401dde:	46bd      	mov	sp, r7
  401de0:	bd90      	pop	{r4, r7, pc}
  401de2:	bf00      	nop
  401de4:	2000ab2c 	.word	0x2000ab2c
  401de8:	00401b8d 	.word	0x00401b8d
  401dec:	004009a5 	.word	0x004009a5
  401df0:	00400b0d 	.word	0x00400b0d

00401df4 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  401df4:	b590      	push	{r4, r7, lr}
  401df6:	b087      	sub	sp, #28
  401df8:	af02      	add	r7, sp, #8
  401dfa:	6078      	str	r0, [r7, #4]
  401dfc:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401dfe:	4b19      	ldr	r3, [pc, #100]	; (401e64 <prvProcessExpiredTimer+0x70>)
  401e00:	681b      	ldr	r3, [r3, #0]
  401e02:	68db      	ldr	r3, [r3, #12]
  401e04:	68db      	ldr	r3, [r3, #12]
  401e06:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  401e08:	68fb      	ldr	r3, [r7, #12]
  401e0a:	3304      	adds	r3, #4
  401e0c:	4618      	mov	r0, r3
  401e0e:	4b16      	ldr	r3, [pc, #88]	; (401e68 <prvProcessExpiredTimer+0x74>)
  401e10:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  401e12:	68fb      	ldr	r3, [r7, #12]
  401e14:	69db      	ldr	r3, [r3, #28]
  401e16:	2b01      	cmp	r3, #1
  401e18:	d11b      	bne.n	401e52 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401e1a:	68fb      	ldr	r3, [r7, #12]
  401e1c:	699a      	ldr	r2, [r3, #24]
  401e1e:	687b      	ldr	r3, [r7, #4]
  401e20:	18d1      	adds	r1, r2, r3
  401e22:	687b      	ldr	r3, [r7, #4]
  401e24:	683a      	ldr	r2, [r7, #0]
  401e26:	68f8      	ldr	r0, [r7, #12]
  401e28:	4c10      	ldr	r4, [pc, #64]	; (401e6c <prvProcessExpiredTimer+0x78>)
  401e2a:	47a0      	blx	r4
  401e2c:	4603      	mov	r3, r0
  401e2e:	2b01      	cmp	r3, #1
  401e30:	d10f      	bne.n	401e52 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  401e32:	2300      	movs	r3, #0
  401e34:	9300      	str	r3, [sp, #0]
  401e36:	2300      	movs	r3, #0
  401e38:	687a      	ldr	r2, [r7, #4]
  401e3a:	2100      	movs	r1, #0
  401e3c:	68f8      	ldr	r0, [r7, #12]
  401e3e:	4c0c      	ldr	r4, [pc, #48]	; (401e70 <prvProcessExpiredTimer+0x7c>)
  401e40:	47a0      	blx	r4
  401e42:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  401e44:	68bb      	ldr	r3, [r7, #8]
  401e46:	2b00      	cmp	r3, #0
  401e48:	d103      	bne.n	401e52 <prvProcessExpiredTimer+0x5e>
  401e4a:	4b0a      	ldr	r3, [pc, #40]	; (401e74 <prvProcessExpiredTimer+0x80>)
  401e4c:	4798      	blx	r3
  401e4e:	bf00      	nop
  401e50:	e7fd      	b.n	401e4e <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  401e52:	68fb      	ldr	r3, [r7, #12]
  401e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401e56:	68f8      	ldr	r0, [r7, #12]
  401e58:	4798      	blx	r3
}
  401e5a:	bf00      	nop
  401e5c:	3714      	adds	r7, #20
  401e5e:	46bd      	mov	sp, r7
  401e60:	bd90      	pop	{r4, r7, pc}
  401e62:	bf00      	nop
  401e64:	2000ab24 	.word	0x2000ab24
  401e68:	00400281 	.word	0x00400281
  401e6c:	00401fc1 	.word	0x00401fc1
  401e70:	00401d69 	.word	0x00401d69
  401e74:	004004c9 	.word	0x004004c9

00401e78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  401e78:	b580      	push	{r7, lr}
  401e7a:	b084      	sub	sp, #16
  401e7c:	af00      	add	r7, sp, #0
  401e7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401e80:	f107 0308 	add.w	r3, r7, #8
  401e84:	4618      	mov	r0, r3
  401e86:	4b05      	ldr	r3, [pc, #20]	; (401e9c <prvTimerTask+0x24>)
  401e88:	4798      	blx	r3
  401e8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  401e8c:	68bb      	ldr	r3, [r7, #8]
  401e8e:	4619      	mov	r1, r3
  401e90:	68f8      	ldr	r0, [r7, #12]
  401e92:	4b03      	ldr	r3, [pc, #12]	; (401ea0 <prvTimerTask+0x28>)
  401e94:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  401e96:	4b03      	ldr	r3, [pc, #12]	; (401ea4 <prvTimerTask+0x2c>)
  401e98:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401e9a:	e7f1      	b.n	401e80 <prvTimerTask+0x8>
  401e9c:	00401f2d 	.word	0x00401f2d
  401ea0:	00401ea9 	.word	0x00401ea9
  401ea4:	00402049 	.word	0x00402049

00401ea8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  401ea8:	b580      	push	{r7, lr}
  401eaa:	b084      	sub	sp, #16
  401eac:	af00      	add	r7, sp, #0
  401eae:	6078      	str	r0, [r7, #4]
  401eb0:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  401eb2:	4b17      	ldr	r3, [pc, #92]	; (401f10 <prvProcessTimerOrBlockTask+0x68>)
  401eb4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401eb6:	f107 0308 	add.w	r3, r7, #8
  401eba:	4618      	mov	r0, r3
  401ebc:	4b15      	ldr	r3, [pc, #84]	; (401f14 <prvProcessTimerOrBlockTask+0x6c>)
  401ebe:	4798      	blx	r3
  401ec0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  401ec2:	68bb      	ldr	r3, [r7, #8]
  401ec4:	2b00      	cmp	r3, #0
  401ec6:	d11d      	bne.n	401f04 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401ec8:	683b      	ldr	r3, [r7, #0]
  401eca:	2b00      	cmp	r3, #0
  401ecc:	d10a      	bne.n	401ee4 <prvProcessTimerOrBlockTask+0x3c>
  401ece:	687a      	ldr	r2, [r7, #4]
  401ed0:	68fb      	ldr	r3, [r7, #12]
  401ed2:	429a      	cmp	r2, r3
  401ed4:	d806      	bhi.n	401ee4 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  401ed6:	4b10      	ldr	r3, [pc, #64]	; (401f18 <prvProcessTimerOrBlockTask+0x70>)
  401ed8:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401eda:	68f9      	ldr	r1, [r7, #12]
  401edc:	6878      	ldr	r0, [r7, #4]
  401ede:	4b0f      	ldr	r3, [pc, #60]	; (401f1c <prvProcessTimerOrBlockTask+0x74>)
  401ee0:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  401ee2:	e011      	b.n	401f08 <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  401ee4:	4b0e      	ldr	r3, [pc, #56]	; (401f20 <prvProcessTimerOrBlockTask+0x78>)
  401ee6:	6818      	ldr	r0, [r3, #0]
  401ee8:	687a      	ldr	r2, [r7, #4]
  401eea:	68fb      	ldr	r3, [r7, #12]
  401eec:	1ad3      	subs	r3, r2, r3
  401eee:	4619      	mov	r1, r3
  401ef0:	4b0c      	ldr	r3, [pc, #48]	; (401f24 <prvProcessTimerOrBlockTask+0x7c>)
  401ef2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401ef4:	4b08      	ldr	r3, [pc, #32]	; (401f18 <prvProcessTimerOrBlockTask+0x70>)
  401ef6:	4798      	blx	r3
  401ef8:	4603      	mov	r3, r0
  401efa:	2b00      	cmp	r3, #0
  401efc:	d104      	bne.n	401f08 <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
  401efe:	4b0a      	ldr	r3, [pc, #40]	; (401f28 <prvProcessTimerOrBlockTask+0x80>)
  401f00:	4798      	blx	r3
}
  401f02:	e001      	b.n	401f08 <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
  401f04:	4b04      	ldr	r3, [pc, #16]	; (401f18 <prvProcessTimerOrBlockTask+0x70>)
  401f06:	4798      	blx	r3
}
  401f08:	bf00      	nop
  401f0a:	3710      	adds	r7, #16
  401f0c:	46bd      	mov	sp, r7
  401f0e:	bd80      	pop	{r7, pc}
  401f10:	004012b5 	.word	0x004012b5
  401f14:	00401f75 	.word	0x00401f75
  401f18:	004012d1 	.word	0x004012d1
  401f1c:	00401df5 	.word	0x00401df5
  401f20:	2000ab2c 	.word	0x2000ab2c
  401f24:	00400fc1 	.word	0x00400fc1
  401f28:	00400465 	.word	0x00400465

00401f2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  401f2c:	b480      	push	{r7}
  401f2e:	b085      	sub	sp, #20
  401f30:	af00      	add	r7, sp, #0
  401f32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401f34:	4b0e      	ldr	r3, [pc, #56]	; (401f70 <prvGetNextExpireTime+0x44>)
  401f36:	681b      	ldr	r3, [r3, #0]
  401f38:	681b      	ldr	r3, [r3, #0]
  401f3a:	2b00      	cmp	r3, #0
  401f3c:	bf0c      	ite	eq
  401f3e:	2301      	moveq	r3, #1
  401f40:	2300      	movne	r3, #0
  401f42:	b2db      	uxtb	r3, r3
  401f44:	461a      	mov	r2, r3
  401f46:	687b      	ldr	r3, [r7, #4]
  401f48:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  401f4a:	687b      	ldr	r3, [r7, #4]
  401f4c:	681b      	ldr	r3, [r3, #0]
  401f4e:	2b00      	cmp	r3, #0
  401f50:	d105      	bne.n	401f5e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f52:	4b07      	ldr	r3, [pc, #28]	; (401f70 <prvGetNextExpireTime+0x44>)
  401f54:	681b      	ldr	r3, [r3, #0]
  401f56:	68db      	ldr	r3, [r3, #12]
  401f58:	681b      	ldr	r3, [r3, #0]
  401f5a:	60fb      	str	r3, [r7, #12]
  401f5c:	e001      	b.n	401f62 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  401f5e:	2300      	movs	r3, #0
  401f60:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  401f62:	68fb      	ldr	r3, [r7, #12]
}
  401f64:	4618      	mov	r0, r3
  401f66:	3714      	adds	r7, #20
  401f68:	46bd      	mov	sp, r7
  401f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f6e:	4770      	bx	lr
  401f70:	2000ab24 	.word	0x2000ab24

00401f74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  401f74:	b580      	push	{r7, lr}
  401f76:	b084      	sub	sp, #16
  401f78:	af00      	add	r7, sp, #0
  401f7a:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  401f7c:	4b0d      	ldr	r3, [pc, #52]	; (401fb4 <prvSampleTimeNow+0x40>)
  401f7e:	4798      	blx	r3
  401f80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  401f82:	4b0d      	ldr	r3, [pc, #52]	; (401fb8 <prvSampleTimeNow+0x44>)
  401f84:	681b      	ldr	r3, [r3, #0]
  401f86:	68fa      	ldr	r2, [r7, #12]
  401f88:	429a      	cmp	r2, r3
  401f8a:	d208      	bcs.n	401f9e <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  401f8c:	4b0a      	ldr	r3, [pc, #40]	; (401fb8 <prvSampleTimeNow+0x44>)
  401f8e:	681b      	ldr	r3, [r3, #0]
  401f90:	4618      	mov	r0, r3
  401f92:	4b0a      	ldr	r3, [pc, #40]	; (401fbc <prvSampleTimeNow+0x48>)
  401f94:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  401f96:	687b      	ldr	r3, [r7, #4]
  401f98:	2201      	movs	r2, #1
  401f9a:	601a      	str	r2, [r3, #0]
  401f9c:	e002      	b.n	401fa4 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  401f9e:	687b      	ldr	r3, [r7, #4]
  401fa0:	2200      	movs	r2, #0
  401fa2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  401fa4:	4a04      	ldr	r2, [pc, #16]	; (401fb8 <prvSampleTimeNow+0x44>)
  401fa6:	68fb      	ldr	r3, [r7, #12]
  401fa8:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  401faa:	68fb      	ldr	r3, [r7, #12]
}
  401fac:	4618      	mov	r0, r3
  401fae:	3710      	adds	r7, #16
  401fb0:	46bd      	mov	sp, r7
  401fb2:	bd80      	pop	{r7, pc}
  401fb4:	004013f1 	.word	0x004013f1
  401fb8:	2000ab30 	.word	0x2000ab30
  401fbc:	00402155 	.word	0x00402155

00401fc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  401fc0:	b580      	push	{r7, lr}
  401fc2:	b086      	sub	sp, #24
  401fc4:	af00      	add	r7, sp, #0
  401fc6:	60f8      	str	r0, [r7, #12]
  401fc8:	60b9      	str	r1, [r7, #8]
  401fca:	607a      	str	r2, [r7, #4]
  401fcc:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  401fce:	2300      	movs	r3, #0
  401fd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401fd2:	68fb      	ldr	r3, [r7, #12]
  401fd4:	68ba      	ldr	r2, [r7, #8]
  401fd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401fd8:	68fb      	ldr	r3, [r7, #12]
  401fda:	68fa      	ldr	r2, [r7, #12]
  401fdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  401fde:	68ba      	ldr	r2, [r7, #8]
  401fe0:	687b      	ldr	r3, [r7, #4]
  401fe2:	429a      	cmp	r2, r3
  401fe4:	d812      	bhi.n	40200c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  401fe6:	687a      	ldr	r2, [r7, #4]
  401fe8:	683b      	ldr	r3, [r7, #0]
  401fea:	1ad2      	subs	r2, r2, r3
  401fec:	68fb      	ldr	r3, [r7, #12]
  401fee:	699b      	ldr	r3, [r3, #24]
  401ff0:	429a      	cmp	r2, r3
  401ff2:	d302      	bcc.n	401ffa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401ff4:	2301      	movs	r3, #1
  401ff6:	617b      	str	r3, [r7, #20]
  401ff8:	e01b      	b.n	402032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401ffa:	4b10      	ldr	r3, [pc, #64]	; (40203c <prvInsertTimerInActiveList+0x7c>)
  401ffc:	681a      	ldr	r2, [r3, #0]
  401ffe:	68fb      	ldr	r3, [r7, #12]
  402000:	3304      	adds	r3, #4
  402002:	4619      	mov	r1, r3
  402004:	4610      	mov	r0, r2
  402006:	4b0e      	ldr	r3, [pc, #56]	; (402040 <prvInsertTimerInActiveList+0x80>)
  402008:	4798      	blx	r3
  40200a:	e012      	b.n	402032 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40200c:	687a      	ldr	r2, [r7, #4]
  40200e:	683b      	ldr	r3, [r7, #0]
  402010:	429a      	cmp	r2, r3
  402012:	d206      	bcs.n	402022 <prvInsertTimerInActiveList+0x62>
  402014:	68ba      	ldr	r2, [r7, #8]
  402016:	683b      	ldr	r3, [r7, #0]
  402018:	429a      	cmp	r2, r3
  40201a:	d302      	bcc.n	402022 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40201c:	2301      	movs	r3, #1
  40201e:	617b      	str	r3, [r7, #20]
  402020:	e007      	b.n	402032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402022:	4b08      	ldr	r3, [pc, #32]	; (402044 <prvInsertTimerInActiveList+0x84>)
  402024:	681a      	ldr	r2, [r3, #0]
  402026:	68fb      	ldr	r3, [r7, #12]
  402028:	3304      	adds	r3, #4
  40202a:	4619      	mov	r1, r3
  40202c:	4610      	mov	r0, r2
  40202e:	4b04      	ldr	r3, [pc, #16]	; (402040 <prvInsertTimerInActiveList+0x80>)
  402030:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  402032:	697b      	ldr	r3, [r7, #20]
}
  402034:	4618      	mov	r0, r3
  402036:	3718      	adds	r7, #24
  402038:	46bd      	mov	sp, r7
  40203a:	bd80      	pop	{r7, pc}
  40203c:	2000ab28 	.word	0x2000ab28
  402040:	0040020f 	.word	0x0040020f
  402044:	2000ab24 	.word	0x2000ab24

00402048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  402048:	b590      	push	{r4, r7, lr}
  40204a:	b08b      	sub	sp, #44	; 0x2c
  40204c:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40204e:	1d3b      	adds	r3, r7, #4
  402050:	4618      	mov	r0, r3
  402052:	4b38      	ldr	r3, [pc, #224]	; (402134 <prvProcessReceivedCommands+0xec>)
  402054:	4798      	blx	r3
  402056:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  402058:	e05d      	b.n	402116 <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  40205a:	693b      	ldr	r3, [r7, #16]
  40205c:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  40205e:	69bb      	ldr	r3, [r7, #24]
  402060:	2b00      	cmp	r3, #0
  402062:	d008      	beq.n	402076 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402064:	69bb      	ldr	r3, [r7, #24]
  402066:	695b      	ldr	r3, [r3, #20]
  402068:	2b00      	cmp	r3, #0
  40206a:	d004      	beq.n	402076 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  40206c:	69bb      	ldr	r3, [r7, #24]
  40206e:	3304      	adds	r3, #4
  402070:	4618      	mov	r0, r3
  402072:	4b31      	ldr	r3, [pc, #196]	; (402138 <prvProcessReceivedCommands+0xf0>)
  402074:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  402076:	68bb      	ldr	r3, [r7, #8]
  402078:	2b03      	cmp	r3, #3
  40207a:	d84b      	bhi.n	402114 <prvProcessReceivedCommands+0xcc>
  40207c:	a201      	add	r2, pc, #4	; (adr r2, 402084 <prvProcessReceivedCommands+0x3c>)
  40207e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402082:	bf00      	nop
  402084:	00402095 	.word	0x00402095
  402088:	00402117 	.word	0x00402117
  40208c:	004020e3 	.word	0x004020e3
  402090:	0040210d 	.word	0x0040210d
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  402094:	68fa      	ldr	r2, [r7, #12]
  402096:	69bb      	ldr	r3, [r7, #24]
  402098:	699b      	ldr	r3, [r3, #24]
  40209a:	18d1      	adds	r1, r2, r3
  40209c:	68fb      	ldr	r3, [r7, #12]
  40209e:	69fa      	ldr	r2, [r7, #28]
  4020a0:	69b8      	ldr	r0, [r7, #24]
  4020a2:	4c26      	ldr	r4, [pc, #152]	; (40213c <prvProcessReceivedCommands+0xf4>)
  4020a4:	47a0      	blx	r4
  4020a6:	4603      	mov	r3, r0
  4020a8:	2b01      	cmp	r3, #1
  4020aa:	d134      	bne.n	402116 <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4020ac:	69bb      	ldr	r3, [r7, #24]
  4020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4020b0:	69b8      	ldr	r0, [r7, #24]
  4020b2:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4020b4:	69bb      	ldr	r3, [r7, #24]
  4020b6:	69db      	ldr	r3, [r3, #28]
  4020b8:	2b01      	cmp	r3, #1
  4020ba:	d12c      	bne.n	402116 <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4020bc:	68fa      	ldr	r2, [r7, #12]
  4020be:	69bb      	ldr	r3, [r7, #24]
  4020c0:	699b      	ldr	r3, [r3, #24]
  4020c2:	441a      	add	r2, r3
  4020c4:	2300      	movs	r3, #0
  4020c6:	9300      	str	r3, [sp, #0]
  4020c8:	2300      	movs	r3, #0
  4020ca:	2100      	movs	r1, #0
  4020cc:	69b8      	ldr	r0, [r7, #24]
  4020ce:	4c1c      	ldr	r4, [pc, #112]	; (402140 <prvProcessReceivedCommands+0xf8>)
  4020d0:	47a0      	blx	r4
  4020d2:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  4020d4:	697b      	ldr	r3, [r7, #20]
  4020d6:	2b00      	cmp	r3, #0
  4020d8:	d11d      	bne.n	402116 <prvProcessReceivedCommands+0xce>
  4020da:	4b1a      	ldr	r3, [pc, #104]	; (402144 <prvProcessReceivedCommands+0xfc>)
  4020dc:	4798      	blx	r3
  4020de:	bf00      	nop
  4020e0:	e7fd      	b.n	4020de <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  4020e2:	68fa      	ldr	r2, [r7, #12]
  4020e4:	69bb      	ldr	r3, [r7, #24]
  4020e6:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4020e8:	69bb      	ldr	r3, [r7, #24]
  4020ea:	699b      	ldr	r3, [r3, #24]
  4020ec:	2b00      	cmp	r3, #0
  4020ee:	d103      	bne.n	4020f8 <prvProcessReceivedCommands+0xb0>
  4020f0:	4b14      	ldr	r3, [pc, #80]	; (402144 <prvProcessReceivedCommands+0xfc>)
  4020f2:	4798      	blx	r3
  4020f4:	bf00      	nop
  4020f6:	e7fd      	b.n	4020f4 <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4020f8:	69bb      	ldr	r3, [r7, #24]
  4020fa:	699a      	ldr	r2, [r3, #24]
  4020fc:	69fb      	ldr	r3, [r7, #28]
  4020fe:	18d1      	adds	r1, r2, r3
  402100:	69fb      	ldr	r3, [r7, #28]
  402102:	69fa      	ldr	r2, [r7, #28]
  402104:	69b8      	ldr	r0, [r7, #24]
  402106:	4c0d      	ldr	r4, [pc, #52]	; (40213c <prvProcessReceivedCommands+0xf4>)
  402108:	47a0      	blx	r4
				break;
  40210a:	e004      	b.n	402116 <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  40210c:	69b8      	ldr	r0, [r7, #24]
  40210e:	4b0e      	ldr	r3, [pc, #56]	; (402148 <prvProcessReceivedCommands+0x100>)
  402110:	4798      	blx	r3
				break;
  402112:	e000      	b.n	402116 <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  402114:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  402116:	4b0d      	ldr	r3, [pc, #52]	; (40214c <prvProcessReceivedCommands+0x104>)
  402118:	6818      	ldr	r0, [r3, #0]
  40211a:	f107 0108 	add.w	r1, r7, #8
  40211e:	2300      	movs	r3, #0
  402120:	2200      	movs	r2, #0
  402122:	4c0b      	ldr	r4, [pc, #44]	; (402150 <prvProcessReceivedCommands+0x108>)
  402124:	47a0      	blx	r4
  402126:	4603      	mov	r3, r0
  402128:	2b00      	cmp	r3, #0
  40212a:	d196      	bne.n	40205a <prvProcessReceivedCommands+0x12>
		}
	}
}
  40212c:	bf00      	nop
  40212e:	3724      	adds	r7, #36	; 0x24
  402130:	46bd      	mov	sp, r7
  402132:	bd90      	pop	{r4, r7, pc}
  402134:	00401f75 	.word	0x00401f75
  402138:	00400281 	.word	0x00400281
  40213c:	00401fc1 	.word	0x00401fc1
  402140:	00401d69 	.word	0x00401d69
  402144:	004004c9 	.word	0x004004c9
  402148:	004006ad 	.word	0x004006ad
  40214c:	2000ab2c 	.word	0x2000ab2c
  402150:	00400bc9 	.word	0x00400bc9

00402154 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  402154:	b590      	push	{r4, r7, lr}
  402156:	b08b      	sub	sp, #44	; 0x2c
  402158:	af02      	add	r7, sp, #8
  40215a:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40215c:	e03e      	b.n	4021dc <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40215e:	4b29      	ldr	r3, [pc, #164]	; (402204 <prvSwitchTimerLists+0xb0>)
  402160:	681b      	ldr	r3, [r3, #0]
  402162:	68db      	ldr	r3, [r3, #12]
  402164:	681b      	ldr	r3, [r3, #0]
  402166:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402168:	4b26      	ldr	r3, [pc, #152]	; (402204 <prvSwitchTimerLists+0xb0>)
  40216a:	681b      	ldr	r3, [r3, #0]
  40216c:	68db      	ldr	r3, [r3, #12]
  40216e:	68db      	ldr	r3, [r3, #12]
  402170:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  402172:	69bb      	ldr	r3, [r7, #24]
  402174:	3304      	adds	r3, #4
  402176:	4618      	mov	r0, r3
  402178:	4b23      	ldr	r3, [pc, #140]	; (402208 <prvSwitchTimerLists+0xb4>)
  40217a:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40217c:	69bb      	ldr	r3, [r7, #24]
  40217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402180:	69b8      	ldr	r0, [r7, #24]
  402182:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402184:	69bb      	ldr	r3, [r7, #24]
  402186:	69db      	ldr	r3, [r3, #28]
  402188:	2b01      	cmp	r3, #1
  40218a:	d127      	bne.n	4021dc <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  40218c:	69bb      	ldr	r3, [r7, #24]
  40218e:	699a      	ldr	r2, [r3, #24]
  402190:	69fb      	ldr	r3, [r7, #28]
  402192:	4413      	add	r3, r2
  402194:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  402196:	697a      	ldr	r2, [r7, #20]
  402198:	69fb      	ldr	r3, [r7, #28]
  40219a:	429a      	cmp	r2, r3
  40219c:	d90e      	bls.n	4021bc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40219e:	69bb      	ldr	r3, [r7, #24]
  4021a0:	697a      	ldr	r2, [r7, #20]
  4021a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4021a4:	69bb      	ldr	r3, [r7, #24]
  4021a6:	69ba      	ldr	r2, [r7, #24]
  4021a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4021aa:	4b16      	ldr	r3, [pc, #88]	; (402204 <prvSwitchTimerLists+0xb0>)
  4021ac:	681a      	ldr	r2, [r3, #0]
  4021ae:	69bb      	ldr	r3, [r7, #24]
  4021b0:	3304      	adds	r3, #4
  4021b2:	4619      	mov	r1, r3
  4021b4:	4610      	mov	r0, r2
  4021b6:	4b15      	ldr	r3, [pc, #84]	; (40220c <prvSwitchTimerLists+0xb8>)
  4021b8:	4798      	blx	r3
  4021ba:	e00f      	b.n	4021dc <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4021bc:	2300      	movs	r3, #0
  4021be:	9300      	str	r3, [sp, #0]
  4021c0:	2300      	movs	r3, #0
  4021c2:	69fa      	ldr	r2, [r7, #28]
  4021c4:	2100      	movs	r1, #0
  4021c6:	69b8      	ldr	r0, [r7, #24]
  4021c8:	4c11      	ldr	r4, [pc, #68]	; (402210 <prvSwitchTimerLists+0xbc>)
  4021ca:	47a0      	blx	r4
  4021cc:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  4021ce:	693b      	ldr	r3, [r7, #16]
  4021d0:	2b00      	cmp	r3, #0
  4021d2:	d103      	bne.n	4021dc <prvSwitchTimerLists+0x88>
  4021d4:	4b0f      	ldr	r3, [pc, #60]	; (402214 <prvSwitchTimerLists+0xc0>)
  4021d6:	4798      	blx	r3
  4021d8:	bf00      	nop
  4021da:	e7fd      	b.n	4021d8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4021dc:	4b09      	ldr	r3, [pc, #36]	; (402204 <prvSwitchTimerLists+0xb0>)
  4021de:	681b      	ldr	r3, [r3, #0]
  4021e0:	681b      	ldr	r3, [r3, #0]
  4021e2:	2b00      	cmp	r3, #0
  4021e4:	d1bb      	bne.n	40215e <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  4021e6:	4b07      	ldr	r3, [pc, #28]	; (402204 <prvSwitchTimerLists+0xb0>)
  4021e8:	681b      	ldr	r3, [r3, #0]
  4021ea:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  4021ec:	4b0a      	ldr	r3, [pc, #40]	; (402218 <prvSwitchTimerLists+0xc4>)
  4021ee:	681b      	ldr	r3, [r3, #0]
  4021f0:	4a04      	ldr	r2, [pc, #16]	; (402204 <prvSwitchTimerLists+0xb0>)
  4021f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  4021f4:	4a08      	ldr	r2, [pc, #32]	; (402218 <prvSwitchTimerLists+0xc4>)
  4021f6:	68fb      	ldr	r3, [r7, #12]
  4021f8:	6013      	str	r3, [r2, #0]
}
  4021fa:	bf00      	nop
  4021fc:	3724      	adds	r7, #36	; 0x24
  4021fe:	46bd      	mov	sp, r7
  402200:	bd90      	pop	{r4, r7, pc}
  402202:	bf00      	nop
  402204:	2000ab24 	.word	0x2000ab24
  402208:	00400281 	.word	0x00400281
  40220c:	0040020f 	.word	0x0040020f
  402210:	00401d69 	.word	0x00401d69
  402214:	004004c9 	.word	0x004004c9
  402218:	2000ab28 	.word	0x2000ab28

0040221c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  40221c:	b580      	push	{r7, lr}
  40221e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402220:	4b0e      	ldr	r3, [pc, #56]	; (40225c <prvCheckForValidListAndQueue+0x40>)
  402222:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402224:	4b0e      	ldr	r3, [pc, #56]	; (402260 <prvCheckForValidListAndQueue+0x44>)
  402226:	681b      	ldr	r3, [r3, #0]
  402228:	2b00      	cmp	r3, #0
  40222a:	d113      	bne.n	402254 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  40222c:	480d      	ldr	r0, [pc, #52]	; (402264 <prvCheckForValidListAndQueue+0x48>)
  40222e:	4b0e      	ldr	r3, [pc, #56]	; (402268 <prvCheckForValidListAndQueue+0x4c>)
  402230:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  402232:	480e      	ldr	r0, [pc, #56]	; (40226c <prvCheckForValidListAndQueue+0x50>)
  402234:	4b0c      	ldr	r3, [pc, #48]	; (402268 <prvCheckForValidListAndQueue+0x4c>)
  402236:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  402238:	4b0d      	ldr	r3, [pc, #52]	; (402270 <prvCheckForValidListAndQueue+0x54>)
  40223a:	4a0a      	ldr	r2, [pc, #40]	; (402264 <prvCheckForValidListAndQueue+0x48>)
  40223c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40223e:	4b0d      	ldr	r3, [pc, #52]	; (402274 <prvCheckForValidListAndQueue+0x58>)
  402240:	4a0a      	ldr	r2, [pc, #40]	; (40226c <prvCheckForValidListAndQueue+0x50>)
  402242:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  402244:	2200      	movs	r2, #0
  402246:	210c      	movs	r1, #12
  402248:	2005      	movs	r0, #5
  40224a:	4b0b      	ldr	r3, [pc, #44]	; (402278 <prvCheckForValidListAndQueue+0x5c>)
  40224c:	4798      	blx	r3
  40224e:	4602      	mov	r2, r0
  402250:	4b03      	ldr	r3, [pc, #12]	; (402260 <prvCheckForValidListAndQueue+0x44>)
  402252:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  402254:	4b09      	ldr	r3, [pc, #36]	; (40227c <prvCheckForValidListAndQueue+0x60>)
  402256:	4798      	blx	r3
}
  402258:	bf00      	nop
  40225a:	bd80      	pop	{r7, pc}
  40225c:	00400481 	.word	0x00400481
  402260:	2000ab2c 	.word	0x2000ab2c
  402264:	2000aafc 	.word	0x2000aafc
  402268:	00400165 	.word	0x00400165
  40226c:	2000ab10 	.word	0x2000ab10
  402270:	2000ab24 	.word	0x2000ab24
  402274:	2000ab28 	.word	0x2000ab28
  402278:	0040090d 	.word	0x0040090d
  40227c:	004004a1 	.word	0x004004a1

00402280 <osc_get_rate>:
{
  402280:	b480      	push	{r7}
  402282:	b083      	sub	sp, #12
  402284:	af00      	add	r7, sp, #0
  402286:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402288:	687b      	ldr	r3, [r7, #4]
  40228a:	2b07      	cmp	r3, #7
  40228c:	d825      	bhi.n	4022da <osc_get_rate+0x5a>
  40228e:	a201      	add	r2, pc, #4	; (adr r2, 402294 <osc_get_rate+0x14>)
  402290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402294:	004022b5 	.word	0x004022b5
  402298:	004022bb 	.word	0x004022bb
  40229c:	004022c1 	.word	0x004022c1
  4022a0:	004022c7 	.word	0x004022c7
  4022a4:	004022cb 	.word	0x004022cb
  4022a8:	004022cf 	.word	0x004022cf
  4022ac:	004022d3 	.word	0x004022d3
  4022b0:	004022d7 	.word	0x004022d7
		return OSC_SLCK_32K_RC_HZ;
  4022b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4022b8:	e010      	b.n	4022dc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4022ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022be:	e00d      	b.n	4022dc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4022c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022c4:	e00a      	b.n	4022dc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4022c6:	4b08      	ldr	r3, [pc, #32]	; (4022e8 <osc_get_rate+0x68>)
  4022c8:	e008      	b.n	4022dc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4022ca:	4b08      	ldr	r3, [pc, #32]	; (4022ec <osc_get_rate+0x6c>)
  4022cc:	e006      	b.n	4022dc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4022ce:	4b08      	ldr	r3, [pc, #32]	; (4022f0 <osc_get_rate+0x70>)
  4022d0:	e004      	b.n	4022dc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4022d2:	4b07      	ldr	r3, [pc, #28]	; (4022f0 <osc_get_rate+0x70>)
  4022d4:	e002      	b.n	4022dc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4022d6:	4b06      	ldr	r3, [pc, #24]	; (4022f0 <osc_get_rate+0x70>)
  4022d8:	e000      	b.n	4022dc <osc_get_rate+0x5c>
	return 0;
  4022da:	2300      	movs	r3, #0
}
  4022dc:	4618      	mov	r0, r3
  4022de:	370c      	adds	r7, #12
  4022e0:	46bd      	mov	sp, r7
  4022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022e6:	4770      	bx	lr
  4022e8:	003d0900 	.word	0x003d0900
  4022ec:	007a1200 	.word	0x007a1200
  4022f0:	00b71b00 	.word	0x00b71b00

004022f4 <sysclk_get_main_hz>:
{
  4022f4:	b580      	push	{r7, lr}
  4022f6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4022f8:	2006      	movs	r0, #6
  4022fa:	4b03      	ldr	r3, [pc, #12]	; (402308 <sysclk_get_main_hz+0x14>)
  4022fc:	4798      	blx	r3
  4022fe:	4603      	mov	r3, r0
  402300:	011b      	lsls	r3, r3, #4
}
  402302:	4618      	mov	r0, r3
  402304:	bd80      	pop	{r7, pc}
  402306:	bf00      	nop
  402308:	00402281 	.word	0x00402281

0040230c <sysclk_get_cpu_hz>:
{
  40230c:	b580      	push	{r7, lr}
  40230e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402310:	4b02      	ldr	r3, [pc, #8]	; (40231c <sysclk_get_cpu_hz+0x10>)
  402312:	4798      	blx	r3
  402314:	4603      	mov	r3, r0
  402316:	085b      	lsrs	r3, r3, #1
}
  402318:	4618      	mov	r0, r3
  40231a:	bd80      	pop	{r7, pc}
  40231c:	004022f5 	.word	0x004022f5

00402320 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402320:	b580      	push	{r7, lr}
  402322:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402324:	4b02      	ldr	r3, [pc, #8]	; (402330 <sysclk_get_peripheral_hz+0x10>)
  402326:	4798      	blx	r3
  402328:	4603      	mov	r3, r0
  40232a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40232c:	4618      	mov	r0, r3
  40232e:	bd80      	pop	{r7, pc}
  402330:	004022f5 	.word	0x004022f5

00402334 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402334:	b580      	push	{r7, lr}
  402336:	b082      	sub	sp, #8
  402338:	af00      	add	r7, sp, #0
  40233a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40233c:	6878      	ldr	r0, [r7, #4]
  40233e:	4b03      	ldr	r3, [pc, #12]	; (40234c <sysclk_enable_peripheral_clock+0x18>)
  402340:	4798      	blx	r3
}
  402342:	bf00      	nop
  402344:	3708      	adds	r7, #8
  402346:	46bd      	mov	sp, r7
  402348:	bd80      	pop	{r7, pc}
  40234a:	bf00      	nop
  40234c:	00406155 	.word	0x00406155

00402350 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
  402350:	b580      	push	{r7, lr}
  402352:	b082      	sub	sp, #8
  402354:	af00      	add	r7, sp, #0
  402356:	6078      	str	r0, [r7, #4]
  402358:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
  40235a:	4b10      	ldr	r3, [pc, #64]	; (40239c <twi_master_setup+0x4c>)
  40235c:	4798      	blx	r3
  40235e:	4602      	mov	r2, r0
  402360:	683b      	ldr	r3, [r7, #0]
  402362:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
  402364:	683b      	ldr	r3, [r7, #0]
  402366:	2200      	movs	r2, #0
  402368:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
  40236a:	687b      	ldr	r3, [r7, #4]
  40236c:	4a0c      	ldr	r2, [pc, #48]	; (4023a0 <twi_master_setup+0x50>)
  40236e:	4293      	cmp	r3, r2
  402370:	d103      	bne.n	40237a <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
  402372:	2011      	movs	r0, #17
  402374:	4b0b      	ldr	r3, [pc, #44]	; (4023a4 <twi_master_setup+0x54>)
  402376:	4798      	blx	r3
  402378:	e006      	b.n	402388 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
  40237a:	687b      	ldr	r3, [r7, #4]
  40237c:	4a0a      	ldr	r2, [pc, #40]	; (4023a8 <twi_master_setup+0x58>)
  40237e:	4293      	cmp	r3, r2
  402380:	d102      	bne.n	402388 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
  402382:	2012      	movs	r0, #18
  402384:	4b07      	ldr	r3, [pc, #28]	; (4023a4 <twi_master_setup+0x54>)
  402386:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
  402388:	6839      	ldr	r1, [r7, #0]
  40238a:	6878      	ldr	r0, [r7, #4]
  40238c:	4b07      	ldr	r3, [pc, #28]	; (4023ac <twi_master_setup+0x5c>)
  40238e:	4798      	blx	r3
  402390:	4603      	mov	r3, r0
}
  402392:	4618      	mov	r0, r3
  402394:	3708      	adds	r7, #8
  402396:	46bd      	mov	sp, r7
  402398:	bd80      	pop	{r7, pc}
  40239a:	bf00      	nop
  40239c:	00402321 	.word	0x00402321
  4023a0:	400a8000 	.word	0x400a8000
  4023a4:	00402335 	.word	0x00402335
  4023a8:	400ac000 	.word	0x400ac000
  4023ac:	00406201 	.word	0x00406201

004023b0 <bsp_hw_init>:
static void m_bsp_i2c_init(void);
static void m_bsp_sdcard_init(void);

/* Function definitions ----------------------------------------------- */
void bsp_hw_init(void)
{
  4023b0:	b580      	push	{r7, lr}
  4023b2:	af00      	add	r7, sp, #0
  m_bsp_i2c_init();
  4023b4:	4b04      	ldr	r3, [pc, #16]	; (4023c8 <bsp_hw_init+0x18>)
  4023b6:	4798      	blx	r3
  bsp_rtc_init();
  4023b8:	4b04      	ldr	r3, [pc, #16]	; (4023cc <bsp_hw_init+0x1c>)
  4023ba:	4798      	blx	r3
  m_bsp_sdcard_init();
  4023bc:	4b04      	ldr	r3, [pc, #16]	; (4023d0 <bsp_hw_init+0x20>)
  4023be:	4798      	blx	r3
  bsp_gpio_init();
  4023c0:	4b04      	ldr	r3, [pc, #16]	; (4023d4 <bsp_hw_init+0x24>)
  4023c2:	4798      	blx	r3
}
  4023c4:	bf00      	nop
  4023c6:	bd80      	pop	{r7, pc}
  4023c8:	004024d1 	.word	0x004024d1
  4023cc:	00402b51 	.word	0x00402b51
  4023d0:	00402505 	.word	0x00402505
  4023d4:	00402931 	.word	0x00402931

004023d8 <bsp_i2c_write>:

int bsp_i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t *p_data, uint32_t len)
{
  4023d8:	b580      	push	{r7, lr}
  4023da:	b08a      	sub	sp, #40	; 0x28
  4023dc:	af00      	add	r7, sp, #0
  4023de:	60ba      	str	r2, [r7, #8]
  4023e0:	607b      	str	r3, [r7, #4]
  4023e2:	4603      	mov	r3, r0
  4023e4:	73fb      	strb	r3, [r7, #15]
  4023e6:	460b      	mov	r3, r1
  4023e8:	73bb      	strb	r3, [r7, #14]
  twi_package_t packet_write;

  packet_write.chip        = slave_addr;        // TWI slave bus address
  4023ea:	7bfb      	ldrb	r3, [r7, #15]
  4023ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  packet_write.addr[0]     = reg_addr;          // TWI slave memory address data
  4023f0:	7bbb      	ldrb	r3, [r7, #14]
  4023f2:	753b      	strb	r3, [r7, #20]
  packet_write.addr_length = sizeof(reg_addr);  // TWI slave memory address data size
  4023f4:	2301      	movs	r3, #1
  4023f6:	61bb      	str	r3, [r7, #24]
  packet_write.buffer      = (void *)p_data;    // Transfer data source buffer
  4023f8:	68bb      	ldr	r3, [r7, #8]
  4023fa:	61fb      	str	r3, [r7, #28]
  packet_write.length      = len;               // Transfer data size (bytes)
  4023fc:	687b      	ldr	r3, [r7, #4]
  4023fe:	623b      	str	r3, [r7, #32]

  return twi_master_write(TWI0, &packet_write);
  402400:	f107 0314 	add.w	r3, r7, #20
  402404:	4619      	mov	r1, r3
  402406:	4804      	ldr	r0, [pc, #16]	; (402418 <bsp_i2c_write+0x40>)
  402408:	4b04      	ldr	r3, [pc, #16]	; (40241c <bsp_i2c_write+0x44>)
  40240a:	4798      	blx	r3
  40240c:	4603      	mov	r3, r0
}
  40240e:	4618      	mov	r0, r3
  402410:	3728      	adds	r7, #40	; 0x28
  402412:	46bd      	mov	sp, r7
  402414:	bd80      	pop	{r7, pc}
  402416:	bf00      	nop
  402418:	400a8000 	.word	0x400a8000
  40241c:	004063b5 	.word	0x004063b5

00402420 <bsp_delay>:

void bsp_delay(uint32_t ms)
{
  402420:	b5f0      	push	{r4, r5, r6, r7, lr}
  402422:	b083      	sub	sp, #12
  402424:	af00      	add	r7, sp, #0
  402426:	6078      	str	r0, [r7, #4]
  delay_ms(ms);
  402428:	687b      	ldr	r3, [r7, #4]
  40242a:	2b00      	cmp	r3, #0
  40242c:	d026      	beq.n	40247c <bsp_delay+0x5c>
  40242e:	687b      	ldr	r3, [r7, #4]
  402430:	461d      	mov	r5, r3
  402432:	f04f 0600 	mov.w	r6, #0
  402436:	4b22      	ldr	r3, [pc, #136]	; (4024c0 <bsp_delay+0xa0>)
  402438:	4798      	blx	r3
  40243a:	4603      	mov	r3, r0
  40243c:	f04f 0400 	mov.w	r4, #0
  402440:	fb03 f106 	mul.w	r1, r3, r6
  402444:	fb05 f204 	mul.w	r2, r5, r4
  402448:	440a      	add	r2, r1
  40244a:	fba5 3403 	umull	r3, r4, r5, r3
  40244e:	4422      	add	r2, r4
  402450:	4614      	mov	r4, r2
  402452:	f243 61af 	movw	r1, #13999	; 0x36af
  402456:	f04f 0200 	mov.w	r2, #0
  40245a:	185d      	adds	r5, r3, r1
  40245c:	eb44 0602 	adc.w	r6, r4, r2
  402460:	4628      	mov	r0, r5
  402462:	4631      	mov	r1, r6
  402464:	4c17      	ldr	r4, [pc, #92]	; (4024c4 <bsp_delay+0xa4>)
  402466:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40246a:	f04f 0300 	mov.w	r3, #0
  40246e:	47a0      	blx	r4
  402470:	4603      	mov	r3, r0
  402472:	460c      	mov	r4, r1
  402474:	4618      	mov	r0, r3
  402476:	4b14      	ldr	r3, [pc, #80]	; (4024c8 <bsp_delay+0xa8>)
  402478:	4798      	blx	r3
}
  40247a:	e016      	b.n	4024aa <bsp_delay+0x8a>
  delay_ms(ms);
  40247c:	4b10      	ldr	r3, [pc, #64]	; (4024c0 <bsp_delay+0xa0>)
  40247e:	4798      	blx	r3
  402480:	4603      	mov	r3, r0
  402482:	f04f 0400 	mov.w	r4, #0
  402486:	a20c      	add	r2, pc, #48	; (adr r2, 4024b8 <bsp_delay+0x98>)
  402488:	e9d2 1200 	ldrd	r1, r2, [r2]
  40248c:	185d      	adds	r5, r3, r1
  40248e:	eb44 0602 	adc.w	r6, r4, r2
  402492:	4628      	mov	r0, r5
  402494:	4631      	mov	r1, r6
  402496:	4c0b      	ldr	r4, [pc, #44]	; (4024c4 <bsp_delay+0xa4>)
  402498:	4a0c      	ldr	r2, [pc, #48]	; (4024cc <bsp_delay+0xac>)
  40249a:	f04f 0300 	mov.w	r3, #0
  40249e:	47a0      	blx	r4
  4024a0:	4603      	mov	r3, r0
  4024a2:	460c      	mov	r4, r1
  4024a4:	4618      	mov	r0, r3
  4024a6:	4b08      	ldr	r3, [pc, #32]	; (4024c8 <bsp_delay+0xa8>)
  4024a8:	4798      	blx	r3
}
  4024aa:	bf00      	nop
  4024ac:	370c      	adds	r7, #12
  4024ae:	46bd      	mov	sp, r7
  4024b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4024b2:	bf00      	nop
  4024b4:	f3af 8000 	nop.w
  4024b8:	00d59f7f 	.word	0x00d59f7f
  4024bc:	00000000 	.word	0x00000000
  4024c0:	0040230d 	.word	0x0040230d
  4024c4:	004064b1 	.word	0x004064b1
  4024c8:	20000001 	.word	0x20000001
  4024cc:	00d59f80 	.word	0x00d59f80

004024d0 <m_bsp_i2c_init>:
/* Private function definitions ---------------------------------------- */
/**
 * @brief I2C init
 */
static void m_bsp_i2c_init(void)
{
  4024d0:	b580      	push	{r7, lr}
  4024d2:	b084      	sub	sp, #16
  4024d4:	af00      	add	r7, sp, #0
  twi_master_options_t opt = {
  4024d6:	1d3b      	adds	r3, r7, #4
  4024d8:	2200      	movs	r2, #0
  4024da:	601a      	str	r2, [r3, #0]
  4024dc:	605a      	str	r2, [r3, #4]
  4024de:	609a      	str	r2, [r3, #8]
  4024e0:	4b05      	ldr	r3, [pc, #20]	; (4024f8 <m_bsp_i2c_init+0x28>)
  4024e2:	60bb      	str	r3, [r7, #8]
      .speed = 100000
  };

  twi_master_setup(TWI0, &opt);
  4024e4:	1d3b      	adds	r3, r7, #4
  4024e6:	4619      	mov	r1, r3
  4024e8:	4804      	ldr	r0, [pc, #16]	; (4024fc <m_bsp_i2c_init+0x2c>)
  4024ea:	4b05      	ldr	r3, [pc, #20]	; (402500 <m_bsp_i2c_init+0x30>)
  4024ec:	4798      	blx	r3
}
  4024ee:	bf00      	nop
  4024f0:	3710      	adds	r7, #16
  4024f2:	46bd      	mov	sp, r7
  4024f4:	bd80      	pop	{r7, pc}
  4024f6:	bf00      	nop
  4024f8:	000186a0 	.word	0x000186a0
  4024fc:	400a8000 	.word	0x400a8000
  402500:	00402351 	.word	0x00402351

00402504 <m_bsp_sdcard_init>:

/**
 * @brief Sdcard init
 */
static void m_bsp_sdcard_init(void)
{
  402504:	b580      	push	{r7, lr}
  402506:	b082      	sub	sp, #8
  402508:	af00      	add	r7, sp, #0
  Ctrl_status status;

  // Enable PIOA clock to detect Card Detect (CD) change
  sysclk_enable_peripheral_clock(ID_PIOA);
  40250a:	2009      	movs	r0, #9
  40250c:	4b10      	ldr	r3, [pc, #64]	; (402550 <m_bsp_sdcard_init+0x4c>)
  40250e:	4798      	blx	r3

  // Configure SD card pins as per MCI peripheral (periph C)
  pio_set_peripheral(PIOA, PIO_PERIPH_C, PIO_PA30C_MCDA0 | // MCI Data 0
  402510:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
  402514:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402518:	480e      	ldr	r0, [pc, #56]	; (402554 <m_bsp_sdcard_init+0x50>)
  40251a:	4b0f      	ldr	r3, [pc, #60]	; (402558 <m_bsp_sdcard_init+0x54>)
  40251c:	4798      	blx	r3
                                         PIO_PA27C_MCDA3 | // MCI Data 3
                                         PIO_PA28C_MCCDA | // MCI Command
                                         PIO_PA29C_MCCK);  // MCI Clock

  // Initialize SD MMC stack
  sd_mmc_init();
  40251e:	4b0f      	ldr	r3, [pc, #60]	; (40255c <m_bsp_sdcard_init+0x58>)
  402520:	4798      	blx	r3

  //  Wait until SD stack initialized and SD card inserted
  do
  {
    // Check if stack ready
    status = sd_mmc_test_unit_ready(0);
  402522:	2000      	movs	r0, #0
  402524:	4b0e      	ldr	r3, [pc, #56]	; (402560 <m_bsp_sdcard_init+0x5c>)
  402526:	4798      	blx	r3
  402528:	4603      	mov	r3, r0
  40252a:	71fb      	strb	r3, [r7, #7]
    if (status == CTRL_FAIL)
  40252c:	79fb      	ldrb	r3, [r7, #7]
  40252e:	2b01      	cmp	r3, #1
  402530:	d106      	bne.n	402540 <m_bsp_sdcard_init+0x3c>
    {
      // Wait for a card to be inserted
      while (sd_mmc_check(0) != CTRL_NO_PRESENT)
  402532:	bf00      	nop
  402534:	2000      	movs	r0, #0
  402536:	4b0b      	ldr	r3, [pc, #44]	; (402564 <m_bsp_sdcard_init+0x60>)
  402538:	4798      	blx	r3
  40253a:	4603      	mov	r3, r0
  40253c:	2b02      	cmp	r3, #2
  40253e:	d1f9      	bne.n	402534 <m_bsp_sdcard_init+0x30>
      {
        // Use a timeout here for real projects.
      }
    }
  } while (status != CTRL_GOOD);
  402540:	79fb      	ldrb	r3, [r7, #7]
  402542:	2b00      	cmp	r3, #0
  402544:	d1ed      	bne.n	402522 <m_bsp_sdcard_init+0x1e>
}
  402546:	bf00      	nop
  402548:	3708      	adds	r7, #8
  40254a:	46bd      	mov	sp, r7
  40254c:	bd80      	pop	{r7, pc}
  40254e:	bf00      	nop
  402550:	00402335 	.word	0x00402335
  402554:	400e0e00 	.word	0x400e0e00
  402558:	00405db9 	.word	0x00405db9
  40255c:	00404159 	.word	0x00404159
  402560:	0040423d 	.word	0x0040423d
  402564:	0040419d 	.word	0x0040419d

00402568 <osc_get_rate>:
{
  402568:	b480      	push	{r7}
  40256a:	b083      	sub	sp, #12
  40256c:	af00      	add	r7, sp, #0
  40256e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402570:	687b      	ldr	r3, [r7, #4]
  402572:	2b07      	cmp	r3, #7
  402574:	d825      	bhi.n	4025c2 <osc_get_rate+0x5a>
  402576:	a201      	add	r2, pc, #4	; (adr r2, 40257c <osc_get_rate+0x14>)
  402578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40257c:	0040259d 	.word	0x0040259d
  402580:	004025a3 	.word	0x004025a3
  402584:	004025a9 	.word	0x004025a9
  402588:	004025af 	.word	0x004025af
  40258c:	004025b3 	.word	0x004025b3
  402590:	004025b7 	.word	0x004025b7
  402594:	004025bb 	.word	0x004025bb
  402598:	004025bf 	.word	0x004025bf
		return OSC_SLCK_32K_RC_HZ;
  40259c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4025a0:	e010      	b.n	4025c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4025a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4025a6:	e00d      	b.n	4025c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4025a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4025ac:	e00a      	b.n	4025c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4025ae:	4b08      	ldr	r3, [pc, #32]	; (4025d0 <osc_get_rate+0x68>)
  4025b0:	e008      	b.n	4025c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4025b2:	4b08      	ldr	r3, [pc, #32]	; (4025d4 <osc_get_rate+0x6c>)
  4025b4:	e006      	b.n	4025c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4025b6:	4b08      	ldr	r3, [pc, #32]	; (4025d8 <osc_get_rate+0x70>)
  4025b8:	e004      	b.n	4025c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4025ba:	4b07      	ldr	r3, [pc, #28]	; (4025d8 <osc_get_rate+0x70>)
  4025bc:	e002      	b.n	4025c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4025be:	4b06      	ldr	r3, [pc, #24]	; (4025d8 <osc_get_rate+0x70>)
  4025c0:	e000      	b.n	4025c4 <osc_get_rate+0x5c>
	return 0;
  4025c2:	2300      	movs	r3, #0
}
  4025c4:	4618      	mov	r0, r3
  4025c6:	370c      	adds	r7, #12
  4025c8:	46bd      	mov	sp, r7
  4025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025ce:	4770      	bx	lr
  4025d0:	003d0900 	.word	0x003d0900
  4025d4:	007a1200 	.word	0x007a1200
  4025d8:	00b71b00 	.word	0x00b71b00

004025dc <sysclk_get_main_hz>:
{
  4025dc:	b580      	push	{r7, lr}
  4025de:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4025e0:	2006      	movs	r0, #6
  4025e2:	4b03      	ldr	r3, [pc, #12]	; (4025f0 <sysclk_get_main_hz+0x14>)
  4025e4:	4798      	blx	r3
  4025e6:	4603      	mov	r3, r0
  4025e8:	011b      	lsls	r3, r3, #4
}
  4025ea:	4618      	mov	r0, r3
  4025ec:	bd80      	pop	{r7, pc}
  4025ee:	bf00      	nop
  4025f0:	00402569 	.word	0x00402569

004025f4 <sysclk_get_cpu_hz>:
{
  4025f4:	b580      	push	{r7, lr}
  4025f6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4025f8:	4b02      	ldr	r3, [pc, #8]	; (402604 <sysclk_get_cpu_hz+0x10>)
  4025fa:	4798      	blx	r3
  4025fc:	4603      	mov	r3, r0
  4025fe:	085b      	lsrs	r3, r3, #1
}
  402600:	4618      	mov	r0, r3
  402602:	bd80      	pop	{r7, pc}
  402604:	004025dd 	.word	0x004025dd

00402608 <bsp_can_init>:
can_mb_conf_t m_can1_mailbox;

/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
void bsp_can_init(void)
{
  402608:	b580      	push	{r7, lr}
  40260a:	b082      	sub	sp, #8
  40260c:	af00      	add	r7, sp, #0
  uint32_t ul_sysclk = sysclk_get_cpu_hz();
  40260e:	4b1b      	ldr	r3, [pc, #108]	; (40267c <bsp_can_init+0x74>)
  402610:	4798      	blx	r3
  402612:	6078      	str	r0, [r7, #4]

  pmc_enable_periph_clk(ID_CAN1);
  402614:	2026      	movs	r0, #38	; 0x26
  402616:	4b1a      	ldr	r3, [pc, #104]	; (402680 <bsp_can_init+0x78>)
  402618:	4798      	blx	r3

  can_init(CAN1, ul_sysclk, CAN_BPS_250K);
  40261a:	22fa      	movs	r2, #250	; 0xfa
  40261c:	6879      	ldr	r1, [r7, #4]
  40261e:	4819      	ldr	r0, [pc, #100]	; (402684 <bsp_can_init+0x7c>)
  402620:	4b19      	ldr	r3, [pc, #100]	; (402688 <bsp_can_init+0x80>)
  402622:	4798      	blx	r3
  can_reset_all_mailbox(CAN1);
  402624:	4817      	ldr	r0, [pc, #92]	; (402684 <bsp_can_init+0x7c>)
  402626:	4b19      	ldr	r3, [pc, #100]	; (40268c <bsp_can_init+0x84>)
  402628:	4798      	blx	r3

  m_can1_mailbox.ul_mb_idx   = 0;
  40262a:	4b19      	ldr	r3, [pc, #100]	; (402690 <bsp_can_init+0x88>)
  40262c:	2200      	movs	r2, #0
  40262e:	601a      	str	r2, [r3, #0]
  m_can1_mailbox.uc_obj_type = CAN_MB_TX_MODE;
  402630:	4b17      	ldr	r3, [pc, #92]	; (402690 <bsp_can_init+0x88>)
  402632:	2203      	movs	r2, #3
  402634:	711a      	strb	r2, [r3, #4]
  m_can1_mailbox.uc_tx_prio  = 15;
  402636:	4b16      	ldr	r3, [pc, #88]	; (402690 <bsp_can_init+0x88>)
  402638:	220f      	movs	r2, #15
  40263a:	71da      	strb	r2, [r3, #7]
  m_can1_mailbox.uc_id_ver   = 0;
  40263c:	4b14      	ldr	r3, [pc, #80]	; (402690 <bsp_can_init+0x88>)
  40263e:	2200      	movs	r2, #0
  402640:	715a      	strb	r2, [r3, #5]
  m_can1_mailbox.ul_id_msk   = 0;
  402642:	4b13      	ldr	r3, [pc, #76]	; (402690 <bsp_can_init+0x88>)
  402644:	2200      	movs	r2, #0
  402646:	60da      	str	r2, [r3, #12]
  can_mailbox_init(CAN1, &m_can1_mailbox);
  402648:	4911      	ldr	r1, [pc, #68]	; (402690 <bsp_can_init+0x88>)
  40264a:	480e      	ldr	r0, [pc, #56]	; (402684 <bsp_can_init+0x7c>)
  40264c:	4b11      	ldr	r3, [pc, #68]	; (402694 <bsp_can_init+0x8c>)
  40264e:	4798      	blx	r3
  
  m_can1_mailbox.ul_id     = CAN_MID_MIDvA(0x07);
  402650:	4b0f      	ldr	r3, [pc, #60]	; (402690 <bsp_can_init+0x88>)
  402652:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
  402656:	611a      	str	r2, [r3, #16]
  m_can1_mailbox.ul_datal  = 0x12345678;
  402658:	4b0d      	ldr	r3, [pc, #52]	; (402690 <bsp_can_init+0x88>)
  40265a:	4a0f      	ldr	r2, [pc, #60]	; (402698 <bsp_can_init+0x90>)
  40265c:	619a      	str	r2, [r3, #24]
  m_can1_mailbox.ul_datah  = 0x87654321;
  40265e:	4b0c      	ldr	r3, [pc, #48]	; (402690 <bsp_can_init+0x88>)
  402660:	4a0e      	ldr	r2, [pc, #56]	; (40269c <bsp_can_init+0x94>)
  402662:	61da      	str	r2, [r3, #28]
  m_can1_mailbox.uc_length = 8;
  402664:	4b0a      	ldr	r3, [pc, #40]	; (402690 <bsp_can_init+0x88>)
  402666:	2208      	movs	r2, #8
  402668:	719a      	strb	r2, [r3, #6]
  can_mailbox_write(CAN1, &m_can1_mailbox);
  40266a:	4909      	ldr	r1, [pc, #36]	; (402690 <bsp_can_init+0x88>)
  40266c:	4805      	ldr	r0, [pc, #20]	; (402684 <bsp_can_init+0x7c>)
  40266e:	4b0c      	ldr	r3, [pc, #48]	; (4026a0 <bsp_can_init+0x98>)
  402670:	4798      	blx	r3
}
  402672:	bf00      	nop
  402674:	3708      	adds	r7, #8
  402676:	46bd      	mov	sp, r7
  402678:	bd80      	pop	{r7, pc}
  40267a:	bf00      	nop
  40267c:	004025f5 	.word	0x004025f5
  402680:	00406155 	.word	0x00406155
  402684:	40014000 	.word	0x40014000
  402688:	00405a65 	.word	0x00405a65
  40268c:	00405d75 	.word	0x00405d75
  402690:	2000ac88 	.word	0x2000ac88
  402694:	00405b97 	.word	0x00405b97
  402698:	12345678 	.word	0x12345678
  40269c:	87654321 	.word	0x87654321
  4026a0:	00405cbd 	.word	0x00405cbd

004026a4 <bsp_can_send>:

void bsp_can_send(void)
{
  4026a4:	b580      	push	{r7, lr}
  4026a6:	af00      	add	r7, sp, #0
  can_global_send_transfer_cmd(CAN1, CAN_TCR_MB0);
  4026a8:	2101      	movs	r1, #1
  4026aa:	4802      	ldr	r0, [pc, #8]	; (4026b4 <bsp_can_send+0x10>)
  4026ac:	4b02      	ldr	r3, [pc, #8]	; (4026b8 <bsp_can_send+0x14>)
  4026ae:	4798      	blx	r3
}
  4026b0:	bf00      	nop
  4026b2:	bd80      	pop	{r7, pc}
  4026b4:	40014000 	.word	0x40014000
  4026b8:	00405b45 	.word	0x00405b45

004026bc <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4026bc:	b480      	push	{r7}
  4026be:	b08d      	sub	sp, #52	; 0x34
  4026c0:	af00      	add	r7, sp, #0
  4026c2:	6078      	str	r0, [r7, #4]
  4026c4:	6039      	str	r1, [r7, #0]
  4026c6:	687b      	ldr	r3, [r7, #4]
  4026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  4026ca:	683b      	ldr	r3, [r7, #0]
  4026cc:	62bb      	str	r3, [r7, #40]	; 0x28
  4026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4026d0:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4026d4:	095a      	lsrs	r2, r3, #5
  4026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4026d8:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4026da:	6a3b      	ldr	r3, [r7, #32]
  4026dc:	f003 031f 	and.w	r3, r3, #31
  4026e0:	2101      	movs	r1, #1
  4026e2:	fa01 f303 	lsl.w	r3, r1, r3
  4026e6:	61fa      	str	r2, [r7, #28]
  4026e8:	61bb      	str	r3, [r7, #24]
  4026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4026ec:	617b      	str	r3, [r7, #20]
  4026ee:	69fb      	ldr	r3, [r7, #28]
  4026f0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4026f2:	693b      	ldr	r3, [r7, #16]
  4026f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4026f8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4026fc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4026fe:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  402700:	697b      	ldr	r3, [r7, #20]
  402702:	f003 0308 	and.w	r3, r3, #8
  402706:	2b00      	cmp	r3, #0
  402708:	d003      	beq.n	402712 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  40270a:	68fb      	ldr	r3, [r7, #12]
  40270c:	69ba      	ldr	r2, [r7, #24]
  40270e:	665a      	str	r2, [r3, #100]	; 0x64
  402710:	e002      	b.n	402718 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  402712:	68fb      	ldr	r3, [r7, #12]
  402714:	69ba      	ldr	r2, [r7, #24]
  402716:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  402718:	697b      	ldr	r3, [r7, #20]
  40271a:	f003 0310 	and.w	r3, r3, #16
  40271e:	2b00      	cmp	r3, #0
  402720:	d004      	beq.n	40272c <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  402722:	68fb      	ldr	r3, [r7, #12]
  402724:	69ba      	ldr	r2, [r7, #24]
  402726:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40272a:	e003      	b.n	402734 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  40272c:	68fb      	ldr	r3, [r7, #12]
  40272e:	69ba      	ldr	r2, [r7, #24]
  402730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  402734:	697b      	ldr	r3, [r7, #20]
  402736:	f003 0320 	and.w	r3, r3, #32
  40273a:	2b00      	cmp	r3, #0
  40273c:	d003      	beq.n	402746 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  40273e:	68fb      	ldr	r3, [r7, #12]
  402740:	69ba      	ldr	r2, [r7, #24]
  402742:	651a      	str	r2, [r3, #80]	; 0x50
  402744:	e002      	b.n	40274c <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  402746:	68fb      	ldr	r3, [r7, #12]
  402748:	69ba      	ldr	r2, [r7, #24]
  40274a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  40274c:	697b      	ldr	r3, [r7, #20]
  40274e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  402752:	2b00      	cmp	r3, #0
  402754:	d003      	beq.n	40275e <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  402756:	68fb      	ldr	r3, [r7, #12]
  402758:	69ba      	ldr	r2, [r7, #24]
  40275a:	621a      	str	r2, [r3, #32]
  40275c:	e002      	b.n	402764 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  40275e:	68fb      	ldr	r3, [r7, #12]
  402760:	69ba      	ldr	r2, [r7, #24]
  402762:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  402764:	697b      	ldr	r3, [r7, #20]
  402766:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40276a:	2b00      	cmp	r3, #0
  40276c:	d004      	beq.n	402778 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40276e:	68fb      	ldr	r3, [r7, #12]
  402770:	69ba      	ldr	r2, [r7, #24]
  402772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  402776:	e003      	b.n	402780 <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402778:	68fb      	ldr	r3, [r7, #12]
  40277a:	69ba      	ldr	r2, [r7, #24]
  40277c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  402780:	697b      	ldr	r3, [r7, #20]
  402782:	f003 0301 	and.w	r3, r3, #1
  402786:	2b00      	cmp	r3, #0
  402788:	d006      	beq.n	402798 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  40278a:	68fb      	ldr	r3, [r7, #12]
  40278c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40278e:	69bb      	ldr	r3, [r7, #24]
  402790:	431a      	orrs	r2, r3
  402792:	68fb      	ldr	r3, [r7, #12]
  402794:	671a      	str	r2, [r3, #112]	; 0x70
  402796:	e006      	b.n	4027a6 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402798:	68fb      	ldr	r3, [r7, #12]
  40279a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40279c:	69bb      	ldr	r3, [r7, #24]
  40279e:	43db      	mvns	r3, r3
  4027a0:	401a      	ands	r2, r3
  4027a2:	68fb      	ldr	r3, [r7, #12]
  4027a4:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4027a6:	697b      	ldr	r3, [r7, #20]
  4027a8:	f003 0302 	and.w	r3, r3, #2
  4027ac:	2b00      	cmp	r3, #0
  4027ae:	d006      	beq.n	4027be <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  4027b0:	68fb      	ldr	r3, [r7, #12]
  4027b2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4027b4:	69bb      	ldr	r3, [r7, #24]
  4027b6:	431a      	orrs	r2, r3
  4027b8:	68fb      	ldr	r3, [r7, #12]
  4027ba:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4027bc:	e006      	b.n	4027cc <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4027be:	68fb      	ldr	r3, [r7, #12]
  4027c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4027c2:	69bb      	ldr	r3, [r7, #24]
  4027c4:	43db      	mvns	r3, r3
  4027c6:	401a      	ands	r2, r3
  4027c8:	68fb      	ldr	r3, [r7, #12]
  4027ca:	675a      	str	r2, [r3, #116]	; 0x74
  4027cc:	bf00      	nop
  4027ce:	3734      	adds	r7, #52	; 0x34
  4027d0:	46bd      	mov	sp, r7
  4027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027d6:	4770      	bx	lr

004027d8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4027d8:	b480      	push	{r7}
  4027da:	b08d      	sub	sp, #52	; 0x34
  4027dc:	af00      	add	r7, sp, #0
  4027de:	6078      	str	r0, [r7, #4]
  4027e0:	460b      	mov	r3, r1
  4027e2:	70fb      	strb	r3, [r7, #3]
  4027e4:	687b      	ldr	r3, [r7, #4]
  4027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4027e8:	78fb      	ldrb	r3, [r7, #3]
  4027ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4027ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4027f0:	627b      	str	r3, [r7, #36]	; 0x24
  4027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4027f4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4027f6:	6a3b      	ldr	r3, [r7, #32]
  4027f8:	095b      	lsrs	r3, r3, #5
  4027fa:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4027fc:	69fb      	ldr	r3, [r7, #28]
  4027fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402802:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402806:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402808:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40280a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40280e:	2b01      	cmp	r3, #1
  402810:	d109      	bne.n	402826 <ioport_set_pin_dir+0x4e>
  402812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402814:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  402816:	697b      	ldr	r3, [r7, #20]
  402818:	f003 031f 	and.w	r3, r3, #31
  40281c:	2201      	movs	r2, #1
  40281e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402820:	69bb      	ldr	r3, [r7, #24]
  402822:	611a      	str	r2, [r3, #16]
  402824:	e00c      	b.n	402840 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  402826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40282a:	2b00      	cmp	r3, #0
  40282c:	d108      	bne.n	402840 <ioport_set_pin_dir+0x68>
  40282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402830:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  402832:	693b      	ldr	r3, [r7, #16]
  402834:	f003 031f 	and.w	r3, r3, #31
  402838:	2201      	movs	r2, #1
  40283a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40283c:	69bb      	ldr	r3, [r7, #24]
  40283e:	615a      	str	r2, [r3, #20]
  402840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402842:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402844:	68fb      	ldr	r3, [r7, #12]
  402846:	f003 031f 	and.w	r3, r3, #31
  40284a:	2201      	movs	r2, #1
  40284c:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40284e:	69bb      	ldr	r3, [r7, #24]
  402850:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402854:	bf00      	nop
  402856:	3734      	adds	r7, #52	; 0x34
  402858:	46bd      	mov	sp, r7
  40285a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40285e:	4770      	bx	lr

00402860 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  402860:	b480      	push	{r7}
  402862:	b08d      	sub	sp, #52	; 0x34
  402864:	af00      	add	r7, sp, #0
  402866:	6078      	str	r0, [r7, #4]
  402868:	460b      	mov	r3, r1
  40286a:	70fb      	strb	r3, [r7, #3]
  40286c:	687b      	ldr	r3, [r7, #4]
  40286e:	62fb      	str	r3, [r7, #44]	; 0x2c
  402870:	78fb      	ldrb	r3, [r7, #3]
  402872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402878:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40287c:	095a      	lsrs	r2, r3, #5
  40287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402880:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  402882:	6a3b      	ldr	r3, [r7, #32]
  402884:	f003 031f 	and.w	r3, r3, #31
  402888:	2101      	movs	r1, #1
  40288a:	fa01 f303 	lsl.w	r3, r1, r3
  40288e:	61fa      	str	r2, [r7, #28]
  402890:	61bb      	str	r3, [r7, #24]
  402892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402896:	75fb      	strb	r3, [r7, #23]
  402898:	69fb      	ldr	r3, [r7, #28]
  40289a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40289c:	693b      	ldr	r3, [r7, #16]
  40289e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4028a2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4028a6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4028a8:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4028aa:	7dfb      	ldrb	r3, [r7, #23]
  4028ac:	3b01      	subs	r3, #1
  4028ae:	2b03      	cmp	r3, #3
  4028b0:	d82e      	bhi.n	402910 <ioport_set_pin_sense_mode+0xb0>
  4028b2:	a201      	add	r2, pc, #4	; (adr r2, 4028b8 <ioport_set_pin_sense_mode+0x58>)
  4028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4028b8:	004028ed 	.word	0x004028ed
  4028bc:	004028ff 	.word	0x004028ff
  4028c0:	004028c9 	.word	0x004028c9
  4028c4:	004028db 	.word	0x004028db
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  4028c8:	68fb      	ldr	r3, [r7, #12]
  4028ca:	69ba      	ldr	r2, [r7, #24]
  4028cc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  4028d0:	68fb      	ldr	r3, [r7, #12]
  4028d2:	69ba      	ldr	r2, [r7, #24]
  4028d4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4028d8:	e01f      	b.n	40291a <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  4028da:	68fb      	ldr	r3, [r7, #12]
  4028dc:	69ba      	ldr	r2, [r7, #24]
  4028de:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4028e2:	68fb      	ldr	r3, [r7, #12]
  4028e4:	69ba      	ldr	r2, [r7, #24]
  4028e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4028ea:	e016      	b.n	40291a <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  4028ec:	68fb      	ldr	r3, [r7, #12]
  4028ee:	69ba      	ldr	r2, [r7, #24]
  4028f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4028f4:	68fb      	ldr	r3, [r7, #12]
  4028f6:	69ba      	ldr	r2, [r7, #24]
  4028f8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4028fc:	e00d      	b.n	40291a <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4028fe:	68fb      	ldr	r3, [r7, #12]
  402900:	69ba      	ldr	r2, [r7, #24]
  402902:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402906:	68fb      	ldr	r3, [r7, #12]
  402908:	69ba      	ldr	r2, [r7, #24]
  40290a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40290e:	e004      	b.n	40291a <ioport_set_pin_sense_mode+0xba>
		break;
	default:
		base->PIO_AIMDR = mask;
  402910:	68fb      	ldr	r3, [r7, #12]
  402912:	69ba      	ldr	r2, [r7, #24]
  402914:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  402918:	e003      	b.n	402922 <ioport_set_pin_sense_mode+0xc2>
		return;
	}
	base->PIO_AIMER = mask;
  40291a:	68fb      	ldr	r3, [r7, #12]
  40291c:	69ba      	ldr	r2, [r7, #24]
  40291e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  402922:	bf00      	nop
  402924:	3734      	adds	r7, #52	; 0x34
  402926:	46bd      	mov	sp, r7
  402928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40292c:	4770      	bx	lr
  40292e:	bf00      	nop

00402930 <bsp_gpio_init>:
/* Public variables --------------------------------------------------- */
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
void bsp_gpio_init(void)
{
  402930:	b590      	push	{r4, r7, lr}
  402932:	b083      	sub	sp, #12
  402934:	af00      	add	r7, sp, #0
  for (uint8_t i = 1; i <= 99; i++)
  402936:	2301      	movs	r3, #1
  402938:	71fb      	strb	r3, [r7, #7]
  40293a:	e03b      	b.n	4029b4 <bsp_gpio_init+0x84>
  {
    ioport_set_pin_input_mode(PIN_INDEX(i), IOPORT_MODE_PULLUP, IOPORT_SENSE_BOTHEDGES);
  40293c:	79fb      	ldrb	r3, [r7, #7]
  40293e:	011b      	lsls	r3, r3, #4
  402940:	4a20      	ldr	r2, [pc, #128]	; (4029c4 <bsp_gpio_init+0x94>)
  402942:	4413      	add	r3, r2
  402944:	4618      	mov	r0, r3
  402946:	4b20      	ldr	r3, [pc, #128]	; (4029c8 <bsp_gpio_init+0x98>)
  402948:	4798      	blx	r3
  40294a:	4603      	mov	r3, r0
  40294c:	2100      	movs	r1, #0
  40294e:	4618      	mov	r0, r3
  402950:	4b1e      	ldr	r3, [pc, #120]	; (4029cc <bsp_gpio_init+0x9c>)
  402952:	4798      	blx	r3
  402954:	79fb      	ldrb	r3, [r7, #7]
  402956:	011b      	lsls	r3, r3, #4
  402958:	4a1a      	ldr	r2, [pc, #104]	; (4029c4 <bsp_gpio_init+0x94>)
  40295a:	4413      	add	r3, r2
  40295c:	4618      	mov	r0, r3
  40295e:	4b1a      	ldr	r3, [pc, #104]	; (4029c8 <bsp_gpio_init+0x98>)
  402960:	4798      	blx	r3
  402962:	4603      	mov	r3, r0
  402964:	2108      	movs	r1, #8
  402966:	4618      	mov	r0, r3
  402968:	4b19      	ldr	r3, [pc, #100]	; (4029d0 <bsp_gpio_init+0xa0>)
  40296a:	4798      	blx	r3
  40296c:	79fb      	ldrb	r3, [r7, #7]
  40296e:	011b      	lsls	r3, r3, #4
  402970:	4a14      	ldr	r2, [pc, #80]	; (4029c4 <bsp_gpio_init+0x94>)
  402972:	4413      	add	r3, r2
  402974:	4618      	mov	r0, r3
  402976:	4b14      	ldr	r3, [pc, #80]	; (4029c8 <bsp_gpio_init+0x98>)
  402978:	4798      	blx	r3
  40297a:	4603      	mov	r3, r0
  40297c:	2100      	movs	r1, #0
  40297e:	4618      	mov	r0, r3
  402980:	4b14      	ldr	r3, [pc, #80]	; (4029d4 <bsp_gpio_init+0xa4>)
  402982:	4798      	blx	r3

    // Configure as input with pull-down and denouncing
    // pio_set_input(PORT(i), PIN(i), PIO_DEFAULT);
    pio_pull_down(PORT(i), PIN(i), ENABLE);
  402984:	79fb      	ldrb	r3, [r7, #7]
  402986:	011b      	lsls	r3, r3, #4
  402988:	4a0e      	ldr	r2, [pc, #56]	; (4029c4 <bsp_gpio_init+0x94>)
  40298a:	4413      	add	r3, r2
  40298c:	4618      	mov	r0, r3
  40298e:	4b12      	ldr	r3, [pc, #72]	; (4029d8 <bsp_gpio_init+0xa8>)
  402990:	4798      	blx	r3
  402992:	4604      	mov	r4, r0
  402994:	79fb      	ldrb	r3, [r7, #7]
  402996:	011b      	lsls	r3, r3, #4
  402998:	4a0a      	ldr	r2, [pc, #40]	; (4029c4 <bsp_gpio_init+0x94>)
  40299a:	4413      	add	r3, r2
  40299c:	4618      	mov	r0, r3
  40299e:	4b0f      	ldr	r3, [pc, #60]	; (4029dc <bsp_gpio_init+0xac>)
  4029a0:	4798      	blx	r3
  4029a2:	4603      	mov	r3, r0
  4029a4:	2201      	movs	r2, #1
  4029a6:	4619      	mov	r1, r3
  4029a8:	4620      	mov	r0, r4
  4029aa:	4b0d      	ldr	r3, [pc, #52]	; (4029e0 <bsp_gpio_init+0xb0>)
  4029ac:	4798      	blx	r3
  for (uint8_t i = 1; i <= 99; i++)
  4029ae:	79fb      	ldrb	r3, [r7, #7]
  4029b0:	3301      	adds	r3, #1
  4029b2:	71fb      	strb	r3, [r7, #7]
  4029b4:	79fb      	ldrb	r3, [r7, #7]
  4029b6:	2b63      	cmp	r3, #99	; 0x63
  4029b8:	d9c0      	bls.n	40293c <bsp_gpio_init+0xc>
  // irq_register_handler(PIOA_IRQn, 0);
  // irq_register_handler(PIOB_IRQn, 0);
  // irq_register_handler(PIOC_IRQn, 0);
  // irq_register_handler(PIOD_IRQn, 0);
  // irq_register_handler(PIOE_IRQn, 0);
}
  4029ba:	bf00      	nop
  4029bc:	370c      	adds	r7, #12
  4029be:	46bd      	mov	sp, r7
  4029c0:	bd90      	pop	{r4, r7, pc}
  4029c2:	bf00      	nop
  4029c4:	0040ae80 	.word	0x0040ae80
  4029c8:	00402a15 	.word	0x00402a15
  4029cc:	004027d9 	.word	0x004027d9
  4029d0:	004026bd 	.word	0x004026bd
  4029d4:	00402861 	.word	0x00402861
  4029d8:	004029e5 	.word	0x004029e5
  4029dc:	004029fd 	.word	0x004029fd
  4029e0:	00405ec9 	.word	0x00405ec9

004029e4 <bsp_io_get_port_address>:

Pio *bsp_io_get_port_address(const bsp_io_10_t *io)
{
  4029e4:	b480      	push	{r7}
  4029e6:	b083      	sub	sp, #12
  4029e8:	af00      	add	r7, sp, #0
  4029ea:	6078      	str	r0, [r7, #4]
  return io->port;
  4029ec:	687b      	ldr	r3, [r7, #4]
  4029ee:	681b      	ldr	r3, [r3, #0]
}
  4029f0:	4618      	mov	r0, r3
  4029f2:	370c      	adds	r7, #12
  4029f4:	46bd      	mov	sp, r7
  4029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029fa:	4770      	bx	lr

004029fc <bsp_io_get_pin>:
{
  return io->port_id;
}

uint32_t bsp_io_get_pin(const bsp_io_10_t *io)
{
  4029fc:	b480      	push	{r7}
  4029fe:	b083      	sub	sp, #12
  402a00:	af00      	add	r7, sp, #0
  402a02:	6078      	str	r0, [r7, #4]
  return io->pin;
  402a04:	687b      	ldr	r3, [r7, #4]
  402a06:	689b      	ldr	r3, [r3, #8]
}
  402a08:	4618      	mov	r0, r3
  402a0a:	370c      	adds	r7, #12
  402a0c:	46bd      	mov	sp, r7
  402a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a12:	4770      	bx	lr

00402a14 <bsp_io_get_pin_index>:

uint32_t bsp_io_get_pin_index(const bsp_io_10_t *io)
{
  402a14:	b480      	push	{r7}
  402a16:	b083      	sub	sp, #12
  402a18:	af00      	add	r7, sp, #0
  402a1a:	6078      	str	r0, [r7, #4]
  return io->pin_index;
  402a1c:	687b      	ldr	r3, [r7, #4]
  402a1e:	68db      	ldr	r3, [r3, #12]
}
  402a20:	4618      	mov	r0, r3
  402a22:	370c      	adds	r7, #12
  402a24:	46bd      	mov	sp, r7
  402a26:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a2a:	4770      	bx	lr

00402a2c <bsp_lcd_init>:
/* Private function prototypes ---------------------------------------- */
void m_bsp_lcd_set_position(uint8_t row, uint8_t col);

/* Function definitions ----------------------------------------------- */
void bsp_lcd_init(void)
{
  402a2c:	b580      	push	{r7, lr}
  402a2e:	af00      	add	r7, sp, #0
  m_ssd1311.device_address = SSD1311_I2C_ADDRESS;
  402a30:	4b06      	ldr	r3, [pc, #24]	; (402a4c <bsp_lcd_init+0x20>)
  402a32:	223c      	movs	r2, #60	; 0x3c
  402a34:	701a      	strb	r2, [r3, #0]
  m_ssd1311.i2c_write      = bsp_i2c_write;
  402a36:	4b05      	ldr	r3, [pc, #20]	; (402a4c <bsp_lcd_init+0x20>)
  402a38:	4a05      	ldr	r2, [pc, #20]	; (402a50 <bsp_lcd_init+0x24>)
  402a3a:	605a      	str	r2, [r3, #4]
  m_ssd1311.delay          = bsp_delay;
  402a3c:	4b03      	ldr	r3, [pc, #12]	; (402a4c <bsp_lcd_init+0x20>)
  402a3e:	4a05      	ldr	r2, [pc, #20]	; (402a54 <bsp_lcd_init+0x28>)
  402a40:	609a      	str	r2, [r3, #8]
  
  ssd1311_init(&m_ssd1311);
  402a42:	4802      	ldr	r0, [pc, #8]	; (402a4c <bsp_lcd_init+0x20>)
  402a44:	4b04      	ldr	r3, [pc, #16]	; (402a58 <bsp_lcd_init+0x2c>)
  402a46:	4798      	blx	r3
}
  402a48:	bf00      	nop
  402a4a:	bd80      	pop	{r7, pc}
  402a4c:	2000aca8 	.word	0x2000aca8
  402a50:	004023d9 	.word	0x004023d9
  402a54:	00402421 	.word	0x00402421
  402a58:	00402c25 	.word	0x00402c25

00402a5c <bsp_lcd_write_string>:

void bsp_lcd_write_string(uint8_t x, uint8_t y, const char *fmt_string, ...)
{
  402a5c:	b40c      	push	{r2, r3}
  402a5e:	b580      	push	{r7, lr}
  402a60:	b0c4      	sub	sp, #272	; 0x110
  402a62:	af00      	add	r7, sp, #0
  402a64:	4602      	mov	r2, r0
  402a66:	1dfb      	adds	r3, r7, #7
  402a68:	701a      	strb	r2, [r3, #0]
  402a6a:	1dbb      	adds	r3, r7, #6
  402a6c:	460a      	mov	r2, r1
  402a6e:	701a      	strb	r2, [r3, #0]
  char str[256] = "";
  402a70:	f107 030c 	add.w	r3, r7, #12
  402a74:	2200      	movs	r2, #0
  402a76:	601a      	str	r2, [r3, #0]
  402a78:	3304      	adds	r3, #4
  402a7a:	22fc      	movs	r2, #252	; 0xfc
  402a7c:	2100      	movs	r1, #0
  402a7e:	4618      	mov	r0, r3
  402a80:	4b1f      	ldr	r3, [pc, #124]	; (402b00 <bsp_lcd_write_string+0xa4>)
  402a82:	4798      	blx	r3
  unsigned char i = 0;
  402a84:	2300      	movs	r3, #0
  402a86:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

  va_list args;
  va_start(args, fmt_string);
  402a8a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
  402a8e:	f107 0308 	add.w	r3, r7, #8
  402a92:	601a      	str	r2, [r3, #0]
  vsprintf(str + strlen(str), fmt_string, args);
  402a94:	f107 030c 	add.w	r3, r7, #12
  402a98:	4618      	mov	r0, r3
  402a9a:	4b1a      	ldr	r3, [pc, #104]	; (402b04 <bsp_lcd_write_string+0xa8>)
  402a9c:	4798      	blx	r3
  402a9e:	4602      	mov	r2, r0
  402aa0:	f107 030c 	add.w	r3, r7, #12
  402aa4:	1898      	adds	r0, r3, r2
  402aa6:	f107 0308 	add.w	r3, r7, #8
  402aaa:	681a      	ldr	r2, [r3, #0]
  402aac:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
  402ab0:	4b15      	ldr	r3, [pc, #84]	; (402b08 <bsp_lcd_write_string+0xac>)
  402ab2:	4798      	blx	r3
  va_end(args);

  m_bsp_lcd_set_position(x, y);
  402ab4:	1dbb      	adds	r3, r7, #6
  402ab6:	781a      	ldrb	r2, [r3, #0]
  402ab8:	1dfb      	adds	r3, r7, #7
  402aba:	781b      	ldrb	r3, [r3, #0]
  402abc:	4611      	mov	r1, r2
  402abe:	4618      	mov	r0, r3
  402ac0:	4b12      	ldr	r3, [pc, #72]	; (402b0c <bsp_lcd_write_string+0xb0>)
  402ac2:	4798      	blx	r3
  while(str[i])
  402ac4:	e00d      	b.n	402ae2 <bsp_lcd_write_string+0x86>
  {
    ssd1311_write_data_byte(&m_ssd1311, str[i]);
  402ac6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
  402aca:	f107 020c 	add.w	r2, r7, #12
  402ace:	5cd3      	ldrb	r3, [r2, r3]
  402ad0:	4619      	mov	r1, r3
  402ad2:	480f      	ldr	r0, [pc, #60]	; (402b10 <bsp_lcd_write_string+0xb4>)
  402ad4:	4b0f      	ldr	r3, [pc, #60]	; (402b14 <bsp_lcd_write_string+0xb8>)
  402ad6:	4798      	blx	r3
    i++;
  402ad8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
  402adc:	3301      	adds	r3, #1
  402ade:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(str[i])
  402ae2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
  402ae6:	f107 020c 	add.w	r2, r7, #12
  402aea:	5cd3      	ldrb	r3, [r2, r3]
  402aec:	2b00      	cmp	r3, #0
  402aee:	d1ea      	bne.n	402ac6 <bsp_lcd_write_string+0x6a>
  }
}
  402af0:	bf00      	nop
  402af2:	f507 7788 	add.w	r7, r7, #272	; 0x110
  402af6:	46bd      	mov	sp, r7
  402af8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
  402afc:	b002      	add	sp, #8
  402afe:	4770      	bx	lr
  402b00:	00406945 	.word	0x00406945
  402b04:	00406a41 	.word	0x00406a41
  402b08:	00408011 	.word	0x00408011
  402b0c:	00402b19 	.word	0x00402b19
  402b10:	2000aca8 	.word	0x2000aca8
  402b14:	00402c85 	.word	0x00402c85

00402b18 <m_bsp_lcd_set_position>:

/* Private function definitions --------------------------------------- */
void m_bsp_lcd_set_position(uint8_t x, uint8_t y)
{
  402b18:	b580      	push	{r7, lr}
  402b1a:	b082      	sub	sp, #8
  402b1c:	af00      	add	r7, sp, #0
  402b1e:	4603      	mov	r3, r0
  402b20:	460a      	mov	r2, r1
  402b22:	71fb      	strb	r3, [r7, #7]
  402b24:	4613      	mov	r3, r2
  402b26:	71bb      	strb	r3, [r7, #6]
  ssd1311_write_cmd(&m_ssd1311, 0x80 + 0x20 * y + x);
  402b28:	79bb      	ldrb	r3, [r7, #6]
  402b2a:	3304      	adds	r3, #4
  402b2c:	b2db      	uxtb	r3, r3
  402b2e:	015b      	lsls	r3, r3, #5
  402b30:	b2da      	uxtb	r2, r3
  402b32:	79fb      	ldrb	r3, [r7, #7]
  402b34:	4413      	add	r3, r2
  402b36:	b2db      	uxtb	r3, r3
  402b38:	4619      	mov	r1, r3
  402b3a:	4803      	ldr	r0, [pc, #12]	; (402b48 <m_bsp_lcd_set_position+0x30>)
  402b3c:	4b03      	ldr	r3, [pc, #12]	; (402b4c <m_bsp_lcd_set_position+0x34>)
  402b3e:	4798      	blx	r3
}
  402b40:	bf00      	nop
  402b42:	3708      	adds	r7, #8
  402b44:	46bd      	mov	sp, r7
  402b46:	bd80      	pop	{r7, pc}
  402b48:	2000aca8 	.word	0x2000aca8
  402b4c:	00402c55 	.word	0x00402c55

00402b50 <bsp_rtc_init>:
/* Private macros ----------------------------------------------------- */
/* Public variables --------------------------------------------------- */
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
void bsp_rtc_init(void)
{
  402b50:	b580      	push	{r7, lr}
  402b52:	af00      	add	r7, sp, #0
  pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  402b54:	2000      	movs	r0, #0
  402b56:	4b07      	ldr	r3, [pc, #28]	; (402b74 <bsp_rtc_init+0x24>)
  402b58:	4798      	blx	r3

  while (!pmc_osc_is_ready_32kxtal());
  402b5a:	bf00      	nop
  402b5c:	4b06      	ldr	r3, [pc, #24]	; (402b78 <bsp_rtc_init+0x28>)
  402b5e:	4798      	blx	r3
  402b60:	4603      	mov	r3, r0
  402b62:	2b00      	cmp	r3, #0
  402b64:	d0fa      	beq.n	402b5c <bsp_rtc_init+0xc>

  rtc_set_hour_mode(RTC, 0);
  402b66:	2100      	movs	r1, #0
  402b68:	4804      	ldr	r0, [pc, #16]	; (402b7c <bsp_rtc_init+0x2c>)
  402b6a:	4b05      	ldr	r3, [pc, #20]	; (402b80 <bsp_rtc_init+0x30>)
  402b6c:	4798      	blx	r3
}
  402b6e:	bf00      	nop
  402b70:	bd80      	pop	{r7, pc}
  402b72:	bf00      	nop
  402b74:	00405fad 	.word	0x00405fad
  402b78:	00405fe5 	.word	0x00405fe5
  402b7c:	400e1860 	.word	0x400e1860
  402b80:	00404f0d 	.word	0x00404f0d

00402b84 <bsp_rtc_make_string_time_style>:

void bsp_rtc_make_string_time_style(char *out)
{
  402b84:	b5b0      	push	{r4, r5, r7, lr}
  402b86:	b090      	sub	sp, #64	; 0x40
  402b88:	af04      	add	r7, sp, #16
  402b8a:	6078      	str	r0, [r7, #4]
  date_time_t dt;

  rtc_get_time(RTC, (uint32_t *)&dt.tm_hour, (uint32_t *)&dt.tm_min, (uint32_t *)&dt.tm_sec);
  402b8c:	f107 000c 	add.w	r0, r7, #12
  402b90:	f107 030c 	add.w	r3, r7, #12
  402b94:	1d1a      	adds	r2, r3, #4
  402b96:	f107 030c 	add.w	r3, r7, #12
  402b9a:	f103 0108 	add.w	r1, r3, #8
  402b9e:	4603      	mov	r3, r0
  402ba0:	481a      	ldr	r0, [pc, #104]	; (402c0c <bsp_rtc_make_string_time_style+0x88>)
  402ba2:	4c1b      	ldr	r4, [pc, #108]	; (402c10 <bsp_rtc_make_string_time_style+0x8c>)
  402ba4:	47a0      	blx	r4
  rtc_get_date(RTC, (uint32_t *)&dt.tm_year, (uint32_t *)&dt.tm_mon, (uint32_t *)&dt.tm_mday, NULL);
  402ba6:	f107 030c 	add.w	r3, r7, #12
  402baa:	f103 000c 	add.w	r0, r3, #12
  402bae:	f107 030c 	add.w	r3, r7, #12
  402bb2:	f103 0210 	add.w	r2, r3, #16
  402bb6:	f107 030c 	add.w	r3, r7, #12
  402bba:	f103 0114 	add.w	r1, r3, #20
  402bbe:	2300      	movs	r3, #0
  402bc0:	9300      	str	r3, [sp, #0]
  402bc2:	4603      	mov	r3, r0
  402bc4:	4811      	ldr	r0, [pc, #68]	; (402c0c <bsp_rtc_make_string_time_style+0x88>)
  402bc6:	4c13      	ldr	r4, [pc, #76]	; (402c14 <bsp_rtc_make_string_time_style+0x90>)
  402bc8:	47a0      	blx	r4

  dt.tm_year %= 1000;
  402bca:	6a3a      	ldr	r2, [r7, #32]
  402bcc:	4b12      	ldr	r3, [pc, #72]	; (402c18 <bsp_rtc_make_string_time_style+0x94>)
  402bce:	fb83 1302 	smull	r1, r3, r3, r2
  402bd2:	1199      	asrs	r1, r3, #6
  402bd4:	17d3      	asrs	r3, r2, #31
  402bd6:	1acb      	subs	r3, r1, r3
  402bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  402bdc:	fb01 f303 	mul.w	r3, r1, r3
  402be0:	1ad3      	subs	r3, r2, r3
  402be2:	623b      	str	r3, [r7, #32]

  sprintf(out, "%02d%02d%02d:%02d%02d%02d", dt.tm_year, dt.tm_mon, dt.tm_mday,
  402be4:	6a3c      	ldr	r4, [r7, #32]
  402be6:	69fd      	ldr	r5, [r7, #28]
  402be8:	69bb      	ldr	r3, [r7, #24]
  402bea:	697a      	ldr	r2, [r7, #20]
  402bec:	6939      	ldr	r1, [r7, #16]
  402bee:	68f8      	ldr	r0, [r7, #12]
  402bf0:	9003      	str	r0, [sp, #12]
  402bf2:	9102      	str	r1, [sp, #8]
  402bf4:	9201      	str	r2, [sp, #4]
  402bf6:	9300      	str	r3, [sp, #0]
  402bf8:	462b      	mov	r3, r5
  402bfa:	4622      	mov	r2, r4
  402bfc:	4907      	ldr	r1, [pc, #28]	; (402c1c <bsp_rtc_make_string_time_style+0x98>)
  402bfe:	6878      	ldr	r0, [r7, #4]
  402c00:	4c07      	ldr	r4, [pc, #28]	; (402c20 <bsp_rtc_make_string_time_style+0x9c>)
  402c02:	47a0      	blx	r4
                                            dt.tm_hour, dt.tm_min, dt.tm_sec);
}
  402c04:	bf00      	nop
  402c06:	3730      	adds	r7, #48	; 0x30
  402c08:	46bd      	mov	sp, r7
  402c0a:	bdb0      	pop	{r4, r5, r7, pc}
  402c0c:	400e1860 	.word	0x400e1860
  402c10:	00404f43 	.word	0x00404f43
  402c14:	00405007 	.word	0x00405007
  402c18:	10624dd3 	.word	0x10624dd3
  402c1c:	0040b4c0 	.word	0x0040b4c0
  402c20:	004069e1 	.word	0x004069e1

00402c24 <ssd1311_init>:
void cursPos(ssd1311_t *me, uint8_t col, uint8_t row);


/* Function definitions ----------------------------------------------- */
base_status_t ssd1311_init(ssd1311_t *me)
{
  402c24:	b580      	push	{r7, lr}
  402c26:	b082      	sub	sp, #8
  402c28:	af00      	add	r7, sp, #0
  402c2a:	6078      	str	r0, [r7, #4]
  if ((me == NULL) || (me->i2c_write == NULL))
  402c2c:	687b      	ldr	r3, [r7, #4]
  402c2e:	2b00      	cmp	r3, #0
  402c30:	d003      	beq.n	402c3a <ssd1311_init+0x16>
  402c32:	687b      	ldr	r3, [r7, #4]
  402c34:	685b      	ldr	r3, [r3, #4]
  402c36:	2b00      	cmp	r3, #0
  402c38:	d101      	bne.n	402c3e <ssd1311_init+0x1a>
    return BS_ERROR_PARAMS;
  402c3a:	2301      	movs	r3, #1
  402c3c:	e003      	b.n	402c46 <ssd1311_init+0x22>

  m_ssd1311_run_cfg_script(me);
  402c3e:	6878      	ldr	r0, [r7, #4]
  402c40:	4b03      	ldr	r3, [pc, #12]	; (402c50 <ssd1311_init+0x2c>)
  402c42:	4798      	blx	r3

  return BS_OK;
  402c44:	2300      	movs	r3, #0
}
  402c46:	4618      	mov	r0, r3
  402c48:	3708      	adds	r7, #8
  402c4a:	46bd      	mov	sp, r7
  402c4c:	bd80      	pop	{r7, pc}
  402c4e:	bf00      	nop
  402c50:	00402cb5 	.word	0x00402cb5

00402c54 <ssd1311_write_cmd>:

base_status_t ssd1311_write_cmd(ssd1311_t *me, uint8_t cmd)
{
  402c54:	b590      	push	{r4, r7, lr}
  402c56:	b083      	sub	sp, #12
  402c58:	af00      	add	r7, sp, #0
  402c5a:	6078      	str	r0, [r7, #4]
  402c5c:	460b      	mov	r3, r1
  402c5e:	70fb      	strb	r3, [r7, #3]
  CHECK(BS_OK == me->i2c_write(me->device_address, SSD1311_CMD_MODE, &cmd, 1), BS_ERROR);
  402c60:	687b      	ldr	r3, [r7, #4]
  402c62:	685c      	ldr	r4, [r3, #4]
  402c64:	687b      	ldr	r3, [r7, #4]
  402c66:	7818      	ldrb	r0, [r3, #0]
  402c68:	1cfa      	adds	r2, r7, #3
  402c6a:	2301      	movs	r3, #1
  402c6c:	2180      	movs	r1, #128	; 0x80
  402c6e:	47a0      	blx	r4
  402c70:	4603      	mov	r3, r0
  402c72:	2b00      	cmp	r3, #0
  402c74:	d001      	beq.n	402c7a <ssd1311_write_cmd+0x26>
  402c76:	2302      	movs	r3, #2
  402c78:	e000      	b.n	402c7c <ssd1311_write_cmd+0x28>

  return BS_OK;
  402c7a:	2300      	movs	r3, #0
}
  402c7c:	4618      	mov	r0, r3
  402c7e:	370c      	adds	r7, #12
  402c80:	46bd      	mov	sp, r7
  402c82:	bd90      	pop	{r4, r7, pc}

00402c84 <ssd1311_write_data_byte>:

  return BS_OK;
}

base_status_t ssd1311_write_data_byte(ssd1311_t *me, uint8_t data)
{
  402c84:	b590      	push	{r4, r7, lr}
  402c86:	b083      	sub	sp, #12
  402c88:	af00      	add	r7, sp, #0
  402c8a:	6078      	str	r0, [r7, #4]
  402c8c:	460b      	mov	r3, r1
  402c8e:	70fb      	strb	r3, [r7, #3]
  CHECK(BS_OK == me->i2c_write(me->device_address, SSD1311_DATA_MODE, &data, 1), BS_ERROR);
  402c90:	687b      	ldr	r3, [r7, #4]
  402c92:	685c      	ldr	r4, [r3, #4]
  402c94:	687b      	ldr	r3, [r7, #4]
  402c96:	7818      	ldrb	r0, [r3, #0]
  402c98:	1cfa      	adds	r2, r7, #3
  402c9a:	2301      	movs	r3, #1
  402c9c:	2140      	movs	r1, #64	; 0x40
  402c9e:	47a0      	blx	r4
  402ca0:	4603      	mov	r3, r0
  402ca2:	2b00      	cmp	r3, #0
  402ca4:	d001      	beq.n	402caa <ssd1311_write_data_byte+0x26>
  402ca6:	2302      	movs	r3, #2
  402ca8:	e000      	b.n	402cac <ssd1311_write_data_byte+0x28>

  return BS_OK;
  402caa:	2300      	movs	r3, #0
}
  402cac:	4618      	mov	r0, r3
  402cae:	370c      	adds	r7, #12
  402cb0:	46bd      	mov	sp, r7
  402cb2:	bd90      	pop	{r4, r7, pc}

00402cb4 <m_ssd1311_run_cfg_script>:
 * @return
 * - BS_OK
 * - BS_ERROR
 */
static base_status_t m_ssd1311_run_cfg_script(ssd1311_t *me)
{
  402cb4:	b580      	push	{r7, lr}
  402cb6:	b084      	sub	sp, #16
  402cb8:	af00      	add	r7, sp, #0
  402cba:	6078      	str	r0, [r7, #4]
  int i          = 0;
  402cbc:	2300      	movs	r3, #0
  402cbe:	60fb      	str	r3, [r7, #12]
  int end_script = 0;
  402cc0:	2300      	movs	r3, #0
  402cc2:	60bb      	str	r3, [r7, #8]

  do
  {
    switch (SSD1311_CFG_SCRIPT[i].cmd)
  402cc4:	4a20      	ldr	r2, [pc, #128]	; (402d48 <m_ssd1311_run_cfg_script+0x94>)
  402cc6:	68fb      	ldr	r3, [r7, #12]
  402cc8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
  402ccc:	2b04      	cmp	r3, #4
  402cce:	d82e      	bhi.n	402d2e <m_ssd1311_run_cfg_script+0x7a>
  402cd0:	a201      	add	r2, pc, #4	; (adr r2, 402cd8 <m_ssd1311_run_cfg_script+0x24>)
  402cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402cd6:	bf00      	nop
  402cd8:	00402d2f 	.word	0x00402d2f
  402cdc:	00402d29 	.word	0x00402d29
  402ce0:	00402ced 	.word	0x00402ced
  402ce4:	00402d01 	.word	0x00402d01
  402ce8:	00402d15 	.word	0x00402d15
    {
    case SSD1311_START:
      break;
    case SSD1311_CMD:
      ssd1311_write_cmd(me, SSD1311_CFG_SCRIPT[i].data & 0xFF);
  402cec:	4a16      	ldr	r2, [pc, #88]	; (402d48 <m_ssd1311_run_cfg_script+0x94>)
  402cee:	68fb      	ldr	r3, [r7, #12]
  402cf0:	005b      	lsls	r3, r3, #1
  402cf2:	4413      	add	r3, r2
  402cf4:	785b      	ldrb	r3, [r3, #1]
  402cf6:	4619      	mov	r1, r3
  402cf8:	6878      	ldr	r0, [r7, #4]
  402cfa:	4b14      	ldr	r3, [pc, #80]	; (402d4c <m_ssd1311_run_cfg_script+0x98>)
  402cfc:	4798      	blx	r3
      break;
  402cfe:	e017      	b.n	402d30 <m_ssd1311_run_cfg_script+0x7c>
    case SSD1311_DATA:
      ssd1311_write_data_byte(me, SSD1311_CFG_SCRIPT[i].data & 0xFF);
  402d00:	4a11      	ldr	r2, [pc, #68]	; (402d48 <m_ssd1311_run_cfg_script+0x94>)
  402d02:	68fb      	ldr	r3, [r7, #12]
  402d04:	005b      	lsls	r3, r3, #1
  402d06:	4413      	add	r3, r2
  402d08:	785b      	ldrb	r3, [r3, #1]
  402d0a:	4619      	mov	r1, r3
  402d0c:	6878      	ldr	r0, [r7, #4]
  402d0e:	4b10      	ldr	r3, [pc, #64]	; (402d50 <m_ssd1311_run_cfg_script+0x9c>)
  402d10:	4798      	blx	r3
      break;
  402d12:	e00d      	b.n	402d30 <m_ssd1311_run_cfg_script+0x7c>
    case SSD1311_DELAY:
      me->delay(SSD1311_CFG_SCRIPT[i].data);
  402d14:	687b      	ldr	r3, [r7, #4]
  402d16:	689a      	ldr	r2, [r3, #8]
  402d18:	490b      	ldr	r1, [pc, #44]	; (402d48 <m_ssd1311_run_cfg_script+0x94>)
  402d1a:	68fb      	ldr	r3, [r7, #12]
  402d1c:	005b      	lsls	r3, r3, #1
  402d1e:	440b      	add	r3, r1
  402d20:	785b      	ldrb	r3, [r3, #1]
  402d22:	4618      	mov	r0, r3
  402d24:	4790      	blx	r2
      break;
  402d26:	e003      	b.n	402d30 <m_ssd1311_run_cfg_script+0x7c>
    case SSD1311_END:
      end_script = 1;
  402d28:	2301      	movs	r3, #1
  402d2a:	60bb      	str	r3, [r7, #8]
      break;
  402d2c:	e000      	b.n	402d30 <m_ssd1311_run_cfg_script+0x7c>
    default:
      break;
  402d2e:	bf00      	nop
    }
    i++;
  402d30:	68fb      	ldr	r3, [r7, #12]
  402d32:	3301      	adds	r3, #1
  402d34:	60fb      	str	r3, [r7, #12]
  }
  while (!end_script);
  402d36:	68bb      	ldr	r3, [r7, #8]
  402d38:	2b00      	cmp	r3, #0
  402d3a:	d0c3      	beq.n	402cc4 <m_ssd1311_run_cfg_script+0x10>

  return BS_OK;
  402d3c:	2300      	movs	r3, #0
}
  402d3e:	4618      	mov	r0, r3
  402d40:	3710      	adds	r7, #16
  402d42:	46bd      	mov	sp, r7
  402d44:	bd80      	pop	{r7, pc}
  402d46:	bf00      	nop
  402d48:	0040b4dc 	.word	0x0040b4dc
  402d4c:	00402c55 	.word	0x00402c55
  402d50:	00402c85 	.word	0x00402c85

00402d54 <ioport_get_pin_level>:
{
  402d54:	b480      	push	{r7}
  402d56:	b089      	sub	sp, #36	; 0x24
  402d58:	af00      	add	r7, sp, #0
  402d5a:	6078      	str	r0, [r7, #4]
  402d5c:	687b      	ldr	r3, [r7, #4]
  402d5e:	61fb      	str	r3, [r7, #28]
  402d60:	69fb      	ldr	r3, [r7, #28]
  402d62:	61bb      	str	r3, [r7, #24]
  402d64:	69bb      	ldr	r3, [r7, #24]
  402d66:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  402d68:	697b      	ldr	r3, [r7, #20]
  402d6a:	095b      	lsrs	r3, r3, #5
  402d6c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402d6e:	693b      	ldr	r3, [r7, #16]
  402d70:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402d74:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402d78:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402d7c:	69fb      	ldr	r3, [r7, #28]
  402d7e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402d80:	68fb      	ldr	r3, [r7, #12]
  402d82:	f003 031f 	and.w	r3, r3, #31
  402d86:	2101      	movs	r1, #1
  402d88:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402d8c:	4013      	ands	r3, r2
  402d8e:	2b00      	cmp	r3, #0
  402d90:	bf14      	ite	ne
  402d92:	2301      	movne	r3, #1
  402d94:	2300      	moveq	r3, #0
  402d96:	b2db      	uxtb	r3, r3
}
  402d98:	4618      	mov	r0, r3
  402d9a:	3724      	adds	r7, #36	; 0x24
  402d9c:	46bd      	mov	sp, r7
  402d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402da2:	4770      	bx	lr

00402da4 <sys_init>:
static void m_sensor_hande_task(void *params);
static void m_lcd_write_sensor_event(uint8_t sensor_name);

/* Function definitions ----------------------------------------------- */
void sys_init(void)
{
  402da4:	b590      	push	{r4, r7, lr}
  402da6:	b085      	sub	sp, #20
  402da8:	af04      	add	r7, sp, #16
  g_sensor_evt_queue = xQueueCreate(10, sizeof(uint8_t));
  402daa:	2200      	movs	r2, #0
  402dac:	2101      	movs	r1, #1
  402dae:	200a      	movs	r0, #10
  402db0:	4b1a      	ldr	r3, [pc, #104]	; (402e1c <sys_init+0x78>)
  402db2:	4798      	blx	r3
  402db4:	4602      	mov	r2, r0
  402db6:	4b1a      	ldr	r3, [pc, #104]	; (402e20 <sys_init+0x7c>)
  402db8:	601a      	str	r2, [r3, #0]

  sysclk_init();  // Initialize System Clock
  402dba:	4b1a      	ldr	r3, [pc, #104]	; (402e24 <sys_init+0x80>)
  402dbc:	4798      	blx	r3
  board_init();   // Board init
  402dbe:	4b1a      	ldr	r3, [pc, #104]	; (402e28 <sys_init+0x84>)
  402dc0:	4798      	blx	r3
  bsp_hw_init();  // Hardware init
  402dc2:	4b1a      	ldr	r3, [pc, #104]	; (402e2c <sys_init+0x88>)
  402dc4:	4798      	blx	r3
  bsp_can_init(); // Can bus init
  402dc6:	4b1a      	ldr	r3, [pc, #104]	; (402e30 <sys_init+0x8c>)
  402dc8:	4798      	blx	r3
  bsp_lcd_init();
  402dca:	4b1a      	ldr	r3, [pc, #104]	; (402e34 <sys_init+0x90>)
  402dcc:	4798      	blx	r3

  // Create task to handle sensor events
  xTaskCreate(m_sensor_hande_task,
  402dce:	4b1a      	ldr	r3, [pc, #104]	; (402e38 <sys_init+0x94>)
  402dd0:	681b      	ldr	r3, [r3, #0]
  402dd2:	2200      	movs	r2, #0
  402dd4:	9203      	str	r2, [sp, #12]
  402dd6:	2200      	movs	r2, #0
  402dd8:	9202      	str	r2, [sp, #8]
  402dda:	9301      	str	r3, [sp, #4]
  402ddc:	2303      	movs	r3, #3
  402dde:	9300      	str	r3, [sp, #0]
  402de0:	2300      	movs	r3, #0
  402de2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402de6:	4915      	ldr	r1, [pc, #84]	; (402e3c <sys_init+0x98>)
  402de8:	4815      	ldr	r0, [pc, #84]	; (402e40 <sys_init+0x9c>)
  402dea:	4c16      	ldr	r4, [pc, #88]	; (402e44 <sys_init+0xa0>)
  402dec:	47a0      	blx	r4
              NULL,
              SENSOR_TASK_PRIORITY,
              m_sensor_task_hdl);

  // Create task to handle main system
  xTaskCreate(sys_run,
  402dee:	4b16      	ldr	r3, [pc, #88]	; (402e48 <sys_init+0xa4>)
  402df0:	681b      	ldr	r3, [r3, #0]
  402df2:	2200      	movs	r2, #0
  402df4:	9203      	str	r2, [sp, #12]
  402df6:	2200      	movs	r2, #0
  402df8:	9202      	str	r2, [sp, #8]
  402dfa:	9301      	str	r3, [sp, #4]
  402dfc:	2303      	movs	r3, #3
  402dfe:	9300      	str	r3, [sp, #0]
  402e00:	2300      	movs	r3, #0
  402e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402e06:	4911      	ldr	r1, [pc, #68]	; (402e4c <sys_init+0xa8>)
  402e08:	4811      	ldr	r0, [pc, #68]	; (402e50 <sys_init+0xac>)
  402e0a:	4c0e      	ldr	r4, [pc, #56]	; (402e44 <sys_init+0xa0>)
  402e0c:	47a0      	blx	r4
              MAIN_TASK_STACK_SIZE,
              NULL,
              MAIN_TASK_PRIORITY,
              m_main_task_hdl);

  vTaskStartScheduler();
  402e0e:	4b11      	ldr	r3, [pc, #68]	; (402e54 <sys_init+0xb0>)
  402e10:	4798      	blx	r3
}
  402e12:	bf00      	nop
  402e14:	3704      	adds	r7, #4
  402e16:	46bd      	mov	sp, r7
  402e18:	bd90      	pop	{r4, r7, pc}
  402e1a:	bf00      	nop
  402e1c:	0040090d 	.word	0x0040090d
  402e20:	2000ac84 	.word	0x2000ac84
  402e24:	00405759 	.word	0x00405759
  402e28:	00404621 	.word	0x00404621
  402e2c:	004023b1 	.word	0x004023b1
  402e30:	00402609 	.word	0x00402609
  402e34:	00402a2d 	.word	0x00402a2d
  402e38:	2000ab98 	.word	0x2000ab98
  402e3c:	0040b51c 	.word	0x0040b51c
  402e40:	00402e71 	.word	0x00402e71
  402e44:	00401025 	.word	0x00401025
  402e48:	2000ab9c 	.word	0x2000ab9c
  402e4c:	0040b530 	.word	0x0040b530
  402e50:	00402e59 	.word	0x00402e59
  402e54:	00401235 	.word	0x00401235

00402e58 <sys_run>:

void sys_run(void)
{
  402e58:	b580      	push	{r7, lr}
  402e5a:	af00      	add	r7, sp, #0
  while (1)
  {
    bsp_can_send();
  402e5c:	4b02      	ldr	r3, [pc, #8]	; (402e68 <sys_run+0x10>)
  402e5e:	4798      	blx	r3

    vTaskDelay(pdMS_TO_TICKS(100));
  402e60:	2064      	movs	r0, #100	; 0x64
  402e62:	4b02      	ldr	r3, [pc, #8]	; (402e6c <sys_run+0x14>)
  402e64:	4798      	blx	r3
    bsp_can_send();
  402e66:	e7f9      	b.n	402e5c <sys_run+0x4>
  402e68:	004026a5 	.word	0x004026a5
  402e6c:	004011cd 	.word	0x004011cd

00402e70 <m_sensor_hande_task>:
/* Private function definitions --------------------------------------- */
/**
 * @brief Sensor handle task
 */
static void m_sensor_hande_task(void *params)
{
  402e70:	b580      	push	{r7, lr}
  402e72:	b084      	sub	sp, #16
  402e74:	af00      	add	r7, sp, #0
  402e76:	6078      	str	r0, [r7, #4]
  while (1)
  {
    for (uint8_t i = 1; i <= 99; i++)
  402e78:	2301      	movs	r3, #1
  402e7a:	73fb      	strb	r3, [r7, #15]
  402e7c:	e03b      	b.n	402ef6 <m_sensor_hande_task+0x86>
    {
      if (!ioport_get_pin_level(PIN_INDEX(i)) && !IO_SENSOR_STATE[i])
  402e7e:	7bfb      	ldrb	r3, [r7, #15]
  402e80:	011b      	lsls	r3, r3, #4
  402e82:	4a20      	ldr	r2, [pc, #128]	; (402f04 <m_sensor_hande_task+0x94>)
  402e84:	4413      	add	r3, r2
  402e86:	4618      	mov	r0, r3
  402e88:	4b1f      	ldr	r3, [pc, #124]	; (402f08 <m_sensor_hande_task+0x98>)
  402e8a:	4798      	blx	r3
  402e8c:	4603      	mov	r3, r0
  402e8e:	4618      	mov	r0, r3
  402e90:	4b1e      	ldr	r3, [pc, #120]	; (402f0c <m_sensor_hande_task+0x9c>)
  402e92:	4798      	blx	r3
  402e94:	4603      	mov	r3, r0
  402e96:	f083 0301 	eor.w	r3, r3, #1
  402e9a:	b2db      	uxtb	r3, r3
  402e9c:	2b00      	cmp	r3, #0
  402e9e:	d010      	beq.n	402ec2 <m_sensor_hande_task+0x52>
  402ea0:	7bfb      	ldrb	r3, [r7, #15]
  402ea2:	4a1b      	ldr	r2, [pc, #108]	; (402f10 <m_sensor_hande_task+0xa0>)
  402ea4:	5cd3      	ldrb	r3, [r2, r3]
  402ea6:	f083 0301 	eor.w	r3, r3, #1
  402eaa:	b2db      	uxtb	r3, r3
  402eac:	2b00      	cmp	r3, #0
  402eae:	d008      	beq.n	402ec2 <m_sensor_hande_task+0x52>
      {
        m_lcd_write_sensor_event(i);
  402eb0:	7bfb      	ldrb	r3, [r7, #15]
  402eb2:	4618      	mov	r0, r3
  402eb4:	4b17      	ldr	r3, [pc, #92]	; (402f14 <m_sensor_hande_task+0xa4>)
  402eb6:	4798      	blx	r3
        IO_SENSOR_STATE[i] = true;
  402eb8:	7bfb      	ldrb	r3, [r7, #15]
  402eba:	4a15      	ldr	r2, [pc, #84]	; (402f10 <m_sensor_hande_task+0xa0>)
  402ebc:	2101      	movs	r1, #1
  402ebe:	54d1      	strb	r1, [r2, r3]
  402ec0:	e016      	b.n	402ef0 <m_sensor_hande_task+0x80>
      }
      else if (ioport_get_pin_level(PIN_INDEX(i)) && IO_SENSOR_STATE[i])
  402ec2:	7bfb      	ldrb	r3, [r7, #15]
  402ec4:	011b      	lsls	r3, r3, #4
  402ec6:	4a0f      	ldr	r2, [pc, #60]	; (402f04 <m_sensor_hande_task+0x94>)
  402ec8:	4413      	add	r3, r2
  402eca:	4618      	mov	r0, r3
  402ecc:	4b0e      	ldr	r3, [pc, #56]	; (402f08 <m_sensor_hande_task+0x98>)
  402ece:	4798      	blx	r3
  402ed0:	4603      	mov	r3, r0
  402ed2:	4618      	mov	r0, r3
  402ed4:	4b0d      	ldr	r3, [pc, #52]	; (402f0c <m_sensor_hande_task+0x9c>)
  402ed6:	4798      	blx	r3
  402ed8:	4603      	mov	r3, r0
  402eda:	2b00      	cmp	r3, #0
  402edc:	d008      	beq.n	402ef0 <m_sensor_hande_task+0x80>
  402ede:	7bfb      	ldrb	r3, [r7, #15]
  402ee0:	4a0b      	ldr	r2, [pc, #44]	; (402f10 <m_sensor_hande_task+0xa0>)
  402ee2:	5cd3      	ldrb	r3, [r2, r3]
  402ee4:	2b00      	cmp	r3, #0
  402ee6:	d003      	beq.n	402ef0 <m_sensor_hande_task+0x80>
      {
        IO_SENSOR_STATE[i] = false;
  402ee8:	7bfb      	ldrb	r3, [r7, #15]
  402eea:	4a09      	ldr	r2, [pc, #36]	; (402f10 <m_sensor_hande_task+0xa0>)
  402eec:	2100      	movs	r1, #0
  402eee:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= 99; i++)
  402ef0:	7bfb      	ldrb	r3, [r7, #15]
  402ef2:	3301      	adds	r3, #1
  402ef4:	73fb      	strb	r3, [r7, #15]
  402ef6:	7bfb      	ldrb	r3, [r7, #15]
  402ef8:	2b63      	cmp	r3, #99	; 0x63
  402efa:	d9c0      	bls.n	402e7e <m_sensor_hande_task+0xe>
      // {
      //   IO_SENSOR_STATE[i] = false;
      // }
    }

    vTaskDelay(pdMS_TO_TICKS(100));
  402efc:	2064      	movs	r0, #100	; 0x64
  402efe:	4b06      	ldr	r3, [pc, #24]	; (402f18 <m_sensor_hande_task+0xa8>)
  402f00:	4798      	blx	r3
    for (uint8_t i = 1; i <= 99; i++)
  402f02:	e7b9      	b.n	402e78 <m_sensor_hande_task+0x8>
  402f04:	0040ae80 	.word	0x0040ae80
  402f08:	00402a15 	.word	0x00402a15
  402f0c:	00402d55 	.word	0x00402d55
  402f10:	2000ab34 	.word	0x2000ab34
  402f14:	00402f1d 	.word	0x00402f1d
  402f18:	004011cd 	.word	0x004011cd

00402f1c <m_lcd_write_sensor_event>:

/**
 * @brief LCD write sensor event
 */
static void m_lcd_write_sensor_event(uint8_t sensor_name)
{
  402f1c:	b590      	push	{r4, r7, lr}
  402f1e:	b089      	sub	sp, #36	; 0x24
  402f20:	af02      	add	r7, sp, #8
  402f22:	4603      	mov	r3, r0
  402f24:	71fb      	strb	r3, [r7, #7]
  static uint8_t m_current_row = 0;
  char time[14];

  bsp_rtc_make_string_time_style(time);
  402f26:	f107 0308 	add.w	r3, r7, #8
  402f2a:	4618      	mov	r0, r3
  402f2c:	4b0d      	ldr	r3, [pc, #52]	; (402f64 <m_lcd_write_sensor_event+0x48>)
  402f2e:	4798      	blx	r3

  bsp_lcd_write_string(0, m_current_row++, "%s: SS%02d", time, sensor_name);
  402f30:	4b0d      	ldr	r3, [pc, #52]	; (402f68 <m_lcd_write_sensor_event+0x4c>)
  402f32:	7819      	ldrb	r1, [r3, #0]
  402f34:	1c4b      	adds	r3, r1, #1
  402f36:	b2da      	uxtb	r2, r3
  402f38:	4b0b      	ldr	r3, [pc, #44]	; (402f68 <m_lcd_write_sensor_event+0x4c>)
  402f3a:	701a      	strb	r2, [r3, #0]
  402f3c:	79fb      	ldrb	r3, [r7, #7]
  402f3e:	f107 0208 	add.w	r2, r7, #8
  402f42:	9300      	str	r3, [sp, #0]
  402f44:	4613      	mov	r3, r2
  402f46:	4a09      	ldr	r2, [pc, #36]	; (402f6c <m_lcd_write_sensor_event+0x50>)
  402f48:	2000      	movs	r0, #0
  402f4a:	4c09      	ldr	r4, [pc, #36]	; (402f70 <m_lcd_write_sensor_event+0x54>)
  402f4c:	47a0      	blx	r4
  if (m_current_row == 4)
  402f4e:	4b06      	ldr	r3, [pc, #24]	; (402f68 <m_lcd_write_sensor_event+0x4c>)
  402f50:	781b      	ldrb	r3, [r3, #0]
  402f52:	2b04      	cmp	r3, #4
  402f54:	d102      	bne.n	402f5c <m_lcd_write_sensor_event+0x40>
    m_current_row = 0;
  402f56:	4b04      	ldr	r3, [pc, #16]	; (402f68 <m_lcd_write_sensor_event+0x4c>)
  402f58:	2200      	movs	r2, #0
  402f5a:	701a      	strb	r2, [r3, #0]
}
  402f5c:	bf00      	nop
  402f5e:	371c      	adds	r7, #28
  402f60:	46bd      	mov	sp, r7
  402f62:	bd90      	pop	{r4, r7, pc}
  402f64:	00402b85 	.word	0x00402b85
  402f68:	2000aba0 	.word	0x2000aba0
  402f6c:	0040b53c 	.word	0x0040b53c
  402f70:	00402a5d 	.word	0x00402a5d

00402f74 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
  402f74:	b480      	push	{r7}
  402f76:	b087      	sub	sp, #28
  402f78:	af00      	add	r7, sp, #0
  402f7a:	60f8      	str	r0, [r7, #12]
  402f7c:	4608      	mov	r0, r1
  402f7e:	4611      	mov	r1, r2
  402f80:	461a      	mov	r2, r3
  402f82:	4603      	mov	r3, r0
  402f84:	817b      	strh	r3, [r7, #10]
  402f86:	460b      	mov	r3, r1
  402f88:	813b      	strh	r3, [r7, #8]
  402f8a:	4613      	mov	r3, r2
  402f8c:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  402f8e:	897a      	ldrh	r2, [r7, #10]
  402f90:	893b      	ldrh	r3, [r7, #8]
  402f92:	1ad3      	subs	r3, r2, r3
  402f94:	3307      	adds	r3, #7
  402f96:	2b00      	cmp	r3, #0
  402f98:	da00      	bge.n	402f9c <SDMMC_UNSTUFF_BITS+0x28>
  402f9a:	3307      	adds	r3, #7
  402f9c:	10db      	asrs	r3, r3, #3
  402f9e:	3b01      	subs	r3, #1
  402fa0:	68fa      	ldr	r2, [r7, #12]
  402fa2:	4413      	add	r3, r2
  402fa4:	781b      	ldrb	r3, [r3, #0]
  402fa6:	461a      	mov	r2, r3
  402fa8:	893b      	ldrh	r3, [r7, #8]
  402faa:	f003 0307 	and.w	r3, r3, #7
  402fae:	fa42 f303 	asr.w	r3, r2, r3
  402fb2:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
  402fb4:	893b      	ldrh	r3, [r7, #8]
  402fb6:	f003 0207 	and.w	r2, r3, #7
  402fba:	79fb      	ldrb	r3, [r7, #7]
  402fbc:	4413      	add	r3, r2
  402fbe:	2b08      	cmp	r3, #8
  402fc0:	dd16      	ble.n	402ff0 <SDMMC_UNSTUFF_BITS+0x7c>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  402fc2:	897a      	ldrh	r2, [r7, #10]
  402fc4:	893b      	ldrh	r3, [r7, #8]
  402fc6:	1ad3      	subs	r3, r2, r3
  402fc8:	3307      	adds	r3, #7
  402fca:	2b00      	cmp	r3, #0
  402fcc:	da00      	bge.n	402fd0 <SDMMC_UNSTUFF_BITS+0x5c>
  402fce:	3307      	adds	r3, #7
  402fd0:	10db      	asrs	r3, r3, #3
  402fd2:	3b02      	subs	r3, #2
  402fd4:	68fa      	ldr	r2, [r7, #12]
  402fd6:	4413      	add	r3, r2
  402fd8:	781b      	ldrb	r3, [r3, #0]
  402fda:	461a      	mov	r2, r3
  402fdc:	893b      	ldrh	r3, [r7, #8]
  402fde:	f003 0307 	and.w	r3, r3, #7
  402fe2:	f1c3 0308 	rsb	r3, r3, #8
  402fe6:	fa02 f303 	lsl.w	r3, r2, r3
  402fea:	697a      	ldr	r2, [r7, #20]
  402fec:	4313      	orrs	r3, r2
  402fee:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  402ff0:	893b      	ldrh	r3, [r7, #8]
  402ff2:	f003 0207 	and.w	r2, r3, #7
  402ff6:	79fb      	ldrb	r3, [r7, #7]
  402ff8:	4413      	add	r3, r2
  402ffa:	2b10      	cmp	r3, #16
  402ffc:	dd16      	ble.n	40302c <SDMMC_UNSTUFF_BITS+0xb8>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  402ffe:	897a      	ldrh	r2, [r7, #10]
  403000:	893b      	ldrh	r3, [r7, #8]
  403002:	1ad3      	subs	r3, r2, r3
  403004:	3307      	adds	r3, #7
  403006:	2b00      	cmp	r3, #0
  403008:	da00      	bge.n	40300c <SDMMC_UNSTUFF_BITS+0x98>
  40300a:	3307      	adds	r3, #7
  40300c:	10db      	asrs	r3, r3, #3
  40300e:	3b03      	subs	r3, #3
  403010:	68fa      	ldr	r2, [r7, #12]
  403012:	4413      	add	r3, r2
  403014:	781b      	ldrb	r3, [r3, #0]
  403016:	461a      	mov	r2, r3
  403018:	893b      	ldrh	r3, [r7, #8]
  40301a:	f003 0307 	and.w	r3, r3, #7
  40301e:	f1c3 0310 	rsb	r3, r3, #16
  403022:	fa02 f303 	lsl.w	r3, r2, r3
  403026:	697a      	ldr	r2, [r7, #20]
  403028:	4313      	orrs	r3, r2
  40302a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  40302c:	893b      	ldrh	r3, [r7, #8]
  40302e:	f003 0207 	and.w	r2, r3, #7
  403032:	79fb      	ldrb	r3, [r7, #7]
  403034:	4413      	add	r3, r2
  403036:	2b10      	cmp	r3, #16
  403038:	dd16      	ble.n	403068 <SDMMC_UNSTUFF_BITS+0xf4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40303a:	897a      	ldrh	r2, [r7, #10]
  40303c:	893b      	ldrh	r3, [r7, #8]
  40303e:	1ad3      	subs	r3, r2, r3
  403040:	3307      	adds	r3, #7
  403042:	2b00      	cmp	r3, #0
  403044:	da00      	bge.n	403048 <SDMMC_UNSTUFF_BITS+0xd4>
  403046:	3307      	adds	r3, #7
  403048:	10db      	asrs	r3, r3, #3
  40304a:	3b03      	subs	r3, #3
  40304c:	68fa      	ldr	r2, [r7, #12]
  40304e:	4413      	add	r3, r2
  403050:	781b      	ldrb	r3, [r3, #0]
  403052:	461a      	mov	r2, r3
  403054:	893b      	ldrh	r3, [r7, #8]
  403056:	f003 0307 	and.w	r3, r3, #7
  40305a:	f1c3 0310 	rsb	r3, r3, #16
  40305e:	fa02 f303 	lsl.w	r3, r2, r3
  403062:	697a      	ldr	r2, [r7, #20]
  403064:	4313      	orrs	r3, r2
  403066:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
  403068:	79fb      	ldrb	r3, [r7, #7]
  40306a:	2201      	movs	r2, #1
  40306c:	fa02 f303 	lsl.w	r3, r2, r3
  403070:	3b01      	subs	r3, #1
  403072:	697a      	ldr	r2, [r7, #20]
  403074:	4013      	ands	r3, r2
  403076:	617b      	str	r3, [r7, #20]
	return value;
  403078:	697b      	ldr	r3, [r7, #20]
}
  40307a:	4618      	mov	r0, r3
  40307c:	371c      	adds	r7, #28
  40307e:	46bd      	mov	sp, r7
  403080:	f85d 7b04 	ldr.w	r7, [sp], #4
  403084:	4770      	bx	lr
	...

00403088 <mmc_mci_op_cond>:
 * - CMD1 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_mci_op_cond(void)
{
  403088:	b580      	push	{r7, lr}
  40308a:	b082      	sub	sp, #8
  40308c:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+6)*8) cylces = 4200 retry
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
  40308e:	f241 0368 	movw	r3, #4200	; 0x1068
  403092:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  403094:	4917      	ldr	r1, [pc, #92]	; (4030f4 <mmc_mci_op_cond+0x6c>)
  403096:	f244 5001 	movw	r0, #17665	; 0x4501
  40309a:	4b17      	ldr	r3, [pc, #92]	; (4030f8 <mmc_mci_op_cond+0x70>)
  40309c:	4798      	blx	r3
  40309e:	4603      	mov	r3, r0
  4030a0:	f083 0301 	eor.w	r3, r3, #1
  4030a4:	b2db      	uxtb	r3, r3
  4030a6:	2b00      	cmp	r3, #0
  4030a8:	d001      	beq.n	4030ae <mmc_mci_op_cond+0x26>
				SD_MMC_VOLTAGE_SUPPORT | OCR_ACCESS_MODE_SECTOR)) {
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
  4030aa:	2300      	movs	r3, #0
  4030ac:	e01e      	b.n	4030ec <mmc_mci_op_cond+0x64>
		}
		// Check busy flag
		resp = driver_get_response();
  4030ae:	4b13      	ldr	r3, [pc, #76]	; (4030fc <mmc_mci_op_cond+0x74>)
  4030b0:	4798      	blx	r3
  4030b2:	6038      	str	r0, [r7, #0]
		if (resp & OCR_POWER_UP_BUSY) {
  4030b4:	683b      	ldr	r3, [r7, #0]
  4030b6:	2b00      	cmp	r3, #0
  4030b8:	da0f      	bge.n	4030da <mmc_mci_op_cond+0x52>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  4030ba:	683b      	ldr	r3, [r7, #0]
  4030bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  4030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  4030c4:	d110      	bne.n	4030e8 <mmc_mci_op_cond+0x60>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  4030c6:	4b0e      	ldr	r3, [pc, #56]	; (403100 <mmc_mci_op_cond+0x78>)
  4030c8:	681b      	ldr	r3, [r3, #0]
  4030ca:	4a0d      	ldr	r2, [pc, #52]	; (403100 <mmc_mci_op_cond+0x78>)
  4030cc:	6812      	ldr	r2, [r2, #0]
  4030ce:	7ad2      	ldrb	r2, [r2, #11]
  4030d0:	f042 0208 	orr.w	r2, r2, #8
  4030d4:	b2d2      	uxtb	r2, r2
  4030d6:	72da      	strb	r2, [r3, #11]
			}
			break;
  4030d8:	e006      	b.n	4030e8 <mmc_mci_op_cond+0x60>
		}
		if (retry-- == 0) {
  4030da:	687b      	ldr	r3, [r7, #4]
  4030dc:	1e5a      	subs	r2, r3, #1
  4030de:	607a      	str	r2, [r7, #4]
  4030e0:	2b00      	cmp	r3, #0
  4030e2:	d1d7      	bne.n	403094 <mmc_mci_op_cond+0xc>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
  4030e4:	2300      	movs	r3, #0
  4030e6:	e001      	b.n	4030ec <mmc_mci_op_cond+0x64>
			break;
  4030e8:	bf00      	nop
		}
	} while (1);
	return true;
  4030ea:	2301      	movs	r3, #1
}
  4030ec:	4618      	mov	r0, r3
  4030ee:	3708      	adds	r7, #8
  4030f0:	46bd      	mov	sp, r7
  4030f2:	bd80      	pop	{r7, pc}
  4030f4:	401f8000 	.word	0x401f8000
  4030f8:	00404b4d 	.word	0x00404b4d
  4030fc:	00404b91 	.word	0x00404b91
  403100:	2000abc8 	.word	0x2000abc8

00403104 <sd_mci_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_mci_op_cond(uint8_t v2)
{
  403104:	b580      	push	{r7, lr}
  403106:	b086      	sub	sp, #24
  403108:	af00      	add	r7, sp, #0
  40310a:	4603      	mov	r3, r0
  40310c:	71fb      	strb	r3, [r7, #7]
	 * 6 = cmd byte size
	 * 6 = response byte size
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 2100;
  40310e:	f640 0334 	movw	r3, #2100	; 0x834
  403112:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  403114:	2100      	movs	r1, #0
  403116:	f241 1037 	movw	r0, #4407	; 0x1137
  40311a:	4b21      	ldr	r3, [pc, #132]	; (4031a0 <sd_mci_op_cond+0x9c>)
  40311c:	4798      	blx	r3
  40311e:	4603      	mov	r3, r0
  403120:	f083 0301 	eor.w	r3, r3, #1
  403124:	b2db      	uxtb	r3, r3
  403126:	2b00      	cmp	r3, #0
  403128:	d001      	beq.n	40312e <sd_mci_op_cond+0x2a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
  40312a:	2300      	movs	r3, #0
  40312c:	e034      	b.n	403198 <sd_mci_op_cond+0x94>
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  40312e:	f44f 13fc 	mov.w	r3, #2064384	; 0x1f8000
  403132:	617b      	str	r3, [r7, #20]
		if (v2) {
  403134:	79fb      	ldrb	r3, [r7, #7]
  403136:	2b00      	cmp	r3, #0
  403138:	d003      	beq.n	403142 <sd_mci_op_cond+0x3e>
			arg |= SD_ACMD41_HCS;
  40313a:	697b      	ldr	r3, [r7, #20]
  40313c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  403140:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  403142:	6979      	ldr	r1, [r7, #20]
  403144:	f244 5029 	movw	r0, #17705	; 0x4529
  403148:	4b15      	ldr	r3, [pc, #84]	; (4031a0 <sd_mci_op_cond+0x9c>)
  40314a:	4798      	blx	r3
  40314c:	4603      	mov	r3, r0
  40314e:	f083 0301 	eor.w	r3, r3, #1
  403152:	b2db      	uxtb	r3, r3
  403154:	2b00      	cmp	r3, #0
  403156:	d001      	beq.n	40315c <sd_mci_op_cond+0x58>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
  403158:	2300      	movs	r3, #0
  40315a:	e01d      	b.n	403198 <sd_mci_op_cond+0x94>
		}
		resp = driver_get_response();
  40315c:	4b11      	ldr	r3, [pc, #68]	; (4031a4 <sd_mci_op_cond+0xa0>)
  40315e:	4798      	blx	r3
  403160:	60f8      	str	r0, [r7, #12]
		if (resp & OCR_POWER_UP_BUSY) {
  403162:	68fb      	ldr	r3, [r7, #12]
  403164:	2b00      	cmp	r3, #0
  403166:	da0e      	bge.n	403186 <sd_mci_op_cond+0x82>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  403168:	68fb      	ldr	r3, [r7, #12]
  40316a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  40316e:	2b00      	cmp	r3, #0
  403170:	d010      	beq.n	403194 <sd_mci_op_cond+0x90>
				sd_mmc_card->type |= CARD_TYPE_HC;
  403172:	4b0d      	ldr	r3, [pc, #52]	; (4031a8 <sd_mci_op_cond+0xa4>)
  403174:	681b      	ldr	r3, [r3, #0]
  403176:	4a0c      	ldr	r2, [pc, #48]	; (4031a8 <sd_mci_op_cond+0xa4>)
  403178:	6812      	ldr	r2, [r2, #0]
  40317a:	7ad2      	ldrb	r2, [r2, #11]
  40317c:	f042 0208 	orr.w	r2, r2, #8
  403180:	b2d2      	uxtb	r2, r2
  403182:	72da      	strb	r2, [r3, #11]
			}
			break;
  403184:	e006      	b.n	403194 <sd_mci_op_cond+0x90>
		}
		if (retry-- == 0) {
  403186:	693b      	ldr	r3, [r7, #16]
  403188:	1e5a      	subs	r2, r3, #1
  40318a:	613a      	str	r2, [r7, #16]
  40318c:	2b00      	cmp	r3, #0
  40318e:	d1c1      	bne.n	403114 <sd_mci_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
  403190:	2300      	movs	r3, #0
  403192:	e001      	b.n	403198 <sd_mci_op_cond+0x94>
			break;
  403194:	bf00      	nop
		}
	} while (1);
	return true;
  403196:	2301      	movs	r3, #1
}
  403198:	4618      	mov	r0, r3
  40319a:	3718      	adds	r7, #24
  40319c:	46bd      	mov	sp, r7
  40319e:	bd80      	pop	{r7, pc}
  4031a0:	00404b4d 	.word	0x00404b4d
  4031a4:	00404b91 	.word	0x00404b91
  4031a8:	2000abc8 	.word	0x2000abc8

004031ac <sdio_op_cond>:
 *   sd_mmc_card->type is updated
 *
 * \return true if success, otherwise false
 */
static bool sdio_op_cond(void)
{
  4031ac:	b580      	push	{r7, lr}
  4031ae:	b082      	sub	sp, #8
  4031b0:	af00      	add	r7, sp, #0
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  4031b2:	2100      	movs	r1, #0
  4031b4:	f244 5005 	movw	r0, #17669	; 0x4505
  4031b8:	4b23      	ldr	r3, [pc, #140]	; (403248 <sdio_op_cond+0x9c>)
  4031ba:	4798      	blx	r3
  4031bc:	4603      	mov	r3, r0
  4031be:	f083 0301 	eor.w	r3, r3, #1
  4031c2:	b2db      	uxtb	r3, r3
  4031c4:	2b00      	cmp	r3, #0
  4031c6:	d001      	beq.n	4031cc <sdio_op_cond+0x20>
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
  4031c8:	2301      	movs	r3, #1
  4031ca:	e039      	b.n	403240 <sdio_op_cond+0x94>
	}
	resp = driver_get_response();
  4031cc:	4b1f      	ldr	r3, [pc, #124]	; (40324c <sdio_op_cond+0xa0>)
  4031ce:	4798      	blx	r3
  4031d0:	6078      	str	r0, [r7, #4]
	if ((resp & OCR_SDIO_NF) == 0) {
  4031d2:	687b      	ldr	r3, [r7, #4]
  4031d4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
  4031d8:	2b00      	cmp	r3, #0
  4031da:	d101      	bne.n	4031e0 <sdio_op_cond+0x34>
		return true; // No error but card type not updated
  4031dc:	2301      	movs	r3, #1
  4031de:	e02f      	b.n	403240 <sdio_op_cond+0x94>
	 * Wait card ready
	 * Timeout 1s = 400KHz / ((6+4)*8) cylces = 5000 retry
	 * 6 = cmd byte size
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
  4031e0:	f241 3388 	movw	r3, #5000	; 0x1388
  4031e4:	603b      	str	r3, [r7, #0]
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  4031e6:	687b      	ldr	r3, [r7, #4]
  4031e8:	f403 13fc 	and.w	r3, r3, #2064384	; 0x1f8000
  4031ec:	4619      	mov	r1, r3
  4031ee:	f244 5005 	movw	r0, #17669	; 0x4505
  4031f2:	4b15      	ldr	r3, [pc, #84]	; (403248 <sdio_op_cond+0x9c>)
  4031f4:	4798      	blx	r3
  4031f6:	4603      	mov	r3, r0
  4031f8:	f083 0301 	eor.w	r3, r3, #1
  4031fc:	b2db      	uxtb	r3, r3
  4031fe:	2b00      	cmp	r3, #0
  403200:	d001      	beq.n	403206 <sdio_op_cond+0x5a>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
  403202:	2300      	movs	r3, #0
  403204:	e01c      	b.n	403240 <sdio_op_cond+0x94>
		}
		resp = driver_get_response();
  403206:	4b11      	ldr	r3, [pc, #68]	; (40324c <sdio_op_cond+0xa0>)
  403208:	4798      	blx	r3
  40320a:	6078      	str	r0, [r7, #4]
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  40320c:	687b      	ldr	r3, [r7, #4]
  40320e:	2b00      	cmp	r3, #0
  403210:	db06      	blt.n	403220 <sdio_op_cond+0x74>
			break;
		}
		if (cmd5_retry-- == 0) {
  403212:	683b      	ldr	r3, [r7, #0]
  403214:	1e5a      	subs	r2, r3, #1
  403216:	603a      	str	r2, [r7, #0]
  403218:	2b00      	cmp	r3, #0
  40321a:	d1e4      	bne.n	4031e6 <sdio_op_cond+0x3a>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
  40321c:	2300      	movs	r3, #0
  40321e:	e00f      	b.n	403240 <sdio_op_cond+0x94>
			break;
  403220:	bf00      	nop
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
  403222:	687b      	ldr	r3, [r7, #4]
  403224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  403228:	2b00      	cmp	r3, #0
  40322a:	d004      	beq.n	403236 <sdio_op_cond+0x8a>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  40322c:	4b08      	ldr	r3, [pc, #32]	; (403250 <sdio_op_cond+0xa4>)
  40322e:	681b      	ldr	r3, [r3, #0]
  403230:	2205      	movs	r2, #5
  403232:	72da      	strb	r2, [r3, #11]
  403234:	e003      	b.n	40323e <sdio_op_cond+0x92>
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
  403236:	4b06      	ldr	r3, [pc, #24]	; (403250 <sdio_op_cond+0xa4>)
  403238:	681b      	ldr	r3, [r3, #0]
  40323a:	2204      	movs	r2, #4
  40323c:	72da      	strb	r2, [r3, #11]
	}
	return true; // No error and card type updated with SDIO type
  40323e:	2301      	movs	r3, #1
}
  403240:	4618      	mov	r0, r3
  403242:	3708      	adds	r7, #8
  403244:	46bd      	mov	sp, r7
  403246:	bd80      	pop	{r7, pc}
  403248:	00404b4d 	.word	0x00404b4d
  40324c:	00404b91 	.word	0x00404b91
  403250:	2000abc8 	.word	0x2000abc8

00403254 <sdio_get_max_speed>:
 *   and update sd_mmc_card->clock
 *
 * \return true if success, otherwise false
 */
static bool sdio_get_max_speed(void)
{
  403254:	b590      	push	{r4, r7, lr}
  403256:	b08b      	sub	sp, #44	; 0x2c
  403258:	af02      	add	r7, sp, #8
	uint32_t mul;
	uint8_t tplfe_max_tran_speed, i;
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
  40325a:	2309      	movs	r3, #9
  40325c:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < 4; i++) {
  40325e:	2300      	movs	r3, #0
  403260:	75bb      	strb	r3, [r7, #22]
  403262:	e00f      	b.n	403284 <sdio_get_max_speed+0x30>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  403264:	7dbb      	ldrb	r3, [r7, #22]
  403266:	463a      	mov	r2, r7
  403268:	4413      	add	r3, r2
  40326a:	9300      	str	r3, [sp, #0]
  40326c:	2300      	movs	r3, #0
  40326e:	69ba      	ldr	r2, [r7, #24]
  403270:	2100      	movs	r1, #0
  403272:	2000      	movs	r0, #0
  403274:	4c46      	ldr	r4, [pc, #280]	; (403390 <sdio_get_max_speed+0x13c>)
  403276:	47a0      	blx	r4
		addr_old++;
  403278:	69bb      	ldr	r3, [r7, #24]
  40327a:	3301      	adds	r3, #1
  40327c:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < 4; i++) {
  40327e:	7dbb      	ldrb	r3, [r7, #22]
  403280:	3301      	adds	r3, #1
  403282:	75bb      	strb	r3, [r7, #22]
  403284:	7dbb      	ldrb	r3, [r7, #22]
  403286:	2b03      	cmp	r3, #3
  403288:	d9ec      	bls.n	403264 <sdio_get_max_speed+0x10>
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  40328a:	783b      	ldrb	r3, [r7, #0]
  40328c:	461a      	mov	r2, r3
  40328e:	787b      	ldrb	r3, [r7, #1]
  403290:	021b      	lsls	r3, r3, #8
  403292:	441a      	add	r2, r3
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  403294:	78bb      	ldrb	r3, [r7, #2]
  403296:	041b      	lsls	r3, r3, #16
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  403298:	441a      	add	r2, r3
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40329a:	78fb      	ldrb	r3, [r7, #3]
  40329c:	061b      	lsls	r3, r3, #24
  40329e:	4413      	add	r3, r2
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4032a0:	61bb      	str	r3, [r7, #24]
	addr_new = addr_old;
  4032a2:	69bb      	ldr	r3, [r7, #24]
  4032a4:	61fb      	str	r3, [r7, #28]

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
  4032a6:	2300      	movs	r3, #0
  4032a8:	75bb      	strb	r3, [r7, #22]
  4032aa:	e00f      	b.n	4032cc <sdio_get_max_speed+0x78>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4032ac:	7dbb      	ldrb	r3, [r7, #22]
  4032ae:	1d3a      	adds	r2, r7, #4
  4032b0:	4413      	add	r3, r2
  4032b2:	9300      	str	r3, [sp, #0]
  4032b4:	2300      	movs	r3, #0
  4032b6:	69fa      	ldr	r2, [r7, #28]
  4032b8:	2100      	movs	r1, #0
  4032ba:	2000      	movs	r0, #0
  4032bc:	4c34      	ldr	r4, [pc, #208]	; (403390 <sdio_get_max_speed+0x13c>)
  4032be:	47a0      	blx	r4
			addr_new++;
  4032c0:	69fb      	ldr	r3, [r7, #28]
  4032c2:	3301      	adds	r3, #1
  4032c4:	61fb      	str	r3, [r7, #28]
		for(i=0; i<3; i++) {
  4032c6:	7dbb      	ldrb	r3, [r7, #22]
  4032c8:	3301      	adds	r3, #1
  4032ca:	75bb      	strb	r3, [r7, #22]
  4032cc:	7dbb      	ldrb	r3, [r7, #22]
  4032ce:	2b02      	cmp	r3, #2
  4032d0:	d9ec      	bls.n	4032ac <sdio_get_max_speed+0x58>
		}
		if (buf[0] == SDIO_CISTPL_END) {
  4032d2:	793b      	ldrb	r3, [r7, #4]
  4032d4:	2bff      	cmp	r3, #255	; 0xff
  4032d6:	d101      	bne.n	4032dc <sdio_get_max_speed+0x88>
			return false; /* Tuple error */
  4032d8:	2300      	movs	r3, #0
  4032da:	e055      	b.n	403388 <sdio_get_max_speed+0x134>
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4032dc:	793b      	ldrb	r3, [r7, #4]
  4032de:	2b22      	cmp	r3, #34	; 0x22
  4032e0:	d102      	bne.n	4032e8 <sdio_get_max_speed+0x94>
  4032e2:	79bb      	ldrb	r3, [r7, #6]
  4032e4:	2b00      	cmp	r3, #0
  4032e6:	d012      	beq.n	40330e <sdio_get_max_speed+0xba>
			break; /* Fun0 tuple found */
		}
		if (buf[1] == 0) {
  4032e8:	797b      	ldrb	r3, [r7, #5]
  4032ea:	2b00      	cmp	r3, #0
  4032ec:	d101      	bne.n	4032f2 <sdio_get_max_speed+0x9e>
			return false; /* Tuple error */
  4032ee:	2300      	movs	r3, #0
  4032f0:	e04a      	b.n	403388 <sdio_get_max_speed+0x134>
		}
		/* Next address */
		addr_new += buf[1]-1;
  4032f2:	797b      	ldrb	r3, [r7, #5]
  4032f4:	461a      	mov	r2, r3
  4032f6:	69fb      	ldr	r3, [r7, #28]
  4032f8:	4413      	add	r3, r2
  4032fa:	3b01      	subs	r3, #1
  4032fc:	61fb      	str	r3, [r7, #28]
		if (addr_new > (addr_old + 256)) {
  4032fe:	69bb      	ldr	r3, [r7, #24]
  403300:	f503 7280 	add.w	r2, r3, #256	; 0x100
  403304:	69fb      	ldr	r3, [r7, #28]
  403306:	429a      	cmp	r2, r3
  403308:	d2cd      	bcs.n	4032a6 <sdio_get_max_speed+0x52>
			return false; /* Outoff CIS area */
  40330a:	2300      	movs	r3, #0
  40330c:	e03c      	b.n	403388 <sdio_get_max_speed+0x134>
			break; /* Fun0 tuple found */
  40330e:	bf00      	nop
		}
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
  403310:	69fb      	ldr	r3, [r7, #28]
  403312:	3b03      	subs	r3, #3
  403314:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < 6; i++) {
  403316:	2300      	movs	r3, #0
  403318:	75bb      	strb	r3, [r7, #22]
  40331a:	e00f      	b.n	40333c <sdio_get_max_speed+0xe8>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40331c:	7dbb      	ldrb	r3, [r7, #22]
  40331e:	1d3a      	adds	r2, r7, #4
  403320:	4413      	add	r3, r2
  403322:	9300      	str	r3, [sp, #0]
  403324:	2300      	movs	r3, #0
  403326:	69fa      	ldr	r2, [r7, #28]
  403328:	2100      	movs	r1, #0
  40332a:	2000      	movs	r0, #0
  40332c:	4c18      	ldr	r4, [pc, #96]	; (403390 <sdio_get_max_speed+0x13c>)
  40332e:	47a0      	blx	r4
		addr_new++;
  403330:	69fb      	ldr	r3, [r7, #28]
  403332:	3301      	adds	r3, #1
  403334:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < 6; i++) {
  403336:	7dbb      	ldrb	r3, [r7, #22]
  403338:	3301      	adds	r3, #1
  40333a:	75bb      	strb	r3, [r7, #22]
  40333c:	7dbb      	ldrb	r3, [r7, #22]
  40333e:	2b05      	cmp	r3, #5
  403340:	d9ec      	bls.n	40331c <sdio_get_max_speed+0xc8>
	}

	tplfe_max_tran_speed = buf[5];
  403342:	7a7b      	ldrb	r3, [r7, #9]
  403344:	75fb      	strb	r3, [r7, #23]
	if (tplfe_max_tran_speed > 0x32) {
  403346:	7dfb      	ldrb	r3, [r7, #23]
  403348:	2b32      	cmp	r3, #50	; 0x32
  40334a:	d901      	bls.n	403350 <sdio_get_max_speed+0xfc>
		/* Error on SDIO register, the high speed is not activated
		 * and the clock can not be more than 25MHz.
		 * This error is present on specific SDIO card
		 * (H&D wireless card - HDG104 WiFi SIP).
		 */
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
  40334c:	2332      	movs	r3, #50	; 0x32
  40334e:	75fb      	strb	r3, [r7, #23]
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  403350:	7dfb      	ldrb	r3, [r7, #23]
  403352:	f003 0307 	and.w	r3, r3, #7
  403356:	4a0f      	ldr	r2, [pc, #60]	; (403394 <sdio_get_max_speed+0x140>)
  403358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40335c:	613b      	str	r3, [r7, #16]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  40335e:	7dfb      	ldrb	r3, [r7, #23]
  403360:	08db      	lsrs	r3, r3, #3
  403362:	b2db      	uxtb	r3, r3
  403364:	f003 030f 	and.w	r3, r3, #15
  403368:	4a0b      	ldr	r2, [pc, #44]	; (403398 <sdio_get_max_speed+0x144>)
  40336a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40336e:	60fb      	str	r3, [r7, #12]
	sd_mmc_card->clock = unit * mul * 1000;
  403370:	4b0a      	ldr	r3, [pc, #40]	; (40339c <sdio_get_max_speed+0x148>)
  403372:	681b      	ldr	r3, [r3, #0]
  403374:	693a      	ldr	r2, [r7, #16]
  403376:	68f9      	ldr	r1, [r7, #12]
  403378:	fb01 f202 	mul.w	r2, r1, r2
  40337c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403380:	fb01 f202 	mul.w	r2, r1, r2
  403384:	601a      	str	r2, [r3, #0]
	 * which supports upto 25MHz.
	 * A SDIO card alone can be:
	 * - a Low-Speed SDIO card which supports 400Khz minimum
	 * - a Full-Speed SDIO card which supports upto 25MHz
	 */
	return true;
  403386:	2301      	movs	r3, #1
}
  403388:	4618      	mov	r0, r3
  40338a:	3724      	adds	r7, #36	; 0x24
  40338c:	46bd      	mov	sp, r7
  40338e:	bd90      	pop	{r4, r7, pc}
  403390:	00403a25 	.word	0x00403a25
  403394:	0040b56c 	.word	0x0040b56c
  403398:	0040b588 	.word	0x0040b588
  40339c:	2000abc8 	.word	0x2000abc8

004033a0 <sdio_cmd52_set_bus_width>:
 * \note sd_mmc_card->bus_width is updated.
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52_set_bus_width(void)
{
  4033a0:	b590      	push	{r4, r7, lr}
  4033a2:	b085      	sub	sp, #20
  4033a4:	af02      	add	r7, sp, #8
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  4033a6:	1dfb      	adds	r3, r7, #7
  4033a8:	9300      	str	r3, [sp, #0]
  4033aa:	2300      	movs	r3, #0
  4033ac:	2208      	movs	r2, #8
  4033ae:	2100      	movs	r1, #0
  4033b0:	2000      	movs	r0, #0
  4033b2:	4c15      	ldr	r4, [pc, #84]	; (403408 <sdio_cmd52_set_bus_width+0x68>)
  4033b4:	47a0      	blx	r4
  4033b6:	4603      	mov	r3, r0
  4033b8:	f083 0301 	eor.w	r3, r3, #1
  4033bc:	b2db      	uxtb	r3, r3
  4033be:	2b00      	cmp	r3, #0
  4033c0:	d001      	beq.n	4033c6 <sdio_cmd52_set_bus_width+0x26>
			0, &u8_value)) {
		return false;
  4033c2:	2300      	movs	r3, #0
  4033c4:	e01c      	b.n	403400 <sdio_cmd52_set_bus_width+0x60>
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  4033c6:	79fb      	ldrb	r3, [r7, #7]
  4033c8:	b25b      	sxtb	r3, r3
  4033ca:	2b00      	cmp	r3, #0
  4033cc:	db01      	blt.n	4033d2 <sdio_cmd52_set_bus_width+0x32>
		// No supported, it is not a protocol error
		return true;
  4033ce:	2301      	movs	r3, #1
  4033d0:	e016      	b.n	403400 <sdio_cmd52_set_bus_width+0x60>
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
  4033d2:	2302      	movs	r3, #2
  4033d4:	71fb      	strb	r3, [r7, #7]
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  4033d6:	1dfb      	adds	r3, r7, #7
  4033d8:	9300      	str	r3, [sp, #0]
  4033da:	2301      	movs	r3, #1
  4033dc:	2207      	movs	r2, #7
  4033de:	2100      	movs	r1, #0
  4033e0:	2001      	movs	r0, #1
  4033e2:	4c09      	ldr	r4, [pc, #36]	; (403408 <sdio_cmd52_set_bus_width+0x68>)
  4033e4:	47a0      	blx	r4
  4033e6:	4603      	mov	r3, r0
  4033e8:	f083 0301 	eor.w	r3, r3, #1
  4033ec:	b2db      	uxtb	r3, r3
  4033ee:	2b00      	cmp	r3, #0
  4033f0:	d001      	beq.n	4033f6 <sdio_cmd52_set_bus_width+0x56>
			1, &u8_value)) {
		return false;
  4033f2:	2300      	movs	r3, #0
  4033f4:	e004      	b.n	403400 <sdio_cmd52_set_bus_width+0x60>
	}
	sd_mmc_card->bus_width = 4;
  4033f6:	4b05      	ldr	r3, [pc, #20]	; (40340c <sdio_cmd52_set_bus_width+0x6c>)
  4033f8:	681b      	ldr	r3, [r3, #0]
  4033fa:	2204      	movs	r2, #4
  4033fc:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  4033fe:	2301      	movs	r3, #1
}
  403400:	4618      	mov	r0, r3
  403402:	370c      	adds	r7, #12
  403404:	46bd      	mov	sp, r7
  403406:	bd90      	pop	{r4, r7, pc}
  403408:	00403a25 	.word	0x00403a25
  40340c:	2000abc8 	.word	0x2000abc8

00403410 <sdio_cmd52_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52_set_high_speed(void)
{
  403410:	b590      	push	{r4, r7, lr}
  403412:	b085      	sub	sp, #20
  403414:	af02      	add	r7, sp, #8
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  403416:	1dfb      	adds	r3, r7, #7
  403418:	9300      	str	r3, [sp, #0]
  40341a:	2300      	movs	r3, #0
  40341c:	2213      	movs	r2, #19
  40341e:	2100      	movs	r1, #0
  403420:	2000      	movs	r0, #0
  403422:	4c19      	ldr	r4, [pc, #100]	; (403488 <sdio_cmd52_set_high_speed+0x78>)
  403424:	47a0      	blx	r4
  403426:	4603      	mov	r3, r0
  403428:	f083 0301 	eor.w	r3, r3, #1
  40342c:	b2db      	uxtb	r3, r3
  40342e:	2b00      	cmp	r3, #0
  403430:	d001      	beq.n	403436 <sdio_cmd52_set_high_speed+0x26>
		return false;
  403432:	2300      	movs	r3, #0
  403434:	e024      	b.n	403480 <sdio_cmd52_set_high_speed+0x70>
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  403436:	79fb      	ldrb	r3, [r7, #7]
  403438:	f003 0301 	and.w	r3, r3, #1
  40343c:	2b00      	cmp	r3, #0
  40343e:	d101      	bne.n	403444 <sdio_cmd52_set_high_speed+0x34>
		// No supported, it is not a protocol error
		return true;
  403440:	2301      	movs	r3, #1
  403442:	e01d      	b.n	403480 <sdio_cmd52_set_high_speed+0x70>
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
  403444:	2302      	movs	r3, #2
  403446:	71fb      	strb	r3, [r7, #7]
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  403448:	1dfb      	adds	r3, r7, #7
  40344a:	9300      	str	r3, [sp, #0]
  40344c:	2301      	movs	r3, #1
  40344e:	2213      	movs	r2, #19
  403450:	2100      	movs	r1, #0
  403452:	2001      	movs	r0, #1
  403454:	4c0c      	ldr	r4, [pc, #48]	; (403488 <sdio_cmd52_set_high_speed+0x78>)
  403456:	47a0      	blx	r4
  403458:	4603      	mov	r3, r0
  40345a:	f083 0301 	eor.w	r3, r3, #1
  40345e:	b2db      	uxtb	r3, r3
  403460:	2b00      	cmp	r3, #0
  403462:	d001      	beq.n	403468 <sdio_cmd52_set_high_speed+0x58>
			1, &u8_value)) {
		return false;
  403464:	2300      	movs	r3, #0
  403466:	e00b      	b.n	403480 <sdio_cmd52_set_high_speed+0x70>
	}
	sd_mmc_card->high_speed = 1;
  403468:	4b08      	ldr	r3, [pc, #32]	; (40348c <sdio_cmd52_set_high_speed+0x7c>)
  40346a:	681b      	ldr	r3, [r3, #0]
  40346c:	2201      	movs	r2, #1
  40346e:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  403470:	4b06      	ldr	r3, [pc, #24]	; (40348c <sdio_cmd52_set_high_speed+0x7c>)
  403472:	681b      	ldr	r3, [r3, #0]
  403474:	4a05      	ldr	r2, [pc, #20]	; (40348c <sdio_cmd52_set_high_speed+0x7c>)
  403476:	6812      	ldr	r2, [r2, #0]
  403478:	6812      	ldr	r2, [r2, #0]
  40347a:	0052      	lsls	r2, r2, #1
  40347c:	601a      	str	r2, [r3, #0]
	return true;
  40347e:	2301      	movs	r3, #1
}
  403480:	4618      	mov	r0, r3
  403482:	370c      	adds	r7, #12
  403484:	46bd      	mov	sp, r7
  403486:	bd90      	pop	{r4, r7, pc}
  403488:	00403a25 	.word	0x00403a25
  40348c:	2000abc8 	.word	0x2000abc8

00403490 <sd_cm6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
  403490:	b590      	push	{r4, r7, lr}
  403492:	b093      	sub	sp, #76	; 0x4c
  403494:	af02      	add	r7, sp, #8
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  403496:	463b      	mov	r3, r7
  403498:	2240      	movs	r2, #64	; 0x40
  40349a:	2100      	movs	r1, #0
  40349c:	4618      	mov	r0, r3
  40349e:	4b2f      	ldr	r3, [pc, #188]	; (40355c <sd_cm6_set_high_speed+0xcc>)
  4034a0:	4798      	blx	r3

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  4034a2:	2301      	movs	r3, #1
  4034a4:	9300      	str	r3, [sp, #0]
  4034a6:	2301      	movs	r3, #1
  4034a8:	2240      	movs	r2, #64	; 0x40
  4034aa:	492d      	ldr	r1, [pc, #180]	; (403560 <sd_cm6_set_high_speed+0xd0>)
  4034ac:	482d      	ldr	r0, [pc, #180]	; (403564 <sd_cm6_set_high_speed+0xd4>)
  4034ae:	4c2e      	ldr	r4, [pc, #184]	; (403568 <sd_cm6_set_high_speed+0xd8>)
  4034b0:	47a0      	blx	r4
  4034b2:	4603      	mov	r3, r0
  4034b4:	f083 0301 	eor.w	r3, r3, #1
  4034b8:	b2db      	uxtb	r3, r3
  4034ba:	2b00      	cmp	r3, #0
  4034bc:	d001      	beq.n	4034c2 <sd_cm6_set_high_speed+0x32>
			| SD_CMD6_GRP4_NO_INFLUENCE
			| SD_CMD6_GRP3_NO_INFLUENCE
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
  4034be:	2300      	movs	r3, #0
  4034c0:	e047      	b.n	403552 <sd_cm6_set_high_speed+0xc2>
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  4034c2:	463b      	mov	r3, r7
  4034c4:	2101      	movs	r1, #1
  4034c6:	4618      	mov	r0, r3
  4034c8:	4b28      	ldr	r3, [pc, #160]	; (40356c <sd_cm6_set_high_speed+0xdc>)
  4034ca:	4798      	blx	r3
  4034cc:	4603      	mov	r3, r0
  4034ce:	f083 0301 	eor.w	r3, r3, #1
  4034d2:	b2db      	uxtb	r3, r3
  4034d4:	2b00      	cmp	r3, #0
  4034d6:	d001      	beq.n	4034dc <sd_cm6_set_high_speed+0x4c>
		return false;
  4034d8:	2300      	movs	r3, #0
  4034da:	e03a      	b.n	403552 <sd_cm6_set_high_speed+0xc2>
	}
	if (!driver_wait_end_of_read_blocks()) {
  4034dc:	4b24      	ldr	r3, [pc, #144]	; (403570 <sd_cm6_set_high_speed+0xe0>)
  4034de:	4798      	blx	r3
  4034e0:	4603      	mov	r3, r0
  4034e2:	f083 0301 	eor.w	r3, r3, #1
  4034e6:	b2db      	uxtb	r3, r3
  4034e8:	2b00      	cmp	r3, #0
  4034ea:	d001      	beq.n	4034f0 <sd_cm6_set_high_speed+0x60>
		return false;
  4034ec:	2300      	movs	r3, #0
  4034ee:	e030      	b.n	403552 <sd_cm6_set_high_speed+0xc2>
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4034f0:	4b20      	ldr	r3, [pc, #128]	; (403574 <sd_cm6_set_high_speed+0xe4>)
  4034f2:	4798      	blx	r3
  4034f4:	4603      	mov	r3, r0
  4034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4034fa:	2b00      	cmp	r3, #0
  4034fc:	d001      	beq.n	403502 <sd_cm6_set_high_speed+0x72>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  4034fe:	2300      	movs	r3, #0
  403500:	e027      	b.n	403552 <sd_cm6_set_high_speed+0xc2>
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  403502:	4638      	mov	r0, r7
  403504:	2304      	movs	r3, #4
  403506:	f44f 72bc 	mov.w	r2, #376	; 0x178
  40350a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40350e:	4c1a      	ldr	r4, [pc, #104]	; (403578 <sd_cm6_set_high_speed+0xe8>)
  403510:	47a0      	blx	r4
  403512:	4603      	mov	r3, r0
  403514:	2b0f      	cmp	r3, #15
  403516:	d101      	bne.n	40351c <sd_cm6_set_high_speed+0x8c>
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
  403518:	2301      	movs	r3, #1
  40351a:	e01a      	b.n	403552 <sd_cm6_set_high_speed+0xc2>
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  40351c:	4638      	mov	r0, r7
  40351e:	2310      	movs	r3, #16
  403520:	f44f 7288 	mov.w	r2, #272	; 0x110
  403524:	f44f 7100 	mov.w	r1, #512	; 0x200
  403528:	4c13      	ldr	r4, [pc, #76]	; (403578 <sd_cm6_set_high_speed+0xe8>)
  40352a:	47a0      	blx	r4
  40352c:	4603      	mov	r3, r0
  40352e:	2b00      	cmp	r3, #0
  403530:	d001      	beq.n	403536 <sd_cm6_set_high_speed+0xa6>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
  403532:	2300      	movs	r3, #0
  403534:	e00d      	b.n	403552 <sd_cm6_set_high_speed+0xc2>
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  403536:	4b11      	ldr	r3, [pc, #68]	; (40357c <sd_cm6_set_high_speed+0xec>)
  403538:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  40353a:	4b11      	ldr	r3, [pc, #68]	; (403580 <sd_cm6_set_high_speed+0xf0>)
  40353c:	681b      	ldr	r3, [r3, #0]
  40353e:	2201      	movs	r2, #1
  403540:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  403542:	4b0f      	ldr	r3, [pc, #60]	; (403580 <sd_cm6_set_high_speed+0xf0>)
  403544:	681b      	ldr	r3, [r3, #0]
  403546:	4a0e      	ldr	r2, [pc, #56]	; (403580 <sd_cm6_set_high_speed+0xf0>)
  403548:	6812      	ldr	r2, [r2, #0]
  40354a:	6812      	ldr	r2, [r2, #0]
  40354c:	0052      	lsls	r2, r2, #1
  40354e:	601a      	str	r2, [r3, #0]
	return true;
  403550:	2301      	movs	r3, #1
}
  403552:	4618      	mov	r0, r3
  403554:	3744      	adds	r7, #68	; 0x44
  403556:	46bd      	mov	sp, r7
  403558:	bd90      	pop	{r4, r7, pc}
  40355a:	bf00      	nop
  40355c:	00406945 	.word	0x00406945
  403560:	80ffff01 	.word	0x80ffff01
  403564:	00081106 	.word	0x00081106
  403568:	00404c19 	.word	0x00404c19
  40356c:	00404ddd 	.word	0x00404ddd
  403570:	00404e7d 	.word	0x00404e7d
  403574:	00404b91 	.word	0x00404b91
  403578:	00402f75 	.word	0x00402f75
  40357c:	00404b11 	.word	0x00404b11
  403580:	2000abc8 	.word	0x2000abc8

00403584 <mmc_cmd6_set_bus_width>:
 * \param bus_width   Bus width to set
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
  403584:	b580      	push	{r7, lr}
  403586:	b084      	sub	sp, #16
  403588:	af00      	add	r7, sp, #0
  40358a:	4603      	mov	r3, r0
  40358c:	71fb      	strb	r3, [r7, #7]
	uint32_t arg;

	switch (bus_width) {
  40358e:	79fb      	ldrb	r3, [r7, #7]
  403590:	2b04      	cmp	r3, #4
  403592:	d004      	beq.n	40359e <mmc_cmd6_set_bus_width+0x1a>
  403594:	2b08      	cmp	r3, #8
  403596:	d105      	bne.n	4035a4 <mmc_cmd6_set_bus_width+0x20>
	case 8:
		arg = MMC_CMD6_ACCESS_SET_BITS
  403598:	4b13      	ldr	r3, [pc, #76]	; (4035e8 <mmc_cmd6_set_bus_width+0x64>)
  40359a:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
  40359c:	e005      	b.n	4035aa <mmc_cmd6_set_bus_width+0x26>
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40359e:	4b13      	ldr	r3, [pc, #76]	; (4035ec <mmc_cmd6_set_bus_width+0x68>)
  4035a0:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
  4035a2:	e002      	b.n	4035aa <mmc_cmd6_set_bus_width+0x26>
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  4035a4:	4b12      	ldr	r3, [pc, #72]	; (4035f0 <mmc_cmd6_set_bus_width+0x6c>)
  4035a6:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
  4035a8:	bf00      	nop
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4035aa:	68f9      	ldr	r1, [r7, #12]
  4035ac:	f243 1006 	movw	r0, #12550	; 0x3106
  4035b0:	4b10      	ldr	r3, [pc, #64]	; (4035f4 <mmc_cmd6_set_bus_width+0x70>)
  4035b2:	4798      	blx	r3
  4035b4:	4603      	mov	r3, r0
  4035b6:	f083 0301 	eor.w	r3, r3, #1
  4035ba:	b2db      	uxtb	r3, r3
  4035bc:	2b00      	cmp	r3, #0
  4035be:	d001      	beq.n	4035c4 <mmc_cmd6_set_bus_width+0x40>
		return false;
  4035c0:	2300      	movs	r3, #0
  4035c2:	e00d      	b.n	4035e0 <mmc_cmd6_set_bus_width+0x5c>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4035c4:	4b0c      	ldr	r3, [pc, #48]	; (4035f8 <mmc_cmd6_set_bus_width+0x74>)
  4035c6:	4798      	blx	r3
  4035c8:	4603      	mov	r3, r0
  4035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4035ce:	2b00      	cmp	r3, #0
  4035d0:	d001      	beq.n	4035d6 <mmc_cmd6_set_bus_width+0x52>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  4035d2:	2300      	movs	r3, #0
  4035d4:	e004      	b.n	4035e0 <mmc_cmd6_set_bus_width+0x5c>
	}
	sd_mmc_card->bus_width = bus_width;
  4035d6:	4b09      	ldr	r3, [pc, #36]	; (4035fc <mmc_cmd6_set_bus_width+0x78>)
  4035d8:	681b      	ldr	r3, [r3, #0]
  4035da:	79fa      	ldrb	r2, [r7, #7]
  4035dc:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  4035de:	2301      	movs	r3, #1
}
  4035e0:	4618      	mov	r0, r3
  4035e2:	3710      	adds	r7, #16
  4035e4:	46bd      	mov	sp, r7
  4035e6:	bd80      	pop	{r7, pc}
  4035e8:	01b70200 	.word	0x01b70200
  4035ec:	01b70100 	.word	0x01b70100
  4035f0:	01b70000 	.word	0x01b70000
  4035f4:	00404b4d 	.word	0x00404b4d
  4035f8:	00404b91 	.word	0x00404b91
  4035fc:	2000abc8 	.word	0x2000abc8

00403600 <mmc_cmd6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
  403600:	b580      	push	{r7, lr}
  403602:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  403604:	4910      	ldr	r1, [pc, #64]	; (403648 <mmc_cmd6_set_high_speed+0x48>)
  403606:	f243 1006 	movw	r0, #12550	; 0x3106
  40360a:	4b10      	ldr	r3, [pc, #64]	; (40364c <mmc_cmd6_set_high_speed+0x4c>)
  40360c:	4798      	blx	r3
  40360e:	4603      	mov	r3, r0
  403610:	f083 0301 	eor.w	r3, r3, #1
  403614:	b2db      	uxtb	r3, r3
  403616:	2b00      	cmp	r3, #0
  403618:	d001      	beq.n	40361e <mmc_cmd6_set_high_speed+0x1e>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
  40361a:	2300      	movs	r3, #0
  40361c:	e011      	b.n	403642 <mmc_cmd6_set_high_speed+0x42>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40361e:	4b0c      	ldr	r3, [pc, #48]	; (403650 <mmc_cmd6_set_high_speed+0x50>)
  403620:	4798      	blx	r3
  403622:	4603      	mov	r3, r0
  403624:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403628:	2b00      	cmp	r3, #0
  40362a:	d001      	beq.n	403630 <mmc_cmd6_set_high_speed+0x30>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  40362c:	2300      	movs	r3, #0
  40362e:	e008      	b.n	403642 <mmc_cmd6_set_high_speed+0x42>
	}
	sd_mmc_card->high_speed = 1;
  403630:	4b08      	ldr	r3, [pc, #32]	; (403654 <mmc_cmd6_set_high_speed+0x54>)
  403632:	681b      	ldr	r3, [r3, #0]
  403634:	2201      	movs	r2, #1
  403636:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  403638:	4b06      	ldr	r3, [pc, #24]	; (403654 <mmc_cmd6_set_high_speed+0x54>)
  40363a:	681b      	ldr	r3, [r3, #0]
  40363c:	4a06      	ldr	r2, [pc, #24]	; (403658 <mmc_cmd6_set_high_speed+0x58>)
  40363e:	601a      	str	r2, [r3, #0]
	return true;
  403640:	2301      	movs	r3, #1
}
  403642:	4618      	mov	r0, r3
  403644:	bd80      	pop	{r7, pc}
  403646:	bf00      	nop
  403648:	03b90100 	.word	0x03b90100
  40364c:	00404b4d 	.word	0x00404b4d
  403650:	00404b91 	.word	0x00404b91
  403654:	2000abc8 	.word	0x2000abc8
  403658:	03197500 	.word	0x03197500

0040365c <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
  40365c:	b580      	push	{r7, lr}
  40365e:	b084      	sub	sp, #16
  403660:	af00      	add	r7, sp, #0
  403662:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
  403664:	687b      	ldr	r3, [r7, #4]
  403666:	2200      	movs	r2, #0
  403668:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  40366a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  40366e:	f245 5008 	movw	r0, #21768	; 0x5508
  403672:	4b11      	ldr	r3, [pc, #68]	; (4036b8 <sd_cmd8+0x5c>)
  403674:	4798      	blx	r3
  403676:	4603      	mov	r3, r0
  403678:	f083 0301 	eor.w	r3, r3, #1
  40367c:	b2db      	uxtb	r3, r3
  40367e:	2b00      	cmp	r3, #0
  403680:	d001      	beq.n	403686 <sd_cmd8+0x2a>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
  403682:	2301      	movs	r3, #1
  403684:	e014      	b.n	4036b0 <sd_cmd8+0x54>
	}
	// Check R7 response
	resp = driver_get_response();
  403686:	4b0d      	ldr	r3, [pc, #52]	; (4036bc <sd_cmd8+0x60>)
  403688:	4798      	blx	r3
  40368a:	60f8      	str	r0, [r7, #12]
	if (resp == 0xFFFFFFFF) {
  40368c:	68fb      	ldr	r3, [r7, #12]
  40368e:	f1b3 3fff 	cmp.w	r3, #4294967295
  403692:	d101      	bne.n	403698 <sd_cmd8+0x3c>
		// No compliance R7 value
		return true; // It is not a V2
  403694:	2301      	movs	r3, #1
  403696:	e00b      	b.n	4036b0 <sd_cmd8+0x54>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  403698:	68fb      	ldr	r3, [r7, #12]
  40369a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40369e:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
  4036a2:	d001      	beq.n	4036a8 <sd_cmd8+0x4c>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
  4036a4:	2300      	movs	r3, #0
  4036a6:	e003      	b.n	4036b0 <sd_cmd8+0x54>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  4036a8:	687b      	ldr	r3, [r7, #4]
  4036aa:	2201      	movs	r2, #1
  4036ac:	701a      	strb	r2, [r3, #0]
	return true;
  4036ae:	2301      	movs	r3, #1
}
  4036b0:	4618      	mov	r0, r3
  4036b2:	3710      	adds	r7, #16
  4036b4:	46bd      	mov	sp, r7
  4036b6:	bd80      	pop	{r7, pc}
  4036b8:	00404b4d 	.word	0x00404b4d
  4036bc:	00404b91 	.word	0x00404b91

004036c0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
  4036c0:	b590      	push	{r4, r7, lr}
  4036c2:	b089      	sub	sp, #36	; 0x24
  4036c4:	af02      	add	r7, sp, #8
  4036c6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  4036c8:	2300      	movs	r3, #0
  4036ca:	9300      	str	r3, [sp, #0]
  4036cc:	2301      	movs	r3, #1
  4036ce:	f44f 7200 	mov.w	r2, #512	; 0x200
  4036d2:	2100      	movs	r1, #0
  4036d4:	4833      	ldr	r0, [pc, #204]	; (4037a4 <mmc_cmd8+0xe4>)
  4036d6:	4c34      	ldr	r4, [pc, #208]	; (4037a8 <mmc_cmd8+0xe8>)
  4036d8:	47a0      	blx	r4
  4036da:	4603      	mov	r3, r0
  4036dc:	f083 0301 	eor.w	r3, r3, #1
  4036e0:	b2db      	uxtb	r3, r3
  4036e2:	2b00      	cmp	r3, #0
  4036e4:	d001      	beq.n	4036ea <mmc_cmd8+0x2a>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
  4036e6:	2300      	movs	r3, #0
  4036e8:	e058      	b.n	40379c <mmc_cmd8+0xdc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4036ea:	2300      	movs	r3, #0
  4036ec:	82fb      	strh	r3, [r7, #22]
  4036ee:	e00f      	b.n	403710 <mmc_cmd8+0x50>
		if (!driver_read_word(&ext_csd)) {
  4036f0:	f107 0310 	add.w	r3, r7, #16
  4036f4:	4618      	mov	r0, r3
  4036f6:	4b2d      	ldr	r3, [pc, #180]	; (4037ac <mmc_cmd8+0xec>)
  4036f8:	4798      	blx	r3
  4036fa:	4603      	mov	r3, r0
  4036fc:	f083 0301 	eor.w	r3, r3, #1
  403700:	b2db      	uxtb	r3, r3
  403702:	2b00      	cmp	r3, #0
  403704:	d001      	beq.n	40370a <mmc_cmd8+0x4a>
			return false;
  403706:	2300      	movs	r3, #0
  403708:	e048      	b.n	40379c <mmc_cmd8+0xdc>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  40370a:	8afb      	ldrh	r3, [r7, #22]
  40370c:	3301      	adds	r3, #1
  40370e:	82fb      	strh	r3, [r7, #22]
  403710:	8afb      	ldrh	r3, [r7, #22]
  403712:	2b31      	cmp	r3, #49	; 0x31
  403714:	d9ec      	bls.n	4036f0 <mmc_cmd8+0x30>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
  403716:	693b      	ldr	r3, [r7, #16]
  403718:	b2db      	uxtb	r3, r3
  40371a:	f003 0302 	and.w	r3, r3, #2
  40371e:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  403720:	687b      	ldr	r3, [r7, #4]
  403722:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  403724:	4b22      	ldr	r3, [pc, #136]	; (4037b0 <mmc_cmd8+0xf0>)
  403726:	681b      	ldr	r3, [r3, #0]
  403728:	f103 000e 	add.w	r0, r3, #14
  40372c:	230c      	movs	r3, #12
  40372e:	223e      	movs	r2, #62	; 0x3e
  403730:	2180      	movs	r1, #128	; 0x80
  403732:	4c20      	ldr	r4, [pc, #128]	; (4037b4 <mmc_cmd8+0xf4>)
  403734:	47a0      	blx	r4
  403736:	4602      	mov	r2, r0
  403738:	f640 73ff 	movw	r3, #4095	; 0xfff
  40373c:	429a      	cmp	r2, r3
  40373e:	d129      	bne.n	403794 <mmc_cmd8+0xd4>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  403740:	e00f      	b.n	403762 <mmc_cmd8+0xa2>
			if (!driver_read_word(&sec_count)) {
  403742:	f107 030c 	add.w	r3, r7, #12
  403746:	4618      	mov	r0, r3
  403748:	4b18      	ldr	r3, [pc, #96]	; (4037ac <mmc_cmd8+0xec>)
  40374a:	4798      	blx	r3
  40374c:	4603      	mov	r3, r0
  40374e:	f083 0301 	eor.w	r3, r3, #1
  403752:	b2db      	uxtb	r3, r3
  403754:	2b00      	cmp	r3, #0
  403756:	d001      	beq.n	40375c <mmc_cmd8+0x9c>
				return false;
  403758:	2300      	movs	r3, #0
  40375a:	e01f      	b.n	40379c <mmc_cmd8+0xdc>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  40375c:	8afb      	ldrh	r3, [r7, #22]
  40375e:	3301      	adds	r3, #1
  403760:	82fb      	strh	r3, [r7, #22]
  403762:	8afb      	ldrh	r3, [r7, #22]
  403764:	2b35      	cmp	r3, #53	; 0x35
  403766:	d9ec      	bls.n	403742 <mmc_cmd8+0x82>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  403768:	4b11      	ldr	r3, [pc, #68]	; (4037b0 <mmc_cmd8+0xf0>)
  40376a:	681b      	ldr	r3, [r3, #0]
  40376c:	68fa      	ldr	r2, [r7, #12]
  40376e:	0852      	lsrs	r2, r2, #1
  403770:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  403772:	e00f      	b.n	403794 <mmc_cmd8+0xd4>
		if (!driver_read_word(&sec_count)) {
  403774:	f107 030c 	add.w	r3, r7, #12
  403778:	4618      	mov	r0, r3
  40377a:	4b0c      	ldr	r3, [pc, #48]	; (4037ac <mmc_cmd8+0xec>)
  40377c:	4798      	blx	r3
  40377e:	4603      	mov	r3, r0
  403780:	f083 0301 	eor.w	r3, r3, #1
  403784:	b2db      	uxtb	r3, r3
  403786:	2b00      	cmp	r3, #0
  403788:	d001      	beq.n	40378e <mmc_cmd8+0xce>
			return false;
  40378a:	2300      	movs	r3, #0
  40378c:	e006      	b.n	40379c <mmc_cmd8+0xdc>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40378e:	8afb      	ldrh	r3, [r7, #22]
  403790:	3301      	adds	r3, #1
  403792:	82fb      	strh	r3, [r7, #22]
  403794:	8afb      	ldrh	r3, [r7, #22]
  403796:	2b7f      	cmp	r3, #127	; 0x7f
  403798:	d9ec      	bls.n	403774 <mmc_cmd8+0xb4>
		}
	}
	return true;
  40379a:	2301      	movs	r3, #1
}
  40379c:	4618      	mov	r0, r3
  40379e:	371c      	adds	r7, #28
  4037a0:	46bd      	mov	sp, r7
  4037a2:	bd90      	pop	{r4, r7, pc}
  4037a4:	00081108 	.word	0x00081108
  4037a8:	00404c19 	.word	0x00404c19
  4037ac:	00404d41 	.word	0x00404d41
  4037b0:	2000abc8 	.word	0x2000abc8
  4037b4:	00402f75 	.word	0x00402f75

004037b8 <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  4037b8:	b580      	push	{r7, lr}
  4037ba:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  4037bc:	4b0c      	ldr	r3, [pc, #48]	; (4037f0 <sd_mmc_cmd9_mci+0x38>)
  4037be:	681b      	ldr	r3, [r3, #0]
  4037c0:	891b      	ldrh	r3, [r3, #8]
  4037c2:	041b      	lsls	r3, r3, #16
  4037c4:	4619      	mov	r1, r3
  4037c6:	f641 3009 	movw	r0, #6921	; 0x1b09
  4037ca:	4b0a      	ldr	r3, [pc, #40]	; (4037f4 <sd_mmc_cmd9_mci+0x3c>)
  4037cc:	4798      	blx	r3
  4037ce:	4603      	mov	r3, r0
  4037d0:	f083 0301 	eor.w	r3, r3, #1
  4037d4:	b2db      	uxtb	r3, r3
  4037d6:	2b00      	cmp	r3, #0
  4037d8:	d001      	beq.n	4037de <sd_mmc_cmd9_mci+0x26>
		return false;
  4037da:	2300      	movs	r3, #0
  4037dc:	e006      	b.n	4037ec <sd_mmc_cmd9_mci+0x34>
	}
	driver_get_response_128(sd_mmc_card->csd);
  4037de:	4b04      	ldr	r3, [pc, #16]	; (4037f0 <sd_mmc_cmd9_mci+0x38>)
  4037e0:	681b      	ldr	r3, [r3, #0]
  4037e2:	330e      	adds	r3, #14
  4037e4:	4618      	mov	r0, r3
  4037e6:	4b04      	ldr	r3, [pc, #16]	; (4037f8 <sd_mmc_cmd9_mci+0x40>)
  4037e8:	4798      	blx	r3
	return true;
  4037ea:	2301      	movs	r3, #1
}
  4037ec:	4618      	mov	r0, r3
  4037ee:	bd80      	pop	{r7, pc}
  4037f0:	2000abc8 	.word	0x2000abc8
  4037f4:	00404b4d 	.word	0x00404b4d
  4037f8:	00404ba9 	.word	0x00404ba9

004037fc <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
  4037fc:	b5b0      	push	{r4, r5, r7, lr}
  4037fe:	b084      	sub	sp, #16
  403800:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  403802:	4b48      	ldr	r3, [pc, #288]	; (403924 <mmc_decode_csd+0x128>)
  403804:	681b      	ldr	r3, [r3, #0]
  403806:	f103 000e 	add.w	r0, r3, #14
  40380a:	2304      	movs	r3, #4
  40380c:	227a      	movs	r2, #122	; 0x7a
  40380e:	2180      	movs	r1, #128	; 0x80
  403810:	4c45      	ldr	r4, [pc, #276]	; (403928 <mmc_decode_csd+0x12c>)
  403812:	47a0      	blx	r4
  403814:	4603      	mov	r3, r0
  403816:	3b01      	subs	r3, #1
  403818:	2b03      	cmp	r3, #3
  40381a:	d80b      	bhi.n	403834 <mmc_decode_csd+0x38>
  40381c:	a201      	add	r2, pc, #4	; (adr r2, 403824 <mmc_decode_csd+0x28>)
  40381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403822:	bf00      	nop
  403824:	0040383f 	.word	0x0040383f
  403828:	00403849 	.word	0x00403849
  40382c:	00403853 	.word	0x00403853
  403830:	0040385d 	.word	0x0040385d
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  403834:	4b3b      	ldr	r3, [pc, #236]	; (403924 <mmc_decode_csd+0x128>)
  403836:	681b      	ldr	r3, [r3, #0]
  403838:	2212      	movs	r2, #18
  40383a:	731a      	strb	r2, [r3, #12]
		break;
  40383c:	e013      	b.n	403866 <mmc_decode_csd+0x6a>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  40383e:	4b39      	ldr	r3, [pc, #228]	; (403924 <mmc_decode_csd+0x128>)
  403840:	681b      	ldr	r3, [r3, #0]
  403842:	2214      	movs	r2, #20
  403844:	731a      	strb	r2, [r3, #12]
		break;
  403846:	e00e      	b.n	403866 <mmc_decode_csd+0x6a>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  403848:	4b36      	ldr	r3, [pc, #216]	; (403924 <mmc_decode_csd+0x128>)
  40384a:	681b      	ldr	r3, [r3, #0]
  40384c:	2222      	movs	r2, #34	; 0x22
  40384e:	731a      	strb	r2, [r3, #12]
		break;
  403850:	e009      	b.n	403866 <mmc_decode_csd+0x6a>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  403852:	4b34      	ldr	r3, [pc, #208]	; (403924 <mmc_decode_csd+0x128>)
  403854:	681b      	ldr	r3, [r3, #0]
  403856:	2230      	movs	r2, #48	; 0x30
  403858:	731a      	strb	r2, [r3, #12]
		break;
  40385a:	e004      	b.n	403866 <mmc_decode_csd+0x6a>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  40385c:	4b31      	ldr	r3, [pc, #196]	; (403924 <mmc_decode_csd+0x128>)
  40385e:	681b      	ldr	r3, [r3, #0]
  403860:	2240      	movs	r2, #64	; 0x40
  403862:	731a      	strb	r2, [r3, #12]
		break;
  403864:	bf00      	nop
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  403866:	4b2f      	ldr	r3, [pc, #188]	; (403924 <mmc_decode_csd+0x128>)
  403868:	681b      	ldr	r3, [r3, #0]
  40386a:	f103 000e 	add.w	r0, r3, #14
  40386e:	2308      	movs	r3, #8
  403870:	2260      	movs	r2, #96	; 0x60
  403872:	2180      	movs	r1, #128	; 0x80
  403874:	4c2c      	ldr	r4, [pc, #176]	; (403928 <mmc_decode_csd+0x12c>)
  403876:	47a0      	blx	r4
  403878:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40387a:	68fb      	ldr	r3, [r7, #12]
  40387c:	f003 0307 	and.w	r3, r3, #7
  403880:	4a2a      	ldr	r2, [pc, #168]	; (40392c <mmc_decode_csd+0x130>)
  403882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403886:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  403888:	68fb      	ldr	r3, [r7, #12]
  40388a:	08db      	lsrs	r3, r3, #3
  40388c:	f003 030f 	and.w	r3, r3, #15
  403890:	4a27      	ldr	r2, [pc, #156]	; (403930 <mmc_decode_csd+0x134>)
  403892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403896:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  403898:	4b22      	ldr	r3, [pc, #136]	; (403924 <mmc_decode_csd+0x128>)
  40389a:	681b      	ldr	r3, [r3, #0]
  40389c:	68ba      	ldr	r2, [r7, #8]
  40389e:	6879      	ldr	r1, [r7, #4]
  4038a0:	fb01 f202 	mul.w	r2, r1, r2
  4038a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4038a8:	fb01 f202 	mul.w	r2, r1, r2
  4038ac:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4038ae:	4b1d      	ldr	r3, [pc, #116]	; (403924 <mmc_decode_csd+0x128>)
  4038b0:	681b      	ldr	r3, [r3, #0]
  4038b2:	f103 000e 	add.w	r0, r3, #14
  4038b6:	230c      	movs	r3, #12
  4038b8:	223e      	movs	r2, #62	; 0x3e
  4038ba:	2180      	movs	r1, #128	; 0x80
  4038bc:	4c1a      	ldr	r4, [pc, #104]	; (403928 <mmc_decode_csd+0x12c>)
  4038be:	47a0      	blx	r4
  4038c0:	4602      	mov	r2, r0
  4038c2:	f640 73ff 	movw	r3, #4095	; 0xfff
  4038c6:	429a      	cmp	r2, r3
  4038c8:	d028      	beq.n	40391c <mmc_decode_csd+0x120>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  4038ca:	4b16      	ldr	r3, [pc, #88]	; (403924 <mmc_decode_csd+0x128>)
  4038cc:	681b      	ldr	r3, [r3, #0]
  4038ce:	f103 000e 	add.w	r0, r3, #14
  4038d2:	230c      	movs	r3, #12
  4038d4:	223e      	movs	r2, #62	; 0x3e
  4038d6:	2180      	movs	r1, #128	; 0x80
  4038d8:	4c13      	ldr	r4, [pc, #76]	; (403928 <mmc_decode_csd+0x12c>)
  4038da:	47a0      	blx	r4
  4038dc:	4603      	mov	r3, r0
  4038de:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  4038e0:	4b10      	ldr	r3, [pc, #64]	; (403924 <mmc_decode_csd+0x128>)
  4038e2:	681b      	ldr	r3, [r3, #0]
  4038e4:	f103 000e 	add.w	r0, r3, #14
  4038e8:	2303      	movs	r3, #3
  4038ea:	222f      	movs	r2, #47	; 0x2f
  4038ec:	2180      	movs	r1, #128	; 0x80
  4038ee:	4d0e      	ldr	r5, [pc, #56]	; (403928 <mmc_decode_csd+0x12c>)
  4038f0:	47a8      	blx	r5
  4038f2:	4603      	mov	r3, r0
  4038f4:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  4038f6:	fa04 f303 	lsl.w	r3, r4, r3
  4038fa:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
  4038fc:	4b09      	ldr	r3, [pc, #36]	; (403924 <mmc_decode_csd+0x128>)
  4038fe:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  403900:	4b08      	ldr	r3, [pc, #32]	; (403924 <mmc_decode_csd+0x128>)
  403902:	681b      	ldr	r3, [r3, #0]
  403904:	f103 000e 	add.w	r0, r3, #14
  403908:	2304      	movs	r3, #4
  40390a:	2250      	movs	r2, #80	; 0x50
  40390c:	2180      	movs	r1, #128	; 0x80
  40390e:	4d06      	ldr	r5, [pc, #24]	; (403928 <mmc_decode_csd+0x12c>)
  403910:	47a8      	blx	r5
  403912:	4602      	mov	r2, r0
		sd_mmc_card->capacity = blocknr *
  403914:	683b      	ldr	r3, [r7, #0]
  403916:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  403918:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  40391a:	6063      	str	r3, [r4, #4]
	}
}
  40391c:	bf00      	nop
  40391e:	3710      	adds	r7, #16
  403920:	46bd      	mov	sp, r7
  403922:	bdb0      	pop	{r4, r5, r7, pc}
  403924:	2000abc8 	.word	0x2000abc8
  403928:	00402f75 	.word	0x00402f75
  40392c:	0040b56c 	.word	0x0040b56c
  403930:	0040b5c8 	.word	0x0040b5c8

00403934 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
  403934:	b5b0      	push	{r4, r5, r7, lr}
  403936:	b084      	sub	sp, #16
  403938:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  40393a:	4b36      	ldr	r3, [pc, #216]	; (403a14 <sd_decode_csd+0xe0>)
  40393c:	681b      	ldr	r3, [r3, #0]
  40393e:	f103 000e 	add.w	r0, r3, #14
  403942:	2308      	movs	r3, #8
  403944:	2260      	movs	r2, #96	; 0x60
  403946:	2180      	movs	r1, #128	; 0x80
  403948:	4c33      	ldr	r4, [pc, #204]	; (403a18 <sd_decode_csd+0xe4>)
  40394a:	47a0      	blx	r4
  40394c:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40394e:	68fb      	ldr	r3, [r7, #12]
  403950:	f003 0307 	and.w	r3, r3, #7
  403954:	4a31      	ldr	r2, [pc, #196]	; (403a1c <sd_decode_csd+0xe8>)
  403956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40395a:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40395c:	68fb      	ldr	r3, [r7, #12]
  40395e:	08db      	lsrs	r3, r3, #3
  403960:	f003 030f 	and.w	r3, r3, #15
  403964:	4a2e      	ldr	r2, [pc, #184]	; (403a20 <sd_decode_csd+0xec>)
  403966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40396a:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  40396c:	4b29      	ldr	r3, [pc, #164]	; (403a14 <sd_decode_csd+0xe0>)
  40396e:	681b      	ldr	r3, [r3, #0]
  403970:	68ba      	ldr	r2, [r7, #8]
  403972:	6879      	ldr	r1, [r7, #4]
  403974:	fb01 f202 	mul.w	r2, r1, r2
  403978:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40397c:	fb01 f202 	mul.w	r2, r1, r2
  403980:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  403982:	4b24      	ldr	r3, [pc, #144]	; (403a14 <sd_decode_csd+0xe0>)
  403984:	681b      	ldr	r3, [r3, #0]
  403986:	f103 000e 	add.w	r0, r3, #14
  40398a:	2302      	movs	r3, #2
  40398c:	227e      	movs	r2, #126	; 0x7e
  40398e:	2180      	movs	r1, #128	; 0x80
  403990:	4c21      	ldr	r4, [pc, #132]	; (403a18 <sd_decode_csd+0xe4>)
  403992:	47a0      	blx	r4
  403994:	4603      	mov	r3, r0
  403996:	2b00      	cmp	r3, #0
  403998:	d00f      	beq.n	4039ba <sd_decode_csd+0x86>
		sd_mmc_card->capacity =
  40399a:	4b1e      	ldr	r3, [pc, #120]	; (403a14 <sd_decode_csd+0xe0>)
  40399c:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
  40399e:	4b1d      	ldr	r3, [pc, #116]	; (403a14 <sd_decode_csd+0xe0>)
  4039a0:	681b      	ldr	r3, [r3, #0]
  4039a2:	f103 000e 	add.w	r0, r3, #14
  4039a6:	2316      	movs	r3, #22
  4039a8:	2230      	movs	r2, #48	; 0x30
  4039aa:	2180      	movs	r1, #128	; 0x80
  4039ac:	4d1a      	ldr	r5, [pc, #104]	; (403a18 <sd_decode_csd+0xe4>)
  4039ae:	47a8      	blx	r5
  4039b0:	4603      	mov	r3, r0
				* 512;
  4039b2:	3301      	adds	r3, #1
  4039b4:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
  4039b6:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
  4039b8:	e028      	b.n	403a0c <sd_decode_csd+0xd8>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4039ba:	4b16      	ldr	r3, [pc, #88]	; (403a14 <sd_decode_csd+0xe0>)
  4039bc:	681b      	ldr	r3, [r3, #0]
  4039be:	f103 000e 	add.w	r0, r3, #14
  4039c2:	230c      	movs	r3, #12
  4039c4:	223e      	movs	r2, #62	; 0x3e
  4039c6:	2180      	movs	r1, #128	; 0x80
  4039c8:	4c13      	ldr	r4, [pc, #76]	; (403a18 <sd_decode_csd+0xe4>)
  4039ca:	47a0      	blx	r4
  4039cc:	4603      	mov	r3, r0
  4039ce:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  4039d0:	4b10      	ldr	r3, [pc, #64]	; (403a14 <sd_decode_csd+0xe0>)
  4039d2:	681b      	ldr	r3, [r3, #0]
  4039d4:	f103 000e 	add.w	r0, r3, #14
  4039d8:	2303      	movs	r3, #3
  4039da:	222f      	movs	r2, #47	; 0x2f
  4039dc:	2180      	movs	r1, #128	; 0x80
  4039de:	4d0e      	ldr	r5, [pc, #56]	; (403a18 <sd_decode_csd+0xe4>)
  4039e0:	47a8      	blx	r5
  4039e2:	4603      	mov	r3, r0
  4039e4:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4039e6:	fa04 f303 	lsl.w	r3, r4, r3
  4039ea:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
  4039ec:	4b09      	ldr	r3, [pc, #36]	; (403a14 <sd_decode_csd+0xe0>)
  4039ee:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
  4039f0:	4b08      	ldr	r3, [pc, #32]	; (403a14 <sd_decode_csd+0xe0>)
  4039f2:	681b      	ldr	r3, [r3, #0]
  4039f4:	f103 000e 	add.w	r0, r3, #14
  4039f8:	2304      	movs	r3, #4
  4039fa:	2250      	movs	r2, #80	; 0x50
  4039fc:	2180      	movs	r1, #128	; 0x80
  4039fe:	4d06      	ldr	r5, [pc, #24]	; (403a18 <sd_decode_csd+0xe4>)
  403a00:	47a8      	blx	r5
  403a02:	4602      	mov	r2, r0
		sd_mmc_card->capacity = blocknr *
  403a04:	683b      	ldr	r3, [r7, #0]
  403a06:	4093      	lsls	r3, r2
				/ 1024;
  403a08:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  403a0a:	6063      	str	r3, [r4, #4]
}
  403a0c:	bf00      	nop
  403a0e:	3710      	adds	r7, #16
  403a10:	46bd      	mov	sp, r7
  403a12:	bdb0      	pop	{r4, r5, r7, pc}
  403a14:	2000abc8 	.word	0x2000abc8
  403a18:	00402f75 	.word	0x00402f75
  403a1c:	0040b56c 	.word	0x0040b56c
  403a20:	0040b588 	.word	0x0040b588

00403a24 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
  403a24:	b580      	push	{r7, lr}
  403a26:	b082      	sub	sp, #8
  403a28:	af00      	add	r7, sp, #0
  403a2a:	603a      	str	r2, [r7, #0]
  403a2c:	461a      	mov	r2, r3
  403a2e:	4603      	mov	r3, r0
  403a30:	71fb      	strb	r3, [r7, #7]
  403a32:	460b      	mov	r3, r1
  403a34:	71bb      	strb	r3, [r7, #6]
  403a36:	4613      	mov	r3, r2
  403a38:	717b      	strb	r3, [r7, #5]
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  403a3a:	693b      	ldr	r3, [r7, #16]
  403a3c:	781b      	ldrb	r3, [r3, #0]
  403a3e:	461a      	mov	r2, r3
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
  403a40:	79fb      	ldrb	r3, [r7, #7]
  403a42:	07db      	lsls	r3, r3, #31
  403a44:	431a      	orrs	r2, r3
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
  403a46:	79bb      	ldrb	r3, [r7, #6]
  403a48:	071b      	lsls	r3, r3, #28
  403a4a:	431a      	orrs	r2, r3
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
  403a4c:	797b      	ldrb	r3, [r7, #5]
  403a4e:	06db      	lsls	r3, r3, #27
  403a50:	431a      	orrs	r2, r3
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  403a52:	683b      	ldr	r3, [r7, #0]
  403a54:	025b      	lsls	r3, r3, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  403a56:	4313      	orrs	r3, r2
  403a58:	4619      	mov	r1, r3
  403a5a:	f241 3034 	movw	r0, #4916	; 0x1334
  403a5e:	4b0a      	ldr	r3, [pc, #40]	; (403a88 <sdio_cmd52+0x64>)
  403a60:	4798      	blx	r3
  403a62:	4603      	mov	r3, r0
  403a64:	f083 0301 	eor.w	r3, r3, #1
  403a68:	b2db      	uxtb	r3, r3
  403a6a:	2b00      	cmp	r3, #0
  403a6c:	d001      	beq.n	403a72 <sdio_cmd52+0x4e>
		return false;
  403a6e:	2300      	movs	r3, #0
  403a70:	e006      	b.n	403a80 <sdio_cmd52+0x5c>
	}
	*io_data = driver_get_response() & 0xFF;
  403a72:	4b06      	ldr	r3, [pc, #24]	; (403a8c <sdio_cmd52+0x68>)
  403a74:	4798      	blx	r3
  403a76:	4603      	mov	r3, r0
  403a78:	b2da      	uxtb	r2, r3
  403a7a:	693b      	ldr	r3, [r7, #16]
  403a7c:	701a      	strb	r2, [r3, #0]
	return true;
  403a7e:	2301      	movs	r3, #1
}
  403a80:	4618      	mov	r0, r3
  403a82:	3708      	adds	r7, #8
  403a84:	46bd      	mov	sp, r7
  403a86:	bd80      	pop	{r7, pc}
  403a88:	00404b4d 	.word	0x00404b4d
  403a8c:	00404b91 	.word	0x00404b91

00403a90 <sd_acmd6>:
 * \brief ACMD6 - Define the data bus width to 4 bits bus
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd6(void)
{
  403a90:	b580      	push	{r7, lr}
  403a92:	af00      	add	r7, sp, #0
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  403a94:	4b12      	ldr	r3, [pc, #72]	; (403ae0 <sd_acmd6+0x50>)
  403a96:	681b      	ldr	r3, [r3, #0]
  403a98:	891b      	ldrh	r3, [r3, #8]
  403a9a:	041b      	lsls	r3, r3, #16
  403a9c:	4619      	mov	r1, r3
  403a9e:	f241 1037 	movw	r0, #4407	; 0x1137
  403aa2:	4b10      	ldr	r3, [pc, #64]	; (403ae4 <sd_acmd6+0x54>)
  403aa4:	4798      	blx	r3
  403aa6:	4603      	mov	r3, r0
  403aa8:	f083 0301 	eor.w	r3, r3, #1
  403aac:	b2db      	uxtb	r3, r3
  403aae:	2b00      	cmp	r3, #0
  403ab0:	d001      	beq.n	403ab6 <sd_acmd6+0x26>
		return false;
  403ab2:	2300      	movs	r3, #0
  403ab4:	e011      	b.n	403ada <sd_acmd6+0x4a>
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  403ab6:	2102      	movs	r1, #2
  403ab8:	f241 1006 	movw	r0, #4358	; 0x1106
  403abc:	4b09      	ldr	r3, [pc, #36]	; (403ae4 <sd_acmd6+0x54>)
  403abe:	4798      	blx	r3
  403ac0:	4603      	mov	r3, r0
  403ac2:	f083 0301 	eor.w	r3, r3, #1
  403ac6:	b2db      	uxtb	r3, r3
  403ac8:	2b00      	cmp	r3, #0
  403aca:	d001      	beq.n	403ad0 <sd_acmd6+0x40>
		return false;
  403acc:	2300      	movs	r3, #0
  403ace:	e004      	b.n	403ada <sd_acmd6+0x4a>
	}
	sd_mmc_card->bus_width = 4;
  403ad0:	4b03      	ldr	r3, [pc, #12]	; (403ae0 <sd_acmd6+0x50>)
  403ad2:	681b      	ldr	r3, [r3, #0]
  403ad4:	2204      	movs	r2, #4
  403ad6:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  403ad8:	2301      	movs	r3, #1
}
  403ada:	4618      	mov	r0, r3
  403adc:	bd80      	pop	{r7, pc}
  403ade:	bf00      	nop
  403ae0:	2000abc8 	.word	0x2000abc8
  403ae4:	00404b4d 	.word	0x00404b4d

00403ae8 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
  403ae8:	b590      	push	{r4, r7, lr}
  403aea:	b085      	sub	sp, #20
  403aec:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  403aee:	4b36      	ldr	r3, [pc, #216]	; (403bc8 <sd_acmd51+0xe0>)
  403af0:	681b      	ldr	r3, [r3, #0]
  403af2:	891b      	ldrh	r3, [r3, #8]
  403af4:	041b      	lsls	r3, r3, #16
  403af6:	4619      	mov	r1, r3
  403af8:	f241 1037 	movw	r0, #4407	; 0x1137
  403afc:	4b33      	ldr	r3, [pc, #204]	; (403bcc <sd_acmd51+0xe4>)
  403afe:	4798      	blx	r3
  403b00:	4603      	mov	r3, r0
  403b02:	f083 0301 	eor.w	r3, r3, #1
  403b06:	b2db      	uxtb	r3, r3
  403b08:	2b00      	cmp	r3, #0
  403b0a:	d001      	beq.n	403b10 <sd_acmd51+0x28>
		return false;
  403b0c:	2300      	movs	r3, #0
  403b0e:	e057      	b.n	403bc0 <sd_acmd51+0xd8>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  403b10:	2301      	movs	r3, #1
  403b12:	9300      	str	r3, [sp, #0]
  403b14:	2301      	movs	r3, #1
  403b16:	2208      	movs	r2, #8
  403b18:	2100      	movs	r1, #0
  403b1a:	482d      	ldr	r0, [pc, #180]	; (403bd0 <sd_acmd51+0xe8>)
  403b1c:	4c2d      	ldr	r4, [pc, #180]	; (403bd4 <sd_acmd51+0xec>)
  403b1e:	47a0      	blx	r4
  403b20:	4603      	mov	r3, r0
  403b22:	f083 0301 	eor.w	r3, r3, #1
  403b26:	b2db      	uxtb	r3, r3
  403b28:	2b00      	cmp	r3, #0
  403b2a:	d001      	beq.n	403b30 <sd_acmd51+0x48>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
  403b2c:	2300      	movs	r3, #0
  403b2e:	e047      	b.n	403bc0 <sd_acmd51+0xd8>
	}
	if (!driver_start_read_blocks(scr, 1)) {
  403b30:	463b      	mov	r3, r7
  403b32:	2101      	movs	r1, #1
  403b34:	4618      	mov	r0, r3
  403b36:	4b28      	ldr	r3, [pc, #160]	; (403bd8 <sd_acmd51+0xf0>)
  403b38:	4798      	blx	r3
  403b3a:	4603      	mov	r3, r0
  403b3c:	f083 0301 	eor.w	r3, r3, #1
  403b40:	b2db      	uxtb	r3, r3
  403b42:	2b00      	cmp	r3, #0
  403b44:	d001      	beq.n	403b4a <sd_acmd51+0x62>
		return false;
  403b46:	2300      	movs	r3, #0
  403b48:	e03a      	b.n	403bc0 <sd_acmd51+0xd8>
	}
	if (!driver_wait_end_of_read_blocks()) {
  403b4a:	4b24      	ldr	r3, [pc, #144]	; (403bdc <sd_acmd51+0xf4>)
  403b4c:	4798      	blx	r3
  403b4e:	4603      	mov	r3, r0
  403b50:	f083 0301 	eor.w	r3, r3, #1
  403b54:	b2db      	uxtb	r3, r3
  403b56:	2b00      	cmp	r3, #0
  403b58:	d001      	beq.n	403b5e <sd_acmd51+0x76>
		return false;
  403b5a:	2300      	movs	r3, #0
  403b5c:	e030      	b.n	403bc0 <sd_acmd51+0xd8>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  403b5e:	4638      	mov	r0, r7
  403b60:	2304      	movs	r3, #4
  403b62:	2238      	movs	r2, #56	; 0x38
  403b64:	2140      	movs	r1, #64	; 0x40
  403b66:	4c1e      	ldr	r4, [pc, #120]	; (403be0 <sd_acmd51+0xf8>)
  403b68:	47a0      	blx	r4
  403b6a:	4603      	mov	r3, r0
  403b6c:	2b01      	cmp	r3, #1
  403b6e:	d009      	beq.n	403b84 <sd_acmd51+0x9c>
  403b70:	2b01      	cmp	r3, #1
  403b72:	d302      	bcc.n	403b7a <sd_acmd51+0x92>
  403b74:	2b02      	cmp	r3, #2
  403b76:	d00a      	beq.n	403b8e <sd_acmd51+0xa6>
  403b78:	e01c      	b.n	403bb4 <sd_acmd51+0xcc>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  403b7a:	4b13      	ldr	r3, [pc, #76]	; (403bc8 <sd_acmd51+0xe0>)
  403b7c:	681b      	ldr	r3, [r3, #0]
  403b7e:	2210      	movs	r2, #16
  403b80:	731a      	strb	r2, [r3, #12]
		break;
  403b82:	e01c      	b.n	403bbe <sd_acmd51+0xd6>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  403b84:	4b10      	ldr	r3, [pc, #64]	; (403bc8 <sd_acmd51+0xe0>)
  403b86:	681b      	ldr	r3, [r3, #0]
  403b88:	221a      	movs	r2, #26
  403b8a:	731a      	strb	r2, [r3, #12]
		break;
  403b8c:	e017      	b.n	403bbe <sd_acmd51+0xd6>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  403b8e:	4638      	mov	r0, r7
  403b90:	2301      	movs	r3, #1
  403b92:	222f      	movs	r2, #47	; 0x2f
  403b94:	2140      	movs	r1, #64	; 0x40
  403b96:	4c12      	ldr	r4, [pc, #72]	; (403be0 <sd_acmd51+0xf8>)
  403b98:	47a0      	blx	r4
  403b9a:	4603      	mov	r3, r0
  403b9c:	2b01      	cmp	r3, #1
  403b9e:	d104      	bne.n	403baa <sd_acmd51+0xc2>
			sd_mmc_card->version = CARD_VER_SD_3_0;
  403ba0:	4b09      	ldr	r3, [pc, #36]	; (403bc8 <sd_acmd51+0xe0>)
  403ba2:	681b      	ldr	r3, [r3, #0]
  403ba4:	2230      	movs	r2, #48	; 0x30
  403ba6:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
  403ba8:	e009      	b.n	403bbe <sd_acmd51+0xd6>
			sd_mmc_card->version = CARD_VER_SD_2_0;
  403baa:	4b07      	ldr	r3, [pc, #28]	; (403bc8 <sd_acmd51+0xe0>)
  403bac:	681b      	ldr	r3, [r3, #0]
  403bae:	2220      	movs	r2, #32
  403bb0:	731a      	strb	r2, [r3, #12]
		break;
  403bb2:	e004      	b.n	403bbe <sd_acmd51+0xd6>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  403bb4:	4b04      	ldr	r3, [pc, #16]	; (403bc8 <sd_acmd51+0xe0>)
  403bb6:	681b      	ldr	r3, [r3, #0]
  403bb8:	2210      	movs	r2, #16
  403bba:	731a      	strb	r2, [r3, #12]
		break;
  403bbc:	bf00      	nop
	}
	return true;
  403bbe:	2301      	movs	r3, #1
}
  403bc0:	4618      	mov	r0, r3
  403bc2:	370c      	adds	r7, #12
  403bc4:	46bd      	mov	sp, r7
  403bc6:	bd90      	pop	{r4, r7, pc}
  403bc8:	2000abc8 	.word	0x2000abc8
  403bcc:	00404b4d 	.word	0x00404b4d
  403bd0:	00081133 	.word	0x00081133
  403bd4:	00404c19 	.word	0x00404c19
  403bd8:	00404ddd 	.word	0x00404ddd
  403bdc:	00404e7d 	.word	0x00404e7d
  403be0:	00402f75 	.word	0x00402f75

00403be4 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  403be4:	b580      	push	{r7, lr}
  403be6:	b082      	sub	sp, #8
  403be8:	af00      	add	r7, sp, #0
  403bea:	4603      	mov	r3, r0
  403bec:	71fb      	strb	r3, [r7, #7]
	if (slot >= SD_MMC_MEM_CNT) {
  403bee:	79fb      	ldrb	r3, [r7, #7]
  403bf0:	2b00      	cmp	r3, #0
  403bf2:	d001      	beq.n	403bf8 <sd_mmc_select_slot+0x14>
		return SD_MMC_ERR_SLOT;
  403bf4:	2304      	movs	r3, #4
  403bf6:	e040      	b.n	403c7a <sd_mmc_select_slot+0x96>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  403bf8:	79fb      	ldrb	r3, [r7, #7]
  403bfa:	4a22      	ldr	r2, [pc, #136]	; (403c84 <sd_mmc_select_slot+0xa0>)
  403bfc:	015b      	lsls	r3, r3, #5
  403bfe:	4413      	add	r3, r2
  403c00:	330a      	adds	r3, #10
  403c02:	781b      	ldrb	r3, [r3, #0]
  403c04:	2b04      	cmp	r3, #4
  403c06:	d007      	beq.n	403c18 <sd_mmc_select_slot+0x34>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  403c08:	79fb      	ldrb	r3, [r7, #7]
  403c0a:	4a1e      	ldr	r2, [pc, #120]	; (403c84 <sd_mmc_select_slot+0xa0>)
  403c0c:	015b      	lsls	r3, r3, #5
  403c0e:	4413      	add	r3, r2
  403c10:	330a      	adds	r3, #10
  403c12:	781b      	ldrb	r3, [r3, #0]
  403c14:	2b03      	cmp	r3, #3
  403c16:	d11a      	bne.n	403c4e <sd_mmc_select_slot+0x6a>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  403c18:	79fb      	ldrb	r3, [r7, #7]
  403c1a:	4a1a      	ldr	r2, [pc, #104]	; (403c84 <sd_mmc_select_slot+0xa0>)
  403c1c:	015b      	lsls	r3, r3, #5
  403c1e:	4413      	add	r3, r2
  403c20:	330a      	adds	r3, #10
  403c22:	2202      	movs	r2, #2
  403c24:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  403c26:	79fb      	ldrb	r3, [r7, #7]
  403c28:	4a16      	ldr	r2, [pc, #88]	; (403c84 <sd_mmc_select_slot+0xa0>)
  403c2a:	015b      	lsls	r3, r3, #5
  403c2c:	4413      	add	r3, r2
  403c2e:	4a16      	ldr	r2, [pc, #88]	; (403c88 <sd_mmc_select_slot+0xa4>)
  403c30:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  403c32:	79fb      	ldrb	r3, [r7, #7]
  403c34:	4a13      	ldr	r2, [pc, #76]	; (403c84 <sd_mmc_select_slot+0xa0>)
  403c36:	015b      	lsls	r3, r3, #5
  403c38:	4413      	add	r3, r2
  403c3a:	330d      	adds	r3, #13
  403c3c:	2201      	movs	r2, #1
  403c3e:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
  403c40:	79fb      	ldrb	r3, [r7, #7]
  403c42:	4a10      	ldr	r2, [pc, #64]	; (403c84 <sd_mmc_select_slot+0xa0>)
  403c44:	015b      	lsls	r3, r3, #5
  403c46:	4413      	add	r3, r2
  403c48:	331e      	adds	r3, #30
  403c4a:	2200      	movs	r2, #0
  403c4c:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  403c4e:	4a0f      	ldr	r2, [pc, #60]	; (403c8c <sd_mmc_select_slot+0xa8>)
  403c50:	79fb      	ldrb	r3, [r7, #7]
  403c52:	7013      	strb	r3, [r2, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  403c54:	79fb      	ldrb	r3, [r7, #7]
  403c56:	015b      	lsls	r3, r3, #5
  403c58:	4a0a      	ldr	r2, [pc, #40]	; (403c84 <sd_mmc_select_slot+0xa0>)
  403c5a:	4413      	add	r3, r2
  403c5c:	4a0c      	ldr	r2, [pc, #48]	; (403c90 <sd_mmc_select_slot+0xac>)
  403c5e:	6013      	str	r3, [r2, #0]
	sd_mmc_configure_slot();
  403c60:	4b0c      	ldr	r3, [pc, #48]	; (403c94 <sd_mmc_select_slot+0xb0>)
  403c62:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  403c64:	79fb      	ldrb	r3, [r7, #7]
  403c66:	4a07      	ldr	r2, [pc, #28]	; (403c84 <sd_mmc_select_slot+0xa0>)
  403c68:	015b      	lsls	r3, r3, #5
  403c6a:	4413      	add	r3, r2
  403c6c:	330a      	adds	r3, #10
  403c6e:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  403c70:	2b02      	cmp	r3, #2
  403c72:	bf0c      	ite	eq
  403c74:	2301      	moveq	r3, #1
  403c76:	2300      	movne	r3, #0
  403c78:	b2db      	uxtb	r3, r3
}
  403c7a:	4618      	mov	r0, r3
  403c7c:	3708      	adds	r7, #8
  403c7e:	46bd      	mov	sp, r7
  403c80:	bd80      	pop	{r7, pc}
  403c82:	bf00      	nop
  403c84:	2000aba4 	.word	0x2000aba4
  403c88:	00061a80 	.word	0x00061a80
  403c8c:	2000abc4 	.word	0x2000abc4
  403c90:	2000abc8 	.word	0x2000abc8
  403c94:	00403c99 	.word	0x00403c99

00403c98 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  403c98:	b598      	push	{r3, r4, r7, lr}
  403c9a:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  403c9c:	4b09      	ldr	r3, [pc, #36]	; (403cc4 <sd_mmc_configure_slot+0x2c>)
  403c9e:	7818      	ldrb	r0, [r3, #0]
  403ca0:	4b09      	ldr	r3, [pc, #36]	; (403cc8 <sd_mmc_configure_slot+0x30>)
  403ca2:	681b      	ldr	r3, [r3, #0]
  403ca4:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  403ca6:	4b08      	ldr	r3, [pc, #32]	; (403cc8 <sd_mmc_configure_slot+0x30>)
  403ca8:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  403caa:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  403cac:	4b06      	ldr	r3, [pc, #24]	; (403cc8 <sd_mmc_configure_slot+0x30>)
  403cae:	681b      	ldr	r3, [r3, #0]
  403cb0:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  403cb2:	2b00      	cmp	r3, #0
  403cb4:	bf14      	ite	ne
  403cb6:	2301      	movne	r3, #1
  403cb8:	2300      	moveq	r3, #0
  403cba:	b2db      	uxtb	r3, r3
  403cbc:	4c03      	ldr	r4, [pc, #12]	; (403ccc <sd_mmc_configure_slot+0x34>)
  403cbe:	47a0      	blx	r4
}
  403cc0:	bf00      	nop
  403cc2:	bd98      	pop	{r3, r4, r7, pc}
  403cc4:	2000abc4 	.word	0x2000abc4
  403cc8:	2000abc8 	.word	0x2000abc8
  403ccc:	00404a61 	.word	0x00404a61

00403cd0 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  403cd0:	b580      	push	{r7, lr}
  403cd2:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  403cd4:	4b05      	ldr	r3, [pc, #20]	; (403cec <sd_mmc_deselect_slot+0x1c>)
  403cd6:	781b      	ldrb	r3, [r3, #0]
  403cd8:	2b00      	cmp	r3, #0
  403cda:	d104      	bne.n	403ce6 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
  403cdc:	4b03      	ldr	r3, [pc, #12]	; (403cec <sd_mmc_deselect_slot+0x1c>)
  403cde:	781b      	ldrb	r3, [r3, #0]
  403ce0:	4618      	mov	r0, r3
  403ce2:	4b03      	ldr	r3, [pc, #12]	; (403cf0 <sd_mmc_deselect_slot+0x20>)
  403ce4:	4798      	blx	r3
	}
}
  403ce6:	bf00      	nop
  403ce8:	bd80      	pop	{r7, pc}
  403cea:	bf00      	nop
  403cec:	2000abc4 	.word	0x2000abc4
  403cf0:	00404af9 	.word	0x00404af9

00403cf4 <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
  403cf4:	b590      	push	{r4, r7, lr}
  403cf6:	b085      	sub	sp, #20
  403cf8:	af02      	add	r7, sp, #8
	uint8_t v2 = 0;
  403cfa:	2300      	movs	r3, #0
  403cfc:	71fb      	strb	r3, [r7, #7]
#ifdef SDIO_SUPPORT_ENABLE
	uint8_t data = 0x08;
  403cfe:	2308      	movs	r3, #8
  403d00:	71bb      	strb	r3, [r7, #6]
#endif

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  403d02:	4b9a      	ldr	r3, [pc, #616]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403d04:	681b      	ldr	r3, [r3, #0]
  403d06:	2201      	movs	r2, #1
  403d08:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  403d0a:	4b98      	ldr	r3, [pc, #608]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403d0c:	681b      	ldr	r3, [r3, #0]
  403d0e:	2200      	movs	r2, #0
  403d10:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
  403d12:	4b96      	ldr	r3, [pc, #600]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403d14:	681b      	ldr	r3, [r3, #0]
  403d16:	2200      	movs	r2, #0
  403d18:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  403d1a:	4b95      	ldr	r3, [pc, #596]	; (403f70 <sd_mmc_mci_card_init+0x27c>)
  403d1c:	4798      	blx	r3

#ifdef SDIO_SUPPORT_ENABLE
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  403d1e:	1dbb      	adds	r3, r7, #6
  403d20:	9300      	str	r3, [sp, #0]
  403d22:	2300      	movs	r3, #0
  403d24:	2206      	movs	r2, #6
  403d26:	2100      	movs	r1, #0
  403d28:	2001      	movs	r0, #1
  403d2a:	4c92      	ldr	r4, [pc, #584]	; (403f74 <sd_mmc_mci_card_init+0x280>)
  403d2c:	47a0      	blx	r4
#endif

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  403d2e:	2100      	movs	r1, #0
  403d30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  403d34:	4b90      	ldr	r3, [pc, #576]	; (403f78 <sd_mmc_mci_card_init+0x284>)
  403d36:	4798      	blx	r3
  403d38:	4603      	mov	r3, r0
  403d3a:	f083 0301 	eor.w	r3, r3, #1
  403d3e:	b2db      	uxtb	r3, r3
  403d40:	2b00      	cmp	r3, #0
  403d42:	d001      	beq.n	403d48 <sd_mmc_mci_card_init+0x54>
		return false;
  403d44:	2300      	movs	r3, #0
  403d46:	e10d      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
	}
	if (!sd_cmd8(&v2)) {
  403d48:	1dfb      	adds	r3, r7, #7
  403d4a:	4618      	mov	r0, r3
  403d4c:	4b8b      	ldr	r3, [pc, #556]	; (403f7c <sd_mmc_mci_card_init+0x288>)
  403d4e:	4798      	blx	r3
  403d50:	4603      	mov	r3, r0
  403d52:	f083 0301 	eor.w	r3, r3, #1
  403d56:	b2db      	uxtb	r3, r3
  403d58:	2b00      	cmp	r3, #0
  403d5a:	d001      	beq.n	403d60 <sd_mmc_mci_card_init+0x6c>
		return false;
  403d5c:	2300      	movs	r3, #0
  403d5e:	e101      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
  403d60:	4b87      	ldr	r3, [pc, #540]	; (403f80 <sd_mmc_mci_card_init+0x28c>)
  403d62:	4798      	blx	r3
  403d64:	4603      	mov	r3, r0
  403d66:	f083 0301 	eor.w	r3, r3, #1
  403d6a:	b2db      	uxtb	r3, r3
  403d6c:	2b00      	cmp	r3, #0
  403d6e:	d001      	beq.n	403d74 <sd_mmc_mci_card_init+0x80>
		return false;
  403d70:	2300      	movs	r3, #0
  403d72:	e0f7      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403d74:	4b7d      	ldr	r3, [pc, #500]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403d76:	681b      	ldr	r3, [r3, #0]
  403d78:	7adb      	ldrb	r3, [r3, #11]
  403d7a:	f003 0301 	and.w	r3, r3, #1
  403d7e:	2b00      	cmp	r3, #0
  403d80:	d011      	beq.n	403da6 <sd_mmc_mci_card_init+0xb2>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
  403d82:	79fb      	ldrb	r3, [r7, #7]
  403d84:	4618      	mov	r0, r3
  403d86:	4b7f      	ldr	r3, [pc, #508]	; (403f84 <sd_mmc_mci_card_init+0x290>)
  403d88:	4798      	blx	r3
  403d8a:	4603      	mov	r3, r0
  403d8c:	f083 0301 	eor.w	r3, r3, #1
  403d90:	b2db      	uxtb	r3, r3
  403d92:	2b00      	cmp	r3, #0
  403d94:	d007      	beq.n	403da6 <sd_mmc_mci_card_init+0xb2>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  403d96:	4b75      	ldr	r3, [pc, #468]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403d98:	681b      	ldr	r3, [r3, #0]
  403d9a:	2202      	movs	r2, #2
  403d9c:	72da      	strb	r2, [r3, #11]
			return sd_mmc_mci_install_mmc();
  403d9e:	4b7a      	ldr	r3, [pc, #488]	; (403f88 <sd_mmc_mci_card_init+0x294>)
  403da0:	4798      	blx	r3
  403da2:	4603      	mov	r3, r0
  403da4:	e0de      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403da6:	4b71      	ldr	r3, [pc, #452]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403da8:	681b      	ldr	r3, [r3, #0]
  403daa:	7adb      	ldrb	r3, [r3, #11]
  403dac:	f003 0301 	and.w	r3, r3, #1
  403db0:	2b00      	cmp	r3, #0
  403db2:	d00c      	beq.n	403dce <sd_mmc_mci_card_init+0xda>
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  403db4:	2100      	movs	r1, #0
  403db6:	f645 3002 	movw	r0, #23298	; 0x5b02
  403dba:	4b6f      	ldr	r3, [pc, #444]	; (403f78 <sd_mmc_mci_card_init+0x284>)
  403dbc:	4798      	blx	r3
  403dbe:	4603      	mov	r3, r0
  403dc0:	f083 0301 	eor.w	r3, r3, #1
  403dc4:	b2db      	uxtb	r3, r3
  403dc6:	2b00      	cmp	r3, #0
  403dc8:	d001      	beq.n	403dce <sd_mmc_mci_card_init+0xda>
			return false;
  403dca:	2300      	movs	r3, #0
  403dcc:	e0ca      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  403dce:	2100      	movs	r1, #0
  403dd0:	f245 1003 	movw	r0, #20739	; 0x5103
  403dd4:	4b68      	ldr	r3, [pc, #416]	; (403f78 <sd_mmc_mci_card_init+0x284>)
  403dd6:	4798      	blx	r3
  403dd8:	4603      	mov	r3, r0
  403dda:	f083 0301 	eor.w	r3, r3, #1
  403dde:	b2db      	uxtb	r3, r3
  403de0:	2b00      	cmp	r3, #0
  403de2:	d001      	beq.n	403de8 <sd_mmc_mci_card_init+0xf4>
		return false;
  403de4:	2300      	movs	r3, #0
  403de6:	e0bd      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  403de8:	4b60      	ldr	r3, [pc, #384]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403dea:	681c      	ldr	r4, [r3, #0]
  403dec:	4b67      	ldr	r3, [pc, #412]	; (403f8c <sd_mmc_mci_card_init+0x298>)
  403dee:	4798      	blx	r3
  403df0:	4603      	mov	r3, r0
  403df2:	0c1b      	lsrs	r3, r3, #16
  403df4:	b29b      	uxth	r3, r3
  403df6:	8123      	strh	r3, [r4, #8]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403df8:	4b5c      	ldr	r3, [pc, #368]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403dfa:	681b      	ldr	r3, [r3, #0]
  403dfc:	7adb      	ldrb	r3, [r3, #11]
  403dfe:	f003 0301 	and.w	r3, r3, #1
  403e02:	2b00      	cmp	r3, #0
  403e04:	d00b      	beq.n	403e1e <sd_mmc_mci_card_init+0x12a>
		if (!sd_mmc_cmd9_mci()) {
  403e06:	4b62      	ldr	r3, [pc, #392]	; (403f90 <sd_mmc_mci_card_init+0x29c>)
  403e08:	4798      	blx	r3
  403e0a:	4603      	mov	r3, r0
  403e0c:	f083 0301 	eor.w	r3, r3, #1
  403e10:	b2db      	uxtb	r3, r3
  403e12:	2b00      	cmp	r3, #0
  403e14:	d001      	beq.n	403e1a <sd_mmc_mci_card_init+0x126>
			return false;
  403e16:	2300      	movs	r3, #0
  403e18:	e0a4      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
		}
		sd_decode_csd();
  403e1a:	4b5e      	ldr	r3, [pc, #376]	; (403f94 <sd_mmc_mci_card_init+0x2a0>)
  403e1c:	4798      	blx	r3
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  403e1e:	4b53      	ldr	r3, [pc, #332]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403e20:	681b      	ldr	r3, [r3, #0]
  403e22:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  403e24:	041b      	lsls	r3, r3, #16
  403e26:	4619      	mov	r1, r3
  403e28:	f243 1007 	movw	r0, #12551	; 0x3107
  403e2c:	4b52      	ldr	r3, [pc, #328]	; (403f78 <sd_mmc_mci_card_init+0x284>)
  403e2e:	4798      	blx	r3
  403e30:	4603      	mov	r3, r0
  403e32:	f083 0301 	eor.w	r3, r3, #1
  403e36:	b2db      	uxtb	r3, r3
  403e38:	2b00      	cmp	r3, #0
  403e3a:	d001      	beq.n	403e40 <sd_mmc_mci_card_init+0x14c>
		return false;
  403e3c:	2300      	movs	r3, #0
  403e3e:	e091      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403e40:	4b4a      	ldr	r3, [pc, #296]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403e42:	681b      	ldr	r3, [r3, #0]
  403e44:	7adb      	ldrb	r3, [r3, #11]
  403e46:	f003 0301 	and.w	r3, r3, #1
  403e4a:	2b00      	cmp	r3, #0
  403e4c:	d009      	beq.n	403e62 <sd_mmc_mci_card_init+0x16e>
		if (!sd_acmd51()) {
  403e4e:	4b52      	ldr	r3, [pc, #328]	; (403f98 <sd_mmc_mci_card_init+0x2a4>)
  403e50:	4798      	blx	r3
  403e52:	4603      	mov	r3, r0
  403e54:	f083 0301 	eor.w	r3, r3, #1
  403e58:	b2db      	uxtb	r3, r3
  403e5a:	2b00      	cmp	r3, #0
  403e5c:	d001      	beq.n	403e62 <sd_mmc_mci_card_init+0x16e>
			return false;
  403e5e:	2300      	movs	r3, #0
  403e60:	e080      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
		}
	}
	if (IS_SDIO()) {
  403e62:	4b42      	ldr	r3, [pc, #264]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403e64:	681b      	ldr	r3, [r3, #0]
  403e66:	7adb      	ldrb	r3, [r3, #11]
  403e68:	f003 0304 	and.w	r3, r3, #4
  403e6c:	2b00      	cmp	r3, #0
  403e6e:	d009      	beq.n	403e84 <sd_mmc_mci_card_init+0x190>
		if (!sdio_get_max_speed()) {
  403e70:	4b4a      	ldr	r3, [pc, #296]	; (403f9c <sd_mmc_mci_card_init+0x2a8>)
  403e72:	4798      	blx	r3
  403e74:	4603      	mov	r3, r0
  403e76:	f083 0301 	eor.w	r3, r3, #1
  403e7a:	b2db      	uxtb	r3, r3
  403e7c:	2b00      	cmp	r3, #0
  403e7e:	d001      	beq.n	403e84 <sd_mmc_mci_card_init+0x190>
			return false;
  403e80:	2300      	movs	r3, #0
  403e82:	e06f      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  403e84:	4b46      	ldr	r3, [pc, #280]	; (403fa0 <sd_mmc_mci_card_init+0x2ac>)
  403e86:	781b      	ldrb	r3, [r3, #0]
  403e88:	4618      	mov	r0, r3
  403e8a:	4b46      	ldr	r3, [pc, #280]	; (403fa4 <sd_mmc_mci_card_init+0x2b0>)
  403e8c:	4798      	blx	r3
  403e8e:	4603      	mov	r3, r0
  403e90:	2b03      	cmp	r3, #3
  403e92:	d923      	bls.n	403edc <sd_mmc_mci_card_init+0x1e8>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
  403e94:	4b35      	ldr	r3, [pc, #212]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403e96:	681b      	ldr	r3, [r3, #0]
  403e98:	7adb      	ldrb	r3, [r3, #11]
  403e9a:	f003 0304 	and.w	r3, r3, #4
  403e9e:	2b00      	cmp	r3, #0
  403ea0:	d009      	beq.n	403eb6 <sd_mmc_mci_card_init+0x1c2>
			if (!sdio_cmd52_set_bus_width()) {
  403ea2:	4b41      	ldr	r3, [pc, #260]	; (403fa8 <sd_mmc_mci_card_init+0x2b4>)
  403ea4:	4798      	blx	r3
  403ea6:	4603      	mov	r3, r0
  403ea8:	f083 0301 	eor.w	r3, r3, #1
  403eac:	b2db      	uxtb	r3, r3
  403eae:	2b00      	cmp	r3, #0
  403eb0:	d001      	beq.n	403eb6 <sd_mmc_mci_card_init+0x1c2>
				return false;
  403eb2:	2300      	movs	r3, #0
  403eb4:	e056      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  403eb6:	4b2d      	ldr	r3, [pc, #180]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403eb8:	681b      	ldr	r3, [r3, #0]
  403eba:	7adb      	ldrb	r3, [r3, #11]
  403ebc:	f003 0301 	and.w	r3, r3, #1
  403ec0:	2b00      	cmp	r3, #0
  403ec2:	d009      	beq.n	403ed8 <sd_mmc_mci_card_init+0x1e4>
			if (!sd_acmd6()) {
  403ec4:	4b39      	ldr	r3, [pc, #228]	; (403fac <sd_mmc_mci_card_init+0x2b8>)
  403ec6:	4798      	blx	r3
  403ec8:	4603      	mov	r3, r0
  403eca:	f083 0301 	eor.w	r3, r3, #1
  403ece:	b2db      	uxtb	r3, r3
  403ed0:	2b00      	cmp	r3, #0
  403ed2:	d001      	beq.n	403ed8 <sd_mmc_mci_card_init+0x1e4>
				return false;
  403ed4:	2300      	movs	r3, #0
  403ed6:	e045      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  403ed8:	4b35      	ldr	r3, [pc, #212]	; (403fb0 <sd_mmc_mci_card_init+0x2bc>)
  403eda:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  403edc:	4b35      	ldr	r3, [pc, #212]	; (403fb4 <sd_mmc_mci_card_init+0x2c0>)
  403ede:	4798      	blx	r3
  403ee0:	4603      	mov	r3, r0
  403ee2:	2b00      	cmp	r3, #0
  403ee4:	d028      	beq.n	403f38 <sd_mmc_mci_card_init+0x244>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
  403ee6:	4b21      	ldr	r3, [pc, #132]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403ee8:	681b      	ldr	r3, [r3, #0]
  403eea:	7adb      	ldrb	r3, [r3, #11]
  403eec:	f003 0304 	and.w	r3, r3, #4
  403ef0:	2b00      	cmp	r3, #0
  403ef2:	d009      	beq.n	403f08 <sd_mmc_mci_card_init+0x214>
			if (!sdio_cmd52_set_high_speed()) {
  403ef4:	4b30      	ldr	r3, [pc, #192]	; (403fb8 <sd_mmc_mci_card_init+0x2c4>)
  403ef6:	4798      	blx	r3
  403ef8:	4603      	mov	r3, r0
  403efa:	f083 0301 	eor.w	r3, r3, #1
  403efe:	b2db      	uxtb	r3, r3
  403f00:	2b00      	cmp	r3, #0
  403f02:	d001      	beq.n	403f08 <sd_mmc_mci_card_init+0x214>
				return false;
  403f04:	2300      	movs	r3, #0
  403f06:	e02d      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  403f08:	4b18      	ldr	r3, [pc, #96]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403f0a:	681b      	ldr	r3, [r3, #0]
  403f0c:	7adb      	ldrb	r3, [r3, #11]
  403f0e:	f003 0301 	and.w	r3, r3, #1
  403f12:	2b00      	cmp	r3, #0
  403f14:	d00e      	beq.n	403f34 <sd_mmc_mci_card_init+0x240>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  403f16:	4b15      	ldr	r3, [pc, #84]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403f18:	681b      	ldr	r3, [r3, #0]
  403f1a:	7b1b      	ldrb	r3, [r3, #12]
  403f1c:	2b10      	cmp	r3, #16
  403f1e:	d909      	bls.n	403f34 <sd_mmc_mci_card_init+0x240>
				if (!sd_cm6_set_high_speed()) {
  403f20:	4b26      	ldr	r3, [pc, #152]	; (403fbc <sd_mmc_mci_card_init+0x2c8>)
  403f22:	4798      	blx	r3
  403f24:	4603      	mov	r3, r0
  403f26:	f083 0301 	eor.w	r3, r3, #1
  403f2a:	b2db      	uxtb	r3, r3
  403f2c:	2b00      	cmp	r3, #0
  403f2e:	d001      	beq.n	403f34 <sd_mmc_mci_card_init+0x240>
					return false;
  403f30:	2300      	movs	r3, #0
  403f32:	e017      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  403f34:	4b1e      	ldr	r3, [pc, #120]	; (403fb0 <sd_mmc_mci_card_init+0x2bc>)
  403f36:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403f38:	4b0c      	ldr	r3, [pc, #48]	; (403f6c <sd_mmc_mci_card_init+0x278>)
  403f3a:	681b      	ldr	r3, [r3, #0]
  403f3c:	7adb      	ldrb	r3, [r3, #11]
  403f3e:	f003 0301 	and.w	r3, r3, #1
  403f42:	2b00      	cmp	r3, #0
  403f44:	d00d      	beq.n	403f62 <sd_mmc_mci_card_init+0x26e>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  403f46:	f44f 7100 	mov.w	r1, #512	; 0x200
  403f4a:	f241 1010 	movw	r0, #4368	; 0x1110
  403f4e:	4b0a      	ldr	r3, [pc, #40]	; (403f78 <sd_mmc_mci_card_init+0x284>)
  403f50:	4798      	blx	r3
  403f52:	4603      	mov	r3, r0
  403f54:	f083 0301 	eor.w	r3, r3, #1
  403f58:	b2db      	uxtb	r3, r3
  403f5a:	2b00      	cmp	r3, #0
  403f5c:	d001      	beq.n	403f62 <sd_mmc_mci_card_init+0x26e>
			return false;
  403f5e:	2300      	movs	r3, #0
  403f60:	e000      	b.n	403f64 <sd_mmc_mci_card_init+0x270>
		}
	}
	return true;
  403f62:	2301      	movs	r3, #1
}
  403f64:	4618      	mov	r0, r3
  403f66:	370c      	adds	r7, #12
  403f68:	46bd      	mov	sp, r7
  403f6a:	bd90      	pop	{r4, r7, pc}
  403f6c:	2000abc8 	.word	0x2000abc8
  403f70:	00404b11 	.word	0x00404b11
  403f74:	00403a25 	.word	0x00403a25
  403f78:	00404b4d 	.word	0x00404b4d
  403f7c:	0040365d 	.word	0x0040365d
  403f80:	004031ad 	.word	0x004031ad
  403f84:	00403105 	.word	0x00403105
  403f88:	00403fc1 	.word	0x00403fc1
  403f8c:	00404b91 	.word	0x00404b91
  403f90:	004037b9 	.word	0x004037b9
  403f94:	00403935 	.word	0x00403935
  403f98:	00403ae9 	.word	0x00403ae9
  403f9c:	00403255 	.word	0x00403255
  403fa0:	2000abc4 	.word	0x2000abc4
  403fa4:	00404a2d 	.word	0x00404a2d
  403fa8:	004033a1 	.word	0x004033a1
  403fac:	00403a91 	.word	0x00403a91
  403fb0:	00403c99 	.word	0x00403c99
  403fb4:	00404a4f 	.word	0x00404a4f
  403fb8:	00403411 	.word	0x00403411
  403fbc:	00403491 	.word	0x00403491

00403fc0 <sd_mmc_mci_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_install_mmc(void)
{
  403fc0:	b580      	push	{r7, lr}
  403fc2:	b082      	sub	sp, #8
  403fc4:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  403fc6:	2100      	movs	r1, #0
  403fc8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  403fcc:	4b56      	ldr	r3, [pc, #344]	; (404128 <sd_mmc_mci_install_mmc+0x168>)
  403fce:	4798      	blx	r3
  403fd0:	4603      	mov	r3, r0
  403fd2:	f083 0301 	eor.w	r3, r3, #1
  403fd6:	b2db      	uxtb	r3, r3
  403fd8:	2b00      	cmp	r3, #0
  403fda:	d001      	beq.n	403fe0 <sd_mmc_mci_install_mmc+0x20>
		return false;
  403fdc:	2300      	movs	r3, #0
  403fde:	e09f      	b.n	404120 <sd_mmc_mci_install_mmc+0x160>
	}

	if (!mmc_mci_op_cond()) {
  403fe0:	4b52      	ldr	r3, [pc, #328]	; (40412c <sd_mmc_mci_install_mmc+0x16c>)
  403fe2:	4798      	blx	r3
  403fe4:	4603      	mov	r3, r0
  403fe6:	f083 0301 	eor.w	r3, r3, #1
  403fea:	b2db      	uxtb	r3, r3
  403fec:	2b00      	cmp	r3, #0
  403fee:	d001      	beq.n	403ff4 <sd_mmc_mci_install_mmc+0x34>
		return false;
  403ff0:	2300      	movs	r3, #0
  403ff2:	e095      	b.n	404120 <sd_mmc_mci_install_mmc+0x160>
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  403ff4:	2100      	movs	r1, #0
  403ff6:	f645 3002 	movw	r0, #23298	; 0x5b02
  403ffa:	4b4b      	ldr	r3, [pc, #300]	; (404128 <sd_mmc_mci_install_mmc+0x168>)
  403ffc:	4798      	blx	r3
  403ffe:	4603      	mov	r3, r0
  404000:	f083 0301 	eor.w	r3, r3, #1
  404004:	b2db      	uxtb	r3, r3
  404006:	2b00      	cmp	r3, #0
  404008:	d001      	beq.n	40400e <sd_mmc_mci_install_mmc+0x4e>
		return false;
  40400a:	2300      	movs	r3, #0
  40400c:	e088      	b.n	404120 <sd_mmc_mci_install_mmc+0x160>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  40400e:	4b48      	ldr	r3, [pc, #288]	; (404130 <sd_mmc_mci_install_mmc+0x170>)
  404010:	681b      	ldr	r3, [r3, #0]
  404012:	2201      	movs	r2, #1
  404014:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
  404016:	4b46      	ldr	r3, [pc, #280]	; (404130 <sd_mmc_mci_install_mmc+0x170>)
  404018:	681b      	ldr	r3, [r3, #0]
  40401a:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  40401c:	041b      	lsls	r3, r3, #16
  40401e:	4619      	mov	r1, r3
  404020:	f241 1003 	movw	r0, #4355	; 0x1103
  404024:	4b40      	ldr	r3, [pc, #256]	; (404128 <sd_mmc_mci_install_mmc+0x168>)
  404026:	4798      	blx	r3
  404028:	4603      	mov	r3, r0
  40402a:	f083 0301 	eor.w	r3, r3, #1
  40402e:	b2db      	uxtb	r3, r3
  404030:	2b00      	cmp	r3, #0
  404032:	d001      	beq.n	404038 <sd_mmc_mci_install_mmc+0x78>
		return false;
  404034:	2300      	movs	r3, #0
  404036:	e073      	b.n	404120 <sd_mmc_mci_install_mmc+0x160>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  404038:	4b3e      	ldr	r3, [pc, #248]	; (404134 <sd_mmc_mci_install_mmc+0x174>)
  40403a:	4798      	blx	r3
  40403c:	4603      	mov	r3, r0
  40403e:	f083 0301 	eor.w	r3, r3, #1
  404042:	b2db      	uxtb	r3, r3
  404044:	2b00      	cmp	r3, #0
  404046:	d001      	beq.n	40404c <sd_mmc_mci_install_mmc+0x8c>
		return false;
  404048:	2300      	movs	r3, #0
  40404a:	e069      	b.n	404120 <sd_mmc_mci_install_mmc+0x160>
	}
	mmc_decode_csd();
  40404c:	4b3a      	ldr	r3, [pc, #232]	; (404138 <sd_mmc_mci_install_mmc+0x178>)
  40404e:	4798      	blx	r3
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  404050:	4b37      	ldr	r3, [pc, #220]	; (404130 <sd_mmc_mci_install_mmc+0x170>)
  404052:	681b      	ldr	r3, [r3, #0]
  404054:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  404056:	041b      	lsls	r3, r3, #16
  404058:	4619      	mov	r1, r3
  40405a:	f243 1007 	movw	r0, #12551	; 0x3107
  40405e:	4b32      	ldr	r3, [pc, #200]	; (404128 <sd_mmc_mci_install_mmc+0x168>)
  404060:	4798      	blx	r3
  404062:	4603      	mov	r3, r0
  404064:	f083 0301 	eor.w	r3, r3, #1
  404068:	b2db      	uxtb	r3, r3
  40406a:	2b00      	cmp	r3, #0
  40406c:	d001      	beq.n	404072 <sd_mmc_mci_install_mmc+0xb2>
		return false;
  40406e:	2300      	movs	r3, #0
  404070:	e056      	b.n	404120 <sd_mmc_mci_install_mmc+0x160>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  404072:	4b2f      	ldr	r3, [pc, #188]	; (404130 <sd_mmc_mci_install_mmc+0x170>)
  404074:	681b      	ldr	r3, [r3, #0]
  404076:	7b1b      	ldrb	r3, [r3, #12]
  404078:	2b3f      	cmp	r3, #63	; 0x3f
  40407a:	d93b      	bls.n	4040f4 <sd_mmc_mci_install_mmc+0x134>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
  40407c:	1dbb      	adds	r3, r7, #6
  40407e:	4618      	mov	r0, r3
  404080:	4b2e      	ldr	r3, [pc, #184]	; (40413c <sd_mmc_mci_install_mmc+0x17c>)
  404082:	4798      	blx	r3
  404084:	4603      	mov	r3, r0
  404086:	f083 0301 	eor.w	r3, r3, #1
  40408a:	b2db      	uxtb	r3, r3
  40408c:	2b00      	cmp	r3, #0
  40408e:	d001      	beq.n	404094 <sd_mmc_mci_install_mmc+0xd4>
			return false;
  404090:	2300      	movs	r3, #0
  404092:	e045      	b.n	404120 <sd_mmc_mci_install_mmc+0x160>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  404094:	4b2a      	ldr	r3, [pc, #168]	; (404140 <sd_mmc_mci_install_mmc+0x180>)
  404096:	781b      	ldrb	r3, [r3, #0]
  404098:	4618      	mov	r0, r3
  40409a:	4b2a      	ldr	r3, [pc, #168]	; (404144 <sd_mmc_mci_install_mmc+0x184>)
  40409c:	4798      	blx	r3
  40409e:	4603      	mov	r3, r0
  4040a0:	2b03      	cmp	r3, #3
  4040a2:	d912      	bls.n	4040ca <sd_mmc_mci_install_mmc+0x10a>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4040a4:	4b26      	ldr	r3, [pc, #152]	; (404140 <sd_mmc_mci_install_mmc+0x180>)
  4040a6:	781b      	ldrb	r3, [r3, #0]
  4040a8:	4618      	mov	r0, r3
  4040aa:	4b26      	ldr	r3, [pc, #152]	; (404144 <sd_mmc_mci_install_mmc+0x184>)
  4040ac:	4798      	blx	r3
  4040ae:	4603      	mov	r3, r0
  4040b0:	4618      	mov	r0, r3
  4040b2:	4b25      	ldr	r3, [pc, #148]	; (404148 <sd_mmc_mci_install_mmc+0x188>)
  4040b4:	4798      	blx	r3
  4040b6:	4603      	mov	r3, r0
  4040b8:	f083 0301 	eor.w	r3, r3, #1
  4040bc:	b2db      	uxtb	r3, r3
  4040be:	2b00      	cmp	r3, #0
  4040c0:	d001      	beq.n	4040c6 <sd_mmc_mci_install_mmc+0x106>
				return false;
  4040c2:	2300      	movs	r3, #0
  4040c4:	e02c      	b.n	404120 <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  4040c6:	4b21      	ldr	r3, [pc, #132]	; (40414c <sd_mmc_mci_install_mmc+0x18c>)
  4040c8:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  4040ca:	4b21      	ldr	r3, [pc, #132]	; (404150 <sd_mmc_mci_install_mmc+0x190>)
  4040cc:	4798      	blx	r3
  4040ce:	4603      	mov	r3, r0
  4040d0:	2b00      	cmp	r3, #0
  4040d2:	d011      	beq.n	4040f8 <sd_mmc_mci_install_mmc+0x138>
  4040d4:	79bb      	ldrb	r3, [r7, #6]
  4040d6:	2b00      	cmp	r3, #0
  4040d8:	d00e      	beq.n	4040f8 <sd_mmc_mci_install_mmc+0x138>
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
  4040da:	4b1e      	ldr	r3, [pc, #120]	; (404154 <sd_mmc_mci_install_mmc+0x194>)
  4040dc:	4798      	blx	r3
  4040de:	4603      	mov	r3, r0
  4040e0:	f083 0301 	eor.w	r3, r3, #1
  4040e4:	b2db      	uxtb	r3, r3
  4040e6:	2b00      	cmp	r3, #0
  4040e8:	d001      	beq.n	4040ee <sd_mmc_mci_install_mmc+0x12e>
				return false;
  4040ea:	2300      	movs	r3, #0
  4040ec:	e018      	b.n	404120 <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  4040ee:	4b17      	ldr	r3, [pc, #92]	; (40414c <sd_mmc_mci_install_mmc+0x18c>)
  4040f0:	4798      	blx	r3
  4040f2:	e001      	b.n	4040f8 <sd_mmc_mci_install_mmc+0x138>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  4040f4:	4b15      	ldr	r3, [pc, #84]	; (40414c <sd_mmc_mci_install_mmc+0x18c>)
  4040f6:	4798      	blx	r3
	}

	uint8_t retry = 10;
  4040f8:	230a      	movs	r3, #10
  4040fa:	71fb      	strb	r3, [r7, #7]
	while (retry--) {
  4040fc:	e00a      	b.n	404114 <sd_mmc_mci_install_mmc+0x154>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4040fe:	f44f 7100 	mov.w	r1, #512	; 0x200
  404102:	f241 1010 	movw	r0, #4368	; 0x1110
  404106:	4b08      	ldr	r3, [pc, #32]	; (404128 <sd_mmc_mci_install_mmc+0x168>)
  404108:	4798      	blx	r3
  40410a:	4603      	mov	r3, r0
  40410c:	2b00      	cmp	r3, #0
  40410e:	d001      	beq.n	404114 <sd_mmc_mci_install_mmc+0x154>
			return true;
  404110:	2301      	movs	r3, #1
  404112:	e005      	b.n	404120 <sd_mmc_mci_install_mmc+0x160>
	while (retry--) {
  404114:	79fb      	ldrb	r3, [r7, #7]
  404116:	1e5a      	subs	r2, r3, #1
  404118:	71fa      	strb	r2, [r7, #7]
  40411a:	2b00      	cmp	r3, #0
  40411c:	d1ef      	bne.n	4040fe <sd_mmc_mci_install_mmc+0x13e>
		}
	}
	return false;
  40411e:	2300      	movs	r3, #0
}
  404120:	4618      	mov	r0, r3
  404122:	3708      	adds	r7, #8
  404124:	46bd      	mov	sp, r7
  404126:	bd80      	pop	{r7, pc}
  404128:	00404b4d 	.word	0x00404b4d
  40412c:	00403089 	.word	0x00403089
  404130:	2000abc8 	.word	0x2000abc8
  404134:	004037b9 	.word	0x004037b9
  404138:	004037fd 	.word	0x004037fd
  40413c:	004036c1 	.word	0x004036c1
  404140:	2000abc4 	.word	0x2000abc4
  404144:	00404a2d 	.word	0x00404a2d
  404148:	00403585 	.word	0x00403585
  40414c:	00403c99 	.word	0x00403c99
  404150:	00404a4f 	.word	0x00404a4f
  404154:	00403601 	.word	0x00403601

00404158 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  404158:	b580      	push	{r7, lr}
  40415a:	b082      	sub	sp, #8
  40415c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  40415e:	2300      	movs	r3, #0
  404160:	71fb      	strb	r3, [r7, #7]
  404162:	e009      	b.n	404178 <sd_mmc_init+0x20>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  404164:	79fb      	ldrb	r3, [r7, #7]
  404166:	4a0a      	ldr	r2, [pc, #40]	; (404190 <sd_mmc_init+0x38>)
  404168:	015b      	lsls	r3, r3, #5
  40416a:	4413      	add	r3, r2
  40416c:	330a      	adds	r3, #10
  40416e:	2204      	movs	r2, #4
  404170:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  404172:	79fb      	ldrb	r3, [r7, #7]
  404174:	3301      	adds	r3, #1
  404176:	71fb      	strb	r3, [r7, #7]
  404178:	79fb      	ldrb	r3, [r7, #7]
  40417a:	2b00      	cmp	r3, #0
  40417c:	d0f2      	beq.n	404164 <sd_mmc_init+0xc>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  40417e:	4b05      	ldr	r3, [pc, #20]	; (404194 <sd_mmc_init+0x3c>)
  404180:	22ff      	movs	r2, #255	; 0xff
  404182:	701a      	strb	r2, [r3, #0]
	driver_init();
  404184:	4b04      	ldr	r3, [pc, #16]	; (404198 <sd_mmc_init+0x40>)
  404186:	4798      	blx	r3
}
  404188:	bf00      	nop
  40418a:	3708      	adds	r7, #8
  40418c:	46bd      	mov	sp, r7
  40418e:	bd80      	pop	{r7, pc}
  404190:	2000aba4 	.word	0x2000aba4
  404194:	2000abc4 	.word	0x2000abc4
  404198:	004049f5 	.word	0x004049f5

0040419c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  40419c:	b580      	push	{r7, lr}
  40419e:	b084      	sub	sp, #16
  4041a0:	af00      	add	r7, sp, #0
  4041a2:	4603      	mov	r3, r0
  4041a4:	71fb      	strb	r3, [r7, #7]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4041a6:	79fb      	ldrb	r3, [r7, #7]
  4041a8:	4618      	mov	r0, r3
  4041aa:	4b11      	ldr	r3, [pc, #68]	; (4041f0 <sd_mmc_check+0x54>)
  4041ac:	4798      	blx	r3
  4041ae:	4603      	mov	r3, r0
  4041b0:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4041b2:	7bfb      	ldrb	r3, [r7, #15]
  4041b4:	2b01      	cmp	r3, #1
  4041b6:	d003      	beq.n	4041c0 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
  4041b8:	4b0e      	ldr	r3, [pc, #56]	; (4041f4 <sd_mmc_check+0x58>)
  4041ba:	4798      	blx	r3
		return sd_mmc_err;
  4041bc:	7bfb      	ldrb	r3, [r7, #15]
  4041be:	e013      	b.n	4041e8 <sd_mmc_check+0x4c>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
			: sd_mmc_mci_card_init()) {
  4041c0:	4b0d      	ldr	r3, [pc, #52]	; (4041f8 <sd_mmc_check+0x5c>)
  4041c2:	4798      	blx	r3
  4041c4:	4603      	mov	r3, r0
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  4041c6:	2b00      	cmp	r3, #0
  4041c8:	d007      	beq.n	4041da <sd_mmc_check+0x3e>
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  4041ca:	4b0c      	ldr	r3, [pc, #48]	; (4041fc <sd_mmc_check+0x60>)
  4041cc:	681b      	ldr	r3, [r3, #0]
  4041ce:	2200      	movs	r2, #0
  4041d0:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  4041d2:	4b08      	ldr	r3, [pc, #32]	; (4041f4 <sd_mmc_check+0x58>)
  4041d4:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  4041d6:	2301      	movs	r3, #1
  4041d8:	e006      	b.n	4041e8 <sd_mmc_check+0x4c>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4041da:	4b08      	ldr	r3, [pc, #32]	; (4041fc <sd_mmc_check+0x60>)
  4041dc:	681b      	ldr	r3, [r3, #0]
  4041de:	2203      	movs	r2, #3
  4041e0:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
  4041e2:	4b04      	ldr	r3, [pc, #16]	; (4041f4 <sd_mmc_check+0x58>)
  4041e4:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4041e6:	2303      	movs	r3, #3
}
  4041e8:	4618      	mov	r0, r3
  4041ea:	3710      	adds	r7, #16
  4041ec:	46bd      	mov	sp, r7
  4041ee:	bd80      	pop	{r7, pc}
  4041f0:	00403be5 	.word	0x00403be5
  4041f4:	00403cd1 	.word	0x00403cd1
  4041f8:	00403cf5 	.word	0x00403cf5
  4041fc:	2000abc8 	.word	0x2000abc8

00404200 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  404200:	b580      	push	{r7, lr}
  404202:	b082      	sub	sp, #8
  404204:	af00      	add	r7, sp, #0
  404206:	4603      	mov	r3, r0
  404208:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  40420a:	79fb      	ldrb	r3, [r7, #7]
  40420c:	4618      	mov	r0, r3
  40420e:	4b08      	ldr	r3, [pc, #32]	; (404230 <sd_mmc_get_type+0x30>)
  404210:	4798      	blx	r3
  404212:	4603      	mov	r3, r0
  404214:	2b00      	cmp	r3, #0
  404216:	d001      	beq.n	40421c <sd_mmc_get_type+0x1c>
		return CARD_TYPE_UNKNOWN;
  404218:	2300      	movs	r3, #0
  40421a:	e004      	b.n	404226 <sd_mmc_get_type+0x26>
	}
	sd_mmc_deselect_slot();
  40421c:	4b05      	ldr	r3, [pc, #20]	; (404234 <sd_mmc_get_type+0x34>)
  40421e:	4798      	blx	r3
	return sd_mmc_card->type;
  404220:	4b05      	ldr	r3, [pc, #20]	; (404238 <sd_mmc_get_type+0x38>)
  404222:	681b      	ldr	r3, [r3, #0]
  404224:	7adb      	ldrb	r3, [r3, #11]
}
  404226:	4618      	mov	r0, r3
  404228:	3708      	adds	r7, #8
  40422a:	46bd      	mov	sp, r7
  40422c:	bd80      	pop	{r7, pc}
  40422e:	bf00      	nop
  404230:	00403be5 	.word	0x00403be5
  404234:	00403cd1 	.word	0x00403cd1
  404238:	2000abc8 	.word	0x2000abc8

0040423c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  40423c:	b580      	push	{r7, lr}
  40423e:	b082      	sub	sp, #8
  404240:	af00      	add	r7, sp, #0
  404242:	4603      	mov	r3, r0
  404244:	71fb      	strb	r3, [r7, #7]
	switch (sd_mmc_check(slot))
  404246:	79fb      	ldrb	r3, [r7, #7]
  404248:	4618      	mov	r0, r3
  40424a:	4b15      	ldr	r3, [pc, #84]	; (4042a0 <sd_mmc_test_unit_ready+0x64>)
  40424c:	4798      	blx	r3
  40424e:	4603      	mov	r3, r0
  404250:	2b01      	cmp	r3, #1
  404252:	d017      	beq.n	404284 <sd_mmc_test_unit_ready+0x48>
  404254:	2b02      	cmp	r3, #2
  404256:	d017      	beq.n	404288 <sd_mmc_test_unit_ready+0x4c>
  404258:	2b00      	cmp	r3, #0
  40425a:	d11b      	bne.n	404294 <sd_mmc_test_unit_ready+0x58>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  40425c:	79fb      	ldrb	r3, [r7, #7]
  40425e:	4a11      	ldr	r2, [pc, #68]	; (4042a4 <sd_mmc_test_unit_ready+0x68>)
  404260:	5cd3      	ldrb	r3, [r2, r3]
  404262:	2b00      	cmp	r3, #0
  404264:	d001      	beq.n	40426a <sd_mmc_test_unit_ready+0x2e>
			return CTRL_NO_PRESENT;
  404266:	2302      	movs	r3, #2
  404268:	e015      	b.n	404296 <sd_mmc_test_unit_ready+0x5a>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  40426a:	79fb      	ldrb	r3, [r7, #7]
  40426c:	4618      	mov	r0, r3
  40426e:	4b0e      	ldr	r3, [pc, #56]	; (4042a8 <sd_mmc_test_unit_ready+0x6c>)
  404270:	4798      	blx	r3
  404272:	4603      	mov	r3, r0
  404274:	f003 0303 	and.w	r3, r3, #3
  404278:	2b00      	cmp	r3, #0
  40427a:	d001      	beq.n	404280 <sd_mmc_test_unit_ready+0x44>
			return CTRL_GOOD;
  40427c:	2300      	movs	r3, #0
  40427e:	e00a      	b.n	404296 <sd_mmc_test_unit_ready+0x5a>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
  404280:	2302      	movs	r3, #2
  404282:	e008      	b.n	404296 <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  404284:	2303      	movs	r3, #3
  404286:	e006      	b.n	404296 <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  404288:	79fb      	ldrb	r3, [r7, #7]
  40428a:	4a06      	ldr	r2, [pc, #24]	; (4042a4 <sd_mmc_test_unit_ready+0x68>)
  40428c:	2100      	movs	r1, #0
  40428e:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
  404290:	2302      	movs	r3, #2
  404292:	e000      	b.n	404296 <sd_mmc_test_unit_ready+0x5a>

	default:
		return CTRL_FAIL;
  404294:	2301      	movs	r3, #1
	}
}
  404296:	4618      	mov	r0, r3
  404298:	3708      	adds	r7, #8
  40429a:	46bd      	mov	sp, r7
  40429c:	bd80      	pop	{r7, pc}
  40429e:	bf00      	nop
  4042a0:	0040419d 	.word	0x0040419d
  4042a4:	2000abcc 	.word	0x2000abcc
  4042a8:	00404201 	.word	0x00404201

004042ac <sysclk_enable_peripheral_clock>:
{
  4042ac:	b580      	push	{r7, lr}
  4042ae:	b082      	sub	sp, #8
  4042b0:	af00      	add	r7, sp, #0
  4042b2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4042b4:	6878      	ldr	r0, [r7, #4]
  4042b6:	4b03      	ldr	r3, [pc, #12]	; (4042c4 <sysclk_enable_peripheral_clock+0x18>)
  4042b8:	4798      	blx	r3
}
  4042ba:	bf00      	nop
  4042bc:	3708      	adds	r7, #8
  4042be:	46bd      	mov	sp, r7
  4042c0:	bd80      	pop	{r7, pc}
  4042c2:	bf00      	nop
  4042c4:	00406155 	.word	0x00406155

004042c8 <ioport_init>:
{
  4042c8:	b580      	push	{r7, lr}
  4042ca:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  4042cc:	2009      	movs	r0, #9
  4042ce:	4b08      	ldr	r3, [pc, #32]	; (4042f0 <ioport_init+0x28>)
  4042d0:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  4042d2:	200a      	movs	r0, #10
  4042d4:	4b06      	ldr	r3, [pc, #24]	; (4042f0 <ioport_init+0x28>)
  4042d6:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  4042d8:	200b      	movs	r0, #11
  4042da:	4b05      	ldr	r3, [pc, #20]	; (4042f0 <ioport_init+0x28>)
  4042dc:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  4042de:	200c      	movs	r0, #12
  4042e0:	4b03      	ldr	r3, [pc, #12]	; (4042f0 <ioport_init+0x28>)
  4042e2:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  4042e4:	200d      	movs	r0, #13
  4042e6:	4b02      	ldr	r3, [pc, #8]	; (4042f0 <ioport_init+0x28>)
  4042e8:	4798      	blx	r3
}
  4042ea:	bf00      	nop
  4042ec:	bd80      	pop	{r7, pc}
  4042ee:	bf00      	nop
  4042f0:	004042ad 	.word	0x004042ad

004042f4 <ioport_disable_pin>:
{
  4042f4:	b480      	push	{r7}
  4042f6:	b089      	sub	sp, #36	; 0x24
  4042f8:	af00      	add	r7, sp, #0
  4042fa:	6078      	str	r0, [r7, #4]
  4042fc:	687b      	ldr	r3, [r7, #4]
  4042fe:	61fb      	str	r3, [r7, #28]
  404300:	69fb      	ldr	r3, [r7, #28]
  404302:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  404304:	69bb      	ldr	r3, [r7, #24]
  404306:	095a      	lsrs	r2, r3, #5
  404308:	69fb      	ldr	r3, [r7, #28]
  40430a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40430c:	697b      	ldr	r3, [r7, #20]
  40430e:	f003 031f 	and.w	r3, r3, #31
  404312:	2101      	movs	r1, #1
  404314:	fa01 f303 	lsl.w	r3, r1, r3
  404318:	613a      	str	r2, [r7, #16]
  40431a:	60fb      	str	r3, [r7, #12]
  40431c:	693b      	ldr	r3, [r7, #16]
  40431e:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404320:	68bb      	ldr	r3, [r7, #8]
  404322:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404326:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40432a:	025b      	lsls	r3, r3, #9
  40432c:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40432e:	68fb      	ldr	r3, [r7, #12]
  404330:	6053      	str	r3, [r2, #4]
}
  404332:	bf00      	nop
  404334:	3724      	adds	r7, #36	; 0x24
  404336:	46bd      	mov	sp, r7
  404338:	f85d 7b04 	ldr.w	r7, [sp], #4
  40433c:	4770      	bx	lr

0040433e <ioport_set_pin_mode>:
{
  40433e:	b480      	push	{r7}
  404340:	b08d      	sub	sp, #52	; 0x34
  404342:	af00      	add	r7, sp, #0
  404344:	6078      	str	r0, [r7, #4]
  404346:	6039      	str	r1, [r7, #0]
  404348:	687b      	ldr	r3, [r7, #4]
  40434a:	62fb      	str	r3, [r7, #44]	; 0x2c
  40434c:	683b      	ldr	r3, [r7, #0]
  40434e:	62bb      	str	r3, [r7, #40]	; 0x28
  404350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404352:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  404354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404356:	095a      	lsrs	r2, r3, #5
  404358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40435a:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40435c:	6a3b      	ldr	r3, [r7, #32]
  40435e:	f003 031f 	and.w	r3, r3, #31
  404362:	2101      	movs	r1, #1
  404364:	fa01 f303 	lsl.w	r3, r1, r3
  404368:	61fa      	str	r2, [r7, #28]
  40436a:	61bb      	str	r3, [r7, #24]
  40436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40436e:	617b      	str	r3, [r7, #20]
  404370:	69fb      	ldr	r3, [r7, #28]
  404372:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404374:	693b      	ldr	r3, [r7, #16]
  404376:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40437a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40437e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  404380:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  404382:	697b      	ldr	r3, [r7, #20]
  404384:	f003 0308 	and.w	r3, r3, #8
  404388:	2b00      	cmp	r3, #0
  40438a:	d003      	beq.n	404394 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  40438c:	68fb      	ldr	r3, [r7, #12]
  40438e:	69ba      	ldr	r2, [r7, #24]
  404390:	665a      	str	r2, [r3, #100]	; 0x64
  404392:	e002      	b.n	40439a <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  404394:	68fb      	ldr	r3, [r7, #12]
  404396:	69ba      	ldr	r2, [r7, #24]
  404398:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  40439a:	697b      	ldr	r3, [r7, #20]
  40439c:	f003 0310 	and.w	r3, r3, #16
  4043a0:	2b00      	cmp	r3, #0
  4043a2:	d004      	beq.n	4043ae <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  4043a4:	68fb      	ldr	r3, [r7, #12]
  4043a6:	69ba      	ldr	r2, [r7, #24]
  4043a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4043ac:	e003      	b.n	4043b6 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  4043ae:	68fb      	ldr	r3, [r7, #12]
  4043b0:	69ba      	ldr	r2, [r7, #24]
  4043b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4043b6:	697b      	ldr	r3, [r7, #20]
  4043b8:	f003 0320 	and.w	r3, r3, #32
  4043bc:	2b00      	cmp	r3, #0
  4043be:	d003      	beq.n	4043c8 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  4043c0:	68fb      	ldr	r3, [r7, #12]
  4043c2:	69ba      	ldr	r2, [r7, #24]
  4043c4:	651a      	str	r2, [r3, #80]	; 0x50
  4043c6:	e002      	b.n	4043ce <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  4043c8:	68fb      	ldr	r3, [r7, #12]
  4043ca:	69ba      	ldr	r2, [r7, #24]
  4043cc:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4043ce:	697b      	ldr	r3, [r7, #20]
  4043d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4043d4:	2b00      	cmp	r3, #0
  4043d6:	d003      	beq.n	4043e0 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4043d8:	68fb      	ldr	r3, [r7, #12]
  4043da:	69ba      	ldr	r2, [r7, #24]
  4043dc:	621a      	str	r2, [r3, #32]
  4043de:	e002      	b.n	4043e6 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  4043e0:	68fb      	ldr	r3, [r7, #12]
  4043e2:	69ba      	ldr	r2, [r7, #24]
  4043e4:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4043e6:	697b      	ldr	r3, [r7, #20]
  4043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4043ec:	2b00      	cmp	r3, #0
  4043ee:	d004      	beq.n	4043fa <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  4043f0:	68fb      	ldr	r3, [r7, #12]
  4043f2:	69ba      	ldr	r2, [r7, #24]
  4043f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4043f8:	e003      	b.n	404402 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  4043fa:	68fb      	ldr	r3, [r7, #12]
  4043fc:	69ba      	ldr	r2, [r7, #24]
  4043fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  404402:	697b      	ldr	r3, [r7, #20]
  404404:	f003 0301 	and.w	r3, r3, #1
  404408:	2b00      	cmp	r3, #0
  40440a:	d006      	beq.n	40441a <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  40440c:	68fb      	ldr	r3, [r7, #12]
  40440e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  404410:	69bb      	ldr	r3, [r7, #24]
  404412:	431a      	orrs	r2, r3
  404414:	68fb      	ldr	r3, [r7, #12]
  404416:	671a      	str	r2, [r3, #112]	; 0x70
  404418:	e006      	b.n	404428 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  40441a:	68fb      	ldr	r3, [r7, #12]
  40441c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40441e:	69bb      	ldr	r3, [r7, #24]
  404420:	43db      	mvns	r3, r3
  404422:	401a      	ands	r2, r3
  404424:	68fb      	ldr	r3, [r7, #12]
  404426:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  404428:	697b      	ldr	r3, [r7, #20]
  40442a:	f003 0302 	and.w	r3, r3, #2
  40442e:	2b00      	cmp	r3, #0
  404430:	d006      	beq.n	404440 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  404432:	68fb      	ldr	r3, [r7, #12]
  404434:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404436:	69bb      	ldr	r3, [r7, #24]
  404438:	431a      	orrs	r2, r3
  40443a:	68fb      	ldr	r3, [r7, #12]
  40443c:	675a      	str	r2, [r3, #116]	; 0x74
}
  40443e:	e006      	b.n	40444e <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  404440:	68fb      	ldr	r3, [r7, #12]
  404442:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404444:	69bb      	ldr	r3, [r7, #24]
  404446:	43db      	mvns	r3, r3
  404448:	401a      	ands	r2, r3
  40444a:	68fb      	ldr	r3, [r7, #12]
  40444c:	675a      	str	r2, [r3, #116]	; 0x74
  40444e:	bf00      	nop
  404450:	3734      	adds	r7, #52	; 0x34
  404452:	46bd      	mov	sp, r7
  404454:	f85d 7b04 	ldr.w	r7, [sp], #4
  404458:	4770      	bx	lr

0040445a <ioport_set_pin_dir>:
{
  40445a:	b480      	push	{r7}
  40445c:	b08d      	sub	sp, #52	; 0x34
  40445e:	af00      	add	r7, sp, #0
  404460:	6078      	str	r0, [r7, #4]
  404462:	460b      	mov	r3, r1
  404464:	70fb      	strb	r3, [r7, #3]
  404466:	687b      	ldr	r3, [r7, #4]
  404468:	62fb      	str	r3, [r7, #44]	; 0x2c
  40446a:	78fb      	ldrb	r3, [r7, #3]
  40446c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  404470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404472:	627b      	str	r3, [r7, #36]	; 0x24
  404474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404476:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  404478:	6a3b      	ldr	r3, [r7, #32]
  40447a:	095b      	lsrs	r3, r3, #5
  40447c:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40447e:	69fb      	ldr	r3, [r7, #28]
  404480:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404484:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404488:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  40448a:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  40448c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  404490:	2b01      	cmp	r3, #1
  404492:	d109      	bne.n	4044a8 <ioport_set_pin_dir+0x4e>
  404494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404496:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  404498:	697b      	ldr	r3, [r7, #20]
  40449a:	f003 031f 	and.w	r3, r3, #31
  40449e:	2201      	movs	r2, #1
  4044a0:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4044a2:	69bb      	ldr	r3, [r7, #24]
  4044a4:	611a      	str	r2, [r3, #16]
  4044a6:	e00c      	b.n	4044c2 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4044a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4044ac:	2b00      	cmp	r3, #0
  4044ae:	d108      	bne.n	4044c2 <ioport_set_pin_dir+0x68>
  4044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4044b2:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4044b4:	693b      	ldr	r3, [r7, #16]
  4044b6:	f003 031f 	and.w	r3, r3, #31
  4044ba:	2201      	movs	r2, #1
  4044bc:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4044be:	69bb      	ldr	r3, [r7, #24]
  4044c0:	615a      	str	r2, [r3, #20]
  4044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4044c4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4044c6:	68fb      	ldr	r3, [r7, #12]
  4044c8:	f003 031f 	and.w	r3, r3, #31
  4044cc:	2201      	movs	r2, #1
  4044ce:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4044d0:	69bb      	ldr	r3, [r7, #24]
  4044d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  4044d6:	bf00      	nop
  4044d8:	3734      	adds	r7, #52	; 0x34
  4044da:	46bd      	mov	sp, r7
  4044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4044e0:	4770      	bx	lr

004044e2 <ioport_set_pin_level>:
{
  4044e2:	b480      	push	{r7}
  4044e4:	b08b      	sub	sp, #44	; 0x2c
  4044e6:	af00      	add	r7, sp, #0
  4044e8:	6078      	str	r0, [r7, #4]
  4044ea:	460b      	mov	r3, r1
  4044ec:	70fb      	strb	r3, [r7, #3]
  4044ee:	687b      	ldr	r3, [r7, #4]
  4044f0:	627b      	str	r3, [r7, #36]	; 0x24
  4044f2:	78fb      	ldrb	r3, [r7, #3]
  4044f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4044fa:	61fb      	str	r3, [r7, #28]
  4044fc:	69fb      	ldr	r3, [r7, #28]
  4044fe:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  404500:	69bb      	ldr	r3, [r7, #24]
  404502:	095b      	lsrs	r3, r3, #5
  404504:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404506:	697b      	ldr	r3, [r7, #20]
  404508:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40450c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404510:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  404512:	613b      	str	r3, [r7, #16]
	if (level) {
  404514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  404518:	2b00      	cmp	r3, #0
  40451a:	d009      	beq.n	404530 <ioport_set_pin_level+0x4e>
  40451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40451e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  404520:	68fb      	ldr	r3, [r7, #12]
  404522:	f003 031f 	and.w	r3, r3, #31
  404526:	2201      	movs	r2, #1
  404528:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40452a:	693b      	ldr	r3, [r7, #16]
  40452c:	631a      	str	r2, [r3, #48]	; 0x30
}
  40452e:	e008      	b.n	404542 <ioport_set_pin_level+0x60>
  404530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404532:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  404534:	68bb      	ldr	r3, [r7, #8]
  404536:	f003 031f 	and.w	r3, r3, #31
  40453a:	2201      	movs	r2, #1
  40453c:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40453e:	693b      	ldr	r3, [r7, #16]
  404540:	635a      	str	r2, [r3, #52]	; 0x34
  404542:	bf00      	nop
  404544:	372c      	adds	r7, #44	; 0x2c
  404546:	46bd      	mov	sp, r7
  404548:	f85d 7b04 	ldr.w	r7, [sp], #4
  40454c:	4770      	bx	lr
	...

00404550 <ioport_set_pin_sense_mode>:
{
  404550:	b480      	push	{r7}
  404552:	b08d      	sub	sp, #52	; 0x34
  404554:	af00      	add	r7, sp, #0
  404556:	6078      	str	r0, [r7, #4]
  404558:	460b      	mov	r3, r1
  40455a:	70fb      	strb	r3, [r7, #3]
  40455c:	687b      	ldr	r3, [r7, #4]
  40455e:	62fb      	str	r3, [r7, #44]	; 0x2c
  404560:	78fb      	ldrb	r3, [r7, #3]
  404562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  404566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404568:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40456c:	095a      	lsrs	r2, r3, #5
  40456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404570:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  404572:	6a3b      	ldr	r3, [r7, #32]
  404574:	f003 031f 	and.w	r3, r3, #31
  404578:	2101      	movs	r1, #1
  40457a:	fa01 f303 	lsl.w	r3, r1, r3
  40457e:	61fa      	str	r2, [r7, #28]
  404580:	61bb      	str	r3, [r7, #24]
  404582:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  404586:	75fb      	strb	r3, [r7, #23]
  404588:	69fb      	ldr	r3, [r7, #28]
  40458a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40458c:	693b      	ldr	r3, [r7, #16]
  40458e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404592:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404596:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  404598:	60fb      	str	r3, [r7, #12]
	switch(pin_sense) {
  40459a:	7dfb      	ldrb	r3, [r7, #23]
  40459c:	3b01      	subs	r3, #1
  40459e:	2b03      	cmp	r3, #3
  4045a0:	d82e      	bhi.n	404600 <ioport_set_pin_sense_mode+0xb0>
  4045a2:	a201      	add	r2, pc, #4	; (adr r2, 4045a8 <ioport_set_pin_sense_mode+0x58>)
  4045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4045a8:	004045dd 	.word	0x004045dd
  4045ac:	004045ef 	.word	0x004045ef
  4045b0:	004045b9 	.word	0x004045b9
  4045b4:	004045cb 	.word	0x004045cb
		base->PIO_LSR = mask;
  4045b8:	68fb      	ldr	r3, [r7, #12]
  4045ba:	69ba      	ldr	r2, [r7, #24]
  4045bc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  4045c0:	68fb      	ldr	r3, [r7, #12]
  4045c2:	69ba      	ldr	r2, [r7, #24]
  4045c4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4045c8:	e01f      	b.n	40460a <ioport_set_pin_sense_mode+0xba>
		base->PIO_LSR = mask;
  4045ca:	68fb      	ldr	r3, [r7, #12]
  4045cc:	69ba      	ldr	r2, [r7, #24]
  4045ce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4045d2:	68fb      	ldr	r3, [r7, #12]
  4045d4:	69ba      	ldr	r2, [r7, #24]
  4045d6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4045da:	e016      	b.n	40460a <ioport_set_pin_sense_mode+0xba>
		base->PIO_ESR = mask;
  4045dc:	68fb      	ldr	r3, [r7, #12]
  4045de:	69ba      	ldr	r2, [r7, #24]
  4045e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4045e4:	68fb      	ldr	r3, [r7, #12]
  4045e6:	69ba      	ldr	r2, [r7, #24]
  4045e8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4045ec:	e00d      	b.n	40460a <ioport_set_pin_sense_mode+0xba>
		base->PIO_ESR = mask;
  4045ee:	68fb      	ldr	r3, [r7, #12]
  4045f0:	69ba      	ldr	r2, [r7, #24]
  4045f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4045f6:	68fb      	ldr	r3, [r7, #12]
  4045f8:	69ba      	ldr	r2, [r7, #24]
  4045fa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4045fe:	e004      	b.n	40460a <ioport_set_pin_sense_mode+0xba>
		base->PIO_AIMDR = mask;
  404600:	68fb      	ldr	r3, [r7, #12]
  404602:	69ba      	ldr	r2, [r7, #24]
  404604:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  404608:	e003      	b.n	404612 <ioport_set_pin_sense_mode+0xc2>
	base->PIO_AIMER = mask;
  40460a:	68fb      	ldr	r3, [r7, #12]
  40460c:	69ba      	ldr	r2, [r7, #24]
  40460e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  404612:	bf00      	nop
  404614:	3734      	adds	r7, #52	; 0x34
  404616:	46bd      	mov	sp, r7
  404618:	f85d 7b04 	ldr.w	r7, [sp], #4
  40461c:	4770      	bx	lr
  40461e:	bf00      	nop

00404620 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  404620:	b580      	push	{r7, lr}
  404622:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404624:	4b34      	ldr	r3, [pc, #208]	; (4046f8 <board_init+0xd8>)
  404626:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40462a:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  40462c:	4b33      	ldr	r3, [pc, #204]	; (4046fc <board_init+0xdc>)
  40462e:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  404630:	2101      	movs	r1, #1
  404632:	2076      	movs	r0, #118	; 0x76
  404634:	4b32      	ldr	r3, [pc, #200]	; (404700 <board_init+0xe0>)
  404636:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  404638:	2101      	movs	r1, #1
  40463a:	2076      	movs	r0, #118	; 0x76
  40463c:	4b31      	ldr	r3, [pc, #196]	; (404704 <board_init+0xe4>)
  40463e:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  404640:	2100      	movs	r1, #0
  404642:	2002      	movs	r0, #2
  404644:	4b2e      	ldr	r3, [pc, #184]	; (404700 <board_init+0xe0>)
  404646:	4798      	blx	r3
  404648:	2188      	movs	r1, #136	; 0x88
  40464a:	2002      	movs	r0, #2
  40464c:	4b2e      	ldr	r3, [pc, #184]	; (404708 <board_init+0xe8>)
  40464e:	4798      	blx	r3
  404650:	2102      	movs	r1, #2
  404652:	2002      	movs	r0, #2
  404654:	4b2d      	ldr	r3, [pc, #180]	; (40470c <board_init+0xec>)
  404656:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
#endif

#ifdef CONF_BOARD_CAN
	/* Configure the CAN1 TX and RX pin. */
	ioport_set_pin_peripheral_mode(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
  404658:	2102      	movs	r1, #2
  40465a:	204c      	movs	r0, #76	; 0x4c
  40465c:	4b2a      	ldr	r3, [pc, #168]	; (404708 <board_init+0xe8>)
  40465e:	4798      	blx	r3
  404660:	204c      	movs	r0, #76	; 0x4c
  404662:	4b2b      	ldr	r3, [pc, #172]	; (404710 <board_init+0xf0>)
  404664:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
  404666:	2102      	movs	r1, #2
  404668:	204f      	movs	r0, #79	; 0x4f
  40466a:	4b27      	ldr	r3, [pc, #156]	; (404708 <board_init+0xe8>)
  40466c:	4798      	blx	r3
  40466e:	204f      	movs	r0, #79	; 0x4f
  404670:	4b27      	ldr	r3, [pc, #156]	; (404710 <board_init+0xf0>)
  404672:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	ioport_set_pin_dir(PIN_CAN1_TR_RS_IDX, IOPORT_DIR_OUTPUT);
  404674:	2101      	movs	r1, #1
  404676:	2082      	movs	r0, #130	; 0x82
  404678:	4b21      	ldr	r3, [pc, #132]	; (404700 <board_init+0xe0>)
  40467a:	4798      	blx	r3
	ioport_set_pin_dir(PIN_CAN1_TR_EN_IDX, IOPORT_DIR_OUTPUT);
  40467c:	2101      	movs	r1, #1
  40467e:	2083      	movs	r0, #131	; 0x83
  404680:	4b1f      	ldr	r3, [pc, #124]	; (404700 <board_init+0xe0>)
  404682:	4798      	blx	r3
#  endif
#endif

#if defined (CONF_BOARD_SD_MMC_HSMCI)
	/* Configure HSMCI pins */
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
  404684:	2102      	movs	r1, #2
  404686:	201c      	movs	r0, #28
  404688:	4b1f      	ldr	r3, [pc, #124]	; (404708 <board_init+0xe8>)
  40468a:	4798      	blx	r3
  40468c:	201c      	movs	r0, #28
  40468e:	4b20      	ldr	r3, [pc, #128]	; (404710 <board_init+0xf0>)
  404690:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
  404692:	2102      	movs	r1, #2
  404694:	201d      	movs	r0, #29
  404696:	4b1c      	ldr	r3, [pc, #112]	; (404708 <board_init+0xe8>)
  404698:	4798      	blx	r3
  40469a:	201d      	movs	r0, #29
  40469c:	4b1c      	ldr	r3, [pc, #112]	; (404710 <board_init+0xf0>)
  40469e:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
  4046a0:	2102      	movs	r1, #2
  4046a2:	201e      	movs	r0, #30
  4046a4:	4b18      	ldr	r3, [pc, #96]	; (404708 <board_init+0xe8>)
  4046a6:	4798      	blx	r3
  4046a8:	201e      	movs	r0, #30
  4046aa:	4b19      	ldr	r3, [pc, #100]	; (404710 <board_init+0xf0>)
  4046ac:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
  4046ae:	2102      	movs	r1, #2
  4046b0:	201f      	movs	r0, #31
  4046b2:	4b15      	ldr	r3, [pc, #84]	; (404708 <board_init+0xe8>)
  4046b4:	4798      	blx	r3
  4046b6:	201f      	movs	r0, #31
  4046b8:	4b15      	ldr	r3, [pc, #84]	; (404710 <board_init+0xf0>)
  4046ba:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
  4046bc:	2102      	movs	r1, #2
  4046be:	201a      	movs	r0, #26
  4046c0:	4b11      	ldr	r3, [pc, #68]	; (404708 <board_init+0xe8>)
  4046c2:	4798      	blx	r3
  4046c4:	201a      	movs	r0, #26
  4046c6:	4b12      	ldr	r3, [pc, #72]	; (404710 <board_init+0xf0>)
  4046c8:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
  4046ca:	2102      	movs	r1, #2
  4046cc:	201b      	movs	r0, #27
  4046ce:	4b0e      	ldr	r3, [pc, #56]	; (404708 <board_init+0xe8>)
  4046d0:	4798      	blx	r3
  4046d2:	201b      	movs	r0, #27
  4046d4:	4b0e      	ldr	r3, [pc, #56]	; (404710 <board_init+0xf0>)
  4046d6:	4798      	blx	r3
	ioport_set_pin_dir(AT86RFX_SLP_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(AT86RFX_SLP_PIN, IOPORT_PIN_LEVEL_HIGH);
#endif  

#if (defined(CONF_BOARD_TWI0) || defined(CONF_BOARD_EDBG_TWI))
	ioport_set_pin_peripheral_mode(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4046d8:	2100      	movs	r1, #0
  4046da:	2003      	movs	r0, #3
  4046dc:	4b0a      	ldr	r3, [pc, #40]	; (404708 <board_init+0xe8>)
  4046de:	4798      	blx	r3
  4046e0:	2003      	movs	r0, #3
  4046e2:	4b0b      	ldr	r3, [pc, #44]	; (404710 <board_init+0xf0>)
  4046e4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4046e6:	2100      	movs	r1, #0
  4046e8:	2004      	movs	r0, #4
  4046ea:	4b07      	ldr	r3, [pc, #28]	; (404708 <board_init+0xe8>)
  4046ec:	4798      	blx	r3
  4046ee:	2004      	movs	r0, #4
  4046f0:	4b07      	ldr	r3, [pc, #28]	; (404710 <board_init+0xf0>)
  4046f2:	4798      	blx	r3
#endif

}
  4046f4:	bf00      	nop
  4046f6:	bd80      	pop	{r7, pc}
  4046f8:	400e1850 	.word	0x400e1850
  4046fc:	004042c9 	.word	0x004042c9
  404700:	0040445b 	.word	0x0040445b
  404704:	004044e3 	.word	0x004044e3
  404708:	0040433f 	.word	0x0040433f
  40470c:	00404551 	.word	0x00404551
  404710:	004042f5 	.word	0x004042f5

00404714 <osc_get_rate>:
{
  404714:	b480      	push	{r7}
  404716:	b083      	sub	sp, #12
  404718:	af00      	add	r7, sp, #0
  40471a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40471c:	687b      	ldr	r3, [r7, #4]
  40471e:	2b07      	cmp	r3, #7
  404720:	d825      	bhi.n	40476e <osc_get_rate+0x5a>
  404722:	a201      	add	r2, pc, #4	; (adr r2, 404728 <osc_get_rate+0x14>)
  404724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404728:	00404749 	.word	0x00404749
  40472c:	0040474f 	.word	0x0040474f
  404730:	00404755 	.word	0x00404755
  404734:	0040475b 	.word	0x0040475b
  404738:	0040475f 	.word	0x0040475f
  40473c:	00404763 	.word	0x00404763
  404740:	00404767 	.word	0x00404767
  404744:	0040476b 	.word	0x0040476b
		return OSC_SLCK_32K_RC_HZ;
  404748:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40474c:	e010      	b.n	404770 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404752:	e00d      	b.n	404770 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  404754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404758:	e00a      	b.n	404770 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40475a:	4b08      	ldr	r3, [pc, #32]	; (40477c <osc_get_rate+0x68>)
  40475c:	e008      	b.n	404770 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40475e:	4b08      	ldr	r3, [pc, #32]	; (404780 <osc_get_rate+0x6c>)
  404760:	e006      	b.n	404770 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  404762:	4b08      	ldr	r3, [pc, #32]	; (404784 <osc_get_rate+0x70>)
  404764:	e004      	b.n	404770 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  404766:	4b07      	ldr	r3, [pc, #28]	; (404784 <osc_get_rate+0x70>)
  404768:	e002      	b.n	404770 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40476a:	4b06      	ldr	r3, [pc, #24]	; (404784 <osc_get_rate+0x70>)
  40476c:	e000      	b.n	404770 <osc_get_rate+0x5c>
	return 0;
  40476e:	2300      	movs	r3, #0
}
  404770:	4618      	mov	r0, r3
  404772:	370c      	adds	r7, #12
  404774:	46bd      	mov	sp, r7
  404776:	f85d 7b04 	ldr.w	r7, [sp], #4
  40477a:	4770      	bx	lr
  40477c:	003d0900 	.word	0x003d0900
  404780:	007a1200 	.word	0x007a1200
  404784:	00b71b00 	.word	0x00b71b00

00404788 <sysclk_get_main_hz>:
{
  404788:	b580      	push	{r7, lr}
  40478a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40478c:	2006      	movs	r0, #6
  40478e:	4b03      	ldr	r3, [pc, #12]	; (40479c <sysclk_get_main_hz+0x14>)
  404790:	4798      	blx	r3
  404792:	4603      	mov	r3, r0
  404794:	011b      	lsls	r3, r3, #4
}
  404796:	4618      	mov	r0, r3
  404798:	bd80      	pop	{r7, pc}
  40479a:	bf00      	nop
  40479c:	00404715 	.word	0x00404715

004047a0 <sysclk_get_peripheral_hz>:
{
  4047a0:	b580      	push	{r7, lr}
  4047a2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4047a4:	4b02      	ldr	r3, [pc, #8]	; (4047b0 <sysclk_get_peripheral_hz+0x10>)
  4047a6:	4798      	blx	r3
  4047a8:	4603      	mov	r3, r0
  4047aa:	085b      	lsrs	r3, r3, #1
}
  4047ac:	4618      	mov	r0, r3
  4047ae:	bd80      	pop	{r7, pc}
  4047b0:	00404789 	.word	0x00404789

004047b4 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  4047b4:	b480      	push	{r7}
  4047b6:	b087      	sub	sp, #28
  4047b8:	af00      	add	r7, sp, #0
	uint32_t mr = HSMCI->HSMCI_MR;
  4047ba:	4b15      	ldr	r3, [pc, #84]	; (404810 <hsmci_reset+0x5c>)
  4047bc:	685b      	ldr	r3, [r3, #4]
  4047be:	617b      	str	r3, [r7, #20]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  4047c0:	4b13      	ldr	r3, [pc, #76]	; (404810 <hsmci_reset+0x5c>)
  4047c2:	689b      	ldr	r3, [r3, #8]
  4047c4:	613b      	str	r3, [r7, #16]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  4047c6:	4b12      	ldr	r3, [pc, #72]	; (404810 <hsmci_reset+0x5c>)
  4047c8:	68db      	ldr	r3, [r3, #12]
  4047ca:	60fb      	str	r3, [r7, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  4047cc:	4b10      	ldr	r3, [pc, #64]	; (404810 <hsmci_reset+0x5c>)
  4047ce:	69db      	ldr	r3, [r3, #28]
  4047d0:	60bb      	str	r3, [r7, #8]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  4047d2:	4b0f      	ldr	r3, [pc, #60]	; (404810 <hsmci_reset+0x5c>)
  4047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  4047d6:	607b      	str	r3, [r7, #4]
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  4047d8:	4b0d      	ldr	r3, [pc, #52]	; (404810 <hsmci_reset+0x5c>)
  4047da:	2280      	movs	r2, #128	; 0x80
  4047dc:	601a      	str	r2, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  4047de:	4a0c      	ldr	r2, [pc, #48]	; (404810 <hsmci_reset+0x5c>)
  4047e0:	697b      	ldr	r3, [r7, #20]
  4047e2:	6053      	str	r3, [r2, #4]
	HSMCI->HSMCI_DTOR = dtor;
  4047e4:	4a0a      	ldr	r2, [pc, #40]	; (404810 <hsmci_reset+0x5c>)
  4047e6:	693b      	ldr	r3, [r7, #16]
  4047e8:	6093      	str	r3, [r2, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  4047ea:	4a09      	ldr	r2, [pc, #36]	; (404810 <hsmci_reset+0x5c>)
  4047ec:	68fb      	ldr	r3, [r7, #12]
  4047ee:	60d3      	str	r3, [r2, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  4047f0:	4a07      	ldr	r2, [pc, #28]	; (404810 <hsmci_reset+0x5c>)
  4047f2:	68bb      	ldr	r3, [r7, #8]
  4047f4:	61d3      	str	r3, [r2, #28]
	HSMCI->HSMCI_CFG = cfg;
  4047f6:	4a06      	ldr	r2, [pc, #24]	; (404810 <hsmci_reset+0x5c>)
  4047f8:	687b      	ldr	r3, [r7, #4]
  4047fa:	6553      	str	r3, [r2, #84]	; 0x54
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  4047fc:	4b04      	ldr	r3, [pc, #16]	; (404810 <hsmci_reset+0x5c>)
  4047fe:	2205      	movs	r2, #5
  404800:	601a      	str	r2, [r3, #0]
}
  404802:	bf00      	nop
  404804:	371c      	adds	r7, #28
  404806:	46bd      	mov	sp, r7
  404808:	f85d 7b04 	ldr.w	r7, [sp], #4
  40480c:	4770      	bx	lr
  40480e:	bf00      	nop
  404810:	40080000 	.word	0x40080000

00404814 <hsmci_set_speed>:
 *
 * \param speed    HSMCI clock speed in Hz.
 * \param mck      MCK clock speed in Hz.
 */
static void hsmci_set_speed(uint32_t speed, uint32_t mck)
{
  404814:	b480      	push	{r7}
  404816:	b087      	sub	sp, #28
  404818:	af00      	add	r7, sp, #0
  40481a:	6078      	str	r0, [r7, #4]
  40481c:	6039      	str	r1, [r7, #0]
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	uint32_t clkdiv = 0;
  40481e:	2300      	movs	r3, #0
  404820:	617b      	str	r3, [r7, #20]
	uint32_t clkodd = 0;
  404822:	2300      	movs	r3, #0
  404824:	613b      	str	r3, [r7, #16]
	// clock divider, represent (((clkdiv << 1) + clkodd) + 2)
	uint32_t div = 0;
  404826:	2300      	movs	r3, #0
  404828:	60fb      	str	r3, [r7, #12]

	// Speed = MCK clock / (((clkdiv << 1) + clkodd) + 2)
	if ((speed * 2) < mck) {
  40482a:	687b      	ldr	r3, [r7, #4]
  40482c:	005a      	lsls	r2, r3, #1
  40482e:	683b      	ldr	r3, [r7, #0]
  404830:	429a      	cmp	r2, r3
  404832:	d21a      	bcs.n	40486a <hsmci_set_speed+0x56>
		div = (mck / speed) - 2;
  404834:	683a      	ldr	r2, [r7, #0]
  404836:	687b      	ldr	r3, [r7, #4]
  404838:	fbb2 f3f3 	udiv	r3, r2, r3
  40483c:	3b02      	subs	r3, #2
  40483e:	60fb      	str	r3, [r7, #12]
		if (mck % speed) {
  404840:	683b      	ldr	r3, [r7, #0]
  404842:	687a      	ldr	r2, [r7, #4]
  404844:	fbb3 f2f2 	udiv	r2, r3, r2
  404848:	6879      	ldr	r1, [r7, #4]
  40484a:	fb01 f202 	mul.w	r2, r1, r2
  40484e:	1a9b      	subs	r3, r3, r2
  404850:	2b00      	cmp	r3, #0
  404852:	d002      	beq.n	40485a <hsmci_set_speed+0x46>
			// Ensure that the card speed not be higher than expected.
			div++;
  404854:	68fb      	ldr	r3, [r7, #12]
  404856:	3301      	adds	r3, #1
  404858:	60fb      	str	r3, [r7, #12]
		}
		clkdiv = div >> 1;
  40485a:	68fb      	ldr	r3, [r7, #12]
  40485c:	085b      	lsrs	r3, r3, #1
  40485e:	617b      	str	r3, [r7, #20]
		// clkodd is the last significant bit of the clock divider (div).
		clkodd = div % 2;
  404860:	68fb      	ldr	r3, [r7, #12]
  404862:	f003 0301 	and.w	r3, r3, #1
  404866:	613b      	str	r3, [r7, #16]
  404868:	e003      	b.n	404872 <hsmci_set_speed+0x5e>
	} else {
		clkdiv = 0;
  40486a:	2300      	movs	r3, #0
  40486c:	617b      	str	r3, [r7, #20]
		clkodd = 0;
  40486e:	2300      	movs	r3, #0
  404870:	613b      	str	r3, [r7, #16]
	}

	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  404872:	4a11      	ldr	r2, [pc, #68]	; (4048b8 <hsmci_set_speed+0xa4>)
  404874:	4b10      	ldr	r3, [pc, #64]	; (4048b8 <hsmci_set_speed+0xa4>)
  404876:	685b      	ldr	r3, [r3, #4]
  404878:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  40487c:	6053      	str	r3, [r2, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  40487e:	490e      	ldr	r1, [pc, #56]	; (4048b8 <hsmci_set_speed+0xa4>)
  404880:	4b0d      	ldr	r3, [pc, #52]	; (4048b8 <hsmci_set_speed+0xa4>)
  404882:	685a      	ldr	r2, [r3, #4]
  404884:	697b      	ldr	r3, [r7, #20]
  404886:	b2db      	uxtb	r3, r3
  404888:	4313      	orrs	r3, r2
  40488a:	604b      	str	r3, [r1, #4]
	if (clkodd) {
  40488c:	693b      	ldr	r3, [r7, #16]
  40488e:	2b00      	cmp	r3, #0
  404890:	d006      	beq.n	4048a0 <hsmci_set_speed+0x8c>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  404892:	4a09      	ldr	r2, [pc, #36]	; (4048b8 <hsmci_set_speed+0xa4>)
  404894:	4b08      	ldr	r3, [pc, #32]	; (4048b8 <hsmci_set_speed+0xa4>)
  404896:	685b      	ldr	r3, [r3, #4]
  404898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40489c:	6053      	str	r3, [r2, #4]
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
#endif

}
  40489e:	e005      	b.n	4048ac <hsmci_set_speed+0x98>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  4048a0:	4a05      	ldr	r2, [pc, #20]	; (4048b8 <hsmci_set_speed+0xa4>)
  4048a2:	4b05      	ldr	r3, [pc, #20]	; (4048b8 <hsmci_set_speed+0xa4>)
  4048a4:	685b      	ldr	r3, [r3, #4]
  4048a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4048aa:	6053      	str	r3, [r2, #4]
}
  4048ac:	bf00      	nop
  4048ae:	371c      	adds	r7, #28
  4048b0:	46bd      	mov	sp, r7
  4048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048b6:	4770      	bx	lr
  4048b8:	40080000 	.word	0x40080000

004048bc <hsmci_wait_busy>:
/** \brief Wait the end of busy signal on data line
 *
 * \return true if success, otherwise false
 */
static bool hsmci_wait_busy(void)
{
  4048bc:	b580      	push	{r7, lr}
  4048be:	b082      	sub	sp, #8
  4048c0:	af00      	add	r7, sp, #0
	uint32_t busy_wait = 0xFFFFFFFF;
  4048c2:	f04f 33ff 	mov.w	r3, #4294967295
  4048c6:	607b      	str	r3, [r7, #4]
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  4048c8:	4b0d      	ldr	r3, [pc, #52]	; (404900 <hsmci_wait_busy+0x44>)
  4048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4048cc:	603b      	str	r3, [r7, #0]
		if (busy_wait-- == 0) {
  4048ce:	687b      	ldr	r3, [r7, #4]
  4048d0:	1e5a      	subs	r2, r3, #1
  4048d2:	607a      	str	r2, [r7, #4]
  4048d4:	2b00      	cmp	r3, #0
  4048d6:	d103      	bne.n	4048e0 <hsmci_wait_busy+0x24>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  4048d8:	4b0a      	ldr	r3, [pc, #40]	; (404904 <hsmci_wait_busy+0x48>)
  4048da:	4798      	blx	r3
			return false;
  4048dc:	2300      	movs	r3, #0
  4048de:	e00a      	b.n	4048f6 <hsmci_wait_busy+0x3a>
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  4048e0:	683b      	ldr	r3, [r7, #0]
  4048e2:	f003 0320 	and.w	r3, r3, #32
  4048e6:	2b00      	cmp	r3, #0
  4048e8:	d0ee      	beq.n	4048c8 <hsmci_wait_busy+0xc>
  4048ea:	683b      	ldr	r3, [r7, #0]
  4048ec:	f003 0310 	and.w	r3, r3, #16
  4048f0:	2b00      	cmp	r3, #0
  4048f2:	d1e9      	bne.n	4048c8 <hsmci_wait_busy+0xc>
	return true;
  4048f4:	2301      	movs	r3, #1
}
  4048f6:	4618      	mov	r0, r3
  4048f8:	3708      	adds	r7, #8
  4048fa:	46bd      	mov	sp, r7
  4048fc:	bd80      	pop	{r7, pc}
  4048fe:	bf00      	nop
  404900:	40080000 	.word	0x40080000
  404904:	004047b5 	.word	0x004047b5

00404908 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  404908:	b580      	push	{r7, lr}
  40490a:	b086      	sub	sp, #24
  40490c:	af00      	add	r7, sp, #0
  40490e:	60f8      	str	r0, [r7, #12]
  404910:	60b9      	str	r1, [r7, #8]
  404912:	607a      	str	r2, [r7, #4]
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  404914:	68bb      	ldr	r3, [r7, #8]
  404916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40491a:	68fa      	ldr	r2, [r7, #12]
  40491c:	4313      	orrs	r3, r2
  40491e:	60fb      	str	r3, [r7, #12]
	if (cmd & SDMMC_RESP_PRESENT) {
  404920:	68bb      	ldr	r3, [r7, #8]
  404922:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404926:	2b00      	cmp	r3, #0
  404928:	d01b      	beq.n	404962 <hsmci_send_cmd_execute+0x5a>
		cmdr |= HSMCI_CMDR_MAXLAT;
  40492a:	68fb      	ldr	r3, [r7, #12]
  40492c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  404930:	60fb      	str	r3, [r7, #12]
		if (cmd & SDMMC_RESP_136) {
  404932:	68bb      	ldr	r3, [r7, #8]
  404934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  404938:	2b00      	cmp	r3, #0
  40493a:	d004      	beq.n	404946 <hsmci_send_cmd_execute+0x3e>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  40493c:	68fb      	ldr	r3, [r7, #12]
  40493e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404942:	60fb      	str	r3, [r7, #12]
  404944:	e00d      	b.n	404962 <hsmci_send_cmd_execute+0x5a>
		} else if (cmd & SDMMC_RESP_BUSY) {
  404946:	68bb      	ldr	r3, [r7, #8]
  404948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40494c:	2b00      	cmp	r3, #0
  40494e:	d004      	beq.n	40495a <hsmci_send_cmd_execute+0x52>
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  404950:	68fb      	ldr	r3, [r7, #12]
  404952:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  404956:	60fb      	str	r3, [r7, #12]
  404958:	e003      	b.n	404962 <hsmci_send_cmd_execute+0x5a>
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  40495a:	68fb      	ldr	r3, [r7, #12]
  40495c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404960:	60fb      	str	r3, [r7, #12]
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  404962:	68bb      	ldr	r3, [r7, #8]
  404964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  404968:	2b00      	cmp	r3, #0
  40496a:	d003      	beq.n	404974 <hsmci_send_cmd_execute+0x6c>
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  40496c:	68fb      	ldr	r3, [r7, #12]
  40496e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404972:	60fb      	str	r3, [r7, #12]
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  404974:	4a1c      	ldr	r2, [pc, #112]	; (4049e8 <hsmci_send_cmd_execute+0xe0>)
  404976:	687b      	ldr	r3, [r7, #4]
  404978:	6113      	str	r3, [r2, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  40497a:	4a1b      	ldr	r2, [pc, #108]	; (4049e8 <hsmci_send_cmd_execute+0xe0>)
  40497c:	68fb      	ldr	r3, [r7, #12]
  40497e:	6153      	str	r3, [r2, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  404980:	4b19      	ldr	r3, [pc, #100]	; (4049e8 <hsmci_send_cmd_execute+0xe0>)
  404982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  404984:	617b      	str	r3, [r7, #20]
		if (cmd & SDMMC_RESP_CRC) {
  404986:	68bb      	ldr	r3, [r7, #8]
  404988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  40498c:	2b00      	cmp	r3, #0
  40498e:	d008      	beq.n	4049a2 <hsmci_send_cmd_execute+0x9a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  404990:	697b      	ldr	r3, [r7, #20]
  404992:	f403 031f 	and.w	r3, r3, #10420224	; 0x9f0000
  404996:	2b00      	cmp	r3, #0
  404998:	d00c      	beq.n	4049b4 <hsmci_send_cmd_execute+0xac>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  40499a:	4b14      	ldr	r3, [pc, #80]	; (4049ec <hsmci_send_cmd_execute+0xe4>)
  40499c:	4798      	blx	r3
				return false;
  40499e:	2300      	movs	r3, #0
  4049a0:	e01d      	b.n	4049de <hsmci_send_cmd_execute+0xd6>
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4049a2:	697b      	ldr	r3, [r7, #20]
  4049a4:	f403 031b 	and.w	r3, r3, #10158080	; 0x9b0000
  4049a8:	2b00      	cmp	r3, #0
  4049aa:	d003      	beq.n	4049b4 <hsmci_send_cmd_execute+0xac>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  4049ac:	4b0f      	ldr	r3, [pc, #60]	; (4049ec <hsmci_send_cmd_execute+0xe4>)
  4049ae:	4798      	blx	r3
				return false;
  4049b0:	2300      	movs	r3, #0
  4049b2:	e014      	b.n	4049de <hsmci_send_cmd_execute+0xd6>
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4049b4:	697b      	ldr	r3, [r7, #20]
  4049b6:	f003 0301 	and.w	r3, r3, #1
  4049ba:	2b00      	cmp	r3, #0
  4049bc:	d0e0      	beq.n	404980 <hsmci_send_cmd_execute+0x78>

	if (cmd & SDMMC_RESP_BUSY) {
  4049be:	68bb      	ldr	r3, [r7, #8]
  4049c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  4049c4:	2b00      	cmp	r3, #0
  4049c6:	d009      	beq.n	4049dc <hsmci_send_cmd_execute+0xd4>
		if (!hsmci_wait_busy()) {
  4049c8:	4b09      	ldr	r3, [pc, #36]	; (4049f0 <hsmci_send_cmd_execute+0xe8>)
  4049ca:	4798      	blx	r3
  4049cc:	4603      	mov	r3, r0
  4049ce:	f083 0301 	eor.w	r3, r3, #1
  4049d2:	b2db      	uxtb	r3, r3
  4049d4:	2b00      	cmp	r3, #0
  4049d6:	d001      	beq.n	4049dc <hsmci_send_cmd_execute+0xd4>
			return false;
  4049d8:	2300      	movs	r3, #0
  4049da:	e000      	b.n	4049de <hsmci_send_cmd_execute+0xd6>
		}
	}
	return true;
  4049dc:	2301      	movs	r3, #1
}
  4049de:	4618      	mov	r0, r3
  4049e0:	3718      	adds	r7, #24
  4049e2:	46bd      	mov	sp, r7
  4049e4:	bd80      	pop	{r7, pc}
  4049e6:	bf00      	nop
  4049e8:	40080000 	.word	0x40080000
  4049ec:	004047b5 	.word	0x004047b5
  4049f0:	004048bd 	.word	0x004048bd

004049f4 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  4049f4:	b580      	push	{r7, lr}
  4049f6:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_HSMCI);
  4049f8:	2010      	movs	r0, #16
  4049fa:	4b0a      	ldr	r3, [pc, #40]	; (404a24 <hsmci_init+0x30>)
  4049fc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_XDMAC);
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  4049fe:	4b0a      	ldr	r3, [pc, #40]	; (404a28 <hsmci_init+0x34>)
  404a00:	2272      	movs	r2, #114	; 0x72
  404a02:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  404a04:	4b08      	ldr	r3, [pc, #32]	; (404a28 <hsmci_init+0x34>)
  404a06:	2272      	movs	r2, #114	; 0x72
  404a08:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  404a0a:	4b07      	ldr	r3, [pc, #28]	; (404a28 <hsmci_init+0x34>)
  404a0c:	2211      	movs	r2, #17
  404a0e:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  404a10:	4b05      	ldr	r3, [pc, #20]	; (404a28 <hsmci_init+0x34>)
  404a12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  404a16:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  404a18:	4b03      	ldr	r3, [pc, #12]	; (404a28 <hsmci_init+0x34>)
  404a1a:	2205      	movs	r2, #5
  404a1c:	601a      	str	r2, [r3, #0]
}
  404a1e:	bf00      	nop
  404a20:	bd80      	pop	{r7, pc}
  404a22:	bf00      	nop
  404a24:	00406155 	.word	0x00406155
  404a28:	40080000 	.word	0x40080000

00404a2c <hsmci_get_bus_width>:

uint8_t hsmci_get_bus_width(uint8_t slot)
{
  404a2c:	b480      	push	{r7}
  404a2e:	b083      	sub	sp, #12
  404a30:	af00      	add	r7, sp, #0
  404a32:	4603      	mov	r3, r0
  404a34:	71fb      	strb	r3, [r7, #7]
	switch (slot) {
  404a36:	79fb      	ldrb	r3, [r7, #7]
  404a38:	2b00      	cmp	r3, #0
  404a3a:	d101      	bne.n	404a40 <hsmci_get_bus_width+0x14>
	case 0:
		return SD_MMC_HSMCI_SLOT_0_SIZE;
  404a3c:	2304      	movs	r3, #4
  404a3e:	e000      	b.n	404a42 <hsmci_get_bus_width+0x16>
#if (SD_MMC_HSMCI_MEM_CNT == 2)
	case 1:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
  404a40:	2300      	movs	r3, #0
	}
}
  404a42:	4618      	mov	r0, r3
  404a44:	370c      	adds	r7, #12
  404a46:	46bd      	mov	sp, r7
  404a48:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a4c:	4770      	bx	lr

00404a4e <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
  404a4e:	b480      	push	{r7}
  404a50:	af00      	add	r7, sp, #0
	return true;
  404a52:	2301      	movs	r3, #1
}
  404a54:	4618      	mov	r0, r3
  404a56:	46bd      	mov	sp, r7
  404a58:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a5c:	4770      	bx	lr
	...

00404a60 <hsmci_select_device>:

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
  404a60:	b580      	push	{r7, lr}
  404a62:	b084      	sub	sp, #16
  404a64:	af00      	add	r7, sp, #0
  404a66:	6039      	str	r1, [r7, #0]
  404a68:	4611      	mov	r1, r2
  404a6a:	461a      	mov	r2, r3
  404a6c:	4603      	mov	r3, r0
  404a6e:	71fb      	strb	r3, [r7, #7]
  404a70:	460b      	mov	r3, r1
  404a72:	71bb      	strb	r3, [r7, #6]
  404a74:	4613      	mov	r3, r2
  404a76:	717b      	strb	r3, [r7, #5]
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  404a78:	2300      	movs	r3, #0
  404a7a:	60fb      	str	r3, [r7, #12]
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  404a7c:	2300      	movs	r3, #0
  404a7e:	60bb      	str	r3, [r7, #8]

	if (high_speed) {
  404a80:	797b      	ldrb	r3, [r7, #5]
  404a82:	2b00      	cmp	r3, #0
  404a84:	d006      	beq.n	404a94 <hsmci_select_device+0x34>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  404a86:	4a19      	ldr	r2, [pc, #100]	; (404aec <hsmci_select_device+0x8c>)
  404a88:	4b18      	ldr	r3, [pc, #96]	; (404aec <hsmci_select_device+0x8c>)
  404a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  404a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404a90:	6553      	str	r3, [r2, #84]	; 0x54
  404a92:	e005      	b.n	404aa0 <hsmci_select_device+0x40>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  404a94:	4a15      	ldr	r2, [pc, #84]	; (404aec <hsmci_select_device+0x8c>)
  404a96:	4b15      	ldr	r3, [pc, #84]	; (404aec <hsmci_select_device+0x8c>)
  404a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  404a9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  404a9e:	6553      	str	r3, [r2, #84]	; 0x54
	}

	hsmci_set_speed(clock, sysclk_get_peripheral_hz());
  404aa0:	4b13      	ldr	r3, [pc, #76]	; (404af0 <hsmci_select_device+0x90>)
  404aa2:	4798      	blx	r3
  404aa4:	4603      	mov	r3, r0
  404aa6:	4619      	mov	r1, r3
  404aa8:	6838      	ldr	r0, [r7, #0]
  404aaa:	4b12      	ldr	r3, [pc, #72]	; (404af4 <hsmci_select_device+0x94>)
  404aac:	4798      	blx	r3

	switch (slot) {
  404aae:	79fb      	ldrb	r3, [r7, #7]
  404ab0:	2b00      	cmp	r3, #0
  404ab2:	d102      	bne.n	404aba <hsmci_select_device+0x5a>
	case 0:
		hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  404ab4:	2300      	movs	r3, #0
  404ab6:	60fb      	str	r3, [r7, #12]
		break;
  404ab8:	bf00      	nop
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  404aba:	79bb      	ldrb	r3, [r7, #6]
  404abc:	2b04      	cmp	r3, #4
  404abe:	d006      	beq.n	404ace <hsmci_select_device+0x6e>
  404ac0:	2b08      	cmp	r3, #8
  404ac2:	d007      	beq.n	404ad4 <hsmci_select_device+0x74>
  404ac4:	2b01      	cmp	r3, #1
  404ac6:	d108      	bne.n	404ada <hsmci_select_device+0x7a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  404ac8:	2300      	movs	r3, #0
  404aca:	60bb      	str	r3, [r7, #8]
		break;
  404acc:	e005      	b.n	404ada <hsmci_select_device+0x7a>

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  404ace:	2380      	movs	r3, #128	; 0x80
  404ad0:	60bb      	str	r3, [r7, #8]
		break;
  404ad2:	e002      	b.n	404ada <hsmci_select_device+0x7a>

	case 8:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_8;
  404ad4:	23c0      	movs	r3, #192	; 0xc0
  404ad6:	60bb      	str	r3, [r7, #8]
		break;
  404ad8:	bf00      	nop

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  404ada:	4904      	ldr	r1, [pc, #16]	; (404aec <hsmci_select_device+0x8c>)
  404adc:	68fa      	ldr	r2, [r7, #12]
  404ade:	68bb      	ldr	r3, [r7, #8]
  404ae0:	4313      	orrs	r3, r2
  404ae2:	60cb      	str	r3, [r1, #12]
}
  404ae4:	bf00      	nop
  404ae6:	3710      	adds	r7, #16
  404ae8:	46bd      	mov	sp, r7
  404aea:	bd80      	pop	{r7, pc}
  404aec:	40080000 	.word	0x40080000
  404af0:	004047a1 	.word	0x004047a1
  404af4:	00404815 	.word	0x00404815

00404af8 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  404af8:	b480      	push	{r7}
  404afa:	b083      	sub	sp, #12
  404afc:	af00      	add	r7, sp, #0
  404afe:	4603      	mov	r3, r0
  404b00:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	// Nothing to do
}
  404b02:	bf00      	nop
  404b04:	370c      	adds	r7, #12
  404b06:	46bd      	mov	sp, r7
  404b08:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b0c:	4770      	bx	lr
	...

00404b10 <hsmci_send_clock>:

void hsmci_send_clock(void)
{
  404b10:	b480      	push	{r7}
  404b12:	af00      	add	r7, sp, #0
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  404b14:	4a0c      	ldr	r2, [pc, #48]	; (404b48 <hsmci_send_clock+0x38>)
  404b16:	4b0c      	ldr	r3, [pc, #48]	; (404b48 <hsmci_send_clock+0x38>)
  404b18:	685b      	ldr	r3, [r3, #4]
  404b1a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  404b1e:	6053      	str	r3, [r2, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  404b20:	4b09      	ldr	r3, [pc, #36]	; (404b48 <hsmci_send_clock+0x38>)
  404b22:	2200      	movs	r2, #0
  404b24:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  404b26:	4b08      	ldr	r3, [pc, #32]	; (404b48 <hsmci_send_clock+0x38>)
  404b28:	f44f 6210 	mov.w	r2, #2304	; 0x900
  404b2c:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  404b2e:	bf00      	nop
  404b30:	4b05      	ldr	r3, [pc, #20]	; (404b48 <hsmci_send_clock+0x38>)
  404b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  404b34:	f003 0301 	and.w	r3, r3, #1
  404b38:	2b00      	cmp	r3, #0
  404b3a:	d0f9      	beq.n	404b30 <hsmci_send_clock+0x20>
}
  404b3c:	bf00      	nop
  404b3e:	46bd      	mov	sp, r7
  404b40:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b44:	4770      	bx	lr
  404b46:	bf00      	nop
  404b48:	40080000 	.word	0x40080000

00404b4c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  404b4c:	b580      	push	{r7, lr}
  404b4e:	b082      	sub	sp, #8
  404b50:	af00      	add	r7, sp, #0
  404b52:	6078      	str	r0, [r7, #4]
  404b54:	6039      	str	r1, [r7, #0]
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  404b56:	4a0c      	ldr	r2, [pc, #48]	; (404b88 <hsmci_send_cmd+0x3c>)
  404b58:	4b0b      	ldr	r3, [pc, #44]	; (404b88 <hsmci_send_cmd+0x3c>)
  404b5a:	685b      	ldr	r3, [r3, #4]
  404b5c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  404b60:	6053      	str	r3, [r2, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  404b62:	4a09      	ldr	r2, [pc, #36]	; (404b88 <hsmci_send_cmd+0x3c>)
  404b64:	4b08      	ldr	r3, [pc, #32]	; (404b88 <hsmci_send_cmd+0x3c>)
  404b66:	685b      	ldr	r3, [r3, #4]
  404b68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  404b6c:	6053      	str	r3, [r2, #4]
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  404b6e:	4b06      	ldr	r3, [pc, #24]	; (404b88 <hsmci_send_cmd+0x3c>)
  404b70:	2200      	movs	r2, #0
  404b72:	619a      	str	r2, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  404b74:	683a      	ldr	r2, [r7, #0]
  404b76:	6879      	ldr	r1, [r7, #4]
  404b78:	2000      	movs	r0, #0
  404b7a:	4b04      	ldr	r3, [pc, #16]	; (404b8c <hsmci_send_cmd+0x40>)
  404b7c:	4798      	blx	r3
  404b7e:	4603      	mov	r3, r0
}
  404b80:	4618      	mov	r0, r3
  404b82:	3708      	adds	r7, #8
  404b84:	46bd      	mov	sp, r7
  404b86:	bd80      	pop	{r7, pc}
  404b88:	40080000 	.word	0x40080000
  404b8c:	00404909 	.word	0x00404909

00404b90 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
  404b90:	b480      	push	{r7}
  404b92:	af00      	add	r7, sp, #0
	return HSMCI->HSMCI_RSPR[0];
  404b94:	4b03      	ldr	r3, [pc, #12]	; (404ba4 <hsmci_get_response+0x14>)
  404b96:	6a1b      	ldr	r3, [r3, #32]
}
  404b98:	4618      	mov	r0, r3
  404b9a:	46bd      	mov	sp, r7
  404b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ba0:	4770      	bx	lr
  404ba2:	bf00      	nop
  404ba4:	40080000 	.word	0x40080000

00404ba8 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  404ba8:	b480      	push	{r7}
  404baa:	b085      	sub	sp, #20
  404bac:	af00      	add	r7, sp, #0
  404bae:	6078      	str	r0, [r7, #4]
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  404bb0:	2300      	movs	r3, #0
  404bb2:	73fb      	strb	r3, [r7, #15]
  404bb4:	e024      	b.n	404c00 <hsmci_get_response_128+0x58>
		response_32 = HSMCI->HSMCI_RSPR[0];
  404bb6:	4b17      	ldr	r3, [pc, #92]	; (404c14 <hsmci_get_response_128+0x6c>)
  404bb8:	6a1b      	ldr	r3, [r3, #32]
  404bba:	60bb      	str	r3, [r7, #8]
		*response = (response_32 >> 24) & 0xFF;
  404bbc:	68bb      	ldr	r3, [r7, #8]
  404bbe:	0e1b      	lsrs	r3, r3, #24
  404bc0:	b2da      	uxtb	r2, r3
  404bc2:	687b      	ldr	r3, [r7, #4]
  404bc4:	701a      	strb	r2, [r3, #0]
		response++;
  404bc6:	687b      	ldr	r3, [r7, #4]
  404bc8:	3301      	adds	r3, #1
  404bca:	607b      	str	r3, [r7, #4]
		*response = (response_32 >> 16) & 0xFF;
  404bcc:	68bb      	ldr	r3, [r7, #8]
  404bce:	0c1b      	lsrs	r3, r3, #16
  404bd0:	b2da      	uxtb	r2, r3
  404bd2:	687b      	ldr	r3, [r7, #4]
  404bd4:	701a      	strb	r2, [r3, #0]
		response++;
  404bd6:	687b      	ldr	r3, [r7, #4]
  404bd8:	3301      	adds	r3, #1
  404bda:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  8) & 0xFF;
  404bdc:	68bb      	ldr	r3, [r7, #8]
  404bde:	0a1b      	lsrs	r3, r3, #8
  404be0:	b2da      	uxtb	r2, r3
  404be2:	687b      	ldr	r3, [r7, #4]
  404be4:	701a      	strb	r2, [r3, #0]
		response++;
  404be6:	687b      	ldr	r3, [r7, #4]
  404be8:	3301      	adds	r3, #1
  404bea:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  0) & 0xFF;
  404bec:	68bb      	ldr	r3, [r7, #8]
  404bee:	b2da      	uxtb	r2, r3
  404bf0:	687b      	ldr	r3, [r7, #4]
  404bf2:	701a      	strb	r2, [r3, #0]
		response++;
  404bf4:	687b      	ldr	r3, [r7, #4]
  404bf6:	3301      	adds	r3, #1
  404bf8:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < 4; i++) {
  404bfa:	7bfb      	ldrb	r3, [r7, #15]
  404bfc:	3301      	adds	r3, #1
  404bfe:	73fb      	strb	r3, [r7, #15]
  404c00:	7bfb      	ldrb	r3, [r7, #15]
  404c02:	2b03      	cmp	r3, #3
  404c04:	d9d7      	bls.n	404bb6 <hsmci_get_response_128+0xe>
	}
}
  404c06:	bf00      	nop
  404c08:	3714      	adds	r7, #20
  404c0a:	46bd      	mov	sp, r7
  404c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c10:	4770      	bx	lr
  404c12:	bf00      	nop
  404c14:	40080000 	.word	0x40080000

00404c18 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  404c18:	b580      	push	{r7, lr}
  404c1a:	b086      	sub	sp, #24
  404c1c:	af00      	add	r7, sp, #0
  404c1e:	60f8      	str	r0, [r7, #12]
  404c20:	60b9      	str	r1, [r7, #8]
  404c22:	4611      	mov	r1, r2
  404c24:	461a      	mov	r2, r3
  404c26:	460b      	mov	r3, r1
  404c28:	80fb      	strh	r3, [r7, #6]
  404c2a:	4613      	mov	r3, r2
  404c2c:	80bb      	strh	r3, [r7, #4]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  404c2e:	f897 3020 	ldrb.w	r3, [r7, #32]
  404c32:	2b00      	cmp	r3, #0
  404c34:	d006      	beq.n	404c44 <hsmci_adtc_start+0x2c>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  404c36:	4a3d      	ldr	r2, [pc, #244]	; (404d2c <hsmci_adtc_start+0x114>)
  404c38:	4b3c      	ldr	r3, [pc, #240]	; (404d2c <hsmci_adtc_start+0x114>)
  404c3a:	685b      	ldr	r3, [r3, #4]
  404c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  404c40:	6053      	str	r3, [r2, #4]
  404c42:	e005      	b.n	404c50 <hsmci_adtc_start+0x38>
	} else {
		// Disable PDC for HSMCI
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  404c44:	4a39      	ldr	r2, [pc, #228]	; (404d2c <hsmci_adtc_start+0x114>)
  404c46:	4b39      	ldr	r3, [pc, #228]	; (404d2c <hsmci_adtc_start+0x114>)
  404c48:	685b      	ldr	r3, [r3, #4]
  404c4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  404c4e:	6053      	str	r3, [r2, #4]
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  404c50:	4a36      	ldr	r2, [pc, #216]	; (404d2c <hsmci_adtc_start+0x114>)
  404c52:	4b36      	ldr	r3, [pc, #216]	; (404d2c <hsmci_adtc_start+0x114>)
  404c54:	685b      	ldr	r3, [r3, #4]
  404c56:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
  404c5a:	6053      	str	r3, [r2, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  404c5c:	88fb      	ldrh	r3, [r7, #6]
  404c5e:	f003 0303 	and.w	r3, r3, #3
  404c62:	2b00      	cmp	r3, #0
  404c64:	d006      	beq.n	404c74 <hsmci_adtc_start+0x5c>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  404c66:	4a31      	ldr	r2, [pc, #196]	; (404d2c <hsmci_adtc_start+0x114>)
  404c68:	4b30      	ldr	r3, [pc, #192]	; (404d2c <hsmci_adtc_start+0x114>)
  404c6a:	685b      	ldr	r3, [r3, #4]
  404c6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404c70:	6053      	str	r3, [r2, #4]
  404c72:	e005      	b.n	404c80 <hsmci_adtc_start+0x68>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  404c74:	4a2d      	ldr	r2, [pc, #180]	; (404d2c <hsmci_adtc_start+0x114>)
  404c76:	4b2d      	ldr	r3, [pc, #180]	; (404d2c <hsmci_adtc_start+0x114>)
  404c78:	685b      	ldr	r3, [r3, #4]
  404c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404c7e:	6053      	str	r3, [r2, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  404c80:	68fb      	ldr	r3, [r7, #12]
  404c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  404c86:	2b00      	cmp	r3, #0
  404c88:	d003      	beq.n	404c92 <hsmci_adtc_start+0x7a>
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
  404c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  404c8e:	617b      	str	r3, [r7, #20]
  404c90:	e002      	b.n	404c98 <hsmci_adtc_start+0x80>
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  404c92:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  404c96:	617b      	str	r3, [r7, #20]
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  404c98:	68fb      	ldr	r3, [r7, #12]
  404c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  404c9e:	2b00      	cmp	r3, #0
  404ca0:	d009      	beq.n	404cb6 <hsmci_adtc_start+0x9e>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  404ca2:	697b      	ldr	r3, [r7, #20]
  404ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  404ca8:	617b      	str	r3, [r7, #20]
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  404caa:	4a20      	ldr	r2, [pc, #128]	; (404d2c <hsmci_adtc_start+0x114>)
  404cac:	88fb      	ldrh	r3, [r7, #6]
  404cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
  404cb2:	6193      	str	r3, [r2, #24]
  404cb4:	e027      	b.n	404d06 <hsmci_adtc_start+0xee>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  404cb6:	491d      	ldr	r1, [pc, #116]	; (404d2c <hsmci_adtc_start+0x114>)
  404cb8:	88fb      	ldrh	r3, [r7, #6]
  404cba:	041a      	lsls	r2, r3, #16
				(nb_block << HSMCI_BLKR_BCNT_Pos);
  404cbc:	88bb      	ldrh	r3, [r7, #4]
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  404cbe:	4313      	orrs	r3, r2
  404cc0:	618b      	str	r3, [r1, #24]
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  404cc2:	68fb      	ldr	r3, [r7, #12]
  404cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  404cc8:	2b00      	cmp	r3, #0
  404cca:	d004      	beq.n	404cd6 <hsmci_adtc_start+0xbe>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  404ccc:	697b      	ldr	r3, [r7, #20]
  404cce:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
  404cd2:	617b      	str	r3, [r7, #20]
  404cd4:	e017      	b.n	404d06 <hsmci_adtc_start+0xee>
		} else if (cmd & SDMMC_CMD_STREAM) {
  404cd6:	68fb      	ldr	r3, [r7, #12]
  404cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  404cdc:	2b00      	cmp	r3, #0
  404cde:	d004      	beq.n	404cea <hsmci_adtc_start+0xd2>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  404ce0:	697b      	ldr	r3, [r7, #20]
  404ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404ce6:	617b      	str	r3, [r7, #20]
  404ce8:	e00d      	b.n	404d06 <hsmci_adtc_start+0xee>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  404cea:	68fb      	ldr	r3, [r7, #12]
  404cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  404cf0:	2b00      	cmp	r3, #0
  404cf2:	d108      	bne.n	404d06 <hsmci_adtc_start+0xee>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  404cf4:	68fb      	ldr	r3, [r7, #12]
  404cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  404cfa:	2b00      	cmp	r3, #0
  404cfc:	d003      	beq.n	404d06 <hsmci_adtc_start+0xee>
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  404cfe:	697b      	ldr	r3, [r7, #20]
  404d00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  404d04:	617b      	str	r3, [r7, #20]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  404d06:	4b0a      	ldr	r3, [pc, #40]	; (404d30 <hsmci_adtc_start+0x118>)
  404d08:	2200      	movs	r2, #0
  404d0a:	601a      	str	r2, [r3, #0]
	hsmci_block_size = block_size;
  404d0c:	4a09      	ldr	r2, [pc, #36]	; (404d34 <hsmci_adtc_start+0x11c>)
  404d0e:	88fb      	ldrh	r3, [r7, #6]
  404d10:	8013      	strh	r3, [r2, #0]
	hsmci_nb_block = nb_block;
  404d12:	4a09      	ldr	r2, [pc, #36]	; (404d38 <hsmci_adtc_start+0x120>)
  404d14:	88bb      	ldrh	r3, [r7, #4]
  404d16:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  404d18:	68ba      	ldr	r2, [r7, #8]
  404d1a:	68f9      	ldr	r1, [r7, #12]
  404d1c:	6978      	ldr	r0, [r7, #20]
  404d1e:	4b07      	ldr	r3, [pc, #28]	; (404d3c <hsmci_adtc_start+0x124>)
  404d20:	4798      	blx	r3
  404d22:	4603      	mov	r3, r0
}
  404d24:	4618      	mov	r0, r3
  404d26:	3718      	adds	r7, #24
  404d28:	46bd      	mov	sp, r7
  404d2a:	bd80      	pop	{r7, pc}
  404d2c:	40080000 	.word	0x40080000
  404d30:	2000abd0 	.word	0x2000abd0
  404d34:	2000abd4 	.word	0x2000abd4
  404d38:	2000abd6 	.word	0x2000abd6
  404d3c:	00404909 	.word	0x00404909

00404d40 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  404d40:	b580      	push	{r7, lr}
  404d42:	b084      	sub	sp, #16
  404d44:	af00      	add	r7, sp, #0
  404d46:	6078      	str	r0, [r7, #4]

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  404d48:	4b1e      	ldr	r3, [pc, #120]	; (404dc4 <hsmci_read_word+0x84>)
  404d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  404d4c:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  404d4e:	68fa      	ldr	r2, [r7, #12]
  404d50:	4b1d      	ldr	r3, [pc, #116]	; (404dc8 <hsmci_read_word+0x88>)
  404d52:	4013      	ands	r3, r2
  404d54:	2b00      	cmp	r3, #0
  404d56:	d003      	beq.n	404d60 <hsmci_read_word+0x20>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  404d58:	4b1c      	ldr	r3, [pc, #112]	; (404dcc <hsmci_read_word+0x8c>)
  404d5a:	4798      	blx	r3
			return false;
  404d5c:	2300      	movs	r3, #0
  404d5e:	e02c      	b.n	404dba <hsmci_read_word+0x7a>
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  404d60:	68fb      	ldr	r3, [r7, #12]
  404d62:	f003 0302 	and.w	r3, r3, #2
  404d66:	2b00      	cmp	r3, #0
  404d68:	d0ee      	beq.n	404d48 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  404d6a:	4b16      	ldr	r3, [pc, #88]	; (404dc4 <hsmci_read_word+0x84>)
  404d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  404d6e:	687b      	ldr	r3, [r7, #4]
  404d70:	601a      	str	r2, [r3, #0]
	hsmci_transfert_pos += 4;
  404d72:	4b17      	ldr	r3, [pc, #92]	; (404dd0 <hsmci_read_word+0x90>)
  404d74:	681b      	ldr	r3, [r3, #0]
  404d76:	3304      	adds	r3, #4
  404d78:	4a15      	ldr	r2, [pc, #84]	; (404dd0 <hsmci_read_word+0x90>)
  404d7a:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  404d7c:	4b15      	ldr	r3, [pc, #84]	; (404dd4 <hsmci_read_word+0x94>)
  404d7e:	881b      	ldrh	r3, [r3, #0]
  404d80:	461a      	mov	r2, r3
  404d82:	4b15      	ldr	r3, [pc, #84]	; (404dd8 <hsmci_read_word+0x98>)
  404d84:	881b      	ldrh	r3, [r3, #0]
  404d86:	fb03 f202 	mul.w	r2, r3, r2
  404d8a:	4b11      	ldr	r3, [pc, #68]	; (404dd0 <hsmci_read_word+0x90>)
  404d8c:	681b      	ldr	r3, [r3, #0]
  404d8e:	429a      	cmp	r2, r3
  404d90:	d901      	bls.n	404d96 <hsmci_read_word+0x56>
		return true;
  404d92:	2301      	movs	r3, #1
  404d94:	e011      	b.n	404dba <hsmci_read_word+0x7a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  404d96:	4b0b      	ldr	r3, [pc, #44]	; (404dc4 <hsmci_read_word+0x84>)
  404d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  404d9a:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  404d9c:	68fa      	ldr	r2, [r7, #12]
  404d9e:	4b0a      	ldr	r3, [pc, #40]	; (404dc8 <hsmci_read_word+0x88>)
  404da0:	4013      	ands	r3, r2
  404da2:	2b00      	cmp	r3, #0
  404da4:	d003      	beq.n	404dae <hsmci_read_word+0x6e>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  404da6:	4b09      	ldr	r3, [pc, #36]	; (404dcc <hsmci_read_word+0x8c>)
  404da8:	4798      	blx	r3
			return false;
  404daa:	2300      	movs	r3, #0
  404dac:	e005      	b.n	404dba <hsmci_read_word+0x7a>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  404dae:	68fb      	ldr	r3, [r7, #12]
  404db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  404db4:	2b00      	cmp	r3, #0
  404db6:	d0ee      	beq.n	404d96 <hsmci_read_word+0x56>
	return true;
  404db8:	2301      	movs	r3, #1
}
  404dba:	4618      	mov	r0, r3
  404dbc:	3710      	adds	r7, #16
  404dbe:	46bd      	mov	sp, r7
  404dc0:	bd80      	pop	{r7, pc}
  404dc2:	bf00      	nop
  404dc4:	40080000 	.word	0x40080000
  404dc8:	c0600000 	.word	0xc0600000
  404dcc:	004047b5 	.word	0x004047b5
  404dd0:	2000abd0 	.word	0x2000abd0
  404dd4:	2000abd4 	.word	0x2000abd4
  404dd8:	2000abd6 	.word	0x2000abd6

00404ddc <hsmci_start_read_blocks>:
}
#endif // HSMCI_SR_DMADONE

#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  404ddc:	b480      	push	{r7}
  404dde:	b085      	sub	sp, #20
  404de0:	af00      	add	r7, sp, #0
  404de2:	6078      	str	r0, [r7, #4]
  404de4:	460b      	mov	r3, r1
  404de6:	807b      	strh	r3, [r7, #2]
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  404de8:	887b      	ldrh	r3, [r7, #2]
  404dea:	4a21      	ldr	r2, [pc, #132]	; (404e70 <hsmci_start_read_blocks+0x94>)
  404dec:	8812      	ldrh	r2, [r2, #0]
  404dee:	fb02 f303 	mul.w	r3, r2, r3
  404df2:	60fb      	str	r3, [r7, #12]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  404df4:	687b      	ldr	r3, [r7, #4]
  404df6:	f003 0303 	and.w	r3, r3, #3
  404dfa:	2b00      	cmp	r3, #0
  404dfc:	d105      	bne.n	404e0a <hsmci_start_read_blocks+0x2e>
  404dfe:	4b1c      	ldr	r3, [pc, #112]	; (404e70 <hsmci_start_read_blocks+0x94>)
  404e00:	881b      	ldrh	r3, [r3, #0]
  404e02:	f003 0303 	and.w	r3, r3, #3
  404e06:	2b00      	cmp	r3, #0
  404e08:	d006      	beq.n	404e18 <hsmci_start_read_blocks+0x3c>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  404e0a:	4a1a      	ldr	r2, [pc, #104]	; (404e74 <hsmci_start_read_blocks+0x98>)
  404e0c:	4b19      	ldr	r3, [pc, #100]	; (404e74 <hsmci_start_read_blocks+0x98>)
  404e0e:	685b      	ldr	r3, [r3, #4]
  404e10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404e14:	6053      	str	r3, [r2, #4]
  404e16:	e005      	b.n	404e24 <hsmci_start_read_blocks+0x48>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  404e18:	4a16      	ldr	r2, [pc, #88]	; (404e74 <hsmci_start_read_blocks+0x98>)
  404e1a:	4b16      	ldr	r3, [pc, #88]	; (404e74 <hsmci_start_read_blocks+0x98>)
  404e1c:	685b      	ldr	r3, [r3, #4]
  404e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404e22:	6053      	str	r3, [r2, #4]
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  404e24:	4a13      	ldr	r2, [pc, #76]	; (404e74 <hsmci_start_read_blocks+0x98>)
  404e26:	687b      	ldr	r3, [r7, #4]
  404e28:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  404e2c:	4a11      	ldr	r2, [pc, #68]	; (404e74 <hsmci_start_read_blocks+0x98>)
  404e2e:	4b11      	ldr	r3, [pc, #68]	; (404e74 <hsmci_start_read_blocks+0x98>)
  404e30:	685b      	ldr	r3, [r3, #4]
  404e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
			nb_data : nb_data / 4;
  404e36:	2b00      	cmp	r3, #0
  404e38:	d102      	bne.n	404e40 <hsmci_start_read_blocks+0x64>
  404e3a:	68fb      	ldr	r3, [r7, #12]
  404e3c:	089b      	lsrs	r3, r3, #2
  404e3e:	e000      	b.n	404e42 <hsmci_start_read_blocks+0x66>
  404e40:	68fb      	ldr	r3, [r7, #12]
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  404e42:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	HSMCI->HSMCI_RNCR = 0;
  404e46:	4b0b      	ldr	r3, [pc, #44]	; (404e74 <hsmci_start_read_blocks+0x98>)
  404e48:	2200      	movs	r2, #0
  404e4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  404e4e:	4b09      	ldr	r3, [pc, #36]	; (404e74 <hsmci_start_read_blocks+0x98>)
  404e50:	2201      	movs	r2, #1
  404e52:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  404e56:	4b08      	ldr	r3, [pc, #32]	; (404e78 <hsmci_start_read_blocks+0x9c>)
  404e58:	681a      	ldr	r2, [r3, #0]
  404e5a:	68fb      	ldr	r3, [r7, #12]
  404e5c:	4413      	add	r3, r2
  404e5e:	4a06      	ldr	r2, [pc, #24]	; (404e78 <hsmci_start_read_blocks+0x9c>)
  404e60:	6013      	str	r3, [r2, #0]
	return true;
  404e62:	2301      	movs	r3, #1
}
  404e64:	4618      	mov	r0, r3
  404e66:	3714      	adds	r7, #20
  404e68:	46bd      	mov	sp, r7
  404e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e6e:	4770      	bx	lr
  404e70:	2000abd4 	.word	0x2000abd4
  404e74:	40080000 	.word	0x40080000
  404e78:	2000abd0 	.word	0x2000abd0

00404e7c <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  404e7c:	b580      	push	{r7, lr}
  404e7e:	b082      	sub	sp, #8
  404e80:	af00      	add	r7, sp, #0
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  404e82:	4b1c      	ldr	r3, [pc, #112]	; (404ef4 <hsmci_wait_end_of_read_blocks+0x78>)
  404e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  404e86:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  404e88:	687a      	ldr	r2, [r7, #4]
  404e8a:	4b1b      	ldr	r3, [pc, #108]	; (404ef8 <hsmci_wait_end_of_read_blocks+0x7c>)
  404e8c:	4013      	ands	r3, r2
  404e8e:	2b00      	cmp	r3, #0
  404e90:	d008      	beq.n	404ea4 <hsmci_wait_end_of_read_blocks+0x28>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  404e92:	4b18      	ldr	r3, [pc, #96]	; (404ef4 <hsmci_wait_end_of_read_blocks+0x78>)
  404e94:	f240 2202 	movw	r2, #514	; 0x202
  404e98:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			hsmci_reset();
  404e9c:	4b17      	ldr	r3, [pc, #92]	; (404efc <hsmci_wait_end_of_read_blocks+0x80>)
  404e9e:	4798      	blx	r3
			return false;
  404ea0:	2300      	movs	r3, #0
  404ea2:	e023      	b.n	404eec <hsmci_wait_end_of_read_blocks+0x70>
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  404ea4:	687b      	ldr	r3, [r7, #4]
  404ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  404eaa:	2b00      	cmp	r3, #0
  404eac:	d0e9      	beq.n	404e82 <hsmci_wait_end_of_read_blocks+0x6>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  404eae:	4b14      	ldr	r3, [pc, #80]	; (404f00 <hsmci_wait_end_of_read_blocks+0x84>)
  404eb0:	881b      	ldrh	r3, [r3, #0]
  404eb2:	461a      	mov	r2, r3
  404eb4:	4b13      	ldr	r3, [pc, #76]	; (404f04 <hsmci_wait_end_of_read_blocks+0x88>)
  404eb6:	881b      	ldrh	r3, [r3, #0]
  404eb8:	fb03 f202 	mul.w	r2, r3, r2
  404ebc:	4b12      	ldr	r3, [pc, #72]	; (404f08 <hsmci_wait_end_of_read_blocks+0x8c>)
  404ebe:	681b      	ldr	r3, [r3, #0]
  404ec0:	429a      	cmp	r2, r3
  404ec2:	d901      	bls.n	404ec8 <hsmci_wait_end_of_read_blocks+0x4c>
		return true;
  404ec4:	2301      	movs	r3, #1
  404ec6:	e011      	b.n	404eec <hsmci_wait_end_of_read_blocks+0x70>
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  404ec8:	4b0a      	ldr	r3, [pc, #40]	; (404ef4 <hsmci_wait_end_of_read_blocks+0x78>)
  404eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  404ecc:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  404ece:	687a      	ldr	r2, [r7, #4]
  404ed0:	4b09      	ldr	r3, [pc, #36]	; (404ef8 <hsmci_wait_end_of_read_blocks+0x7c>)
  404ed2:	4013      	ands	r3, r2
  404ed4:	2b00      	cmp	r3, #0
  404ed6:	d003      	beq.n	404ee0 <hsmci_wait_end_of_read_blocks+0x64>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  404ed8:	4b08      	ldr	r3, [pc, #32]	; (404efc <hsmci_wait_end_of_read_blocks+0x80>)
  404eda:	4798      	blx	r3
			return false;
  404edc:	2300      	movs	r3, #0
  404ede:	e005      	b.n	404eec <hsmci_wait_end_of_read_blocks+0x70>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  404ee0:	687b      	ldr	r3, [r7, #4]
  404ee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  404ee6:	2b00      	cmp	r3, #0
  404ee8:	d0ee      	beq.n	404ec8 <hsmci_wait_end_of_read_blocks+0x4c>
	return true;
  404eea:	2301      	movs	r3, #1
}
  404eec:	4618      	mov	r0, r3
  404eee:	3708      	adds	r7, #8
  404ef0:	46bd      	mov	sp, r7
  404ef2:	bd80      	pop	{r7, pc}
  404ef4:	40080000 	.word	0x40080000
  404ef8:	c0600000 	.word	0xc0600000
  404efc:	004047b5 	.word	0x004047b5
  404f00:	2000abd4 	.word	0x2000abd4
  404f04:	2000abd6 	.word	0x2000abd6
  404f08:	2000abd0 	.word	0x2000abd0

00404f0c <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  404f0c:	b480      	push	{r7}
  404f0e:	b083      	sub	sp, #12
  404f10:	af00      	add	r7, sp, #0
  404f12:	6078      	str	r0, [r7, #4]
  404f14:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  404f16:	683b      	ldr	r3, [r7, #0]
  404f18:	2b00      	cmp	r3, #0
  404f1a:	d006      	beq.n	404f2a <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  404f1c:	687b      	ldr	r3, [r7, #4]
  404f1e:	685b      	ldr	r3, [r3, #4]
  404f20:	f043 0201 	orr.w	r2, r3, #1
  404f24:	687b      	ldr	r3, [r7, #4]
  404f26:	605a      	str	r2, [r3, #4]
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
	}
}
  404f28:	e005      	b.n	404f36 <rtc_set_hour_mode+0x2a>
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  404f2a:	687b      	ldr	r3, [r7, #4]
  404f2c:	685b      	ldr	r3, [r3, #4]
  404f2e:	f023 0201 	bic.w	r2, r3, #1
  404f32:	687b      	ldr	r3, [r7, #4]
  404f34:	605a      	str	r2, [r3, #4]
}
  404f36:	bf00      	nop
  404f38:	370c      	adds	r7, #12
  404f3a:	46bd      	mov	sp, r7
  404f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f40:	4770      	bx	lr

00404f42 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  404f42:	b480      	push	{r7}
  404f44:	b087      	sub	sp, #28
  404f46:	af00      	add	r7, sp, #0
  404f48:	60f8      	str	r0, [r7, #12]
  404f4a:	60b9      	str	r1, [r7, #8]
  404f4c:	607a      	str	r2, [r7, #4]
  404f4e:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  404f50:	68fb      	ldr	r3, [r7, #12]
  404f52:	689b      	ldr	r3, [r3, #8]
  404f54:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  404f56:	e002      	b.n	404f5e <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  404f58:	68fb      	ldr	r3, [r7, #12]
  404f5a:	689b      	ldr	r3, [r3, #8]
  404f5c:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  404f5e:	68fb      	ldr	r3, [r7, #12]
  404f60:	689a      	ldr	r2, [r3, #8]
  404f62:	697b      	ldr	r3, [r7, #20]
  404f64:	429a      	cmp	r2, r3
  404f66:	d1f7      	bne.n	404f58 <rtc_get_time+0x16>
	}

	/* Hour */
	if (pul_hour) {
  404f68:	68bb      	ldr	r3, [r7, #8]
  404f6a:	2b00      	cmp	r3, #0
  404f6c:	d01c      	beq.n	404fa8 <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  404f6e:	697b      	ldr	r3, [r7, #20]
  404f70:	0c1b      	lsrs	r3, r3, #16
  404f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  404f76:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404f78:	693b      	ldr	r3, [r7, #16]
  404f7a:	091a      	lsrs	r2, r3, #4
  404f7c:	4613      	mov	r3, r2
  404f7e:	009b      	lsls	r3, r3, #2
  404f80:	4413      	add	r3, r2
  404f82:	005b      	lsls	r3, r3, #1
  404f84:	461a      	mov	r2, r3
  404f86:	693b      	ldr	r3, [r7, #16]
  404f88:	f003 030f 	and.w	r3, r3, #15
  404f8c:	441a      	add	r2, r3
  404f8e:	68bb      	ldr	r3, [r7, #8]
  404f90:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  404f92:	697b      	ldr	r3, [r7, #20]
  404f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  404f98:	2b00      	cmp	r3, #0
  404f9a:	d005      	beq.n	404fa8 <rtc_get_time+0x66>
			*pul_hour += 12;
  404f9c:	68bb      	ldr	r3, [r7, #8]
  404f9e:	681b      	ldr	r3, [r3, #0]
  404fa0:	f103 020c 	add.w	r2, r3, #12
  404fa4:	68bb      	ldr	r3, [r7, #8]
  404fa6:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  404fa8:	687b      	ldr	r3, [r7, #4]
  404faa:	2b00      	cmp	r3, #0
  404fac:	d011      	beq.n	404fd2 <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  404fae:	697b      	ldr	r3, [r7, #20]
  404fb0:	0a1b      	lsrs	r3, r3, #8
  404fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404fb6:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  404fb8:	693b      	ldr	r3, [r7, #16]
  404fba:	091a      	lsrs	r2, r3, #4
  404fbc:	4613      	mov	r3, r2
  404fbe:	009b      	lsls	r3, r3, #2
  404fc0:	4413      	add	r3, r2
  404fc2:	005b      	lsls	r3, r3, #1
  404fc4:	461a      	mov	r2, r3
  404fc6:	693b      	ldr	r3, [r7, #16]
  404fc8:	f003 030f 	and.w	r3, r3, #15
  404fcc:	441a      	add	r2, r3
  404fce:	687b      	ldr	r3, [r7, #4]
  404fd0:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  404fd2:	683b      	ldr	r3, [r7, #0]
  404fd4:	2b00      	cmp	r3, #0
  404fd6:	d010      	beq.n	404ffa <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  404fd8:	697b      	ldr	r3, [r7, #20]
  404fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404fde:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404fe0:	693b      	ldr	r3, [r7, #16]
  404fe2:	091a      	lsrs	r2, r3, #4
  404fe4:	4613      	mov	r3, r2
  404fe6:	009b      	lsls	r3, r3, #2
  404fe8:	4413      	add	r3, r2
  404fea:	005b      	lsls	r3, r3, #1
  404fec:	461a      	mov	r2, r3
  404fee:	693b      	ldr	r3, [r7, #16]
  404ff0:	f003 030f 	and.w	r3, r3, #15
  404ff4:	441a      	add	r2, r3
  404ff6:	683b      	ldr	r3, [r7, #0]
  404ff8:	601a      	str	r2, [r3, #0]
	}
}
  404ffa:	bf00      	nop
  404ffc:	371c      	adds	r7, #28
  404ffe:	46bd      	mov	sp, r7
  405000:	f85d 7b04 	ldr.w	r7, [sp], #4
  405004:	4770      	bx	lr

00405006 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  405006:	b480      	push	{r7}
  405008:	b089      	sub	sp, #36	; 0x24
  40500a:	af00      	add	r7, sp, #0
  40500c:	60f8      	str	r0, [r7, #12]
  40500e:	60b9      	str	r1, [r7, #8]
  405010:	607a      	str	r2, [r7, #4]
  405012:	603b      	str	r3, [r7, #0]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  405014:	68fb      	ldr	r3, [r7, #12]
  405016:	68db      	ldr	r3, [r3, #12]
  405018:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  40501a:	e002      	b.n	405022 <rtc_get_date+0x1c>
		ul_date = p_rtc->RTC_CALR;
  40501c:	68fb      	ldr	r3, [r7, #12]
  40501e:	68db      	ldr	r3, [r3, #12]
  405020:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  405022:	68fb      	ldr	r3, [r7, #12]
  405024:	68da      	ldr	r2, [r3, #12]
  405026:	69fb      	ldr	r3, [r7, #28]
  405028:	429a      	cmp	r2, r3
  40502a:	d1f7      	bne.n	40501c <rtc_get_date+0x16>
	}

	/* Retrieve year */
	if (pul_year) {
  40502c:	68bb      	ldr	r3, [r7, #8]
  40502e:	2b00      	cmp	r3, #0
  405030:	d024      	beq.n	40507c <rtc_get_date+0x76>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
  405032:	69fb      	ldr	r3, [r7, #28]
  405034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  405038:	61bb      	str	r3, [r7, #24]
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40503a:	69bb      	ldr	r3, [r7, #24]
  40503c:	091a      	lsrs	r2, r3, #4
  40503e:	4613      	mov	r3, r2
  405040:	009b      	lsls	r3, r3, #2
  405042:	4413      	add	r3, r2
  405044:	005b      	lsls	r3, r3, #1
  405046:	461a      	mov	r2, r3
  405048:	69bb      	ldr	r3, [r7, #24]
  40504a:	f003 030f 	and.w	r3, r3, #15
  40504e:	4413      	add	r3, r2
  405050:	617b      	str	r3, [r7, #20]
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  405052:	69fb      	ldr	r3, [r7, #28]
  405054:	0a1b      	lsrs	r3, r3, #8
  405056:	b2db      	uxtb	r3, r3
  405058:	61bb      	str	r3, [r7, #24]
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40505a:	697b      	ldr	r3, [r7, #20]
  40505c:	2264      	movs	r2, #100	; 0x64
  40505e:	fb02 f103 	mul.w	r1, r2, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405062:	69bb      	ldr	r3, [r7, #24]
  405064:	091a      	lsrs	r2, r3, #4
  405066:	4613      	mov	r3, r2
  405068:	009b      	lsls	r3, r3, #2
  40506a:	4413      	add	r3, r2
  40506c:	005b      	lsls	r3, r3, #1
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40506e:	18ca      	adds	r2, r1, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405070:	69bb      	ldr	r3, [r7, #24]
  405072:	f003 030f 	and.w	r3, r3, #15
  405076:	441a      	add	r2, r3
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  405078:	68bb      	ldr	r3, [r7, #8]
  40507a:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  40507c:	687b      	ldr	r3, [r7, #4]
  40507e:	2b00      	cmp	r3, #0
  405080:	d011      	beq.n	4050a6 <rtc_get_date+0xa0>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  405082:	69fb      	ldr	r3, [r7, #28]
  405084:	0c1b      	lsrs	r3, r3, #16
  405086:	f003 031f 	and.w	r3, r3, #31
  40508a:	61bb      	str	r3, [r7, #24]
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40508c:	69bb      	ldr	r3, [r7, #24]
  40508e:	091a      	lsrs	r2, r3, #4
  405090:	4613      	mov	r3, r2
  405092:	009b      	lsls	r3, r3, #2
  405094:	4413      	add	r3, r2
  405096:	005b      	lsls	r3, r3, #1
  405098:	461a      	mov	r2, r3
  40509a:	69bb      	ldr	r3, [r7, #24]
  40509c:	f003 030f 	and.w	r3, r3, #15
  4050a0:	441a      	add	r2, r3
  4050a2:	687b      	ldr	r3, [r7, #4]
  4050a4:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  4050a6:	683b      	ldr	r3, [r7, #0]
  4050a8:	2b00      	cmp	r3, #0
  4050aa:	d011      	beq.n	4050d0 <rtc_get_date+0xca>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  4050ac:	69fb      	ldr	r3, [r7, #28]
  4050ae:	0e1b      	lsrs	r3, r3, #24
  4050b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4050b4:	61bb      	str	r3, [r7, #24]
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4050b6:	69bb      	ldr	r3, [r7, #24]
  4050b8:	091a      	lsrs	r2, r3, #4
  4050ba:	4613      	mov	r3, r2
  4050bc:	009b      	lsls	r3, r3, #2
  4050be:	4413      	add	r3, r2
  4050c0:	005b      	lsls	r3, r3, #1
  4050c2:	461a      	mov	r2, r3
  4050c4:	69bb      	ldr	r3, [r7, #24]
  4050c6:	f003 030f 	and.w	r3, r3, #15
  4050ca:	441a      	add	r2, r3
  4050cc:	683b      	ldr	r3, [r7, #0]
  4050ce:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4050d2:	2b00      	cmp	r3, #0
  4050d4:	d005      	beq.n	4050e2 <rtc_get_date+0xdc>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4050d6:	69fb      	ldr	r3, [r7, #28]
  4050d8:	0d5b      	lsrs	r3, r3, #21
  4050da:	f003 0207 	and.w	r2, r3, #7
  4050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4050e0:	601a      	str	r2, [r3, #0]
	}
}
  4050e2:	bf00      	nop
  4050e4:	3724      	adds	r7, #36	; 0x24
  4050e6:	46bd      	mov	sp, r7
  4050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050ec:	4770      	bx	lr

004050ee <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4050ee:	b480      	push	{r7}
  4050f0:	af00      	add	r7, sp, #0
	while (1) {
  4050f2:	e7fe      	b.n	4050f2 <Dummy_Handler+0x4>

004050f4 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4050f4:	b480      	push	{r7}
  4050f6:	b083      	sub	sp, #12
  4050f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4050fa:	f3ef 8310 	mrs	r3, PRIMASK
  4050fe:	607b      	str	r3, [r7, #4]
  return(result);
  405100:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405102:	2b00      	cmp	r3, #0
  405104:	bf0c      	ite	eq
  405106:	2301      	moveq	r3, #1
  405108:	2300      	movne	r3, #0
  40510a:	b2db      	uxtb	r3, r3
  40510c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40510e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  405110:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405114:	4b04      	ldr	r3, [pc, #16]	; (405128 <cpu_irq_save+0x34>)
  405116:	2200      	movs	r2, #0
  405118:	701a      	strb	r2, [r3, #0]
	return flags;
  40511a:	683b      	ldr	r3, [r7, #0]
}
  40511c:	4618      	mov	r0, r3
  40511e:	370c      	adds	r7, #12
  405120:	46bd      	mov	sp, r7
  405122:	f85d 7b04 	ldr.w	r7, [sp], #4
  405126:	4770      	bx	lr
  405128:	20000018 	.word	0x20000018

0040512c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  40512c:	b480      	push	{r7}
  40512e:	b083      	sub	sp, #12
  405130:	af00      	add	r7, sp, #0
  405132:	6078      	str	r0, [r7, #4]
	return (flags);
  405134:	687b      	ldr	r3, [r7, #4]
  405136:	2b00      	cmp	r3, #0
  405138:	bf14      	ite	ne
  40513a:	2301      	movne	r3, #1
  40513c:	2300      	moveq	r3, #0
  40513e:	b2db      	uxtb	r3, r3
}
  405140:	4618      	mov	r0, r3
  405142:	370c      	adds	r7, #12
  405144:	46bd      	mov	sp, r7
  405146:	f85d 7b04 	ldr.w	r7, [sp], #4
  40514a:	4770      	bx	lr

0040514c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  40514c:	b580      	push	{r7, lr}
  40514e:	b082      	sub	sp, #8
  405150:	af00      	add	r7, sp, #0
  405152:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  405154:	6878      	ldr	r0, [r7, #4]
  405156:	4b07      	ldr	r3, [pc, #28]	; (405174 <cpu_irq_restore+0x28>)
  405158:	4798      	blx	r3
  40515a:	4603      	mov	r3, r0
  40515c:	2b00      	cmp	r3, #0
  40515e:	d005      	beq.n	40516c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  405160:	4b05      	ldr	r3, [pc, #20]	; (405178 <cpu_irq_restore+0x2c>)
  405162:	2201      	movs	r2, #1
  405164:	701a      	strb	r2, [r3, #0]
  405166:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40516a:	b662      	cpsie	i
}
  40516c:	bf00      	nop
  40516e:	3708      	adds	r7, #8
  405170:	46bd      	mov	sp, r7
  405172:	bd80      	pop	{r7, pc}
  405174:	0040512d 	.word	0x0040512d
  405178:	20000018 	.word	0x20000018

0040517c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40517c:	b580      	push	{r7, lr}
  40517e:	b084      	sub	sp, #16
  405180:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  405182:	4b1e      	ldr	r3, [pc, #120]	; (4051fc <Reset_Handler+0x80>)
  405184:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  405186:	4b1e      	ldr	r3, [pc, #120]	; (405200 <Reset_Handler+0x84>)
  405188:	60bb      	str	r3, [r7, #8]

	if (pSrc != pDest) {
  40518a:	68fa      	ldr	r2, [r7, #12]
  40518c:	68bb      	ldr	r3, [r7, #8]
  40518e:	429a      	cmp	r2, r3
  405190:	d00c      	beq.n	4051ac <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  405192:	e007      	b.n	4051a4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  405194:	68bb      	ldr	r3, [r7, #8]
  405196:	1d1a      	adds	r2, r3, #4
  405198:	60ba      	str	r2, [r7, #8]
  40519a:	68fa      	ldr	r2, [r7, #12]
  40519c:	1d11      	adds	r1, r2, #4
  40519e:	60f9      	str	r1, [r7, #12]
  4051a0:	6812      	ldr	r2, [r2, #0]
  4051a2:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  4051a4:	68bb      	ldr	r3, [r7, #8]
  4051a6:	4a17      	ldr	r2, [pc, #92]	; (405204 <Reset_Handler+0x88>)
  4051a8:	4293      	cmp	r3, r2
  4051aa:	d3f3      	bcc.n	405194 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4051ac:	4b16      	ldr	r3, [pc, #88]	; (405208 <Reset_Handler+0x8c>)
  4051ae:	60bb      	str	r3, [r7, #8]
  4051b0:	e004      	b.n	4051bc <Reset_Handler+0x40>
		*pDest++ = 0;
  4051b2:	68bb      	ldr	r3, [r7, #8]
  4051b4:	1d1a      	adds	r2, r3, #4
  4051b6:	60ba      	str	r2, [r7, #8]
  4051b8:	2200      	movs	r2, #0
  4051ba:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  4051bc:	68bb      	ldr	r3, [r7, #8]
  4051be:	4a13      	ldr	r2, [pc, #76]	; (40520c <Reset_Handler+0x90>)
  4051c0:	4293      	cmp	r3, r2
  4051c2:	d3f6      	bcc.n	4051b2 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  4051c4:	4b12      	ldr	r3, [pc, #72]	; (405210 <Reset_Handler+0x94>)
  4051c6:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4051c8:	4a12      	ldr	r2, [pc, #72]	; (405214 <Reset_Handler+0x98>)
  4051ca:	68fb      	ldr	r3, [r7, #12]
  4051cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4051d0:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4051d2:	4b11      	ldr	r3, [pc, #68]	; (405218 <Reset_Handler+0x9c>)
  4051d4:	4798      	blx	r3
  4051d6:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4051d8:	4a10      	ldr	r2, [pc, #64]	; (40521c <Reset_Handler+0xa0>)
  4051da:	4b10      	ldr	r3, [pc, #64]	; (40521c <Reset_Handler+0xa0>)
  4051dc:	681b      	ldr	r3, [r3, #0]
  4051de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4051e2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4051e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4051e8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4051ec:	6878      	ldr	r0, [r7, #4]
  4051ee:	4b0c      	ldr	r3, [pc, #48]	; (405220 <Reset_Handler+0xa4>)
  4051f0:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4051f2:	4b0c      	ldr	r3, [pc, #48]	; (405224 <Reset_Handler+0xa8>)
  4051f4:	4798      	blx	r3

	/* Branch to main function */
	main();
  4051f6:	4b0c      	ldr	r3, [pc, #48]	; (405228 <Reset_Handler+0xac>)
  4051f8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4051fa:	e7fe      	b.n	4051fa <Reset_Handler+0x7e>
  4051fc:	0040b92c 	.word	0x0040b92c
  405200:	20000000 	.word	0x20000000
  405204:	200009d0 	.word	0x200009d0
  405208:	200009d0 	.word	0x200009d0
  40520c:	2000ace0 	.word	0x2000ace0
  405210:	00400000 	.word	0x00400000
  405214:	e000ed00 	.word	0xe000ed00
  405218:	004050f5 	.word	0x004050f5
  40521c:	e000ed88 	.word	0xe000ed88
  405220:	0040514d 	.word	0x0040514d
  405224:	004067c1 	.word	0x004067c1
  405228:	00405485 	.word	0x00405485

0040522c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40522c:	b480      	push	{r7}
  40522e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  405230:	4b52      	ldr	r3, [pc, #328]	; (40537c <SystemCoreClockUpdate+0x150>)
  405232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405234:	f003 0303 	and.w	r3, r3, #3
  405238:	2b01      	cmp	r3, #1
  40523a:	d014      	beq.n	405266 <SystemCoreClockUpdate+0x3a>
  40523c:	2b01      	cmp	r3, #1
  40523e:	d302      	bcc.n	405246 <SystemCoreClockUpdate+0x1a>
  405240:	2b02      	cmp	r3, #2
  405242:	d038      	beq.n	4052b6 <SystemCoreClockUpdate+0x8a>
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
		}
		break;

	default:
		break;
  405244:	e07a      	b.n	40533c <SystemCoreClockUpdate+0x110>
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  405246:	4b4e      	ldr	r3, [pc, #312]	; (405380 <SystemCoreClockUpdate+0x154>)
  405248:	695b      	ldr	r3, [r3, #20]
  40524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40524e:	2b00      	cmp	r3, #0
  405250:	d004      	beq.n	40525c <SystemCoreClockUpdate+0x30>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405252:	4b4c      	ldr	r3, [pc, #304]	; (405384 <SystemCoreClockUpdate+0x158>)
  405254:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405258:	601a      	str	r2, [r3, #0]
		break;
  40525a:	e06f      	b.n	40533c <SystemCoreClockUpdate+0x110>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40525c:	4b49      	ldr	r3, [pc, #292]	; (405384 <SystemCoreClockUpdate+0x158>)
  40525e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  405262:	601a      	str	r2, [r3, #0]
		break;
  405264:	e06a      	b.n	40533c <SystemCoreClockUpdate+0x110>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  405266:	4b45      	ldr	r3, [pc, #276]	; (40537c <SystemCoreClockUpdate+0x150>)
  405268:	6a1b      	ldr	r3, [r3, #32]
  40526a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40526e:	2b00      	cmp	r3, #0
  405270:	d003      	beq.n	40527a <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  405272:	4b44      	ldr	r3, [pc, #272]	; (405384 <SystemCoreClockUpdate+0x158>)
  405274:	4a44      	ldr	r2, [pc, #272]	; (405388 <SystemCoreClockUpdate+0x15c>)
  405276:	601a      	str	r2, [r3, #0]
		break;
  405278:	e060      	b.n	40533c <SystemCoreClockUpdate+0x110>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40527a:	4b42      	ldr	r3, [pc, #264]	; (405384 <SystemCoreClockUpdate+0x158>)
  40527c:	4a43      	ldr	r2, [pc, #268]	; (40538c <SystemCoreClockUpdate+0x160>)
  40527e:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  405280:	4b3e      	ldr	r3, [pc, #248]	; (40537c <SystemCoreClockUpdate+0x150>)
  405282:	6a1b      	ldr	r3, [r3, #32]
  405284:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405288:	2b10      	cmp	r3, #16
  40528a:	d004      	beq.n	405296 <SystemCoreClockUpdate+0x6a>
  40528c:	2b20      	cmp	r3, #32
  40528e:	d008      	beq.n	4052a2 <SystemCoreClockUpdate+0x76>
  405290:	2b00      	cmp	r3, #0
  405292:	d00e      	beq.n	4052b2 <SystemCoreClockUpdate+0x86>
				break;
  405294:	e00e      	b.n	4052b4 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 2U;
  405296:	4b3b      	ldr	r3, [pc, #236]	; (405384 <SystemCoreClockUpdate+0x158>)
  405298:	681b      	ldr	r3, [r3, #0]
  40529a:	005b      	lsls	r3, r3, #1
  40529c:	4a39      	ldr	r2, [pc, #228]	; (405384 <SystemCoreClockUpdate+0x158>)
  40529e:	6013      	str	r3, [r2, #0]
				break;
  4052a0:	e008      	b.n	4052b4 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 3U;
  4052a2:	4b38      	ldr	r3, [pc, #224]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052a4:	681a      	ldr	r2, [r3, #0]
  4052a6:	4613      	mov	r3, r2
  4052a8:	005b      	lsls	r3, r3, #1
  4052aa:	4413      	add	r3, r2
  4052ac:	4a35      	ldr	r2, [pc, #212]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052ae:	6013      	str	r3, [r2, #0]
				break;
  4052b0:	e000      	b.n	4052b4 <SystemCoreClockUpdate+0x88>
				break;
  4052b2:	bf00      	nop
		break;
  4052b4:	e042      	b.n	40533c <SystemCoreClockUpdate+0x110>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4052b6:	4b31      	ldr	r3, [pc, #196]	; (40537c <SystemCoreClockUpdate+0x150>)
  4052b8:	6a1b      	ldr	r3, [r3, #32]
  4052ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4052be:	2b00      	cmp	r3, #0
  4052c0:	d003      	beq.n	4052ca <SystemCoreClockUpdate+0x9e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4052c2:	4b30      	ldr	r3, [pc, #192]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052c4:	4a30      	ldr	r2, [pc, #192]	; (405388 <SystemCoreClockUpdate+0x15c>)
  4052c6:	601a      	str	r2, [r3, #0]
  4052c8:	e01c      	b.n	405304 <SystemCoreClockUpdate+0xd8>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4052ca:	4b2e      	ldr	r3, [pc, #184]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052cc:	4a2f      	ldr	r2, [pc, #188]	; (40538c <SystemCoreClockUpdate+0x160>)
  4052ce:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4052d0:	4b2a      	ldr	r3, [pc, #168]	; (40537c <SystemCoreClockUpdate+0x150>)
  4052d2:	6a1b      	ldr	r3, [r3, #32]
  4052d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4052d8:	2b10      	cmp	r3, #16
  4052da:	d004      	beq.n	4052e6 <SystemCoreClockUpdate+0xba>
  4052dc:	2b20      	cmp	r3, #32
  4052de:	d008      	beq.n	4052f2 <SystemCoreClockUpdate+0xc6>
  4052e0:	2b00      	cmp	r3, #0
  4052e2:	d00e      	beq.n	405302 <SystemCoreClockUpdate+0xd6>
				break;
  4052e4:	e00e      	b.n	405304 <SystemCoreClockUpdate+0xd8>
				SystemCoreClock *= 2U;
  4052e6:	4b27      	ldr	r3, [pc, #156]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052e8:	681b      	ldr	r3, [r3, #0]
  4052ea:	005b      	lsls	r3, r3, #1
  4052ec:	4a25      	ldr	r2, [pc, #148]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052ee:	6013      	str	r3, [r2, #0]
				break;
  4052f0:	e008      	b.n	405304 <SystemCoreClockUpdate+0xd8>
				SystemCoreClock *= 3U;
  4052f2:	4b24      	ldr	r3, [pc, #144]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052f4:	681a      	ldr	r2, [r3, #0]
  4052f6:	4613      	mov	r3, r2
  4052f8:	005b      	lsls	r3, r3, #1
  4052fa:	4413      	add	r3, r2
  4052fc:	4a21      	ldr	r2, [pc, #132]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052fe:	6013      	str	r3, [r2, #0]
				break;
  405300:	e000      	b.n	405304 <SystemCoreClockUpdate+0xd8>
				break;
  405302:	bf00      	nop
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  405304:	4b1d      	ldr	r3, [pc, #116]	; (40537c <SystemCoreClockUpdate+0x150>)
  405306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405308:	f003 0303 	and.w	r3, r3, #3
  40530c:	2b02      	cmp	r3, #2
  40530e:	d114      	bne.n	40533a <SystemCoreClockUpdate+0x10e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405310:	4b1a      	ldr	r3, [pc, #104]	; (40537c <SystemCoreClockUpdate+0x150>)
  405312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  405314:	0c1b      	lsrs	r3, r3, #16
  405316:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40531a:	3301      	adds	r3, #1
  40531c:	4a19      	ldr	r2, [pc, #100]	; (405384 <SystemCoreClockUpdate+0x158>)
  40531e:	6812      	ldr	r2, [r2, #0]
  405320:	fb02 f303 	mul.w	r3, r2, r3
  405324:	4a17      	ldr	r2, [pc, #92]	; (405384 <SystemCoreClockUpdate+0x158>)
  405326:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405328:	4b14      	ldr	r3, [pc, #80]	; (40537c <SystemCoreClockUpdate+0x150>)
  40532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40532c:	b2db      	uxtb	r3, r3
  40532e:	4a15      	ldr	r2, [pc, #84]	; (405384 <SystemCoreClockUpdate+0x158>)
  405330:	6812      	ldr	r2, [r2, #0]
  405332:	fbb2 f3f3 	udiv	r3, r2, r3
  405336:	4a13      	ldr	r2, [pc, #76]	; (405384 <SystemCoreClockUpdate+0x158>)
  405338:	6013      	str	r3, [r2, #0]
		break;
  40533a:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40533c:	4b0f      	ldr	r3, [pc, #60]	; (40537c <SystemCoreClockUpdate+0x150>)
  40533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405340:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405344:	2b70      	cmp	r3, #112	; 0x70
  405346:	d108      	bne.n	40535a <SystemCoreClockUpdate+0x12e>
		SystemCoreClock /= 3U;
  405348:	4b0e      	ldr	r3, [pc, #56]	; (405384 <SystemCoreClockUpdate+0x158>)
  40534a:	681b      	ldr	r3, [r3, #0]
  40534c:	4a10      	ldr	r2, [pc, #64]	; (405390 <SystemCoreClockUpdate+0x164>)
  40534e:	fba2 2303 	umull	r2, r3, r2, r3
  405352:	085b      	lsrs	r3, r3, #1
  405354:	4a0b      	ldr	r2, [pc, #44]	; (405384 <SystemCoreClockUpdate+0x158>)
  405356:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
				PMC_MCKR_PRES_Pos);
	}
}
  405358:	e00a      	b.n	405370 <SystemCoreClockUpdate+0x144>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  40535a:	4b08      	ldr	r3, [pc, #32]	; (40537c <SystemCoreClockUpdate+0x150>)
  40535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40535e:	091b      	lsrs	r3, r3, #4
  405360:	f003 0307 	and.w	r3, r3, #7
  405364:	4a07      	ldr	r2, [pc, #28]	; (405384 <SystemCoreClockUpdate+0x158>)
  405366:	6812      	ldr	r2, [r2, #0]
  405368:	fa22 f303 	lsr.w	r3, r2, r3
  40536c:	4a05      	ldr	r2, [pc, #20]	; (405384 <SystemCoreClockUpdate+0x158>)
  40536e:	6013      	str	r3, [r2, #0]
}
  405370:	bf00      	nop
  405372:	46bd      	mov	sp, r7
  405374:	f85d 7b04 	ldr.w	r7, [sp], #4
  405378:	4770      	bx	lr
  40537a:	bf00      	nop
  40537c:	400e0400 	.word	0x400e0400
  405380:	400e1810 	.word	0x400e1810
  405384:	2000001c 	.word	0x2000001c
  405388:	00b71b00 	.word	0x00b71b00
  40538c:	003d0900 	.word	0x003d0900
  405390:	aaaaaaab 	.word	0xaaaaaaab

00405394 <system_init_flash>:

/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  405394:	b480      	push	{r7}
  405396:	b083      	sub	sp, #12
  405398:	af00      	add	r7, sp, #0
  40539a:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40539c:	687b      	ldr	r3, [r7, #4]
  40539e:	4a19      	ldr	r2, [pc, #100]	; (405404 <system_init_flash+0x70>)
  4053a0:	4293      	cmp	r3, r2
  4053a2:	d804      	bhi.n	4053ae <system_init_flash+0x1a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4053a4:	4b18      	ldr	r3, [pc, #96]	; (405408 <system_init_flash+0x74>)
  4053a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4053aa:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
}
  4053ac:	e023      	b.n	4053f6 <system_init_flash+0x62>
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4053ae:	687b      	ldr	r3, [r7, #4]
  4053b0:	4a16      	ldr	r2, [pc, #88]	; (40540c <system_init_flash+0x78>)
  4053b2:	4293      	cmp	r3, r2
  4053b4:	d803      	bhi.n	4053be <system_init_flash+0x2a>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4053b6:	4b14      	ldr	r3, [pc, #80]	; (405408 <system_init_flash+0x74>)
  4053b8:	4a15      	ldr	r2, [pc, #84]	; (405410 <system_init_flash+0x7c>)
  4053ba:	601a      	str	r2, [r3, #0]
}
  4053bc:	e01b      	b.n	4053f6 <system_init_flash+0x62>
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4053be:	687b      	ldr	r3, [r7, #4]
  4053c0:	4a14      	ldr	r2, [pc, #80]	; (405414 <system_init_flash+0x80>)
  4053c2:	4293      	cmp	r3, r2
  4053c4:	d803      	bhi.n	4053ce <system_init_flash+0x3a>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4053c6:	4b10      	ldr	r3, [pc, #64]	; (405408 <system_init_flash+0x74>)
  4053c8:	4a13      	ldr	r2, [pc, #76]	; (405418 <system_init_flash+0x84>)
  4053ca:	601a      	str	r2, [r3, #0]
}
  4053cc:	e013      	b.n	4053f6 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4053ce:	687b      	ldr	r3, [r7, #4]
  4053d0:	4a12      	ldr	r2, [pc, #72]	; (40541c <system_init_flash+0x88>)
  4053d2:	4293      	cmp	r3, r2
  4053d4:	d803      	bhi.n	4053de <system_init_flash+0x4a>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4053d6:	4b0c      	ldr	r3, [pc, #48]	; (405408 <system_init_flash+0x74>)
  4053d8:	4a11      	ldr	r2, [pc, #68]	; (405420 <system_init_flash+0x8c>)
  4053da:	601a      	str	r2, [r3, #0]
}
  4053dc:	e00b      	b.n	4053f6 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4053de:	687b      	ldr	r3, [r7, #4]
  4053e0:	4a10      	ldr	r2, [pc, #64]	; (405424 <system_init_flash+0x90>)
  4053e2:	4293      	cmp	r3, r2
  4053e4:	d804      	bhi.n	4053f0 <system_init_flash+0x5c>
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4053e6:	4b08      	ldr	r3, [pc, #32]	; (405408 <system_init_flash+0x74>)
  4053e8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4053ec:	601a      	str	r2, [r3, #0]
}
  4053ee:	e002      	b.n	4053f6 <system_init_flash+0x62>
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4053f0:	4b05      	ldr	r3, [pc, #20]	; (405408 <system_init_flash+0x74>)
  4053f2:	4a0d      	ldr	r2, [pc, #52]	; (405428 <system_init_flash+0x94>)
  4053f4:	601a      	str	r2, [r3, #0]
}
  4053f6:	bf00      	nop
  4053f8:	370c      	adds	r7, #12
  4053fa:	46bd      	mov	sp, r7
  4053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405400:	4770      	bx	lr
  405402:	bf00      	nop
  405404:	01312cff 	.word	0x01312cff
  405408:	400e0a00 	.word	0x400e0a00
  40540c:	026259ff 	.word	0x026259ff
  405410:	04000100 	.word	0x04000100
  405414:	039386ff 	.word	0x039386ff
  405418:	04000200 	.word	0x04000200
  40541c:	04c4b3ff 	.word	0x04c4b3ff
  405420:	04000300 	.word	0x04000300
  405424:	05f5e0ff 	.word	0x05f5e0ff
  405428:	04000500 	.word	0x04000500

0040542c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40542c:	b480      	push	{r7}
  40542e:	b085      	sub	sp, #20
  405430:	af00      	add	r7, sp, #0
  405432:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  405434:	4b10      	ldr	r3, [pc, #64]	; (405478 <_sbrk+0x4c>)
  405436:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  405438:	4b10      	ldr	r3, [pc, #64]	; (40547c <_sbrk+0x50>)
  40543a:	681b      	ldr	r3, [r3, #0]
  40543c:	2b00      	cmp	r3, #0
  40543e:	d102      	bne.n	405446 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  405440:	4b0e      	ldr	r3, [pc, #56]	; (40547c <_sbrk+0x50>)
  405442:	4a0f      	ldr	r2, [pc, #60]	; (405480 <_sbrk+0x54>)
  405444:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  405446:	4b0d      	ldr	r3, [pc, #52]	; (40547c <_sbrk+0x50>)
  405448:	681b      	ldr	r3, [r3, #0]
  40544a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40544c:	68ba      	ldr	r2, [r7, #8]
  40544e:	687b      	ldr	r3, [r7, #4]
  405450:	441a      	add	r2, r3
  405452:	68fb      	ldr	r3, [r7, #12]
  405454:	429a      	cmp	r2, r3
  405456:	dd02      	ble.n	40545e <_sbrk+0x32>
		return (caddr_t) -1;	
  405458:	f04f 33ff 	mov.w	r3, #4294967295
  40545c:	e006      	b.n	40546c <_sbrk+0x40>
	}

	heap += incr;
  40545e:	4b07      	ldr	r3, [pc, #28]	; (40547c <_sbrk+0x50>)
  405460:	681a      	ldr	r2, [r3, #0]
  405462:	687b      	ldr	r3, [r7, #4]
  405464:	4413      	add	r3, r2
  405466:	4a05      	ldr	r2, [pc, #20]	; (40547c <_sbrk+0x50>)
  405468:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40546a:	68bb      	ldr	r3, [r7, #8]
}
  40546c:	4618      	mov	r0, r3
  40546e:	3714      	adds	r7, #20
  405470:	46bd      	mov	sp, r7
  405472:	f85d 7b04 	ldr.w	r7, [sp], #4
  405476:	4770      	bx	lr
  405478:	2001fffc 	.word	0x2001fffc
  40547c:	2000abd8 	.word	0x2000abd8
  405480:	2000dce0 	.word	0x2000dce0

00405484 <main>:
/* Function definitions ----------------------------------------------- */
/**
 * @brief Entry
 */
int main(void)
{
  405484:	b580      	push	{r7, lr}
  405486:	af00      	add	r7, sp, #0
  sys_init();
  405488:	4b02      	ldr	r3, [pc, #8]	; (405494 <main+0x10>)
  40548a:	4798      	blx	r3
  40548c:	2300      	movs	r3, #0
}
  40548e:	4618      	mov	r0, r3
  405490:	bd80      	pop	{r7, pc}
  405492:	bf00      	nop
  405494:	00402da5 	.word	0x00402da5

00405498 <osc_enable>:
{
  405498:	b580      	push	{r7, lr}
  40549a:	b082      	sub	sp, #8
  40549c:	af00      	add	r7, sp, #0
  40549e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4054a0:	687b      	ldr	r3, [r7, #4]
  4054a2:	2b07      	cmp	r3, #7
  4054a4:	d831      	bhi.n	40550a <osc_enable+0x72>
  4054a6:	a201      	add	r2, pc, #4	; (adr r2, 4054ac <osc_enable+0x14>)
  4054a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4054ac:	00405509 	.word	0x00405509
  4054b0:	004054cd 	.word	0x004054cd
  4054b4:	004054d5 	.word	0x004054d5
  4054b8:	004054dd 	.word	0x004054dd
  4054bc:	004054e5 	.word	0x004054e5
  4054c0:	004054ed 	.word	0x004054ed
  4054c4:	004054f5 	.word	0x004054f5
  4054c8:	004054ff 	.word	0x004054ff
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4054cc:	2000      	movs	r0, #0
  4054ce:	4b11      	ldr	r3, [pc, #68]	; (405514 <osc_enable+0x7c>)
  4054d0:	4798      	blx	r3
		break;
  4054d2:	e01a      	b.n	40550a <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4054d4:	2001      	movs	r0, #1
  4054d6:	4b0f      	ldr	r3, [pc, #60]	; (405514 <osc_enable+0x7c>)
  4054d8:	4798      	blx	r3
		break;
  4054da:	e016      	b.n	40550a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4054dc:	2000      	movs	r0, #0
  4054de:	4b0e      	ldr	r3, [pc, #56]	; (405518 <osc_enable+0x80>)
  4054e0:	4798      	blx	r3
		break;
  4054e2:	e012      	b.n	40550a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4054e4:	2010      	movs	r0, #16
  4054e6:	4b0c      	ldr	r3, [pc, #48]	; (405518 <osc_enable+0x80>)
  4054e8:	4798      	blx	r3
		break;
  4054ea:	e00e      	b.n	40550a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4054ec:	2020      	movs	r0, #32
  4054ee:	4b0a      	ldr	r3, [pc, #40]	; (405518 <osc_enable+0x80>)
  4054f0:	4798      	blx	r3
		break;
  4054f2:	e00a      	b.n	40550a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4054f4:	213e      	movs	r1, #62	; 0x3e
  4054f6:	2000      	movs	r0, #0
  4054f8:	4b08      	ldr	r3, [pc, #32]	; (40551c <osc_enable+0x84>)
  4054fa:	4798      	blx	r3
		break;
  4054fc:	e005      	b.n	40550a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4054fe:	213e      	movs	r1, #62	; 0x3e
  405500:	2001      	movs	r0, #1
  405502:	4b06      	ldr	r3, [pc, #24]	; (40551c <osc_enable+0x84>)
  405504:	4798      	blx	r3
		break;
  405506:	e000      	b.n	40550a <osc_enable+0x72>
		break;
  405508:	bf00      	nop
}
  40550a:	bf00      	nop
  40550c:	3708      	adds	r7, #8
  40550e:	46bd      	mov	sp, r7
  405510:	bd80      	pop	{r7, pc}
  405512:	bf00      	nop
  405514:	00405fad 	.word	0x00405fad
  405518:	00406019 	.word	0x00406019
  40551c:	00406089 	.word	0x00406089

00405520 <osc_is_ready>:
{
  405520:	b580      	push	{r7, lr}
  405522:	b082      	sub	sp, #8
  405524:	af00      	add	r7, sp, #0
  405526:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405528:	687b      	ldr	r3, [r7, #4]
  40552a:	2b07      	cmp	r3, #7
  40552c:	d826      	bhi.n	40557c <osc_is_ready+0x5c>
  40552e:	a201      	add	r2, pc, #4	; (adr r2, 405534 <osc_is_ready+0x14>)
  405530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405534:	00405555 	.word	0x00405555
  405538:	00405559 	.word	0x00405559
  40553c:	00405559 	.word	0x00405559
  405540:	0040556b 	.word	0x0040556b
  405544:	0040556b 	.word	0x0040556b
  405548:	0040556b 	.word	0x0040556b
  40554c:	0040556b 	.word	0x0040556b
  405550:	0040556b 	.word	0x0040556b
		return 1;
  405554:	2301      	movs	r3, #1
  405556:	e012      	b.n	40557e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  405558:	4b0b      	ldr	r3, [pc, #44]	; (405588 <osc_is_ready+0x68>)
  40555a:	4798      	blx	r3
  40555c:	4603      	mov	r3, r0
  40555e:	2b00      	cmp	r3, #0
  405560:	bf14      	ite	ne
  405562:	2301      	movne	r3, #1
  405564:	2300      	moveq	r3, #0
  405566:	b2db      	uxtb	r3, r3
  405568:	e009      	b.n	40557e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  40556a:	4b08      	ldr	r3, [pc, #32]	; (40558c <osc_is_ready+0x6c>)
  40556c:	4798      	blx	r3
  40556e:	4603      	mov	r3, r0
  405570:	2b00      	cmp	r3, #0
  405572:	bf14      	ite	ne
  405574:	2301      	movne	r3, #1
  405576:	2300      	moveq	r3, #0
  405578:	b2db      	uxtb	r3, r3
  40557a:	e000      	b.n	40557e <osc_is_ready+0x5e>
	return 0;
  40557c:	2300      	movs	r3, #0
}
  40557e:	4618      	mov	r0, r3
  405580:	3708      	adds	r7, #8
  405582:	46bd      	mov	sp, r7
  405584:	bd80      	pop	{r7, pc}
  405586:	bf00      	nop
  405588:	00405fe5 	.word	0x00405fe5
  40558c:	00406101 	.word	0x00406101

00405590 <osc_get_rate>:
{
  405590:	b480      	push	{r7}
  405592:	b083      	sub	sp, #12
  405594:	af00      	add	r7, sp, #0
  405596:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405598:	687b      	ldr	r3, [r7, #4]
  40559a:	2b07      	cmp	r3, #7
  40559c:	d825      	bhi.n	4055ea <osc_get_rate+0x5a>
  40559e:	a201      	add	r2, pc, #4	; (adr r2, 4055a4 <osc_get_rate+0x14>)
  4055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4055a4:	004055c5 	.word	0x004055c5
  4055a8:	004055cb 	.word	0x004055cb
  4055ac:	004055d1 	.word	0x004055d1
  4055b0:	004055d7 	.word	0x004055d7
  4055b4:	004055db 	.word	0x004055db
  4055b8:	004055df 	.word	0x004055df
  4055bc:	004055e3 	.word	0x004055e3
  4055c0:	004055e7 	.word	0x004055e7
		return OSC_SLCK_32K_RC_HZ;
  4055c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4055c8:	e010      	b.n	4055ec <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4055ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4055ce:	e00d      	b.n	4055ec <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4055d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4055d4:	e00a      	b.n	4055ec <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4055d6:	4b08      	ldr	r3, [pc, #32]	; (4055f8 <osc_get_rate+0x68>)
  4055d8:	e008      	b.n	4055ec <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4055da:	4b08      	ldr	r3, [pc, #32]	; (4055fc <osc_get_rate+0x6c>)
  4055dc:	e006      	b.n	4055ec <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4055de:	4b08      	ldr	r3, [pc, #32]	; (405600 <osc_get_rate+0x70>)
  4055e0:	e004      	b.n	4055ec <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4055e2:	4b07      	ldr	r3, [pc, #28]	; (405600 <osc_get_rate+0x70>)
  4055e4:	e002      	b.n	4055ec <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4055e6:	4b06      	ldr	r3, [pc, #24]	; (405600 <osc_get_rate+0x70>)
  4055e8:	e000      	b.n	4055ec <osc_get_rate+0x5c>
	return 0;
  4055ea:	2300      	movs	r3, #0
}
  4055ec:	4618      	mov	r0, r3
  4055ee:	370c      	adds	r7, #12
  4055f0:	46bd      	mov	sp, r7
  4055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4055f6:	4770      	bx	lr
  4055f8:	003d0900 	.word	0x003d0900
  4055fc:	007a1200 	.word	0x007a1200
  405600:	00b71b00 	.word	0x00b71b00

00405604 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  405604:	b580      	push	{r7, lr}
  405606:	b082      	sub	sp, #8
  405608:	af00      	add	r7, sp, #0
  40560a:	4603      	mov	r3, r0
  40560c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40560e:	bf00      	nop
  405610:	79fb      	ldrb	r3, [r7, #7]
  405612:	4618      	mov	r0, r3
  405614:	4b05      	ldr	r3, [pc, #20]	; (40562c <osc_wait_ready+0x28>)
  405616:	4798      	blx	r3
  405618:	4603      	mov	r3, r0
  40561a:	f083 0301 	eor.w	r3, r3, #1
  40561e:	b2db      	uxtb	r3, r3
  405620:	2b00      	cmp	r3, #0
  405622:	d1f5      	bne.n	405610 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  405624:	bf00      	nop
  405626:	3708      	adds	r7, #8
  405628:	46bd      	mov	sp, r7
  40562a:	bd80      	pop	{r7, pc}
  40562c:	00405521 	.word	0x00405521

00405630 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  405630:	b580      	push	{r7, lr}
  405632:	b086      	sub	sp, #24
  405634:	af00      	add	r7, sp, #0
  405636:	60f8      	str	r0, [r7, #12]
  405638:	607a      	str	r2, [r7, #4]
  40563a:	603b      	str	r3, [r7, #0]
  40563c:	460b      	mov	r3, r1
  40563e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  405640:	7afb      	ldrb	r3, [r7, #11]
  405642:	4618      	mov	r0, r3
  405644:	4b0d      	ldr	r3, [pc, #52]	; (40567c <pll_config_init+0x4c>)
  405646:	4798      	blx	r3
  405648:	4602      	mov	r2, r0
  40564a:	687b      	ldr	r3, [r7, #4]
  40564c:	fbb2 f3f3 	udiv	r3, r2, r3
  405650:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  405652:	697b      	ldr	r3, [r7, #20]
  405654:	683a      	ldr	r2, [r7, #0]
  405656:	fb02 f303 	mul.w	r3, r2, r3
  40565a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | \
  40565c:	683b      	ldr	r3, [r7, #0]
  40565e:	3b01      	subs	r3, #1
  405660:	041a      	lsls	r2, r3, #16
  405662:	4b07      	ldr	r3, [pc, #28]	; (405680 <pll_config_init+0x50>)
  405664:	4013      	ands	r3, r2
  405666:	687a      	ldr	r2, [r7, #4]
  405668:	b2d2      	uxtb	r2, r2
  40566a:	4313      	orrs	r3, r2
  40566c:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  405670:	68fb      	ldr	r3, [r7, #12]
  405672:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
}
  405674:	bf00      	nop
  405676:	3718      	adds	r7, #24
  405678:	46bd      	mov	sp, r7
  40567a:	bd80      	pop	{r7, pc}
  40567c:	00405591 	.word	0x00405591
  405680:	07ff0000 	.word	0x07ff0000

00405684 <pll_enable>:
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  405684:	b580      	push	{r7, lr}
  405686:	b082      	sub	sp, #8
  405688:	af00      	add	r7, sp, #0
  40568a:	6078      	str	r0, [r7, #4]
  40568c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40568e:	683b      	ldr	r3, [r7, #0]
  405690:	2b00      	cmp	r3, #0
  405692:	d107      	bne.n	4056a4 <pll_enable+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
  405694:	4b05      	ldr	r3, [pc, #20]	; (4056ac <pll_enable+0x28>)
  405696:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  405698:	4a05      	ldr	r2, [pc, #20]	; (4056b0 <pll_enable+0x2c>)
  40569a:	687b      	ldr	r3, [r7, #4]
  40569c:	681b      	ldr	r3, [r3, #0]
  40569e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4056a2:	6293      	str	r3, [r2, #40]	; 0x28
	}
}
  4056a4:	bf00      	nop
  4056a6:	3708      	adds	r7, #8
  4056a8:	46bd      	mov	sp, r7
  4056aa:	bd80      	pop	{r7, pc}
  4056ac:	0040611d 	.word	0x0040611d
  4056b0:	400e0400 	.word	0x400e0400

004056b4 <pll_is_locked>:
		pmc_disable_pllack();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4056b4:	b580      	push	{r7, lr}
  4056b6:	b082      	sub	sp, #8
  4056b8:	af00      	add	r7, sp, #0
  4056ba:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  4056bc:	4b03      	ldr	r3, [pc, #12]	; (4056cc <pll_is_locked+0x18>)
  4056be:	4798      	blx	r3
  4056c0:	4603      	mov	r3, r0
}
  4056c2:	4618      	mov	r0, r3
  4056c4:	3708      	adds	r7, #8
  4056c6:	46bd      	mov	sp, r7
  4056c8:	bd80      	pop	{r7, pc}
  4056ca:	bf00      	nop
  4056cc:	00406139 	.word	0x00406139

004056d0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4056d0:	b580      	push	{r7, lr}
  4056d2:	b082      	sub	sp, #8
  4056d4:	af00      	add	r7, sp, #0
  4056d6:	4603      	mov	r3, r0
  4056d8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4056da:	79fb      	ldrb	r3, [r7, #7]
  4056dc:	3b03      	subs	r3, #3
  4056de:	2b04      	cmp	r3, #4
  4056e0:	d808      	bhi.n	4056f4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4056e2:	79fb      	ldrb	r3, [r7, #7]
  4056e4:	4618      	mov	r0, r3
  4056e6:	4b06      	ldr	r3, [pc, #24]	; (405700 <pll_enable_source+0x30>)
  4056e8:	4798      	blx	r3
		osc_wait_ready(e_src);
  4056ea:	79fb      	ldrb	r3, [r7, #7]
  4056ec:	4618      	mov	r0, r3
  4056ee:	4b05      	ldr	r3, [pc, #20]	; (405704 <pll_enable_source+0x34>)
  4056f0:	4798      	blx	r3
		break;
  4056f2:	e000      	b.n	4056f6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4056f4:	bf00      	nop
	}
}
  4056f6:	bf00      	nop
  4056f8:	3708      	adds	r7, #8
  4056fa:	46bd      	mov	sp, r7
  4056fc:	bd80      	pop	{r7, pc}
  4056fe:	bf00      	nop
  405700:	00405499 	.word	0x00405499
  405704:	00405605 	.word	0x00405605

00405708 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  405708:	b580      	push	{r7, lr}
  40570a:	b082      	sub	sp, #8
  40570c:	af00      	add	r7, sp, #0
  40570e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  405710:	bf00      	nop
  405712:	6878      	ldr	r0, [r7, #4]
  405714:	4b04      	ldr	r3, [pc, #16]	; (405728 <pll_wait_for_lock+0x20>)
  405716:	4798      	blx	r3
  405718:	4603      	mov	r3, r0
  40571a:	2b00      	cmp	r3, #0
  40571c:	d0f9      	beq.n	405712 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40571e:	2300      	movs	r3, #0
}
  405720:	4618      	mov	r0, r3
  405722:	3708      	adds	r7, #8
  405724:	46bd      	mov	sp, r7
  405726:	bd80      	pop	{r7, pc}
  405728:	004056b5 	.word	0x004056b5

0040572c <sysclk_get_main_hz>:
{
  40572c:	b580      	push	{r7, lr}
  40572e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  405730:	2006      	movs	r0, #6
  405732:	4b03      	ldr	r3, [pc, #12]	; (405740 <sysclk_get_main_hz+0x14>)
  405734:	4798      	blx	r3
  405736:	4603      	mov	r3, r0
  405738:	011b      	lsls	r3, r3, #4
}
  40573a:	4618      	mov	r0, r3
  40573c:	bd80      	pop	{r7, pc}
  40573e:	bf00      	nop
  405740:	00405591 	.word	0x00405591

00405744 <sysclk_get_cpu_hz>:
{
  405744:	b580      	push	{r7, lr}
  405746:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  405748:	4b02      	ldr	r3, [pc, #8]	; (405754 <sysclk_get_cpu_hz+0x10>)
  40574a:	4798      	blx	r3
  40574c:	4603      	mov	r3, r0
  40574e:	085b      	lsrs	r3, r3, #1
}
  405750:	4618      	mov	r0, r3
  405752:	bd80      	pop	{r7, pc}
  405754:	0040572d 	.word	0x0040572d

00405758 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  405758:	b590      	push	{r4, r7, lr}
  40575a:	b083      	sub	sp, #12
  40575c:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40575e:	4811      	ldr	r0, [pc, #68]	; (4057a4 <sysclk_init+0x4c>)
  405760:	4b11      	ldr	r3, [pc, #68]	; (4057a8 <sysclk_init+0x50>)
  405762:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  405764:	2006      	movs	r0, #6
  405766:	4b11      	ldr	r3, [pc, #68]	; (4057ac <sysclk_init+0x54>)
  405768:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40576a:	1d38      	adds	r0, r7, #4
  40576c:	2310      	movs	r3, #16
  40576e:	2201      	movs	r2, #1
  405770:	2106      	movs	r1, #6
  405772:	4c0f      	ldr	r4, [pc, #60]	; (4057b0 <sysclk_init+0x58>)
  405774:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  405776:	1d3b      	adds	r3, r7, #4
  405778:	2100      	movs	r1, #0
  40577a:	4618      	mov	r0, r3
  40577c:	4b0d      	ldr	r3, [pc, #52]	; (4057b4 <sysclk_init+0x5c>)
  40577e:	4798      	blx	r3
		pll_wait_for_lock(0);
  405780:	2000      	movs	r0, #0
  405782:	4b0d      	ldr	r3, [pc, #52]	; (4057b8 <sysclk_init+0x60>)
  405784:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  405786:	2010      	movs	r0, #16
  405788:	4b0c      	ldr	r3, [pc, #48]	; (4057bc <sysclk_init+0x64>)
  40578a:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40578c:	4b0c      	ldr	r3, [pc, #48]	; (4057c0 <sysclk_init+0x68>)
  40578e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  405790:	4b0c      	ldr	r3, [pc, #48]	; (4057c4 <sysclk_init+0x6c>)
  405792:	4798      	blx	r3
  405794:	4603      	mov	r3, r0
  405796:	4618      	mov	r0, r3
  405798:	4b03      	ldr	r3, [pc, #12]	; (4057a8 <sysclk_init+0x50>)
  40579a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40579c:	bf00      	nop
  40579e:	370c      	adds	r7, #12
  4057a0:	46bd      	mov	sp, r7
  4057a2:	bd90      	pop	{r4, r7, pc}
  4057a4:	07270e00 	.word	0x07270e00
  4057a8:	00405395 	.word	0x00405395
  4057ac:	004056d1 	.word	0x004056d1
  4057b0:	00405631 	.word	0x00405631
  4057b4:	00405685 	.word	0x00405685
  4057b8:	00405709 	.word	0x00405709
  4057bc:	00405f29 	.word	0x00405f29
  4057c0:	0040522d 	.word	0x0040522d
  4057c4:	00405745 	.word	0x00405745

004057c8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4057c8:	b580      	push	{r7, lr}
  4057ca:	b084      	sub	sp, #16
  4057cc:	af00      	add	r7, sp, #0
  4057ce:	6078      	str	r0, [r7, #4]
  4057d0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4057d2:	6878      	ldr	r0, [r7, #4]
  4057d4:	4b2c      	ldr	r3, [pc, #176]	; (405888 <pio_handler_process+0xc0>)
  4057d6:	4798      	blx	r3
  4057d8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4057da:	6878      	ldr	r0, [r7, #4]
  4057dc:	4b2b      	ldr	r3, [pc, #172]	; (40588c <pio_handler_process+0xc4>)
  4057de:	4798      	blx	r3
  4057e0:	4602      	mov	r2, r0
  4057e2:	68fb      	ldr	r3, [r7, #12]
  4057e4:	4013      	ands	r3, r2
  4057e6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4057e8:	68fb      	ldr	r3, [r7, #12]
  4057ea:	2b00      	cmp	r3, #0
  4057ec:	d03c      	beq.n	405868 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4057ee:	2300      	movs	r3, #0
  4057f0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4057f2:	e034      	b.n	40585e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4057f4:	4a26      	ldr	r2, [pc, #152]	; (405890 <pio_handler_process+0xc8>)
  4057f6:	68bb      	ldr	r3, [r7, #8]
  4057f8:	011b      	lsls	r3, r3, #4
  4057fa:	4413      	add	r3, r2
  4057fc:	681a      	ldr	r2, [r3, #0]
  4057fe:	683b      	ldr	r3, [r7, #0]
  405800:	429a      	cmp	r2, r3
  405802:	d126      	bne.n	405852 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  405804:	4a22      	ldr	r2, [pc, #136]	; (405890 <pio_handler_process+0xc8>)
  405806:	68bb      	ldr	r3, [r7, #8]
  405808:	011b      	lsls	r3, r3, #4
  40580a:	4413      	add	r3, r2
  40580c:	3304      	adds	r3, #4
  40580e:	681a      	ldr	r2, [r3, #0]
  405810:	68fb      	ldr	r3, [r7, #12]
  405812:	4013      	ands	r3, r2
  405814:	2b00      	cmp	r3, #0
  405816:	d01c      	beq.n	405852 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  405818:	4a1d      	ldr	r2, [pc, #116]	; (405890 <pio_handler_process+0xc8>)
  40581a:	68bb      	ldr	r3, [r7, #8]
  40581c:	011b      	lsls	r3, r3, #4
  40581e:	4413      	add	r3, r2
  405820:	330c      	adds	r3, #12
  405822:	681b      	ldr	r3, [r3, #0]
  405824:	491a      	ldr	r1, [pc, #104]	; (405890 <pio_handler_process+0xc8>)
  405826:	68ba      	ldr	r2, [r7, #8]
  405828:	0112      	lsls	r2, r2, #4
  40582a:	440a      	add	r2, r1
  40582c:	6810      	ldr	r0, [r2, #0]
  40582e:	4918      	ldr	r1, [pc, #96]	; (405890 <pio_handler_process+0xc8>)
  405830:	68ba      	ldr	r2, [r7, #8]
  405832:	0112      	lsls	r2, r2, #4
  405834:	440a      	add	r2, r1
  405836:	3204      	adds	r2, #4
  405838:	6812      	ldr	r2, [r2, #0]
  40583a:	4611      	mov	r1, r2
  40583c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40583e:	4a14      	ldr	r2, [pc, #80]	; (405890 <pio_handler_process+0xc8>)
  405840:	68bb      	ldr	r3, [r7, #8]
  405842:	011b      	lsls	r3, r3, #4
  405844:	4413      	add	r3, r2
  405846:	3304      	adds	r3, #4
  405848:	681b      	ldr	r3, [r3, #0]
  40584a:	43db      	mvns	r3, r3
  40584c:	68fa      	ldr	r2, [r7, #12]
  40584e:	4013      	ands	r3, r2
  405850:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  405852:	68bb      	ldr	r3, [r7, #8]
  405854:	3301      	adds	r3, #1
  405856:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  405858:	68bb      	ldr	r3, [r7, #8]
  40585a:	2b06      	cmp	r3, #6
  40585c:	d803      	bhi.n	405866 <pio_handler_process+0x9e>
		while (status != 0) {
  40585e:	68fb      	ldr	r3, [r7, #12]
  405860:	2b00      	cmp	r3, #0
  405862:	d1c7      	bne.n	4057f4 <pio_handler_process+0x2c>
  405864:	e000      	b.n	405868 <pio_handler_process+0xa0>
				break;
  405866:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  405868:	4b0a      	ldr	r3, [pc, #40]	; (405894 <pio_handler_process+0xcc>)
  40586a:	681b      	ldr	r3, [r3, #0]
  40586c:	2b00      	cmp	r3, #0
  40586e:	d007      	beq.n	405880 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  405870:	4b09      	ldr	r3, [pc, #36]	; (405898 <pio_handler_process+0xd0>)
  405872:	681b      	ldr	r3, [r3, #0]
  405874:	2b00      	cmp	r3, #0
  405876:	d003      	beq.n	405880 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  405878:	4b07      	ldr	r3, [pc, #28]	; (405898 <pio_handler_process+0xd0>)
  40587a:	681b      	ldr	r3, [r3, #0]
  40587c:	6878      	ldr	r0, [r7, #4]
  40587e:	4798      	blx	r3
		}
	}
#endif
}
  405880:	bf00      	nop
  405882:	3710      	adds	r7, #16
  405884:	46bd      	mov	sp, r7
  405886:	bd80      	pop	{r7, pc}
  405888:	00405ef9 	.word	0x00405ef9
  40588c:	00405f11 	.word	0x00405f11
  405890:	2000abdc 	.word	0x2000abdc
  405894:	2000acb4 	.word	0x2000acb4
  405898:	2000ac4c 	.word	0x2000ac4c

0040589c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40589c:	b580      	push	{r7, lr}
  40589e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4058a0:	2109      	movs	r1, #9
  4058a2:	4802      	ldr	r0, [pc, #8]	; (4058ac <PIOA_Handler+0x10>)
  4058a4:	4b02      	ldr	r3, [pc, #8]	; (4058b0 <PIOA_Handler+0x14>)
  4058a6:	4798      	blx	r3
}
  4058a8:	bf00      	nop
  4058aa:	bd80      	pop	{r7, pc}
  4058ac:	400e0e00 	.word	0x400e0e00
  4058b0:	004057c9 	.word	0x004057c9

004058b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4058b4:	b580      	push	{r7, lr}
  4058b6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4058b8:	210a      	movs	r1, #10
  4058ba:	4802      	ldr	r0, [pc, #8]	; (4058c4 <PIOB_Handler+0x10>)
  4058bc:	4b02      	ldr	r3, [pc, #8]	; (4058c8 <PIOB_Handler+0x14>)
  4058be:	4798      	blx	r3
}
  4058c0:	bf00      	nop
  4058c2:	bd80      	pop	{r7, pc}
  4058c4:	400e1000 	.word	0x400e1000
  4058c8:	004057c9 	.word	0x004057c9

004058cc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4058cc:	b580      	push	{r7, lr}
  4058ce:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4058d0:	210b      	movs	r1, #11
  4058d2:	4802      	ldr	r0, [pc, #8]	; (4058dc <PIOC_Handler+0x10>)
  4058d4:	4b02      	ldr	r3, [pc, #8]	; (4058e0 <PIOC_Handler+0x14>)
  4058d6:	4798      	blx	r3
}
  4058d8:	bf00      	nop
  4058da:	bd80      	pop	{r7, pc}
  4058dc:	400e1200 	.word	0x400e1200
  4058e0:	004057c9 	.word	0x004057c9

004058e4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4058e4:	b580      	push	{r7, lr}
  4058e6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4058e8:	210c      	movs	r1, #12
  4058ea:	4802      	ldr	r0, [pc, #8]	; (4058f4 <PIOD_Handler+0x10>)
  4058ec:	4b02      	ldr	r3, [pc, #8]	; (4058f8 <PIOD_Handler+0x14>)
  4058ee:	4798      	blx	r3
}
  4058f0:	bf00      	nop
  4058f2:	bd80      	pop	{r7, pc}
  4058f4:	400e1400 	.word	0x400e1400
  4058f8:	004057c9 	.word	0x004057c9

004058fc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4058fc:	b580      	push	{r7, lr}
  4058fe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  405900:	210d      	movs	r1, #13
  405902:	4802      	ldr	r0, [pc, #8]	; (40590c <PIOE_Handler+0x10>)
  405904:	4b02      	ldr	r3, [pc, #8]	; (405910 <PIOE_Handler+0x14>)
  405906:	4798      	blx	r3
}
  405908:	bf00      	nop
  40590a:	bd80      	pop	{r7, pc}
  40590c:	400e1600 	.word	0x400e1600
  405910:	004057c9 	.word	0x004057c9

00405914 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
  405914:	b580      	push	{r7, lr}
  405916:	b08a      	sub	sp, #40	; 0x28
  405918:	af00      	add	r7, sp, #0
  40591a:	60f8      	str	r0, [r7, #12]
  40591c:	60b9      	str	r1, [r7, #8]
  40591e:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  405920:	687b      	ldr	r3, [r7, #4]
  405922:	f246 12a8 	movw	r2, #25000	; 0x61a8
  405926:	fb02 f203 	mul.w	r2, r2, r3
  40592a:	68bb      	ldr	r3, [r7, #8]
  40592c:	4413      	add	r3, r2
  40592e:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
  405930:	687b      	ldr	r3, [r7, #4]
  405932:	f246 11a8 	movw	r1, #25000	; 0x61a8
  405936:	fb01 f303 	mul.w	r3, r1, r3
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  40593a:	fbb2 f3f3 	udiv	r3, r2, r3
  40593e:	2b80      	cmp	r3, #128	; 0x80
  405940:	d901      	bls.n	405946 <can_set_baudrate+0x32>
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
  405942:	2300      	movs	r3, #0
  405944:	e086      	b.n	405a54 <can_set_baudrate+0x140>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
  405946:	68bb      	ldr	r3, [r7, #8]
  405948:	085a      	lsrs	r2, r3, #1
  40594a:	687b      	ldr	r3, [r7, #4]
  40594c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  405950:	fb01 f303 	mul.w	r3, r1, r3
  405954:	429a      	cmp	r2, r3
  405956:	d201      	bcs.n	40595c <can_set_baudrate+0x48>
		return 0;
  405958:	2300      	movs	r3, #0
  40595a:	e07b      	b.n	405a54 <can_set_baudrate+0x140>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
  40595c:	2308      	movs	r3, #8
  40595e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
  405962:	f04f 33ff 	mov.w	r3, #4294967295
  405966:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  405968:	2308      	movs	r3, #8
  40596a:	77fb      	strb	r3, [r7, #31]
  40596c:	e02a      	b.n	4059c4 <can_set_baudrate+0xb0>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
  40596e:	7ffb      	ldrb	r3, [r7, #31]
  405970:	687a      	ldr	r2, [r7, #4]
  405972:	fb02 f303 	mul.w	r3, r2, r3
  405976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40597a:	fb02 f303 	mul.w	r3, r2, r3
  40597e:	68ba      	ldr	r2, [r7, #8]
  405980:	fbb2 f3f3 	udiv	r3, r2, r3
  405984:	2b80      	cmp	r3, #128	; 0x80
  405986:	d81a      	bhi.n	4059be <can_set_baudrate+0xaa>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
  405988:	7ffb      	ldrb	r3, [r7, #31]
  40598a:	687a      	ldr	r2, [r7, #4]
  40598c:	fb02 f303 	mul.w	r3, r2, r3
  405990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  405994:	fb02 f203 	mul.w	r2, r2, r3
  405998:	68bb      	ldr	r3, [r7, #8]
  40599a:	fbb3 f1f2 	udiv	r1, r3, r2
  40599e:	fb02 f201 	mul.w	r2, r2, r1
  4059a2:	1a9b      	subs	r3, r3, r2
  4059a4:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
  4059a6:	69ba      	ldr	r2, [r7, #24]
  4059a8:	6a3b      	ldr	r3, [r7, #32]
  4059aa:	429a      	cmp	r2, r3
  4059ac:	d207      	bcs.n	4059be <can_set_baudrate+0xaa>
				ul_mod = ul_cur_mod;
  4059ae:	69bb      	ldr	r3, [r7, #24]
  4059b0:	623b      	str	r3, [r7, #32]
				uc_tq = i;
  4059b2:	7ffb      	ldrb	r3, [r7, #31]
  4059b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
  4059b8:	6a3b      	ldr	r3, [r7, #32]
  4059ba:	2b00      	cmp	r3, #0
  4059bc:	d006      	beq.n	4059cc <can_set_baudrate+0xb8>
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  4059be:	7ffb      	ldrb	r3, [r7, #31]
  4059c0:	3301      	adds	r3, #1
  4059c2:	77fb      	strb	r3, [r7, #31]
  4059c4:	7ffb      	ldrb	r3, [r7, #31]
  4059c6:	2b19      	cmp	r3, #25
  4059c8:	d9d1      	bls.n	40596e <can_set_baudrate+0x5a>
  4059ca:	e000      	b.n	4059ce <can_set_baudrate+0xba>
					break;
  4059cc:	bf00      	nop
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
  4059ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4059d2:	687a      	ldr	r2, [r7, #4]
  4059d4:	fb02 f303 	mul.w	r3, r2, r3
  4059d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4059dc:	fb02 f303 	mul.w	r3, r2, r3
  4059e0:	68ba      	ldr	r2, [r7, #8]
  4059e2:	fbb2 f3f3 	udiv	r3, r2, r3
  4059e6:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
  4059e8:	7dfb      	ldrb	r3, [r7, #23]
  4059ea:	2b01      	cmp	r3, #1
  4059ec:	d801      	bhi.n	4059f2 <can_set_baudrate+0xde>
		return 0;
  4059ee:	2300      	movs	r3, #0
  4059f0:	e030      	b.n	405a54 <can_set_baudrate+0x140>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
  4059f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4059f6:	f1a3 0208 	sub.w	r2, r3, #8
  4059fa:	4613      	mov	r3, r2
  4059fc:	005b      	lsls	r3, r3, #1
  4059fe:	4413      	add	r3, r2
  405a00:	005b      	lsls	r3, r3, #1
  405a02:	4a16      	ldr	r2, [pc, #88]	; (405a5c <can_set_baudrate+0x148>)
  405a04:	4413      	add	r3, r2
  405a06:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
  405a08:	68f8      	ldr	r0, [r7, #12]
  405a0a:	4b15      	ldr	r3, [pc, #84]	; (405a60 <can_set_baudrate+0x14c>)
  405a0c:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  405a0e:	693b      	ldr	r3, [r7, #16]
  405a10:	78db      	ldrb	r3, [r3, #3]
  405a12:	3b01      	subs	r3, #1
  405a14:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  405a18:	693b      	ldr	r3, [r7, #16]
  405a1a:	789b      	ldrb	r3, [r3, #2]
  405a1c:	3b01      	subs	r3, #1
  405a1e:	011b      	lsls	r3, r3, #4
  405a20:	f003 0370 	and.w	r3, r3, #112	; 0x70
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  405a24:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  405a26:	693b      	ldr	r3, [r7, #16]
  405a28:	785b      	ldrb	r3, [r3, #1]
  405a2a:	3b01      	subs	r3, #1
  405a2c:	021b      	lsls	r3, r3, #8
  405a2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  405a32:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  405a34:	693b      	ldr	r3, [r7, #16]
  405a36:	791b      	ldrb	r3, [r3, #4]
  405a38:	3b01      	subs	r3, #1
  405a3a:	031b      	lsls	r3, r3, #12
  405a3c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  405a40:	431a      	orrs	r2, r3
			CAN_BR_BRP(uc_prescale - 1);
  405a42:	7dfb      	ldrb	r3, [r7, #23]
  405a44:	3b01      	subs	r3, #1
  405a46:	041b      	lsls	r3, r3, #16
  405a48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  405a4c:	431a      	orrs	r2, r3
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  405a4e:	68fb      	ldr	r3, [r7, #12]
  405a50:	615a      	str	r2, [r3, #20]
	return 1;
  405a52:	2301      	movs	r3, #1
}
  405a54:	4618      	mov	r0, r3
  405a56:	3728      	adds	r7, #40	; 0x28
  405a58:	46bd      	mov	sp, r7
  405a5a:	bd80      	pop	{r7, pc}
  405a5c:	0040b608 	.word	0x0040b608
  405a60:	00405b0d 	.word	0x00405b0d

00405a64 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
  405a64:	b580      	push	{r7, lr}
  405a66:	b086      	sub	sp, #24
  405a68:	af00      	add	r7, sp, #0
  405a6a:	60f8      	str	r0, [r7, #12]
  405a6c:	60b9      	str	r1, [r7, #8]
  405a6e:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
  405a70:	687a      	ldr	r2, [r7, #4]
  405a72:	68b9      	ldr	r1, [r7, #8]
  405a74:	68f8      	ldr	r0, [r7, #12]
  405a76:	4b17      	ldr	r3, [pc, #92]	; (405ad4 <can_init+0x70>)
  405a78:	4798      	blx	r3
  405a7a:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
  405a7c:	697b      	ldr	r3, [r7, #20]
  405a7e:	2b00      	cmp	r3, #0
  405a80:	d101      	bne.n	405a86 <can_init+0x22>
		return 0;
  405a82:	2300      	movs	r3, #0
  405a84:	e021      	b.n	405aca <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
  405a86:	68f8      	ldr	r0, [r7, #12]
  405a88:	4b13      	ldr	r3, [pc, #76]	; (405ad8 <can_init+0x74>)
  405a8a:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
  405a8c:	68f8      	ldr	r0, [r7, #12]
  405a8e:	4b13      	ldr	r3, [pc, #76]	; (405adc <can_init+0x78>)
  405a90:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
  405a92:	2300      	movs	r3, #0
  405a94:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
  405a96:	2300      	movs	r3, #0
  405a98:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  405a9a:	e006      	b.n	405aaa <can_init+0x46>
		ul_flag = can_get_status(p_can);
  405a9c:	68f8      	ldr	r0, [r7, #12]
  405a9e:	4b10      	ldr	r3, [pc, #64]	; (405ae0 <can_init+0x7c>)
  405aa0:	4798      	blx	r3
  405aa2:	6178      	str	r0, [r7, #20]
		ul_tick++;
  405aa4:	693b      	ldr	r3, [r7, #16]
  405aa6:	3301      	adds	r3, #1
  405aa8:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  405aaa:	697b      	ldr	r3, [r7, #20]
  405aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  405ab0:	2b00      	cmp	r3, #0
  405ab2:	d103      	bne.n	405abc <can_init+0x58>
  405ab4:	693b      	ldr	r3, [r7, #16]
  405ab6:	4a0b      	ldr	r2, [pc, #44]	; (405ae4 <can_init+0x80>)
  405ab8:	4293      	cmp	r3, r2
  405aba:	d9ef      	bls.n	405a9c <can_init+0x38>
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
  405abc:	693b      	ldr	r3, [r7, #16]
  405abe:	4a0a      	ldr	r2, [pc, #40]	; (405ae8 <can_init+0x84>)
  405ac0:	4293      	cmp	r3, r2
  405ac2:	d101      	bne.n	405ac8 <can_init+0x64>
		return 0;
  405ac4:	2300      	movs	r3, #0
  405ac6:	e000      	b.n	405aca <can_init+0x66>
	} else {
		return 1;
  405ac8:	2301      	movs	r3, #1
	}
}
  405aca:	4618      	mov	r0, r3
  405acc:	3718      	adds	r7, #24
  405ace:	46bd      	mov	sp, r7
  405ad0:	bd80      	pop	{r7, pc}
  405ad2:	bf00      	nop
  405ad4:	00405915 	.word	0x00405915
  405ad8:	00405d75 	.word	0x00405d75
  405adc:	00405aed 	.word	0x00405aed
  405ae0:	00405b2d 	.word	0x00405b2d
  405ae4:	0001869f 	.word	0x0001869f
  405ae8:	000186a0 	.word	0x000186a0

00405aec <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
  405aec:	b480      	push	{r7}
  405aee:	b083      	sub	sp, #12
  405af0:	af00      	add	r7, sp, #0
  405af2:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
  405af4:	687b      	ldr	r3, [r7, #4]
  405af6:	681b      	ldr	r3, [r3, #0]
  405af8:	f043 0201 	orr.w	r2, r3, #1
  405afc:	687b      	ldr	r3, [r7, #4]
  405afe:	601a      	str	r2, [r3, #0]
}
  405b00:	bf00      	nop
  405b02:	370c      	adds	r7, #12
  405b04:	46bd      	mov	sp, r7
  405b06:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b0a:	4770      	bx	lr

00405b0c <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
  405b0c:	b480      	push	{r7}
  405b0e:	b083      	sub	sp, #12
  405b10:	af00      	add	r7, sp, #0
  405b12:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
  405b14:	687b      	ldr	r3, [r7, #4]
  405b16:	681b      	ldr	r3, [r3, #0]
  405b18:	f023 0201 	bic.w	r2, r3, #1
  405b1c:	687b      	ldr	r3, [r7, #4]
  405b1e:	601a      	str	r2, [r3, #0]
}
  405b20:	bf00      	nop
  405b22:	370c      	adds	r7, #12
  405b24:	46bd      	mov	sp, r7
  405b26:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b2a:	4770      	bx	lr

00405b2c <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
  405b2c:	b480      	push	{r7}
  405b2e:	b083      	sub	sp, #12
  405b30:	af00      	add	r7, sp, #0
  405b32:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
  405b34:	687b      	ldr	r3, [r7, #4]
  405b36:	691b      	ldr	r3, [r3, #16]
}
  405b38:	4618      	mov	r0, r3
  405b3a:	370c      	adds	r7, #12
  405b3c:	46bd      	mov	sp, r7
  405b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b42:	4770      	bx	lr

00405b44 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
  405b44:	b480      	push	{r7}
  405b46:	b085      	sub	sp, #20
  405b48:	af00      	add	r7, sp, #0
  405b4a:	6078      	str	r0, [r7, #4]
  405b4c:	460b      	mov	r3, r1
  405b4e:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
  405b50:	687b      	ldr	r3, [r7, #4]
  405b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405b54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  405b58:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
  405b5a:	78fa      	ldrb	r2, [r7, #3]
  405b5c:	68fb      	ldr	r3, [r7, #12]
  405b5e:	431a      	orrs	r2, r3
  405b60:	687b      	ldr	r3, [r7, #4]
  405b62:	625a      	str	r2, [r3, #36]	; 0x24
}
  405b64:	bf00      	nop
  405b66:	3714      	adds	r7, #20
  405b68:	46bd      	mov	sp, r7
  405b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b6e:	4770      	bx	lr

00405b70 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
  405b70:	b480      	push	{r7}
  405b72:	b083      	sub	sp, #12
  405b74:	af00      	add	r7, sp, #0
  405b76:	6078      	str	r0, [r7, #4]
  405b78:	460b      	mov	r3, r1
  405b7a:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
  405b7c:	78fb      	ldrb	r3, [r7, #3]
  405b7e:	687a      	ldr	r2, [r7, #4]
  405b80:	015b      	lsls	r3, r3, #5
  405b82:	4413      	add	r3, r2
  405b84:	f503 7304 	add.w	r3, r3, #528	; 0x210
  405b88:	681b      	ldr	r3, [r3, #0]
}
  405b8a:	4618      	mov	r0, r3
  405b8c:	370c      	adds	r7, #12
  405b8e:	46bd      	mov	sp, r7
  405b90:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b94:	4770      	bx	lr

00405b96 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
  405b96:	b480      	push	{r7}
  405b98:	b085      	sub	sp, #20
  405b9a:	af00      	add	r7, sp, #0
  405b9c:	6078      	str	r0, [r7, #4]
  405b9e:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  405ba0:	683b      	ldr	r3, [r7, #0]
  405ba2:	681b      	ldr	r3, [r3, #0]
  405ba4:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
  405ba6:	683b      	ldr	r3, [r7, #0]
  405ba8:	791b      	ldrb	r3, [r3, #4]
  405baa:	2b00      	cmp	r3, #0
  405bac:	d12f      	bne.n	405c0e <can_mailbox_init+0x78>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
  405bae:	7bfb      	ldrb	r3, [r7, #15]
  405bb0:	687a      	ldr	r2, [r7, #4]
  405bb2:	3310      	adds	r3, #16
  405bb4:	015b      	lsls	r3, r3, #5
  405bb6:	4413      	add	r3, r2
  405bb8:	2200      	movs	r2, #0
  405bba:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
  405bbc:	7bfb      	ldrb	r3, [r7, #15]
  405bbe:	687a      	ldr	r2, [r7, #4]
  405bc0:	3310      	adds	r3, #16
  405bc2:	015b      	lsls	r3, r3, #5
  405bc4:	4413      	add	r3, r2
  405bc6:	3304      	adds	r3, #4
  405bc8:	2200      	movs	r2, #0
  405bca:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
  405bcc:	7bfb      	ldrb	r3, [r7, #15]
  405bce:	687a      	ldr	r2, [r7, #4]
  405bd0:	015b      	lsls	r3, r3, #5
  405bd2:	4413      	add	r3, r2
  405bd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
  405bd8:	2200      	movs	r2, #0
  405bda:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
  405bdc:	7bfb      	ldrb	r3, [r7, #15]
  405bde:	687a      	ldr	r2, [r7, #4]
  405be0:	015b      	lsls	r3, r3, #5
  405be2:	4413      	add	r3, r2
  405be4:	f503 7305 	add.w	r3, r3, #532	; 0x214
  405be8:	2200      	movs	r2, #0
  405bea:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
  405bec:	7bfb      	ldrb	r3, [r7, #15]
  405bee:	687a      	ldr	r2, [r7, #4]
  405bf0:	015b      	lsls	r3, r3, #5
  405bf2:	4413      	add	r3, r2
  405bf4:	f503 7306 	add.w	r3, r3, #536	; 0x218
  405bf8:	2200      	movs	r2, #0
  405bfa:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
  405bfc:	7bfb      	ldrb	r3, [r7, #15]
  405bfe:	687a      	ldr	r2, [r7, #4]
  405c00:	015b      	lsls	r3, r3, #5
  405c02:	4413      	add	r3, r2
  405c04:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  405c08:	2200      	movs	r2, #0
  405c0a:	601a      	str	r2, [r3, #0]
		return;
  405c0c:	e050      	b.n	405cb0 <can_mailbox_init+0x11a>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  405c0e:	7bfb      	ldrb	r3, [r7, #15]
  405c10:	7bfa      	ldrb	r2, [r7, #15]
  405c12:	6879      	ldr	r1, [r7, #4]
  405c14:	3210      	adds	r2, #16
  405c16:	0152      	lsls	r2, r2, #5
  405c18:	440a      	add	r2, r1
  405c1a:	6812      	ldr	r2, [r2, #0]
  405c1c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
  405c20:	6839      	ldr	r1, [r7, #0]
  405c22:	79c9      	ldrb	r1, [r1, #7]
  405c24:	0409      	lsls	r1, r1, #16
			~CAN_MMR_PRIOR_Msk) |
  405c26:	430a      	orrs	r2, r1
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  405c28:	6879      	ldr	r1, [r7, #4]
  405c2a:	3310      	adds	r3, #16
  405c2c:	015b      	lsls	r3, r3, #5
  405c2e:	440b      	add	r3, r1
  405c30:	601a      	str	r2, [r3, #0]

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
  405c32:	683b      	ldr	r3, [r7, #0]
  405c34:	795b      	ldrb	r3, [r3, #5]
  405c36:	2b00      	cmp	r3, #0
  405c38:	d016      	beq.n	405c68 <can_mailbox_init+0xd2>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
  405c3a:	7bfb      	ldrb	r3, [r7, #15]
  405c3c:	683a      	ldr	r2, [r7, #0]
  405c3e:	68d2      	ldr	r2, [r2, #12]
  405c40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  405c44:	6879      	ldr	r1, [r7, #4]
  405c46:	3310      	adds	r3, #16
  405c48:	015b      	lsls	r3, r3, #5
  405c4a:	440b      	add	r3, r1
  405c4c:	3304      	adds	r3, #4
  405c4e:	601a      	str	r2, [r3, #0]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  405c50:	7bfb      	ldrb	r3, [r7, #15]
  405c52:	683a      	ldr	r2, [r7, #0]
  405c54:	6912      	ldr	r2, [r2, #16]
  405c56:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  405c5a:	6879      	ldr	r1, [r7, #4]
  405c5c:	015b      	lsls	r3, r3, #5
  405c5e:	440b      	add	r3, r1
  405c60:	f503 7302 	add.w	r3, r3, #520	; 0x208
  405c64:	601a      	str	r2, [r3, #0]
  405c66:	e011      	b.n	405c8c <can_mailbox_init+0xf6>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
  405c68:	7bfb      	ldrb	r3, [r7, #15]
  405c6a:	683a      	ldr	r2, [r7, #0]
  405c6c:	68d2      	ldr	r2, [r2, #12]
  405c6e:	6879      	ldr	r1, [r7, #4]
  405c70:	3310      	adds	r3, #16
  405c72:	015b      	lsls	r3, r3, #5
  405c74:	440b      	add	r3, r1
  405c76:	3304      	adds	r3, #4
  405c78:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  405c7a:	7bfb      	ldrb	r3, [r7, #15]
  405c7c:	683a      	ldr	r2, [r7, #0]
  405c7e:	6912      	ldr	r2, [r2, #16]
  405c80:	6879      	ldr	r1, [r7, #4]
  405c82:	015b      	lsls	r3, r3, #5
  405c84:	440b      	add	r3, r1
  405c86:	f503 7302 	add.w	r3, r3, #520	; 0x208
  405c8a:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  405c8c:	7bfb      	ldrb	r3, [r7, #15]
  405c8e:	7bfa      	ldrb	r2, [r7, #15]
  405c90:	6879      	ldr	r1, [r7, #4]
  405c92:	3210      	adds	r2, #16
  405c94:	0152      	lsls	r2, r2, #5
  405c96:	440a      	add	r2, r1
  405c98:	6812      	ldr	r2, [r2, #0]
  405c9a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
  405c9e:	6839      	ldr	r1, [r7, #0]
  405ca0:	7909      	ldrb	r1, [r1, #4]
  405ca2:	0609      	lsls	r1, r1, #24
			~CAN_MMR_MOT_Msk) |
  405ca4:	430a      	orrs	r2, r1
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  405ca6:	6879      	ldr	r1, [r7, #4]
  405ca8:	3310      	adds	r3, #16
  405caa:	015b      	lsls	r3, r3, #5
  405cac:	440b      	add	r3, r1
  405cae:	601a      	str	r2, [r3, #0]
}
  405cb0:	3714      	adds	r7, #20
  405cb2:	46bd      	mov	sp, r7
  405cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cb8:	4770      	bx	lr
	...

00405cbc <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
  405cbc:	b580      	push	{r7, lr}
  405cbe:	b084      	sub	sp, #16
  405cc0:	af00      	add	r7, sp, #0
  405cc2:	6078      	str	r0, [r7, #4]
  405cc4:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  405cc6:	683b      	ldr	r3, [r7, #0]
  405cc8:	681b      	ldr	r3, [r3, #0]
  405cca:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
  405ccc:	7bfb      	ldrb	r3, [r7, #15]
  405cce:	4619      	mov	r1, r3
  405cd0:	6878      	ldr	r0, [r7, #4]
  405cd2:	4b27      	ldr	r3, [pc, #156]	; (405d70 <can_mailbox_write+0xb4>)
  405cd4:	4798      	blx	r3
  405cd6:	4602      	mov	r2, r0
  405cd8:	683b      	ldr	r3, [r7, #0]
  405cda:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
  405cdc:	683b      	ldr	r3, [r7, #0]
  405cde:	689b      	ldr	r3, [r3, #8]
  405ce0:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
  405ce2:	68bb      	ldr	r3, [r7, #8]
  405ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  405ce8:	2b00      	cmp	r3, #0
  405cea:	d101      	bne.n	405cf0 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
  405cec:	2301      	movs	r3, #1
  405cee:	e03b      	b.n	405d68 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
  405cf0:	683b      	ldr	r3, [r7, #0]
  405cf2:	795b      	ldrb	r3, [r3, #5]
  405cf4:	2b00      	cmp	r3, #0
  405cf6:	d00b      	beq.n	405d10 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  405cf8:	7bfb      	ldrb	r3, [r7, #15]
  405cfa:	683a      	ldr	r2, [r7, #0]
  405cfc:	6912      	ldr	r2, [r2, #16]
  405cfe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  405d02:	6879      	ldr	r1, [r7, #4]
  405d04:	015b      	lsls	r3, r3, #5
  405d06:	440b      	add	r3, r1
  405d08:	f503 7302 	add.w	r3, r3, #520	; 0x208
  405d0c:	601a      	str	r2, [r3, #0]
  405d0e:	e008      	b.n	405d22 <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  405d10:	7bfb      	ldrb	r3, [r7, #15]
  405d12:	683a      	ldr	r2, [r7, #0]
  405d14:	6912      	ldr	r2, [r2, #16]
  405d16:	6879      	ldr	r1, [r7, #4]
  405d18:	015b      	lsls	r3, r3, #5
  405d1a:	440b      	add	r3, r1
  405d1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
  405d20:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
  405d22:	7bfb      	ldrb	r3, [r7, #15]
  405d24:	683a      	ldr	r2, [r7, #0]
  405d26:	6992      	ldr	r2, [r2, #24]
  405d28:	6879      	ldr	r1, [r7, #4]
  405d2a:	015b      	lsls	r3, r3, #5
  405d2c:	440b      	add	r3, r1
  405d2e:	f503 7305 	add.w	r3, r3, #532	; 0x214
  405d32:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {
  405d34:	683b      	ldr	r3, [r7, #0]
  405d36:	799b      	ldrb	r3, [r3, #6]
  405d38:	2b04      	cmp	r3, #4
  405d3a:	d908      	bls.n	405d4e <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
  405d3c:	7bfb      	ldrb	r3, [r7, #15]
  405d3e:	683a      	ldr	r2, [r7, #0]
  405d40:	69d2      	ldr	r2, [r2, #28]
  405d42:	6879      	ldr	r1, [r7, #4]
  405d44:	015b      	lsls	r3, r3, #5
  405d46:	440b      	add	r3, r1
  405d48:	f503 7306 	add.w	r3, r3, #536	; 0x218
  405d4c:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
  405d4e:	7bfb      	ldrb	r3, [r7, #15]
  405d50:	683a      	ldr	r2, [r7, #0]
  405d52:	7992      	ldrb	r2, [r2, #6]
  405d54:	0412      	lsls	r2, r2, #16
  405d56:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  405d5a:	6879      	ldr	r1, [r7, #4]
  405d5c:	015b      	lsls	r3, r3, #5
  405d5e:	440b      	add	r3, r1
  405d60:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  405d64:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
  405d66:	2300      	movs	r3, #0
}
  405d68:	4618      	mov	r0, r3
  405d6a:	3710      	adds	r7, #16
  405d6c:	46bd      	mov	sp, r7
  405d6e:	bd80      	pop	{r7, pc}
  405d70:	00405b71 	.word	0x00405b71

00405d74 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
  405d74:	b580      	push	{r7, lr}
  405d76:	b08c      	sub	sp, #48	; 0x30
  405d78:	af00      	add	r7, sp, #0
  405d7a:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
  405d7c:	2300      	movs	r3, #0
  405d7e:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  405d80:	2300      	movs	r3, #0
  405d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  405d86:	e00d      	b.n	405da4 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
  405d88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405d8c:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
  405d8e:	f107 030c 	add.w	r3, r7, #12
  405d92:	4619      	mov	r1, r3
  405d94:	6878      	ldr	r0, [r7, #4]
  405d96:	4b07      	ldr	r3, [pc, #28]	; (405db4 <can_reset_all_mailbox+0x40>)
  405d98:	4798      	blx	r3
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  405d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405d9e:	3301      	adds	r3, #1
  405da0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  405da4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405da8:	2b07      	cmp	r3, #7
  405daa:	d9ed      	bls.n	405d88 <can_reset_all_mailbox+0x14>
	}
}
  405dac:	bf00      	nop
  405dae:	3730      	adds	r7, #48	; 0x30
  405db0:	46bd      	mov	sp, r7
  405db2:	bd80      	pop	{r7, pc}
  405db4:	00405b97 	.word	0x00405b97

00405db8 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  405db8:	b480      	push	{r7}
  405dba:	b087      	sub	sp, #28
  405dbc:	af00      	add	r7, sp, #0
  405dbe:	60f8      	str	r0, [r7, #12]
  405dc0:	60b9      	str	r1, [r7, #8]
  405dc2:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  405dc4:	68fb      	ldr	r3, [r7, #12]
  405dc6:	687a      	ldr	r2, [r7, #4]
  405dc8:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  405dca:	68bb      	ldr	r3, [r7, #8]
  405dcc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405dd0:	d04a      	beq.n	405e68 <pio_set_peripheral+0xb0>
  405dd2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405dd6:	d808      	bhi.n	405dea <pio_set_peripheral+0x32>
  405dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  405ddc:	d016      	beq.n	405e0c <pio_set_peripheral+0x54>
  405dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  405de2:	d02c      	beq.n	405e3e <pio_set_peripheral+0x86>
  405de4:	2b00      	cmp	r3, #0
  405de6:	d069      	beq.n	405ebc <pio_set_peripheral+0x104>
  405de8:	e064      	b.n	405eb4 <pio_set_peripheral+0xfc>
  405dea:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  405dee:	d065      	beq.n	405ebc <pio_set_peripheral+0x104>
  405df0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  405df4:	d803      	bhi.n	405dfe <pio_set_peripheral+0x46>
  405df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  405dfa:	d04a      	beq.n	405e92 <pio_set_peripheral+0xda>
  405dfc:	e05a      	b.n	405eb4 <pio_set_peripheral+0xfc>
  405dfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  405e02:	d05b      	beq.n	405ebc <pio_set_peripheral+0x104>
  405e04:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  405e08:	d058      	beq.n	405ebc <pio_set_peripheral+0x104>
  405e0a:	e053      	b.n	405eb4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405e0c:	68fb      	ldr	r3, [r7, #12]
  405e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405e10:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405e12:	68fb      	ldr	r3, [r7, #12]
  405e14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405e16:	687b      	ldr	r3, [r7, #4]
  405e18:	43d9      	mvns	r1, r3
  405e1a:	697b      	ldr	r3, [r7, #20]
  405e1c:	400b      	ands	r3, r1
  405e1e:	401a      	ands	r2, r3
  405e20:	68fb      	ldr	r3, [r7, #12]
  405e22:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405e24:	68fb      	ldr	r3, [r7, #12]
  405e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405e28:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405e2a:	68fb      	ldr	r3, [r7, #12]
  405e2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405e2e:	687b      	ldr	r3, [r7, #4]
  405e30:	43d9      	mvns	r1, r3
  405e32:	697b      	ldr	r3, [r7, #20]
  405e34:	400b      	ands	r3, r1
  405e36:	401a      	ands	r2, r3
  405e38:	68fb      	ldr	r3, [r7, #12]
  405e3a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405e3c:	e03a      	b.n	405eb4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405e3e:	68fb      	ldr	r3, [r7, #12]
  405e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405e42:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  405e44:	687a      	ldr	r2, [r7, #4]
  405e46:	697b      	ldr	r3, [r7, #20]
  405e48:	431a      	orrs	r2, r3
  405e4a:	68fb      	ldr	r3, [r7, #12]
  405e4c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405e4e:	68fb      	ldr	r3, [r7, #12]
  405e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405e52:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405e54:	68fb      	ldr	r3, [r7, #12]
  405e56:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405e58:	687b      	ldr	r3, [r7, #4]
  405e5a:	43d9      	mvns	r1, r3
  405e5c:	697b      	ldr	r3, [r7, #20]
  405e5e:	400b      	ands	r3, r1
  405e60:	401a      	ands	r2, r3
  405e62:	68fb      	ldr	r3, [r7, #12]
  405e64:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405e66:	e025      	b.n	405eb4 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405e68:	68fb      	ldr	r3, [r7, #12]
  405e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405e6c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405e6e:	68fb      	ldr	r3, [r7, #12]
  405e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405e72:	687b      	ldr	r3, [r7, #4]
  405e74:	43d9      	mvns	r1, r3
  405e76:	697b      	ldr	r3, [r7, #20]
  405e78:	400b      	ands	r3, r1
  405e7a:	401a      	ands	r2, r3
  405e7c:	68fb      	ldr	r3, [r7, #12]
  405e7e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405e80:	68fb      	ldr	r3, [r7, #12]
  405e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405e84:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  405e86:	687a      	ldr	r2, [r7, #4]
  405e88:	697b      	ldr	r3, [r7, #20]
  405e8a:	431a      	orrs	r2, r3
  405e8c:	68fb      	ldr	r3, [r7, #12]
  405e8e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405e90:	e010      	b.n	405eb4 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405e92:	68fb      	ldr	r3, [r7, #12]
  405e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405e96:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  405e98:	687a      	ldr	r2, [r7, #4]
  405e9a:	697b      	ldr	r3, [r7, #20]
  405e9c:	431a      	orrs	r2, r3
  405e9e:	68fb      	ldr	r3, [r7, #12]
  405ea0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405ea2:	68fb      	ldr	r3, [r7, #12]
  405ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405ea6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  405ea8:	687a      	ldr	r2, [r7, #4]
  405eaa:	697b      	ldr	r3, [r7, #20]
  405eac:	431a      	orrs	r2, r3
  405eae:	68fb      	ldr	r3, [r7, #12]
  405eb0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405eb2:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  405eb4:	68fb      	ldr	r3, [r7, #12]
  405eb6:	687a      	ldr	r2, [r7, #4]
  405eb8:	605a      	str	r2, [r3, #4]
  405eba:	e000      	b.n	405ebe <pio_set_peripheral+0x106>
		return;
  405ebc:	bf00      	nop
}
  405ebe:	371c      	adds	r7, #28
  405ec0:	46bd      	mov	sp, r7
  405ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ec6:	4770      	bx	lr

00405ec8 <pio_pull_down>:
 * \param ul_pull_down_enable Indicates if the pin(s) internal pull-down shall
 * be configured.
 */
void pio_pull_down(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_down_enable)
{
  405ec8:	b480      	push	{r7}
  405eca:	b085      	sub	sp, #20
  405ecc:	af00      	add	r7, sp, #0
  405ece:	60f8      	str	r0, [r7, #12]
  405ed0:	60b9      	str	r1, [r7, #8]
  405ed2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-down if necessary */
	if (ul_pull_down_enable) {
  405ed4:	687b      	ldr	r3, [r7, #4]
  405ed6:	2b00      	cmp	r3, #0
  405ed8:	d004      	beq.n	405ee4 <pio_pull_down+0x1c>
		p_pio->PIO_PPDER = ul_mask;
  405eda:	68fb      	ldr	r3, [r7, #12]
  405edc:	68ba      	ldr	r2, [r7, #8]
  405ede:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	} else {
		p_pio->PIO_PPDDR = ul_mask;
	}
}
  405ee2:	e003      	b.n	405eec <pio_pull_down+0x24>
		p_pio->PIO_PPDDR = ul_mask;
  405ee4:	68fb      	ldr	r3, [r7, #12]
  405ee6:	68ba      	ldr	r2, [r7, #8]
  405ee8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
  405eec:	bf00      	nop
  405eee:	3714      	adds	r7, #20
  405ef0:	46bd      	mov	sp, r7
  405ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ef6:	4770      	bx	lr

00405ef8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  405ef8:	b480      	push	{r7}
  405efa:	b083      	sub	sp, #12
  405efc:	af00      	add	r7, sp, #0
  405efe:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  405f00:	687b      	ldr	r3, [r7, #4]
  405f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  405f04:	4618      	mov	r0, r3
  405f06:	370c      	adds	r7, #12
  405f08:	46bd      	mov	sp, r7
  405f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f0e:	4770      	bx	lr

00405f10 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  405f10:	b480      	push	{r7}
  405f12:	b083      	sub	sp, #12
  405f14:	af00      	add	r7, sp, #0
  405f16:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  405f18:	687b      	ldr	r3, [r7, #4]
  405f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  405f1c:	4618      	mov	r0, r3
  405f1e:	370c      	adds	r7, #12
  405f20:	46bd      	mov	sp, r7
  405f22:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f26:	4770      	bx	lr

00405f28 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  405f28:	b480      	push	{r7}
  405f2a:	b085      	sub	sp, #20
  405f2c:	af00      	add	r7, sp, #0
  405f2e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  405f30:	491d      	ldr	r1, [pc, #116]	; (405fa8 <pmc_switch_mck_to_pllack+0x80>)
  405f32:	4b1d      	ldr	r3, [pc, #116]	; (405fa8 <pmc_switch_mck_to_pllack+0x80>)
  405f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405f36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  405f3a:	687b      	ldr	r3, [r7, #4]
  405f3c:	4313      	orrs	r3, r2
  405f3e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405f44:	60fb      	str	r3, [r7, #12]
  405f46:	e007      	b.n	405f58 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405f48:	68fb      	ldr	r3, [r7, #12]
  405f4a:	2b00      	cmp	r3, #0
  405f4c:	d101      	bne.n	405f52 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  405f4e:	2301      	movs	r3, #1
  405f50:	e023      	b.n	405f9a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  405f52:	68fb      	ldr	r3, [r7, #12]
  405f54:	3b01      	subs	r3, #1
  405f56:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405f58:	4b13      	ldr	r3, [pc, #76]	; (405fa8 <pmc_switch_mck_to_pllack+0x80>)
  405f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405f5c:	f003 0308 	and.w	r3, r3, #8
  405f60:	2b00      	cmp	r3, #0
  405f62:	d0f1      	beq.n	405f48 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  405f64:	4a10      	ldr	r2, [pc, #64]	; (405fa8 <pmc_switch_mck_to_pllack+0x80>)
  405f66:	4b10      	ldr	r3, [pc, #64]	; (405fa8 <pmc_switch_mck_to_pllack+0x80>)
  405f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405f6a:	f023 0303 	bic.w	r3, r3, #3
  405f6e:	f043 0302 	orr.w	r3, r3, #2
  405f72:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405f74:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405f78:	60fb      	str	r3, [r7, #12]
  405f7a:	e007      	b.n	405f8c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405f7c:	68fb      	ldr	r3, [r7, #12]
  405f7e:	2b00      	cmp	r3, #0
  405f80:	d101      	bne.n	405f86 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  405f82:	2301      	movs	r3, #1
  405f84:	e009      	b.n	405f9a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  405f86:	68fb      	ldr	r3, [r7, #12]
  405f88:	3b01      	subs	r3, #1
  405f8a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405f8c:	4b06      	ldr	r3, [pc, #24]	; (405fa8 <pmc_switch_mck_to_pllack+0x80>)
  405f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405f90:	f003 0308 	and.w	r3, r3, #8
  405f94:	2b00      	cmp	r3, #0
  405f96:	d0f1      	beq.n	405f7c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  405f98:	2300      	movs	r3, #0
}
  405f9a:	4618      	mov	r0, r3
  405f9c:	3714      	adds	r7, #20
  405f9e:	46bd      	mov	sp, r7
  405fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fa4:	4770      	bx	lr
  405fa6:	bf00      	nop
  405fa8:	400e0400 	.word	0x400e0400

00405fac <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  405fac:	b480      	push	{r7}
  405fae:	b083      	sub	sp, #12
  405fb0:	af00      	add	r7, sp, #0
  405fb2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  405fb4:	687b      	ldr	r3, [r7, #4]
  405fb6:	2b01      	cmp	r3, #1
  405fb8:	d107      	bne.n	405fca <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  405fba:	4a08      	ldr	r2, [pc, #32]	; (405fdc <pmc_switch_sclk_to_32kxtal+0x30>)
  405fbc:	4b07      	ldr	r3, [pc, #28]	; (405fdc <pmc_switch_sclk_to_32kxtal+0x30>)
  405fbe:	689b      	ldr	r3, [r3, #8]
  405fc0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  405fc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405fc8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  405fca:	4b04      	ldr	r3, [pc, #16]	; (405fdc <pmc_switch_sclk_to_32kxtal+0x30>)
  405fcc:	4a04      	ldr	r2, [pc, #16]	; (405fe0 <pmc_switch_sclk_to_32kxtal+0x34>)
  405fce:	601a      	str	r2, [r3, #0]
}
  405fd0:	bf00      	nop
  405fd2:	370c      	adds	r7, #12
  405fd4:	46bd      	mov	sp, r7
  405fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fda:	4770      	bx	lr
  405fdc:	400e1810 	.word	0x400e1810
  405fe0:	a5000008 	.word	0xa5000008

00405fe4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  405fe4:	b480      	push	{r7}
  405fe6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  405fe8:	4b09      	ldr	r3, [pc, #36]	; (406010 <pmc_osc_is_ready_32kxtal+0x2c>)
  405fea:	695b      	ldr	r3, [r3, #20]
  405fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  405ff0:	2b00      	cmp	r3, #0
  405ff2:	d007      	beq.n	406004 <pmc_osc_is_ready_32kxtal+0x20>
  405ff4:	4b07      	ldr	r3, [pc, #28]	; (406014 <pmc_osc_is_ready_32kxtal+0x30>)
  405ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405ffc:	2b00      	cmp	r3, #0
  405ffe:	d001      	beq.n	406004 <pmc_osc_is_ready_32kxtal+0x20>
  406000:	2301      	movs	r3, #1
  406002:	e000      	b.n	406006 <pmc_osc_is_ready_32kxtal+0x22>
  406004:	2300      	movs	r3, #0
}
  406006:	4618      	mov	r0, r3
  406008:	46bd      	mov	sp, r7
  40600a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40600e:	4770      	bx	lr
  406010:	400e1810 	.word	0x400e1810
  406014:	400e0400 	.word	0x400e0400

00406018 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  406018:	b480      	push	{r7}
  40601a:	b083      	sub	sp, #12
  40601c:	af00      	add	r7, sp, #0
  40601e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  406020:	4a18      	ldr	r2, [pc, #96]	; (406084 <pmc_switch_mainck_to_fastrc+0x6c>)
  406022:	4b18      	ldr	r3, [pc, #96]	; (406084 <pmc_switch_mainck_to_fastrc+0x6c>)
  406024:	6a1b      	ldr	r3, [r3, #32]
  406026:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40602a:	f043 0308 	orr.w	r3, r3, #8
  40602e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  406030:	bf00      	nop
  406032:	4b14      	ldr	r3, [pc, #80]	; (406084 <pmc_switch_mainck_to_fastrc+0x6c>)
  406034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40603a:	2b00      	cmp	r3, #0
  40603c:	d0f9      	beq.n	406032 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40603e:	4911      	ldr	r1, [pc, #68]	; (406084 <pmc_switch_mainck_to_fastrc+0x6c>)
  406040:	4b10      	ldr	r3, [pc, #64]	; (406084 <pmc_switch_mainck_to_fastrc+0x6c>)
  406042:	6a1b      	ldr	r3, [r3, #32]
  406044:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  406048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40604c:	687a      	ldr	r2, [r7, #4]
  40604e:	4313      	orrs	r3, r2
  406050:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  406054:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  406056:	bf00      	nop
  406058:	4b0a      	ldr	r3, [pc, #40]	; (406084 <pmc_switch_mainck_to_fastrc+0x6c>)
  40605a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40605c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  406060:	2b00      	cmp	r3, #0
  406062:	d0f9      	beq.n	406058 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  406064:	4a07      	ldr	r2, [pc, #28]	; (406084 <pmc_switch_mainck_to_fastrc+0x6c>)
  406066:	4b07      	ldr	r3, [pc, #28]	; (406084 <pmc_switch_mainck_to_fastrc+0x6c>)
  406068:	6a1b      	ldr	r3, [r3, #32]
  40606a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40606e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  406072:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  406076:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  406078:	bf00      	nop
  40607a:	370c      	adds	r7, #12
  40607c:	46bd      	mov	sp, r7
  40607e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406082:	4770      	bx	lr
  406084:	400e0400 	.word	0x400e0400

00406088 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  406088:	b480      	push	{r7}
  40608a:	b083      	sub	sp, #12
  40608c:	af00      	add	r7, sp, #0
  40608e:	6078      	str	r0, [r7, #4]
  406090:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  406092:	687b      	ldr	r3, [r7, #4]
  406094:	2b00      	cmp	r3, #0
  406096:	d008      	beq.n	4060aa <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  406098:	4916      	ldr	r1, [pc, #88]	; (4060f4 <pmc_switch_mainck_to_xtal+0x6c>)
  40609a:	4b16      	ldr	r3, [pc, #88]	; (4060f4 <pmc_switch_mainck_to_xtal+0x6c>)
  40609c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40609e:	4a16      	ldr	r2, [pc, #88]	; (4060f8 <pmc_switch_mainck_to_xtal+0x70>)
  4060a0:	401a      	ands	r2, r3
  4060a2:	4b16      	ldr	r3, [pc, #88]	; (4060fc <pmc_switch_mainck_to_xtal+0x74>)
  4060a4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4060a6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4060a8:	e01e      	b.n	4060e8 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4060aa:	4912      	ldr	r1, [pc, #72]	; (4060f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4060ac:	4b11      	ldr	r3, [pc, #68]	; (4060f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4060ae:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4060b0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4060b4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4060b8:	683a      	ldr	r2, [r7, #0]
  4060ba:	0212      	lsls	r2, r2, #8
  4060bc:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4060be:	4313      	orrs	r3, r2
  4060c0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4060c4:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4060c8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4060ca:	bf00      	nop
  4060cc:	4b09      	ldr	r3, [pc, #36]	; (4060f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4060ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4060d0:	f003 0301 	and.w	r3, r3, #1
  4060d4:	2b00      	cmp	r3, #0
  4060d6:	d0f9      	beq.n	4060cc <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4060d8:	4a06      	ldr	r2, [pc, #24]	; (4060f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4060da:	4b06      	ldr	r3, [pc, #24]	; (4060f4 <pmc_switch_mainck_to_xtal+0x6c>)
  4060dc:	6a1b      	ldr	r3, [r3, #32]
  4060de:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4060e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4060e6:	6213      	str	r3, [r2, #32]
}
  4060e8:	bf00      	nop
  4060ea:	370c      	adds	r7, #12
  4060ec:	46bd      	mov	sp, r7
  4060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4060f2:	4770      	bx	lr
  4060f4:	400e0400 	.word	0x400e0400
  4060f8:	fec8fffc 	.word	0xfec8fffc
  4060fc:	01370002 	.word	0x01370002

00406100 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  406100:	b480      	push	{r7}
  406102:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  406104:	4b04      	ldr	r3, [pc, #16]	; (406118 <pmc_osc_is_ready_mainck+0x18>)
  406106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40610c:	4618      	mov	r0, r3
  40610e:	46bd      	mov	sp, r7
  406110:	f85d 7b04 	ldr.w	r7, [sp], #4
  406114:	4770      	bx	lr
  406116:	bf00      	nop
  406118:	400e0400 	.word	0x400e0400

0040611c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40611c:	b480      	push	{r7}
  40611e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  406120:	4b04      	ldr	r3, [pc, #16]	; (406134 <pmc_disable_pllack+0x18>)
  406122:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  406126:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  406128:	bf00      	nop
  40612a:	46bd      	mov	sp, r7
  40612c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406130:	4770      	bx	lr
  406132:	bf00      	nop
  406134:	400e0400 	.word	0x400e0400

00406138 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  406138:	b480      	push	{r7}
  40613a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40613c:	4b04      	ldr	r3, [pc, #16]	; (406150 <pmc_is_locked_pllack+0x18>)
  40613e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406140:	f003 0302 	and.w	r3, r3, #2
}
  406144:	4618      	mov	r0, r3
  406146:	46bd      	mov	sp, r7
  406148:	f85d 7b04 	ldr.w	r7, [sp], #4
  40614c:	4770      	bx	lr
  40614e:	bf00      	nop
  406150:	400e0400 	.word	0x400e0400

00406154 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  406154:	b480      	push	{r7}
  406156:	b083      	sub	sp, #12
  406158:	af00      	add	r7, sp, #0
  40615a:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40615c:	687b      	ldr	r3, [r7, #4]
  40615e:	2b2f      	cmp	r3, #47	; 0x2f
  406160:	d901      	bls.n	406166 <pmc_enable_periph_clk+0x12>
		return 1;
  406162:	2301      	movs	r3, #1
  406164:	e02f      	b.n	4061c6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  406166:	687b      	ldr	r3, [r7, #4]
  406168:	2b1f      	cmp	r3, #31
  40616a:	d813      	bhi.n	406194 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40616c:	4b19      	ldr	r3, [pc, #100]	; (4061d4 <pmc_enable_periph_clk+0x80>)
  40616e:	699a      	ldr	r2, [r3, #24]
  406170:	2101      	movs	r1, #1
  406172:	687b      	ldr	r3, [r7, #4]
  406174:	fa01 f303 	lsl.w	r3, r1, r3
  406178:	401a      	ands	r2, r3
  40617a:	2101      	movs	r1, #1
  40617c:	687b      	ldr	r3, [r7, #4]
  40617e:	fa01 f303 	lsl.w	r3, r1, r3
  406182:	429a      	cmp	r2, r3
  406184:	d01e      	beq.n	4061c4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  406186:	4a13      	ldr	r2, [pc, #76]	; (4061d4 <pmc_enable_periph_clk+0x80>)
  406188:	2101      	movs	r1, #1
  40618a:	687b      	ldr	r3, [r7, #4]
  40618c:	fa01 f303 	lsl.w	r3, r1, r3
  406190:	6113      	str	r3, [r2, #16]
  406192:	e017      	b.n	4061c4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  406194:	687b      	ldr	r3, [r7, #4]
  406196:	3b20      	subs	r3, #32
  406198:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40619a:	4b0e      	ldr	r3, [pc, #56]	; (4061d4 <pmc_enable_periph_clk+0x80>)
  40619c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4061a0:	2101      	movs	r1, #1
  4061a2:	687b      	ldr	r3, [r7, #4]
  4061a4:	fa01 f303 	lsl.w	r3, r1, r3
  4061a8:	401a      	ands	r2, r3
  4061aa:	2101      	movs	r1, #1
  4061ac:	687b      	ldr	r3, [r7, #4]
  4061ae:	fa01 f303 	lsl.w	r3, r1, r3
  4061b2:	429a      	cmp	r2, r3
  4061b4:	d006      	beq.n	4061c4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4061b6:	4a07      	ldr	r2, [pc, #28]	; (4061d4 <pmc_enable_periph_clk+0x80>)
  4061b8:	2101      	movs	r1, #1
  4061ba:	687b      	ldr	r3, [r7, #4]
  4061bc:	fa01 f303 	lsl.w	r3, r1, r3
  4061c0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4061c4:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4061c6:	4618      	mov	r0, r3
  4061c8:	370c      	adds	r7, #12
  4061ca:	46bd      	mov	sp, r7
  4061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061d0:	4770      	bx	lr
  4061d2:	bf00      	nop
  4061d4:	400e0400 	.word	0x400e0400

004061d8 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  4061d8:	b480      	push	{r7}
  4061da:	b083      	sub	sp, #12
  4061dc:	af00      	add	r7, sp, #0
  4061de:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  4061e0:	687b      	ldr	r3, [r7, #4]
  4061e2:	2208      	movs	r2, #8
  4061e4:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  4061e6:	687b      	ldr	r3, [r7, #4]
  4061e8:	2220      	movs	r2, #32
  4061ea:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  4061ec:	687b      	ldr	r3, [r7, #4]
  4061ee:	2204      	movs	r2, #4
  4061f0:	601a      	str	r2, [r3, #0]
}
  4061f2:	bf00      	nop
  4061f4:	370c      	adds	r7, #12
  4061f6:	46bd      	mov	sp, r7
  4061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061fc:	4770      	bx	lr
	...

00406200 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  406200:	b580      	push	{r7, lr}
  406202:	b084      	sub	sp, #16
  406204:	af00      	add	r7, sp, #0
  406206:	6078      	str	r0, [r7, #4]
  406208:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  40620a:	2300      	movs	r3, #0
  40620c:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40620e:	687b      	ldr	r3, [r7, #4]
  406210:	f04f 32ff 	mov.w	r2, #4294967295
  406214:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  406216:	687b      	ldr	r3, [r7, #4]
  406218:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  40621a:	6878      	ldr	r0, [r7, #4]
  40621c:	4b0e      	ldr	r3, [pc, #56]	; (406258 <twi_master_init+0x58>)
  40621e:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  406220:	6878      	ldr	r0, [r7, #4]
  406222:	4b0e      	ldr	r3, [pc, #56]	; (40625c <twi_master_init+0x5c>)
  406224:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  406226:	683b      	ldr	r3, [r7, #0]
  406228:	6859      	ldr	r1, [r3, #4]
  40622a:	683b      	ldr	r3, [r7, #0]
  40622c:	681b      	ldr	r3, [r3, #0]
  40622e:	461a      	mov	r2, r3
  406230:	6878      	ldr	r0, [r7, #4]
  406232:	4b0b      	ldr	r3, [pc, #44]	; (406260 <twi_master_init+0x60>)
  406234:	4798      	blx	r3
  406236:	4603      	mov	r3, r0
  406238:	2b01      	cmp	r3, #1
  40623a:	d101      	bne.n	406240 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  40623c:	2301      	movs	r3, #1
  40623e:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  406240:	683b      	ldr	r3, [r7, #0]
  406242:	7a5b      	ldrb	r3, [r3, #9]
  406244:	2b01      	cmp	r3, #1
  406246:	d102      	bne.n	40624e <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  406248:	687b      	ldr	r3, [r7, #4]
  40624a:	2240      	movs	r2, #64	; 0x40
  40624c:	601a      	str	r2, [r3, #0]
	}

	return status;
  40624e:	68fb      	ldr	r3, [r7, #12]
}
  406250:	4618      	mov	r0, r3
  406252:	3710      	adds	r7, #16
  406254:	46bd      	mov	sp, r7
  406256:	bd80      	pop	{r7, pc}
  406258:	00406491 	.word	0x00406491
  40625c:	004061d9 	.word	0x004061d9
  406260:	00406265 	.word	0x00406265

00406264 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  406264:	b480      	push	{r7}
  406266:	b089      	sub	sp, #36	; 0x24
  406268:	af00      	add	r7, sp, #0
  40626a:	60f8      	str	r0, [r7, #12]
  40626c:	60b9      	str	r1, [r7, #8]
  40626e:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  406270:	2300      	movs	r3, #0
  406272:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  406274:	68bb      	ldr	r3, [r7, #8]
  406276:	4a34      	ldr	r2, [pc, #208]	; (406348 <twi_set_speed+0xe4>)
  406278:	4293      	cmp	r3, r2
  40627a:	d901      	bls.n	406280 <twi_set_speed+0x1c>
		return FAIL;
  40627c:	2301      	movs	r3, #1
  40627e:	e05d      	b.n	40633c <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  406280:	68bb      	ldr	r3, [r7, #8]
  406282:	4a32      	ldr	r2, [pc, #200]	; (40634c <twi_set_speed+0xe8>)
  406284:	4293      	cmp	r3, r2
  406286:	d937      	bls.n	4062f8 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  406288:	687b      	ldr	r3, [r7, #4]
  40628a:	4a31      	ldr	r2, [pc, #196]	; (406350 <twi_set_speed+0xec>)
  40628c:	fba2 2303 	umull	r2, r3, r2, r3
  406290:	0b9b      	lsrs	r3, r3, #14
  406292:	3b04      	subs	r3, #4
  406294:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  406296:	68ba      	ldr	r2, [r7, #8]
  406298:	4b2e      	ldr	r3, [pc, #184]	; (406354 <twi_set_speed+0xf0>)
  40629a:	4413      	add	r3, r2
  40629c:	009b      	lsls	r3, r3, #2
  40629e:	687a      	ldr	r2, [r7, #4]
  4062a0:	fbb2 f3f3 	udiv	r3, r2, r3
  4062a4:	3b04      	subs	r3, #4
  4062a6:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4062a8:	e005      	b.n	4062b6 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  4062aa:	69fb      	ldr	r3, [r7, #28]
  4062ac:	3301      	adds	r3, #1
  4062ae:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4062b0:	697b      	ldr	r3, [r7, #20]
  4062b2:	085b      	lsrs	r3, r3, #1
  4062b4:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4062b6:	697b      	ldr	r3, [r7, #20]
  4062b8:	2bff      	cmp	r3, #255	; 0xff
  4062ba:	d909      	bls.n	4062d0 <twi_set_speed+0x6c>
  4062bc:	69fb      	ldr	r3, [r7, #28]
  4062be:	2b06      	cmp	r3, #6
  4062c0:	d9f3      	bls.n	4062aa <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4062c2:	e005      	b.n	4062d0 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  4062c4:	69fb      	ldr	r3, [r7, #28]
  4062c6:	3301      	adds	r3, #1
  4062c8:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  4062ca:	693b      	ldr	r3, [r7, #16]
  4062cc:	085b      	lsrs	r3, r3, #1
  4062ce:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4062d0:	693b      	ldr	r3, [r7, #16]
  4062d2:	2bff      	cmp	r3, #255	; 0xff
  4062d4:	d902      	bls.n	4062dc <twi_set_speed+0x78>
  4062d6:	69fb      	ldr	r3, [r7, #28]
  4062d8:	2b06      	cmp	r3, #6
  4062da:	d9f3      	bls.n	4062c4 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4062dc:	697b      	ldr	r3, [r7, #20]
  4062de:	b2da      	uxtb	r2, r3
  4062e0:	693b      	ldr	r3, [r7, #16]
  4062e2:	021b      	lsls	r3, r3, #8
  4062e4:	b29b      	uxth	r3, r3
  4062e6:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  4062e8:	69fb      	ldr	r3, [r7, #28]
  4062ea:	041b      	lsls	r3, r3, #16
  4062ec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4062f0:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  4062f2:	68fb      	ldr	r3, [r7, #12]
  4062f4:	611a      	str	r2, [r3, #16]
  4062f6:	e020      	b.n	40633a <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4062f8:	68bb      	ldr	r3, [r7, #8]
  4062fa:	005b      	lsls	r3, r3, #1
  4062fc:	687a      	ldr	r2, [r7, #4]
  4062fe:	fbb2 f3f3 	udiv	r3, r2, r3
  406302:	3b04      	subs	r3, #4
  406304:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  406306:	e005      	b.n	406314 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  406308:	69fb      	ldr	r3, [r7, #28]
  40630a:	3301      	adds	r3, #1
  40630c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  40630e:	69bb      	ldr	r3, [r7, #24]
  406310:	085b      	lsrs	r3, r3, #1
  406312:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  406314:	69bb      	ldr	r3, [r7, #24]
  406316:	2bff      	cmp	r3, #255	; 0xff
  406318:	d902      	bls.n	406320 <twi_set_speed+0xbc>
  40631a:	69fb      	ldr	r3, [r7, #28]
  40631c:	2b06      	cmp	r3, #6
  40631e:	d9f3      	bls.n	406308 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  406320:	69bb      	ldr	r3, [r7, #24]
  406322:	b2da      	uxtb	r2, r3
  406324:	69bb      	ldr	r3, [r7, #24]
  406326:	021b      	lsls	r3, r3, #8
  406328:	b29b      	uxth	r3, r3
  40632a:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  40632c:	69fb      	ldr	r3, [r7, #28]
  40632e:	041b      	lsls	r3, r3, #16
  406330:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  406334:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  406336:	68fb      	ldr	r3, [r7, #12]
  406338:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  40633a:	2300      	movs	r3, #0
}
  40633c:	4618      	mov	r0, r3
  40633e:	3724      	adds	r7, #36	; 0x24
  406340:	46bd      	mov	sp, r7
  406342:	f85d 7b04 	ldr.w	r7, [sp], #4
  406346:	4770      	bx	lr
  406348:	00061a80 	.word	0x00061a80
  40634c:	0005dc00 	.word	0x0005dc00
  406350:	057619f1 	.word	0x057619f1
  406354:	3ffd1200 	.word	0x3ffd1200

00406358 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  406358:	b480      	push	{r7}
  40635a:	b085      	sub	sp, #20
  40635c:	af00      	add	r7, sp, #0
  40635e:	6078      	str	r0, [r7, #4]
  406360:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  406362:	683b      	ldr	r3, [r7, #0]
  406364:	2b00      	cmp	r3, #0
  406366:	d101      	bne.n	40636c <twi_mk_addr+0x14>
		return 0;
  406368:	2300      	movs	r3, #0
  40636a:	e01d      	b.n	4063a8 <twi_mk_addr+0x50>

	val = addr[0];
  40636c:	687b      	ldr	r3, [r7, #4]
  40636e:	781b      	ldrb	r3, [r3, #0]
  406370:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  406372:	683b      	ldr	r3, [r7, #0]
  406374:	2b01      	cmp	r3, #1
  406376:	dd09      	ble.n	40638c <twi_mk_addr+0x34>
		val <<= 8;
  406378:	68fb      	ldr	r3, [r7, #12]
  40637a:	021b      	lsls	r3, r3, #8
  40637c:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  40637e:	687b      	ldr	r3, [r7, #4]
  406380:	3301      	adds	r3, #1
  406382:	781b      	ldrb	r3, [r3, #0]
  406384:	461a      	mov	r2, r3
  406386:	68fb      	ldr	r3, [r7, #12]
  406388:	4313      	orrs	r3, r2
  40638a:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  40638c:	683b      	ldr	r3, [r7, #0]
  40638e:	2b02      	cmp	r3, #2
  406390:	dd09      	ble.n	4063a6 <twi_mk_addr+0x4e>
		val <<= 8;
  406392:	68fb      	ldr	r3, [r7, #12]
  406394:	021b      	lsls	r3, r3, #8
  406396:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  406398:	687b      	ldr	r3, [r7, #4]
  40639a:	3302      	adds	r3, #2
  40639c:	781b      	ldrb	r3, [r3, #0]
  40639e:	461a      	mov	r2, r3
  4063a0:	68fb      	ldr	r3, [r7, #12]
  4063a2:	4313      	orrs	r3, r2
  4063a4:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4063a6:	68fb      	ldr	r3, [r7, #12]
}
  4063a8:	4618      	mov	r0, r3
  4063aa:	3714      	adds	r7, #20
  4063ac:	46bd      	mov	sp, r7
  4063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4063b2:	4770      	bx	lr

004063b4 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4063b4:	b580      	push	{r7, lr}
  4063b6:	b086      	sub	sp, #24
  4063b8:	af00      	add	r7, sp, #0
  4063ba:	6078      	str	r0, [r7, #4]
  4063bc:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4063be:	683b      	ldr	r3, [r7, #0]
  4063c0:	68db      	ldr	r3, [r3, #12]
  4063c2:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  4063c4:	683b      	ldr	r3, [r7, #0]
  4063c6:	689b      	ldr	r3, [r3, #8]
  4063c8:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  4063ca:	697b      	ldr	r3, [r7, #20]
  4063cc:	2b00      	cmp	r3, #0
  4063ce:	d101      	bne.n	4063d4 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  4063d0:	2301      	movs	r3, #1
  4063d2:	e056      	b.n	406482 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4063d4:	687b      	ldr	r3, [r7, #4]
  4063d6:	2200      	movs	r2, #0
  4063d8:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4063da:	683b      	ldr	r3, [r7, #0]
  4063dc:	7c1b      	ldrb	r3, [r3, #16]
  4063de:	041b      	lsls	r3, r3, #16
  4063e0:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4063e4:	683b      	ldr	r3, [r7, #0]
  4063e6:	685b      	ldr	r3, [r3, #4]
  4063e8:	021b      	lsls	r3, r3, #8
  4063ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4063ee:	431a      	orrs	r2, r3
  4063f0:	687b      	ldr	r3, [r7, #4]
  4063f2:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4063f4:	687b      	ldr	r3, [r7, #4]
  4063f6:	2200      	movs	r2, #0
  4063f8:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4063fa:	683a      	ldr	r2, [r7, #0]
  4063fc:	683b      	ldr	r3, [r7, #0]
  4063fe:	685b      	ldr	r3, [r3, #4]
  406400:	4619      	mov	r1, r3
  406402:	4610      	mov	r0, r2
  406404:	4b21      	ldr	r3, [pc, #132]	; (40648c <twi_master_write+0xd8>)
  406406:	4798      	blx	r3
  406408:	4602      	mov	r2, r0
  40640a:	687b      	ldr	r3, [r7, #4]
  40640c:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  40640e:	e019      	b.n	406444 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  406410:	687b      	ldr	r3, [r7, #4]
  406412:	6a1b      	ldr	r3, [r3, #32]
  406414:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  406416:	68fb      	ldr	r3, [r7, #12]
  406418:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40641c:	2b00      	cmp	r3, #0
  40641e:	d001      	beq.n	406424 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  406420:	2305      	movs	r3, #5
  406422:	e02e      	b.n	406482 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  406424:	68fb      	ldr	r3, [r7, #12]
  406426:	f003 0304 	and.w	r3, r3, #4
  40642a:	2b00      	cmp	r3, #0
  40642c:	d100      	bne.n	406430 <twi_master_write+0x7c>
			continue;
  40642e:	e009      	b.n	406444 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  406430:	693b      	ldr	r3, [r7, #16]
  406432:	1c5a      	adds	r2, r3, #1
  406434:	613a      	str	r2, [r7, #16]
  406436:	781b      	ldrb	r3, [r3, #0]
  406438:	461a      	mov	r2, r3
  40643a:	687b      	ldr	r3, [r7, #4]
  40643c:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  40643e:	697b      	ldr	r3, [r7, #20]
  406440:	3b01      	subs	r3, #1
  406442:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  406444:	697b      	ldr	r3, [r7, #20]
  406446:	2b00      	cmp	r3, #0
  406448:	d1e2      	bne.n	406410 <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  40644a:	687b      	ldr	r3, [r7, #4]
  40644c:	6a1b      	ldr	r3, [r3, #32]
  40644e:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  406450:	68fb      	ldr	r3, [r7, #12]
  406452:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406456:	2b00      	cmp	r3, #0
  406458:	d001      	beq.n	40645e <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  40645a:	2305      	movs	r3, #5
  40645c:	e011      	b.n	406482 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  40645e:	68fb      	ldr	r3, [r7, #12]
  406460:	f003 0304 	and.w	r3, r3, #4
  406464:	2b00      	cmp	r3, #0
  406466:	d100      	bne.n	40646a <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  406468:	e7ef      	b.n	40644a <twi_master_write+0x96>
			break;
  40646a:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  40646c:	687b      	ldr	r3, [r7, #4]
  40646e:	2202      	movs	r2, #2
  406470:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  406472:	bf00      	nop
  406474:	687b      	ldr	r3, [r7, #4]
  406476:	6a1b      	ldr	r3, [r3, #32]
  406478:	f003 0301 	and.w	r3, r3, #1
  40647c:	2b00      	cmp	r3, #0
  40647e:	d0f9      	beq.n	406474 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  406480:	2300      	movs	r3, #0
}
  406482:	4618      	mov	r0, r3
  406484:	3718      	adds	r7, #24
  406486:	46bd      	mov	sp, r7
  406488:	bd80      	pop	{r7, pc}
  40648a:	bf00      	nop
  40648c:	00406359 	.word	0x00406359

00406490 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  406490:	b480      	push	{r7}
  406492:	b083      	sub	sp, #12
  406494:	af00      	add	r7, sp, #0
  406496:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  406498:	687b      	ldr	r3, [r7, #4]
  40649a:	2280      	movs	r2, #128	; 0x80
  40649c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  40649e:	687b      	ldr	r3, [r7, #4]
  4064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4064a2:	bf00      	nop
  4064a4:	370c      	adds	r7, #12
  4064a6:	46bd      	mov	sp, r7
  4064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4064ac:	4770      	bx	lr
	...

004064b0 <__aeabi_uldivmod>:
  4064b0:	b953      	cbnz	r3, 4064c8 <__aeabi_uldivmod+0x18>
  4064b2:	b94a      	cbnz	r2, 4064c8 <__aeabi_uldivmod+0x18>
  4064b4:	2900      	cmp	r1, #0
  4064b6:	bf08      	it	eq
  4064b8:	2800      	cmpeq	r0, #0
  4064ba:	bf1c      	itt	ne
  4064bc:	f04f 31ff 	movne.w	r1, #4294967295
  4064c0:	f04f 30ff 	movne.w	r0, #4294967295
  4064c4:	f000 b97a 	b.w	4067bc <__aeabi_idiv0>
  4064c8:	f1ad 0c08 	sub.w	ip, sp, #8
  4064cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4064d0:	f000 f806 	bl	4064e0 <__udivmoddi4>
  4064d4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4064d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4064dc:	b004      	add	sp, #16
  4064de:	4770      	bx	lr

004064e0 <__udivmoddi4>:
  4064e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4064e4:	468c      	mov	ip, r1
  4064e6:	460d      	mov	r5, r1
  4064e8:	4604      	mov	r4, r0
  4064ea:	9e08      	ldr	r6, [sp, #32]
  4064ec:	2b00      	cmp	r3, #0
  4064ee:	d151      	bne.n	406594 <__udivmoddi4+0xb4>
  4064f0:	428a      	cmp	r2, r1
  4064f2:	4617      	mov	r7, r2
  4064f4:	d96d      	bls.n	4065d2 <__udivmoddi4+0xf2>
  4064f6:	fab2 fe82 	clz	lr, r2
  4064fa:	f1be 0f00 	cmp.w	lr, #0
  4064fe:	d00b      	beq.n	406518 <__udivmoddi4+0x38>
  406500:	f1ce 0c20 	rsb	ip, lr, #32
  406504:	fa01 f50e 	lsl.w	r5, r1, lr
  406508:	fa20 fc0c 	lsr.w	ip, r0, ip
  40650c:	fa02 f70e 	lsl.w	r7, r2, lr
  406510:	ea4c 0c05 	orr.w	ip, ip, r5
  406514:	fa00 f40e 	lsl.w	r4, r0, lr
  406518:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40651c:	0c25      	lsrs	r5, r4, #16
  40651e:	fbbc f8fa 	udiv	r8, ip, sl
  406522:	fa1f f987 	uxth.w	r9, r7
  406526:	fb0a cc18 	mls	ip, sl, r8, ip
  40652a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40652e:	fb08 f309 	mul.w	r3, r8, r9
  406532:	42ab      	cmp	r3, r5
  406534:	d90a      	bls.n	40654c <__udivmoddi4+0x6c>
  406536:	19ed      	adds	r5, r5, r7
  406538:	f108 32ff 	add.w	r2, r8, #4294967295
  40653c:	f080 8123 	bcs.w	406786 <__udivmoddi4+0x2a6>
  406540:	42ab      	cmp	r3, r5
  406542:	f240 8120 	bls.w	406786 <__udivmoddi4+0x2a6>
  406546:	f1a8 0802 	sub.w	r8, r8, #2
  40654a:	443d      	add	r5, r7
  40654c:	1aed      	subs	r5, r5, r3
  40654e:	b2a4      	uxth	r4, r4
  406550:	fbb5 f0fa 	udiv	r0, r5, sl
  406554:	fb0a 5510 	mls	r5, sl, r0, r5
  406558:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40655c:	fb00 f909 	mul.w	r9, r0, r9
  406560:	45a1      	cmp	r9, r4
  406562:	d909      	bls.n	406578 <__udivmoddi4+0x98>
  406564:	19e4      	adds	r4, r4, r7
  406566:	f100 33ff 	add.w	r3, r0, #4294967295
  40656a:	f080 810a 	bcs.w	406782 <__udivmoddi4+0x2a2>
  40656e:	45a1      	cmp	r9, r4
  406570:	f240 8107 	bls.w	406782 <__udivmoddi4+0x2a2>
  406574:	3802      	subs	r0, #2
  406576:	443c      	add	r4, r7
  406578:	eba4 0409 	sub.w	r4, r4, r9
  40657c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406580:	2100      	movs	r1, #0
  406582:	2e00      	cmp	r6, #0
  406584:	d061      	beq.n	40664a <__udivmoddi4+0x16a>
  406586:	fa24 f40e 	lsr.w	r4, r4, lr
  40658a:	2300      	movs	r3, #0
  40658c:	6034      	str	r4, [r6, #0]
  40658e:	6073      	str	r3, [r6, #4]
  406590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406594:	428b      	cmp	r3, r1
  406596:	d907      	bls.n	4065a8 <__udivmoddi4+0xc8>
  406598:	2e00      	cmp	r6, #0
  40659a:	d054      	beq.n	406646 <__udivmoddi4+0x166>
  40659c:	2100      	movs	r1, #0
  40659e:	e886 0021 	stmia.w	r6, {r0, r5}
  4065a2:	4608      	mov	r0, r1
  4065a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4065a8:	fab3 f183 	clz	r1, r3
  4065ac:	2900      	cmp	r1, #0
  4065ae:	f040 808e 	bne.w	4066ce <__udivmoddi4+0x1ee>
  4065b2:	42ab      	cmp	r3, r5
  4065b4:	d302      	bcc.n	4065bc <__udivmoddi4+0xdc>
  4065b6:	4282      	cmp	r2, r0
  4065b8:	f200 80fa 	bhi.w	4067b0 <__udivmoddi4+0x2d0>
  4065bc:	1a84      	subs	r4, r0, r2
  4065be:	eb65 0503 	sbc.w	r5, r5, r3
  4065c2:	2001      	movs	r0, #1
  4065c4:	46ac      	mov	ip, r5
  4065c6:	2e00      	cmp	r6, #0
  4065c8:	d03f      	beq.n	40664a <__udivmoddi4+0x16a>
  4065ca:	e886 1010 	stmia.w	r6, {r4, ip}
  4065ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4065d2:	b912      	cbnz	r2, 4065da <__udivmoddi4+0xfa>
  4065d4:	2701      	movs	r7, #1
  4065d6:	fbb7 f7f2 	udiv	r7, r7, r2
  4065da:	fab7 fe87 	clz	lr, r7
  4065de:	f1be 0f00 	cmp.w	lr, #0
  4065e2:	d134      	bne.n	40664e <__udivmoddi4+0x16e>
  4065e4:	1beb      	subs	r3, r5, r7
  4065e6:	0c3a      	lsrs	r2, r7, #16
  4065e8:	fa1f fc87 	uxth.w	ip, r7
  4065ec:	2101      	movs	r1, #1
  4065ee:	fbb3 f8f2 	udiv	r8, r3, r2
  4065f2:	0c25      	lsrs	r5, r4, #16
  4065f4:	fb02 3318 	mls	r3, r2, r8, r3
  4065f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4065fc:	fb0c f308 	mul.w	r3, ip, r8
  406600:	42ab      	cmp	r3, r5
  406602:	d907      	bls.n	406614 <__udivmoddi4+0x134>
  406604:	19ed      	adds	r5, r5, r7
  406606:	f108 30ff 	add.w	r0, r8, #4294967295
  40660a:	d202      	bcs.n	406612 <__udivmoddi4+0x132>
  40660c:	42ab      	cmp	r3, r5
  40660e:	f200 80d1 	bhi.w	4067b4 <__udivmoddi4+0x2d4>
  406612:	4680      	mov	r8, r0
  406614:	1aed      	subs	r5, r5, r3
  406616:	b2a3      	uxth	r3, r4
  406618:	fbb5 f0f2 	udiv	r0, r5, r2
  40661c:	fb02 5510 	mls	r5, r2, r0, r5
  406620:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406624:	fb0c fc00 	mul.w	ip, ip, r0
  406628:	45a4      	cmp	ip, r4
  40662a:	d907      	bls.n	40663c <__udivmoddi4+0x15c>
  40662c:	19e4      	adds	r4, r4, r7
  40662e:	f100 33ff 	add.w	r3, r0, #4294967295
  406632:	d202      	bcs.n	40663a <__udivmoddi4+0x15a>
  406634:	45a4      	cmp	ip, r4
  406636:	f200 80b8 	bhi.w	4067aa <__udivmoddi4+0x2ca>
  40663a:	4618      	mov	r0, r3
  40663c:	eba4 040c 	sub.w	r4, r4, ip
  406640:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406644:	e79d      	b.n	406582 <__udivmoddi4+0xa2>
  406646:	4631      	mov	r1, r6
  406648:	4630      	mov	r0, r6
  40664a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40664e:	f1ce 0420 	rsb	r4, lr, #32
  406652:	fa05 f30e 	lsl.w	r3, r5, lr
  406656:	fa07 f70e 	lsl.w	r7, r7, lr
  40665a:	fa20 f804 	lsr.w	r8, r0, r4
  40665e:	0c3a      	lsrs	r2, r7, #16
  406660:	fa25 f404 	lsr.w	r4, r5, r4
  406664:	ea48 0803 	orr.w	r8, r8, r3
  406668:	fbb4 f1f2 	udiv	r1, r4, r2
  40666c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406670:	fb02 4411 	mls	r4, r2, r1, r4
  406674:	fa1f fc87 	uxth.w	ip, r7
  406678:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40667c:	fb01 f30c 	mul.w	r3, r1, ip
  406680:	42ab      	cmp	r3, r5
  406682:	fa00 f40e 	lsl.w	r4, r0, lr
  406686:	d909      	bls.n	40669c <__udivmoddi4+0x1bc>
  406688:	19ed      	adds	r5, r5, r7
  40668a:	f101 30ff 	add.w	r0, r1, #4294967295
  40668e:	f080 808a 	bcs.w	4067a6 <__udivmoddi4+0x2c6>
  406692:	42ab      	cmp	r3, r5
  406694:	f240 8087 	bls.w	4067a6 <__udivmoddi4+0x2c6>
  406698:	3902      	subs	r1, #2
  40669a:	443d      	add	r5, r7
  40669c:	1aeb      	subs	r3, r5, r3
  40669e:	fa1f f588 	uxth.w	r5, r8
  4066a2:	fbb3 f0f2 	udiv	r0, r3, r2
  4066a6:	fb02 3310 	mls	r3, r2, r0, r3
  4066aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4066ae:	fb00 f30c 	mul.w	r3, r0, ip
  4066b2:	42ab      	cmp	r3, r5
  4066b4:	d907      	bls.n	4066c6 <__udivmoddi4+0x1e6>
  4066b6:	19ed      	adds	r5, r5, r7
  4066b8:	f100 38ff 	add.w	r8, r0, #4294967295
  4066bc:	d26f      	bcs.n	40679e <__udivmoddi4+0x2be>
  4066be:	42ab      	cmp	r3, r5
  4066c0:	d96d      	bls.n	40679e <__udivmoddi4+0x2be>
  4066c2:	3802      	subs	r0, #2
  4066c4:	443d      	add	r5, r7
  4066c6:	1aeb      	subs	r3, r5, r3
  4066c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4066cc:	e78f      	b.n	4065ee <__udivmoddi4+0x10e>
  4066ce:	f1c1 0720 	rsb	r7, r1, #32
  4066d2:	fa22 f807 	lsr.w	r8, r2, r7
  4066d6:	408b      	lsls	r3, r1
  4066d8:	fa05 f401 	lsl.w	r4, r5, r1
  4066dc:	ea48 0303 	orr.w	r3, r8, r3
  4066e0:	fa20 fe07 	lsr.w	lr, r0, r7
  4066e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4066e8:	40fd      	lsrs	r5, r7
  4066ea:	ea4e 0e04 	orr.w	lr, lr, r4
  4066ee:	fbb5 f9fc 	udiv	r9, r5, ip
  4066f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4066f6:	fb0c 5519 	mls	r5, ip, r9, r5
  4066fa:	fa1f f883 	uxth.w	r8, r3
  4066fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406702:	fb09 f408 	mul.w	r4, r9, r8
  406706:	42ac      	cmp	r4, r5
  406708:	fa02 f201 	lsl.w	r2, r2, r1
  40670c:	fa00 fa01 	lsl.w	sl, r0, r1
  406710:	d908      	bls.n	406724 <__udivmoddi4+0x244>
  406712:	18ed      	adds	r5, r5, r3
  406714:	f109 30ff 	add.w	r0, r9, #4294967295
  406718:	d243      	bcs.n	4067a2 <__udivmoddi4+0x2c2>
  40671a:	42ac      	cmp	r4, r5
  40671c:	d941      	bls.n	4067a2 <__udivmoddi4+0x2c2>
  40671e:	f1a9 0902 	sub.w	r9, r9, #2
  406722:	441d      	add	r5, r3
  406724:	1b2d      	subs	r5, r5, r4
  406726:	fa1f fe8e 	uxth.w	lr, lr
  40672a:	fbb5 f0fc 	udiv	r0, r5, ip
  40672e:	fb0c 5510 	mls	r5, ip, r0, r5
  406732:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406736:	fb00 f808 	mul.w	r8, r0, r8
  40673a:	45a0      	cmp	r8, r4
  40673c:	d907      	bls.n	40674e <__udivmoddi4+0x26e>
  40673e:	18e4      	adds	r4, r4, r3
  406740:	f100 35ff 	add.w	r5, r0, #4294967295
  406744:	d229      	bcs.n	40679a <__udivmoddi4+0x2ba>
  406746:	45a0      	cmp	r8, r4
  406748:	d927      	bls.n	40679a <__udivmoddi4+0x2ba>
  40674a:	3802      	subs	r0, #2
  40674c:	441c      	add	r4, r3
  40674e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406752:	eba4 0408 	sub.w	r4, r4, r8
  406756:	fba0 8902 	umull	r8, r9, r0, r2
  40675a:	454c      	cmp	r4, r9
  40675c:	46c6      	mov	lr, r8
  40675e:	464d      	mov	r5, r9
  406760:	d315      	bcc.n	40678e <__udivmoddi4+0x2ae>
  406762:	d012      	beq.n	40678a <__udivmoddi4+0x2aa>
  406764:	b156      	cbz	r6, 40677c <__udivmoddi4+0x29c>
  406766:	ebba 030e 	subs.w	r3, sl, lr
  40676a:	eb64 0405 	sbc.w	r4, r4, r5
  40676e:	fa04 f707 	lsl.w	r7, r4, r7
  406772:	40cb      	lsrs	r3, r1
  406774:	431f      	orrs	r7, r3
  406776:	40cc      	lsrs	r4, r1
  406778:	6037      	str	r7, [r6, #0]
  40677a:	6074      	str	r4, [r6, #4]
  40677c:	2100      	movs	r1, #0
  40677e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406782:	4618      	mov	r0, r3
  406784:	e6f8      	b.n	406578 <__udivmoddi4+0x98>
  406786:	4690      	mov	r8, r2
  406788:	e6e0      	b.n	40654c <__udivmoddi4+0x6c>
  40678a:	45c2      	cmp	sl, r8
  40678c:	d2ea      	bcs.n	406764 <__udivmoddi4+0x284>
  40678e:	ebb8 0e02 	subs.w	lr, r8, r2
  406792:	eb69 0503 	sbc.w	r5, r9, r3
  406796:	3801      	subs	r0, #1
  406798:	e7e4      	b.n	406764 <__udivmoddi4+0x284>
  40679a:	4628      	mov	r0, r5
  40679c:	e7d7      	b.n	40674e <__udivmoddi4+0x26e>
  40679e:	4640      	mov	r0, r8
  4067a0:	e791      	b.n	4066c6 <__udivmoddi4+0x1e6>
  4067a2:	4681      	mov	r9, r0
  4067a4:	e7be      	b.n	406724 <__udivmoddi4+0x244>
  4067a6:	4601      	mov	r1, r0
  4067a8:	e778      	b.n	40669c <__udivmoddi4+0x1bc>
  4067aa:	3802      	subs	r0, #2
  4067ac:	443c      	add	r4, r7
  4067ae:	e745      	b.n	40663c <__udivmoddi4+0x15c>
  4067b0:	4608      	mov	r0, r1
  4067b2:	e708      	b.n	4065c6 <__udivmoddi4+0xe6>
  4067b4:	f1a8 0802 	sub.w	r8, r8, #2
  4067b8:	443d      	add	r5, r7
  4067ba:	e72b      	b.n	406614 <__udivmoddi4+0x134>

004067bc <__aeabi_idiv0>:
  4067bc:	4770      	bx	lr
  4067be:	bf00      	nop

004067c0 <__libc_init_array>:
  4067c0:	b570      	push	{r4, r5, r6, lr}
  4067c2:	4e0f      	ldr	r6, [pc, #60]	; (406800 <__libc_init_array+0x40>)
  4067c4:	4d0f      	ldr	r5, [pc, #60]	; (406804 <__libc_init_array+0x44>)
  4067c6:	1b76      	subs	r6, r6, r5
  4067c8:	10b6      	asrs	r6, r6, #2
  4067ca:	bf18      	it	ne
  4067cc:	2400      	movne	r4, #0
  4067ce:	d005      	beq.n	4067dc <__libc_init_array+0x1c>
  4067d0:	3401      	adds	r4, #1
  4067d2:	f855 3b04 	ldr.w	r3, [r5], #4
  4067d6:	4798      	blx	r3
  4067d8:	42a6      	cmp	r6, r4
  4067da:	d1f9      	bne.n	4067d0 <__libc_init_array+0x10>
  4067dc:	4e0a      	ldr	r6, [pc, #40]	; (406808 <__libc_init_array+0x48>)
  4067de:	4d0b      	ldr	r5, [pc, #44]	; (40680c <__libc_init_array+0x4c>)
  4067e0:	1b76      	subs	r6, r6, r5
  4067e2:	f005 f88d 	bl	40b900 <_init>
  4067e6:	10b6      	asrs	r6, r6, #2
  4067e8:	bf18      	it	ne
  4067ea:	2400      	movne	r4, #0
  4067ec:	d006      	beq.n	4067fc <__libc_init_array+0x3c>
  4067ee:	3401      	adds	r4, #1
  4067f0:	f855 3b04 	ldr.w	r3, [r5], #4
  4067f4:	4798      	blx	r3
  4067f6:	42a6      	cmp	r6, r4
  4067f8:	d1f9      	bne.n	4067ee <__libc_init_array+0x2e>
  4067fa:	bd70      	pop	{r4, r5, r6, pc}
  4067fc:	bd70      	pop	{r4, r5, r6, pc}
  4067fe:	bf00      	nop
  406800:	0040b90c 	.word	0x0040b90c
  406804:	0040b90c 	.word	0x0040b90c
  406808:	0040b914 	.word	0x0040b914
  40680c:	0040b90c 	.word	0x0040b90c

00406810 <memcpy>:
  406810:	4684      	mov	ip, r0
  406812:	ea41 0300 	orr.w	r3, r1, r0
  406816:	f013 0303 	ands.w	r3, r3, #3
  40681a:	d16d      	bne.n	4068f8 <memcpy+0xe8>
  40681c:	3a40      	subs	r2, #64	; 0x40
  40681e:	d341      	bcc.n	4068a4 <memcpy+0x94>
  406820:	f851 3b04 	ldr.w	r3, [r1], #4
  406824:	f840 3b04 	str.w	r3, [r0], #4
  406828:	f851 3b04 	ldr.w	r3, [r1], #4
  40682c:	f840 3b04 	str.w	r3, [r0], #4
  406830:	f851 3b04 	ldr.w	r3, [r1], #4
  406834:	f840 3b04 	str.w	r3, [r0], #4
  406838:	f851 3b04 	ldr.w	r3, [r1], #4
  40683c:	f840 3b04 	str.w	r3, [r0], #4
  406840:	f851 3b04 	ldr.w	r3, [r1], #4
  406844:	f840 3b04 	str.w	r3, [r0], #4
  406848:	f851 3b04 	ldr.w	r3, [r1], #4
  40684c:	f840 3b04 	str.w	r3, [r0], #4
  406850:	f851 3b04 	ldr.w	r3, [r1], #4
  406854:	f840 3b04 	str.w	r3, [r0], #4
  406858:	f851 3b04 	ldr.w	r3, [r1], #4
  40685c:	f840 3b04 	str.w	r3, [r0], #4
  406860:	f851 3b04 	ldr.w	r3, [r1], #4
  406864:	f840 3b04 	str.w	r3, [r0], #4
  406868:	f851 3b04 	ldr.w	r3, [r1], #4
  40686c:	f840 3b04 	str.w	r3, [r0], #4
  406870:	f851 3b04 	ldr.w	r3, [r1], #4
  406874:	f840 3b04 	str.w	r3, [r0], #4
  406878:	f851 3b04 	ldr.w	r3, [r1], #4
  40687c:	f840 3b04 	str.w	r3, [r0], #4
  406880:	f851 3b04 	ldr.w	r3, [r1], #4
  406884:	f840 3b04 	str.w	r3, [r0], #4
  406888:	f851 3b04 	ldr.w	r3, [r1], #4
  40688c:	f840 3b04 	str.w	r3, [r0], #4
  406890:	f851 3b04 	ldr.w	r3, [r1], #4
  406894:	f840 3b04 	str.w	r3, [r0], #4
  406898:	f851 3b04 	ldr.w	r3, [r1], #4
  40689c:	f840 3b04 	str.w	r3, [r0], #4
  4068a0:	3a40      	subs	r2, #64	; 0x40
  4068a2:	d2bd      	bcs.n	406820 <memcpy+0x10>
  4068a4:	3230      	adds	r2, #48	; 0x30
  4068a6:	d311      	bcc.n	4068cc <memcpy+0xbc>
  4068a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4068ac:	f840 3b04 	str.w	r3, [r0], #4
  4068b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4068b4:	f840 3b04 	str.w	r3, [r0], #4
  4068b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4068bc:	f840 3b04 	str.w	r3, [r0], #4
  4068c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4068c4:	f840 3b04 	str.w	r3, [r0], #4
  4068c8:	3a10      	subs	r2, #16
  4068ca:	d2ed      	bcs.n	4068a8 <memcpy+0x98>
  4068cc:	320c      	adds	r2, #12
  4068ce:	d305      	bcc.n	4068dc <memcpy+0xcc>
  4068d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4068d4:	f840 3b04 	str.w	r3, [r0], #4
  4068d8:	3a04      	subs	r2, #4
  4068da:	d2f9      	bcs.n	4068d0 <memcpy+0xc0>
  4068dc:	3204      	adds	r2, #4
  4068de:	d008      	beq.n	4068f2 <memcpy+0xe2>
  4068e0:	07d2      	lsls	r2, r2, #31
  4068e2:	bf1c      	itt	ne
  4068e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4068e8:	f800 3b01 	strbne.w	r3, [r0], #1
  4068ec:	d301      	bcc.n	4068f2 <memcpy+0xe2>
  4068ee:	880b      	ldrh	r3, [r1, #0]
  4068f0:	8003      	strh	r3, [r0, #0]
  4068f2:	4660      	mov	r0, ip
  4068f4:	4770      	bx	lr
  4068f6:	bf00      	nop
  4068f8:	2a08      	cmp	r2, #8
  4068fa:	d313      	bcc.n	406924 <memcpy+0x114>
  4068fc:	078b      	lsls	r3, r1, #30
  4068fe:	d08d      	beq.n	40681c <memcpy+0xc>
  406900:	f010 0303 	ands.w	r3, r0, #3
  406904:	d08a      	beq.n	40681c <memcpy+0xc>
  406906:	f1c3 0304 	rsb	r3, r3, #4
  40690a:	1ad2      	subs	r2, r2, r3
  40690c:	07db      	lsls	r3, r3, #31
  40690e:	bf1c      	itt	ne
  406910:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406914:	f800 3b01 	strbne.w	r3, [r0], #1
  406918:	d380      	bcc.n	40681c <memcpy+0xc>
  40691a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40691e:	f820 3b02 	strh.w	r3, [r0], #2
  406922:	e77b      	b.n	40681c <memcpy+0xc>
  406924:	3a04      	subs	r2, #4
  406926:	d3d9      	bcc.n	4068dc <memcpy+0xcc>
  406928:	3a01      	subs	r2, #1
  40692a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40692e:	f800 3b01 	strb.w	r3, [r0], #1
  406932:	d2f9      	bcs.n	406928 <memcpy+0x118>
  406934:	780b      	ldrb	r3, [r1, #0]
  406936:	7003      	strb	r3, [r0, #0]
  406938:	784b      	ldrb	r3, [r1, #1]
  40693a:	7043      	strb	r3, [r0, #1]
  40693c:	788b      	ldrb	r3, [r1, #2]
  40693e:	7083      	strb	r3, [r0, #2]
  406940:	4660      	mov	r0, ip
  406942:	4770      	bx	lr

00406944 <memset>:
  406944:	b470      	push	{r4, r5, r6}
  406946:	0786      	lsls	r6, r0, #30
  406948:	d046      	beq.n	4069d8 <memset+0x94>
  40694a:	1e54      	subs	r4, r2, #1
  40694c:	2a00      	cmp	r2, #0
  40694e:	d041      	beq.n	4069d4 <memset+0x90>
  406950:	b2ca      	uxtb	r2, r1
  406952:	4603      	mov	r3, r0
  406954:	e002      	b.n	40695c <memset+0x18>
  406956:	f114 34ff 	adds.w	r4, r4, #4294967295
  40695a:	d33b      	bcc.n	4069d4 <memset+0x90>
  40695c:	f803 2b01 	strb.w	r2, [r3], #1
  406960:	079d      	lsls	r5, r3, #30
  406962:	d1f8      	bne.n	406956 <memset+0x12>
  406964:	2c03      	cmp	r4, #3
  406966:	d92e      	bls.n	4069c6 <memset+0x82>
  406968:	b2cd      	uxtb	r5, r1
  40696a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40696e:	2c0f      	cmp	r4, #15
  406970:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406974:	d919      	bls.n	4069aa <memset+0x66>
  406976:	f103 0210 	add.w	r2, r3, #16
  40697a:	4626      	mov	r6, r4
  40697c:	3e10      	subs	r6, #16
  40697e:	2e0f      	cmp	r6, #15
  406980:	f842 5c10 	str.w	r5, [r2, #-16]
  406984:	f842 5c0c 	str.w	r5, [r2, #-12]
  406988:	f842 5c08 	str.w	r5, [r2, #-8]
  40698c:	f842 5c04 	str.w	r5, [r2, #-4]
  406990:	f102 0210 	add.w	r2, r2, #16
  406994:	d8f2      	bhi.n	40697c <memset+0x38>
  406996:	f1a4 0210 	sub.w	r2, r4, #16
  40699a:	f022 020f 	bic.w	r2, r2, #15
  40699e:	f004 040f 	and.w	r4, r4, #15
  4069a2:	3210      	adds	r2, #16
  4069a4:	2c03      	cmp	r4, #3
  4069a6:	4413      	add	r3, r2
  4069a8:	d90d      	bls.n	4069c6 <memset+0x82>
  4069aa:	461e      	mov	r6, r3
  4069ac:	4622      	mov	r2, r4
  4069ae:	3a04      	subs	r2, #4
  4069b0:	2a03      	cmp	r2, #3
  4069b2:	f846 5b04 	str.w	r5, [r6], #4
  4069b6:	d8fa      	bhi.n	4069ae <memset+0x6a>
  4069b8:	1f22      	subs	r2, r4, #4
  4069ba:	f022 0203 	bic.w	r2, r2, #3
  4069be:	3204      	adds	r2, #4
  4069c0:	4413      	add	r3, r2
  4069c2:	f004 0403 	and.w	r4, r4, #3
  4069c6:	b12c      	cbz	r4, 4069d4 <memset+0x90>
  4069c8:	b2c9      	uxtb	r1, r1
  4069ca:	441c      	add	r4, r3
  4069cc:	f803 1b01 	strb.w	r1, [r3], #1
  4069d0:	429c      	cmp	r4, r3
  4069d2:	d1fb      	bne.n	4069cc <memset+0x88>
  4069d4:	bc70      	pop	{r4, r5, r6}
  4069d6:	4770      	bx	lr
  4069d8:	4614      	mov	r4, r2
  4069da:	4603      	mov	r3, r0
  4069dc:	e7c2      	b.n	406964 <memset+0x20>
  4069de:	bf00      	nop

004069e0 <sprintf>:
  4069e0:	b40e      	push	{r1, r2, r3}
  4069e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4069e4:	b09c      	sub	sp, #112	; 0x70
  4069e6:	ab21      	add	r3, sp, #132	; 0x84
  4069e8:	490f      	ldr	r1, [pc, #60]	; (406a28 <sprintf+0x48>)
  4069ea:	f853 2b04 	ldr.w	r2, [r3], #4
  4069ee:	9301      	str	r3, [sp, #4]
  4069f0:	4605      	mov	r5, r0
  4069f2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4069f6:	6808      	ldr	r0, [r1, #0]
  4069f8:	9502      	str	r5, [sp, #8]
  4069fa:	f44f 7702 	mov.w	r7, #520	; 0x208
  4069fe:	f64f 76ff 	movw	r6, #65535	; 0xffff
  406a02:	a902      	add	r1, sp, #8
  406a04:	9506      	str	r5, [sp, #24]
  406a06:	f8ad 7014 	strh.w	r7, [sp, #20]
  406a0a:	9404      	str	r4, [sp, #16]
  406a0c:	9407      	str	r4, [sp, #28]
  406a0e:	f8ad 6016 	strh.w	r6, [sp, #22]
  406a12:	f000 f8b5 	bl	406b80 <_svfprintf_r>
  406a16:	9b02      	ldr	r3, [sp, #8]
  406a18:	2200      	movs	r2, #0
  406a1a:	701a      	strb	r2, [r3, #0]
  406a1c:	b01c      	add	sp, #112	; 0x70
  406a1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  406a22:	b003      	add	sp, #12
  406a24:	4770      	bx	lr
  406a26:	bf00      	nop
  406a28:	20000020 	.word	0x20000020
	...

00406a40 <strlen>:
  406a40:	f890 f000 	pld	[r0]
  406a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406a48:	f020 0107 	bic.w	r1, r0, #7
  406a4c:	f06f 0c00 	mvn.w	ip, #0
  406a50:	f010 0407 	ands.w	r4, r0, #7
  406a54:	f891 f020 	pld	[r1, #32]
  406a58:	f040 8049 	bne.w	406aee <strlen+0xae>
  406a5c:	f04f 0400 	mov.w	r4, #0
  406a60:	f06f 0007 	mvn.w	r0, #7
  406a64:	e9d1 2300 	ldrd	r2, r3, [r1]
  406a68:	f891 f040 	pld	[r1, #64]	; 0x40
  406a6c:	f100 0008 	add.w	r0, r0, #8
  406a70:	fa82 f24c 	uadd8	r2, r2, ip
  406a74:	faa4 f28c 	sel	r2, r4, ip
  406a78:	fa83 f34c 	uadd8	r3, r3, ip
  406a7c:	faa2 f38c 	sel	r3, r2, ip
  406a80:	bb4b      	cbnz	r3, 406ad6 <strlen+0x96>
  406a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406a86:	fa82 f24c 	uadd8	r2, r2, ip
  406a8a:	f100 0008 	add.w	r0, r0, #8
  406a8e:	faa4 f28c 	sel	r2, r4, ip
  406a92:	fa83 f34c 	uadd8	r3, r3, ip
  406a96:	faa2 f38c 	sel	r3, r2, ip
  406a9a:	b9e3      	cbnz	r3, 406ad6 <strlen+0x96>
  406a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406aa0:	fa82 f24c 	uadd8	r2, r2, ip
  406aa4:	f100 0008 	add.w	r0, r0, #8
  406aa8:	faa4 f28c 	sel	r2, r4, ip
  406aac:	fa83 f34c 	uadd8	r3, r3, ip
  406ab0:	faa2 f38c 	sel	r3, r2, ip
  406ab4:	b97b      	cbnz	r3, 406ad6 <strlen+0x96>
  406ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406aba:	f101 0120 	add.w	r1, r1, #32
  406abe:	fa82 f24c 	uadd8	r2, r2, ip
  406ac2:	f100 0008 	add.w	r0, r0, #8
  406ac6:	faa4 f28c 	sel	r2, r4, ip
  406aca:	fa83 f34c 	uadd8	r3, r3, ip
  406ace:	faa2 f38c 	sel	r3, r2, ip
  406ad2:	2b00      	cmp	r3, #0
  406ad4:	d0c6      	beq.n	406a64 <strlen+0x24>
  406ad6:	2a00      	cmp	r2, #0
  406ad8:	bf04      	itt	eq
  406ada:	3004      	addeq	r0, #4
  406adc:	461a      	moveq	r2, r3
  406ade:	ba12      	rev	r2, r2
  406ae0:	fab2 f282 	clz	r2, r2
  406ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406aec:	4770      	bx	lr
  406aee:	e9d1 2300 	ldrd	r2, r3, [r1]
  406af2:	f004 0503 	and.w	r5, r4, #3
  406af6:	f1c4 0000 	rsb	r0, r4, #0
  406afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406afe:	f014 0f04 	tst.w	r4, #4
  406b02:	f891 f040 	pld	[r1, #64]	; 0x40
  406b06:	fa0c f505 	lsl.w	r5, ip, r5
  406b0a:	ea62 0205 	orn	r2, r2, r5
  406b0e:	bf1c      	itt	ne
  406b10:	ea63 0305 	ornne	r3, r3, r5
  406b14:	4662      	movne	r2, ip
  406b16:	f04f 0400 	mov.w	r4, #0
  406b1a:	e7a9      	b.n	406a70 <strlen+0x30>

00406b1c <strncpy>:
  406b1c:	ea40 0301 	orr.w	r3, r0, r1
  406b20:	f013 0f03 	tst.w	r3, #3
  406b24:	b470      	push	{r4, r5, r6}
  406b26:	4603      	mov	r3, r0
  406b28:	d024      	beq.n	406b74 <strncpy+0x58>
  406b2a:	b1a2      	cbz	r2, 406b56 <strncpy+0x3a>
  406b2c:	780c      	ldrb	r4, [r1, #0]
  406b2e:	701c      	strb	r4, [r3, #0]
  406b30:	3a01      	subs	r2, #1
  406b32:	3301      	adds	r3, #1
  406b34:	3101      	adds	r1, #1
  406b36:	b13c      	cbz	r4, 406b48 <strncpy+0x2c>
  406b38:	b16a      	cbz	r2, 406b56 <strncpy+0x3a>
  406b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
  406b3e:	f803 4b01 	strb.w	r4, [r3], #1
  406b42:	3a01      	subs	r2, #1
  406b44:	2c00      	cmp	r4, #0
  406b46:	d1f7      	bne.n	406b38 <strncpy+0x1c>
  406b48:	b12a      	cbz	r2, 406b56 <strncpy+0x3a>
  406b4a:	441a      	add	r2, r3
  406b4c:	2100      	movs	r1, #0
  406b4e:	f803 1b01 	strb.w	r1, [r3], #1
  406b52:	429a      	cmp	r2, r3
  406b54:	d1fb      	bne.n	406b4e <strncpy+0x32>
  406b56:	bc70      	pop	{r4, r5, r6}
  406b58:	4770      	bx	lr
  406b5a:	460e      	mov	r6, r1
  406b5c:	f851 5b04 	ldr.w	r5, [r1], #4
  406b60:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  406b64:	ea24 0405 	bic.w	r4, r4, r5
  406b68:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  406b6c:	d105      	bne.n	406b7a <strncpy+0x5e>
  406b6e:	f843 5b04 	str.w	r5, [r3], #4
  406b72:	3a04      	subs	r2, #4
  406b74:	2a03      	cmp	r2, #3
  406b76:	d8f0      	bhi.n	406b5a <strncpy+0x3e>
  406b78:	e7d7      	b.n	406b2a <strncpy+0xe>
  406b7a:	4631      	mov	r1, r6
  406b7c:	e7d6      	b.n	406b2c <strncpy+0x10>
  406b7e:	bf00      	nop

00406b80 <_svfprintf_r>:
  406b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b84:	b0c3      	sub	sp, #268	; 0x10c
  406b86:	460c      	mov	r4, r1
  406b88:	910b      	str	r1, [sp, #44]	; 0x2c
  406b8a:	4692      	mov	sl, r2
  406b8c:	930f      	str	r3, [sp, #60]	; 0x3c
  406b8e:	900c      	str	r0, [sp, #48]	; 0x30
  406b90:	f002 fa32 	bl	408ff8 <_localeconv_r>
  406b94:	6803      	ldr	r3, [r0, #0]
  406b96:	931a      	str	r3, [sp, #104]	; 0x68
  406b98:	4618      	mov	r0, r3
  406b9a:	f7ff ff51 	bl	406a40 <strlen>
  406b9e:	89a3      	ldrh	r3, [r4, #12]
  406ba0:	9019      	str	r0, [sp, #100]	; 0x64
  406ba2:	0619      	lsls	r1, r3, #24
  406ba4:	d503      	bpl.n	406bae <_svfprintf_r+0x2e>
  406ba6:	6923      	ldr	r3, [r4, #16]
  406ba8:	2b00      	cmp	r3, #0
  406baa:	f001 8003 	beq.w	407bb4 <_svfprintf_r+0x1034>
  406bae:	2300      	movs	r3, #0
  406bb0:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  406bb4:	9313      	str	r3, [sp, #76]	; 0x4c
  406bb6:	9315      	str	r3, [sp, #84]	; 0x54
  406bb8:	9314      	str	r3, [sp, #80]	; 0x50
  406bba:	9327      	str	r3, [sp, #156]	; 0x9c
  406bbc:	9326      	str	r3, [sp, #152]	; 0x98
  406bbe:	9318      	str	r3, [sp, #96]	; 0x60
  406bc0:	931b      	str	r3, [sp, #108]	; 0x6c
  406bc2:	9309      	str	r3, [sp, #36]	; 0x24
  406bc4:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  406bc8:	46c8      	mov	r8, r9
  406bca:	9316      	str	r3, [sp, #88]	; 0x58
  406bcc:	9317      	str	r3, [sp, #92]	; 0x5c
  406bce:	f89a 3000 	ldrb.w	r3, [sl]
  406bd2:	4654      	mov	r4, sl
  406bd4:	b1e3      	cbz	r3, 406c10 <_svfprintf_r+0x90>
  406bd6:	2b25      	cmp	r3, #37	; 0x25
  406bd8:	d102      	bne.n	406be0 <_svfprintf_r+0x60>
  406bda:	e019      	b.n	406c10 <_svfprintf_r+0x90>
  406bdc:	2b25      	cmp	r3, #37	; 0x25
  406bde:	d003      	beq.n	406be8 <_svfprintf_r+0x68>
  406be0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406be4:	2b00      	cmp	r3, #0
  406be6:	d1f9      	bne.n	406bdc <_svfprintf_r+0x5c>
  406be8:	eba4 050a 	sub.w	r5, r4, sl
  406bec:	b185      	cbz	r5, 406c10 <_svfprintf_r+0x90>
  406bee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406bf0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406bf2:	f8c8 a000 	str.w	sl, [r8]
  406bf6:	3301      	adds	r3, #1
  406bf8:	442a      	add	r2, r5
  406bfa:	2b07      	cmp	r3, #7
  406bfc:	f8c8 5004 	str.w	r5, [r8, #4]
  406c00:	9227      	str	r2, [sp, #156]	; 0x9c
  406c02:	9326      	str	r3, [sp, #152]	; 0x98
  406c04:	dc7f      	bgt.n	406d06 <_svfprintf_r+0x186>
  406c06:	f108 0808 	add.w	r8, r8, #8
  406c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406c0c:	442b      	add	r3, r5
  406c0e:	9309      	str	r3, [sp, #36]	; 0x24
  406c10:	7823      	ldrb	r3, [r4, #0]
  406c12:	2b00      	cmp	r3, #0
  406c14:	d07f      	beq.n	406d16 <_svfprintf_r+0x196>
  406c16:	2300      	movs	r3, #0
  406c18:	461a      	mov	r2, r3
  406c1a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406c1e:	4619      	mov	r1, r3
  406c20:	930d      	str	r3, [sp, #52]	; 0x34
  406c22:	469b      	mov	fp, r3
  406c24:	f04f 30ff 	mov.w	r0, #4294967295
  406c28:	7863      	ldrb	r3, [r4, #1]
  406c2a:	900a      	str	r0, [sp, #40]	; 0x28
  406c2c:	f104 0a01 	add.w	sl, r4, #1
  406c30:	f10a 0a01 	add.w	sl, sl, #1
  406c34:	f1a3 0020 	sub.w	r0, r3, #32
  406c38:	2858      	cmp	r0, #88	; 0x58
  406c3a:	f200 83c1 	bhi.w	4073c0 <_svfprintf_r+0x840>
  406c3e:	e8df f010 	tbh	[pc, r0, lsl #1]
  406c42:	0238      	.short	0x0238
  406c44:	03bf03bf 	.word	0x03bf03bf
  406c48:	03bf0240 	.word	0x03bf0240
  406c4c:	03bf03bf 	.word	0x03bf03bf
  406c50:	03bf03bf 	.word	0x03bf03bf
  406c54:	024503bf 	.word	0x024503bf
  406c58:	03bf0203 	.word	0x03bf0203
  406c5c:	026b005d 	.word	0x026b005d
  406c60:	028603bf 	.word	0x028603bf
  406c64:	039d039d 	.word	0x039d039d
  406c68:	039d039d 	.word	0x039d039d
  406c6c:	039d039d 	.word	0x039d039d
  406c70:	039d039d 	.word	0x039d039d
  406c74:	03bf039d 	.word	0x03bf039d
  406c78:	03bf03bf 	.word	0x03bf03bf
  406c7c:	03bf03bf 	.word	0x03bf03bf
  406c80:	03bf03bf 	.word	0x03bf03bf
  406c84:	03bf03bf 	.word	0x03bf03bf
  406c88:	033703bf 	.word	0x033703bf
  406c8c:	03bf0357 	.word	0x03bf0357
  406c90:	03bf0357 	.word	0x03bf0357
  406c94:	03bf03bf 	.word	0x03bf03bf
  406c98:	039803bf 	.word	0x039803bf
  406c9c:	03bf03bf 	.word	0x03bf03bf
  406ca0:	03bf03ad 	.word	0x03bf03ad
  406ca4:	03bf03bf 	.word	0x03bf03bf
  406ca8:	03bf03bf 	.word	0x03bf03bf
  406cac:	03bf0259 	.word	0x03bf0259
  406cb0:	031e03bf 	.word	0x031e03bf
  406cb4:	03bf03bf 	.word	0x03bf03bf
  406cb8:	03bf03bf 	.word	0x03bf03bf
  406cbc:	03bf03bf 	.word	0x03bf03bf
  406cc0:	03bf03bf 	.word	0x03bf03bf
  406cc4:	03bf03bf 	.word	0x03bf03bf
  406cc8:	02db02c6 	.word	0x02db02c6
  406ccc:	03570357 	.word	0x03570357
  406cd0:	028b0357 	.word	0x028b0357
  406cd4:	03bf02db 	.word	0x03bf02db
  406cd8:	029003bf 	.word	0x029003bf
  406cdc:	029d03bf 	.word	0x029d03bf
  406ce0:	02b401cc 	.word	0x02b401cc
  406ce4:	03bf0208 	.word	0x03bf0208
  406ce8:	03bf01e1 	.word	0x03bf01e1
  406cec:	03bf007e 	.word	0x03bf007e
  406cf0:	020d03bf 	.word	0x020d03bf
  406cf4:	980d      	ldr	r0, [sp, #52]	; 0x34
  406cf6:	930f      	str	r3, [sp, #60]	; 0x3c
  406cf8:	4240      	negs	r0, r0
  406cfa:	900d      	str	r0, [sp, #52]	; 0x34
  406cfc:	f04b 0b04 	orr.w	fp, fp, #4
  406d00:	f89a 3000 	ldrb.w	r3, [sl]
  406d04:	e794      	b.n	406c30 <_svfprintf_r+0xb0>
  406d06:	aa25      	add	r2, sp, #148	; 0x94
  406d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406d0a:	980c      	ldr	r0, [sp, #48]	; 0x30
  406d0c:	f002 ffa0 	bl	409c50 <__ssprint_r>
  406d10:	b940      	cbnz	r0, 406d24 <_svfprintf_r+0x1a4>
  406d12:	46c8      	mov	r8, r9
  406d14:	e779      	b.n	406c0a <_svfprintf_r+0x8a>
  406d16:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  406d18:	b123      	cbz	r3, 406d24 <_svfprintf_r+0x1a4>
  406d1a:	980c      	ldr	r0, [sp, #48]	; 0x30
  406d1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406d1e:	aa25      	add	r2, sp, #148	; 0x94
  406d20:	f002 ff96 	bl	409c50 <__ssprint_r>
  406d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406d26:	899b      	ldrh	r3, [r3, #12]
  406d28:	f013 0f40 	tst.w	r3, #64	; 0x40
  406d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406d2e:	bf18      	it	ne
  406d30:	f04f 33ff 	movne.w	r3, #4294967295
  406d34:	9309      	str	r3, [sp, #36]	; 0x24
  406d36:	9809      	ldr	r0, [sp, #36]	; 0x24
  406d38:	b043      	add	sp, #268	; 0x10c
  406d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d3e:	f01b 0f20 	tst.w	fp, #32
  406d42:	9311      	str	r3, [sp, #68]	; 0x44
  406d44:	f040 81dd 	bne.w	407102 <_svfprintf_r+0x582>
  406d48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406d4a:	f01b 0f10 	tst.w	fp, #16
  406d4e:	4613      	mov	r3, r2
  406d50:	f040 856e 	bne.w	407830 <_svfprintf_r+0xcb0>
  406d54:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406d58:	f000 856a 	beq.w	407830 <_svfprintf_r+0xcb0>
  406d5c:	8814      	ldrh	r4, [r2, #0]
  406d5e:	3204      	adds	r2, #4
  406d60:	2500      	movs	r5, #0
  406d62:	2301      	movs	r3, #1
  406d64:	920f      	str	r2, [sp, #60]	; 0x3c
  406d66:	2700      	movs	r7, #0
  406d68:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406d6c:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d6e:	1c4a      	adds	r2, r1, #1
  406d70:	f000 8265 	beq.w	40723e <_svfprintf_r+0x6be>
  406d74:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  406d78:	9207      	str	r2, [sp, #28]
  406d7a:	ea54 0205 	orrs.w	r2, r4, r5
  406d7e:	f040 8264 	bne.w	40724a <_svfprintf_r+0x6ca>
  406d82:	2900      	cmp	r1, #0
  406d84:	f040 843c 	bne.w	407600 <_svfprintf_r+0xa80>
  406d88:	2b00      	cmp	r3, #0
  406d8a:	f040 84d7 	bne.w	40773c <_svfprintf_r+0xbbc>
  406d8e:	f01b 0301 	ands.w	r3, fp, #1
  406d92:	930e      	str	r3, [sp, #56]	; 0x38
  406d94:	f000 8604 	beq.w	4079a0 <_svfprintf_r+0xe20>
  406d98:	ae42      	add	r6, sp, #264	; 0x108
  406d9a:	2330      	movs	r3, #48	; 0x30
  406d9c:	f806 3d41 	strb.w	r3, [r6, #-65]!
  406da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406da4:	4293      	cmp	r3, r2
  406da6:	bfb8      	it	lt
  406da8:	4613      	movlt	r3, r2
  406daa:	9308      	str	r3, [sp, #32]
  406dac:	2300      	movs	r3, #0
  406dae:	9312      	str	r3, [sp, #72]	; 0x48
  406db0:	b117      	cbz	r7, 406db8 <_svfprintf_r+0x238>
  406db2:	9b08      	ldr	r3, [sp, #32]
  406db4:	3301      	adds	r3, #1
  406db6:	9308      	str	r3, [sp, #32]
  406db8:	9b07      	ldr	r3, [sp, #28]
  406dba:	f013 0302 	ands.w	r3, r3, #2
  406dbe:	9310      	str	r3, [sp, #64]	; 0x40
  406dc0:	d002      	beq.n	406dc8 <_svfprintf_r+0x248>
  406dc2:	9b08      	ldr	r3, [sp, #32]
  406dc4:	3302      	adds	r3, #2
  406dc6:	9308      	str	r3, [sp, #32]
  406dc8:	9b07      	ldr	r3, [sp, #28]
  406dca:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  406dce:	f040 830e 	bne.w	4073ee <_svfprintf_r+0x86e>
  406dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406dd4:	9a08      	ldr	r2, [sp, #32]
  406dd6:	eba3 0b02 	sub.w	fp, r3, r2
  406dda:	f1bb 0f00 	cmp.w	fp, #0
  406dde:	f340 8306 	ble.w	4073ee <_svfprintf_r+0x86e>
  406de2:	f1bb 0f10 	cmp.w	fp, #16
  406de6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406de8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406dea:	dd29      	ble.n	406e40 <_svfprintf_r+0x2c0>
  406dec:	4643      	mov	r3, r8
  406dee:	4621      	mov	r1, r4
  406df0:	46a8      	mov	r8, r5
  406df2:	2710      	movs	r7, #16
  406df4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406df6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406df8:	e006      	b.n	406e08 <_svfprintf_r+0x288>
  406dfa:	f1ab 0b10 	sub.w	fp, fp, #16
  406dfe:	f1bb 0f10 	cmp.w	fp, #16
  406e02:	f103 0308 	add.w	r3, r3, #8
  406e06:	dd18      	ble.n	406e3a <_svfprintf_r+0x2ba>
  406e08:	3201      	adds	r2, #1
  406e0a:	48b7      	ldr	r0, [pc, #732]	; (4070e8 <_svfprintf_r+0x568>)
  406e0c:	9226      	str	r2, [sp, #152]	; 0x98
  406e0e:	3110      	adds	r1, #16
  406e10:	2a07      	cmp	r2, #7
  406e12:	9127      	str	r1, [sp, #156]	; 0x9c
  406e14:	e883 0081 	stmia.w	r3, {r0, r7}
  406e18:	ddef      	ble.n	406dfa <_svfprintf_r+0x27a>
  406e1a:	aa25      	add	r2, sp, #148	; 0x94
  406e1c:	4629      	mov	r1, r5
  406e1e:	4620      	mov	r0, r4
  406e20:	f002 ff16 	bl	409c50 <__ssprint_r>
  406e24:	2800      	cmp	r0, #0
  406e26:	f47f af7d 	bne.w	406d24 <_svfprintf_r+0x1a4>
  406e2a:	f1ab 0b10 	sub.w	fp, fp, #16
  406e2e:	f1bb 0f10 	cmp.w	fp, #16
  406e32:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406e34:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406e36:	464b      	mov	r3, r9
  406e38:	dce6      	bgt.n	406e08 <_svfprintf_r+0x288>
  406e3a:	4645      	mov	r5, r8
  406e3c:	460c      	mov	r4, r1
  406e3e:	4698      	mov	r8, r3
  406e40:	3201      	adds	r2, #1
  406e42:	4ba9      	ldr	r3, [pc, #676]	; (4070e8 <_svfprintf_r+0x568>)
  406e44:	9226      	str	r2, [sp, #152]	; 0x98
  406e46:	445c      	add	r4, fp
  406e48:	2a07      	cmp	r2, #7
  406e4a:	9427      	str	r4, [sp, #156]	; 0x9c
  406e4c:	e888 0808 	stmia.w	r8, {r3, fp}
  406e50:	f300 8498 	bgt.w	407784 <_svfprintf_r+0xc04>
  406e54:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406e58:	f108 0808 	add.w	r8, r8, #8
  406e5c:	b177      	cbz	r7, 406e7c <_svfprintf_r+0x2fc>
  406e5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e60:	3301      	adds	r3, #1
  406e62:	3401      	adds	r4, #1
  406e64:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  406e68:	2201      	movs	r2, #1
  406e6a:	2b07      	cmp	r3, #7
  406e6c:	9427      	str	r4, [sp, #156]	; 0x9c
  406e6e:	9326      	str	r3, [sp, #152]	; 0x98
  406e70:	e888 0006 	stmia.w	r8, {r1, r2}
  406e74:	f300 83db 	bgt.w	40762e <_svfprintf_r+0xaae>
  406e78:	f108 0808 	add.w	r8, r8, #8
  406e7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406e7e:	b16b      	cbz	r3, 406e9c <_svfprintf_r+0x31c>
  406e80:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e82:	3301      	adds	r3, #1
  406e84:	3402      	adds	r4, #2
  406e86:	a91e      	add	r1, sp, #120	; 0x78
  406e88:	2202      	movs	r2, #2
  406e8a:	2b07      	cmp	r3, #7
  406e8c:	9427      	str	r4, [sp, #156]	; 0x9c
  406e8e:	9326      	str	r3, [sp, #152]	; 0x98
  406e90:	e888 0006 	stmia.w	r8, {r1, r2}
  406e94:	f300 83d6 	bgt.w	407644 <_svfprintf_r+0xac4>
  406e98:	f108 0808 	add.w	r8, r8, #8
  406e9c:	2d80      	cmp	r5, #128	; 0x80
  406e9e:	f000 8315 	beq.w	4074cc <_svfprintf_r+0x94c>
  406ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406ea6:	1a9f      	subs	r7, r3, r2
  406ea8:	2f00      	cmp	r7, #0
  406eaa:	dd36      	ble.n	406f1a <_svfprintf_r+0x39a>
  406eac:	2f10      	cmp	r7, #16
  406eae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406eb0:	4d8e      	ldr	r5, [pc, #568]	; (4070ec <_svfprintf_r+0x56c>)
  406eb2:	dd27      	ble.n	406f04 <_svfprintf_r+0x384>
  406eb4:	4642      	mov	r2, r8
  406eb6:	4621      	mov	r1, r4
  406eb8:	46b0      	mov	r8, r6
  406eba:	f04f 0b10 	mov.w	fp, #16
  406ebe:	462e      	mov	r6, r5
  406ec0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406ec2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406ec4:	e004      	b.n	406ed0 <_svfprintf_r+0x350>
  406ec6:	3f10      	subs	r7, #16
  406ec8:	2f10      	cmp	r7, #16
  406eca:	f102 0208 	add.w	r2, r2, #8
  406ece:	dd15      	ble.n	406efc <_svfprintf_r+0x37c>
  406ed0:	3301      	adds	r3, #1
  406ed2:	3110      	adds	r1, #16
  406ed4:	2b07      	cmp	r3, #7
  406ed6:	9127      	str	r1, [sp, #156]	; 0x9c
  406ed8:	9326      	str	r3, [sp, #152]	; 0x98
  406eda:	e882 0840 	stmia.w	r2, {r6, fp}
  406ede:	ddf2      	ble.n	406ec6 <_svfprintf_r+0x346>
  406ee0:	aa25      	add	r2, sp, #148	; 0x94
  406ee2:	4629      	mov	r1, r5
  406ee4:	4620      	mov	r0, r4
  406ee6:	f002 feb3 	bl	409c50 <__ssprint_r>
  406eea:	2800      	cmp	r0, #0
  406eec:	f47f af1a 	bne.w	406d24 <_svfprintf_r+0x1a4>
  406ef0:	3f10      	subs	r7, #16
  406ef2:	2f10      	cmp	r7, #16
  406ef4:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406ef6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406ef8:	464a      	mov	r2, r9
  406efa:	dce9      	bgt.n	406ed0 <_svfprintf_r+0x350>
  406efc:	4635      	mov	r5, r6
  406efe:	460c      	mov	r4, r1
  406f00:	4646      	mov	r6, r8
  406f02:	4690      	mov	r8, r2
  406f04:	3301      	adds	r3, #1
  406f06:	443c      	add	r4, r7
  406f08:	2b07      	cmp	r3, #7
  406f0a:	9427      	str	r4, [sp, #156]	; 0x9c
  406f0c:	9326      	str	r3, [sp, #152]	; 0x98
  406f0e:	e888 00a0 	stmia.w	r8, {r5, r7}
  406f12:	f300 8381 	bgt.w	407618 <_svfprintf_r+0xa98>
  406f16:	f108 0808 	add.w	r8, r8, #8
  406f1a:	9b07      	ldr	r3, [sp, #28]
  406f1c:	05df      	lsls	r7, r3, #23
  406f1e:	f100 8268 	bmi.w	4073f2 <_svfprintf_r+0x872>
  406f22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f24:	990e      	ldr	r1, [sp, #56]	; 0x38
  406f26:	f8c8 6000 	str.w	r6, [r8]
  406f2a:	3301      	adds	r3, #1
  406f2c:	440c      	add	r4, r1
  406f2e:	2b07      	cmp	r3, #7
  406f30:	9427      	str	r4, [sp, #156]	; 0x9c
  406f32:	f8c8 1004 	str.w	r1, [r8, #4]
  406f36:	9326      	str	r3, [sp, #152]	; 0x98
  406f38:	f300 834d 	bgt.w	4075d6 <_svfprintf_r+0xa56>
  406f3c:	f108 0808 	add.w	r8, r8, #8
  406f40:	9b07      	ldr	r3, [sp, #28]
  406f42:	075b      	lsls	r3, r3, #29
  406f44:	d53a      	bpl.n	406fbc <_svfprintf_r+0x43c>
  406f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406f48:	9a08      	ldr	r2, [sp, #32]
  406f4a:	1a9d      	subs	r5, r3, r2
  406f4c:	2d00      	cmp	r5, #0
  406f4e:	dd35      	ble.n	406fbc <_svfprintf_r+0x43c>
  406f50:	2d10      	cmp	r5, #16
  406f52:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f54:	dd20      	ble.n	406f98 <_svfprintf_r+0x418>
  406f56:	2610      	movs	r6, #16
  406f58:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406f5a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  406f5e:	e004      	b.n	406f6a <_svfprintf_r+0x3ea>
  406f60:	3d10      	subs	r5, #16
  406f62:	2d10      	cmp	r5, #16
  406f64:	f108 0808 	add.w	r8, r8, #8
  406f68:	dd16      	ble.n	406f98 <_svfprintf_r+0x418>
  406f6a:	3301      	adds	r3, #1
  406f6c:	4a5e      	ldr	r2, [pc, #376]	; (4070e8 <_svfprintf_r+0x568>)
  406f6e:	9326      	str	r3, [sp, #152]	; 0x98
  406f70:	3410      	adds	r4, #16
  406f72:	2b07      	cmp	r3, #7
  406f74:	9427      	str	r4, [sp, #156]	; 0x9c
  406f76:	e888 0044 	stmia.w	r8, {r2, r6}
  406f7a:	ddf1      	ble.n	406f60 <_svfprintf_r+0x3e0>
  406f7c:	aa25      	add	r2, sp, #148	; 0x94
  406f7e:	4659      	mov	r1, fp
  406f80:	4638      	mov	r0, r7
  406f82:	f002 fe65 	bl	409c50 <__ssprint_r>
  406f86:	2800      	cmp	r0, #0
  406f88:	f47f aecc 	bne.w	406d24 <_svfprintf_r+0x1a4>
  406f8c:	3d10      	subs	r5, #16
  406f8e:	2d10      	cmp	r5, #16
  406f90:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406f92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f94:	46c8      	mov	r8, r9
  406f96:	dce8      	bgt.n	406f6a <_svfprintf_r+0x3ea>
  406f98:	3301      	adds	r3, #1
  406f9a:	4a53      	ldr	r2, [pc, #332]	; (4070e8 <_svfprintf_r+0x568>)
  406f9c:	9326      	str	r3, [sp, #152]	; 0x98
  406f9e:	442c      	add	r4, r5
  406fa0:	2b07      	cmp	r3, #7
  406fa2:	9427      	str	r4, [sp, #156]	; 0x9c
  406fa4:	e888 0024 	stmia.w	r8, {r2, r5}
  406fa8:	dd08      	ble.n	406fbc <_svfprintf_r+0x43c>
  406faa:	aa25      	add	r2, sp, #148	; 0x94
  406fac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406fae:	980c      	ldr	r0, [sp, #48]	; 0x30
  406fb0:	f002 fe4e 	bl	409c50 <__ssprint_r>
  406fb4:	2800      	cmp	r0, #0
  406fb6:	f47f aeb5 	bne.w	406d24 <_svfprintf_r+0x1a4>
  406fba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406fbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406fc0:	9908      	ldr	r1, [sp, #32]
  406fc2:	428a      	cmp	r2, r1
  406fc4:	bfac      	ite	ge
  406fc6:	189b      	addge	r3, r3, r2
  406fc8:	185b      	addlt	r3, r3, r1
  406fca:	9309      	str	r3, [sp, #36]	; 0x24
  406fcc:	2c00      	cmp	r4, #0
  406fce:	f040 830d 	bne.w	4075ec <_svfprintf_r+0xa6c>
  406fd2:	2300      	movs	r3, #0
  406fd4:	9326      	str	r3, [sp, #152]	; 0x98
  406fd6:	46c8      	mov	r8, r9
  406fd8:	e5f9      	b.n	406bce <_svfprintf_r+0x4e>
  406fda:	9311      	str	r3, [sp, #68]	; 0x44
  406fdc:	f01b 0320 	ands.w	r3, fp, #32
  406fe0:	f040 81e3 	bne.w	4073aa <_svfprintf_r+0x82a>
  406fe4:	f01b 0210 	ands.w	r2, fp, #16
  406fe8:	f040 842e 	bne.w	407848 <_svfprintf_r+0xcc8>
  406fec:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  406ff0:	f000 842a 	beq.w	407848 <_svfprintf_r+0xcc8>
  406ff4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406ff6:	4613      	mov	r3, r2
  406ff8:	460a      	mov	r2, r1
  406ffa:	3204      	adds	r2, #4
  406ffc:	880c      	ldrh	r4, [r1, #0]
  406ffe:	920f      	str	r2, [sp, #60]	; 0x3c
  407000:	2500      	movs	r5, #0
  407002:	e6b0      	b.n	406d66 <_svfprintf_r+0x1e6>
  407004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407006:	9311      	str	r3, [sp, #68]	; 0x44
  407008:	6816      	ldr	r6, [r2, #0]
  40700a:	2400      	movs	r4, #0
  40700c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  407010:	1d15      	adds	r5, r2, #4
  407012:	2e00      	cmp	r6, #0
  407014:	f000 86a7 	beq.w	407d66 <_svfprintf_r+0x11e6>
  407018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40701a:	1c53      	adds	r3, r2, #1
  40701c:	f000 8609 	beq.w	407c32 <_svfprintf_r+0x10b2>
  407020:	4621      	mov	r1, r4
  407022:	4630      	mov	r0, r6
  407024:	f002 faac 	bl	409580 <memchr>
  407028:	2800      	cmp	r0, #0
  40702a:	f000 86e1 	beq.w	407df0 <_svfprintf_r+0x1270>
  40702e:	1b83      	subs	r3, r0, r6
  407030:	930e      	str	r3, [sp, #56]	; 0x38
  407032:	940a      	str	r4, [sp, #40]	; 0x28
  407034:	950f      	str	r5, [sp, #60]	; 0x3c
  407036:	f8cd b01c 	str.w	fp, [sp, #28]
  40703a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40703e:	9308      	str	r3, [sp, #32]
  407040:	9412      	str	r4, [sp, #72]	; 0x48
  407042:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407046:	e6b3      	b.n	406db0 <_svfprintf_r+0x230>
  407048:	f89a 3000 	ldrb.w	r3, [sl]
  40704c:	2201      	movs	r2, #1
  40704e:	212b      	movs	r1, #43	; 0x2b
  407050:	e5ee      	b.n	406c30 <_svfprintf_r+0xb0>
  407052:	f04b 0b20 	orr.w	fp, fp, #32
  407056:	f89a 3000 	ldrb.w	r3, [sl]
  40705a:	e5e9      	b.n	406c30 <_svfprintf_r+0xb0>
  40705c:	9311      	str	r3, [sp, #68]	; 0x44
  40705e:	2a00      	cmp	r2, #0
  407060:	f040 8795 	bne.w	407f8e <_svfprintf_r+0x140e>
  407064:	4b22      	ldr	r3, [pc, #136]	; (4070f0 <_svfprintf_r+0x570>)
  407066:	9318      	str	r3, [sp, #96]	; 0x60
  407068:	f01b 0f20 	tst.w	fp, #32
  40706c:	f040 8111 	bne.w	407292 <_svfprintf_r+0x712>
  407070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407072:	f01b 0f10 	tst.w	fp, #16
  407076:	4613      	mov	r3, r2
  407078:	f040 83e1 	bne.w	40783e <_svfprintf_r+0xcbe>
  40707c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407080:	f000 83dd 	beq.w	40783e <_svfprintf_r+0xcbe>
  407084:	3304      	adds	r3, #4
  407086:	8814      	ldrh	r4, [r2, #0]
  407088:	930f      	str	r3, [sp, #60]	; 0x3c
  40708a:	2500      	movs	r5, #0
  40708c:	f01b 0f01 	tst.w	fp, #1
  407090:	f000 810c 	beq.w	4072ac <_svfprintf_r+0x72c>
  407094:	ea54 0305 	orrs.w	r3, r4, r5
  407098:	f000 8108 	beq.w	4072ac <_svfprintf_r+0x72c>
  40709c:	2330      	movs	r3, #48	; 0x30
  40709e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4070a2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4070a6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4070aa:	f04b 0b02 	orr.w	fp, fp, #2
  4070ae:	2302      	movs	r3, #2
  4070b0:	e659      	b.n	406d66 <_svfprintf_r+0x1e6>
  4070b2:	f89a 3000 	ldrb.w	r3, [sl]
  4070b6:	2900      	cmp	r1, #0
  4070b8:	f47f adba 	bne.w	406c30 <_svfprintf_r+0xb0>
  4070bc:	2201      	movs	r2, #1
  4070be:	2120      	movs	r1, #32
  4070c0:	e5b6      	b.n	406c30 <_svfprintf_r+0xb0>
  4070c2:	f04b 0b01 	orr.w	fp, fp, #1
  4070c6:	f89a 3000 	ldrb.w	r3, [sl]
  4070ca:	e5b1      	b.n	406c30 <_svfprintf_r+0xb0>
  4070cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4070ce:	6823      	ldr	r3, [r4, #0]
  4070d0:	930d      	str	r3, [sp, #52]	; 0x34
  4070d2:	4618      	mov	r0, r3
  4070d4:	2800      	cmp	r0, #0
  4070d6:	4623      	mov	r3, r4
  4070d8:	f103 0304 	add.w	r3, r3, #4
  4070dc:	f6ff ae0a 	blt.w	406cf4 <_svfprintf_r+0x174>
  4070e0:	930f      	str	r3, [sp, #60]	; 0x3c
  4070e2:	f89a 3000 	ldrb.w	r3, [sl]
  4070e6:	e5a3      	b.n	406c30 <_svfprintf_r+0xb0>
  4070e8:	0040b6bc 	.word	0x0040b6bc
  4070ec:	0040b6cc 	.word	0x0040b6cc
  4070f0:	0040b69c 	.word	0x0040b69c
  4070f4:	f04b 0b10 	orr.w	fp, fp, #16
  4070f8:	f01b 0f20 	tst.w	fp, #32
  4070fc:	9311      	str	r3, [sp, #68]	; 0x44
  4070fe:	f43f ae23 	beq.w	406d48 <_svfprintf_r+0x1c8>
  407102:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407104:	3507      	adds	r5, #7
  407106:	f025 0307 	bic.w	r3, r5, #7
  40710a:	f103 0208 	add.w	r2, r3, #8
  40710e:	e9d3 4500 	ldrd	r4, r5, [r3]
  407112:	920f      	str	r2, [sp, #60]	; 0x3c
  407114:	2301      	movs	r3, #1
  407116:	e626      	b.n	406d66 <_svfprintf_r+0x1e6>
  407118:	f89a 3000 	ldrb.w	r3, [sl]
  40711c:	2b2a      	cmp	r3, #42	; 0x2a
  40711e:	f10a 0401 	add.w	r4, sl, #1
  407122:	f000 8727 	beq.w	407f74 <_svfprintf_r+0x13f4>
  407126:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40712a:	2809      	cmp	r0, #9
  40712c:	46a2      	mov	sl, r4
  40712e:	f200 86ad 	bhi.w	407e8c <_svfprintf_r+0x130c>
  407132:	2300      	movs	r3, #0
  407134:	461c      	mov	r4, r3
  407136:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40713a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40713e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407142:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407146:	2809      	cmp	r0, #9
  407148:	d9f5      	bls.n	407136 <_svfprintf_r+0x5b6>
  40714a:	940a      	str	r4, [sp, #40]	; 0x28
  40714c:	e572      	b.n	406c34 <_svfprintf_r+0xb4>
  40714e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  407152:	f89a 3000 	ldrb.w	r3, [sl]
  407156:	e56b      	b.n	406c30 <_svfprintf_r+0xb0>
  407158:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40715c:	f89a 3000 	ldrb.w	r3, [sl]
  407160:	e566      	b.n	406c30 <_svfprintf_r+0xb0>
  407162:	f89a 3000 	ldrb.w	r3, [sl]
  407166:	2b6c      	cmp	r3, #108	; 0x6c
  407168:	bf03      	ittte	eq
  40716a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40716e:	f04b 0b20 	orreq.w	fp, fp, #32
  407172:	f10a 0a01 	addeq.w	sl, sl, #1
  407176:	f04b 0b10 	orrne.w	fp, fp, #16
  40717a:	e559      	b.n	406c30 <_svfprintf_r+0xb0>
  40717c:	2a00      	cmp	r2, #0
  40717e:	f040 8711 	bne.w	407fa4 <_svfprintf_r+0x1424>
  407182:	f01b 0f20 	tst.w	fp, #32
  407186:	f040 84f9 	bne.w	407b7c <_svfprintf_r+0xffc>
  40718a:	f01b 0f10 	tst.w	fp, #16
  40718e:	f040 84ac 	bne.w	407aea <_svfprintf_r+0xf6a>
  407192:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407196:	f000 84a8 	beq.w	407aea <_svfprintf_r+0xf6a>
  40719a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40719c:	6813      	ldr	r3, [r2, #0]
  40719e:	3204      	adds	r2, #4
  4071a0:	920f      	str	r2, [sp, #60]	; 0x3c
  4071a2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4071a6:	801a      	strh	r2, [r3, #0]
  4071a8:	e511      	b.n	406bce <_svfprintf_r+0x4e>
  4071aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4071ac:	4bb3      	ldr	r3, [pc, #716]	; (40747c <_svfprintf_r+0x8fc>)
  4071ae:	680c      	ldr	r4, [r1, #0]
  4071b0:	9318      	str	r3, [sp, #96]	; 0x60
  4071b2:	2230      	movs	r2, #48	; 0x30
  4071b4:	2378      	movs	r3, #120	; 0x78
  4071b6:	3104      	adds	r1, #4
  4071b8:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4071bc:	9311      	str	r3, [sp, #68]	; 0x44
  4071be:	f04b 0b02 	orr.w	fp, fp, #2
  4071c2:	910f      	str	r1, [sp, #60]	; 0x3c
  4071c4:	2500      	movs	r5, #0
  4071c6:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4071ca:	2302      	movs	r3, #2
  4071cc:	e5cb      	b.n	406d66 <_svfprintf_r+0x1e6>
  4071ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4071d0:	9311      	str	r3, [sp, #68]	; 0x44
  4071d2:	680a      	ldr	r2, [r1, #0]
  4071d4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4071d8:	2300      	movs	r3, #0
  4071da:	460a      	mov	r2, r1
  4071dc:	461f      	mov	r7, r3
  4071de:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4071e2:	3204      	adds	r2, #4
  4071e4:	2301      	movs	r3, #1
  4071e6:	9308      	str	r3, [sp, #32]
  4071e8:	f8cd b01c 	str.w	fp, [sp, #28]
  4071ec:	970a      	str	r7, [sp, #40]	; 0x28
  4071ee:	9712      	str	r7, [sp, #72]	; 0x48
  4071f0:	920f      	str	r2, [sp, #60]	; 0x3c
  4071f2:	930e      	str	r3, [sp, #56]	; 0x38
  4071f4:	ae28      	add	r6, sp, #160	; 0xa0
  4071f6:	e5df      	b.n	406db8 <_svfprintf_r+0x238>
  4071f8:	9311      	str	r3, [sp, #68]	; 0x44
  4071fa:	2a00      	cmp	r2, #0
  4071fc:	f040 86ea 	bne.w	407fd4 <_svfprintf_r+0x1454>
  407200:	f01b 0f20 	tst.w	fp, #32
  407204:	d15d      	bne.n	4072c2 <_svfprintf_r+0x742>
  407206:	f01b 0f10 	tst.w	fp, #16
  40720a:	f040 8308 	bne.w	40781e <_svfprintf_r+0xc9e>
  40720e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407212:	f000 8304 	beq.w	40781e <_svfprintf_r+0xc9e>
  407216:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407218:	f9b1 4000 	ldrsh.w	r4, [r1]
  40721c:	3104      	adds	r1, #4
  40721e:	17e5      	asrs	r5, r4, #31
  407220:	4622      	mov	r2, r4
  407222:	462b      	mov	r3, r5
  407224:	910f      	str	r1, [sp, #60]	; 0x3c
  407226:	2a00      	cmp	r2, #0
  407228:	f173 0300 	sbcs.w	r3, r3, #0
  40722c:	db58      	blt.n	4072e0 <_svfprintf_r+0x760>
  40722e:	990a      	ldr	r1, [sp, #40]	; 0x28
  407230:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407234:	1c4a      	adds	r2, r1, #1
  407236:	f04f 0301 	mov.w	r3, #1
  40723a:	f47f ad9b 	bne.w	406d74 <_svfprintf_r+0x1f4>
  40723e:	ea54 0205 	orrs.w	r2, r4, r5
  407242:	f000 81df 	beq.w	407604 <_svfprintf_r+0xa84>
  407246:	f8cd b01c 	str.w	fp, [sp, #28]
  40724a:	2b01      	cmp	r3, #1
  40724c:	f000 827b 	beq.w	407746 <_svfprintf_r+0xbc6>
  407250:	2b02      	cmp	r3, #2
  407252:	f040 8206 	bne.w	407662 <_svfprintf_r+0xae2>
  407256:	9818      	ldr	r0, [sp, #96]	; 0x60
  407258:	464e      	mov	r6, r9
  40725a:	0923      	lsrs	r3, r4, #4
  40725c:	f004 010f 	and.w	r1, r4, #15
  407260:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407264:	092a      	lsrs	r2, r5, #4
  407266:	461c      	mov	r4, r3
  407268:	4615      	mov	r5, r2
  40726a:	5c43      	ldrb	r3, [r0, r1]
  40726c:	f806 3d01 	strb.w	r3, [r6, #-1]!
  407270:	ea54 0305 	orrs.w	r3, r4, r5
  407274:	d1f1      	bne.n	40725a <_svfprintf_r+0x6da>
  407276:	eba9 0306 	sub.w	r3, r9, r6
  40727a:	930e      	str	r3, [sp, #56]	; 0x38
  40727c:	e590      	b.n	406da0 <_svfprintf_r+0x220>
  40727e:	9311      	str	r3, [sp, #68]	; 0x44
  407280:	2a00      	cmp	r2, #0
  407282:	f040 86a3 	bne.w	407fcc <_svfprintf_r+0x144c>
  407286:	4b7e      	ldr	r3, [pc, #504]	; (407480 <_svfprintf_r+0x900>)
  407288:	9318      	str	r3, [sp, #96]	; 0x60
  40728a:	f01b 0f20 	tst.w	fp, #32
  40728e:	f43f aeef 	beq.w	407070 <_svfprintf_r+0x4f0>
  407292:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407294:	3507      	adds	r5, #7
  407296:	f025 0307 	bic.w	r3, r5, #7
  40729a:	f103 0208 	add.w	r2, r3, #8
  40729e:	f01b 0f01 	tst.w	fp, #1
  4072a2:	920f      	str	r2, [sp, #60]	; 0x3c
  4072a4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4072a8:	f47f aef4 	bne.w	407094 <_svfprintf_r+0x514>
  4072ac:	2302      	movs	r3, #2
  4072ae:	e55a      	b.n	406d66 <_svfprintf_r+0x1e6>
  4072b0:	9311      	str	r3, [sp, #68]	; 0x44
  4072b2:	2a00      	cmp	r2, #0
  4072b4:	f040 8686 	bne.w	407fc4 <_svfprintf_r+0x1444>
  4072b8:	f04b 0b10 	orr.w	fp, fp, #16
  4072bc:	f01b 0f20 	tst.w	fp, #32
  4072c0:	d0a1      	beq.n	407206 <_svfprintf_r+0x686>
  4072c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4072c4:	3507      	adds	r5, #7
  4072c6:	f025 0507 	bic.w	r5, r5, #7
  4072ca:	e9d5 2300 	ldrd	r2, r3, [r5]
  4072ce:	2a00      	cmp	r2, #0
  4072d0:	f105 0108 	add.w	r1, r5, #8
  4072d4:	461d      	mov	r5, r3
  4072d6:	f173 0300 	sbcs.w	r3, r3, #0
  4072da:	910f      	str	r1, [sp, #60]	; 0x3c
  4072dc:	4614      	mov	r4, r2
  4072de:	daa6      	bge.n	40722e <_svfprintf_r+0x6ae>
  4072e0:	272d      	movs	r7, #45	; 0x2d
  4072e2:	4264      	negs	r4, r4
  4072e4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4072e8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4072ec:	2301      	movs	r3, #1
  4072ee:	e53d      	b.n	406d6c <_svfprintf_r+0x1ec>
  4072f0:	9311      	str	r3, [sp, #68]	; 0x44
  4072f2:	2a00      	cmp	r2, #0
  4072f4:	f040 8662 	bne.w	407fbc <_svfprintf_r+0x143c>
  4072f8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4072fa:	3507      	adds	r5, #7
  4072fc:	f025 0307 	bic.w	r3, r5, #7
  407300:	f103 0208 	add.w	r2, r3, #8
  407304:	920f      	str	r2, [sp, #60]	; 0x3c
  407306:	681a      	ldr	r2, [r3, #0]
  407308:	9215      	str	r2, [sp, #84]	; 0x54
  40730a:	685b      	ldr	r3, [r3, #4]
  40730c:	9314      	str	r3, [sp, #80]	; 0x50
  40730e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407310:	9d15      	ldr	r5, [sp, #84]	; 0x54
  407312:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  407316:	4628      	mov	r0, r5
  407318:	4621      	mov	r1, r4
  40731a:	f04f 32ff 	mov.w	r2, #4294967295
  40731e:	4b59      	ldr	r3, [pc, #356]	; (407484 <_svfprintf_r+0x904>)
  407320:	f003 fd5c 	bl	40addc <__aeabi_dcmpun>
  407324:	2800      	cmp	r0, #0
  407326:	f040 834a 	bne.w	4079be <_svfprintf_r+0xe3e>
  40732a:	4628      	mov	r0, r5
  40732c:	4621      	mov	r1, r4
  40732e:	f04f 32ff 	mov.w	r2, #4294967295
  407332:	4b54      	ldr	r3, [pc, #336]	; (407484 <_svfprintf_r+0x904>)
  407334:	f003 fd34 	bl	40ada0 <__aeabi_dcmple>
  407338:	2800      	cmp	r0, #0
  40733a:	f040 8340 	bne.w	4079be <_svfprintf_r+0xe3e>
  40733e:	a815      	add	r0, sp, #84	; 0x54
  407340:	c80d      	ldmia	r0, {r0, r2, r3}
  407342:	9914      	ldr	r1, [sp, #80]	; 0x50
  407344:	f003 fd22 	bl	40ad8c <__aeabi_dcmplt>
  407348:	2800      	cmp	r0, #0
  40734a:	f040 8530 	bne.w	407dae <_svfprintf_r+0x122e>
  40734e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407352:	4e4d      	ldr	r6, [pc, #308]	; (407488 <_svfprintf_r+0x908>)
  407354:	4b4d      	ldr	r3, [pc, #308]	; (40748c <_svfprintf_r+0x90c>)
  407356:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40735a:	9007      	str	r0, [sp, #28]
  40735c:	9811      	ldr	r0, [sp, #68]	; 0x44
  40735e:	2203      	movs	r2, #3
  407360:	2100      	movs	r1, #0
  407362:	9208      	str	r2, [sp, #32]
  407364:	910a      	str	r1, [sp, #40]	; 0x28
  407366:	2847      	cmp	r0, #71	; 0x47
  407368:	bfd8      	it	le
  40736a:	461e      	movle	r6, r3
  40736c:	920e      	str	r2, [sp, #56]	; 0x38
  40736e:	9112      	str	r1, [sp, #72]	; 0x48
  407370:	e51e      	b.n	406db0 <_svfprintf_r+0x230>
  407372:	f04b 0b08 	orr.w	fp, fp, #8
  407376:	f89a 3000 	ldrb.w	r3, [sl]
  40737a:	e459      	b.n	406c30 <_svfprintf_r+0xb0>
  40737c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407380:	2300      	movs	r3, #0
  407382:	461c      	mov	r4, r3
  407384:	f81a 3b01 	ldrb.w	r3, [sl], #1
  407388:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40738c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407390:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407394:	2809      	cmp	r0, #9
  407396:	d9f5      	bls.n	407384 <_svfprintf_r+0x804>
  407398:	940d      	str	r4, [sp, #52]	; 0x34
  40739a:	e44b      	b.n	406c34 <_svfprintf_r+0xb4>
  40739c:	f04b 0b10 	orr.w	fp, fp, #16
  4073a0:	9311      	str	r3, [sp, #68]	; 0x44
  4073a2:	f01b 0320 	ands.w	r3, fp, #32
  4073a6:	f43f ae1d 	beq.w	406fe4 <_svfprintf_r+0x464>
  4073aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4073ac:	3507      	adds	r5, #7
  4073ae:	f025 0307 	bic.w	r3, r5, #7
  4073b2:	f103 0208 	add.w	r2, r3, #8
  4073b6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4073ba:	920f      	str	r2, [sp, #60]	; 0x3c
  4073bc:	2300      	movs	r3, #0
  4073be:	e4d2      	b.n	406d66 <_svfprintf_r+0x1e6>
  4073c0:	9311      	str	r3, [sp, #68]	; 0x44
  4073c2:	2a00      	cmp	r2, #0
  4073c4:	f040 85e7 	bne.w	407f96 <_svfprintf_r+0x1416>
  4073c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4073ca:	2a00      	cmp	r2, #0
  4073cc:	f43f aca3 	beq.w	406d16 <_svfprintf_r+0x196>
  4073d0:	2300      	movs	r3, #0
  4073d2:	2101      	movs	r1, #1
  4073d4:	461f      	mov	r7, r3
  4073d6:	9108      	str	r1, [sp, #32]
  4073d8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4073dc:	f8cd b01c 	str.w	fp, [sp, #28]
  4073e0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4073e4:	930a      	str	r3, [sp, #40]	; 0x28
  4073e6:	9312      	str	r3, [sp, #72]	; 0x48
  4073e8:	910e      	str	r1, [sp, #56]	; 0x38
  4073ea:	ae28      	add	r6, sp, #160	; 0xa0
  4073ec:	e4e4      	b.n	406db8 <_svfprintf_r+0x238>
  4073ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4073f0:	e534      	b.n	406e5c <_svfprintf_r+0x2dc>
  4073f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4073f4:	2b65      	cmp	r3, #101	; 0x65
  4073f6:	f340 80a7 	ble.w	407548 <_svfprintf_r+0x9c8>
  4073fa:	a815      	add	r0, sp, #84	; 0x54
  4073fc:	c80d      	ldmia	r0, {r0, r2, r3}
  4073fe:	9914      	ldr	r1, [sp, #80]	; 0x50
  407400:	f003 fcba 	bl	40ad78 <__aeabi_dcmpeq>
  407404:	2800      	cmp	r0, #0
  407406:	f000 8150 	beq.w	4076aa <_svfprintf_r+0xb2a>
  40740a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40740c:	4a20      	ldr	r2, [pc, #128]	; (407490 <_svfprintf_r+0x910>)
  40740e:	f8c8 2000 	str.w	r2, [r8]
  407412:	3301      	adds	r3, #1
  407414:	3401      	adds	r4, #1
  407416:	2201      	movs	r2, #1
  407418:	2b07      	cmp	r3, #7
  40741a:	9427      	str	r4, [sp, #156]	; 0x9c
  40741c:	9326      	str	r3, [sp, #152]	; 0x98
  40741e:	f8c8 2004 	str.w	r2, [r8, #4]
  407422:	f300 836a 	bgt.w	407afa <_svfprintf_r+0xf7a>
  407426:	f108 0808 	add.w	r8, r8, #8
  40742a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40742c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40742e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407430:	4293      	cmp	r3, r2
  407432:	db03      	blt.n	40743c <_svfprintf_r+0x8bc>
  407434:	9b07      	ldr	r3, [sp, #28]
  407436:	07dd      	lsls	r5, r3, #31
  407438:	f57f ad82 	bpl.w	406f40 <_svfprintf_r+0x3c0>
  40743c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40743e:	9919      	ldr	r1, [sp, #100]	; 0x64
  407440:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407442:	f8c8 2000 	str.w	r2, [r8]
  407446:	3301      	adds	r3, #1
  407448:	440c      	add	r4, r1
  40744a:	2b07      	cmp	r3, #7
  40744c:	f8c8 1004 	str.w	r1, [r8, #4]
  407450:	9427      	str	r4, [sp, #156]	; 0x9c
  407452:	9326      	str	r3, [sp, #152]	; 0x98
  407454:	f300 839e 	bgt.w	407b94 <_svfprintf_r+0x1014>
  407458:	f108 0808 	add.w	r8, r8, #8
  40745c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40745e:	1e5e      	subs	r6, r3, #1
  407460:	2e00      	cmp	r6, #0
  407462:	f77f ad6d 	ble.w	406f40 <_svfprintf_r+0x3c0>
  407466:	2e10      	cmp	r6, #16
  407468:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40746a:	4d0a      	ldr	r5, [pc, #40]	; (407494 <_svfprintf_r+0x914>)
  40746c:	f340 81f5 	ble.w	40785a <_svfprintf_r+0xcda>
  407470:	4622      	mov	r2, r4
  407472:	2710      	movs	r7, #16
  407474:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407478:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40747a:	e013      	b.n	4074a4 <_svfprintf_r+0x924>
  40747c:	0040b69c 	.word	0x0040b69c
  407480:	0040b688 	.word	0x0040b688
  407484:	7fefffff 	.word	0x7fefffff
  407488:	0040b67c 	.word	0x0040b67c
  40748c:	0040b678 	.word	0x0040b678
  407490:	0040b6b8 	.word	0x0040b6b8
  407494:	0040b6cc 	.word	0x0040b6cc
  407498:	f108 0808 	add.w	r8, r8, #8
  40749c:	3e10      	subs	r6, #16
  40749e:	2e10      	cmp	r6, #16
  4074a0:	f340 81da 	ble.w	407858 <_svfprintf_r+0xcd8>
  4074a4:	3301      	adds	r3, #1
  4074a6:	3210      	adds	r2, #16
  4074a8:	2b07      	cmp	r3, #7
  4074aa:	9227      	str	r2, [sp, #156]	; 0x9c
  4074ac:	9326      	str	r3, [sp, #152]	; 0x98
  4074ae:	e888 00a0 	stmia.w	r8, {r5, r7}
  4074b2:	ddf1      	ble.n	407498 <_svfprintf_r+0x918>
  4074b4:	aa25      	add	r2, sp, #148	; 0x94
  4074b6:	4621      	mov	r1, r4
  4074b8:	4658      	mov	r0, fp
  4074ba:	f002 fbc9 	bl	409c50 <__ssprint_r>
  4074be:	2800      	cmp	r0, #0
  4074c0:	f47f ac30 	bne.w	406d24 <_svfprintf_r+0x1a4>
  4074c4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4074c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4074c8:	46c8      	mov	r8, r9
  4074ca:	e7e7      	b.n	40749c <_svfprintf_r+0x91c>
  4074cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4074ce:	9a08      	ldr	r2, [sp, #32]
  4074d0:	1a9f      	subs	r7, r3, r2
  4074d2:	2f00      	cmp	r7, #0
  4074d4:	f77f ace5 	ble.w	406ea2 <_svfprintf_r+0x322>
  4074d8:	2f10      	cmp	r7, #16
  4074da:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4074dc:	4db6      	ldr	r5, [pc, #728]	; (4077b8 <_svfprintf_r+0xc38>)
  4074de:	dd27      	ble.n	407530 <_svfprintf_r+0x9b0>
  4074e0:	4642      	mov	r2, r8
  4074e2:	4621      	mov	r1, r4
  4074e4:	46b0      	mov	r8, r6
  4074e6:	f04f 0b10 	mov.w	fp, #16
  4074ea:	462e      	mov	r6, r5
  4074ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4074ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4074f0:	e004      	b.n	4074fc <_svfprintf_r+0x97c>
  4074f2:	3f10      	subs	r7, #16
  4074f4:	2f10      	cmp	r7, #16
  4074f6:	f102 0208 	add.w	r2, r2, #8
  4074fa:	dd15      	ble.n	407528 <_svfprintf_r+0x9a8>
  4074fc:	3301      	adds	r3, #1
  4074fe:	3110      	adds	r1, #16
  407500:	2b07      	cmp	r3, #7
  407502:	9127      	str	r1, [sp, #156]	; 0x9c
  407504:	9326      	str	r3, [sp, #152]	; 0x98
  407506:	e882 0840 	stmia.w	r2, {r6, fp}
  40750a:	ddf2      	ble.n	4074f2 <_svfprintf_r+0x972>
  40750c:	aa25      	add	r2, sp, #148	; 0x94
  40750e:	4629      	mov	r1, r5
  407510:	4620      	mov	r0, r4
  407512:	f002 fb9d 	bl	409c50 <__ssprint_r>
  407516:	2800      	cmp	r0, #0
  407518:	f47f ac04 	bne.w	406d24 <_svfprintf_r+0x1a4>
  40751c:	3f10      	subs	r7, #16
  40751e:	2f10      	cmp	r7, #16
  407520:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407522:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407524:	464a      	mov	r2, r9
  407526:	dce9      	bgt.n	4074fc <_svfprintf_r+0x97c>
  407528:	4635      	mov	r5, r6
  40752a:	460c      	mov	r4, r1
  40752c:	4646      	mov	r6, r8
  40752e:	4690      	mov	r8, r2
  407530:	3301      	adds	r3, #1
  407532:	443c      	add	r4, r7
  407534:	2b07      	cmp	r3, #7
  407536:	9427      	str	r4, [sp, #156]	; 0x9c
  407538:	9326      	str	r3, [sp, #152]	; 0x98
  40753a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40753e:	f300 8232 	bgt.w	4079a6 <_svfprintf_r+0xe26>
  407542:	f108 0808 	add.w	r8, r8, #8
  407546:	e4ac      	b.n	406ea2 <_svfprintf_r+0x322>
  407548:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40754a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40754c:	2b01      	cmp	r3, #1
  40754e:	f340 81fe 	ble.w	40794e <_svfprintf_r+0xdce>
  407552:	3701      	adds	r7, #1
  407554:	3401      	adds	r4, #1
  407556:	2301      	movs	r3, #1
  407558:	2f07      	cmp	r7, #7
  40755a:	9427      	str	r4, [sp, #156]	; 0x9c
  40755c:	9726      	str	r7, [sp, #152]	; 0x98
  40755e:	f8c8 6000 	str.w	r6, [r8]
  407562:	f8c8 3004 	str.w	r3, [r8, #4]
  407566:	f300 8203 	bgt.w	407970 <_svfprintf_r+0xdf0>
  40756a:	f108 0808 	add.w	r8, r8, #8
  40756e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407570:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  407572:	f8c8 3000 	str.w	r3, [r8]
  407576:	3701      	adds	r7, #1
  407578:	4414      	add	r4, r2
  40757a:	2f07      	cmp	r7, #7
  40757c:	9427      	str	r4, [sp, #156]	; 0x9c
  40757e:	9726      	str	r7, [sp, #152]	; 0x98
  407580:	f8c8 2004 	str.w	r2, [r8, #4]
  407584:	f300 8200 	bgt.w	407988 <_svfprintf_r+0xe08>
  407588:	f108 0808 	add.w	r8, r8, #8
  40758c:	a815      	add	r0, sp, #84	; 0x54
  40758e:	c80d      	ldmia	r0, {r0, r2, r3}
  407590:	9914      	ldr	r1, [sp, #80]	; 0x50
  407592:	f003 fbf1 	bl	40ad78 <__aeabi_dcmpeq>
  407596:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407598:	2800      	cmp	r0, #0
  40759a:	f040 8101 	bne.w	4077a0 <_svfprintf_r+0xc20>
  40759e:	3b01      	subs	r3, #1
  4075a0:	3701      	adds	r7, #1
  4075a2:	3601      	adds	r6, #1
  4075a4:	441c      	add	r4, r3
  4075a6:	2f07      	cmp	r7, #7
  4075a8:	9726      	str	r7, [sp, #152]	; 0x98
  4075aa:	9427      	str	r4, [sp, #156]	; 0x9c
  4075ac:	f8c8 6000 	str.w	r6, [r8]
  4075b0:	f8c8 3004 	str.w	r3, [r8, #4]
  4075b4:	f300 8127 	bgt.w	407806 <_svfprintf_r+0xc86>
  4075b8:	f108 0808 	add.w	r8, r8, #8
  4075bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4075be:	f8c8 2004 	str.w	r2, [r8, #4]
  4075c2:	3701      	adds	r7, #1
  4075c4:	4414      	add	r4, r2
  4075c6:	ab21      	add	r3, sp, #132	; 0x84
  4075c8:	2f07      	cmp	r7, #7
  4075ca:	9427      	str	r4, [sp, #156]	; 0x9c
  4075cc:	9726      	str	r7, [sp, #152]	; 0x98
  4075ce:	f8c8 3000 	str.w	r3, [r8]
  4075d2:	f77f acb3 	ble.w	406f3c <_svfprintf_r+0x3bc>
  4075d6:	aa25      	add	r2, sp, #148	; 0x94
  4075d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4075da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4075dc:	f002 fb38 	bl	409c50 <__ssprint_r>
  4075e0:	2800      	cmp	r0, #0
  4075e2:	f47f ab9f 	bne.w	406d24 <_svfprintf_r+0x1a4>
  4075e6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4075e8:	46c8      	mov	r8, r9
  4075ea:	e4a9      	b.n	406f40 <_svfprintf_r+0x3c0>
  4075ec:	aa25      	add	r2, sp, #148	; 0x94
  4075ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4075f0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4075f2:	f002 fb2d 	bl	409c50 <__ssprint_r>
  4075f6:	2800      	cmp	r0, #0
  4075f8:	f43f aceb 	beq.w	406fd2 <_svfprintf_r+0x452>
  4075fc:	f7ff bb92 	b.w	406d24 <_svfprintf_r+0x1a4>
  407600:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407604:	2b01      	cmp	r3, #1
  407606:	f000 8134 	beq.w	407872 <_svfprintf_r+0xcf2>
  40760a:	2b02      	cmp	r3, #2
  40760c:	d125      	bne.n	40765a <_svfprintf_r+0xada>
  40760e:	f8cd b01c 	str.w	fp, [sp, #28]
  407612:	2400      	movs	r4, #0
  407614:	2500      	movs	r5, #0
  407616:	e61e      	b.n	407256 <_svfprintf_r+0x6d6>
  407618:	aa25      	add	r2, sp, #148	; 0x94
  40761a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40761c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40761e:	f002 fb17 	bl	409c50 <__ssprint_r>
  407622:	2800      	cmp	r0, #0
  407624:	f47f ab7e 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407628:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40762a:	46c8      	mov	r8, r9
  40762c:	e475      	b.n	406f1a <_svfprintf_r+0x39a>
  40762e:	aa25      	add	r2, sp, #148	; 0x94
  407630:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407632:	980c      	ldr	r0, [sp, #48]	; 0x30
  407634:	f002 fb0c 	bl	409c50 <__ssprint_r>
  407638:	2800      	cmp	r0, #0
  40763a:	f47f ab73 	bne.w	406d24 <_svfprintf_r+0x1a4>
  40763e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407640:	46c8      	mov	r8, r9
  407642:	e41b      	b.n	406e7c <_svfprintf_r+0x2fc>
  407644:	aa25      	add	r2, sp, #148	; 0x94
  407646:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407648:	980c      	ldr	r0, [sp, #48]	; 0x30
  40764a:	f002 fb01 	bl	409c50 <__ssprint_r>
  40764e:	2800      	cmp	r0, #0
  407650:	f47f ab68 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407654:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407656:	46c8      	mov	r8, r9
  407658:	e420      	b.n	406e9c <_svfprintf_r+0x31c>
  40765a:	f8cd b01c 	str.w	fp, [sp, #28]
  40765e:	2400      	movs	r4, #0
  407660:	2500      	movs	r5, #0
  407662:	4649      	mov	r1, r9
  407664:	e000      	b.n	407668 <_svfprintf_r+0xae8>
  407666:	4631      	mov	r1, r6
  407668:	08e2      	lsrs	r2, r4, #3
  40766a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40766e:	08e8      	lsrs	r0, r5, #3
  407670:	f004 0307 	and.w	r3, r4, #7
  407674:	4605      	mov	r5, r0
  407676:	4614      	mov	r4, r2
  407678:	3330      	adds	r3, #48	; 0x30
  40767a:	ea54 0205 	orrs.w	r2, r4, r5
  40767e:	f801 3c01 	strb.w	r3, [r1, #-1]
  407682:	f101 36ff 	add.w	r6, r1, #4294967295
  407686:	d1ee      	bne.n	407666 <_svfprintf_r+0xae6>
  407688:	9a07      	ldr	r2, [sp, #28]
  40768a:	07d2      	lsls	r2, r2, #31
  40768c:	f57f adf3 	bpl.w	407276 <_svfprintf_r+0x6f6>
  407690:	2b30      	cmp	r3, #48	; 0x30
  407692:	f43f adf0 	beq.w	407276 <_svfprintf_r+0x6f6>
  407696:	3902      	subs	r1, #2
  407698:	2330      	movs	r3, #48	; 0x30
  40769a:	f806 3c01 	strb.w	r3, [r6, #-1]
  40769e:	eba9 0301 	sub.w	r3, r9, r1
  4076a2:	930e      	str	r3, [sp, #56]	; 0x38
  4076a4:	460e      	mov	r6, r1
  4076a6:	f7ff bb7b 	b.w	406da0 <_svfprintf_r+0x220>
  4076aa:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4076ac:	2900      	cmp	r1, #0
  4076ae:	f340 822e 	ble.w	407b0e <_svfprintf_r+0xf8e>
  4076b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4076b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4076b6:	4293      	cmp	r3, r2
  4076b8:	bfa8      	it	ge
  4076ba:	4613      	movge	r3, r2
  4076bc:	2b00      	cmp	r3, #0
  4076be:	461f      	mov	r7, r3
  4076c0:	dd0d      	ble.n	4076de <_svfprintf_r+0xb5e>
  4076c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4076c4:	f8c8 6000 	str.w	r6, [r8]
  4076c8:	3301      	adds	r3, #1
  4076ca:	443c      	add	r4, r7
  4076cc:	2b07      	cmp	r3, #7
  4076ce:	9427      	str	r4, [sp, #156]	; 0x9c
  4076d0:	f8c8 7004 	str.w	r7, [r8, #4]
  4076d4:	9326      	str	r3, [sp, #152]	; 0x98
  4076d6:	f300 831f 	bgt.w	407d18 <_svfprintf_r+0x1198>
  4076da:	f108 0808 	add.w	r8, r8, #8
  4076de:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4076e0:	2f00      	cmp	r7, #0
  4076e2:	bfa8      	it	ge
  4076e4:	1bdb      	subge	r3, r3, r7
  4076e6:	2b00      	cmp	r3, #0
  4076e8:	461f      	mov	r7, r3
  4076ea:	f340 80d6 	ble.w	40789a <_svfprintf_r+0xd1a>
  4076ee:	2f10      	cmp	r7, #16
  4076f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4076f2:	4d31      	ldr	r5, [pc, #196]	; (4077b8 <_svfprintf_r+0xc38>)
  4076f4:	f340 81ed 	ble.w	407ad2 <_svfprintf_r+0xf52>
  4076f8:	4642      	mov	r2, r8
  4076fa:	4621      	mov	r1, r4
  4076fc:	46b0      	mov	r8, r6
  4076fe:	f04f 0b10 	mov.w	fp, #16
  407702:	462e      	mov	r6, r5
  407704:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407706:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407708:	e004      	b.n	407714 <_svfprintf_r+0xb94>
  40770a:	3208      	adds	r2, #8
  40770c:	3f10      	subs	r7, #16
  40770e:	2f10      	cmp	r7, #16
  407710:	f340 81db 	ble.w	407aca <_svfprintf_r+0xf4a>
  407714:	3301      	adds	r3, #1
  407716:	3110      	adds	r1, #16
  407718:	2b07      	cmp	r3, #7
  40771a:	9127      	str	r1, [sp, #156]	; 0x9c
  40771c:	9326      	str	r3, [sp, #152]	; 0x98
  40771e:	e882 0840 	stmia.w	r2, {r6, fp}
  407722:	ddf2      	ble.n	40770a <_svfprintf_r+0xb8a>
  407724:	aa25      	add	r2, sp, #148	; 0x94
  407726:	4629      	mov	r1, r5
  407728:	4620      	mov	r0, r4
  40772a:	f002 fa91 	bl	409c50 <__ssprint_r>
  40772e:	2800      	cmp	r0, #0
  407730:	f47f aaf8 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407734:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407736:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407738:	464a      	mov	r2, r9
  40773a:	e7e7      	b.n	40770c <_svfprintf_r+0xb8c>
  40773c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40773e:	930e      	str	r3, [sp, #56]	; 0x38
  407740:	464e      	mov	r6, r9
  407742:	f7ff bb2d 	b.w	406da0 <_svfprintf_r+0x220>
  407746:	2d00      	cmp	r5, #0
  407748:	bf08      	it	eq
  40774a:	2c0a      	cmpeq	r4, #10
  40774c:	f0c0 808f 	bcc.w	40786e <_svfprintf_r+0xcee>
  407750:	464e      	mov	r6, r9
  407752:	4620      	mov	r0, r4
  407754:	4629      	mov	r1, r5
  407756:	220a      	movs	r2, #10
  407758:	2300      	movs	r3, #0
  40775a:	f7fe fea9 	bl	4064b0 <__aeabi_uldivmod>
  40775e:	3230      	adds	r2, #48	; 0x30
  407760:	f806 2d01 	strb.w	r2, [r6, #-1]!
  407764:	4620      	mov	r0, r4
  407766:	4629      	mov	r1, r5
  407768:	2300      	movs	r3, #0
  40776a:	220a      	movs	r2, #10
  40776c:	f7fe fea0 	bl	4064b0 <__aeabi_uldivmod>
  407770:	4604      	mov	r4, r0
  407772:	460d      	mov	r5, r1
  407774:	ea54 0305 	orrs.w	r3, r4, r5
  407778:	d1eb      	bne.n	407752 <_svfprintf_r+0xbd2>
  40777a:	eba9 0306 	sub.w	r3, r9, r6
  40777e:	930e      	str	r3, [sp, #56]	; 0x38
  407780:	f7ff bb0e 	b.w	406da0 <_svfprintf_r+0x220>
  407784:	aa25      	add	r2, sp, #148	; 0x94
  407786:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407788:	980c      	ldr	r0, [sp, #48]	; 0x30
  40778a:	f002 fa61 	bl	409c50 <__ssprint_r>
  40778e:	2800      	cmp	r0, #0
  407790:	f47f aac8 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407794:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407798:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40779a:	46c8      	mov	r8, r9
  40779c:	f7ff bb5e 	b.w	406e5c <_svfprintf_r+0x2dc>
  4077a0:	1e5e      	subs	r6, r3, #1
  4077a2:	2e00      	cmp	r6, #0
  4077a4:	f77f af0a 	ble.w	4075bc <_svfprintf_r+0xa3c>
  4077a8:	2e10      	cmp	r6, #16
  4077aa:	4d03      	ldr	r5, [pc, #12]	; (4077b8 <_svfprintf_r+0xc38>)
  4077ac:	dd22      	ble.n	4077f4 <_svfprintf_r+0xc74>
  4077ae:	4622      	mov	r2, r4
  4077b0:	f04f 0b10 	mov.w	fp, #16
  4077b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4077b6:	e006      	b.n	4077c6 <_svfprintf_r+0xc46>
  4077b8:	0040b6cc 	.word	0x0040b6cc
  4077bc:	3e10      	subs	r6, #16
  4077be:	2e10      	cmp	r6, #16
  4077c0:	f108 0808 	add.w	r8, r8, #8
  4077c4:	dd15      	ble.n	4077f2 <_svfprintf_r+0xc72>
  4077c6:	3701      	adds	r7, #1
  4077c8:	3210      	adds	r2, #16
  4077ca:	2f07      	cmp	r7, #7
  4077cc:	9227      	str	r2, [sp, #156]	; 0x9c
  4077ce:	9726      	str	r7, [sp, #152]	; 0x98
  4077d0:	e888 0820 	stmia.w	r8, {r5, fp}
  4077d4:	ddf2      	ble.n	4077bc <_svfprintf_r+0xc3c>
  4077d6:	aa25      	add	r2, sp, #148	; 0x94
  4077d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4077da:	4620      	mov	r0, r4
  4077dc:	f002 fa38 	bl	409c50 <__ssprint_r>
  4077e0:	2800      	cmp	r0, #0
  4077e2:	f47f aa9f 	bne.w	406d24 <_svfprintf_r+0x1a4>
  4077e6:	3e10      	subs	r6, #16
  4077e8:	2e10      	cmp	r6, #16
  4077ea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4077ec:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4077ee:	46c8      	mov	r8, r9
  4077f0:	dce9      	bgt.n	4077c6 <_svfprintf_r+0xc46>
  4077f2:	4614      	mov	r4, r2
  4077f4:	3701      	adds	r7, #1
  4077f6:	4434      	add	r4, r6
  4077f8:	2f07      	cmp	r7, #7
  4077fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4077fc:	9726      	str	r7, [sp, #152]	; 0x98
  4077fe:	e888 0060 	stmia.w	r8, {r5, r6}
  407802:	f77f aed9 	ble.w	4075b8 <_svfprintf_r+0xa38>
  407806:	aa25      	add	r2, sp, #148	; 0x94
  407808:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40780a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40780c:	f002 fa20 	bl	409c50 <__ssprint_r>
  407810:	2800      	cmp	r0, #0
  407812:	f47f aa87 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407816:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407818:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40781a:	46c8      	mov	r8, r9
  40781c:	e6ce      	b.n	4075bc <_svfprintf_r+0xa3c>
  40781e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407820:	6814      	ldr	r4, [r2, #0]
  407822:	4613      	mov	r3, r2
  407824:	3304      	adds	r3, #4
  407826:	17e5      	asrs	r5, r4, #31
  407828:	930f      	str	r3, [sp, #60]	; 0x3c
  40782a:	4622      	mov	r2, r4
  40782c:	462b      	mov	r3, r5
  40782e:	e4fa      	b.n	407226 <_svfprintf_r+0x6a6>
  407830:	3204      	adds	r2, #4
  407832:	681c      	ldr	r4, [r3, #0]
  407834:	920f      	str	r2, [sp, #60]	; 0x3c
  407836:	2301      	movs	r3, #1
  407838:	2500      	movs	r5, #0
  40783a:	f7ff ba94 	b.w	406d66 <_svfprintf_r+0x1e6>
  40783e:	681c      	ldr	r4, [r3, #0]
  407840:	3304      	adds	r3, #4
  407842:	930f      	str	r3, [sp, #60]	; 0x3c
  407844:	2500      	movs	r5, #0
  407846:	e421      	b.n	40708c <_svfprintf_r+0x50c>
  407848:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40784a:	460a      	mov	r2, r1
  40784c:	3204      	adds	r2, #4
  40784e:	680c      	ldr	r4, [r1, #0]
  407850:	920f      	str	r2, [sp, #60]	; 0x3c
  407852:	2500      	movs	r5, #0
  407854:	f7ff ba87 	b.w	406d66 <_svfprintf_r+0x1e6>
  407858:	4614      	mov	r4, r2
  40785a:	3301      	adds	r3, #1
  40785c:	4434      	add	r4, r6
  40785e:	2b07      	cmp	r3, #7
  407860:	9427      	str	r4, [sp, #156]	; 0x9c
  407862:	9326      	str	r3, [sp, #152]	; 0x98
  407864:	e888 0060 	stmia.w	r8, {r5, r6}
  407868:	f77f ab68 	ble.w	406f3c <_svfprintf_r+0x3bc>
  40786c:	e6b3      	b.n	4075d6 <_svfprintf_r+0xa56>
  40786e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407872:	f8cd b01c 	str.w	fp, [sp, #28]
  407876:	ae42      	add	r6, sp, #264	; 0x108
  407878:	3430      	adds	r4, #48	; 0x30
  40787a:	2301      	movs	r3, #1
  40787c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  407880:	930e      	str	r3, [sp, #56]	; 0x38
  407882:	f7ff ba8d 	b.w	406da0 <_svfprintf_r+0x220>
  407886:	aa25      	add	r2, sp, #148	; 0x94
  407888:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40788a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40788c:	f002 f9e0 	bl	409c50 <__ssprint_r>
  407890:	2800      	cmp	r0, #0
  407892:	f47f aa47 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407896:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407898:	46c8      	mov	r8, r9
  40789a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40789c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40789e:	429a      	cmp	r2, r3
  4078a0:	db44      	blt.n	40792c <_svfprintf_r+0xdac>
  4078a2:	9b07      	ldr	r3, [sp, #28]
  4078a4:	07d9      	lsls	r1, r3, #31
  4078a6:	d441      	bmi.n	40792c <_svfprintf_r+0xdac>
  4078a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4078aa:	9812      	ldr	r0, [sp, #72]	; 0x48
  4078ac:	1a9a      	subs	r2, r3, r2
  4078ae:	1a1d      	subs	r5, r3, r0
  4078b0:	4295      	cmp	r5, r2
  4078b2:	bfa8      	it	ge
  4078b4:	4615      	movge	r5, r2
  4078b6:	2d00      	cmp	r5, #0
  4078b8:	dd0e      	ble.n	4078d8 <_svfprintf_r+0xd58>
  4078ba:	9926      	ldr	r1, [sp, #152]	; 0x98
  4078bc:	f8c8 5004 	str.w	r5, [r8, #4]
  4078c0:	3101      	adds	r1, #1
  4078c2:	4406      	add	r6, r0
  4078c4:	442c      	add	r4, r5
  4078c6:	2907      	cmp	r1, #7
  4078c8:	f8c8 6000 	str.w	r6, [r8]
  4078cc:	9427      	str	r4, [sp, #156]	; 0x9c
  4078ce:	9126      	str	r1, [sp, #152]	; 0x98
  4078d0:	f300 823b 	bgt.w	407d4a <_svfprintf_r+0x11ca>
  4078d4:	f108 0808 	add.w	r8, r8, #8
  4078d8:	2d00      	cmp	r5, #0
  4078da:	bfac      	ite	ge
  4078dc:	1b56      	subge	r6, r2, r5
  4078de:	4616      	movlt	r6, r2
  4078e0:	2e00      	cmp	r6, #0
  4078e2:	f77f ab2d 	ble.w	406f40 <_svfprintf_r+0x3c0>
  4078e6:	2e10      	cmp	r6, #16
  4078e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4078ea:	4db0      	ldr	r5, [pc, #704]	; (407bac <_svfprintf_r+0x102c>)
  4078ec:	ddb5      	ble.n	40785a <_svfprintf_r+0xcda>
  4078ee:	4622      	mov	r2, r4
  4078f0:	2710      	movs	r7, #16
  4078f2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4078f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4078f8:	e004      	b.n	407904 <_svfprintf_r+0xd84>
  4078fa:	f108 0808 	add.w	r8, r8, #8
  4078fe:	3e10      	subs	r6, #16
  407900:	2e10      	cmp	r6, #16
  407902:	dda9      	ble.n	407858 <_svfprintf_r+0xcd8>
  407904:	3301      	adds	r3, #1
  407906:	3210      	adds	r2, #16
  407908:	2b07      	cmp	r3, #7
  40790a:	9227      	str	r2, [sp, #156]	; 0x9c
  40790c:	9326      	str	r3, [sp, #152]	; 0x98
  40790e:	e888 00a0 	stmia.w	r8, {r5, r7}
  407912:	ddf2      	ble.n	4078fa <_svfprintf_r+0xd7a>
  407914:	aa25      	add	r2, sp, #148	; 0x94
  407916:	4621      	mov	r1, r4
  407918:	4658      	mov	r0, fp
  40791a:	f002 f999 	bl	409c50 <__ssprint_r>
  40791e:	2800      	cmp	r0, #0
  407920:	f47f aa00 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407924:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407926:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407928:	46c8      	mov	r8, r9
  40792a:	e7e8      	b.n	4078fe <_svfprintf_r+0xd7e>
  40792c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40792e:	9819      	ldr	r0, [sp, #100]	; 0x64
  407930:	991a      	ldr	r1, [sp, #104]	; 0x68
  407932:	f8c8 1000 	str.w	r1, [r8]
  407936:	3301      	adds	r3, #1
  407938:	4404      	add	r4, r0
  40793a:	2b07      	cmp	r3, #7
  40793c:	9427      	str	r4, [sp, #156]	; 0x9c
  40793e:	f8c8 0004 	str.w	r0, [r8, #4]
  407942:	9326      	str	r3, [sp, #152]	; 0x98
  407944:	f300 81f5 	bgt.w	407d32 <_svfprintf_r+0x11b2>
  407948:	f108 0808 	add.w	r8, r8, #8
  40794c:	e7ac      	b.n	4078a8 <_svfprintf_r+0xd28>
  40794e:	9b07      	ldr	r3, [sp, #28]
  407950:	07da      	lsls	r2, r3, #31
  407952:	f53f adfe 	bmi.w	407552 <_svfprintf_r+0x9d2>
  407956:	3701      	adds	r7, #1
  407958:	3401      	adds	r4, #1
  40795a:	2301      	movs	r3, #1
  40795c:	2f07      	cmp	r7, #7
  40795e:	9427      	str	r4, [sp, #156]	; 0x9c
  407960:	9726      	str	r7, [sp, #152]	; 0x98
  407962:	f8c8 6000 	str.w	r6, [r8]
  407966:	f8c8 3004 	str.w	r3, [r8, #4]
  40796a:	f77f ae25 	ble.w	4075b8 <_svfprintf_r+0xa38>
  40796e:	e74a      	b.n	407806 <_svfprintf_r+0xc86>
  407970:	aa25      	add	r2, sp, #148	; 0x94
  407972:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407974:	980c      	ldr	r0, [sp, #48]	; 0x30
  407976:	f002 f96b 	bl	409c50 <__ssprint_r>
  40797a:	2800      	cmp	r0, #0
  40797c:	f47f a9d2 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407980:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407982:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407984:	46c8      	mov	r8, r9
  407986:	e5f2      	b.n	40756e <_svfprintf_r+0x9ee>
  407988:	aa25      	add	r2, sp, #148	; 0x94
  40798a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40798c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40798e:	f002 f95f 	bl	409c50 <__ssprint_r>
  407992:	2800      	cmp	r0, #0
  407994:	f47f a9c6 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407998:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40799a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40799c:	46c8      	mov	r8, r9
  40799e:	e5f5      	b.n	40758c <_svfprintf_r+0xa0c>
  4079a0:	464e      	mov	r6, r9
  4079a2:	f7ff b9fd 	b.w	406da0 <_svfprintf_r+0x220>
  4079a6:	aa25      	add	r2, sp, #148	; 0x94
  4079a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4079aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4079ac:	f002 f950 	bl	409c50 <__ssprint_r>
  4079b0:	2800      	cmp	r0, #0
  4079b2:	f47f a9b7 	bne.w	406d24 <_svfprintf_r+0x1a4>
  4079b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4079b8:	46c8      	mov	r8, r9
  4079ba:	f7ff ba72 	b.w	406ea2 <_svfprintf_r+0x322>
  4079be:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4079c0:	4622      	mov	r2, r4
  4079c2:	4620      	mov	r0, r4
  4079c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4079c6:	4623      	mov	r3, r4
  4079c8:	4621      	mov	r1, r4
  4079ca:	f003 fa07 	bl	40addc <__aeabi_dcmpun>
  4079ce:	2800      	cmp	r0, #0
  4079d0:	f040 8286 	bne.w	407ee0 <_svfprintf_r+0x1360>
  4079d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4079d6:	3301      	adds	r3, #1
  4079d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4079da:	f023 0320 	bic.w	r3, r3, #32
  4079de:	930e      	str	r3, [sp, #56]	; 0x38
  4079e0:	f000 81e2 	beq.w	407da8 <_svfprintf_r+0x1228>
  4079e4:	2b47      	cmp	r3, #71	; 0x47
  4079e6:	f000 811e 	beq.w	407c26 <_svfprintf_r+0x10a6>
  4079ea:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4079ee:	9307      	str	r3, [sp, #28]
  4079f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4079f2:	1e1f      	subs	r7, r3, #0
  4079f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4079f6:	9308      	str	r3, [sp, #32]
  4079f8:	bfbb      	ittet	lt
  4079fa:	463b      	movlt	r3, r7
  4079fc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  407a00:	2300      	movge	r3, #0
  407a02:	232d      	movlt	r3, #45	; 0x2d
  407a04:	9310      	str	r3, [sp, #64]	; 0x40
  407a06:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407a08:	2b66      	cmp	r3, #102	; 0x66
  407a0a:	f000 81bb 	beq.w	407d84 <_svfprintf_r+0x1204>
  407a0e:	2b46      	cmp	r3, #70	; 0x46
  407a10:	f000 80df 	beq.w	407bd2 <_svfprintf_r+0x1052>
  407a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407a16:	9a08      	ldr	r2, [sp, #32]
  407a18:	2b45      	cmp	r3, #69	; 0x45
  407a1a:	bf0c      	ite	eq
  407a1c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  407a1e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  407a20:	a823      	add	r0, sp, #140	; 0x8c
  407a22:	a920      	add	r1, sp, #128	; 0x80
  407a24:	bf08      	it	eq
  407a26:	1c5d      	addeq	r5, r3, #1
  407a28:	9004      	str	r0, [sp, #16]
  407a2a:	9103      	str	r1, [sp, #12]
  407a2c:	a81f      	add	r0, sp, #124	; 0x7c
  407a2e:	2102      	movs	r1, #2
  407a30:	463b      	mov	r3, r7
  407a32:	9002      	str	r0, [sp, #8]
  407a34:	9501      	str	r5, [sp, #4]
  407a36:	9100      	str	r1, [sp, #0]
  407a38:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a3a:	f000 fb99 	bl	408170 <_dtoa_r>
  407a3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407a40:	2b67      	cmp	r3, #103	; 0x67
  407a42:	4606      	mov	r6, r0
  407a44:	f040 81e0 	bne.w	407e08 <_svfprintf_r+0x1288>
  407a48:	f01b 0f01 	tst.w	fp, #1
  407a4c:	f000 8246 	beq.w	407edc <_svfprintf_r+0x135c>
  407a50:	1974      	adds	r4, r6, r5
  407a52:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407a54:	9808      	ldr	r0, [sp, #32]
  407a56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407a58:	4639      	mov	r1, r7
  407a5a:	f003 f98d 	bl	40ad78 <__aeabi_dcmpeq>
  407a5e:	2800      	cmp	r0, #0
  407a60:	f040 8165 	bne.w	407d2e <_svfprintf_r+0x11ae>
  407a64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407a66:	42a3      	cmp	r3, r4
  407a68:	d206      	bcs.n	407a78 <_svfprintf_r+0xef8>
  407a6a:	2130      	movs	r1, #48	; 0x30
  407a6c:	1c5a      	adds	r2, r3, #1
  407a6e:	9223      	str	r2, [sp, #140]	; 0x8c
  407a70:	7019      	strb	r1, [r3, #0]
  407a72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407a74:	429c      	cmp	r4, r3
  407a76:	d8f9      	bhi.n	407a6c <_svfprintf_r+0xeec>
  407a78:	1b9b      	subs	r3, r3, r6
  407a7a:	9313      	str	r3, [sp, #76]	; 0x4c
  407a7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407a7e:	2b47      	cmp	r3, #71	; 0x47
  407a80:	f000 80e9 	beq.w	407c56 <_svfprintf_r+0x10d6>
  407a84:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407a86:	2b65      	cmp	r3, #101	; 0x65
  407a88:	f340 81cd 	ble.w	407e26 <_svfprintf_r+0x12a6>
  407a8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407a8e:	2b66      	cmp	r3, #102	; 0x66
  407a90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407a92:	9312      	str	r3, [sp, #72]	; 0x48
  407a94:	f000 819e 	beq.w	407dd4 <_svfprintf_r+0x1254>
  407a98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407a9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407a9c:	4619      	mov	r1, r3
  407a9e:	4291      	cmp	r1, r2
  407aa0:	f300 818a 	bgt.w	407db8 <_svfprintf_r+0x1238>
  407aa4:	f01b 0f01 	tst.w	fp, #1
  407aa8:	f040 8213 	bne.w	407ed2 <_svfprintf_r+0x1352>
  407aac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407ab0:	9308      	str	r3, [sp, #32]
  407ab2:	2367      	movs	r3, #103	; 0x67
  407ab4:	920e      	str	r2, [sp, #56]	; 0x38
  407ab6:	9311      	str	r3, [sp, #68]	; 0x44
  407ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407aba:	2b00      	cmp	r3, #0
  407abc:	f040 80c4 	bne.w	407c48 <_svfprintf_r+0x10c8>
  407ac0:	930a      	str	r3, [sp, #40]	; 0x28
  407ac2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407ac6:	f7ff b973 	b.w	406db0 <_svfprintf_r+0x230>
  407aca:	4635      	mov	r5, r6
  407acc:	460c      	mov	r4, r1
  407ace:	4646      	mov	r6, r8
  407ad0:	4690      	mov	r8, r2
  407ad2:	3301      	adds	r3, #1
  407ad4:	443c      	add	r4, r7
  407ad6:	2b07      	cmp	r3, #7
  407ad8:	9427      	str	r4, [sp, #156]	; 0x9c
  407ada:	9326      	str	r3, [sp, #152]	; 0x98
  407adc:	e888 00a0 	stmia.w	r8, {r5, r7}
  407ae0:	f73f aed1 	bgt.w	407886 <_svfprintf_r+0xd06>
  407ae4:	f108 0808 	add.w	r8, r8, #8
  407ae8:	e6d7      	b.n	40789a <_svfprintf_r+0xd1a>
  407aea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407aec:	6813      	ldr	r3, [r2, #0]
  407aee:	3204      	adds	r2, #4
  407af0:	920f      	str	r2, [sp, #60]	; 0x3c
  407af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407af4:	601a      	str	r2, [r3, #0]
  407af6:	f7ff b86a 	b.w	406bce <_svfprintf_r+0x4e>
  407afa:	aa25      	add	r2, sp, #148	; 0x94
  407afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407afe:	980c      	ldr	r0, [sp, #48]	; 0x30
  407b00:	f002 f8a6 	bl	409c50 <__ssprint_r>
  407b04:	2800      	cmp	r0, #0
  407b06:	f47f a90d 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407b0a:	46c8      	mov	r8, r9
  407b0c:	e48d      	b.n	40742a <_svfprintf_r+0x8aa>
  407b0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407b10:	4a27      	ldr	r2, [pc, #156]	; (407bb0 <_svfprintf_r+0x1030>)
  407b12:	f8c8 2000 	str.w	r2, [r8]
  407b16:	3301      	adds	r3, #1
  407b18:	3401      	adds	r4, #1
  407b1a:	2201      	movs	r2, #1
  407b1c:	2b07      	cmp	r3, #7
  407b1e:	9427      	str	r4, [sp, #156]	; 0x9c
  407b20:	9326      	str	r3, [sp, #152]	; 0x98
  407b22:	f8c8 2004 	str.w	r2, [r8, #4]
  407b26:	dc72      	bgt.n	407c0e <_svfprintf_r+0x108e>
  407b28:	f108 0808 	add.w	r8, r8, #8
  407b2c:	b929      	cbnz	r1, 407b3a <_svfprintf_r+0xfba>
  407b2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407b30:	b91b      	cbnz	r3, 407b3a <_svfprintf_r+0xfba>
  407b32:	9b07      	ldr	r3, [sp, #28]
  407b34:	07d8      	lsls	r0, r3, #31
  407b36:	f57f aa03 	bpl.w	406f40 <_svfprintf_r+0x3c0>
  407b3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407b3c:	9819      	ldr	r0, [sp, #100]	; 0x64
  407b3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407b40:	f8c8 2000 	str.w	r2, [r8]
  407b44:	3301      	adds	r3, #1
  407b46:	4602      	mov	r2, r0
  407b48:	4422      	add	r2, r4
  407b4a:	2b07      	cmp	r3, #7
  407b4c:	9227      	str	r2, [sp, #156]	; 0x9c
  407b4e:	f8c8 0004 	str.w	r0, [r8, #4]
  407b52:	9326      	str	r3, [sp, #152]	; 0x98
  407b54:	f300 818d 	bgt.w	407e72 <_svfprintf_r+0x12f2>
  407b58:	f108 0808 	add.w	r8, r8, #8
  407b5c:	2900      	cmp	r1, #0
  407b5e:	f2c0 8165 	blt.w	407e2c <_svfprintf_r+0x12ac>
  407b62:	9913      	ldr	r1, [sp, #76]	; 0x4c
  407b64:	f8c8 6000 	str.w	r6, [r8]
  407b68:	3301      	adds	r3, #1
  407b6a:	188c      	adds	r4, r1, r2
  407b6c:	2b07      	cmp	r3, #7
  407b6e:	9427      	str	r4, [sp, #156]	; 0x9c
  407b70:	9326      	str	r3, [sp, #152]	; 0x98
  407b72:	f8c8 1004 	str.w	r1, [r8, #4]
  407b76:	f77f a9e1 	ble.w	406f3c <_svfprintf_r+0x3bc>
  407b7a:	e52c      	b.n	4075d6 <_svfprintf_r+0xa56>
  407b7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407b7e:	9909      	ldr	r1, [sp, #36]	; 0x24
  407b80:	6813      	ldr	r3, [r2, #0]
  407b82:	17cd      	asrs	r5, r1, #31
  407b84:	4608      	mov	r0, r1
  407b86:	3204      	adds	r2, #4
  407b88:	4629      	mov	r1, r5
  407b8a:	920f      	str	r2, [sp, #60]	; 0x3c
  407b8c:	e9c3 0100 	strd	r0, r1, [r3]
  407b90:	f7ff b81d 	b.w	406bce <_svfprintf_r+0x4e>
  407b94:	aa25      	add	r2, sp, #148	; 0x94
  407b96:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407b98:	980c      	ldr	r0, [sp, #48]	; 0x30
  407b9a:	f002 f859 	bl	409c50 <__ssprint_r>
  407b9e:	2800      	cmp	r0, #0
  407ba0:	f47f a8c0 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407ba4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407ba6:	46c8      	mov	r8, r9
  407ba8:	e458      	b.n	40745c <_svfprintf_r+0x8dc>
  407baa:	bf00      	nop
  407bac:	0040b6cc 	.word	0x0040b6cc
  407bb0:	0040b6b8 	.word	0x0040b6b8
  407bb4:	2140      	movs	r1, #64	; 0x40
  407bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bb8:	f001 fa30 	bl	40901c <_malloc_r>
  407bbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407bbe:	6010      	str	r0, [r2, #0]
  407bc0:	6110      	str	r0, [r2, #16]
  407bc2:	2800      	cmp	r0, #0
  407bc4:	f000 81f2 	beq.w	407fac <_svfprintf_r+0x142c>
  407bc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407bca:	2340      	movs	r3, #64	; 0x40
  407bcc:	6153      	str	r3, [r2, #20]
  407bce:	f7fe bfee 	b.w	406bae <_svfprintf_r+0x2e>
  407bd2:	a823      	add	r0, sp, #140	; 0x8c
  407bd4:	a920      	add	r1, sp, #128	; 0x80
  407bd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407bd8:	9004      	str	r0, [sp, #16]
  407bda:	9103      	str	r1, [sp, #12]
  407bdc:	a81f      	add	r0, sp, #124	; 0x7c
  407bde:	2103      	movs	r1, #3
  407be0:	9002      	str	r0, [sp, #8]
  407be2:	9a08      	ldr	r2, [sp, #32]
  407be4:	9401      	str	r4, [sp, #4]
  407be6:	463b      	mov	r3, r7
  407be8:	9100      	str	r1, [sp, #0]
  407bea:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bec:	f000 fac0 	bl	408170 <_dtoa_r>
  407bf0:	4625      	mov	r5, r4
  407bf2:	4606      	mov	r6, r0
  407bf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407bf6:	2b46      	cmp	r3, #70	; 0x46
  407bf8:	eb06 0405 	add.w	r4, r6, r5
  407bfc:	f47f af29 	bne.w	407a52 <_svfprintf_r+0xed2>
  407c00:	7833      	ldrb	r3, [r6, #0]
  407c02:	2b30      	cmp	r3, #48	; 0x30
  407c04:	f000 8178 	beq.w	407ef8 <_svfprintf_r+0x1378>
  407c08:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  407c0a:	442c      	add	r4, r5
  407c0c:	e721      	b.n	407a52 <_svfprintf_r+0xed2>
  407c0e:	aa25      	add	r2, sp, #148	; 0x94
  407c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c12:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c14:	f002 f81c 	bl	409c50 <__ssprint_r>
  407c18:	2800      	cmp	r0, #0
  407c1a:	f47f a883 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407c1e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407c20:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c22:	46c8      	mov	r8, r9
  407c24:	e782      	b.n	407b2c <_svfprintf_r+0xfac>
  407c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c28:	2b00      	cmp	r3, #0
  407c2a:	bf08      	it	eq
  407c2c:	2301      	moveq	r3, #1
  407c2e:	930a      	str	r3, [sp, #40]	; 0x28
  407c30:	e6db      	b.n	4079ea <_svfprintf_r+0xe6a>
  407c32:	4630      	mov	r0, r6
  407c34:	940a      	str	r4, [sp, #40]	; 0x28
  407c36:	f7fe ff03 	bl	406a40 <strlen>
  407c3a:	950f      	str	r5, [sp, #60]	; 0x3c
  407c3c:	900e      	str	r0, [sp, #56]	; 0x38
  407c3e:	f8cd b01c 	str.w	fp, [sp, #28]
  407c42:	4603      	mov	r3, r0
  407c44:	f7ff b9f9 	b.w	40703a <_svfprintf_r+0x4ba>
  407c48:	272d      	movs	r7, #45	; 0x2d
  407c4a:	2300      	movs	r3, #0
  407c4c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407c50:	930a      	str	r3, [sp, #40]	; 0x28
  407c52:	f7ff b8ae 	b.w	406db2 <_svfprintf_r+0x232>
  407c56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407c58:	9312      	str	r3, [sp, #72]	; 0x48
  407c5a:	461a      	mov	r2, r3
  407c5c:	3303      	adds	r3, #3
  407c5e:	db04      	blt.n	407c6a <_svfprintf_r+0x10ea>
  407c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c62:	4619      	mov	r1, r3
  407c64:	4291      	cmp	r1, r2
  407c66:	f6bf af17 	bge.w	407a98 <_svfprintf_r+0xf18>
  407c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407c6c:	3b02      	subs	r3, #2
  407c6e:	9311      	str	r3, [sp, #68]	; 0x44
  407c70:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  407c74:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  407c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407c7a:	3b01      	subs	r3, #1
  407c7c:	2b00      	cmp	r3, #0
  407c7e:	931f      	str	r3, [sp, #124]	; 0x7c
  407c80:	bfbd      	ittte	lt
  407c82:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  407c84:	f1c3 0301 	rsblt	r3, r3, #1
  407c88:	222d      	movlt	r2, #45	; 0x2d
  407c8a:	222b      	movge	r2, #43	; 0x2b
  407c8c:	2b09      	cmp	r3, #9
  407c8e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  407c92:	f340 8116 	ble.w	407ec2 <_svfprintf_r+0x1342>
  407c96:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  407c9a:	4620      	mov	r0, r4
  407c9c:	4dab      	ldr	r5, [pc, #684]	; (407f4c <_svfprintf_r+0x13cc>)
  407c9e:	e000      	b.n	407ca2 <_svfprintf_r+0x1122>
  407ca0:	4610      	mov	r0, r2
  407ca2:	fb85 1203 	smull	r1, r2, r5, r3
  407ca6:	17d9      	asrs	r1, r3, #31
  407ca8:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407cac:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407cb0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  407cb4:	3230      	adds	r2, #48	; 0x30
  407cb6:	2909      	cmp	r1, #9
  407cb8:	f800 2c01 	strb.w	r2, [r0, #-1]
  407cbc:	460b      	mov	r3, r1
  407cbe:	f100 32ff 	add.w	r2, r0, #4294967295
  407cc2:	dced      	bgt.n	407ca0 <_svfprintf_r+0x1120>
  407cc4:	3330      	adds	r3, #48	; 0x30
  407cc6:	3802      	subs	r0, #2
  407cc8:	b2d9      	uxtb	r1, r3
  407cca:	4284      	cmp	r4, r0
  407ccc:	f802 1c01 	strb.w	r1, [r2, #-1]
  407cd0:	f240 8165 	bls.w	407f9e <_svfprintf_r+0x141e>
  407cd4:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  407cd8:	4613      	mov	r3, r2
  407cda:	e001      	b.n	407ce0 <_svfprintf_r+0x1160>
  407cdc:	f813 1b01 	ldrb.w	r1, [r3], #1
  407ce0:	f800 1b01 	strb.w	r1, [r0], #1
  407ce4:	42a3      	cmp	r3, r4
  407ce6:	d1f9      	bne.n	407cdc <_svfprintf_r+0x115c>
  407ce8:	3301      	adds	r3, #1
  407cea:	1a9b      	subs	r3, r3, r2
  407cec:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  407cf0:	4413      	add	r3, r2
  407cf2:	aa21      	add	r2, sp, #132	; 0x84
  407cf4:	1a9b      	subs	r3, r3, r2
  407cf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407cf8:	931b      	str	r3, [sp, #108]	; 0x6c
  407cfa:	2a01      	cmp	r2, #1
  407cfc:	4413      	add	r3, r2
  407cfe:	930e      	str	r3, [sp, #56]	; 0x38
  407d00:	f340 8119 	ble.w	407f36 <_svfprintf_r+0x13b6>
  407d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d06:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407d08:	4413      	add	r3, r2
  407d0a:	930e      	str	r3, [sp, #56]	; 0x38
  407d0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407d10:	9308      	str	r3, [sp, #32]
  407d12:	2300      	movs	r3, #0
  407d14:	9312      	str	r3, [sp, #72]	; 0x48
  407d16:	e6cf      	b.n	407ab8 <_svfprintf_r+0xf38>
  407d18:	aa25      	add	r2, sp, #148	; 0x94
  407d1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d1c:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d1e:	f001 ff97 	bl	409c50 <__ssprint_r>
  407d22:	2800      	cmp	r0, #0
  407d24:	f47e affe 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407d28:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407d2a:	46c8      	mov	r8, r9
  407d2c:	e4d7      	b.n	4076de <_svfprintf_r+0xb5e>
  407d2e:	4623      	mov	r3, r4
  407d30:	e6a2      	b.n	407a78 <_svfprintf_r+0xef8>
  407d32:	aa25      	add	r2, sp, #148	; 0x94
  407d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d36:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d38:	f001 ff8a 	bl	409c50 <__ssprint_r>
  407d3c:	2800      	cmp	r0, #0
  407d3e:	f47e aff1 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407d42:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407d44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407d46:	46c8      	mov	r8, r9
  407d48:	e5ae      	b.n	4078a8 <_svfprintf_r+0xd28>
  407d4a:	aa25      	add	r2, sp, #148	; 0x94
  407d4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d4e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d50:	f001 ff7e 	bl	409c50 <__ssprint_r>
  407d54:	2800      	cmp	r0, #0
  407d56:	f47e afe5 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407d5a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407d5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407d5e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407d60:	1a9a      	subs	r2, r3, r2
  407d62:	46c8      	mov	r8, r9
  407d64:	e5b8      	b.n	4078d8 <_svfprintf_r+0xd58>
  407d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407d68:	9612      	str	r6, [sp, #72]	; 0x48
  407d6a:	2b06      	cmp	r3, #6
  407d6c:	bf28      	it	cs
  407d6e:	2306      	movcs	r3, #6
  407d70:	960a      	str	r6, [sp, #40]	; 0x28
  407d72:	4637      	mov	r7, r6
  407d74:	9308      	str	r3, [sp, #32]
  407d76:	950f      	str	r5, [sp, #60]	; 0x3c
  407d78:	f8cd b01c 	str.w	fp, [sp, #28]
  407d7c:	930e      	str	r3, [sp, #56]	; 0x38
  407d7e:	4e74      	ldr	r6, [pc, #464]	; (407f50 <_svfprintf_r+0x13d0>)
  407d80:	f7ff b816 	b.w	406db0 <_svfprintf_r+0x230>
  407d84:	a823      	add	r0, sp, #140	; 0x8c
  407d86:	a920      	add	r1, sp, #128	; 0x80
  407d88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407d8a:	9004      	str	r0, [sp, #16]
  407d8c:	9103      	str	r1, [sp, #12]
  407d8e:	a81f      	add	r0, sp, #124	; 0x7c
  407d90:	2103      	movs	r1, #3
  407d92:	9002      	str	r0, [sp, #8]
  407d94:	9a08      	ldr	r2, [sp, #32]
  407d96:	9501      	str	r5, [sp, #4]
  407d98:	463b      	mov	r3, r7
  407d9a:	9100      	str	r1, [sp, #0]
  407d9c:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d9e:	f000 f9e7 	bl	408170 <_dtoa_r>
  407da2:	4606      	mov	r6, r0
  407da4:	1944      	adds	r4, r0, r5
  407da6:	e72b      	b.n	407c00 <_svfprintf_r+0x1080>
  407da8:	2306      	movs	r3, #6
  407daa:	930a      	str	r3, [sp, #40]	; 0x28
  407dac:	e61d      	b.n	4079ea <_svfprintf_r+0xe6a>
  407dae:	272d      	movs	r7, #45	; 0x2d
  407db0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407db4:	f7ff bacd 	b.w	407352 <_svfprintf_r+0x7d2>
  407db8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407dba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407dbc:	4413      	add	r3, r2
  407dbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407dc0:	930e      	str	r3, [sp, #56]	; 0x38
  407dc2:	2a00      	cmp	r2, #0
  407dc4:	f340 80b0 	ble.w	407f28 <_svfprintf_r+0x13a8>
  407dc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407dcc:	9308      	str	r3, [sp, #32]
  407dce:	2367      	movs	r3, #103	; 0x67
  407dd0:	9311      	str	r3, [sp, #68]	; 0x44
  407dd2:	e671      	b.n	407ab8 <_svfprintf_r+0xf38>
  407dd4:	2b00      	cmp	r3, #0
  407dd6:	f340 80c3 	ble.w	407f60 <_svfprintf_r+0x13e0>
  407dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407ddc:	2a00      	cmp	r2, #0
  407dde:	f040 8099 	bne.w	407f14 <_svfprintf_r+0x1394>
  407de2:	f01b 0f01 	tst.w	fp, #1
  407de6:	f040 8095 	bne.w	407f14 <_svfprintf_r+0x1394>
  407dea:	9308      	str	r3, [sp, #32]
  407dec:	930e      	str	r3, [sp, #56]	; 0x38
  407dee:	e663      	b.n	407ab8 <_svfprintf_r+0xf38>
  407df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407df2:	9308      	str	r3, [sp, #32]
  407df4:	930e      	str	r3, [sp, #56]	; 0x38
  407df6:	900a      	str	r0, [sp, #40]	; 0x28
  407df8:	950f      	str	r5, [sp, #60]	; 0x3c
  407dfa:	f8cd b01c 	str.w	fp, [sp, #28]
  407dfe:	9012      	str	r0, [sp, #72]	; 0x48
  407e00:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407e04:	f7fe bfd4 	b.w	406db0 <_svfprintf_r+0x230>
  407e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407e0a:	2b47      	cmp	r3, #71	; 0x47
  407e0c:	f47f ae20 	bne.w	407a50 <_svfprintf_r+0xed0>
  407e10:	f01b 0f01 	tst.w	fp, #1
  407e14:	f47f aeee 	bne.w	407bf4 <_svfprintf_r+0x1074>
  407e18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407e1a:	1b9b      	subs	r3, r3, r6
  407e1c:	9313      	str	r3, [sp, #76]	; 0x4c
  407e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407e20:	2b47      	cmp	r3, #71	; 0x47
  407e22:	f43f af18 	beq.w	407c56 <_svfprintf_r+0x10d6>
  407e26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407e28:	9312      	str	r3, [sp, #72]	; 0x48
  407e2a:	e721      	b.n	407c70 <_svfprintf_r+0x10f0>
  407e2c:	424f      	negs	r7, r1
  407e2e:	3110      	adds	r1, #16
  407e30:	4d48      	ldr	r5, [pc, #288]	; (407f54 <_svfprintf_r+0x13d4>)
  407e32:	da2f      	bge.n	407e94 <_svfprintf_r+0x1314>
  407e34:	2410      	movs	r4, #16
  407e36:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407e3a:	e004      	b.n	407e46 <_svfprintf_r+0x12c6>
  407e3c:	f108 0808 	add.w	r8, r8, #8
  407e40:	3f10      	subs	r7, #16
  407e42:	2f10      	cmp	r7, #16
  407e44:	dd26      	ble.n	407e94 <_svfprintf_r+0x1314>
  407e46:	3301      	adds	r3, #1
  407e48:	3210      	adds	r2, #16
  407e4a:	2b07      	cmp	r3, #7
  407e4c:	9227      	str	r2, [sp, #156]	; 0x9c
  407e4e:	9326      	str	r3, [sp, #152]	; 0x98
  407e50:	f8c8 5000 	str.w	r5, [r8]
  407e54:	f8c8 4004 	str.w	r4, [r8, #4]
  407e58:	ddf0      	ble.n	407e3c <_svfprintf_r+0x12bc>
  407e5a:	aa25      	add	r2, sp, #148	; 0x94
  407e5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407e5e:	4658      	mov	r0, fp
  407e60:	f001 fef6 	bl	409c50 <__ssprint_r>
  407e64:	2800      	cmp	r0, #0
  407e66:	f47e af5d 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407e6a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407e6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407e6e:	46c8      	mov	r8, r9
  407e70:	e7e6      	b.n	407e40 <_svfprintf_r+0x12c0>
  407e72:	aa25      	add	r2, sp, #148	; 0x94
  407e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407e76:	980c      	ldr	r0, [sp, #48]	; 0x30
  407e78:	f001 feea 	bl	409c50 <__ssprint_r>
  407e7c:	2800      	cmp	r0, #0
  407e7e:	f47e af51 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407e82:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407e84:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407e86:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407e88:	46c8      	mov	r8, r9
  407e8a:	e667      	b.n	407b5c <_svfprintf_r+0xfdc>
  407e8c:	2000      	movs	r0, #0
  407e8e:	900a      	str	r0, [sp, #40]	; 0x28
  407e90:	f7fe bed0 	b.w	406c34 <_svfprintf_r+0xb4>
  407e94:	3301      	adds	r3, #1
  407e96:	443a      	add	r2, r7
  407e98:	2b07      	cmp	r3, #7
  407e9a:	e888 00a0 	stmia.w	r8, {r5, r7}
  407e9e:	9227      	str	r2, [sp, #156]	; 0x9c
  407ea0:	9326      	str	r3, [sp, #152]	; 0x98
  407ea2:	f108 0808 	add.w	r8, r8, #8
  407ea6:	f77f ae5c 	ble.w	407b62 <_svfprintf_r+0xfe2>
  407eaa:	aa25      	add	r2, sp, #148	; 0x94
  407eac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407eae:	980c      	ldr	r0, [sp, #48]	; 0x30
  407eb0:	f001 fece 	bl	409c50 <__ssprint_r>
  407eb4:	2800      	cmp	r0, #0
  407eb6:	f47e af35 	bne.w	406d24 <_svfprintf_r+0x1a4>
  407eba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407ebc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407ebe:	46c8      	mov	r8, r9
  407ec0:	e64f      	b.n	407b62 <_svfprintf_r+0xfe2>
  407ec2:	3330      	adds	r3, #48	; 0x30
  407ec4:	2230      	movs	r2, #48	; 0x30
  407ec6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  407eca:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  407ece:	ab22      	add	r3, sp, #136	; 0x88
  407ed0:	e70f      	b.n	407cf2 <_svfprintf_r+0x1172>
  407ed2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407ed4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407ed6:	4413      	add	r3, r2
  407ed8:	930e      	str	r3, [sp, #56]	; 0x38
  407eda:	e775      	b.n	407dc8 <_svfprintf_r+0x1248>
  407edc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407ede:	e5cb      	b.n	407a78 <_svfprintf_r+0xef8>
  407ee0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407ee2:	4e1d      	ldr	r6, [pc, #116]	; (407f58 <_svfprintf_r+0x13d8>)
  407ee4:	2b00      	cmp	r3, #0
  407ee6:	bfb6      	itet	lt
  407ee8:	272d      	movlt	r7, #45	; 0x2d
  407eea:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  407eee:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  407ef2:	4b1a      	ldr	r3, [pc, #104]	; (407f5c <_svfprintf_r+0x13dc>)
  407ef4:	f7ff ba2f 	b.w	407356 <_svfprintf_r+0x7d6>
  407ef8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407efa:	9808      	ldr	r0, [sp, #32]
  407efc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407efe:	4639      	mov	r1, r7
  407f00:	f002 ff3a 	bl	40ad78 <__aeabi_dcmpeq>
  407f04:	2800      	cmp	r0, #0
  407f06:	f47f ae7f 	bne.w	407c08 <_svfprintf_r+0x1088>
  407f0a:	f1c5 0501 	rsb	r5, r5, #1
  407f0e:	951f      	str	r5, [sp, #124]	; 0x7c
  407f10:	442c      	add	r4, r5
  407f12:	e59e      	b.n	407a52 <_svfprintf_r+0xed2>
  407f14:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407f16:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407f18:	4413      	add	r3, r2
  407f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407f1c:	441a      	add	r2, r3
  407f1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407f22:	920e      	str	r2, [sp, #56]	; 0x38
  407f24:	9308      	str	r3, [sp, #32]
  407f26:	e5c7      	b.n	407ab8 <_svfprintf_r+0xf38>
  407f28:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407f2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407f2c:	f1c3 0301 	rsb	r3, r3, #1
  407f30:	441a      	add	r2, r3
  407f32:	4613      	mov	r3, r2
  407f34:	e7d0      	b.n	407ed8 <_svfprintf_r+0x1358>
  407f36:	f01b 0301 	ands.w	r3, fp, #1
  407f3a:	9312      	str	r3, [sp, #72]	; 0x48
  407f3c:	f47f aee2 	bne.w	407d04 <_svfprintf_r+0x1184>
  407f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407f42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407f46:	9308      	str	r3, [sp, #32]
  407f48:	e5b6      	b.n	407ab8 <_svfprintf_r+0xf38>
  407f4a:	bf00      	nop
  407f4c:	66666667 	.word	0x66666667
  407f50:	0040b6b0 	.word	0x0040b6b0
  407f54:	0040b6cc 	.word	0x0040b6cc
  407f58:	0040b684 	.word	0x0040b684
  407f5c:	0040b680 	.word	0x0040b680
  407f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407f62:	b913      	cbnz	r3, 407f6a <_svfprintf_r+0x13ea>
  407f64:	f01b 0f01 	tst.w	fp, #1
  407f68:	d002      	beq.n	407f70 <_svfprintf_r+0x13f0>
  407f6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407f6c:	3301      	adds	r3, #1
  407f6e:	e7d4      	b.n	407f1a <_svfprintf_r+0x139a>
  407f70:	2301      	movs	r3, #1
  407f72:	e73a      	b.n	407dea <_svfprintf_r+0x126a>
  407f74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407f76:	f89a 3001 	ldrb.w	r3, [sl, #1]
  407f7a:	6828      	ldr	r0, [r5, #0]
  407f7c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  407f80:	900a      	str	r0, [sp, #40]	; 0x28
  407f82:	4628      	mov	r0, r5
  407f84:	3004      	adds	r0, #4
  407f86:	46a2      	mov	sl, r4
  407f88:	900f      	str	r0, [sp, #60]	; 0x3c
  407f8a:	f7fe be51 	b.w	406c30 <_svfprintf_r+0xb0>
  407f8e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407f92:	f7ff b867 	b.w	407064 <_svfprintf_r+0x4e4>
  407f96:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407f9a:	f7ff ba15 	b.w	4073c8 <_svfprintf_r+0x848>
  407f9e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  407fa2:	e6a6      	b.n	407cf2 <_svfprintf_r+0x1172>
  407fa4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fa8:	f7ff b8eb 	b.w	407182 <_svfprintf_r+0x602>
  407fac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407fae:	230c      	movs	r3, #12
  407fb0:	6013      	str	r3, [r2, #0]
  407fb2:	f04f 33ff 	mov.w	r3, #4294967295
  407fb6:	9309      	str	r3, [sp, #36]	; 0x24
  407fb8:	f7fe bebd 	b.w	406d36 <_svfprintf_r+0x1b6>
  407fbc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fc0:	f7ff b99a 	b.w	4072f8 <_svfprintf_r+0x778>
  407fc4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fc8:	f7ff b976 	b.w	4072b8 <_svfprintf_r+0x738>
  407fcc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fd0:	f7ff b959 	b.w	407286 <_svfprintf_r+0x706>
  407fd4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fd8:	f7ff b912 	b.w	407200 <_svfprintf_r+0x680>

00407fdc <_vsprintf_r>:
  407fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  407fde:	b09b      	sub	sp, #108	; 0x6c
  407fe0:	460d      	mov	r5, r1
  407fe2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  407fe6:	f44f 7702 	mov.w	r7, #520	; 0x208
  407fea:	f64f 76ff 	movw	r6, #65535	; 0xffff
  407fee:	4669      	mov	r1, sp
  407ff0:	9500      	str	r5, [sp, #0]
  407ff2:	9504      	str	r5, [sp, #16]
  407ff4:	f8ad 700c 	strh.w	r7, [sp, #12]
  407ff8:	9402      	str	r4, [sp, #8]
  407ffa:	9405      	str	r4, [sp, #20]
  407ffc:	f8ad 600e 	strh.w	r6, [sp, #14]
  408000:	f7fe fdbe 	bl	406b80 <_svfprintf_r>
  408004:	9b00      	ldr	r3, [sp, #0]
  408006:	2200      	movs	r2, #0
  408008:	701a      	strb	r2, [r3, #0]
  40800a:	b01b      	add	sp, #108	; 0x6c
  40800c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40800e:	bf00      	nop

00408010 <vsprintf>:
  408010:	b410      	push	{r4}
  408012:	4c04      	ldr	r4, [pc, #16]	; (408024 <vsprintf+0x14>)
  408014:	4613      	mov	r3, r2
  408016:	460a      	mov	r2, r1
  408018:	4601      	mov	r1, r0
  40801a:	6820      	ldr	r0, [r4, #0]
  40801c:	bc10      	pop	{r4}
  40801e:	f7ff bfdd 	b.w	407fdc <_vsprintf_r>
  408022:	bf00      	nop
  408024:	20000020 	.word	0x20000020

00408028 <register_fini>:
  408028:	4b02      	ldr	r3, [pc, #8]	; (408034 <register_fini+0xc>)
  40802a:	b113      	cbz	r3, 408032 <register_fini+0xa>
  40802c:	4802      	ldr	r0, [pc, #8]	; (408038 <register_fini+0x10>)
  40802e:	f000 b805 	b.w	40803c <atexit>
  408032:	4770      	bx	lr
  408034:	00000000 	.word	0x00000000
  408038:	00408fc5 	.word	0x00408fc5

0040803c <atexit>:
  40803c:	2300      	movs	r3, #0
  40803e:	4601      	mov	r1, r0
  408040:	461a      	mov	r2, r3
  408042:	4618      	mov	r0, r3
  408044:	f001 be82 	b.w	409d4c <__register_exitproc>

00408048 <quorem>:
  408048:	6902      	ldr	r2, [r0, #16]
  40804a:	690b      	ldr	r3, [r1, #16]
  40804c:	4293      	cmp	r3, r2
  40804e:	f300 808d 	bgt.w	40816c <quorem+0x124>
  408052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408056:	f103 38ff 	add.w	r8, r3, #4294967295
  40805a:	f101 0714 	add.w	r7, r1, #20
  40805e:	f100 0b14 	add.w	fp, r0, #20
  408062:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  408066:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40806a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40806e:	b083      	sub	sp, #12
  408070:	3201      	adds	r2, #1
  408072:	fbb3 f9f2 	udiv	r9, r3, r2
  408076:	eb0b 0304 	add.w	r3, fp, r4
  40807a:	9400      	str	r4, [sp, #0]
  40807c:	eb07 0a04 	add.w	sl, r7, r4
  408080:	9301      	str	r3, [sp, #4]
  408082:	f1b9 0f00 	cmp.w	r9, #0
  408086:	d039      	beq.n	4080fc <quorem+0xb4>
  408088:	2500      	movs	r5, #0
  40808a:	462e      	mov	r6, r5
  40808c:	46bc      	mov	ip, r7
  40808e:	46de      	mov	lr, fp
  408090:	f85c 4b04 	ldr.w	r4, [ip], #4
  408094:	f8de 3000 	ldr.w	r3, [lr]
  408098:	b2a2      	uxth	r2, r4
  40809a:	fb09 5502 	mla	r5, r9, r2, r5
  40809e:	0c22      	lsrs	r2, r4, #16
  4080a0:	0c2c      	lsrs	r4, r5, #16
  4080a2:	fb09 4202 	mla	r2, r9, r2, r4
  4080a6:	b2ad      	uxth	r5, r5
  4080a8:	1b75      	subs	r5, r6, r5
  4080aa:	b296      	uxth	r6, r2
  4080ac:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4080b0:	fa15 f383 	uxtah	r3, r5, r3
  4080b4:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4080b8:	b29b      	uxth	r3, r3
  4080ba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4080be:	45e2      	cmp	sl, ip
  4080c0:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4080c4:	f84e 3b04 	str.w	r3, [lr], #4
  4080c8:	ea4f 4626 	mov.w	r6, r6, asr #16
  4080cc:	d2e0      	bcs.n	408090 <quorem+0x48>
  4080ce:	9b00      	ldr	r3, [sp, #0]
  4080d0:	f85b 3003 	ldr.w	r3, [fp, r3]
  4080d4:	b993      	cbnz	r3, 4080fc <quorem+0xb4>
  4080d6:	9c01      	ldr	r4, [sp, #4]
  4080d8:	1f23      	subs	r3, r4, #4
  4080da:	459b      	cmp	fp, r3
  4080dc:	d20c      	bcs.n	4080f8 <quorem+0xb0>
  4080de:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4080e2:	b94b      	cbnz	r3, 4080f8 <quorem+0xb0>
  4080e4:	f1a4 0308 	sub.w	r3, r4, #8
  4080e8:	e002      	b.n	4080f0 <quorem+0xa8>
  4080ea:	681a      	ldr	r2, [r3, #0]
  4080ec:	3b04      	subs	r3, #4
  4080ee:	b91a      	cbnz	r2, 4080f8 <quorem+0xb0>
  4080f0:	459b      	cmp	fp, r3
  4080f2:	f108 38ff 	add.w	r8, r8, #4294967295
  4080f6:	d3f8      	bcc.n	4080ea <quorem+0xa2>
  4080f8:	f8c0 8010 	str.w	r8, [r0, #16]
  4080fc:	4604      	mov	r4, r0
  4080fe:	f001 fc99 	bl	409a34 <__mcmp>
  408102:	2800      	cmp	r0, #0
  408104:	db2e      	blt.n	408164 <quorem+0x11c>
  408106:	f109 0901 	add.w	r9, r9, #1
  40810a:	465d      	mov	r5, fp
  40810c:	2300      	movs	r3, #0
  40810e:	f857 1b04 	ldr.w	r1, [r7], #4
  408112:	6828      	ldr	r0, [r5, #0]
  408114:	b28a      	uxth	r2, r1
  408116:	1a9a      	subs	r2, r3, r2
  408118:	0c0b      	lsrs	r3, r1, #16
  40811a:	fa12 f280 	uxtah	r2, r2, r0
  40811e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  408122:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408126:	b292      	uxth	r2, r2
  408128:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40812c:	45ba      	cmp	sl, r7
  40812e:	f845 2b04 	str.w	r2, [r5], #4
  408132:	ea4f 4323 	mov.w	r3, r3, asr #16
  408136:	d2ea      	bcs.n	40810e <quorem+0xc6>
  408138:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40813c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  408140:	b982      	cbnz	r2, 408164 <quorem+0x11c>
  408142:	1f1a      	subs	r2, r3, #4
  408144:	4593      	cmp	fp, r2
  408146:	d20b      	bcs.n	408160 <quorem+0x118>
  408148:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40814c:	b942      	cbnz	r2, 408160 <quorem+0x118>
  40814e:	3b08      	subs	r3, #8
  408150:	e002      	b.n	408158 <quorem+0x110>
  408152:	681a      	ldr	r2, [r3, #0]
  408154:	3b04      	subs	r3, #4
  408156:	b91a      	cbnz	r2, 408160 <quorem+0x118>
  408158:	459b      	cmp	fp, r3
  40815a:	f108 38ff 	add.w	r8, r8, #4294967295
  40815e:	d3f8      	bcc.n	408152 <quorem+0x10a>
  408160:	f8c4 8010 	str.w	r8, [r4, #16]
  408164:	4648      	mov	r0, r9
  408166:	b003      	add	sp, #12
  408168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40816c:	2000      	movs	r0, #0
  40816e:	4770      	bx	lr

00408170 <_dtoa_r>:
  408170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408174:	6c01      	ldr	r1, [r0, #64]	; 0x40
  408176:	b09b      	sub	sp, #108	; 0x6c
  408178:	4604      	mov	r4, r0
  40817a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40817c:	4692      	mov	sl, r2
  40817e:	469b      	mov	fp, r3
  408180:	b141      	cbz	r1, 408194 <_dtoa_r+0x24>
  408182:	6c42      	ldr	r2, [r0, #68]	; 0x44
  408184:	604a      	str	r2, [r1, #4]
  408186:	2301      	movs	r3, #1
  408188:	4093      	lsls	r3, r2
  40818a:	608b      	str	r3, [r1, #8]
  40818c:	f001 fa7a 	bl	409684 <_Bfree>
  408190:	2300      	movs	r3, #0
  408192:	6423      	str	r3, [r4, #64]	; 0x40
  408194:	f1bb 0f00 	cmp.w	fp, #0
  408198:	465d      	mov	r5, fp
  40819a:	db35      	blt.n	408208 <_dtoa_r+0x98>
  40819c:	2300      	movs	r3, #0
  40819e:	6033      	str	r3, [r6, #0]
  4081a0:	4b9d      	ldr	r3, [pc, #628]	; (408418 <_dtoa_r+0x2a8>)
  4081a2:	43ab      	bics	r3, r5
  4081a4:	d015      	beq.n	4081d2 <_dtoa_r+0x62>
  4081a6:	4650      	mov	r0, sl
  4081a8:	4659      	mov	r1, fp
  4081aa:	2200      	movs	r2, #0
  4081ac:	2300      	movs	r3, #0
  4081ae:	f002 fde3 	bl	40ad78 <__aeabi_dcmpeq>
  4081b2:	4680      	mov	r8, r0
  4081b4:	2800      	cmp	r0, #0
  4081b6:	d02d      	beq.n	408214 <_dtoa_r+0xa4>
  4081b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4081ba:	2301      	movs	r3, #1
  4081bc:	6013      	str	r3, [r2, #0]
  4081be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4081c0:	2b00      	cmp	r3, #0
  4081c2:	f000 80bd 	beq.w	408340 <_dtoa_r+0x1d0>
  4081c6:	4895      	ldr	r0, [pc, #596]	; (40841c <_dtoa_r+0x2ac>)
  4081c8:	6018      	str	r0, [r3, #0]
  4081ca:	3801      	subs	r0, #1
  4081cc:	b01b      	add	sp, #108	; 0x6c
  4081ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4081d4:	f242 730f 	movw	r3, #9999	; 0x270f
  4081d8:	6013      	str	r3, [r2, #0]
  4081da:	f1ba 0f00 	cmp.w	sl, #0
  4081de:	d10d      	bne.n	4081fc <_dtoa_r+0x8c>
  4081e0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4081e4:	b955      	cbnz	r5, 4081fc <_dtoa_r+0x8c>
  4081e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4081e8:	488d      	ldr	r0, [pc, #564]	; (408420 <_dtoa_r+0x2b0>)
  4081ea:	2b00      	cmp	r3, #0
  4081ec:	d0ee      	beq.n	4081cc <_dtoa_r+0x5c>
  4081ee:	f100 0308 	add.w	r3, r0, #8
  4081f2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4081f4:	6013      	str	r3, [r2, #0]
  4081f6:	b01b      	add	sp, #108	; 0x6c
  4081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4081fe:	4889      	ldr	r0, [pc, #548]	; (408424 <_dtoa_r+0x2b4>)
  408200:	2b00      	cmp	r3, #0
  408202:	d0e3      	beq.n	4081cc <_dtoa_r+0x5c>
  408204:	1cc3      	adds	r3, r0, #3
  408206:	e7f4      	b.n	4081f2 <_dtoa_r+0x82>
  408208:	2301      	movs	r3, #1
  40820a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40820e:	6033      	str	r3, [r6, #0]
  408210:	46ab      	mov	fp, r5
  408212:	e7c5      	b.n	4081a0 <_dtoa_r+0x30>
  408214:	aa18      	add	r2, sp, #96	; 0x60
  408216:	ab19      	add	r3, sp, #100	; 0x64
  408218:	9201      	str	r2, [sp, #4]
  40821a:	9300      	str	r3, [sp, #0]
  40821c:	4652      	mov	r2, sl
  40821e:	465b      	mov	r3, fp
  408220:	4620      	mov	r0, r4
  408222:	f001 fca7 	bl	409b74 <__d2b>
  408226:	0d2b      	lsrs	r3, r5, #20
  408228:	4681      	mov	r9, r0
  40822a:	d071      	beq.n	408310 <_dtoa_r+0x1a0>
  40822c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  408230:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  408234:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408236:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40823a:	4650      	mov	r0, sl
  40823c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  408240:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  408244:	2200      	movs	r2, #0
  408246:	4b78      	ldr	r3, [pc, #480]	; (408428 <_dtoa_r+0x2b8>)
  408248:	f002 f97a 	bl	40a540 <__aeabi_dsub>
  40824c:	a36c      	add	r3, pc, #432	; (adr r3, 408400 <_dtoa_r+0x290>)
  40824e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408252:	f002 fb29 	bl	40a8a8 <__aeabi_dmul>
  408256:	a36c      	add	r3, pc, #432	; (adr r3, 408408 <_dtoa_r+0x298>)
  408258:	e9d3 2300 	ldrd	r2, r3, [r3]
  40825c:	f002 f972 	bl	40a544 <__adddf3>
  408260:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408264:	4630      	mov	r0, r6
  408266:	f002 fab9 	bl	40a7dc <__aeabi_i2d>
  40826a:	a369      	add	r3, pc, #420	; (adr r3, 408410 <_dtoa_r+0x2a0>)
  40826c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408270:	f002 fb1a 	bl	40a8a8 <__aeabi_dmul>
  408274:	4602      	mov	r2, r0
  408276:	460b      	mov	r3, r1
  408278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40827c:	f002 f962 	bl	40a544 <__adddf3>
  408280:	e9cd 0104 	strd	r0, r1, [sp, #16]
  408284:	f002 fdc0 	bl	40ae08 <__aeabi_d2iz>
  408288:	2200      	movs	r2, #0
  40828a:	9002      	str	r0, [sp, #8]
  40828c:	2300      	movs	r3, #0
  40828e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408292:	f002 fd7b 	bl	40ad8c <__aeabi_dcmplt>
  408296:	2800      	cmp	r0, #0
  408298:	f040 8173 	bne.w	408582 <_dtoa_r+0x412>
  40829c:	9d02      	ldr	r5, [sp, #8]
  40829e:	2d16      	cmp	r5, #22
  4082a0:	f200 815d 	bhi.w	40855e <_dtoa_r+0x3ee>
  4082a4:	4b61      	ldr	r3, [pc, #388]	; (40842c <_dtoa_r+0x2bc>)
  4082a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4082aa:	e9d3 0100 	ldrd	r0, r1, [r3]
  4082ae:	4652      	mov	r2, sl
  4082b0:	465b      	mov	r3, fp
  4082b2:	f002 fd89 	bl	40adc8 <__aeabi_dcmpgt>
  4082b6:	2800      	cmp	r0, #0
  4082b8:	f000 81c5 	beq.w	408646 <_dtoa_r+0x4d6>
  4082bc:	1e6b      	subs	r3, r5, #1
  4082be:	9302      	str	r3, [sp, #8]
  4082c0:	2300      	movs	r3, #0
  4082c2:	930e      	str	r3, [sp, #56]	; 0x38
  4082c4:	1bbf      	subs	r7, r7, r6
  4082c6:	1e7b      	subs	r3, r7, #1
  4082c8:	9306      	str	r3, [sp, #24]
  4082ca:	f100 8154 	bmi.w	408576 <_dtoa_r+0x406>
  4082ce:	2300      	movs	r3, #0
  4082d0:	9308      	str	r3, [sp, #32]
  4082d2:	9b02      	ldr	r3, [sp, #8]
  4082d4:	2b00      	cmp	r3, #0
  4082d6:	f2c0 8145 	blt.w	408564 <_dtoa_r+0x3f4>
  4082da:	9a06      	ldr	r2, [sp, #24]
  4082dc:	930d      	str	r3, [sp, #52]	; 0x34
  4082de:	4611      	mov	r1, r2
  4082e0:	4419      	add	r1, r3
  4082e2:	2300      	movs	r3, #0
  4082e4:	9106      	str	r1, [sp, #24]
  4082e6:	930c      	str	r3, [sp, #48]	; 0x30
  4082e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4082ea:	2b09      	cmp	r3, #9
  4082ec:	d82a      	bhi.n	408344 <_dtoa_r+0x1d4>
  4082ee:	2b05      	cmp	r3, #5
  4082f0:	f340 865b 	ble.w	408faa <_dtoa_r+0xe3a>
  4082f4:	3b04      	subs	r3, #4
  4082f6:	9324      	str	r3, [sp, #144]	; 0x90
  4082f8:	2500      	movs	r5, #0
  4082fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4082fc:	3b02      	subs	r3, #2
  4082fe:	2b03      	cmp	r3, #3
  408300:	f200 8642 	bhi.w	408f88 <_dtoa_r+0xe18>
  408304:	e8df f013 	tbh	[pc, r3, lsl #1]
  408308:	02c903d4 	.word	0x02c903d4
  40830c:	046103df 	.word	0x046103df
  408310:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408312:	9e19      	ldr	r6, [sp, #100]	; 0x64
  408314:	443e      	add	r6, r7
  408316:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40831a:	2b20      	cmp	r3, #32
  40831c:	f340 818e 	ble.w	40863c <_dtoa_r+0x4cc>
  408320:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  408324:	f206 4012 	addw	r0, r6, #1042	; 0x412
  408328:	409d      	lsls	r5, r3
  40832a:	fa2a f000 	lsr.w	r0, sl, r0
  40832e:	4328      	orrs	r0, r5
  408330:	f002 fa44 	bl	40a7bc <__aeabi_ui2d>
  408334:	2301      	movs	r3, #1
  408336:	3e01      	subs	r6, #1
  408338:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40833c:	9314      	str	r3, [sp, #80]	; 0x50
  40833e:	e781      	b.n	408244 <_dtoa_r+0xd4>
  408340:	483b      	ldr	r0, [pc, #236]	; (408430 <_dtoa_r+0x2c0>)
  408342:	e743      	b.n	4081cc <_dtoa_r+0x5c>
  408344:	2100      	movs	r1, #0
  408346:	6461      	str	r1, [r4, #68]	; 0x44
  408348:	4620      	mov	r0, r4
  40834a:	9125      	str	r1, [sp, #148]	; 0x94
  40834c:	f001 f974 	bl	409638 <_Balloc>
  408350:	f04f 33ff 	mov.w	r3, #4294967295
  408354:	930a      	str	r3, [sp, #40]	; 0x28
  408356:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408358:	930f      	str	r3, [sp, #60]	; 0x3c
  40835a:	2301      	movs	r3, #1
  40835c:	9004      	str	r0, [sp, #16]
  40835e:	6420      	str	r0, [r4, #64]	; 0x40
  408360:	9224      	str	r2, [sp, #144]	; 0x90
  408362:	930b      	str	r3, [sp, #44]	; 0x2c
  408364:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408366:	2b00      	cmp	r3, #0
  408368:	f2c0 80d9 	blt.w	40851e <_dtoa_r+0x3ae>
  40836c:	9a02      	ldr	r2, [sp, #8]
  40836e:	2a0e      	cmp	r2, #14
  408370:	f300 80d5 	bgt.w	40851e <_dtoa_r+0x3ae>
  408374:	4b2d      	ldr	r3, [pc, #180]	; (40842c <_dtoa_r+0x2bc>)
  408376:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40837a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40837e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  408382:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408384:	2b00      	cmp	r3, #0
  408386:	f2c0 83ba 	blt.w	408afe <_dtoa_r+0x98e>
  40838a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40838e:	4650      	mov	r0, sl
  408390:	462a      	mov	r2, r5
  408392:	4633      	mov	r3, r6
  408394:	4659      	mov	r1, fp
  408396:	f002 fbb1 	bl	40aafc <__aeabi_ddiv>
  40839a:	f002 fd35 	bl	40ae08 <__aeabi_d2iz>
  40839e:	4680      	mov	r8, r0
  4083a0:	f002 fa1c 	bl	40a7dc <__aeabi_i2d>
  4083a4:	462a      	mov	r2, r5
  4083a6:	4633      	mov	r3, r6
  4083a8:	f002 fa7e 	bl	40a8a8 <__aeabi_dmul>
  4083ac:	460b      	mov	r3, r1
  4083ae:	4602      	mov	r2, r0
  4083b0:	4659      	mov	r1, fp
  4083b2:	4650      	mov	r0, sl
  4083b4:	f002 f8c4 	bl	40a540 <__aeabi_dsub>
  4083b8:	9d04      	ldr	r5, [sp, #16]
  4083ba:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4083be:	702b      	strb	r3, [r5, #0]
  4083c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4083c2:	2b01      	cmp	r3, #1
  4083c4:	4606      	mov	r6, r0
  4083c6:	460f      	mov	r7, r1
  4083c8:	f105 0501 	add.w	r5, r5, #1
  4083cc:	d068      	beq.n	4084a0 <_dtoa_r+0x330>
  4083ce:	2200      	movs	r2, #0
  4083d0:	4b18      	ldr	r3, [pc, #96]	; (408434 <_dtoa_r+0x2c4>)
  4083d2:	f002 fa69 	bl	40a8a8 <__aeabi_dmul>
  4083d6:	2200      	movs	r2, #0
  4083d8:	2300      	movs	r3, #0
  4083da:	4606      	mov	r6, r0
  4083dc:	460f      	mov	r7, r1
  4083de:	f002 fccb 	bl	40ad78 <__aeabi_dcmpeq>
  4083e2:	2800      	cmp	r0, #0
  4083e4:	f040 8088 	bne.w	4084f8 <_dtoa_r+0x388>
  4083e8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4083ec:	f04f 0a00 	mov.w	sl, #0
  4083f0:	f8df b040 	ldr.w	fp, [pc, #64]	; 408434 <_dtoa_r+0x2c4>
  4083f4:	940c      	str	r4, [sp, #48]	; 0x30
  4083f6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4083fa:	e028      	b.n	40844e <_dtoa_r+0x2de>
  4083fc:	f3af 8000 	nop.w
  408400:	636f4361 	.word	0x636f4361
  408404:	3fd287a7 	.word	0x3fd287a7
  408408:	8b60c8b3 	.word	0x8b60c8b3
  40840c:	3fc68a28 	.word	0x3fc68a28
  408410:	509f79fb 	.word	0x509f79fb
  408414:	3fd34413 	.word	0x3fd34413
  408418:	7ff00000 	.word	0x7ff00000
  40841c:	0040b6b9 	.word	0x0040b6b9
  408420:	0040b6dc 	.word	0x0040b6dc
  408424:	0040b6e8 	.word	0x0040b6e8
  408428:	3ff80000 	.word	0x3ff80000
  40842c:	0040b718 	.word	0x0040b718
  408430:	0040b6b8 	.word	0x0040b6b8
  408434:	40240000 	.word	0x40240000
  408438:	f002 fa36 	bl	40a8a8 <__aeabi_dmul>
  40843c:	2200      	movs	r2, #0
  40843e:	2300      	movs	r3, #0
  408440:	4606      	mov	r6, r0
  408442:	460f      	mov	r7, r1
  408444:	f002 fc98 	bl	40ad78 <__aeabi_dcmpeq>
  408448:	2800      	cmp	r0, #0
  40844a:	f040 83c1 	bne.w	408bd0 <_dtoa_r+0xa60>
  40844e:	4642      	mov	r2, r8
  408450:	464b      	mov	r3, r9
  408452:	4630      	mov	r0, r6
  408454:	4639      	mov	r1, r7
  408456:	f002 fb51 	bl	40aafc <__aeabi_ddiv>
  40845a:	f002 fcd5 	bl	40ae08 <__aeabi_d2iz>
  40845e:	4604      	mov	r4, r0
  408460:	f002 f9bc 	bl	40a7dc <__aeabi_i2d>
  408464:	4642      	mov	r2, r8
  408466:	464b      	mov	r3, r9
  408468:	f002 fa1e 	bl	40a8a8 <__aeabi_dmul>
  40846c:	4602      	mov	r2, r0
  40846e:	460b      	mov	r3, r1
  408470:	4630      	mov	r0, r6
  408472:	4639      	mov	r1, r7
  408474:	f002 f864 	bl	40a540 <__aeabi_dsub>
  408478:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40847c:	9e04      	ldr	r6, [sp, #16]
  40847e:	f805 eb01 	strb.w	lr, [r5], #1
  408482:	eba5 0e06 	sub.w	lr, r5, r6
  408486:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  408488:	45b6      	cmp	lr, r6
  40848a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40848e:	4652      	mov	r2, sl
  408490:	465b      	mov	r3, fp
  408492:	d1d1      	bne.n	408438 <_dtoa_r+0x2c8>
  408494:	46a0      	mov	r8, r4
  408496:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40849a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40849c:	4606      	mov	r6, r0
  40849e:	460f      	mov	r7, r1
  4084a0:	4632      	mov	r2, r6
  4084a2:	463b      	mov	r3, r7
  4084a4:	4630      	mov	r0, r6
  4084a6:	4639      	mov	r1, r7
  4084a8:	f002 f84c 	bl	40a544 <__adddf3>
  4084ac:	4606      	mov	r6, r0
  4084ae:	460f      	mov	r7, r1
  4084b0:	4602      	mov	r2, r0
  4084b2:	460b      	mov	r3, r1
  4084b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4084b8:	f002 fc68 	bl	40ad8c <__aeabi_dcmplt>
  4084bc:	b948      	cbnz	r0, 4084d2 <_dtoa_r+0x362>
  4084be:	4632      	mov	r2, r6
  4084c0:	463b      	mov	r3, r7
  4084c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4084c6:	f002 fc57 	bl	40ad78 <__aeabi_dcmpeq>
  4084ca:	b1a8      	cbz	r0, 4084f8 <_dtoa_r+0x388>
  4084cc:	f018 0f01 	tst.w	r8, #1
  4084d0:	d012      	beq.n	4084f8 <_dtoa_r+0x388>
  4084d2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4084d6:	9a04      	ldr	r2, [sp, #16]
  4084d8:	1e6b      	subs	r3, r5, #1
  4084da:	e004      	b.n	4084e6 <_dtoa_r+0x376>
  4084dc:	429a      	cmp	r2, r3
  4084de:	f000 8401 	beq.w	408ce4 <_dtoa_r+0xb74>
  4084e2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4084e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4084ea:	f103 0501 	add.w	r5, r3, #1
  4084ee:	d0f5      	beq.n	4084dc <_dtoa_r+0x36c>
  4084f0:	f108 0801 	add.w	r8, r8, #1
  4084f4:	f883 8000 	strb.w	r8, [r3]
  4084f8:	4649      	mov	r1, r9
  4084fa:	4620      	mov	r0, r4
  4084fc:	f001 f8c2 	bl	409684 <_Bfree>
  408500:	2200      	movs	r2, #0
  408502:	9b02      	ldr	r3, [sp, #8]
  408504:	702a      	strb	r2, [r5, #0]
  408506:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408508:	3301      	adds	r3, #1
  40850a:	6013      	str	r3, [r2, #0]
  40850c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40850e:	2b00      	cmp	r3, #0
  408510:	f000 839e 	beq.w	408c50 <_dtoa_r+0xae0>
  408514:	9804      	ldr	r0, [sp, #16]
  408516:	601d      	str	r5, [r3, #0]
  408518:	b01b      	add	sp, #108	; 0x6c
  40851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40851e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408520:	2a00      	cmp	r2, #0
  408522:	d03e      	beq.n	4085a2 <_dtoa_r+0x432>
  408524:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408526:	2a01      	cmp	r2, #1
  408528:	f340 8311 	ble.w	408b4e <_dtoa_r+0x9de>
  40852c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40852e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408530:	1e5f      	subs	r7, r3, #1
  408532:	42ba      	cmp	r2, r7
  408534:	f2c0 838f 	blt.w	408c56 <_dtoa_r+0xae6>
  408538:	1bd7      	subs	r7, r2, r7
  40853a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40853c:	2b00      	cmp	r3, #0
  40853e:	f2c0 848b 	blt.w	408e58 <_dtoa_r+0xce8>
  408542:	9d08      	ldr	r5, [sp, #32]
  408544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408546:	9a08      	ldr	r2, [sp, #32]
  408548:	441a      	add	r2, r3
  40854a:	9208      	str	r2, [sp, #32]
  40854c:	9a06      	ldr	r2, [sp, #24]
  40854e:	2101      	movs	r1, #1
  408550:	441a      	add	r2, r3
  408552:	4620      	mov	r0, r4
  408554:	9206      	str	r2, [sp, #24]
  408556:	f001 f92f 	bl	4097b8 <__i2b>
  40855a:	4606      	mov	r6, r0
  40855c:	e024      	b.n	4085a8 <_dtoa_r+0x438>
  40855e:	2301      	movs	r3, #1
  408560:	930e      	str	r3, [sp, #56]	; 0x38
  408562:	e6af      	b.n	4082c4 <_dtoa_r+0x154>
  408564:	9a08      	ldr	r2, [sp, #32]
  408566:	9b02      	ldr	r3, [sp, #8]
  408568:	1ad2      	subs	r2, r2, r3
  40856a:	425b      	negs	r3, r3
  40856c:	930c      	str	r3, [sp, #48]	; 0x30
  40856e:	2300      	movs	r3, #0
  408570:	9208      	str	r2, [sp, #32]
  408572:	930d      	str	r3, [sp, #52]	; 0x34
  408574:	e6b8      	b.n	4082e8 <_dtoa_r+0x178>
  408576:	f1c7 0301 	rsb	r3, r7, #1
  40857a:	9308      	str	r3, [sp, #32]
  40857c:	2300      	movs	r3, #0
  40857e:	9306      	str	r3, [sp, #24]
  408580:	e6a7      	b.n	4082d2 <_dtoa_r+0x162>
  408582:	9d02      	ldr	r5, [sp, #8]
  408584:	4628      	mov	r0, r5
  408586:	f002 f929 	bl	40a7dc <__aeabi_i2d>
  40858a:	4602      	mov	r2, r0
  40858c:	460b      	mov	r3, r1
  40858e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408592:	f002 fbf1 	bl	40ad78 <__aeabi_dcmpeq>
  408596:	2800      	cmp	r0, #0
  408598:	f47f ae80 	bne.w	40829c <_dtoa_r+0x12c>
  40859c:	1e6b      	subs	r3, r5, #1
  40859e:	9302      	str	r3, [sp, #8]
  4085a0:	e67c      	b.n	40829c <_dtoa_r+0x12c>
  4085a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4085a4:	9d08      	ldr	r5, [sp, #32]
  4085a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4085a8:	2d00      	cmp	r5, #0
  4085aa:	dd0c      	ble.n	4085c6 <_dtoa_r+0x456>
  4085ac:	9906      	ldr	r1, [sp, #24]
  4085ae:	2900      	cmp	r1, #0
  4085b0:	460b      	mov	r3, r1
  4085b2:	dd08      	ble.n	4085c6 <_dtoa_r+0x456>
  4085b4:	42a9      	cmp	r1, r5
  4085b6:	9a08      	ldr	r2, [sp, #32]
  4085b8:	bfa8      	it	ge
  4085ba:	462b      	movge	r3, r5
  4085bc:	1ad2      	subs	r2, r2, r3
  4085be:	1aed      	subs	r5, r5, r3
  4085c0:	1acb      	subs	r3, r1, r3
  4085c2:	9208      	str	r2, [sp, #32]
  4085c4:	9306      	str	r3, [sp, #24]
  4085c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4085c8:	b1d3      	cbz	r3, 408600 <_dtoa_r+0x490>
  4085ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4085cc:	2b00      	cmp	r3, #0
  4085ce:	f000 82b7 	beq.w	408b40 <_dtoa_r+0x9d0>
  4085d2:	2f00      	cmp	r7, #0
  4085d4:	dd10      	ble.n	4085f8 <_dtoa_r+0x488>
  4085d6:	4631      	mov	r1, r6
  4085d8:	463a      	mov	r2, r7
  4085da:	4620      	mov	r0, r4
  4085dc:	f001 f988 	bl	4098f0 <__pow5mult>
  4085e0:	464a      	mov	r2, r9
  4085e2:	4601      	mov	r1, r0
  4085e4:	4606      	mov	r6, r0
  4085e6:	4620      	mov	r0, r4
  4085e8:	f001 f8f0 	bl	4097cc <__multiply>
  4085ec:	4649      	mov	r1, r9
  4085ee:	4680      	mov	r8, r0
  4085f0:	4620      	mov	r0, r4
  4085f2:	f001 f847 	bl	409684 <_Bfree>
  4085f6:	46c1      	mov	r9, r8
  4085f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4085fa:	1bda      	subs	r2, r3, r7
  4085fc:	f040 82a1 	bne.w	408b42 <_dtoa_r+0x9d2>
  408600:	2101      	movs	r1, #1
  408602:	4620      	mov	r0, r4
  408604:	f001 f8d8 	bl	4097b8 <__i2b>
  408608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40860a:	2b00      	cmp	r3, #0
  40860c:	4680      	mov	r8, r0
  40860e:	dd1c      	ble.n	40864a <_dtoa_r+0x4da>
  408610:	4601      	mov	r1, r0
  408612:	461a      	mov	r2, r3
  408614:	4620      	mov	r0, r4
  408616:	f001 f96b 	bl	4098f0 <__pow5mult>
  40861a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40861c:	2b01      	cmp	r3, #1
  40861e:	4680      	mov	r8, r0
  408620:	f340 8254 	ble.w	408acc <_dtoa_r+0x95c>
  408624:	2300      	movs	r3, #0
  408626:	930c      	str	r3, [sp, #48]	; 0x30
  408628:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40862c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  408630:	6918      	ldr	r0, [r3, #16]
  408632:	f001 f871 	bl	409718 <__hi0bits>
  408636:	f1c0 0020 	rsb	r0, r0, #32
  40863a:	e010      	b.n	40865e <_dtoa_r+0x4ee>
  40863c:	f1c3 0520 	rsb	r5, r3, #32
  408640:	fa0a f005 	lsl.w	r0, sl, r5
  408644:	e674      	b.n	408330 <_dtoa_r+0x1c0>
  408646:	900e      	str	r0, [sp, #56]	; 0x38
  408648:	e63c      	b.n	4082c4 <_dtoa_r+0x154>
  40864a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40864c:	2b01      	cmp	r3, #1
  40864e:	f340 8287 	ble.w	408b60 <_dtoa_r+0x9f0>
  408652:	2300      	movs	r3, #0
  408654:	930c      	str	r3, [sp, #48]	; 0x30
  408656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408658:	2001      	movs	r0, #1
  40865a:	2b00      	cmp	r3, #0
  40865c:	d1e4      	bne.n	408628 <_dtoa_r+0x4b8>
  40865e:	9a06      	ldr	r2, [sp, #24]
  408660:	4410      	add	r0, r2
  408662:	f010 001f 	ands.w	r0, r0, #31
  408666:	f000 80a1 	beq.w	4087ac <_dtoa_r+0x63c>
  40866a:	f1c0 0320 	rsb	r3, r0, #32
  40866e:	2b04      	cmp	r3, #4
  408670:	f340 849e 	ble.w	408fb0 <_dtoa_r+0xe40>
  408674:	9b08      	ldr	r3, [sp, #32]
  408676:	f1c0 001c 	rsb	r0, r0, #28
  40867a:	4403      	add	r3, r0
  40867c:	9308      	str	r3, [sp, #32]
  40867e:	4613      	mov	r3, r2
  408680:	4403      	add	r3, r0
  408682:	4405      	add	r5, r0
  408684:	9306      	str	r3, [sp, #24]
  408686:	9b08      	ldr	r3, [sp, #32]
  408688:	2b00      	cmp	r3, #0
  40868a:	dd05      	ble.n	408698 <_dtoa_r+0x528>
  40868c:	4649      	mov	r1, r9
  40868e:	461a      	mov	r2, r3
  408690:	4620      	mov	r0, r4
  408692:	f001 f97d 	bl	409990 <__lshift>
  408696:	4681      	mov	r9, r0
  408698:	9b06      	ldr	r3, [sp, #24]
  40869a:	2b00      	cmp	r3, #0
  40869c:	dd05      	ble.n	4086aa <_dtoa_r+0x53a>
  40869e:	4641      	mov	r1, r8
  4086a0:	461a      	mov	r2, r3
  4086a2:	4620      	mov	r0, r4
  4086a4:	f001 f974 	bl	409990 <__lshift>
  4086a8:	4680      	mov	r8, r0
  4086aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4086ac:	2b00      	cmp	r3, #0
  4086ae:	f040 8086 	bne.w	4087be <_dtoa_r+0x64e>
  4086b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4086b4:	2b00      	cmp	r3, #0
  4086b6:	f340 8266 	ble.w	408b86 <_dtoa_r+0xa16>
  4086ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4086bc:	2b00      	cmp	r3, #0
  4086be:	f000 8098 	beq.w	4087f2 <_dtoa_r+0x682>
  4086c2:	2d00      	cmp	r5, #0
  4086c4:	dd05      	ble.n	4086d2 <_dtoa_r+0x562>
  4086c6:	4631      	mov	r1, r6
  4086c8:	462a      	mov	r2, r5
  4086ca:	4620      	mov	r0, r4
  4086cc:	f001 f960 	bl	409990 <__lshift>
  4086d0:	4606      	mov	r6, r0
  4086d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4086d4:	2b00      	cmp	r3, #0
  4086d6:	f040 8337 	bne.w	408d48 <_dtoa_r+0xbd8>
  4086da:	9606      	str	r6, [sp, #24]
  4086dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4086de:	9a04      	ldr	r2, [sp, #16]
  4086e0:	f8dd b018 	ldr.w	fp, [sp, #24]
  4086e4:	3b01      	subs	r3, #1
  4086e6:	18d3      	adds	r3, r2, r3
  4086e8:	930b      	str	r3, [sp, #44]	; 0x2c
  4086ea:	f00a 0301 	and.w	r3, sl, #1
  4086ee:	930c      	str	r3, [sp, #48]	; 0x30
  4086f0:	4617      	mov	r7, r2
  4086f2:	46c2      	mov	sl, r8
  4086f4:	4651      	mov	r1, sl
  4086f6:	4648      	mov	r0, r9
  4086f8:	f7ff fca6 	bl	408048 <quorem>
  4086fc:	4631      	mov	r1, r6
  4086fe:	4605      	mov	r5, r0
  408700:	4648      	mov	r0, r9
  408702:	f001 f997 	bl	409a34 <__mcmp>
  408706:	465a      	mov	r2, fp
  408708:	900a      	str	r0, [sp, #40]	; 0x28
  40870a:	4651      	mov	r1, sl
  40870c:	4620      	mov	r0, r4
  40870e:	f001 f9ad 	bl	409a6c <__mdiff>
  408712:	68c2      	ldr	r2, [r0, #12]
  408714:	4680      	mov	r8, r0
  408716:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40871a:	2a00      	cmp	r2, #0
  40871c:	f040 822b 	bne.w	408b76 <_dtoa_r+0xa06>
  408720:	4601      	mov	r1, r0
  408722:	4648      	mov	r0, r9
  408724:	9308      	str	r3, [sp, #32]
  408726:	f001 f985 	bl	409a34 <__mcmp>
  40872a:	4641      	mov	r1, r8
  40872c:	9006      	str	r0, [sp, #24]
  40872e:	4620      	mov	r0, r4
  408730:	f000 ffa8 	bl	409684 <_Bfree>
  408734:	9a06      	ldr	r2, [sp, #24]
  408736:	9b08      	ldr	r3, [sp, #32]
  408738:	b932      	cbnz	r2, 408748 <_dtoa_r+0x5d8>
  40873a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40873c:	b921      	cbnz	r1, 408748 <_dtoa_r+0x5d8>
  40873e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408740:	2a00      	cmp	r2, #0
  408742:	f000 83ef 	beq.w	408f24 <_dtoa_r+0xdb4>
  408746:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408748:	990a      	ldr	r1, [sp, #40]	; 0x28
  40874a:	2900      	cmp	r1, #0
  40874c:	f2c0 829f 	blt.w	408c8e <_dtoa_r+0xb1e>
  408750:	d105      	bne.n	40875e <_dtoa_r+0x5ee>
  408752:	9924      	ldr	r1, [sp, #144]	; 0x90
  408754:	b919      	cbnz	r1, 40875e <_dtoa_r+0x5ee>
  408756:	990c      	ldr	r1, [sp, #48]	; 0x30
  408758:	2900      	cmp	r1, #0
  40875a:	f000 8298 	beq.w	408c8e <_dtoa_r+0xb1e>
  40875e:	2a00      	cmp	r2, #0
  408760:	f300 8306 	bgt.w	408d70 <_dtoa_r+0xc00>
  408764:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408766:	703b      	strb	r3, [r7, #0]
  408768:	f107 0801 	add.w	r8, r7, #1
  40876c:	4297      	cmp	r7, r2
  40876e:	4645      	mov	r5, r8
  408770:	f000 830c 	beq.w	408d8c <_dtoa_r+0xc1c>
  408774:	4649      	mov	r1, r9
  408776:	2300      	movs	r3, #0
  408778:	220a      	movs	r2, #10
  40877a:	4620      	mov	r0, r4
  40877c:	f000 ff8c 	bl	409698 <__multadd>
  408780:	455e      	cmp	r6, fp
  408782:	4681      	mov	r9, r0
  408784:	4631      	mov	r1, r6
  408786:	f04f 0300 	mov.w	r3, #0
  40878a:	f04f 020a 	mov.w	r2, #10
  40878e:	4620      	mov	r0, r4
  408790:	f000 81eb 	beq.w	408b6a <_dtoa_r+0x9fa>
  408794:	f000 ff80 	bl	409698 <__multadd>
  408798:	4659      	mov	r1, fp
  40879a:	4606      	mov	r6, r0
  40879c:	2300      	movs	r3, #0
  40879e:	220a      	movs	r2, #10
  4087a0:	4620      	mov	r0, r4
  4087a2:	f000 ff79 	bl	409698 <__multadd>
  4087a6:	4647      	mov	r7, r8
  4087a8:	4683      	mov	fp, r0
  4087aa:	e7a3      	b.n	4086f4 <_dtoa_r+0x584>
  4087ac:	201c      	movs	r0, #28
  4087ae:	9b08      	ldr	r3, [sp, #32]
  4087b0:	4403      	add	r3, r0
  4087b2:	9308      	str	r3, [sp, #32]
  4087b4:	9b06      	ldr	r3, [sp, #24]
  4087b6:	4403      	add	r3, r0
  4087b8:	4405      	add	r5, r0
  4087ba:	9306      	str	r3, [sp, #24]
  4087bc:	e763      	b.n	408686 <_dtoa_r+0x516>
  4087be:	4641      	mov	r1, r8
  4087c0:	4648      	mov	r0, r9
  4087c2:	f001 f937 	bl	409a34 <__mcmp>
  4087c6:	2800      	cmp	r0, #0
  4087c8:	f6bf af73 	bge.w	4086b2 <_dtoa_r+0x542>
  4087cc:	9f02      	ldr	r7, [sp, #8]
  4087ce:	4649      	mov	r1, r9
  4087d0:	2300      	movs	r3, #0
  4087d2:	220a      	movs	r2, #10
  4087d4:	4620      	mov	r0, r4
  4087d6:	3f01      	subs	r7, #1
  4087d8:	9702      	str	r7, [sp, #8]
  4087da:	f000 ff5d 	bl	409698 <__multadd>
  4087de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4087e0:	4681      	mov	r9, r0
  4087e2:	2b00      	cmp	r3, #0
  4087e4:	f040 83b6 	bne.w	408f54 <_dtoa_r+0xde4>
  4087e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4087ea:	2b00      	cmp	r3, #0
  4087ec:	f340 83bf 	ble.w	408f6e <_dtoa_r+0xdfe>
  4087f0:	930a      	str	r3, [sp, #40]	; 0x28
  4087f2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4087f6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4087f8:	465d      	mov	r5, fp
  4087fa:	e002      	b.n	408802 <_dtoa_r+0x692>
  4087fc:	f000 ff4c 	bl	409698 <__multadd>
  408800:	4681      	mov	r9, r0
  408802:	4641      	mov	r1, r8
  408804:	4648      	mov	r0, r9
  408806:	f7ff fc1f 	bl	408048 <quorem>
  40880a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40880e:	f805 ab01 	strb.w	sl, [r5], #1
  408812:	eba5 030b 	sub.w	r3, r5, fp
  408816:	42bb      	cmp	r3, r7
  408818:	f04f 020a 	mov.w	r2, #10
  40881c:	f04f 0300 	mov.w	r3, #0
  408820:	4649      	mov	r1, r9
  408822:	4620      	mov	r0, r4
  408824:	dbea      	blt.n	4087fc <_dtoa_r+0x68c>
  408826:	9b04      	ldr	r3, [sp, #16]
  408828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40882a:	2a01      	cmp	r2, #1
  40882c:	bfac      	ite	ge
  40882e:	189b      	addge	r3, r3, r2
  408830:	3301      	addlt	r3, #1
  408832:	461d      	mov	r5, r3
  408834:	f04f 0b00 	mov.w	fp, #0
  408838:	4649      	mov	r1, r9
  40883a:	2201      	movs	r2, #1
  40883c:	4620      	mov	r0, r4
  40883e:	f001 f8a7 	bl	409990 <__lshift>
  408842:	4641      	mov	r1, r8
  408844:	4681      	mov	r9, r0
  408846:	f001 f8f5 	bl	409a34 <__mcmp>
  40884a:	2800      	cmp	r0, #0
  40884c:	f340 823d 	ble.w	408cca <_dtoa_r+0xb5a>
  408850:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  408854:	9904      	ldr	r1, [sp, #16]
  408856:	1e6b      	subs	r3, r5, #1
  408858:	e004      	b.n	408864 <_dtoa_r+0x6f4>
  40885a:	428b      	cmp	r3, r1
  40885c:	f000 81ae 	beq.w	408bbc <_dtoa_r+0xa4c>
  408860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  408864:	2a39      	cmp	r2, #57	; 0x39
  408866:	f103 0501 	add.w	r5, r3, #1
  40886a:	d0f6      	beq.n	40885a <_dtoa_r+0x6ea>
  40886c:	3201      	adds	r2, #1
  40886e:	701a      	strb	r2, [r3, #0]
  408870:	4641      	mov	r1, r8
  408872:	4620      	mov	r0, r4
  408874:	f000 ff06 	bl	409684 <_Bfree>
  408878:	2e00      	cmp	r6, #0
  40887a:	f43f ae3d 	beq.w	4084f8 <_dtoa_r+0x388>
  40887e:	f1bb 0f00 	cmp.w	fp, #0
  408882:	d005      	beq.n	408890 <_dtoa_r+0x720>
  408884:	45b3      	cmp	fp, r6
  408886:	d003      	beq.n	408890 <_dtoa_r+0x720>
  408888:	4659      	mov	r1, fp
  40888a:	4620      	mov	r0, r4
  40888c:	f000 fefa 	bl	409684 <_Bfree>
  408890:	4631      	mov	r1, r6
  408892:	4620      	mov	r0, r4
  408894:	f000 fef6 	bl	409684 <_Bfree>
  408898:	e62e      	b.n	4084f8 <_dtoa_r+0x388>
  40889a:	2300      	movs	r3, #0
  40889c:	930b      	str	r3, [sp, #44]	; 0x2c
  40889e:	9b02      	ldr	r3, [sp, #8]
  4088a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4088a2:	4413      	add	r3, r2
  4088a4:	930f      	str	r3, [sp, #60]	; 0x3c
  4088a6:	3301      	adds	r3, #1
  4088a8:	2b01      	cmp	r3, #1
  4088aa:	461f      	mov	r7, r3
  4088ac:	461e      	mov	r6, r3
  4088ae:	930a      	str	r3, [sp, #40]	; 0x28
  4088b0:	bfb8      	it	lt
  4088b2:	2701      	movlt	r7, #1
  4088b4:	2100      	movs	r1, #0
  4088b6:	2f17      	cmp	r7, #23
  4088b8:	6461      	str	r1, [r4, #68]	; 0x44
  4088ba:	d90a      	bls.n	4088d2 <_dtoa_r+0x762>
  4088bc:	2201      	movs	r2, #1
  4088be:	2304      	movs	r3, #4
  4088c0:	005b      	lsls	r3, r3, #1
  4088c2:	f103 0014 	add.w	r0, r3, #20
  4088c6:	4287      	cmp	r7, r0
  4088c8:	4611      	mov	r1, r2
  4088ca:	f102 0201 	add.w	r2, r2, #1
  4088ce:	d2f7      	bcs.n	4088c0 <_dtoa_r+0x750>
  4088d0:	6461      	str	r1, [r4, #68]	; 0x44
  4088d2:	4620      	mov	r0, r4
  4088d4:	f000 feb0 	bl	409638 <_Balloc>
  4088d8:	2e0e      	cmp	r6, #14
  4088da:	9004      	str	r0, [sp, #16]
  4088dc:	6420      	str	r0, [r4, #64]	; 0x40
  4088de:	f63f ad41 	bhi.w	408364 <_dtoa_r+0x1f4>
  4088e2:	2d00      	cmp	r5, #0
  4088e4:	f43f ad3e 	beq.w	408364 <_dtoa_r+0x1f4>
  4088e8:	9902      	ldr	r1, [sp, #8]
  4088ea:	2900      	cmp	r1, #0
  4088ec:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4088f0:	f340 8202 	ble.w	408cf8 <_dtoa_r+0xb88>
  4088f4:	4bb8      	ldr	r3, [pc, #736]	; (408bd8 <_dtoa_r+0xa68>)
  4088f6:	f001 020f 	and.w	r2, r1, #15
  4088fa:	110d      	asrs	r5, r1, #4
  4088fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408900:	06e9      	lsls	r1, r5, #27
  408902:	e9d3 6700 	ldrd	r6, r7, [r3]
  408906:	f140 81ae 	bpl.w	408c66 <_dtoa_r+0xaf6>
  40890a:	4bb4      	ldr	r3, [pc, #720]	; (408bdc <_dtoa_r+0xa6c>)
  40890c:	4650      	mov	r0, sl
  40890e:	4659      	mov	r1, fp
  408910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  408914:	f002 f8f2 	bl	40aafc <__aeabi_ddiv>
  408918:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40891c:	f005 050f 	and.w	r5, r5, #15
  408920:	f04f 0a03 	mov.w	sl, #3
  408924:	b18d      	cbz	r5, 40894a <_dtoa_r+0x7da>
  408926:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 408bdc <_dtoa_r+0xa6c>
  40892a:	07ea      	lsls	r2, r5, #31
  40892c:	d509      	bpl.n	408942 <_dtoa_r+0x7d2>
  40892e:	4630      	mov	r0, r6
  408930:	4639      	mov	r1, r7
  408932:	e9d8 2300 	ldrd	r2, r3, [r8]
  408936:	f001 ffb7 	bl	40a8a8 <__aeabi_dmul>
  40893a:	f10a 0a01 	add.w	sl, sl, #1
  40893e:	4606      	mov	r6, r0
  408940:	460f      	mov	r7, r1
  408942:	106d      	asrs	r5, r5, #1
  408944:	f108 0808 	add.w	r8, r8, #8
  408948:	d1ef      	bne.n	40892a <_dtoa_r+0x7ba>
  40894a:	463b      	mov	r3, r7
  40894c:	4632      	mov	r2, r6
  40894e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  408952:	f002 f8d3 	bl	40aafc <__aeabi_ddiv>
  408956:	4607      	mov	r7, r0
  408958:	4688      	mov	r8, r1
  40895a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40895c:	b143      	cbz	r3, 408970 <_dtoa_r+0x800>
  40895e:	2200      	movs	r2, #0
  408960:	4b9f      	ldr	r3, [pc, #636]	; (408be0 <_dtoa_r+0xa70>)
  408962:	4638      	mov	r0, r7
  408964:	4641      	mov	r1, r8
  408966:	f002 fa11 	bl	40ad8c <__aeabi_dcmplt>
  40896a:	2800      	cmp	r0, #0
  40896c:	f040 8286 	bne.w	408e7c <_dtoa_r+0xd0c>
  408970:	4650      	mov	r0, sl
  408972:	f001 ff33 	bl	40a7dc <__aeabi_i2d>
  408976:	463a      	mov	r2, r7
  408978:	4643      	mov	r3, r8
  40897a:	f001 ff95 	bl	40a8a8 <__aeabi_dmul>
  40897e:	4b99      	ldr	r3, [pc, #612]	; (408be4 <_dtoa_r+0xa74>)
  408980:	2200      	movs	r2, #0
  408982:	f001 fddf 	bl	40a544 <__adddf3>
  408986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408988:	4605      	mov	r5, r0
  40898a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40898e:	2b00      	cmp	r3, #0
  408990:	f000 813e 	beq.w	408c10 <_dtoa_r+0xaa0>
  408994:	9b02      	ldr	r3, [sp, #8]
  408996:	9315      	str	r3, [sp, #84]	; 0x54
  408998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40899a:	9312      	str	r3, [sp, #72]	; 0x48
  40899c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40899e:	2b00      	cmp	r3, #0
  4089a0:	f000 81fa 	beq.w	408d98 <_dtoa_r+0xc28>
  4089a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4089a6:	4b8c      	ldr	r3, [pc, #560]	; (408bd8 <_dtoa_r+0xa68>)
  4089a8:	498f      	ldr	r1, [pc, #572]	; (408be8 <_dtoa_r+0xa78>)
  4089aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4089ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4089b2:	2000      	movs	r0, #0
  4089b4:	f002 f8a2 	bl	40aafc <__aeabi_ddiv>
  4089b8:	462a      	mov	r2, r5
  4089ba:	4633      	mov	r3, r6
  4089bc:	f001 fdc0 	bl	40a540 <__aeabi_dsub>
  4089c0:	4682      	mov	sl, r0
  4089c2:	468b      	mov	fp, r1
  4089c4:	4638      	mov	r0, r7
  4089c6:	4641      	mov	r1, r8
  4089c8:	f002 fa1e 	bl	40ae08 <__aeabi_d2iz>
  4089cc:	4605      	mov	r5, r0
  4089ce:	f001 ff05 	bl	40a7dc <__aeabi_i2d>
  4089d2:	4602      	mov	r2, r0
  4089d4:	460b      	mov	r3, r1
  4089d6:	4638      	mov	r0, r7
  4089d8:	4641      	mov	r1, r8
  4089da:	f001 fdb1 	bl	40a540 <__aeabi_dsub>
  4089de:	3530      	adds	r5, #48	; 0x30
  4089e0:	fa5f f885 	uxtb.w	r8, r5
  4089e4:	9d04      	ldr	r5, [sp, #16]
  4089e6:	4606      	mov	r6, r0
  4089e8:	460f      	mov	r7, r1
  4089ea:	f885 8000 	strb.w	r8, [r5]
  4089ee:	4602      	mov	r2, r0
  4089f0:	460b      	mov	r3, r1
  4089f2:	4650      	mov	r0, sl
  4089f4:	4659      	mov	r1, fp
  4089f6:	3501      	adds	r5, #1
  4089f8:	f002 f9e6 	bl	40adc8 <__aeabi_dcmpgt>
  4089fc:	2800      	cmp	r0, #0
  4089fe:	d154      	bne.n	408aaa <_dtoa_r+0x93a>
  408a00:	4632      	mov	r2, r6
  408a02:	463b      	mov	r3, r7
  408a04:	2000      	movs	r0, #0
  408a06:	4976      	ldr	r1, [pc, #472]	; (408be0 <_dtoa_r+0xa70>)
  408a08:	f001 fd9a 	bl	40a540 <__aeabi_dsub>
  408a0c:	4602      	mov	r2, r0
  408a0e:	460b      	mov	r3, r1
  408a10:	4650      	mov	r0, sl
  408a12:	4659      	mov	r1, fp
  408a14:	f002 f9d8 	bl	40adc8 <__aeabi_dcmpgt>
  408a18:	2800      	cmp	r0, #0
  408a1a:	f040 8270 	bne.w	408efe <_dtoa_r+0xd8e>
  408a1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408a20:	2a01      	cmp	r2, #1
  408a22:	f000 8111 	beq.w	408c48 <_dtoa_r+0xad8>
  408a26:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408a28:	9a04      	ldr	r2, [sp, #16]
  408a2a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408a2e:	4413      	add	r3, r2
  408a30:	4699      	mov	r9, r3
  408a32:	e00d      	b.n	408a50 <_dtoa_r+0x8e0>
  408a34:	2000      	movs	r0, #0
  408a36:	496a      	ldr	r1, [pc, #424]	; (408be0 <_dtoa_r+0xa70>)
  408a38:	f001 fd82 	bl	40a540 <__aeabi_dsub>
  408a3c:	4652      	mov	r2, sl
  408a3e:	465b      	mov	r3, fp
  408a40:	f002 f9a4 	bl	40ad8c <__aeabi_dcmplt>
  408a44:	2800      	cmp	r0, #0
  408a46:	f040 8258 	bne.w	408efa <_dtoa_r+0xd8a>
  408a4a:	454d      	cmp	r5, r9
  408a4c:	f000 80fa 	beq.w	408c44 <_dtoa_r+0xad4>
  408a50:	4650      	mov	r0, sl
  408a52:	4659      	mov	r1, fp
  408a54:	2200      	movs	r2, #0
  408a56:	4b65      	ldr	r3, [pc, #404]	; (408bec <_dtoa_r+0xa7c>)
  408a58:	f001 ff26 	bl	40a8a8 <__aeabi_dmul>
  408a5c:	2200      	movs	r2, #0
  408a5e:	4b63      	ldr	r3, [pc, #396]	; (408bec <_dtoa_r+0xa7c>)
  408a60:	4682      	mov	sl, r0
  408a62:	468b      	mov	fp, r1
  408a64:	4630      	mov	r0, r6
  408a66:	4639      	mov	r1, r7
  408a68:	f001 ff1e 	bl	40a8a8 <__aeabi_dmul>
  408a6c:	460f      	mov	r7, r1
  408a6e:	4606      	mov	r6, r0
  408a70:	f002 f9ca 	bl	40ae08 <__aeabi_d2iz>
  408a74:	4680      	mov	r8, r0
  408a76:	f001 feb1 	bl	40a7dc <__aeabi_i2d>
  408a7a:	4602      	mov	r2, r0
  408a7c:	460b      	mov	r3, r1
  408a7e:	4630      	mov	r0, r6
  408a80:	4639      	mov	r1, r7
  408a82:	f001 fd5d 	bl	40a540 <__aeabi_dsub>
  408a86:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408a8a:	fa5f f888 	uxtb.w	r8, r8
  408a8e:	4652      	mov	r2, sl
  408a90:	465b      	mov	r3, fp
  408a92:	f805 8b01 	strb.w	r8, [r5], #1
  408a96:	4606      	mov	r6, r0
  408a98:	460f      	mov	r7, r1
  408a9a:	f002 f977 	bl	40ad8c <__aeabi_dcmplt>
  408a9e:	4632      	mov	r2, r6
  408aa0:	463b      	mov	r3, r7
  408aa2:	2800      	cmp	r0, #0
  408aa4:	d0c6      	beq.n	408a34 <_dtoa_r+0x8c4>
  408aa6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408aaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408aac:	9302      	str	r3, [sp, #8]
  408aae:	e523      	b.n	4084f8 <_dtoa_r+0x388>
  408ab0:	2300      	movs	r3, #0
  408ab2:	930b      	str	r3, [sp, #44]	; 0x2c
  408ab4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408ab6:	2b00      	cmp	r3, #0
  408ab8:	f340 80dc 	ble.w	408c74 <_dtoa_r+0xb04>
  408abc:	461f      	mov	r7, r3
  408abe:	461e      	mov	r6, r3
  408ac0:	930f      	str	r3, [sp, #60]	; 0x3c
  408ac2:	930a      	str	r3, [sp, #40]	; 0x28
  408ac4:	e6f6      	b.n	4088b4 <_dtoa_r+0x744>
  408ac6:	2301      	movs	r3, #1
  408ac8:	930b      	str	r3, [sp, #44]	; 0x2c
  408aca:	e7f3      	b.n	408ab4 <_dtoa_r+0x944>
  408acc:	f1ba 0f00 	cmp.w	sl, #0
  408ad0:	f47f ada8 	bne.w	408624 <_dtoa_r+0x4b4>
  408ad4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  408ad8:	2b00      	cmp	r3, #0
  408ada:	f47f adba 	bne.w	408652 <_dtoa_r+0x4e2>
  408ade:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  408ae2:	0d3f      	lsrs	r7, r7, #20
  408ae4:	053f      	lsls	r7, r7, #20
  408ae6:	2f00      	cmp	r7, #0
  408ae8:	f000 820d 	beq.w	408f06 <_dtoa_r+0xd96>
  408aec:	9b08      	ldr	r3, [sp, #32]
  408aee:	3301      	adds	r3, #1
  408af0:	9308      	str	r3, [sp, #32]
  408af2:	9b06      	ldr	r3, [sp, #24]
  408af4:	3301      	adds	r3, #1
  408af6:	9306      	str	r3, [sp, #24]
  408af8:	2301      	movs	r3, #1
  408afa:	930c      	str	r3, [sp, #48]	; 0x30
  408afc:	e5ab      	b.n	408656 <_dtoa_r+0x4e6>
  408afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408b00:	2b00      	cmp	r3, #0
  408b02:	f73f ac42 	bgt.w	40838a <_dtoa_r+0x21a>
  408b06:	f040 8221 	bne.w	408f4c <_dtoa_r+0xddc>
  408b0a:	2200      	movs	r2, #0
  408b0c:	4b38      	ldr	r3, [pc, #224]	; (408bf0 <_dtoa_r+0xa80>)
  408b0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408b12:	f001 fec9 	bl	40a8a8 <__aeabi_dmul>
  408b16:	4652      	mov	r2, sl
  408b18:	465b      	mov	r3, fp
  408b1a:	f002 f94b 	bl	40adb4 <__aeabi_dcmpge>
  408b1e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  408b22:	4646      	mov	r6, r8
  408b24:	2800      	cmp	r0, #0
  408b26:	d041      	beq.n	408bac <_dtoa_r+0xa3c>
  408b28:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408b2a:	9d04      	ldr	r5, [sp, #16]
  408b2c:	43db      	mvns	r3, r3
  408b2e:	9302      	str	r3, [sp, #8]
  408b30:	4641      	mov	r1, r8
  408b32:	4620      	mov	r0, r4
  408b34:	f000 fda6 	bl	409684 <_Bfree>
  408b38:	2e00      	cmp	r6, #0
  408b3a:	f43f acdd 	beq.w	4084f8 <_dtoa_r+0x388>
  408b3e:	e6a7      	b.n	408890 <_dtoa_r+0x720>
  408b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408b42:	4649      	mov	r1, r9
  408b44:	4620      	mov	r0, r4
  408b46:	f000 fed3 	bl	4098f0 <__pow5mult>
  408b4a:	4681      	mov	r9, r0
  408b4c:	e558      	b.n	408600 <_dtoa_r+0x490>
  408b4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408b50:	2a00      	cmp	r2, #0
  408b52:	f000 8187 	beq.w	408e64 <_dtoa_r+0xcf4>
  408b56:	f203 4333 	addw	r3, r3, #1075	; 0x433
  408b5a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408b5c:	9d08      	ldr	r5, [sp, #32]
  408b5e:	e4f2      	b.n	408546 <_dtoa_r+0x3d6>
  408b60:	f1ba 0f00 	cmp.w	sl, #0
  408b64:	f47f ad75 	bne.w	408652 <_dtoa_r+0x4e2>
  408b68:	e7b4      	b.n	408ad4 <_dtoa_r+0x964>
  408b6a:	f000 fd95 	bl	409698 <__multadd>
  408b6e:	4647      	mov	r7, r8
  408b70:	4606      	mov	r6, r0
  408b72:	4683      	mov	fp, r0
  408b74:	e5be      	b.n	4086f4 <_dtoa_r+0x584>
  408b76:	4601      	mov	r1, r0
  408b78:	4620      	mov	r0, r4
  408b7a:	9306      	str	r3, [sp, #24]
  408b7c:	f000 fd82 	bl	409684 <_Bfree>
  408b80:	2201      	movs	r2, #1
  408b82:	9b06      	ldr	r3, [sp, #24]
  408b84:	e5e0      	b.n	408748 <_dtoa_r+0x5d8>
  408b86:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408b88:	2b02      	cmp	r3, #2
  408b8a:	f77f ad96 	ble.w	4086ba <_dtoa_r+0x54a>
  408b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408b90:	2b00      	cmp	r3, #0
  408b92:	d1c9      	bne.n	408b28 <_dtoa_r+0x9b8>
  408b94:	4641      	mov	r1, r8
  408b96:	2205      	movs	r2, #5
  408b98:	4620      	mov	r0, r4
  408b9a:	f000 fd7d 	bl	409698 <__multadd>
  408b9e:	4601      	mov	r1, r0
  408ba0:	4680      	mov	r8, r0
  408ba2:	4648      	mov	r0, r9
  408ba4:	f000 ff46 	bl	409a34 <__mcmp>
  408ba8:	2800      	cmp	r0, #0
  408baa:	ddbd      	ble.n	408b28 <_dtoa_r+0x9b8>
  408bac:	9a02      	ldr	r2, [sp, #8]
  408bae:	9904      	ldr	r1, [sp, #16]
  408bb0:	2331      	movs	r3, #49	; 0x31
  408bb2:	3201      	adds	r2, #1
  408bb4:	9202      	str	r2, [sp, #8]
  408bb6:	700b      	strb	r3, [r1, #0]
  408bb8:	1c4d      	adds	r5, r1, #1
  408bba:	e7b9      	b.n	408b30 <_dtoa_r+0x9c0>
  408bbc:	9a02      	ldr	r2, [sp, #8]
  408bbe:	3201      	adds	r2, #1
  408bc0:	9202      	str	r2, [sp, #8]
  408bc2:	9a04      	ldr	r2, [sp, #16]
  408bc4:	2331      	movs	r3, #49	; 0x31
  408bc6:	7013      	strb	r3, [r2, #0]
  408bc8:	e652      	b.n	408870 <_dtoa_r+0x700>
  408bca:	2301      	movs	r3, #1
  408bcc:	930b      	str	r3, [sp, #44]	; 0x2c
  408bce:	e666      	b.n	40889e <_dtoa_r+0x72e>
  408bd0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  408bd4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408bd6:	e48f      	b.n	4084f8 <_dtoa_r+0x388>
  408bd8:	0040b718 	.word	0x0040b718
  408bdc:	0040b6f0 	.word	0x0040b6f0
  408be0:	3ff00000 	.word	0x3ff00000
  408be4:	401c0000 	.word	0x401c0000
  408be8:	3fe00000 	.word	0x3fe00000
  408bec:	40240000 	.word	0x40240000
  408bf0:	40140000 	.word	0x40140000
  408bf4:	4650      	mov	r0, sl
  408bf6:	f001 fdf1 	bl	40a7dc <__aeabi_i2d>
  408bfa:	463a      	mov	r2, r7
  408bfc:	4643      	mov	r3, r8
  408bfe:	f001 fe53 	bl	40a8a8 <__aeabi_dmul>
  408c02:	2200      	movs	r2, #0
  408c04:	4bc1      	ldr	r3, [pc, #772]	; (408f0c <_dtoa_r+0xd9c>)
  408c06:	f001 fc9d 	bl	40a544 <__adddf3>
  408c0a:	4605      	mov	r5, r0
  408c0c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408c10:	4641      	mov	r1, r8
  408c12:	2200      	movs	r2, #0
  408c14:	4bbe      	ldr	r3, [pc, #760]	; (408f10 <_dtoa_r+0xda0>)
  408c16:	4638      	mov	r0, r7
  408c18:	f001 fc92 	bl	40a540 <__aeabi_dsub>
  408c1c:	462a      	mov	r2, r5
  408c1e:	4633      	mov	r3, r6
  408c20:	4682      	mov	sl, r0
  408c22:	468b      	mov	fp, r1
  408c24:	f002 f8d0 	bl	40adc8 <__aeabi_dcmpgt>
  408c28:	4680      	mov	r8, r0
  408c2a:	2800      	cmp	r0, #0
  408c2c:	f040 8110 	bne.w	408e50 <_dtoa_r+0xce0>
  408c30:	462a      	mov	r2, r5
  408c32:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  408c36:	4650      	mov	r0, sl
  408c38:	4659      	mov	r1, fp
  408c3a:	f002 f8a7 	bl	40ad8c <__aeabi_dcmplt>
  408c3e:	b118      	cbz	r0, 408c48 <_dtoa_r+0xad8>
  408c40:	4646      	mov	r6, r8
  408c42:	e771      	b.n	408b28 <_dtoa_r+0x9b8>
  408c44:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408c48:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  408c4c:	f7ff bb8a 	b.w	408364 <_dtoa_r+0x1f4>
  408c50:	9804      	ldr	r0, [sp, #16]
  408c52:	f7ff babb 	b.w	4081cc <_dtoa_r+0x5c>
  408c56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408c58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408c5a:	970c      	str	r7, [sp, #48]	; 0x30
  408c5c:	1afb      	subs	r3, r7, r3
  408c5e:	441a      	add	r2, r3
  408c60:	920d      	str	r2, [sp, #52]	; 0x34
  408c62:	2700      	movs	r7, #0
  408c64:	e469      	b.n	40853a <_dtoa_r+0x3ca>
  408c66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  408c6a:	f04f 0a02 	mov.w	sl, #2
  408c6e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  408c72:	e657      	b.n	408924 <_dtoa_r+0x7b4>
  408c74:	2100      	movs	r1, #0
  408c76:	2301      	movs	r3, #1
  408c78:	6461      	str	r1, [r4, #68]	; 0x44
  408c7a:	4620      	mov	r0, r4
  408c7c:	9325      	str	r3, [sp, #148]	; 0x94
  408c7e:	f000 fcdb 	bl	409638 <_Balloc>
  408c82:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408c84:	9004      	str	r0, [sp, #16]
  408c86:	6420      	str	r0, [r4, #64]	; 0x40
  408c88:	930a      	str	r3, [sp, #40]	; 0x28
  408c8a:	930f      	str	r3, [sp, #60]	; 0x3c
  408c8c:	e629      	b.n	4088e2 <_dtoa_r+0x772>
  408c8e:	2a00      	cmp	r2, #0
  408c90:	46d0      	mov	r8, sl
  408c92:	f8cd b018 	str.w	fp, [sp, #24]
  408c96:	469a      	mov	sl, r3
  408c98:	dd11      	ble.n	408cbe <_dtoa_r+0xb4e>
  408c9a:	4649      	mov	r1, r9
  408c9c:	2201      	movs	r2, #1
  408c9e:	4620      	mov	r0, r4
  408ca0:	f000 fe76 	bl	409990 <__lshift>
  408ca4:	4641      	mov	r1, r8
  408ca6:	4681      	mov	r9, r0
  408ca8:	f000 fec4 	bl	409a34 <__mcmp>
  408cac:	2800      	cmp	r0, #0
  408cae:	f340 8146 	ble.w	408f3e <_dtoa_r+0xdce>
  408cb2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  408cb6:	f000 8106 	beq.w	408ec6 <_dtoa_r+0xd56>
  408cba:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  408cbe:	46b3      	mov	fp, r6
  408cc0:	f887 a000 	strb.w	sl, [r7]
  408cc4:	1c7d      	adds	r5, r7, #1
  408cc6:	9e06      	ldr	r6, [sp, #24]
  408cc8:	e5d2      	b.n	408870 <_dtoa_r+0x700>
  408cca:	d104      	bne.n	408cd6 <_dtoa_r+0xb66>
  408ccc:	f01a 0f01 	tst.w	sl, #1
  408cd0:	d001      	beq.n	408cd6 <_dtoa_r+0xb66>
  408cd2:	e5bd      	b.n	408850 <_dtoa_r+0x6e0>
  408cd4:	4615      	mov	r5, r2
  408cd6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408cda:	2b30      	cmp	r3, #48	; 0x30
  408cdc:	f105 32ff 	add.w	r2, r5, #4294967295
  408ce0:	d0f8      	beq.n	408cd4 <_dtoa_r+0xb64>
  408ce2:	e5c5      	b.n	408870 <_dtoa_r+0x700>
  408ce4:	9904      	ldr	r1, [sp, #16]
  408ce6:	2230      	movs	r2, #48	; 0x30
  408ce8:	700a      	strb	r2, [r1, #0]
  408cea:	9a02      	ldr	r2, [sp, #8]
  408cec:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408cf0:	3201      	adds	r2, #1
  408cf2:	9202      	str	r2, [sp, #8]
  408cf4:	f7ff bbfc 	b.w	4084f0 <_dtoa_r+0x380>
  408cf8:	f000 80bb 	beq.w	408e72 <_dtoa_r+0xd02>
  408cfc:	9b02      	ldr	r3, [sp, #8]
  408cfe:	425d      	negs	r5, r3
  408d00:	4b84      	ldr	r3, [pc, #528]	; (408f14 <_dtoa_r+0xda4>)
  408d02:	f005 020f 	and.w	r2, r5, #15
  408d06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408d0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  408d12:	f001 fdc9 	bl	40a8a8 <__aeabi_dmul>
  408d16:	112d      	asrs	r5, r5, #4
  408d18:	4607      	mov	r7, r0
  408d1a:	4688      	mov	r8, r1
  408d1c:	f000 812c 	beq.w	408f78 <_dtoa_r+0xe08>
  408d20:	4e7d      	ldr	r6, [pc, #500]	; (408f18 <_dtoa_r+0xda8>)
  408d22:	f04f 0a02 	mov.w	sl, #2
  408d26:	07eb      	lsls	r3, r5, #31
  408d28:	d509      	bpl.n	408d3e <_dtoa_r+0xbce>
  408d2a:	4638      	mov	r0, r7
  408d2c:	4641      	mov	r1, r8
  408d2e:	e9d6 2300 	ldrd	r2, r3, [r6]
  408d32:	f001 fdb9 	bl	40a8a8 <__aeabi_dmul>
  408d36:	f10a 0a01 	add.w	sl, sl, #1
  408d3a:	4607      	mov	r7, r0
  408d3c:	4688      	mov	r8, r1
  408d3e:	106d      	asrs	r5, r5, #1
  408d40:	f106 0608 	add.w	r6, r6, #8
  408d44:	d1ef      	bne.n	408d26 <_dtoa_r+0xbb6>
  408d46:	e608      	b.n	40895a <_dtoa_r+0x7ea>
  408d48:	6871      	ldr	r1, [r6, #4]
  408d4a:	4620      	mov	r0, r4
  408d4c:	f000 fc74 	bl	409638 <_Balloc>
  408d50:	6933      	ldr	r3, [r6, #16]
  408d52:	3302      	adds	r3, #2
  408d54:	009a      	lsls	r2, r3, #2
  408d56:	4605      	mov	r5, r0
  408d58:	f106 010c 	add.w	r1, r6, #12
  408d5c:	300c      	adds	r0, #12
  408d5e:	f7fd fd57 	bl	406810 <memcpy>
  408d62:	4629      	mov	r1, r5
  408d64:	2201      	movs	r2, #1
  408d66:	4620      	mov	r0, r4
  408d68:	f000 fe12 	bl	409990 <__lshift>
  408d6c:	9006      	str	r0, [sp, #24]
  408d6e:	e4b5      	b.n	4086dc <_dtoa_r+0x56c>
  408d70:	2b39      	cmp	r3, #57	; 0x39
  408d72:	f8cd b018 	str.w	fp, [sp, #24]
  408d76:	46d0      	mov	r8, sl
  408d78:	f000 80a5 	beq.w	408ec6 <_dtoa_r+0xd56>
  408d7c:	f103 0a01 	add.w	sl, r3, #1
  408d80:	46b3      	mov	fp, r6
  408d82:	f887 a000 	strb.w	sl, [r7]
  408d86:	1c7d      	adds	r5, r7, #1
  408d88:	9e06      	ldr	r6, [sp, #24]
  408d8a:	e571      	b.n	408870 <_dtoa_r+0x700>
  408d8c:	465a      	mov	r2, fp
  408d8e:	46d0      	mov	r8, sl
  408d90:	46b3      	mov	fp, r6
  408d92:	469a      	mov	sl, r3
  408d94:	4616      	mov	r6, r2
  408d96:	e54f      	b.n	408838 <_dtoa_r+0x6c8>
  408d98:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408d9a:	495e      	ldr	r1, [pc, #376]	; (408f14 <_dtoa_r+0xda4>)
  408d9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408da0:	462a      	mov	r2, r5
  408da2:	4633      	mov	r3, r6
  408da4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  408da8:	f001 fd7e 	bl	40a8a8 <__aeabi_dmul>
  408dac:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  408db0:	4638      	mov	r0, r7
  408db2:	4641      	mov	r1, r8
  408db4:	f002 f828 	bl	40ae08 <__aeabi_d2iz>
  408db8:	4605      	mov	r5, r0
  408dba:	f001 fd0f 	bl	40a7dc <__aeabi_i2d>
  408dbe:	460b      	mov	r3, r1
  408dc0:	4602      	mov	r2, r0
  408dc2:	4641      	mov	r1, r8
  408dc4:	4638      	mov	r0, r7
  408dc6:	f001 fbbb 	bl	40a540 <__aeabi_dsub>
  408dca:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408dcc:	460f      	mov	r7, r1
  408dce:	9904      	ldr	r1, [sp, #16]
  408dd0:	3530      	adds	r5, #48	; 0x30
  408dd2:	2b01      	cmp	r3, #1
  408dd4:	700d      	strb	r5, [r1, #0]
  408dd6:	4606      	mov	r6, r0
  408dd8:	f101 0501 	add.w	r5, r1, #1
  408ddc:	d026      	beq.n	408e2c <_dtoa_r+0xcbc>
  408dde:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408de0:	9a04      	ldr	r2, [sp, #16]
  408de2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408f20 <_dtoa_r+0xdb0>
  408de6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408dea:	4413      	add	r3, r2
  408dec:	f04f 0a00 	mov.w	sl, #0
  408df0:	4699      	mov	r9, r3
  408df2:	4652      	mov	r2, sl
  408df4:	465b      	mov	r3, fp
  408df6:	4630      	mov	r0, r6
  408df8:	4639      	mov	r1, r7
  408dfa:	f001 fd55 	bl	40a8a8 <__aeabi_dmul>
  408dfe:	460f      	mov	r7, r1
  408e00:	4606      	mov	r6, r0
  408e02:	f002 f801 	bl	40ae08 <__aeabi_d2iz>
  408e06:	4680      	mov	r8, r0
  408e08:	f001 fce8 	bl	40a7dc <__aeabi_i2d>
  408e0c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408e10:	4602      	mov	r2, r0
  408e12:	460b      	mov	r3, r1
  408e14:	4630      	mov	r0, r6
  408e16:	4639      	mov	r1, r7
  408e18:	f001 fb92 	bl	40a540 <__aeabi_dsub>
  408e1c:	f805 8b01 	strb.w	r8, [r5], #1
  408e20:	454d      	cmp	r5, r9
  408e22:	4606      	mov	r6, r0
  408e24:	460f      	mov	r7, r1
  408e26:	d1e4      	bne.n	408df2 <_dtoa_r+0xc82>
  408e28:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408e2c:	4b3b      	ldr	r3, [pc, #236]	; (408f1c <_dtoa_r+0xdac>)
  408e2e:	2200      	movs	r2, #0
  408e30:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408e34:	f001 fb86 	bl	40a544 <__adddf3>
  408e38:	4632      	mov	r2, r6
  408e3a:	463b      	mov	r3, r7
  408e3c:	f001 ffa6 	bl	40ad8c <__aeabi_dcmplt>
  408e40:	2800      	cmp	r0, #0
  408e42:	d046      	beq.n	408ed2 <_dtoa_r+0xd62>
  408e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408e46:	9302      	str	r3, [sp, #8]
  408e48:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408e4c:	f7ff bb43 	b.w	4084d6 <_dtoa_r+0x366>
  408e50:	f04f 0800 	mov.w	r8, #0
  408e54:	4646      	mov	r6, r8
  408e56:	e6a9      	b.n	408bac <_dtoa_r+0xa3c>
  408e58:	9b08      	ldr	r3, [sp, #32]
  408e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408e5c:	1a9d      	subs	r5, r3, r2
  408e5e:	2300      	movs	r3, #0
  408e60:	f7ff bb71 	b.w	408546 <_dtoa_r+0x3d6>
  408e64:	9b18      	ldr	r3, [sp, #96]	; 0x60
  408e66:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408e68:	9d08      	ldr	r5, [sp, #32]
  408e6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  408e6e:	f7ff bb6a 	b.w	408546 <_dtoa_r+0x3d6>
  408e72:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  408e76:	f04f 0a02 	mov.w	sl, #2
  408e7a:	e56e      	b.n	40895a <_dtoa_r+0x7ea>
  408e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408e7e:	2b00      	cmp	r3, #0
  408e80:	f43f aeb8 	beq.w	408bf4 <_dtoa_r+0xa84>
  408e84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408e86:	2b00      	cmp	r3, #0
  408e88:	f77f aede 	ble.w	408c48 <_dtoa_r+0xad8>
  408e8c:	2200      	movs	r2, #0
  408e8e:	4b24      	ldr	r3, [pc, #144]	; (408f20 <_dtoa_r+0xdb0>)
  408e90:	4638      	mov	r0, r7
  408e92:	4641      	mov	r1, r8
  408e94:	f001 fd08 	bl	40a8a8 <__aeabi_dmul>
  408e98:	4607      	mov	r7, r0
  408e9a:	4688      	mov	r8, r1
  408e9c:	f10a 0001 	add.w	r0, sl, #1
  408ea0:	f001 fc9c 	bl	40a7dc <__aeabi_i2d>
  408ea4:	463a      	mov	r2, r7
  408ea6:	4643      	mov	r3, r8
  408ea8:	f001 fcfe 	bl	40a8a8 <__aeabi_dmul>
  408eac:	2200      	movs	r2, #0
  408eae:	4b17      	ldr	r3, [pc, #92]	; (408f0c <_dtoa_r+0xd9c>)
  408eb0:	f001 fb48 	bl	40a544 <__adddf3>
  408eb4:	9a02      	ldr	r2, [sp, #8]
  408eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408eb8:	9312      	str	r3, [sp, #72]	; 0x48
  408eba:	3a01      	subs	r2, #1
  408ebc:	4605      	mov	r5, r0
  408ebe:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408ec2:	9215      	str	r2, [sp, #84]	; 0x54
  408ec4:	e56a      	b.n	40899c <_dtoa_r+0x82c>
  408ec6:	2239      	movs	r2, #57	; 0x39
  408ec8:	46b3      	mov	fp, r6
  408eca:	703a      	strb	r2, [r7, #0]
  408ecc:	9e06      	ldr	r6, [sp, #24]
  408ece:	1c7d      	adds	r5, r7, #1
  408ed0:	e4c0      	b.n	408854 <_dtoa_r+0x6e4>
  408ed2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  408ed6:	2000      	movs	r0, #0
  408ed8:	4910      	ldr	r1, [pc, #64]	; (408f1c <_dtoa_r+0xdac>)
  408eda:	f001 fb31 	bl	40a540 <__aeabi_dsub>
  408ede:	4632      	mov	r2, r6
  408ee0:	463b      	mov	r3, r7
  408ee2:	f001 ff71 	bl	40adc8 <__aeabi_dcmpgt>
  408ee6:	b908      	cbnz	r0, 408eec <_dtoa_r+0xd7c>
  408ee8:	e6ae      	b.n	408c48 <_dtoa_r+0xad8>
  408eea:	4615      	mov	r5, r2
  408eec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408ef0:	2b30      	cmp	r3, #48	; 0x30
  408ef2:	f105 32ff 	add.w	r2, r5, #4294967295
  408ef6:	d0f8      	beq.n	408eea <_dtoa_r+0xd7a>
  408ef8:	e5d7      	b.n	408aaa <_dtoa_r+0x93a>
  408efa:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408f00:	9302      	str	r3, [sp, #8]
  408f02:	f7ff bae8 	b.w	4084d6 <_dtoa_r+0x366>
  408f06:	970c      	str	r7, [sp, #48]	; 0x30
  408f08:	f7ff bba5 	b.w	408656 <_dtoa_r+0x4e6>
  408f0c:	401c0000 	.word	0x401c0000
  408f10:	40140000 	.word	0x40140000
  408f14:	0040b718 	.word	0x0040b718
  408f18:	0040b6f0 	.word	0x0040b6f0
  408f1c:	3fe00000 	.word	0x3fe00000
  408f20:	40240000 	.word	0x40240000
  408f24:	2b39      	cmp	r3, #57	; 0x39
  408f26:	f8cd b018 	str.w	fp, [sp, #24]
  408f2a:	46d0      	mov	r8, sl
  408f2c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408f30:	469a      	mov	sl, r3
  408f32:	d0c8      	beq.n	408ec6 <_dtoa_r+0xd56>
  408f34:	f1bb 0f00 	cmp.w	fp, #0
  408f38:	f73f aebf 	bgt.w	408cba <_dtoa_r+0xb4a>
  408f3c:	e6bf      	b.n	408cbe <_dtoa_r+0xb4e>
  408f3e:	f47f aebe 	bne.w	408cbe <_dtoa_r+0xb4e>
  408f42:	f01a 0f01 	tst.w	sl, #1
  408f46:	f43f aeba 	beq.w	408cbe <_dtoa_r+0xb4e>
  408f4a:	e6b2      	b.n	408cb2 <_dtoa_r+0xb42>
  408f4c:	f04f 0800 	mov.w	r8, #0
  408f50:	4646      	mov	r6, r8
  408f52:	e5e9      	b.n	408b28 <_dtoa_r+0x9b8>
  408f54:	4631      	mov	r1, r6
  408f56:	2300      	movs	r3, #0
  408f58:	220a      	movs	r2, #10
  408f5a:	4620      	mov	r0, r4
  408f5c:	f000 fb9c 	bl	409698 <__multadd>
  408f60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408f62:	2b00      	cmp	r3, #0
  408f64:	4606      	mov	r6, r0
  408f66:	dd0a      	ble.n	408f7e <_dtoa_r+0xe0e>
  408f68:	930a      	str	r3, [sp, #40]	; 0x28
  408f6a:	f7ff bbaa 	b.w	4086c2 <_dtoa_r+0x552>
  408f6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408f70:	2b02      	cmp	r3, #2
  408f72:	dc23      	bgt.n	408fbc <_dtoa_r+0xe4c>
  408f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408f76:	e43b      	b.n	4087f0 <_dtoa_r+0x680>
  408f78:	f04f 0a02 	mov.w	sl, #2
  408f7c:	e4ed      	b.n	40895a <_dtoa_r+0x7ea>
  408f7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408f80:	2b02      	cmp	r3, #2
  408f82:	dc1b      	bgt.n	408fbc <_dtoa_r+0xe4c>
  408f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408f86:	e7ef      	b.n	408f68 <_dtoa_r+0xdf8>
  408f88:	2500      	movs	r5, #0
  408f8a:	6465      	str	r5, [r4, #68]	; 0x44
  408f8c:	4629      	mov	r1, r5
  408f8e:	4620      	mov	r0, r4
  408f90:	f000 fb52 	bl	409638 <_Balloc>
  408f94:	f04f 33ff 	mov.w	r3, #4294967295
  408f98:	930a      	str	r3, [sp, #40]	; 0x28
  408f9a:	930f      	str	r3, [sp, #60]	; 0x3c
  408f9c:	2301      	movs	r3, #1
  408f9e:	9004      	str	r0, [sp, #16]
  408fa0:	9525      	str	r5, [sp, #148]	; 0x94
  408fa2:	6420      	str	r0, [r4, #64]	; 0x40
  408fa4:	930b      	str	r3, [sp, #44]	; 0x2c
  408fa6:	f7ff b9dd 	b.w	408364 <_dtoa_r+0x1f4>
  408faa:	2501      	movs	r5, #1
  408fac:	f7ff b9a5 	b.w	4082fa <_dtoa_r+0x18a>
  408fb0:	f43f ab69 	beq.w	408686 <_dtoa_r+0x516>
  408fb4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408fb8:	f7ff bbf9 	b.w	4087ae <_dtoa_r+0x63e>
  408fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408fbe:	930a      	str	r3, [sp, #40]	; 0x28
  408fc0:	e5e5      	b.n	408b8e <_dtoa_r+0xa1e>
  408fc2:	bf00      	nop

00408fc4 <__libc_fini_array>:
  408fc4:	b538      	push	{r3, r4, r5, lr}
  408fc6:	4c0a      	ldr	r4, [pc, #40]	; (408ff0 <__libc_fini_array+0x2c>)
  408fc8:	4d0a      	ldr	r5, [pc, #40]	; (408ff4 <__libc_fini_array+0x30>)
  408fca:	1b64      	subs	r4, r4, r5
  408fcc:	10a4      	asrs	r4, r4, #2
  408fce:	d00a      	beq.n	408fe6 <__libc_fini_array+0x22>
  408fd0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408fd4:	3b01      	subs	r3, #1
  408fd6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408fda:	3c01      	subs	r4, #1
  408fdc:	f855 3904 	ldr.w	r3, [r5], #-4
  408fe0:	4798      	blx	r3
  408fe2:	2c00      	cmp	r4, #0
  408fe4:	d1f9      	bne.n	408fda <__libc_fini_array+0x16>
  408fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408fea:	f002 bc93 	b.w	40b914 <_fini>
  408fee:	bf00      	nop
  408ff0:	0040b924 	.word	0x0040b924
  408ff4:	0040b920 	.word	0x0040b920

00408ff8 <_localeconv_r>:
  408ff8:	4a04      	ldr	r2, [pc, #16]	; (40900c <_localeconv_r+0x14>)
  408ffa:	4b05      	ldr	r3, [pc, #20]	; (409010 <_localeconv_r+0x18>)
  408ffc:	6812      	ldr	r2, [r2, #0]
  408ffe:	6b50      	ldr	r0, [r2, #52]	; 0x34
  409000:	2800      	cmp	r0, #0
  409002:	bf08      	it	eq
  409004:	4618      	moveq	r0, r3
  409006:	30f0      	adds	r0, #240	; 0xf0
  409008:	4770      	bx	lr
  40900a:	bf00      	nop
  40900c:	20000020 	.word	0x20000020
  409010:	20000864 	.word	0x20000864

00409014 <__retarget_lock_acquire_recursive>:
  409014:	4770      	bx	lr
  409016:	bf00      	nop

00409018 <__retarget_lock_release_recursive>:
  409018:	4770      	bx	lr
  40901a:	bf00      	nop

0040901c <_malloc_r>:
  40901c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409020:	f101 060b 	add.w	r6, r1, #11
  409024:	2e16      	cmp	r6, #22
  409026:	b083      	sub	sp, #12
  409028:	4605      	mov	r5, r0
  40902a:	f240 809e 	bls.w	40916a <_malloc_r+0x14e>
  40902e:	f036 0607 	bics.w	r6, r6, #7
  409032:	f100 80bd 	bmi.w	4091b0 <_malloc_r+0x194>
  409036:	42b1      	cmp	r1, r6
  409038:	f200 80ba 	bhi.w	4091b0 <_malloc_r+0x194>
  40903c:	f000 faf0 	bl	409620 <__malloc_lock>
  409040:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  409044:	f0c0 8293 	bcc.w	40956e <_malloc_r+0x552>
  409048:	0a73      	lsrs	r3, r6, #9
  40904a:	f000 80b8 	beq.w	4091be <_malloc_r+0x1a2>
  40904e:	2b04      	cmp	r3, #4
  409050:	f200 8179 	bhi.w	409346 <_malloc_r+0x32a>
  409054:	09b3      	lsrs	r3, r6, #6
  409056:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40905a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40905e:	00c3      	lsls	r3, r0, #3
  409060:	4fbf      	ldr	r7, [pc, #764]	; (409360 <_malloc_r+0x344>)
  409062:	443b      	add	r3, r7
  409064:	f1a3 0108 	sub.w	r1, r3, #8
  409068:	685c      	ldr	r4, [r3, #4]
  40906a:	42a1      	cmp	r1, r4
  40906c:	d106      	bne.n	40907c <_malloc_r+0x60>
  40906e:	e00c      	b.n	40908a <_malloc_r+0x6e>
  409070:	2a00      	cmp	r2, #0
  409072:	f280 80aa 	bge.w	4091ca <_malloc_r+0x1ae>
  409076:	68e4      	ldr	r4, [r4, #12]
  409078:	42a1      	cmp	r1, r4
  40907a:	d006      	beq.n	40908a <_malloc_r+0x6e>
  40907c:	6863      	ldr	r3, [r4, #4]
  40907e:	f023 0303 	bic.w	r3, r3, #3
  409082:	1b9a      	subs	r2, r3, r6
  409084:	2a0f      	cmp	r2, #15
  409086:	ddf3      	ble.n	409070 <_malloc_r+0x54>
  409088:	4670      	mov	r0, lr
  40908a:	693c      	ldr	r4, [r7, #16]
  40908c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 409374 <_malloc_r+0x358>
  409090:	4574      	cmp	r4, lr
  409092:	f000 81ab 	beq.w	4093ec <_malloc_r+0x3d0>
  409096:	6863      	ldr	r3, [r4, #4]
  409098:	f023 0303 	bic.w	r3, r3, #3
  40909c:	1b9a      	subs	r2, r3, r6
  40909e:	2a0f      	cmp	r2, #15
  4090a0:	f300 8190 	bgt.w	4093c4 <_malloc_r+0x3a8>
  4090a4:	2a00      	cmp	r2, #0
  4090a6:	f8c7 e014 	str.w	lr, [r7, #20]
  4090aa:	f8c7 e010 	str.w	lr, [r7, #16]
  4090ae:	f280 809d 	bge.w	4091ec <_malloc_r+0x1d0>
  4090b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4090b6:	f080 8161 	bcs.w	40937c <_malloc_r+0x360>
  4090ba:	08db      	lsrs	r3, r3, #3
  4090bc:	f103 0c01 	add.w	ip, r3, #1
  4090c0:	1099      	asrs	r1, r3, #2
  4090c2:	687a      	ldr	r2, [r7, #4]
  4090c4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4090c8:	f8c4 8008 	str.w	r8, [r4, #8]
  4090cc:	2301      	movs	r3, #1
  4090ce:	408b      	lsls	r3, r1
  4090d0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4090d4:	4313      	orrs	r3, r2
  4090d6:	3908      	subs	r1, #8
  4090d8:	60e1      	str	r1, [r4, #12]
  4090da:	607b      	str	r3, [r7, #4]
  4090dc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4090e0:	f8c8 400c 	str.w	r4, [r8, #12]
  4090e4:	1082      	asrs	r2, r0, #2
  4090e6:	2401      	movs	r4, #1
  4090e8:	4094      	lsls	r4, r2
  4090ea:	429c      	cmp	r4, r3
  4090ec:	f200 808b 	bhi.w	409206 <_malloc_r+0x1ea>
  4090f0:	421c      	tst	r4, r3
  4090f2:	d106      	bne.n	409102 <_malloc_r+0xe6>
  4090f4:	f020 0003 	bic.w	r0, r0, #3
  4090f8:	0064      	lsls	r4, r4, #1
  4090fa:	421c      	tst	r4, r3
  4090fc:	f100 0004 	add.w	r0, r0, #4
  409100:	d0fa      	beq.n	4090f8 <_malloc_r+0xdc>
  409102:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  409106:	46cc      	mov	ip, r9
  409108:	4680      	mov	r8, r0
  40910a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40910e:	459c      	cmp	ip, r3
  409110:	d107      	bne.n	409122 <_malloc_r+0x106>
  409112:	e16d      	b.n	4093f0 <_malloc_r+0x3d4>
  409114:	2a00      	cmp	r2, #0
  409116:	f280 817b 	bge.w	409410 <_malloc_r+0x3f4>
  40911a:	68db      	ldr	r3, [r3, #12]
  40911c:	459c      	cmp	ip, r3
  40911e:	f000 8167 	beq.w	4093f0 <_malloc_r+0x3d4>
  409122:	6859      	ldr	r1, [r3, #4]
  409124:	f021 0103 	bic.w	r1, r1, #3
  409128:	1b8a      	subs	r2, r1, r6
  40912a:	2a0f      	cmp	r2, #15
  40912c:	ddf2      	ble.n	409114 <_malloc_r+0xf8>
  40912e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  409132:	f8d3 8008 	ldr.w	r8, [r3, #8]
  409136:	9300      	str	r3, [sp, #0]
  409138:	199c      	adds	r4, r3, r6
  40913a:	4628      	mov	r0, r5
  40913c:	f046 0601 	orr.w	r6, r6, #1
  409140:	f042 0501 	orr.w	r5, r2, #1
  409144:	605e      	str	r6, [r3, #4]
  409146:	f8c8 c00c 	str.w	ip, [r8, #12]
  40914a:	f8cc 8008 	str.w	r8, [ip, #8]
  40914e:	617c      	str	r4, [r7, #20]
  409150:	613c      	str	r4, [r7, #16]
  409152:	f8c4 e00c 	str.w	lr, [r4, #12]
  409156:	f8c4 e008 	str.w	lr, [r4, #8]
  40915a:	6065      	str	r5, [r4, #4]
  40915c:	505a      	str	r2, [r3, r1]
  40915e:	f000 fa65 	bl	40962c <__malloc_unlock>
  409162:	9b00      	ldr	r3, [sp, #0]
  409164:	f103 0408 	add.w	r4, r3, #8
  409168:	e01e      	b.n	4091a8 <_malloc_r+0x18c>
  40916a:	2910      	cmp	r1, #16
  40916c:	d820      	bhi.n	4091b0 <_malloc_r+0x194>
  40916e:	f000 fa57 	bl	409620 <__malloc_lock>
  409172:	2610      	movs	r6, #16
  409174:	2318      	movs	r3, #24
  409176:	2002      	movs	r0, #2
  409178:	4f79      	ldr	r7, [pc, #484]	; (409360 <_malloc_r+0x344>)
  40917a:	443b      	add	r3, r7
  40917c:	f1a3 0208 	sub.w	r2, r3, #8
  409180:	685c      	ldr	r4, [r3, #4]
  409182:	4294      	cmp	r4, r2
  409184:	f000 813d 	beq.w	409402 <_malloc_r+0x3e6>
  409188:	6863      	ldr	r3, [r4, #4]
  40918a:	68e1      	ldr	r1, [r4, #12]
  40918c:	68a6      	ldr	r6, [r4, #8]
  40918e:	f023 0303 	bic.w	r3, r3, #3
  409192:	4423      	add	r3, r4
  409194:	4628      	mov	r0, r5
  409196:	685a      	ldr	r2, [r3, #4]
  409198:	60f1      	str	r1, [r6, #12]
  40919a:	f042 0201 	orr.w	r2, r2, #1
  40919e:	608e      	str	r6, [r1, #8]
  4091a0:	605a      	str	r2, [r3, #4]
  4091a2:	f000 fa43 	bl	40962c <__malloc_unlock>
  4091a6:	3408      	adds	r4, #8
  4091a8:	4620      	mov	r0, r4
  4091aa:	b003      	add	sp, #12
  4091ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091b0:	2400      	movs	r4, #0
  4091b2:	230c      	movs	r3, #12
  4091b4:	4620      	mov	r0, r4
  4091b6:	602b      	str	r3, [r5, #0]
  4091b8:	b003      	add	sp, #12
  4091ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091be:	2040      	movs	r0, #64	; 0x40
  4091c0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4091c4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4091c8:	e74a      	b.n	409060 <_malloc_r+0x44>
  4091ca:	4423      	add	r3, r4
  4091cc:	68e1      	ldr	r1, [r4, #12]
  4091ce:	685a      	ldr	r2, [r3, #4]
  4091d0:	68a6      	ldr	r6, [r4, #8]
  4091d2:	f042 0201 	orr.w	r2, r2, #1
  4091d6:	60f1      	str	r1, [r6, #12]
  4091d8:	4628      	mov	r0, r5
  4091da:	608e      	str	r6, [r1, #8]
  4091dc:	605a      	str	r2, [r3, #4]
  4091de:	f000 fa25 	bl	40962c <__malloc_unlock>
  4091e2:	3408      	adds	r4, #8
  4091e4:	4620      	mov	r0, r4
  4091e6:	b003      	add	sp, #12
  4091e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091ec:	4423      	add	r3, r4
  4091ee:	4628      	mov	r0, r5
  4091f0:	685a      	ldr	r2, [r3, #4]
  4091f2:	f042 0201 	orr.w	r2, r2, #1
  4091f6:	605a      	str	r2, [r3, #4]
  4091f8:	f000 fa18 	bl	40962c <__malloc_unlock>
  4091fc:	3408      	adds	r4, #8
  4091fe:	4620      	mov	r0, r4
  409200:	b003      	add	sp, #12
  409202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409206:	68bc      	ldr	r4, [r7, #8]
  409208:	6863      	ldr	r3, [r4, #4]
  40920a:	f023 0803 	bic.w	r8, r3, #3
  40920e:	45b0      	cmp	r8, r6
  409210:	d304      	bcc.n	40921c <_malloc_r+0x200>
  409212:	eba8 0306 	sub.w	r3, r8, r6
  409216:	2b0f      	cmp	r3, #15
  409218:	f300 8085 	bgt.w	409326 <_malloc_r+0x30a>
  40921c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 409378 <_malloc_r+0x35c>
  409220:	4b50      	ldr	r3, [pc, #320]	; (409364 <_malloc_r+0x348>)
  409222:	f8d9 2000 	ldr.w	r2, [r9]
  409226:	681b      	ldr	r3, [r3, #0]
  409228:	3201      	adds	r2, #1
  40922a:	4433      	add	r3, r6
  40922c:	eb04 0a08 	add.w	sl, r4, r8
  409230:	f000 8155 	beq.w	4094de <_malloc_r+0x4c2>
  409234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  409238:	330f      	adds	r3, #15
  40923a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40923e:	f02b 0b0f 	bic.w	fp, fp, #15
  409242:	4659      	mov	r1, fp
  409244:	4628      	mov	r0, r5
  409246:	f000 fcf1 	bl	409c2c <_sbrk_r>
  40924a:	1c41      	adds	r1, r0, #1
  40924c:	4602      	mov	r2, r0
  40924e:	f000 80fc 	beq.w	40944a <_malloc_r+0x42e>
  409252:	4582      	cmp	sl, r0
  409254:	f200 80f7 	bhi.w	409446 <_malloc_r+0x42a>
  409258:	4b43      	ldr	r3, [pc, #268]	; (409368 <_malloc_r+0x34c>)
  40925a:	6819      	ldr	r1, [r3, #0]
  40925c:	4459      	add	r1, fp
  40925e:	6019      	str	r1, [r3, #0]
  409260:	f000 814d 	beq.w	4094fe <_malloc_r+0x4e2>
  409264:	f8d9 0000 	ldr.w	r0, [r9]
  409268:	3001      	adds	r0, #1
  40926a:	bf1b      	ittet	ne
  40926c:	eba2 0a0a 	subne.w	sl, r2, sl
  409270:	4451      	addne	r1, sl
  409272:	f8c9 2000 	streq.w	r2, [r9]
  409276:	6019      	strne	r1, [r3, #0]
  409278:	f012 0107 	ands.w	r1, r2, #7
  40927c:	f000 8115 	beq.w	4094aa <_malloc_r+0x48e>
  409280:	f1c1 0008 	rsb	r0, r1, #8
  409284:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  409288:	4402      	add	r2, r0
  40928a:	3108      	adds	r1, #8
  40928c:	eb02 090b 	add.w	r9, r2, fp
  409290:	f3c9 090b 	ubfx	r9, r9, #0, #12
  409294:	eba1 0909 	sub.w	r9, r1, r9
  409298:	4649      	mov	r1, r9
  40929a:	4628      	mov	r0, r5
  40929c:	9301      	str	r3, [sp, #4]
  40929e:	9200      	str	r2, [sp, #0]
  4092a0:	f000 fcc4 	bl	409c2c <_sbrk_r>
  4092a4:	1c43      	adds	r3, r0, #1
  4092a6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4092aa:	f000 8143 	beq.w	409534 <_malloc_r+0x518>
  4092ae:	1a80      	subs	r0, r0, r2
  4092b0:	4448      	add	r0, r9
  4092b2:	f040 0001 	orr.w	r0, r0, #1
  4092b6:	6819      	ldr	r1, [r3, #0]
  4092b8:	60ba      	str	r2, [r7, #8]
  4092ba:	4449      	add	r1, r9
  4092bc:	42bc      	cmp	r4, r7
  4092be:	6050      	str	r0, [r2, #4]
  4092c0:	6019      	str	r1, [r3, #0]
  4092c2:	d017      	beq.n	4092f4 <_malloc_r+0x2d8>
  4092c4:	f1b8 0f0f 	cmp.w	r8, #15
  4092c8:	f240 80fb 	bls.w	4094c2 <_malloc_r+0x4a6>
  4092cc:	6860      	ldr	r0, [r4, #4]
  4092ce:	f1a8 020c 	sub.w	r2, r8, #12
  4092d2:	f022 0207 	bic.w	r2, r2, #7
  4092d6:	eb04 0e02 	add.w	lr, r4, r2
  4092da:	f000 0001 	and.w	r0, r0, #1
  4092de:	f04f 0c05 	mov.w	ip, #5
  4092e2:	4310      	orrs	r0, r2
  4092e4:	2a0f      	cmp	r2, #15
  4092e6:	6060      	str	r0, [r4, #4]
  4092e8:	f8ce c004 	str.w	ip, [lr, #4]
  4092ec:	f8ce c008 	str.w	ip, [lr, #8]
  4092f0:	f200 8117 	bhi.w	409522 <_malloc_r+0x506>
  4092f4:	4b1d      	ldr	r3, [pc, #116]	; (40936c <_malloc_r+0x350>)
  4092f6:	68bc      	ldr	r4, [r7, #8]
  4092f8:	681a      	ldr	r2, [r3, #0]
  4092fa:	4291      	cmp	r1, r2
  4092fc:	bf88      	it	hi
  4092fe:	6019      	strhi	r1, [r3, #0]
  409300:	4b1b      	ldr	r3, [pc, #108]	; (409370 <_malloc_r+0x354>)
  409302:	681a      	ldr	r2, [r3, #0]
  409304:	4291      	cmp	r1, r2
  409306:	6862      	ldr	r2, [r4, #4]
  409308:	bf88      	it	hi
  40930a:	6019      	strhi	r1, [r3, #0]
  40930c:	f022 0203 	bic.w	r2, r2, #3
  409310:	4296      	cmp	r6, r2
  409312:	eba2 0306 	sub.w	r3, r2, r6
  409316:	d801      	bhi.n	40931c <_malloc_r+0x300>
  409318:	2b0f      	cmp	r3, #15
  40931a:	dc04      	bgt.n	409326 <_malloc_r+0x30a>
  40931c:	4628      	mov	r0, r5
  40931e:	f000 f985 	bl	40962c <__malloc_unlock>
  409322:	2400      	movs	r4, #0
  409324:	e740      	b.n	4091a8 <_malloc_r+0x18c>
  409326:	19a2      	adds	r2, r4, r6
  409328:	f043 0301 	orr.w	r3, r3, #1
  40932c:	f046 0601 	orr.w	r6, r6, #1
  409330:	6066      	str	r6, [r4, #4]
  409332:	4628      	mov	r0, r5
  409334:	60ba      	str	r2, [r7, #8]
  409336:	6053      	str	r3, [r2, #4]
  409338:	f000 f978 	bl	40962c <__malloc_unlock>
  40933c:	3408      	adds	r4, #8
  40933e:	4620      	mov	r0, r4
  409340:	b003      	add	sp, #12
  409342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409346:	2b14      	cmp	r3, #20
  409348:	d971      	bls.n	40942e <_malloc_r+0x412>
  40934a:	2b54      	cmp	r3, #84	; 0x54
  40934c:	f200 80a3 	bhi.w	409496 <_malloc_r+0x47a>
  409350:	0b33      	lsrs	r3, r6, #12
  409352:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  409356:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40935a:	00c3      	lsls	r3, r0, #3
  40935c:	e680      	b.n	409060 <_malloc_r+0x44>
  40935e:	bf00      	nop
  409360:	20000454 	.word	0x20000454
  409364:	2000ac80 	.word	0x2000ac80
  409368:	2000ac50 	.word	0x2000ac50
  40936c:	2000ac78 	.word	0x2000ac78
  409370:	2000ac7c 	.word	0x2000ac7c
  409374:	2000045c 	.word	0x2000045c
  409378:	2000085c 	.word	0x2000085c
  40937c:	0a5a      	lsrs	r2, r3, #9
  40937e:	2a04      	cmp	r2, #4
  409380:	d95b      	bls.n	40943a <_malloc_r+0x41e>
  409382:	2a14      	cmp	r2, #20
  409384:	f200 80ae 	bhi.w	4094e4 <_malloc_r+0x4c8>
  409388:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40938c:	00c9      	lsls	r1, r1, #3
  40938e:	325b      	adds	r2, #91	; 0x5b
  409390:	eb07 0c01 	add.w	ip, r7, r1
  409394:	5879      	ldr	r1, [r7, r1]
  409396:	f1ac 0c08 	sub.w	ip, ip, #8
  40939a:	458c      	cmp	ip, r1
  40939c:	f000 8088 	beq.w	4094b0 <_malloc_r+0x494>
  4093a0:	684a      	ldr	r2, [r1, #4]
  4093a2:	f022 0203 	bic.w	r2, r2, #3
  4093a6:	4293      	cmp	r3, r2
  4093a8:	d273      	bcs.n	409492 <_malloc_r+0x476>
  4093aa:	6889      	ldr	r1, [r1, #8]
  4093ac:	458c      	cmp	ip, r1
  4093ae:	d1f7      	bne.n	4093a0 <_malloc_r+0x384>
  4093b0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4093b4:	687b      	ldr	r3, [r7, #4]
  4093b6:	60e2      	str	r2, [r4, #12]
  4093b8:	f8c4 c008 	str.w	ip, [r4, #8]
  4093bc:	6094      	str	r4, [r2, #8]
  4093be:	f8cc 400c 	str.w	r4, [ip, #12]
  4093c2:	e68f      	b.n	4090e4 <_malloc_r+0xc8>
  4093c4:	19a1      	adds	r1, r4, r6
  4093c6:	f046 0c01 	orr.w	ip, r6, #1
  4093ca:	f042 0601 	orr.w	r6, r2, #1
  4093ce:	f8c4 c004 	str.w	ip, [r4, #4]
  4093d2:	4628      	mov	r0, r5
  4093d4:	6179      	str	r1, [r7, #20]
  4093d6:	6139      	str	r1, [r7, #16]
  4093d8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4093dc:	f8c1 e008 	str.w	lr, [r1, #8]
  4093e0:	604e      	str	r6, [r1, #4]
  4093e2:	50e2      	str	r2, [r4, r3]
  4093e4:	f000 f922 	bl	40962c <__malloc_unlock>
  4093e8:	3408      	adds	r4, #8
  4093ea:	e6dd      	b.n	4091a8 <_malloc_r+0x18c>
  4093ec:	687b      	ldr	r3, [r7, #4]
  4093ee:	e679      	b.n	4090e4 <_malloc_r+0xc8>
  4093f0:	f108 0801 	add.w	r8, r8, #1
  4093f4:	f018 0f03 	tst.w	r8, #3
  4093f8:	f10c 0c08 	add.w	ip, ip, #8
  4093fc:	f47f ae85 	bne.w	40910a <_malloc_r+0xee>
  409400:	e02d      	b.n	40945e <_malloc_r+0x442>
  409402:	68dc      	ldr	r4, [r3, #12]
  409404:	42a3      	cmp	r3, r4
  409406:	bf08      	it	eq
  409408:	3002      	addeq	r0, #2
  40940a:	f43f ae3e 	beq.w	40908a <_malloc_r+0x6e>
  40940e:	e6bb      	b.n	409188 <_malloc_r+0x16c>
  409410:	4419      	add	r1, r3
  409412:	461c      	mov	r4, r3
  409414:	684a      	ldr	r2, [r1, #4]
  409416:	68db      	ldr	r3, [r3, #12]
  409418:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40941c:	f042 0201 	orr.w	r2, r2, #1
  409420:	604a      	str	r2, [r1, #4]
  409422:	4628      	mov	r0, r5
  409424:	60f3      	str	r3, [r6, #12]
  409426:	609e      	str	r6, [r3, #8]
  409428:	f000 f900 	bl	40962c <__malloc_unlock>
  40942c:	e6bc      	b.n	4091a8 <_malloc_r+0x18c>
  40942e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  409432:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  409436:	00c3      	lsls	r3, r0, #3
  409438:	e612      	b.n	409060 <_malloc_r+0x44>
  40943a:	099a      	lsrs	r2, r3, #6
  40943c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  409440:	00c9      	lsls	r1, r1, #3
  409442:	3238      	adds	r2, #56	; 0x38
  409444:	e7a4      	b.n	409390 <_malloc_r+0x374>
  409446:	42bc      	cmp	r4, r7
  409448:	d054      	beq.n	4094f4 <_malloc_r+0x4d8>
  40944a:	68bc      	ldr	r4, [r7, #8]
  40944c:	6862      	ldr	r2, [r4, #4]
  40944e:	f022 0203 	bic.w	r2, r2, #3
  409452:	e75d      	b.n	409310 <_malloc_r+0x2f4>
  409454:	f859 3908 	ldr.w	r3, [r9], #-8
  409458:	4599      	cmp	r9, r3
  40945a:	f040 8086 	bne.w	40956a <_malloc_r+0x54e>
  40945e:	f010 0f03 	tst.w	r0, #3
  409462:	f100 30ff 	add.w	r0, r0, #4294967295
  409466:	d1f5      	bne.n	409454 <_malloc_r+0x438>
  409468:	687b      	ldr	r3, [r7, #4]
  40946a:	ea23 0304 	bic.w	r3, r3, r4
  40946e:	607b      	str	r3, [r7, #4]
  409470:	0064      	lsls	r4, r4, #1
  409472:	429c      	cmp	r4, r3
  409474:	f63f aec7 	bhi.w	409206 <_malloc_r+0x1ea>
  409478:	2c00      	cmp	r4, #0
  40947a:	f43f aec4 	beq.w	409206 <_malloc_r+0x1ea>
  40947e:	421c      	tst	r4, r3
  409480:	4640      	mov	r0, r8
  409482:	f47f ae3e 	bne.w	409102 <_malloc_r+0xe6>
  409486:	0064      	lsls	r4, r4, #1
  409488:	421c      	tst	r4, r3
  40948a:	f100 0004 	add.w	r0, r0, #4
  40948e:	d0fa      	beq.n	409486 <_malloc_r+0x46a>
  409490:	e637      	b.n	409102 <_malloc_r+0xe6>
  409492:	468c      	mov	ip, r1
  409494:	e78c      	b.n	4093b0 <_malloc_r+0x394>
  409496:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40949a:	d815      	bhi.n	4094c8 <_malloc_r+0x4ac>
  40949c:	0bf3      	lsrs	r3, r6, #15
  40949e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4094a2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4094a6:	00c3      	lsls	r3, r0, #3
  4094a8:	e5da      	b.n	409060 <_malloc_r+0x44>
  4094aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4094ae:	e6ed      	b.n	40928c <_malloc_r+0x270>
  4094b0:	687b      	ldr	r3, [r7, #4]
  4094b2:	1092      	asrs	r2, r2, #2
  4094b4:	2101      	movs	r1, #1
  4094b6:	fa01 f202 	lsl.w	r2, r1, r2
  4094ba:	4313      	orrs	r3, r2
  4094bc:	607b      	str	r3, [r7, #4]
  4094be:	4662      	mov	r2, ip
  4094c0:	e779      	b.n	4093b6 <_malloc_r+0x39a>
  4094c2:	2301      	movs	r3, #1
  4094c4:	6053      	str	r3, [r2, #4]
  4094c6:	e729      	b.n	40931c <_malloc_r+0x300>
  4094c8:	f240 5254 	movw	r2, #1364	; 0x554
  4094cc:	4293      	cmp	r3, r2
  4094ce:	d822      	bhi.n	409516 <_malloc_r+0x4fa>
  4094d0:	0cb3      	lsrs	r3, r6, #18
  4094d2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4094d6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4094da:	00c3      	lsls	r3, r0, #3
  4094dc:	e5c0      	b.n	409060 <_malloc_r+0x44>
  4094de:	f103 0b10 	add.w	fp, r3, #16
  4094e2:	e6ae      	b.n	409242 <_malloc_r+0x226>
  4094e4:	2a54      	cmp	r2, #84	; 0x54
  4094e6:	d829      	bhi.n	40953c <_malloc_r+0x520>
  4094e8:	0b1a      	lsrs	r2, r3, #12
  4094ea:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4094ee:	00c9      	lsls	r1, r1, #3
  4094f0:	326e      	adds	r2, #110	; 0x6e
  4094f2:	e74d      	b.n	409390 <_malloc_r+0x374>
  4094f4:	4b20      	ldr	r3, [pc, #128]	; (409578 <_malloc_r+0x55c>)
  4094f6:	6819      	ldr	r1, [r3, #0]
  4094f8:	4459      	add	r1, fp
  4094fa:	6019      	str	r1, [r3, #0]
  4094fc:	e6b2      	b.n	409264 <_malloc_r+0x248>
  4094fe:	f3ca 000b 	ubfx	r0, sl, #0, #12
  409502:	2800      	cmp	r0, #0
  409504:	f47f aeae 	bne.w	409264 <_malloc_r+0x248>
  409508:	eb08 030b 	add.w	r3, r8, fp
  40950c:	68ba      	ldr	r2, [r7, #8]
  40950e:	f043 0301 	orr.w	r3, r3, #1
  409512:	6053      	str	r3, [r2, #4]
  409514:	e6ee      	b.n	4092f4 <_malloc_r+0x2d8>
  409516:	207f      	movs	r0, #127	; 0x7f
  409518:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40951c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  409520:	e59e      	b.n	409060 <_malloc_r+0x44>
  409522:	f104 0108 	add.w	r1, r4, #8
  409526:	4628      	mov	r0, r5
  409528:	9300      	str	r3, [sp, #0]
  40952a:	f000 fcf1 	bl	409f10 <_free_r>
  40952e:	9b00      	ldr	r3, [sp, #0]
  409530:	6819      	ldr	r1, [r3, #0]
  409532:	e6df      	b.n	4092f4 <_malloc_r+0x2d8>
  409534:	2001      	movs	r0, #1
  409536:	f04f 0900 	mov.w	r9, #0
  40953a:	e6bc      	b.n	4092b6 <_malloc_r+0x29a>
  40953c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409540:	d805      	bhi.n	40954e <_malloc_r+0x532>
  409542:	0bda      	lsrs	r2, r3, #15
  409544:	f102 0178 	add.w	r1, r2, #120	; 0x78
  409548:	00c9      	lsls	r1, r1, #3
  40954a:	3277      	adds	r2, #119	; 0x77
  40954c:	e720      	b.n	409390 <_malloc_r+0x374>
  40954e:	f240 5154 	movw	r1, #1364	; 0x554
  409552:	428a      	cmp	r2, r1
  409554:	d805      	bhi.n	409562 <_malloc_r+0x546>
  409556:	0c9a      	lsrs	r2, r3, #18
  409558:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40955c:	00c9      	lsls	r1, r1, #3
  40955e:	327c      	adds	r2, #124	; 0x7c
  409560:	e716      	b.n	409390 <_malloc_r+0x374>
  409562:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  409566:	227e      	movs	r2, #126	; 0x7e
  409568:	e712      	b.n	409390 <_malloc_r+0x374>
  40956a:	687b      	ldr	r3, [r7, #4]
  40956c:	e780      	b.n	409470 <_malloc_r+0x454>
  40956e:	08f0      	lsrs	r0, r6, #3
  409570:	f106 0308 	add.w	r3, r6, #8
  409574:	e600      	b.n	409178 <_malloc_r+0x15c>
  409576:	bf00      	nop
  409578:	2000ac50 	.word	0x2000ac50
  40957c:	00000000 	.word	0x00000000

00409580 <memchr>:
  409580:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409584:	2a10      	cmp	r2, #16
  409586:	db2b      	blt.n	4095e0 <memchr+0x60>
  409588:	f010 0f07 	tst.w	r0, #7
  40958c:	d008      	beq.n	4095a0 <memchr+0x20>
  40958e:	f810 3b01 	ldrb.w	r3, [r0], #1
  409592:	3a01      	subs	r2, #1
  409594:	428b      	cmp	r3, r1
  409596:	d02d      	beq.n	4095f4 <memchr+0x74>
  409598:	f010 0f07 	tst.w	r0, #7
  40959c:	b342      	cbz	r2, 4095f0 <memchr+0x70>
  40959e:	d1f6      	bne.n	40958e <memchr+0xe>
  4095a0:	b4f0      	push	{r4, r5, r6, r7}
  4095a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4095a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4095aa:	f022 0407 	bic.w	r4, r2, #7
  4095ae:	f07f 0700 	mvns.w	r7, #0
  4095b2:	2300      	movs	r3, #0
  4095b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4095b8:	3c08      	subs	r4, #8
  4095ba:	ea85 0501 	eor.w	r5, r5, r1
  4095be:	ea86 0601 	eor.w	r6, r6, r1
  4095c2:	fa85 f547 	uadd8	r5, r5, r7
  4095c6:	faa3 f587 	sel	r5, r3, r7
  4095ca:	fa86 f647 	uadd8	r6, r6, r7
  4095ce:	faa5 f687 	sel	r6, r5, r7
  4095d2:	b98e      	cbnz	r6, 4095f8 <memchr+0x78>
  4095d4:	d1ee      	bne.n	4095b4 <memchr+0x34>
  4095d6:	bcf0      	pop	{r4, r5, r6, r7}
  4095d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4095dc:	f002 0207 	and.w	r2, r2, #7
  4095e0:	b132      	cbz	r2, 4095f0 <memchr+0x70>
  4095e2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4095e6:	3a01      	subs	r2, #1
  4095e8:	ea83 0301 	eor.w	r3, r3, r1
  4095ec:	b113      	cbz	r3, 4095f4 <memchr+0x74>
  4095ee:	d1f8      	bne.n	4095e2 <memchr+0x62>
  4095f0:	2000      	movs	r0, #0
  4095f2:	4770      	bx	lr
  4095f4:	3801      	subs	r0, #1
  4095f6:	4770      	bx	lr
  4095f8:	2d00      	cmp	r5, #0
  4095fa:	bf06      	itte	eq
  4095fc:	4635      	moveq	r5, r6
  4095fe:	3803      	subeq	r0, #3
  409600:	3807      	subne	r0, #7
  409602:	f015 0f01 	tst.w	r5, #1
  409606:	d107      	bne.n	409618 <memchr+0x98>
  409608:	3001      	adds	r0, #1
  40960a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40960e:	bf02      	ittt	eq
  409610:	3001      	addeq	r0, #1
  409612:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409616:	3001      	addeq	r0, #1
  409618:	bcf0      	pop	{r4, r5, r6, r7}
  40961a:	3801      	subs	r0, #1
  40961c:	4770      	bx	lr
  40961e:	bf00      	nop

00409620 <__malloc_lock>:
  409620:	4801      	ldr	r0, [pc, #4]	; (409628 <__malloc_lock+0x8>)
  409622:	f7ff bcf7 	b.w	409014 <__retarget_lock_acquire_recursive>
  409626:	bf00      	nop
  409628:	2000acc8 	.word	0x2000acc8

0040962c <__malloc_unlock>:
  40962c:	4801      	ldr	r0, [pc, #4]	; (409634 <__malloc_unlock+0x8>)
  40962e:	f7ff bcf3 	b.w	409018 <__retarget_lock_release_recursive>
  409632:	bf00      	nop
  409634:	2000acc8 	.word	0x2000acc8

00409638 <_Balloc>:
  409638:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40963a:	b570      	push	{r4, r5, r6, lr}
  40963c:	4605      	mov	r5, r0
  40963e:	460c      	mov	r4, r1
  409640:	b14b      	cbz	r3, 409656 <_Balloc+0x1e>
  409642:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409646:	b180      	cbz	r0, 40966a <_Balloc+0x32>
  409648:	6802      	ldr	r2, [r0, #0]
  40964a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40964e:	2300      	movs	r3, #0
  409650:	6103      	str	r3, [r0, #16]
  409652:	60c3      	str	r3, [r0, #12]
  409654:	bd70      	pop	{r4, r5, r6, pc}
  409656:	2221      	movs	r2, #33	; 0x21
  409658:	2104      	movs	r1, #4
  40965a:	f000 fbd9 	bl	409e10 <_calloc_r>
  40965e:	64e8      	str	r0, [r5, #76]	; 0x4c
  409660:	4603      	mov	r3, r0
  409662:	2800      	cmp	r0, #0
  409664:	d1ed      	bne.n	409642 <_Balloc+0xa>
  409666:	2000      	movs	r0, #0
  409668:	bd70      	pop	{r4, r5, r6, pc}
  40966a:	2101      	movs	r1, #1
  40966c:	fa01 f604 	lsl.w	r6, r1, r4
  409670:	1d72      	adds	r2, r6, #5
  409672:	4628      	mov	r0, r5
  409674:	0092      	lsls	r2, r2, #2
  409676:	f000 fbcb 	bl	409e10 <_calloc_r>
  40967a:	2800      	cmp	r0, #0
  40967c:	d0f3      	beq.n	409666 <_Balloc+0x2e>
  40967e:	6044      	str	r4, [r0, #4]
  409680:	6086      	str	r6, [r0, #8]
  409682:	e7e4      	b.n	40964e <_Balloc+0x16>

00409684 <_Bfree>:
  409684:	b131      	cbz	r1, 409694 <_Bfree+0x10>
  409686:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409688:	684a      	ldr	r2, [r1, #4]
  40968a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40968e:	6008      	str	r0, [r1, #0]
  409690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  409694:	4770      	bx	lr
  409696:	bf00      	nop

00409698 <__multadd>:
  409698:	b5f0      	push	{r4, r5, r6, r7, lr}
  40969a:	690c      	ldr	r4, [r1, #16]
  40969c:	b083      	sub	sp, #12
  40969e:	460d      	mov	r5, r1
  4096a0:	4606      	mov	r6, r0
  4096a2:	f101 0e14 	add.w	lr, r1, #20
  4096a6:	2700      	movs	r7, #0
  4096a8:	f8de 0000 	ldr.w	r0, [lr]
  4096ac:	b281      	uxth	r1, r0
  4096ae:	fb02 3301 	mla	r3, r2, r1, r3
  4096b2:	0c01      	lsrs	r1, r0, #16
  4096b4:	0c18      	lsrs	r0, r3, #16
  4096b6:	fb02 0101 	mla	r1, r2, r1, r0
  4096ba:	b29b      	uxth	r3, r3
  4096bc:	3701      	adds	r7, #1
  4096be:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4096c2:	42bc      	cmp	r4, r7
  4096c4:	f84e 3b04 	str.w	r3, [lr], #4
  4096c8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4096cc:	dcec      	bgt.n	4096a8 <__multadd+0x10>
  4096ce:	b13b      	cbz	r3, 4096e0 <__multadd+0x48>
  4096d0:	68aa      	ldr	r2, [r5, #8]
  4096d2:	4294      	cmp	r4, r2
  4096d4:	da07      	bge.n	4096e6 <__multadd+0x4e>
  4096d6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4096da:	3401      	adds	r4, #1
  4096dc:	6153      	str	r3, [r2, #20]
  4096de:	612c      	str	r4, [r5, #16]
  4096e0:	4628      	mov	r0, r5
  4096e2:	b003      	add	sp, #12
  4096e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4096e6:	6869      	ldr	r1, [r5, #4]
  4096e8:	9301      	str	r3, [sp, #4]
  4096ea:	3101      	adds	r1, #1
  4096ec:	4630      	mov	r0, r6
  4096ee:	f7ff ffa3 	bl	409638 <_Balloc>
  4096f2:	692a      	ldr	r2, [r5, #16]
  4096f4:	3202      	adds	r2, #2
  4096f6:	f105 010c 	add.w	r1, r5, #12
  4096fa:	4607      	mov	r7, r0
  4096fc:	0092      	lsls	r2, r2, #2
  4096fe:	300c      	adds	r0, #12
  409700:	f7fd f886 	bl	406810 <memcpy>
  409704:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  409706:	6869      	ldr	r1, [r5, #4]
  409708:	9b01      	ldr	r3, [sp, #4]
  40970a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40970e:	6028      	str	r0, [r5, #0]
  409710:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409714:	463d      	mov	r5, r7
  409716:	e7de      	b.n	4096d6 <__multadd+0x3e>

00409718 <__hi0bits>:
  409718:	0c02      	lsrs	r2, r0, #16
  40971a:	0412      	lsls	r2, r2, #16
  40971c:	4603      	mov	r3, r0
  40971e:	b9b2      	cbnz	r2, 40974e <__hi0bits+0x36>
  409720:	0403      	lsls	r3, r0, #16
  409722:	2010      	movs	r0, #16
  409724:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409728:	bf04      	itt	eq
  40972a:	021b      	lsleq	r3, r3, #8
  40972c:	3008      	addeq	r0, #8
  40972e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  409732:	bf04      	itt	eq
  409734:	011b      	lsleq	r3, r3, #4
  409736:	3004      	addeq	r0, #4
  409738:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40973c:	bf04      	itt	eq
  40973e:	009b      	lsleq	r3, r3, #2
  409740:	3002      	addeq	r0, #2
  409742:	2b00      	cmp	r3, #0
  409744:	db02      	blt.n	40974c <__hi0bits+0x34>
  409746:	005b      	lsls	r3, r3, #1
  409748:	d403      	bmi.n	409752 <__hi0bits+0x3a>
  40974a:	2020      	movs	r0, #32
  40974c:	4770      	bx	lr
  40974e:	2000      	movs	r0, #0
  409750:	e7e8      	b.n	409724 <__hi0bits+0xc>
  409752:	3001      	adds	r0, #1
  409754:	4770      	bx	lr
  409756:	bf00      	nop

00409758 <__lo0bits>:
  409758:	6803      	ldr	r3, [r0, #0]
  40975a:	f013 0207 	ands.w	r2, r3, #7
  40975e:	4601      	mov	r1, r0
  409760:	d007      	beq.n	409772 <__lo0bits+0x1a>
  409762:	07da      	lsls	r2, r3, #31
  409764:	d421      	bmi.n	4097aa <__lo0bits+0x52>
  409766:	0798      	lsls	r0, r3, #30
  409768:	d421      	bmi.n	4097ae <__lo0bits+0x56>
  40976a:	089b      	lsrs	r3, r3, #2
  40976c:	600b      	str	r3, [r1, #0]
  40976e:	2002      	movs	r0, #2
  409770:	4770      	bx	lr
  409772:	b298      	uxth	r0, r3
  409774:	b198      	cbz	r0, 40979e <__lo0bits+0x46>
  409776:	4610      	mov	r0, r2
  409778:	f013 0fff 	tst.w	r3, #255	; 0xff
  40977c:	bf04      	itt	eq
  40977e:	0a1b      	lsreq	r3, r3, #8
  409780:	3008      	addeq	r0, #8
  409782:	071a      	lsls	r2, r3, #28
  409784:	bf04      	itt	eq
  409786:	091b      	lsreq	r3, r3, #4
  409788:	3004      	addeq	r0, #4
  40978a:	079a      	lsls	r2, r3, #30
  40978c:	bf04      	itt	eq
  40978e:	089b      	lsreq	r3, r3, #2
  409790:	3002      	addeq	r0, #2
  409792:	07da      	lsls	r2, r3, #31
  409794:	d407      	bmi.n	4097a6 <__lo0bits+0x4e>
  409796:	085b      	lsrs	r3, r3, #1
  409798:	d104      	bne.n	4097a4 <__lo0bits+0x4c>
  40979a:	2020      	movs	r0, #32
  40979c:	4770      	bx	lr
  40979e:	0c1b      	lsrs	r3, r3, #16
  4097a0:	2010      	movs	r0, #16
  4097a2:	e7e9      	b.n	409778 <__lo0bits+0x20>
  4097a4:	3001      	adds	r0, #1
  4097a6:	600b      	str	r3, [r1, #0]
  4097a8:	4770      	bx	lr
  4097aa:	2000      	movs	r0, #0
  4097ac:	4770      	bx	lr
  4097ae:	085b      	lsrs	r3, r3, #1
  4097b0:	600b      	str	r3, [r1, #0]
  4097b2:	2001      	movs	r0, #1
  4097b4:	4770      	bx	lr
  4097b6:	bf00      	nop

004097b8 <__i2b>:
  4097b8:	b510      	push	{r4, lr}
  4097ba:	460c      	mov	r4, r1
  4097bc:	2101      	movs	r1, #1
  4097be:	f7ff ff3b 	bl	409638 <_Balloc>
  4097c2:	2201      	movs	r2, #1
  4097c4:	6144      	str	r4, [r0, #20]
  4097c6:	6102      	str	r2, [r0, #16]
  4097c8:	bd10      	pop	{r4, pc}
  4097ca:	bf00      	nop

004097cc <__multiply>:
  4097cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4097d0:	690c      	ldr	r4, [r1, #16]
  4097d2:	6915      	ldr	r5, [r2, #16]
  4097d4:	42ac      	cmp	r4, r5
  4097d6:	b083      	sub	sp, #12
  4097d8:	468b      	mov	fp, r1
  4097da:	4616      	mov	r6, r2
  4097dc:	da04      	bge.n	4097e8 <__multiply+0x1c>
  4097de:	4622      	mov	r2, r4
  4097e0:	46b3      	mov	fp, r6
  4097e2:	462c      	mov	r4, r5
  4097e4:	460e      	mov	r6, r1
  4097e6:	4615      	mov	r5, r2
  4097e8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4097ec:	f8db 1004 	ldr.w	r1, [fp, #4]
  4097f0:	eb04 0805 	add.w	r8, r4, r5
  4097f4:	4598      	cmp	r8, r3
  4097f6:	bfc8      	it	gt
  4097f8:	3101      	addgt	r1, #1
  4097fa:	f7ff ff1d 	bl	409638 <_Balloc>
  4097fe:	f100 0914 	add.w	r9, r0, #20
  409802:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  409806:	45d1      	cmp	r9, sl
  409808:	9000      	str	r0, [sp, #0]
  40980a:	d205      	bcs.n	409818 <__multiply+0x4c>
  40980c:	464b      	mov	r3, r9
  40980e:	2100      	movs	r1, #0
  409810:	f843 1b04 	str.w	r1, [r3], #4
  409814:	459a      	cmp	sl, r3
  409816:	d8fb      	bhi.n	409810 <__multiply+0x44>
  409818:	f106 0c14 	add.w	ip, r6, #20
  40981c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  409820:	f10b 0b14 	add.w	fp, fp, #20
  409824:	459c      	cmp	ip, r3
  409826:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40982a:	d24c      	bcs.n	4098c6 <__multiply+0xfa>
  40982c:	f8cd a004 	str.w	sl, [sp, #4]
  409830:	469a      	mov	sl, r3
  409832:	f8dc 5000 	ldr.w	r5, [ip]
  409836:	b2af      	uxth	r7, r5
  409838:	b1ef      	cbz	r7, 409876 <__multiply+0xaa>
  40983a:	2100      	movs	r1, #0
  40983c:	464d      	mov	r5, r9
  40983e:	465e      	mov	r6, fp
  409840:	460c      	mov	r4, r1
  409842:	f856 2b04 	ldr.w	r2, [r6], #4
  409846:	6828      	ldr	r0, [r5, #0]
  409848:	b293      	uxth	r3, r2
  40984a:	b281      	uxth	r1, r0
  40984c:	fb07 1303 	mla	r3, r7, r3, r1
  409850:	0c12      	lsrs	r2, r2, #16
  409852:	0c01      	lsrs	r1, r0, #16
  409854:	4423      	add	r3, r4
  409856:	fb07 1102 	mla	r1, r7, r2, r1
  40985a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40985e:	b29b      	uxth	r3, r3
  409860:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  409864:	45b6      	cmp	lr, r6
  409866:	f845 3b04 	str.w	r3, [r5], #4
  40986a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40986e:	d8e8      	bhi.n	409842 <__multiply+0x76>
  409870:	602c      	str	r4, [r5, #0]
  409872:	f8dc 5000 	ldr.w	r5, [ip]
  409876:	0c2d      	lsrs	r5, r5, #16
  409878:	d01d      	beq.n	4098b6 <__multiply+0xea>
  40987a:	f8d9 3000 	ldr.w	r3, [r9]
  40987e:	4648      	mov	r0, r9
  409880:	461c      	mov	r4, r3
  409882:	4659      	mov	r1, fp
  409884:	2200      	movs	r2, #0
  409886:	880e      	ldrh	r6, [r1, #0]
  409888:	0c24      	lsrs	r4, r4, #16
  40988a:	fb05 4406 	mla	r4, r5, r6, r4
  40988e:	4422      	add	r2, r4
  409890:	b29b      	uxth	r3, r3
  409892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  409896:	f840 3b04 	str.w	r3, [r0], #4
  40989a:	f851 3b04 	ldr.w	r3, [r1], #4
  40989e:	6804      	ldr	r4, [r0, #0]
  4098a0:	0c1b      	lsrs	r3, r3, #16
  4098a2:	b2a6      	uxth	r6, r4
  4098a4:	fb05 6303 	mla	r3, r5, r3, r6
  4098a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4098ac:	458e      	cmp	lr, r1
  4098ae:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4098b2:	d8e8      	bhi.n	409886 <__multiply+0xba>
  4098b4:	6003      	str	r3, [r0, #0]
  4098b6:	f10c 0c04 	add.w	ip, ip, #4
  4098ba:	45e2      	cmp	sl, ip
  4098bc:	f109 0904 	add.w	r9, r9, #4
  4098c0:	d8b7      	bhi.n	409832 <__multiply+0x66>
  4098c2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4098c6:	f1b8 0f00 	cmp.w	r8, #0
  4098ca:	dd0b      	ble.n	4098e4 <__multiply+0x118>
  4098cc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4098d0:	f1aa 0a04 	sub.w	sl, sl, #4
  4098d4:	b11b      	cbz	r3, 4098de <__multiply+0x112>
  4098d6:	e005      	b.n	4098e4 <__multiply+0x118>
  4098d8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4098dc:	b913      	cbnz	r3, 4098e4 <__multiply+0x118>
  4098de:	f1b8 0801 	subs.w	r8, r8, #1
  4098e2:	d1f9      	bne.n	4098d8 <__multiply+0x10c>
  4098e4:	9800      	ldr	r0, [sp, #0]
  4098e6:	f8c0 8010 	str.w	r8, [r0, #16]
  4098ea:	b003      	add	sp, #12
  4098ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004098f0 <__pow5mult>:
  4098f0:	f012 0303 	ands.w	r3, r2, #3
  4098f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4098f8:	4614      	mov	r4, r2
  4098fa:	4607      	mov	r7, r0
  4098fc:	d12e      	bne.n	40995c <__pow5mult+0x6c>
  4098fe:	460d      	mov	r5, r1
  409900:	10a4      	asrs	r4, r4, #2
  409902:	d01c      	beq.n	40993e <__pow5mult+0x4e>
  409904:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  409906:	b396      	cbz	r6, 40996e <__pow5mult+0x7e>
  409908:	07e3      	lsls	r3, r4, #31
  40990a:	f04f 0800 	mov.w	r8, #0
  40990e:	d406      	bmi.n	40991e <__pow5mult+0x2e>
  409910:	1064      	asrs	r4, r4, #1
  409912:	d014      	beq.n	40993e <__pow5mult+0x4e>
  409914:	6830      	ldr	r0, [r6, #0]
  409916:	b1a8      	cbz	r0, 409944 <__pow5mult+0x54>
  409918:	4606      	mov	r6, r0
  40991a:	07e3      	lsls	r3, r4, #31
  40991c:	d5f8      	bpl.n	409910 <__pow5mult+0x20>
  40991e:	4632      	mov	r2, r6
  409920:	4629      	mov	r1, r5
  409922:	4638      	mov	r0, r7
  409924:	f7ff ff52 	bl	4097cc <__multiply>
  409928:	b1b5      	cbz	r5, 409958 <__pow5mult+0x68>
  40992a:	686a      	ldr	r2, [r5, #4]
  40992c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40992e:	1064      	asrs	r4, r4, #1
  409930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409934:	6029      	str	r1, [r5, #0]
  409936:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40993a:	4605      	mov	r5, r0
  40993c:	d1ea      	bne.n	409914 <__pow5mult+0x24>
  40993e:	4628      	mov	r0, r5
  409940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409944:	4632      	mov	r2, r6
  409946:	4631      	mov	r1, r6
  409948:	4638      	mov	r0, r7
  40994a:	f7ff ff3f 	bl	4097cc <__multiply>
  40994e:	6030      	str	r0, [r6, #0]
  409950:	f8c0 8000 	str.w	r8, [r0]
  409954:	4606      	mov	r6, r0
  409956:	e7e0      	b.n	40991a <__pow5mult+0x2a>
  409958:	4605      	mov	r5, r0
  40995a:	e7d9      	b.n	409910 <__pow5mult+0x20>
  40995c:	1e5a      	subs	r2, r3, #1
  40995e:	4d0b      	ldr	r5, [pc, #44]	; (40998c <__pow5mult+0x9c>)
  409960:	2300      	movs	r3, #0
  409962:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  409966:	f7ff fe97 	bl	409698 <__multadd>
  40996a:	4605      	mov	r5, r0
  40996c:	e7c8      	b.n	409900 <__pow5mult+0x10>
  40996e:	2101      	movs	r1, #1
  409970:	4638      	mov	r0, r7
  409972:	f7ff fe61 	bl	409638 <_Balloc>
  409976:	f240 2171 	movw	r1, #625	; 0x271
  40997a:	2201      	movs	r2, #1
  40997c:	2300      	movs	r3, #0
  40997e:	6141      	str	r1, [r0, #20]
  409980:	6102      	str	r2, [r0, #16]
  409982:	4606      	mov	r6, r0
  409984:	64b8      	str	r0, [r7, #72]	; 0x48
  409986:	6003      	str	r3, [r0, #0]
  409988:	e7be      	b.n	409908 <__pow5mult+0x18>
  40998a:	bf00      	nop
  40998c:	0040b7e0 	.word	0x0040b7e0

00409990 <__lshift>:
  409990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409994:	4691      	mov	r9, r2
  409996:	690a      	ldr	r2, [r1, #16]
  409998:	688b      	ldr	r3, [r1, #8]
  40999a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40999e:	eb04 0802 	add.w	r8, r4, r2
  4099a2:	f108 0501 	add.w	r5, r8, #1
  4099a6:	429d      	cmp	r5, r3
  4099a8:	460e      	mov	r6, r1
  4099aa:	4607      	mov	r7, r0
  4099ac:	6849      	ldr	r1, [r1, #4]
  4099ae:	dd04      	ble.n	4099ba <__lshift+0x2a>
  4099b0:	005b      	lsls	r3, r3, #1
  4099b2:	429d      	cmp	r5, r3
  4099b4:	f101 0101 	add.w	r1, r1, #1
  4099b8:	dcfa      	bgt.n	4099b0 <__lshift+0x20>
  4099ba:	4638      	mov	r0, r7
  4099bc:	f7ff fe3c 	bl	409638 <_Balloc>
  4099c0:	2c00      	cmp	r4, #0
  4099c2:	f100 0314 	add.w	r3, r0, #20
  4099c6:	dd06      	ble.n	4099d6 <__lshift+0x46>
  4099c8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4099cc:	2100      	movs	r1, #0
  4099ce:	f843 1b04 	str.w	r1, [r3], #4
  4099d2:	429a      	cmp	r2, r3
  4099d4:	d1fb      	bne.n	4099ce <__lshift+0x3e>
  4099d6:	6934      	ldr	r4, [r6, #16]
  4099d8:	f106 0114 	add.w	r1, r6, #20
  4099dc:	f019 091f 	ands.w	r9, r9, #31
  4099e0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4099e4:	d01d      	beq.n	409a22 <__lshift+0x92>
  4099e6:	f1c9 0c20 	rsb	ip, r9, #32
  4099ea:	2200      	movs	r2, #0
  4099ec:	680c      	ldr	r4, [r1, #0]
  4099ee:	fa04 f409 	lsl.w	r4, r4, r9
  4099f2:	4314      	orrs	r4, r2
  4099f4:	f843 4b04 	str.w	r4, [r3], #4
  4099f8:	f851 2b04 	ldr.w	r2, [r1], #4
  4099fc:	458e      	cmp	lr, r1
  4099fe:	fa22 f20c 	lsr.w	r2, r2, ip
  409a02:	d8f3      	bhi.n	4099ec <__lshift+0x5c>
  409a04:	601a      	str	r2, [r3, #0]
  409a06:	b10a      	cbz	r2, 409a0c <__lshift+0x7c>
  409a08:	f108 0502 	add.w	r5, r8, #2
  409a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409a0e:	6872      	ldr	r2, [r6, #4]
  409a10:	3d01      	subs	r5, #1
  409a12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409a16:	6105      	str	r5, [r0, #16]
  409a18:	6031      	str	r1, [r6, #0]
  409a1a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  409a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409a22:	3b04      	subs	r3, #4
  409a24:	f851 2b04 	ldr.w	r2, [r1], #4
  409a28:	f843 2f04 	str.w	r2, [r3, #4]!
  409a2c:	458e      	cmp	lr, r1
  409a2e:	d8f9      	bhi.n	409a24 <__lshift+0x94>
  409a30:	e7ec      	b.n	409a0c <__lshift+0x7c>
  409a32:	bf00      	nop

00409a34 <__mcmp>:
  409a34:	b430      	push	{r4, r5}
  409a36:	690b      	ldr	r3, [r1, #16]
  409a38:	4605      	mov	r5, r0
  409a3a:	6900      	ldr	r0, [r0, #16]
  409a3c:	1ac0      	subs	r0, r0, r3
  409a3e:	d10f      	bne.n	409a60 <__mcmp+0x2c>
  409a40:	009b      	lsls	r3, r3, #2
  409a42:	3514      	adds	r5, #20
  409a44:	3114      	adds	r1, #20
  409a46:	4419      	add	r1, r3
  409a48:	442b      	add	r3, r5
  409a4a:	e001      	b.n	409a50 <__mcmp+0x1c>
  409a4c:	429d      	cmp	r5, r3
  409a4e:	d207      	bcs.n	409a60 <__mcmp+0x2c>
  409a50:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409a54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  409a58:	4294      	cmp	r4, r2
  409a5a:	d0f7      	beq.n	409a4c <__mcmp+0x18>
  409a5c:	d302      	bcc.n	409a64 <__mcmp+0x30>
  409a5e:	2001      	movs	r0, #1
  409a60:	bc30      	pop	{r4, r5}
  409a62:	4770      	bx	lr
  409a64:	f04f 30ff 	mov.w	r0, #4294967295
  409a68:	e7fa      	b.n	409a60 <__mcmp+0x2c>
  409a6a:	bf00      	nop

00409a6c <__mdiff>:
  409a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409a70:	690f      	ldr	r7, [r1, #16]
  409a72:	460e      	mov	r6, r1
  409a74:	6911      	ldr	r1, [r2, #16]
  409a76:	1a7f      	subs	r7, r7, r1
  409a78:	2f00      	cmp	r7, #0
  409a7a:	4690      	mov	r8, r2
  409a7c:	d117      	bne.n	409aae <__mdiff+0x42>
  409a7e:	0089      	lsls	r1, r1, #2
  409a80:	f106 0514 	add.w	r5, r6, #20
  409a84:	f102 0e14 	add.w	lr, r2, #20
  409a88:	186b      	adds	r3, r5, r1
  409a8a:	4471      	add	r1, lr
  409a8c:	e001      	b.n	409a92 <__mdiff+0x26>
  409a8e:	429d      	cmp	r5, r3
  409a90:	d25c      	bcs.n	409b4c <__mdiff+0xe0>
  409a92:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  409a96:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  409a9a:	42a2      	cmp	r2, r4
  409a9c:	d0f7      	beq.n	409a8e <__mdiff+0x22>
  409a9e:	d25e      	bcs.n	409b5e <__mdiff+0xf2>
  409aa0:	4633      	mov	r3, r6
  409aa2:	462c      	mov	r4, r5
  409aa4:	4646      	mov	r6, r8
  409aa6:	4675      	mov	r5, lr
  409aa8:	4698      	mov	r8, r3
  409aaa:	2701      	movs	r7, #1
  409aac:	e005      	b.n	409aba <__mdiff+0x4e>
  409aae:	db58      	blt.n	409b62 <__mdiff+0xf6>
  409ab0:	f106 0514 	add.w	r5, r6, #20
  409ab4:	f108 0414 	add.w	r4, r8, #20
  409ab8:	2700      	movs	r7, #0
  409aba:	6871      	ldr	r1, [r6, #4]
  409abc:	f7ff fdbc 	bl	409638 <_Balloc>
  409ac0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409ac4:	6936      	ldr	r6, [r6, #16]
  409ac6:	60c7      	str	r7, [r0, #12]
  409ac8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  409acc:	46a6      	mov	lr, r4
  409ace:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409ad2:	f100 0414 	add.w	r4, r0, #20
  409ad6:	2300      	movs	r3, #0
  409ad8:	f85e 1b04 	ldr.w	r1, [lr], #4
  409adc:	f855 8b04 	ldr.w	r8, [r5], #4
  409ae0:	b28a      	uxth	r2, r1
  409ae2:	fa13 f388 	uxtah	r3, r3, r8
  409ae6:	0c09      	lsrs	r1, r1, #16
  409ae8:	1a9a      	subs	r2, r3, r2
  409aea:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  409aee:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409af2:	b292      	uxth	r2, r2
  409af4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409af8:	45f4      	cmp	ip, lr
  409afa:	f844 2b04 	str.w	r2, [r4], #4
  409afe:	ea4f 4323 	mov.w	r3, r3, asr #16
  409b02:	d8e9      	bhi.n	409ad8 <__mdiff+0x6c>
  409b04:	42af      	cmp	r7, r5
  409b06:	d917      	bls.n	409b38 <__mdiff+0xcc>
  409b08:	46a4      	mov	ip, r4
  409b0a:	46ae      	mov	lr, r5
  409b0c:	f85e 2b04 	ldr.w	r2, [lr], #4
  409b10:	fa13 f382 	uxtah	r3, r3, r2
  409b14:	1419      	asrs	r1, r3, #16
  409b16:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  409b1a:	b29b      	uxth	r3, r3
  409b1c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409b20:	4577      	cmp	r7, lr
  409b22:	f84c 2b04 	str.w	r2, [ip], #4
  409b26:	ea4f 4321 	mov.w	r3, r1, asr #16
  409b2a:	d8ef      	bhi.n	409b0c <__mdiff+0xa0>
  409b2c:	43ed      	mvns	r5, r5
  409b2e:	442f      	add	r7, r5
  409b30:	f027 0703 	bic.w	r7, r7, #3
  409b34:	3704      	adds	r7, #4
  409b36:	443c      	add	r4, r7
  409b38:	3c04      	subs	r4, #4
  409b3a:	b922      	cbnz	r2, 409b46 <__mdiff+0xda>
  409b3c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409b40:	3e01      	subs	r6, #1
  409b42:	2b00      	cmp	r3, #0
  409b44:	d0fa      	beq.n	409b3c <__mdiff+0xd0>
  409b46:	6106      	str	r6, [r0, #16]
  409b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409b4c:	2100      	movs	r1, #0
  409b4e:	f7ff fd73 	bl	409638 <_Balloc>
  409b52:	2201      	movs	r2, #1
  409b54:	2300      	movs	r3, #0
  409b56:	6102      	str	r2, [r0, #16]
  409b58:	6143      	str	r3, [r0, #20]
  409b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409b5e:	4674      	mov	r4, lr
  409b60:	e7ab      	b.n	409aba <__mdiff+0x4e>
  409b62:	4633      	mov	r3, r6
  409b64:	f106 0414 	add.w	r4, r6, #20
  409b68:	f102 0514 	add.w	r5, r2, #20
  409b6c:	4616      	mov	r6, r2
  409b6e:	2701      	movs	r7, #1
  409b70:	4698      	mov	r8, r3
  409b72:	e7a2      	b.n	409aba <__mdiff+0x4e>

00409b74 <__d2b>:
  409b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409b78:	b082      	sub	sp, #8
  409b7a:	2101      	movs	r1, #1
  409b7c:	461c      	mov	r4, r3
  409b7e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409b82:	4615      	mov	r5, r2
  409b84:	9e08      	ldr	r6, [sp, #32]
  409b86:	f7ff fd57 	bl	409638 <_Balloc>
  409b8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409b8e:	4680      	mov	r8, r0
  409b90:	b10f      	cbz	r7, 409b96 <__d2b+0x22>
  409b92:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409b96:	9401      	str	r4, [sp, #4]
  409b98:	b31d      	cbz	r5, 409be2 <__d2b+0x6e>
  409b9a:	a802      	add	r0, sp, #8
  409b9c:	f840 5d08 	str.w	r5, [r0, #-8]!
  409ba0:	f7ff fdda 	bl	409758 <__lo0bits>
  409ba4:	2800      	cmp	r0, #0
  409ba6:	d134      	bne.n	409c12 <__d2b+0x9e>
  409ba8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409bac:	f8c8 2014 	str.w	r2, [r8, #20]
  409bb0:	2b00      	cmp	r3, #0
  409bb2:	bf0c      	ite	eq
  409bb4:	2101      	moveq	r1, #1
  409bb6:	2102      	movne	r1, #2
  409bb8:	f8c8 3018 	str.w	r3, [r8, #24]
  409bbc:	f8c8 1010 	str.w	r1, [r8, #16]
  409bc0:	b9df      	cbnz	r7, 409bfa <__d2b+0x86>
  409bc2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409bc6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409bca:	6030      	str	r0, [r6, #0]
  409bcc:	6918      	ldr	r0, [r3, #16]
  409bce:	f7ff fda3 	bl	409718 <__hi0bits>
  409bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409bd4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409bd8:	6018      	str	r0, [r3, #0]
  409bda:	4640      	mov	r0, r8
  409bdc:	b002      	add	sp, #8
  409bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409be2:	a801      	add	r0, sp, #4
  409be4:	f7ff fdb8 	bl	409758 <__lo0bits>
  409be8:	9b01      	ldr	r3, [sp, #4]
  409bea:	f8c8 3014 	str.w	r3, [r8, #20]
  409bee:	2101      	movs	r1, #1
  409bf0:	3020      	adds	r0, #32
  409bf2:	f8c8 1010 	str.w	r1, [r8, #16]
  409bf6:	2f00      	cmp	r7, #0
  409bf8:	d0e3      	beq.n	409bc2 <__d2b+0x4e>
  409bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409bfc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409c00:	4407      	add	r7, r0
  409c02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409c06:	6037      	str	r7, [r6, #0]
  409c08:	6018      	str	r0, [r3, #0]
  409c0a:	4640      	mov	r0, r8
  409c0c:	b002      	add	sp, #8
  409c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409c12:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409c16:	f1c0 0220 	rsb	r2, r0, #32
  409c1a:	fa03 f202 	lsl.w	r2, r3, r2
  409c1e:	430a      	orrs	r2, r1
  409c20:	40c3      	lsrs	r3, r0
  409c22:	9301      	str	r3, [sp, #4]
  409c24:	f8c8 2014 	str.w	r2, [r8, #20]
  409c28:	e7c2      	b.n	409bb0 <__d2b+0x3c>
  409c2a:	bf00      	nop

00409c2c <_sbrk_r>:
  409c2c:	b538      	push	{r3, r4, r5, lr}
  409c2e:	4c07      	ldr	r4, [pc, #28]	; (409c4c <_sbrk_r+0x20>)
  409c30:	2300      	movs	r3, #0
  409c32:	4605      	mov	r5, r0
  409c34:	4608      	mov	r0, r1
  409c36:	6023      	str	r3, [r4, #0]
  409c38:	f7fb fbf8 	bl	40542c <_sbrk>
  409c3c:	1c43      	adds	r3, r0, #1
  409c3e:	d000      	beq.n	409c42 <_sbrk_r+0x16>
  409c40:	bd38      	pop	{r3, r4, r5, pc}
  409c42:	6823      	ldr	r3, [r4, #0]
  409c44:	2b00      	cmp	r3, #0
  409c46:	d0fb      	beq.n	409c40 <_sbrk_r+0x14>
  409c48:	602b      	str	r3, [r5, #0]
  409c4a:	bd38      	pop	{r3, r4, r5, pc}
  409c4c:	2000acdc 	.word	0x2000acdc

00409c50 <__ssprint_r>:
  409c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409c54:	6893      	ldr	r3, [r2, #8]
  409c56:	b083      	sub	sp, #12
  409c58:	4690      	mov	r8, r2
  409c5a:	2b00      	cmp	r3, #0
  409c5c:	d070      	beq.n	409d40 <__ssprint_r+0xf0>
  409c5e:	4682      	mov	sl, r0
  409c60:	460c      	mov	r4, r1
  409c62:	6817      	ldr	r7, [r2, #0]
  409c64:	688d      	ldr	r5, [r1, #8]
  409c66:	6808      	ldr	r0, [r1, #0]
  409c68:	e042      	b.n	409cf0 <__ssprint_r+0xa0>
  409c6a:	89a3      	ldrh	r3, [r4, #12]
  409c6c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409c70:	d02e      	beq.n	409cd0 <__ssprint_r+0x80>
  409c72:	6965      	ldr	r5, [r4, #20]
  409c74:	6921      	ldr	r1, [r4, #16]
  409c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  409c7a:	eba0 0b01 	sub.w	fp, r0, r1
  409c7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  409c82:	f10b 0001 	add.w	r0, fp, #1
  409c86:	106d      	asrs	r5, r5, #1
  409c88:	4430      	add	r0, r6
  409c8a:	42a8      	cmp	r0, r5
  409c8c:	462a      	mov	r2, r5
  409c8e:	bf84      	itt	hi
  409c90:	4605      	movhi	r5, r0
  409c92:	462a      	movhi	r2, r5
  409c94:	055b      	lsls	r3, r3, #21
  409c96:	d538      	bpl.n	409d0a <__ssprint_r+0xba>
  409c98:	4611      	mov	r1, r2
  409c9a:	4650      	mov	r0, sl
  409c9c:	f7ff f9be 	bl	40901c <_malloc_r>
  409ca0:	2800      	cmp	r0, #0
  409ca2:	d03c      	beq.n	409d1e <__ssprint_r+0xce>
  409ca4:	465a      	mov	r2, fp
  409ca6:	6921      	ldr	r1, [r4, #16]
  409ca8:	9001      	str	r0, [sp, #4]
  409caa:	f7fc fdb1 	bl	406810 <memcpy>
  409cae:	89a2      	ldrh	r2, [r4, #12]
  409cb0:	9b01      	ldr	r3, [sp, #4]
  409cb2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409cb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409cba:	81a2      	strh	r2, [r4, #12]
  409cbc:	eba5 020b 	sub.w	r2, r5, fp
  409cc0:	eb03 000b 	add.w	r0, r3, fp
  409cc4:	6165      	str	r5, [r4, #20]
  409cc6:	6123      	str	r3, [r4, #16]
  409cc8:	6020      	str	r0, [r4, #0]
  409cca:	60a2      	str	r2, [r4, #8]
  409ccc:	4635      	mov	r5, r6
  409cce:	46b3      	mov	fp, r6
  409cd0:	465a      	mov	r2, fp
  409cd2:	4649      	mov	r1, r9
  409cd4:	f000 fa18 	bl	40a108 <memmove>
  409cd8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  409cdc:	68a2      	ldr	r2, [r4, #8]
  409cde:	6820      	ldr	r0, [r4, #0]
  409ce0:	1b55      	subs	r5, r2, r5
  409ce2:	4458      	add	r0, fp
  409ce4:	1b9e      	subs	r6, r3, r6
  409ce6:	60a5      	str	r5, [r4, #8]
  409ce8:	6020      	str	r0, [r4, #0]
  409cea:	f8c8 6008 	str.w	r6, [r8, #8]
  409cee:	b33e      	cbz	r6, 409d40 <__ssprint_r+0xf0>
  409cf0:	687e      	ldr	r6, [r7, #4]
  409cf2:	463b      	mov	r3, r7
  409cf4:	3708      	adds	r7, #8
  409cf6:	2e00      	cmp	r6, #0
  409cf8:	d0fa      	beq.n	409cf0 <__ssprint_r+0xa0>
  409cfa:	42ae      	cmp	r6, r5
  409cfc:	f8d3 9000 	ldr.w	r9, [r3]
  409d00:	46ab      	mov	fp, r5
  409d02:	d2b2      	bcs.n	409c6a <__ssprint_r+0x1a>
  409d04:	4635      	mov	r5, r6
  409d06:	46b3      	mov	fp, r6
  409d08:	e7e2      	b.n	409cd0 <__ssprint_r+0x80>
  409d0a:	4650      	mov	r0, sl
  409d0c:	f000 fa60 	bl	40a1d0 <_realloc_r>
  409d10:	4603      	mov	r3, r0
  409d12:	2800      	cmp	r0, #0
  409d14:	d1d2      	bne.n	409cbc <__ssprint_r+0x6c>
  409d16:	6921      	ldr	r1, [r4, #16]
  409d18:	4650      	mov	r0, sl
  409d1a:	f000 f8f9 	bl	409f10 <_free_r>
  409d1e:	230c      	movs	r3, #12
  409d20:	f8ca 3000 	str.w	r3, [sl]
  409d24:	89a3      	ldrh	r3, [r4, #12]
  409d26:	2200      	movs	r2, #0
  409d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409d2c:	f04f 30ff 	mov.w	r0, #4294967295
  409d30:	81a3      	strh	r3, [r4, #12]
  409d32:	f8c8 2008 	str.w	r2, [r8, #8]
  409d36:	f8c8 2004 	str.w	r2, [r8, #4]
  409d3a:	b003      	add	sp, #12
  409d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409d40:	2000      	movs	r0, #0
  409d42:	f8c8 0004 	str.w	r0, [r8, #4]
  409d46:	b003      	add	sp, #12
  409d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409d4c <__register_exitproc>:
  409d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409d50:	4d2c      	ldr	r5, [pc, #176]	; (409e04 <__register_exitproc+0xb8>)
  409d52:	4606      	mov	r6, r0
  409d54:	6828      	ldr	r0, [r5, #0]
  409d56:	4698      	mov	r8, r3
  409d58:	460f      	mov	r7, r1
  409d5a:	4691      	mov	r9, r2
  409d5c:	f7ff f95a 	bl	409014 <__retarget_lock_acquire_recursive>
  409d60:	4b29      	ldr	r3, [pc, #164]	; (409e08 <__register_exitproc+0xbc>)
  409d62:	681c      	ldr	r4, [r3, #0]
  409d64:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409d68:	2b00      	cmp	r3, #0
  409d6a:	d03e      	beq.n	409dea <__register_exitproc+0x9e>
  409d6c:	685a      	ldr	r2, [r3, #4]
  409d6e:	2a1f      	cmp	r2, #31
  409d70:	dc1c      	bgt.n	409dac <__register_exitproc+0x60>
  409d72:	f102 0e01 	add.w	lr, r2, #1
  409d76:	b176      	cbz	r6, 409d96 <__register_exitproc+0x4a>
  409d78:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409d7c:	2401      	movs	r4, #1
  409d7e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  409d82:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  409d86:	4094      	lsls	r4, r2
  409d88:	4320      	orrs	r0, r4
  409d8a:	2e02      	cmp	r6, #2
  409d8c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  409d90:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409d94:	d023      	beq.n	409dde <__register_exitproc+0x92>
  409d96:	3202      	adds	r2, #2
  409d98:	f8c3 e004 	str.w	lr, [r3, #4]
  409d9c:	6828      	ldr	r0, [r5, #0]
  409d9e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  409da2:	f7ff f939 	bl	409018 <__retarget_lock_release_recursive>
  409da6:	2000      	movs	r0, #0
  409da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409dac:	4b17      	ldr	r3, [pc, #92]	; (409e0c <__register_exitproc+0xc0>)
  409dae:	b30b      	cbz	r3, 409df4 <__register_exitproc+0xa8>
  409db0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409db4:	f3af 8000 	nop.w
  409db8:	4603      	mov	r3, r0
  409dba:	b1d8      	cbz	r0, 409df4 <__register_exitproc+0xa8>
  409dbc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409dc0:	6002      	str	r2, [r0, #0]
  409dc2:	2100      	movs	r1, #0
  409dc4:	6041      	str	r1, [r0, #4]
  409dc6:	460a      	mov	r2, r1
  409dc8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409dcc:	f04f 0e01 	mov.w	lr, #1
  409dd0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409dd4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409dd8:	2e00      	cmp	r6, #0
  409dda:	d0dc      	beq.n	409d96 <__register_exitproc+0x4a>
  409ddc:	e7cc      	b.n	409d78 <__register_exitproc+0x2c>
  409dde:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409de2:	430c      	orrs	r4, r1
  409de4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409de8:	e7d5      	b.n	409d96 <__register_exitproc+0x4a>
  409dea:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  409dee:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409df2:	e7bb      	b.n	409d6c <__register_exitproc+0x20>
  409df4:	6828      	ldr	r0, [r5, #0]
  409df6:	f7ff f90f 	bl	409018 <__retarget_lock_release_recursive>
  409dfa:	f04f 30ff 	mov.w	r0, #4294967295
  409dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409e02:	bf00      	nop
  409e04:	20000450 	.word	0x20000450
  409e08:	0040b674 	.word	0x0040b674
  409e0c:	00000000 	.word	0x00000000

00409e10 <_calloc_r>:
  409e10:	b510      	push	{r4, lr}
  409e12:	fb02 f101 	mul.w	r1, r2, r1
  409e16:	f7ff f901 	bl	40901c <_malloc_r>
  409e1a:	4604      	mov	r4, r0
  409e1c:	b1d8      	cbz	r0, 409e56 <_calloc_r+0x46>
  409e1e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409e22:	f022 0203 	bic.w	r2, r2, #3
  409e26:	3a04      	subs	r2, #4
  409e28:	2a24      	cmp	r2, #36	; 0x24
  409e2a:	d818      	bhi.n	409e5e <_calloc_r+0x4e>
  409e2c:	2a13      	cmp	r2, #19
  409e2e:	d914      	bls.n	409e5a <_calloc_r+0x4a>
  409e30:	2300      	movs	r3, #0
  409e32:	2a1b      	cmp	r2, #27
  409e34:	6003      	str	r3, [r0, #0]
  409e36:	6043      	str	r3, [r0, #4]
  409e38:	d916      	bls.n	409e68 <_calloc_r+0x58>
  409e3a:	2a24      	cmp	r2, #36	; 0x24
  409e3c:	6083      	str	r3, [r0, #8]
  409e3e:	60c3      	str	r3, [r0, #12]
  409e40:	bf11      	iteee	ne
  409e42:	f100 0210 	addne.w	r2, r0, #16
  409e46:	6103      	streq	r3, [r0, #16]
  409e48:	6143      	streq	r3, [r0, #20]
  409e4a:	f100 0218 	addeq.w	r2, r0, #24
  409e4e:	2300      	movs	r3, #0
  409e50:	6013      	str	r3, [r2, #0]
  409e52:	6053      	str	r3, [r2, #4]
  409e54:	6093      	str	r3, [r2, #8]
  409e56:	4620      	mov	r0, r4
  409e58:	bd10      	pop	{r4, pc}
  409e5a:	4602      	mov	r2, r0
  409e5c:	e7f7      	b.n	409e4e <_calloc_r+0x3e>
  409e5e:	2100      	movs	r1, #0
  409e60:	f7fc fd70 	bl	406944 <memset>
  409e64:	4620      	mov	r0, r4
  409e66:	bd10      	pop	{r4, pc}
  409e68:	f100 0208 	add.w	r2, r0, #8
  409e6c:	e7ef      	b.n	409e4e <_calloc_r+0x3e>
  409e6e:	bf00      	nop

00409e70 <_malloc_trim_r>:
  409e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409e72:	4f24      	ldr	r7, [pc, #144]	; (409f04 <_malloc_trim_r+0x94>)
  409e74:	460c      	mov	r4, r1
  409e76:	4606      	mov	r6, r0
  409e78:	f7ff fbd2 	bl	409620 <__malloc_lock>
  409e7c:	68bb      	ldr	r3, [r7, #8]
  409e7e:	685d      	ldr	r5, [r3, #4]
  409e80:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  409e84:	310f      	adds	r1, #15
  409e86:	f025 0503 	bic.w	r5, r5, #3
  409e8a:	4429      	add	r1, r5
  409e8c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  409e90:	f021 010f 	bic.w	r1, r1, #15
  409e94:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  409e98:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  409e9c:	db07      	blt.n	409eae <_malloc_trim_r+0x3e>
  409e9e:	2100      	movs	r1, #0
  409ea0:	4630      	mov	r0, r6
  409ea2:	f7ff fec3 	bl	409c2c <_sbrk_r>
  409ea6:	68bb      	ldr	r3, [r7, #8]
  409ea8:	442b      	add	r3, r5
  409eaa:	4298      	cmp	r0, r3
  409eac:	d004      	beq.n	409eb8 <_malloc_trim_r+0x48>
  409eae:	4630      	mov	r0, r6
  409eb0:	f7ff fbbc 	bl	40962c <__malloc_unlock>
  409eb4:	2000      	movs	r0, #0
  409eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409eb8:	4261      	negs	r1, r4
  409eba:	4630      	mov	r0, r6
  409ebc:	f7ff feb6 	bl	409c2c <_sbrk_r>
  409ec0:	3001      	adds	r0, #1
  409ec2:	d00d      	beq.n	409ee0 <_malloc_trim_r+0x70>
  409ec4:	4b10      	ldr	r3, [pc, #64]	; (409f08 <_malloc_trim_r+0x98>)
  409ec6:	68ba      	ldr	r2, [r7, #8]
  409ec8:	6819      	ldr	r1, [r3, #0]
  409eca:	1b2d      	subs	r5, r5, r4
  409ecc:	f045 0501 	orr.w	r5, r5, #1
  409ed0:	4630      	mov	r0, r6
  409ed2:	1b09      	subs	r1, r1, r4
  409ed4:	6055      	str	r5, [r2, #4]
  409ed6:	6019      	str	r1, [r3, #0]
  409ed8:	f7ff fba8 	bl	40962c <__malloc_unlock>
  409edc:	2001      	movs	r0, #1
  409ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409ee0:	2100      	movs	r1, #0
  409ee2:	4630      	mov	r0, r6
  409ee4:	f7ff fea2 	bl	409c2c <_sbrk_r>
  409ee8:	68ba      	ldr	r2, [r7, #8]
  409eea:	1a83      	subs	r3, r0, r2
  409eec:	2b0f      	cmp	r3, #15
  409eee:	ddde      	ble.n	409eae <_malloc_trim_r+0x3e>
  409ef0:	4c06      	ldr	r4, [pc, #24]	; (409f0c <_malloc_trim_r+0x9c>)
  409ef2:	4905      	ldr	r1, [pc, #20]	; (409f08 <_malloc_trim_r+0x98>)
  409ef4:	6824      	ldr	r4, [r4, #0]
  409ef6:	f043 0301 	orr.w	r3, r3, #1
  409efa:	1b00      	subs	r0, r0, r4
  409efc:	6053      	str	r3, [r2, #4]
  409efe:	6008      	str	r0, [r1, #0]
  409f00:	e7d5      	b.n	409eae <_malloc_trim_r+0x3e>
  409f02:	bf00      	nop
  409f04:	20000454 	.word	0x20000454
  409f08:	2000ac50 	.word	0x2000ac50
  409f0c:	2000085c 	.word	0x2000085c

00409f10 <_free_r>:
  409f10:	2900      	cmp	r1, #0
  409f12:	d044      	beq.n	409f9e <_free_r+0x8e>
  409f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409f18:	460d      	mov	r5, r1
  409f1a:	4680      	mov	r8, r0
  409f1c:	f7ff fb80 	bl	409620 <__malloc_lock>
  409f20:	f855 7c04 	ldr.w	r7, [r5, #-4]
  409f24:	4969      	ldr	r1, [pc, #420]	; (40a0cc <_free_r+0x1bc>)
  409f26:	f027 0301 	bic.w	r3, r7, #1
  409f2a:	f1a5 0408 	sub.w	r4, r5, #8
  409f2e:	18e2      	adds	r2, r4, r3
  409f30:	688e      	ldr	r6, [r1, #8]
  409f32:	6850      	ldr	r0, [r2, #4]
  409f34:	42b2      	cmp	r2, r6
  409f36:	f020 0003 	bic.w	r0, r0, #3
  409f3a:	d05e      	beq.n	409ffa <_free_r+0xea>
  409f3c:	07fe      	lsls	r6, r7, #31
  409f3e:	6050      	str	r0, [r2, #4]
  409f40:	d40b      	bmi.n	409f5a <_free_r+0x4a>
  409f42:	f855 7c08 	ldr.w	r7, [r5, #-8]
  409f46:	1be4      	subs	r4, r4, r7
  409f48:	f101 0e08 	add.w	lr, r1, #8
  409f4c:	68a5      	ldr	r5, [r4, #8]
  409f4e:	4575      	cmp	r5, lr
  409f50:	443b      	add	r3, r7
  409f52:	d06d      	beq.n	40a030 <_free_r+0x120>
  409f54:	68e7      	ldr	r7, [r4, #12]
  409f56:	60ef      	str	r7, [r5, #12]
  409f58:	60bd      	str	r5, [r7, #8]
  409f5a:	1815      	adds	r5, r2, r0
  409f5c:	686d      	ldr	r5, [r5, #4]
  409f5e:	07ed      	lsls	r5, r5, #31
  409f60:	d53e      	bpl.n	409fe0 <_free_r+0xd0>
  409f62:	f043 0201 	orr.w	r2, r3, #1
  409f66:	6062      	str	r2, [r4, #4]
  409f68:	50e3      	str	r3, [r4, r3]
  409f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409f6e:	d217      	bcs.n	409fa0 <_free_r+0x90>
  409f70:	08db      	lsrs	r3, r3, #3
  409f72:	1c58      	adds	r0, r3, #1
  409f74:	109a      	asrs	r2, r3, #2
  409f76:	684d      	ldr	r5, [r1, #4]
  409f78:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  409f7c:	60a7      	str	r7, [r4, #8]
  409f7e:	2301      	movs	r3, #1
  409f80:	4093      	lsls	r3, r2
  409f82:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  409f86:	432b      	orrs	r3, r5
  409f88:	3a08      	subs	r2, #8
  409f8a:	60e2      	str	r2, [r4, #12]
  409f8c:	604b      	str	r3, [r1, #4]
  409f8e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  409f92:	60fc      	str	r4, [r7, #12]
  409f94:	4640      	mov	r0, r8
  409f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409f9a:	f7ff bb47 	b.w	40962c <__malloc_unlock>
  409f9e:	4770      	bx	lr
  409fa0:	0a5a      	lsrs	r2, r3, #9
  409fa2:	2a04      	cmp	r2, #4
  409fa4:	d852      	bhi.n	40a04c <_free_r+0x13c>
  409fa6:	099a      	lsrs	r2, r3, #6
  409fa8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  409fac:	00ff      	lsls	r7, r7, #3
  409fae:	f102 0538 	add.w	r5, r2, #56	; 0x38
  409fb2:	19c8      	adds	r0, r1, r7
  409fb4:	59ca      	ldr	r2, [r1, r7]
  409fb6:	3808      	subs	r0, #8
  409fb8:	4290      	cmp	r0, r2
  409fba:	d04f      	beq.n	40a05c <_free_r+0x14c>
  409fbc:	6851      	ldr	r1, [r2, #4]
  409fbe:	f021 0103 	bic.w	r1, r1, #3
  409fc2:	428b      	cmp	r3, r1
  409fc4:	d232      	bcs.n	40a02c <_free_r+0x11c>
  409fc6:	6892      	ldr	r2, [r2, #8]
  409fc8:	4290      	cmp	r0, r2
  409fca:	d1f7      	bne.n	409fbc <_free_r+0xac>
  409fcc:	68c3      	ldr	r3, [r0, #12]
  409fce:	60a0      	str	r0, [r4, #8]
  409fd0:	60e3      	str	r3, [r4, #12]
  409fd2:	609c      	str	r4, [r3, #8]
  409fd4:	60c4      	str	r4, [r0, #12]
  409fd6:	4640      	mov	r0, r8
  409fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409fdc:	f7ff bb26 	b.w	40962c <__malloc_unlock>
  409fe0:	6895      	ldr	r5, [r2, #8]
  409fe2:	4f3b      	ldr	r7, [pc, #236]	; (40a0d0 <_free_r+0x1c0>)
  409fe4:	42bd      	cmp	r5, r7
  409fe6:	4403      	add	r3, r0
  409fe8:	d040      	beq.n	40a06c <_free_r+0x15c>
  409fea:	68d0      	ldr	r0, [r2, #12]
  409fec:	60e8      	str	r0, [r5, #12]
  409fee:	f043 0201 	orr.w	r2, r3, #1
  409ff2:	6085      	str	r5, [r0, #8]
  409ff4:	6062      	str	r2, [r4, #4]
  409ff6:	50e3      	str	r3, [r4, r3]
  409ff8:	e7b7      	b.n	409f6a <_free_r+0x5a>
  409ffa:	07ff      	lsls	r7, r7, #31
  409ffc:	4403      	add	r3, r0
  409ffe:	d407      	bmi.n	40a010 <_free_r+0x100>
  40a000:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40a004:	1aa4      	subs	r4, r4, r2
  40a006:	4413      	add	r3, r2
  40a008:	68a0      	ldr	r0, [r4, #8]
  40a00a:	68e2      	ldr	r2, [r4, #12]
  40a00c:	60c2      	str	r2, [r0, #12]
  40a00e:	6090      	str	r0, [r2, #8]
  40a010:	4a30      	ldr	r2, [pc, #192]	; (40a0d4 <_free_r+0x1c4>)
  40a012:	6812      	ldr	r2, [r2, #0]
  40a014:	f043 0001 	orr.w	r0, r3, #1
  40a018:	4293      	cmp	r3, r2
  40a01a:	6060      	str	r0, [r4, #4]
  40a01c:	608c      	str	r4, [r1, #8]
  40a01e:	d3b9      	bcc.n	409f94 <_free_r+0x84>
  40a020:	4b2d      	ldr	r3, [pc, #180]	; (40a0d8 <_free_r+0x1c8>)
  40a022:	4640      	mov	r0, r8
  40a024:	6819      	ldr	r1, [r3, #0]
  40a026:	f7ff ff23 	bl	409e70 <_malloc_trim_r>
  40a02a:	e7b3      	b.n	409f94 <_free_r+0x84>
  40a02c:	4610      	mov	r0, r2
  40a02e:	e7cd      	b.n	409fcc <_free_r+0xbc>
  40a030:	1811      	adds	r1, r2, r0
  40a032:	6849      	ldr	r1, [r1, #4]
  40a034:	07c9      	lsls	r1, r1, #31
  40a036:	d444      	bmi.n	40a0c2 <_free_r+0x1b2>
  40a038:	6891      	ldr	r1, [r2, #8]
  40a03a:	68d2      	ldr	r2, [r2, #12]
  40a03c:	60ca      	str	r2, [r1, #12]
  40a03e:	4403      	add	r3, r0
  40a040:	f043 0001 	orr.w	r0, r3, #1
  40a044:	6091      	str	r1, [r2, #8]
  40a046:	6060      	str	r0, [r4, #4]
  40a048:	50e3      	str	r3, [r4, r3]
  40a04a:	e7a3      	b.n	409f94 <_free_r+0x84>
  40a04c:	2a14      	cmp	r2, #20
  40a04e:	d816      	bhi.n	40a07e <_free_r+0x16e>
  40a050:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40a054:	00ff      	lsls	r7, r7, #3
  40a056:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40a05a:	e7aa      	b.n	409fb2 <_free_r+0xa2>
  40a05c:	10aa      	asrs	r2, r5, #2
  40a05e:	2301      	movs	r3, #1
  40a060:	684d      	ldr	r5, [r1, #4]
  40a062:	4093      	lsls	r3, r2
  40a064:	432b      	orrs	r3, r5
  40a066:	604b      	str	r3, [r1, #4]
  40a068:	4603      	mov	r3, r0
  40a06a:	e7b0      	b.n	409fce <_free_r+0xbe>
  40a06c:	f043 0201 	orr.w	r2, r3, #1
  40a070:	614c      	str	r4, [r1, #20]
  40a072:	610c      	str	r4, [r1, #16]
  40a074:	60e5      	str	r5, [r4, #12]
  40a076:	60a5      	str	r5, [r4, #8]
  40a078:	6062      	str	r2, [r4, #4]
  40a07a:	50e3      	str	r3, [r4, r3]
  40a07c:	e78a      	b.n	409f94 <_free_r+0x84>
  40a07e:	2a54      	cmp	r2, #84	; 0x54
  40a080:	d806      	bhi.n	40a090 <_free_r+0x180>
  40a082:	0b1a      	lsrs	r2, r3, #12
  40a084:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40a088:	00ff      	lsls	r7, r7, #3
  40a08a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40a08e:	e790      	b.n	409fb2 <_free_r+0xa2>
  40a090:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a094:	d806      	bhi.n	40a0a4 <_free_r+0x194>
  40a096:	0bda      	lsrs	r2, r3, #15
  40a098:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40a09c:	00ff      	lsls	r7, r7, #3
  40a09e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40a0a2:	e786      	b.n	409fb2 <_free_r+0xa2>
  40a0a4:	f240 5054 	movw	r0, #1364	; 0x554
  40a0a8:	4282      	cmp	r2, r0
  40a0aa:	d806      	bhi.n	40a0ba <_free_r+0x1aa>
  40a0ac:	0c9a      	lsrs	r2, r3, #18
  40a0ae:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40a0b2:	00ff      	lsls	r7, r7, #3
  40a0b4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40a0b8:	e77b      	b.n	409fb2 <_free_r+0xa2>
  40a0ba:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40a0be:	257e      	movs	r5, #126	; 0x7e
  40a0c0:	e777      	b.n	409fb2 <_free_r+0xa2>
  40a0c2:	f043 0101 	orr.w	r1, r3, #1
  40a0c6:	6061      	str	r1, [r4, #4]
  40a0c8:	6013      	str	r3, [r2, #0]
  40a0ca:	e763      	b.n	409f94 <_free_r+0x84>
  40a0cc:	20000454 	.word	0x20000454
  40a0d0:	2000045c 	.word	0x2000045c
  40a0d4:	20000860 	.word	0x20000860
  40a0d8:	2000ac80 	.word	0x2000ac80

0040a0dc <__ascii_mbtowc>:
  40a0dc:	b082      	sub	sp, #8
  40a0de:	b149      	cbz	r1, 40a0f4 <__ascii_mbtowc+0x18>
  40a0e0:	b15a      	cbz	r2, 40a0fa <__ascii_mbtowc+0x1e>
  40a0e2:	b16b      	cbz	r3, 40a100 <__ascii_mbtowc+0x24>
  40a0e4:	7813      	ldrb	r3, [r2, #0]
  40a0e6:	600b      	str	r3, [r1, #0]
  40a0e8:	7812      	ldrb	r2, [r2, #0]
  40a0ea:	1c10      	adds	r0, r2, #0
  40a0ec:	bf18      	it	ne
  40a0ee:	2001      	movne	r0, #1
  40a0f0:	b002      	add	sp, #8
  40a0f2:	4770      	bx	lr
  40a0f4:	a901      	add	r1, sp, #4
  40a0f6:	2a00      	cmp	r2, #0
  40a0f8:	d1f3      	bne.n	40a0e2 <__ascii_mbtowc+0x6>
  40a0fa:	4610      	mov	r0, r2
  40a0fc:	b002      	add	sp, #8
  40a0fe:	4770      	bx	lr
  40a100:	f06f 0001 	mvn.w	r0, #1
  40a104:	e7f4      	b.n	40a0f0 <__ascii_mbtowc+0x14>
  40a106:	bf00      	nop

0040a108 <memmove>:
  40a108:	4288      	cmp	r0, r1
  40a10a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a10c:	d90d      	bls.n	40a12a <memmove+0x22>
  40a10e:	188b      	adds	r3, r1, r2
  40a110:	4298      	cmp	r0, r3
  40a112:	d20a      	bcs.n	40a12a <memmove+0x22>
  40a114:	1884      	adds	r4, r0, r2
  40a116:	2a00      	cmp	r2, #0
  40a118:	d051      	beq.n	40a1be <memmove+0xb6>
  40a11a:	4622      	mov	r2, r4
  40a11c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40a120:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40a124:	4299      	cmp	r1, r3
  40a126:	d1f9      	bne.n	40a11c <memmove+0x14>
  40a128:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a12a:	2a0f      	cmp	r2, #15
  40a12c:	d948      	bls.n	40a1c0 <memmove+0xb8>
  40a12e:	ea41 0300 	orr.w	r3, r1, r0
  40a132:	079b      	lsls	r3, r3, #30
  40a134:	d146      	bne.n	40a1c4 <memmove+0xbc>
  40a136:	f100 0410 	add.w	r4, r0, #16
  40a13a:	f101 0310 	add.w	r3, r1, #16
  40a13e:	4615      	mov	r5, r2
  40a140:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40a144:	f844 6c10 	str.w	r6, [r4, #-16]
  40a148:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40a14c:	f844 6c0c 	str.w	r6, [r4, #-12]
  40a150:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40a154:	f844 6c08 	str.w	r6, [r4, #-8]
  40a158:	3d10      	subs	r5, #16
  40a15a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40a15e:	f844 6c04 	str.w	r6, [r4, #-4]
  40a162:	2d0f      	cmp	r5, #15
  40a164:	f103 0310 	add.w	r3, r3, #16
  40a168:	f104 0410 	add.w	r4, r4, #16
  40a16c:	d8e8      	bhi.n	40a140 <memmove+0x38>
  40a16e:	f1a2 0310 	sub.w	r3, r2, #16
  40a172:	f023 030f 	bic.w	r3, r3, #15
  40a176:	f002 0e0f 	and.w	lr, r2, #15
  40a17a:	3310      	adds	r3, #16
  40a17c:	f1be 0f03 	cmp.w	lr, #3
  40a180:	4419      	add	r1, r3
  40a182:	4403      	add	r3, r0
  40a184:	d921      	bls.n	40a1ca <memmove+0xc2>
  40a186:	1f1e      	subs	r6, r3, #4
  40a188:	460d      	mov	r5, r1
  40a18a:	4674      	mov	r4, lr
  40a18c:	3c04      	subs	r4, #4
  40a18e:	f855 7b04 	ldr.w	r7, [r5], #4
  40a192:	f846 7f04 	str.w	r7, [r6, #4]!
  40a196:	2c03      	cmp	r4, #3
  40a198:	d8f8      	bhi.n	40a18c <memmove+0x84>
  40a19a:	f1ae 0404 	sub.w	r4, lr, #4
  40a19e:	f024 0403 	bic.w	r4, r4, #3
  40a1a2:	3404      	adds	r4, #4
  40a1a4:	4421      	add	r1, r4
  40a1a6:	4423      	add	r3, r4
  40a1a8:	f002 0203 	and.w	r2, r2, #3
  40a1ac:	b162      	cbz	r2, 40a1c8 <memmove+0xc0>
  40a1ae:	3b01      	subs	r3, #1
  40a1b0:	440a      	add	r2, r1
  40a1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
  40a1b6:	f803 4f01 	strb.w	r4, [r3, #1]!
  40a1ba:	428a      	cmp	r2, r1
  40a1bc:	d1f9      	bne.n	40a1b2 <memmove+0xaa>
  40a1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a1c0:	4603      	mov	r3, r0
  40a1c2:	e7f3      	b.n	40a1ac <memmove+0xa4>
  40a1c4:	4603      	mov	r3, r0
  40a1c6:	e7f2      	b.n	40a1ae <memmove+0xa6>
  40a1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a1ca:	4672      	mov	r2, lr
  40a1cc:	e7ee      	b.n	40a1ac <memmove+0xa4>
  40a1ce:	bf00      	nop

0040a1d0 <_realloc_r>:
  40a1d0:	2900      	cmp	r1, #0
  40a1d2:	f000 8095 	beq.w	40a300 <_realloc_r+0x130>
  40a1d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a1da:	460d      	mov	r5, r1
  40a1dc:	4616      	mov	r6, r2
  40a1de:	b083      	sub	sp, #12
  40a1e0:	4680      	mov	r8, r0
  40a1e2:	f106 070b 	add.w	r7, r6, #11
  40a1e6:	f7ff fa1b 	bl	409620 <__malloc_lock>
  40a1ea:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40a1ee:	2f16      	cmp	r7, #22
  40a1f0:	f02e 0403 	bic.w	r4, lr, #3
  40a1f4:	f1a5 0908 	sub.w	r9, r5, #8
  40a1f8:	d83c      	bhi.n	40a274 <_realloc_r+0xa4>
  40a1fa:	2210      	movs	r2, #16
  40a1fc:	4617      	mov	r7, r2
  40a1fe:	42be      	cmp	r6, r7
  40a200:	d83d      	bhi.n	40a27e <_realloc_r+0xae>
  40a202:	4294      	cmp	r4, r2
  40a204:	da43      	bge.n	40a28e <_realloc_r+0xbe>
  40a206:	4bc4      	ldr	r3, [pc, #784]	; (40a518 <_realloc_r+0x348>)
  40a208:	6899      	ldr	r1, [r3, #8]
  40a20a:	eb09 0004 	add.w	r0, r9, r4
  40a20e:	4288      	cmp	r0, r1
  40a210:	f000 80b4 	beq.w	40a37c <_realloc_r+0x1ac>
  40a214:	6843      	ldr	r3, [r0, #4]
  40a216:	f023 0101 	bic.w	r1, r3, #1
  40a21a:	4401      	add	r1, r0
  40a21c:	6849      	ldr	r1, [r1, #4]
  40a21e:	07c9      	lsls	r1, r1, #31
  40a220:	d54c      	bpl.n	40a2bc <_realloc_r+0xec>
  40a222:	f01e 0f01 	tst.w	lr, #1
  40a226:	f000 809b 	beq.w	40a360 <_realloc_r+0x190>
  40a22a:	4631      	mov	r1, r6
  40a22c:	4640      	mov	r0, r8
  40a22e:	f7fe fef5 	bl	40901c <_malloc_r>
  40a232:	4606      	mov	r6, r0
  40a234:	2800      	cmp	r0, #0
  40a236:	d03a      	beq.n	40a2ae <_realloc_r+0xde>
  40a238:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40a23c:	f023 0301 	bic.w	r3, r3, #1
  40a240:	444b      	add	r3, r9
  40a242:	f1a0 0208 	sub.w	r2, r0, #8
  40a246:	429a      	cmp	r2, r3
  40a248:	f000 8121 	beq.w	40a48e <_realloc_r+0x2be>
  40a24c:	1f22      	subs	r2, r4, #4
  40a24e:	2a24      	cmp	r2, #36	; 0x24
  40a250:	f200 8107 	bhi.w	40a462 <_realloc_r+0x292>
  40a254:	2a13      	cmp	r2, #19
  40a256:	f200 80db 	bhi.w	40a410 <_realloc_r+0x240>
  40a25a:	4603      	mov	r3, r0
  40a25c:	462a      	mov	r2, r5
  40a25e:	6811      	ldr	r1, [r2, #0]
  40a260:	6019      	str	r1, [r3, #0]
  40a262:	6851      	ldr	r1, [r2, #4]
  40a264:	6059      	str	r1, [r3, #4]
  40a266:	6892      	ldr	r2, [r2, #8]
  40a268:	609a      	str	r2, [r3, #8]
  40a26a:	4629      	mov	r1, r5
  40a26c:	4640      	mov	r0, r8
  40a26e:	f7ff fe4f 	bl	409f10 <_free_r>
  40a272:	e01c      	b.n	40a2ae <_realloc_r+0xde>
  40a274:	f027 0707 	bic.w	r7, r7, #7
  40a278:	2f00      	cmp	r7, #0
  40a27a:	463a      	mov	r2, r7
  40a27c:	dabf      	bge.n	40a1fe <_realloc_r+0x2e>
  40a27e:	2600      	movs	r6, #0
  40a280:	230c      	movs	r3, #12
  40a282:	4630      	mov	r0, r6
  40a284:	f8c8 3000 	str.w	r3, [r8]
  40a288:	b003      	add	sp, #12
  40a28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a28e:	462e      	mov	r6, r5
  40a290:	1be3      	subs	r3, r4, r7
  40a292:	2b0f      	cmp	r3, #15
  40a294:	d81e      	bhi.n	40a2d4 <_realloc_r+0x104>
  40a296:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40a29a:	f003 0301 	and.w	r3, r3, #1
  40a29e:	4323      	orrs	r3, r4
  40a2a0:	444c      	add	r4, r9
  40a2a2:	f8c9 3004 	str.w	r3, [r9, #4]
  40a2a6:	6863      	ldr	r3, [r4, #4]
  40a2a8:	f043 0301 	orr.w	r3, r3, #1
  40a2ac:	6063      	str	r3, [r4, #4]
  40a2ae:	4640      	mov	r0, r8
  40a2b0:	f7ff f9bc 	bl	40962c <__malloc_unlock>
  40a2b4:	4630      	mov	r0, r6
  40a2b6:	b003      	add	sp, #12
  40a2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a2bc:	f023 0303 	bic.w	r3, r3, #3
  40a2c0:	18e1      	adds	r1, r4, r3
  40a2c2:	4291      	cmp	r1, r2
  40a2c4:	db1f      	blt.n	40a306 <_realloc_r+0x136>
  40a2c6:	68c3      	ldr	r3, [r0, #12]
  40a2c8:	6882      	ldr	r2, [r0, #8]
  40a2ca:	462e      	mov	r6, r5
  40a2cc:	60d3      	str	r3, [r2, #12]
  40a2ce:	460c      	mov	r4, r1
  40a2d0:	609a      	str	r2, [r3, #8]
  40a2d2:	e7dd      	b.n	40a290 <_realloc_r+0xc0>
  40a2d4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40a2d8:	eb09 0107 	add.w	r1, r9, r7
  40a2dc:	f002 0201 	and.w	r2, r2, #1
  40a2e0:	444c      	add	r4, r9
  40a2e2:	f043 0301 	orr.w	r3, r3, #1
  40a2e6:	4317      	orrs	r7, r2
  40a2e8:	f8c9 7004 	str.w	r7, [r9, #4]
  40a2ec:	604b      	str	r3, [r1, #4]
  40a2ee:	6863      	ldr	r3, [r4, #4]
  40a2f0:	f043 0301 	orr.w	r3, r3, #1
  40a2f4:	3108      	adds	r1, #8
  40a2f6:	6063      	str	r3, [r4, #4]
  40a2f8:	4640      	mov	r0, r8
  40a2fa:	f7ff fe09 	bl	409f10 <_free_r>
  40a2fe:	e7d6      	b.n	40a2ae <_realloc_r+0xde>
  40a300:	4611      	mov	r1, r2
  40a302:	f7fe be8b 	b.w	40901c <_malloc_r>
  40a306:	f01e 0f01 	tst.w	lr, #1
  40a30a:	d18e      	bne.n	40a22a <_realloc_r+0x5a>
  40a30c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a310:	eba9 0a01 	sub.w	sl, r9, r1
  40a314:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a318:	f021 0103 	bic.w	r1, r1, #3
  40a31c:	440b      	add	r3, r1
  40a31e:	4423      	add	r3, r4
  40a320:	4293      	cmp	r3, r2
  40a322:	db25      	blt.n	40a370 <_realloc_r+0x1a0>
  40a324:	68c2      	ldr	r2, [r0, #12]
  40a326:	6881      	ldr	r1, [r0, #8]
  40a328:	4656      	mov	r6, sl
  40a32a:	60ca      	str	r2, [r1, #12]
  40a32c:	6091      	str	r1, [r2, #8]
  40a32e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a332:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a336:	1f22      	subs	r2, r4, #4
  40a338:	2a24      	cmp	r2, #36	; 0x24
  40a33a:	60c1      	str	r1, [r0, #12]
  40a33c:	6088      	str	r0, [r1, #8]
  40a33e:	f200 8094 	bhi.w	40a46a <_realloc_r+0x29a>
  40a342:	2a13      	cmp	r2, #19
  40a344:	d96f      	bls.n	40a426 <_realloc_r+0x256>
  40a346:	6829      	ldr	r1, [r5, #0]
  40a348:	f8ca 1008 	str.w	r1, [sl, #8]
  40a34c:	6869      	ldr	r1, [r5, #4]
  40a34e:	f8ca 100c 	str.w	r1, [sl, #12]
  40a352:	2a1b      	cmp	r2, #27
  40a354:	f200 80a2 	bhi.w	40a49c <_realloc_r+0x2cc>
  40a358:	3508      	adds	r5, #8
  40a35a:	f10a 0210 	add.w	r2, sl, #16
  40a35e:	e063      	b.n	40a428 <_realloc_r+0x258>
  40a360:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40a364:	eba9 0a03 	sub.w	sl, r9, r3
  40a368:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a36c:	f021 0103 	bic.w	r1, r1, #3
  40a370:	1863      	adds	r3, r4, r1
  40a372:	4293      	cmp	r3, r2
  40a374:	f6ff af59 	blt.w	40a22a <_realloc_r+0x5a>
  40a378:	4656      	mov	r6, sl
  40a37a:	e7d8      	b.n	40a32e <_realloc_r+0x15e>
  40a37c:	6841      	ldr	r1, [r0, #4]
  40a37e:	f021 0b03 	bic.w	fp, r1, #3
  40a382:	44a3      	add	fp, r4
  40a384:	f107 0010 	add.w	r0, r7, #16
  40a388:	4583      	cmp	fp, r0
  40a38a:	da56      	bge.n	40a43a <_realloc_r+0x26a>
  40a38c:	f01e 0f01 	tst.w	lr, #1
  40a390:	f47f af4b 	bne.w	40a22a <_realloc_r+0x5a>
  40a394:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a398:	eba9 0a01 	sub.w	sl, r9, r1
  40a39c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a3a0:	f021 0103 	bic.w	r1, r1, #3
  40a3a4:	448b      	add	fp, r1
  40a3a6:	4558      	cmp	r0, fp
  40a3a8:	dce2      	bgt.n	40a370 <_realloc_r+0x1a0>
  40a3aa:	4656      	mov	r6, sl
  40a3ac:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a3b0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a3b4:	1f22      	subs	r2, r4, #4
  40a3b6:	2a24      	cmp	r2, #36	; 0x24
  40a3b8:	60c1      	str	r1, [r0, #12]
  40a3ba:	6088      	str	r0, [r1, #8]
  40a3bc:	f200 808f 	bhi.w	40a4de <_realloc_r+0x30e>
  40a3c0:	2a13      	cmp	r2, #19
  40a3c2:	f240 808a 	bls.w	40a4da <_realloc_r+0x30a>
  40a3c6:	6829      	ldr	r1, [r5, #0]
  40a3c8:	f8ca 1008 	str.w	r1, [sl, #8]
  40a3cc:	6869      	ldr	r1, [r5, #4]
  40a3ce:	f8ca 100c 	str.w	r1, [sl, #12]
  40a3d2:	2a1b      	cmp	r2, #27
  40a3d4:	f200 808a 	bhi.w	40a4ec <_realloc_r+0x31c>
  40a3d8:	3508      	adds	r5, #8
  40a3da:	f10a 0210 	add.w	r2, sl, #16
  40a3de:	6829      	ldr	r1, [r5, #0]
  40a3e0:	6011      	str	r1, [r2, #0]
  40a3e2:	6869      	ldr	r1, [r5, #4]
  40a3e4:	6051      	str	r1, [r2, #4]
  40a3e6:	68a9      	ldr	r1, [r5, #8]
  40a3e8:	6091      	str	r1, [r2, #8]
  40a3ea:	eb0a 0107 	add.w	r1, sl, r7
  40a3ee:	ebab 0207 	sub.w	r2, fp, r7
  40a3f2:	f042 0201 	orr.w	r2, r2, #1
  40a3f6:	6099      	str	r1, [r3, #8]
  40a3f8:	604a      	str	r2, [r1, #4]
  40a3fa:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a3fe:	f003 0301 	and.w	r3, r3, #1
  40a402:	431f      	orrs	r7, r3
  40a404:	4640      	mov	r0, r8
  40a406:	f8ca 7004 	str.w	r7, [sl, #4]
  40a40a:	f7ff f90f 	bl	40962c <__malloc_unlock>
  40a40e:	e751      	b.n	40a2b4 <_realloc_r+0xe4>
  40a410:	682b      	ldr	r3, [r5, #0]
  40a412:	6003      	str	r3, [r0, #0]
  40a414:	686b      	ldr	r3, [r5, #4]
  40a416:	6043      	str	r3, [r0, #4]
  40a418:	2a1b      	cmp	r2, #27
  40a41a:	d82d      	bhi.n	40a478 <_realloc_r+0x2a8>
  40a41c:	f100 0308 	add.w	r3, r0, #8
  40a420:	f105 0208 	add.w	r2, r5, #8
  40a424:	e71b      	b.n	40a25e <_realloc_r+0x8e>
  40a426:	4632      	mov	r2, r6
  40a428:	6829      	ldr	r1, [r5, #0]
  40a42a:	6011      	str	r1, [r2, #0]
  40a42c:	6869      	ldr	r1, [r5, #4]
  40a42e:	6051      	str	r1, [r2, #4]
  40a430:	68a9      	ldr	r1, [r5, #8]
  40a432:	6091      	str	r1, [r2, #8]
  40a434:	461c      	mov	r4, r3
  40a436:	46d1      	mov	r9, sl
  40a438:	e72a      	b.n	40a290 <_realloc_r+0xc0>
  40a43a:	eb09 0107 	add.w	r1, r9, r7
  40a43e:	ebab 0b07 	sub.w	fp, fp, r7
  40a442:	f04b 0201 	orr.w	r2, fp, #1
  40a446:	6099      	str	r1, [r3, #8]
  40a448:	604a      	str	r2, [r1, #4]
  40a44a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40a44e:	f003 0301 	and.w	r3, r3, #1
  40a452:	431f      	orrs	r7, r3
  40a454:	4640      	mov	r0, r8
  40a456:	f845 7c04 	str.w	r7, [r5, #-4]
  40a45a:	f7ff f8e7 	bl	40962c <__malloc_unlock>
  40a45e:	462e      	mov	r6, r5
  40a460:	e728      	b.n	40a2b4 <_realloc_r+0xe4>
  40a462:	4629      	mov	r1, r5
  40a464:	f7ff fe50 	bl	40a108 <memmove>
  40a468:	e6ff      	b.n	40a26a <_realloc_r+0x9a>
  40a46a:	4629      	mov	r1, r5
  40a46c:	4630      	mov	r0, r6
  40a46e:	461c      	mov	r4, r3
  40a470:	46d1      	mov	r9, sl
  40a472:	f7ff fe49 	bl	40a108 <memmove>
  40a476:	e70b      	b.n	40a290 <_realloc_r+0xc0>
  40a478:	68ab      	ldr	r3, [r5, #8]
  40a47a:	6083      	str	r3, [r0, #8]
  40a47c:	68eb      	ldr	r3, [r5, #12]
  40a47e:	60c3      	str	r3, [r0, #12]
  40a480:	2a24      	cmp	r2, #36	; 0x24
  40a482:	d017      	beq.n	40a4b4 <_realloc_r+0x2e4>
  40a484:	f100 0310 	add.w	r3, r0, #16
  40a488:	f105 0210 	add.w	r2, r5, #16
  40a48c:	e6e7      	b.n	40a25e <_realloc_r+0x8e>
  40a48e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40a492:	f023 0303 	bic.w	r3, r3, #3
  40a496:	441c      	add	r4, r3
  40a498:	462e      	mov	r6, r5
  40a49a:	e6f9      	b.n	40a290 <_realloc_r+0xc0>
  40a49c:	68a9      	ldr	r1, [r5, #8]
  40a49e:	f8ca 1010 	str.w	r1, [sl, #16]
  40a4a2:	68e9      	ldr	r1, [r5, #12]
  40a4a4:	f8ca 1014 	str.w	r1, [sl, #20]
  40a4a8:	2a24      	cmp	r2, #36	; 0x24
  40a4aa:	d00c      	beq.n	40a4c6 <_realloc_r+0x2f6>
  40a4ac:	3510      	adds	r5, #16
  40a4ae:	f10a 0218 	add.w	r2, sl, #24
  40a4b2:	e7b9      	b.n	40a428 <_realloc_r+0x258>
  40a4b4:	692b      	ldr	r3, [r5, #16]
  40a4b6:	6103      	str	r3, [r0, #16]
  40a4b8:	696b      	ldr	r3, [r5, #20]
  40a4ba:	6143      	str	r3, [r0, #20]
  40a4bc:	f105 0218 	add.w	r2, r5, #24
  40a4c0:	f100 0318 	add.w	r3, r0, #24
  40a4c4:	e6cb      	b.n	40a25e <_realloc_r+0x8e>
  40a4c6:	692a      	ldr	r2, [r5, #16]
  40a4c8:	f8ca 2018 	str.w	r2, [sl, #24]
  40a4cc:	696a      	ldr	r2, [r5, #20]
  40a4ce:	f8ca 201c 	str.w	r2, [sl, #28]
  40a4d2:	3518      	adds	r5, #24
  40a4d4:	f10a 0220 	add.w	r2, sl, #32
  40a4d8:	e7a6      	b.n	40a428 <_realloc_r+0x258>
  40a4da:	4632      	mov	r2, r6
  40a4dc:	e77f      	b.n	40a3de <_realloc_r+0x20e>
  40a4de:	4629      	mov	r1, r5
  40a4e0:	4630      	mov	r0, r6
  40a4e2:	9301      	str	r3, [sp, #4]
  40a4e4:	f7ff fe10 	bl	40a108 <memmove>
  40a4e8:	9b01      	ldr	r3, [sp, #4]
  40a4ea:	e77e      	b.n	40a3ea <_realloc_r+0x21a>
  40a4ec:	68a9      	ldr	r1, [r5, #8]
  40a4ee:	f8ca 1010 	str.w	r1, [sl, #16]
  40a4f2:	68e9      	ldr	r1, [r5, #12]
  40a4f4:	f8ca 1014 	str.w	r1, [sl, #20]
  40a4f8:	2a24      	cmp	r2, #36	; 0x24
  40a4fa:	d003      	beq.n	40a504 <_realloc_r+0x334>
  40a4fc:	3510      	adds	r5, #16
  40a4fe:	f10a 0218 	add.w	r2, sl, #24
  40a502:	e76c      	b.n	40a3de <_realloc_r+0x20e>
  40a504:	692a      	ldr	r2, [r5, #16]
  40a506:	f8ca 2018 	str.w	r2, [sl, #24]
  40a50a:	696a      	ldr	r2, [r5, #20]
  40a50c:	f8ca 201c 	str.w	r2, [sl, #28]
  40a510:	3518      	adds	r5, #24
  40a512:	f10a 0220 	add.w	r2, sl, #32
  40a516:	e762      	b.n	40a3de <_realloc_r+0x20e>
  40a518:	20000454 	.word	0x20000454

0040a51c <__ascii_wctomb>:
  40a51c:	b121      	cbz	r1, 40a528 <__ascii_wctomb+0xc>
  40a51e:	2aff      	cmp	r2, #255	; 0xff
  40a520:	d804      	bhi.n	40a52c <__ascii_wctomb+0x10>
  40a522:	700a      	strb	r2, [r1, #0]
  40a524:	2001      	movs	r0, #1
  40a526:	4770      	bx	lr
  40a528:	4608      	mov	r0, r1
  40a52a:	4770      	bx	lr
  40a52c:	238a      	movs	r3, #138	; 0x8a
  40a52e:	6003      	str	r3, [r0, #0]
  40a530:	f04f 30ff 	mov.w	r0, #4294967295
  40a534:	4770      	bx	lr
  40a536:	bf00      	nop

0040a538 <__aeabi_drsub>:
  40a538:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a53c:	e002      	b.n	40a544 <__adddf3>
  40a53e:	bf00      	nop

0040a540 <__aeabi_dsub>:
  40a540:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a544 <__adddf3>:
  40a544:	b530      	push	{r4, r5, lr}
  40a546:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a54a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a54e:	ea94 0f05 	teq	r4, r5
  40a552:	bf08      	it	eq
  40a554:	ea90 0f02 	teqeq	r0, r2
  40a558:	bf1f      	itttt	ne
  40a55a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a55e:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a562:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a566:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a56a:	f000 80e2 	beq.w	40a732 <__adddf3+0x1ee>
  40a56e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a572:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a576:	bfb8      	it	lt
  40a578:	426d      	neglt	r5, r5
  40a57a:	dd0c      	ble.n	40a596 <__adddf3+0x52>
  40a57c:	442c      	add	r4, r5
  40a57e:	ea80 0202 	eor.w	r2, r0, r2
  40a582:	ea81 0303 	eor.w	r3, r1, r3
  40a586:	ea82 0000 	eor.w	r0, r2, r0
  40a58a:	ea83 0101 	eor.w	r1, r3, r1
  40a58e:	ea80 0202 	eor.w	r2, r0, r2
  40a592:	ea81 0303 	eor.w	r3, r1, r3
  40a596:	2d36      	cmp	r5, #54	; 0x36
  40a598:	bf88      	it	hi
  40a59a:	bd30      	pophi	{r4, r5, pc}
  40a59c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a5a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a5a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a5a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a5ac:	d002      	beq.n	40a5b4 <__adddf3+0x70>
  40a5ae:	4240      	negs	r0, r0
  40a5b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a5b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a5b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a5bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a5c0:	d002      	beq.n	40a5c8 <__adddf3+0x84>
  40a5c2:	4252      	negs	r2, r2
  40a5c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a5c8:	ea94 0f05 	teq	r4, r5
  40a5cc:	f000 80a7 	beq.w	40a71e <__adddf3+0x1da>
  40a5d0:	f1a4 0401 	sub.w	r4, r4, #1
  40a5d4:	f1d5 0e20 	rsbs	lr, r5, #32
  40a5d8:	db0d      	blt.n	40a5f6 <__adddf3+0xb2>
  40a5da:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a5de:	fa22 f205 	lsr.w	r2, r2, r5
  40a5e2:	1880      	adds	r0, r0, r2
  40a5e4:	f141 0100 	adc.w	r1, r1, #0
  40a5e8:	fa03 f20e 	lsl.w	r2, r3, lr
  40a5ec:	1880      	adds	r0, r0, r2
  40a5ee:	fa43 f305 	asr.w	r3, r3, r5
  40a5f2:	4159      	adcs	r1, r3
  40a5f4:	e00e      	b.n	40a614 <__adddf3+0xd0>
  40a5f6:	f1a5 0520 	sub.w	r5, r5, #32
  40a5fa:	f10e 0e20 	add.w	lr, lr, #32
  40a5fe:	2a01      	cmp	r2, #1
  40a600:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a604:	bf28      	it	cs
  40a606:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a60a:	fa43 f305 	asr.w	r3, r3, r5
  40a60e:	18c0      	adds	r0, r0, r3
  40a610:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a614:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a618:	d507      	bpl.n	40a62a <__adddf3+0xe6>
  40a61a:	f04f 0e00 	mov.w	lr, #0
  40a61e:	f1dc 0c00 	rsbs	ip, ip, #0
  40a622:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a626:	eb6e 0101 	sbc.w	r1, lr, r1
  40a62a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a62e:	d31b      	bcc.n	40a668 <__adddf3+0x124>
  40a630:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a634:	d30c      	bcc.n	40a650 <__adddf3+0x10c>
  40a636:	0849      	lsrs	r1, r1, #1
  40a638:	ea5f 0030 	movs.w	r0, r0, rrx
  40a63c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a640:	f104 0401 	add.w	r4, r4, #1
  40a644:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a648:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a64c:	f080 809a 	bcs.w	40a784 <__adddf3+0x240>
  40a650:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a654:	bf08      	it	eq
  40a656:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a65a:	f150 0000 	adcs.w	r0, r0, #0
  40a65e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a662:	ea41 0105 	orr.w	r1, r1, r5
  40a666:	bd30      	pop	{r4, r5, pc}
  40a668:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a66c:	4140      	adcs	r0, r0
  40a66e:	eb41 0101 	adc.w	r1, r1, r1
  40a672:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a676:	f1a4 0401 	sub.w	r4, r4, #1
  40a67a:	d1e9      	bne.n	40a650 <__adddf3+0x10c>
  40a67c:	f091 0f00 	teq	r1, #0
  40a680:	bf04      	itt	eq
  40a682:	4601      	moveq	r1, r0
  40a684:	2000      	moveq	r0, #0
  40a686:	fab1 f381 	clz	r3, r1
  40a68a:	bf08      	it	eq
  40a68c:	3320      	addeq	r3, #32
  40a68e:	f1a3 030b 	sub.w	r3, r3, #11
  40a692:	f1b3 0220 	subs.w	r2, r3, #32
  40a696:	da0c      	bge.n	40a6b2 <__adddf3+0x16e>
  40a698:	320c      	adds	r2, #12
  40a69a:	dd08      	ble.n	40a6ae <__adddf3+0x16a>
  40a69c:	f102 0c14 	add.w	ip, r2, #20
  40a6a0:	f1c2 020c 	rsb	r2, r2, #12
  40a6a4:	fa01 f00c 	lsl.w	r0, r1, ip
  40a6a8:	fa21 f102 	lsr.w	r1, r1, r2
  40a6ac:	e00c      	b.n	40a6c8 <__adddf3+0x184>
  40a6ae:	f102 0214 	add.w	r2, r2, #20
  40a6b2:	bfd8      	it	le
  40a6b4:	f1c2 0c20 	rsble	ip, r2, #32
  40a6b8:	fa01 f102 	lsl.w	r1, r1, r2
  40a6bc:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a6c0:	bfdc      	itt	le
  40a6c2:	ea41 010c 	orrle.w	r1, r1, ip
  40a6c6:	4090      	lslle	r0, r2
  40a6c8:	1ae4      	subs	r4, r4, r3
  40a6ca:	bfa2      	ittt	ge
  40a6cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a6d0:	4329      	orrge	r1, r5
  40a6d2:	bd30      	popge	{r4, r5, pc}
  40a6d4:	ea6f 0404 	mvn.w	r4, r4
  40a6d8:	3c1f      	subs	r4, #31
  40a6da:	da1c      	bge.n	40a716 <__adddf3+0x1d2>
  40a6dc:	340c      	adds	r4, #12
  40a6de:	dc0e      	bgt.n	40a6fe <__adddf3+0x1ba>
  40a6e0:	f104 0414 	add.w	r4, r4, #20
  40a6e4:	f1c4 0220 	rsb	r2, r4, #32
  40a6e8:	fa20 f004 	lsr.w	r0, r0, r4
  40a6ec:	fa01 f302 	lsl.w	r3, r1, r2
  40a6f0:	ea40 0003 	orr.w	r0, r0, r3
  40a6f4:	fa21 f304 	lsr.w	r3, r1, r4
  40a6f8:	ea45 0103 	orr.w	r1, r5, r3
  40a6fc:	bd30      	pop	{r4, r5, pc}
  40a6fe:	f1c4 040c 	rsb	r4, r4, #12
  40a702:	f1c4 0220 	rsb	r2, r4, #32
  40a706:	fa20 f002 	lsr.w	r0, r0, r2
  40a70a:	fa01 f304 	lsl.w	r3, r1, r4
  40a70e:	ea40 0003 	orr.w	r0, r0, r3
  40a712:	4629      	mov	r1, r5
  40a714:	bd30      	pop	{r4, r5, pc}
  40a716:	fa21 f004 	lsr.w	r0, r1, r4
  40a71a:	4629      	mov	r1, r5
  40a71c:	bd30      	pop	{r4, r5, pc}
  40a71e:	f094 0f00 	teq	r4, #0
  40a722:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a726:	bf06      	itte	eq
  40a728:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a72c:	3401      	addeq	r4, #1
  40a72e:	3d01      	subne	r5, #1
  40a730:	e74e      	b.n	40a5d0 <__adddf3+0x8c>
  40a732:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a736:	bf18      	it	ne
  40a738:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a73c:	d029      	beq.n	40a792 <__adddf3+0x24e>
  40a73e:	ea94 0f05 	teq	r4, r5
  40a742:	bf08      	it	eq
  40a744:	ea90 0f02 	teqeq	r0, r2
  40a748:	d005      	beq.n	40a756 <__adddf3+0x212>
  40a74a:	ea54 0c00 	orrs.w	ip, r4, r0
  40a74e:	bf04      	itt	eq
  40a750:	4619      	moveq	r1, r3
  40a752:	4610      	moveq	r0, r2
  40a754:	bd30      	pop	{r4, r5, pc}
  40a756:	ea91 0f03 	teq	r1, r3
  40a75a:	bf1e      	ittt	ne
  40a75c:	2100      	movne	r1, #0
  40a75e:	2000      	movne	r0, #0
  40a760:	bd30      	popne	{r4, r5, pc}
  40a762:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a766:	d105      	bne.n	40a774 <__adddf3+0x230>
  40a768:	0040      	lsls	r0, r0, #1
  40a76a:	4149      	adcs	r1, r1
  40a76c:	bf28      	it	cs
  40a76e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a772:	bd30      	pop	{r4, r5, pc}
  40a774:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a778:	bf3c      	itt	cc
  40a77a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a77e:	bd30      	popcc	{r4, r5, pc}
  40a780:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a784:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a78c:	f04f 0000 	mov.w	r0, #0
  40a790:	bd30      	pop	{r4, r5, pc}
  40a792:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a796:	bf1a      	itte	ne
  40a798:	4619      	movne	r1, r3
  40a79a:	4610      	movne	r0, r2
  40a79c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a7a0:	bf1c      	itt	ne
  40a7a2:	460b      	movne	r3, r1
  40a7a4:	4602      	movne	r2, r0
  40a7a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a7aa:	bf06      	itte	eq
  40a7ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a7b0:	ea91 0f03 	teqeq	r1, r3
  40a7b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a7b8:	bd30      	pop	{r4, r5, pc}
  40a7ba:	bf00      	nop

0040a7bc <__aeabi_ui2d>:
  40a7bc:	f090 0f00 	teq	r0, #0
  40a7c0:	bf04      	itt	eq
  40a7c2:	2100      	moveq	r1, #0
  40a7c4:	4770      	bxeq	lr
  40a7c6:	b530      	push	{r4, r5, lr}
  40a7c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a7cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a7d0:	f04f 0500 	mov.w	r5, #0
  40a7d4:	f04f 0100 	mov.w	r1, #0
  40a7d8:	e750      	b.n	40a67c <__adddf3+0x138>
  40a7da:	bf00      	nop

0040a7dc <__aeabi_i2d>:
  40a7dc:	f090 0f00 	teq	r0, #0
  40a7e0:	bf04      	itt	eq
  40a7e2:	2100      	moveq	r1, #0
  40a7e4:	4770      	bxeq	lr
  40a7e6:	b530      	push	{r4, r5, lr}
  40a7e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a7ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a7f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a7f4:	bf48      	it	mi
  40a7f6:	4240      	negmi	r0, r0
  40a7f8:	f04f 0100 	mov.w	r1, #0
  40a7fc:	e73e      	b.n	40a67c <__adddf3+0x138>
  40a7fe:	bf00      	nop

0040a800 <__aeabi_f2d>:
  40a800:	0042      	lsls	r2, r0, #1
  40a802:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a806:	ea4f 0131 	mov.w	r1, r1, rrx
  40a80a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a80e:	bf1f      	itttt	ne
  40a810:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a814:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a818:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a81c:	4770      	bxne	lr
  40a81e:	f092 0f00 	teq	r2, #0
  40a822:	bf14      	ite	ne
  40a824:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a828:	4770      	bxeq	lr
  40a82a:	b530      	push	{r4, r5, lr}
  40a82c:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a830:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a834:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a838:	e720      	b.n	40a67c <__adddf3+0x138>
  40a83a:	bf00      	nop

0040a83c <__aeabi_ul2d>:
  40a83c:	ea50 0201 	orrs.w	r2, r0, r1
  40a840:	bf08      	it	eq
  40a842:	4770      	bxeq	lr
  40a844:	b530      	push	{r4, r5, lr}
  40a846:	f04f 0500 	mov.w	r5, #0
  40a84a:	e00a      	b.n	40a862 <__aeabi_l2d+0x16>

0040a84c <__aeabi_l2d>:
  40a84c:	ea50 0201 	orrs.w	r2, r0, r1
  40a850:	bf08      	it	eq
  40a852:	4770      	bxeq	lr
  40a854:	b530      	push	{r4, r5, lr}
  40a856:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a85a:	d502      	bpl.n	40a862 <__aeabi_l2d+0x16>
  40a85c:	4240      	negs	r0, r0
  40a85e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a862:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a866:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a86a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a86e:	f43f aedc 	beq.w	40a62a <__adddf3+0xe6>
  40a872:	f04f 0203 	mov.w	r2, #3
  40a876:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a87a:	bf18      	it	ne
  40a87c:	3203      	addne	r2, #3
  40a87e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a882:	bf18      	it	ne
  40a884:	3203      	addne	r2, #3
  40a886:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a88a:	f1c2 0320 	rsb	r3, r2, #32
  40a88e:	fa00 fc03 	lsl.w	ip, r0, r3
  40a892:	fa20 f002 	lsr.w	r0, r0, r2
  40a896:	fa01 fe03 	lsl.w	lr, r1, r3
  40a89a:	ea40 000e 	orr.w	r0, r0, lr
  40a89e:	fa21 f102 	lsr.w	r1, r1, r2
  40a8a2:	4414      	add	r4, r2
  40a8a4:	e6c1      	b.n	40a62a <__adddf3+0xe6>
  40a8a6:	bf00      	nop

0040a8a8 <__aeabi_dmul>:
  40a8a8:	b570      	push	{r4, r5, r6, lr}
  40a8aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a8ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a8b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a8b6:	bf1d      	ittte	ne
  40a8b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a8bc:	ea94 0f0c 	teqne	r4, ip
  40a8c0:	ea95 0f0c 	teqne	r5, ip
  40a8c4:	f000 f8de 	bleq	40aa84 <__aeabi_dmul+0x1dc>
  40a8c8:	442c      	add	r4, r5
  40a8ca:	ea81 0603 	eor.w	r6, r1, r3
  40a8ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a8d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a8d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a8da:	bf18      	it	ne
  40a8dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a8e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a8e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a8e8:	d038      	beq.n	40a95c <__aeabi_dmul+0xb4>
  40a8ea:	fba0 ce02 	umull	ip, lr, r0, r2
  40a8ee:	f04f 0500 	mov.w	r5, #0
  40a8f2:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a8f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a8fa:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a8fe:	f04f 0600 	mov.w	r6, #0
  40a902:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a906:	f09c 0f00 	teq	ip, #0
  40a90a:	bf18      	it	ne
  40a90c:	f04e 0e01 	orrne.w	lr, lr, #1
  40a910:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a914:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a918:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a91c:	d204      	bcs.n	40a928 <__aeabi_dmul+0x80>
  40a91e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a922:	416d      	adcs	r5, r5
  40a924:	eb46 0606 	adc.w	r6, r6, r6
  40a928:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a92c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a930:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a934:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a938:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a93c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a940:	bf88      	it	hi
  40a942:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a946:	d81e      	bhi.n	40a986 <__aeabi_dmul+0xde>
  40a948:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a94c:	bf08      	it	eq
  40a94e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a952:	f150 0000 	adcs.w	r0, r0, #0
  40a956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a95a:	bd70      	pop	{r4, r5, r6, pc}
  40a95c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a960:	ea46 0101 	orr.w	r1, r6, r1
  40a964:	ea40 0002 	orr.w	r0, r0, r2
  40a968:	ea81 0103 	eor.w	r1, r1, r3
  40a96c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a970:	bfc2      	ittt	gt
  40a972:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a97a:	bd70      	popgt	{r4, r5, r6, pc}
  40a97c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a980:	f04f 0e00 	mov.w	lr, #0
  40a984:	3c01      	subs	r4, #1
  40a986:	f300 80ab 	bgt.w	40aae0 <__aeabi_dmul+0x238>
  40a98a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a98e:	bfde      	ittt	le
  40a990:	2000      	movle	r0, #0
  40a992:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a996:	bd70      	pople	{r4, r5, r6, pc}
  40a998:	f1c4 0400 	rsb	r4, r4, #0
  40a99c:	3c20      	subs	r4, #32
  40a99e:	da35      	bge.n	40aa0c <__aeabi_dmul+0x164>
  40a9a0:	340c      	adds	r4, #12
  40a9a2:	dc1b      	bgt.n	40a9dc <__aeabi_dmul+0x134>
  40a9a4:	f104 0414 	add.w	r4, r4, #20
  40a9a8:	f1c4 0520 	rsb	r5, r4, #32
  40a9ac:	fa00 f305 	lsl.w	r3, r0, r5
  40a9b0:	fa20 f004 	lsr.w	r0, r0, r4
  40a9b4:	fa01 f205 	lsl.w	r2, r1, r5
  40a9b8:	ea40 0002 	orr.w	r0, r0, r2
  40a9bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40a9c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a9c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a9c8:	fa21 f604 	lsr.w	r6, r1, r4
  40a9cc:	eb42 0106 	adc.w	r1, r2, r6
  40a9d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40a9d4:	bf08      	it	eq
  40a9d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40a9da:	bd70      	pop	{r4, r5, r6, pc}
  40a9dc:	f1c4 040c 	rsb	r4, r4, #12
  40a9e0:	f1c4 0520 	rsb	r5, r4, #32
  40a9e4:	fa00 f304 	lsl.w	r3, r0, r4
  40a9e8:	fa20 f005 	lsr.w	r0, r0, r5
  40a9ec:	fa01 f204 	lsl.w	r2, r1, r4
  40a9f0:	ea40 0002 	orr.w	r0, r0, r2
  40a9f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40a9f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40a9fc:	f141 0100 	adc.w	r1, r1, #0
  40aa00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aa04:	bf08      	it	eq
  40aa06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aa0a:	bd70      	pop	{r4, r5, r6, pc}
  40aa0c:	f1c4 0520 	rsb	r5, r4, #32
  40aa10:	fa00 f205 	lsl.w	r2, r0, r5
  40aa14:	ea4e 0e02 	orr.w	lr, lr, r2
  40aa18:	fa20 f304 	lsr.w	r3, r0, r4
  40aa1c:	fa01 f205 	lsl.w	r2, r1, r5
  40aa20:	ea43 0302 	orr.w	r3, r3, r2
  40aa24:	fa21 f004 	lsr.w	r0, r1, r4
  40aa28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aa2c:	fa21 f204 	lsr.w	r2, r1, r4
  40aa30:	ea20 0002 	bic.w	r0, r0, r2
  40aa34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40aa38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aa3c:	bf08      	it	eq
  40aa3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aa42:	bd70      	pop	{r4, r5, r6, pc}
  40aa44:	f094 0f00 	teq	r4, #0
  40aa48:	d10f      	bne.n	40aa6a <__aeabi_dmul+0x1c2>
  40aa4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40aa4e:	0040      	lsls	r0, r0, #1
  40aa50:	eb41 0101 	adc.w	r1, r1, r1
  40aa54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aa58:	bf08      	it	eq
  40aa5a:	3c01      	subeq	r4, #1
  40aa5c:	d0f7      	beq.n	40aa4e <__aeabi_dmul+0x1a6>
  40aa5e:	ea41 0106 	orr.w	r1, r1, r6
  40aa62:	f095 0f00 	teq	r5, #0
  40aa66:	bf18      	it	ne
  40aa68:	4770      	bxne	lr
  40aa6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40aa6e:	0052      	lsls	r2, r2, #1
  40aa70:	eb43 0303 	adc.w	r3, r3, r3
  40aa74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40aa78:	bf08      	it	eq
  40aa7a:	3d01      	subeq	r5, #1
  40aa7c:	d0f7      	beq.n	40aa6e <__aeabi_dmul+0x1c6>
  40aa7e:	ea43 0306 	orr.w	r3, r3, r6
  40aa82:	4770      	bx	lr
  40aa84:	ea94 0f0c 	teq	r4, ip
  40aa88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40aa8c:	bf18      	it	ne
  40aa8e:	ea95 0f0c 	teqne	r5, ip
  40aa92:	d00c      	beq.n	40aaae <__aeabi_dmul+0x206>
  40aa94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aa98:	bf18      	it	ne
  40aa9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40aa9e:	d1d1      	bne.n	40aa44 <__aeabi_dmul+0x19c>
  40aaa0:	ea81 0103 	eor.w	r1, r1, r3
  40aaa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aaa8:	f04f 0000 	mov.w	r0, #0
  40aaac:	bd70      	pop	{r4, r5, r6, pc}
  40aaae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aab2:	bf06      	itte	eq
  40aab4:	4610      	moveq	r0, r2
  40aab6:	4619      	moveq	r1, r3
  40aab8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40aabc:	d019      	beq.n	40aaf2 <__aeabi_dmul+0x24a>
  40aabe:	ea94 0f0c 	teq	r4, ip
  40aac2:	d102      	bne.n	40aaca <__aeabi_dmul+0x222>
  40aac4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40aac8:	d113      	bne.n	40aaf2 <__aeabi_dmul+0x24a>
  40aaca:	ea95 0f0c 	teq	r5, ip
  40aace:	d105      	bne.n	40aadc <__aeabi_dmul+0x234>
  40aad0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40aad4:	bf1c      	itt	ne
  40aad6:	4610      	movne	r0, r2
  40aad8:	4619      	movne	r1, r3
  40aada:	d10a      	bne.n	40aaf2 <__aeabi_dmul+0x24a>
  40aadc:	ea81 0103 	eor.w	r1, r1, r3
  40aae0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aae4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40aae8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40aaec:	f04f 0000 	mov.w	r0, #0
  40aaf0:	bd70      	pop	{r4, r5, r6, pc}
  40aaf2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40aaf6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40aafa:	bd70      	pop	{r4, r5, r6, pc}

0040aafc <__aeabi_ddiv>:
  40aafc:	b570      	push	{r4, r5, r6, lr}
  40aafe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ab02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ab06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ab0a:	bf1d      	ittte	ne
  40ab0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ab10:	ea94 0f0c 	teqne	r4, ip
  40ab14:	ea95 0f0c 	teqne	r5, ip
  40ab18:	f000 f8a7 	bleq	40ac6a <__aeabi_ddiv+0x16e>
  40ab1c:	eba4 0405 	sub.w	r4, r4, r5
  40ab20:	ea81 0e03 	eor.w	lr, r1, r3
  40ab24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ab28:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40ab2c:	f000 8088 	beq.w	40ac40 <__aeabi_ddiv+0x144>
  40ab30:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40ab34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40ab38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40ab3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40ab40:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40ab44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40ab48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40ab4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40ab50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40ab54:	429d      	cmp	r5, r3
  40ab56:	bf08      	it	eq
  40ab58:	4296      	cmpeq	r6, r2
  40ab5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40ab5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40ab62:	d202      	bcs.n	40ab6a <__aeabi_ddiv+0x6e>
  40ab64:	085b      	lsrs	r3, r3, #1
  40ab66:	ea4f 0232 	mov.w	r2, r2, rrx
  40ab6a:	1ab6      	subs	r6, r6, r2
  40ab6c:	eb65 0503 	sbc.w	r5, r5, r3
  40ab70:	085b      	lsrs	r3, r3, #1
  40ab72:	ea4f 0232 	mov.w	r2, r2, rrx
  40ab76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40ab7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40ab7e:	ebb6 0e02 	subs.w	lr, r6, r2
  40ab82:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ab86:	bf22      	ittt	cs
  40ab88:	1ab6      	subcs	r6, r6, r2
  40ab8a:	4675      	movcs	r5, lr
  40ab8c:	ea40 000c 	orrcs.w	r0, r0, ip
  40ab90:	085b      	lsrs	r3, r3, #1
  40ab92:	ea4f 0232 	mov.w	r2, r2, rrx
  40ab96:	ebb6 0e02 	subs.w	lr, r6, r2
  40ab9a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ab9e:	bf22      	ittt	cs
  40aba0:	1ab6      	subcs	r6, r6, r2
  40aba2:	4675      	movcs	r5, lr
  40aba4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40aba8:	085b      	lsrs	r3, r3, #1
  40abaa:	ea4f 0232 	mov.w	r2, r2, rrx
  40abae:	ebb6 0e02 	subs.w	lr, r6, r2
  40abb2:	eb75 0e03 	sbcs.w	lr, r5, r3
  40abb6:	bf22      	ittt	cs
  40abb8:	1ab6      	subcs	r6, r6, r2
  40abba:	4675      	movcs	r5, lr
  40abbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40abc0:	085b      	lsrs	r3, r3, #1
  40abc2:	ea4f 0232 	mov.w	r2, r2, rrx
  40abc6:	ebb6 0e02 	subs.w	lr, r6, r2
  40abca:	eb75 0e03 	sbcs.w	lr, r5, r3
  40abce:	bf22      	ittt	cs
  40abd0:	1ab6      	subcs	r6, r6, r2
  40abd2:	4675      	movcs	r5, lr
  40abd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40abd8:	ea55 0e06 	orrs.w	lr, r5, r6
  40abdc:	d018      	beq.n	40ac10 <__aeabi_ddiv+0x114>
  40abde:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40abe2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40abe6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40abea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40abee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40abf2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40abf6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40abfa:	d1c0      	bne.n	40ab7e <__aeabi_ddiv+0x82>
  40abfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ac00:	d10b      	bne.n	40ac1a <__aeabi_ddiv+0x11e>
  40ac02:	ea41 0100 	orr.w	r1, r1, r0
  40ac06:	f04f 0000 	mov.w	r0, #0
  40ac0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40ac0e:	e7b6      	b.n	40ab7e <__aeabi_ddiv+0x82>
  40ac10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ac14:	bf04      	itt	eq
  40ac16:	4301      	orreq	r1, r0
  40ac18:	2000      	moveq	r0, #0
  40ac1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40ac1e:	bf88      	it	hi
  40ac20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40ac24:	f63f aeaf 	bhi.w	40a986 <__aeabi_dmul+0xde>
  40ac28:	ebb5 0c03 	subs.w	ip, r5, r3
  40ac2c:	bf04      	itt	eq
  40ac2e:	ebb6 0c02 	subseq.w	ip, r6, r2
  40ac32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40ac36:	f150 0000 	adcs.w	r0, r0, #0
  40ac3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ac3e:	bd70      	pop	{r4, r5, r6, pc}
  40ac40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40ac44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40ac48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40ac4c:	bfc2      	ittt	gt
  40ac4e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40ac52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40ac56:	bd70      	popgt	{r4, r5, r6, pc}
  40ac58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ac5c:	f04f 0e00 	mov.w	lr, #0
  40ac60:	3c01      	subs	r4, #1
  40ac62:	e690      	b.n	40a986 <__aeabi_dmul+0xde>
  40ac64:	ea45 0e06 	orr.w	lr, r5, r6
  40ac68:	e68d      	b.n	40a986 <__aeabi_dmul+0xde>
  40ac6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40ac6e:	ea94 0f0c 	teq	r4, ip
  40ac72:	bf08      	it	eq
  40ac74:	ea95 0f0c 	teqeq	r5, ip
  40ac78:	f43f af3b 	beq.w	40aaf2 <__aeabi_dmul+0x24a>
  40ac7c:	ea94 0f0c 	teq	r4, ip
  40ac80:	d10a      	bne.n	40ac98 <__aeabi_ddiv+0x19c>
  40ac82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ac86:	f47f af34 	bne.w	40aaf2 <__aeabi_dmul+0x24a>
  40ac8a:	ea95 0f0c 	teq	r5, ip
  40ac8e:	f47f af25 	bne.w	40aadc <__aeabi_dmul+0x234>
  40ac92:	4610      	mov	r0, r2
  40ac94:	4619      	mov	r1, r3
  40ac96:	e72c      	b.n	40aaf2 <__aeabi_dmul+0x24a>
  40ac98:	ea95 0f0c 	teq	r5, ip
  40ac9c:	d106      	bne.n	40acac <__aeabi_ddiv+0x1b0>
  40ac9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40aca2:	f43f aefd 	beq.w	40aaa0 <__aeabi_dmul+0x1f8>
  40aca6:	4610      	mov	r0, r2
  40aca8:	4619      	mov	r1, r3
  40acaa:	e722      	b.n	40aaf2 <__aeabi_dmul+0x24a>
  40acac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40acb0:	bf18      	it	ne
  40acb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40acb6:	f47f aec5 	bne.w	40aa44 <__aeabi_dmul+0x19c>
  40acba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40acbe:	f47f af0d 	bne.w	40aadc <__aeabi_dmul+0x234>
  40acc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40acc6:	f47f aeeb 	bne.w	40aaa0 <__aeabi_dmul+0x1f8>
  40acca:	e712      	b.n	40aaf2 <__aeabi_dmul+0x24a>

0040accc <__gedf2>:
  40accc:	f04f 3cff 	mov.w	ip, #4294967295
  40acd0:	e006      	b.n	40ace0 <__cmpdf2+0x4>
  40acd2:	bf00      	nop

0040acd4 <__ledf2>:
  40acd4:	f04f 0c01 	mov.w	ip, #1
  40acd8:	e002      	b.n	40ace0 <__cmpdf2+0x4>
  40acda:	bf00      	nop

0040acdc <__cmpdf2>:
  40acdc:	f04f 0c01 	mov.w	ip, #1
  40ace0:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ace4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ace8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40acec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40acf0:	bf18      	it	ne
  40acf2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40acf6:	d01b      	beq.n	40ad30 <__cmpdf2+0x54>
  40acf8:	b001      	add	sp, #4
  40acfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40acfe:	bf0c      	ite	eq
  40ad00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40ad04:	ea91 0f03 	teqne	r1, r3
  40ad08:	bf02      	ittt	eq
  40ad0a:	ea90 0f02 	teqeq	r0, r2
  40ad0e:	2000      	moveq	r0, #0
  40ad10:	4770      	bxeq	lr
  40ad12:	f110 0f00 	cmn.w	r0, #0
  40ad16:	ea91 0f03 	teq	r1, r3
  40ad1a:	bf58      	it	pl
  40ad1c:	4299      	cmppl	r1, r3
  40ad1e:	bf08      	it	eq
  40ad20:	4290      	cmpeq	r0, r2
  40ad22:	bf2c      	ite	cs
  40ad24:	17d8      	asrcs	r0, r3, #31
  40ad26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40ad2a:	f040 0001 	orr.w	r0, r0, #1
  40ad2e:	4770      	bx	lr
  40ad30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ad34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ad38:	d102      	bne.n	40ad40 <__cmpdf2+0x64>
  40ad3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ad3e:	d107      	bne.n	40ad50 <__cmpdf2+0x74>
  40ad40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ad44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ad48:	d1d6      	bne.n	40acf8 <__cmpdf2+0x1c>
  40ad4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ad4e:	d0d3      	beq.n	40acf8 <__cmpdf2+0x1c>
  40ad50:	f85d 0b04 	ldr.w	r0, [sp], #4
  40ad54:	4770      	bx	lr
  40ad56:	bf00      	nop

0040ad58 <__aeabi_cdrcmple>:
  40ad58:	4684      	mov	ip, r0
  40ad5a:	4610      	mov	r0, r2
  40ad5c:	4662      	mov	r2, ip
  40ad5e:	468c      	mov	ip, r1
  40ad60:	4619      	mov	r1, r3
  40ad62:	4663      	mov	r3, ip
  40ad64:	e000      	b.n	40ad68 <__aeabi_cdcmpeq>
  40ad66:	bf00      	nop

0040ad68 <__aeabi_cdcmpeq>:
  40ad68:	b501      	push	{r0, lr}
  40ad6a:	f7ff ffb7 	bl	40acdc <__cmpdf2>
  40ad6e:	2800      	cmp	r0, #0
  40ad70:	bf48      	it	mi
  40ad72:	f110 0f00 	cmnmi.w	r0, #0
  40ad76:	bd01      	pop	{r0, pc}

0040ad78 <__aeabi_dcmpeq>:
  40ad78:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ad7c:	f7ff fff4 	bl	40ad68 <__aeabi_cdcmpeq>
  40ad80:	bf0c      	ite	eq
  40ad82:	2001      	moveq	r0, #1
  40ad84:	2000      	movne	r0, #0
  40ad86:	f85d fb08 	ldr.w	pc, [sp], #8
  40ad8a:	bf00      	nop

0040ad8c <__aeabi_dcmplt>:
  40ad8c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ad90:	f7ff ffea 	bl	40ad68 <__aeabi_cdcmpeq>
  40ad94:	bf34      	ite	cc
  40ad96:	2001      	movcc	r0, #1
  40ad98:	2000      	movcs	r0, #0
  40ad9a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ad9e:	bf00      	nop

0040ada0 <__aeabi_dcmple>:
  40ada0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ada4:	f7ff ffe0 	bl	40ad68 <__aeabi_cdcmpeq>
  40ada8:	bf94      	ite	ls
  40adaa:	2001      	movls	r0, #1
  40adac:	2000      	movhi	r0, #0
  40adae:	f85d fb08 	ldr.w	pc, [sp], #8
  40adb2:	bf00      	nop

0040adb4 <__aeabi_dcmpge>:
  40adb4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40adb8:	f7ff ffce 	bl	40ad58 <__aeabi_cdrcmple>
  40adbc:	bf94      	ite	ls
  40adbe:	2001      	movls	r0, #1
  40adc0:	2000      	movhi	r0, #0
  40adc2:	f85d fb08 	ldr.w	pc, [sp], #8
  40adc6:	bf00      	nop

0040adc8 <__aeabi_dcmpgt>:
  40adc8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40adcc:	f7ff ffc4 	bl	40ad58 <__aeabi_cdrcmple>
  40add0:	bf34      	ite	cc
  40add2:	2001      	movcc	r0, #1
  40add4:	2000      	movcs	r0, #0
  40add6:	f85d fb08 	ldr.w	pc, [sp], #8
  40adda:	bf00      	nop

0040addc <__aeabi_dcmpun>:
  40addc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ade0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ade4:	d102      	bne.n	40adec <__aeabi_dcmpun+0x10>
  40ade6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40adea:	d10a      	bne.n	40ae02 <__aeabi_dcmpun+0x26>
  40adec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40adf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40adf4:	d102      	bne.n	40adfc <__aeabi_dcmpun+0x20>
  40adf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40adfa:	d102      	bne.n	40ae02 <__aeabi_dcmpun+0x26>
  40adfc:	f04f 0000 	mov.w	r0, #0
  40ae00:	4770      	bx	lr
  40ae02:	f04f 0001 	mov.w	r0, #1
  40ae06:	4770      	bx	lr

0040ae08 <__aeabi_d2iz>:
  40ae08:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40ae0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40ae10:	d215      	bcs.n	40ae3e <__aeabi_d2iz+0x36>
  40ae12:	d511      	bpl.n	40ae38 <__aeabi_d2iz+0x30>
  40ae14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40ae18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40ae1c:	d912      	bls.n	40ae44 <__aeabi_d2iz+0x3c>
  40ae1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40ae22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40ae26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40ae2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40ae2e:	fa23 f002 	lsr.w	r0, r3, r2
  40ae32:	bf18      	it	ne
  40ae34:	4240      	negne	r0, r0
  40ae36:	4770      	bx	lr
  40ae38:	f04f 0000 	mov.w	r0, #0
  40ae3c:	4770      	bx	lr
  40ae3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40ae42:	d105      	bne.n	40ae50 <__aeabi_d2iz+0x48>
  40ae44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40ae48:	bf08      	it	eq
  40ae4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40ae4e:	4770      	bx	lr
  40ae50:	f04f 0000 	mov.w	r0, #0
  40ae54:	4770      	bx	lr
  40ae56:	bf00      	nop
  40ae58:	454c4449 	.word	0x454c4449
  40ae5c:	00000000 	.word	0x00000000
  40ae60:	00000a0d 	.word	0x00000a0d
  40ae64:	09097325 	.word	0x09097325
  40ae68:	25096325 	.word	0x25096325
  40ae6c:	75250975 	.word	0x75250975
  40ae70:	0d752509 	.word	0x0d752509
  40ae74:	0000000a 	.word	0x0000000a
  40ae78:	20726d54 	.word	0x20726d54
  40ae7c:	00637653 	.word	0x00637653

0040ae80 <IO_SENSOR>:
	...
  40ae90:	400e1000 0000000a 00004000 0000002e     ...@.....@......
  40aea0:	400e1000 0000000a 00002000 0000002d     ...@..... ..-...
  40aeb0:	400e1400 0000000c 00000001 00000060     ...@........`...
  40aec0:	400e1400 0000000c 80000000 0000007f     ...@............
  40aed0:	400e1600 0000000d 00000008 00000083     ...@............
  40aee0:	400e1600 0000000d 00000001 00000080     ...@............
  40aef0:	400e1600 0000000d 00000002 00000081     ...@............
  40af00:	400e1600 0000000d 00000004 00000082     ...@............
  40af10:	400e1200 0000000b 08000000 0000005b     ...@........[...
  40af20:	400e1200 0000000b 00000001 00000040     ...@........@...
  40af30:	400e1200 0000000b 04000000 0000005a     ...@........Z...
  40af40:	400e1200 0000000b 80000000 0000005f     ...@........_...
  40af50:	400e1200 0000000b 40000000 0000005e     ...@.......@^...
  40af60:	400e1200 0000000b 20000000 0000005d     ...@....... ]...
  40af70:	400e1200 0000000b 00002000 0000004d     ...@..... ..M...
  40af80:	400e1000 0000000a 00000001 00000020     ...@........ ...
  40af90:	400e1000 0000000a 00000002 00000021     ...@........!...
  40afa0:	400e0e00 00000009 00100000 00000014     ...@............
  40afb0:	400e0e00 00000009 00020000 00000011     ...@............
  40afc0:	400e1600 0000000d 00000010 00000084     ...@............
  40afd0:	400e0e00 00000009 00080000 00000013     ...@............
  40afe0:	400e1600 0000000d 00000020 00000085     ...@.... .......
  40aff0:	400e1000 0000000a 00000004 00000022     ...@........"...
  40b000:	400e0e00 00000009 00040000 00000012     ...@............
  40b010:	400e0e00 00000009 00200000 00000015     ...@...... .....
  40b020:	400e1000 0000000a 00000008 00000023     ...@........#...
  40b030:	400e1400 0000000c 04000000 0000007a     ...@........z...
  40b040:	400e1400 0000000c 40000000 0000007e     ...@.......@~...
  40b050:	400e0e00 00000009 00800000 00000017     ...@............
  40b060:	400e0e00 00000009 00004000 0000000e     ...@.....@......
  40b070:	400e1400 0000000c 00200000 00000075     ...@...... .u...
  40b080:	400e1400 0000000c 02000000 00000079     ...@........y...
  40b090:	400e0e00 00000009 00010000 00000010     ...@............
  40b0a0:	400e1400 0000000c 00100000 00000074     ...@........t...
  40b0b0:	400e0e00 00000009 00008000 0000000f     ...@............
  40b0c0:	400e1200 0000000b 00000080 00000047     ...@........G...
  40b0d0:	400e1400 0000000c 08000000 0000007b     ...@........{...
  40b0e0:	400e0e00 00000009 00400000 00000016     ...@......@.....
  40b0f0:	400e1200 0000000b 00000002 00000041     ...@........A...
  40b100:	400e1200 0000000b 00000004 00000042     ...@........B...
  40b110:	400e1200 0000000b 00000008 00000043     ...@........C...
  40b120:	400e1200 0000000b 00000010 00000044     ...@........D...
  40b130:	400e0e00 00000009 00002000 0000000d     ...@..... ......
  40b140:	400e1200 0000000b 00000020 00000045     ...@.... ...E...
  40b150:	400e1200 0000000b 00000040 00000046     ...@....@...F...
  40b160:	400e1400 0000000c 01000000 00000078     ...@........x...
  40b170:	400e0e00 00000009 01000000 00000018     ...@............
  40b180:	400e1400 0000000c 00800000 00000077     ...@........w...
  40b190:	400e0e00 00000009 02000000 00000019     ...@............
  40b1a0:	400e1400 0000000c 00400000 00000076     ...@......@.v...
  40b1b0:	400e1400 0000000c 00080000 00000073     ...@........s...
  40b1c0:	400e0e00 00000009 00001000 0000000c     ...@............
  40b1d0:	400e1400 0000000c 00040000 00000072     ...@........r...
  40b1e0:	400e0e00 00000009 00000800 0000000b     ...@............
  40b1f0:	400e1400 0000000c 00002000 0000006d     ...@..... ..m...
  40b200:	400e1200 0000000b 00000200 00000049     ...@........I...
  40b210:	400e1400 0000000c 00004000 0000006e     ...@.....@..n...
  40b220:	400e1400 0000000c 10000000 0000007c     ...@........|...
  40b230:	400e1200 0000000b 10000000 0000005c     ...@........\...
  40b240:	400e1000 0000000a 00000040 00000026     ...@....@...&...
  40b250:	400e0e00 00000009 00000040 00000006     ...@....@.......
  40b260:	400e1400 0000000c 00020000 00000071     ...@........q...
  40b270:	400e1400 0000000c 00010000 00000070     ...@........p...
  40b280:	400e1200 0000000b 00000100 00000048     ...@........H...
  40b290:	400e1400 0000000c 00001000 0000006c     ...@........l...
  40b2a0:	400e1200 0000000b 00000800 0000004b     ...@........K...
  40b2b0:	400e0e00 00000009 00000004 00000002     ...@............
  40b2c0:	400e1000 0000000a 00001000 0000002c     ...@........,...
  40b2d0:	400e1200 0000000b 00004000 0000004e     ...@.....@..N...
  40b2e0:	400e1400 0000000c 00000080 00000067     ...@........g...
  40b2f0:	400e1000 0000000a 00000080 00000027     ...@........'...
  40b300:	400e1200 0000000b 00000400 0000004a     ...@........J...
  40b310:	400e1400 0000000c 00000800 0000006b     ...@........k...
  40b320:	400e0e00 00000009 00000002 00000001     ...@............
  40b330:	400e1200 0000000b 00010000 00000050     ...@........P...
  40b340:	400e1400 0000000c 00000400 0000006a     ...@........j...
  40b350:	400e0e00 00000009 00000001 00000000     ...@............
  40b360:	400e1200 0000000b 00020000 00000051     ...@........Q...
  40b370:	400e1200 0000000b 00080000 00000053     ...@........S...
  40b380:	400e1000 0000000a 00000010 00000024     ...@........$...
  40b390:	400e1400 0000000c 00008000 0000006f     ...@........o...
  40b3a0:	400e1400 0000000c 20000000 0000007d     ...@....... }...
  40b3b0:	400e1000 0000000a 00000020 00000025     ...@.... ...%...
  40b3c0:	400e1400 0000000c 00000200 00000069     ...@........i...
  40b3d0:	400e1200 0000000b 00040000 00000052     ...@........R...
  40b3e0:	400e1400 0000000c 00000100 00000068     ...@........h...
  40b3f0:	400e0e00 00000009 00000040 00000006     ...@....@.......
  40b400:	400e1200 0000000b 00100000 00000054     ...@........T...
  40b410:	400e1200 0000000b 00400000 00000056     ...@......@.V...
  40b420:	400e1400 0000000c 00000040 00000066     ...@....@...f...
  40b430:	400e1200 0000000b 00200000 00000055     ...@...... .U...
  40b440:	400e1200 0000000b 01000000 00000058     ...@........X...
  40b450:	400e1400 0000000c 00000020 00000065     ...@.... ...e...
  40b460:	400e1400 0000000c 00000010 00000064     ...@........d...
  40b470:	400e1400 0000000c 00000008 00000063     ...@........c...
  40b480:	400e1200 0000000b 00800000 00000057     ...@........W...
  40b490:	400e1400 0000000c 00000004 00000062     ...@........b...
  40b4a0:	400e1400 0000000c 00000002 00000061     ...@........a...
  40b4b0:	400e1200 0000000b 02000000 00000059     ...@........Y...
  40b4c0:	64323025 64323025 64323025 3230253a     %02d%02d%02d:%02
  40b4d0:	32302564 32302564 00000064              d%02d%02d...

0040b4dc <SSD1311_CFG_SCRIPT>:
  40b4dc:	08020000 71022a02 72020003 79020003     .....*.q...r...y
  40b4ec:	7f028102 6002d502 7802d902 1002da02     .......`...x....
  40b4fc:	4002db02 0302dc02 78027804 06020902     ...@.....x.x....
  40b50c:	01022802 06020202 05040c02 00000101     .(..............
  40b51c:	736e6553 6148726f 656c646e 6b736154     SensorHandleTask
  40b52c:	00000000 74737953 75526d65 0000006e     ....SystemRun...
  40b53c:	203a7325 30255353 00006432 61706143     %s: SS%02d..Capa
  40b54c:	79746963 6c25203a 00000a75 61733a30     city: %lu...0:sa
  40b55c:	72615f6d 64735f6d 7478742e 00000000     m_arm_sd.txt....

0040b56c <sd_mmc_trans_units>:
  40b56c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0040b588 <sd_trans_multipliers>:
  40b588:	00000000 0000000a 0000000c 0000000d     ................
  40b598:	0000000f 00000014 00000019 0000001e     ................
  40b5a8:	00000023 00000028 0000002d 00000032     #...(...-...2...
  40b5b8:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040b5c8 <mmc_trans_multipliers>:
  40b5c8:	00000000 0000000a 0000000c 0000000d     ................
  40b5d8:	0000000f 00000014 0000001a 0000001e     ................
  40b5e8:	00000023 00000028 0000002d 00000034     #...(...-...4...
  40b5f8:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040b608 <can_bit_time>:
  40b608:	02020308 02094b03 43020303 0303030a     .....K.....C....
  40b618:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
  40b628:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
  40b638:	05050510 06114504 47040505 06060512     .....E.....G....
  40b648:	06134304 44040606 06060714 08154604     .C.....D.....F..
  40b658:	47040606 07070716 08174404 46040708     ...G.....D.....F
  40b668:	08080718 08194304 44040808              .....C.....D

0040b674 <_global_impure_ptr>:
  40b674:	20000028 00464e49 00666e69 004e414e     (.. INF.inf.NAN.
  40b684:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40b694:	46454443 00000000 33323130 37363534     CDEF....01234567
  40b6a4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40b6b4:	0000296c 00000030                       l)..0...

0040b6bc <blanks.7223>:
  40b6bc:	20202020 20202020 20202020 20202020                     

0040b6cc <zeroes.7224>:
  40b6cc:	30303030 30303030 30303030 30303030     0000000000000000
  40b6dc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40b6ec:	00000000                                ....

0040b6f0 <__mprec_bigtens>:
  40b6f0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40b700:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40b710:	7f73bf3c 75154fdd                       <.s..O.u

0040b718 <__mprec_tens>:
  40b718:	00000000 3ff00000 00000000 40240000     .......?......$@
  40b728:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40b738:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40b748:	00000000 412e8480 00000000 416312d0     .......A......cA
  40b758:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40b768:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40b778:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40b788:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40b798:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40b7a8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40b7b8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40b7c8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40b7d8:	79d99db4 44ea7843                       ...yCx.D

0040b7e0 <p05.6055>:
  40b7e0:	00000005 00000019 0000007d 00000043     ........}...C...
  40b7f0:	49534f50 00000058 0000002e              POSIX.......

0040b7fc <_ctype_>:
  40b7fc:	20202000 20202020 28282020 20282828     .         ((((( 
  40b80c:	20202020 20202020 20202020 20202020                     
  40b81c:	10108820 10101010 10101010 10101010      ...............
  40b82c:	04040410 04040404 10040404 10101010     ................
  40b83c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40b84c:	01010101 01010101 01010101 10101010     ................
  40b85c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40b86c:	02020202 02020202 02020202 10101010     ................
  40b87c:	00000020 00000000 00000000 00000000      ...............
	...

0040b900 <_init>:
  40b900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b902:	bf00      	nop
  40b904:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b906:	bc08      	pop	{r3}
  40b908:	469e      	mov	lr, r3
  40b90a:	4770      	bx	lr

0040b90c <__init_array_start>:
  40b90c:	00408029 	.word	0x00408029

0040b910 <__frame_dummy_init_array_entry>:
  40b910:	0040011d                                ..@.

0040b914 <_fini>:
  40b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b916:	bf00      	nop
  40b918:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b91a:	bc08      	pop	{r3}
  40b91c:	469e      	mov	lr, r3
  40b91e:	4770      	bx	lr

0040b920 <__fini_array_start>:
  40b920:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <uxCriticalNesting>:
2000000c:	aaaa aaaa                                   ....

20000010 <xFreeBytesRemaining>:
20000010:	a000 0000                                   ....

20000014 <xNextTaskUnblockTime>:
20000014:	ffff ffff                                   ....

20000018 <g_interrupt_enabled>:
20000018:	0001 0000                                   ....

2000001c <SystemCoreClock>:
2000001c:	0900 003d                                   ..=.

20000020 <_impure_ptr>:
20000020:	0028 2000 0000 0000                         (.. ....

20000028 <impure_data>:
20000028:	0000 0000 0314 2000 037c 2000 03e4 2000     ....... |.. ... 
	...
200000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000450 <__atexit_recursive_mutex>:
20000450:	acb8 2000                                   ... 

20000454 <__malloc_av_>:
	...
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 
2000084c:	0844 2000 0844 2000 084c 2000 084c 2000     D.. D.. L.. L.. 

2000085c <__malloc_sbrk_base>:
2000085c:	ffff ffff                                   ....

20000860 <__malloc_trim_threshold>:
20000860:	0000 0002                                   ....

20000864 <__global_locale>:
20000864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000944:	a51d 0040 a0dd 0040 0000 0000 b7fc 0040     ..@...@.......@.
20000954:	b7f8 0040 b698 0040 b698 0040 b698 0040     ..@...@...@...@.
20000964:	b698 0040 b698 0040 b698 0040 b698 0040     ..@...@...@...@.
20000974:	b698 0040 b698 0040 ffff ffff ffff ffff     ..@...@.........
20000984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
