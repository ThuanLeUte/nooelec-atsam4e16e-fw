
arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f864  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040f864  0040f864  0001f864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20000000  0040f86c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a328  200009d0  00410240  000209d0  2**3
                  ALLOC
  4 .stack        00003000  2000acf8  0041a568  000209d0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002b755  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005992  00000000  00000000  0004c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b055  00000000  00000000  00051b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001540  00000000  00000000  0005cb93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001398  00000000  00000000  0005e0d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000fdc3  00000000  00000000  0005f46b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001d612  00000000  00000000  0006f22e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00074500  00000000  00000000  0008c840  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000601c  00000000  00000000  00100d40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f8 dc 00 20 9d 5d 40 00 0f 5d 40 00 0f 5d 40 00     ... .]@..]@..]@.
  400010:	0f 5d 40 00 0f 5d 40 00 0f 5d 40 00 00 00 00 00     .]@..]@..]@.....
	...
  40002c:	95 04 40 00 0f 5d 40 00 00 00 00 00 a5 05 40 00     ..@..]@.......@.
  40003c:	f9 05 40 00 0f 5d 40 00 0f 5d 40 00 0f 5d 40 00     ..@..]@..]@..]@.
  40004c:	0f 5d 40 00 0f 5d 40 00 0f 5d 40 00 0f 5d 40 00     .]@..]@..]@..]@.
  40005c:	0f 5d 40 00 0f 5d 40 00 1d 92 40 00 35 92 40 00     .]@..]@...@.5.@.
  40006c:	4d 92 40 00 65 92 40 00 7d 92 40 00 0f 5d 40 00     M.@.e.@.}.@..]@.
  40007c:	0f 5d 40 00 0f 5d 40 00 0f 5d 40 00 0f 5d 40 00     .]@..]@..]@..]@.
  40008c:	0f 5d 40 00 0f 5d 40 00 0f 5d 40 00 0f 5d 40 00     .]@..]@..]@..]@.
  40009c:	0f 5d 40 00 0f 5d 40 00 0f 5d 40 00 0f 5d 40 00     .]@..]@..]@..]@.
  4000ac:	0f 5d 40 00 0f 5d 40 00 0f 5d 40 00 0f 5d 40 00     .]@..]@..]@..]@.
  4000bc:	0f 5d 40 00 0f 5d 40 00 0f 5d 40 00 0f 5d 40 00     .]@..]@..]@..]@.
  4000cc:	0f 5d 40 00 0f 5d 40 00 0f 5d 40 00 0f 5d 40 00     .]@..]@..]@..]@.
  4000dc:	0f 5d 40 00 0f 5d 40 00 0f 5d 40 00 0f 5d 40 00     .]@..]@..]@..]@.
  4000ec:	0f 5d 40 00 0f 5d 40 00 0f 5d 40 00                 .]@..]@..]@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009d0 	.word	0x200009d0
  400114:	00000000 	.word	0x00000000
  400118:	0040f86c 	.word	0x0040f86c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	0040f86c 	.word	0x0040f86c
  400158:	200009d4 	.word	0x200009d4
  40015c:	0040f86c 	.word	0x0040f86c
  400160:	00000000 	.word	0x00000000

00400164 <fs_init>:
/* Public variables --------------------------------------------------- */
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
bool_t fs_init(void)
{
  400164:	b580      	push	{r7, lr}
  400166:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
  40016a:	af00      	add	r7, sp, #0
  FATFS fs;    // File system variable

  // Mount the file system
  if (f_mount(LUN_ID_SD_MMC_0_MEM, &fs) != FR_OK)
  40016c:	463b      	mov	r3, r7
  40016e:	4619      	mov	r1, r3
  400170:	2000      	movs	r0, #0
  400172:	4b06      	ldr	r3, [pc, #24]	; (40018c <fs_init+0x28>)
  400174:	4798      	blx	r3
  400176:	4603      	mov	r3, r0
  400178:	2b00      	cmp	r3, #0
  40017a:	d001      	beq.n	400180 <fs_init+0x1c>
    return BS_FALSE;
  40017c:	2300      	movs	r3, #0
  40017e:	e000      	b.n	400182 <fs_init+0x1e>

  return BS_TRUE;
  400180:	2301      	movs	r3, #1
}
  400182:	4618      	mov	r0, r3
  400184:	f507 770c 	add.w	r7, r7, #560	; 0x230
  400188:	46bd      	mov	sp, r7
  40018a:	bd80      	pop	{r7, pc}
  40018c:	004080ed 	.word	0x004080ed

00400190 <fs_write>:

bool_t fs_write(const char *path, char *data)
{
  400190:	b580      	push	{r7, lr}
  400192:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
  400196:	af00      	add	r7, sp, #0
  400198:	1d3b      	adds	r3, r7, #4
  40019a:	6018      	str	r0, [r3, #0]
  40019c:	463b      	mov	r3, r7
  40019e:	6019      	str	r1, [r3, #0]
  FIL fhandle; // File handle variable
  static uint32_t pos = 0;

  // Open a file
  if (f_open(&fhandle, path, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK)
  4001a0:	1d3b      	adds	r3, r7, #4
  4001a2:	f107 000c 	add.w	r0, r7, #12
  4001a6:	2212      	movs	r2, #18
  4001a8:	6819      	ldr	r1, [r3, #0]
  4001aa:	4b19      	ldr	r3, [pc, #100]	; (400210 <fs_write+0x80>)
  4001ac:	4798      	blx	r3
  4001ae:	4603      	mov	r3, r0
  4001b0:	2b00      	cmp	r3, #0
  4001b2:	d127      	bne.n	400204 <fs_write+0x74>
  {
    // Seek to write position
    if (f_tell(&fhandle) != pos)
  4001b4:	f107 030c 	add.w	r3, r7, #12
  4001b8:	689a      	ldr	r2, [r3, #8]
  4001ba:	4b16      	ldr	r3, [pc, #88]	; (400214 <fs_write+0x84>)
  4001bc:	681b      	ldr	r3, [r3, #0]
  4001be:	429a      	cmp	r2, r3
  4001c0:	d007      	beq.n	4001d2 <fs_write+0x42>
      f_lseek(&fhandle, pos);
  4001c2:	4b14      	ldr	r3, [pc, #80]	; (400214 <fs_write+0x84>)
  4001c4:	681a      	ldr	r2, [r3, #0]
  4001c6:	f107 030c 	add.w	r3, r7, #12
  4001ca:	4611      	mov	r1, r2
  4001cc:	4618      	mov	r0, r3
  4001ce:	4b12      	ldr	r3, [pc, #72]	; (400218 <fs_write+0x88>)
  4001d0:	4798      	blx	r3

    // Write data to file
    if (f_puts(data, &fhandle) == -1)
  4001d2:	f107 020c 	add.w	r2, r7, #12
  4001d6:	463b      	mov	r3, r7
  4001d8:	4611      	mov	r1, r2
  4001da:	6818      	ldr	r0, [r3, #0]
  4001dc:	4b0f      	ldr	r3, [pc, #60]	; (40021c <fs_write+0x8c>)
  4001de:	4798      	blx	r3
  4001e0:	4603      	mov	r3, r0
  4001e2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4001e6:	d101      	bne.n	4001ec <fs_write+0x5c>
      return BS_FALSE;
  4001e8:	2300      	movs	r3, #0
  4001ea:	e00c      	b.n	400206 <fs_write+0x76>

    // Get the current position
    pos = f_tell(&fhandle);
  4001ec:	f107 030c 	add.w	r3, r7, #12
  4001f0:	689b      	ldr	r3, [r3, #8]
  4001f2:	4a08      	ldr	r2, [pc, #32]	; (400214 <fs_write+0x84>)
  4001f4:	6013      	str	r3, [r2, #0]
    
    // Close the file # IMPORTANT
    f_close(&fhandle);
  4001f6:	f107 030c 	add.w	r3, r7, #12
  4001fa:	4618      	mov	r0, r3
  4001fc:	4b08      	ldr	r3, [pc, #32]	; (400220 <fs_write+0x90>)
  4001fe:	4798      	blx	r3
  else
  {
    return BS_FALSE;
  }

  return BS_TRUE;
  400200:	2301      	movs	r3, #1
  400202:	e000      	b.n	400206 <fs_write+0x76>
    return BS_FALSE;
  400204:	2300      	movs	r3, #0
}
  400206:	4618      	mov	r0, r3
  400208:	f507 770c 	add.w	r7, r7, #560	; 0x230
  40020c:	46bd      	mov	sp, r7
  40020e:	bd80      	pop	{r7, pc}
  400210:	00408141 	.word	0x00408141
  400214:	200009ec 	.word	0x200009ec
  400218:	004089e1 	.word	0x004089e1
  40021c:	00408ce5 	.word	0x00408ce5
  400220:	004089b5 	.word	0x004089b5

00400224 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  400224:	b480      	push	{r7}
  400226:	b083      	sub	sp, #12
  400228:	af00      	add	r7, sp, #0
  40022a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  40022c:	687b      	ldr	r3, [r7, #4]
  40022e:	f103 0208 	add.w	r2, r3, #8
  400232:	687b      	ldr	r3, [r7, #4]
  400234:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400236:	687b      	ldr	r3, [r7, #4]
  400238:	f04f 32ff 	mov.w	r2, #4294967295
  40023c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	f103 0208 	add.w	r2, r3, #8
  400244:	687b      	ldr	r3, [r7, #4]
  400246:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400248:	687b      	ldr	r3, [r7, #4]
  40024a:	f103 0208 	add.w	r2, r3, #8
  40024e:	687b      	ldr	r3, [r7, #4]
  400250:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  400252:	687b      	ldr	r3, [r7, #4]
  400254:	2200      	movs	r2, #0
  400256:	601a      	str	r2, [r3, #0]
}
  400258:	bf00      	nop
  40025a:	370c      	adds	r7, #12
  40025c:	46bd      	mov	sp, r7
  40025e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400262:	4770      	bx	lr

00400264 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  400264:	b480      	push	{r7}
  400266:	b083      	sub	sp, #12
  400268:	af00      	add	r7, sp, #0
  40026a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40026c:	687b      	ldr	r3, [r7, #4]
  40026e:	2200      	movs	r2, #0
  400270:	611a      	str	r2, [r3, #16]
}
  400272:	bf00      	nop
  400274:	370c      	adds	r7, #12
  400276:	46bd      	mov	sp, r7
  400278:	f85d 7b04 	ldr.w	r7, [sp], #4
  40027c:	4770      	bx	lr

0040027e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  40027e:	b480      	push	{r7}
  400280:	b085      	sub	sp, #20
  400282:	af00      	add	r7, sp, #0
  400284:	6078      	str	r0, [r7, #4]
  400286:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  400288:	687b      	ldr	r3, [r7, #4]
  40028a:	685b      	ldr	r3, [r3, #4]
  40028c:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  40028e:	68fb      	ldr	r3, [r7, #12]
  400290:	685a      	ldr	r2, [r3, #4]
  400292:	683b      	ldr	r3, [r7, #0]
  400294:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  400296:	687b      	ldr	r3, [r7, #4]
  400298:	685a      	ldr	r2, [r3, #4]
  40029a:	683b      	ldr	r3, [r7, #0]
  40029c:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  40029e:	68fb      	ldr	r3, [r7, #12]
  4002a0:	685b      	ldr	r3, [r3, #4]
  4002a2:	683a      	ldr	r2, [r7, #0]
  4002a4:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  4002a6:	68fb      	ldr	r3, [r7, #12]
  4002a8:	683a      	ldr	r2, [r7, #0]
  4002aa:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	683a      	ldr	r2, [r7, #0]
  4002b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4002b2:	683b      	ldr	r3, [r7, #0]
  4002b4:	687a      	ldr	r2, [r7, #4]
  4002b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4002b8:	687b      	ldr	r3, [r7, #4]
  4002ba:	681b      	ldr	r3, [r3, #0]
  4002bc:	1c5a      	adds	r2, r3, #1
  4002be:	687b      	ldr	r3, [r7, #4]
  4002c0:	601a      	str	r2, [r3, #0]
}
  4002c2:	bf00      	nop
  4002c4:	3714      	adds	r7, #20
  4002c6:	46bd      	mov	sp, r7
  4002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002cc:	4770      	bx	lr

004002ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  4002ce:	b480      	push	{r7}
  4002d0:	b085      	sub	sp, #20
  4002d2:	af00      	add	r7, sp, #0
  4002d4:	6078      	str	r0, [r7, #4]
  4002d6:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  4002d8:	683b      	ldr	r3, [r7, #0]
  4002da:	681b      	ldr	r3, [r3, #0]
  4002dc:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4002de:	68bb      	ldr	r3, [r7, #8]
  4002e0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002e4:	d103      	bne.n	4002ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  4002e6:	687b      	ldr	r3, [r7, #4]
  4002e8:	691b      	ldr	r3, [r3, #16]
  4002ea:	60fb      	str	r3, [r7, #12]
  4002ec:	e00c      	b.n	400308 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  4002ee:	687b      	ldr	r3, [r7, #4]
  4002f0:	3308      	adds	r3, #8
  4002f2:	60fb      	str	r3, [r7, #12]
  4002f4:	e002      	b.n	4002fc <vListInsert+0x2e>
  4002f6:	68fb      	ldr	r3, [r7, #12]
  4002f8:	685b      	ldr	r3, [r3, #4]
  4002fa:	60fb      	str	r3, [r7, #12]
  4002fc:	68fb      	ldr	r3, [r7, #12]
  4002fe:	685b      	ldr	r3, [r3, #4]
  400300:	681a      	ldr	r2, [r3, #0]
  400302:	68bb      	ldr	r3, [r7, #8]
  400304:	429a      	cmp	r2, r3
  400306:	d9f6      	bls.n	4002f6 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400308:	68fb      	ldr	r3, [r7, #12]
  40030a:	685a      	ldr	r2, [r3, #4]
  40030c:	683b      	ldr	r3, [r7, #0]
  40030e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400310:	683b      	ldr	r3, [r7, #0]
  400312:	685b      	ldr	r3, [r3, #4]
  400314:	683a      	ldr	r2, [r7, #0]
  400316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400318:	683b      	ldr	r3, [r7, #0]
  40031a:	68fa      	ldr	r2, [r7, #12]
  40031c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  40031e:	68fb      	ldr	r3, [r7, #12]
  400320:	683a      	ldr	r2, [r7, #0]
  400322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400324:	683b      	ldr	r3, [r7, #0]
  400326:	687a      	ldr	r2, [r7, #4]
  400328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  40032a:	687b      	ldr	r3, [r7, #4]
  40032c:	681b      	ldr	r3, [r3, #0]
  40032e:	1c5a      	adds	r2, r3, #1
  400330:	687b      	ldr	r3, [r7, #4]
  400332:	601a      	str	r2, [r3, #0]
}
  400334:	bf00      	nop
  400336:	3714      	adds	r7, #20
  400338:	46bd      	mov	sp, r7
  40033a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40033e:	4770      	bx	lr

00400340 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  400340:	b480      	push	{r7}
  400342:	b085      	sub	sp, #20
  400344:	af00      	add	r7, sp, #0
  400346:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400348:	687b      	ldr	r3, [r7, #4]
  40034a:	685b      	ldr	r3, [r3, #4]
  40034c:	687a      	ldr	r2, [r7, #4]
  40034e:	6892      	ldr	r2, [r2, #8]
  400350:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400352:	687b      	ldr	r3, [r7, #4]
  400354:	689b      	ldr	r3, [r3, #8]
  400356:	687a      	ldr	r2, [r7, #4]
  400358:	6852      	ldr	r2, [r2, #4]
  40035a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  40035c:	687b      	ldr	r3, [r7, #4]
  40035e:	691b      	ldr	r3, [r3, #16]
  400360:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400362:	68fb      	ldr	r3, [r7, #12]
  400364:	685a      	ldr	r2, [r3, #4]
  400366:	687b      	ldr	r3, [r7, #4]
  400368:	429a      	cmp	r2, r3
  40036a:	d103      	bne.n	400374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40036c:	687b      	ldr	r3, [r7, #4]
  40036e:	689a      	ldr	r2, [r3, #8]
  400370:	68fb      	ldr	r3, [r7, #12]
  400372:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	2200      	movs	r2, #0
  400378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  40037a:	68fb      	ldr	r3, [r7, #12]
  40037c:	681b      	ldr	r3, [r3, #0]
  40037e:	1e5a      	subs	r2, r3, #1
  400380:	68fb      	ldr	r3, [r7, #12]
  400382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400384:	68fb      	ldr	r3, [r7, #12]
  400386:	681b      	ldr	r3, [r3, #0]
}
  400388:	4618      	mov	r0, r3
  40038a:	3714      	adds	r7, #20
  40038c:	46bd      	mov	sp, r7
  40038e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400392:	4770      	bx	lr

00400394 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400394:	b480      	push	{r7}
  400396:	b083      	sub	sp, #12
  400398:	af00      	add	r7, sp, #0
  40039a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	2b07      	cmp	r3, #7
  4003a0:	d825      	bhi.n	4003ee <osc_get_rate+0x5a>
  4003a2:	a201      	add	r2, pc, #4	; (adr r2, 4003a8 <osc_get_rate+0x14>)
  4003a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4003a8:	004003c9 	.word	0x004003c9
  4003ac:	004003cf 	.word	0x004003cf
  4003b0:	004003d5 	.word	0x004003d5
  4003b4:	004003db 	.word	0x004003db
  4003b8:	004003df 	.word	0x004003df
  4003bc:	004003e3 	.word	0x004003e3
  4003c0:	004003e7 	.word	0x004003e7
  4003c4:	004003eb 	.word	0x004003eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4003c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4003cc:	e010      	b.n	4003f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4003ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003d2:	e00d      	b.n	4003f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4003d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003d8:	e00a      	b.n	4003f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4003da:	4b08      	ldr	r3, [pc, #32]	; (4003fc <osc_get_rate+0x68>)
  4003dc:	e008      	b.n	4003f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4003de:	4b08      	ldr	r3, [pc, #32]	; (400400 <osc_get_rate+0x6c>)
  4003e0:	e006      	b.n	4003f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4003e2:	4b08      	ldr	r3, [pc, #32]	; (400404 <osc_get_rate+0x70>)
  4003e4:	e004      	b.n	4003f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4003e6:	4b07      	ldr	r3, [pc, #28]	; (400404 <osc_get_rate+0x70>)
  4003e8:	e002      	b.n	4003f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4003ea:	4b06      	ldr	r3, [pc, #24]	; (400404 <osc_get_rate+0x70>)
  4003ec:	e000      	b.n	4003f0 <osc_get_rate+0x5c>
	}

	return 0;
  4003ee:	2300      	movs	r3, #0
}
  4003f0:	4618      	mov	r0, r3
  4003f2:	370c      	adds	r7, #12
  4003f4:	46bd      	mov	sp, r7
  4003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003fa:	4770      	bx	lr
  4003fc:	003d0900 	.word	0x003d0900
  400400:	007a1200 	.word	0x007a1200
  400404:	00b71b00 	.word	0x00b71b00

00400408 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400408:	b580      	push	{r7, lr}
  40040a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40040c:	2006      	movs	r0, #6
  40040e:	4b03      	ldr	r3, [pc, #12]	; (40041c <sysclk_get_main_hz+0x14>)
  400410:	4798      	blx	r3
  400412:	4603      	mov	r3, r0
  400414:	011b      	lsls	r3, r3, #4

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400416:	4618      	mov	r0, r3
  400418:	bd80      	pop	{r7, pc}
  40041a:	bf00      	nop
  40041c:	00400395 	.word	0x00400395

00400420 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400420:	b580      	push	{r7, lr}
  400422:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400424:	4b02      	ldr	r3, [pc, #8]	; (400430 <sysclk_get_cpu_hz+0x10>)
  400426:	4798      	blx	r3
  400428:	4603      	mov	r3, r0
  40042a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40042c:	4618      	mov	r0, r3
  40042e:	bd80      	pop	{r7, pc}
  400430:	00400409 	.word	0x00400409

00400434 <pxPortInitialiseStack>:
/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters )
{
  400434:	b480      	push	{r7}
  400436:	b085      	sub	sp, #20
  400438:	af00      	add	r7, sp, #0
  40043a:	60f8      	str	r0, [r7, #12]
  40043c:	60b9      	str	r1, [r7, #8]
  40043e:	607a      	str	r2, [r7, #4]
	* interrupt. */

	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;
  400440:	68fb      	ldr	r3, [r7, #12]
  400442:	3b04      	subs	r3, #4
  400444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  400446:	68fb      	ldr	r3, [r7, #12]
  400448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40044c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40044e:	68fb      	ldr	r3, [r7, #12]
  400450:	3b04      	subs	r3, #4
  400452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400454:	68ba      	ldr	r2, [r7, #8]
  400456:	68fb      	ldr	r3, [r7, #12]
  400458:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40045a:	68fb      	ldr	r3, [r7, #12]
  40045c:	3b04      	subs	r3, #4
  40045e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;    /* LR */
  400460:	68fb      	ldr	r3, [r7, #12]
  400462:	2200      	movs	r2, #0
  400464:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
  400466:	68fb      	ldr	r3, [r7, #12]
  400468:	3b14      	subs	r3, #20
  40046a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  40046c:	687a      	ldr	r2, [r7, #4]
  40046e:	68fb      	ldr	r3, [r7, #12]
  400470:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
  400472:	68fb      	ldr	r3, [r7, #12]
  400474:	3b04      	subs	r3, #4
  400476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400478:	68fb      	ldr	r3, [r7, #12]
  40047a:	f06f 0202 	mvn.w	r2, #2
  40047e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  400480:	68fb      	ldr	r3, [r7, #12]
  400482:	3b20      	subs	r3, #32
  400484:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  400486:	68fb      	ldr	r3, [r7, #12]
}
  400488:	4618      	mov	r0, r3
  40048a:	3714      	adds	r7, #20
  40048c:	46bd      	mov	sp, r7
  40048e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400492:	4770      	bx	lr

00400494 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  400494:	4b05      	ldr	r3, [pc, #20]	; (4004ac <pxCurrentTCBConst2>)
  400496:	6819      	ldr	r1, [r3, #0]
  400498:	6808      	ldr	r0, [r1, #0]
  40049a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40049e:	f380 8809 	msr	PSP, r0
  4004a2:	f04f 0000 	mov.w	r0, #0
  4004a6:	f380 8811 	msr	BASEPRI, r0
  4004aa:	4770      	bx	lr

004004ac <pxCurrentTCBConst2>:
  4004ac:	2000a9fc 	.word	0x2000a9fc
		" bx r14                          \n"
		"                                   \n"
		" .align 2                        \n"
		"pxCurrentTCBConst2: .word pxCurrentTCB \n"
		);
}
  4004b0:	bf00      	nop
  4004b2:	bf00      	nop

004004b4 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  4004b4:	4804      	ldr	r0, [pc, #16]	; (4004c8 <prvPortStartFirstTask+0x14>)
  4004b6:	6800      	ldr	r0, [r0, #0]
  4004b8:	6800      	ldr	r0, [r0, #0]
  4004ba:	f380 8808 	msr	MSP, r0
  4004be:	b662      	cpsie	i
  4004c0:	df00      	svc	0
  4004c2:	bf00      	nop
		" msr msp, r0             \n"                         /* Set the msp back to the start of the stack. */
		" cpsie i                 \n"                         /* Globally enable interrupts. */
		" svc 0                   \n"                         /* System call to start first task. */
		" nop                     \n"
		);
}
  4004c4:	bf00      	nop
  4004c6:	0000      	.short	0x0000
  4004c8:	e000ed08 	.word	0xe000ed08

004004cc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4004cc:	b580      	push	{r7, lr}
  4004ce:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4004d0:	4a0e      	ldr	r2, [pc, #56]	; (40050c <xPortStartScheduler+0x40>)
  4004d2:	4b0e      	ldr	r3, [pc, #56]	; (40050c <xPortStartScheduler+0x40>)
  4004d4:	681b      	ldr	r3, [r3, #0]
  4004d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4004da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4004dc:	4a0b      	ldr	r2, [pc, #44]	; (40050c <xPortStartScheduler+0x40>)
  4004de:	4b0b      	ldr	r3, [pc, #44]	; (40050c <xPortStartScheduler+0x40>)
  4004e0:	681b      	ldr	r3, [r3, #0]
  4004e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  4004e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  4004e8:	4b09      	ldr	r3, [pc, #36]	; (400510 <xPortStartScheduler+0x44>)
  4004ea:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4004ec:	4b09      	ldr	r3, [pc, #36]	; (400514 <xPortStartScheduler+0x48>)
  4004ee:	2200      	movs	r2, #0
  4004f0:	601a      	str	r2, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  4004f2:	4b09      	ldr	r3, [pc, #36]	; (400518 <xPortStartScheduler+0x4c>)
  4004f4:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  4004f6:	4a09      	ldr	r2, [pc, #36]	; (40051c <xPortStartScheduler+0x50>)
  4004f8:	4b08      	ldr	r3, [pc, #32]	; (40051c <xPortStartScheduler+0x50>)
  4004fa:	681b      	ldr	r3, [r3, #0]
  4004fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400500:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400502:	4b07      	ldr	r3, [pc, #28]	; (400520 <xPortStartScheduler+0x54>)
  400504:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  400506:	2300      	movs	r3, #0
}
  400508:	4618      	mov	r0, r3
  40050a:	bd80      	pop	{r7, pc}
  40050c:	e000ed20 	.word	0xe000ed20
  400510:	00400629 	.word	0x00400629
  400514:	2000000c 	.word	0x2000000c
  400518:	0040065d 	.word	0x0040065d
  40051c:	e000ef34 	.word	0xe000ef34
  400520:	004004b5 	.word	0x004004b5

00400524 <vPortYieldFromISR>:
}

/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  400524:	b480      	push	{r7}
  400526:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400528:	4b04      	ldr	r3, [pc, #16]	; (40053c <vPortYieldFromISR+0x18>)
  40052a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40052e:	601a      	str	r2, [r3, #0]
}
  400530:	bf00      	nop
  400532:	46bd      	mov	sp, r7
  400534:	f85d 7b04 	ldr.w	r7, [sp], #4
  400538:	4770      	bx	lr
  40053a:	bf00      	nop
  40053c:	e000ed04 	.word	0xe000ed04

00400540 <vPortEnterCritical>:

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400540:	b580      	push	{r7, lr}
  400542:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  400544:	4b04      	ldr	r3, [pc, #16]	; (400558 <vPortEnterCritical+0x18>)
  400546:	4798      	blx	r3
	uxCriticalNesting++;
  400548:	4b04      	ldr	r3, [pc, #16]	; (40055c <vPortEnterCritical+0x1c>)
  40054a:	681b      	ldr	r3, [r3, #0]
  40054c:	3301      	adds	r3, #1
  40054e:	4a03      	ldr	r2, [pc, #12]	; (40055c <vPortEnterCritical+0x1c>)
  400550:	6013      	str	r3, [r2, #0]
}
  400552:	bf00      	nop
  400554:	bd80      	pop	{r7, pc}
  400556:	bf00      	nop
  400558:	00400589 	.word	0x00400589
  40055c:	2000000c 	.word	0x2000000c

00400560 <vPortExitCritical>:

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  400560:	b580      	push	{r7, lr}
  400562:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  400564:	4b06      	ldr	r3, [pc, #24]	; (400580 <vPortExitCritical+0x20>)
  400566:	681b      	ldr	r3, [r3, #0]
  400568:	3b01      	subs	r3, #1
  40056a:	4a05      	ldr	r2, [pc, #20]	; (400580 <vPortExitCritical+0x20>)
  40056c:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  40056e:	4b04      	ldr	r3, [pc, #16]	; (400580 <vPortExitCritical+0x20>)
  400570:	681b      	ldr	r3, [r3, #0]
  400572:	2b00      	cmp	r3, #0
  400574:	d102      	bne.n	40057c <vPortExitCritical+0x1c>
		portENABLE_INTERRUPTS();
  400576:	2000      	movs	r0, #0
  400578:	4b02      	ldr	r3, [pc, #8]	; (400584 <vPortExitCritical+0x24>)
  40057a:	4798      	blx	r3
	}
}
  40057c:	bf00      	nop
  40057e:	bd80      	pop	{r7, pc}
  400580:	2000000c 	.word	0x2000000c
  400584:	0040059b 	.word	0x0040059b

00400588 <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  400588:	f3ef 8011 	mrs	r0, BASEPRI
  40058c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  400590:	f381 8811 	msr	BASEPRI, r1
  400594:	4770      	bx	lr
		:: "i" (configMAX_SYSCALL_INTERRUPT_PRIORITY) : "r0", "r1" \
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
  400596:	2300      	movs	r3, #0
}
  400598:	4618      	mov	r0, r3

0040059a <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  40059a:	f380 8811 	msr	BASEPRI, r0
  40059e:	4770      	bx	lr
	( \
		" msr basepri, r0                            \n" \
		" bx lr                                      \n" \
		::: "r0" \
	);
}
  4005a0:	bf00      	nop
	...

004005a4 <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  4005a4:	f3ef 8009 	mrs	r0, PSP
  4005a8:	4b11      	ldr	r3, [pc, #68]	; (4005f0 <pxCurrentTCBConst>)
  4005aa:	681a      	ldr	r2, [r3, #0]
  4005ac:	f01e 0f10 	tst.w	lr, #16
  4005b0:	bf08      	it	eq
  4005b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4005b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005ba:	6010      	str	r0, [r2, #0]
  4005bc:	e92d 4008 	stmdb	sp!, {r3, lr}
  4005c0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4005c4:	f380 8811 	msr	BASEPRI, r0
  4005c8:	f001 f82e 	bl	401628 <vTaskSwitchContext>
  4005cc:	f04f 0000 	mov.w	r0, #0
  4005d0:	f380 8811 	msr	BASEPRI, r0
  4005d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4005d8:	6819      	ldr	r1, [r3, #0]
  4005da:	6808      	ldr	r0, [r1, #0]
  4005dc:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005e0:	f01e 0f10 	tst.w	lr, #16
  4005e4:	bf08      	it	eq
  4005e6:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4005ea:	f380 8809 	msr	PSP, r0
  4005ee:	4770      	bx	lr

004005f0 <pxCurrentTCBConst>:
  4005f0:	2000a9fc 	.word	0x2000a9fc
		"                                       \n"
		"   .align 2                            \n"
		"pxCurrentTCBConst: .word pxCurrentTCB    \n"
		::"i" (configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  4005f4:	bf00      	nop
  4005f6:	bf00      	nop

004005f8 <SysTick_Handler>:

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  4005f8:	b580      	push	{r7, lr}
  4005fa:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4005fc:	4b06      	ldr	r3, [pc, #24]	; (400618 <SysTick_Handler+0x20>)
  4005fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400602:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  400604:	4b05      	ldr	r3, [pc, #20]	; (40061c <SysTick_Handler+0x24>)
  400606:	4798      	blx	r3
	{
		vTaskIncrementTick();
  400608:	4b05      	ldr	r3, [pc, #20]	; (400620 <SysTick_Handler+0x28>)
  40060a:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  40060c:	2000      	movs	r0, #0
  40060e:	4b05      	ldr	r3, [pc, #20]	; (400624 <SysTick_Handler+0x2c>)
  400610:	4798      	blx	r3
}
  400612:	bf00      	nop
  400614:	bd80      	pop	{r7, pc}
  400616:	bf00      	nop
  400618:	e000ed04 	.word	0xe000ed04
  40061c:	00400589 	.word	0x00400589
  400620:	004014dd 	.word	0x004014dd
  400624:	0040059b 	.word	0x0040059b

00400628 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
  400628:	b598      	push	{r3, r4, r7, lr}
  40062a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
  40062c:	4c07      	ldr	r4, [pc, #28]	; (40064c <vPortSetupTimerInterrupt+0x24>)
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  40062e:	4b08      	ldr	r3, [pc, #32]	; (400650 <vPortSetupTimerInterrupt+0x28>)
  400630:	4798      	blx	r3
  400632:	4602      	mov	r2, r0
  400634:	4b07      	ldr	r3, [pc, #28]	; (400654 <vPortSetupTimerInterrupt+0x2c>)
  400636:	fba3 2302 	umull	r2, r3, r3, r2
  40063a:	099b      	lsrs	r3, r3, #6
  40063c:	3b01      	subs	r3, #1
  40063e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400640:	4b05      	ldr	r3, [pc, #20]	; (400658 <vPortSetupTimerInterrupt+0x30>)
  400642:	2207      	movs	r2, #7
  400644:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
}
  400646:	bf00      	nop
  400648:	bd98      	pop	{r3, r4, r7, pc}
  40064a:	bf00      	nop
  40064c:	e000e014 	.word	0xe000e014
  400650:	00400421 	.word	0x00400421
  400654:	10624dd3 	.word	0x10624dd3
  400658:	e000e010 	.word	0xe000e010

0040065c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40065c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40066c <vPortEnableVFP+0x10>
  400660:	6801      	ldr	r1, [r0, #0]
  400662:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400666:	6001      	str	r1, [r0, #0]
  400668:	4770      	bx	lr
		"                            \n"
		" orr r1, r1, #( 0xf << 20 ) \n" /* Enable CP10 and CP11 coprocessors, then save back. */
		" str r1, [r0]               \n"
		" bx r14                     "
	);
}
  40066a:	bf00      	nop
  40066c:	e000ed88 	.word	0xe000ed88

00400670 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  400670:	b580      	push	{r7, lr}
  400672:	b086      	sub	sp, #24
  400674:	af00      	add	r7, sp, #0
  400676:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  400678:	2300      	movs	r3, #0
  40067a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  40067c:	4b34      	ldr	r3, [pc, #208]	; (400750 <pvPortMalloc+0xe0>)
  40067e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  400680:	4b34      	ldr	r3, [pc, #208]	; (400754 <pvPortMalloc+0xe4>)
  400682:	681b      	ldr	r3, [r3, #0]
  400684:	2b00      	cmp	r3, #0
  400686:	d101      	bne.n	40068c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  400688:	4b33      	ldr	r3, [pc, #204]	; (400758 <pvPortMalloc+0xe8>)
  40068a:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  40068c:	687b      	ldr	r3, [r7, #4]
  40068e:	2b00      	cmp	r3, #0
  400690:	d00e      	beq.n	4006b0 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  400692:	2310      	movs	r3, #16
  400694:	461a      	mov	r2, r3
  400696:	687b      	ldr	r3, [r7, #4]
  400698:	4413      	add	r3, r2
  40069a:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40069c:	687b      	ldr	r3, [r7, #4]
  40069e:	f003 0307 	and.w	r3, r3, #7
  4006a2:	2b00      	cmp	r3, #0
  4006a4:	d004      	beq.n	4006b0 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4006a6:	687b      	ldr	r3, [r7, #4]
  4006a8:	f023 0307 	bic.w	r3, r3, #7
  4006ac:	3308      	adds	r3, #8
  4006ae:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4006b0:	687b      	ldr	r3, [r7, #4]
  4006b2:	2b00      	cmp	r3, #0
  4006b4:	d045      	beq.n	400742 <pvPortMalloc+0xd2>
  4006b6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4006ba:	687b      	ldr	r3, [r7, #4]
  4006bc:	4293      	cmp	r3, r2
  4006be:	d240      	bcs.n	400742 <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  4006c0:	4b26      	ldr	r3, [pc, #152]	; (40075c <pvPortMalloc+0xec>)
  4006c2:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  4006c4:	4b25      	ldr	r3, [pc, #148]	; (40075c <pvPortMalloc+0xec>)
  4006c6:	681b      	ldr	r3, [r3, #0]
  4006c8:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4006ca:	e004      	b.n	4006d6 <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  4006cc:	697b      	ldr	r3, [r7, #20]
  4006ce:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  4006d0:	697b      	ldr	r3, [r7, #20]
  4006d2:	681b      	ldr	r3, [r3, #0]
  4006d4:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4006d6:	697b      	ldr	r3, [r7, #20]
  4006d8:	685a      	ldr	r2, [r3, #4]
  4006da:	687b      	ldr	r3, [r7, #4]
  4006dc:	429a      	cmp	r2, r3
  4006de:	d203      	bcs.n	4006e8 <pvPortMalloc+0x78>
  4006e0:	697b      	ldr	r3, [r7, #20]
  4006e2:	681b      	ldr	r3, [r3, #0]
  4006e4:	2b00      	cmp	r3, #0
  4006e6:	d1f1      	bne.n	4006cc <pvPortMalloc+0x5c>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  4006e8:	4b1a      	ldr	r3, [pc, #104]	; (400754 <pvPortMalloc+0xe4>)
  4006ea:	681b      	ldr	r3, [r3, #0]
  4006ec:	697a      	ldr	r2, [r7, #20]
  4006ee:	429a      	cmp	r2, r3
  4006f0:	d027      	beq.n	400742 <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  4006f2:	693b      	ldr	r3, [r7, #16]
  4006f4:	681b      	ldr	r3, [r3, #0]
  4006f6:	2210      	movs	r2, #16
  4006f8:	4413      	add	r3, r2
  4006fa:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	681a      	ldr	r2, [r3, #0]
  400700:	693b      	ldr	r3, [r7, #16]
  400702:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400704:	697b      	ldr	r3, [r7, #20]
  400706:	685a      	ldr	r2, [r3, #4]
  400708:	687b      	ldr	r3, [r7, #4]
  40070a:	1ad3      	subs	r3, r2, r3
  40070c:	2210      	movs	r2, #16
  40070e:	0052      	lsls	r2, r2, #1
  400710:	4293      	cmp	r3, r2
  400712:	d90f      	bls.n	400734 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  400714:	697a      	ldr	r2, [r7, #20]
  400716:	687b      	ldr	r3, [r7, #4]
  400718:	4413      	add	r3, r2
  40071a:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40071c:	697b      	ldr	r3, [r7, #20]
  40071e:	685a      	ldr	r2, [r3, #4]
  400720:	687b      	ldr	r3, [r7, #4]
  400722:	1ad2      	subs	r2, r2, r3
  400724:	68bb      	ldr	r3, [r7, #8]
  400726:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  400728:	697b      	ldr	r3, [r7, #20]
  40072a:	687a      	ldr	r2, [r7, #4]
  40072c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  40072e:	68b8      	ldr	r0, [r7, #8]
  400730:	4b0b      	ldr	r3, [pc, #44]	; (400760 <pvPortMalloc+0xf0>)
  400732:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  400734:	4b0b      	ldr	r3, [pc, #44]	; (400764 <pvPortMalloc+0xf4>)
  400736:	681a      	ldr	r2, [r3, #0]
  400738:	697b      	ldr	r3, [r7, #20]
  40073a:	685b      	ldr	r3, [r3, #4]
  40073c:	1ad3      	subs	r3, r2, r3
  40073e:	4a09      	ldr	r2, [pc, #36]	; (400764 <pvPortMalloc+0xf4>)
  400740:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  400742:	4b09      	ldr	r3, [pc, #36]	; (400768 <pvPortMalloc+0xf8>)
  400744:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
  400746:	68fb      	ldr	r3, [r7, #12]
}
  400748:	4618      	mov	r0, r3
  40074a:	3718      	adds	r7, #24
  40074c:	46bd      	mov	sp, r7
  40074e:	bd80      	pop	{r7, pc}
  400750:	00401375 	.word	0x00401375
  400754:	2000a9f8 	.word	0x2000a9f8
  400758:	004007c1 	.word	0x004007c1
  40075c:	2000a9f0 	.word	0x2000a9f0
  400760:	00400851 	.word	0x00400851
  400764:	20000010 	.word	0x20000010
  400768:	00401391 	.word	0x00401391

0040076c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  40076c:	b580      	push	{r7, lr}
  40076e:	b084      	sub	sp, #16
  400770:	af00      	add	r7, sp, #0
  400772:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  400774:	687b      	ldr	r3, [r7, #4]
  400776:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  400778:	687b      	ldr	r3, [r7, #4]
  40077a:	2b00      	cmp	r3, #0
  40077c:	d014      	beq.n	4007a8 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  40077e:	2310      	movs	r3, #16
  400780:	425b      	negs	r3, r3
  400782:	68fa      	ldr	r2, [r7, #12]
  400784:	4413      	add	r3, r2
  400786:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  400788:	68fb      	ldr	r3, [r7, #12]
  40078a:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  40078c:	4b08      	ldr	r3, [pc, #32]	; (4007b0 <vPortFree+0x44>)
  40078e:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  400790:	68bb      	ldr	r3, [r7, #8]
  400792:	685a      	ldr	r2, [r3, #4]
  400794:	4b07      	ldr	r3, [pc, #28]	; (4007b4 <vPortFree+0x48>)
  400796:	681b      	ldr	r3, [r3, #0]
  400798:	4413      	add	r3, r2
  40079a:	4a06      	ldr	r2, [pc, #24]	; (4007b4 <vPortFree+0x48>)
  40079c:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  40079e:	68b8      	ldr	r0, [r7, #8]
  4007a0:	4b05      	ldr	r3, [pc, #20]	; (4007b8 <vPortFree+0x4c>)
  4007a2:	4798      	blx	r3
		}
		xTaskResumeAll();
  4007a4:	4b05      	ldr	r3, [pc, #20]	; (4007bc <vPortFree+0x50>)
  4007a6:	4798      	blx	r3
	}
}
  4007a8:	bf00      	nop
  4007aa:	3710      	adds	r7, #16
  4007ac:	46bd      	mov	sp, r7
  4007ae:	bd80      	pop	{r7, pc}
  4007b0:	00401375 	.word	0x00401375
  4007b4:	20000010 	.word	0x20000010
  4007b8:	00400851 	.word	0x00400851
  4007bc:	00401391 	.word	0x00401391

004007c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  4007c0:	b580      	push	{r7, lr}
  4007c2:	b082      	sub	sp, #8
  4007c4:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  4007c6:	4b1d      	ldr	r3, [pc, #116]	; (40083c <prvHeapInit+0x7c>)
  4007c8:	4a1d      	ldr	r2, [pc, #116]	; (400840 <prvHeapInit+0x80>)
  4007ca:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  4007cc:	4b1b      	ldr	r3, [pc, #108]	; (40083c <prvHeapInit+0x7c>)
  4007ce:	2200      	movs	r2, #0
  4007d0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  4007d2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4007d6:	4b1a      	ldr	r3, [pc, #104]	; (400840 <prvHeapInit+0x80>)
  4007d8:	4413      	add	r3, r2
  4007da:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  4007dc:	2310      	movs	r3, #16
  4007de:	425b      	negs	r3, r3
  4007e0:	687a      	ldr	r2, [r7, #4]
  4007e2:	4413      	add	r3, r2
  4007e4:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  4007e6:	4a17      	ldr	r2, [pc, #92]	; (400844 <prvHeapInit+0x84>)
  4007e8:	687b      	ldr	r3, [r7, #4]
  4007ea:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  4007ec:	4b15      	ldr	r3, [pc, #84]	; (400844 <prvHeapInit+0x84>)
  4007ee:	681b      	ldr	r3, [r3, #0]
  4007f0:	f003 0307 	and.w	r3, r3, #7
  4007f4:	2b00      	cmp	r3, #0
  4007f6:	d003      	beq.n	400800 <prvHeapInit+0x40>
  4007f8:	4b13      	ldr	r3, [pc, #76]	; (400848 <prvHeapInit+0x88>)
  4007fa:	4798      	blx	r3
  4007fc:	bf00      	nop
  4007fe:	e7fd      	b.n	4007fc <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  400800:	4b10      	ldr	r3, [pc, #64]	; (400844 <prvHeapInit+0x84>)
  400802:	681b      	ldr	r3, [r3, #0]
  400804:	2200      	movs	r2, #0
  400806:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  400808:	4b0e      	ldr	r3, [pc, #56]	; (400844 <prvHeapInit+0x84>)
  40080a:	681b      	ldr	r3, [r3, #0]
  40080c:	2200      	movs	r2, #0
  40080e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  400810:	4b0b      	ldr	r3, [pc, #44]	; (400840 <prvHeapInit+0x80>)
  400812:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  400814:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  400818:	2210      	movs	r2, #16
  40081a:	1a9a      	subs	r2, r3, r2
  40081c:	683b      	ldr	r3, [r7, #0]
  40081e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  400820:	4b08      	ldr	r3, [pc, #32]	; (400844 <prvHeapInit+0x84>)
  400822:	681a      	ldr	r2, [r3, #0]
  400824:	683b      	ldr	r3, [r7, #0]
  400826:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  400828:	4b08      	ldr	r3, [pc, #32]	; (40084c <prvHeapInit+0x8c>)
  40082a:	681b      	ldr	r3, [r3, #0]
  40082c:	2210      	movs	r2, #16
  40082e:	1a9b      	subs	r3, r3, r2
  400830:	4a06      	ldr	r2, [pc, #24]	; (40084c <prvHeapInit+0x8c>)
  400832:	6013      	str	r3, [r2, #0]
}
  400834:	bf00      	nop
  400836:	3708      	adds	r7, #8
  400838:	46bd      	mov	sp, r7
  40083a:	bd80      	pop	{r7, pc}
  40083c:	2000a9f0 	.word	0x2000a9f0
  400840:	200009f0 	.word	0x200009f0
  400844:	2000a9f8 	.word	0x2000a9f8
  400848:	00400589 	.word	0x00400589
  40084c:	20000010 	.word	0x20000010

00400850 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400850:	b480      	push	{r7}
  400852:	b085      	sub	sp, #20
  400854:	af00      	add	r7, sp, #0
  400856:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400858:	4b28      	ldr	r3, [pc, #160]	; (4008fc <prvInsertBlockIntoFreeList+0xac>)
  40085a:	60fb      	str	r3, [r7, #12]
  40085c:	e002      	b.n	400864 <prvInsertBlockIntoFreeList+0x14>
  40085e:	68fb      	ldr	r3, [r7, #12]
  400860:	681b      	ldr	r3, [r3, #0]
  400862:	60fb      	str	r3, [r7, #12]
  400864:	68fb      	ldr	r3, [r7, #12]
  400866:	681a      	ldr	r2, [r3, #0]
  400868:	687b      	ldr	r3, [r7, #4]
  40086a:	429a      	cmp	r2, r3
  40086c:	d3f7      	bcc.n	40085e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  40086e:	68fb      	ldr	r3, [r7, #12]
  400870:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	685b      	ldr	r3, [r3, #4]
  400876:	68ba      	ldr	r2, [r7, #8]
  400878:	441a      	add	r2, r3
  40087a:	687b      	ldr	r3, [r7, #4]
  40087c:	429a      	cmp	r2, r3
  40087e:	d108      	bne.n	400892 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400880:	68fb      	ldr	r3, [r7, #12]
  400882:	685a      	ldr	r2, [r3, #4]
  400884:	687b      	ldr	r3, [r7, #4]
  400886:	685b      	ldr	r3, [r3, #4]
  400888:	441a      	add	r2, r3
  40088a:	68fb      	ldr	r3, [r7, #12]
  40088c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  400892:	687b      	ldr	r3, [r7, #4]
  400894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  400896:	687b      	ldr	r3, [r7, #4]
  400898:	685b      	ldr	r3, [r3, #4]
  40089a:	68ba      	ldr	r2, [r7, #8]
  40089c:	441a      	add	r2, r3
  40089e:	68fb      	ldr	r3, [r7, #12]
  4008a0:	681b      	ldr	r3, [r3, #0]
  4008a2:	429a      	cmp	r2, r3
  4008a4:	d118      	bne.n	4008d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4008a6:	68fb      	ldr	r3, [r7, #12]
  4008a8:	681a      	ldr	r2, [r3, #0]
  4008aa:	4b15      	ldr	r3, [pc, #84]	; (400900 <prvInsertBlockIntoFreeList+0xb0>)
  4008ac:	681b      	ldr	r3, [r3, #0]
  4008ae:	429a      	cmp	r2, r3
  4008b0:	d00d      	beq.n	4008ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4008b2:	687b      	ldr	r3, [r7, #4]
  4008b4:	685a      	ldr	r2, [r3, #4]
  4008b6:	68fb      	ldr	r3, [r7, #12]
  4008b8:	681b      	ldr	r3, [r3, #0]
  4008ba:	685b      	ldr	r3, [r3, #4]
  4008bc:	441a      	add	r2, r3
  4008be:	687b      	ldr	r3, [r7, #4]
  4008c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4008c2:	68fb      	ldr	r3, [r7, #12]
  4008c4:	681b      	ldr	r3, [r3, #0]
  4008c6:	681a      	ldr	r2, [r3, #0]
  4008c8:	687b      	ldr	r3, [r7, #4]
  4008ca:	601a      	str	r2, [r3, #0]
  4008cc:	e008      	b.n	4008e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4008ce:	4b0c      	ldr	r3, [pc, #48]	; (400900 <prvInsertBlockIntoFreeList+0xb0>)
  4008d0:	681a      	ldr	r2, [r3, #0]
  4008d2:	687b      	ldr	r3, [r7, #4]
  4008d4:	601a      	str	r2, [r3, #0]
  4008d6:	e003      	b.n	4008e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  4008d8:	68fb      	ldr	r3, [r7, #12]
  4008da:	681a      	ldr	r2, [r3, #0]
  4008dc:	687b      	ldr	r3, [r7, #4]
  4008de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  4008e0:	68fa      	ldr	r2, [r7, #12]
  4008e2:	687b      	ldr	r3, [r7, #4]
  4008e4:	429a      	cmp	r2, r3
  4008e6:	d002      	beq.n	4008ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4008e8:	68fb      	ldr	r3, [r7, #12]
  4008ea:	687a      	ldr	r2, [r7, #4]
  4008ec:	601a      	str	r2, [r3, #0]
	}
}
  4008ee:	bf00      	nop
  4008f0:	3714      	adds	r7, #20
  4008f2:	46bd      	mov	sp, r7
  4008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008f8:	4770      	bx	lr
  4008fa:	bf00      	nop
  4008fc:	2000a9f0 	.word	0x2000a9f0
  400900:	2000a9f8 	.word	0x2000a9f8

00400904 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  400904:	b580      	push	{r7, lr}
  400906:	b082      	sub	sp, #8
  400908:	af00      	add	r7, sp, #0
  40090a:	6078      	str	r0, [r7, #4]
  40090c:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  40090e:	687b      	ldr	r3, [r7, #4]
  400910:	2b00      	cmp	r3, #0
  400912:	d103      	bne.n	40091c <xQueueGenericReset+0x18>
  400914:	4b27      	ldr	r3, [pc, #156]	; (4009b4 <xQueueGenericReset+0xb0>)
  400916:	4798      	blx	r3
  400918:	bf00      	nop
  40091a:	e7fd      	b.n	400918 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  40091c:	4b26      	ldr	r3, [pc, #152]	; (4009b8 <xQueueGenericReset+0xb4>)
  40091e:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400920:	687b      	ldr	r3, [r7, #4]
  400922:	681a      	ldr	r2, [r3, #0]
  400924:	687b      	ldr	r3, [r7, #4]
  400926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400928:	6879      	ldr	r1, [r7, #4]
  40092a:	6c09      	ldr	r1, [r1, #64]	; 0x40
  40092c:	fb01 f303 	mul.w	r3, r1, r3
  400930:	441a      	add	r2, r3
  400932:	687b      	ldr	r3, [r7, #4]
  400934:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  400936:	687b      	ldr	r3, [r7, #4]
  400938:	2200      	movs	r2, #0
  40093a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40093c:	687b      	ldr	r3, [r7, #4]
  40093e:	681a      	ldr	r2, [r3, #0]
  400940:	687b      	ldr	r3, [r7, #4]
  400942:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  400944:	687b      	ldr	r3, [r7, #4]
  400946:	681a      	ldr	r2, [r3, #0]
  400948:	687b      	ldr	r3, [r7, #4]
  40094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40094c:	3b01      	subs	r3, #1
  40094e:	6879      	ldr	r1, [r7, #4]
  400950:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400952:	fb01 f303 	mul.w	r3, r1, r3
  400956:	441a      	add	r2, r3
  400958:	687b      	ldr	r3, [r7, #4]
  40095a:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40095c:	687b      	ldr	r3, [r7, #4]
  40095e:	f04f 32ff 	mov.w	r2, #4294967295
  400962:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400964:	687b      	ldr	r3, [r7, #4]
  400966:	f04f 32ff 	mov.w	r2, #4294967295
  40096a:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  40096c:	683b      	ldr	r3, [r7, #0]
  40096e:	2b00      	cmp	r3, #0
  400970:	d10e      	bne.n	400990 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400972:	687b      	ldr	r3, [r7, #4]
  400974:	691b      	ldr	r3, [r3, #16]
  400976:	2b00      	cmp	r3, #0
  400978:	d014      	beq.n	4009a4 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40097a:	687b      	ldr	r3, [r7, #4]
  40097c:	3310      	adds	r3, #16
  40097e:	4618      	mov	r0, r3
  400980:	4b0e      	ldr	r3, [pc, #56]	; (4009bc <xQueueGenericReset+0xb8>)
  400982:	4798      	blx	r3
  400984:	4603      	mov	r3, r0
  400986:	2b01      	cmp	r3, #1
  400988:	d10c      	bne.n	4009a4 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  40098a:	4b0d      	ldr	r3, [pc, #52]	; (4009c0 <xQueueGenericReset+0xbc>)
  40098c:	4798      	blx	r3
  40098e:	e009      	b.n	4009a4 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400990:	687b      	ldr	r3, [r7, #4]
  400992:	3310      	adds	r3, #16
  400994:	4618      	mov	r0, r3
  400996:	4b0b      	ldr	r3, [pc, #44]	; (4009c4 <xQueueGenericReset+0xc0>)
  400998:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40099a:	687b      	ldr	r3, [r7, #4]
  40099c:	3324      	adds	r3, #36	; 0x24
  40099e:	4618      	mov	r0, r3
  4009a0:	4b08      	ldr	r3, [pc, #32]	; (4009c4 <xQueueGenericReset+0xc0>)
  4009a2:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  4009a4:	4b08      	ldr	r3, [pc, #32]	; (4009c8 <xQueueGenericReset+0xc4>)
  4009a6:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  4009a8:	2301      	movs	r3, #1
}
  4009aa:	4618      	mov	r0, r3
  4009ac:	3708      	adds	r7, #8
  4009ae:	46bd      	mov	sp, r7
  4009b0:	bd80      	pop	{r7, pc}
  4009b2:	bf00      	nop
  4009b4:	00400589 	.word	0x00400589
  4009b8:	00400541 	.word	0x00400541
  4009bc:	004017b5 	.word	0x004017b5
  4009c0:	00400525 	.word	0x00400525
  4009c4:	00400225 	.word	0x00400225
  4009c8:	00400561 	.word	0x00400561

004009cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4009cc:	b580      	push	{r7, lr}
  4009ce:	b088      	sub	sp, #32
  4009d0:	af00      	add	r7, sp, #0
  4009d2:	60f8      	str	r0, [r7, #12]
  4009d4:	60b9      	str	r1, [r7, #8]
  4009d6:	4613      	mov	r3, r2
  4009d8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  4009da:	2300      	movs	r3, #0
  4009dc:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  4009de:	68fb      	ldr	r3, [r7, #12]
  4009e0:	2b00      	cmp	r3, #0
  4009e2:	d02a      	beq.n	400a3a <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  4009e4:	2050      	movs	r0, #80	; 0x50
  4009e6:	4b1b      	ldr	r3, [pc, #108]	; (400a54 <xQueueGenericCreate+0x88>)
  4009e8:	4798      	blx	r3
  4009ea:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  4009ec:	69bb      	ldr	r3, [r7, #24]
  4009ee:	2b00      	cmp	r3, #0
  4009f0:	d023      	beq.n	400a3a <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  4009f2:	68fb      	ldr	r3, [r7, #12]
  4009f4:	68ba      	ldr	r2, [r7, #8]
  4009f6:	fb02 f303 	mul.w	r3, r2, r3
  4009fa:	3301      	adds	r3, #1
  4009fc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  4009fe:	6978      	ldr	r0, [r7, #20]
  400a00:	4b14      	ldr	r3, [pc, #80]	; (400a54 <xQueueGenericCreate+0x88>)
  400a02:	4798      	blx	r3
  400a04:	4602      	mov	r2, r0
  400a06:	69bb      	ldr	r3, [r7, #24]
  400a08:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  400a0a:	69bb      	ldr	r3, [r7, #24]
  400a0c:	681b      	ldr	r3, [r3, #0]
  400a0e:	2b00      	cmp	r3, #0
  400a10:	d010      	beq.n	400a34 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  400a12:	69bb      	ldr	r3, [r7, #24]
  400a14:	68fa      	ldr	r2, [r7, #12]
  400a16:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  400a18:	69bb      	ldr	r3, [r7, #24]
  400a1a:	68ba      	ldr	r2, [r7, #8]
  400a1c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  400a1e:	2101      	movs	r1, #1
  400a20:	69b8      	ldr	r0, [r7, #24]
  400a22:	4b0d      	ldr	r3, [pc, #52]	; (400a58 <xQueueGenericCreate+0x8c>)
  400a24:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  400a26:	69bb      	ldr	r3, [r7, #24]
  400a28:	79fa      	ldrb	r2, [r7, #7]
  400a2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  400a2e:	69bb      	ldr	r3, [r7, #24]
  400a30:	61fb      	str	r3, [r7, #28]
  400a32:	e002      	b.n	400a3a <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  400a34:	69b8      	ldr	r0, [r7, #24]
  400a36:	4b09      	ldr	r3, [pc, #36]	; (400a5c <xQueueGenericCreate+0x90>)
  400a38:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  400a3a:	69fb      	ldr	r3, [r7, #28]
  400a3c:	2b00      	cmp	r3, #0
  400a3e:	d103      	bne.n	400a48 <xQueueGenericCreate+0x7c>
  400a40:	4b07      	ldr	r3, [pc, #28]	; (400a60 <xQueueGenericCreate+0x94>)
  400a42:	4798      	blx	r3
  400a44:	bf00      	nop
  400a46:	e7fd      	b.n	400a44 <xQueueGenericCreate+0x78>

	return xReturn;
  400a48:	69fb      	ldr	r3, [r7, #28]
}
  400a4a:	4618      	mov	r0, r3
  400a4c:	3720      	adds	r7, #32
  400a4e:	46bd      	mov	sp, r7
  400a50:	bd80      	pop	{r7, pc}
  400a52:	bf00      	nop
  400a54:	00400671 	.word	0x00400671
  400a58:	00400905 	.word	0x00400905
  400a5c:	0040076d 	.word	0x0040076d
  400a60:	00400589 	.word	0x00400589

00400a64 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  400a64:	b580      	push	{r7, lr}
  400a66:	b088      	sub	sp, #32
  400a68:	af00      	add	r7, sp, #0
  400a6a:	60f8      	str	r0, [r7, #12]
  400a6c:	60b9      	str	r1, [r7, #8]
  400a6e:	607a      	str	r2, [r7, #4]
  400a70:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400a72:	2300      	movs	r3, #0
  400a74:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  400a76:	68fb      	ldr	r3, [r7, #12]
  400a78:	2b00      	cmp	r3, #0
  400a7a:	d103      	bne.n	400a84 <xQueueGenericSend+0x20>
  400a7c:	4b46      	ldr	r3, [pc, #280]	; (400b98 <xQueueGenericSend+0x134>)
  400a7e:	4798      	blx	r3
  400a80:	bf00      	nop
  400a82:	e7fd      	b.n	400a80 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400a84:	68bb      	ldr	r3, [r7, #8]
  400a86:	2b00      	cmp	r3, #0
  400a88:	d103      	bne.n	400a92 <xQueueGenericSend+0x2e>
  400a8a:	68fb      	ldr	r3, [r7, #12]
  400a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400a8e:	2b00      	cmp	r3, #0
  400a90:	d101      	bne.n	400a96 <xQueueGenericSend+0x32>
  400a92:	2301      	movs	r3, #1
  400a94:	e000      	b.n	400a98 <xQueueGenericSend+0x34>
  400a96:	2300      	movs	r3, #0
  400a98:	2b00      	cmp	r3, #0
  400a9a:	d103      	bne.n	400aa4 <xQueueGenericSend+0x40>
  400a9c:	4b3e      	ldr	r3, [pc, #248]	; (400b98 <xQueueGenericSend+0x134>)
  400a9e:	4798      	blx	r3
  400aa0:	bf00      	nop
  400aa2:	e7fd      	b.n	400aa0 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400aa4:	4b3d      	ldr	r3, [pc, #244]	; (400b9c <xQueueGenericSend+0x138>)
  400aa6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400aa8:	68fb      	ldr	r3, [r7, #12]
  400aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400aac:	68fb      	ldr	r3, [r7, #12]
  400aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400ab0:	429a      	cmp	r2, r3
  400ab2:	d216      	bcs.n	400ae2 <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ab4:	683a      	ldr	r2, [r7, #0]
  400ab6:	68b9      	ldr	r1, [r7, #8]
  400ab8:	68f8      	ldr	r0, [r7, #12]
  400aba:	4b39      	ldr	r3, [pc, #228]	; (400ba0 <xQueueGenericSend+0x13c>)
  400abc:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400abe:	68fb      	ldr	r3, [r7, #12]
  400ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400ac2:	2b00      	cmp	r3, #0
  400ac4:	d009      	beq.n	400ada <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400ac6:	68fb      	ldr	r3, [r7, #12]
  400ac8:	3324      	adds	r3, #36	; 0x24
  400aca:	4618      	mov	r0, r3
  400acc:	4b35      	ldr	r3, [pc, #212]	; (400ba4 <xQueueGenericSend+0x140>)
  400ace:	4798      	blx	r3
  400ad0:	4603      	mov	r3, r0
  400ad2:	2b01      	cmp	r3, #1
  400ad4:	d101      	bne.n	400ada <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  400ad6:	4b34      	ldr	r3, [pc, #208]	; (400ba8 <xQueueGenericSend+0x144>)
  400ad8:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  400ada:	4b34      	ldr	r3, [pc, #208]	; (400bac <xQueueGenericSend+0x148>)
  400adc:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  400ade:	2301      	movs	r3, #1
  400ae0:	e056      	b.n	400b90 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400ae2:	687b      	ldr	r3, [r7, #4]
  400ae4:	2b00      	cmp	r3, #0
  400ae6:	d103      	bne.n	400af0 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400ae8:	4b30      	ldr	r3, [pc, #192]	; (400bac <xQueueGenericSend+0x148>)
  400aea:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400aec:	2300      	movs	r3, #0
  400aee:	e04f      	b.n	400b90 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  400af0:	69fb      	ldr	r3, [r7, #28]
  400af2:	2b00      	cmp	r3, #0
  400af4:	d106      	bne.n	400b04 <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400af6:	f107 0314 	add.w	r3, r7, #20
  400afa:	4618      	mov	r0, r3
  400afc:	4b2c      	ldr	r3, [pc, #176]	; (400bb0 <xQueueGenericSend+0x14c>)
  400afe:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400b00:	2301      	movs	r3, #1
  400b02:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400b04:	4b29      	ldr	r3, [pc, #164]	; (400bac <xQueueGenericSend+0x148>)
  400b06:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400b08:	4b2a      	ldr	r3, [pc, #168]	; (400bb4 <xQueueGenericSend+0x150>)
  400b0a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400b0c:	4b23      	ldr	r3, [pc, #140]	; (400b9c <xQueueGenericSend+0x138>)
  400b0e:	4798      	blx	r3
  400b10:	68fb      	ldr	r3, [r7, #12]
  400b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400b14:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b18:	d102      	bne.n	400b20 <xQueueGenericSend+0xbc>
  400b1a:	68fb      	ldr	r3, [r7, #12]
  400b1c:	2200      	movs	r2, #0
  400b1e:	645a      	str	r2, [r3, #68]	; 0x44
  400b20:	68fb      	ldr	r3, [r7, #12]
  400b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400b24:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b28:	d102      	bne.n	400b30 <xQueueGenericSend+0xcc>
  400b2a:	68fb      	ldr	r3, [r7, #12]
  400b2c:	2200      	movs	r2, #0
  400b2e:	649a      	str	r2, [r3, #72]	; 0x48
  400b30:	4b1e      	ldr	r3, [pc, #120]	; (400bac <xQueueGenericSend+0x148>)
  400b32:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400b34:	1d3a      	adds	r2, r7, #4
  400b36:	f107 0314 	add.w	r3, r7, #20
  400b3a:	4611      	mov	r1, r2
  400b3c:	4618      	mov	r0, r3
  400b3e:	4b1e      	ldr	r3, [pc, #120]	; (400bb8 <xQueueGenericSend+0x154>)
  400b40:	4798      	blx	r3
  400b42:	4603      	mov	r3, r0
  400b44:	2b00      	cmp	r3, #0
  400b46:	d11d      	bne.n	400b84 <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400b48:	68f8      	ldr	r0, [r7, #12]
  400b4a:	4b1c      	ldr	r3, [pc, #112]	; (400bbc <xQueueGenericSend+0x158>)
  400b4c:	4798      	blx	r3
  400b4e:	4603      	mov	r3, r0
  400b50:	2b00      	cmp	r3, #0
  400b52:	d011      	beq.n	400b78 <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400b54:	68fb      	ldr	r3, [r7, #12]
  400b56:	3310      	adds	r3, #16
  400b58:	687a      	ldr	r2, [r7, #4]
  400b5a:	4611      	mov	r1, r2
  400b5c:	4618      	mov	r0, r3
  400b5e:	4b18      	ldr	r3, [pc, #96]	; (400bc0 <xQueueGenericSend+0x15c>)
  400b60:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400b62:	68f8      	ldr	r0, [r7, #12]
  400b64:	4b17      	ldr	r3, [pc, #92]	; (400bc4 <xQueueGenericSend+0x160>)
  400b66:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400b68:	4b17      	ldr	r3, [pc, #92]	; (400bc8 <xQueueGenericSend+0x164>)
  400b6a:	4798      	blx	r3
  400b6c:	4603      	mov	r3, r0
  400b6e:	2b00      	cmp	r3, #0
  400b70:	d198      	bne.n	400aa4 <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  400b72:	4b0d      	ldr	r3, [pc, #52]	; (400ba8 <xQueueGenericSend+0x144>)
  400b74:	4798      	blx	r3
  400b76:	e795      	b.n	400aa4 <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400b78:	68f8      	ldr	r0, [r7, #12]
  400b7a:	4b12      	ldr	r3, [pc, #72]	; (400bc4 <xQueueGenericSend+0x160>)
  400b7c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400b7e:	4b12      	ldr	r3, [pc, #72]	; (400bc8 <xQueueGenericSend+0x164>)
  400b80:	4798      	blx	r3
  400b82:	e78f      	b.n	400aa4 <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400b84:	68f8      	ldr	r0, [r7, #12]
  400b86:	4b0f      	ldr	r3, [pc, #60]	; (400bc4 <xQueueGenericSend+0x160>)
  400b88:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400b8a:	4b0f      	ldr	r3, [pc, #60]	; (400bc8 <xQueueGenericSend+0x164>)
  400b8c:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400b8e:	2300      	movs	r3, #0
		}
	}
}
  400b90:	4618      	mov	r0, r3
  400b92:	3720      	adds	r7, #32
  400b94:	46bd      	mov	sp, r7
  400b96:	bd80      	pop	{r7, pc}
  400b98:	00400589 	.word	0x00400589
  400b9c:	00400541 	.word	0x00400541
  400ba0:	00400e5d 	.word	0x00400e5d
  400ba4:	004017b5 	.word	0x004017b5
  400ba8:	00400525 	.word	0x00400525
  400bac:	00400561 	.word	0x00400561
  400bb0:	00401871 	.word	0x00401871
  400bb4:	00401375 	.word	0x00401375
  400bb8:	004018ad 	.word	0x004018ad
  400bbc:	00401049 	.word	0x00401049
  400bc0:	004016cd 	.word	0x004016cd
  400bc4:	00400f6d 	.word	0x00400f6d
  400bc8:	00401391 	.word	0x00401391

00400bcc <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  400bcc:	b580      	push	{r7, lr}
  400bce:	b086      	sub	sp, #24
  400bd0:	af00      	add	r7, sp, #0
  400bd2:	60f8      	str	r0, [r7, #12]
  400bd4:	60b9      	str	r1, [r7, #8]
  400bd6:	607a      	str	r2, [r7, #4]
  400bd8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  400bda:	68fb      	ldr	r3, [r7, #12]
  400bdc:	2b00      	cmp	r3, #0
  400bde:	d103      	bne.n	400be8 <xQueueGenericSendFromISR+0x1c>
  400be0:	4b25      	ldr	r3, [pc, #148]	; (400c78 <xQueueGenericSendFromISR+0xac>)
  400be2:	4798      	blx	r3
  400be4:	bf00      	nop
  400be6:	e7fd      	b.n	400be4 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400be8:	68bb      	ldr	r3, [r7, #8]
  400bea:	2b00      	cmp	r3, #0
  400bec:	d103      	bne.n	400bf6 <xQueueGenericSendFromISR+0x2a>
  400bee:	68fb      	ldr	r3, [r7, #12]
  400bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400bf2:	2b00      	cmp	r3, #0
  400bf4:	d101      	bne.n	400bfa <xQueueGenericSendFromISR+0x2e>
  400bf6:	2301      	movs	r3, #1
  400bf8:	e000      	b.n	400bfc <xQueueGenericSendFromISR+0x30>
  400bfa:	2300      	movs	r3, #0
  400bfc:	2b00      	cmp	r3, #0
  400bfe:	d103      	bne.n	400c08 <xQueueGenericSendFromISR+0x3c>
  400c00:	4b1d      	ldr	r3, [pc, #116]	; (400c78 <xQueueGenericSendFromISR+0xac>)
  400c02:	4798      	blx	r3
  400c04:	bf00      	nop
  400c06:	e7fd      	b.n	400c04 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  400c08:	4b1b      	ldr	r3, [pc, #108]	; (400c78 <xQueueGenericSendFromISR+0xac>)
  400c0a:	4798      	blx	r3
  400c0c:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400c0e:	68fb      	ldr	r3, [r7, #12]
  400c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400c12:	68fb      	ldr	r3, [r7, #12]
  400c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400c16:	429a      	cmp	r2, r3
  400c18:	d224      	bcs.n	400c64 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400c1a:	683a      	ldr	r2, [r7, #0]
  400c1c:	68b9      	ldr	r1, [r7, #8]
  400c1e:	68f8      	ldr	r0, [r7, #12]
  400c20:	4b16      	ldr	r3, [pc, #88]	; (400c7c <xQueueGenericSendFromISR+0xb0>)
  400c22:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400c24:	68fb      	ldr	r3, [r7, #12]
  400c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400c28:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c2c:	d112      	bne.n	400c54 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c2e:	68fb      	ldr	r3, [r7, #12]
  400c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400c32:	2b00      	cmp	r3, #0
  400c34:	d013      	beq.n	400c5e <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c36:	68fb      	ldr	r3, [r7, #12]
  400c38:	3324      	adds	r3, #36	; 0x24
  400c3a:	4618      	mov	r0, r3
  400c3c:	4b10      	ldr	r3, [pc, #64]	; (400c80 <xQueueGenericSendFromISR+0xb4>)
  400c3e:	4798      	blx	r3
  400c40:	4603      	mov	r3, r0
  400c42:	2b00      	cmp	r3, #0
  400c44:	d00b      	beq.n	400c5e <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  400c46:	687b      	ldr	r3, [r7, #4]
  400c48:	2b00      	cmp	r3, #0
  400c4a:	d008      	beq.n	400c5e <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  400c4c:	687b      	ldr	r3, [r7, #4]
  400c4e:	2201      	movs	r2, #1
  400c50:	601a      	str	r2, [r3, #0]
  400c52:	e004      	b.n	400c5e <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400c54:	68fb      	ldr	r3, [r7, #12]
  400c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400c58:	1c5a      	adds	r2, r3, #1
  400c5a:	68fb      	ldr	r3, [r7, #12]
  400c5c:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  400c5e:	2301      	movs	r3, #1
  400c60:	617b      	str	r3, [r7, #20]
  400c62:	e001      	b.n	400c68 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400c64:	2300      	movs	r3, #0
  400c66:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  400c68:	6938      	ldr	r0, [r7, #16]
  400c6a:	4b06      	ldr	r3, [pc, #24]	; (400c84 <xQueueGenericSendFromISR+0xb8>)
  400c6c:	4798      	blx	r3

	return xReturn;
  400c6e:	697b      	ldr	r3, [r7, #20]
}
  400c70:	4618      	mov	r0, r3
  400c72:	3718      	adds	r7, #24
  400c74:	46bd      	mov	sp, r7
  400c76:	bd80      	pop	{r7, pc}
  400c78:	00400589 	.word	0x00400589
  400c7c:	00400e5d 	.word	0x00400e5d
  400c80:	004017b5 	.word	0x004017b5
  400c84:	0040059b 	.word	0x0040059b

00400c88 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  400c88:	b580      	push	{r7, lr}
  400c8a:	b088      	sub	sp, #32
  400c8c:	af00      	add	r7, sp, #0
  400c8e:	60f8      	str	r0, [r7, #12]
  400c90:	60b9      	str	r1, [r7, #8]
  400c92:	607a      	str	r2, [r7, #4]
  400c94:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400c96:	2300      	movs	r3, #0
  400c98:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  400c9a:	68fb      	ldr	r3, [r7, #12]
  400c9c:	2b00      	cmp	r3, #0
  400c9e:	d103      	bne.n	400ca8 <xQueueGenericReceive+0x20>
  400ca0:	4b5f      	ldr	r3, [pc, #380]	; (400e20 <xQueueGenericReceive+0x198>)
  400ca2:	4798      	blx	r3
  400ca4:	bf00      	nop
  400ca6:	e7fd      	b.n	400ca4 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400ca8:	68bb      	ldr	r3, [r7, #8]
  400caa:	2b00      	cmp	r3, #0
  400cac:	d103      	bne.n	400cb6 <xQueueGenericReceive+0x2e>
  400cae:	68fb      	ldr	r3, [r7, #12]
  400cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400cb2:	2b00      	cmp	r3, #0
  400cb4:	d101      	bne.n	400cba <xQueueGenericReceive+0x32>
  400cb6:	2301      	movs	r3, #1
  400cb8:	e000      	b.n	400cbc <xQueueGenericReceive+0x34>
  400cba:	2300      	movs	r3, #0
  400cbc:	2b00      	cmp	r3, #0
  400cbe:	d103      	bne.n	400cc8 <xQueueGenericReceive+0x40>
  400cc0:	4b57      	ldr	r3, [pc, #348]	; (400e20 <xQueueGenericReceive+0x198>)
  400cc2:	4798      	blx	r3
  400cc4:	bf00      	nop
  400cc6:	e7fd      	b.n	400cc4 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400cc8:	4b56      	ldr	r3, [pc, #344]	; (400e24 <xQueueGenericReceive+0x19c>)
  400cca:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  400ccc:	68fb      	ldr	r3, [r7, #12]
  400cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400cd0:	2b00      	cmp	r3, #0
  400cd2:	d03b      	beq.n	400d4c <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  400cd4:	68fb      	ldr	r3, [r7, #12]
  400cd6:	68db      	ldr	r3, [r3, #12]
  400cd8:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400cda:	68b9      	ldr	r1, [r7, #8]
  400cdc:	68f8      	ldr	r0, [r7, #12]
  400cde:	4b52      	ldr	r3, [pc, #328]	; (400e28 <xQueueGenericReceive+0x1a0>)
  400ce0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  400ce2:	683b      	ldr	r3, [r7, #0]
  400ce4:	2b00      	cmp	r3, #0
  400ce6:	d11c      	bne.n	400d22 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  400ce8:	68fb      	ldr	r3, [r7, #12]
  400cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400cec:	1e5a      	subs	r2, r3, #1
  400cee:	68fb      	ldr	r3, [r7, #12]
  400cf0:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400cf2:	68fb      	ldr	r3, [r7, #12]
  400cf4:	681b      	ldr	r3, [r3, #0]
  400cf6:	2b00      	cmp	r3, #0
  400cf8:	d104      	bne.n	400d04 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  400cfa:	4b4c      	ldr	r3, [pc, #304]	; (400e2c <xQueueGenericReceive+0x1a4>)
  400cfc:	4798      	blx	r3
  400cfe:	4602      	mov	r2, r0
  400d00:	68fb      	ldr	r3, [r7, #12]
  400d02:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d04:	68fb      	ldr	r3, [r7, #12]
  400d06:	691b      	ldr	r3, [r3, #16]
  400d08:	2b00      	cmp	r3, #0
  400d0a:	d01b      	beq.n	400d44 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400d0c:	68fb      	ldr	r3, [r7, #12]
  400d0e:	3310      	adds	r3, #16
  400d10:	4618      	mov	r0, r3
  400d12:	4b47      	ldr	r3, [pc, #284]	; (400e30 <xQueueGenericReceive+0x1a8>)
  400d14:	4798      	blx	r3
  400d16:	4603      	mov	r3, r0
  400d18:	2b01      	cmp	r3, #1
  400d1a:	d113      	bne.n	400d44 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  400d1c:	4b45      	ldr	r3, [pc, #276]	; (400e34 <xQueueGenericReceive+0x1ac>)
  400d1e:	4798      	blx	r3
  400d20:	e010      	b.n	400d44 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  400d22:	68fb      	ldr	r3, [r7, #12]
  400d24:	69ba      	ldr	r2, [r7, #24]
  400d26:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400d28:	68fb      	ldr	r3, [r7, #12]
  400d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400d2c:	2b00      	cmp	r3, #0
  400d2e:	d009      	beq.n	400d44 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400d30:	68fb      	ldr	r3, [r7, #12]
  400d32:	3324      	adds	r3, #36	; 0x24
  400d34:	4618      	mov	r0, r3
  400d36:	4b3e      	ldr	r3, [pc, #248]	; (400e30 <xQueueGenericReceive+0x1a8>)
  400d38:	4798      	blx	r3
  400d3a:	4603      	mov	r3, r0
  400d3c:	2b00      	cmp	r3, #0
  400d3e:	d001      	beq.n	400d44 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  400d40:	4b3c      	ldr	r3, [pc, #240]	; (400e34 <xQueueGenericReceive+0x1ac>)
  400d42:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  400d44:	4b3c      	ldr	r3, [pc, #240]	; (400e38 <xQueueGenericReceive+0x1b0>)
  400d46:	4798      	blx	r3
				return pdPASS;
  400d48:	2301      	movs	r3, #1
  400d4a:	e064      	b.n	400e16 <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400d4c:	687b      	ldr	r3, [r7, #4]
  400d4e:	2b00      	cmp	r3, #0
  400d50:	d103      	bne.n	400d5a <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400d52:	4b39      	ldr	r3, [pc, #228]	; (400e38 <xQueueGenericReceive+0x1b0>)
  400d54:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  400d56:	2300      	movs	r3, #0
  400d58:	e05d      	b.n	400e16 <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  400d5a:	69fb      	ldr	r3, [r7, #28]
  400d5c:	2b00      	cmp	r3, #0
  400d5e:	d106      	bne.n	400d6e <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400d60:	f107 0310 	add.w	r3, r7, #16
  400d64:	4618      	mov	r0, r3
  400d66:	4b35      	ldr	r3, [pc, #212]	; (400e3c <xQueueGenericReceive+0x1b4>)
  400d68:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400d6a:	2301      	movs	r3, #1
  400d6c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400d6e:	4b32      	ldr	r3, [pc, #200]	; (400e38 <xQueueGenericReceive+0x1b0>)
  400d70:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400d72:	4b33      	ldr	r3, [pc, #204]	; (400e40 <xQueueGenericReceive+0x1b8>)
  400d74:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d76:	4b2b      	ldr	r3, [pc, #172]	; (400e24 <xQueueGenericReceive+0x19c>)
  400d78:	4798      	blx	r3
  400d7a:	68fb      	ldr	r3, [r7, #12]
  400d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d82:	d102      	bne.n	400d8a <xQueueGenericReceive+0x102>
  400d84:	68fb      	ldr	r3, [r7, #12]
  400d86:	2200      	movs	r2, #0
  400d88:	645a      	str	r2, [r3, #68]	; 0x44
  400d8a:	68fb      	ldr	r3, [r7, #12]
  400d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d92:	d102      	bne.n	400d9a <xQueueGenericReceive+0x112>
  400d94:	68fb      	ldr	r3, [r7, #12]
  400d96:	2200      	movs	r2, #0
  400d98:	649a      	str	r2, [r3, #72]	; 0x48
  400d9a:	4b27      	ldr	r3, [pc, #156]	; (400e38 <xQueueGenericReceive+0x1b0>)
  400d9c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400d9e:	1d3a      	adds	r2, r7, #4
  400da0:	f107 0310 	add.w	r3, r7, #16
  400da4:	4611      	mov	r1, r2
  400da6:	4618      	mov	r0, r3
  400da8:	4b26      	ldr	r3, [pc, #152]	; (400e44 <xQueueGenericReceive+0x1bc>)
  400daa:	4798      	blx	r3
  400dac:	4603      	mov	r3, r0
  400dae:	2b00      	cmp	r3, #0
  400db0:	d12b      	bne.n	400e0a <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400db2:	68f8      	ldr	r0, [r7, #12]
  400db4:	4b24      	ldr	r3, [pc, #144]	; (400e48 <xQueueGenericReceive+0x1c0>)
  400db6:	4798      	blx	r3
  400db8:	4603      	mov	r3, r0
  400dba:	2b00      	cmp	r3, #0
  400dbc:	d01f      	beq.n	400dfe <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400dbe:	68fb      	ldr	r3, [r7, #12]
  400dc0:	681b      	ldr	r3, [r3, #0]
  400dc2:	2b00      	cmp	r3, #0
  400dc4:	d108      	bne.n	400dd8 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  400dc6:	4b17      	ldr	r3, [pc, #92]	; (400e24 <xQueueGenericReceive+0x19c>)
  400dc8:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400dca:	68fb      	ldr	r3, [r7, #12]
  400dcc:	685b      	ldr	r3, [r3, #4]
  400dce:	4618      	mov	r0, r3
  400dd0:	4b1e      	ldr	r3, [pc, #120]	; (400e4c <xQueueGenericReceive+0x1c4>)
  400dd2:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  400dd4:	4b18      	ldr	r3, [pc, #96]	; (400e38 <xQueueGenericReceive+0x1b0>)
  400dd6:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400dd8:	68fb      	ldr	r3, [r7, #12]
  400dda:	3324      	adds	r3, #36	; 0x24
  400ddc:	687a      	ldr	r2, [r7, #4]
  400dde:	4611      	mov	r1, r2
  400de0:	4618      	mov	r0, r3
  400de2:	4b1b      	ldr	r3, [pc, #108]	; (400e50 <xQueueGenericReceive+0x1c8>)
  400de4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400de6:	68f8      	ldr	r0, [r7, #12]
  400de8:	4b1a      	ldr	r3, [pc, #104]	; (400e54 <xQueueGenericReceive+0x1cc>)
  400dea:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400dec:	4b1a      	ldr	r3, [pc, #104]	; (400e58 <xQueueGenericReceive+0x1d0>)
  400dee:	4798      	blx	r3
  400df0:	4603      	mov	r3, r0
  400df2:	2b00      	cmp	r3, #0
  400df4:	f47f af68 	bne.w	400cc8 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  400df8:	4b0e      	ldr	r3, [pc, #56]	; (400e34 <xQueueGenericReceive+0x1ac>)
  400dfa:	4798      	blx	r3
  400dfc:	e764      	b.n	400cc8 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400dfe:	68f8      	ldr	r0, [r7, #12]
  400e00:	4b14      	ldr	r3, [pc, #80]	; (400e54 <xQueueGenericReceive+0x1cc>)
  400e02:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400e04:	4b14      	ldr	r3, [pc, #80]	; (400e58 <xQueueGenericReceive+0x1d0>)
  400e06:	4798      	blx	r3
  400e08:	e75e      	b.n	400cc8 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  400e0a:	68f8      	ldr	r0, [r7, #12]
  400e0c:	4b11      	ldr	r3, [pc, #68]	; (400e54 <xQueueGenericReceive+0x1cc>)
  400e0e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400e10:	4b11      	ldr	r3, [pc, #68]	; (400e58 <xQueueGenericReceive+0x1d0>)
  400e12:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  400e14:	2300      	movs	r3, #0
		}
	}
}
  400e16:	4618      	mov	r0, r3
  400e18:	3720      	adds	r7, #32
  400e1a:	46bd      	mov	sp, r7
  400e1c:	bd80      	pop	{r7, pc}
  400e1e:	bf00      	nop
  400e20:	00400589 	.word	0x00400589
  400e24:	00400541 	.word	0x00400541
  400e28:	00400f1d 	.word	0x00400f1d
  400e2c:	00401c2d 	.word	0x00401c2d
  400e30:	004017b5 	.word	0x004017b5
  400e34:	00400525 	.word	0x00400525
  400e38:	00400561 	.word	0x00400561
  400e3c:	00401871 	.word	0x00401871
  400e40:	00401375 	.word	0x00401375
  400e44:	004018ad 	.word	0x004018ad
  400e48:	00401015 	.word	0x00401015
  400e4c:	00401c89 	.word	0x00401c89
  400e50:	004016cd 	.word	0x004016cd
  400e54:	00400f6d 	.word	0x00400f6d
  400e58:	00401391 	.word	0x00401391

00400e5c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  400e5c:	b580      	push	{r7, lr}
  400e5e:	b084      	sub	sp, #16
  400e60:	af00      	add	r7, sp, #0
  400e62:	60f8      	str	r0, [r7, #12]
  400e64:	60b9      	str	r1, [r7, #8]
  400e66:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  400e68:	68fb      	ldr	r3, [r7, #12]
  400e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e6c:	2b00      	cmp	r3, #0
  400e6e:	d10c      	bne.n	400e8a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400e70:	68fb      	ldr	r3, [r7, #12]
  400e72:	681b      	ldr	r3, [r3, #0]
  400e74:	2b00      	cmp	r3, #0
  400e76:	d143      	bne.n	400f00 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400e78:	68fb      	ldr	r3, [r7, #12]
  400e7a:	685b      	ldr	r3, [r3, #4]
  400e7c:	4618      	mov	r0, r3
  400e7e:	4b25      	ldr	r3, [pc, #148]	; (400f14 <prvCopyDataToQueue+0xb8>)
  400e80:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400e82:	68fb      	ldr	r3, [r7, #12]
  400e84:	2200      	movs	r2, #0
  400e86:	605a      	str	r2, [r3, #4]
  400e88:	e03a      	b.n	400f00 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  400e8a:	687b      	ldr	r3, [r7, #4]
  400e8c:	2b00      	cmp	r3, #0
  400e8e:	d119      	bne.n	400ec4 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400e90:	68fb      	ldr	r3, [r7, #12]
  400e92:	6898      	ldr	r0, [r3, #8]
  400e94:	68fb      	ldr	r3, [r7, #12]
  400e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e98:	461a      	mov	r2, r3
  400e9a:	68b9      	ldr	r1, [r7, #8]
  400e9c:	4b1e      	ldr	r3, [pc, #120]	; (400f18 <prvCopyDataToQueue+0xbc>)
  400e9e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400ea0:	68fb      	ldr	r3, [r7, #12]
  400ea2:	689a      	ldr	r2, [r3, #8]
  400ea4:	68fb      	ldr	r3, [r7, #12]
  400ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ea8:	441a      	add	r2, r3
  400eaa:	68fb      	ldr	r3, [r7, #12]
  400eac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  400eae:	68fb      	ldr	r3, [r7, #12]
  400eb0:	689a      	ldr	r2, [r3, #8]
  400eb2:	68fb      	ldr	r3, [r7, #12]
  400eb4:	685b      	ldr	r3, [r3, #4]
  400eb6:	429a      	cmp	r2, r3
  400eb8:	d322      	bcc.n	400f00 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400eba:	68fb      	ldr	r3, [r7, #12]
  400ebc:	681a      	ldr	r2, [r3, #0]
  400ebe:	68fb      	ldr	r3, [r7, #12]
  400ec0:	609a      	str	r2, [r3, #8]
  400ec2:	e01d      	b.n	400f00 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400ec4:	68fb      	ldr	r3, [r7, #12]
  400ec6:	68d8      	ldr	r0, [r3, #12]
  400ec8:	68fb      	ldr	r3, [r7, #12]
  400eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ecc:	461a      	mov	r2, r3
  400ece:	68b9      	ldr	r1, [r7, #8]
  400ed0:	4b11      	ldr	r3, [pc, #68]	; (400f18 <prvCopyDataToQueue+0xbc>)
  400ed2:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  400ed4:	68fb      	ldr	r3, [r7, #12]
  400ed6:	68da      	ldr	r2, [r3, #12]
  400ed8:	68fb      	ldr	r3, [r7, #12]
  400eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400edc:	425b      	negs	r3, r3
  400ede:	441a      	add	r2, r3
  400ee0:	68fb      	ldr	r3, [r7, #12]
  400ee2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  400ee4:	68fb      	ldr	r3, [r7, #12]
  400ee6:	68da      	ldr	r2, [r3, #12]
  400ee8:	68fb      	ldr	r3, [r7, #12]
  400eea:	681b      	ldr	r3, [r3, #0]
  400eec:	429a      	cmp	r2, r3
  400eee:	d207      	bcs.n	400f00 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400ef0:	68fb      	ldr	r3, [r7, #12]
  400ef2:	685a      	ldr	r2, [r3, #4]
  400ef4:	68fb      	ldr	r3, [r7, #12]
  400ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ef8:	425b      	negs	r3, r3
  400efa:	441a      	add	r2, r3
  400efc:	68fb      	ldr	r3, [r7, #12]
  400efe:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400f00:	68fb      	ldr	r3, [r7, #12]
  400f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400f04:	1c5a      	adds	r2, r3, #1
  400f06:	68fb      	ldr	r3, [r7, #12]
  400f08:	639a      	str	r2, [r3, #56]	; 0x38
}
  400f0a:	bf00      	nop
  400f0c:	3710      	adds	r7, #16
  400f0e:	46bd      	mov	sp, r7
  400f10:	bd80      	pop	{r7, pc}
  400f12:	bf00      	nop
  400f14:	00401d3d 	.word	0x00401d3d
  400f18:	0040a191 	.word	0x0040a191

00400f1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  400f1c:	b580      	push	{r7, lr}
  400f1e:	b082      	sub	sp, #8
  400f20:	af00      	add	r7, sp, #0
  400f22:	6078      	str	r0, [r7, #4]
  400f24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  400f26:	687b      	ldr	r3, [r7, #4]
  400f28:	681b      	ldr	r3, [r3, #0]
  400f2a:	2b00      	cmp	r3, #0
  400f2c:	d018      	beq.n	400f60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  400f2e:	687b      	ldr	r3, [r7, #4]
  400f30:	68da      	ldr	r2, [r3, #12]
  400f32:	687b      	ldr	r3, [r7, #4]
  400f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f36:	441a      	add	r2, r3
  400f38:	687b      	ldr	r3, [r7, #4]
  400f3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  400f3c:	687b      	ldr	r3, [r7, #4]
  400f3e:	68da      	ldr	r2, [r3, #12]
  400f40:	687b      	ldr	r3, [r7, #4]
  400f42:	685b      	ldr	r3, [r3, #4]
  400f44:	429a      	cmp	r2, r3
  400f46:	d303      	bcc.n	400f50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  400f48:	687b      	ldr	r3, [r7, #4]
  400f4a:	681a      	ldr	r2, [r3, #0]
  400f4c:	687b      	ldr	r3, [r7, #4]
  400f4e:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  400f50:	687b      	ldr	r3, [r7, #4]
  400f52:	68d9      	ldr	r1, [r3, #12]
  400f54:	687b      	ldr	r3, [r7, #4]
  400f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f58:	461a      	mov	r2, r3
  400f5a:	6838      	ldr	r0, [r7, #0]
  400f5c:	4b02      	ldr	r3, [pc, #8]	; (400f68 <prvCopyDataFromQueue+0x4c>)
  400f5e:	4798      	blx	r3
	}
}
  400f60:	bf00      	nop
  400f62:	3708      	adds	r7, #8
  400f64:	46bd      	mov	sp, r7
  400f66:	bd80      	pop	{r7, pc}
  400f68:	0040a191 	.word	0x0040a191

00400f6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  400f6c:	b580      	push	{r7, lr}
  400f6e:	b082      	sub	sp, #8
  400f70:	af00      	add	r7, sp, #0
  400f72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400f74:	4b23      	ldr	r3, [pc, #140]	; (401004 <prvUnlockQueue+0x98>)
  400f76:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400f78:	e012      	b.n	400fa0 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f7a:	687b      	ldr	r3, [r7, #4]
  400f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400f7e:	2b00      	cmp	r3, #0
  400f80:	d013      	beq.n	400faa <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400f82:	687b      	ldr	r3, [r7, #4]
  400f84:	3324      	adds	r3, #36	; 0x24
  400f86:	4618      	mov	r0, r3
  400f88:	4b1f      	ldr	r3, [pc, #124]	; (401008 <prvUnlockQueue+0x9c>)
  400f8a:	4798      	blx	r3
  400f8c:	4603      	mov	r3, r0
  400f8e:	2b00      	cmp	r3, #0
  400f90:	d001      	beq.n	400f96 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  400f92:	4b1e      	ldr	r3, [pc, #120]	; (40100c <prvUnlockQueue+0xa0>)
  400f94:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  400f96:	687b      	ldr	r3, [r7, #4]
  400f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400f9a:	1e5a      	subs	r2, r3, #1
  400f9c:	687b      	ldr	r3, [r7, #4]
  400f9e:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400fa0:	687b      	ldr	r3, [r7, #4]
  400fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400fa4:	2b00      	cmp	r3, #0
  400fa6:	dce8      	bgt.n	400f7a <prvUnlockQueue+0xe>
  400fa8:	e000      	b.n	400fac <prvUnlockQueue+0x40>
			}
			else
			{
				break;
  400faa:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400fac:	687b      	ldr	r3, [r7, #4]
  400fae:	f04f 32ff 	mov.w	r2, #4294967295
  400fb2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400fb4:	4b16      	ldr	r3, [pc, #88]	; (401010 <prvUnlockQueue+0xa4>)
  400fb6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400fb8:	4b12      	ldr	r3, [pc, #72]	; (401004 <prvUnlockQueue+0x98>)
  400fba:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400fbc:	e012      	b.n	400fe4 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400fbe:	687b      	ldr	r3, [r7, #4]
  400fc0:	691b      	ldr	r3, [r3, #16]
  400fc2:	2b00      	cmp	r3, #0
  400fc4:	d013      	beq.n	400fee <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400fc6:	687b      	ldr	r3, [r7, #4]
  400fc8:	3310      	adds	r3, #16
  400fca:	4618      	mov	r0, r3
  400fcc:	4b0e      	ldr	r3, [pc, #56]	; (401008 <prvUnlockQueue+0x9c>)
  400fce:	4798      	blx	r3
  400fd0:	4603      	mov	r3, r0
  400fd2:	2b00      	cmp	r3, #0
  400fd4:	d001      	beq.n	400fda <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  400fd6:	4b0d      	ldr	r3, [pc, #52]	; (40100c <prvUnlockQueue+0xa0>)
  400fd8:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  400fda:	687b      	ldr	r3, [r7, #4]
  400fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400fde:	1e5a      	subs	r2, r3, #1
  400fe0:	687b      	ldr	r3, [r7, #4]
  400fe2:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400fe4:	687b      	ldr	r3, [r7, #4]
  400fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400fe8:	2b00      	cmp	r3, #0
  400fea:	dce8      	bgt.n	400fbe <prvUnlockQueue+0x52>
  400fec:	e000      	b.n	400ff0 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
  400fee:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  400ff0:	687b      	ldr	r3, [r7, #4]
  400ff2:	f04f 32ff 	mov.w	r2, #4294967295
  400ff6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  400ff8:	4b05      	ldr	r3, [pc, #20]	; (401010 <prvUnlockQueue+0xa4>)
  400ffa:	4798      	blx	r3
}
  400ffc:	bf00      	nop
  400ffe:	3708      	adds	r7, #8
  401000:	46bd      	mov	sp, r7
  401002:	bd80      	pop	{r7, pc}
  401004:	00400541 	.word	0x00400541
  401008:	004017b5 	.word	0x004017b5
  40100c:	00401961 	.word	0x00401961
  401010:	00400561 	.word	0x00400561

00401014 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  401014:	b580      	push	{r7, lr}
  401016:	b084      	sub	sp, #16
  401018:	af00      	add	r7, sp, #0
  40101a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  40101c:	4b08      	ldr	r3, [pc, #32]	; (401040 <prvIsQueueEmpty+0x2c>)
  40101e:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  401020:	687b      	ldr	r3, [r7, #4]
  401022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401024:	2b00      	cmp	r3, #0
  401026:	bf0c      	ite	eq
  401028:	2301      	moveq	r3, #1
  40102a:	2300      	movne	r3, #0
  40102c:	b2db      	uxtb	r3, r3
  40102e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  401030:	4b04      	ldr	r3, [pc, #16]	; (401044 <prvIsQueueEmpty+0x30>)
  401032:	4798      	blx	r3

	return xReturn;
  401034:	68fb      	ldr	r3, [r7, #12]
}
  401036:	4618      	mov	r0, r3
  401038:	3710      	adds	r7, #16
  40103a:	46bd      	mov	sp, r7
  40103c:	bd80      	pop	{r7, pc}
  40103e:	bf00      	nop
  401040:	00400541 	.word	0x00400541
  401044:	00400561 	.word	0x00400561

00401048 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  401048:	b580      	push	{r7, lr}
  40104a:	b084      	sub	sp, #16
  40104c:	af00      	add	r7, sp, #0
  40104e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401050:	4b09      	ldr	r3, [pc, #36]	; (401078 <prvIsQueueFull+0x30>)
  401052:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  401054:	687b      	ldr	r3, [r7, #4]
  401056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401058:	687b      	ldr	r3, [r7, #4]
  40105a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40105c:	429a      	cmp	r2, r3
  40105e:	bf0c      	ite	eq
  401060:	2301      	moveq	r3, #1
  401062:	2300      	movne	r3, #0
  401064:	b2db      	uxtb	r3, r3
  401066:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  401068:	4b04      	ldr	r3, [pc, #16]	; (40107c <prvIsQueueFull+0x34>)
  40106a:	4798      	blx	r3

	return xReturn;
  40106c:	68fb      	ldr	r3, [r7, #12]
}
  40106e:	4618      	mov	r0, r3
  401070:	3710      	adds	r7, #16
  401072:	46bd      	mov	sp, r7
  401074:	bd80      	pop	{r7, pc}
  401076:	bf00      	nop
  401078:	00400541 	.word	0x00400541
  40107c:	00400561 	.word	0x00400561

00401080 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  401080:	b580      	push	{r7, lr}
  401082:	b082      	sub	sp, #8
  401084:	af00      	add	r7, sp, #0
  401086:	6078      	str	r0, [r7, #4]
  401088:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  40108a:	4b12      	ldr	r3, [pc, #72]	; (4010d4 <vQueueWaitForMessageRestricted+0x54>)
  40108c:	4798      	blx	r3
  40108e:	687b      	ldr	r3, [r7, #4]
  401090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  401092:	f1b3 3fff 	cmp.w	r3, #4294967295
  401096:	d102      	bne.n	40109e <vQueueWaitForMessageRestricted+0x1e>
  401098:	687b      	ldr	r3, [r7, #4]
  40109a:	2200      	movs	r2, #0
  40109c:	645a      	str	r2, [r3, #68]	; 0x44
  40109e:	687b      	ldr	r3, [r7, #4]
  4010a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4010a2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010a6:	d102      	bne.n	4010ae <vQueueWaitForMessageRestricted+0x2e>
  4010a8:	687b      	ldr	r3, [r7, #4]
  4010aa:	2200      	movs	r2, #0
  4010ac:	649a      	str	r2, [r3, #72]	; 0x48
  4010ae:	4b0a      	ldr	r3, [pc, #40]	; (4010d8 <vQueueWaitForMessageRestricted+0x58>)
  4010b0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  4010b2:	687b      	ldr	r3, [r7, #4]
  4010b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4010b6:	2b00      	cmp	r3, #0
  4010b8:	d105      	bne.n	4010c6 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4010ba:	687b      	ldr	r3, [r7, #4]
  4010bc:	3324      	adds	r3, #36	; 0x24
  4010be:	6839      	ldr	r1, [r7, #0]
  4010c0:	4618      	mov	r0, r3
  4010c2:	4b06      	ldr	r3, [pc, #24]	; (4010dc <vQueueWaitForMessageRestricted+0x5c>)
  4010c4:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  4010c6:	6878      	ldr	r0, [r7, #4]
  4010c8:	4b05      	ldr	r3, [pc, #20]	; (4010e0 <vQueueWaitForMessageRestricted+0x60>)
  4010ca:	4798      	blx	r3
	}
  4010cc:	bf00      	nop
  4010ce:	3708      	adds	r7, #8
  4010d0:	46bd      	mov	sp, r7
  4010d2:	bd80      	pop	{r7, pc}
  4010d4:	00400541 	.word	0x00400541
  4010d8:	00400561 	.word	0x00400561
  4010dc:	00401751 	.word	0x00401751
  4010e0:	00400f6d 	.word	0x00400f6d

004010e4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  4010e4:	b590      	push	{r4, r7, lr}
  4010e6:	b08b      	sub	sp, #44	; 0x2c
  4010e8:	af02      	add	r7, sp, #8
  4010ea:	60f8      	str	r0, [r7, #12]
  4010ec:	60b9      	str	r1, [r7, #8]
  4010ee:	603b      	str	r3, [r7, #0]
  4010f0:	4613      	mov	r3, r2
  4010f2:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  4010f4:	68fb      	ldr	r3, [r7, #12]
  4010f6:	2b00      	cmp	r3, #0
  4010f8:	d103      	bne.n	401102 <xTaskGenericCreate+0x1e>
  4010fa:	4b54      	ldr	r3, [pc, #336]	; (40124c <xTaskGenericCreate+0x168>)
  4010fc:	4798      	blx	r3
  4010fe:	bf00      	nop
  401100:	e7fd      	b.n	4010fe <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  401102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401104:	2b04      	cmp	r3, #4
  401106:	d903      	bls.n	401110 <xTaskGenericCreate+0x2c>
  401108:	4b50      	ldr	r3, [pc, #320]	; (40124c <xTaskGenericCreate+0x168>)
  40110a:	4798      	blx	r3
  40110c:	bf00      	nop
  40110e:	e7fd      	b.n	40110c <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  401110:	88fb      	ldrh	r3, [r7, #6]
  401112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401114:	4618      	mov	r0, r3
  401116:	4b4e      	ldr	r3, [pc, #312]	; (401250 <xTaskGenericCreate+0x16c>)
  401118:	4798      	blx	r3
  40111a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  40111c:	69bb      	ldr	r3, [r7, #24]
  40111e:	2b00      	cmp	r3, #0
  401120:	d07d      	beq.n	40121e <xTaskGenericCreate+0x13a>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  401122:	69bb      	ldr	r3, [r7, #24]
  401124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401126:	88fb      	ldrh	r3, [r7, #6]
  401128:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  40112c:	3b01      	subs	r3, #1
  40112e:	009b      	lsls	r3, r3, #2
  401130:	4413      	add	r3, r2
  401132:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  401134:	697b      	ldr	r3, [r7, #20]
  401136:	f023 0307 	bic.w	r3, r3, #7
  40113a:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  40113c:	697b      	ldr	r3, [r7, #20]
  40113e:	f003 0307 	and.w	r3, r3, #7
  401142:	2b00      	cmp	r3, #0
  401144:	d003      	beq.n	40114e <xTaskGenericCreate+0x6a>
  401146:	4b41      	ldr	r3, [pc, #260]	; (40124c <xTaskGenericCreate+0x168>)
  401148:	4798      	blx	r3
  40114a:	bf00      	nop
  40114c:	e7fd      	b.n	40114a <xTaskGenericCreate+0x66>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  40114e:	88fb      	ldrh	r3, [r7, #6]
  401150:	9300      	str	r3, [sp, #0]
  401152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401156:	68b9      	ldr	r1, [r7, #8]
  401158:	69b8      	ldr	r0, [r7, #24]
  40115a:	4c3e      	ldr	r4, [pc, #248]	; (401254 <xTaskGenericCreate+0x170>)
  40115c:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40115e:	683a      	ldr	r2, [r7, #0]
  401160:	68f9      	ldr	r1, [r7, #12]
  401162:	6978      	ldr	r0, [r7, #20]
  401164:	4b3c      	ldr	r3, [pc, #240]	; (401258 <xTaskGenericCreate+0x174>)
  401166:	4798      	blx	r3
  401168:	4602      	mov	r2, r0
  40116a:	69bb      	ldr	r3, [r7, #24]
  40116c:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  40116e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  401170:	2b00      	cmp	r3, #0
  401172:	d002      	beq.n	40117a <xTaskGenericCreate+0x96>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  401174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  401176:	69ba      	ldr	r2, [r7, #24]
  401178:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  40117a:	4b38      	ldr	r3, [pc, #224]	; (40125c <xTaskGenericCreate+0x178>)
  40117c:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  40117e:	4b38      	ldr	r3, [pc, #224]	; (401260 <xTaskGenericCreate+0x17c>)
  401180:	681b      	ldr	r3, [r3, #0]
  401182:	3301      	adds	r3, #1
  401184:	4a36      	ldr	r2, [pc, #216]	; (401260 <xTaskGenericCreate+0x17c>)
  401186:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401188:	4b36      	ldr	r3, [pc, #216]	; (401264 <xTaskGenericCreate+0x180>)
  40118a:	681b      	ldr	r3, [r3, #0]
  40118c:	2b00      	cmp	r3, #0
  40118e:	d109      	bne.n	4011a4 <xTaskGenericCreate+0xc0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  401190:	4a34      	ldr	r2, [pc, #208]	; (401264 <xTaskGenericCreate+0x180>)
  401192:	69bb      	ldr	r3, [r7, #24]
  401194:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  401196:	4b32      	ldr	r3, [pc, #200]	; (401260 <xTaskGenericCreate+0x17c>)
  401198:	681b      	ldr	r3, [r3, #0]
  40119a:	2b01      	cmp	r3, #1
  40119c:	d10f      	bne.n	4011be <xTaskGenericCreate+0xda>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  40119e:	4b32      	ldr	r3, [pc, #200]	; (401268 <xTaskGenericCreate+0x184>)
  4011a0:	4798      	blx	r3
  4011a2:	e00c      	b.n	4011be <xTaskGenericCreate+0xda>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4011a4:	4b31      	ldr	r3, [pc, #196]	; (40126c <xTaskGenericCreate+0x188>)
  4011a6:	681b      	ldr	r3, [r3, #0]
  4011a8:	2b00      	cmp	r3, #0
  4011aa:	d108      	bne.n	4011be <xTaskGenericCreate+0xda>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4011ac:	4b2d      	ldr	r3, [pc, #180]	; (401264 <xTaskGenericCreate+0x180>)
  4011ae:	681b      	ldr	r3, [r3, #0]
  4011b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4011b4:	429a      	cmp	r2, r3
  4011b6:	d802      	bhi.n	4011be <xTaskGenericCreate+0xda>
					{
						pxCurrentTCB = pxNewTCB;
  4011b8:	4a2a      	ldr	r2, [pc, #168]	; (401264 <xTaskGenericCreate+0x180>)
  4011ba:	69bb      	ldr	r3, [r7, #24]
  4011bc:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  4011be:	69bb      	ldr	r3, [r7, #24]
  4011c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011c2:	4b2b      	ldr	r3, [pc, #172]	; (401270 <xTaskGenericCreate+0x18c>)
  4011c4:	681b      	ldr	r3, [r3, #0]
  4011c6:	429a      	cmp	r2, r3
  4011c8:	d903      	bls.n	4011d2 <xTaskGenericCreate+0xee>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  4011ca:	69bb      	ldr	r3, [r7, #24]
  4011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4011ce:	4a28      	ldr	r2, [pc, #160]	; (401270 <xTaskGenericCreate+0x18c>)
  4011d0:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4011d2:	4b28      	ldr	r3, [pc, #160]	; (401274 <xTaskGenericCreate+0x190>)
  4011d4:	681a      	ldr	r2, [r3, #0]
  4011d6:	69bb      	ldr	r3, [r7, #24]
  4011d8:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  4011da:	4b26      	ldr	r3, [pc, #152]	; (401274 <xTaskGenericCreate+0x190>)
  4011dc:	681b      	ldr	r3, [r3, #0]
  4011de:	3301      	adds	r3, #1
  4011e0:	4a24      	ldr	r2, [pc, #144]	; (401274 <xTaskGenericCreate+0x190>)
  4011e2:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  4011e4:	69bb      	ldr	r3, [r7, #24]
  4011e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011e8:	4b23      	ldr	r3, [pc, #140]	; (401278 <xTaskGenericCreate+0x194>)
  4011ea:	681b      	ldr	r3, [r3, #0]
  4011ec:	429a      	cmp	r2, r3
  4011ee:	d903      	bls.n	4011f8 <xTaskGenericCreate+0x114>
  4011f0:	69bb      	ldr	r3, [r7, #24]
  4011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4011f4:	4a20      	ldr	r2, [pc, #128]	; (401278 <xTaskGenericCreate+0x194>)
  4011f6:	6013      	str	r3, [r2, #0]
  4011f8:	69bb      	ldr	r3, [r7, #24]
  4011fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011fc:	4613      	mov	r3, r2
  4011fe:	009b      	lsls	r3, r3, #2
  401200:	4413      	add	r3, r2
  401202:	009b      	lsls	r3, r3, #2
  401204:	4a1d      	ldr	r2, [pc, #116]	; (40127c <xTaskGenericCreate+0x198>)
  401206:	441a      	add	r2, r3
  401208:	69bb      	ldr	r3, [r7, #24]
  40120a:	3304      	adds	r3, #4
  40120c:	4619      	mov	r1, r3
  40120e:	4610      	mov	r0, r2
  401210:	4b1b      	ldr	r3, [pc, #108]	; (401280 <xTaskGenericCreate+0x19c>)
  401212:	4798      	blx	r3

			xReturn = pdPASS;
  401214:	2301      	movs	r3, #1
  401216:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401218:	4b1a      	ldr	r3, [pc, #104]	; (401284 <xTaskGenericCreate+0x1a0>)
  40121a:	4798      	blx	r3
  40121c:	e002      	b.n	401224 <xTaskGenericCreate+0x140>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40121e:	f04f 33ff 	mov.w	r3, #4294967295
  401222:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  401224:	69fb      	ldr	r3, [r7, #28]
  401226:	2b01      	cmp	r3, #1
  401228:	d10b      	bne.n	401242 <xTaskGenericCreate+0x15e>
	{
		if( xSchedulerRunning != pdFALSE )
  40122a:	4b10      	ldr	r3, [pc, #64]	; (40126c <xTaskGenericCreate+0x188>)
  40122c:	681b      	ldr	r3, [r3, #0]
  40122e:	2b00      	cmp	r3, #0
  401230:	d007      	beq.n	401242 <xTaskGenericCreate+0x15e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401232:	4b0c      	ldr	r3, [pc, #48]	; (401264 <xTaskGenericCreate+0x180>)
  401234:	681b      	ldr	r3, [r3, #0]
  401236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40123a:	429a      	cmp	r2, r3
  40123c:	d201      	bcs.n	401242 <xTaskGenericCreate+0x15e>
			{
				portYIELD_WITHIN_API();
  40123e:	4b12      	ldr	r3, [pc, #72]	; (401288 <xTaskGenericCreate+0x1a4>)
  401240:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  401242:	69fb      	ldr	r3, [r7, #28]
}
  401244:	4618      	mov	r0, r3
  401246:	3724      	adds	r7, #36	; 0x24
  401248:	46bd      	mov	sp, r7
  40124a:	bd90      	pop	{r4, r7, pc}
  40124c:	00400589 	.word	0x00400589
  401250:	00401b99 	.word	0x00401b99
  401254:	004019a1 	.word	0x004019a1
  401258:	00400435 	.word	0x00400435
  40125c:	00400541 	.word	0x00400541
  401260:	2000aad4 	.word	0x2000aad4
  401264:	2000a9fc 	.word	0x2000a9fc
  401268:	00401a15 	.word	0x00401a15
  40126c:	2000aae4 	.word	0x2000aae4
  401270:	2000aadc 	.word	0x2000aadc
  401274:	2000aaf8 	.word	0x2000aaf8
  401278:	2000aae0 	.word	0x2000aae0
  40127c:	2000aa00 	.word	0x2000aa00
  401280:	0040027f 	.word	0x0040027f
  401284:	00400561 	.word	0x00400561
  401288:	00400525 	.word	0x00400525

0040128c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  40128c:	b580      	push	{r7, lr}
  40128e:	b084      	sub	sp, #16
  401290:	af00      	add	r7, sp, #0
  401292:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  401294:	2300      	movs	r3, #0
  401296:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  401298:	687b      	ldr	r3, [r7, #4]
  40129a:	2b00      	cmp	r3, #0
  40129c:	d012      	beq.n	4012c4 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  40129e:	4b0e      	ldr	r3, [pc, #56]	; (4012d8 <vTaskDelay+0x4c>)
  4012a0:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  4012a2:	4b0e      	ldr	r3, [pc, #56]	; (4012dc <vTaskDelay+0x50>)
  4012a4:	681a      	ldr	r2, [r3, #0]
  4012a6:	687b      	ldr	r3, [r7, #4]
  4012a8:	4413      	add	r3, r2
  4012aa:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4012ac:	4b0c      	ldr	r3, [pc, #48]	; (4012e0 <vTaskDelay+0x54>)
  4012ae:	681b      	ldr	r3, [r3, #0]
  4012b0:	3304      	adds	r3, #4
  4012b2:	4618      	mov	r0, r3
  4012b4:	4b0b      	ldr	r3, [pc, #44]	; (4012e4 <vTaskDelay+0x58>)
  4012b6:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4012b8:	68b8      	ldr	r0, [r7, #8]
  4012ba:	4b0b      	ldr	r3, [pc, #44]	; (4012e8 <vTaskDelay+0x5c>)
  4012bc:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  4012be:	4b0b      	ldr	r3, [pc, #44]	; (4012ec <vTaskDelay+0x60>)
  4012c0:	4798      	blx	r3
  4012c2:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  4012c4:	68fb      	ldr	r3, [r7, #12]
  4012c6:	2b00      	cmp	r3, #0
  4012c8:	d101      	bne.n	4012ce <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  4012ca:	4b09      	ldr	r3, [pc, #36]	; (4012f0 <vTaskDelay+0x64>)
  4012cc:	4798      	blx	r3
		}
	}
  4012ce:	bf00      	nop
  4012d0:	3710      	adds	r7, #16
  4012d2:	46bd      	mov	sp, r7
  4012d4:	bd80      	pop	{r7, pc}
  4012d6:	bf00      	nop
  4012d8:	00401375 	.word	0x00401375
  4012dc:	2000aad8 	.word	0x2000aad8
  4012e0:	2000a9fc 	.word	0x2000a9fc
  4012e4:	00400341 	.word	0x00400341
  4012e8:	00401b29 	.word	0x00401b29
  4012ec:	00401391 	.word	0x00401391
  4012f0:	00400525 	.word	0x00400525

004012f4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4012f4:	b590      	push	{r4, r7, lr}
  4012f6:	b087      	sub	sp, #28
  4012f8:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  4012fa:	2300      	movs	r3, #0
  4012fc:	9303      	str	r3, [sp, #12]
  4012fe:	2300      	movs	r3, #0
  401300:	9302      	str	r3, [sp, #8]
  401302:	2300      	movs	r3, #0
  401304:	9301      	str	r3, [sp, #4]
  401306:	2300      	movs	r3, #0
  401308:	9300      	str	r3, [sp, #0]
  40130a:	2300      	movs	r3, #0
  40130c:	2282      	movs	r2, #130	; 0x82
  40130e:	4911      	ldr	r1, [pc, #68]	; (401354 <vTaskStartScheduler+0x60>)
  401310:	4811      	ldr	r0, [pc, #68]	; (401358 <vTaskStartScheduler+0x64>)
  401312:	4c12      	ldr	r4, [pc, #72]	; (40135c <vTaskStartScheduler+0x68>)
  401314:	47a0      	blx	r4
  401316:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401318:	687b      	ldr	r3, [r7, #4]
  40131a:	2b01      	cmp	r3, #1
  40131c:	d102      	bne.n	401324 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  40131e:	4b10      	ldr	r3, [pc, #64]	; (401360 <vTaskStartScheduler+0x6c>)
  401320:	4798      	blx	r3
  401322:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  401324:	687b      	ldr	r3, [r7, #4]
  401326:	2b01      	cmp	r3, #1
  401328:	d109      	bne.n	40133e <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  40132a:	4b0e      	ldr	r3, [pc, #56]	; (401364 <vTaskStartScheduler+0x70>)
  40132c:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  40132e:	4b0e      	ldr	r3, [pc, #56]	; (401368 <vTaskStartScheduler+0x74>)
  401330:	2201      	movs	r2, #1
  401332:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  401334:	4b0d      	ldr	r3, [pc, #52]	; (40136c <vTaskStartScheduler+0x78>)
  401336:	2200      	movs	r2, #0
  401338:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  40133a:	4b0d      	ldr	r3, [pc, #52]	; (401370 <vTaskStartScheduler+0x7c>)
  40133c:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  40133e:	687b      	ldr	r3, [r7, #4]
  401340:	2b00      	cmp	r3, #0
  401342:	d103      	bne.n	40134c <vTaskStartScheduler+0x58>
  401344:	4b07      	ldr	r3, [pc, #28]	; (401364 <vTaskStartScheduler+0x70>)
  401346:	4798      	blx	r3
  401348:	bf00      	nop
  40134a:	e7fd      	b.n	401348 <vTaskStartScheduler+0x54>
}
  40134c:	bf00      	nop
  40134e:	370c      	adds	r7, #12
  401350:	46bd      	mov	sp, r7
  401352:	bd90      	pop	{r4, r7, pc}
  401354:	0040e7d8 	.word	0x0040e7d8
  401358:	00401979 	.word	0x00401979
  40135c:	004010e5 	.word	0x004010e5
  401360:	00401dc1 	.word	0x00401dc1
  401364:	00400589 	.word	0x00400589
  401368:	2000aae4 	.word	0x2000aae4
  40136c:	2000aad8 	.word	0x2000aad8
  401370:	004004cd 	.word	0x004004cd

00401374 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  401374:	b480      	push	{r7}
  401376:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  401378:	4b04      	ldr	r3, [pc, #16]	; (40138c <vTaskSuspendAll+0x18>)
  40137a:	681b      	ldr	r3, [r3, #0]
  40137c:	3301      	adds	r3, #1
  40137e:	4a03      	ldr	r2, [pc, #12]	; (40138c <vTaskSuspendAll+0x18>)
  401380:	6013      	str	r3, [r2, #0]
}
  401382:	bf00      	nop
  401384:	46bd      	mov	sp, r7
  401386:	f85d 7b04 	ldr.w	r7, [sp], #4
  40138a:	4770      	bx	lr
  40138c:	2000aae8 	.word	0x2000aae8

00401390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  401390:	b590      	push	{r4, r7, lr}
  401392:	b083      	sub	sp, #12
  401394:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  401396:	2300      	movs	r3, #0
  401398:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  40139a:	4b36      	ldr	r3, [pc, #216]	; (401474 <xTaskResumeAll+0xe4>)
  40139c:	681b      	ldr	r3, [r3, #0]
  40139e:	2b00      	cmp	r3, #0
  4013a0:	d103      	bne.n	4013aa <xTaskResumeAll+0x1a>
  4013a2:	4b35      	ldr	r3, [pc, #212]	; (401478 <xTaskResumeAll+0xe8>)
  4013a4:	4798      	blx	r3
  4013a6:	bf00      	nop
  4013a8:	e7fd      	b.n	4013a6 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  4013aa:	4b34      	ldr	r3, [pc, #208]	; (40147c <xTaskResumeAll+0xec>)
  4013ac:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  4013ae:	4b31      	ldr	r3, [pc, #196]	; (401474 <xTaskResumeAll+0xe4>)
  4013b0:	681b      	ldr	r3, [r3, #0]
  4013b2:	3b01      	subs	r3, #1
  4013b4:	4a2f      	ldr	r2, [pc, #188]	; (401474 <xTaskResumeAll+0xe4>)
  4013b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4013b8:	4b2e      	ldr	r3, [pc, #184]	; (401474 <xTaskResumeAll+0xe4>)
  4013ba:	681b      	ldr	r3, [r3, #0]
  4013bc:	2b00      	cmp	r3, #0
  4013be:	d152      	bne.n	401466 <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  4013c0:	4b2f      	ldr	r3, [pc, #188]	; (401480 <xTaskResumeAll+0xf0>)
  4013c2:	681b      	ldr	r3, [r3, #0]
  4013c4:	2b00      	cmp	r3, #0
  4013c6:	d04e      	beq.n	401466 <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  4013c8:	2300      	movs	r3, #0
  4013ca:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4013cc:	e027      	b.n	40141e <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  4013ce:	4b2d      	ldr	r3, [pc, #180]	; (401484 <xTaskResumeAll+0xf4>)
  4013d0:	68db      	ldr	r3, [r3, #12]
  4013d2:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  4013d4:	f104 0318 	add.w	r3, r4, #24
  4013d8:	4618      	mov	r0, r3
  4013da:	4b2b      	ldr	r3, [pc, #172]	; (401488 <xTaskResumeAll+0xf8>)
  4013dc:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  4013de:	1d23      	adds	r3, r4, #4
  4013e0:	4618      	mov	r0, r3
  4013e2:	4b29      	ldr	r3, [pc, #164]	; (401488 <xTaskResumeAll+0xf8>)
  4013e4:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  4013e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4013e8:	4b28      	ldr	r3, [pc, #160]	; (40148c <xTaskResumeAll+0xfc>)
  4013ea:	681b      	ldr	r3, [r3, #0]
  4013ec:	429a      	cmp	r2, r3
  4013ee:	d902      	bls.n	4013f6 <xTaskResumeAll+0x66>
  4013f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4013f2:	4a26      	ldr	r2, [pc, #152]	; (40148c <xTaskResumeAll+0xfc>)
  4013f4:	6013      	str	r3, [r2, #0]
  4013f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4013f8:	4613      	mov	r3, r2
  4013fa:	009b      	lsls	r3, r3, #2
  4013fc:	4413      	add	r3, r2
  4013fe:	009b      	lsls	r3, r3, #2
  401400:	4a23      	ldr	r2, [pc, #140]	; (401490 <xTaskResumeAll+0x100>)
  401402:	4413      	add	r3, r2
  401404:	1d22      	adds	r2, r4, #4
  401406:	4611      	mov	r1, r2
  401408:	4618      	mov	r0, r3
  40140a:	4b22      	ldr	r3, [pc, #136]	; (401494 <xTaskResumeAll+0x104>)
  40140c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40140e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401410:	4b21      	ldr	r3, [pc, #132]	; (401498 <xTaskResumeAll+0x108>)
  401412:	681b      	ldr	r3, [r3, #0]
  401414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401416:	429a      	cmp	r2, r3
  401418:	d301      	bcc.n	40141e <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  40141a:	2301      	movs	r3, #1
  40141c:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40141e:	4b19      	ldr	r3, [pc, #100]	; (401484 <xTaskResumeAll+0xf4>)
  401420:	681b      	ldr	r3, [r3, #0]
  401422:	2b00      	cmp	r3, #0
  401424:	d1d3      	bne.n	4013ce <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401426:	4b1d      	ldr	r3, [pc, #116]	; (40149c <xTaskResumeAll+0x10c>)
  401428:	681b      	ldr	r3, [r3, #0]
  40142a:	2b00      	cmp	r3, #0
  40142c:	d00d      	beq.n	40144a <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40142e:	e006      	b.n	40143e <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  401430:	4b1b      	ldr	r3, [pc, #108]	; (4014a0 <xTaskResumeAll+0x110>)
  401432:	4798      	blx	r3
						--uxMissedTicks;
  401434:	4b19      	ldr	r3, [pc, #100]	; (40149c <xTaskResumeAll+0x10c>)
  401436:	681b      	ldr	r3, [r3, #0]
  401438:	3b01      	subs	r3, #1
  40143a:	4a18      	ldr	r2, [pc, #96]	; (40149c <xTaskResumeAll+0x10c>)
  40143c:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40143e:	4b17      	ldr	r3, [pc, #92]	; (40149c <xTaskResumeAll+0x10c>)
  401440:	681b      	ldr	r3, [r3, #0]
  401442:	2b00      	cmp	r3, #0
  401444:	d1f4      	bne.n	401430 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  401446:	2301      	movs	r3, #1
  401448:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  40144a:	683b      	ldr	r3, [r7, #0]
  40144c:	2b01      	cmp	r3, #1
  40144e:	d003      	beq.n	401458 <xTaskResumeAll+0xc8>
  401450:	4b14      	ldr	r3, [pc, #80]	; (4014a4 <xTaskResumeAll+0x114>)
  401452:	681b      	ldr	r3, [r3, #0]
  401454:	2b01      	cmp	r3, #1
  401456:	d106      	bne.n	401466 <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  401458:	2301      	movs	r3, #1
  40145a:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  40145c:	4b11      	ldr	r3, [pc, #68]	; (4014a4 <xTaskResumeAll+0x114>)
  40145e:	2200      	movs	r2, #0
  401460:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  401462:	4b11      	ldr	r3, [pc, #68]	; (4014a8 <xTaskResumeAll+0x118>)
  401464:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  401466:	4b11      	ldr	r3, [pc, #68]	; (4014ac <xTaskResumeAll+0x11c>)
  401468:	4798      	blx	r3

	return xAlreadyYielded;
  40146a:	687b      	ldr	r3, [r7, #4]
}
  40146c:	4618      	mov	r0, r3
  40146e:	370c      	adds	r7, #12
  401470:	46bd      	mov	sp, r7
  401472:	bd90      	pop	{r4, r7, pc}
  401474:	2000aae8 	.word	0x2000aae8
  401478:	00400589 	.word	0x00400589
  40147c:	00400541 	.word	0x00400541
  401480:	2000aad4 	.word	0x2000aad4
  401484:	2000aa94 	.word	0x2000aa94
  401488:	00400341 	.word	0x00400341
  40148c:	2000aae0 	.word	0x2000aae0
  401490:	2000aa00 	.word	0x2000aa00
  401494:	0040027f 	.word	0x0040027f
  401498:	2000a9fc 	.word	0x2000a9fc
  40149c:	2000aaec 	.word	0x2000aaec
  4014a0:	004014dd 	.word	0x004014dd
  4014a4:	2000aaf0 	.word	0x2000aaf0
  4014a8:	00400525 	.word	0x00400525
  4014ac:	00400561 	.word	0x00400561

004014b0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  4014b0:	b580      	push	{r7, lr}
  4014b2:	b082      	sub	sp, #8
  4014b4:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  4014b6:	4b06      	ldr	r3, [pc, #24]	; (4014d0 <xTaskGetTickCount+0x20>)
  4014b8:	4798      	blx	r3
	{
		xTicks = xTickCount;
  4014ba:	4b06      	ldr	r3, [pc, #24]	; (4014d4 <xTaskGetTickCount+0x24>)
  4014bc:	681b      	ldr	r3, [r3, #0]
  4014be:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  4014c0:	4b05      	ldr	r3, [pc, #20]	; (4014d8 <xTaskGetTickCount+0x28>)
  4014c2:	4798      	blx	r3

	return xTicks;
  4014c4:	687b      	ldr	r3, [r7, #4]
}
  4014c6:	4618      	mov	r0, r3
  4014c8:	3708      	adds	r7, #8
  4014ca:	46bd      	mov	sp, r7
  4014cc:	bd80      	pop	{r7, pc}
  4014ce:	bf00      	nop
  4014d0:	00400541 	.word	0x00400541
  4014d4:	2000aad8 	.word	0x2000aad8
  4014d8:	00400561 	.word	0x00400561

004014dc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  4014dc:	b580      	push	{r7, lr}
  4014de:	b084      	sub	sp, #16
  4014e0:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4014e2:	4b45      	ldr	r3, [pc, #276]	; (4015f8 <vTaskIncrementTick+0x11c>)
  4014e4:	681b      	ldr	r3, [r3, #0]
  4014e6:	2b00      	cmp	r3, #0
  4014e8:	d17b      	bne.n	4015e2 <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  4014ea:	4b44      	ldr	r3, [pc, #272]	; (4015fc <vTaskIncrementTick+0x120>)
  4014ec:	681b      	ldr	r3, [r3, #0]
  4014ee:	3301      	adds	r3, #1
  4014f0:	4a42      	ldr	r2, [pc, #264]	; (4015fc <vTaskIncrementTick+0x120>)
  4014f2:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  4014f4:	4b41      	ldr	r3, [pc, #260]	; (4015fc <vTaskIncrementTick+0x120>)
  4014f6:	681b      	ldr	r3, [r3, #0]
  4014f8:	2b00      	cmp	r3, #0
  4014fa:	d12a      	bne.n	401552 <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  4014fc:	4b40      	ldr	r3, [pc, #256]	; (401600 <vTaskIncrementTick+0x124>)
  4014fe:	681b      	ldr	r3, [r3, #0]
  401500:	681b      	ldr	r3, [r3, #0]
  401502:	2b00      	cmp	r3, #0
  401504:	d003      	beq.n	40150e <vTaskIncrementTick+0x32>
  401506:	4b3f      	ldr	r3, [pc, #252]	; (401604 <vTaskIncrementTick+0x128>)
  401508:	4798      	blx	r3
  40150a:	bf00      	nop
  40150c:	e7fd      	b.n	40150a <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  40150e:	4b3c      	ldr	r3, [pc, #240]	; (401600 <vTaskIncrementTick+0x124>)
  401510:	681b      	ldr	r3, [r3, #0]
  401512:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  401514:	4b3c      	ldr	r3, [pc, #240]	; (401608 <vTaskIncrementTick+0x12c>)
  401516:	681b      	ldr	r3, [r3, #0]
  401518:	4a39      	ldr	r2, [pc, #228]	; (401600 <vTaskIncrementTick+0x124>)
  40151a:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  40151c:	4a3a      	ldr	r2, [pc, #232]	; (401608 <vTaskIncrementTick+0x12c>)
  40151e:	68fb      	ldr	r3, [r7, #12]
  401520:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  401522:	4b3a      	ldr	r3, [pc, #232]	; (40160c <vTaskIncrementTick+0x130>)
  401524:	681b      	ldr	r3, [r3, #0]
  401526:	3301      	adds	r3, #1
  401528:	4a38      	ldr	r2, [pc, #224]	; (40160c <vTaskIncrementTick+0x130>)
  40152a:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40152c:	4b34      	ldr	r3, [pc, #208]	; (401600 <vTaskIncrementTick+0x124>)
  40152e:	681b      	ldr	r3, [r3, #0]
  401530:	681b      	ldr	r3, [r3, #0]
  401532:	2b00      	cmp	r3, #0
  401534:	d104      	bne.n	401540 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  401536:	4b36      	ldr	r3, [pc, #216]	; (401610 <vTaskIncrementTick+0x134>)
  401538:	f04f 32ff 	mov.w	r2, #4294967295
  40153c:	601a      	str	r2, [r3, #0]
  40153e:	e008      	b.n	401552 <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401540:	4b2f      	ldr	r3, [pc, #188]	; (401600 <vTaskIncrementTick+0x124>)
  401542:	681b      	ldr	r3, [r3, #0]
  401544:	68db      	ldr	r3, [r3, #12]
  401546:	68db      	ldr	r3, [r3, #12]
  401548:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40154a:	68bb      	ldr	r3, [r7, #8]
  40154c:	685b      	ldr	r3, [r3, #4]
  40154e:	4a30      	ldr	r2, [pc, #192]	; (401610 <vTaskIncrementTick+0x134>)
  401550:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  401552:	4b2a      	ldr	r3, [pc, #168]	; (4015fc <vTaskIncrementTick+0x120>)
  401554:	681a      	ldr	r2, [r3, #0]
  401556:	4b2e      	ldr	r3, [pc, #184]	; (401610 <vTaskIncrementTick+0x134>)
  401558:	681b      	ldr	r3, [r3, #0]
  40155a:	429a      	cmp	r2, r3
  40155c:	d347      	bcc.n	4015ee <vTaskIncrementTick+0x112>
  40155e:	4b28      	ldr	r3, [pc, #160]	; (401600 <vTaskIncrementTick+0x124>)
  401560:	681b      	ldr	r3, [r3, #0]
  401562:	681b      	ldr	r3, [r3, #0]
  401564:	2b00      	cmp	r3, #0
  401566:	d104      	bne.n	401572 <vTaskIncrementTick+0x96>
  401568:	4b29      	ldr	r3, [pc, #164]	; (401610 <vTaskIncrementTick+0x134>)
  40156a:	f04f 32ff 	mov.w	r2, #4294967295
  40156e:	601a      	str	r2, [r3, #0]
  401570:	e03d      	b.n	4015ee <vTaskIncrementTick+0x112>
  401572:	4b23      	ldr	r3, [pc, #140]	; (401600 <vTaskIncrementTick+0x124>)
  401574:	681b      	ldr	r3, [r3, #0]
  401576:	68db      	ldr	r3, [r3, #12]
  401578:	68db      	ldr	r3, [r3, #12]
  40157a:	60bb      	str	r3, [r7, #8]
  40157c:	68bb      	ldr	r3, [r7, #8]
  40157e:	685b      	ldr	r3, [r3, #4]
  401580:	607b      	str	r3, [r7, #4]
  401582:	4b1e      	ldr	r3, [pc, #120]	; (4015fc <vTaskIncrementTick+0x120>)
  401584:	681a      	ldr	r2, [r3, #0]
  401586:	687b      	ldr	r3, [r7, #4]
  401588:	429a      	cmp	r2, r3
  40158a:	d203      	bcs.n	401594 <vTaskIncrementTick+0xb8>
  40158c:	4a20      	ldr	r2, [pc, #128]	; (401610 <vTaskIncrementTick+0x134>)
  40158e:	687b      	ldr	r3, [r7, #4]
  401590:	6013      	str	r3, [r2, #0]
  401592:	e02c      	b.n	4015ee <vTaskIncrementTick+0x112>
  401594:	68bb      	ldr	r3, [r7, #8]
  401596:	3304      	adds	r3, #4
  401598:	4618      	mov	r0, r3
  40159a:	4b1e      	ldr	r3, [pc, #120]	; (401614 <vTaskIncrementTick+0x138>)
  40159c:	4798      	blx	r3
  40159e:	68bb      	ldr	r3, [r7, #8]
  4015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4015a2:	2b00      	cmp	r3, #0
  4015a4:	d004      	beq.n	4015b0 <vTaskIncrementTick+0xd4>
  4015a6:	68bb      	ldr	r3, [r7, #8]
  4015a8:	3318      	adds	r3, #24
  4015aa:	4618      	mov	r0, r3
  4015ac:	4b19      	ldr	r3, [pc, #100]	; (401614 <vTaskIncrementTick+0x138>)
  4015ae:	4798      	blx	r3
  4015b0:	68bb      	ldr	r3, [r7, #8]
  4015b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015b4:	4b18      	ldr	r3, [pc, #96]	; (401618 <vTaskIncrementTick+0x13c>)
  4015b6:	681b      	ldr	r3, [r3, #0]
  4015b8:	429a      	cmp	r2, r3
  4015ba:	d903      	bls.n	4015c4 <vTaskIncrementTick+0xe8>
  4015bc:	68bb      	ldr	r3, [r7, #8]
  4015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015c0:	4a15      	ldr	r2, [pc, #84]	; (401618 <vTaskIncrementTick+0x13c>)
  4015c2:	6013      	str	r3, [r2, #0]
  4015c4:	68bb      	ldr	r3, [r7, #8]
  4015c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015c8:	4613      	mov	r3, r2
  4015ca:	009b      	lsls	r3, r3, #2
  4015cc:	4413      	add	r3, r2
  4015ce:	009b      	lsls	r3, r3, #2
  4015d0:	4a12      	ldr	r2, [pc, #72]	; (40161c <vTaskIncrementTick+0x140>)
  4015d2:	441a      	add	r2, r3
  4015d4:	68bb      	ldr	r3, [r7, #8]
  4015d6:	3304      	adds	r3, #4
  4015d8:	4619      	mov	r1, r3
  4015da:	4610      	mov	r0, r2
  4015dc:	4b10      	ldr	r3, [pc, #64]	; (401620 <vTaskIncrementTick+0x144>)
  4015de:	4798      	blx	r3
  4015e0:	e7bd      	b.n	40155e <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  4015e2:	4b10      	ldr	r3, [pc, #64]	; (401624 <vTaskIncrementTick+0x148>)
  4015e4:	681b      	ldr	r3, [r3, #0]
  4015e6:	3301      	adds	r3, #1
  4015e8:	4a0e      	ldr	r2, [pc, #56]	; (401624 <vTaskIncrementTick+0x148>)
  4015ea:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  4015ec:	e7ff      	b.n	4015ee <vTaskIncrementTick+0x112>
  4015ee:	bf00      	nop
  4015f0:	3710      	adds	r7, #16
  4015f2:	46bd      	mov	sp, r7
  4015f4:	bd80      	pop	{r7, pc}
  4015f6:	bf00      	nop
  4015f8:	2000aae8 	.word	0x2000aae8
  4015fc:	2000aad8 	.word	0x2000aad8
  401600:	2000aa8c 	.word	0x2000aa8c
  401604:	00400589 	.word	0x00400589
  401608:	2000aa90 	.word	0x2000aa90
  40160c:	2000aaf4 	.word	0x2000aaf4
  401610:	20000014 	.word	0x20000014
  401614:	00400341 	.word	0x00400341
  401618:	2000aae0 	.word	0x2000aae0
  40161c:	2000aa00 	.word	0x2000aa00
  401620:	0040027f 	.word	0x0040027f
  401624:	2000aaec 	.word	0x2000aaec

00401628 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401628:	b580      	push	{r7, lr}
  40162a:	b082      	sub	sp, #8
  40162c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  40162e:	4b21      	ldr	r3, [pc, #132]	; (4016b4 <vTaskSwitchContext+0x8c>)
  401630:	681b      	ldr	r3, [r3, #0]
  401632:	2b00      	cmp	r3, #0
  401634:	d010      	beq.n	401658 <vTaskSwitchContext+0x30>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  401636:	4b20      	ldr	r3, [pc, #128]	; (4016b8 <vTaskSwitchContext+0x90>)
  401638:	2201      	movs	r2, #1
  40163a:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  40163c:	e035      	b.n	4016aa <vTaskSwitchContext+0x82>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40163e:	4b1f      	ldr	r3, [pc, #124]	; (4016bc <vTaskSwitchContext+0x94>)
  401640:	681b      	ldr	r3, [r3, #0]
  401642:	2b00      	cmp	r3, #0
  401644:	d103      	bne.n	40164e <vTaskSwitchContext+0x26>
  401646:	4b1e      	ldr	r3, [pc, #120]	; (4016c0 <vTaskSwitchContext+0x98>)
  401648:	4798      	blx	r3
  40164a:	bf00      	nop
  40164c:	e7fd      	b.n	40164a <vTaskSwitchContext+0x22>
  40164e:	4b1b      	ldr	r3, [pc, #108]	; (4016bc <vTaskSwitchContext+0x94>)
  401650:	681b      	ldr	r3, [r3, #0]
  401652:	3b01      	subs	r3, #1
  401654:	4a19      	ldr	r2, [pc, #100]	; (4016bc <vTaskSwitchContext+0x94>)
  401656:	6013      	str	r3, [r2, #0]
  401658:	4b18      	ldr	r3, [pc, #96]	; (4016bc <vTaskSwitchContext+0x94>)
  40165a:	681a      	ldr	r2, [r3, #0]
  40165c:	4919      	ldr	r1, [pc, #100]	; (4016c4 <vTaskSwitchContext+0x9c>)
  40165e:	4613      	mov	r3, r2
  401660:	009b      	lsls	r3, r3, #2
  401662:	4413      	add	r3, r2
  401664:	009b      	lsls	r3, r3, #2
  401666:	440b      	add	r3, r1
  401668:	681b      	ldr	r3, [r3, #0]
  40166a:	2b00      	cmp	r3, #0
  40166c:	d0e7      	beq.n	40163e <vTaskSwitchContext+0x16>
  40166e:	4b13      	ldr	r3, [pc, #76]	; (4016bc <vTaskSwitchContext+0x94>)
  401670:	681a      	ldr	r2, [r3, #0]
  401672:	4613      	mov	r3, r2
  401674:	009b      	lsls	r3, r3, #2
  401676:	4413      	add	r3, r2
  401678:	009b      	lsls	r3, r3, #2
  40167a:	4a12      	ldr	r2, [pc, #72]	; (4016c4 <vTaskSwitchContext+0x9c>)
  40167c:	4413      	add	r3, r2
  40167e:	607b      	str	r3, [r7, #4]
  401680:	687b      	ldr	r3, [r7, #4]
  401682:	685b      	ldr	r3, [r3, #4]
  401684:	685a      	ldr	r2, [r3, #4]
  401686:	687b      	ldr	r3, [r7, #4]
  401688:	605a      	str	r2, [r3, #4]
  40168a:	687b      	ldr	r3, [r7, #4]
  40168c:	685a      	ldr	r2, [r3, #4]
  40168e:	687b      	ldr	r3, [r7, #4]
  401690:	3308      	adds	r3, #8
  401692:	429a      	cmp	r2, r3
  401694:	d104      	bne.n	4016a0 <vTaskSwitchContext+0x78>
  401696:	687b      	ldr	r3, [r7, #4]
  401698:	685b      	ldr	r3, [r3, #4]
  40169a:	685a      	ldr	r2, [r3, #4]
  40169c:	687b      	ldr	r3, [r7, #4]
  40169e:	605a      	str	r2, [r3, #4]
  4016a0:	687b      	ldr	r3, [r7, #4]
  4016a2:	685b      	ldr	r3, [r3, #4]
  4016a4:	68db      	ldr	r3, [r3, #12]
  4016a6:	4a08      	ldr	r2, [pc, #32]	; (4016c8 <vTaskSwitchContext+0xa0>)
  4016a8:	6013      	str	r3, [r2, #0]
}
  4016aa:	bf00      	nop
  4016ac:	3708      	adds	r7, #8
  4016ae:	46bd      	mov	sp, r7
  4016b0:	bd80      	pop	{r7, pc}
  4016b2:	bf00      	nop
  4016b4:	2000aae8 	.word	0x2000aae8
  4016b8:	2000aaf0 	.word	0x2000aaf0
  4016bc:	2000aae0 	.word	0x2000aae0
  4016c0:	00400589 	.word	0x00400589
  4016c4:	2000aa00 	.word	0x2000aa00
  4016c8:	2000a9fc 	.word	0x2000a9fc

004016cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4016cc:	b580      	push	{r7, lr}
  4016ce:	b084      	sub	sp, #16
  4016d0:	af00      	add	r7, sp, #0
  4016d2:	6078      	str	r0, [r7, #4]
  4016d4:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  4016d6:	687b      	ldr	r3, [r7, #4]
  4016d8:	2b00      	cmp	r3, #0
  4016da:	d103      	bne.n	4016e4 <vTaskPlaceOnEventList+0x18>
  4016dc:	4b14      	ldr	r3, [pc, #80]	; (401730 <vTaskPlaceOnEventList+0x64>)
  4016de:	4798      	blx	r3
  4016e0:	bf00      	nop
  4016e2:	e7fd      	b.n	4016e0 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4016e4:	4b13      	ldr	r3, [pc, #76]	; (401734 <vTaskPlaceOnEventList+0x68>)
  4016e6:	681b      	ldr	r3, [r3, #0]
  4016e8:	3318      	adds	r3, #24
  4016ea:	4619      	mov	r1, r3
  4016ec:	6878      	ldr	r0, [r7, #4]
  4016ee:	4b12      	ldr	r3, [pc, #72]	; (401738 <vTaskPlaceOnEventList+0x6c>)
  4016f0:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4016f2:	4b10      	ldr	r3, [pc, #64]	; (401734 <vTaskPlaceOnEventList+0x68>)
  4016f4:	681b      	ldr	r3, [r3, #0]
  4016f6:	3304      	adds	r3, #4
  4016f8:	4618      	mov	r0, r3
  4016fa:	4b10      	ldr	r3, [pc, #64]	; (40173c <vTaskPlaceOnEventList+0x70>)
  4016fc:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  4016fe:	683b      	ldr	r3, [r7, #0]
  401700:	f1b3 3fff 	cmp.w	r3, #4294967295
  401704:	d107      	bne.n	401716 <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401706:	4b0b      	ldr	r3, [pc, #44]	; (401734 <vTaskPlaceOnEventList+0x68>)
  401708:	681b      	ldr	r3, [r3, #0]
  40170a:	3304      	adds	r3, #4
  40170c:	4619      	mov	r1, r3
  40170e:	480c      	ldr	r0, [pc, #48]	; (401740 <vTaskPlaceOnEventList+0x74>)
  401710:	4b0c      	ldr	r3, [pc, #48]	; (401744 <vTaskPlaceOnEventList+0x78>)
  401712:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  401714:	e007      	b.n	401726 <vTaskPlaceOnEventList+0x5a>
			xTimeToWake = xTickCount + xTicksToWait;
  401716:	4b0c      	ldr	r3, [pc, #48]	; (401748 <vTaskPlaceOnEventList+0x7c>)
  401718:	681a      	ldr	r2, [r3, #0]
  40171a:	683b      	ldr	r3, [r7, #0]
  40171c:	4413      	add	r3, r2
  40171e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401720:	68f8      	ldr	r0, [r7, #12]
  401722:	4b0a      	ldr	r3, [pc, #40]	; (40174c <vTaskPlaceOnEventList+0x80>)
  401724:	4798      	blx	r3
}
  401726:	bf00      	nop
  401728:	3710      	adds	r7, #16
  40172a:	46bd      	mov	sp, r7
  40172c:	bd80      	pop	{r7, pc}
  40172e:	bf00      	nop
  401730:	00400589 	.word	0x00400589
  401734:	2000a9fc 	.word	0x2000a9fc
  401738:	004002cf 	.word	0x004002cf
  40173c:	00400341 	.word	0x00400341
  401740:	2000aac0 	.word	0x2000aac0
  401744:	0040027f 	.word	0x0040027f
  401748:	2000aad8 	.word	0x2000aad8
  40174c:	00401b29 	.word	0x00401b29

00401750 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  401750:	b580      	push	{r7, lr}
  401752:	b084      	sub	sp, #16
  401754:	af00      	add	r7, sp, #0
  401756:	6078      	str	r0, [r7, #4]
  401758:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  40175a:	687b      	ldr	r3, [r7, #4]
  40175c:	2b00      	cmp	r3, #0
  40175e:	d103      	bne.n	401768 <vTaskPlaceOnEventListRestricted+0x18>
  401760:	4b0e      	ldr	r3, [pc, #56]	; (40179c <vTaskPlaceOnEventListRestricted+0x4c>)
  401762:	4798      	blx	r3
  401764:	bf00      	nop
  401766:	e7fd      	b.n	401764 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401768:	4b0d      	ldr	r3, [pc, #52]	; (4017a0 <vTaskPlaceOnEventListRestricted+0x50>)
  40176a:	681b      	ldr	r3, [r3, #0]
  40176c:	3318      	adds	r3, #24
  40176e:	4619      	mov	r1, r3
  401770:	6878      	ldr	r0, [r7, #4]
  401772:	4b0c      	ldr	r3, [pc, #48]	; (4017a4 <vTaskPlaceOnEventListRestricted+0x54>)
  401774:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401776:	4b0a      	ldr	r3, [pc, #40]	; (4017a0 <vTaskPlaceOnEventListRestricted+0x50>)
  401778:	681b      	ldr	r3, [r3, #0]
  40177a:	3304      	adds	r3, #4
  40177c:	4618      	mov	r0, r3
  40177e:	4b0a      	ldr	r3, [pc, #40]	; (4017a8 <vTaskPlaceOnEventListRestricted+0x58>)
  401780:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  401782:	4b0a      	ldr	r3, [pc, #40]	; (4017ac <vTaskPlaceOnEventListRestricted+0x5c>)
  401784:	681a      	ldr	r2, [r3, #0]
  401786:	683b      	ldr	r3, [r7, #0]
  401788:	4413      	add	r3, r2
  40178a:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  40178c:	68f8      	ldr	r0, [r7, #12]
  40178e:	4b08      	ldr	r3, [pc, #32]	; (4017b0 <vTaskPlaceOnEventListRestricted+0x60>)
  401790:	4798      	blx	r3
	}
  401792:	bf00      	nop
  401794:	3710      	adds	r7, #16
  401796:	46bd      	mov	sp, r7
  401798:	bd80      	pop	{r7, pc}
  40179a:	bf00      	nop
  40179c:	00400589 	.word	0x00400589
  4017a0:	2000a9fc 	.word	0x2000a9fc
  4017a4:	0040027f 	.word	0x0040027f
  4017a8:	00400341 	.word	0x00400341
  4017ac:	2000aad8 	.word	0x2000aad8
  4017b0:	00401b29 	.word	0x00401b29

004017b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  4017b4:	b580      	push	{r7, lr}
  4017b6:	b084      	sub	sp, #16
  4017b8:	af00      	add	r7, sp, #0
  4017ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4017bc:	687b      	ldr	r3, [r7, #4]
  4017be:	68db      	ldr	r3, [r3, #12]
  4017c0:	68db      	ldr	r3, [r3, #12]
  4017c2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  4017c4:	68bb      	ldr	r3, [r7, #8]
  4017c6:	2b00      	cmp	r3, #0
  4017c8:	d103      	bne.n	4017d2 <xTaskRemoveFromEventList+0x1e>
  4017ca:	4b21      	ldr	r3, [pc, #132]	; (401850 <xTaskRemoveFromEventList+0x9c>)
  4017cc:	4798      	blx	r3
  4017ce:	bf00      	nop
  4017d0:	e7fd      	b.n	4017ce <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4017d2:	68bb      	ldr	r3, [r7, #8]
  4017d4:	3318      	adds	r3, #24
  4017d6:	4618      	mov	r0, r3
  4017d8:	4b1e      	ldr	r3, [pc, #120]	; (401854 <xTaskRemoveFromEventList+0xa0>)
  4017da:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4017dc:	4b1e      	ldr	r3, [pc, #120]	; (401858 <xTaskRemoveFromEventList+0xa4>)
  4017de:	681b      	ldr	r3, [r3, #0]
  4017e0:	2b00      	cmp	r3, #0
  4017e2:	d11d      	bne.n	401820 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4017e4:	68bb      	ldr	r3, [r7, #8]
  4017e6:	3304      	adds	r3, #4
  4017e8:	4618      	mov	r0, r3
  4017ea:	4b1a      	ldr	r3, [pc, #104]	; (401854 <xTaskRemoveFromEventList+0xa0>)
  4017ec:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  4017ee:	68bb      	ldr	r3, [r7, #8]
  4017f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4017f2:	4b1a      	ldr	r3, [pc, #104]	; (40185c <xTaskRemoveFromEventList+0xa8>)
  4017f4:	681b      	ldr	r3, [r3, #0]
  4017f6:	429a      	cmp	r2, r3
  4017f8:	d903      	bls.n	401802 <xTaskRemoveFromEventList+0x4e>
  4017fa:	68bb      	ldr	r3, [r7, #8]
  4017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4017fe:	4a17      	ldr	r2, [pc, #92]	; (40185c <xTaskRemoveFromEventList+0xa8>)
  401800:	6013      	str	r3, [r2, #0]
  401802:	68bb      	ldr	r3, [r7, #8]
  401804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401806:	4613      	mov	r3, r2
  401808:	009b      	lsls	r3, r3, #2
  40180a:	4413      	add	r3, r2
  40180c:	009b      	lsls	r3, r3, #2
  40180e:	4a14      	ldr	r2, [pc, #80]	; (401860 <xTaskRemoveFromEventList+0xac>)
  401810:	441a      	add	r2, r3
  401812:	68bb      	ldr	r3, [r7, #8]
  401814:	3304      	adds	r3, #4
  401816:	4619      	mov	r1, r3
  401818:	4610      	mov	r0, r2
  40181a:	4b12      	ldr	r3, [pc, #72]	; (401864 <xTaskRemoveFromEventList+0xb0>)
  40181c:	4798      	blx	r3
  40181e:	e005      	b.n	40182c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401820:	68bb      	ldr	r3, [r7, #8]
  401822:	3318      	adds	r3, #24
  401824:	4619      	mov	r1, r3
  401826:	4810      	ldr	r0, [pc, #64]	; (401868 <xTaskRemoveFromEventList+0xb4>)
  401828:	4b0e      	ldr	r3, [pc, #56]	; (401864 <xTaskRemoveFromEventList+0xb0>)
  40182a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40182c:	68bb      	ldr	r3, [r7, #8]
  40182e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401830:	4b0e      	ldr	r3, [pc, #56]	; (40186c <xTaskRemoveFromEventList+0xb8>)
  401832:	681b      	ldr	r3, [r3, #0]
  401834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401836:	429a      	cmp	r2, r3
  401838:	d302      	bcc.n	401840 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  40183a:	2301      	movs	r3, #1
  40183c:	60fb      	str	r3, [r7, #12]
  40183e:	e001      	b.n	401844 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  401840:	2300      	movs	r3, #0
  401842:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  401844:	68fb      	ldr	r3, [r7, #12]
}
  401846:	4618      	mov	r0, r3
  401848:	3710      	adds	r7, #16
  40184a:	46bd      	mov	sp, r7
  40184c:	bd80      	pop	{r7, pc}
  40184e:	bf00      	nop
  401850:	00400589 	.word	0x00400589
  401854:	00400341 	.word	0x00400341
  401858:	2000aae8 	.word	0x2000aae8
  40185c:	2000aae0 	.word	0x2000aae0
  401860:	2000aa00 	.word	0x2000aa00
  401864:	0040027f 	.word	0x0040027f
  401868:	2000aa94 	.word	0x2000aa94
  40186c:	2000a9fc 	.word	0x2000a9fc

00401870 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  401870:	b580      	push	{r7, lr}
  401872:	b082      	sub	sp, #8
  401874:	af00      	add	r7, sp, #0
  401876:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  401878:	687b      	ldr	r3, [r7, #4]
  40187a:	2b00      	cmp	r3, #0
  40187c:	d103      	bne.n	401886 <vTaskSetTimeOutState+0x16>
  40187e:	4b08      	ldr	r3, [pc, #32]	; (4018a0 <vTaskSetTimeOutState+0x30>)
  401880:	4798      	blx	r3
  401882:	bf00      	nop
  401884:	e7fd      	b.n	401882 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401886:	4b07      	ldr	r3, [pc, #28]	; (4018a4 <vTaskSetTimeOutState+0x34>)
  401888:	681a      	ldr	r2, [r3, #0]
  40188a:	687b      	ldr	r3, [r7, #4]
  40188c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40188e:	4b06      	ldr	r3, [pc, #24]	; (4018a8 <vTaskSetTimeOutState+0x38>)
  401890:	681a      	ldr	r2, [r3, #0]
  401892:	687b      	ldr	r3, [r7, #4]
  401894:	605a      	str	r2, [r3, #4]
}
  401896:	bf00      	nop
  401898:	3708      	adds	r7, #8
  40189a:	46bd      	mov	sp, r7
  40189c:	bd80      	pop	{r7, pc}
  40189e:	bf00      	nop
  4018a0:	00400589 	.word	0x00400589
  4018a4:	2000aaf4 	.word	0x2000aaf4
  4018a8:	2000aad8 	.word	0x2000aad8

004018ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4018ac:	b580      	push	{r7, lr}
  4018ae:	b084      	sub	sp, #16
  4018b0:	af00      	add	r7, sp, #0
  4018b2:	6078      	str	r0, [r7, #4]
  4018b4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  4018b6:	687b      	ldr	r3, [r7, #4]
  4018b8:	2b00      	cmp	r3, #0
  4018ba:	d103      	bne.n	4018c4 <xTaskCheckForTimeOut+0x18>
  4018bc:	4b22      	ldr	r3, [pc, #136]	; (401948 <xTaskCheckForTimeOut+0x9c>)
  4018be:	4798      	blx	r3
  4018c0:	bf00      	nop
  4018c2:	e7fd      	b.n	4018c0 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  4018c4:	683b      	ldr	r3, [r7, #0]
  4018c6:	2b00      	cmp	r3, #0
  4018c8:	d103      	bne.n	4018d2 <xTaskCheckForTimeOut+0x26>
  4018ca:	4b1f      	ldr	r3, [pc, #124]	; (401948 <xTaskCheckForTimeOut+0x9c>)
  4018cc:	4798      	blx	r3
  4018ce:	bf00      	nop
  4018d0:	e7fd      	b.n	4018ce <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  4018d2:	4b1e      	ldr	r3, [pc, #120]	; (40194c <xTaskCheckForTimeOut+0xa0>)
  4018d4:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4018d6:	683b      	ldr	r3, [r7, #0]
  4018d8:	681b      	ldr	r3, [r3, #0]
  4018da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018de:	d102      	bne.n	4018e6 <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  4018e0:	2300      	movs	r3, #0
  4018e2:	60fb      	str	r3, [r7, #12]
  4018e4:	e029      	b.n	40193a <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  4018e6:	687b      	ldr	r3, [r7, #4]
  4018e8:	681a      	ldr	r2, [r3, #0]
  4018ea:	4b19      	ldr	r3, [pc, #100]	; (401950 <xTaskCheckForTimeOut+0xa4>)
  4018ec:	681b      	ldr	r3, [r3, #0]
  4018ee:	429a      	cmp	r2, r3
  4018f0:	d008      	beq.n	401904 <xTaskCheckForTimeOut+0x58>
  4018f2:	687b      	ldr	r3, [r7, #4]
  4018f4:	685a      	ldr	r2, [r3, #4]
  4018f6:	4b17      	ldr	r3, [pc, #92]	; (401954 <xTaskCheckForTimeOut+0xa8>)
  4018f8:	681b      	ldr	r3, [r3, #0]
  4018fa:	429a      	cmp	r2, r3
  4018fc:	d802      	bhi.n	401904 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  4018fe:	2301      	movs	r3, #1
  401900:	60fb      	str	r3, [r7, #12]
  401902:	e01a      	b.n	40193a <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  401904:	4b13      	ldr	r3, [pc, #76]	; (401954 <xTaskCheckForTimeOut+0xa8>)
  401906:	681a      	ldr	r2, [r3, #0]
  401908:	687b      	ldr	r3, [r7, #4]
  40190a:	685b      	ldr	r3, [r3, #4]
  40190c:	1ad2      	subs	r2, r2, r3
  40190e:	683b      	ldr	r3, [r7, #0]
  401910:	681b      	ldr	r3, [r3, #0]
  401912:	429a      	cmp	r2, r3
  401914:	d20f      	bcs.n	401936 <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  401916:	4b0f      	ldr	r3, [pc, #60]	; (401954 <xTaskCheckForTimeOut+0xa8>)
  401918:	681a      	ldr	r2, [r3, #0]
  40191a:	687b      	ldr	r3, [r7, #4]
  40191c:	685b      	ldr	r3, [r3, #4]
  40191e:	1ad3      	subs	r3, r2, r3
  401920:	683a      	ldr	r2, [r7, #0]
  401922:	6812      	ldr	r2, [r2, #0]
  401924:	1ad2      	subs	r2, r2, r3
  401926:	683b      	ldr	r3, [r7, #0]
  401928:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40192a:	6878      	ldr	r0, [r7, #4]
  40192c:	4b0a      	ldr	r3, [pc, #40]	; (401958 <xTaskCheckForTimeOut+0xac>)
  40192e:	4798      	blx	r3
			xReturn = pdFALSE;
  401930:	2300      	movs	r3, #0
  401932:	60fb      	str	r3, [r7, #12]
  401934:	e001      	b.n	40193a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  401936:	2301      	movs	r3, #1
  401938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  40193a:	4b08      	ldr	r3, [pc, #32]	; (40195c <xTaskCheckForTimeOut+0xb0>)
  40193c:	4798      	blx	r3

	return xReturn;
  40193e:	68fb      	ldr	r3, [r7, #12]
}
  401940:	4618      	mov	r0, r3
  401942:	3710      	adds	r7, #16
  401944:	46bd      	mov	sp, r7
  401946:	bd80      	pop	{r7, pc}
  401948:	00400589 	.word	0x00400589
  40194c:	00400541 	.word	0x00400541
  401950:	2000aaf4 	.word	0x2000aaf4
  401954:	2000aad8 	.word	0x2000aad8
  401958:	00401871 	.word	0x00401871
  40195c:	00400561 	.word	0x00400561

00401960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  401960:	b480      	push	{r7}
  401962:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  401964:	4b03      	ldr	r3, [pc, #12]	; (401974 <vTaskMissedYield+0x14>)
  401966:	2201      	movs	r2, #1
  401968:	601a      	str	r2, [r3, #0]
}
  40196a:	bf00      	nop
  40196c:	46bd      	mov	sp, r7
  40196e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401972:	4770      	bx	lr
  401974:	2000aaf0 	.word	0x2000aaf0

00401978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401978:	b580      	push	{r7, lr}
  40197a:	b082      	sub	sp, #8
  40197c:	af00      	add	r7, sp, #0
  40197e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  401980:	4b04      	ldr	r3, [pc, #16]	; (401994 <prvIdleTask+0x1c>)
  401982:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  401984:	4b04      	ldr	r3, [pc, #16]	; (401998 <prvIdleTask+0x20>)
  401986:	681b      	ldr	r3, [r3, #0]
  401988:	2b01      	cmp	r3, #1
  40198a:	d9f9      	bls.n	401980 <prvIdleTask+0x8>
			{
				taskYIELD();
  40198c:	4b03      	ldr	r3, [pc, #12]	; (40199c <prvIdleTask+0x24>)
  40198e:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
  401990:	e7f6      	b.n	401980 <prvIdleTask+0x8>
  401992:	bf00      	nop
  401994:	00401a99 	.word	0x00401a99
  401998:	2000aa00 	.word	0x2000aa00
  40199c:	00400525 	.word	0x00400525

004019a0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  4019a0:	b580      	push	{r7, lr}
  4019a2:	b084      	sub	sp, #16
  4019a4:	af00      	add	r7, sp, #0
  4019a6:	60f8      	str	r0, [r7, #12]
  4019a8:	60b9      	str	r1, [r7, #8]
  4019aa:	607a      	str	r2, [r7, #4]
  4019ac:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  4019ae:	68fb      	ldr	r3, [r7, #12]
  4019b0:	3334      	adds	r3, #52	; 0x34
  4019b2:	220a      	movs	r2, #10
  4019b4:	68b9      	ldr	r1, [r7, #8]
  4019b6:	4618      	mov	r0, r3
  4019b8:	4b14      	ldr	r3, [pc, #80]	; (401a0c <prvInitialiseTCBVariables+0x6c>)
  4019ba:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  4019bc:	68fb      	ldr	r3, [r7, #12]
  4019be:	2200      	movs	r2, #0
  4019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  4019c4:	687b      	ldr	r3, [r7, #4]
  4019c6:	2b04      	cmp	r3, #4
  4019c8:	d901      	bls.n	4019ce <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  4019ca:	2304      	movs	r3, #4
  4019cc:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  4019ce:	68fb      	ldr	r3, [r7, #12]
  4019d0:	687a      	ldr	r2, [r7, #4]
  4019d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4019d4:	68fb      	ldr	r3, [r7, #12]
  4019d6:	687a      	ldr	r2, [r7, #4]
  4019d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4019da:	68fb      	ldr	r3, [r7, #12]
  4019dc:	3304      	adds	r3, #4
  4019de:	4618      	mov	r0, r3
  4019e0:	4b0b      	ldr	r3, [pc, #44]	; (401a10 <prvInitialiseTCBVariables+0x70>)
  4019e2:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4019e4:	68fb      	ldr	r3, [r7, #12]
  4019e6:	3318      	adds	r3, #24
  4019e8:	4618      	mov	r0, r3
  4019ea:	4b09      	ldr	r3, [pc, #36]	; (401a10 <prvInitialiseTCBVariables+0x70>)
  4019ec:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4019ee:	68fb      	ldr	r3, [r7, #12]
  4019f0:	68fa      	ldr	r2, [r7, #12]
  4019f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  4019f4:	687b      	ldr	r3, [r7, #4]
  4019f6:	f1c3 0205 	rsb	r2, r3, #5
  4019fa:	68fb      	ldr	r3, [r7, #12]
  4019fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4019fe:	68fb      	ldr	r3, [r7, #12]
  401a00:	68fa      	ldr	r2, [r7, #12]
  401a02:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  401a04:	bf00      	nop
  401a06:	3710      	adds	r7, #16
  401a08:	46bd      	mov	sp, r7
  401a0a:	bd80      	pop	{r7, pc}
  401a0c:	0040a49d 	.word	0x0040a49d
  401a10:	00400265 	.word	0x00400265

00401a14 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  401a14:	b580      	push	{r7, lr}
  401a16:	b082      	sub	sp, #8
  401a18:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401a1a:	2300      	movs	r3, #0
  401a1c:	607b      	str	r3, [r7, #4]
  401a1e:	e00c      	b.n	401a3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  401a20:	687a      	ldr	r2, [r7, #4]
  401a22:	4613      	mov	r3, r2
  401a24:	009b      	lsls	r3, r3, #2
  401a26:	4413      	add	r3, r2
  401a28:	009b      	lsls	r3, r3, #2
  401a2a:	4a12      	ldr	r2, [pc, #72]	; (401a74 <prvInitialiseTaskLists+0x60>)
  401a2c:	4413      	add	r3, r2
  401a2e:	4618      	mov	r0, r3
  401a30:	4b11      	ldr	r3, [pc, #68]	; (401a78 <prvInitialiseTaskLists+0x64>)
  401a32:	4798      	blx	r3
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401a34:	687b      	ldr	r3, [r7, #4]
  401a36:	3301      	adds	r3, #1
  401a38:	607b      	str	r3, [r7, #4]
  401a3a:	687b      	ldr	r3, [r7, #4]
  401a3c:	2b04      	cmp	r3, #4
  401a3e:	d9ef      	bls.n	401a20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  401a40:	480e      	ldr	r0, [pc, #56]	; (401a7c <prvInitialiseTaskLists+0x68>)
  401a42:	4b0d      	ldr	r3, [pc, #52]	; (401a78 <prvInitialiseTaskLists+0x64>)
  401a44:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  401a46:	480e      	ldr	r0, [pc, #56]	; (401a80 <prvInitialiseTaskLists+0x6c>)
  401a48:	4b0b      	ldr	r3, [pc, #44]	; (401a78 <prvInitialiseTaskLists+0x64>)
  401a4a:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  401a4c:	480d      	ldr	r0, [pc, #52]	; (401a84 <prvInitialiseTaskLists+0x70>)
  401a4e:	4b0a      	ldr	r3, [pc, #40]	; (401a78 <prvInitialiseTaskLists+0x64>)
  401a50:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  401a52:	480d      	ldr	r0, [pc, #52]	; (401a88 <prvInitialiseTaskLists+0x74>)
  401a54:	4b08      	ldr	r3, [pc, #32]	; (401a78 <prvInitialiseTaskLists+0x64>)
  401a56:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  401a58:	480c      	ldr	r0, [pc, #48]	; (401a8c <prvInitialiseTaskLists+0x78>)
  401a5a:	4b07      	ldr	r3, [pc, #28]	; (401a78 <prvInitialiseTaskLists+0x64>)
  401a5c:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401a5e:	4b0c      	ldr	r3, [pc, #48]	; (401a90 <prvInitialiseTaskLists+0x7c>)
  401a60:	4a06      	ldr	r2, [pc, #24]	; (401a7c <prvInitialiseTaskLists+0x68>)
  401a62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401a64:	4b0b      	ldr	r3, [pc, #44]	; (401a94 <prvInitialiseTaskLists+0x80>)
  401a66:	4a06      	ldr	r2, [pc, #24]	; (401a80 <prvInitialiseTaskLists+0x6c>)
  401a68:	601a      	str	r2, [r3, #0]
}
  401a6a:	bf00      	nop
  401a6c:	3708      	adds	r7, #8
  401a6e:	46bd      	mov	sp, r7
  401a70:	bd80      	pop	{r7, pc}
  401a72:	bf00      	nop
  401a74:	2000aa00 	.word	0x2000aa00
  401a78:	00400225 	.word	0x00400225
  401a7c:	2000aa64 	.word	0x2000aa64
  401a80:	2000aa78 	.word	0x2000aa78
  401a84:	2000aa94 	.word	0x2000aa94
  401a88:	2000aaa8 	.word	0x2000aaa8
  401a8c:	2000aac0 	.word	0x2000aac0
  401a90:	2000aa8c 	.word	0x2000aa8c
  401a94:	2000aa90 	.word	0x2000aa90

00401a98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  401a98:	b580      	push	{r7, lr}
  401a9a:	b082      	sub	sp, #8
  401a9c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401a9e:	e028      	b.n	401af2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  401aa0:	4b18      	ldr	r3, [pc, #96]	; (401b04 <prvCheckTasksWaitingTermination+0x6c>)
  401aa2:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401aa4:	4b18      	ldr	r3, [pc, #96]	; (401b08 <prvCheckTasksWaitingTermination+0x70>)
  401aa6:	681b      	ldr	r3, [r3, #0]
  401aa8:	2b00      	cmp	r3, #0
  401aaa:	bf0c      	ite	eq
  401aac:	2301      	moveq	r3, #1
  401aae:	2300      	movne	r3, #0
  401ab0:	b2db      	uxtb	r3, r3
  401ab2:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  401ab4:	4b15      	ldr	r3, [pc, #84]	; (401b0c <prvCheckTasksWaitingTermination+0x74>)
  401ab6:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  401ab8:	687b      	ldr	r3, [r7, #4]
  401aba:	2b00      	cmp	r3, #0
  401abc:	d119      	bne.n	401af2 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  401abe:	4b14      	ldr	r3, [pc, #80]	; (401b10 <prvCheckTasksWaitingTermination+0x78>)
  401ac0:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401ac2:	4b11      	ldr	r3, [pc, #68]	; (401b08 <prvCheckTasksWaitingTermination+0x70>)
  401ac4:	68db      	ldr	r3, [r3, #12]
  401ac6:	68db      	ldr	r3, [r3, #12]
  401ac8:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401aca:	683b      	ldr	r3, [r7, #0]
  401acc:	3304      	adds	r3, #4
  401ace:	4618      	mov	r0, r3
  401ad0:	4b10      	ldr	r3, [pc, #64]	; (401b14 <prvCheckTasksWaitingTermination+0x7c>)
  401ad2:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401ad4:	4b10      	ldr	r3, [pc, #64]	; (401b18 <prvCheckTasksWaitingTermination+0x80>)
  401ad6:	681b      	ldr	r3, [r3, #0]
  401ad8:	3b01      	subs	r3, #1
  401ada:	4a0f      	ldr	r2, [pc, #60]	; (401b18 <prvCheckTasksWaitingTermination+0x80>)
  401adc:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401ade:	4b0f      	ldr	r3, [pc, #60]	; (401b1c <prvCheckTasksWaitingTermination+0x84>)
  401ae0:	681b      	ldr	r3, [r3, #0]
  401ae2:	3b01      	subs	r3, #1
  401ae4:	4a0d      	ldr	r2, [pc, #52]	; (401b1c <prvCheckTasksWaitingTermination+0x84>)
  401ae6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  401ae8:	4b0d      	ldr	r3, [pc, #52]	; (401b20 <prvCheckTasksWaitingTermination+0x88>)
  401aea:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  401aec:	6838      	ldr	r0, [r7, #0]
  401aee:	4b0d      	ldr	r3, [pc, #52]	; (401b24 <prvCheckTasksWaitingTermination+0x8c>)
  401af0:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401af2:	4b0a      	ldr	r3, [pc, #40]	; (401b1c <prvCheckTasksWaitingTermination+0x84>)
  401af4:	681b      	ldr	r3, [r3, #0]
  401af6:	2b00      	cmp	r3, #0
  401af8:	d1d2      	bne.n	401aa0 <prvCheckTasksWaitingTermination+0x8>
			}
		}
	}
	#endif
}
  401afa:	bf00      	nop
  401afc:	3708      	adds	r7, #8
  401afe:	46bd      	mov	sp, r7
  401b00:	bd80      	pop	{r7, pc}
  401b02:	bf00      	nop
  401b04:	00401375 	.word	0x00401375
  401b08:	2000aaa8 	.word	0x2000aaa8
  401b0c:	00401391 	.word	0x00401391
  401b10:	00400541 	.word	0x00400541
  401b14:	00400341 	.word	0x00400341
  401b18:	2000aad4 	.word	0x2000aad4
  401b1c:	2000aabc 	.word	0x2000aabc
  401b20:	00400561 	.word	0x00400561
  401b24:	00401c09 	.word	0x00401c09

00401b28 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  401b28:	b580      	push	{r7, lr}
  401b2a:	b082      	sub	sp, #8
  401b2c:	af00      	add	r7, sp, #0
  401b2e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401b30:	4b13      	ldr	r3, [pc, #76]	; (401b80 <prvAddCurrentTaskToDelayedList+0x58>)
  401b32:	681b      	ldr	r3, [r3, #0]
  401b34:	687a      	ldr	r2, [r7, #4]
  401b36:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  401b38:	4b12      	ldr	r3, [pc, #72]	; (401b84 <prvAddCurrentTaskToDelayedList+0x5c>)
  401b3a:	681b      	ldr	r3, [r3, #0]
  401b3c:	687a      	ldr	r2, [r7, #4]
  401b3e:	429a      	cmp	r2, r3
  401b40:	d209      	bcs.n	401b56 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401b42:	4b11      	ldr	r3, [pc, #68]	; (401b88 <prvAddCurrentTaskToDelayedList+0x60>)
  401b44:	681a      	ldr	r2, [r3, #0]
  401b46:	4b0e      	ldr	r3, [pc, #56]	; (401b80 <prvAddCurrentTaskToDelayedList+0x58>)
  401b48:	681b      	ldr	r3, [r3, #0]
  401b4a:	3304      	adds	r3, #4
  401b4c:	4619      	mov	r1, r3
  401b4e:	4610      	mov	r0, r2
  401b50:	4b0e      	ldr	r3, [pc, #56]	; (401b8c <prvAddCurrentTaskToDelayedList+0x64>)
  401b52:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  401b54:	e010      	b.n	401b78 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401b56:	4b0e      	ldr	r3, [pc, #56]	; (401b90 <prvAddCurrentTaskToDelayedList+0x68>)
  401b58:	681a      	ldr	r2, [r3, #0]
  401b5a:	4b09      	ldr	r3, [pc, #36]	; (401b80 <prvAddCurrentTaskToDelayedList+0x58>)
  401b5c:	681b      	ldr	r3, [r3, #0]
  401b5e:	3304      	adds	r3, #4
  401b60:	4619      	mov	r1, r3
  401b62:	4610      	mov	r0, r2
  401b64:	4b09      	ldr	r3, [pc, #36]	; (401b8c <prvAddCurrentTaskToDelayedList+0x64>)
  401b66:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401b68:	4b0a      	ldr	r3, [pc, #40]	; (401b94 <prvAddCurrentTaskToDelayedList+0x6c>)
  401b6a:	681b      	ldr	r3, [r3, #0]
  401b6c:	687a      	ldr	r2, [r7, #4]
  401b6e:	429a      	cmp	r2, r3
  401b70:	d202      	bcs.n	401b78 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
  401b72:	4a08      	ldr	r2, [pc, #32]	; (401b94 <prvAddCurrentTaskToDelayedList+0x6c>)
  401b74:	687b      	ldr	r3, [r7, #4]
  401b76:	6013      	str	r3, [r2, #0]
}
  401b78:	bf00      	nop
  401b7a:	3708      	adds	r7, #8
  401b7c:	46bd      	mov	sp, r7
  401b7e:	bd80      	pop	{r7, pc}
  401b80:	2000a9fc 	.word	0x2000a9fc
  401b84:	2000aad8 	.word	0x2000aad8
  401b88:	2000aa90 	.word	0x2000aa90
  401b8c:	004002cf 	.word	0x004002cf
  401b90:	2000aa8c 	.word	0x2000aa8c
  401b94:	20000014 	.word	0x20000014

00401b98 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  401b98:	b580      	push	{r7, lr}
  401b9a:	b084      	sub	sp, #16
  401b9c:	af00      	add	r7, sp, #0
  401b9e:	4603      	mov	r3, r0
  401ba0:	6039      	str	r1, [r7, #0]
  401ba2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401ba4:	204c      	movs	r0, #76	; 0x4c
  401ba6:	4b15      	ldr	r3, [pc, #84]	; (401bfc <prvAllocateTCBAndStack+0x64>)
  401ba8:	4798      	blx	r3
  401baa:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  401bac:	68fb      	ldr	r3, [r7, #12]
  401bae:	2b00      	cmp	r3, #0
  401bb0:	d01e      	beq.n	401bf0 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401bb2:	683b      	ldr	r3, [r7, #0]
  401bb4:	2b00      	cmp	r3, #0
  401bb6:	d106      	bne.n	401bc6 <prvAllocateTCBAndStack+0x2e>
  401bb8:	88fb      	ldrh	r3, [r7, #6]
  401bba:	009b      	lsls	r3, r3, #2
  401bbc:	4618      	mov	r0, r3
  401bbe:	4b0f      	ldr	r3, [pc, #60]	; (401bfc <prvAllocateTCBAndStack+0x64>)
  401bc0:	4798      	blx	r3
  401bc2:	4603      	mov	r3, r0
  401bc4:	e000      	b.n	401bc8 <prvAllocateTCBAndStack+0x30>
  401bc6:	683b      	ldr	r3, [r7, #0]
  401bc8:	68fa      	ldr	r2, [r7, #12]
  401bca:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  401bcc:	68fb      	ldr	r3, [r7, #12]
  401bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bd0:	2b00      	cmp	r3, #0
  401bd2:	d105      	bne.n	401be0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  401bd4:	68f8      	ldr	r0, [r7, #12]
  401bd6:	4b0a      	ldr	r3, [pc, #40]	; (401c00 <prvAllocateTCBAndStack+0x68>)
  401bd8:	4798      	blx	r3
			pxNewTCB = NULL;
  401bda:	2300      	movs	r3, #0
  401bdc:	60fb      	str	r3, [r7, #12]
  401bde:	e007      	b.n	401bf0 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  401be0:	68fb      	ldr	r3, [r7, #12]
  401be2:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401be4:	88fb      	ldrh	r3, [r7, #6]
  401be6:	009b      	lsls	r3, r3, #2
  401be8:	461a      	mov	r2, r3
  401bea:	21a5      	movs	r1, #165	; 0xa5
  401bec:	4b05      	ldr	r3, [pc, #20]	; (401c04 <prvAllocateTCBAndStack+0x6c>)
  401bee:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  401bf0:	68fb      	ldr	r3, [r7, #12]
}
  401bf2:	4618      	mov	r0, r3
  401bf4:	3710      	adds	r7, #16
  401bf6:	46bd      	mov	sp, r7
  401bf8:	bd80      	pop	{r7, pc}
  401bfa:	bf00      	nop
  401bfc:	00400671 	.word	0x00400671
  401c00:	0040076d 	.word	0x0040076d
  401c04:	0040a2c5 	.word	0x0040a2c5

00401c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  401c08:	b580      	push	{r7, lr}
  401c0a:	b082      	sub	sp, #8
  401c0c:	af00      	add	r7, sp, #0
  401c0e:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401c10:	687b      	ldr	r3, [r7, #4]
  401c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c14:	4618      	mov	r0, r3
  401c16:	4b04      	ldr	r3, [pc, #16]	; (401c28 <prvDeleteTCB+0x20>)
  401c18:	4798      	blx	r3
		vPortFree( pxTCB );
  401c1a:	6878      	ldr	r0, [r7, #4]
  401c1c:	4b02      	ldr	r3, [pc, #8]	; (401c28 <prvDeleteTCB+0x20>)
  401c1e:	4798      	blx	r3
	}
  401c20:	bf00      	nop
  401c22:	3708      	adds	r7, #8
  401c24:	46bd      	mov	sp, r7
  401c26:	bd80      	pop	{r7, pc}
  401c28:	0040076d 	.word	0x0040076d

00401c2c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  401c2c:	b480      	push	{r7}
  401c2e:	b083      	sub	sp, #12
  401c30:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401c32:	4b05      	ldr	r3, [pc, #20]	; (401c48 <xTaskGetCurrentTaskHandle+0x1c>)
  401c34:	681b      	ldr	r3, [r3, #0]
  401c36:	607b      	str	r3, [r7, #4]

		return xReturn;
  401c38:	687b      	ldr	r3, [r7, #4]
	}
  401c3a:	4618      	mov	r0, r3
  401c3c:	370c      	adds	r7, #12
  401c3e:	46bd      	mov	sp, r7
  401c40:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c44:	4770      	bx	lr
  401c46:	bf00      	nop
  401c48:	2000a9fc 	.word	0x2000a9fc

00401c4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  401c4c:	b480      	push	{r7}
  401c4e:	b083      	sub	sp, #12
  401c50:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  401c52:	4b0b      	ldr	r3, [pc, #44]	; (401c80 <xTaskGetSchedulerState+0x34>)
  401c54:	681b      	ldr	r3, [r3, #0]
  401c56:	2b00      	cmp	r3, #0
  401c58:	d102      	bne.n	401c60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c5a:	2300      	movs	r3, #0
  401c5c:	607b      	str	r3, [r7, #4]
  401c5e:	e008      	b.n	401c72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401c60:	4b08      	ldr	r3, [pc, #32]	; (401c84 <xTaskGetSchedulerState+0x38>)
  401c62:	681b      	ldr	r3, [r3, #0]
  401c64:	2b00      	cmp	r3, #0
  401c66:	d102      	bne.n	401c6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  401c68:	2301      	movs	r3, #1
  401c6a:	607b      	str	r3, [r7, #4]
  401c6c:	e001      	b.n	401c72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401c6e:	2302      	movs	r3, #2
  401c70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  401c72:	687b      	ldr	r3, [r7, #4]
	}
  401c74:	4618      	mov	r0, r3
  401c76:	370c      	adds	r7, #12
  401c78:	46bd      	mov	sp, r7
  401c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c7e:	4770      	bx	lr
  401c80:	2000aae4 	.word	0x2000aae4
  401c84:	2000aae8 	.word	0x2000aae8

00401c88 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  401c88:	b580      	push	{r7, lr}
  401c8a:	b084      	sub	sp, #16
  401c8c:	af00      	add	r7, sp, #0
  401c8e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401c90:	687b      	ldr	r3, [r7, #4]
  401c92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401c94:	687b      	ldr	r3, [r7, #4]
  401c96:	2b00      	cmp	r3, #0
  401c98:	d041      	beq.n	401d1e <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401c9a:	68fb      	ldr	r3, [r7, #12]
  401c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c9e:	4b22      	ldr	r3, [pc, #136]	; (401d28 <vTaskPriorityInherit+0xa0>)
  401ca0:	681b      	ldr	r3, [r3, #0]
  401ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401ca4:	429a      	cmp	r2, r3
  401ca6:	d23a      	bcs.n	401d1e <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  401ca8:	4b1f      	ldr	r3, [pc, #124]	; (401d28 <vTaskPriorityInherit+0xa0>)
  401caa:	681b      	ldr	r3, [r3, #0]
  401cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cae:	f1c3 0205 	rsb	r2, r3, #5
  401cb2:	68fb      	ldr	r3, [r7, #12]
  401cb4:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401cb6:	68fb      	ldr	r3, [r7, #12]
  401cb8:	6959      	ldr	r1, [r3, #20]
  401cba:	68fb      	ldr	r3, [r7, #12]
  401cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401cbe:	4613      	mov	r3, r2
  401cc0:	009b      	lsls	r3, r3, #2
  401cc2:	4413      	add	r3, r2
  401cc4:	009b      	lsls	r3, r3, #2
  401cc6:	4a19      	ldr	r2, [pc, #100]	; (401d2c <vTaskPriorityInherit+0xa4>)
  401cc8:	4413      	add	r3, r2
  401cca:	4299      	cmp	r1, r3
  401ccc:	d122      	bne.n	401d14 <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401cce:	68fb      	ldr	r3, [r7, #12]
  401cd0:	3304      	adds	r3, #4
  401cd2:	4618      	mov	r0, r3
  401cd4:	4b16      	ldr	r3, [pc, #88]	; (401d30 <vTaskPriorityInherit+0xa8>)
  401cd6:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401cd8:	4b13      	ldr	r3, [pc, #76]	; (401d28 <vTaskPriorityInherit+0xa0>)
  401cda:	681b      	ldr	r3, [r3, #0]
  401cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401cde:	68fb      	ldr	r3, [r7, #12]
  401ce0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  401ce2:	68fb      	ldr	r3, [r7, #12]
  401ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401ce6:	4b13      	ldr	r3, [pc, #76]	; (401d34 <vTaskPriorityInherit+0xac>)
  401ce8:	681b      	ldr	r3, [r3, #0]
  401cea:	429a      	cmp	r2, r3
  401cec:	d903      	bls.n	401cf6 <vTaskPriorityInherit+0x6e>
  401cee:	68fb      	ldr	r3, [r7, #12]
  401cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cf2:	4a10      	ldr	r2, [pc, #64]	; (401d34 <vTaskPriorityInherit+0xac>)
  401cf4:	6013      	str	r3, [r2, #0]
  401cf6:	68fb      	ldr	r3, [r7, #12]
  401cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401cfa:	4613      	mov	r3, r2
  401cfc:	009b      	lsls	r3, r3, #2
  401cfe:	4413      	add	r3, r2
  401d00:	009b      	lsls	r3, r3, #2
  401d02:	4a0a      	ldr	r2, [pc, #40]	; (401d2c <vTaskPriorityInherit+0xa4>)
  401d04:	441a      	add	r2, r3
  401d06:	68fb      	ldr	r3, [r7, #12]
  401d08:	3304      	adds	r3, #4
  401d0a:	4619      	mov	r1, r3
  401d0c:	4610      	mov	r0, r2
  401d0e:	4b0a      	ldr	r3, [pc, #40]	; (401d38 <vTaskPriorityInherit+0xb0>)
  401d10:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  401d12:	e004      	b.n	401d1e <vTaskPriorityInherit+0x96>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401d14:	4b04      	ldr	r3, [pc, #16]	; (401d28 <vTaskPriorityInherit+0xa0>)
  401d16:	681b      	ldr	r3, [r3, #0]
  401d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d1a:	68fb      	ldr	r3, [r7, #12]
  401d1c:	62da      	str	r2, [r3, #44]	; 0x2c
	}
  401d1e:	bf00      	nop
  401d20:	3710      	adds	r7, #16
  401d22:	46bd      	mov	sp, r7
  401d24:	bd80      	pop	{r7, pc}
  401d26:	bf00      	nop
  401d28:	2000a9fc 	.word	0x2000a9fc
  401d2c:	2000aa00 	.word	0x2000aa00
  401d30:	00400341 	.word	0x00400341
  401d34:	2000aae0 	.word	0x2000aae0
  401d38:	0040027f 	.word	0x0040027f

00401d3c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  401d3c:	b580      	push	{r7, lr}
  401d3e:	b084      	sub	sp, #16
  401d40:	af00      	add	r7, sp, #0
  401d42:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401d44:	687b      	ldr	r3, [r7, #4]
  401d46:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  401d48:	687b      	ldr	r3, [r7, #4]
  401d4a:	2b00      	cmp	r3, #0
  401d4c:	d02c      	beq.n	401da8 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401d4e:	68fb      	ldr	r3, [r7, #12]
  401d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d52:	68fb      	ldr	r3, [r7, #12]
  401d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401d56:	429a      	cmp	r2, r3
  401d58:	d026      	beq.n	401da8 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401d5a:	68fb      	ldr	r3, [r7, #12]
  401d5c:	3304      	adds	r3, #4
  401d5e:	4618      	mov	r0, r3
  401d60:	4b13      	ldr	r3, [pc, #76]	; (401db0 <vTaskPriorityDisinherit+0x74>)
  401d62:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  401d64:	68fb      	ldr	r3, [r7, #12]
  401d66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  401d68:	68fb      	ldr	r3, [r7, #12]
  401d6a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  401d6c:	68fb      	ldr	r3, [r7, #12]
  401d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d70:	f1c3 0205 	rsb	r2, r3, #5
  401d74:	68fb      	ldr	r3, [r7, #12]
  401d76:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  401d78:	68fb      	ldr	r3, [r7, #12]
  401d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d7c:	4b0d      	ldr	r3, [pc, #52]	; (401db4 <vTaskPriorityDisinherit+0x78>)
  401d7e:	681b      	ldr	r3, [r3, #0]
  401d80:	429a      	cmp	r2, r3
  401d82:	d903      	bls.n	401d8c <vTaskPriorityDisinherit+0x50>
  401d84:	68fb      	ldr	r3, [r7, #12]
  401d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d88:	4a0a      	ldr	r2, [pc, #40]	; (401db4 <vTaskPriorityDisinherit+0x78>)
  401d8a:	6013      	str	r3, [r2, #0]
  401d8c:	68fb      	ldr	r3, [r7, #12]
  401d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d90:	4613      	mov	r3, r2
  401d92:	009b      	lsls	r3, r3, #2
  401d94:	4413      	add	r3, r2
  401d96:	009b      	lsls	r3, r3, #2
  401d98:	4a07      	ldr	r2, [pc, #28]	; (401db8 <vTaskPriorityDisinherit+0x7c>)
  401d9a:	441a      	add	r2, r3
  401d9c:	68fb      	ldr	r3, [r7, #12]
  401d9e:	3304      	adds	r3, #4
  401da0:	4619      	mov	r1, r3
  401da2:	4610      	mov	r0, r2
  401da4:	4b05      	ldr	r3, [pc, #20]	; (401dbc <vTaskPriorityDisinherit+0x80>)
  401da6:	4798      	blx	r3
			}
		}
	}
  401da8:	bf00      	nop
  401daa:	3710      	adds	r7, #16
  401dac:	46bd      	mov	sp, r7
  401dae:	bd80      	pop	{r7, pc}
  401db0:	00400341 	.word	0x00400341
  401db4:	2000aae0 	.word	0x2000aae0
  401db8:	2000aa00 	.word	0x2000aa00
  401dbc:	0040027f 	.word	0x0040027f

00401dc0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  401dc0:	b590      	push	{r4, r7, lr}
  401dc2:	b087      	sub	sp, #28
  401dc4:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  401dc6:	2300      	movs	r3, #0
  401dc8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  401dca:	4b11      	ldr	r3, [pc, #68]	; (401e10 <xTimerCreateTimerTask+0x50>)
  401dcc:	4798      	blx	r3

	if( xTimerQueue != NULL )
  401dce:	4b11      	ldr	r3, [pc, #68]	; (401e14 <xTimerCreateTimerTask+0x54>)
  401dd0:	681b      	ldr	r3, [r3, #0]
  401dd2:	2b00      	cmp	r3, #0
  401dd4:	d00f      	beq.n	401df6 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401dd6:	2300      	movs	r3, #0
  401dd8:	9303      	str	r3, [sp, #12]
  401dda:	2300      	movs	r3, #0
  401ddc:	9302      	str	r3, [sp, #8]
  401dde:	2300      	movs	r3, #0
  401de0:	9301      	str	r3, [sp, #4]
  401de2:	2304      	movs	r3, #4
  401de4:	9300      	str	r3, [sp, #0]
  401de6:	2300      	movs	r3, #0
  401de8:	f44f 7282 	mov.w	r2, #260	; 0x104
  401dec:	490a      	ldr	r1, [pc, #40]	; (401e18 <xTimerCreateTimerTask+0x58>)
  401dee:	480b      	ldr	r0, [pc, #44]	; (401e1c <xTimerCreateTimerTask+0x5c>)
  401df0:	4c0b      	ldr	r4, [pc, #44]	; (401e20 <xTimerCreateTimerTask+0x60>)
  401df2:	47a0      	blx	r4
  401df4:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  401df6:	687b      	ldr	r3, [r7, #4]
  401df8:	2b00      	cmp	r3, #0
  401dfa:	d103      	bne.n	401e04 <xTimerCreateTimerTask+0x44>
  401dfc:	4b09      	ldr	r3, [pc, #36]	; (401e24 <xTimerCreateTimerTask+0x64>)
  401dfe:	4798      	blx	r3
  401e00:	bf00      	nop
  401e02:	e7fd      	b.n	401e00 <xTimerCreateTimerTask+0x40>
	return xReturn;
  401e04:	687b      	ldr	r3, [r7, #4]
}
  401e06:	4618      	mov	r0, r3
  401e08:	370c      	adds	r7, #12
  401e0a:	46bd      	mov	sp, r7
  401e0c:	bd90      	pop	{r4, r7, pc}
  401e0e:	bf00      	nop
  401e10:	004022dd 	.word	0x004022dd
  401e14:	2000ab2c 	.word	0x2000ab2c
  401e18:	0040e7f8 	.word	0x0040e7f8
  401e1c:	00401f39 	.word	0x00401f39
  401e20:	004010e5 	.word	0x004010e5
  401e24:	00400589 	.word	0x00400589

00401e28 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  401e28:	b590      	push	{r4, r7, lr}
  401e2a:	b089      	sub	sp, #36	; 0x24
  401e2c:	af00      	add	r7, sp, #0
  401e2e:	60f8      	str	r0, [r7, #12]
  401e30:	60b9      	str	r1, [r7, #8]
  401e32:	607a      	str	r2, [r7, #4]
  401e34:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  401e36:	2300      	movs	r3, #0
  401e38:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401e3a:	4b1a      	ldr	r3, [pc, #104]	; (401ea4 <xTimerGenericCommand+0x7c>)
  401e3c:	681b      	ldr	r3, [r3, #0]
  401e3e:	2b00      	cmp	r3, #0
  401e40:	d02a      	beq.n	401e98 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401e42:	68bb      	ldr	r3, [r7, #8]
  401e44:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  401e46:	687b      	ldr	r3, [r7, #4]
  401e48:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  401e4a:	68fb      	ldr	r3, [r7, #12]
  401e4c:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  401e4e:	683b      	ldr	r3, [r7, #0]
  401e50:	2b00      	cmp	r3, #0
  401e52:	d118      	bne.n	401e86 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401e54:	4b14      	ldr	r3, [pc, #80]	; (401ea8 <xTimerGenericCommand+0x80>)
  401e56:	4798      	blx	r3
  401e58:	4603      	mov	r3, r0
  401e5a:	2b01      	cmp	r3, #1
  401e5c:	d109      	bne.n	401e72 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  401e5e:	4b11      	ldr	r3, [pc, #68]	; (401ea4 <xTimerGenericCommand+0x7c>)
  401e60:	6818      	ldr	r0, [r3, #0]
  401e62:	f107 0110 	add.w	r1, r7, #16
  401e66:	2300      	movs	r3, #0
  401e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401e6a:	4c10      	ldr	r4, [pc, #64]	; (401eac <xTimerGenericCommand+0x84>)
  401e6c:	47a0      	blx	r4
  401e6e:	61f8      	str	r0, [r7, #28]
  401e70:	e012      	b.n	401e98 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401e72:	4b0c      	ldr	r3, [pc, #48]	; (401ea4 <xTimerGenericCommand+0x7c>)
  401e74:	6818      	ldr	r0, [r3, #0]
  401e76:	f107 0110 	add.w	r1, r7, #16
  401e7a:	2300      	movs	r3, #0
  401e7c:	2200      	movs	r2, #0
  401e7e:	4c0b      	ldr	r4, [pc, #44]	; (401eac <xTimerGenericCommand+0x84>)
  401e80:	47a0      	blx	r4
  401e82:	61f8      	str	r0, [r7, #28]
  401e84:	e008      	b.n	401e98 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401e86:	4b07      	ldr	r3, [pc, #28]	; (401ea4 <xTimerGenericCommand+0x7c>)
  401e88:	6818      	ldr	r0, [r3, #0]
  401e8a:	f107 0110 	add.w	r1, r7, #16
  401e8e:	2300      	movs	r3, #0
  401e90:	683a      	ldr	r2, [r7, #0]
  401e92:	4c07      	ldr	r4, [pc, #28]	; (401eb0 <xTimerGenericCommand+0x88>)
  401e94:	47a0      	blx	r4
  401e96:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  401e98:	69fb      	ldr	r3, [r7, #28]
}
  401e9a:	4618      	mov	r0, r3
  401e9c:	3724      	adds	r7, #36	; 0x24
  401e9e:	46bd      	mov	sp, r7
  401ea0:	bd90      	pop	{r4, r7, pc}
  401ea2:	bf00      	nop
  401ea4:	2000ab2c 	.word	0x2000ab2c
  401ea8:	00401c4d 	.word	0x00401c4d
  401eac:	00400a65 	.word	0x00400a65
  401eb0:	00400bcd 	.word	0x00400bcd

00401eb4 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  401eb4:	b590      	push	{r4, r7, lr}
  401eb6:	b087      	sub	sp, #28
  401eb8:	af02      	add	r7, sp, #8
  401eba:	6078      	str	r0, [r7, #4]
  401ebc:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401ebe:	4b19      	ldr	r3, [pc, #100]	; (401f24 <prvProcessExpiredTimer+0x70>)
  401ec0:	681b      	ldr	r3, [r3, #0]
  401ec2:	68db      	ldr	r3, [r3, #12]
  401ec4:	68db      	ldr	r3, [r3, #12]
  401ec6:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  401ec8:	68fb      	ldr	r3, [r7, #12]
  401eca:	3304      	adds	r3, #4
  401ecc:	4618      	mov	r0, r3
  401ece:	4b16      	ldr	r3, [pc, #88]	; (401f28 <prvProcessExpiredTimer+0x74>)
  401ed0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  401ed2:	68fb      	ldr	r3, [r7, #12]
  401ed4:	69db      	ldr	r3, [r3, #28]
  401ed6:	2b01      	cmp	r3, #1
  401ed8:	d11b      	bne.n	401f12 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401eda:	68fb      	ldr	r3, [r7, #12]
  401edc:	699a      	ldr	r2, [r3, #24]
  401ede:	687b      	ldr	r3, [r7, #4]
  401ee0:	18d1      	adds	r1, r2, r3
  401ee2:	687b      	ldr	r3, [r7, #4]
  401ee4:	683a      	ldr	r2, [r7, #0]
  401ee6:	68f8      	ldr	r0, [r7, #12]
  401ee8:	4c10      	ldr	r4, [pc, #64]	; (401f2c <prvProcessExpiredTimer+0x78>)
  401eea:	47a0      	blx	r4
  401eec:	4603      	mov	r3, r0
  401eee:	2b01      	cmp	r3, #1
  401ef0:	d10f      	bne.n	401f12 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  401ef2:	2300      	movs	r3, #0
  401ef4:	9300      	str	r3, [sp, #0]
  401ef6:	2300      	movs	r3, #0
  401ef8:	687a      	ldr	r2, [r7, #4]
  401efa:	2100      	movs	r1, #0
  401efc:	68f8      	ldr	r0, [r7, #12]
  401efe:	4c0c      	ldr	r4, [pc, #48]	; (401f30 <prvProcessExpiredTimer+0x7c>)
  401f00:	47a0      	blx	r4
  401f02:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  401f04:	68bb      	ldr	r3, [r7, #8]
  401f06:	2b00      	cmp	r3, #0
  401f08:	d103      	bne.n	401f12 <prvProcessExpiredTimer+0x5e>
  401f0a:	4b0a      	ldr	r3, [pc, #40]	; (401f34 <prvProcessExpiredTimer+0x80>)
  401f0c:	4798      	blx	r3
  401f0e:	bf00      	nop
  401f10:	e7fd      	b.n	401f0e <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  401f12:	68fb      	ldr	r3, [r7, #12]
  401f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401f16:	68f8      	ldr	r0, [r7, #12]
  401f18:	4798      	blx	r3
}
  401f1a:	bf00      	nop
  401f1c:	3714      	adds	r7, #20
  401f1e:	46bd      	mov	sp, r7
  401f20:	bd90      	pop	{r4, r7, pc}
  401f22:	bf00      	nop
  401f24:	2000ab24 	.word	0x2000ab24
  401f28:	00400341 	.word	0x00400341
  401f2c:	00402081 	.word	0x00402081
  401f30:	00401e29 	.word	0x00401e29
  401f34:	00400589 	.word	0x00400589

00401f38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  401f38:	b580      	push	{r7, lr}
  401f3a:	b084      	sub	sp, #16
  401f3c:	af00      	add	r7, sp, #0
  401f3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401f40:	f107 0308 	add.w	r3, r7, #8
  401f44:	4618      	mov	r0, r3
  401f46:	4b05      	ldr	r3, [pc, #20]	; (401f5c <prvTimerTask+0x24>)
  401f48:	4798      	blx	r3
  401f4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  401f4c:	68bb      	ldr	r3, [r7, #8]
  401f4e:	4619      	mov	r1, r3
  401f50:	68f8      	ldr	r0, [r7, #12]
  401f52:	4b03      	ldr	r3, [pc, #12]	; (401f60 <prvTimerTask+0x28>)
  401f54:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  401f56:	4b03      	ldr	r3, [pc, #12]	; (401f64 <prvTimerTask+0x2c>)
  401f58:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401f5a:	e7f1      	b.n	401f40 <prvTimerTask+0x8>
  401f5c:	00401fed 	.word	0x00401fed
  401f60:	00401f69 	.word	0x00401f69
  401f64:	00402109 	.word	0x00402109

00401f68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  401f68:	b580      	push	{r7, lr}
  401f6a:	b084      	sub	sp, #16
  401f6c:	af00      	add	r7, sp, #0
  401f6e:	6078      	str	r0, [r7, #4]
  401f70:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  401f72:	4b17      	ldr	r3, [pc, #92]	; (401fd0 <prvProcessTimerOrBlockTask+0x68>)
  401f74:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401f76:	f107 0308 	add.w	r3, r7, #8
  401f7a:	4618      	mov	r0, r3
  401f7c:	4b15      	ldr	r3, [pc, #84]	; (401fd4 <prvProcessTimerOrBlockTask+0x6c>)
  401f7e:	4798      	blx	r3
  401f80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  401f82:	68bb      	ldr	r3, [r7, #8]
  401f84:	2b00      	cmp	r3, #0
  401f86:	d11d      	bne.n	401fc4 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401f88:	683b      	ldr	r3, [r7, #0]
  401f8a:	2b00      	cmp	r3, #0
  401f8c:	d10a      	bne.n	401fa4 <prvProcessTimerOrBlockTask+0x3c>
  401f8e:	687a      	ldr	r2, [r7, #4]
  401f90:	68fb      	ldr	r3, [r7, #12]
  401f92:	429a      	cmp	r2, r3
  401f94:	d806      	bhi.n	401fa4 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  401f96:	4b10      	ldr	r3, [pc, #64]	; (401fd8 <prvProcessTimerOrBlockTask+0x70>)
  401f98:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401f9a:	68f9      	ldr	r1, [r7, #12]
  401f9c:	6878      	ldr	r0, [r7, #4]
  401f9e:	4b0f      	ldr	r3, [pc, #60]	; (401fdc <prvProcessTimerOrBlockTask+0x74>)
  401fa0:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  401fa2:	e011      	b.n	401fc8 <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  401fa4:	4b0e      	ldr	r3, [pc, #56]	; (401fe0 <prvProcessTimerOrBlockTask+0x78>)
  401fa6:	6818      	ldr	r0, [r3, #0]
  401fa8:	687a      	ldr	r2, [r7, #4]
  401faa:	68fb      	ldr	r3, [r7, #12]
  401fac:	1ad3      	subs	r3, r2, r3
  401fae:	4619      	mov	r1, r3
  401fb0:	4b0c      	ldr	r3, [pc, #48]	; (401fe4 <prvProcessTimerOrBlockTask+0x7c>)
  401fb2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401fb4:	4b08      	ldr	r3, [pc, #32]	; (401fd8 <prvProcessTimerOrBlockTask+0x70>)
  401fb6:	4798      	blx	r3
  401fb8:	4603      	mov	r3, r0
  401fba:	2b00      	cmp	r3, #0
  401fbc:	d104      	bne.n	401fc8 <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
  401fbe:	4b0a      	ldr	r3, [pc, #40]	; (401fe8 <prvProcessTimerOrBlockTask+0x80>)
  401fc0:	4798      	blx	r3
}
  401fc2:	e001      	b.n	401fc8 <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
  401fc4:	4b04      	ldr	r3, [pc, #16]	; (401fd8 <prvProcessTimerOrBlockTask+0x70>)
  401fc6:	4798      	blx	r3
}
  401fc8:	bf00      	nop
  401fca:	3710      	adds	r7, #16
  401fcc:	46bd      	mov	sp, r7
  401fce:	bd80      	pop	{r7, pc}
  401fd0:	00401375 	.word	0x00401375
  401fd4:	00402035 	.word	0x00402035
  401fd8:	00401391 	.word	0x00401391
  401fdc:	00401eb5 	.word	0x00401eb5
  401fe0:	2000ab2c 	.word	0x2000ab2c
  401fe4:	00401081 	.word	0x00401081
  401fe8:	00400525 	.word	0x00400525

00401fec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  401fec:	b480      	push	{r7}
  401fee:	b085      	sub	sp, #20
  401ff0:	af00      	add	r7, sp, #0
  401ff2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401ff4:	4b0e      	ldr	r3, [pc, #56]	; (402030 <prvGetNextExpireTime+0x44>)
  401ff6:	681b      	ldr	r3, [r3, #0]
  401ff8:	681b      	ldr	r3, [r3, #0]
  401ffa:	2b00      	cmp	r3, #0
  401ffc:	bf0c      	ite	eq
  401ffe:	2301      	moveq	r3, #1
  402000:	2300      	movne	r3, #0
  402002:	b2db      	uxtb	r3, r3
  402004:	461a      	mov	r2, r3
  402006:	687b      	ldr	r3, [r7, #4]
  402008:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40200a:	687b      	ldr	r3, [r7, #4]
  40200c:	681b      	ldr	r3, [r3, #0]
  40200e:	2b00      	cmp	r3, #0
  402010:	d105      	bne.n	40201e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402012:	4b07      	ldr	r3, [pc, #28]	; (402030 <prvGetNextExpireTime+0x44>)
  402014:	681b      	ldr	r3, [r3, #0]
  402016:	68db      	ldr	r3, [r3, #12]
  402018:	681b      	ldr	r3, [r3, #0]
  40201a:	60fb      	str	r3, [r7, #12]
  40201c:	e001      	b.n	402022 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  40201e:	2300      	movs	r3, #0
  402020:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  402022:	68fb      	ldr	r3, [r7, #12]
}
  402024:	4618      	mov	r0, r3
  402026:	3714      	adds	r7, #20
  402028:	46bd      	mov	sp, r7
  40202a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40202e:	4770      	bx	lr
  402030:	2000ab24 	.word	0x2000ab24

00402034 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  402034:	b580      	push	{r7, lr}
  402036:	b084      	sub	sp, #16
  402038:	af00      	add	r7, sp, #0
  40203a:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  40203c:	4b0d      	ldr	r3, [pc, #52]	; (402074 <prvSampleTimeNow+0x40>)
  40203e:	4798      	blx	r3
  402040:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  402042:	4b0d      	ldr	r3, [pc, #52]	; (402078 <prvSampleTimeNow+0x44>)
  402044:	681b      	ldr	r3, [r3, #0]
  402046:	68fa      	ldr	r2, [r7, #12]
  402048:	429a      	cmp	r2, r3
  40204a:	d208      	bcs.n	40205e <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  40204c:	4b0a      	ldr	r3, [pc, #40]	; (402078 <prvSampleTimeNow+0x44>)
  40204e:	681b      	ldr	r3, [r3, #0]
  402050:	4618      	mov	r0, r3
  402052:	4b0a      	ldr	r3, [pc, #40]	; (40207c <prvSampleTimeNow+0x48>)
  402054:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  402056:	687b      	ldr	r3, [r7, #4]
  402058:	2201      	movs	r2, #1
  40205a:	601a      	str	r2, [r3, #0]
  40205c:	e002      	b.n	402064 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  40205e:	687b      	ldr	r3, [r7, #4]
  402060:	2200      	movs	r2, #0
  402062:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  402064:	4a04      	ldr	r2, [pc, #16]	; (402078 <prvSampleTimeNow+0x44>)
  402066:	68fb      	ldr	r3, [r7, #12]
  402068:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  40206a:	68fb      	ldr	r3, [r7, #12]
}
  40206c:	4618      	mov	r0, r3
  40206e:	3710      	adds	r7, #16
  402070:	46bd      	mov	sp, r7
  402072:	bd80      	pop	{r7, pc}
  402074:	004014b1 	.word	0x004014b1
  402078:	2000ab30 	.word	0x2000ab30
  40207c:	00402215 	.word	0x00402215

00402080 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  402080:	b580      	push	{r7, lr}
  402082:	b086      	sub	sp, #24
  402084:	af00      	add	r7, sp, #0
  402086:	60f8      	str	r0, [r7, #12]
  402088:	60b9      	str	r1, [r7, #8]
  40208a:	607a      	str	r2, [r7, #4]
  40208c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  40208e:	2300      	movs	r3, #0
  402090:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402092:	68fb      	ldr	r3, [r7, #12]
  402094:	68ba      	ldr	r2, [r7, #8]
  402096:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402098:	68fb      	ldr	r3, [r7, #12]
  40209a:	68fa      	ldr	r2, [r7, #12]
  40209c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  40209e:	68ba      	ldr	r2, [r7, #8]
  4020a0:	687b      	ldr	r3, [r7, #4]
  4020a2:	429a      	cmp	r2, r3
  4020a4:	d812      	bhi.n	4020cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  4020a6:	687a      	ldr	r2, [r7, #4]
  4020a8:	683b      	ldr	r3, [r7, #0]
  4020aa:	1ad2      	subs	r2, r2, r3
  4020ac:	68fb      	ldr	r3, [r7, #12]
  4020ae:	699b      	ldr	r3, [r3, #24]
  4020b0:	429a      	cmp	r2, r3
  4020b2:	d302      	bcc.n	4020ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4020b4:	2301      	movs	r3, #1
  4020b6:	617b      	str	r3, [r7, #20]
  4020b8:	e01b      	b.n	4020f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4020ba:	4b10      	ldr	r3, [pc, #64]	; (4020fc <prvInsertTimerInActiveList+0x7c>)
  4020bc:	681a      	ldr	r2, [r3, #0]
  4020be:	68fb      	ldr	r3, [r7, #12]
  4020c0:	3304      	adds	r3, #4
  4020c2:	4619      	mov	r1, r3
  4020c4:	4610      	mov	r0, r2
  4020c6:	4b0e      	ldr	r3, [pc, #56]	; (402100 <prvInsertTimerInActiveList+0x80>)
  4020c8:	4798      	blx	r3
  4020ca:	e012      	b.n	4020f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4020cc:	687a      	ldr	r2, [r7, #4]
  4020ce:	683b      	ldr	r3, [r7, #0]
  4020d0:	429a      	cmp	r2, r3
  4020d2:	d206      	bcs.n	4020e2 <prvInsertTimerInActiveList+0x62>
  4020d4:	68ba      	ldr	r2, [r7, #8]
  4020d6:	683b      	ldr	r3, [r7, #0]
  4020d8:	429a      	cmp	r2, r3
  4020da:	d302      	bcc.n	4020e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4020dc:	2301      	movs	r3, #1
  4020de:	617b      	str	r3, [r7, #20]
  4020e0:	e007      	b.n	4020f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4020e2:	4b08      	ldr	r3, [pc, #32]	; (402104 <prvInsertTimerInActiveList+0x84>)
  4020e4:	681a      	ldr	r2, [r3, #0]
  4020e6:	68fb      	ldr	r3, [r7, #12]
  4020e8:	3304      	adds	r3, #4
  4020ea:	4619      	mov	r1, r3
  4020ec:	4610      	mov	r0, r2
  4020ee:	4b04      	ldr	r3, [pc, #16]	; (402100 <prvInsertTimerInActiveList+0x80>)
  4020f0:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  4020f2:	697b      	ldr	r3, [r7, #20]
}
  4020f4:	4618      	mov	r0, r3
  4020f6:	3718      	adds	r7, #24
  4020f8:	46bd      	mov	sp, r7
  4020fa:	bd80      	pop	{r7, pc}
  4020fc:	2000ab28 	.word	0x2000ab28
  402100:	004002cf 	.word	0x004002cf
  402104:	2000ab24 	.word	0x2000ab24

00402108 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  402108:	b590      	push	{r4, r7, lr}
  40210a:	b08b      	sub	sp, #44	; 0x2c
  40210c:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40210e:	1d3b      	adds	r3, r7, #4
  402110:	4618      	mov	r0, r3
  402112:	4b38      	ldr	r3, [pc, #224]	; (4021f4 <prvProcessReceivedCommands+0xec>)
  402114:	4798      	blx	r3
  402116:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  402118:	e05d      	b.n	4021d6 <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  40211a:	693b      	ldr	r3, [r7, #16]
  40211c:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  40211e:	69bb      	ldr	r3, [r7, #24]
  402120:	2b00      	cmp	r3, #0
  402122:	d008      	beq.n	402136 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402124:	69bb      	ldr	r3, [r7, #24]
  402126:	695b      	ldr	r3, [r3, #20]
  402128:	2b00      	cmp	r3, #0
  40212a:	d004      	beq.n	402136 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  40212c:	69bb      	ldr	r3, [r7, #24]
  40212e:	3304      	adds	r3, #4
  402130:	4618      	mov	r0, r3
  402132:	4b31      	ldr	r3, [pc, #196]	; (4021f8 <prvProcessReceivedCommands+0xf0>)
  402134:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  402136:	68bb      	ldr	r3, [r7, #8]
  402138:	2b03      	cmp	r3, #3
  40213a:	d84b      	bhi.n	4021d4 <prvProcessReceivedCommands+0xcc>
  40213c:	a201      	add	r2, pc, #4	; (adr r2, 402144 <prvProcessReceivedCommands+0x3c>)
  40213e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402142:	bf00      	nop
  402144:	00402155 	.word	0x00402155
  402148:	004021d7 	.word	0x004021d7
  40214c:	004021a3 	.word	0x004021a3
  402150:	004021cd 	.word	0x004021cd
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  402154:	68fa      	ldr	r2, [r7, #12]
  402156:	69bb      	ldr	r3, [r7, #24]
  402158:	699b      	ldr	r3, [r3, #24]
  40215a:	18d1      	adds	r1, r2, r3
  40215c:	68fb      	ldr	r3, [r7, #12]
  40215e:	69fa      	ldr	r2, [r7, #28]
  402160:	69b8      	ldr	r0, [r7, #24]
  402162:	4c26      	ldr	r4, [pc, #152]	; (4021fc <prvProcessReceivedCommands+0xf4>)
  402164:	47a0      	blx	r4
  402166:	4603      	mov	r3, r0
  402168:	2b01      	cmp	r3, #1
  40216a:	d134      	bne.n	4021d6 <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40216c:	69bb      	ldr	r3, [r7, #24]
  40216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402170:	69b8      	ldr	r0, [r7, #24]
  402172:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402174:	69bb      	ldr	r3, [r7, #24]
  402176:	69db      	ldr	r3, [r3, #28]
  402178:	2b01      	cmp	r3, #1
  40217a:	d12c      	bne.n	4021d6 <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40217c:	68fa      	ldr	r2, [r7, #12]
  40217e:	69bb      	ldr	r3, [r7, #24]
  402180:	699b      	ldr	r3, [r3, #24]
  402182:	441a      	add	r2, r3
  402184:	2300      	movs	r3, #0
  402186:	9300      	str	r3, [sp, #0]
  402188:	2300      	movs	r3, #0
  40218a:	2100      	movs	r1, #0
  40218c:	69b8      	ldr	r0, [r7, #24]
  40218e:	4c1c      	ldr	r4, [pc, #112]	; (402200 <prvProcessReceivedCommands+0xf8>)
  402190:	47a0      	blx	r4
  402192:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  402194:	697b      	ldr	r3, [r7, #20]
  402196:	2b00      	cmp	r3, #0
  402198:	d11d      	bne.n	4021d6 <prvProcessReceivedCommands+0xce>
  40219a:	4b1a      	ldr	r3, [pc, #104]	; (402204 <prvProcessReceivedCommands+0xfc>)
  40219c:	4798      	blx	r3
  40219e:	bf00      	nop
  4021a0:	e7fd      	b.n	40219e <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  4021a2:	68fa      	ldr	r2, [r7, #12]
  4021a4:	69bb      	ldr	r3, [r7, #24]
  4021a6:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4021a8:	69bb      	ldr	r3, [r7, #24]
  4021aa:	699b      	ldr	r3, [r3, #24]
  4021ac:	2b00      	cmp	r3, #0
  4021ae:	d103      	bne.n	4021b8 <prvProcessReceivedCommands+0xb0>
  4021b0:	4b14      	ldr	r3, [pc, #80]	; (402204 <prvProcessReceivedCommands+0xfc>)
  4021b2:	4798      	blx	r3
  4021b4:	bf00      	nop
  4021b6:	e7fd      	b.n	4021b4 <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4021b8:	69bb      	ldr	r3, [r7, #24]
  4021ba:	699a      	ldr	r2, [r3, #24]
  4021bc:	69fb      	ldr	r3, [r7, #28]
  4021be:	18d1      	adds	r1, r2, r3
  4021c0:	69fb      	ldr	r3, [r7, #28]
  4021c2:	69fa      	ldr	r2, [r7, #28]
  4021c4:	69b8      	ldr	r0, [r7, #24]
  4021c6:	4c0d      	ldr	r4, [pc, #52]	; (4021fc <prvProcessReceivedCommands+0xf4>)
  4021c8:	47a0      	blx	r4
				break;
  4021ca:	e004      	b.n	4021d6 <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  4021cc:	69b8      	ldr	r0, [r7, #24]
  4021ce:	4b0e      	ldr	r3, [pc, #56]	; (402208 <prvProcessReceivedCommands+0x100>)
  4021d0:	4798      	blx	r3
				break;
  4021d2:	e000      	b.n	4021d6 <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  4021d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4021d6:	4b0d      	ldr	r3, [pc, #52]	; (40220c <prvProcessReceivedCommands+0x104>)
  4021d8:	6818      	ldr	r0, [r3, #0]
  4021da:	f107 0108 	add.w	r1, r7, #8
  4021de:	2300      	movs	r3, #0
  4021e0:	2200      	movs	r2, #0
  4021e2:	4c0b      	ldr	r4, [pc, #44]	; (402210 <prvProcessReceivedCommands+0x108>)
  4021e4:	47a0      	blx	r4
  4021e6:	4603      	mov	r3, r0
  4021e8:	2b00      	cmp	r3, #0
  4021ea:	d196      	bne.n	40211a <prvProcessReceivedCommands+0x12>
		}
	}
}
  4021ec:	bf00      	nop
  4021ee:	3724      	adds	r7, #36	; 0x24
  4021f0:	46bd      	mov	sp, r7
  4021f2:	bd90      	pop	{r4, r7, pc}
  4021f4:	00402035 	.word	0x00402035
  4021f8:	00400341 	.word	0x00400341
  4021fc:	00402081 	.word	0x00402081
  402200:	00401e29 	.word	0x00401e29
  402204:	00400589 	.word	0x00400589
  402208:	0040076d 	.word	0x0040076d
  40220c:	2000ab2c 	.word	0x2000ab2c
  402210:	00400c89 	.word	0x00400c89

00402214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  402214:	b590      	push	{r4, r7, lr}
  402216:	b08b      	sub	sp, #44	; 0x2c
  402218:	af02      	add	r7, sp, #8
  40221a:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40221c:	e03e      	b.n	40229c <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40221e:	4b29      	ldr	r3, [pc, #164]	; (4022c4 <prvSwitchTimerLists+0xb0>)
  402220:	681b      	ldr	r3, [r3, #0]
  402222:	68db      	ldr	r3, [r3, #12]
  402224:	681b      	ldr	r3, [r3, #0]
  402226:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402228:	4b26      	ldr	r3, [pc, #152]	; (4022c4 <prvSwitchTimerLists+0xb0>)
  40222a:	681b      	ldr	r3, [r3, #0]
  40222c:	68db      	ldr	r3, [r3, #12]
  40222e:	68db      	ldr	r3, [r3, #12]
  402230:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  402232:	69bb      	ldr	r3, [r7, #24]
  402234:	3304      	adds	r3, #4
  402236:	4618      	mov	r0, r3
  402238:	4b23      	ldr	r3, [pc, #140]	; (4022c8 <prvSwitchTimerLists+0xb4>)
  40223a:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40223c:	69bb      	ldr	r3, [r7, #24]
  40223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402240:	69b8      	ldr	r0, [r7, #24]
  402242:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402244:	69bb      	ldr	r3, [r7, #24]
  402246:	69db      	ldr	r3, [r3, #28]
  402248:	2b01      	cmp	r3, #1
  40224a:	d127      	bne.n	40229c <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  40224c:	69bb      	ldr	r3, [r7, #24]
  40224e:	699a      	ldr	r2, [r3, #24]
  402250:	69fb      	ldr	r3, [r7, #28]
  402252:	4413      	add	r3, r2
  402254:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  402256:	697a      	ldr	r2, [r7, #20]
  402258:	69fb      	ldr	r3, [r7, #28]
  40225a:	429a      	cmp	r2, r3
  40225c:	d90e      	bls.n	40227c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40225e:	69bb      	ldr	r3, [r7, #24]
  402260:	697a      	ldr	r2, [r7, #20]
  402262:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402264:	69bb      	ldr	r3, [r7, #24]
  402266:	69ba      	ldr	r2, [r7, #24]
  402268:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40226a:	4b16      	ldr	r3, [pc, #88]	; (4022c4 <prvSwitchTimerLists+0xb0>)
  40226c:	681a      	ldr	r2, [r3, #0]
  40226e:	69bb      	ldr	r3, [r7, #24]
  402270:	3304      	adds	r3, #4
  402272:	4619      	mov	r1, r3
  402274:	4610      	mov	r0, r2
  402276:	4b15      	ldr	r3, [pc, #84]	; (4022cc <prvSwitchTimerLists+0xb8>)
  402278:	4798      	blx	r3
  40227a:	e00f      	b.n	40229c <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  40227c:	2300      	movs	r3, #0
  40227e:	9300      	str	r3, [sp, #0]
  402280:	2300      	movs	r3, #0
  402282:	69fa      	ldr	r2, [r7, #28]
  402284:	2100      	movs	r1, #0
  402286:	69b8      	ldr	r0, [r7, #24]
  402288:	4c11      	ldr	r4, [pc, #68]	; (4022d0 <prvSwitchTimerLists+0xbc>)
  40228a:	47a0      	blx	r4
  40228c:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  40228e:	693b      	ldr	r3, [r7, #16]
  402290:	2b00      	cmp	r3, #0
  402292:	d103      	bne.n	40229c <prvSwitchTimerLists+0x88>
  402294:	4b0f      	ldr	r3, [pc, #60]	; (4022d4 <prvSwitchTimerLists+0xc0>)
  402296:	4798      	blx	r3
  402298:	bf00      	nop
  40229a:	e7fd      	b.n	402298 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40229c:	4b09      	ldr	r3, [pc, #36]	; (4022c4 <prvSwitchTimerLists+0xb0>)
  40229e:	681b      	ldr	r3, [r3, #0]
  4022a0:	681b      	ldr	r3, [r3, #0]
  4022a2:	2b00      	cmp	r3, #0
  4022a4:	d1bb      	bne.n	40221e <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  4022a6:	4b07      	ldr	r3, [pc, #28]	; (4022c4 <prvSwitchTimerLists+0xb0>)
  4022a8:	681b      	ldr	r3, [r3, #0]
  4022aa:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  4022ac:	4b0a      	ldr	r3, [pc, #40]	; (4022d8 <prvSwitchTimerLists+0xc4>)
  4022ae:	681b      	ldr	r3, [r3, #0]
  4022b0:	4a04      	ldr	r2, [pc, #16]	; (4022c4 <prvSwitchTimerLists+0xb0>)
  4022b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  4022b4:	4a08      	ldr	r2, [pc, #32]	; (4022d8 <prvSwitchTimerLists+0xc4>)
  4022b6:	68fb      	ldr	r3, [r7, #12]
  4022b8:	6013      	str	r3, [r2, #0]
}
  4022ba:	bf00      	nop
  4022bc:	3724      	adds	r7, #36	; 0x24
  4022be:	46bd      	mov	sp, r7
  4022c0:	bd90      	pop	{r4, r7, pc}
  4022c2:	bf00      	nop
  4022c4:	2000ab24 	.word	0x2000ab24
  4022c8:	00400341 	.word	0x00400341
  4022cc:	004002cf 	.word	0x004002cf
  4022d0:	00401e29 	.word	0x00401e29
  4022d4:	00400589 	.word	0x00400589
  4022d8:	2000ab28 	.word	0x2000ab28

004022dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4022dc:	b580      	push	{r7, lr}
  4022de:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4022e0:	4b0e      	ldr	r3, [pc, #56]	; (40231c <prvCheckForValidListAndQueue+0x40>)
  4022e2:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4022e4:	4b0e      	ldr	r3, [pc, #56]	; (402320 <prvCheckForValidListAndQueue+0x44>)
  4022e6:	681b      	ldr	r3, [r3, #0]
  4022e8:	2b00      	cmp	r3, #0
  4022ea:	d113      	bne.n	402314 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  4022ec:	480d      	ldr	r0, [pc, #52]	; (402324 <prvCheckForValidListAndQueue+0x48>)
  4022ee:	4b0e      	ldr	r3, [pc, #56]	; (402328 <prvCheckForValidListAndQueue+0x4c>)
  4022f0:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  4022f2:	480e      	ldr	r0, [pc, #56]	; (40232c <prvCheckForValidListAndQueue+0x50>)
  4022f4:	4b0c      	ldr	r3, [pc, #48]	; (402328 <prvCheckForValidListAndQueue+0x4c>)
  4022f6:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  4022f8:	4b0d      	ldr	r3, [pc, #52]	; (402330 <prvCheckForValidListAndQueue+0x54>)
  4022fa:	4a0a      	ldr	r2, [pc, #40]	; (402324 <prvCheckForValidListAndQueue+0x48>)
  4022fc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4022fe:	4b0d      	ldr	r3, [pc, #52]	; (402334 <prvCheckForValidListAndQueue+0x58>)
  402300:	4a0a      	ldr	r2, [pc, #40]	; (40232c <prvCheckForValidListAndQueue+0x50>)
  402302:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  402304:	2200      	movs	r2, #0
  402306:	210c      	movs	r1, #12
  402308:	2005      	movs	r0, #5
  40230a:	4b0b      	ldr	r3, [pc, #44]	; (402338 <prvCheckForValidListAndQueue+0x5c>)
  40230c:	4798      	blx	r3
  40230e:	4602      	mov	r2, r0
  402310:	4b03      	ldr	r3, [pc, #12]	; (402320 <prvCheckForValidListAndQueue+0x44>)
  402312:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  402314:	4b09      	ldr	r3, [pc, #36]	; (40233c <prvCheckForValidListAndQueue+0x60>)
  402316:	4798      	blx	r3
}
  402318:	bf00      	nop
  40231a:	bd80      	pop	{r7, pc}
  40231c:	00400541 	.word	0x00400541
  402320:	2000ab2c 	.word	0x2000ab2c
  402324:	2000aafc 	.word	0x2000aafc
  402328:	00400225 	.word	0x00400225
  40232c:	2000ab10 	.word	0x2000ab10
  402330:	2000ab24 	.word	0x2000ab24
  402334:	2000ab28 	.word	0x2000ab28
  402338:	004009cd 	.word	0x004009cd
  40233c:	00400561 	.word	0x00400561

00402340 <osc_get_rate>:
{
  402340:	b480      	push	{r7}
  402342:	b083      	sub	sp, #12
  402344:	af00      	add	r7, sp, #0
  402346:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402348:	687b      	ldr	r3, [r7, #4]
  40234a:	2b07      	cmp	r3, #7
  40234c:	d825      	bhi.n	40239a <osc_get_rate+0x5a>
  40234e:	a201      	add	r2, pc, #4	; (adr r2, 402354 <osc_get_rate+0x14>)
  402350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402354:	00402375 	.word	0x00402375
  402358:	0040237b 	.word	0x0040237b
  40235c:	00402381 	.word	0x00402381
  402360:	00402387 	.word	0x00402387
  402364:	0040238b 	.word	0x0040238b
  402368:	0040238f 	.word	0x0040238f
  40236c:	00402393 	.word	0x00402393
  402370:	00402397 	.word	0x00402397
		return OSC_SLCK_32K_RC_HZ;
  402374:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402378:	e010      	b.n	40239c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40237a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40237e:	e00d      	b.n	40239c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402384:	e00a      	b.n	40239c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402386:	4b08      	ldr	r3, [pc, #32]	; (4023a8 <osc_get_rate+0x68>)
  402388:	e008      	b.n	40239c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40238a:	4b08      	ldr	r3, [pc, #32]	; (4023ac <osc_get_rate+0x6c>)
  40238c:	e006      	b.n	40239c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40238e:	4b08      	ldr	r3, [pc, #32]	; (4023b0 <osc_get_rate+0x70>)
  402390:	e004      	b.n	40239c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402392:	4b07      	ldr	r3, [pc, #28]	; (4023b0 <osc_get_rate+0x70>)
  402394:	e002      	b.n	40239c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402396:	4b06      	ldr	r3, [pc, #24]	; (4023b0 <osc_get_rate+0x70>)
  402398:	e000      	b.n	40239c <osc_get_rate+0x5c>
	return 0;
  40239a:	2300      	movs	r3, #0
}
  40239c:	4618      	mov	r0, r3
  40239e:	370c      	adds	r7, #12
  4023a0:	46bd      	mov	sp, r7
  4023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023a6:	4770      	bx	lr
  4023a8:	003d0900 	.word	0x003d0900
  4023ac:	007a1200 	.word	0x007a1200
  4023b0:	00b71b00 	.word	0x00b71b00

004023b4 <sysclk_get_main_hz>:
{
  4023b4:	b580      	push	{r7, lr}
  4023b6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4023b8:	2006      	movs	r0, #6
  4023ba:	4b03      	ldr	r3, [pc, #12]	; (4023c8 <sysclk_get_main_hz+0x14>)
  4023bc:	4798      	blx	r3
  4023be:	4603      	mov	r3, r0
  4023c0:	011b      	lsls	r3, r3, #4
}
  4023c2:	4618      	mov	r0, r3
  4023c4:	bd80      	pop	{r7, pc}
  4023c6:	bf00      	nop
  4023c8:	00402341 	.word	0x00402341

004023cc <sysclk_get_cpu_hz>:
{
  4023cc:	b580      	push	{r7, lr}
  4023ce:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4023d0:	4b02      	ldr	r3, [pc, #8]	; (4023dc <sysclk_get_cpu_hz+0x10>)
  4023d2:	4798      	blx	r3
  4023d4:	4603      	mov	r3, r0
  4023d6:	085b      	lsrs	r3, r3, #1
}
  4023d8:	4618      	mov	r0, r3
  4023da:	bd80      	pop	{r7, pc}
  4023dc:	004023b5 	.word	0x004023b5

004023e0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4023e0:	b580      	push	{r7, lr}
  4023e2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4023e4:	4b02      	ldr	r3, [pc, #8]	; (4023f0 <sysclk_get_peripheral_hz+0x10>)
  4023e6:	4798      	blx	r3
  4023e8:	4603      	mov	r3, r0
  4023ea:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4023ec:	4618      	mov	r0, r3
  4023ee:	bd80      	pop	{r7, pc}
  4023f0:	004023b5 	.word	0x004023b5

004023f4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4023f4:	b580      	push	{r7, lr}
  4023f6:	b082      	sub	sp, #8
  4023f8:	af00      	add	r7, sp, #0
  4023fa:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4023fc:	6878      	ldr	r0, [r7, #4]
  4023fe:	4b03      	ldr	r3, [pc, #12]	; (40240c <sysclk_enable_peripheral_clock+0x18>)
  402400:	4798      	blx	r3
}
  402402:	bf00      	nop
  402404:	3708      	adds	r7, #8
  402406:	46bd      	mov	sp, r7
  402408:	bd80      	pop	{r7, pc}
  40240a:	bf00      	nop
  40240c:	00409ad5 	.word	0x00409ad5

00402410 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
  402410:	b580      	push	{r7, lr}
  402412:	b082      	sub	sp, #8
  402414:	af00      	add	r7, sp, #0
  402416:	6078      	str	r0, [r7, #4]
  402418:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
  40241a:	4b10      	ldr	r3, [pc, #64]	; (40245c <twi_master_setup+0x4c>)
  40241c:	4798      	blx	r3
  40241e:	4602      	mov	r2, r0
  402420:	683b      	ldr	r3, [r7, #0]
  402422:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
  402424:	683b      	ldr	r3, [r7, #0]
  402426:	2200      	movs	r2, #0
  402428:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
  40242a:	687b      	ldr	r3, [r7, #4]
  40242c:	4a0c      	ldr	r2, [pc, #48]	; (402460 <twi_master_setup+0x50>)
  40242e:	4293      	cmp	r3, r2
  402430:	d103      	bne.n	40243a <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
  402432:	2011      	movs	r0, #17
  402434:	4b0b      	ldr	r3, [pc, #44]	; (402464 <twi_master_setup+0x54>)
  402436:	4798      	blx	r3
  402438:	e006      	b.n	402448 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
  40243a:	687b      	ldr	r3, [r7, #4]
  40243c:	4a0a      	ldr	r2, [pc, #40]	; (402468 <twi_master_setup+0x58>)
  40243e:	4293      	cmp	r3, r2
  402440:	d102      	bne.n	402448 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
  402442:	2012      	movs	r0, #18
  402444:	4b07      	ldr	r3, [pc, #28]	; (402464 <twi_master_setup+0x54>)
  402446:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
  402448:	6839      	ldr	r1, [r7, #0]
  40244a:	6878      	ldr	r0, [r7, #4]
  40244c:	4b07      	ldr	r3, [pc, #28]	; (40246c <twi_master_setup+0x5c>)
  40244e:	4798      	blx	r3
  402450:	4603      	mov	r3, r0
}
  402452:	4618      	mov	r0, r3
  402454:	3708      	adds	r7, #8
  402456:	46bd      	mov	sp, r7
  402458:	bd80      	pop	{r7, pc}
  40245a:	bf00      	nop
  40245c:	004023e1 	.word	0x004023e1
  402460:	400a8000 	.word	0x400a8000
  402464:	004023f5 	.word	0x004023f5
  402468:	400ac000 	.word	0x400ac000
  40246c:	00409b81 	.word	0x00409b81

00402470 <bsp_hw_init>:
static void m_bsp_i2c_init(void);
static void m_bsp_sdcard_init(void);

/* Function definitions ----------------------------------------------- */
void bsp_hw_init(void)
{
  402470:	b580      	push	{r7, lr}
  402472:	af00      	add	r7, sp, #0
  m_bsp_i2c_init();
  402474:	4b04      	ldr	r3, [pc, #16]	; (402488 <bsp_hw_init+0x18>)
  402476:	4798      	blx	r3
  bsp_rtc_init();
  402478:	4b04      	ldr	r3, [pc, #16]	; (40248c <bsp_hw_init+0x1c>)
  40247a:	4798      	blx	r3
  m_bsp_sdcard_init();
  40247c:	4b04      	ldr	r3, [pc, #16]	; (402490 <bsp_hw_init+0x20>)
  40247e:	4798      	blx	r3
  bsp_gpio_init();
  402480:	4b04      	ldr	r3, [pc, #16]	; (402494 <bsp_hw_init+0x24>)
  402482:	4798      	blx	r3
}
  402484:	bf00      	nop
  402486:	bd80      	pop	{r7, pc}
  402488:	00402591 	.word	0x00402591
  40248c:	00402d3d 	.word	0x00402d3d
  402490:	004025c5 	.word	0x004025c5
  402494:	00402b1d 	.word	0x00402b1d

00402498 <bsp_i2c_write>:

int bsp_i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t *p_data, uint32_t len)
{
  402498:	b580      	push	{r7, lr}
  40249a:	b08a      	sub	sp, #40	; 0x28
  40249c:	af00      	add	r7, sp, #0
  40249e:	60ba      	str	r2, [r7, #8]
  4024a0:	607b      	str	r3, [r7, #4]
  4024a2:	4603      	mov	r3, r0
  4024a4:	73fb      	strb	r3, [r7, #15]
  4024a6:	460b      	mov	r3, r1
  4024a8:	73bb      	strb	r3, [r7, #14]
  twi_package_t packet_write;

  packet_write.chip        = slave_addr;        // TWI slave bus address
  4024aa:	7bfb      	ldrb	r3, [r7, #15]
  4024ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  packet_write.addr[0]     = reg_addr;          // TWI slave memory address data
  4024b0:	7bbb      	ldrb	r3, [r7, #14]
  4024b2:	753b      	strb	r3, [r7, #20]
  packet_write.addr_length = sizeof(reg_addr);  // TWI slave memory address data size
  4024b4:	2301      	movs	r3, #1
  4024b6:	61bb      	str	r3, [r7, #24]
  packet_write.buffer      = (void *)p_data;    // Transfer data source buffer
  4024b8:	68bb      	ldr	r3, [r7, #8]
  4024ba:	61fb      	str	r3, [r7, #28]
  packet_write.length      = len;               // Transfer data size (bytes)
  4024bc:	687b      	ldr	r3, [r7, #4]
  4024be:	623b      	str	r3, [r7, #32]

  return twi_master_write(TWI0, &packet_write);
  4024c0:	f107 0314 	add.w	r3, r7, #20
  4024c4:	4619      	mov	r1, r3
  4024c6:	4804      	ldr	r0, [pc, #16]	; (4024d8 <bsp_i2c_write+0x40>)
  4024c8:	4b04      	ldr	r3, [pc, #16]	; (4024dc <bsp_i2c_write+0x44>)
  4024ca:	4798      	blx	r3
  4024cc:	4603      	mov	r3, r0
}
  4024ce:	4618      	mov	r0, r3
  4024d0:	3728      	adds	r7, #40	; 0x28
  4024d2:	46bd      	mov	sp, r7
  4024d4:	bd80      	pop	{r7, pc}
  4024d6:	bf00      	nop
  4024d8:	400a8000 	.word	0x400a8000
  4024dc:	00409d35 	.word	0x00409d35

004024e0 <bsp_delay>:

void bsp_delay(uint32_t ms)
{
  4024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024e2:	b083      	sub	sp, #12
  4024e4:	af00      	add	r7, sp, #0
  4024e6:	6078      	str	r0, [r7, #4]
  delay_ms(ms);
  4024e8:	687b      	ldr	r3, [r7, #4]
  4024ea:	2b00      	cmp	r3, #0
  4024ec:	d026      	beq.n	40253c <bsp_delay+0x5c>
  4024ee:	687b      	ldr	r3, [r7, #4]
  4024f0:	461d      	mov	r5, r3
  4024f2:	f04f 0600 	mov.w	r6, #0
  4024f6:	4b22      	ldr	r3, [pc, #136]	; (402580 <bsp_delay+0xa0>)
  4024f8:	4798      	blx	r3
  4024fa:	4603      	mov	r3, r0
  4024fc:	f04f 0400 	mov.w	r4, #0
  402500:	fb03 f106 	mul.w	r1, r3, r6
  402504:	fb05 f204 	mul.w	r2, r5, r4
  402508:	440a      	add	r2, r1
  40250a:	fba5 3403 	umull	r3, r4, r5, r3
  40250e:	4422      	add	r2, r4
  402510:	4614      	mov	r4, r2
  402512:	f243 61af 	movw	r1, #13999	; 0x36af
  402516:	f04f 0200 	mov.w	r2, #0
  40251a:	185d      	adds	r5, r3, r1
  40251c:	eb44 0602 	adc.w	r6, r4, r2
  402520:	4628      	mov	r0, r5
  402522:	4631      	mov	r1, r6
  402524:	4c17      	ldr	r4, [pc, #92]	; (402584 <bsp_delay+0xa4>)
  402526:	f243 62b0 	movw	r2, #14000	; 0x36b0
  40252a:	f04f 0300 	mov.w	r3, #0
  40252e:	47a0      	blx	r4
  402530:	4603      	mov	r3, r0
  402532:	460c      	mov	r4, r1
  402534:	4618      	mov	r0, r3
  402536:	4b14      	ldr	r3, [pc, #80]	; (402588 <bsp_delay+0xa8>)
  402538:	4798      	blx	r3
}
  40253a:	e016      	b.n	40256a <bsp_delay+0x8a>
  delay_ms(ms);
  40253c:	4b10      	ldr	r3, [pc, #64]	; (402580 <bsp_delay+0xa0>)
  40253e:	4798      	blx	r3
  402540:	4603      	mov	r3, r0
  402542:	f04f 0400 	mov.w	r4, #0
  402546:	a20c      	add	r2, pc, #48	; (adr r2, 402578 <bsp_delay+0x98>)
  402548:	e9d2 1200 	ldrd	r1, r2, [r2]
  40254c:	185d      	adds	r5, r3, r1
  40254e:	eb44 0602 	adc.w	r6, r4, r2
  402552:	4628      	mov	r0, r5
  402554:	4631      	mov	r1, r6
  402556:	4c0b      	ldr	r4, [pc, #44]	; (402584 <bsp_delay+0xa4>)
  402558:	4a0c      	ldr	r2, [pc, #48]	; (40258c <bsp_delay+0xac>)
  40255a:	f04f 0300 	mov.w	r3, #0
  40255e:	47a0      	blx	r4
  402560:	4603      	mov	r3, r0
  402562:	460c      	mov	r4, r1
  402564:	4618      	mov	r0, r3
  402566:	4b08      	ldr	r3, [pc, #32]	; (402588 <bsp_delay+0xa8>)
  402568:	4798      	blx	r3
}
  40256a:	bf00      	nop
  40256c:	370c      	adds	r7, #12
  40256e:	46bd      	mov	sp, r7
  402570:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402572:	bf00      	nop
  402574:	f3af 8000 	nop.w
  402578:	00d59f7f 	.word	0x00d59f7f
  40257c:	00000000 	.word	0x00000000
  402580:	004023cd 	.word	0x004023cd
  402584:	00409e31 	.word	0x00409e31
  402588:	20000001 	.word	0x20000001
  40258c:	00d59f80 	.word	0x00d59f80

00402590 <m_bsp_i2c_init>:
/* Private function definitions ---------------------------------------- */
/**
 * @brief I2C init
 */
static void m_bsp_i2c_init(void)
{
  402590:	b580      	push	{r7, lr}
  402592:	b084      	sub	sp, #16
  402594:	af00      	add	r7, sp, #0
  twi_master_options_t opt = {
  402596:	1d3b      	adds	r3, r7, #4
  402598:	2200      	movs	r2, #0
  40259a:	601a      	str	r2, [r3, #0]
  40259c:	605a      	str	r2, [r3, #4]
  40259e:	609a      	str	r2, [r3, #8]
  4025a0:	4b05      	ldr	r3, [pc, #20]	; (4025b8 <m_bsp_i2c_init+0x28>)
  4025a2:	60bb      	str	r3, [r7, #8]
      .speed = 100000
  };

  twi_master_setup(TWI0, &opt);
  4025a4:	1d3b      	adds	r3, r7, #4
  4025a6:	4619      	mov	r1, r3
  4025a8:	4804      	ldr	r0, [pc, #16]	; (4025bc <m_bsp_i2c_init+0x2c>)
  4025aa:	4b05      	ldr	r3, [pc, #20]	; (4025c0 <m_bsp_i2c_init+0x30>)
  4025ac:	4798      	blx	r3
}
  4025ae:	bf00      	nop
  4025b0:	3710      	adds	r7, #16
  4025b2:	46bd      	mov	sp, r7
  4025b4:	bd80      	pop	{r7, pc}
  4025b6:	bf00      	nop
  4025b8:	000186a0 	.word	0x000186a0
  4025bc:	400a8000 	.word	0x400a8000
  4025c0:	00402411 	.word	0x00402411

004025c4 <m_bsp_sdcard_init>:

/**
 * @brief Sdcard init
 */
static void m_bsp_sdcard_init(void)
{
  4025c4:	b580      	push	{r7, lr}
  4025c6:	b082      	sub	sp, #8
  4025c8:	af00      	add	r7, sp, #0
  Ctrl_status status;

  // Enable PIOA clock to detect Card Detect (CD) change
  sysclk_enable_peripheral_clock(ID_PIOA);
  4025ca:	2009      	movs	r0, #9
  4025cc:	4b10      	ldr	r3, [pc, #64]	; (402610 <m_bsp_sdcard_init+0x4c>)
  4025ce:	4798      	blx	r3

  // Configure SD card pins as per MCI peripheral (periph C)
  pio_set_peripheral(PIOA, PIO_PERIPH_C, PIO_PA30C_MCDA0 | // MCI Data 0
  4025d0:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
  4025d4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4025d8:	480e      	ldr	r0, [pc, #56]	; (402614 <m_bsp_sdcard_init+0x50>)
  4025da:	4b0f      	ldr	r3, [pc, #60]	; (402618 <m_bsp_sdcard_init+0x54>)
  4025dc:	4798      	blx	r3
                                         PIO_PA27C_MCDA3 | // MCI Data 3
                                         PIO_PA28C_MCCDA | // MCI Command
                                         PIO_PA29C_MCCK);  // MCI Clock

  // Initialize SD MMC stack
  sd_mmc_init();
  4025de:	4b0f      	ldr	r3, [pc, #60]	; (40261c <m_bsp_sdcard_init+0x58>)
  4025e0:	4798      	blx	r3

  //  Wait until SD stack initialized and SD card inserted
  do
  {
    // Check if stack ready
    status = sd_mmc_test_unit_ready(0);
  4025e2:	2000      	movs	r0, #0
  4025e4:	4b0e      	ldr	r3, [pc, #56]	; (402620 <m_bsp_sdcard_init+0x5c>)
  4025e6:	4798      	blx	r3
  4025e8:	4603      	mov	r3, r0
  4025ea:	71fb      	strb	r3, [r7, #7]
    if (status == CTRL_FAIL)
  4025ec:	79fb      	ldrb	r3, [r7, #7]
  4025ee:	2b01      	cmp	r3, #1
  4025f0:	d106      	bne.n	402600 <m_bsp_sdcard_init+0x3c>
    {
      // Wait for a card to be inserted
      while (sd_mmc_check(0) != CTRL_NO_PRESENT)
  4025f2:	bf00      	nop
  4025f4:	2000      	movs	r0, #0
  4025f6:	4b0b      	ldr	r3, [pc, #44]	; (402624 <m_bsp_sdcard_init+0x60>)
  4025f8:	4798      	blx	r3
  4025fa:	4603      	mov	r3, r0
  4025fc:	2b02      	cmp	r3, #2
  4025fe:	d1f9      	bne.n	4025f4 <m_bsp_sdcard_init+0x30>
      {
        // Use a timeout here for real projects.
      }
    }
  } while (status != CTRL_GOOD);
  402600:	79fb      	ldrb	r3, [r7, #7]
  402602:	2b00      	cmp	r3, #0
  402604:	d1ed      	bne.n	4025e2 <m_bsp_sdcard_init+0x1e>
}
  402606:	bf00      	nop
  402608:	3708      	adds	r7, #8
  40260a:	46bd      	mov	sp, r7
  40260c:	bd80      	pop	{r7, pc}
  40260e:	bf00      	nop
  402610:	004023f5 	.word	0x004023f5
  402614:	400e0e00 	.word	0x400e0e00
  402618:	00409739 	.word	0x00409739
  40261c:	0040442d 	.word	0x0040442d
  402620:	004048e5 	.word	0x004048e5
  402624:	00404471 	.word	0x00404471

00402628 <osc_get_rate>:
{
  402628:	b480      	push	{r7}
  40262a:	b083      	sub	sp, #12
  40262c:	af00      	add	r7, sp, #0
  40262e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402630:	687b      	ldr	r3, [r7, #4]
  402632:	2b07      	cmp	r3, #7
  402634:	d825      	bhi.n	402682 <osc_get_rate+0x5a>
  402636:	a201      	add	r2, pc, #4	; (adr r2, 40263c <osc_get_rate+0x14>)
  402638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40263c:	0040265d 	.word	0x0040265d
  402640:	00402663 	.word	0x00402663
  402644:	00402669 	.word	0x00402669
  402648:	0040266f 	.word	0x0040266f
  40264c:	00402673 	.word	0x00402673
  402650:	00402677 	.word	0x00402677
  402654:	0040267b 	.word	0x0040267b
  402658:	0040267f 	.word	0x0040267f
		return OSC_SLCK_32K_RC_HZ;
  40265c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402660:	e010      	b.n	402684 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402666:	e00d      	b.n	402684 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40266c:	e00a      	b.n	402684 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40266e:	4b08      	ldr	r3, [pc, #32]	; (402690 <osc_get_rate+0x68>)
  402670:	e008      	b.n	402684 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402672:	4b08      	ldr	r3, [pc, #32]	; (402694 <osc_get_rate+0x6c>)
  402674:	e006      	b.n	402684 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402676:	4b08      	ldr	r3, [pc, #32]	; (402698 <osc_get_rate+0x70>)
  402678:	e004      	b.n	402684 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40267a:	4b07      	ldr	r3, [pc, #28]	; (402698 <osc_get_rate+0x70>)
  40267c:	e002      	b.n	402684 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40267e:	4b06      	ldr	r3, [pc, #24]	; (402698 <osc_get_rate+0x70>)
  402680:	e000      	b.n	402684 <osc_get_rate+0x5c>
	return 0;
  402682:	2300      	movs	r3, #0
}
  402684:	4618      	mov	r0, r3
  402686:	370c      	adds	r7, #12
  402688:	46bd      	mov	sp, r7
  40268a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40268e:	4770      	bx	lr
  402690:	003d0900 	.word	0x003d0900
  402694:	007a1200 	.word	0x007a1200
  402698:	00b71b00 	.word	0x00b71b00

0040269c <sysclk_get_main_hz>:
{
  40269c:	b580      	push	{r7, lr}
  40269e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4026a0:	2006      	movs	r0, #6
  4026a2:	4b03      	ldr	r3, [pc, #12]	; (4026b0 <sysclk_get_main_hz+0x14>)
  4026a4:	4798      	blx	r3
  4026a6:	4603      	mov	r3, r0
  4026a8:	011b      	lsls	r3, r3, #4
}
  4026aa:	4618      	mov	r0, r3
  4026ac:	bd80      	pop	{r7, pc}
  4026ae:	bf00      	nop
  4026b0:	00402629 	.word	0x00402629

004026b4 <sysclk_get_cpu_hz>:
{
  4026b4:	b580      	push	{r7, lr}
  4026b6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4026b8:	4b02      	ldr	r3, [pc, #8]	; (4026c4 <sysclk_get_cpu_hz+0x10>)
  4026ba:	4798      	blx	r3
  4026bc:	4603      	mov	r3, r0
  4026be:	085b      	lsrs	r3, r3, #1
}
  4026c0:	4618      	mov	r0, r3
  4026c2:	bd80      	pop	{r7, pc}
  4026c4:	0040269d 	.word	0x0040269d

004026c8 <bsp_can_init>:
static void m_bsp_can_pack_msg_sensor(uint8_t *can_data);
static void m_bsp_can_unpack_msg_sensor(uint8_t *can_data);

/* Function definitions ----------------------------------------------- */
void bsp_can_init(void)
{
  4026c8:	b580      	push	{r7, lr}
  4026ca:	b082      	sub	sp, #8
  4026cc:	af00      	add	r7, sp, #0
  uint32_t ul_sysclk = sysclk_get_cpu_hz();
  4026ce:	4b14      	ldr	r3, [pc, #80]	; (402720 <bsp_can_init+0x58>)
  4026d0:	4798      	blx	r3
  4026d2:	6078      	str	r0, [r7, #4]

  pmc_enable_periph_clk(ID_CAN1);
  4026d4:	2026      	movs	r0, #38	; 0x26
  4026d6:	4b13      	ldr	r3, [pc, #76]	; (402724 <bsp_can_init+0x5c>)
  4026d8:	4798      	blx	r3

  can_init(CAN1, ul_sysclk, CAN_BPS_250K);
  4026da:	22fa      	movs	r2, #250	; 0xfa
  4026dc:	6879      	ldr	r1, [r7, #4]
  4026de:	4812      	ldr	r0, [pc, #72]	; (402728 <bsp_can_init+0x60>)
  4026e0:	4b12      	ldr	r3, [pc, #72]	; (40272c <bsp_can_init+0x64>)
  4026e2:	4798      	blx	r3
  can_reset_all_mailbox(CAN1);
  4026e4:	4810      	ldr	r0, [pc, #64]	; (402728 <bsp_can_init+0x60>)
  4026e6:	4b12      	ldr	r3, [pc, #72]	; (402730 <bsp_can_init+0x68>)
  4026e8:	4798      	blx	r3

  m_can1_mailbox.ul_mb_idx   = 0;
  4026ea:	4b12      	ldr	r3, [pc, #72]	; (402734 <bsp_can_init+0x6c>)
  4026ec:	2200      	movs	r2, #0
  4026ee:	601a      	str	r2, [r3, #0]
  m_can1_mailbox.uc_tx_prio  = 15;
  4026f0:	4b10      	ldr	r3, [pc, #64]	; (402734 <bsp_can_init+0x6c>)
  4026f2:	220f      	movs	r2, #15
  4026f4:	71da      	strb	r2, [r3, #7]
  m_can1_mailbox.uc_id_ver   = 0;
  4026f6:	4b0f      	ldr	r3, [pc, #60]	; (402734 <bsp_can_init+0x6c>)
  4026f8:	2200      	movs	r2, #0
  4026fa:	715a      	strb	r2, [r3, #5]
  m_can1_mailbox.uc_length   = 8;
  4026fc:	4b0d      	ldr	r3, [pc, #52]	; (402734 <bsp_can_init+0x6c>)
  4026fe:	2208      	movs	r2, #8
  402700:	719a      	strb	r2, [r3, #6]

#if (_CONFIG_ELEVATOR_BOARD) // {
  m_can1_mailbox.uc_obj_type = CAN_MB_TX_MODE;
  402702:	4b0c      	ldr	r3, [pc, #48]	; (402734 <bsp_can_init+0x6c>)
  402704:	2203      	movs	r2, #3
  402706:	711a      	strb	r2, [r3, #4]
  m_can1_mailbox.ul_id_msk   = 0;
  402708:	4b0a      	ldr	r3, [pc, #40]	; (402734 <bsp_can_init+0x6c>)
  40270a:	2200      	movs	r2, #0
  40270c:	60da      	str	r2, [r3, #12]
  m_can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
  m_can1_mailbox.ul_id_msk   = CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk;
  m_can1_mailbox.ul_id       = CAN_MID_MIDvA(0x07);
#endif // }

  can_mailbox_init(CAN1, &m_can1_mailbox);
  40270e:	4909      	ldr	r1, [pc, #36]	; (402734 <bsp_can_init+0x6c>)
  402710:	4805      	ldr	r0, [pc, #20]	; (402728 <bsp_can_init+0x60>)
  402712:	4b09      	ldr	r3, [pc, #36]	; (402738 <bsp_can_init+0x70>)
  402714:	4798      	blx	r3
}
  402716:	bf00      	nop
  402718:	3708      	adds	r7, #8
  40271a:	46bd      	mov	sp, r7
  40271c:	bd80      	pop	{r7, pc}
  40271e:	bf00      	nop
  402720:	004026b5 	.word	0x004026b5
  402724:	00409ad5 	.word	0x00409ad5
  402728:	40014000 	.word	0x40014000
  40272c:	004093e5 	.word	0x004093e5
  402730:	004096f5 	.word	0x004096f5
  402734:	2000ab34 	.word	0x2000ab34
  402738:	00409517 	.word	0x00409517

0040273c <bsp_can_send_sensor_event>:
{
  return (can_mailbox_get_status(CAN1, 0) & CAN_MSR_MRDY);
}

void bsp_can_send_sensor_event(date_time_t *dt, uint8_t sensor_name)
{
  40273c:	b580      	push	{r7, lr}
  40273e:	b082      	sub	sp, #8
  402740:	af00      	add	r7, sp, #0
  402742:	6078      	str	r0, [r7, #4]
  402744:	460b      	mov	r3, r1
  402746:	70fb      	strb	r3, [r7, #3]
  m_sensor_event.tm_year = dt->tm_year;
  402748:	687b      	ldr	r3, [r7, #4]
  40274a:	695b      	ldr	r3, [r3, #20]
  40274c:	b2da      	uxtb	r2, r3
  40274e:	4b14      	ldr	r3, [pc, #80]	; (4027a0 <bsp_can_send_sensor_event+0x64>)
  402750:	701a      	strb	r2, [r3, #0]
  m_sensor_event.tm_mon  = dt->tm_mon;
  402752:	687b      	ldr	r3, [r7, #4]
  402754:	691b      	ldr	r3, [r3, #16]
  402756:	b2da      	uxtb	r2, r3
  402758:	4b11      	ldr	r3, [pc, #68]	; (4027a0 <bsp_can_send_sensor_event+0x64>)
  40275a:	705a      	strb	r2, [r3, #1]
  m_sensor_event.tm_mday = dt->tm_mday;
  40275c:	687b      	ldr	r3, [r7, #4]
  40275e:	68db      	ldr	r3, [r3, #12]
  402760:	b2da      	uxtb	r2, r3
  402762:	4b0f      	ldr	r3, [pc, #60]	; (4027a0 <bsp_can_send_sensor_event+0x64>)
  402764:	709a      	strb	r2, [r3, #2]
  m_sensor_event.tm_hour = dt->tm_hour;
  402766:	687b      	ldr	r3, [r7, #4]
  402768:	689b      	ldr	r3, [r3, #8]
  40276a:	b2da      	uxtb	r2, r3
  40276c:	4b0c      	ldr	r3, [pc, #48]	; (4027a0 <bsp_can_send_sensor_event+0x64>)
  40276e:	70da      	strb	r2, [r3, #3]
  m_sensor_event.tm_min  = dt->tm_min;
  402770:	687b      	ldr	r3, [r7, #4]
  402772:	685b      	ldr	r3, [r3, #4]
  402774:	b2da      	uxtb	r2, r3
  402776:	4b0a      	ldr	r3, [pc, #40]	; (4027a0 <bsp_can_send_sensor_event+0x64>)
  402778:	711a      	strb	r2, [r3, #4]
  m_sensor_event.tm_sec  = dt->tm_sec;
  40277a:	687b      	ldr	r3, [r7, #4]
  40277c:	681b      	ldr	r3, [r3, #0]
  40277e:	b2da      	uxtb	r2, r3
  402780:	4b07      	ldr	r3, [pc, #28]	; (4027a0 <bsp_can_send_sensor_event+0x64>)
  402782:	715a      	strb	r2, [r3, #5]
  m_sensor_event.sensor  = sensor_name;
  402784:	4a06      	ldr	r2, [pc, #24]	; (4027a0 <bsp_can_send_sensor_event+0x64>)
  402786:	78fb      	ldrb	r3, [r7, #3]
  402788:	7193      	strb	r3, [r2, #6]
  m_sensor_event.unused  = 0;
  40278a:	4b05      	ldr	r3, [pc, #20]	; (4027a0 <bsp_can_send_sensor_event+0x64>)
  40278c:	2200      	movs	r2, #0
  40278e:	71da      	strb	r2, [r3, #7]

  m_bsp_can_send_msg(MSG_SENSOR);
  402790:	2000      	movs	r0, #0
  402792:	4b04      	ldr	r3, [pc, #16]	; (4027a4 <bsp_can_send_sensor_event+0x68>)
  402794:	4798      	blx	r3
}
  402796:	bf00      	nop
  402798:	3708      	adds	r7, #8
  40279a:	46bd      	mov	sp, r7
  40279c:	bd80      	pop	{r7, pc}
  40279e:	bf00      	nop
  4027a0:	2000ab54 	.word	0x2000ab54
  4027a4:	004027a9 	.word	0x004027a9

004027a8 <m_bsp_can_send_msg>:
  *sensor_name = m_sensor_event.sensor;
}

/* Private function definitions --------------------------------------- */
static void m_bsp_can_send_msg(bsp_can_msg_t msg)
{
  4027a8:	b580      	push	{r7, lr}
  4027aa:	b084      	sub	sp, #16
  4027ac:	af00      	add	r7, sp, #0
  4027ae:	4603      	mov	r3, r0
  4027b0:	71fb      	strb	r3, [r7, #7]
  uint8_t msg_id;

  switch (msg)
  4027b2:	79fb      	ldrb	r3, [r7, #7]
  4027b4:	2b00      	cmp	r3, #0
  4027b6:	d000      	beq.n	4027ba <m_bsp_can_send_msg+0x12>
    msg_id = 0x07;
    m_bsp_can_pack_msg_sensor(m_can_tx_data);
    break;

  default:
    break;
  4027b8:	e005      	b.n	4027c6 <m_bsp_can_send_msg+0x1e>
    msg_id = 0x07;
  4027ba:	2307      	movs	r3, #7
  4027bc:	73fb      	strb	r3, [r7, #15]
    m_bsp_can_pack_msg_sensor(m_can_tx_data);
  4027be:	4806      	ldr	r0, [pc, #24]	; (4027d8 <m_bsp_can_send_msg+0x30>)
  4027c0:	4b06      	ldr	r3, [pc, #24]	; (4027dc <m_bsp_can_send_msg+0x34>)
  4027c2:	4798      	blx	r3
    break;
  4027c4:	bf00      	nop
  }

  m_bsp_can_transmit(msg_id, m_can_tx_data);
  4027c6:	7bfb      	ldrb	r3, [r7, #15]
  4027c8:	4903      	ldr	r1, [pc, #12]	; (4027d8 <m_bsp_can_send_msg+0x30>)
  4027ca:	4618      	mov	r0, r3
  4027cc:	4b04      	ldr	r3, [pc, #16]	; (4027e0 <m_bsp_can_send_msg+0x38>)
  4027ce:	4798      	blx	r3
}
  4027d0:	bf00      	nop
  4027d2:	3710      	adds	r7, #16
  4027d4:	46bd      	mov	sp, r7
  4027d6:	bd80      	pop	{r7, pc}
  4027d8:	2000ab5c 	.word	0x2000ab5c
  4027dc:	00402841 	.word	0x00402841
  4027e0:	004027e5 	.word	0x004027e5

004027e4 <m_bsp_can_transmit>:

static void m_bsp_can_transmit(uint8_t msg_id, uint8_t *p_data)
{
  4027e4:	b580      	push	{r7, lr}
  4027e6:	b082      	sub	sp, #8
  4027e8:	af00      	add	r7, sp, #0
  4027ea:	4603      	mov	r3, r0
  4027ec:	6039      	str	r1, [r7, #0]
  4027ee:	71fb      	strb	r3, [r7, #7]
  m_can1_mailbox.ul_id = CAN_MID_MIDvA(msg_id);
  4027f0:	79fb      	ldrb	r3, [r7, #7]
  4027f2:	049b      	lsls	r3, r3, #18
  4027f4:	461a      	mov	r2, r3
  4027f6:	4b0d      	ldr	r3, [pc, #52]	; (40282c <m_bsp_can_transmit+0x48>)
  4027f8:	4013      	ands	r3, r2
  4027fa:	4a0d      	ldr	r2, [pc, #52]	; (402830 <m_bsp_can_transmit+0x4c>)
  4027fc:	6113      	str	r3, [r2, #16]
  memcpy((uint8_t *)&m_can1_mailbox.ul_datal, p_data, 4);
  4027fe:	683b      	ldr	r3, [r7, #0]
  402800:	681b      	ldr	r3, [r3, #0]
  402802:	461a      	mov	r2, r3
  402804:	4b0a      	ldr	r3, [pc, #40]	; (402830 <m_bsp_can_transmit+0x4c>)
  402806:	619a      	str	r2, [r3, #24]
  memcpy((uint8_t *)&m_can1_mailbox.ul_datah, &p_data[4], 4);
  402808:	683b      	ldr	r3, [r7, #0]
  40280a:	3304      	adds	r3, #4
  40280c:	681b      	ldr	r3, [r3, #0]
  40280e:	461a      	mov	r2, r3
  402810:	4b07      	ldr	r3, [pc, #28]	; (402830 <m_bsp_can_transmit+0x4c>)
  402812:	61da      	str	r2, [r3, #28]

  can_mailbox_write(CAN1, &m_can1_mailbox);
  402814:	4906      	ldr	r1, [pc, #24]	; (402830 <m_bsp_can_transmit+0x4c>)
  402816:	4807      	ldr	r0, [pc, #28]	; (402834 <m_bsp_can_transmit+0x50>)
  402818:	4b07      	ldr	r3, [pc, #28]	; (402838 <m_bsp_can_transmit+0x54>)
  40281a:	4798      	blx	r3

  can_global_send_transfer_cmd(CAN1, CAN_TCR_MB0);
  40281c:	2101      	movs	r1, #1
  40281e:	4805      	ldr	r0, [pc, #20]	; (402834 <m_bsp_can_transmit+0x50>)
  402820:	4b06      	ldr	r3, [pc, #24]	; (40283c <m_bsp_can_transmit+0x58>)
  402822:	4798      	blx	r3
}
  402824:	bf00      	nop
  402826:	3708      	adds	r7, #8
  402828:	46bd      	mov	sp, r7
  40282a:	bd80      	pop	{r7, pc}
  40282c:	1ffc0000 	.word	0x1ffc0000
  402830:	2000ab34 	.word	0x2000ab34
  402834:	40014000 	.word	0x40014000
  402838:	0040963d 	.word	0x0040963d
  40283c:	004094c5 	.word	0x004094c5

00402840 <m_bsp_can_pack_msg_sensor>:
  memcpy(p_data, (uint8_t *)&m_can1_mailbox.ul_datal, 4);
  memcpy(&p_data[4], (uint8_t *)&m_can1_mailbox.ul_datah, 4);
}

static void m_bsp_can_pack_msg_sensor(uint8_t *can_data)
{
  402840:	b480      	push	{r7}
  402842:	b083      	sub	sp, #12
  402844:	af00      	add	r7, sp, #0
  402846:	6078      	str	r0, [r7, #4]
  can_data[0] = m_sensor_event.tm_year;
  402848:	4b16      	ldr	r3, [pc, #88]	; (4028a4 <m_bsp_can_pack_msg_sensor+0x64>)
  40284a:	781a      	ldrb	r2, [r3, #0]
  40284c:	687b      	ldr	r3, [r7, #4]
  40284e:	701a      	strb	r2, [r3, #0]
  can_data[1] = m_sensor_event.tm_mon;
  402850:	687b      	ldr	r3, [r7, #4]
  402852:	3301      	adds	r3, #1
  402854:	4a13      	ldr	r2, [pc, #76]	; (4028a4 <m_bsp_can_pack_msg_sensor+0x64>)
  402856:	7852      	ldrb	r2, [r2, #1]
  402858:	701a      	strb	r2, [r3, #0]
  can_data[2] = m_sensor_event.tm_mday;
  40285a:	687b      	ldr	r3, [r7, #4]
  40285c:	3302      	adds	r3, #2
  40285e:	4a11      	ldr	r2, [pc, #68]	; (4028a4 <m_bsp_can_pack_msg_sensor+0x64>)
  402860:	7892      	ldrb	r2, [r2, #2]
  402862:	701a      	strb	r2, [r3, #0]
  can_data[3] = m_sensor_event.tm_hour;
  402864:	687b      	ldr	r3, [r7, #4]
  402866:	3303      	adds	r3, #3
  402868:	4a0e      	ldr	r2, [pc, #56]	; (4028a4 <m_bsp_can_pack_msg_sensor+0x64>)
  40286a:	78d2      	ldrb	r2, [r2, #3]
  40286c:	701a      	strb	r2, [r3, #0]
  can_data[4] = m_sensor_event.tm_min;
  40286e:	687b      	ldr	r3, [r7, #4]
  402870:	3304      	adds	r3, #4
  402872:	4a0c      	ldr	r2, [pc, #48]	; (4028a4 <m_bsp_can_pack_msg_sensor+0x64>)
  402874:	7912      	ldrb	r2, [r2, #4]
  402876:	701a      	strb	r2, [r3, #0]
  can_data[5] = m_sensor_event.tm_sec;
  402878:	687b      	ldr	r3, [r7, #4]
  40287a:	3305      	adds	r3, #5
  40287c:	4a09      	ldr	r2, [pc, #36]	; (4028a4 <m_bsp_can_pack_msg_sensor+0x64>)
  40287e:	7952      	ldrb	r2, [r2, #5]
  402880:	701a      	strb	r2, [r3, #0]
  can_data[6] = m_sensor_event.sensor;
  402882:	687b      	ldr	r3, [r7, #4]
  402884:	3306      	adds	r3, #6
  402886:	4a07      	ldr	r2, [pc, #28]	; (4028a4 <m_bsp_can_pack_msg_sensor+0x64>)
  402888:	7992      	ldrb	r2, [r2, #6]
  40288a:	701a      	strb	r2, [r3, #0]
  can_data[7] = m_sensor_event.unused;
  40288c:	687b      	ldr	r3, [r7, #4]
  40288e:	3307      	adds	r3, #7
  402890:	4a04      	ldr	r2, [pc, #16]	; (4028a4 <m_bsp_can_pack_msg_sensor+0x64>)
  402892:	79d2      	ldrb	r2, [r2, #7]
  402894:	701a      	strb	r2, [r3, #0]
}
  402896:	bf00      	nop
  402898:	370c      	adds	r7, #12
  40289a:	46bd      	mov	sp, r7
  40289c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028a0:	4770      	bx	lr
  4028a2:	bf00      	nop
  4028a4:	2000ab54 	.word	0x2000ab54

004028a8 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4028a8:	b480      	push	{r7}
  4028aa:	b08d      	sub	sp, #52	; 0x34
  4028ac:	af00      	add	r7, sp, #0
  4028ae:	6078      	str	r0, [r7, #4]
  4028b0:	6039      	str	r1, [r7, #0]
  4028b2:	687b      	ldr	r3, [r7, #4]
  4028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  4028b6:	683b      	ldr	r3, [r7, #0]
  4028b8:	62bb      	str	r3, [r7, #40]	; 0x28
  4028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4028bc:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4028c0:	095a      	lsrs	r2, r3, #5
  4028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4028c4:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4028c6:	6a3b      	ldr	r3, [r7, #32]
  4028c8:	f003 031f 	and.w	r3, r3, #31
  4028cc:	2101      	movs	r1, #1
  4028ce:	fa01 f303 	lsl.w	r3, r1, r3
  4028d2:	61fa      	str	r2, [r7, #28]
  4028d4:	61bb      	str	r3, [r7, #24]
  4028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4028d8:	617b      	str	r3, [r7, #20]
  4028da:	69fb      	ldr	r3, [r7, #28]
  4028dc:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4028de:	693b      	ldr	r3, [r7, #16]
  4028e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4028e4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4028e8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4028ea:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4028ec:	697b      	ldr	r3, [r7, #20]
  4028ee:	f003 0308 	and.w	r3, r3, #8
  4028f2:	2b00      	cmp	r3, #0
  4028f4:	d003      	beq.n	4028fe <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  4028f6:	68fb      	ldr	r3, [r7, #12]
  4028f8:	69ba      	ldr	r2, [r7, #24]
  4028fa:	665a      	str	r2, [r3, #100]	; 0x64
  4028fc:	e002      	b.n	402904 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  4028fe:	68fb      	ldr	r3, [r7, #12]
  402900:	69ba      	ldr	r2, [r7, #24]
  402902:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  402904:	697b      	ldr	r3, [r7, #20]
  402906:	f003 0310 	and.w	r3, r3, #16
  40290a:	2b00      	cmp	r3, #0
  40290c:	d004      	beq.n	402918 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  40290e:	68fb      	ldr	r3, [r7, #12]
  402910:	69ba      	ldr	r2, [r7, #24]
  402912:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  402916:	e003      	b.n	402920 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  402918:	68fb      	ldr	r3, [r7, #12]
  40291a:	69ba      	ldr	r2, [r7, #24]
  40291c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  402920:	697b      	ldr	r3, [r7, #20]
  402922:	f003 0320 	and.w	r3, r3, #32
  402926:	2b00      	cmp	r3, #0
  402928:	d003      	beq.n	402932 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  40292a:	68fb      	ldr	r3, [r7, #12]
  40292c:	69ba      	ldr	r2, [r7, #24]
  40292e:	651a      	str	r2, [r3, #80]	; 0x50
  402930:	e002      	b.n	402938 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  402932:	68fb      	ldr	r3, [r7, #12]
  402934:	69ba      	ldr	r2, [r7, #24]
  402936:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  402938:	697b      	ldr	r3, [r7, #20]
  40293a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40293e:	2b00      	cmp	r3, #0
  402940:	d003      	beq.n	40294a <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  402942:	68fb      	ldr	r3, [r7, #12]
  402944:	69ba      	ldr	r2, [r7, #24]
  402946:	621a      	str	r2, [r3, #32]
  402948:	e002      	b.n	402950 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  40294a:	68fb      	ldr	r3, [r7, #12]
  40294c:	69ba      	ldr	r2, [r7, #24]
  40294e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  402950:	697b      	ldr	r3, [r7, #20]
  402952:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402956:	2b00      	cmp	r3, #0
  402958:	d004      	beq.n	402964 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40295a:	68fb      	ldr	r3, [r7, #12]
  40295c:	69ba      	ldr	r2, [r7, #24]
  40295e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  402962:	e003      	b.n	40296c <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402964:	68fb      	ldr	r3, [r7, #12]
  402966:	69ba      	ldr	r2, [r7, #24]
  402968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40296c:	697b      	ldr	r3, [r7, #20]
  40296e:	f003 0301 	and.w	r3, r3, #1
  402972:	2b00      	cmp	r3, #0
  402974:	d006      	beq.n	402984 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  402976:	68fb      	ldr	r3, [r7, #12]
  402978:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40297a:	69bb      	ldr	r3, [r7, #24]
  40297c:	431a      	orrs	r2, r3
  40297e:	68fb      	ldr	r3, [r7, #12]
  402980:	671a      	str	r2, [r3, #112]	; 0x70
  402982:	e006      	b.n	402992 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402984:	68fb      	ldr	r3, [r7, #12]
  402986:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402988:	69bb      	ldr	r3, [r7, #24]
  40298a:	43db      	mvns	r3, r3
  40298c:	401a      	ands	r2, r3
  40298e:	68fb      	ldr	r3, [r7, #12]
  402990:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  402992:	697b      	ldr	r3, [r7, #20]
  402994:	f003 0302 	and.w	r3, r3, #2
  402998:	2b00      	cmp	r3, #0
  40299a:	d006      	beq.n	4029aa <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  40299c:	68fb      	ldr	r3, [r7, #12]
  40299e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4029a0:	69bb      	ldr	r3, [r7, #24]
  4029a2:	431a      	orrs	r2, r3
  4029a4:	68fb      	ldr	r3, [r7, #12]
  4029a6:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4029a8:	e006      	b.n	4029b8 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4029aa:	68fb      	ldr	r3, [r7, #12]
  4029ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4029ae:	69bb      	ldr	r3, [r7, #24]
  4029b0:	43db      	mvns	r3, r3
  4029b2:	401a      	ands	r2, r3
  4029b4:	68fb      	ldr	r3, [r7, #12]
  4029b6:	675a      	str	r2, [r3, #116]	; 0x74
  4029b8:	bf00      	nop
  4029ba:	3734      	adds	r7, #52	; 0x34
  4029bc:	46bd      	mov	sp, r7
  4029be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029c2:	4770      	bx	lr

004029c4 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4029c4:	b480      	push	{r7}
  4029c6:	b08d      	sub	sp, #52	; 0x34
  4029c8:	af00      	add	r7, sp, #0
  4029ca:	6078      	str	r0, [r7, #4]
  4029cc:	460b      	mov	r3, r1
  4029ce:	70fb      	strb	r3, [r7, #3]
  4029d0:	687b      	ldr	r3, [r7, #4]
  4029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4029d4:	78fb      	ldrb	r3, [r7, #3]
  4029d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4029dc:	627b      	str	r3, [r7, #36]	; 0x24
  4029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4029e0:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4029e2:	6a3b      	ldr	r3, [r7, #32]
  4029e4:	095b      	lsrs	r3, r3, #5
  4029e6:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4029e8:	69fb      	ldr	r3, [r7, #28]
  4029ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4029ee:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4029f2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4029f4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4029f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4029fa:	2b01      	cmp	r3, #1
  4029fc:	d109      	bne.n	402a12 <ioport_set_pin_dir+0x4e>
  4029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402a00:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  402a02:	697b      	ldr	r3, [r7, #20]
  402a04:	f003 031f 	and.w	r3, r3, #31
  402a08:	2201      	movs	r2, #1
  402a0a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402a0c:	69bb      	ldr	r3, [r7, #24]
  402a0e:	611a      	str	r2, [r3, #16]
  402a10:	e00c      	b.n	402a2c <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  402a12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402a16:	2b00      	cmp	r3, #0
  402a18:	d108      	bne.n	402a2c <ioport_set_pin_dir+0x68>
  402a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402a1c:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  402a1e:	693b      	ldr	r3, [r7, #16]
  402a20:	f003 031f 	and.w	r3, r3, #31
  402a24:	2201      	movs	r2, #1
  402a26:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402a28:	69bb      	ldr	r3, [r7, #24]
  402a2a:	615a      	str	r2, [r3, #20]
  402a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402a2e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402a30:	68fb      	ldr	r3, [r7, #12]
  402a32:	f003 031f 	and.w	r3, r3, #31
  402a36:	2201      	movs	r2, #1
  402a38:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402a3a:	69bb      	ldr	r3, [r7, #24]
  402a3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  402a40:	bf00      	nop
  402a42:	3734      	adds	r7, #52	; 0x34
  402a44:	46bd      	mov	sp, r7
  402a46:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a4a:	4770      	bx	lr

00402a4c <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  402a4c:	b480      	push	{r7}
  402a4e:	b08d      	sub	sp, #52	; 0x34
  402a50:	af00      	add	r7, sp, #0
  402a52:	6078      	str	r0, [r7, #4]
  402a54:	460b      	mov	r3, r1
  402a56:	70fb      	strb	r3, [r7, #3]
  402a58:	687b      	ldr	r3, [r7, #4]
  402a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  402a5c:	78fb      	ldrb	r3, [r7, #3]
  402a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402a64:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  402a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402a68:	095a      	lsrs	r2, r3, #5
  402a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402a6c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  402a6e:	6a3b      	ldr	r3, [r7, #32]
  402a70:	f003 031f 	and.w	r3, r3, #31
  402a74:	2101      	movs	r1, #1
  402a76:	fa01 f303 	lsl.w	r3, r1, r3
  402a7a:	61fa      	str	r2, [r7, #28]
  402a7c:	61bb      	str	r3, [r7, #24]
  402a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402a82:	75fb      	strb	r3, [r7, #23]
  402a84:	69fb      	ldr	r3, [r7, #28]
  402a86:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402a88:	693b      	ldr	r3, [r7, #16]
  402a8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402a8e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402a92:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  402a94:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  402a96:	7dfb      	ldrb	r3, [r7, #23]
  402a98:	3b01      	subs	r3, #1
  402a9a:	2b03      	cmp	r3, #3
  402a9c:	d82e      	bhi.n	402afc <ioport_set_pin_sense_mode+0xb0>
  402a9e:	a201      	add	r2, pc, #4	; (adr r2, 402aa4 <ioport_set_pin_sense_mode+0x58>)
  402aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402aa4:	00402ad9 	.word	0x00402ad9
  402aa8:	00402aeb 	.word	0x00402aeb
  402aac:	00402ab5 	.word	0x00402ab5
  402ab0:	00402ac7 	.word	0x00402ac7
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  402ab4:	68fb      	ldr	r3, [r7, #12]
  402ab6:	69ba      	ldr	r2, [r7, #24]
  402ab8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  402abc:	68fb      	ldr	r3, [r7, #12]
  402abe:	69ba      	ldr	r2, [r7, #24]
  402ac0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  402ac4:	e01f      	b.n	402b06 <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  402ac6:	68fb      	ldr	r3, [r7, #12]
  402ac8:	69ba      	ldr	r2, [r7, #24]
  402aca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  402ace:	68fb      	ldr	r3, [r7, #12]
  402ad0:	69ba      	ldr	r2, [r7, #24]
  402ad2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402ad6:	e016      	b.n	402b06 <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  402ad8:	68fb      	ldr	r3, [r7, #12]
  402ada:	69ba      	ldr	r2, [r7, #24]
  402adc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  402ae0:	68fb      	ldr	r3, [r7, #12]
  402ae2:	69ba      	ldr	r2, [r7, #24]
  402ae4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  402ae8:	e00d      	b.n	402b06 <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402aea:	68fb      	ldr	r3, [r7, #12]
  402aec:	69ba      	ldr	r2, [r7, #24]
  402aee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402af2:	68fb      	ldr	r3, [r7, #12]
  402af4:	69ba      	ldr	r2, [r7, #24]
  402af6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402afa:	e004      	b.n	402b06 <ioport_set_pin_sense_mode+0xba>
		break;
	default:
		base->PIO_AIMDR = mask;
  402afc:	68fb      	ldr	r3, [r7, #12]
  402afe:	69ba      	ldr	r2, [r7, #24]
  402b00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  402b04:	e003      	b.n	402b0e <ioport_set_pin_sense_mode+0xc2>
		return;
	}
	base->PIO_AIMER = mask;
  402b06:	68fb      	ldr	r3, [r7, #12]
  402b08:	69ba      	ldr	r2, [r7, #24]
  402b0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  402b0e:	bf00      	nop
  402b10:	3734      	adds	r7, #52	; 0x34
  402b12:	46bd      	mov	sp, r7
  402b14:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b18:	4770      	bx	lr
  402b1a:	bf00      	nop

00402b1c <bsp_gpio_init>:
/* Public variables --------------------------------------------------- */
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
void bsp_gpio_init(void)
{
  402b1c:	b590      	push	{r4, r7, lr}
  402b1e:	b083      	sub	sp, #12
  402b20:	af00      	add	r7, sp, #0
  for (uint8_t i = 1; i <= 99; i++)
  402b22:	2301      	movs	r3, #1
  402b24:	71fb      	strb	r3, [r7, #7]
  402b26:	e03b      	b.n	402ba0 <bsp_gpio_init+0x84>
  {
    ioport_set_pin_input_mode(PIN_INDEX(i), IOPORT_MODE_PULLUP, IOPORT_SENSE_BOTHEDGES);
  402b28:	79fb      	ldrb	r3, [r7, #7]
  402b2a:	011b      	lsls	r3, r3, #4
  402b2c:	4a20      	ldr	r2, [pc, #128]	; (402bb0 <bsp_gpio_init+0x94>)
  402b2e:	4413      	add	r3, r2
  402b30:	4618      	mov	r0, r3
  402b32:	4b20      	ldr	r3, [pc, #128]	; (402bb4 <bsp_gpio_init+0x98>)
  402b34:	4798      	blx	r3
  402b36:	4603      	mov	r3, r0
  402b38:	2100      	movs	r1, #0
  402b3a:	4618      	mov	r0, r3
  402b3c:	4b1e      	ldr	r3, [pc, #120]	; (402bb8 <bsp_gpio_init+0x9c>)
  402b3e:	4798      	blx	r3
  402b40:	79fb      	ldrb	r3, [r7, #7]
  402b42:	011b      	lsls	r3, r3, #4
  402b44:	4a1a      	ldr	r2, [pc, #104]	; (402bb0 <bsp_gpio_init+0x94>)
  402b46:	4413      	add	r3, r2
  402b48:	4618      	mov	r0, r3
  402b4a:	4b1a      	ldr	r3, [pc, #104]	; (402bb4 <bsp_gpio_init+0x98>)
  402b4c:	4798      	blx	r3
  402b4e:	4603      	mov	r3, r0
  402b50:	2108      	movs	r1, #8
  402b52:	4618      	mov	r0, r3
  402b54:	4b19      	ldr	r3, [pc, #100]	; (402bbc <bsp_gpio_init+0xa0>)
  402b56:	4798      	blx	r3
  402b58:	79fb      	ldrb	r3, [r7, #7]
  402b5a:	011b      	lsls	r3, r3, #4
  402b5c:	4a14      	ldr	r2, [pc, #80]	; (402bb0 <bsp_gpio_init+0x94>)
  402b5e:	4413      	add	r3, r2
  402b60:	4618      	mov	r0, r3
  402b62:	4b14      	ldr	r3, [pc, #80]	; (402bb4 <bsp_gpio_init+0x98>)
  402b64:	4798      	blx	r3
  402b66:	4603      	mov	r3, r0
  402b68:	2100      	movs	r1, #0
  402b6a:	4618      	mov	r0, r3
  402b6c:	4b14      	ldr	r3, [pc, #80]	; (402bc0 <bsp_gpio_init+0xa4>)
  402b6e:	4798      	blx	r3

    // Configure as input with pull-down and denouncing
    // pio_set_input(PORT(i), PIN(i), PIO_DEFAULT);
    pio_pull_down(PORT(i), PIN(i), ENABLE);
  402b70:	79fb      	ldrb	r3, [r7, #7]
  402b72:	011b      	lsls	r3, r3, #4
  402b74:	4a0e      	ldr	r2, [pc, #56]	; (402bb0 <bsp_gpio_init+0x94>)
  402b76:	4413      	add	r3, r2
  402b78:	4618      	mov	r0, r3
  402b7a:	4b12      	ldr	r3, [pc, #72]	; (402bc4 <bsp_gpio_init+0xa8>)
  402b7c:	4798      	blx	r3
  402b7e:	4604      	mov	r4, r0
  402b80:	79fb      	ldrb	r3, [r7, #7]
  402b82:	011b      	lsls	r3, r3, #4
  402b84:	4a0a      	ldr	r2, [pc, #40]	; (402bb0 <bsp_gpio_init+0x94>)
  402b86:	4413      	add	r3, r2
  402b88:	4618      	mov	r0, r3
  402b8a:	4b0f      	ldr	r3, [pc, #60]	; (402bc8 <bsp_gpio_init+0xac>)
  402b8c:	4798      	blx	r3
  402b8e:	4603      	mov	r3, r0
  402b90:	2201      	movs	r2, #1
  402b92:	4619      	mov	r1, r3
  402b94:	4620      	mov	r0, r4
  402b96:	4b0d      	ldr	r3, [pc, #52]	; (402bcc <bsp_gpio_init+0xb0>)
  402b98:	4798      	blx	r3
  for (uint8_t i = 1; i <= 99; i++)
  402b9a:	79fb      	ldrb	r3, [r7, #7]
  402b9c:	3301      	adds	r3, #1
  402b9e:	71fb      	strb	r3, [r7, #7]
  402ba0:	79fb      	ldrb	r3, [r7, #7]
  402ba2:	2b63      	cmp	r3, #99	; 0x63
  402ba4:	d9c0      	bls.n	402b28 <bsp_gpio_init+0xc>
  // irq_register_handler(PIOA_IRQn, 0);
  // irq_register_handler(PIOB_IRQn, 0);
  // irq_register_handler(PIOC_IRQn, 0);
  // irq_register_handler(PIOD_IRQn, 0);
  // irq_register_handler(PIOE_IRQn, 0);
}
  402ba6:	bf00      	nop
  402ba8:	370c      	adds	r7, #12
  402baa:	46bd      	mov	sp, r7
  402bac:	bd90      	pop	{r4, r7, pc}
  402bae:	bf00      	nop
  402bb0:	0040e800 	.word	0x0040e800
  402bb4:	00402c01 	.word	0x00402c01
  402bb8:	004029c5 	.word	0x004029c5
  402bbc:	004028a9 	.word	0x004028a9
  402bc0:	00402a4d 	.word	0x00402a4d
  402bc4:	00402bd1 	.word	0x00402bd1
  402bc8:	00402be9 	.word	0x00402be9
  402bcc:	00409849 	.word	0x00409849

00402bd0 <bsp_io_get_port_address>:

Pio *bsp_io_get_port_address(const bsp_io_10_t *io)
{
  402bd0:	b480      	push	{r7}
  402bd2:	b083      	sub	sp, #12
  402bd4:	af00      	add	r7, sp, #0
  402bd6:	6078      	str	r0, [r7, #4]
  return io->port;
  402bd8:	687b      	ldr	r3, [r7, #4]
  402bda:	681b      	ldr	r3, [r3, #0]
}
  402bdc:	4618      	mov	r0, r3
  402bde:	370c      	adds	r7, #12
  402be0:	46bd      	mov	sp, r7
  402be2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402be6:	4770      	bx	lr

00402be8 <bsp_io_get_pin>:
{
  return io->port_id;
}

uint32_t bsp_io_get_pin(const bsp_io_10_t *io)
{
  402be8:	b480      	push	{r7}
  402bea:	b083      	sub	sp, #12
  402bec:	af00      	add	r7, sp, #0
  402bee:	6078      	str	r0, [r7, #4]
  return io->pin;
  402bf0:	687b      	ldr	r3, [r7, #4]
  402bf2:	689b      	ldr	r3, [r3, #8]
}
  402bf4:	4618      	mov	r0, r3
  402bf6:	370c      	adds	r7, #12
  402bf8:	46bd      	mov	sp, r7
  402bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bfe:	4770      	bx	lr

00402c00 <bsp_io_get_pin_index>:

uint32_t bsp_io_get_pin_index(const bsp_io_10_t *io)
{
  402c00:	b480      	push	{r7}
  402c02:	b083      	sub	sp, #12
  402c04:	af00      	add	r7, sp, #0
  402c06:	6078      	str	r0, [r7, #4]
  return io->pin_index;
  402c08:	687b      	ldr	r3, [r7, #4]
  402c0a:	68db      	ldr	r3, [r3, #12]
}
  402c0c:	4618      	mov	r0, r3
  402c0e:	370c      	adds	r7, #12
  402c10:	46bd      	mov	sp, r7
  402c12:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c16:	4770      	bx	lr

00402c18 <bsp_lcd_init>:
/* Private function prototypes ---------------------------------------- */
void m_bsp_lcd_set_position(uint8_t row, uint8_t col);

/* Function definitions ----------------------------------------------- */
void bsp_lcd_init(void)
{
  402c18:	b580      	push	{r7, lr}
  402c1a:	af00      	add	r7, sp, #0
  m_ssd1311.device_address = SSD1311_I2C_ADDRESS;
  402c1c:	4b06      	ldr	r3, [pc, #24]	; (402c38 <bsp_lcd_init+0x20>)
  402c1e:	223c      	movs	r2, #60	; 0x3c
  402c20:	701a      	strb	r2, [r3, #0]
  m_ssd1311.i2c_write      = bsp_i2c_write;
  402c22:	4b05      	ldr	r3, [pc, #20]	; (402c38 <bsp_lcd_init+0x20>)
  402c24:	4a05      	ldr	r2, [pc, #20]	; (402c3c <bsp_lcd_init+0x24>)
  402c26:	605a      	str	r2, [r3, #4]
  m_ssd1311.delay          = bsp_delay;
  402c28:	4b03      	ldr	r3, [pc, #12]	; (402c38 <bsp_lcd_init+0x20>)
  402c2a:	4a05      	ldr	r2, [pc, #20]	; (402c40 <bsp_lcd_init+0x28>)
  402c2c:	609a      	str	r2, [r3, #8]
  
  ssd1311_init(&m_ssd1311);
  402c2e:	4802      	ldr	r0, [pc, #8]	; (402c38 <bsp_lcd_init+0x20>)
  402c30:	4b04      	ldr	r3, [pc, #16]	; (402c44 <bsp_lcd_init+0x2c>)
  402c32:	4798      	blx	r3
}
  402c34:	bf00      	nop
  402c36:	bd80      	pop	{r7, pc}
  402c38:	2000acc0 	.word	0x2000acc0
  402c3c:	00402499 	.word	0x00402499
  402c40:	004024e1 	.word	0x004024e1
  402c44:	00402e29 	.word	0x00402e29

00402c48 <bsp_lcd_write_string>:

void bsp_lcd_write_string(uint8_t x, uint8_t y, const char *fmt_string, ...)
{
  402c48:	b40c      	push	{r2, r3}
  402c4a:	b580      	push	{r7, lr}
  402c4c:	b0c4      	sub	sp, #272	; 0x110
  402c4e:	af00      	add	r7, sp, #0
  402c50:	4602      	mov	r2, r0
  402c52:	1dfb      	adds	r3, r7, #7
  402c54:	701a      	strb	r2, [r3, #0]
  402c56:	1dbb      	adds	r3, r7, #6
  402c58:	460a      	mov	r2, r1
  402c5a:	701a      	strb	r2, [r3, #0]
  char str[256] = "";
  402c5c:	f107 030c 	add.w	r3, r7, #12
  402c60:	2200      	movs	r2, #0
  402c62:	601a      	str	r2, [r3, #0]
  402c64:	3304      	adds	r3, #4
  402c66:	22fc      	movs	r2, #252	; 0xfc
  402c68:	2100      	movs	r1, #0
  402c6a:	4618      	mov	r0, r3
  402c6c:	4b1f      	ldr	r3, [pc, #124]	; (402cec <bsp_lcd_write_string+0xa4>)
  402c6e:	4798      	blx	r3
  unsigned char i = 0;
  402c70:	2300      	movs	r3, #0
  402c72:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

  va_list args;
  va_start(args, fmt_string);
  402c76:	f507 728e 	add.w	r2, r7, #284	; 0x11c
  402c7a:	f107 0308 	add.w	r3, r7, #8
  402c7e:	601a      	str	r2, [r3, #0]
  vsprintf(str + strlen(str), fmt_string, args);
  402c80:	f107 030c 	add.w	r3, r7, #12
  402c84:	4618      	mov	r0, r3
  402c86:	4b1a      	ldr	r3, [pc, #104]	; (402cf0 <bsp_lcd_write_string+0xa8>)
  402c88:	4798      	blx	r3
  402c8a:	4602      	mov	r2, r0
  402c8c:	f107 030c 	add.w	r3, r7, #12
  402c90:	1898      	adds	r0, r3, r2
  402c92:	f107 0308 	add.w	r3, r7, #8
  402c96:	681a      	ldr	r2, [r3, #0]
  402c98:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
  402c9c:	4b15      	ldr	r3, [pc, #84]	; (402cf4 <bsp_lcd_write_string+0xac>)
  402c9e:	4798      	blx	r3
  va_end(args);

  m_bsp_lcd_set_position(x, y);
  402ca0:	1dbb      	adds	r3, r7, #6
  402ca2:	781a      	ldrb	r2, [r3, #0]
  402ca4:	1dfb      	adds	r3, r7, #7
  402ca6:	781b      	ldrb	r3, [r3, #0]
  402ca8:	4611      	mov	r1, r2
  402caa:	4618      	mov	r0, r3
  402cac:	4b12      	ldr	r3, [pc, #72]	; (402cf8 <bsp_lcd_write_string+0xb0>)
  402cae:	4798      	blx	r3
  while(str[i])
  402cb0:	e00d      	b.n	402cce <bsp_lcd_write_string+0x86>
  {
    ssd1311_write_data_byte(&m_ssd1311, str[i]);
  402cb2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
  402cb6:	f107 020c 	add.w	r2, r7, #12
  402cba:	5cd3      	ldrb	r3, [r2, r3]
  402cbc:	4619      	mov	r1, r3
  402cbe:	480f      	ldr	r0, [pc, #60]	; (402cfc <bsp_lcd_write_string+0xb4>)
  402cc0:	4b0f      	ldr	r3, [pc, #60]	; (402d00 <bsp_lcd_write_string+0xb8>)
  402cc2:	4798      	blx	r3
    i++;
  402cc4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
  402cc8:	3301      	adds	r3, #1
  402cca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(str[i])
  402cce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
  402cd2:	f107 020c 	add.w	r2, r7, #12
  402cd6:	5cd3      	ldrb	r3, [r2, r3]
  402cd8:	2b00      	cmp	r3, #0
  402cda:	d1ea      	bne.n	402cb2 <bsp_lcd_write_string+0x6a>
  }
}
  402cdc:	bf00      	nop
  402cde:	f507 7788 	add.w	r7, r7, #272	; 0x110
  402ce2:	46bd      	mov	sp, r7
  402ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
  402ce8:	b002      	add	sp, #8
  402cea:	4770      	bx	lr
  402cec:	0040a2c5 	.word	0x0040a2c5
  402cf0:	0040a3c1 	.word	0x0040a3c1
  402cf4:	0040b991 	.word	0x0040b991
  402cf8:	00402d05 	.word	0x00402d05
  402cfc:	2000acc0 	.word	0x2000acc0
  402d00:	00402e89 	.word	0x00402e89

00402d04 <m_bsp_lcd_set_position>:

/* Private function definitions --------------------------------------- */
void m_bsp_lcd_set_position(uint8_t x, uint8_t y)
{
  402d04:	b580      	push	{r7, lr}
  402d06:	b082      	sub	sp, #8
  402d08:	af00      	add	r7, sp, #0
  402d0a:	4603      	mov	r3, r0
  402d0c:	460a      	mov	r2, r1
  402d0e:	71fb      	strb	r3, [r7, #7]
  402d10:	4613      	mov	r3, r2
  402d12:	71bb      	strb	r3, [r7, #6]
  ssd1311_write_cmd(&m_ssd1311, 0x80 + 0x20 * y + x);
  402d14:	79bb      	ldrb	r3, [r7, #6]
  402d16:	3304      	adds	r3, #4
  402d18:	b2db      	uxtb	r3, r3
  402d1a:	015b      	lsls	r3, r3, #5
  402d1c:	b2da      	uxtb	r2, r3
  402d1e:	79fb      	ldrb	r3, [r7, #7]
  402d20:	4413      	add	r3, r2
  402d22:	b2db      	uxtb	r3, r3
  402d24:	4619      	mov	r1, r3
  402d26:	4803      	ldr	r0, [pc, #12]	; (402d34 <m_bsp_lcd_set_position+0x30>)
  402d28:	4b03      	ldr	r3, [pc, #12]	; (402d38 <m_bsp_lcd_set_position+0x34>)
  402d2a:	4798      	blx	r3
}
  402d2c:	bf00      	nop
  402d2e:	3708      	adds	r7, #8
  402d30:	46bd      	mov	sp, r7
  402d32:	bd80      	pop	{r7, pc}
  402d34:	2000acc0 	.word	0x2000acc0
  402d38:	00402e59 	.word	0x00402e59

00402d3c <bsp_rtc_init>:
/* Private macros ----------------------------------------------------- */
/* Public variables --------------------------------------------------- */
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
void bsp_rtc_init(void)
{
  402d3c:	b580      	push	{r7, lr}
  402d3e:	af00      	add	r7, sp, #0
  pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  402d40:	2000      	movs	r0, #0
  402d42:	4b07      	ldr	r3, [pc, #28]	; (402d60 <bsp_rtc_init+0x24>)
  402d44:	4798      	blx	r3

  while (!pmc_osc_is_ready_32kxtal());
  402d46:	bf00      	nop
  402d48:	4b06      	ldr	r3, [pc, #24]	; (402d64 <bsp_rtc_init+0x28>)
  402d4a:	4798      	blx	r3
  402d4c:	4603      	mov	r3, r0
  402d4e:	2b00      	cmp	r3, #0
  402d50:	d0fa      	beq.n	402d48 <bsp_rtc_init+0xc>

  rtc_set_hour_mode(RTC, 0);
  402d52:	2100      	movs	r1, #0
  402d54:	4804      	ldr	r0, [pc, #16]	; (402d68 <bsp_rtc_init+0x2c>)
  402d56:	4b05      	ldr	r3, [pc, #20]	; (402d6c <bsp_rtc_init+0x30>)
  402d58:	4798      	blx	r3
}
  402d5a:	bf00      	nop
  402d5c:	bd80      	pop	{r7, pc}
  402d5e:	bf00      	nop
  402d60:	0040992d 	.word	0x0040992d
  402d64:	00409965 	.word	0x00409965
  402d68:	400e1860 	.word	0x400e1860
  402d6c:	00405b2d 	.word	0x00405b2d

00402d70 <bsp_rtc_get_time_struct>:

void bsp_rtc_get_time_struct(date_time_t *dt)
{
  402d70:	b590      	push	{r4, r7, lr}
  402d72:	b085      	sub	sp, #20
  402d74:	af02      	add	r7, sp, #8
  402d76:	6078      	str	r0, [r7, #4]
  rtc_get_time(RTC, (uint32_t *)&dt->tm_hour, (uint32_t *)&dt->tm_min, (uint32_t *)&dt->tm_sec);
  402d78:	687b      	ldr	r3, [r7, #4]
  402d7a:	f103 0108 	add.w	r1, r3, #8
  402d7e:	687b      	ldr	r3, [r7, #4]
  402d80:	1d1a      	adds	r2, r3, #4
  402d82:	687b      	ldr	r3, [r7, #4]
  402d84:	4812      	ldr	r0, [pc, #72]	; (402dd0 <bsp_rtc_get_time_struct+0x60>)
  402d86:	4c13      	ldr	r4, [pc, #76]	; (402dd4 <bsp_rtc_get_time_struct+0x64>)
  402d88:	47a0      	blx	r4
  rtc_get_date(RTC, (uint32_t *)&dt->tm_year, (uint32_t *)&dt->tm_mon, (uint32_t *)&dt->tm_mday, NULL);
  402d8a:	687b      	ldr	r3, [r7, #4]
  402d8c:	f103 0114 	add.w	r1, r3, #20
  402d90:	687b      	ldr	r3, [r7, #4]
  402d92:	f103 0210 	add.w	r2, r3, #16
  402d96:	687b      	ldr	r3, [r7, #4]
  402d98:	f103 000c 	add.w	r0, r3, #12
  402d9c:	2300      	movs	r3, #0
  402d9e:	9300      	str	r3, [sp, #0]
  402da0:	4603      	mov	r3, r0
  402da2:	480b      	ldr	r0, [pc, #44]	; (402dd0 <bsp_rtc_get_time_struct+0x60>)
  402da4:	4c0c      	ldr	r4, [pc, #48]	; (402dd8 <bsp_rtc_get_time_struct+0x68>)
  402da6:	47a0      	blx	r4

  dt->tm_year %= 1000;
  402da8:	687b      	ldr	r3, [r7, #4]
  402daa:	695a      	ldr	r2, [r3, #20]
  402dac:	4b0b      	ldr	r3, [pc, #44]	; (402ddc <bsp_rtc_get_time_struct+0x6c>)
  402dae:	fb83 1302 	smull	r1, r3, r3, r2
  402db2:	1199      	asrs	r1, r3, #6
  402db4:	17d3      	asrs	r3, r2, #31
  402db6:	1acb      	subs	r3, r1, r3
  402db8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  402dbc:	fb01 f303 	mul.w	r3, r1, r3
  402dc0:	1ad3      	subs	r3, r2, r3
  402dc2:	687a      	ldr	r2, [r7, #4]
  402dc4:	6153      	str	r3, [r2, #20]
}
  402dc6:	bf00      	nop
  402dc8:	370c      	adds	r7, #12
  402dca:	46bd      	mov	sp, r7
  402dcc:	bd90      	pop	{r4, r7, pc}
  402dce:	bf00      	nop
  402dd0:	400e1860 	.word	0x400e1860
  402dd4:	00405b63 	.word	0x00405b63
  402dd8:	00405c27 	.word	0x00405c27
  402ddc:	10624dd3 	.word	0x10624dd3

00402de0 <bsp_rtc_make_string_time_style>:

void bsp_rtc_make_string_time_style(char *out, date_time_t *dt)
{
  402de0:	b5b0      	push	{r4, r5, r7, lr}
  402de2:	b086      	sub	sp, #24
  402de4:	af04      	add	r7, sp, #16
  402de6:	6078      	str	r0, [r7, #4]
  402de8:	6039      	str	r1, [r7, #0]
  sprintf(out, "%02d%02d%02d:%02d%02d%02d", dt->tm_year, dt->tm_mon, dt->tm_mday,
  402dea:	683b      	ldr	r3, [r7, #0]
  402dec:	695c      	ldr	r4, [r3, #20]
  402dee:	683b      	ldr	r3, [r7, #0]
  402df0:	691d      	ldr	r5, [r3, #16]
  402df2:	683b      	ldr	r3, [r7, #0]
  402df4:	68db      	ldr	r3, [r3, #12]
  402df6:	683a      	ldr	r2, [r7, #0]
  402df8:	6892      	ldr	r2, [r2, #8]
  402dfa:	6839      	ldr	r1, [r7, #0]
  402dfc:	6849      	ldr	r1, [r1, #4]
  402dfe:	6838      	ldr	r0, [r7, #0]
  402e00:	6800      	ldr	r0, [r0, #0]
  402e02:	9003      	str	r0, [sp, #12]
  402e04:	9102      	str	r1, [sp, #8]
  402e06:	9201      	str	r2, [sp, #4]
  402e08:	9300      	str	r3, [sp, #0]
  402e0a:	462b      	mov	r3, r5
  402e0c:	4622      	mov	r2, r4
  402e0e:	4904      	ldr	r1, [pc, #16]	; (402e20 <bsp_rtc_make_string_time_style+0x40>)
  402e10:	6878      	ldr	r0, [r7, #4]
  402e12:	4c04      	ldr	r4, [pc, #16]	; (402e24 <bsp_rtc_make_string_time_style+0x44>)
  402e14:	47a0      	blx	r4
                                            dt->tm_hour, dt->tm_min, dt->tm_sec);
}
  402e16:	bf00      	nop
  402e18:	3708      	adds	r7, #8
  402e1a:	46bd      	mov	sp, r7
  402e1c:	bdb0      	pop	{r4, r5, r7, pc}
  402e1e:	bf00      	nop
  402e20:	0040ee40 	.word	0x0040ee40
  402e24:	0040a361 	.word	0x0040a361

00402e28 <ssd1311_init>:
void cursPos(ssd1311_t *me, uint8_t col, uint8_t row);


/* Function definitions ----------------------------------------------- */
base_status_t ssd1311_init(ssd1311_t *me)
{
  402e28:	b580      	push	{r7, lr}
  402e2a:	b082      	sub	sp, #8
  402e2c:	af00      	add	r7, sp, #0
  402e2e:	6078      	str	r0, [r7, #4]
  if ((me == NULL) || (me->i2c_write == NULL))
  402e30:	687b      	ldr	r3, [r7, #4]
  402e32:	2b00      	cmp	r3, #0
  402e34:	d003      	beq.n	402e3e <ssd1311_init+0x16>
  402e36:	687b      	ldr	r3, [r7, #4]
  402e38:	685b      	ldr	r3, [r3, #4]
  402e3a:	2b00      	cmp	r3, #0
  402e3c:	d101      	bne.n	402e42 <ssd1311_init+0x1a>
    return BS_ERROR_PARAMS;
  402e3e:	2301      	movs	r3, #1
  402e40:	e003      	b.n	402e4a <ssd1311_init+0x22>

  m_ssd1311_run_cfg_script(me);
  402e42:	6878      	ldr	r0, [r7, #4]
  402e44:	4b03      	ldr	r3, [pc, #12]	; (402e54 <ssd1311_init+0x2c>)
  402e46:	4798      	blx	r3

  return BS_OK;
  402e48:	2300      	movs	r3, #0
}
  402e4a:	4618      	mov	r0, r3
  402e4c:	3708      	adds	r7, #8
  402e4e:	46bd      	mov	sp, r7
  402e50:	bd80      	pop	{r7, pc}
  402e52:	bf00      	nop
  402e54:	00402eb9 	.word	0x00402eb9

00402e58 <ssd1311_write_cmd>:

base_status_t ssd1311_write_cmd(ssd1311_t *me, uint8_t cmd)
{
  402e58:	b590      	push	{r4, r7, lr}
  402e5a:	b083      	sub	sp, #12
  402e5c:	af00      	add	r7, sp, #0
  402e5e:	6078      	str	r0, [r7, #4]
  402e60:	460b      	mov	r3, r1
  402e62:	70fb      	strb	r3, [r7, #3]
  CHECK(BS_OK == me->i2c_write(me->device_address, SSD1311_CMD_MODE, &cmd, 1), BS_ERROR);
  402e64:	687b      	ldr	r3, [r7, #4]
  402e66:	685c      	ldr	r4, [r3, #4]
  402e68:	687b      	ldr	r3, [r7, #4]
  402e6a:	7818      	ldrb	r0, [r3, #0]
  402e6c:	1cfa      	adds	r2, r7, #3
  402e6e:	2301      	movs	r3, #1
  402e70:	2180      	movs	r1, #128	; 0x80
  402e72:	47a0      	blx	r4
  402e74:	4603      	mov	r3, r0
  402e76:	2b00      	cmp	r3, #0
  402e78:	d001      	beq.n	402e7e <ssd1311_write_cmd+0x26>
  402e7a:	2302      	movs	r3, #2
  402e7c:	e000      	b.n	402e80 <ssd1311_write_cmd+0x28>

  return BS_OK;
  402e7e:	2300      	movs	r3, #0
}
  402e80:	4618      	mov	r0, r3
  402e82:	370c      	adds	r7, #12
  402e84:	46bd      	mov	sp, r7
  402e86:	bd90      	pop	{r4, r7, pc}

00402e88 <ssd1311_write_data_byte>:

  return BS_OK;
}

base_status_t ssd1311_write_data_byte(ssd1311_t *me, uint8_t data)
{
  402e88:	b590      	push	{r4, r7, lr}
  402e8a:	b083      	sub	sp, #12
  402e8c:	af00      	add	r7, sp, #0
  402e8e:	6078      	str	r0, [r7, #4]
  402e90:	460b      	mov	r3, r1
  402e92:	70fb      	strb	r3, [r7, #3]
  CHECK(BS_OK == me->i2c_write(me->device_address, SSD1311_DATA_MODE, &data, 1), BS_ERROR);
  402e94:	687b      	ldr	r3, [r7, #4]
  402e96:	685c      	ldr	r4, [r3, #4]
  402e98:	687b      	ldr	r3, [r7, #4]
  402e9a:	7818      	ldrb	r0, [r3, #0]
  402e9c:	1cfa      	adds	r2, r7, #3
  402e9e:	2301      	movs	r3, #1
  402ea0:	2140      	movs	r1, #64	; 0x40
  402ea2:	47a0      	blx	r4
  402ea4:	4603      	mov	r3, r0
  402ea6:	2b00      	cmp	r3, #0
  402ea8:	d001      	beq.n	402eae <ssd1311_write_data_byte+0x26>
  402eaa:	2302      	movs	r3, #2
  402eac:	e000      	b.n	402eb0 <ssd1311_write_data_byte+0x28>

  return BS_OK;
  402eae:	2300      	movs	r3, #0
}
  402eb0:	4618      	mov	r0, r3
  402eb2:	370c      	adds	r7, #12
  402eb4:	46bd      	mov	sp, r7
  402eb6:	bd90      	pop	{r4, r7, pc}

00402eb8 <m_ssd1311_run_cfg_script>:
 * @return
 * - BS_OK
 * - BS_ERROR
 */
static base_status_t m_ssd1311_run_cfg_script(ssd1311_t *me)
{
  402eb8:	b580      	push	{r7, lr}
  402eba:	b084      	sub	sp, #16
  402ebc:	af00      	add	r7, sp, #0
  402ebe:	6078      	str	r0, [r7, #4]
  int i          = 0;
  402ec0:	2300      	movs	r3, #0
  402ec2:	60fb      	str	r3, [r7, #12]
  int end_script = 0;
  402ec4:	2300      	movs	r3, #0
  402ec6:	60bb      	str	r3, [r7, #8]

  do
  {
    switch (SSD1311_CFG_SCRIPT[i].cmd)
  402ec8:	4a20      	ldr	r2, [pc, #128]	; (402f4c <m_ssd1311_run_cfg_script+0x94>)
  402eca:	68fb      	ldr	r3, [r7, #12]
  402ecc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
  402ed0:	2b04      	cmp	r3, #4
  402ed2:	d82e      	bhi.n	402f32 <m_ssd1311_run_cfg_script+0x7a>
  402ed4:	a201      	add	r2, pc, #4	; (adr r2, 402edc <m_ssd1311_run_cfg_script+0x24>)
  402ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402eda:	bf00      	nop
  402edc:	00402f33 	.word	0x00402f33
  402ee0:	00402f2d 	.word	0x00402f2d
  402ee4:	00402ef1 	.word	0x00402ef1
  402ee8:	00402f05 	.word	0x00402f05
  402eec:	00402f19 	.word	0x00402f19
    {
    case SSD1311_START:
      break;
    case SSD1311_CMD:
      ssd1311_write_cmd(me, SSD1311_CFG_SCRIPT[i].data & 0xFF);
  402ef0:	4a16      	ldr	r2, [pc, #88]	; (402f4c <m_ssd1311_run_cfg_script+0x94>)
  402ef2:	68fb      	ldr	r3, [r7, #12]
  402ef4:	005b      	lsls	r3, r3, #1
  402ef6:	4413      	add	r3, r2
  402ef8:	785b      	ldrb	r3, [r3, #1]
  402efa:	4619      	mov	r1, r3
  402efc:	6878      	ldr	r0, [r7, #4]
  402efe:	4b14      	ldr	r3, [pc, #80]	; (402f50 <m_ssd1311_run_cfg_script+0x98>)
  402f00:	4798      	blx	r3
      break;
  402f02:	e017      	b.n	402f34 <m_ssd1311_run_cfg_script+0x7c>
    case SSD1311_DATA:
      ssd1311_write_data_byte(me, SSD1311_CFG_SCRIPT[i].data & 0xFF);
  402f04:	4a11      	ldr	r2, [pc, #68]	; (402f4c <m_ssd1311_run_cfg_script+0x94>)
  402f06:	68fb      	ldr	r3, [r7, #12]
  402f08:	005b      	lsls	r3, r3, #1
  402f0a:	4413      	add	r3, r2
  402f0c:	785b      	ldrb	r3, [r3, #1]
  402f0e:	4619      	mov	r1, r3
  402f10:	6878      	ldr	r0, [r7, #4]
  402f12:	4b10      	ldr	r3, [pc, #64]	; (402f54 <m_ssd1311_run_cfg_script+0x9c>)
  402f14:	4798      	blx	r3
      break;
  402f16:	e00d      	b.n	402f34 <m_ssd1311_run_cfg_script+0x7c>
    case SSD1311_DELAY:
      me->delay(SSD1311_CFG_SCRIPT[i].data);
  402f18:	687b      	ldr	r3, [r7, #4]
  402f1a:	689a      	ldr	r2, [r3, #8]
  402f1c:	490b      	ldr	r1, [pc, #44]	; (402f4c <m_ssd1311_run_cfg_script+0x94>)
  402f1e:	68fb      	ldr	r3, [r7, #12]
  402f20:	005b      	lsls	r3, r3, #1
  402f22:	440b      	add	r3, r1
  402f24:	785b      	ldrb	r3, [r3, #1]
  402f26:	4618      	mov	r0, r3
  402f28:	4790      	blx	r2
      break;
  402f2a:	e003      	b.n	402f34 <m_ssd1311_run_cfg_script+0x7c>
    case SSD1311_END:
      end_script = 1;
  402f2c:	2301      	movs	r3, #1
  402f2e:	60bb      	str	r3, [r7, #8]
      break;
  402f30:	e000      	b.n	402f34 <m_ssd1311_run_cfg_script+0x7c>
    default:
      break;
  402f32:	bf00      	nop
    }
    i++;
  402f34:	68fb      	ldr	r3, [r7, #12]
  402f36:	3301      	adds	r3, #1
  402f38:	60fb      	str	r3, [r7, #12]
  }
  while (!end_script);
  402f3a:	68bb      	ldr	r3, [r7, #8]
  402f3c:	2b00      	cmp	r3, #0
  402f3e:	d0c3      	beq.n	402ec8 <m_ssd1311_run_cfg_script+0x10>

  return BS_OK;
  402f40:	2300      	movs	r3, #0
}
  402f42:	4618      	mov	r0, r3
  402f44:	3710      	adds	r7, #16
  402f46:	46bd      	mov	sp, r7
  402f48:	bd80      	pop	{r7, pc}
  402f4a:	bf00      	nop
  402f4c:	0040ee5c 	.word	0x0040ee5c
  402f50:	00402e59 	.word	0x00402e59
  402f54:	00402e89 	.word	0x00402e89

00402f58 <ioport_get_pin_level>:
{
  402f58:	b480      	push	{r7}
  402f5a:	b089      	sub	sp, #36	; 0x24
  402f5c:	af00      	add	r7, sp, #0
  402f5e:	6078      	str	r0, [r7, #4]
  402f60:	687b      	ldr	r3, [r7, #4]
  402f62:	61fb      	str	r3, [r7, #28]
  402f64:	69fb      	ldr	r3, [r7, #28]
  402f66:	61bb      	str	r3, [r7, #24]
  402f68:	69bb      	ldr	r3, [r7, #24]
  402f6a:	617b      	str	r3, [r7, #20]
	return pin >> 5;
  402f6c:	697b      	ldr	r3, [r7, #20]
  402f6e:	095b      	lsrs	r3, r3, #5
  402f70:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402f72:	693b      	ldr	r3, [r7, #16]
  402f74:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402f78:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402f7c:	025b      	lsls	r3, r3, #9
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  402f80:	69fb      	ldr	r3, [r7, #28]
  402f82:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402f84:	68fb      	ldr	r3, [r7, #12]
  402f86:	f003 031f 	and.w	r3, r3, #31
  402f8a:	2101      	movs	r1, #1
  402f8c:	fa01 f303 	lsl.w	r3, r1, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402f90:	4013      	ands	r3, r2
  402f92:	2b00      	cmp	r3, #0
  402f94:	bf14      	ite	ne
  402f96:	2301      	movne	r3, #1
  402f98:	2300      	moveq	r3, #0
  402f9a:	b2db      	uxtb	r3, r3
}
  402f9c:	4618      	mov	r0, r3
  402f9e:	3724      	adds	r7, #36	; 0x24
  402fa0:	46bd      	mov	sp, r7
  402fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fa6:	4770      	bx	lr

00402fa8 <sys_init>:
static void m_lcd_write_sensor_event(date_time_t *dt, uint8_t sensor_name);
static void m_sdcard_write_sensor_event(date_time_t *dt, uint8_t sensor_name);

/* Function definitions ----------------------------------------------- */
void sys_init(void)
{
  402fa8:	b590      	push	{r4, r7, lr}
  402faa:	b085      	sub	sp, #20
  402fac:	af04      	add	r7, sp, #16
  g_sensor_evt_queue = xQueueCreate(10, sizeof(uint8_t));
  402fae:	2200      	movs	r2, #0
  402fb0:	2101      	movs	r1, #1
  402fb2:	200a      	movs	r0, #10
  402fb4:	4b13      	ldr	r3, [pc, #76]	; (403004 <sys_init+0x5c>)
  402fb6:	4798      	blx	r3
  402fb8:	4602      	mov	r2, r0
  402fba:	4b13      	ldr	r3, [pc, #76]	; (403008 <sys_init+0x60>)
  402fbc:	601a      	str	r2, [r3, #0]

  sysclk_init();   // Initialize System Clock
  402fbe:	4b13      	ldr	r3, [pc, #76]	; (40300c <sys_init+0x64>)
  402fc0:	4798      	blx	r3
  board_init();    // Board init
  402fc2:	4b13      	ldr	r3, [pc, #76]	; (403010 <sys_init+0x68>)
  402fc4:	4798      	blx	r3
  bsp_hw_init();   // Hardware init
  402fc6:	4b13      	ldr	r3, [pc, #76]	; (403014 <sys_init+0x6c>)
  402fc8:	4798      	blx	r3
  bsp_can_init();  // Can bus init
  402fca:	4b13      	ldr	r3, [pc, #76]	; (403018 <sys_init+0x70>)
  402fcc:	4798      	blx	r3
  bsp_lcd_init();  // LCD init
  402fce:	4b13      	ldr	r3, [pc, #76]	; (40301c <sys_init+0x74>)
  402fd0:	4798      	blx	r3
  fs_init();       // FS init
  402fd2:	4b13      	ldr	r3, [pc, #76]	; (403020 <sys_init+0x78>)
  402fd4:	4798      	blx	r3

#if (_CONFIG_ELEVATOR_BOARD) // {
  // Create task to handle sensor events
  xTaskCreate(m_sensor_hande_task,
  402fd6:	4b13      	ldr	r3, [pc, #76]	; (403024 <sys_init+0x7c>)
  402fd8:	681b      	ldr	r3, [r3, #0]
  402fda:	2200      	movs	r2, #0
  402fdc:	9203      	str	r2, [sp, #12]
  402fde:	2200      	movs	r2, #0
  402fe0:	9202      	str	r2, [sp, #8]
  402fe2:	9301      	str	r3, [sp, #4]
  402fe4:	2303      	movs	r3, #3
  402fe6:	9300      	str	r3, [sp, #0]
  402fe8:	2300      	movs	r3, #0
  402fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402fee:	490e      	ldr	r1, [pc, #56]	; (403028 <sys_init+0x80>)
  402ff0:	480e      	ldr	r0, [pc, #56]	; (40302c <sys_init+0x84>)
  402ff2:	4c0f      	ldr	r4, [pc, #60]	; (403030 <sys_init+0x88>)
  402ff4:	47a0      	blx	r4
              NULL,
              MAIN_TASK_PRIORITY,
              m_main_task_hdl);
#endif // }

  vTaskStartScheduler();
  402ff6:	4b0f      	ldr	r3, [pc, #60]	; (403034 <sys_init+0x8c>)
  402ff8:	4798      	blx	r3
}
  402ffa:	bf00      	nop
  402ffc:	3704      	adds	r7, #4
  402ffe:	46bd      	mov	sp, r7
  403000:	bd90      	pop	{r4, r7, pc}
  403002:	bf00      	nop
  403004:	004009cd 	.word	0x004009cd
  403008:	2000acbc 	.word	0x2000acbc
  40300c:	004090d9 	.word	0x004090d9
  403010:	0040510d 	.word	0x0040510d
  403014:	00402471 	.word	0x00402471
  403018:	004026c9 	.word	0x004026c9
  40301c:	00402c19 	.word	0x00402c19
  403020:	00400165 	.word	0x00400165
  403024:	2000abc8 	.word	0x2000abc8
  403028:	0040ee9c 	.word	0x0040ee9c
  40302c:	00403039 	.word	0x00403039
  403030:	004010e5 	.word	0x004010e5
  403034:	004012f5 	.word	0x004012f5

00403038 <m_sensor_hande_task>:
/* Private function definitions --------------------------------------- */
/**
 * @brief Sensor handle task
 */
static void m_sensor_hande_task(void *params)
{
  403038:	b580      	push	{r7, lr}
  40303a:	b08c      	sub	sp, #48	; 0x30
  40303c:	af00      	add	r7, sp, #0
  40303e:	6078      	str	r0, [r7, #4]
  date_time_t dt;

  while (1)
  {
    for (uint8_t i = 1; i <= 99; i++)
  403040:	2301      	movs	r3, #1
  403042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  403046:	e05c      	b.n	403102 <m_sensor_hande_task+0xca>
    {
      if (!ioport_get_pin_level(PIN_INDEX(i)) && !IO_SENSOR_STATE[i])
  403048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40304c:	011b      	lsls	r3, r3, #4
  40304e:	4a31      	ldr	r2, [pc, #196]	; (403114 <m_sensor_hande_task+0xdc>)
  403050:	4413      	add	r3, r2
  403052:	4618      	mov	r0, r3
  403054:	4b30      	ldr	r3, [pc, #192]	; (403118 <m_sensor_hande_task+0xe0>)
  403056:	4798      	blx	r3
  403058:	4603      	mov	r3, r0
  40305a:	4618      	mov	r0, r3
  40305c:	4b2f      	ldr	r3, [pc, #188]	; (40311c <m_sensor_hande_task+0xe4>)
  40305e:	4798      	blx	r3
  403060:	4603      	mov	r3, r0
  403062:	f083 0301 	eor.w	r3, r3, #1
  403066:	b2db      	uxtb	r3, r3
  403068:	2b00      	cmp	r3, #0
  40306a:	d02b      	beq.n	4030c4 <m_sensor_hande_task+0x8c>
  40306c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  403070:	4a2b      	ldr	r2, [pc, #172]	; (403120 <m_sensor_hande_task+0xe8>)
  403072:	5cd3      	ldrb	r3, [r2, r3]
  403074:	f083 0301 	eor.w	r3, r3, #1
  403078:	b2db      	uxtb	r3, r3
  40307a:	2b00      	cmp	r3, #0
  40307c:	d022      	beq.n	4030c4 <m_sensor_hande_task+0x8c>
      {
        bsp_rtc_get_time_struct(&dt);
  40307e:	f107 0308 	add.w	r3, r7, #8
  403082:	4618      	mov	r0, r3
  403084:	4b27      	ldr	r3, [pc, #156]	; (403124 <m_sensor_hande_task+0xec>)
  403086:	4798      	blx	r3

        bsp_can_send_sensor_event(&dt, i);
  403088:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  40308c:	f107 0308 	add.w	r3, r7, #8
  403090:	4611      	mov	r1, r2
  403092:	4618      	mov	r0, r3
  403094:	4b24      	ldr	r3, [pc, #144]	; (403128 <m_sensor_hande_task+0xf0>)
  403096:	4798      	blx	r3
        m_lcd_write_sensor_event(&dt, i);
  403098:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  40309c:	f107 0308 	add.w	r3, r7, #8
  4030a0:	4611      	mov	r1, r2
  4030a2:	4618      	mov	r0, r3
  4030a4:	4b21      	ldr	r3, [pc, #132]	; (40312c <m_sensor_hande_task+0xf4>)
  4030a6:	4798      	blx	r3
        m_sdcard_write_sensor_event(&dt,i);
  4030a8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  4030ac:	f107 0308 	add.w	r3, r7, #8
  4030b0:	4611      	mov	r1, r2
  4030b2:	4618      	mov	r0, r3
  4030b4:	4b1e      	ldr	r3, [pc, #120]	; (403130 <m_sensor_hande_task+0xf8>)
  4030b6:	4798      	blx	r3
        IO_SENSOR_STATE[i] = true;
  4030b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4030bc:	4a18      	ldr	r2, [pc, #96]	; (403120 <m_sensor_hande_task+0xe8>)
  4030be:	2101      	movs	r1, #1
  4030c0:	54d1      	strb	r1, [r2, r3]
  4030c2:	e019      	b.n	4030f8 <m_sensor_hande_task+0xc0>
      }
      else if (ioport_get_pin_level(PIN_INDEX(i)) && IO_SENSOR_STATE[i])
  4030c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4030c8:	011b      	lsls	r3, r3, #4
  4030ca:	4a12      	ldr	r2, [pc, #72]	; (403114 <m_sensor_hande_task+0xdc>)
  4030cc:	4413      	add	r3, r2
  4030ce:	4618      	mov	r0, r3
  4030d0:	4b11      	ldr	r3, [pc, #68]	; (403118 <m_sensor_hande_task+0xe0>)
  4030d2:	4798      	blx	r3
  4030d4:	4603      	mov	r3, r0
  4030d6:	4618      	mov	r0, r3
  4030d8:	4b10      	ldr	r3, [pc, #64]	; (40311c <m_sensor_hande_task+0xe4>)
  4030da:	4798      	blx	r3
  4030dc:	4603      	mov	r3, r0
  4030de:	2b00      	cmp	r3, #0
  4030e0:	d00a      	beq.n	4030f8 <m_sensor_hande_task+0xc0>
  4030e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4030e6:	4a0e      	ldr	r2, [pc, #56]	; (403120 <m_sensor_hande_task+0xe8>)
  4030e8:	5cd3      	ldrb	r3, [r2, r3]
  4030ea:	2b00      	cmp	r3, #0
  4030ec:	d004      	beq.n	4030f8 <m_sensor_hande_task+0xc0>
      {
        IO_SENSOR_STATE[i] = false;
  4030ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4030f2:	4a0b      	ldr	r2, [pc, #44]	; (403120 <m_sensor_hande_task+0xe8>)
  4030f4:	2100      	movs	r1, #0
  4030f6:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= 99; i++)
  4030f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4030fc:	3301      	adds	r3, #1
  4030fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  403102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  403106:	2b63      	cmp	r3, #99	; 0x63
  403108:	d99e      	bls.n	403048 <m_sensor_hande_task+0x10>
      // {
      //   IO_SENSOR_STATE[i] = false;
      // }
    }

    vTaskDelay(pdMS_TO_TICKS(100));
  40310a:	2064      	movs	r0, #100	; 0x64
  40310c:	4b09      	ldr	r3, [pc, #36]	; (403134 <m_sensor_hande_task+0xfc>)
  40310e:	4798      	blx	r3
    for (uint8_t i = 1; i <= 99; i++)
  403110:	e796      	b.n	403040 <m_sensor_hande_task+0x8>
  403112:	bf00      	nop
  403114:	0040e800 	.word	0x0040e800
  403118:	00402c01 	.word	0x00402c01
  40311c:	00402f59 	.word	0x00402f59
  403120:	2000ab64 	.word	0x2000ab64
  403124:	00402d71 	.word	0x00402d71
  403128:	0040273d 	.word	0x0040273d
  40312c:	00403139 	.word	0x00403139
  403130:	00403195 	.word	0x00403195
  403134:	0040128d 	.word	0x0040128d

00403138 <m_lcd_write_sensor_event>:

/**
 * @brief LCD write sensor event
 */
static void m_lcd_write_sensor_event(date_time_t *dt, uint8_t sensor_name)
{
  403138:	b590      	push	{r4, r7, lr}
  40313a:	b089      	sub	sp, #36	; 0x24
  40313c:	af02      	add	r7, sp, #8
  40313e:	6078      	str	r0, [r7, #4]
  403140:	460b      	mov	r3, r1
  403142:	70fb      	strb	r3, [r7, #3]
  static uint8_t m_current_row = 0;
  char time[14];

  bsp_rtc_make_string_time_style(time, dt);
  403144:	f107 0308 	add.w	r3, r7, #8
  403148:	6879      	ldr	r1, [r7, #4]
  40314a:	4618      	mov	r0, r3
  40314c:	4b0d      	ldr	r3, [pc, #52]	; (403184 <m_lcd_write_sensor_event+0x4c>)
  40314e:	4798      	blx	r3

  bsp_lcd_write_string(0, m_current_row++, "%s: SS%02d", time, sensor_name);
  403150:	4b0d      	ldr	r3, [pc, #52]	; (403188 <m_lcd_write_sensor_event+0x50>)
  403152:	7819      	ldrb	r1, [r3, #0]
  403154:	1c4b      	adds	r3, r1, #1
  403156:	b2da      	uxtb	r2, r3
  403158:	4b0b      	ldr	r3, [pc, #44]	; (403188 <m_lcd_write_sensor_event+0x50>)
  40315a:	701a      	strb	r2, [r3, #0]
  40315c:	78fb      	ldrb	r3, [r7, #3]
  40315e:	f107 0208 	add.w	r2, r7, #8
  403162:	9300      	str	r3, [sp, #0]
  403164:	4613      	mov	r3, r2
  403166:	4a09      	ldr	r2, [pc, #36]	; (40318c <m_lcd_write_sensor_event+0x54>)
  403168:	2000      	movs	r0, #0
  40316a:	4c09      	ldr	r4, [pc, #36]	; (403190 <m_lcd_write_sensor_event+0x58>)
  40316c:	47a0      	blx	r4
  if (m_current_row == 4)
  40316e:	4b06      	ldr	r3, [pc, #24]	; (403188 <m_lcd_write_sensor_event+0x50>)
  403170:	781b      	ldrb	r3, [r3, #0]
  403172:	2b04      	cmp	r3, #4
  403174:	d102      	bne.n	40317c <m_lcd_write_sensor_event+0x44>
    m_current_row = 0;
  403176:	4b04      	ldr	r3, [pc, #16]	; (403188 <m_lcd_write_sensor_event+0x50>)
  403178:	2200      	movs	r2, #0
  40317a:	701a      	strb	r2, [r3, #0]
}
  40317c:	bf00      	nop
  40317e:	371c      	adds	r7, #28
  403180:	46bd      	mov	sp, r7
  403182:	bd90      	pop	{r4, r7, pc}
  403184:	00402de1 	.word	0x00402de1
  403188:	2000abcc 	.word	0x2000abcc
  40318c:	0040eeb0 	.word	0x0040eeb0
  403190:	00402c49 	.word	0x00402c49

00403194 <m_sdcard_write_sensor_event>:

/**
 * @brief SDcard write sensor event
 */
static void m_sdcard_write_sensor_event(date_time_t *dt, uint8_t sensor_name)
{
  403194:	b590      	push	{r4, r7, lr}
  403196:	b0b9      	sub	sp, #228	; 0xe4
  403198:	af00      	add	r7, sp, #0
  40319a:	6078      	str	r0, [r7, #4]
  40319c:	460b      	mov	r3, r1
  40319e:	70fb      	strb	r3, [r7, #3]
  char str[200];
  char time[14];

  bsp_rtc_make_string_time_style(time, dt);
  4031a0:	f107 0308 	add.w	r3, r7, #8
  4031a4:	6879      	ldr	r1, [r7, #4]
  4031a6:	4618      	mov	r0, r3
  4031a8:	4b09      	ldr	r3, [pc, #36]	; (4031d0 <m_sdcard_write_sensor_event+0x3c>)
  4031aa:	4798      	blx	r3

  sprintf(str, "%s: SS%2d\n", time, sensor_name);
  4031ac:	78fb      	ldrb	r3, [r7, #3]
  4031ae:	f107 0208 	add.w	r2, r7, #8
  4031b2:	f107 0018 	add.w	r0, r7, #24
  4031b6:	4907      	ldr	r1, [pc, #28]	; (4031d4 <m_sdcard_write_sensor_event+0x40>)
  4031b8:	4c07      	ldr	r4, [pc, #28]	; (4031d8 <m_sdcard_write_sensor_event+0x44>)
  4031ba:	47a0      	blx	r4

  fs_write(SD_PATH, str);
  4031bc:	f107 0318 	add.w	r3, r7, #24
  4031c0:	4619      	mov	r1, r3
  4031c2:	4806      	ldr	r0, [pc, #24]	; (4031dc <m_sdcard_write_sensor_event+0x48>)
  4031c4:	4b06      	ldr	r3, [pc, #24]	; (4031e0 <m_sdcard_write_sensor_event+0x4c>)
  4031c6:	4798      	blx	r3
}
  4031c8:	bf00      	nop
  4031ca:	37e4      	adds	r7, #228	; 0xe4
  4031cc:	46bd      	mov	sp, r7
  4031ce:	bd90      	pop	{r4, r7, pc}
  4031d0:	00402de1 	.word	0x00402de1
  4031d4:	0040eebc 	.word	0x0040eebc
  4031d8:	0040a361 	.word	0x0040a361
  4031dc:	0040eec8 	.word	0x0040eec8
  4031e0:	00400191 	.word	0x00400191

004031e4 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
  4031e4:	b480      	push	{r7}
  4031e6:	b087      	sub	sp, #28
  4031e8:	af00      	add	r7, sp, #0
  4031ea:	60f8      	str	r0, [r7, #12]
  4031ec:	4608      	mov	r0, r1
  4031ee:	4611      	mov	r1, r2
  4031f0:	461a      	mov	r2, r3
  4031f2:	4603      	mov	r3, r0
  4031f4:	817b      	strh	r3, [r7, #10]
  4031f6:	460b      	mov	r3, r1
  4031f8:	813b      	strh	r3, [r7, #8]
  4031fa:	4613      	mov	r3, r2
  4031fc:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4031fe:	897a      	ldrh	r2, [r7, #10]
  403200:	893b      	ldrh	r3, [r7, #8]
  403202:	1ad3      	subs	r3, r2, r3
  403204:	3307      	adds	r3, #7
  403206:	2b00      	cmp	r3, #0
  403208:	da00      	bge.n	40320c <SDMMC_UNSTUFF_BITS+0x28>
  40320a:	3307      	adds	r3, #7
  40320c:	10db      	asrs	r3, r3, #3
  40320e:	3b01      	subs	r3, #1
  403210:	68fa      	ldr	r2, [r7, #12]
  403212:	4413      	add	r3, r2
  403214:	781b      	ldrb	r3, [r3, #0]
  403216:	461a      	mov	r2, r3
  403218:	893b      	ldrh	r3, [r7, #8]
  40321a:	f003 0307 	and.w	r3, r3, #7
  40321e:	fa42 f303 	asr.w	r3, r2, r3
  403222:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
  403224:	893b      	ldrh	r3, [r7, #8]
  403226:	f003 0207 	and.w	r2, r3, #7
  40322a:	79fb      	ldrb	r3, [r7, #7]
  40322c:	4413      	add	r3, r2
  40322e:	2b08      	cmp	r3, #8
  403230:	dd16      	ble.n	403260 <SDMMC_UNSTUFF_BITS+0x7c>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  403232:	897a      	ldrh	r2, [r7, #10]
  403234:	893b      	ldrh	r3, [r7, #8]
  403236:	1ad3      	subs	r3, r2, r3
  403238:	3307      	adds	r3, #7
  40323a:	2b00      	cmp	r3, #0
  40323c:	da00      	bge.n	403240 <SDMMC_UNSTUFF_BITS+0x5c>
  40323e:	3307      	adds	r3, #7
  403240:	10db      	asrs	r3, r3, #3
  403242:	3b02      	subs	r3, #2
  403244:	68fa      	ldr	r2, [r7, #12]
  403246:	4413      	add	r3, r2
  403248:	781b      	ldrb	r3, [r3, #0]
  40324a:	461a      	mov	r2, r3
  40324c:	893b      	ldrh	r3, [r7, #8]
  40324e:	f003 0307 	and.w	r3, r3, #7
  403252:	f1c3 0308 	rsb	r3, r3, #8
  403256:	fa02 f303 	lsl.w	r3, r2, r3
  40325a:	697a      	ldr	r2, [r7, #20]
  40325c:	4313      	orrs	r3, r2
  40325e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  403260:	893b      	ldrh	r3, [r7, #8]
  403262:	f003 0207 	and.w	r2, r3, #7
  403266:	79fb      	ldrb	r3, [r7, #7]
  403268:	4413      	add	r3, r2
  40326a:	2b10      	cmp	r3, #16
  40326c:	dd16      	ble.n	40329c <SDMMC_UNSTUFF_BITS+0xb8>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40326e:	897a      	ldrh	r2, [r7, #10]
  403270:	893b      	ldrh	r3, [r7, #8]
  403272:	1ad3      	subs	r3, r2, r3
  403274:	3307      	adds	r3, #7
  403276:	2b00      	cmp	r3, #0
  403278:	da00      	bge.n	40327c <SDMMC_UNSTUFF_BITS+0x98>
  40327a:	3307      	adds	r3, #7
  40327c:	10db      	asrs	r3, r3, #3
  40327e:	3b03      	subs	r3, #3
  403280:	68fa      	ldr	r2, [r7, #12]
  403282:	4413      	add	r3, r2
  403284:	781b      	ldrb	r3, [r3, #0]
  403286:	461a      	mov	r2, r3
  403288:	893b      	ldrh	r3, [r7, #8]
  40328a:	f003 0307 	and.w	r3, r3, #7
  40328e:	f1c3 0310 	rsb	r3, r3, #16
  403292:	fa02 f303 	lsl.w	r3, r2, r3
  403296:	697a      	ldr	r2, [r7, #20]
  403298:	4313      	orrs	r3, r2
  40329a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  40329c:	893b      	ldrh	r3, [r7, #8]
  40329e:	f003 0207 	and.w	r2, r3, #7
  4032a2:	79fb      	ldrb	r3, [r7, #7]
  4032a4:	4413      	add	r3, r2
  4032a6:	2b10      	cmp	r3, #16
  4032a8:	dd16      	ble.n	4032d8 <SDMMC_UNSTUFF_BITS+0xf4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4032aa:	897a      	ldrh	r2, [r7, #10]
  4032ac:	893b      	ldrh	r3, [r7, #8]
  4032ae:	1ad3      	subs	r3, r2, r3
  4032b0:	3307      	adds	r3, #7
  4032b2:	2b00      	cmp	r3, #0
  4032b4:	da00      	bge.n	4032b8 <SDMMC_UNSTUFF_BITS+0xd4>
  4032b6:	3307      	adds	r3, #7
  4032b8:	10db      	asrs	r3, r3, #3
  4032ba:	3b03      	subs	r3, #3
  4032bc:	68fa      	ldr	r2, [r7, #12]
  4032be:	4413      	add	r3, r2
  4032c0:	781b      	ldrb	r3, [r3, #0]
  4032c2:	461a      	mov	r2, r3
  4032c4:	893b      	ldrh	r3, [r7, #8]
  4032c6:	f003 0307 	and.w	r3, r3, #7
  4032ca:	f1c3 0310 	rsb	r3, r3, #16
  4032ce:	fa02 f303 	lsl.w	r3, r2, r3
  4032d2:	697a      	ldr	r2, [r7, #20]
  4032d4:	4313      	orrs	r3, r2
  4032d6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
  4032d8:	79fb      	ldrb	r3, [r7, #7]
  4032da:	2201      	movs	r2, #1
  4032dc:	fa02 f303 	lsl.w	r3, r2, r3
  4032e0:	3b01      	subs	r3, #1
  4032e2:	697a      	ldr	r2, [r7, #20]
  4032e4:	4013      	ands	r3, r2
  4032e6:	617b      	str	r3, [r7, #20]
	return value;
  4032e8:	697b      	ldr	r3, [r7, #20]
}
  4032ea:	4618      	mov	r0, r3
  4032ec:	371c      	adds	r7, #28
  4032ee:	46bd      	mov	sp, r7
  4032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4032f4:	4770      	bx	lr
	...

004032f8 <mmc_mci_op_cond>:
 * - CMD1 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_mci_op_cond(void)
{
  4032f8:	b580      	push	{r7, lr}
  4032fa:	b082      	sub	sp, #8
  4032fc:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+6)*8) cylces = 4200 retry
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
  4032fe:	f241 0368 	movw	r3, #4200	; 0x1068
  403302:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  403304:	4917      	ldr	r1, [pc, #92]	; (403364 <mmc_mci_op_cond+0x6c>)
  403306:	f244 5001 	movw	r0, #17665	; 0x4501
  40330a:	4b17      	ldr	r3, [pc, #92]	; (403368 <mmc_mci_op_cond+0x70>)
  40330c:	4798      	blx	r3
  40330e:	4603      	mov	r3, r0
  403310:	f083 0301 	eor.w	r3, r3, #1
  403314:	b2db      	uxtb	r3, r3
  403316:	2b00      	cmp	r3, #0
  403318:	d001      	beq.n	40331e <mmc_mci_op_cond+0x26>
				SD_MMC_VOLTAGE_SUPPORT | OCR_ACCESS_MODE_SECTOR)) {
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
  40331a:	2300      	movs	r3, #0
  40331c:	e01e      	b.n	40335c <mmc_mci_op_cond+0x64>
		}
		// Check busy flag
		resp = driver_get_response();
  40331e:	4b13      	ldr	r3, [pc, #76]	; (40336c <mmc_mci_op_cond+0x74>)
  403320:	4798      	blx	r3
  403322:	6038      	str	r0, [r7, #0]
		if (resp & OCR_POWER_UP_BUSY) {
  403324:	683b      	ldr	r3, [r7, #0]
  403326:	2b00      	cmp	r3, #0
  403328:	da0f      	bge.n	40334a <mmc_mci_op_cond+0x52>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  40332a:	683b      	ldr	r3, [r7, #0]
  40332c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  403330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  403334:	d110      	bne.n	403358 <mmc_mci_op_cond+0x60>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  403336:	4b0e      	ldr	r3, [pc, #56]	; (403370 <mmc_mci_op_cond+0x78>)
  403338:	681b      	ldr	r3, [r3, #0]
  40333a:	4a0d      	ldr	r2, [pc, #52]	; (403370 <mmc_mci_op_cond+0x78>)
  40333c:	6812      	ldr	r2, [r2, #0]
  40333e:	7ad2      	ldrb	r2, [r2, #11]
  403340:	f042 0208 	orr.w	r2, r2, #8
  403344:	b2d2      	uxtb	r2, r2
  403346:	72da      	strb	r2, [r3, #11]
			}
			break;
  403348:	e006      	b.n	403358 <mmc_mci_op_cond+0x60>
		}
		if (retry-- == 0) {
  40334a:	687b      	ldr	r3, [r7, #4]
  40334c:	1e5a      	subs	r2, r3, #1
  40334e:	607a      	str	r2, [r7, #4]
  403350:	2b00      	cmp	r3, #0
  403352:	d1d7      	bne.n	403304 <mmc_mci_op_cond+0xc>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
  403354:	2300      	movs	r3, #0
  403356:	e001      	b.n	40335c <mmc_mci_op_cond+0x64>
			break;
  403358:	bf00      	nop
		}
	} while (1);
	return true;
  40335a:	2301      	movs	r3, #1
}
  40335c:	4618      	mov	r0, r3
  40335e:	3708      	adds	r7, #8
  403360:	46bd      	mov	sp, r7
  403362:	bd80      	pop	{r7, pc}
  403364:	401f8000 	.word	0x401f8000
  403368:	00405639 	.word	0x00405639
  40336c:	0040567d 	.word	0x0040567d
  403370:	2000abf4 	.word	0x2000abf4

00403374 <sd_mci_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_mci_op_cond(uint8_t v2)
{
  403374:	b580      	push	{r7, lr}
  403376:	b086      	sub	sp, #24
  403378:	af00      	add	r7, sp, #0
  40337a:	4603      	mov	r3, r0
  40337c:	71fb      	strb	r3, [r7, #7]
	 * 6 = cmd byte size
	 * 6 = response byte size
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 2100;
  40337e:	f640 0334 	movw	r3, #2100	; 0x834
  403382:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  403384:	2100      	movs	r1, #0
  403386:	f241 1037 	movw	r0, #4407	; 0x1137
  40338a:	4b21      	ldr	r3, [pc, #132]	; (403410 <sd_mci_op_cond+0x9c>)
  40338c:	4798      	blx	r3
  40338e:	4603      	mov	r3, r0
  403390:	f083 0301 	eor.w	r3, r3, #1
  403394:	b2db      	uxtb	r3, r3
  403396:	2b00      	cmp	r3, #0
  403398:	d001      	beq.n	40339e <sd_mci_op_cond+0x2a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
  40339a:	2300      	movs	r3, #0
  40339c:	e034      	b.n	403408 <sd_mci_op_cond+0x94>
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  40339e:	f44f 13fc 	mov.w	r3, #2064384	; 0x1f8000
  4033a2:	617b      	str	r3, [r7, #20]
		if (v2) {
  4033a4:	79fb      	ldrb	r3, [r7, #7]
  4033a6:	2b00      	cmp	r3, #0
  4033a8:	d003      	beq.n	4033b2 <sd_mci_op_cond+0x3e>
			arg |= SD_ACMD41_HCS;
  4033aa:	697b      	ldr	r3, [r7, #20]
  4033ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  4033b0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4033b2:	6979      	ldr	r1, [r7, #20]
  4033b4:	f244 5029 	movw	r0, #17705	; 0x4529
  4033b8:	4b15      	ldr	r3, [pc, #84]	; (403410 <sd_mci_op_cond+0x9c>)
  4033ba:	4798      	blx	r3
  4033bc:	4603      	mov	r3, r0
  4033be:	f083 0301 	eor.w	r3, r3, #1
  4033c2:	b2db      	uxtb	r3, r3
  4033c4:	2b00      	cmp	r3, #0
  4033c6:	d001      	beq.n	4033cc <sd_mci_op_cond+0x58>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
  4033c8:	2300      	movs	r3, #0
  4033ca:	e01d      	b.n	403408 <sd_mci_op_cond+0x94>
		}
		resp = driver_get_response();
  4033cc:	4b11      	ldr	r3, [pc, #68]	; (403414 <sd_mci_op_cond+0xa0>)
  4033ce:	4798      	blx	r3
  4033d0:	60f8      	str	r0, [r7, #12]
		if (resp & OCR_POWER_UP_BUSY) {
  4033d2:	68fb      	ldr	r3, [r7, #12]
  4033d4:	2b00      	cmp	r3, #0
  4033d6:	da0e      	bge.n	4033f6 <sd_mci_op_cond+0x82>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  4033d8:	68fb      	ldr	r3, [r7, #12]
  4033da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  4033de:	2b00      	cmp	r3, #0
  4033e0:	d010      	beq.n	403404 <sd_mci_op_cond+0x90>
				sd_mmc_card->type |= CARD_TYPE_HC;
  4033e2:	4b0d      	ldr	r3, [pc, #52]	; (403418 <sd_mci_op_cond+0xa4>)
  4033e4:	681b      	ldr	r3, [r3, #0]
  4033e6:	4a0c      	ldr	r2, [pc, #48]	; (403418 <sd_mci_op_cond+0xa4>)
  4033e8:	6812      	ldr	r2, [r2, #0]
  4033ea:	7ad2      	ldrb	r2, [r2, #11]
  4033ec:	f042 0208 	orr.w	r2, r2, #8
  4033f0:	b2d2      	uxtb	r2, r2
  4033f2:	72da      	strb	r2, [r3, #11]
			}
			break;
  4033f4:	e006      	b.n	403404 <sd_mci_op_cond+0x90>
		}
		if (retry-- == 0) {
  4033f6:	693b      	ldr	r3, [r7, #16]
  4033f8:	1e5a      	subs	r2, r3, #1
  4033fa:	613a      	str	r2, [r7, #16]
  4033fc:	2b00      	cmp	r3, #0
  4033fe:	d1c1      	bne.n	403384 <sd_mci_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
  403400:	2300      	movs	r3, #0
  403402:	e001      	b.n	403408 <sd_mci_op_cond+0x94>
			break;
  403404:	bf00      	nop
		}
	} while (1);
	return true;
  403406:	2301      	movs	r3, #1
}
  403408:	4618      	mov	r0, r3
  40340a:	3718      	adds	r7, #24
  40340c:	46bd      	mov	sp, r7
  40340e:	bd80      	pop	{r7, pc}
  403410:	00405639 	.word	0x00405639
  403414:	0040567d 	.word	0x0040567d
  403418:	2000abf4 	.word	0x2000abf4

0040341c <sdio_op_cond>:
 *   sd_mmc_card->type is updated
 *
 * \return true if success, otherwise false
 */
static bool sdio_op_cond(void)
{
  40341c:	b580      	push	{r7, lr}
  40341e:	b082      	sub	sp, #8
  403420:	af00      	add	r7, sp, #0
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  403422:	2100      	movs	r1, #0
  403424:	f244 5005 	movw	r0, #17669	; 0x4505
  403428:	4b23      	ldr	r3, [pc, #140]	; (4034b8 <sdio_op_cond+0x9c>)
  40342a:	4798      	blx	r3
  40342c:	4603      	mov	r3, r0
  40342e:	f083 0301 	eor.w	r3, r3, #1
  403432:	b2db      	uxtb	r3, r3
  403434:	2b00      	cmp	r3, #0
  403436:	d001      	beq.n	40343c <sdio_op_cond+0x20>
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
  403438:	2301      	movs	r3, #1
  40343a:	e039      	b.n	4034b0 <sdio_op_cond+0x94>
	}
	resp = driver_get_response();
  40343c:	4b1f      	ldr	r3, [pc, #124]	; (4034bc <sdio_op_cond+0xa0>)
  40343e:	4798      	blx	r3
  403440:	6078      	str	r0, [r7, #4]
	if ((resp & OCR_SDIO_NF) == 0) {
  403442:	687b      	ldr	r3, [r7, #4]
  403444:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
  403448:	2b00      	cmp	r3, #0
  40344a:	d101      	bne.n	403450 <sdio_op_cond+0x34>
		return true; // No error but card type not updated
  40344c:	2301      	movs	r3, #1
  40344e:	e02f      	b.n	4034b0 <sdio_op_cond+0x94>
	 * Wait card ready
	 * Timeout 1s = 400KHz / ((6+4)*8) cylces = 5000 retry
	 * 6 = cmd byte size
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
  403450:	f241 3388 	movw	r3, #5000	; 0x1388
  403454:	603b      	str	r3, [r7, #0]
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  403456:	687b      	ldr	r3, [r7, #4]
  403458:	f403 13fc 	and.w	r3, r3, #2064384	; 0x1f8000
  40345c:	4619      	mov	r1, r3
  40345e:	f244 5005 	movw	r0, #17669	; 0x4505
  403462:	4b15      	ldr	r3, [pc, #84]	; (4034b8 <sdio_op_cond+0x9c>)
  403464:	4798      	blx	r3
  403466:	4603      	mov	r3, r0
  403468:	f083 0301 	eor.w	r3, r3, #1
  40346c:	b2db      	uxtb	r3, r3
  40346e:	2b00      	cmp	r3, #0
  403470:	d001      	beq.n	403476 <sdio_op_cond+0x5a>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
  403472:	2300      	movs	r3, #0
  403474:	e01c      	b.n	4034b0 <sdio_op_cond+0x94>
		}
		resp = driver_get_response();
  403476:	4b11      	ldr	r3, [pc, #68]	; (4034bc <sdio_op_cond+0xa0>)
  403478:	4798      	blx	r3
  40347a:	6078      	str	r0, [r7, #4]
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  40347c:	687b      	ldr	r3, [r7, #4]
  40347e:	2b00      	cmp	r3, #0
  403480:	db06      	blt.n	403490 <sdio_op_cond+0x74>
			break;
		}
		if (cmd5_retry-- == 0) {
  403482:	683b      	ldr	r3, [r7, #0]
  403484:	1e5a      	subs	r2, r3, #1
  403486:	603a      	str	r2, [r7, #0]
  403488:	2b00      	cmp	r3, #0
  40348a:	d1e4      	bne.n	403456 <sdio_op_cond+0x3a>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
  40348c:	2300      	movs	r3, #0
  40348e:	e00f      	b.n	4034b0 <sdio_op_cond+0x94>
			break;
  403490:	bf00      	nop
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
  403492:	687b      	ldr	r3, [r7, #4]
  403494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  403498:	2b00      	cmp	r3, #0
  40349a:	d004      	beq.n	4034a6 <sdio_op_cond+0x8a>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  40349c:	4b08      	ldr	r3, [pc, #32]	; (4034c0 <sdio_op_cond+0xa4>)
  40349e:	681b      	ldr	r3, [r3, #0]
  4034a0:	2205      	movs	r2, #5
  4034a2:	72da      	strb	r2, [r3, #11]
  4034a4:	e003      	b.n	4034ae <sdio_op_cond+0x92>
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
  4034a6:	4b06      	ldr	r3, [pc, #24]	; (4034c0 <sdio_op_cond+0xa4>)
  4034a8:	681b      	ldr	r3, [r3, #0]
  4034aa:	2204      	movs	r2, #4
  4034ac:	72da      	strb	r2, [r3, #11]
	}
	return true; // No error and card type updated with SDIO type
  4034ae:	2301      	movs	r3, #1
}
  4034b0:	4618      	mov	r0, r3
  4034b2:	3708      	adds	r7, #8
  4034b4:	46bd      	mov	sp, r7
  4034b6:	bd80      	pop	{r7, pc}
  4034b8:	00405639 	.word	0x00405639
  4034bc:	0040567d 	.word	0x0040567d
  4034c0:	2000abf4 	.word	0x2000abf4

004034c4 <sdio_get_max_speed>:
 *   and update sd_mmc_card->clock
 *
 * \return true if success, otherwise false
 */
static bool sdio_get_max_speed(void)
{
  4034c4:	b590      	push	{r4, r7, lr}
  4034c6:	b08b      	sub	sp, #44	; 0x2c
  4034c8:	af02      	add	r7, sp, #8
	uint32_t mul;
	uint8_t tplfe_max_tran_speed, i;
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
  4034ca:	2309      	movs	r3, #9
  4034cc:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < 4; i++) {
  4034ce:	2300      	movs	r3, #0
  4034d0:	75bb      	strb	r3, [r7, #22]
  4034d2:	e00f      	b.n	4034f4 <sdio_get_max_speed+0x30>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4034d4:	7dbb      	ldrb	r3, [r7, #22]
  4034d6:	463a      	mov	r2, r7
  4034d8:	4413      	add	r3, r2
  4034da:	9300      	str	r3, [sp, #0]
  4034dc:	2300      	movs	r3, #0
  4034de:	69ba      	ldr	r2, [r7, #24]
  4034e0:	2100      	movs	r1, #0
  4034e2:	2000      	movs	r0, #0
  4034e4:	4c46      	ldr	r4, [pc, #280]	; (403600 <sdio_get_max_speed+0x13c>)
  4034e6:	47a0      	blx	r4
		addr_old++;
  4034e8:	69bb      	ldr	r3, [r7, #24]
  4034ea:	3301      	adds	r3, #1
  4034ec:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < 4; i++) {
  4034ee:	7dbb      	ldrb	r3, [r7, #22]
  4034f0:	3301      	adds	r3, #1
  4034f2:	75bb      	strb	r3, [r7, #22]
  4034f4:	7dbb      	ldrb	r3, [r7, #22]
  4034f6:	2b03      	cmp	r3, #3
  4034f8:	d9ec      	bls.n	4034d4 <sdio_get_max_speed+0x10>
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4034fa:	783b      	ldrb	r3, [r7, #0]
  4034fc:	461a      	mov	r2, r3
  4034fe:	787b      	ldrb	r3, [r7, #1]
  403500:	021b      	lsls	r3, r3, #8
  403502:	441a      	add	r2, r3
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  403504:	78bb      	ldrb	r3, [r7, #2]
  403506:	041b      	lsls	r3, r3, #16
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  403508:	441a      	add	r2, r3
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40350a:	78fb      	ldrb	r3, [r7, #3]
  40350c:	061b      	lsls	r3, r3, #24
  40350e:	4413      	add	r3, r2
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  403510:	61bb      	str	r3, [r7, #24]
	addr_new = addr_old;
  403512:	69bb      	ldr	r3, [r7, #24]
  403514:	61fb      	str	r3, [r7, #28]

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
  403516:	2300      	movs	r3, #0
  403518:	75bb      	strb	r3, [r7, #22]
  40351a:	e00f      	b.n	40353c <sdio_get_max_speed+0x78>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40351c:	7dbb      	ldrb	r3, [r7, #22]
  40351e:	1d3a      	adds	r2, r7, #4
  403520:	4413      	add	r3, r2
  403522:	9300      	str	r3, [sp, #0]
  403524:	2300      	movs	r3, #0
  403526:	69fa      	ldr	r2, [r7, #28]
  403528:	2100      	movs	r1, #0
  40352a:	2000      	movs	r0, #0
  40352c:	4c34      	ldr	r4, [pc, #208]	; (403600 <sdio_get_max_speed+0x13c>)
  40352e:	47a0      	blx	r4
			addr_new++;
  403530:	69fb      	ldr	r3, [r7, #28]
  403532:	3301      	adds	r3, #1
  403534:	61fb      	str	r3, [r7, #28]
		for(i=0; i<3; i++) {
  403536:	7dbb      	ldrb	r3, [r7, #22]
  403538:	3301      	adds	r3, #1
  40353a:	75bb      	strb	r3, [r7, #22]
  40353c:	7dbb      	ldrb	r3, [r7, #22]
  40353e:	2b02      	cmp	r3, #2
  403540:	d9ec      	bls.n	40351c <sdio_get_max_speed+0x58>
		}
		if (buf[0] == SDIO_CISTPL_END) {
  403542:	793b      	ldrb	r3, [r7, #4]
  403544:	2bff      	cmp	r3, #255	; 0xff
  403546:	d101      	bne.n	40354c <sdio_get_max_speed+0x88>
			return false; /* Tuple error */
  403548:	2300      	movs	r3, #0
  40354a:	e055      	b.n	4035f8 <sdio_get_max_speed+0x134>
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  40354c:	793b      	ldrb	r3, [r7, #4]
  40354e:	2b22      	cmp	r3, #34	; 0x22
  403550:	d102      	bne.n	403558 <sdio_get_max_speed+0x94>
  403552:	79bb      	ldrb	r3, [r7, #6]
  403554:	2b00      	cmp	r3, #0
  403556:	d012      	beq.n	40357e <sdio_get_max_speed+0xba>
			break; /* Fun0 tuple found */
		}
		if (buf[1] == 0) {
  403558:	797b      	ldrb	r3, [r7, #5]
  40355a:	2b00      	cmp	r3, #0
  40355c:	d101      	bne.n	403562 <sdio_get_max_speed+0x9e>
			return false; /* Tuple error */
  40355e:	2300      	movs	r3, #0
  403560:	e04a      	b.n	4035f8 <sdio_get_max_speed+0x134>
		}
		/* Next address */
		addr_new += buf[1]-1;
  403562:	797b      	ldrb	r3, [r7, #5]
  403564:	461a      	mov	r2, r3
  403566:	69fb      	ldr	r3, [r7, #28]
  403568:	4413      	add	r3, r2
  40356a:	3b01      	subs	r3, #1
  40356c:	61fb      	str	r3, [r7, #28]
		if (addr_new > (addr_old + 256)) {
  40356e:	69bb      	ldr	r3, [r7, #24]
  403570:	f503 7280 	add.w	r2, r3, #256	; 0x100
  403574:	69fb      	ldr	r3, [r7, #28]
  403576:	429a      	cmp	r2, r3
  403578:	d2cd      	bcs.n	403516 <sdio_get_max_speed+0x52>
			return false; /* Outoff CIS area */
  40357a:	2300      	movs	r3, #0
  40357c:	e03c      	b.n	4035f8 <sdio_get_max_speed+0x134>
			break; /* Fun0 tuple found */
  40357e:	bf00      	nop
		}
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
  403580:	69fb      	ldr	r3, [r7, #28]
  403582:	3b03      	subs	r3, #3
  403584:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < 6; i++) {
  403586:	2300      	movs	r3, #0
  403588:	75bb      	strb	r3, [r7, #22]
  40358a:	e00f      	b.n	4035ac <sdio_get_max_speed+0xe8>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40358c:	7dbb      	ldrb	r3, [r7, #22]
  40358e:	1d3a      	adds	r2, r7, #4
  403590:	4413      	add	r3, r2
  403592:	9300      	str	r3, [sp, #0]
  403594:	2300      	movs	r3, #0
  403596:	69fa      	ldr	r2, [r7, #28]
  403598:	2100      	movs	r1, #0
  40359a:	2000      	movs	r0, #0
  40359c:	4c18      	ldr	r4, [pc, #96]	; (403600 <sdio_get_max_speed+0x13c>)
  40359e:	47a0      	blx	r4
		addr_new++;
  4035a0:	69fb      	ldr	r3, [r7, #28]
  4035a2:	3301      	adds	r3, #1
  4035a4:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < 6; i++) {
  4035a6:	7dbb      	ldrb	r3, [r7, #22]
  4035a8:	3301      	adds	r3, #1
  4035aa:	75bb      	strb	r3, [r7, #22]
  4035ac:	7dbb      	ldrb	r3, [r7, #22]
  4035ae:	2b05      	cmp	r3, #5
  4035b0:	d9ec      	bls.n	40358c <sdio_get_max_speed+0xc8>
	}

	tplfe_max_tran_speed = buf[5];
  4035b2:	7a7b      	ldrb	r3, [r7, #9]
  4035b4:	75fb      	strb	r3, [r7, #23]
	if (tplfe_max_tran_speed > 0x32) {
  4035b6:	7dfb      	ldrb	r3, [r7, #23]
  4035b8:	2b32      	cmp	r3, #50	; 0x32
  4035ba:	d901      	bls.n	4035c0 <sdio_get_max_speed+0xfc>
		/* Error on SDIO register, the high speed is not activated
		 * and the clock can not be more than 25MHz.
		 * This error is present on specific SDIO card
		 * (H&D wireless card - HDG104 WiFi SIP).
		 */
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
  4035bc:	2332      	movs	r3, #50	; 0x32
  4035be:	75fb      	strb	r3, [r7, #23]
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  4035c0:	7dfb      	ldrb	r3, [r7, #23]
  4035c2:	f003 0307 	and.w	r3, r3, #7
  4035c6:	4a0f      	ldr	r2, [pc, #60]	; (403604 <sdio_get_max_speed+0x140>)
  4035c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4035cc:	613b      	str	r3, [r7, #16]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  4035ce:	7dfb      	ldrb	r3, [r7, #23]
  4035d0:	08db      	lsrs	r3, r3, #3
  4035d2:	b2db      	uxtb	r3, r3
  4035d4:	f003 030f 	and.w	r3, r3, #15
  4035d8:	4a0b      	ldr	r2, [pc, #44]	; (403608 <sdio_get_max_speed+0x144>)
  4035da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4035de:	60fb      	str	r3, [r7, #12]
	sd_mmc_card->clock = unit * mul * 1000;
  4035e0:	4b0a      	ldr	r3, [pc, #40]	; (40360c <sdio_get_max_speed+0x148>)
  4035e2:	681b      	ldr	r3, [r3, #0]
  4035e4:	693a      	ldr	r2, [r7, #16]
  4035e6:	68f9      	ldr	r1, [r7, #12]
  4035e8:	fb01 f202 	mul.w	r2, r1, r2
  4035ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4035f0:	fb01 f202 	mul.w	r2, r1, r2
  4035f4:	601a      	str	r2, [r3, #0]
	 * which supports upto 25MHz.
	 * A SDIO card alone can be:
	 * - a Low-Speed SDIO card which supports 400Khz minimum
	 * - a Full-Speed SDIO card which supports upto 25MHz
	 */
	return true;
  4035f6:	2301      	movs	r3, #1
}
  4035f8:	4618      	mov	r0, r3
  4035fa:	3724      	adds	r7, #36	; 0x24
  4035fc:	46bd      	mov	sp, r7
  4035fe:	bd90      	pop	{r4, r7, pc}
  403600:	00403cf9 	.word	0x00403cf9
  403604:	0040eedc 	.word	0x0040eedc
  403608:	0040eef8 	.word	0x0040eef8
  40360c:	2000abf4 	.word	0x2000abf4

00403610 <sdio_cmd52_set_bus_width>:
 * \note sd_mmc_card->bus_width is updated.
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52_set_bus_width(void)
{
  403610:	b590      	push	{r4, r7, lr}
  403612:	b085      	sub	sp, #20
  403614:	af02      	add	r7, sp, #8
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  403616:	1dfb      	adds	r3, r7, #7
  403618:	9300      	str	r3, [sp, #0]
  40361a:	2300      	movs	r3, #0
  40361c:	2208      	movs	r2, #8
  40361e:	2100      	movs	r1, #0
  403620:	2000      	movs	r0, #0
  403622:	4c15      	ldr	r4, [pc, #84]	; (403678 <sdio_cmd52_set_bus_width+0x68>)
  403624:	47a0      	blx	r4
  403626:	4603      	mov	r3, r0
  403628:	f083 0301 	eor.w	r3, r3, #1
  40362c:	b2db      	uxtb	r3, r3
  40362e:	2b00      	cmp	r3, #0
  403630:	d001      	beq.n	403636 <sdio_cmd52_set_bus_width+0x26>
			0, &u8_value)) {
		return false;
  403632:	2300      	movs	r3, #0
  403634:	e01c      	b.n	403670 <sdio_cmd52_set_bus_width+0x60>
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  403636:	79fb      	ldrb	r3, [r7, #7]
  403638:	b25b      	sxtb	r3, r3
  40363a:	2b00      	cmp	r3, #0
  40363c:	db01      	blt.n	403642 <sdio_cmd52_set_bus_width+0x32>
		// No supported, it is not a protocol error
		return true;
  40363e:	2301      	movs	r3, #1
  403640:	e016      	b.n	403670 <sdio_cmd52_set_bus_width+0x60>
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
  403642:	2302      	movs	r3, #2
  403644:	71fb      	strb	r3, [r7, #7]
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  403646:	1dfb      	adds	r3, r7, #7
  403648:	9300      	str	r3, [sp, #0]
  40364a:	2301      	movs	r3, #1
  40364c:	2207      	movs	r2, #7
  40364e:	2100      	movs	r1, #0
  403650:	2001      	movs	r0, #1
  403652:	4c09      	ldr	r4, [pc, #36]	; (403678 <sdio_cmd52_set_bus_width+0x68>)
  403654:	47a0      	blx	r4
  403656:	4603      	mov	r3, r0
  403658:	f083 0301 	eor.w	r3, r3, #1
  40365c:	b2db      	uxtb	r3, r3
  40365e:	2b00      	cmp	r3, #0
  403660:	d001      	beq.n	403666 <sdio_cmd52_set_bus_width+0x56>
			1, &u8_value)) {
		return false;
  403662:	2300      	movs	r3, #0
  403664:	e004      	b.n	403670 <sdio_cmd52_set_bus_width+0x60>
	}
	sd_mmc_card->bus_width = 4;
  403666:	4b05      	ldr	r3, [pc, #20]	; (40367c <sdio_cmd52_set_bus_width+0x6c>)
  403668:	681b      	ldr	r3, [r3, #0]
  40366a:	2204      	movs	r2, #4
  40366c:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  40366e:	2301      	movs	r3, #1
}
  403670:	4618      	mov	r0, r3
  403672:	370c      	adds	r7, #12
  403674:	46bd      	mov	sp, r7
  403676:	bd90      	pop	{r4, r7, pc}
  403678:	00403cf9 	.word	0x00403cf9
  40367c:	2000abf4 	.word	0x2000abf4

00403680 <sdio_cmd52_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52_set_high_speed(void)
{
  403680:	b590      	push	{r4, r7, lr}
  403682:	b085      	sub	sp, #20
  403684:	af02      	add	r7, sp, #8
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  403686:	1dfb      	adds	r3, r7, #7
  403688:	9300      	str	r3, [sp, #0]
  40368a:	2300      	movs	r3, #0
  40368c:	2213      	movs	r2, #19
  40368e:	2100      	movs	r1, #0
  403690:	2000      	movs	r0, #0
  403692:	4c19      	ldr	r4, [pc, #100]	; (4036f8 <sdio_cmd52_set_high_speed+0x78>)
  403694:	47a0      	blx	r4
  403696:	4603      	mov	r3, r0
  403698:	f083 0301 	eor.w	r3, r3, #1
  40369c:	b2db      	uxtb	r3, r3
  40369e:	2b00      	cmp	r3, #0
  4036a0:	d001      	beq.n	4036a6 <sdio_cmd52_set_high_speed+0x26>
		return false;
  4036a2:	2300      	movs	r3, #0
  4036a4:	e024      	b.n	4036f0 <sdio_cmd52_set_high_speed+0x70>
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  4036a6:	79fb      	ldrb	r3, [r7, #7]
  4036a8:	f003 0301 	and.w	r3, r3, #1
  4036ac:	2b00      	cmp	r3, #0
  4036ae:	d101      	bne.n	4036b4 <sdio_cmd52_set_high_speed+0x34>
		// No supported, it is not a protocol error
		return true;
  4036b0:	2301      	movs	r3, #1
  4036b2:	e01d      	b.n	4036f0 <sdio_cmd52_set_high_speed+0x70>
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
  4036b4:	2302      	movs	r3, #2
  4036b6:	71fb      	strb	r3, [r7, #7]
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  4036b8:	1dfb      	adds	r3, r7, #7
  4036ba:	9300      	str	r3, [sp, #0]
  4036bc:	2301      	movs	r3, #1
  4036be:	2213      	movs	r2, #19
  4036c0:	2100      	movs	r1, #0
  4036c2:	2001      	movs	r0, #1
  4036c4:	4c0c      	ldr	r4, [pc, #48]	; (4036f8 <sdio_cmd52_set_high_speed+0x78>)
  4036c6:	47a0      	blx	r4
  4036c8:	4603      	mov	r3, r0
  4036ca:	f083 0301 	eor.w	r3, r3, #1
  4036ce:	b2db      	uxtb	r3, r3
  4036d0:	2b00      	cmp	r3, #0
  4036d2:	d001      	beq.n	4036d8 <sdio_cmd52_set_high_speed+0x58>
			1, &u8_value)) {
		return false;
  4036d4:	2300      	movs	r3, #0
  4036d6:	e00b      	b.n	4036f0 <sdio_cmd52_set_high_speed+0x70>
	}
	sd_mmc_card->high_speed = 1;
  4036d8:	4b08      	ldr	r3, [pc, #32]	; (4036fc <sdio_cmd52_set_high_speed+0x7c>)
  4036da:	681b      	ldr	r3, [r3, #0]
  4036dc:	2201      	movs	r2, #1
  4036de:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  4036e0:	4b06      	ldr	r3, [pc, #24]	; (4036fc <sdio_cmd52_set_high_speed+0x7c>)
  4036e2:	681b      	ldr	r3, [r3, #0]
  4036e4:	4a05      	ldr	r2, [pc, #20]	; (4036fc <sdio_cmd52_set_high_speed+0x7c>)
  4036e6:	6812      	ldr	r2, [r2, #0]
  4036e8:	6812      	ldr	r2, [r2, #0]
  4036ea:	0052      	lsls	r2, r2, #1
  4036ec:	601a      	str	r2, [r3, #0]
	return true;
  4036ee:	2301      	movs	r3, #1
}
  4036f0:	4618      	mov	r0, r3
  4036f2:	370c      	adds	r7, #12
  4036f4:	46bd      	mov	sp, r7
  4036f6:	bd90      	pop	{r4, r7, pc}
  4036f8:	00403cf9 	.word	0x00403cf9
  4036fc:	2000abf4 	.word	0x2000abf4

00403700 <sd_cm6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
  403700:	b590      	push	{r4, r7, lr}
  403702:	b093      	sub	sp, #76	; 0x4c
  403704:	af02      	add	r7, sp, #8
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  403706:	463b      	mov	r3, r7
  403708:	2240      	movs	r2, #64	; 0x40
  40370a:	2100      	movs	r1, #0
  40370c:	4618      	mov	r0, r3
  40370e:	4b2f      	ldr	r3, [pc, #188]	; (4037cc <sd_cm6_set_high_speed+0xcc>)
  403710:	4798      	blx	r3

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  403712:	2301      	movs	r3, #1
  403714:	9300      	str	r3, [sp, #0]
  403716:	2301      	movs	r3, #1
  403718:	2240      	movs	r2, #64	; 0x40
  40371a:	492d      	ldr	r1, [pc, #180]	; (4037d0 <sd_cm6_set_high_speed+0xd0>)
  40371c:	482d      	ldr	r0, [pc, #180]	; (4037d4 <sd_cm6_set_high_speed+0xd4>)
  40371e:	4c2e      	ldr	r4, [pc, #184]	; (4037d8 <sd_cm6_set_high_speed+0xd8>)
  403720:	47a0      	blx	r4
  403722:	4603      	mov	r3, r0
  403724:	f083 0301 	eor.w	r3, r3, #1
  403728:	b2db      	uxtb	r3, r3
  40372a:	2b00      	cmp	r3, #0
  40372c:	d001      	beq.n	403732 <sd_cm6_set_high_speed+0x32>
			| SD_CMD6_GRP4_NO_INFLUENCE
			| SD_CMD6_GRP3_NO_INFLUENCE
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
  40372e:	2300      	movs	r3, #0
  403730:	e047      	b.n	4037c2 <sd_cm6_set_high_speed+0xc2>
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  403732:	463b      	mov	r3, r7
  403734:	2101      	movs	r1, #1
  403736:	4618      	mov	r0, r3
  403738:	4b28      	ldr	r3, [pc, #160]	; (4037dc <sd_cm6_set_high_speed+0xdc>)
  40373a:	4798      	blx	r3
  40373c:	4603      	mov	r3, r0
  40373e:	f083 0301 	eor.w	r3, r3, #1
  403742:	b2db      	uxtb	r3, r3
  403744:	2b00      	cmp	r3, #0
  403746:	d001      	beq.n	40374c <sd_cm6_set_high_speed+0x4c>
		return false;
  403748:	2300      	movs	r3, #0
  40374a:	e03a      	b.n	4037c2 <sd_cm6_set_high_speed+0xc2>
	}
	if (!driver_wait_end_of_read_blocks()) {
  40374c:	4b24      	ldr	r3, [pc, #144]	; (4037e0 <sd_cm6_set_high_speed+0xe0>)
  40374e:	4798      	blx	r3
  403750:	4603      	mov	r3, r0
  403752:	f083 0301 	eor.w	r3, r3, #1
  403756:	b2db      	uxtb	r3, r3
  403758:	2b00      	cmp	r3, #0
  40375a:	d001      	beq.n	403760 <sd_cm6_set_high_speed+0x60>
		return false;
  40375c:	2300      	movs	r3, #0
  40375e:	e030      	b.n	4037c2 <sd_cm6_set_high_speed+0xc2>
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  403760:	4b20      	ldr	r3, [pc, #128]	; (4037e4 <sd_cm6_set_high_speed+0xe4>)
  403762:	4798      	blx	r3
  403764:	4603      	mov	r3, r0
  403766:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40376a:	2b00      	cmp	r3, #0
  40376c:	d001      	beq.n	403772 <sd_cm6_set_high_speed+0x72>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  40376e:	2300      	movs	r3, #0
  403770:	e027      	b.n	4037c2 <sd_cm6_set_high_speed+0xc2>
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  403772:	4638      	mov	r0, r7
  403774:	2304      	movs	r3, #4
  403776:	f44f 72bc 	mov.w	r2, #376	; 0x178
  40377a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40377e:	4c1a      	ldr	r4, [pc, #104]	; (4037e8 <sd_cm6_set_high_speed+0xe8>)
  403780:	47a0      	blx	r4
  403782:	4603      	mov	r3, r0
  403784:	2b0f      	cmp	r3, #15
  403786:	d101      	bne.n	40378c <sd_cm6_set_high_speed+0x8c>
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
  403788:	2301      	movs	r3, #1
  40378a:	e01a      	b.n	4037c2 <sd_cm6_set_high_speed+0xc2>
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  40378c:	4638      	mov	r0, r7
  40378e:	2310      	movs	r3, #16
  403790:	f44f 7288 	mov.w	r2, #272	; 0x110
  403794:	f44f 7100 	mov.w	r1, #512	; 0x200
  403798:	4c13      	ldr	r4, [pc, #76]	; (4037e8 <sd_cm6_set_high_speed+0xe8>)
  40379a:	47a0      	blx	r4
  40379c:	4603      	mov	r3, r0
  40379e:	2b00      	cmp	r3, #0
  4037a0:	d001      	beq.n	4037a6 <sd_cm6_set_high_speed+0xa6>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
  4037a2:	2300      	movs	r3, #0
  4037a4:	e00d      	b.n	4037c2 <sd_cm6_set_high_speed+0xc2>
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  4037a6:	4b11      	ldr	r3, [pc, #68]	; (4037ec <sd_cm6_set_high_speed+0xec>)
  4037a8:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  4037aa:	4b11      	ldr	r3, [pc, #68]	; (4037f0 <sd_cm6_set_high_speed+0xf0>)
  4037ac:	681b      	ldr	r3, [r3, #0]
  4037ae:	2201      	movs	r2, #1
  4037b0:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  4037b2:	4b0f      	ldr	r3, [pc, #60]	; (4037f0 <sd_cm6_set_high_speed+0xf0>)
  4037b4:	681b      	ldr	r3, [r3, #0]
  4037b6:	4a0e      	ldr	r2, [pc, #56]	; (4037f0 <sd_cm6_set_high_speed+0xf0>)
  4037b8:	6812      	ldr	r2, [r2, #0]
  4037ba:	6812      	ldr	r2, [r2, #0]
  4037bc:	0052      	lsls	r2, r2, #1
  4037be:	601a      	str	r2, [r3, #0]
	return true;
  4037c0:	2301      	movs	r3, #1
}
  4037c2:	4618      	mov	r0, r3
  4037c4:	3744      	adds	r7, #68	; 0x44
  4037c6:	46bd      	mov	sp, r7
  4037c8:	bd90      	pop	{r4, r7, pc}
  4037ca:	bf00      	nop
  4037cc:	0040a2c5 	.word	0x0040a2c5
  4037d0:	80ffff01 	.word	0x80ffff01
  4037d4:	00081106 	.word	0x00081106
  4037d8:	00405705 	.word	0x00405705
  4037dc:	004058c9 	.word	0x004058c9
  4037e0:	00405969 	.word	0x00405969
  4037e4:	0040567d 	.word	0x0040567d
  4037e8:	004031e5 	.word	0x004031e5
  4037ec:	004055fd 	.word	0x004055fd
  4037f0:	2000abf4 	.word	0x2000abf4

004037f4 <mmc_cmd6_set_bus_width>:
 * \param bus_width   Bus width to set
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
  4037f4:	b580      	push	{r7, lr}
  4037f6:	b084      	sub	sp, #16
  4037f8:	af00      	add	r7, sp, #0
  4037fa:	4603      	mov	r3, r0
  4037fc:	71fb      	strb	r3, [r7, #7]
	uint32_t arg;

	switch (bus_width) {
  4037fe:	79fb      	ldrb	r3, [r7, #7]
  403800:	2b04      	cmp	r3, #4
  403802:	d004      	beq.n	40380e <mmc_cmd6_set_bus_width+0x1a>
  403804:	2b08      	cmp	r3, #8
  403806:	d105      	bne.n	403814 <mmc_cmd6_set_bus_width+0x20>
	case 8:
		arg = MMC_CMD6_ACCESS_SET_BITS
  403808:	4b13      	ldr	r3, [pc, #76]	; (403858 <mmc_cmd6_set_bus_width+0x64>)
  40380a:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
  40380c:	e005      	b.n	40381a <mmc_cmd6_set_bus_width+0x26>
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40380e:	4b13      	ldr	r3, [pc, #76]	; (40385c <mmc_cmd6_set_bus_width+0x68>)
  403810:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
  403812:	e002      	b.n	40381a <mmc_cmd6_set_bus_width+0x26>
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  403814:	4b12      	ldr	r3, [pc, #72]	; (403860 <mmc_cmd6_set_bus_width+0x6c>)
  403816:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
  403818:	bf00      	nop
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40381a:	68f9      	ldr	r1, [r7, #12]
  40381c:	f243 1006 	movw	r0, #12550	; 0x3106
  403820:	4b10      	ldr	r3, [pc, #64]	; (403864 <mmc_cmd6_set_bus_width+0x70>)
  403822:	4798      	blx	r3
  403824:	4603      	mov	r3, r0
  403826:	f083 0301 	eor.w	r3, r3, #1
  40382a:	b2db      	uxtb	r3, r3
  40382c:	2b00      	cmp	r3, #0
  40382e:	d001      	beq.n	403834 <mmc_cmd6_set_bus_width+0x40>
		return false;
  403830:	2300      	movs	r3, #0
  403832:	e00d      	b.n	403850 <mmc_cmd6_set_bus_width+0x5c>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  403834:	4b0c      	ldr	r3, [pc, #48]	; (403868 <mmc_cmd6_set_bus_width+0x74>)
  403836:	4798      	blx	r3
  403838:	4603      	mov	r3, r0
  40383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40383e:	2b00      	cmp	r3, #0
  403840:	d001      	beq.n	403846 <mmc_cmd6_set_bus_width+0x52>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  403842:	2300      	movs	r3, #0
  403844:	e004      	b.n	403850 <mmc_cmd6_set_bus_width+0x5c>
	}
	sd_mmc_card->bus_width = bus_width;
  403846:	4b09      	ldr	r3, [pc, #36]	; (40386c <mmc_cmd6_set_bus_width+0x78>)
  403848:	681b      	ldr	r3, [r3, #0]
  40384a:	79fa      	ldrb	r2, [r7, #7]
  40384c:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  40384e:	2301      	movs	r3, #1
}
  403850:	4618      	mov	r0, r3
  403852:	3710      	adds	r7, #16
  403854:	46bd      	mov	sp, r7
  403856:	bd80      	pop	{r7, pc}
  403858:	01b70200 	.word	0x01b70200
  40385c:	01b70100 	.word	0x01b70100
  403860:	01b70000 	.word	0x01b70000
  403864:	00405639 	.word	0x00405639
  403868:	0040567d 	.word	0x0040567d
  40386c:	2000abf4 	.word	0x2000abf4

00403870 <mmc_cmd6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
  403870:	b580      	push	{r7, lr}
  403872:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  403874:	4910      	ldr	r1, [pc, #64]	; (4038b8 <mmc_cmd6_set_high_speed+0x48>)
  403876:	f243 1006 	movw	r0, #12550	; 0x3106
  40387a:	4b10      	ldr	r3, [pc, #64]	; (4038bc <mmc_cmd6_set_high_speed+0x4c>)
  40387c:	4798      	blx	r3
  40387e:	4603      	mov	r3, r0
  403880:	f083 0301 	eor.w	r3, r3, #1
  403884:	b2db      	uxtb	r3, r3
  403886:	2b00      	cmp	r3, #0
  403888:	d001      	beq.n	40388e <mmc_cmd6_set_high_speed+0x1e>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
  40388a:	2300      	movs	r3, #0
  40388c:	e011      	b.n	4038b2 <mmc_cmd6_set_high_speed+0x42>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40388e:	4b0c      	ldr	r3, [pc, #48]	; (4038c0 <mmc_cmd6_set_high_speed+0x50>)
  403890:	4798      	blx	r3
  403892:	4603      	mov	r3, r0
  403894:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403898:	2b00      	cmp	r3, #0
  40389a:	d001      	beq.n	4038a0 <mmc_cmd6_set_high_speed+0x30>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  40389c:	2300      	movs	r3, #0
  40389e:	e008      	b.n	4038b2 <mmc_cmd6_set_high_speed+0x42>
	}
	sd_mmc_card->high_speed = 1;
  4038a0:	4b08      	ldr	r3, [pc, #32]	; (4038c4 <mmc_cmd6_set_high_speed+0x54>)
  4038a2:	681b      	ldr	r3, [r3, #0]
  4038a4:	2201      	movs	r2, #1
  4038a6:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  4038a8:	4b06      	ldr	r3, [pc, #24]	; (4038c4 <mmc_cmd6_set_high_speed+0x54>)
  4038aa:	681b      	ldr	r3, [r3, #0]
  4038ac:	4a06      	ldr	r2, [pc, #24]	; (4038c8 <mmc_cmd6_set_high_speed+0x58>)
  4038ae:	601a      	str	r2, [r3, #0]
	return true;
  4038b0:	2301      	movs	r3, #1
}
  4038b2:	4618      	mov	r0, r3
  4038b4:	bd80      	pop	{r7, pc}
  4038b6:	bf00      	nop
  4038b8:	03b90100 	.word	0x03b90100
  4038bc:	00405639 	.word	0x00405639
  4038c0:	0040567d 	.word	0x0040567d
  4038c4:	2000abf4 	.word	0x2000abf4
  4038c8:	03197500 	.word	0x03197500

004038cc <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
  4038cc:	b580      	push	{r7, lr}
  4038ce:	b084      	sub	sp, #16
  4038d0:	af00      	add	r7, sp, #0
  4038d2:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
  4038d4:	687b      	ldr	r3, [r7, #4]
  4038d6:	2200      	movs	r2, #0
  4038d8:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4038da:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4038de:	f245 5008 	movw	r0, #21768	; 0x5508
  4038e2:	4b11      	ldr	r3, [pc, #68]	; (403928 <sd_cmd8+0x5c>)
  4038e4:	4798      	blx	r3
  4038e6:	4603      	mov	r3, r0
  4038e8:	f083 0301 	eor.w	r3, r3, #1
  4038ec:	b2db      	uxtb	r3, r3
  4038ee:	2b00      	cmp	r3, #0
  4038f0:	d001      	beq.n	4038f6 <sd_cmd8+0x2a>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
  4038f2:	2301      	movs	r3, #1
  4038f4:	e014      	b.n	403920 <sd_cmd8+0x54>
	}
	// Check R7 response
	resp = driver_get_response();
  4038f6:	4b0d      	ldr	r3, [pc, #52]	; (40392c <sd_cmd8+0x60>)
  4038f8:	4798      	blx	r3
  4038fa:	60f8      	str	r0, [r7, #12]
	if (resp == 0xFFFFFFFF) {
  4038fc:	68fb      	ldr	r3, [r7, #12]
  4038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  403902:	d101      	bne.n	403908 <sd_cmd8+0x3c>
		// No compliance R7 value
		return true; // It is not a V2
  403904:	2301      	movs	r3, #1
  403906:	e00b      	b.n	403920 <sd_cmd8+0x54>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  403908:	68fb      	ldr	r3, [r7, #12]
  40390a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40390e:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
  403912:	d001      	beq.n	403918 <sd_cmd8+0x4c>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
  403914:	2300      	movs	r3, #0
  403916:	e003      	b.n	403920 <sd_cmd8+0x54>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  403918:	687b      	ldr	r3, [r7, #4]
  40391a:	2201      	movs	r2, #1
  40391c:	701a      	strb	r2, [r3, #0]
	return true;
  40391e:	2301      	movs	r3, #1
}
  403920:	4618      	mov	r0, r3
  403922:	3710      	adds	r7, #16
  403924:	46bd      	mov	sp, r7
  403926:	bd80      	pop	{r7, pc}
  403928:	00405639 	.word	0x00405639
  40392c:	0040567d 	.word	0x0040567d

00403930 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
  403930:	b590      	push	{r4, r7, lr}
  403932:	b089      	sub	sp, #36	; 0x24
  403934:	af02      	add	r7, sp, #8
  403936:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  403938:	2300      	movs	r3, #0
  40393a:	9300      	str	r3, [sp, #0]
  40393c:	2301      	movs	r3, #1
  40393e:	f44f 7200 	mov.w	r2, #512	; 0x200
  403942:	2100      	movs	r1, #0
  403944:	4833      	ldr	r0, [pc, #204]	; (403a14 <mmc_cmd8+0xe4>)
  403946:	4c34      	ldr	r4, [pc, #208]	; (403a18 <mmc_cmd8+0xe8>)
  403948:	47a0      	blx	r4
  40394a:	4603      	mov	r3, r0
  40394c:	f083 0301 	eor.w	r3, r3, #1
  403950:	b2db      	uxtb	r3, r3
  403952:	2b00      	cmp	r3, #0
  403954:	d001      	beq.n	40395a <mmc_cmd8+0x2a>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
  403956:	2300      	movs	r3, #0
  403958:	e058      	b.n	403a0c <mmc_cmd8+0xdc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  40395a:	2300      	movs	r3, #0
  40395c:	82fb      	strh	r3, [r7, #22]
  40395e:	e00f      	b.n	403980 <mmc_cmd8+0x50>
		if (!driver_read_word(&ext_csd)) {
  403960:	f107 0310 	add.w	r3, r7, #16
  403964:	4618      	mov	r0, r3
  403966:	4b2d      	ldr	r3, [pc, #180]	; (403a1c <mmc_cmd8+0xec>)
  403968:	4798      	blx	r3
  40396a:	4603      	mov	r3, r0
  40396c:	f083 0301 	eor.w	r3, r3, #1
  403970:	b2db      	uxtb	r3, r3
  403972:	2b00      	cmp	r3, #0
  403974:	d001      	beq.n	40397a <mmc_cmd8+0x4a>
			return false;
  403976:	2300      	movs	r3, #0
  403978:	e048      	b.n	403a0c <mmc_cmd8+0xdc>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  40397a:	8afb      	ldrh	r3, [r7, #22]
  40397c:	3301      	adds	r3, #1
  40397e:	82fb      	strh	r3, [r7, #22]
  403980:	8afb      	ldrh	r3, [r7, #22]
  403982:	2b31      	cmp	r3, #49	; 0x31
  403984:	d9ec      	bls.n	403960 <mmc_cmd8+0x30>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
  403986:	693b      	ldr	r3, [r7, #16]
  403988:	b2db      	uxtb	r3, r3
  40398a:	f003 0302 	and.w	r3, r3, #2
  40398e:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  403990:	687b      	ldr	r3, [r7, #4]
  403992:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  403994:	4b22      	ldr	r3, [pc, #136]	; (403a20 <mmc_cmd8+0xf0>)
  403996:	681b      	ldr	r3, [r3, #0]
  403998:	f103 000e 	add.w	r0, r3, #14
  40399c:	230c      	movs	r3, #12
  40399e:	223e      	movs	r2, #62	; 0x3e
  4039a0:	2180      	movs	r1, #128	; 0x80
  4039a2:	4c20      	ldr	r4, [pc, #128]	; (403a24 <mmc_cmd8+0xf4>)
  4039a4:	47a0      	blx	r4
  4039a6:	4602      	mov	r2, r0
  4039a8:	f640 73ff 	movw	r3, #4095	; 0xfff
  4039ac:	429a      	cmp	r2, r3
  4039ae:	d129      	bne.n	403a04 <mmc_cmd8+0xd4>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4039b0:	e00f      	b.n	4039d2 <mmc_cmd8+0xa2>
			if (!driver_read_word(&sec_count)) {
  4039b2:	f107 030c 	add.w	r3, r7, #12
  4039b6:	4618      	mov	r0, r3
  4039b8:	4b18      	ldr	r3, [pc, #96]	; (403a1c <mmc_cmd8+0xec>)
  4039ba:	4798      	blx	r3
  4039bc:	4603      	mov	r3, r0
  4039be:	f083 0301 	eor.w	r3, r3, #1
  4039c2:	b2db      	uxtb	r3, r3
  4039c4:	2b00      	cmp	r3, #0
  4039c6:	d001      	beq.n	4039cc <mmc_cmd8+0x9c>
				return false;
  4039c8:	2300      	movs	r3, #0
  4039ca:	e01f      	b.n	403a0c <mmc_cmd8+0xdc>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4039cc:	8afb      	ldrh	r3, [r7, #22]
  4039ce:	3301      	adds	r3, #1
  4039d0:	82fb      	strh	r3, [r7, #22]
  4039d2:	8afb      	ldrh	r3, [r7, #22]
  4039d4:	2b35      	cmp	r3, #53	; 0x35
  4039d6:	d9ec      	bls.n	4039b2 <mmc_cmd8+0x82>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  4039d8:	4b11      	ldr	r3, [pc, #68]	; (403a20 <mmc_cmd8+0xf0>)
  4039da:	681b      	ldr	r3, [r3, #0]
  4039dc:	68fa      	ldr	r2, [r7, #12]
  4039de:	0852      	lsrs	r2, r2, #1
  4039e0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4039e2:	e00f      	b.n	403a04 <mmc_cmd8+0xd4>
		if (!driver_read_word(&sec_count)) {
  4039e4:	f107 030c 	add.w	r3, r7, #12
  4039e8:	4618      	mov	r0, r3
  4039ea:	4b0c      	ldr	r3, [pc, #48]	; (403a1c <mmc_cmd8+0xec>)
  4039ec:	4798      	blx	r3
  4039ee:	4603      	mov	r3, r0
  4039f0:	f083 0301 	eor.w	r3, r3, #1
  4039f4:	b2db      	uxtb	r3, r3
  4039f6:	2b00      	cmp	r3, #0
  4039f8:	d001      	beq.n	4039fe <mmc_cmd8+0xce>
			return false;
  4039fa:	2300      	movs	r3, #0
  4039fc:	e006      	b.n	403a0c <mmc_cmd8+0xdc>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4039fe:	8afb      	ldrh	r3, [r7, #22]
  403a00:	3301      	adds	r3, #1
  403a02:	82fb      	strh	r3, [r7, #22]
  403a04:	8afb      	ldrh	r3, [r7, #22]
  403a06:	2b7f      	cmp	r3, #127	; 0x7f
  403a08:	d9ec      	bls.n	4039e4 <mmc_cmd8+0xb4>
		}
	}
	return true;
  403a0a:	2301      	movs	r3, #1
}
  403a0c:	4618      	mov	r0, r3
  403a0e:	371c      	adds	r7, #28
  403a10:	46bd      	mov	sp, r7
  403a12:	bd90      	pop	{r4, r7, pc}
  403a14:	00081108 	.word	0x00081108
  403a18:	00405705 	.word	0x00405705
  403a1c:	0040582d 	.word	0x0040582d
  403a20:	2000abf4 	.word	0x2000abf4
  403a24:	004031e5 	.word	0x004031e5

00403a28 <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  403a28:	b580      	push	{r7, lr}
  403a2a:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  403a2c:	4b0c      	ldr	r3, [pc, #48]	; (403a60 <sd_mmc_cmd9_mci+0x38>)
  403a2e:	681b      	ldr	r3, [r3, #0]
  403a30:	891b      	ldrh	r3, [r3, #8]
  403a32:	041b      	lsls	r3, r3, #16
  403a34:	4619      	mov	r1, r3
  403a36:	f641 3009 	movw	r0, #6921	; 0x1b09
  403a3a:	4b0a      	ldr	r3, [pc, #40]	; (403a64 <sd_mmc_cmd9_mci+0x3c>)
  403a3c:	4798      	blx	r3
  403a3e:	4603      	mov	r3, r0
  403a40:	f083 0301 	eor.w	r3, r3, #1
  403a44:	b2db      	uxtb	r3, r3
  403a46:	2b00      	cmp	r3, #0
  403a48:	d001      	beq.n	403a4e <sd_mmc_cmd9_mci+0x26>
		return false;
  403a4a:	2300      	movs	r3, #0
  403a4c:	e006      	b.n	403a5c <sd_mmc_cmd9_mci+0x34>
	}
	driver_get_response_128(sd_mmc_card->csd);
  403a4e:	4b04      	ldr	r3, [pc, #16]	; (403a60 <sd_mmc_cmd9_mci+0x38>)
  403a50:	681b      	ldr	r3, [r3, #0]
  403a52:	330e      	adds	r3, #14
  403a54:	4618      	mov	r0, r3
  403a56:	4b04      	ldr	r3, [pc, #16]	; (403a68 <sd_mmc_cmd9_mci+0x40>)
  403a58:	4798      	blx	r3
	return true;
  403a5a:	2301      	movs	r3, #1
}
  403a5c:	4618      	mov	r0, r3
  403a5e:	bd80      	pop	{r7, pc}
  403a60:	2000abf4 	.word	0x2000abf4
  403a64:	00405639 	.word	0x00405639
  403a68:	00405695 	.word	0x00405695

00403a6c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
  403a6c:	b5b0      	push	{r4, r5, r7, lr}
  403a6e:	b084      	sub	sp, #16
  403a70:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  403a72:	4b48      	ldr	r3, [pc, #288]	; (403b94 <mmc_decode_csd+0x128>)
  403a74:	681b      	ldr	r3, [r3, #0]
  403a76:	f103 000e 	add.w	r0, r3, #14
  403a7a:	2304      	movs	r3, #4
  403a7c:	227a      	movs	r2, #122	; 0x7a
  403a7e:	2180      	movs	r1, #128	; 0x80
  403a80:	4c45      	ldr	r4, [pc, #276]	; (403b98 <mmc_decode_csd+0x12c>)
  403a82:	47a0      	blx	r4
  403a84:	4603      	mov	r3, r0
  403a86:	3b01      	subs	r3, #1
  403a88:	2b03      	cmp	r3, #3
  403a8a:	d80b      	bhi.n	403aa4 <mmc_decode_csd+0x38>
  403a8c:	a201      	add	r2, pc, #4	; (adr r2, 403a94 <mmc_decode_csd+0x28>)
  403a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403a92:	bf00      	nop
  403a94:	00403aaf 	.word	0x00403aaf
  403a98:	00403ab9 	.word	0x00403ab9
  403a9c:	00403ac3 	.word	0x00403ac3
  403aa0:	00403acd 	.word	0x00403acd
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  403aa4:	4b3b      	ldr	r3, [pc, #236]	; (403b94 <mmc_decode_csd+0x128>)
  403aa6:	681b      	ldr	r3, [r3, #0]
  403aa8:	2212      	movs	r2, #18
  403aaa:	731a      	strb	r2, [r3, #12]
		break;
  403aac:	e013      	b.n	403ad6 <mmc_decode_csd+0x6a>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  403aae:	4b39      	ldr	r3, [pc, #228]	; (403b94 <mmc_decode_csd+0x128>)
  403ab0:	681b      	ldr	r3, [r3, #0]
  403ab2:	2214      	movs	r2, #20
  403ab4:	731a      	strb	r2, [r3, #12]
		break;
  403ab6:	e00e      	b.n	403ad6 <mmc_decode_csd+0x6a>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  403ab8:	4b36      	ldr	r3, [pc, #216]	; (403b94 <mmc_decode_csd+0x128>)
  403aba:	681b      	ldr	r3, [r3, #0]
  403abc:	2222      	movs	r2, #34	; 0x22
  403abe:	731a      	strb	r2, [r3, #12]
		break;
  403ac0:	e009      	b.n	403ad6 <mmc_decode_csd+0x6a>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  403ac2:	4b34      	ldr	r3, [pc, #208]	; (403b94 <mmc_decode_csd+0x128>)
  403ac4:	681b      	ldr	r3, [r3, #0]
  403ac6:	2230      	movs	r2, #48	; 0x30
  403ac8:	731a      	strb	r2, [r3, #12]
		break;
  403aca:	e004      	b.n	403ad6 <mmc_decode_csd+0x6a>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  403acc:	4b31      	ldr	r3, [pc, #196]	; (403b94 <mmc_decode_csd+0x128>)
  403ace:	681b      	ldr	r3, [r3, #0]
  403ad0:	2240      	movs	r2, #64	; 0x40
  403ad2:	731a      	strb	r2, [r3, #12]
		break;
  403ad4:	bf00      	nop
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  403ad6:	4b2f      	ldr	r3, [pc, #188]	; (403b94 <mmc_decode_csd+0x128>)
  403ad8:	681b      	ldr	r3, [r3, #0]
  403ada:	f103 000e 	add.w	r0, r3, #14
  403ade:	2308      	movs	r3, #8
  403ae0:	2260      	movs	r2, #96	; 0x60
  403ae2:	2180      	movs	r1, #128	; 0x80
  403ae4:	4c2c      	ldr	r4, [pc, #176]	; (403b98 <mmc_decode_csd+0x12c>)
  403ae6:	47a0      	blx	r4
  403ae8:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  403aea:	68fb      	ldr	r3, [r7, #12]
  403aec:	f003 0307 	and.w	r3, r3, #7
  403af0:	4a2a      	ldr	r2, [pc, #168]	; (403b9c <mmc_decode_csd+0x130>)
  403af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403af6:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  403af8:	68fb      	ldr	r3, [r7, #12]
  403afa:	08db      	lsrs	r3, r3, #3
  403afc:	f003 030f 	and.w	r3, r3, #15
  403b00:	4a27      	ldr	r2, [pc, #156]	; (403ba0 <mmc_decode_csd+0x134>)
  403b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403b06:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  403b08:	4b22      	ldr	r3, [pc, #136]	; (403b94 <mmc_decode_csd+0x128>)
  403b0a:	681b      	ldr	r3, [r3, #0]
  403b0c:	68ba      	ldr	r2, [r7, #8]
  403b0e:	6879      	ldr	r1, [r7, #4]
  403b10:	fb01 f202 	mul.w	r2, r1, r2
  403b14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403b18:	fb01 f202 	mul.w	r2, r1, r2
  403b1c:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  403b1e:	4b1d      	ldr	r3, [pc, #116]	; (403b94 <mmc_decode_csd+0x128>)
  403b20:	681b      	ldr	r3, [r3, #0]
  403b22:	f103 000e 	add.w	r0, r3, #14
  403b26:	230c      	movs	r3, #12
  403b28:	223e      	movs	r2, #62	; 0x3e
  403b2a:	2180      	movs	r1, #128	; 0x80
  403b2c:	4c1a      	ldr	r4, [pc, #104]	; (403b98 <mmc_decode_csd+0x12c>)
  403b2e:	47a0      	blx	r4
  403b30:	4602      	mov	r2, r0
  403b32:	f640 73ff 	movw	r3, #4095	; 0xfff
  403b36:	429a      	cmp	r2, r3
  403b38:	d028      	beq.n	403b8c <mmc_decode_csd+0x120>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  403b3a:	4b16      	ldr	r3, [pc, #88]	; (403b94 <mmc_decode_csd+0x128>)
  403b3c:	681b      	ldr	r3, [r3, #0]
  403b3e:	f103 000e 	add.w	r0, r3, #14
  403b42:	230c      	movs	r3, #12
  403b44:	223e      	movs	r2, #62	; 0x3e
  403b46:	2180      	movs	r1, #128	; 0x80
  403b48:	4c13      	ldr	r4, [pc, #76]	; (403b98 <mmc_decode_csd+0x12c>)
  403b4a:	47a0      	blx	r4
  403b4c:	4603      	mov	r3, r0
  403b4e:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  403b50:	4b10      	ldr	r3, [pc, #64]	; (403b94 <mmc_decode_csd+0x128>)
  403b52:	681b      	ldr	r3, [r3, #0]
  403b54:	f103 000e 	add.w	r0, r3, #14
  403b58:	2303      	movs	r3, #3
  403b5a:	222f      	movs	r2, #47	; 0x2f
  403b5c:	2180      	movs	r1, #128	; 0x80
  403b5e:	4d0e      	ldr	r5, [pc, #56]	; (403b98 <mmc_decode_csd+0x12c>)
  403b60:	47a8      	blx	r5
  403b62:	4603      	mov	r3, r0
  403b64:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  403b66:	fa04 f303 	lsl.w	r3, r4, r3
  403b6a:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
  403b6c:	4b09      	ldr	r3, [pc, #36]	; (403b94 <mmc_decode_csd+0x128>)
  403b6e:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  403b70:	4b08      	ldr	r3, [pc, #32]	; (403b94 <mmc_decode_csd+0x128>)
  403b72:	681b      	ldr	r3, [r3, #0]
  403b74:	f103 000e 	add.w	r0, r3, #14
  403b78:	2304      	movs	r3, #4
  403b7a:	2250      	movs	r2, #80	; 0x50
  403b7c:	2180      	movs	r1, #128	; 0x80
  403b7e:	4d06      	ldr	r5, [pc, #24]	; (403b98 <mmc_decode_csd+0x12c>)
  403b80:	47a8      	blx	r5
  403b82:	4602      	mov	r2, r0
		sd_mmc_card->capacity = blocknr *
  403b84:	683b      	ldr	r3, [r7, #0]
  403b86:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  403b88:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  403b8a:	6063      	str	r3, [r4, #4]
	}
}
  403b8c:	bf00      	nop
  403b8e:	3710      	adds	r7, #16
  403b90:	46bd      	mov	sp, r7
  403b92:	bdb0      	pop	{r4, r5, r7, pc}
  403b94:	2000abf4 	.word	0x2000abf4
  403b98:	004031e5 	.word	0x004031e5
  403b9c:	0040eedc 	.word	0x0040eedc
  403ba0:	0040ef38 	.word	0x0040ef38

00403ba4 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
  403ba4:	b5b0      	push	{r4, r5, r7, lr}
  403ba6:	b084      	sub	sp, #16
  403ba8:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  403baa:	4b36      	ldr	r3, [pc, #216]	; (403c84 <sd_decode_csd+0xe0>)
  403bac:	681b      	ldr	r3, [r3, #0]
  403bae:	f103 000e 	add.w	r0, r3, #14
  403bb2:	2308      	movs	r3, #8
  403bb4:	2260      	movs	r2, #96	; 0x60
  403bb6:	2180      	movs	r1, #128	; 0x80
  403bb8:	4c33      	ldr	r4, [pc, #204]	; (403c88 <sd_decode_csd+0xe4>)
  403bba:	47a0      	blx	r4
  403bbc:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  403bbe:	68fb      	ldr	r3, [r7, #12]
  403bc0:	f003 0307 	and.w	r3, r3, #7
  403bc4:	4a31      	ldr	r2, [pc, #196]	; (403c8c <sd_decode_csd+0xe8>)
  403bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403bca:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  403bcc:	68fb      	ldr	r3, [r7, #12]
  403bce:	08db      	lsrs	r3, r3, #3
  403bd0:	f003 030f 	and.w	r3, r3, #15
  403bd4:	4a2e      	ldr	r2, [pc, #184]	; (403c90 <sd_decode_csd+0xec>)
  403bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403bda:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  403bdc:	4b29      	ldr	r3, [pc, #164]	; (403c84 <sd_decode_csd+0xe0>)
  403bde:	681b      	ldr	r3, [r3, #0]
  403be0:	68ba      	ldr	r2, [r7, #8]
  403be2:	6879      	ldr	r1, [r7, #4]
  403be4:	fb01 f202 	mul.w	r2, r1, r2
  403be8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403bec:	fb01 f202 	mul.w	r2, r1, r2
  403bf0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  403bf2:	4b24      	ldr	r3, [pc, #144]	; (403c84 <sd_decode_csd+0xe0>)
  403bf4:	681b      	ldr	r3, [r3, #0]
  403bf6:	f103 000e 	add.w	r0, r3, #14
  403bfa:	2302      	movs	r3, #2
  403bfc:	227e      	movs	r2, #126	; 0x7e
  403bfe:	2180      	movs	r1, #128	; 0x80
  403c00:	4c21      	ldr	r4, [pc, #132]	; (403c88 <sd_decode_csd+0xe4>)
  403c02:	47a0      	blx	r4
  403c04:	4603      	mov	r3, r0
  403c06:	2b00      	cmp	r3, #0
  403c08:	d00f      	beq.n	403c2a <sd_decode_csd+0x86>
		sd_mmc_card->capacity =
  403c0a:	4b1e      	ldr	r3, [pc, #120]	; (403c84 <sd_decode_csd+0xe0>)
  403c0c:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
  403c0e:	4b1d      	ldr	r3, [pc, #116]	; (403c84 <sd_decode_csd+0xe0>)
  403c10:	681b      	ldr	r3, [r3, #0]
  403c12:	f103 000e 	add.w	r0, r3, #14
  403c16:	2316      	movs	r3, #22
  403c18:	2230      	movs	r2, #48	; 0x30
  403c1a:	2180      	movs	r1, #128	; 0x80
  403c1c:	4d1a      	ldr	r5, [pc, #104]	; (403c88 <sd_decode_csd+0xe4>)
  403c1e:	47a8      	blx	r5
  403c20:	4603      	mov	r3, r0
				* 512;
  403c22:	3301      	adds	r3, #1
  403c24:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
  403c26:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
  403c28:	e028      	b.n	403c7c <sd_decode_csd+0xd8>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  403c2a:	4b16      	ldr	r3, [pc, #88]	; (403c84 <sd_decode_csd+0xe0>)
  403c2c:	681b      	ldr	r3, [r3, #0]
  403c2e:	f103 000e 	add.w	r0, r3, #14
  403c32:	230c      	movs	r3, #12
  403c34:	223e      	movs	r2, #62	; 0x3e
  403c36:	2180      	movs	r1, #128	; 0x80
  403c38:	4c13      	ldr	r4, [pc, #76]	; (403c88 <sd_decode_csd+0xe4>)
  403c3a:	47a0      	blx	r4
  403c3c:	4603      	mov	r3, r0
  403c3e:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  403c40:	4b10      	ldr	r3, [pc, #64]	; (403c84 <sd_decode_csd+0xe0>)
  403c42:	681b      	ldr	r3, [r3, #0]
  403c44:	f103 000e 	add.w	r0, r3, #14
  403c48:	2303      	movs	r3, #3
  403c4a:	222f      	movs	r2, #47	; 0x2f
  403c4c:	2180      	movs	r1, #128	; 0x80
  403c4e:	4d0e      	ldr	r5, [pc, #56]	; (403c88 <sd_decode_csd+0xe4>)
  403c50:	47a8      	blx	r5
  403c52:	4603      	mov	r3, r0
  403c54:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  403c56:	fa04 f303 	lsl.w	r3, r4, r3
  403c5a:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
  403c5c:	4b09      	ldr	r3, [pc, #36]	; (403c84 <sd_decode_csd+0xe0>)
  403c5e:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
  403c60:	4b08      	ldr	r3, [pc, #32]	; (403c84 <sd_decode_csd+0xe0>)
  403c62:	681b      	ldr	r3, [r3, #0]
  403c64:	f103 000e 	add.w	r0, r3, #14
  403c68:	2304      	movs	r3, #4
  403c6a:	2250      	movs	r2, #80	; 0x50
  403c6c:	2180      	movs	r1, #128	; 0x80
  403c6e:	4d06      	ldr	r5, [pc, #24]	; (403c88 <sd_decode_csd+0xe4>)
  403c70:	47a8      	blx	r5
  403c72:	4602      	mov	r2, r0
		sd_mmc_card->capacity = blocknr *
  403c74:	683b      	ldr	r3, [r7, #0]
  403c76:	4093      	lsls	r3, r2
				/ 1024;
  403c78:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  403c7a:	6063      	str	r3, [r4, #4]
}
  403c7c:	bf00      	nop
  403c7e:	3710      	adds	r7, #16
  403c80:	46bd      	mov	sp, r7
  403c82:	bdb0      	pop	{r4, r5, r7, pc}
  403c84:	2000abf4 	.word	0x2000abf4
  403c88:	004031e5 	.word	0x004031e5
  403c8c:	0040eedc 	.word	0x0040eedc
  403c90:	0040eef8 	.word	0x0040eef8

00403c94 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
  403c94:	b580      	push	{r7, lr}
  403c96:	b082      	sub	sp, #8
  403c98:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
  403c9a:	4b13      	ldr	r3, [pc, #76]	; (403ce8 <sd_mmc_cmd13+0x54>)
  403c9c:	607b      	str	r3, [r7, #4]
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  403c9e:	4b13      	ldr	r3, [pc, #76]	; (403cec <sd_mmc_cmd13+0x58>)
  403ca0:	681b      	ldr	r3, [r3, #0]
  403ca2:	891b      	ldrh	r3, [r3, #8]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  403ca4:	041b      	lsls	r3, r3, #16
  403ca6:	4619      	mov	r1, r3
  403ca8:	f241 100d 	movw	r0, #4365	; 0x110d
  403cac:	4b10      	ldr	r3, [pc, #64]	; (403cf0 <sd_mmc_cmd13+0x5c>)
  403cae:	4798      	blx	r3
  403cb0:	4603      	mov	r3, r0
  403cb2:	f083 0301 	eor.w	r3, r3, #1
  403cb6:	b2db      	uxtb	r3, r3
  403cb8:	2b00      	cmp	r3, #0
  403cba:	d001      	beq.n	403cc0 <sd_mmc_cmd13+0x2c>
				return false;
  403cbc:	2300      	movs	r3, #0
  403cbe:	e00f      	b.n	403ce0 <sd_mmc_cmd13+0x4c>
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  403cc0:	4b0c      	ldr	r3, [pc, #48]	; (403cf4 <sd_mmc_cmd13+0x60>)
  403cc2:	4798      	blx	r3
  403cc4:	4603      	mov	r3, r0
  403cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403cca:	2b00      	cmp	r3, #0
  403ccc:	d106      	bne.n	403cdc <sd_mmc_cmd13+0x48>
				break;
			}
		}
		if (nec_timeout-- == 0) {
  403cce:	687b      	ldr	r3, [r7, #4]
  403cd0:	1e5a      	subs	r2, r3, #1
  403cd2:	607a      	str	r2, [r7, #4]
  403cd4:	2b00      	cmp	r3, #0
  403cd6:	d1e2      	bne.n	403c9e <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
  403cd8:	2300      	movs	r3, #0
  403cda:	e001      	b.n	403ce0 <sd_mmc_cmd13+0x4c>
				break;
  403cdc:	bf00      	nop
		}
	} while (1);

	return true;
  403cde:	2301      	movs	r3, #1
}
  403ce0:	4618      	mov	r0, r3
  403ce2:	3708      	adds	r7, #8
  403ce4:	46bd      	mov	sp, r7
  403ce6:	bd80      	pop	{r7, pc}
  403ce8:	00030d40 	.word	0x00030d40
  403cec:	2000abf4 	.word	0x2000abf4
  403cf0:	00405639 	.word	0x00405639
  403cf4:	0040567d 	.word	0x0040567d

00403cf8 <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
  403cf8:	b580      	push	{r7, lr}
  403cfa:	b082      	sub	sp, #8
  403cfc:	af00      	add	r7, sp, #0
  403cfe:	603a      	str	r2, [r7, #0]
  403d00:	461a      	mov	r2, r3
  403d02:	4603      	mov	r3, r0
  403d04:	71fb      	strb	r3, [r7, #7]
  403d06:	460b      	mov	r3, r1
  403d08:	71bb      	strb	r3, [r7, #6]
  403d0a:	4613      	mov	r3, r2
  403d0c:	717b      	strb	r3, [r7, #5]
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  403d0e:	693b      	ldr	r3, [r7, #16]
  403d10:	781b      	ldrb	r3, [r3, #0]
  403d12:	461a      	mov	r2, r3
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
  403d14:	79fb      	ldrb	r3, [r7, #7]
  403d16:	07db      	lsls	r3, r3, #31
  403d18:	431a      	orrs	r2, r3
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
  403d1a:	79bb      	ldrb	r3, [r7, #6]
  403d1c:	071b      	lsls	r3, r3, #28
  403d1e:	431a      	orrs	r2, r3
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
  403d20:	797b      	ldrb	r3, [r7, #5]
  403d22:	06db      	lsls	r3, r3, #27
  403d24:	431a      	orrs	r2, r3
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  403d26:	683b      	ldr	r3, [r7, #0]
  403d28:	025b      	lsls	r3, r3, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  403d2a:	4313      	orrs	r3, r2
  403d2c:	4619      	mov	r1, r3
  403d2e:	f241 3034 	movw	r0, #4916	; 0x1334
  403d32:	4b0a      	ldr	r3, [pc, #40]	; (403d5c <sdio_cmd52+0x64>)
  403d34:	4798      	blx	r3
  403d36:	4603      	mov	r3, r0
  403d38:	f083 0301 	eor.w	r3, r3, #1
  403d3c:	b2db      	uxtb	r3, r3
  403d3e:	2b00      	cmp	r3, #0
  403d40:	d001      	beq.n	403d46 <sdio_cmd52+0x4e>
		return false;
  403d42:	2300      	movs	r3, #0
  403d44:	e006      	b.n	403d54 <sdio_cmd52+0x5c>
	}
	*io_data = driver_get_response() & 0xFF;
  403d46:	4b06      	ldr	r3, [pc, #24]	; (403d60 <sdio_cmd52+0x68>)
  403d48:	4798      	blx	r3
  403d4a:	4603      	mov	r3, r0
  403d4c:	b2da      	uxtb	r2, r3
  403d4e:	693b      	ldr	r3, [r7, #16]
  403d50:	701a      	strb	r2, [r3, #0]
	return true;
  403d52:	2301      	movs	r3, #1
}
  403d54:	4618      	mov	r0, r3
  403d56:	3708      	adds	r7, #8
  403d58:	46bd      	mov	sp, r7
  403d5a:	bd80      	pop	{r7, pc}
  403d5c:	00405639 	.word	0x00405639
  403d60:	0040567d 	.word	0x0040567d

00403d64 <sd_acmd6>:
 * \brief ACMD6 - Define the data bus width to 4 bits bus
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd6(void)
{
  403d64:	b580      	push	{r7, lr}
  403d66:	af00      	add	r7, sp, #0
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  403d68:	4b12      	ldr	r3, [pc, #72]	; (403db4 <sd_acmd6+0x50>)
  403d6a:	681b      	ldr	r3, [r3, #0]
  403d6c:	891b      	ldrh	r3, [r3, #8]
  403d6e:	041b      	lsls	r3, r3, #16
  403d70:	4619      	mov	r1, r3
  403d72:	f241 1037 	movw	r0, #4407	; 0x1137
  403d76:	4b10      	ldr	r3, [pc, #64]	; (403db8 <sd_acmd6+0x54>)
  403d78:	4798      	blx	r3
  403d7a:	4603      	mov	r3, r0
  403d7c:	f083 0301 	eor.w	r3, r3, #1
  403d80:	b2db      	uxtb	r3, r3
  403d82:	2b00      	cmp	r3, #0
  403d84:	d001      	beq.n	403d8a <sd_acmd6+0x26>
		return false;
  403d86:	2300      	movs	r3, #0
  403d88:	e011      	b.n	403dae <sd_acmd6+0x4a>
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  403d8a:	2102      	movs	r1, #2
  403d8c:	f241 1006 	movw	r0, #4358	; 0x1106
  403d90:	4b09      	ldr	r3, [pc, #36]	; (403db8 <sd_acmd6+0x54>)
  403d92:	4798      	blx	r3
  403d94:	4603      	mov	r3, r0
  403d96:	f083 0301 	eor.w	r3, r3, #1
  403d9a:	b2db      	uxtb	r3, r3
  403d9c:	2b00      	cmp	r3, #0
  403d9e:	d001      	beq.n	403da4 <sd_acmd6+0x40>
		return false;
  403da0:	2300      	movs	r3, #0
  403da2:	e004      	b.n	403dae <sd_acmd6+0x4a>
	}
	sd_mmc_card->bus_width = 4;
  403da4:	4b03      	ldr	r3, [pc, #12]	; (403db4 <sd_acmd6+0x50>)
  403da6:	681b      	ldr	r3, [r3, #0]
  403da8:	2204      	movs	r2, #4
  403daa:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  403dac:	2301      	movs	r3, #1
}
  403dae:	4618      	mov	r0, r3
  403db0:	bd80      	pop	{r7, pc}
  403db2:	bf00      	nop
  403db4:	2000abf4 	.word	0x2000abf4
  403db8:	00405639 	.word	0x00405639

00403dbc <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
  403dbc:	b590      	push	{r4, r7, lr}
  403dbe:	b085      	sub	sp, #20
  403dc0:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  403dc2:	4b36      	ldr	r3, [pc, #216]	; (403e9c <sd_acmd51+0xe0>)
  403dc4:	681b      	ldr	r3, [r3, #0]
  403dc6:	891b      	ldrh	r3, [r3, #8]
  403dc8:	041b      	lsls	r3, r3, #16
  403dca:	4619      	mov	r1, r3
  403dcc:	f241 1037 	movw	r0, #4407	; 0x1137
  403dd0:	4b33      	ldr	r3, [pc, #204]	; (403ea0 <sd_acmd51+0xe4>)
  403dd2:	4798      	blx	r3
  403dd4:	4603      	mov	r3, r0
  403dd6:	f083 0301 	eor.w	r3, r3, #1
  403dda:	b2db      	uxtb	r3, r3
  403ddc:	2b00      	cmp	r3, #0
  403dde:	d001      	beq.n	403de4 <sd_acmd51+0x28>
		return false;
  403de0:	2300      	movs	r3, #0
  403de2:	e057      	b.n	403e94 <sd_acmd51+0xd8>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  403de4:	2301      	movs	r3, #1
  403de6:	9300      	str	r3, [sp, #0]
  403de8:	2301      	movs	r3, #1
  403dea:	2208      	movs	r2, #8
  403dec:	2100      	movs	r1, #0
  403dee:	482d      	ldr	r0, [pc, #180]	; (403ea4 <sd_acmd51+0xe8>)
  403df0:	4c2d      	ldr	r4, [pc, #180]	; (403ea8 <sd_acmd51+0xec>)
  403df2:	47a0      	blx	r4
  403df4:	4603      	mov	r3, r0
  403df6:	f083 0301 	eor.w	r3, r3, #1
  403dfa:	b2db      	uxtb	r3, r3
  403dfc:	2b00      	cmp	r3, #0
  403dfe:	d001      	beq.n	403e04 <sd_acmd51+0x48>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
  403e00:	2300      	movs	r3, #0
  403e02:	e047      	b.n	403e94 <sd_acmd51+0xd8>
	}
	if (!driver_start_read_blocks(scr, 1)) {
  403e04:	463b      	mov	r3, r7
  403e06:	2101      	movs	r1, #1
  403e08:	4618      	mov	r0, r3
  403e0a:	4b28      	ldr	r3, [pc, #160]	; (403eac <sd_acmd51+0xf0>)
  403e0c:	4798      	blx	r3
  403e0e:	4603      	mov	r3, r0
  403e10:	f083 0301 	eor.w	r3, r3, #1
  403e14:	b2db      	uxtb	r3, r3
  403e16:	2b00      	cmp	r3, #0
  403e18:	d001      	beq.n	403e1e <sd_acmd51+0x62>
		return false;
  403e1a:	2300      	movs	r3, #0
  403e1c:	e03a      	b.n	403e94 <sd_acmd51+0xd8>
	}
	if (!driver_wait_end_of_read_blocks()) {
  403e1e:	4b24      	ldr	r3, [pc, #144]	; (403eb0 <sd_acmd51+0xf4>)
  403e20:	4798      	blx	r3
  403e22:	4603      	mov	r3, r0
  403e24:	f083 0301 	eor.w	r3, r3, #1
  403e28:	b2db      	uxtb	r3, r3
  403e2a:	2b00      	cmp	r3, #0
  403e2c:	d001      	beq.n	403e32 <sd_acmd51+0x76>
		return false;
  403e2e:	2300      	movs	r3, #0
  403e30:	e030      	b.n	403e94 <sd_acmd51+0xd8>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  403e32:	4638      	mov	r0, r7
  403e34:	2304      	movs	r3, #4
  403e36:	2238      	movs	r2, #56	; 0x38
  403e38:	2140      	movs	r1, #64	; 0x40
  403e3a:	4c1e      	ldr	r4, [pc, #120]	; (403eb4 <sd_acmd51+0xf8>)
  403e3c:	47a0      	blx	r4
  403e3e:	4603      	mov	r3, r0
  403e40:	2b01      	cmp	r3, #1
  403e42:	d009      	beq.n	403e58 <sd_acmd51+0x9c>
  403e44:	2b01      	cmp	r3, #1
  403e46:	d302      	bcc.n	403e4e <sd_acmd51+0x92>
  403e48:	2b02      	cmp	r3, #2
  403e4a:	d00a      	beq.n	403e62 <sd_acmd51+0xa6>
  403e4c:	e01c      	b.n	403e88 <sd_acmd51+0xcc>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  403e4e:	4b13      	ldr	r3, [pc, #76]	; (403e9c <sd_acmd51+0xe0>)
  403e50:	681b      	ldr	r3, [r3, #0]
  403e52:	2210      	movs	r2, #16
  403e54:	731a      	strb	r2, [r3, #12]
		break;
  403e56:	e01c      	b.n	403e92 <sd_acmd51+0xd6>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  403e58:	4b10      	ldr	r3, [pc, #64]	; (403e9c <sd_acmd51+0xe0>)
  403e5a:	681b      	ldr	r3, [r3, #0]
  403e5c:	221a      	movs	r2, #26
  403e5e:	731a      	strb	r2, [r3, #12]
		break;
  403e60:	e017      	b.n	403e92 <sd_acmd51+0xd6>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  403e62:	4638      	mov	r0, r7
  403e64:	2301      	movs	r3, #1
  403e66:	222f      	movs	r2, #47	; 0x2f
  403e68:	2140      	movs	r1, #64	; 0x40
  403e6a:	4c12      	ldr	r4, [pc, #72]	; (403eb4 <sd_acmd51+0xf8>)
  403e6c:	47a0      	blx	r4
  403e6e:	4603      	mov	r3, r0
  403e70:	2b01      	cmp	r3, #1
  403e72:	d104      	bne.n	403e7e <sd_acmd51+0xc2>
			sd_mmc_card->version = CARD_VER_SD_3_0;
  403e74:	4b09      	ldr	r3, [pc, #36]	; (403e9c <sd_acmd51+0xe0>)
  403e76:	681b      	ldr	r3, [r3, #0]
  403e78:	2230      	movs	r2, #48	; 0x30
  403e7a:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
  403e7c:	e009      	b.n	403e92 <sd_acmd51+0xd6>
			sd_mmc_card->version = CARD_VER_SD_2_0;
  403e7e:	4b07      	ldr	r3, [pc, #28]	; (403e9c <sd_acmd51+0xe0>)
  403e80:	681b      	ldr	r3, [r3, #0]
  403e82:	2220      	movs	r2, #32
  403e84:	731a      	strb	r2, [r3, #12]
		break;
  403e86:	e004      	b.n	403e92 <sd_acmd51+0xd6>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  403e88:	4b04      	ldr	r3, [pc, #16]	; (403e9c <sd_acmd51+0xe0>)
  403e8a:	681b      	ldr	r3, [r3, #0]
  403e8c:	2210      	movs	r2, #16
  403e8e:	731a      	strb	r2, [r3, #12]
		break;
  403e90:	bf00      	nop
	}
	return true;
  403e92:	2301      	movs	r3, #1
}
  403e94:	4618      	mov	r0, r3
  403e96:	370c      	adds	r7, #12
  403e98:	46bd      	mov	sp, r7
  403e9a:	bd90      	pop	{r4, r7, pc}
  403e9c:	2000abf4 	.word	0x2000abf4
  403ea0:	00405639 	.word	0x00405639
  403ea4:	00081133 	.word	0x00081133
  403ea8:	00405705 	.word	0x00405705
  403eac:	004058c9 	.word	0x004058c9
  403eb0:	00405969 	.word	0x00405969
  403eb4:	004031e5 	.word	0x004031e5

00403eb8 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  403eb8:	b580      	push	{r7, lr}
  403eba:	b082      	sub	sp, #8
  403ebc:	af00      	add	r7, sp, #0
  403ebe:	4603      	mov	r3, r0
  403ec0:	71fb      	strb	r3, [r7, #7]
	if (slot >= SD_MMC_MEM_CNT) {
  403ec2:	79fb      	ldrb	r3, [r7, #7]
  403ec4:	2b00      	cmp	r3, #0
  403ec6:	d001      	beq.n	403ecc <sd_mmc_select_slot+0x14>
		return SD_MMC_ERR_SLOT;
  403ec8:	2304      	movs	r3, #4
  403eca:	e040      	b.n	403f4e <sd_mmc_select_slot+0x96>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  403ecc:	79fb      	ldrb	r3, [r7, #7]
  403ece:	4a22      	ldr	r2, [pc, #136]	; (403f58 <sd_mmc_select_slot+0xa0>)
  403ed0:	015b      	lsls	r3, r3, #5
  403ed2:	4413      	add	r3, r2
  403ed4:	330a      	adds	r3, #10
  403ed6:	781b      	ldrb	r3, [r3, #0]
  403ed8:	2b04      	cmp	r3, #4
  403eda:	d007      	beq.n	403eec <sd_mmc_select_slot+0x34>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  403edc:	79fb      	ldrb	r3, [r7, #7]
  403ede:	4a1e      	ldr	r2, [pc, #120]	; (403f58 <sd_mmc_select_slot+0xa0>)
  403ee0:	015b      	lsls	r3, r3, #5
  403ee2:	4413      	add	r3, r2
  403ee4:	330a      	adds	r3, #10
  403ee6:	781b      	ldrb	r3, [r3, #0]
  403ee8:	2b03      	cmp	r3, #3
  403eea:	d11a      	bne.n	403f22 <sd_mmc_select_slot+0x6a>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  403eec:	79fb      	ldrb	r3, [r7, #7]
  403eee:	4a1a      	ldr	r2, [pc, #104]	; (403f58 <sd_mmc_select_slot+0xa0>)
  403ef0:	015b      	lsls	r3, r3, #5
  403ef2:	4413      	add	r3, r2
  403ef4:	330a      	adds	r3, #10
  403ef6:	2202      	movs	r2, #2
  403ef8:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  403efa:	79fb      	ldrb	r3, [r7, #7]
  403efc:	4a16      	ldr	r2, [pc, #88]	; (403f58 <sd_mmc_select_slot+0xa0>)
  403efe:	015b      	lsls	r3, r3, #5
  403f00:	4413      	add	r3, r2
  403f02:	4a16      	ldr	r2, [pc, #88]	; (403f5c <sd_mmc_select_slot+0xa4>)
  403f04:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  403f06:	79fb      	ldrb	r3, [r7, #7]
  403f08:	4a13      	ldr	r2, [pc, #76]	; (403f58 <sd_mmc_select_slot+0xa0>)
  403f0a:	015b      	lsls	r3, r3, #5
  403f0c:	4413      	add	r3, r2
  403f0e:	330d      	adds	r3, #13
  403f10:	2201      	movs	r2, #1
  403f12:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
  403f14:	79fb      	ldrb	r3, [r7, #7]
  403f16:	4a10      	ldr	r2, [pc, #64]	; (403f58 <sd_mmc_select_slot+0xa0>)
  403f18:	015b      	lsls	r3, r3, #5
  403f1a:	4413      	add	r3, r2
  403f1c:	331e      	adds	r3, #30
  403f1e:	2200      	movs	r2, #0
  403f20:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  403f22:	4a0f      	ldr	r2, [pc, #60]	; (403f60 <sd_mmc_select_slot+0xa8>)
  403f24:	79fb      	ldrb	r3, [r7, #7]
  403f26:	7013      	strb	r3, [r2, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  403f28:	79fb      	ldrb	r3, [r7, #7]
  403f2a:	015b      	lsls	r3, r3, #5
  403f2c:	4a0a      	ldr	r2, [pc, #40]	; (403f58 <sd_mmc_select_slot+0xa0>)
  403f2e:	4413      	add	r3, r2
  403f30:	4a0c      	ldr	r2, [pc, #48]	; (403f64 <sd_mmc_select_slot+0xac>)
  403f32:	6013      	str	r3, [r2, #0]
	sd_mmc_configure_slot();
  403f34:	4b0c      	ldr	r3, [pc, #48]	; (403f68 <sd_mmc_select_slot+0xb0>)
  403f36:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  403f38:	79fb      	ldrb	r3, [r7, #7]
  403f3a:	4a07      	ldr	r2, [pc, #28]	; (403f58 <sd_mmc_select_slot+0xa0>)
  403f3c:	015b      	lsls	r3, r3, #5
  403f3e:	4413      	add	r3, r2
  403f40:	330a      	adds	r3, #10
  403f42:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  403f44:	2b02      	cmp	r3, #2
  403f46:	bf0c      	ite	eq
  403f48:	2301      	moveq	r3, #1
  403f4a:	2300      	movne	r3, #0
  403f4c:	b2db      	uxtb	r3, r3
}
  403f4e:	4618      	mov	r0, r3
  403f50:	3708      	adds	r7, #8
  403f52:	46bd      	mov	sp, r7
  403f54:	bd80      	pop	{r7, pc}
  403f56:	bf00      	nop
  403f58:	2000abd0 	.word	0x2000abd0
  403f5c:	00061a80 	.word	0x00061a80
  403f60:	2000abf0 	.word	0x2000abf0
  403f64:	2000abf4 	.word	0x2000abf4
  403f68:	00403f6d 	.word	0x00403f6d

00403f6c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  403f6c:	b598      	push	{r3, r4, r7, lr}
  403f6e:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  403f70:	4b09      	ldr	r3, [pc, #36]	; (403f98 <sd_mmc_configure_slot+0x2c>)
  403f72:	7818      	ldrb	r0, [r3, #0]
  403f74:	4b09      	ldr	r3, [pc, #36]	; (403f9c <sd_mmc_configure_slot+0x30>)
  403f76:	681b      	ldr	r3, [r3, #0]
  403f78:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  403f7a:	4b08      	ldr	r3, [pc, #32]	; (403f9c <sd_mmc_configure_slot+0x30>)
  403f7c:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  403f7e:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  403f80:	4b06      	ldr	r3, [pc, #24]	; (403f9c <sd_mmc_configure_slot+0x30>)
  403f82:	681b      	ldr	r3, [r3, #0]
  403f84:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  403f86:	2b00      	cmp	r3, #0
  403f88:	bf14      	ite	ne
  403f8a:	2301      	movne	r3, #1
  403f8c:	2300      	moveq	r3, #0
  403f8e:	b2db      	uxtb	r3, r3
  403f90:	4c03      	ldr	r4, [pc, #12]	; (403fa0 <sd_mmc_configure_slot+0x34>)
  403f92:	47a0      	blx	r4
}
  403f94:	bf00      	nop
  403f96:	bd98      	pop	{r3, r4, r7, pc}
  403f98:	2000abf0 	.word	0x2000abf0
  403f9c:	2000abf4 	.word	0x2000abf4
  403fa0:	0040554d 	.word	0x0040554d

00403fa4 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  403fa4:	b580      	push	{r7, lr}
  403fa6:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  403fa8:	4b05      	ldr	r3, [pc, #20]	; (403fc0 <sd_mmc_deselect_slot+0x1c>)
  403faa:	781b      	ldrb	r3, [r3, #0]
  403fac:	2b00      	cmp	r3, #0
  403fae:	d104      	bne.n	403fba <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
  403fb0:	4b03      	ldr	r3, [pc, #12]	; (403fc0 <sd_mmc_deselect_slot+0x1c>)
  403fb2:	781b      	ldrb	r3, [r3, #0]
  403fb4:	4618      	mov	r0, r3
  403fb6:	4b03      	ldr	r3, [pc, #12]	; (403fc4 <sd_mmc_deselect_slot+0x20>)
  403fb8:	4798      	blx	r3
	}
}
  403fba:	bf00      	nop
  403fbc:	bd80      	pop	{r7, pc}
  403fbe:	bf00      	nop
  403fc0:	2000abf0 	.word	0x2000abf0
  403fc4:	004055e5 	.word	0x004055e5

00403fc8 <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
  403fc8:	b590      	push	{r4, r7, lr}
  403fca:	b085      	sub	sp, #20
  403fcc:	af02      	add	r7, sp, #8
	uint8_t v2 = 0;
  403fce:	2300      	movs	r3, #0
  403fd0:	71fb      	strb	r3, [r7, #7]
#ifdef SDIO_SUPPORT_ENABLE
	uint8_t data = 0x08;
  403fd2:	2308      	movs	r3, #8
  403fd4:	71bb      	strb	r3, [r7, #6]
#endif

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  403fd6:	4b9a      	ldr	r3, [pc, #616]	; (404240 <sd_mmc_mci_card_init+0x278>)
  403fd8:	681b      	ldr	r3, [r3, #0]
  403fda:	2201      	movs	r2, #1
  403fdc:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  403fde:	4b98      	ldr	r3, [pc, #608]	; (404240 <sd_mmc_mci_card_init+0x278>)
  403fe0:	681b      	ldr	r3, [r3, #0]
  403fe2:	2200      	movs	r2, #0
  403fe4:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
  403fe6:	4b96      	ldr	r3, [pc, #600]	; (404240 <sd_mmc_mci_card_init+0x278>)
  403fe8:	681b      	ldr	r3, [r3, #0]
  403fea:	2200      	movs	r2, #0
  403fec:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  403fee:	4b95      	ldr	r3, [pc, #596]	; (404244 <sd_mmc_mci_card_init+0x27c>)
  403ff0:	4798      	blx	r3

#ifdef SDIO_SUPPORT_ENABLE
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  403ff2:	1dbb      	adds	r3, r7, #6
  403ff4:	9300      	str	r3, [sp, #0]
  403ff6:	2300      	movs	r3, #0
  403ff8:	2206      	movs	r2, #6
  403ffa:	2100      	movs	r1, #0
  403ffc:	2001      	movs	r0, #1
  403ffe:	4c92      	ldr	r4, [pc, #584]	; (404248 <sd_mmc_mci_card_init+0x280>)
  404000:	47a0      	blx	r4
#endif

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  404002:	2100      	movs	r1, #0
  404004:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  404008:	4b90      	ldr	r3, [pc, #576]	; (40424c <sd_mmc_mci_card_init+0x284>)
  40400a:	4798      	blx	r3
  40400c:	4603      	mov	r3, r0
  40400e:	f083 0301 	eor.w	r3, r3, #1
  404012:	b2db      	uxtb	r3, r3
  404014:	2b00      	cmp	r3, #0
  404016:	d001      	beq.n	40401c <sd_mmc_mci_card_init+0x54>
		return false;
  404018:	2300      	movs	r3, #0
  40401a:	e10d      	b.n	404238 <sd_mmc_mci_card_init+0x270>
	}
	if (!sd_cmd8(&v2)) {
  40401c:	1dfb      	adds	r3, r7, #7
  40401e:	4618      	mov	r0, r3
  404020:	4b8b      	ldr	r3, [pc, #556]	; (404250 <sd_mmc_mci_card_init+0x288>)
  404022:	4798      	blx	r3
  404024:	4603      	mov	r3, r0
  404026:	f083 0301 	eor.w	r3, r3, #1
  40402a:	b2db      	uxtb	r3, r3
  40402c:	2b00      	cmp	r3, #0
  40402e:	d001      	beq.n	404034 <sd_mmc_mci_card_init+0x6c>
		return false;
  404030:	2300      	movs	r3, #0
  404032:	e101      	b.n	404238 <sd_mmc_mci_card_init+0x270>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
  404034:	4b87      	ldr	r3, [pc, #540]	; (404254 <sd_mmc_mci_card_init+0x28c>)
  404036:	4798      	blx	r3
  404038:	4603      	mov	r3, r0
  40403a:	f083 0301 	eor.w	r3, r3, #1
  40403e:	b2db      	uxtb	r3, r3
  404040:	2b00      	cmp	r3, #0
  404042:	d001      	beq.n	404048 <sd_mmc_mci_card_init+0x80>
		return false;
  404044:	2300      	movs	r3, #0
  404046:	e0f7      	b.n	404238 <sd_mmc_mci_card_init+0x270>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  404048:	4b7d      	ldr	r3, [pc, #500]	; (404240 <sd_mmc_mci_card_init+0x278>)
  40404a:	681b      	ldr	r3, [r3, #0]
  40404c:	7adb      	ldrb	r3, [r3, #11]
  40404e:	f003 0301 	and.w	r3, r3, #1
  404052:	2b00      	cmp	r3, #0
  404054:	d011      	beq.n	40407a <sd_mmc_mci_card_init+0xb2>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
  404056:	79fb      	ldrb	r3, [r7, #7]
  404058:	4618      	mov	r0, r3
  40405a:	4b7f      	ldr	r3, [pc, #508]	; (404258 <sd_mmc_mci_card_init+0x290>)
  40405c:	4798      	blx	r3
  40405e:	4603      	mov	r3, r0
  404060:	f083 0301 	eor.w	r3, r3, #1
  404064:	b2db      	uxtb	r3, r3
  404066:	2b00      	cmp	r3, #0
  404068:	d007      	beq.n	40407a <sd_mmc_mci_card_init+0xb2>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  40406a:	4b75      	ldr	r3, [pc, #468]	; (404240 <sd_mmc_mci_card_init+0x278>)
  40406c:	681b      	ldr	r3, [r3, #0]
  40406e:	2202      	movs	r2, #2
  404070:	72da      	strb	r2, [r3, #11]
			return sd_mmc_mci_install_mmc();
  404072:	4b7a      	ldr	r3, [pc, #488]	; (40425c <sd_mmc_mci_card_init+0x294>)
  404074:	4798      	blx	r3
  404076:	4603      	mov	r3, r0
  404078:	e0de      	b.n	404238 <sd_mmc_mci_card_init+0x270>
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40407a:	4b71      	ldr	r3, [pc, #452]	; (404240 <sd_mmc_mci_card_init+0x278>)
  40407c:	681b      	ldr	r3, [r3, #0]
  40407e:	7adb      	ldrb	r3, [r3, #11]
  404080:	f003 0301 	and.w	r3, r3, #1
  404084:	2b00      	cmp	r3, #0
  404086:	d00c      	beq.n	4040a2 <sd_mmc_mci_card_init+0xda>
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  404088:	2100      	movs	r1, #0
  40408a:	f645 3002 	movw	r0, #23298	; 0x5b02
  40408e:	4b6f      	ldr	r3, [pc, #444]	; (40424c <sd_mmc_mci_card_init+0x284>)
  404090:	4798      	blx	r3
  404092:	4603      	mov	r3, r0
  404094:	f083 0301 	eor.w	r3, r3, #1
  404098:	b2db      	uxtb	r3, r3
  40409a:	2b00      	cmp	r3, #0
  40409c:	d001      	beq.n	4040a2 <sd_mmc_mci_card_init+0xda>
			return false;
  40409e:	2300      	movs	r3, #0
  4040a0:	e0ca      	b.n	404238 <sd_mmc_mci_card_init+0x270>
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  4040a2:	2100      	movs	r1, #0
  4040a4:	f245 1003 	movw	r0, #20739	; 0x5103
  4040a8:	4b68      	ldr	r3, [pc, #416]	; (40424c <sd_mmc_mci_card_init+0x284>)
  4040aa:	4798      	blx	r3
  4040ac:	4603      	mov	r3, r0
  4040ae:	f083 0301 	eor.w	r3, r3, #1
  4040b2:	b2db      	uxtb	r3, r3
  4040b4:	2b00      	cmp	r3, #0
  4040b6:	d001      	beq.n	4040bc <sd_mmc_mci_card_init+0xf4>
		return false;
  4040b8:	2300      	movs	r3, #0
  4040ba:	e0bd      	b.n	404238 <sd_mmc_mci_card_init+0x270>
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  4040bc:	4b60      	ldr	r3, [pc, #384]	; (404240 <sd_mmc_mci_card_init+0x278>)
  4040be:	681c      	ldr	r4, [r3, #0]
  4040c0:	4b67      	ldr	r3, [pc, #412]	; (404260 <sd_mmc_mci_card_init+0x298>)
  4040c2:	4798      	blx	r3
  4040c4:	4603      	mov	r3, r0
  4040c6:	0c1b      	lsrs	r3, r3, #16
  4040c8:	b29b      	uxth	r3, r3
  4040ca:	8123      	strh	r3, [r4, #8]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4040cc:	4b5c      	ldr	r3, [pc, #368]	; (404240 <sd_mmc_mci_card_init+0x278>)
  4040ce:	681b      	ldr	r3, [r3, #0]
  4040d0:	7adb      	ldrb	r3, [r3, #11]
  4040d2:	f003 0301 	and.w	r3, r3, #1
  4040d6:	2b00      	cmp	r3, #0
  4040d8:	d00b      	beq.n	4040f2 <sd_mmc_mci_card_init+0x12a>
		if (!sd_mmc_cmd9_mci()) {
  4040da:	4b62      	ldr	r3, [pc, #392]	; (404264 <sd_mmc_mci_card_init+0x29c>)
  4040dc:	4798      	blx	r3
  4040de:	4603      	mov	r3, r0
  4040e0:	f083 0301 	eor.w	r3, r3, #1
  4040e4:	b2db      	uxtb	r3, r3
  4040e6:	2b00      	cmp	r3, #0
  4040e8:	d001      	beq.n	4040ee <sd_mmc_mci_card_init+0x126>
			return false;
  4040ea:	2300      	movs	r3, #0
  4040ec:	e0a4      	b.n	404238 <sd_mmc_mci_card_init+0x270>
		}
		sd_decode_csd();
  4040ee:	4b5e      	ldr	r3, [pc, #376]	; (404268 <sd_mmc_mci_card_init+0x2a0>)
  4040f0:	4798      	blx	r3
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  4040f2:	4b53      	ldr	r3, [pc, #332]	; (404240 <sd_mmc_mci_card_init+0x278>)
  4040f4:	681b      	ldr	r3, [r3, #0]
  4040f6:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4040f8:	041b      	lsls	r3, r3, #16
  4040fa:	4619      	mov	r1, r3
  4040fc:	f243 1007 	movw	r0, #12551	; 0x3107
  404100:	4b52      	ldr	r3, [pc, #328]	; (40424c <sd_mmc_mci_card_init+0x284>)
  404102:	4798      	blx	r3
  404104:	4603      	mov	r3, r0
  404106:	f083 0301 	eor.w	r3, r3, #1
  40410a:	b2db      	uxtb	r3, r3
  40410c:	2b00      	cmp	r3, #0
  40410e:	d001      	beq.n	404114 <sd_mmc_mci_card_init+0x14c>
		return false;
  404110:	2300      	movs	r3, #0
  404112:	e091      	b.n	404238 <sd_mmc_mci_card_init+0x270>
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  404114:	4b4a      	ldr	r3, [pc, #296]	; (404240 <sd_mmc_mci_card_init+0x278>)
  404116:	681b      	ldr	r3, [r3, #0]
  404118:	7adb      	ldrb	r3, [r3, #11]
  40411a:	f003 0301 	and.w	r3, r3, #1
  40411e:	2b00      	cmp	r3, #0
  404120:	d009      	beq.n	404136 <sd_mmc_mci_card_init+0x16e>
		if (!sd_acmd51()) {
  404122:	4b52      	ldr	r3, [pc, #328]	; (40426c <sd_mmc_mci_card_init+0x2a4>)
  404124:	4798      	blx	r3
  404126:	4603      	mov	r3, r0
  404128:	f083 0301 	eor.w	r3, r3, #1
  40412c:	b2db      	uxtb	r3, r3
  40412e:	2b00      	cmp	r3, #0
  404130:	d001      	beq.n	404136 <sd_mmc_mci_card_init+0x16e>
			return false;
  404132:	2300      	movs	r3, #0
  404134:	e080      	b.n	404238 <sd_mmc_mci_card_init+0x270>
		}
	}
	if (IS_SDIO()) {
  404136:	4b42      	ldr	r3, [pc, #264]	; (404240 <sd_mmc_mci_card_init+0x278>)
  404138:	681b      	ldr	r3, [r3, #0]
  40413a:	7adb      	ldrb	r3, [r3, #11]
  40413c:	f003 0304 	and.w	r3, r3, #4
  404140:	2b00      	cmp	r3, #0
  404142:	d009      	beq.n	404158 <sd_mmc_mci_card_init+0x190>
		if (!sdio_get_max_speed()) {
  404144:	4b4a      	ldr	r3, [pc, #296]	; (404270 <sd_mmc_mci_card_init+0x2a8>)
  404146:	4798      	blx	r3
  404148:	4603      	mov	r3, r0
  40414a:	f083 0301 	eor.w	r3, r3, #1
  40414e:	b2db      	uxtb	r3, r3
  404150:	2b00      	cmp	r3, #0
  404152:	d001      	beq.n	404158 <sd_mmc_mci_card_init+0x190>
			return false;
  404154:	2300      	movs	r3, #0
  404156:	e06f      	b.n	404238 <sd_mmc_mci_card_init+0x270>
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  404158:	4b46      	ldr	r3, [pc, #280]	; (404274 <sd_mmc_mci_card_init+0x2ac>)
  40415a:	781b      	ldrb	r3, [r3, #0]
  40415c:	4618      	mov	r0, r3
  40415e:	4b46      	ldr	r3, [pc, #280]	; (404278 <sd_mmc_mci_card_init+0x2b0>)
  404160:	4798      	blx	r3
  404162:	4603      	mov	r3, r0
  404164:	2b03      	cmp	r3, #3
  404166:	d923      	bls.n	4041b0 <sd_mmc_mci_card_init+0x1e8>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
  404168:	4b35      	ldr	r3, [pc, #212]	; (404240 <sd_mmc_mci_card_init+0x278>)
  40416a:	681b      	ldr	r3, [r3, #0]
  40416c:	7adb      	ldrb	r3, [r3, #11]
  40416e:	f003 0304 	and.w	r3, r3, #4
  404172:	2b00      	cmp	r3, #0
  404174:	d009      	beq.n	40418a <sd_mmc_mci_card_init+0x1c2>
			if (!sdio_cmd52_set_bus_width()) {
  404176:	4b41      	ldr	r3, [pc, #260]	; (40427c <sd_mmc_mci_card_init+0x2b4>)
  404178:	4798      	blx	r3
  40417a:	4603      	mov	r3, r0
  40417c:	f083 0301 	eor.w	r3, r3, #1
  404180:	b2db      	uxtb	r3, r3
  404182:	2b00      	cmp	r3, #0
  404184:	d001      	beq.n	40418a <sd_mmc_mci_card_init+0x1c2>
				return false;
  404186:	2300      	movs	r3, #0
  404188:	e056      	b.n	404238 <sd_mmc_mci_card_init+0x270>
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  40418a:	4b2d      	ldr	r3, [pc, #180]	; (404240 <sd_mmc_mci_card_init+0x278>)
  40418c:	681b      	ldr	r3, [r3, #0]
  40418e:	7adb      	ldrb	r3, [r3, #11]
  404190:	f003 0301 	and.w	r3, r3, #1
  404194:	2b00      	cmp	r3, #0
  404196:	d009      	beq.n	4041ac <sd_mmc_mci_card_init+0x1e4>
			if (!sd_acmd6()) {
  404198:	4b39      	ldr	r3, [pc, #228]	; (404280 <sd_mmc_mci_card_init+0x2b8>)
  40419a:	4798      	blx	r3
  40419c:	4603      	mov	r3, r0
  40419e:	f083 0301 	eor.w	r3, r3, #1
  4041a2:	b2db      	uxtb	r3, r3
  4041a4:	2b00      	cmp	r3, #0
  4041a6:	d001      	beq.n	4041ac <sd_mmc_mci_card_init+0x1e4>
				return false;
  4041a8:	2300      	movs	r3, #0
  4041aa:	e045      	b.n	404238 <sd_mmc_mci_card_init+0x270>
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  4041ac:	4b35      	ldr	r3, [pc, #212]	; (404284 <sd_mmc_mci_card_init+0x2bc>)
  4041ae:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  4041b0:	4b35      	ldr	r3, [pc, #212]	; (404288 <sd_mmc_mci_card_init+0x2c0>)
  4041b2:	4798      	blx	r3
  4041b4:	4603      	mov	r3, r0
  4041b6:	2b00      	cmp	r3, #0
  4041b8:	d028      	beq.n	40420c <sd_mmc_mci_card_init+0x244>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
  4041ba:	4b21      	ldr	r3, [pc, #132]	; (404240 <sd_mmc_mci_card_init+0x278>)
  4041bc:	681b      	ldr	r3, [r3, #0]
  4041be:	7adb      	ldrb	r3, [r3, #11]
  4041c0:	f003 0304 	and.w	r3, r3, #4
  4041c4:	2b00      	cmp	r3, #0
  4041c6:	d009      	beq.n	4041dc <sd_mmc_mci_card_init+0x214>
			if (!sdio_cmd52_set_high_speed()) {
  4041c8:	4b30      	ldr	r3, [pc, #192]	; (40428c <sd_mmc_mci_card_init+0x2c4>)
  4041ca:	4798      	blx	r3
  4041cc:	4603      	mov	r3, r0
  4041ce:	f083 0301 	eor.w	r3, r3, #1
  4041d2:	b2db      	uxtb	r3, r3
  4041d4:	2b00      	cmp	r3, #0
  4041d6:	d001      	beq.n	4041dc <sd_mmc_mci_card_init+0x214>
				return false;
  4041d8:	2300      	movs	r3, #0
  4041da:	e02d      	b.n	404238 <sd_mmc_mci_card_init+0x270>
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4041dc:	4b18      	ldr	r3, [pc, #96]	; (404240 <sd_mmc_mci_card_init+0x278>)
  4041de:	681b      	ldr	r3, [r3, #0]
  4041e0:	7adb      	ldrb	r3, [r3, #11]
  4041e2:	f003 0301 	and.w	r3, r3, #1
  4041e6:	2b00      	cmp	r3, #0
  4041e8:	d00e      	beq.n	404208 <sd_mmc_mci_card_init+0x240>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  4041ea:	4b15      	ldr	r3, [pc, #84]	; (404240 <sd_mmc_mci_card_init+0x278>)
  4041ec:	681b      	ldr	r3, [r3, #0]
  4041ee:	7b1b      	ldrb	r3, [r3, #12]
  4041f0:	2b10      	cmp	r3, #16
  4041f2:	d909      	bls.n	404208 <sd_mmc_mci_card_init+0x240>
				if (!sd_cm6_set_high_speed()) {
  4041f4:	4b26      	ldr	r3, [pc, #152]	; (404290 <sd_mmc_mci_card_init+0x2c8>)
  4041f6:	4798      	blx	r3
  4041f8:	4603      	mov	r3, r0
  4041fa:	f083 0301 	eor.w	r3, r3, #1
  4041fe:	b2db      	uxtb	r3, r3
  404200:	2b00      	cmp	r3, #0
  404202:	d001      	beq.n	404208 <sd_mmc_mci_card_init+0x240>
					return false;
  404204:	2300      	movs	r3, #0
  404206:	e017      	b.n	404238 <sd_mmc_mci_card_init+0x270>
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  404208:	4b1e      	ldr	r3, [pc, #120]	; (404284 <sd_mmc_mci_card_init+0x2bc>)
  40420a:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40420c:	4b0c      	ldr	r3, [pc, #48]	; (404240 <sd_mmc_mci_card_init+0x278>)
  40420e:	681b      	ldr	r3, [r3, #0]
  404210:	7adb      	ldrb	r3, [r3, #11]
  404212:	f003 0301 	and.w	r3, r3, #1
  404216:	2b00      	cmp	r3, #0
  404218:	d00d      	beq.n	404236 <sd_mmc_mci_card_init+0x26e>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40421a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40421e:	f241 1010 	movw	r0, #4368	; 0x1110
  404222:	4b0a      	ldr	r3, [pc, #40]	; (40424c <sd_mmc_mci_card_init+0x284>)
  404224:	4798      	blx	r3
  404226:	4603      	mov	r3, r0
  404228:	f083 0301 	eor.w	r3, r3, #1
  40422c:	b2db      	uxtb	r3, r3
  40422e:	2b00      	cmp	r3, #0
  404230:	d001      	beq.n	404236 <sd_mmc_mci_card_init+0x26e>
			return false;
  404232:	2300      	movs	r3, #0
  404234:	e000      	b.n	404238 <sd_mmc_mci_card_init+0x270>
		}
	}
	return true;
  404236:	2301      	movs	r3, #1
}
  404238:	4618      	mov	r0, r3
  40423a:	370c      	adds	r7, #12
  40423c:	46bd      	mov	sp, r7
  40423e:	bd90      	pop	{r4, r7, pc}
  404240:	2000abf4 	.word	0x2000abf4
  404244:	004055fd 	.word	0x004055fd
  404248:	00403cf9 	.word	0x00403cf9
  40424c:	00405639 	.word	0x00405639
  404250:	004038cd 	.word	0x004038cd
  404254:	0040341d 	.word	0x0040341d
  404258:	00403375 	.word	0x00403375
  40425c:	00404295 	.word	0x00404295
  404260:	0040567d 	.word	0x0040567d
  404264:	00403a29 	.word	0x00403a29
  404268:	00403ba5 	.word	0x00403ba5
  40426c:	00403dbd 	.word	0x00403dbd
  404270:	004034c5 	.word	0x004034c5
  404274:	2000abf0 	.word	0x2000abf0
  404278:	00405519 	.word	0x00405519
  40427c:	00403611 	.word	0x00403611
  404280:	00403d65 	.word	0x00403d65
  404284:	00403f6d 	.word	0x00403f6d
  404288:	0040553b 	.word	0x0040553b
  40428c:	00403681 	.word	0x00403681
  404290:	00403701 	.word	0x00403701

00404294 <sd_mmc_mci_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_install_mmc(void)
{
  404294:	b580      	push	{r7, lr}
  404296:	b082      	sub	sp, #8
  404298:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40429a:	2100      	movs	r1, #0
  40429c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4042a0:	4b56      	ldr	r3, [pc, #344]	; (4043fc <sd_mmc_mci_install_mmc+0x168>)
  4042a2:	4798      	blx	r3
  4042a4:	4603      	mov	r3, r0
  4042a6:	f083 0301 	eor.w	r3, r3, #1
  4042aa:	b2db      	uxtb	r3, r3
  4042ac:	2b00      	cmp	r3, #0
  4042ae:	d001      	beq.n	4042b4 <sd_mmc_mci_install_mmc+0x20>
		return false;
  4042b0:	2300      	movs	r3, #0
  4042b2:	e09f      	b.n	4043f4 <sd_mmc_mci_install_mmc+0x160>
	}

	if (!mmc_mci_op_cond()) {
  4042b4:	4b52      	ldr	r3, [pc, #328]	; (404400 <sd_mmc_mci_install_mmc+0x16c>)
  4042b6:	4798      	blx	r3
  4042b8:	4603      	mov	r3, r0
  4042ba:	f083 0301 	eor.w	r3, r3, #1
  4042be:	b2db      	uxtb	r3, r3
  4042c0:	2b00      	cmp	r3, #0
  4042c2:	d001      	beq.n	4042c8 <sd_mmc_mci_install_mmc+0x34>
		return false;
  4042c4:	2300      	movs	r3, #0
  4042c6:	e095      	b.n	4043f4 <sd_mmc_mci_install_mmc+0x160>
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4042c8:	2100      	movs	r1, #0
  4042ca:	f645 3002 	movw	r0, #23298	; 0x5b02
  4042ce:	4b4b      	ldr	r3, [pc, #300]	; (4043fc <sd_mmc_mci_install_mmc+0x168>)
  4042d0:	4798      	blx	r3
  4042d2:	4603      	mov	r3, r0
  4042d4:	f083 0301 	eor.w	r3, r3, #1
  4042d8:	b2db      	uxtb	r3, r3
  4042da:	2b00      	cmp	r3, #0
  4042dc:	d001      	beq.n	4042e2 <sd_mmc_mci_install_mmc+0x4e>
		return false;
  4042de:	2300      	movs	r3, #0
  4042e0:	e088      	b.n	4043f4 <sd_mmc_mci_install_mmc+0x160>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  4042e2:	4b48      	ldr	r3, [pc, #288]	; (404404 <sd_mmc_mci_install_mmc+0x170>)
  4042e4:	681b      	ldr	r3, [r3, #0]
  4042e6:	2201      	movs	r2, #1
  4042e8:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
  4042ea:	4b46      	ldr	r3, [pc, #280]	; (404404 <sd_mmc_mci_install_mmc+0x170>)
  4042ec:	681b      	ldr	r3, [r3, #0]
  4042ee:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4042f0:	041b      	lsls	r3, r3, #16
  4042f2:	4619      	mov	r1, r3
  4042f4:	f241 1003 	movw	r0, #4355	; 0x1103
  4042f8:	4b40      	ldr	r3, [pc, #256]	; (4043fc <sd_mmc_mci_install_mmc+0x168>)
  4042fa:	4798      	blx	r3
  4042fc:	4603      	mov	r3, r0
  4042fe:	f083 0301 	eor.w	r3, r3, #1
  404302:	b2db      	uxtb	r3, r3
  404304:	2b00      	cmp	r3, #0
  404306:	d001      	beq.n	40430c <sd_mmc_mci_install_mmc+0x78>
		return false;
  404308:	2300      	movs	r3, #0
  40430a:	e073      	b.n	4043f4 <sd_mmc_mci_install_mmc+0x160>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  40430c:	4b3e      	ldr	r3, [pc, #248]	; (404408 <sd_mmc_mci_install_mmc+0x174>)
  40430e:	4798      	blx	r3
  404310:	4603      	mov	r3, r0
  404312:	f083 0301 	eor.w	r3, r3, #1
  404316:	b2db      	uxtb	r3, r3
  404318:	2b00      	cmp	r3, #0
  40431a:	d001      	beq.n	404320 <sd_mmc_mci_install_mmc+0x8c>
		return false;
  40431c:	2300      	movs	r3, #0
  40431e:	e069      	b.n	4043f4 <sd_mmc_mci_install_mmc+0x160>
	}
	mmc_decode_csd();
  404320:	4b3a      	ldr	r3, [pc, #232]	; (40440c <sd_mmc_mci_install_mmc+0x178>)
  404322:	4798      	blx	r3
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  404324:	4b37      	ldr	r3, [pc, #220]	; (404404 <sd_mmc_mci_install_mmc+0x170>)
  404326:	681b      	ldr	r3, [r3, #0]
  404328:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40432a:	041b      	lsls	r3, r3, #16
  40432c:	4619      	mov	r1, r3
  40432e:	f243 1007 	movw	r0, #12551	; 0x3107
  404332:	4b32      	ldr	r3, [pc, #200]	; (4043fc <sd_mmc_mci_install_mmc+0x168>)
  404334:	4798      	blx	r3
  404336:	4603      	mov	r3, r0
  404338:	f083 0301 	eor.w	r3, r3, #1
  40433c:	b2db      	uxtb	r3, r3
  40433e:	2b00      	cmp	r3, #0
  404340:	d001      	beq.n	404346 <sd_mmc_mci_install_mmc+0xb2>
		return false;
  404342:	2300      	movs	r3, #0
  404344:	e056      	b.n	4043f4 <sd_mmc_mci_install_mmc+0x160>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  404346:	4b2f      	ldr	r3, [pc, #188]	; (404404 <sd_mmc_mci_install_mmc+0x170>)
  404348:	681b      	ldr	r3, [r3, #0]
  40434a:	7b1b      	ldrb	r3, [r3, #12]
  40434c:	2b3f      	cmp	r3, #63	; 0x3f
  40434e:	d93b      	bls.n	4043c8 <sd_mmc_mci_install_mmc+0x134>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
  404350:	1dbb      	adds	r3, r7, #6
  404352:	4618      	mov	r0, r3
  404354:	4b2e      	ldr	r3, [pc, #184]	; (404410 <sd_mmc_mci_install_mmc+0x17c>)
  404356:	4798      	blx	r3
  404358:	4603      	mov	r3, r0
  40435a:	f083 0301 	eor.w	r3, r3, #1
  40435e:	b2db      	uxtb	r3, r3
  404360:	2b00      	cmp	r3, #0
  404362:	d001      	beq.n	404368 <sd_mmc_mci_install_mmc+0xd4>
			return false;
  404364:	2300      	movs	r3, #0
  404366:	e045      	b.n	4043f4 <sd_mmc_mci_install_mmc+0x160>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  404368:	4b2a      	ldr	r3, [pc, #168]	; (404414 <sd_mmc_mci_install_mmc+0x180>)
  40436a:	781b      	ldrb	r3, [r3, #0]
  40436c:	4618      	mov	r0, r3
  40436e:	4b2a      	ldr	r3, [pc, #168]	; (404418 <sd_mmc_mci_install_mmc+0x184>)
  404370:	4798      	blx	r3
  404372:	4603      	mov	r3, r0
  404374:	2b03      	cmp	r3, #3
  404376:	d912      	bls.n	40439e <sd_mmc_mci_install_mmc+0x10a>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  404378:	4b26      	ldr	r3, [pc, #152]	; (404414 <sd_mmc_mci_install_mmc+0x180>)
  40437a:	781b      	ldrb	r3, [r3, #0]
  40437c:	4618      	mov	r0, r3
  40437e:	4b26      	ldr	r3, [pc, #152]	; (404418 <sd_mmc_mci_install_mmc+0x184>)
  404380:	4798      	blx	r3
  404382:	4603      	mov	r3, r0
  404384:	4618      	mov	r0, r3
  404386:	4b25      	ldr	r3, [pc, #148]	; (40441c <sd_mmc_mci_install_mmc+0x188>)
  404388:	4798      	blx	r3
  40438a:	4603      	mov	r3, r0
  40438c:	f083 0301 	eor.w	r3, r3, #1
  404390:	b2db      	uxtb	r3, r3
  404392:	2b00      	cmp	r3, #0
  404394:	d001      	beq.n	40439a <sd_mmc_mci_install_mmc+0x106>
				return false;
  404396:	2300      	movs	r3, #0
  404398:	e02c      	b.n	4043f4 <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  40439a:	4b21      	ldr	r3, [pc, #132]	; (404420 <sd_mmc_mci_install_mmc+0x18c>)
  40439c:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  40439e:	4b21      	ldr	r3, [pc, #132]	; (404424 <sd_mmc_mci_install_mmc+0x190>)
  4043a0:	4798      	blx	r3
  4043a2:	4603      	mov	r3, r0
  4043a4:	2b00      	cmp	r3, #0
  4043a6:	d011      	beq.n	4043cc <sd_mmc_mci_install_mmc+0x138>
  4043a8:	79bb      	ldrb	r3, [r7, #6]
  4043aa:	2b00      	cmp	r3, #0
  4043ac:	d00e      	beq.n	4043cc <sd_mmc_mci_install_mmc+0x138>
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
  4043ae:	4b1e      	ldr	r3, [pc, #120]	; (404428 <sd_mmc_mci_install_mmc+0x194>)
  4043b0:	4798      	blx	r3
  4043b2:	4603      	mov	r3, r0
  4043b4:	f083 0301 	eor.w	r3, r3, #1
  4043b8:	b2db      	uxtb	r3, r3
  4043ba:	2b00      	cmp	r3, #0
  4043bc:	d001      	beq.n	4043c2 <sd_mmc_mci_install_mmc+0x12e>
				return false;
  4043be:	2300      	movs	r3, #0
  4043c0:	e018      	b.n	4043f4 <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  4043c2:	4b17      	ldr	r3, [pc, #92]	; (404420 <sd_mmc_mci_install_mmc+0x18c>)
  4043c4:	4798      	blx	r3
  4043c6:	e001      	b.n	4043cc <sd_mmc_mci_install_mmc+0x138>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  4043c8:	4b15      	ldr	r3, [pc, #84]	; (404420 <sd_mmc_mci_install_mmc+0x18c>)
  4043ca:	4798      	blx	r3
	}

	uint8_t retry = 10;
  4043cc:	230a      	movs	r3, #10
  4043ce:	71fb      	strb	r3, [r7, #7]
	while (retry--) {
  4043d0:	e00a      	b.n	4043e8 <sd_mmc_mci_install_mmc+0x154>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  4043d2:	f44f 7100 	mov.w	r1, #512	; 0x200
  4043d6:	f241 1010 	movw	r0, #4368	; 0x1110
  4043da:	4b08      	ldr	r3, [pc, #32]	; (4043fc <sd_mmc_mci_install_mmc+0x168>)
  4043dc:	4798      	blx	r3
  4043de:	4603      	mov	r3, r0
  4043e0:	2b00      	cmp	r3, #0
  4043e2:	d001      	beq.n	4043e8 <sd_mmc_mci_install_mmc+0x154>
			return true;
  4043e4:	2301      	movs	r3, #1
  4043e6:	e005      	b.n	4043f4 <sd_mmc_mci_install_mmc+0x160>
	while (retry--) {
  4043e8:	79fb      	ldrb	r3, [r7, #7]
  4043ea:	1e5a      	subs	r2, r3, #1
  4043ec:	71fa      	strb	r2, [r7, #7]
  4043ee:	2b00      	cmp	r3, #0
  4043f0:	d1ef      	bne.n	4043d2 <sd_mmc_mci_install_mmc+0x13e>
		}
	}
	return false;
  4043f2:	2300      	movs	r3, #0
}
  4043f4:	4618      	mov	r0, r3
  4043f6:	3708      	adds	r7, #8
  4043f8:	46bd      	mov	sp, r7
  4043fa:	bd80      	pop	{r7, pc}
  4043fc:	00405639 	.word	0x00405639
  404400:	004032f9 	.word	0x004032f9
  404404:	2000abf4 	.word	0x2000abf4
  404408:	00403a29 	.word	0x00403a29
  40440c:	00403a6d 	.word	0x00403a6d
  404410:	00403931 	.word	0x00403931
  404414:	2000abf0 	.word	0x2000abf0
  404418:	00405519 	.word	0x00405519
  40441c:	004037f5 	.word	0x004037f5
  404420:	00403f6d 	.word	0x00403f6d
  404424:	0040553b 	.word	0x0040553b
  404428:	00403871 	.word	0x00403871

0040442c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40442c:	b580      	push	{r7, lr}
  40442e:	b082      	sub	sp, #8
  404430:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  404432:	2300      	movs	r3, #0
  404434:	71fb      	strb	r3, [r7, #7]
  404436:	e009      	b.n	40444c <sd_mmc_init+0x20>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  404438:	79fb      	ldrb	r3, [r7, #7]
  40443a:	4a0a      	ldr	r2, [pc, #40]	; (404464 <sd_mmc_init+0x38>)
  40443c:	015b      	lsls	r3, r3, #5
  40443e:	4413      	add	r3, r2
  404440:	330a      	adds	r3, #10
  404442:	2204      	movs	r2, #4
  404444:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  404446:	79fb      	ldrb	r3, [r7, #7]
  404448:	3301      	adds	r3, #1
  40444a:	71fb      	strb	r3, [r7, #7]
  40444c:	79fb      	ldrb	r3, [r7, #7]
  40444e:	2b00      	cmp	r3, #0
  404450:	d0f2      	beq.n	404438 <sd_mmc_init+0xc>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  404452:	4b05      	ldr	r3, [pc, #20]	; (404468 <sd_mmc_init+0x3c>)
  404454:	22ff      	movs	r2, #255	; 0xff
  404456:	701a      	strb	r2, [r3, #0]
	driver_init();
  404458:	4b04      	ldr	r3, [pc, #16]	; (40446c <sd_mmc_init+0x40>)
  40445a:	4798      	blx	r3
}
  40445c:	bf00      	nop
  40445e:	3708      	adds	r7, #8
  404460:	46bd      	mov	sp, r7
  404462:	bd80      	pop	{r7, pc}
  404464:	2000abd0 	.word	0x2000abd0
  404468:	2000abf0 	.word	0x2000abf0
  40446c:	004054e1 	.word	0x004054e1

00404470 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  404470:	b580      	push	{r7, lr}
  404472:	b084      	sub	sp, #16
  404474:	af00      	add	r7, sp, #0
  404476:	4603      	mov	r3, r0
  404478:	71fb      	strb	r3, [r7, #7]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40447a:	79fb      	ldrb	r3, [r7, #7]
  40447c:	4618      	mov	r0, r3
  40447e:	4b11      	ldr	r3, [pc, #68]	; (4044c4 <sd_mmc_check+0x54>)
  404480:	4798      	blx	r3
  404482:	4603      	mov	r3, r0
  404484:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  404486:	7bfb      	ldrb	r3, [r7, #15]
  404488:	2b01      	cmp	r3, #1
  40448a:	d003      	beq.n	404494 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
  40448c:	4b0e      	ldr	r3, [pc, #56]	; (4044c8 <sd_mmc_check+0x58>)
  40448e:	4798      	blx	r3
		return sd_mmc_err;
  404490:	7bfb      	ldrb	r3, [r7, #15]
  404492:	e013      	b.n	4044bc <sd_mmc_check+0x4c>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
			: sd_mmc_mci_card_init()) {
  404494:	4b0d      	ldr	r3, [pc, #52]	; (4044cc <sd_mmc_check+0x5c>)
  404496:	4798      	blx	r3
  404498:	4603      	mov	r3, r0
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  40449a:	2b00      	cmp	r3, #0
  40449c:	d007      	beq.n	4044ae <sd_mmc_check+0x3e>
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  40449e:	4b0c      	ldr	r3, [pc, #48]	; (4044d0 <sd_mmc_check+0x60>)
  4044a0:	681b      	ldr	r3, [r3, #0]
  4044a2:	2200      	movs	r2, #0
  4044a4:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  4044a6:	4b08      	ldr	r3, [pc, #32]	; (4044c8 <sd_mmc_check+0x58>)
  4044a8:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  4044aa:	2301      	movs	r3, #1
  4044ac:	e006      	b.n	4044bc <sd_mmc_check+0x4c>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4044ae:	4b08      	ldr	r3, [pc, #32]	; (4044d0 <sd_mmc_check+0x60>)
  4044b0:	681b      	ldr	r3, [r3, #0]
  4044b2:	2203      	movs	r2, #3
  4044b4:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
  4044b6:	4b04      	ldr	r3, [pc, #16]	; (4044c8 <sd_mmc_check+0x58>)
  4044b8:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4044ba:	2303      	movs	r3, #3
}
  4044bc:	4618      	mov	r0, r3
  4044be:	3710      	adds	r7, #16
  4044c0:	46bd      	mov	sp, r7
  4044c2:	bd80      	pop	{r7, pc}
  4044c4:	00403eb9 	.word	0x00403eb9
  4044c8:	00403fa5 	.word	0x00403fa5
  4044cc:	00403fc9 	.word	0x00403fc9
  4044d0:	2000abf4 	.word	0x2000abf4

004044d4 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  4044d4:	b580      	push	{r7, lr}
  4044d6:	b082      	sub	sp, #8
  4044d8:	af00      	add	r7, sp, #0
  4044da:	4603      	mov	r3, r0
  4044dc:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  4044de:	79fb      	ldrb	r3, [r7, #7]
  4044e0:	4618      	mov	r0, r3
  4044e2:	4b08      	ldr	r3, [pc, #32]	; (404504 <sd_mmc_get_type+0x30>)
  4044e4:	4798      	blx	r3
  4044e6:	4603      	mov	r3, r0
  4044e8:	2b00      	cmp	r3, #0
  4044ea:	d001      	beq.n	4044f0 <sd_mmc_get_type+0x1c>
		return CARD_TYPE_UNKNOWN;
  4044ec:	2300      	movs	r3, #0
  4044ee:	e004      	b.n	4044fa <sd_mmc_get_type+0x26>
	}
	sd_mmc_deselect_slot();
  4044f0:	4b05      	ldr	r3, [pc, #20]	; (404508 <sd_mmc_get_type+0x34>)
  4044f2:	4798      	blx	r3
	return sd_mmc_card->type;
  4044f4:	4b05      	ldr	r3, [pc, #20]	; (40450c <sd_mmc_get_type+0x38>)
  4044f6:	681b      	ldr	r3, [r3, #0]
  4044f8:	7adb      	ldrb	r3, [r3, #11]
}
  4044fa:	4618      	mov	r0, r3
  4044fc:	3708      	adds	r7, #8
  4044fe:	46bd      	mov	sp, r7
  404500:	bd80      	pop	{r7, pc}
  404502:	bf00      	nop
  404504:	00403eb9 	.word	0x00403eb9
  404508:	00403fa5 	.word	0x00403fa5
  40450c:	2000abf4 	.word	0x2000abf4

00404510 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  404510:	b580      	push	{r7, lr}
  404512:	b082      	sub	sp, #8
  404514:	af00      	add	r7, sp, #0
  404516:	4603      	mov	r3, r0
  404518:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  40451a:	79fb      	ldrb	r3, [r7, #7]
  40451c:	4618      	mov	r0, r3
  40451e:	4b08      	ldr	r3, [pc, #32]	; (404540 <sd_mmc_get_capacity+0x30>)
  404520:	4798      	blx	r3
  404522:	4603      	mov	r3, r0
  404524:	2b00      	cmp	r3, #0
  404526:	d001      	beq.n	40452c <sd_mmc_get_capacity+0x1c>
		return 0;
  404528:	2300      	movs	r3, #0
  40452a:	e004      	b.n	404536 <sd_mmc_get_capacity+0x26>
	}
	sd_mmc_deselect_slot();
  40452c:	4b05      	ldr	r3, [pc, #20]	; (404544 <sd_mmc_get_capacity+0x34>)
  40452e:	4798      	blx	r3
	return sd_mmc_card->capacity;
  404530:	4b05      	ldr	r3, [pc, #20]	; (404548 <sd_mmc_get_capacity+0x38>)
  404532:	681b      	ldr	r3, [r3, #0]
  404534:	685b      	ldr	r3, [r3, #4]
}
  404536:	4618      	mov	r0, r3
  404538:	3708      	adds	r7, #8
  40453a:	46bd      	mov	sp, r7
  40453c:	bd80      	pop	{r7, pc}
  40453e:	bf00      	nop
  404540:	00403eb9 	.word	0x00403eb9
  404544:	00403fa5 	.word	0x00403fa5
  404548:	2000abf4 	.word	0x2000abf4

0040454c <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
  40454c:	b480      	push	{r7}
  40454e:	b083      	sub	sp, #12
  404550:	af00      	add	r7, sp, #0
  404552:	4603      	mov	r3, r0
  404554:	71fb      	strb	r3, [r7, #7]
	if (ioport_get_pin_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
  404556:	2300      	movs	r3, #0
}
  404558:	4618      	mov	r0, r3
  40455a:	370c      	adds	r7, #12
  40455c:	46bd      	mov	sp, r7
  40455e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404562:	4770      	bx	lr

00404564 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  404564:	b590      	push	{r4, r7, lr}
  404566:	b089      	sub	sp, #36	; 0x24
  404568:	af02      	add	r7, sp, #8
  40456a:	4603      	mov	r3, r0
  40456c:	6039      	str	r1, [r7, #0]
  40456e:	71fb      	strb	r3, [r7, #7]
  404570:	4613      	mov	r3, r2
  404572:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  404574:	79fb      	ldrb	r3, [r7, #7]
  404576:	4618      	mov	r0, r3
  404578:	4b2a      	ldr	r3, [pc, #168]	; (404624 <sd_mmc_init_read_blocks+0xc0>)
  40457a:	4798      	blx	r3
  40457c:	4603      	mov	r3, r0
  40457e:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
  404580:	7bfb      	ldrb	r3, [r7, #15]
  404582:	2b00      	cmp	r3, #0
  404584:	d001      	beq.n	40458a <sd_mmc_init_read_blocks+0x26>
		return sd_mmc_err;
  404586:	7bfb      	ldrb	r3, [r7, #15]
  404588:	e047      	b.n	40461a <sd_mmc_init_read_blocks+0xb6>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
  40458a:	4b27      	ldr	r3, [pc, #156]	; (404628 <sd_mmc_init_read_blocks+0xc4>)
  40458c:	4798      	blx	r3
  40458e:	4603      	mov	r3, r0
  404590:	f083 0301 	eor.w	r3, r3, #1
  404594:	b2db      	uxtb	r3, r3
  404596:	2b00      	cmp	r3, #0
  404598:	d003      	beq.n	4045a2 <sd_mmc_init_read_blocks+0x3e>
		sd_mmc_deselect_slot();
  40459a:	4b24      	ldr	r3, [pc, #144]	; (40462c <sd_mmc_init_read_blocks+0xc8>)
  40459c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  40459e:	2305      	movs	r3, #5
  4045a0:	e03b      	b.n	40461a <sd_mmc_init_read_blocks+0xb6>
	}

	if (nb_block > 1) {
  4045a2:	88bb      	ldrh	r3, [r7, #4]
  4045a4:	2b01      	cmp	r3, #1
  4045a6:	d902      	bls.n	4045ae <sd_mmc_init_read_blocks+0x4a>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
  4045a8:	4b21      	ldr	r3, [pc, #132]	; (404630 <sd_mmc_init_read_blocks+0xcc>)
  4045aa:	617b      	str	r3, [r7, #20]
  4045ac:	e001      	b.n	4045b2 <sd_mmc_init_read_blocks+0x4e>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  4045ae:	4b21      	ldr	r3, [pc, #132]	; (404634 <sd_mmc_init_read_blocks+0xd0>)
  4045b0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  4045b2:	4b21      	ldr	r3, [pc, #132]	; (404638 <sd_mmc_init_read_blocks+0xd4>)
  4045b4:	681b      	ldr	r3, [r3, #0]
  4045b6:	7adb      	ldrb	r3, [r3, #11]
  4045b8:	f003 0308 	and.w	r3, r3, #8
  4045bc:	2b00      	cmp	r3, #0
  4045be:	d002      	beq.n	4045c6 <sd_mmc_init_read_blocks+0x62>
		arg = start;
  4045c0:	683b      	ldr	r3, [r7, #0]
  4045c2:	613b      	str	r3, [r7, #16]
  4045c4:	e002      	b.n	4045cc <sd_mmc_init_read_blocks+0x68>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  4045c6:	683b      	ldr	r3, [r7, #0]
  4045c8:	025b      	lsls	r3, r3, #9
  4045ca:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  4045cc:	88ba      	ldrh	r2, [r7, #4]
  4045ce:	2301      	movs	r3, #1
  4045d0:	9300      	str	r3, [sp, #0]
  4045d2:	4613      	mov	r3, r2
  4045d4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4045d8:	6939      	ldr	r1, [r7, #16]
  4045da:	6978      	ldr	r0, [r7, #20]
  4045dc:	4c17      	ldr	r4, [pc, #92]	; (40463c <sd_mmc_init_read_blocks+0xd8>)
  4045de:	47a0      	blx	r4
  4045e0:	4603      	mov	r3, r0
  4045e2:	f083 0301 	eor.w	r3, r3, #1
  4045e6:	b2db      	uxtb	r3, r3
  4045e8:	2b00      	cmp	r3, #0
  4045ea:	d003      	beq.n	4045f4 <sd_mmc_init_read_blocks+0x90>
		sd_mmc_deselect_slot();
  4045ec:	4b0f      	ldr	r3, [pc, #60]	; (40462c <sd_mmc_init_read_blocks+0xc8>)
  4045ee:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4045f0:	2305      	movs	r3, #5
  4045f2:	e012      	b.n	40461a <sd_mmc_init_read_blocks+0xb6>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  4045f4:	4b12      	ldr	r3, [pc, #72]	; (404640 <sd_mmc_init_read_blocks+0xdc>)
  4045f6:	4798      	blx	r3
  4045f8:	60b8      	str	r0, [r7, #8]
		if (resp & CARD_STATUS_ERR_RD_WR) {
  4045fa:	68ba      	ldr	r2, [r7, #8]
  4045fc:	4b11      	ldr	r3, [pc, #68]	; (404644 <sd_mmc_init_read_blocks+0xe0>)
  4045fe:	4013      	ands	r3, r2
  404600:	2b00      	cmp	r3, #0
  404602:	d003      	beq.n	40460c <sd_mmc_init_read_blocks+0xa8>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  404604:	4b09      	ldr	r3, [pc, #36]	; (40462c <sd_mmc_init_read_blocks+0xc8>)
  404606:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  404608:	2305      	movs	r3, #5
  40460a:	e006      	b.n	40461a <sd_mmc_init_read_blocks+0xb6>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  40460c:	4a0e      	ldr	r2, [pc, #56]	; (404648 <sd_mmc_init_read_blocks+0xe4>)
  40460e:	88bb      	ldrh	r3, [r7, #4]
  404610:	8013      	strh	r3, [r2, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  404612:	4a0e      	ldr	r2, [pc, #56]	; (40464c <sd_mmc_init_read_blocks+0xe8>)
  404614:	88bb      	ldrh	r3, [r7, #4]
  404616:	8013      	strh	r3, [r2, #0]
	return SD_MMC_OK;
  404618:	2300      	movs	r3, #0
}
  40461a:	4618      	mov	r0, r3
  40461c:	371c      	adds	r7, #28
  40461e:	46bd      	mov	sp, r7
  404620:	bd90      	pop	{r4, r7, pc}
  404622:	bf00      	nop
  404624:	00403eb9 	.word	0x00403eb9
  404628:	00403c95 	.word	0x00403c95
  40462c:	00403fa5 	.word	0x00403fa5
  404630:	00101112 	.word	0x00101112
  404634:	00081111 	.word	0x00081111
  404638:	2000abf4 	.word	0x2000abf4
  40463c:	00405705 	.word	0x00405705
  404640:	0040567d 	.word	0x0040567d
  404644:	e4580000 	.word	0xe4580000
  404648:	2000abfa 	.word	0x2000abfa
  40464c:	2000abf8 	.word	0x2000abf8

00404650 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  404650:	b580      	push	{r7, lr}
  404652:	b082      	sub	sp, #8
  404654:	af00      	add	r7, sp, #0
  404656:	6078      	str	r0, [r7, #4]
  404658:	460b      	mov	r3, r1
  40465a:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  40465c:	887b      	ldrh	r3, [r7, #2]
  40465e:	4619      	mov	r1, r3
  404660:	6878      	ldr	r0, [r7, #4]
  404662:	4b0c      	ldr	r3, [pc, #48]	; (404694 <sd_mmc_start_read_blocks+0x44>)
  404664:	4798      	blx	r3
  404666:	4603      	mov	r3, r0
  404668:	f083 0301 	eor.w	r3, r3, #1
  40466c:	b2db      	uxtb	r3, r3
  40466e:	2b00      	cmp	r3, #0
  404670:	d004      	beq.n	40467c <sd_mmc_start_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  404672:	4b09      	ldr	r3, [pc, #36]	; (404698 <sd_mmc_start_read_blocks+0x48>)
  404674:	2200      	movs	r2, #0
  404676:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  404678:	2305      	movs	r3, #5
  40467a:	e007      	b.n	40468c <sd_mmc_start_read_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
  40467c:	4b06      	ldr	r3, [pc, #24]	; (404698 <sd_mmc_start_read_blocks+0x48>)
  40467e:	881a      	ldrh	r2, [r3, #0]
  404680:	887b      	ldrh	r3, [r7, #2]
  404682:	1ad3      	subs	r3, r2, r3
  404684:	b29a      	uxth	r2, r3
  404686:	4b04      	ldr	r3, [pc, #16]	; (404698 <sd_mmc_start_read_blocks+0x48>)
  404688:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  40468a:	2300      	movs	r3, #0
}
  40468c:	4618      	mov	r0, r3
  40468e:	3708      	adds	r7, #8
  404690:	46bd      	mov	sp, r7
  404692:	bd80      	pop	{r7, pc}
  404694:	004058c9 	.word	0x004058c9
  404698:	2000abfa 	.word	0x2000abfa

0040469c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  40469c:	b580      	push	{r7, lr}
  40469e:	b082      	sub	sp, #8
  4046a0:	af00      	add	r7, sp, #0
  4046a2:	4603      	mov	r3, r0
  4046a4:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_read_blocks()) {
  4046a6:	4b1b      	ldr	r3, [pc, #108]	; (404714 <sd_mmc_wait_end_of_read_blocks+0x78>)
  4046a8:	4798      	blx	r3
  4046aa:	4603      	mov	r3, r0
  4046ac:	f083 0301 	eor.w	r3, r3, #1
  4046b0:	b2db      	uxtb	r3, r3
  4046b2:	2b00      	cmp	r3, #0
  4046b4:	d001      	beq.n	4046ba <sd_mmc_wait_end_of_read_blocks+0x1e>
		return SD_MMC_ERR_COMM;
  4046b6:	2305      	movs	r3, #5
  4046b8:	e027      	b.n	40470a <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	if (abort) {
  4046ba:	79fb      	ldrb	r3, [r7, #7]
  4046bc:	2b00      	cmp	r3, #0
  4046be:	d003      	beq.n	4046c8 <sd_mmc_wait_end_of_read_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  4046c0:	4b15      	ldr	r3, [pc, #84]	; (404718 <sd_mmc_wait_end_of_read_blocks+0x7c>)
  4046c2:	2200      	movs	r2, #0
  4046c4:	801a      	strh	r2, [r3, #0]
  4046c6:	e005      	b.n	4046d4 <sd_mmc_wait_end_of_read_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
  4046c8:	4b13      	ldr	r3, [pc, #76]	; (404718 <sd_mmc_wait_end_of_read_blocks+0x7c>)
  4046ca:	881b      	ldrh	r3, [r3, #0]
  4046cc:	2b00      	cmp	r3, #0
  4046ce:	d001      	beq.n	4046d4 <sd_mmc_wait_end_of_read_blocks+0x38>
		return SD_MMC_OK;
  4046d0:	2300      	movs	r3, #0
  4046d2:	e01a      	b.n	40470a <sd_mmc_wait_end_of_read_blocks+0x6e>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  4046d4:	4b11      	ldr	r3, [pc, #68]	; (40471c <sd_mmc_wait_end_of_read_blocks+0x80>)
  4046d6:	881b      	ldrh	r3, [r3, #0]
  4046d8:	2b01      	cmp	r3, #1
  4046da:	d103      	bne.n	4046e4 <sd_mmc_wait_end_of_read_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  4046dc:	4b10      	ldr	r3, [pc, #64]	; (404720 <sd_mmc_wait_end_of_read_blocks+0x84>)
  4046de:	4798      	blx	r3
		return SD_MMC_OK;
  4046e0:	2300      	movs	r3, #0
  4046e2:	e012      	b.n	40470a <sd_mmc_wait_end_of_read_blocks+0x6e>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  4046e4:	2100      	movs	r1, #0
  4046e6:	f243 100c 	movw	r0, #12556	; 0x310c
  4046ea:	4b0e      	ldr	r3, [pc, #56]	; (404724 <sd_mmc_wait_end_of_read_blocks+0x88>)
  4046ec:	4798      	blx	r3
  4046ee:	4603      	mov	r3, r0
  4046f0:	f083 0301 	eor.w	r3, r3, #1
  4046f4:	b2db      	uxtb	r3, r3
  4046f6:	2b00      	cmp	r3, #0
  4046f8:	d004      	beq.n	404704 <sd_mmc_wait_end_of_read_blocks+0x68>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  4046fa:	2100      	movs	r1, #0
  4046fc:	f243 100c 	movw	r0, #12556	; 0x310c
  404700:	4b08      	ldr	r3, [pc, #32]	; (404724 <sd_mmc_wait_end_of_read_blocks+0x88>)
  404702:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
  404704:	4b06      	ldr	r3, [pc, #24]	; (404720 <sd_mmc_wait_end_of_read_blocks+0x84>)
  404706:	4798      	blx	r3
	return SD_MMC_OK;
  404708:	2300      	movs	r3, #0
}
  40470a:	4618      	mov	r0, r3
  40470c:	3708      	adds	r7, #8
  40470e:	46bd      	mov	sp, r7
  404710:	bd80      	pop	{r7, pc}
  404712:	bf00      	nop
  404714:	00405969 	.word	0x00405969
  404718:	2000abfa 	.word	0x2000abfa
  40471c:	2000abf8 	.word	0x2000abf8
  404720:	00403fa5 	.word	0x00403fa5
  404724:	00405639 	.word	0x00405639

00404728 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  404728:	b590      	push	{r4, r7, lr}
  40472a:	b089      	sub	sp, #36	; 0x24
  40472c:	af02      	add	r7, sp, #8
  40472e:	4603      	mov	r3, r0
  404730:	6039      	str	r1, [r7, #0]
  404732:	71fb      	strb	r3, [r7, #7]
  404734:	4613      	mov	r3, r2
  404736:	80bb      	strh	r3, [r7, #4]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  404738:	79fb      	ldrb	r3, [r7, #7]
  40473a:	4618      	mov	r0, r3
  40473c:	4b29      	ldr	r3, [pc, #164]	; (4047e4 <sd_mmc_init_write_blocks+0xbc>)
  40473e:	4798      	blx	r3
  404740:	4603      	mov	r3, r0
  404742:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_OK) {
  404744:	7bfb      	ldrb	r3, [r7, #15]
  404746:	2b00      	cmp	r3, #0
  404748:	d001      	beq.n	40474e <sd_mmc_init_write_blocks+0x26>
		return sd_mmc_err;
  40474a:	7bfb      	ldrb	r3, [r7, #15]
  40474c:	e046      	b.n	4047dc <sd_mmc_init_write_blocks+0xb4>
	}
	if (sd_mmc_is_write_protected(slot)) {
  40474e:	79fb      	ldrb	r3, [r7, #7]
  404750:	4618      	mov	r0, r3
  404752:	4b25      	ldr	r3, [pc, #148]	; (4047e8 <sd_mmc_init_write_blocks+0xc0>)
  404754:	4798      	blx	r3
  404756:	4603      	mov	r3, r0
  404758:	2b00      	cmp	r3, #0
  40475a:	d003      	beq.n	404764 <sd_mmc_init_write_blocks+0x3c>
		sd_mmc_deselect_slot();
  40475c:	4b23      	ldr	r3, [pc, #140]	; (4047ec <sd_mmc_init_write_blocks+0xc4>)
  40475e:	4798      	blx	r3
		return SD_MMC_ERR_WP;
  404760:	2307      	movs	r3, #7
  404762:	e03b      	b.n	4047dc <sd_mmc_init_write_blocks+0xb4>
	}

	if (nb_block > 1) {
  404764:	88bb      	ldrh	r3, [r7, #4]
  404766:	2b01      	cmp	r3, #1
  404768:	d902      	bls.n	404770 <sd_mmc_init_write_blocks+0x48>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
  40476a:	4b21      	ldr	r3, [pc, #132]	; (4047f0 <sd_mmc_init_write_blocks+0xc8>)
  40476c:	617b      	str	r3, [r7, #20]
  40476e:	e001      	b.n	404774 <sd_mmc_init_write_blocks+0x4c>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  404770:	4b20      	ldr	r3, [pc, #128]	; (4047f4 <sd_mmc_init_write_blocks+0xcc>)
  404772:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  404774:	4b20      	ldr	r3, [pc, #128]	; (4047f8 <sd_mmc_init_write_blocks+0xd0>)
  404776:	681b      	ldr	r3, [r3, #0]
  404778:	7adb      	ldrb	r3, [r3, #11]
  40477a:	f003 0308 	and.w	r3, r3, #8
  40477e:	2b00      	cmp	r3, #0
  404780:	d002      	beq.n	404788 <sd_mmc_init_write_blocks+0x60>
		arg = start;
  404782:	683b      	ldr	r3, [r7, #0]
  404784:	613b      	str	r3, [r7, #16]
  404786:	e002      	b.n	40478e <sd_mmc_init_write_blocks+0x66>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  404788:	683b      	ldr	r3, [r7, #0]
  40478a:	025b      	lsls	r3, r3, #9
  40478c:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  40478e:	88ba      	ldrh	r2, [r7, #4]
  404790:	2301      	movs	r3, #1
  404792:	9300      	str	r3, [sp, #0]
  404794:	4613      	mov	r3, r2
  404796:	f44f 7200 	mov.w	r2, #512	; 0x200
  40479a:	6939      	ldr	r1, [r7, #16]
  40479c:	6978      	ldr	r0, [r7, #20]
  40479e:	4c17      	ldr	r4, [pc, #92]	; (4047fc <sd_mmc_init_write_blocks+0xd4>)
  4047a0:	47a0      	blx	r4
  4047a2:	4603      	mov	r3, r0
  4047a4:	f083 0301 	eor.w	r3, r3, #1
  4047a8:	b2db      	uxtb	r3, r3
  4047aa:	2b00      	cmp	r3, #0
  4047ac:	d003      	beq.n	4047b6 <sd_mmc_init_write_blocks+0x8e>
		sd_mmc_deselect_slot();
  4047ae:	4b0f      	ldr	r3, [pc, #60]	; (4047ec <sd_mmc_init_write_blocks+0xc4>)
  4047b0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  4047b2:	2305      	movs	r3, #5
  4047b4:	e012      	b.n	4047dc <sd_mmc_init_write_blocks+0xb4>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  4047b6:	4b12      	ldr	r3, [pc, #72]	; (404800 <sd_mmc_init_write_blocks+0xd8>)
  4047b8:	4798      	blx	r3
  4047ba:	60b8      	str	r0, [r7, #8]
		if (resp & CARD_STATUS_ERR_RD_WR) {
  4047bc:	68ba      	ldr	r2, [r7, #8]
  4047be:	4b11      	ldr	r3, [pc, #68]	; (404804 <sd_mmc_init_write_blocks+0xdc>)
  4047c0:	4013      	ands	r3, r2
  4047c2:	2b00      	cmp	r3, #0
  4047c4:	d003      	beq.n	4047ce <sd_mmc_init_write_blocks+0xa6>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  4047c6:	4b09      	ldr	r3, [pc, #36]	; (4047ec <sd_mmc_init_write_blocks+0xc4>)
  4047c8:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  4047ca:	2305      	movs	r3, #5
  4047cc:	e006      	b.n	4047dc <sd_mmc_init_write_blocks+0xb4>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  4047ce:	4a0e      	ldr	r2, [pc, #56]	; (404808 <sd_mmc_init_write_blocks+0xe0>)
  4047d0:	88bb      	ldrh	r3, [r7, #4]
  4047d2:	8013      	strh	r3, [r2, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  4047d4:	4a0d      	ldr	r2, [pc, #52]	; (40480c <sd_mmc_init_write_blocks+0xe4>)
  4047d6:	88bb      	ldrh	r3, [r7, #4]
  4047d8:	8013      	strh	r3, [r2, #0]
	return SD_MMC_OK;
  4047da:	2300      	movs	r3, #0
}
  4047dc:	4618      	mov	r0, r3
  4047de:	371c      	adds	r7, #28
  4047e0:	46bd      	mov	sp, r7
  4047e2:	bd90      	pop	{r4, r7, pc}
  4047e4:	00403eb9 	.word	0x00403eb9
  4047e8:	0040454d 	.word	0x0040454d
  4047ec:	00403fa5 	.word	0x00403fa5
  4047f0:	00109119 	.word	0x00109119
  4047f4:	00089118 	.word	0x00089118
  4047f8:	2000abf4 	.word	0x2000abf4
  4047fc:	00405705 	.word	0x00405705
  404800:	0040567d 	.word	0x0040567d
  404804:	e4580000 	.word	0xe4580000
  404808:	2000abfa 	.word	0x2000abfa
  40480c:	2000abf8 	.word	0x2000abf8

00404810 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  404810:	b580      	push	{r7, lr}
  404812:	b082      	sub	sp, #8
  404814:	af00      	add	r7, sp, #0
  404816:	6078      	str	r0, [r7, #4]
  404818:	460b      	mov	r3, r1
  40481a:	807b      	strh	r3, [r7, #2]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  40481c:	887b      	ldrh	r3, [r7, #2]
  40481e:	4619      	mov	r1, r3
  404820:	6878      	ldr	r0, [r7, #4]
  404822:	4b0c      	ldr	r3, [pc, #48]	; (404854 <sd_mmc_start_write_blocks+0x44>)
  404824:	4798      	blx	r3
  404826:	4603      	mov	r3, r0
  404828:	f083 0301 	eor.w	r3, r3, #1
  40482c:	b2db      	uxtb	r3, r3
  40482e:	2b00      	cmp	r3, #0
  404830:	d004      	beq.n	40483c <sd_mmc_start_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  404832:	4b09      	ldr	r3, [pc, #36]	; (404858 <sd_mmc_start_write_blocks+0x48>)
  404834:	2200      	movs	r2, #0
  404836:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  404838:	2305      	movs	r3, #5
  40483a:	e007      	b.n	40484c <sd_mmc_start_write_blocks+0x3c>
	}
	sd_mmc_nb_block_remaining -= nb_block;
  40483c:	4b06      	ldr	r3, [pc, #24]	; (404858 <sd_mmc_start_write_blocks+0x48>)
  40483e:	881a      	ldrh	r2, [r3, #0]
  404840:	887b      	ldrh	r3, [r7, #2]
  404842:	1ad3      	subs	r3, r2, r3
  404844:	b29a      	uxth	r2, r3
  404846:	4b04      	ldr	r3, [pc, #16]	; (404858 <sd_mmc_start_write_blocks+0x48>)
  404848:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
  40484a:	2300      	movs	r3, #0
}
  40484c:	4618      	mov	r0, r3
  40484e:	3708      	adds	r7, #8
  404850:	46bd      	mov	sp, r7
  404852:	bd80      	pop	{r7, pc}
  404854:	004059f9 	.word	0x004059f9
  404858:	2000abfa 	.word	0x2000abfa

0040485c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  40485c:	b580      	push	{r7, lr}
  40485e:	b082      	sub	sp, #8
  404860:	af00      	add	r7, sp, #0
  404862:	4603      	mov	r3, r0
  404864:	71fb      	strb	r3, [r7, #7]
	if (!driver_wait_end_of_write_blocks()) {
  404866:	4b1a      	ldr	r3, [pc, #104]	; (4048d0 <sd_mmc_wait_end_of_write_blocks+0x74>)
  404868:	4798      	blx	r3
  40486a:	4603      	mov	r3, r0
  40486c:	f083 0301 	eor.w	r3, r3, #1
  404870:	b2db      	uxtb	r3, r3
  404872:	2b00      	cmp	r3, #0
  404874:	d001      	beq.n	40487a <sd_mmc_wait_end_of_write_blocks+0x1e>
		return SD_MMC_ERR_COMM;
  404876:	2305      	movs	r3, #5
  404878:	e026      	b.n	4048c8 <sd_mmc_wait_end_of_write_blocks+0x6c>
	}
	if (abort) {
  40487a:	79fb      	ldrb	r3, [r7, #7]
  40487c:	2b00      	cmp	r3, #0
  40487e:	d003      	beq.n	404888 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
  404880:	4b14      	ldr	r3, [pc, #80]	; (4048d4 <sd_mmc_wait_end_of_write_blocks+0x78>)
  404882:	2200      	movs	r2, #0
  404884:	801a      	strh	r2, [r3, #0]
  404886:	e005      	b.n	404894 <sd_mmc_wait_end_of_write_blocks+0x38>
	} else if (sd_mmc_nb_block_remaining) {
  404888:	4b12      	ldr	r3, [pc, #72]	; (4048d4 <sd_mmc_wait_end_of_write_blocks+0x78>)
  40488a:	881b      	ldrh	r3, [r3, #0]
  40488c:	2b00      	cmp	r3, #0
  40488e:	d001      	beq.n	404894 <sd_mmc_wait_end_of_write_blocks+0x38>
		return SD_MMC_OK;
  404890:	2300      	movs	r3, #0
  404892:	e019      	b.n	4048c8 <sd_mmc_wait_end_of_write_blocks+0x6c>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  404894:	4b10      	ldr	r3, [pc, #64]	; (4048d8 <sd_mmc_wait_end_of_write_blocks+0x7c>)
  404896:	881b      	ldrh	r3, [r3, #0]
  404898:	2b01      	cmp	r3, #1
  40489a:	d103      	bne.n	4048a4 <sd_mmc_wait_end_of_write_blocks+0x48>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  40489c:	4b0f      	ldr	r3, [pc, #60]	; (4048dc <sd_mmc_wait_end_of_write_blocks+0x80>)
  40489e:	4798      	blx	r3
		return SD_MMC_OK;
  4048a0:	2300      	movs	r3, #0
  4048a2:	e011      	b.n	4048c8 <sd_mmc_wait_end_of_write_blocks+0x6c>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  4048a4:	2100      	movs	r1, #0
  4048a6:	f243 100c 	movw	r0, #12556	; 0x310c
  4048aa:	4b0d      	ldr	r3, [pc, #52]	; (4048e0 <sd_mmc_wait_end_of_write_blocks+0x84>)
  4048ac:	4798      	blx	r3
  4048ae:	4603      	mov	r3, r0
  4048b0:	f083 0301 	eor.w	r3, r3, #1
  4048b4:	b2db      	uxtb	r3, r3
  4048b6:	2b00      	cmp	r3, #0
  4048b8:	d003      	beq.n	4048c2 <sd_mmc_wait_end_of_write_blocks+0x66>
			sd_mmc_deselect_slot();
  4048ba:	4b08      	ldr	r3, [pc, #32]	; (4048dc <sd_mmc_wait_end_of_write_blocks+0x80>)
  4048bc:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  4048be:	2305      	movs	r3, #5
  4048c0:	e002      	b.n	4048c8 <sd_mmc_wait_end_of_write_blocks+0x6c>
		}
	}
	sd_mmc_deselect_slot();
  4048c2:	4b06      	ldr	r3, [pc, #24]	; (4048dc <sd_mmc_wait_end_of_write_blocks+0x80>)
  4048c4:	4798      	blx	r3
	return SD_MMC_OK;
  4048c6:	2300      	movs	r3, #0
}
  4048c8:	4618      	mov	r0, r3
  4048ca:	3708      	adds	r7, #8
  4048cc:	46bd      	mov	sp, r7
  4048ce:	bd80      	pop	{r7, pc}
  4048d0:	00405a9d 	.word	0x00405a9d
  4048d4:	2000abfa 	.word	0x2000abfa
  4048d8:	2000abf8 	.word	0x2000abf8
  4048dc:	00403fa5 	.word	0x00403fa5
  4048e0:	00405639 	.word	0x00405639

004048e4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  4048e4:	b580      	push	{r7, lr}
  4048e6:	b082      	sub	sp, #8
  4048e8:	af00      	add	r7, sp, #0
  4048ea:	4603      	mov	r3, r0
  4048ec:	71fb      	strb	r3, [r7, #7]
	switch (sd_mmc_check(slot))
  4048ee:	79fb      	ldrb	r3, [r7, #7]
  4048f0:	4618      	mov	r0, r3
  4048f2:	4b15      	ldr	r3, [pc, #84]	; (404948 <sd_mmc_test_unit_ready+0x64>)
  4048f4:	4798      	blx	r3
  4048f6:	4603      	mov	r3, r0
  4048f8:	2b01      	cmp	r3, #1
  4048fa:	d017      	beq.n	40492c <sd_mmc_test_unit_ready+0x48>
  4048fc:	2b02      	cmp	r3, #2
  4048fe:	d017      	beq.n	404930 <sd_mmc_test_unit_ready+0x4c>
  404900:	2b00      	cmp	r3, #0
  404902:	d11b      	bne.n	40493c <sd_mmc_test_unit_ready+0x58>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  404904:	79fb      	ldrb	r3, [r7, #7]
  404906:	4a11      	ldr	r2, [pc, #68]	; (40494c <sd_mmc_test_unit_ready+0x68>)
  404908:	5cd3      	ldrb	r3, [r2, r3]
  40490a:	2b00      	cmp	r3, #0
  40490c:	d001      	beq.n	404912 <sd_mmc_test_unit_ready+0x2e>
			return CTRL_NO_PRESENT;
  40490e:	2302      	movs	r3, #2
  404910:	e015      	b.n	40493e <sd_mmc_test_unit_ready+0x5a>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  404912:	79fb      	ldrb	r3, [r7, #7]
  404914:	4618      	mov	r0, r3
  404916:	4b0e      	ldr	r3, [pc, #56]	; (404950 <sd_mmc_test_unit_ready+0x6c>)
  404918:	4798      	blx	r3
  40491a:	4603      	mov	r3, r0
  40491c:	f003 0303 	and.w	r3, r3, #3
  404920:	2b00      	cmp	r3, #0
  404922:	d001      	beq.n	404928 <sd_mmc_test_unit_ready+0x44>
			return CTRL_GOOD;
  404924:	2300      	movs	r3, #0
  404926:	e00a      	b.n	40493e <sd_mmc_test_unit_ready+0x5a>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
  404928:	2302      	movs	r3, #2
  40492a:	e008      	b.n	40493e <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  40492c:	2303      	movs	r3, #3
  40492e:	e006      	b.n	40493e <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  404930:	79fb      	ldrb	r3, [r7, #7]
  404932:	4a06      	ldr	r2, [pc, #24]	; (40494c <sd_mmc_test_unit_ready+0x68>)
  404934:	2100      	movs	r1, #0
  404936:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
  404938:	2302      	movs	r3, #2
  40493a:	e000      	b.n	40493e <sd_mmc_test_unit_ready+0x5a>

	default:
		return CTRL_FAIL;
  40493c:	2301      	movs	r3, #1
	}
}
  40493e:	4618      	mov	r0, r3
  404940:	3708      	adds	r7, #8
  404942:	46bd      	mov	sp, r7
  404944:	bd80      	pop	{r7, pc}
  404946:	bf00      	nop
  404948:	00404471 	.word	0x00404471
  40494c:	2000abfc 	.word	0x2000abfc
  404950:	004044d5 	.word	0x004044d5

00404954 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  404954:	b580      	push	{r7, lr}
  404956:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
  404958:	2000      	movs	r0, #0
  40495a:	4b02      	ldr	r3, [pc, #8]	; (404964 <sd_mmc_test_unit_ready_0+0x10>)
  40495c:	4798      	blx	r3
  40495e:	4603      	mov	r3, r0
}
  404960:	4618      	mov	r0, r3
  404962:	bd80      	pop	{r7, pc}
  404964:	004048e5 	.word	0x004048e5

00404968 <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
  404968:	b580      	push	{r7, lr}
  40496a:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(1);
  40496c:	2001      	movs	r0, #1
  40496e:	4b02      	ldr	r3, [pc, #8]	; (404978 <sd_mmc_test_unit_ready_1+0x10>)
  404970:	4798      	blx	r3
  404972:	4603      	mov	r3, r0
}
  404974:	4618      	mov	r0, r3
  404976:	bd80      	pop	{r7, pc}
  404978:	004048e5 	.word	0x004048e5

0040497c <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  40497c:	b580      	push	{r7, lr}
  40497e:	b082      	sub	sp, #8
  404980:	af00      	add	r7, sp, #0
  404982:	4603      	mov	r3, r0
  404984:	6039      	str	r1, [r7, #0]
  404986:	71fb      	strb	r3, [r7, #7]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  404988:	79fb      	ldrb	r3, [r7, #7]
  40498a:	4618      	mov	r0, r3
  40498c:	4b07      	ldr	r3, [pc, #28]	; (4049ac <sd_mmc_read_capacity+0x30>)
  40498e:	4798      	blx	r3
  404990:	4603      	mov	r3, r0
  404992:	005b      	lsls	r3, r3, #1
  404994:	1e5a      	subs	r2, r3, #1
  404996:	683b      	ldr	r3, [r7, #0]
  404998:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
  40499a:	79fb      	ldrb	r3, [r7, #7]
  40499c:	4618      	mov	r0, r3
  40499e:	4b04      	ldr	r3, [pc, #16]	; (4049b0 <sd_mmc_read_capacity+0x34>)
  4049a0:	4798      	blx	r3
  4049a2:	4603      	mov	r3, r0
}
  4049a4:	4618      	mov	r0, r3
  4049a6:	3708      	adds	r7, #8
  4049a8:	46bd      	mov	sp, r7
  4049aa:	bd80      	pop	{r7, pc}
  4049ac:	00404511 	.word	0x00404511
  4049b0:	004048e5 	.word	0x004048e5

004049b4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  4049b4:	b580      	push	{r7, lr}
  4049b6:	b082      	sub	sp, #8
  4049b8:	af00      	add	r7, sp, #0
  4049ba:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
  4049bc:	6879      	ldr	r1, [r7, #4]
  4049be:	2000      	movs	r0, #0
  4049c0:	4b03      	ldr	r3, [pc, #12]	; (4049d0 <sd_mmc_read_capacity_0+0x1c>)
  4049c2:	4798      	blx	r3
  4049c4:	4603      	mov	r3, r0
}
  4049c6:	4618      	mov	r0, r3
  4049c8:	3708      	adds	r7, #8
  4049ca:	46bd      	mov	sp, r7
  4049cc:	bd80      	pop	{r7, pc}
  4049ce:	bf00      	nop
  4049d0:	0040497d 	.word	0x0040497d

004049d4 <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
  4049d4:	b580      	push	{r7, lr}
  4049d6:	b082      	sub	sp, #8
  4049d8:	af00      	add	r7, sp, #0
  4049da:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(1, nb_sector);
  4049dc:	6879      	ldr	r1, [r7, #4]
  4049de:	2001      	movs	r0, #1
  4049e0:	4b03      	ldr	r3, [pc, #12]	; (4049f0 <sd_mmc_read_capacity_1+0x1c>)
  4049e2:	4798      	blx	r3
  4049e4:	4603      	mov	r3, r0
}
  4049e6:	4618      	mov	r0, r3
  4049e8:	3708      	adds	r7, #8
  4049ea:	46bd      	mov	sp, r7
  4049ec:	bd80      	pop	{r7, pc}
  4049ee:	bf00      	nop
  4049f0:	0040497d 	.word	0x0040497d

004049f4 <sd_mmc_unload>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
  4049f4:	b480      	push	{r7}
  4049f6:	b083      	sub	sp, #12
  4049f8:	af00      	add	r7, sp, #0
  4049fa:	4603      	mov	r3, r0
  4049fc:	460a      	mov	r2, r1
  4049fe:	71fb      	strb	r3, [r7, #7]
  404a00:	4613      	mov	r3, r2
  404a02:	71bb      	strb	r3, [r7, #6]
	sd_mmc_ejected[slot] = unload;
  404a04:	79fb      	ldrb	r3, [r7, #7]
  404a06:	4905      	ldr	r1, [pc, #20]	; (404a1c <sd_mmc_unload+0x28>)
  404a08:	79ba      	ldrb	r2, [r7, #6]
  404a0a:	54ca      	strb	r2, [r1, r3]
	return true;
  404a0c:	2301      	movs	r3, #1
}
  404a0e:	4618      	mov	r0, r3
  404a10:	370c      	adds	r7, #12
  404a12:	46bd      	mov	sp, r7
  404a14:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a18:	4770      	bx	lr
  404a1a:	bf00      	nop
  404a1c:	2000abfc 	.word	0x2000abfc

00404a20 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
  404a20:	b580      	push	{r7, lr}
  404a22:	b082      	sub	sp, #8
  404a24:	af00      	add	r7, sp, #0
  404a26:	4603      	mov	r3, r0
  404a28:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_unload(0, unload);
  404a2a:	79fb      	ldrb	r3, [r7, #7]
  404a2c:	4619      	mov	r1, r3
  404a2e:	2000      	movs	r0, #0
  404a30:	4b03      	ldr	r3, [pc, #12]	; (404a40 <sd_mmc_unload_0+0x20>)
  404a32:	4798      	blx	r3
  404a34:	4603      	mov	r3, r0
}
  404a36:	4618      	mov	r0, r3
  404a38:	3708      	adds	r7, #8
  404a3a:	46bd      	mov	sp, r7
  404a3c:	bd80      	pop	{r7, pc}
  404a3e:	bf00      	nop
  404a40:	004049f5 	.word	0x004049f5

00404a44 <sd_mmc_unload_1>:

bool sd_mmc_unload_1(bool unload)
{
  404a44:	b580      	push	{r7, lr}
  404a46:	b082      	sub	sp, #8
  404a48:	af00      	add	r7, sp, #0
  404a4a:	4603      	mov	r3, r0
  404a4c:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_unload(1, unload);
  404a4e:	79fb      	ldrb	r3, [r7, #7]
  404a50:	4619      	mov	r1, r3
  404a52:	2001      	movs	r0, #1
  404a54:	4b03      	ldr	r3, [pc, #12]	; (404a64 <sd_mmc_unload_1+0x20>)
  404a56:	4798      	blx	r3
  404a58:	4603      	mov	r3, r0
}
  404a5a:	4618      	mov	r0, r3
  404a5c:	3708      	adds	r7, #8
  404a5e:	46bd      	mov	sp, r7
  404a60:	bd80      	pop	{r7, pc}
  404a62:	bf00      	nop
  404a64:	004049f5 	.word	0x004049f5

00404a68 <sd_mmc_wr_protect>:

bool sd_mmc_wr_protect(uint8_t slot)
{
  404a68:	b580      	push	{r7, lr}
  404a6a:	b082      	sub	sp, #8
  404a6c:	af00      	add	r7, sp, #0
  404a6e:	4603      	mov	r3, r0
  404a70:	71fb      	strb	r3, [r7, #7]
	return sd_mmc_is_write_protected(slot);
  404a72:	79fb      	ldrb	r3, [r7, #7]
  404a74:	4618      	mov	r0, r3
  404a76:	4b03      	ldr	r3, [pc, #12]	; (404a84 <sd_mmc_wr_protect+0x1c>)
  404a78:	4798      	blx	r3
  404a7a:	4603      	mov	r3, r0
}
  404a7c:	4618      	mov	r0, r3
  404a7e:	3708      	adds	r7, #8
  404a80:	46bd      	mov	sp, r7
  404a82:	bd80      	pop	{r7, pc}
  404a84:	0040454d 	.word	0x0040454d

00404a88 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
  404a88:	b580      	push	{r7, lr}
  404a8a:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
  404a8c:	2000      	movs	r0, #0
  404a8e:	4b02      	ldr	r3, [pc, #8]	; (404a98 <sd_mmc_wr_protect_0+0x10>)
  404a90:	4798      	blx	r3
  404a92:	4603      	mov	r3, r0
}
  404a94:	4618      	mov	r0, r3
  404a96:	bd80      	pop	{r7, pc}
  404a98:	00404a69 	.word	0x00404a69

00404a9c <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
  404a9c:	b580      	push	{r7, lr}
  404a9e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(1);
  404aa0:	2001      	movs	r0, #1
  404aa2:	4b02      	ldr	r3, [pc, #8]	; (404aac <sd_mmc_wr_protect_1+0x10>)
  404aa4:	4798      	blx	r3
  404aa6:	4603      	mov	r3, r0
}
  404aa8:	4618      	mov	r0, r3
  404aaa:	bd80      	pop	{r7, pc}
  404aac:	00404a69 	.word	0x00404a69

00404ab0 <sd_mmc_removal>:

bool sd_mmc_removal(uint8_t slot)
{
  404ab0:	b480      	push	{r7}
  404ab2:	b083      	sub	sp, #12
  404ab4:	af00      	add	r7, sp, #0
  404ab6:	4603      	mov	r3, r0
  404ab8:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	return true;
  404aba:	2301      	movs	r3, #1
}
  404abc:	4618      	mov	r0, r3
  404abe:	370c      	adds	r7, #12
  404ac0:	46bd      	mov	sp, r7
  404ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ac6:	4770      	bx	lr

00404ac8 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
  404ac8:	b580      	push	{r7, lr}
  404aca:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
  404acc:	2000      	movs	r0, #0
  404ace:	4b02      	ldr	r3, [pc, #8]	; (404ad8 <sd_mmc_removal_0+0x10>)
  404ad0:	4798      	blx	r3
  404ad2:	4603      	mov	r3, r0
}
  404ad4:	4618      	mov	r0, r3
  404ad6:	bd80      	pop	{r7, pc}
  404ad8:	00404ab1 	.word	0x00404ab1

00404adc <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
  404adc:	b580      	push	{r7, lr}
  404ade:	af00      	add	r7, sp, #0
	return sd_mmc_removal(1);
  404ae0:	2001      	movs	r0, #1
  404ae2:	4b02      	ldr	r3, [pc, #8]	; (404aec <sd_mmc_removal_1+0x10>)
  404ae4:	4798      	blx	r3
  404ae6:	4603      	mov	r3, r0
}
  404ae8:	4618      	mov	r0, r3
  404aea:	bd80      	pop	{r7, pc}
  404aec:	00404ab1 	.word	0x00404ab1

00404af0 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  404af0:	b580      	push	{r7, lr}
  404af2:	b084      	sub	sp, #16
  404af4:	af00      	add	r7, sp, #0
  404af6:	4603      	mov	r3, r0
  404af8:	60b9      	str	r1, [r7, #8]
  404afa:	607a      	str	r2, [r7, #4]
  404afc:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  404afe:	7bfb      	ldrb	r3, [r7, #15]
  404b00:	2201      	movs	r2, #1
  404b02:	68b9      	ldr	r1, [r7, #8]
  404b04:	4618      	mov	r0, r3
  404b06:	4b11      	ldr	r3, [pc, #68]	; (404b4c <sd_mmc_mem_2_ram+0x5c>)
  404b08:	4798      	blx	r3
  404b0a:	4603      	mov	r3, r0
  404b0c:	2b00      	cmp	r3, #0
  404b0e:	d005      	beq.n	404b1c <sd_mmc_mem_2_ram+0x2c>
  404b10:	2b02      	cmp	r3, #2
  404b12:	d101      	bne.n	404b18 <sd_mmc_mem_2_ram+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  404b14:	2302      	movs	r3, #2
  404b16:	e014      	b.n	404b42 <sd_mmc_mem_2_ram+0x52>
	default:
		return CTRL_FAIL;
  404b18:	2301      	movs	r3, #1
  404b1a:	e012      	b.n	404b42 <sd_mmc_mem_2_ram+0x52>
		break;
  404b1c:	bf00      	nop
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  404b1e:	2101      	movs	r1, #1
  404b20:	6878      	ldr	r0, [r7, #4]
  404b22:	4b0b      	ldr	r3, [pc, #44]	; (404b50 <sd_mmc_mem_2_ram+0x60>)
  404b24:	4798      	blx	r3
  404b26:	4603      	mov	r3, r0
  404b28:	2b00      	cmp	r3, #0
  404b2a:	d001      	beq.n	404b30 <sd_mmc_mem_2_ram+0x40>
		return CTRL_FAIL;
  404b2c:	2301      	movs	r3, #1
  404b2e:	e008      	b.n	404b42 <sd_mmc_mem_2_ram+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  404b30:	2000      	movs	r0, #0
  404b32:	4b08      	ldr	r3, [pc, #32]	; (404b54 <sd_mmc_mem_2_ram+0x64>)
  404b34:	4798      	blx	r3
  404b36:	4603      	mov	r3, r0
  404b38:	2b00      	cmp	r3, #0
  404b3a:	d001      	beq.n	404b40 <sd_mmc_mem_2_ram+0x50>
		return CTRL_FAIL;
  404b3c:	2301      	movs	r3, #1
  404b3e:	e000      	b.n	404b42 <sd_mmc_mem_2_ram+0x52>
	}
	return CTRL_GOOD;
  404b40:	2300      	movs	r3, #0
}
  404b42:	4618      	mov	r0, r3
  404b44:	3710      	adds	r7, #16
  404b46:	46bd      	mov	sp, r7
  404b48:	bd80      	pop	{r7, pc}
  404b4a:	bf00      	nop
  404b4c:	00404565 	.word	0x00404565
  404b50:	00404651 	.word	0x00404651
  404b54:	0040469d 	.word	0x0040469d

00404b58 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  404b58:	b580      	push	{r7, lr}
  404b5a:	b082      	sub	sp, #8
  404b5c:	af00      	add	r7, sp, #0
  404b5e:	6078      	str	r0, [r7, #4]
  404b60:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
  404b62:	683a      	ldr	r2, [r7, #0]
  404b64:	6879      	ldr	r1, [r7, #4]
  404b66:	2000      	movs	r0, #0
  404b68:	4b03      	ldr	r3, [pc, #12]	; (404b78 <sd_mmc_mem_2_ram_0+0x20>)
  404b6a:	4798      	blx	r3
  404b6c:	4603      	mov	r3, r0
}
  404b6e:	4618      	mov	r0, r3
  404b70:	3708      	adds	r7, #8
  404b72:	46bd      	mov	sp, r7
  404b74:	bd80      	pop	{r7, pc}
  404b76:	bf00      	nop
  404b78:	00404af1 	.word	0x00404af1

00404b7c <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
  404b7c:	b580      	push	{r7, lr}
  404b7e:	b082      	sub	sp, #8
  404b80:	af00      	add	r7, sp, #0
  404b82:	6078      	str	r0, [r7, #4]
  404b84:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(1, addr, ram);
  404b86:	683a      	ldr	r2, [r7, #0]
  404b88:	6879      	ldr	r1, [r7, #4]
  404b8a:	2001      	movs	r0, #1
  404b8c:	4b03      	ldr	r3, [pc, #12]	; (404b9c <sd_mmc_mem_2_ram_1+0x20>)
  404b8e:	4798      	blx	r3
  404b90:	4603      	mov	r3, r0
}
  404b92:	4618      	mov	r0, r3
  404b94:	3708      	adds	r7, #8
  404b96:	46bd      	mov	sp, r7
  404b98:	bd80      	pop	{r7, pc}
  404b9a:	bf00      	nop
  404b9c:	00404af1 	.word	0x00404af1

00404ba0 <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  404ba0:	b580      	push	{r7, lr}
  404ba2:	b084      	sub	sp, #16
  404ba4:	af00      	add	r7, sp, #0
  404ba6:	4603      	mov	r3, r0
  404ba8:	60b9      	str	r1, [r7, #8]
  404baa:	607a      	str	r2, [r7, #4]
  404bac:	73fb      	strb	r3, [r7, #15]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  404bae:	7bfb      	ldrb	r3, [r7, #15]
  404bb0:	2201      	movs	r2, #1
  404bb2:	68b9      	ldr	r1, [r7, #8]
  404bb4:	4618      	mov	r0, r3
  404bb6:	4b11      	ldr	r3, [pc, #68]	; (404bfc <sd_mmc_ram_2_mem+0x5c>)
  404bb8:	4798      	blx	r3
  404bba:	4603      	mov	r3, r0
  404bbc:	2b00      	cmp	r3, #0
  404bbe:	d005      	beq.n	404bcc <sd_mmc_ram_2_mem+0x2c>
  404bc0:	2b02      	cmp	r3, #2
  404bc2:	d101      	bne.n	404bc8 <sd_mmc_ram_2_mem+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  404bc4:	2302      	movs	r3, #2
  404bc6:	e014      	b.n	404bf2 <sd_mmc_ram_2_mem+0x52>
	default:
		return CTRL_FAIL;
  404bc8:	2301      	movs	r3, #1
  404bca:	e012      	b.n	404bf2 <sd_mmc_ram_2_mem+0x52>
		break;
  404bcc:	bf00      	nop
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  404bce:	2101      	movs	r1, #1
  404bd0:	6878      	ldr	r0, [r7, #4]
  404bd2:	4b0b      	ldr	r3, [pc, #44]	; (404c00 <sd_mmc_ram_2_mem+0x60>)
  404bd4:	4798      	blx	r3
  404bd6:	4603      	mov	r3, r0
  404bd8:	2b00      	cmp	r3, #0
  404bda:	d001      	beq.n	404be0 <sd_mmc_ram_2_mem+0x40>
		return CTRL_FAIL;
  404bdc:	2301      	movs	r3, #1
  404bde:	e008      	b.n	404bf2 <sd_mmc_ram_2_mem+0x52>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  404be0:	2000      	movs	r0, #0
  404be2:	4b08      	ldr	r3, [pc, #32]	; (404c04 <sd_mmc_ram_2_mem+0x64>)
  404be4:	4798      	blx	r3
  404be6:	4603      	mov	r3, r0
  404be8:	2b00      	cmp	r3, #0
  404bea:	d001      	beq.n	404bf0 <sd_mmc_ram_2_mem+0x50>
		return CTRL_FAIL;
  404bec:	2301      	movs	r3, #1
  404bee:	e000      	b.n	404bf2 <sd_mmc_ram_2_mem+0x52>
	}
	return CTRL_GOOD;
  404bf0:	2300      	movs	r3, #0
}
  404bf2:	4618      	mov	r0, r3
  404bf4:	3710      	adds	r7, #16
  404bf6:	46bd      	mov	sp, r7
  404bf8:	bd80      	pop	{r7, pc}
  404bfa:	bf00      	nop
  404bfc:	00404729 	.word	0x00404729
  404c00:	00404811 	.word	0x00404811
  404c04:	0040485d 	.word	0x0040485d

00404c08 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  404c08:	b580      	push	{r7, lr}
  404c0a:	b082      	sub	sp, #8
  404c0c:	af00      	add	r7, sp, #0
  404c0e:	6078      	str	r0, [r7, #4]
  404c10:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
  404c12:	683a      	ldr	r2, [r7, #0]
  404c14:	6879      	ldr	r1, [r7, #4]
  404c16:	2000      	movs	r0, #0
  404c18:	4b03      	ldr	r3, [pc, #12]	; (404c28 <sd_mmc_ram_2_mem_0+0x20>)
  404c1a:	4798      	blx	r3
  404c1c:	4603      	mov	r3, r0
}
  404c1e:	4618      	mov	r0, r3
  404c20:	3708      	adds	r7, #8
  404c22:	46bd      	mov	sp, r7
  404c24:	bd80      	pop	{r7, pc}
  404c26:	bf00      	nop
  404c28:	00404ba1 	.word	0x00404ba1

00404c2c <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
  404c2c:	b580      	push	{r7, lr}
  404c2e:	b082      	sub	sp, #8
  404c30:	af00      	add	r7, sp, #0
  404c32:	6078      	str	r0, [r7, #4]
  404c34:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(1, addr, ram);
  404c36:	683a      	ldr	r2, [r7, #0]
  404c38:	6879      	ldr	r1, [r7, #4]
  404c3a:	2001      	movs	r0, #1
  404c3c:	4b03      	ldr	r3, [pc, #12]	; (404c4c <sd_mmc_ram_2_mem_1+0x20>)
  404c3e:	4798      	blx	r3
  404c40:	4603      	mov	r3, r0
}
  404c42:	4618      	mov	r0, r3
  404c44:	3708      	adds	r7, #8
  404c46:	46bd      	mov	sp, r7
  404c48:	bd80      	pop	{r7, pc}
  404c4a:	bf00      	nop
  404c4c:	00404ba1 	.word	0x00404ba1

00404c50 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  404c50:	b580      	push	{r7, lr}
  404c52:	b084      	sub	sp, #16
  404c54:	af00      	add	r7, sp, #0
  404c56:	4603      	mov	r3, r0
  404c58:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  404c5a:	79fb      	ldrb	r3, [r7, #7]
  404c5c:	2b01      	cmp	r3, #1
  404c5e:	d807      	bhi.n	404c70 <mem_test_unit_ready+0x20>
  404c60:	79fb      	ldrb	r3, [r7, #7]
  404c62:	4a07      	ldr	r2, [pc, #28]	; (404c80 <mem_test_unit_ready+0x30>)
  404c64:	015b      	lsls	r3, r3, #5
  404c66:	4413      	add	r3, r2
  404c68:	681b      	ldr	r3, [r3, #0]
  404c6a:	4798      	blx	r3
  404c6c:	4603      	mov	r3, r0
  404c6e:	e000      	b.n	404c72 <mem_test_unit_ready+0x22>
  404c70:	2301      	movs	r3, #1
  status =
  404c72:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
  404c74:	7bfb      	ldrb	r3, [r7, #15]
}
  404c76:	4618      	mov	r0, r3
  404c78:	3710      	adds	r7, #16
  404c7a:	46bd      	mov	sp, r7
  404c7c:	bd80      	pop	{r7, pc}
  404c7e:	bf00      	nop
  404c80:	0040efa8 	.word	0x0040efa8

00404c84 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  404c84:	b580      	push	{r7, lr}
  404c86:	b084      	sub	sp, #16
  404c88:	af00      	add	r7, sp, #0
  404c8a:	4603      	mov	r3, r0
  404c8c:	6039      	str	r1, [r7, #0]
  404c8e:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  404c90:	79fb      	ldrb	r3, [r7, #7]
  404c92:	2b01      	cmp	r3, #1
  404c94:	d809      	bhi.n	404caa <mem_read_capacity+0x26>
  404c96:	79fb      	ldrb	r3, [r7, #7]
  404c98:	4a07      	ldr	r2, [pc, #28]	; (404cb8 <mem_read_capacity+0x34>)
  404c9a:	015b      	lsls	r3, r3, #5
  404c9c:	4413      	add	r3, r2
  404c9e:	3304      	adds	r3, #4
  404ca0:	681b      	ldr	r3, [r3, #0]
  404ca2:	6838      	ldr	r0, [r7, #0]
  404ca4:	4798      	blx	r3
  404ca6:	4603      	mov	r3, r0
  404ca8:	e000      	b.n	404cac <mem_read_capacity+0x28>
  404caa:	2301      	movs	r3, #1
  status =
  404cac:	73fb      	strb	r3, [r7, #15]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
  404cae:	7bfb      	ldrb	r3, [r7, #15]
}
  404cb0:	4618      	mov	r0, r3
  404cb2:	3710      	adds	r7, #16
  404cb4:	46bd      	mov	sp, r7
  404cb6:	bd80      	pop	{r7, pc}
  404cb8:	0040efa8 	.word	0x0040efa8

00404cbc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
  404cbc:	b480      	push	{r7}
  404cbe:	b085      	sub	sp, #20
  404cc0:	af00      	add	r7, sp, #0
  404cc2:	4603      	mov	r3, r0
  404cc4:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
  404cc6:	79fb      	ldrb	r3, [r7, #7]
  404cc8:	2b01      	cmp	r3, #1
  404cca:	bf94      	ite	ls
  404ccc:	2301      	movls	r3, #1
  404cce:	2300      	movhi	r3, #0
  404cd0:	b2db      	uxtb	r3, r3
  sector_size =
  404cd2:	73fb      	strb	r3, [r7, #15]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
  404cd4:	7bfb      	ldrb	r3, [r7, #15]
}
  404cd6:	4618      	mov	r0, r3
  404cd8:	3714      	adds	r7, #20
  404cda:	46bd      	mov	sp, r7
  404cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ce0:	4770      	bx	lr
	...

00404ce4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
  404ce4:	b580      	push	{r7, lr}
  404ce6:	b084      	sub	sp, #16
  404ce8:	af00      	add	r7, sp, #0
  404cea:	4603      	mov	r3, r0
  404cec:	71fb      	strb	r3, [r7, #7]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  404cee:	79fb      	ldrb	r3, [r7, #7]
  404cf0:	2b01      	cmp	r3, #1
  404cf2:	d809      	bhi.n	404d08 <mem_wr_protect+0x24>
  404cf4:	79fb      	ldrb	r3, [r7, #7]
  404cf6:	4a09      	ldr	r2, [pc, #36]	; (404d1c <mem_wr_protect+0x38>)
  404cf8:	015b      	lsls	r3, r3, #5
  404cfa:	4413      	add	r3, r2
  404cfc:	330c      	adds	r3, #12
  404cfe:	681b      	ldr	r3, [r3, #0]
  404d00:	4798      	blx	r3
  404d02:	4603      	mov	r3, r0
  404d04:	2b00      	cmp	r3, #0
  404d06:	d001      	beq.n	404d0c <mem_wr_protect+0x28>
  404d08:	2301      	movs	r3, #1
  404d0a:	e000      	b.n	404d0e <mem_wr_protect+0x2a>
  404d0c:	2300      	movs	r3, #0
  wr_protect =
  404d0e:	73fb      	strb	r3, [r7, #15]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
  404d10:	7bfb      	ldrb	r3, [r7, #15]
}
  404d12:	4618      	mov	r0, r3
  404d14:	3710      	adds	r7, #16
  404d16:	46bd      	mov	sp, r7
  404d18:	bd80      	pop	{r7, pc}
  404d1a:	bf00      	nop
  404d1c:	0040efa8 	.word	0x0040efa8

00404d20 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
  404d20:	b580      	push	{r7, lr}
  404d22:	b086      	sub	sp, #24
  404d24:	af00      	add	r7, sp, #0
  404d26:	4603      	mov	r3, r0
  404d28:	60b9      	str	r1, [r7, #8]
  404d2a:	607a      	str	r2, [r7, #4]
  404d2c:	73fb      	strb	r3, [r7, #15]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  404d2e:	7bfb      	ldrb	r3, [r7, #15]
  404d30:	2b01      	cmp	r3, #1
  404d32:	d80a      	bhi.n	404d4a <memory_2_ram+0x2a>
  404d34:	7bfb      	ldrb	r3, [r7, #15]
  404d36:	4a08      	ldr	r2, [pc, #32]	; (404d58 <memory_2_ram+0x38>)
  404d38:	015b      	lsls	r3, r3, #5
  404d3a:	4413      	add	r3, r2
  404d3c:	3314      	adds	r3, #20
  404d3e:	681b      	ldr	r3, [r3, #0]
  404d40:	6879      	ldr	r1, [r7, #4]
  404d42:	68b8      	ldr	r0, [r7, #8]
  404d44:	4798      	blx	r3
  404d46:	4603      	mov	r3, r0
  404d48:	e000      	b.n	404d4c <memory_2_ram+0x2c>
  404d4a:	2301      	movs	r3, #1
  status =
  404d4c:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
  404d4e:	7dfb      	ldrb	r3, [r7, #23]
}
  404d50:	4618      	mov	r0, r3
  404d52:	3718      	adds	r7, #24
  404d54:	46bd      	mov	sp, r7
  404d56:	bd80      	pop	{r7, pc}
  404d58:	0040efa8 	.word	0x0040efa8

00404d5c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
  404d5c:	b580      	push	{r7, lr}
  404d5e:	b086      	sub	sp, #24
  404d60:	af00      	add	r7, sp, #0
  404d62:	4603      	mov	r3, r0
  404d64:	60b9      	str	r1, [r7, #8]
  404d66:	607a      	str	r2, [r7, #4]
  404d68:	73fb      	strb	r3, [r7, #15]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  404d6a:	7bfb      	ldrb	r3, [r7, #15]
  404d6c:	2b01      	cmp	r3, #1
  404d6e:	d80a      	bhi.n	404d86 <ram_2_memory+0x2a>
  404d70:	7bfb      	ldrb	r3, [r7, #15]
  404d72:	4a08      	ldr	r2, [pc, #32]	; (404d94 <ram_2_memory+0x38>)
  404d74:	015b      	lsls	r3, r3, #5
  404d76:	4413      	add	r3, r2
  404d78:	3318      	adds	r3, #24
  404d7a:	681b      	ldr	r3, [r3, #0]
  404d7c:	6879      	ldr	r1, [r7, #4]
  404d7e:	68b8      	ldr	r0, [r7, #8]
  404d80:	4798      	blx	r3
  404d82:	4603      	mov	r3, r0
  404d84:	e000      	b.n	404d88 <ram_2_memory+0x2c>
  404d86:	2301      	movs	r3, #1
  status =
  404d88:	75fb      	strb	r3, [r7, #23]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
  404d8a:	7dfb      	ldrb	r3, [r7, #23]
}
  404d8c:	4618      	mov	r0, r3
  404d8e:	3718      	adds	r7, #24
  404d90:	46bd      	mov	sp, r7
  404d92:	bd80      	pop	{r7, pc}
  404d94:	0040efa8 	.word	0x0040efa8

00404d98 <sysclk_enable_peripheral_clock>:
{
  404d98:	b580      	push	{r7, lr}
  404d9a:	b082      	sub	sp, #8
  404d9c:	af00      	add	r7, sp, #0
  404d9e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  404da0:	6878      	ldr	r0, [r7, #4]
  404da2:	4b03      	ldr	r3, [pc, #12]	; (404db0 <sysclk_enable_peripheral_clock+0x18>)
  404da4:	4798      	blx	r3
}
  404da6:	bf00      	nop
  404da8:	3708      	adds	r7, #8
  404daa:	46bd      	mov	sp, r7
  404dac:	bd80      	pop	{r7, pc}
  404dae:	bf00      	nop
  404db0:	00409ad5 	.word	0x00409ad5

00404db4 <ioport_init>:
{
  404db4:	b580      	push	{r7, lr}
  404db6:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  404db8:	2009      	movs	r0, #9
  404dba:	4b08      	ldr	r3, [pc, #32]	; (404ddc <ioport_init+0x28>)
  404dbc:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  404dbe:	200a      	movs	r0, #10
  404dc0:	4b06      	ldr	r3, [pc, #24]	; (404ddc <ioport_init+0x28>)
  404dc2:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  404dc4:	200b      	movs	r0, #11
  404dc6:	4b05      	ldr	r3, [pc, #20]	; (404ddc <ioport_init+0x28>)
  404dc8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  404dca:	200c      	movs	r0, #12
  404dcc:	4b03      	ldr	r3, [pc, #12]	; (404ddc <ioport_init+0x28>)
  404dce:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  404dd0:	200d      	movs	r0, #13
  404dd2:	4b02      	ldr	r3, [pc, #8]	; (404ddc <ioport_init+0x28>)
  404dd4:	4798      	blx	r3
}
  404dd6:	bf00      	nop
  404dd8:	bd80      	pop	{r7, pc}
  404dda:	bf00      	nop
  404ddc:	00404d99 	.word	0x00404d99

00404de0 <ioport_disable_pin>:
{
  404de0:	b480      	push	{r7}
  404de2:	b089      	sub	sp, #36	; 0x24
  404de4:	af00      	add	r7, sp, #0
  404de6:	6078      	str	r0, [r7, #4]
  404de8:	687b      	ldr	r3, [r7, #4]
  404dea:	61fb      	str	r3, [r7, #28]
  404dec:	69fb      	ldr	r3, [r7, #28]
  404dee:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  404df0:	69bb      	ldr	r3, [r7, #24]
  404df2:	095a      	lsrs	r2, r3, #5
  404df4:	69fb      	ldr	r3, [r7, #28]
  404df6:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  404df8:	697b      	ldr	r3, [r7, #20]
  404dfa:	f003 031f 	and.w	r3, r3, #31
  404dfe:	2101      	movs	r1, #1
  404e00:	fa01 f303 	lsl.w	r3, r1, r3
  404e04:	613a      	str	r2, [r7, #16]
  404e06:	60fb      	str	r3, [r7, #12]
  404e08:	693b      	ldr	r3, [r7, #16]
  404e0a:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404e0c:	68bb      	ldr	r3, [r7, #8]
  404e0e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404e12:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404e16:	025b      	lsls	r3, r3, #9
  404e18:	461a      	mov	r2, r3
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404e1a:	68fb      	ldr	r3, [r7, #12]
  404e1c:	6053      	str	r3, [r2, #4]
}
  404e1e:	bf00      	nop
  404e20:	3724      	adds	r7, #36	; 0x24
  404e22:	46bd      	mov	sp, r7
  404e24:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e28:	4770      	bx	lr

00404e2a <ioport_set_pin_mode>:
{
  404e2a:	b480      	push	{r7}
  404e2c:	b08d      	sub	sp, #52	; 0x34
  404e2e:	af00      	add	r7, sp, #0
  404e30:	6078      	str	r0, [r7, #4]
  404e32:	6039      	str	r1, [r7, #0]
  404e34:	687b      	ldr	r3, [r7, #4]
  404e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  404e38:	683b      	ldr	r3, [r7, #0]
  404e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  404e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404e3e:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  404e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404e42:	095a      	lsrs	r2, r3, #5
  404e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404e46:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  404e48:	6a3b      	ldr	r3, [r7, #32]
  404e4a:	f003 031f 	and.w	r3, r3, #31
  404e4e:	2101      	movs	r1, #1
  404e50:	fa01 f303 	lsl.w	r3, r1, r3
  404e54:	61fa      	str	r2, [r7, #28]
  404e56:	61bb      	str	r3, [r7, #24]
  404e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404e5a:	617b      	str	r3, [r7, #20]
  404e5c:	69fb      	ldr	r3, [r7, #28]
  404e5e:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404e60:	693b      	ldr	r3, [r7, #16]
  404e62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404e66:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404e6a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  404e6c:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  404e6e:	697b      	ldr	r3, [r7, #20]
  404e70:	f003 0308 	and.w	r3, r3, #8
  404e74:	2b00      	cmp	r3, #0
  404e76:	d003      	beq.n	404e80 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  404e78:	68fb      	ldr	r3, [r7, #12]
  404e7a:	69ba      	ldr	r2, [r7, #24]
  404e7c:	665a      	str	r2, [r3, #100]	; 0x64
  404e7e:	e002      	b.n	404e86 <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  404e80:	68fb      	ldr	r3, [r7, #12]
  404e82:	69ba      	ldr	r2, [r7, #24]
  404e84:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  404e86:	697b      	ldr	r3, [r7, #20]
  404e88:	f003 0310 	and.w	r3, r3, #16
  404e8c:	2b00      	cmp	r3, #0
  404e8e:	d004      	beq.n	404e9a <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  404e90:	68fb      	ldr	r3, [r7, #12]
  404e92:	69ba      	ldr	r2, [r7, #24]
  404e94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  404e98:	e003      	b.n	404ea2 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  404e9a:	68fb      	ldr	r3, [r7, #12]
  404e9c:	69ba      	ldr	r2, [r7, #24]
  404e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  404ea2:	697b      	ldr	r3, [r7, #20]
  404ea4:	f003 0320 	and.w	r3, r3, #32
  404ea8:	2b00      	cmp	r3, #0
  404eaa:	d003      	beq.n	404eb4 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  404eac:	68fb      	ldr	r3, [r7, #12]
  404eae:	69ba      	ldr	r2, [r7, #24]
  404eb0:	651a      	str	r2, [r3, #80]	; 0x50
  404eb2:	e002      	b.n	404eba <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  404eb4:	68fb      	ldr	r3, [r7, #12]
  404eb6:	69ba      	ldr	r2, [r7, #24]
  404eb8:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  404eba:	697b      	ldr	r3, [r7, #20]
  404ebc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  404ec0:	2b00      	cmp	r3, #0
  404ec2:	d003      	beq.n	404ecc <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  404ec4:	68fb      	ldr	r3, [r7, #12]
  404ec6:	69ba      	ldr	r2, [r7, #24]
  404ec8:	621a      	str	r2, [r3, #32]
  404eca:	e002      	b.n	404ed2 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  404ecc:	68fb      	ldr	r3, [r7, #12]
  404ece:	69ba      	ldr	r2, [r7, #24]
  404ed0:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  404ed2:	697b      	ldr	r3, [r7, #20]
  404ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404ed8:	2b00      	cmp	r3, #0
  404eda:	d004      	beq.n	404ee6 <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  404edc:	68fb      	ldr	r3, [r7, #12]
  404ede:	69ba      	ldr	r2, [r7, #24]
  404ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  404ee4:	e003      	b.n	404eee <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  404ee6:	68fb      	ldr	r3, [r7, #12]
  404ee8:	69ba      	ldr	r2, [r7, #24]
  404eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  404eee:	697b      	ldr	r3, [r7, #20]
  404ef0:	f003 0301 	and.w	r3, r3, #1
  404ef4:	2b00      	cmp	r3, #0
  404ef6:	d006      	beq.n	404f06 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  404ef8:	68fb      	ldr	r3, [r7, #12]
  404efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  404efc:	69bb      	ldr	r3, [r7, #24]
  404efe:	431a      	orrs	r2, r3
  404f00:	68fb      	ldr	r3, [r7, #12]
  404f02:	671a      	str	r2, [r3, #112]	; 0x70
  404f04:	e006      	b.n	404f14 <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  404f06:	68fb      	ldr	r3, [r7, #12]
  404f08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  404f0a:	69bb      	ldr	r3, [r7, #24]
  404f0c:	43db      	mvns	r3, r3
  404f0e:	401a      	ands	r2, r3
  404f10:	68fb      	ldr	r3, [r7, #12]
  404f12:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  404f14:	697b      	ldr	r3, [r7, #20]
  404f16:	f003 0302 	and.w	r3, r3, #2
  404f1a:	2b00      	cmp	r3, #0
  404f1c:	d006      	beq.n	404f2c <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  404f1e:	68fb      	ldr	r3, [r7, #12]
  404f20:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404f22:	69bb      	ldr	r3, [r7, #24]
  404f24:	431a      	orrs	r2, r3
  404f26:	68fb      	ldr	r3, [r7, #12]
  404f28:	675a      	str	r2, [r3, #116]	; 0x74
}
  404f2a:	e006      	b.n	404f3a <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  404f2c:	68fb      	ldr	r3, [r7, #12]
  404f2e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404f30:	69bb      	ldr	r3, [r7, #24]
  404f32:	43db      	mvns	r3, r3
  404f34:	401a      	ands	r2, r3
  404f36:	68fb      	ldr	r3, [r7, #12]
  404f38:	675a      	str	r2, [r3, #116]	; 0x74
  404f3a:	bf00      	nop
  404f3c:	3734      	adds	r7, #52	; 0x34
  404f3e:	46bd      	mov	sp, r7
  404f40:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f44:	4770      	bx	lr

00404f46 <ioport_set_pin_dir>:
{
  404f46:	b480      	push	{r7}
  404f48:	b08d      	sub	sp, #52	; 0x34
  404f4a:	af00      	add	r7, sp, #0
  404f4c:	6078      	str	r0, [r7, #4]
  404f4e:	460b      	mov	r3, r1
  404f50:	70fb      	strb	r3, [r7, #3]
  404f52:	687b      	ldr	r3, [r7, #4]
  404f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  404f56:	78fb      	ldrb	r3, [r7, #3]
  404f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  404f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404f5e:	627b      	str	r3, [r7, #36]	; 0x24
  404f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404f62:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  404f64:	6a3b      	ldr	r3, [r7, #32]
  404f66:	095b      	lsrs	r3, r3, #5
  404f68:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404f6a:	69fb      	ldr	r3, [r7, #28]
  404f6c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404f70:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404f74:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  404f76:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  404f78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  404f7c:	2b01      	cmp	r3, #1
  404f7e:	d109      	bne.n	404f94 <ioport_set_pin_dir+0x4e>
  404f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404f82:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  404f84:	697b      	ldr	r3, [r7, #20]
  404f86:	f003 031f 	and.w	r3, r3, #31
  404f8a:	2201      	movs	r2, #1
  404f8c:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404f8e:	69bb      	ldr	r3, [r7, #24]
  404f90:	611a      	str	r2, [r3, #16]
  404f92:	e00c      	b.n	404fae <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  404f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  404f98:	2b00      	cmp	r3, #0
  404f9a:	d108      	bne.n	404fae <ioport_set_pin_dir+0x68>
  404f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404f9e:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  404fa0:	693b      	ldr	r3, [r7, #16]
  404fa2:	f003 031f 	and.w	r3, r3, #31
  404fa6:	2201      	movs	r2, #1
  404fa8:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404faa:	69bb      	ldr	r3, [r7, #24]
  404fac:	615a      	str	r2, [r3, #20]
  404fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404fb0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  404fb2:	68fb      	ldr	r3, [r7, #12]
  404fb4:	f003 031f 	and.w	r3, r3, #31
  404fb8:	2201      	movs	r2, #1
  404fba:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404fbc:	69bb      	ldr	r3, [r7, #24]
  404fbe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  404fc2:	bf00      	nop
  404fc4:	3734      	adds	r7, #52	; 0x34
  404fc6:	46bd      	mov	sp, r7
  404fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fcc:	4770      	bx	lr

00404fce <ioport_set_pin_level>:
{
  404fce:	b480      	push	{r7}
  404fd0:	b08b      	sub	sp, #44	; 0x2c
  404fd2:	af00      	add	r7, sp, #0
  404fd4:	6078      	str	r0, [r7, #4]
  404fd6:	460b      	mov	r3, r1
  404fd8:	70fb      	strb	r3, [r7, #3]
  404fda:	687b      	ldr	r3, [r7, #4]
  404fdc:	627b      	str	r3, [r7, #36]	; 0x24
  404fde:	78fb      	ldrb	r3, [r7, #3]
  404fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  404fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404fe6:	61fb      	str	r3, [r7, #28]
  404fe8:	69fb      	ldr	r3, [r7, #28]
  404fea:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  404fec:	69bb      	ldr	r3, [r7, #24]
  404fee:	095b      	lsrs	r3, r3, #5
  404ff0:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404ff2:	697b      	ldr	r3, [r7, #20]
  404ff4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404ff8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404ffc:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  404ffe:	613b      	str	r3, [r7, #16]
	if (level) {
  405000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  405004:	2b00      	cmp	r3, #0
  405006:	d009      	beq.n	40501c <ioport_set_pin_level+0x4e>
  405008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40500a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40500c:	68fb      	ldr	r3, [r7, #12]
  40500e:	f003 031f 	and.w	r3, r3, #31
  405012:	2201      	movs	r2, #1
  405014:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  405016:	693b      	ldr	r3, [r7, #16]
  405018:	631a      	str	r2, [r3, #48]	; 0x30
}
  40501a:	e008      	b.n	40502e <ioport_set_pin_level+0x60>
  40501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40501e:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  405020:	68bb      	ldr	r3, [r7, #8]
  405022:	f003 031f 	and.w	r3, r3, #31
  405026:	2201      	movs	r2, #1
  405028:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40502a:	693b      	ldr	r3, [r7, #16]
  40502c:	635a      	str	r2, [r3, #52]	; 0x34
  40502e:	bf00      	nop
  405030:	372c      	adds	r7, #44	; 0x2c
  405032:	46bd      	mov	sp, r7
  405034:	f85d 7b04 	ldr.w	r7, [sp], #4
  405038:	4770      	bx	lr
	...

0040503c <ioport_set_pin_sense_mode>:
{
  40503c:	b480      	push	{r7}
  40503e:	b08d      	sub	sp, #52	; 0x34
  405040:	af00      	add	r7, sp, #0
  405042:	6078      	str	r0, [r7, #4]
  405044:	460b      	mov	r3, r1
  405046:	70fb      	strb	r3, [r7, #3]
  405048:	687b      	ldr	r3, [r7, #4]
  40504a:	62fb      	str	r3, [r7, #44]	; 0x2c
  40504c:	78fb      	ldrb	r3, [r7, #3]
  40504e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  405052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  405054:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  405056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405058:	095a      	lsrs	r2, r3, #5
  40505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40505c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40505e:	6a3b      	ldr	r3, [r7, #32]
  405060:	f003 031f 	and.w	r3, r3, #31
  405064:	2101      	movs	r1, #1
  405066:	fa01 f303 	lsl.w	r3, r1, r3
  40506a:	61fa      	str	r2, [r7, #28]
  40506c:	61bb      	str	r3, [r7, #24]
  40506e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  405072:	75fb      	strb	r3, [r7, #23]
  405074:	69fb      	ldr	r3, [r7, #28]
  405076:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  405078:	693b      	ldr	r3, [r7, #16]
  40507a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40507e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  405082:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  405084:	60fb      	str	r3, [r7, #12]
	switch(pin_sense) {
  405086:	7dfb      	ldrb	r3, [r7, #23]
  405088:	3b01      	subs	r3, #1
  40508a:	2b03      	cmp	r3, #3
  40508c:	d82e      	bhi.n	4050ec <ioport_set_pin_sense_mode+0xb0>
  40508e:	a201      	add	r2, pc, #4	; (adr r2, 405094 <ioport_set_pin_sense_mode+0x58>)
  405090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405094:	004050c9 	.word	0x004050c9
  405098:	004050db 	.word	0x004050db
  40509c:	004050a5 	.word	0x004050a5
  4050a0:	004050b7 	.word	0x004050b7
		base->PIO_LSR = mask;
  4050a4:	68fb      	ldr	r3, [r7, #12]
  4050a6:	69ba      	ldr	r2, [r7, #24]
  4050a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  4050ac:	68fb      	ldr	r3, [r7, #12]
  4050ae:	69ba      	ldr	r2, [r7, #24]
  4050b0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4050b4:	e01f      	b.n	4050f6 <ioport_set_pin_sense_mode+0xba>
		base->PIO_LSR = mask;
  4050b6:	68fb      	ldr	r3, [r7, #12]
  4050b8:	69ba      	ldr	r2, [r7, #24]
  4050ba:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4050be:	68fb      	ldr	r3, [r7, #12]
  4050c0:	69ba      	ldr	r2, [r7, #24]
  4050c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4050c6:	e016      	b.n	4050f6 <ioport_set_pin_sense_mode+0xba>
		base->PIO_ESR = mask;
  4050c8:	68fb      	ldr	r3, [r7, #12]
  4050ca:	69ba      	ldr	r2, [r7, #24]
  4050cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4050d0:	68fb      	ldr	r3, [r7, #12]
  4050d2:	69ba      	ldr	r2, [r7, #24]
  4050d4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4050d8:	e00d      	b.n	4050f6 <ioport_set_pin_sense_mode+0xba>
		base->PIO_ESR = mask;
  4050da:	68fb      	ldr	r3, [r7, #12]
  4050dc:	69ba      	ldr	r2, [r7, #24]
  4050de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4050e2:	68fb      	ldr	r3, [r7, #12]
  4050e4:	69ba      	ldr	r2, [r7, #24]
  4050e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4050ea:	e004      	b.n	4050f6 <ioport_set_pin_sense_mode+0xba>
		base->PIO_AIMDR = mask;
  4050ec:	68fb      	ldr	r3, [r7, #12]
  4050ee:	69ba      	ldr	r2, [r7, #24]
  4050f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  4050f4:	e003      	b.n	4050fe <ioport_set_pin_sense_mode+0xc2>
	base->PIO_AIMER = mask;
  4050f6:	68fb      	ldr	r3, [r7, #12]
  4050f8:	69ba      	ldr	r2, [r7, #24]
  4050fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4050fe:	bf00      	nop
  405100:	3734      	adds	r7, #52	; 0x34
  405102:	46bd      	mov	sp, r7
  405104:	f85d 7b04 	ldr.w	r7, [sp], #4
  405108:	4770      	bx	lr
  40510a:	bf00      	nop

0040510c <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  40510c:	b580      	push	{r7, lr}
  40510e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  405110:	4b34      	ldr	r3, [pc, #208]	; (4051e4 <board_init+0xd8>)
  405112:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405116:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  405118:	4b33      	ldr	r3, [pc, #204]	; (4051e8 <board_init+0xdc>)
  40511a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  40511c:	2101      	movs	r1, #1
  40511e:	2076      	movs	r0, #118	; 0x76
  405120:	4b32      	ldr	r3, [pc, #200]	; (4051ec <board_init+0xe0>)
  405122:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  405124:	2101      	movs	r1, #1
  405126:	2076      	movs	r0, #118	; 0x76
  405128:	4b31      	ldr	r3, [pc, #196]	; (4051f0 <board_init+0xe4>)
  40512a:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  40512c:	2100      	movs	r1, #0
  40512e:	2002      	movs	r0, #2
  405130:	4b2e      	ldr	r3, [pc, #184]	; (4051ec <board_init+0xe0>)
  405132:	4798      	blx	r3
  405134:	2188      	movs	r1, #136	; 0x88
  405136:	2002      	movs	r0, #2
  405138:	4b2e      	ldr	r3, [pc, #184]	; (4051f4 <board_init+0xe8>)
  40513a:	4798      	blx	r3
  40513c:	2102      	movs	r1, #2
  40513e:	2002      	movs	r0, #2
  405140:	4b2d      	ldr	r3, [pc, #180]	; (4051f8 <board_init+0xec>)
  405142:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
#endif

#ifdef CONF_BOARD_CAN
	/* Configure the CAN1 TX and RX pin. */
	ioport_set_pin_peripheral_mode(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
  405144:	2102      	movs	r1, #2
  405146:	204c      	movs	r0, #76	; 0x4c
  405148:	4b2a      	ldr	r3, [pc, #168]	; (4051f4 <board_init+0xe8>)
  40514a:	4798      	blx	r3
  40514c:	204c      	movs	r0, #76	; 0x4c
  40514e:	4b2b      	ldr	r3, [pc, #172]	; (4051fc <board_init+0xf0>)
  405150:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
  405152:	2102      	movs	r1, #2
  405154:	204f      	movs	r0, #79	; 0x4f
  405156:	4b27      	ldr	r3, [pc, #156]	; (4051f4 <board_init+0xe8>)
  405158:	4798      	blx	r3
  40515a:	204f      	movs	r0, #79	; 0x4f
  40515c:	4b27      	ldr	r3, [pc, #156]	; (4051fc <board_init+0xf0>)
  40515e:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	ioport_set_pin_dir(PIN_CAN1_TR_RS_IDX, IOPORT_DIR_OUTPUT);
  405160:	2101      	movs	r1, #1
  405162:	2082      	movs	r0, #130	; 0x82
  405164:	4b21      	ldr	r3, [pc, #132]	; (4051ec <board_init+0xe0>)
  405166:	4798      	blx	r3
	ioport_set_pin_dir(PIN_CAN1_TR_EN_IDX, IOPORT_DIR_OUTPUT);
  405168:	2101      	movs	r1, #1
  40516a:	2083      	movs	r0, #131	; 0x83
  40516c:	4b1f      	ldr	r3, [pc, #124]	; (4051ec <board_init+0xe0>)
  40516e:	4798      	blx	r3
#  endif
#endif

#if defined (CONF_BOARD_SD_MMC_HSMCI)
	/* Configure HSMCI pins */
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
  405170:	2102      	movs	r1, #2
  405172:	201c      	movs	r0, #28
  405174:	4b1f      	ldr	r3, [pc, #124]	; (4051f4 <board_init+0xe8>)
  405176:	4798      	blx	r3
  405178:	201c      	movs	r0, #28
  40517a:	4b20      	ldr	r3, [pc, #128]	; (4051fc <board_init+0xf0>)
  40517c:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
  40517e:	2102      	movs	r1, #2
  405180:	201d      	movs	r0, #29
  405182:	4b1c      	ldr	r3, [pc, #112]	; (4051f4 <board_init+0xe8>)
  405184:	4798      	blx	r3
  405186:	201d      	movs	r0, #29
  405188:	4b1c      	ldr	r3, [pc, #112]	; (4051fc <board_init+0xf0>)
  40518a:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
  40518c:	2102      	movs	r1, #2
  40518e:	201e      	movs	r0, #30
  405190:	4b18      	ldr	r3, [pc, #96]	; (4051f4 <board_init+0xe8>)
  405192:	4798      	blx	r3
  405194:	201e      	movs	r0, #30
  405196:	4b19      	ldr	r3, [pc, #100]	; (4051fc <board_init+0xf0>)
  405198:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
  40519a:	2102      	movs	r1, #2
  40519c:	201f      	movs	r0, #31
  40519e:	4b15      	ldr	r3, [pc, #84]	; (4051f4 <board_init+0xe8>)
  4051a0:	4798      	blx	r3
  4051a2:	201f      	movs	r0, #31
  4051a4:	4b15      	ldr	r3, [pc, #84]	; (4051fc <board_init+0xf0>)
  4051a6:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
  4051a8:	2102      	movs	r1, #2
  4051aa:	201a      	movs	r0, #26
  4051ac:	4b11      	ldr	r3, [pc, #68]	; (4051f4 <board_init+0xe8>)
  4051ae:	4798      	blx	r3
  4051b0:	201a      	movs	r0, #26
  4051b2:	4b12      	ldr	r3, [pc, #72]	; (4051fc <board_init+0xf0>)
  4051b4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
  4051b6:	2102      	movs	r1, #2
  4051b8:	201b      	movs	r0, #27
  4051ba:	4b0e      	ldr	r3, [pc, #56]	; (4051f4 <board_init+0xe8>)
  4051bc:	4798      	blx	r3
  4051be:	201b      	movs	r0, #27
  4051c0:	4b0e      	ldr	r3, [pc, #56]	; (4051fc <board_init+0xf0>)
  4051c2:	4798      	blx	r3
	ioport_set_pin_dir(AT86RFX_SLP_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(AT86RFX_SLP_PIN, IOPORT_PIN_LEVEL_HIGH);
#endif  

#if (defined(CONF_BOARD_TWI0) || defined(CONF_BOARD_EDBG_TWI))
	ioport_set_pin_peripheral_mode(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4051c4:	2100      	movs	r1, #0
  4051c6:	2003      	movs	r0, #3
  4051c8:	4b0a      	ldr	r3, [pc, #40]	; (4051f4 <board_init+0xe8>)
  4051ca:	4798      	blx	r3
  4051cc:	2003      	movs	r0, #3
  4051ce:	4b0b      	ldr	r3, [pc, #44]	; (4051fc <board_init+0xf0>)
  4051d0:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4051d2:	2100      	movs	r1, #0
  4051d4:	2004      	movs	r0, #4
  4051d6:	4b07      	ldr	r3, [pc, #28]	; (4051f4 <board_init+0xe8>)
  4051d8:	4798      	blx	r3
  4051da:	2004      	movs	r0, #4
  4051dc:	4b07      	ldr	r3, [pc, #28]	; (4051fc <board_init+0xf0>)
  4051de:	4798      	blx	r3
#endif

}
  4051e0:	bf00      	nop
  4051e2:	bd80      	pop	{r7, pc}
  4051e4:	400e1850 	.word	0x400e1850
  4051e8:	00404db5 	.word	0x00404db5
  4051ec:	00404f47 	.word	0x00404f47
  4051f0:	00404fcf 	.word	0x00404fcf
  4051f4:	00404e2b 	.word	0x00404e2b
  4051f8:	0040503d 	.word	0x0040503d
  4051fc:	00404de1 	.word	0x00404de1

00405200 <osc_get_rate>:
{
  405200:	b480      	push	{r7}
  405202:	b083      	sub	sp, #12
  405204:	af00      	add	r7, sp, #0
  405206:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405208:	687b      	ldr	r3, [r7, #4]
  40520a:	2b07      	cmp	r3, #7
  40520c:	d825      	bhi.n	40525a <osc_get_rate+0x5a>
  40520e:	a201      	add	r2, pc, #4	; (adr r2, 405214 <osc_get_rate+0x14>)
  405210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405214:	00405235 	.word	0x00405235
  405218:	0040523b 	.word	0x0040523b
  40521c:	00405241 	.word	0x00405241
  405220:	00405247 	.word	0x00405247
  405224:	0040524b 	.word	0x0040524b
  405228:	0040524f 	.word	0x0040524f
  40522c:	00405253 	.word	0x00405253
  405230:	00405257 	.word	0x00405257
		return OSC_SLCK_32K_RC_HZ;
  405234:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  405238:	e010      	b.n	40525c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40523a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40523e:	e00d      	b.n	40525c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  405240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  405244:	e00a      	b.n	40525c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  405246:	4b08      	ldr	r3, [pc, #32]	; (405268 <osc_get_rate+0x68>)
  405248:	e008      	b.n	40525c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40524a:	4b08      	ldr	r3, [pc, #32]	; (40526c <osc_get_rate+0x6c>)
  40524c:	e006      	b.n	40525c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40524e:	4b08      	ldr	r3, [pc, #32]	; (405270 <osc_get_rate+0x70>)
  405250:	e004      	b.n	40525c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  405252:	4b07      	ldr	r3, [pc, #28]	; (405270 <osc_get_rate+0x70>)
  405254:	e002      	b.n	40525c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  405256:	4b06      	ldr	r3, [pc, #24]	; (405270 <osc_get_rate+0x70>)
  405258:	e000      	b.n	40525c <osc_get_rate+0x5c>
	return 0;
  40525a:	2300      	movs	r3, #0
}
  40525c:	4618      	mov	r0, r3
  40525e:	370c      	adds	r7, #12
  405260:	46bd      	mov	sp, r7
  405262:	f85d 7b04 	ldr.w	r7, [sp], #4
  405266:	4770      	bx	lr
  405268:	003d0900 	.word	0x003d0900
  40526c:	007a1200 	.word	0x007a1200
  405270:	00b71b00 	.word	0x00b71b00

00405274 <sysclk_get_main_hz>:
{
  405274:	b580      	push	{r7, lr}
  405276:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  405278:	2006      	movs	r0, #6
  40527a:	4b03      	ldr	r3, [pc, #12]	; (405288 <sysclk_get_main_hz+0x14>)
  40527c:	4798      	blx	r3
  40527e:	4603      	mov	r3, r0
  405280:	011b      	lsls	r3, r3, #4
}
  405282:	4618      	mov	r0, r3
  405284:	bd80      	pop	{r7, pc}
  405286:	bf00      	nop
  405288:	00405201 	.word	0x00405201

0040528c <sysclk_get_peripheral_hz>:
{
  40528c:	b580      	push	{r7, lr}
  40528e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  405290:	4b02      	ldr	r3, [pc, #8]	; (40529c <sysclk_get_peripheral_hz+0x10>)
  405292:	4798      	blx	r3
  405294:	4603      	mov	r3, r0
  405296:	085b      	lsrs	r3, r3, #1
}
  405298:	4618      	mov	r0, r3
  40529a:	bd80      	pop	{r7, pc}
  40529c:	00405275 	.word	0x00405275

004052a0 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  4052a0:	b480      	push	{r7}
  4052a2:	b087      	sub	sp, #28
  4052a4:	af00      	add	r7, sp, #0
	uint32_t mr = HSMCI->HSMCI_MR;
  4052a6:	4b15      	ldr	r3, [pc, #84]	; (4052fc <hsmci_reset+0x5c>)
  4052a8:	685b      	ldr	r3, [r3, #4]
  4052aa:	617b      	str	r3, [r7, #20]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  4052ac:	4b13      	ldr	r3, [pc, #76]	; (4052fc <hsmci_reset+0x5c>)
  4052ae:	689b      	ldr	r3, [r3, #8]
  4052b0:	613b      	str	r3, [r7, #16]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  4052b2:	4b12      	ldr	r3, [pc, #72]	; (4052fc <hsmci_reset+0x5c>)
  4052b4:	68db      	ldr	r3, [r3, #12]
  4052b6:	60fb      	str	r3, [r7, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  4052b8:	4b10      	ldr	r3, [pc, #64]	; (4052fc <hsmci_reset+0x5c>)
  4052ba:	69db      	ldr	r3, [r3, #28]
  4052bc:	60bb      	str	r3, [r7, #8]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  4052be:	4b0f      	ldr	r3, [pc, #60]	; (4052fc <hsmci_reset+0x5c>)
  4052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  4052c2:	607b      	str	r3, [r7, #4]
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  4052c4:	4b0d      	ldr	r3, [pc, #52]	; (4052fc <hsmci_reset+0x5c>)
  4052c6:	2280      	movs	r2, #128	; 0x80
  4052c8:	601a      	str	r2, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  4052ca:	4a0c      	ldr	r2, [pc, #48]	; (4052fc <hsmci_reset+0x5c>)
  4052cc:	697b      	ldr	r3, [r7, #20]
  4052ce:	6053      	str	r3, [r2, #4]
	HSMCI->HSMCI_DTOR = dtor;
  4052d0:	4a0a      	ldr	r2, [pc, #40]	; (4052fc <hsmci_reset+0x5c>)
  4052d2:	693b      	ldr	r3, [r7, #16]
  4052d4:	6093      	str	r3, [r2, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  4052d6:	4a09      	ldr	r2, [pc, #36]	; (4052fc <hsmci_reset+0x5c>)
  4052d8:	68fb      	ldr	r3, [r7, #12]
  4052da:	60d3      	str	r3, [r2, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  4052dc:	4a07      	ldr	r2, [pc, #28]	; (4052fc <hsmci_reset+0x5c>)
  4052de:	68bb      	ldr	r3, [r7, #8]
  4052e0:	61d3      	str	r3, [r2, #28]
	HSMCI->HSMCI_CFG = cfg;
  4052e2:	4a06      	ldr	r2, [pc, #24]	; (4052fc <hsmci_reset+0x5c>)
  4052e4:	687b      	ldr	r3, [r7, #4]
  4052e6:	6553      	str	r3, [r2, #84]	; 0x54
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  4052e8:	4b04      	ldr	r3, [pc, #16]	; (4052fc <hsmci_reset+0x5c>)
  4052ea:	2205      	movs	r2, #5
  4052ec:	601a      	str	r2, [r3, #0]
}
  4052ee:	bf00      	nop
  4052f0:	371c      	adds	r7, #28
  4052f2:	46bd      	mov	sp, r7
  4052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4052f8:	4770      	bx	lr
  4052fa:	bf00      	nop
  4052fc:	40080000 	.word	0x40080000

00405300 <hsmci_set_speed>:
 *
 * \param speed    HSMCI clock speed in Hz.
 * \param mck      MCK clock speed in Hz.
 */
static void hsmci_set_speed(uint32_t speed, uint32_t mck)
{
  405300:	b480      	push	{r7}
  405302:	b087      	sub	sp, #28
  405304:	af00      	add	r7, sp, #0
  405306:	6078      	str	r0, [r7, #4]
  405308:	6039      	str	r1, [r7, #0]
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	uint32_t clkdiv = 0;
  40530a:	2300      	movs	r3, #0
  40530c:	617b      	str	r3, [r7, #20]
	uint32_t clkodd = 0;
  40530e:	2300      	movs	r3, #0
  405310:	613b      	str	r3, [r7, #16]
	// clock divider, represent (((clkdiv << 1) + clkodd) + 2)
	uint32_t div = 0;
  405312:	2300      	movs	r3, #0
  405314:	60fb      	str	r3, [r7, #12]

	// Speed = MCK clock / (((clkdiv << 1) + clkodd) + 2)
	if ((speed * 2) < mck) {
  405316:	687b      	ldr	r3, [r7, #4]
  405318:	005a      	lsls	r2, r3, #1
  40531a:	683b      	ldr	r3, [r7, #0]
  40531c:	429a      	cmp	r2, r3
  40531e:	d21a      	bcs.n	405356 <hsmci_set_speed+0x56>
		div = (mck / speed) - 2;
  405320:	683a      	ldr	r2, [r7, #0]
  405322:	687b      	ldr	r3, [r7, #4]
  405324:	fbb2 f3f3 	udiv	r3, r2, r3
  405328:	3b02      	subs	r3, #2
  40532a:	60fb      	str	r3, [r7, #12]
		if (mck % speed) {
  40532c:	683b      	ldr	r3, [r7, #0]
  40532e:	687a      	ldr	r2, [r7, #4]
  405330:	fbb3 f2f2 	udiv	r2, r3, r2
  405334:	6879      	ldr	r1, [r7, #4]
  405336:	fb01 f202 	mul.w	r2, r1, r2
  40533a:	1a9b      	subs	r3, r3, r2
  40533c:	2b00      	cmp	r3, #0
  40533e:	d002      	beq.n	405346 <hsmci_set_speed+0x46>
			// Ensure that the card speed not be higher than expected.
			div++;
  405340:	68fb      	ldr	r3, [r7, #12]
  405342:	3301      	adds	r3, #1
  405344:	60fb      	str	r3, [r7, #12]
		}
		clkdiv = div >> 1;
  405346:	68fb      	ldr	r3, [r7, #12]
  405348:	085b      	lsrs	r3, r3, #1
  40534a:	617b      	str	r3, [r7, #20]
		// clkodd is the last significant bit of the clock divider (div).
		clkodd = div % 2;
  40534c:	68fb      	ldr	r3, [r7, #12]
  40534e:	f003 0301 	and.w	r3, r3, #1
  405352:	613b      	str	r3, [r7, #16]
  405354:	e003      	b.n	40535e <hsmci_set_speed+0x5e>
	} else {
		clkdiv = 0;
  405356:	2300      	movs	r3, #0
  405358:	617b      	str	r3, [r7, #20]
		clkodd = 0;
  40535a:	2300      	movs	r3, #0
  40535c:	613b      	str	r3, [r7, #16]
	}

	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40535e:	4a11      	ldr	r2, [pc, #68]	; (4053a4 <hsmci_set_speed+0xa4>)
  405360:	4b10      	ldr	r3, [pc, #64]	; (4053a4 <hsmci_set_speed+0xa4>)
  405362:	685b      	ldr	r3, [r3, #4]
  405364:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  405368:	6053      	str	r3, [r2, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  40536a:	490e      	ldr	r1, [pc, #56]	; (4053a4 <hsmci_set_speed+0xa4>)
  40536c:	4b0d      	ldr	r3, [pc, #52]	; (4053a4 <hsmci_set_speed+0xa4>)
  40536e:	685a      	ldr	r2, [r3, #4]
  405370:	697b      	ldr	r3, [r7, #20]
  405372:	b2db      	uxtb	r3, r3
  405374:	4313      	orrs	r3, r2
  405376:	604b      	str	r3, [r1, #4]
	if (clkodd) {
  405378:	693b      	ldr	r3, [r7, #16]
  40537a:	2b00      	cmp	r3, #0
  40537c:	d006      	beq.n	40538c <hsmci_set_speed+0x8c>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  40537e:	4a09      	ldr	r2, [pc, #36]	; (4053a4 <hsmci_set_speed+0xa4>)
  405380:	4b08      	ldr	r3, [pc, #32]	; (4053a4 <hsmci_set_speed+0xa4>)
  405382:	685b      	ldr	r3, [r3, #4]
  405384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  405388:	6053      	str	r3, [r2, #4]
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
#endif

}
  40538a:	e005      	b.n	405398 <hsmci_set_speed+0x98>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  40538c:	4a05      	ldr	r2, [pc, #20]	; (4053a4 <hsmci_set_speed+0xa4>)
  40538e:	4b05      	ldr	r3, [pc, #20]	; (4053a4 <hsmci_set_speed+0xa4>)
  405390:	685b      	ldr	r3, [r3, #4]
  405392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  405396:	6053      	str	r3, [r2, #4]
}
  405398:	bf00      	nop
  40539a:	371c      	adds	r7, #28
  40539c:	46bd      	mov	sp, r7
  40539e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053a2:	4770      	bx	lr
  4053a4:	40080000 	.word	0x40080000

004053a8 <hsmci_wait_busy>:
/** \brief Wait the end of busy signal on data line
 *
 * \return true if success, otherwise false
 */
static bool hsmci_wait_busy(void)
{
  4053a8:	b580      	push	{r7, lr}
  4053aa:	b082      	sub	sp, #8
  4053ac:	af00      	add	r7, sp, #0
	uint32_t busy_wait = 0xFFFFFFFF;
  4053ae:	f04f 33ff 	mov.w	r3, #4294967295
  4053b2:	607b      	str	r3, [r7, #4]
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  4053b4:	4b0d      	ldr	r3, [pc, #52]	; (4053ec <hsmci_wait_busy+0x44>)
  4053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4053b8:	603b      	str	r3, [r7, #0]
		if (busy_wait-- == 0) {
  4053ba:	687b      	ldr	r3, [r7, #4]
  4053bc:	1e5a      	subs	r2, r3, #1
  4053be:	607a      	str	r2, [r7, #4]
  4053c0:	2b00      	cmp	r3, #0
  4053c2:	d103      	bne.n	4053cc <hsmci_wait_busy+0x24>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  4053c4:	4b0a      	ldr	r3, [pc, #40]	; (4053f0 <hsmci_wait_busy+0x48>)
  4053c6:	4798      	blx	r3
			return false;
  4053c8:	2300      	movs	r3, #0
  4053ca:	e00a      	b.n	4053e2 <hsmci_wait_busy+0x3a>
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  4053cc:	683b      	ldr	r3, [r7, #0]
  4053ce:	f003 0320 	and.w	r3, r3, #32
  4053d2:	2b00      	cmp	r3, #0
  4053d4:	d0ee      	beq.n	4053b4 <hsmci_wait_busy+0xc>
  4053d6:	683b      	ldr	r3, [r7, #0]
  4053d8:	f003 0310 	and.w	r3, r3, #16
  4053dc:	2b00      	cmp	r3, #0
  4053de:	d1e9      	bne.n	4053b4 <hsmci_wait_busy+0xc>
	return true;
  4053e0:	2301      	movs	r3, #1
}
  4053e2:	4618      	mov	r0, r3
  4053e4:	3708      	adds	r7, #8
  4053e6:	46bd      	mov	sp, r7
  4053e8:	bd80      	pop	{r7, pc}
  4053ea:	bf00      	nop
  4053ec:	40080000 	.word	0x40080000
  4053f0:	004052a1 	.word	0x004052a1

004053f4 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  4053f4:	b580      	push	{r7, lr}
  4053f6:	b086      	sub	sp, #24
  4053f8:	af00      	add	r7, sp, #0
  4053fa:	60f8      	str	r0, [r7, #12]
  4053fc:	60b9      	str	r1, [r7, #8]
  4053fe:	607a      	str	r2, [r7, #4]
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  405400:	68bb      	ldr	r3, [r7, #8]
  405402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  405406:	68fa      	ldr	r2, [r7, #12]
  405408:	4313      	orrs	r3, r2
  40540a:	60fb      	str	r3, [r7, #12]
	if (cmd & SDMMC_RESP_PRESENT) {
  40540c:	68bb      	ldr	r3, [r7, #8]
  40540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  405412:	2b00      	cmp	r3, #0
  405414:	d01b      	beq.n	40544e <hsmci_send_cmd_execute+0x5a>
		cmdr |= HSMCI_CMDR_MAXLAT;
  405416:	68fb      	ldr	r3, [r7, #12]
  405418:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40541c:	60fb      	str	r3, [r7, #12]
		if (cmd & SDMMC_RESP_136) {
  40541e:	68bb      	ldr	r3, [r7, #8]
  405420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  405424:	2b00      	cmp	r3, #0
  405426:	d004      	beq.n	405432 <hsmci_send_cmd_execute+0x3e>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  405428:	68fb      	ldr	r3, [r7, #12]
  40542a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40542e:	60fb      	str	r3, [r7, #12]
  405430:	e00d      	b.n	40544e <hsmci_send_cmd_execute+0x5a>
		} else if (cmd & SDMMC_RESP_BUSY) {
  405432:	68bb      	ldr	r3, [r7, #8]
  405434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  405438:	2b00      	cmp	r3, #0
  40543a:	d004      	beq.n	405446 <hsmci_send_cmd_execute+0x52>
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  40543c:	68fb      	ldr	r3, [r7, #12]
  40543e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  405442:	60fb      	str	r3, [r7, #12]
  405444:	e003      	b.n	40544e <hsmci_send_cmd_execute+0x5a>
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  405446:	68fb      	ldr	r3, [r7, #12]
  405448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40544c:	60fb      	str	r3, [r7, #12]
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  40544e:	68bb      	ldr	r3, [r7, #8]
  405450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  405454:	2b00      	cmp	r3, #0
  405456:	d003      	beq.n	405460 <hsmci_send_cmd_execute+0x6c>
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  405458:	68fb      	ldr	r3, [r7, #12]
  40545a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40545e:	60fb      	str	r3, [r7, #12]
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  405460:	4a1c      	ldr	r2, [pc, #112]	; (4054d4 <hsmci_send_cmd_execute+0xe0>)
  405462:	687b      	ldr	r3, [r7, #4]
  405464:	6113      	str	r3, [r2, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  405466:	4a1b      	ldr	r2, [pc, #108]	; (4054d4 <hsmci_send_cmd_execute+0xe0>)
  405468:	68fb      	ldr	r3, [r7, #12]
  40546a:	6153      	str	r3, [r2, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  40546c:	4b19      	ldr	r3, [pc, #100]	; (4054d4 <hsmci_send_cmd_execute+0xe0>)
  40546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405470:	617b      	str	r3, [r7, #20]
		if (cmd & SDMMC_RESP_CRC) {
  405472:	68bb      	ldr	r3, [r7, #8]
  405474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  405478:	2b00      	cmp	r3, #0
  40547a:	d008      	beq.n	40548e <hsmci_send_cmd_execute+0x9a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  40547c:	697b      	ldr	r3, [r7, #20]
  40547e:	f403 031f 	and.w	r3, r3, #10420224	; 0x9f0000
  405482:	2b00      	cmp	r3, #0
  405484:	d00c      	beq.n	4054a0 <hsmci_send_cmd_execute+0xac>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  405486:	4b14      	ldr	r3, [pc, #80]	; (4054d8 <hsmci_send_cmd_execute+0xe4>)
  405488:	4798      	blx	r3
				return false;
  40548a:	2300      	movs	r3, #0
  40548c:	e01d      	b.n	4054ca <hsmci_send_cmd_execute+0xd6>
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  40548e:	697b      	ldr	r3, [r7, #20]
  405490:	f403 031b 	and.w	r3, r3, #10158080	; 0x9b0000
  405494:	2b00      	cmp	r3, #0
  405496:	d003      	beq.n	4054a0 <hsmci_send_cmd_execute+0xac>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  405498:	4b0f      	ldr	r3, [pc, #60]	; (4054d8 <hsmci_send_cmd_execute+0xe4>)
  40549a:	4798      	blx	r3
				return false;
  40549c:	2300      	movs	r3, #0
  40549e:	e014      	b.n	4054ca <hsmci_send_cmd_execute+0xd6>
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4054a0:	697b      	ldr	r3, [r7, #20]
  4054a2:	f003 0301 	and.w	r3, r3, #1
  4054a6:	2b00      	cmp	r3, #0
  4054a8:	d0e0      	beq.n	40546c <hsmci_send_cmd_execute+0x78>

	if (cmd & SDMMC_RESP_BUSY) {
  4054aa:	68bb      	ldr	r3, [r7, #8]
  4054ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  4054b0:	2b00      	cmp	r3, #0
  4054b2:	d009      	beq.n	4054c8 <hsmci_send_cmd_execute+0xd4>
		if (!hsmci_wait_busy()) {
  4054b4:	4b09      	ldr	r3, [pc, #36]	; (4054dc <hsmci_send_cmd_execute+0xe8>)
  4054b6:	4798      	blx	r3
  4054b8:	4603      	mov	r3, r0
  4054ba:	f083 0301 	eor.w	r3, r3, #1
  4054be:	b2db      	uxtb	r3, r3
  4054c0:	2b00      	cmp	r3, #0
  4054c2:	d001      	beq.n	4054c8 <hsmci_send_cmd_execute+0xd4>
			return false;
  4054c4:	2300      	movs	r3, #0
  4054c6:	e000      	b.n	4054ca <hsmci_send_cmd_execute+0xd6>
		}
	}
	return true;
  4054c8:	2301      	movs	r3, #1
}
  4054ca:	4618      	mov	r0, r3
  4054cc:	3718      	adds	r7, #24
  4054ce:	46bd      	mov	sp, r7
  4054d0:	bd80      	pop	{r7, pc}
  4054d2:	bf00      	nop
  4054d4:	40080000 	.word	0x40080000
  4054d8:	004052a1 	.word	0x004052a1
  4054dc:	004053a9 	.word	0x004053a9

004054e0 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  4054e0:	b580      	push	{r7, lr}
  4054e2:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_HSMCI);
  4054e4:	2010      	movs	r0, #16
  4054e6:	4b0a      	ldr	r3, [pc, #40]	; (405510 <hsmci_init+0x30>)
  4054e8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_XDMAC);
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  4054ea:	4b0a      	ldr	r3, [pc, #40]	; (405514 <hsmci_init+0x34>)
  4054ec:	2272      	movs	r2, #114	; 0x72
  4054ee:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  4054f0:	4b08      	ldr	r3, [pc, #32]	; (405514 <hsmci_init+0x34>)
  4054f2:	2272      	movs	r2, #114	; 0x72
  4054f4:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  4054f6:	4b07      	ldr	r3, [pc, #28]	; (405514 <hsmci_init+0x34>)
  4054f8:	2211      	movs	r2, #17
  4054fa:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  4054fc:	4b05      	ldr	r3, [pc, #20]	; (405514 <hsmci_init+0x34>)
  4054fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  405502:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  405504:	4b03      	ldr	r3, [pc, #12]	; (405514 <hsmci_init+0x34>)
  405506:	2205      	movs	r2, #5
  405508:	601a      	str	r2, [r3, #0]
}
  40550a:	bf00      	nop
  40550c:	bd80      	pop	{r7, pc}
  40550e:	bf00      	nop
  405510:	00409ad5 	.word	0x00409ad5
  405514:	40080000 	.word	0x40080000

00405518 <hsmci_get_bus_width>:

uint8_t hsmci_get_bus_width(uint8_t slot)
{
  405518:	b480      	push	{r7}
  40551a:	b083      	sub	sp, #12
  40551c:	af00      	add	r7, sp, #0
  40551e:	4603      	mov	r3, r0
  405520:	71fb      	strb	r3, [r7, #7]
	switch (slot) {
  405522:	79fb      	ldrb	r3, [r7, #7]
  405524:	2b00      	cmp	r3, #0
  405526:	d101      	bne.n	40552c <hsmci_get_bus_width+0x14>
	case 0:
		return SD_MMC_HSMCI_SLOT_0_SIZE;
  405528:	2304      	movs	r3, #4
  40552a:	e000      	b.n	40552e <hsmci_get_bus_width+0x16>
#if (SD_MMC_HSMCI_MEM_CNT == 2)
	case 1:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
  40552c:	2300      	movs	r3, #0
	}
}
  40552e:	4618      	mov	r0, r3
  405530:	370c      	adds	r7, #12
  405532:	46bd      	mov	sp, r7
  405534:	f85d 7b04 	ldr.w	r7, [sp], #4
  405538:	4770      	bx	lr

0040553a <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
  40553a:	b480      	push	{r7}
  40553c:	af00      	add	r7, sp, #0
	return true;
  40553e:	2301      	movs	r3, #1
}
  405540:	4618      	mov	r0, r3
  405542:	46bd      	mov	sp, r7
  405544:	f85d 7b04 	ldr.w	r7, [sp], #4
  405548:	4770      	bx	lr
	...

0040554c <hsmci_select_device>:

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
  40554c:	b580      	push	{r7, lr}
  40554e:	b084      	sub	sp, #16
  405550:	af00      	add	r7, sp, #0
  405552:	6039      	str	r1, [r7, #0]
  405554:	4611      	mov	r1, r2
  405556:	461a      	mov	r2, r3
  405558:	4603      	mov	r3, r0
  40555a:	71fb      	strb	r3, [r7, #7]
  40555c:	460b      	mov	r3, r1
  40555e:	71bb      	strb	r3, [r7, #6]
  405560:	4613      	mov	r3, r2
  405562:	717b      	strb	r3, [r7, #5]
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  405564:	2300      	movs	r3, #0
  405566:	60fb      	str	r3, [r7, #12]
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  405568:	2300      	movs	r3, #0
  40556a:	60bb      	str	r3, [r7, #8]

	if (high_speed) {
  40556c:	797b      	ldrb	r3, [r7, #5]
  40556e:	2b00      	cmp	r3, #0
  405570:	d006      	beq.n	405580 <hsmci_select_device+0x34>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  405572:	4a19      	ldr	r2, [pc, #100]	; (4055d8 <hsmci_select_device+0x8c>)
  405574:	4b18      	ldr	r3, [pc, #96]	; (4055d8 <hsmci_select_device+0x8c>)
  405576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  405578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40557c:	6553      	str	r3, [r2, #84]	; 0x54
  40557e:	e005      	b.n	40558c <hsmci_select_device+0x40>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  405580:	4a15      	ldr	r2, [pc, #84]	; (4055d8 <hsmci_select_device+0x8c>)
  405582:	4b15      	ldr	r3, [pc, #84]	; (4055d8 <hsmci_select_device+0x8c>)
  405584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  405586:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40558a:	6553      	str	r3, [r2, #84]	; 0x54
	}

	hsmci_set_speed(clock, sysclk_get_peripheral_hz());
  40558c:	4b13      	ldr	r3, [pc, #76]	; (4055dc <hsmci_select_device+0x90>)
  40558e:	4798      	blx	r3
  405590:	4603      	mov	r3, r0
  405592:	4619      	mov	r1, r3
  405594:	6838      	ldr	r0, [r7, #0]
  405596:	4b12      	ldr	r3, [pc, #72]	; (4055e0 <hsmci_select_device+0x94>)
  405598:	4798      	blx	r3

	switch (slot) {
  40559a:	79fb      	ldrb	r3, [r7, #7]
  40559c:	2b00      	cmp	r3, #0
  40559e:	d102      	bne.n	4055a6 <hsmci_select_device+0x5a>
	case 0:
		hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  4055a0:	2300      	movs	r3, #0
  4055a2:	60fb      	str	r3, [r7, #12]
		break;
  4055a4:	bf00      	nop
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4055a6:	79bb      	ldrb	r3, [r7, #6]
  4055a8:	2b04      	cmp	r3, #4
  4055aa:	d006      	beq.n	4055ba <hsmci_select_device+0x6e>
  4055ac:	2b08      	cmp	r3, #8
  4055ae:	d007      	beq.n	4055c0 <hsmci_select_device+0x74>
  4055b0:	2b01      	cmp	r3, #1
  4055b2:	d108      	bne.n	4055c6 <hsmci_select_device+0x7a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4055b4:	2300      	movs	r3, #0
  4055b6:	60bb      	str	r3, [r7, #8]
		break;
  4055b8:	e005      	b.n	4055c6 <hsmci_select_device+0x7a>

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4055ba:	2380      	movs	r3, #128	; 0x80
  4055bc:	60bb      	str	r3, [r7, #8]
		break;
  4055be:	e002      	b.n	4055c6 <hsmci_select_device+0x7a>

	case 8:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_8;
  4055c0:	23c0      	movs	r3, #192	; 0xc0
  4055c2:	60bb      	str	r3, [r7, #8]
		break;
  4055c4:	bf00      	nop

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4055c6:	4904      	ldr	r1, [pc, #16]	; (4055d8 <hsmci_select_device+0x8c>)
  4055c8:	68fa      	ldr	r2, [r7, #12]
  4055ca:	68bb      	ldr	r3, [r7, #8]
  4055cc:	4313      	orrs	r3, r2
  4055ce:	60cb      	str	r3, [r1, #12]
}
  4055d0:	bf00      	nop
  4055d2:	3710      	adds	r7, #16
  4055d4:	46bd      	mov	sp, r7
  4055d6:	bd80      	pop	{r7, pc}
  4055d8:	40080000 	.word	0x40080000
  4055dc:	0040528d 	.word	0x0040528d
  4055e0:	00405301 	.word	0x00405301

004055e4 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  4055e4:	b480      	push	{r7}
  4055e6:	b083      	sub	sp, #12
  4055e8:	af00      	add	r7, sp, #0
  4055ea:	4603      	mov	r3, r0
  4055ec:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	// Nothing to do
}
  4055ee:	bf00      	nop
  4055f0:	370c      	adds	r7, #12
  4055f2:	46bd      	mov	sp, r7
  4055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4055f8:	4770      	bx	lr
	...

004055fc <hsmci_send_clock>:

void hsmci_send_clock(void)
{
  4055fc:	b480      	push	{r7}
  4055fe:	af00      	add	r7, sp, #0
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  405600:	4a0c      	ldr	r2, [pc, #48]	; (405634 <hsmci_send_clock+0x38>)
  405602:	4b0c      	ldr	r3, [pc, #48]	; (405634 <hsmci_send_clock+0x38>)
  405604:	685b      	ldr	r3, [r3, #4]
  405606:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  40560a:	6053      	str	r3, [r2, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  40560c:	4b09      	ldr	r3, [pc, #36]	; (405634 <hsmci_send_clock+0x38>)
  40560e:	2200      	movs	r2, #0
  405610:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  405612:	4b08      	ldr	r3, [pc, #32]	; (405634 <hsmci_send_clock+0x38>)
  405614:	f44f 6210 	mov.w	r2, #2304	; 0x900
  405618:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  40561a:	bf00      	nop
  40561c:	4b05      	ldr	r3, [pc, #20]	; (405634 <hsmci_send_clock+0x38>)
  40561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405620:	f003 0301 	and.w	r3, r3, #1
  405624:	2b00      	cmp	r3, #0
  405626:	d0f9      	beq.n	40561c <hsmci_send_clock+0x20>
}
  405628:	bf00      	nop
  40562a:	46bd      	mov	sp, r7
  40562c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405630:	4770      	bx	lr
  405632:	bf00      	nop
  405634:	40080000 	.word	0x40080000

00405638 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  405638:	b580      	push	{r7, lr}
  40563a:	b082      	sub	sp, #8
  40563c:	af00      	add	r7, sp, #0
  40563e:	6078      	str	r0, [r7, #4]
  405640:	6039      	str	r1, [r7, #0]
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  405642:	4a0c      	ldr	r2, [pc, #48]	; (405674 <hsmci_send_cmd+0x3c>)
  405644:	4b0b      	ldr	r3, [pc, #44]	; (405674 <hsmci_send_cmd+0x3c>)
  405646:	685b      	ldr	r3, [r3, #4]
  405648:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  40564c:	6053      	str	r3, [r2, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  40564e:	4a09      	ldr	r2, [pc, #36]	; (405674 <hsmci_send_cmd+0x3c>)
  405650:	4b08      	ldr	r3, [pc, #32]	; (405674 <hsmci_send_cmd+0x3c>)
  405652:	685b      	ldr	r3, [r3, #4]
  405654:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  405658:	6053      	str	r3, [r2, #4]
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  40565a:	4b06      	ldr	r3, [pc, #24]	; (405674 <hsmci_send_cmd+0x3c>)
  40565c:	2200      	movs	r2, #0
  40565e:	619a      	str	r2, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  405660:	683a      	ldr	r2, [r7, #0]
  405662:	6879      	ldr	r1, [r7, #4]
  405664:	2000      	movs	r0, #0
  405666:	4b04      	ldr	r3, [pc, #16]	; (405678 <hsmci_send_cmd+0x40>)
  405668:	4798      	blx	r3
  40566a:	4603      	mov	r3, r0
}
  40566c:	4618      	mov	r0, r3
  40566e:	3708      	adds	r7, #8
  405670:	46bd      	mov	sp, r7
  405672:	bd80      	pop	{r7, pc}
  405674:	40080000 	.word	0x40080000
  405678:	004053f5 	.word	0x004053f5

0040567c <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
  40567c:	b480      	push	{r7}
  40567e:	af00      	add	r7, sp, #0
	return HSMCI->HSMCI_RSPR[0];
  405680:	4b03      	ldr	r3, [pc, #12]	; (405690 <hsmci_get_response+0x14>)
  405682:	6a1b      	ldr	r3, [r3, #32]
}
  405684:	4618      	mov	r0, r3
  405686:	46bd      	mov	sp, r7
  405688:	f85d 7b04 	ldr.w	r7, [sp], #4
  40568c:	4770      	bx	lr
  40568e:	bf00      	nop
  405690:	40080000 	.word	0x40080000

00405694 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  405694:	b480      	push	{r7}
  405696:	b085      	sub	sp, #20
  405698:	af00      	add	r7, sp, #0
  40569a:	6078      	str	r0, [r7, #4]
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  40569c:	2300      	movs	r3, #0
  40569e:	73fb      	strb	r3, [r7, #15]
  4056a0:	e024      	b.n	4056ec <hsmci_get_response_128+0x58>
		response_32 = HSMCI->HSMCI_RSPR[0];
  4056a2:	4b17      	ldr	r3, [pc, #92]	; (405700 <hsmci_get_response_128+0x6c>)
  4056a4:	6a1b      	ldr	r3, [r3, #32]
  4056a6:	60bb      	str	r3, [r7, #8]
		*response = (response_32 >> 24) & 0xFF;
  4056a8:	68bb      	ldr	r3, [r7, #8]
  4056aa:	0e1b      	lsrs	r3, r3, #24
  4056ac:	b2da      	uxtb	r2, r3
  4056ae:	687b      	ldr	r3, [r7, #4]
  4056b0:	701a      	strb	r2, [r3, #0]
		response++;
  4056b2:	687b      	ldr	r3, [r7, #4]
  4056b4:	3301      	adds	r3, #1
  4056b6:	607b      	str	r3, [r7, #4]
		*response = (response_32 >> 16) & 0xFF;
  4056b8:	68bb      	ldr	r3, [r7, #8]
  4056ba:	0c1b      	lsrs	r3, r3, #16
  4056bc:	b2da      	uxtb	r2, r3
  4056be:	687b      	ldr	r3, [r7, #4]
  4056c0:	701a      	strb	r2, [r3, #0]
		response++;
  4056c2:	687b      	ldr	r3, [r7, #4]
  4056c4:	3301      	adds	r3, #1
  4056c6:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  8) & 0xFF;
  4056c8:	68bb      	ldr	r3, [r7, #8]
  4056ca:	0a1b      	lsrs	r3, r3, #8
  4056cc:	b2da      	uxtb	r2, r3
  4056ce:	687b      	ldr	r3, [r7, #4]
  4056d0:	701a      	strb	r2, [r3, #0]
		response++;
  4056d2:	687b      	ldr	r3, [r7, #4]
  4056d4:	3301      	adds	r3, #1
  4056d6:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  0) & 0xFF;
  4056d8:	68bb      	ldr	r3, [r7, #8]
  4056da:	b2da      	uxtb	r2, r3
  4056dc:	687b      	ldr	r3, [r7, #4]
  4056de:	701a      	strb	r2, [r3, #0]
		response++;
  4056e0:	687b      	ldr	r3, [r7, #4]
  4056e2:	3301      	adds	r3, #1
  4056e4:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < 4; i++) {
  4056e6:	7bfb      	ldrb	r3, [r7, #15]
  4056e8:	3301      	adds	r3, #1
  4056ea:	73fb      	strb	r3, [r7, #15]
  4056ec:	7bfb      	ldrb	r3, [r7, #15]
  4056ee:	2b03      	cmp	r3, #3
  4056f0:	d9d7      	bls.n	4056a2 <hsmci_get_response_128+0xe>
	}
}
  4056f2:	bf00      	nop
  4056f4:	3714      	adds	r7, #20
  4056f6:	46bd      	mov	sp, r7
  4056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056fc:	4770      	bx	lr
  4056fe:	bf00      	nop
  405700:	40080000 	.word	0x40080000

00405704 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  405704:	b580      	push	{r7, lr}
  405706:	b086      	sub	sp, #24
  405708:	af00      	add	r7, sp, #0
  40570a:	60f8      	str	r0, [r7, #12]
  40570c:	60b9      	str	r1, [r7, #8]
  40570e:	4611      	mov	r1, r2
  405710:	461a      	mov	r2, r3
  405712:	460b      	mov	r3, r1
  405714:	80fb      	strh	r3, [r7, #6]
  405716:	4613      	mov	r3, r2
  405718:	80bb      	strh	r3, [r7, #4]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  40571a:	f897 3020 	ldrb.w	r3, [r7, #32]
  40571e:	2b00      	cmp	r3, #0
  405720:	d006      	beq.n	405730 <hsmci_adtc_start+0x2c>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  405722:	4a3d      	ldr	r2, [pc, #244]	; (405818 <hsmci_adtc_start+0x114>)
  405724:	4b3c      	ldr	r3, [pc, #240]	; (405818 <hsmci_adtc_start+0x114>)
  405726:	685b      	ldr	r3, [r3, #4]
  405728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40572c:	6053      	str	r3, [r2, #4]
  40572e:	e005      	b.n	40573c <hsmci_adtc_start+0x38>
	} else {
		// Disable PDC for HSMCI
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  405730:	4a39      	ldr	r2, [pc, #228]	; (405818 <hsmci_adtc_start+0x114>)
  405732:	4b39      	ldr	r3, [pc, #228]	; (405818 <hsmci_adtc_start+0x114>)
  405734:	685b      	ldr	r3, [r3, #4]
  405736:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  40573a:	6053      	str	r3, [r2, #4]
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  40573c:	4a36      	ldr	r2, [pc, #216]	; (405818 <hsmci_adtc_start+0x114>)
  40573e:	4b36      	ldr	r3, [pc, #216]	; (405818 <hsmci_adtc_start+0x114>)
  405740:	685b      	ldr	r3, [r3, #4]
  405742:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
  405746:	6053      	str	r3, [r2, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  405748:	88fb      	ldrh	r3, [r7, #6]
  40574a:	f003 0303 	and.w	r3, r3, #3
  40574e:	2b00      	cmp	r3, #0
  405750:	d006      	beq.n	405760 <hsmci_adtc_start+0x5c>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  405752:	4a31      	ldr	r2, [pc, #196]	; (405818 <hsmci_adtc_start+0x114>)
  405754:	4b30      	ldr	r3, [pc, #192]	; (405818 <hsmci_adtc_start+0x114>)
  405756:	685b      	ldr	r3, [r3, #4]
  405758:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40575c:	6053      	str	r3, [r2, #4]
  40575e:	e005      	b.n	40576c <hsmci_adtc_start+0x68>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  405760:	4a2d      	ldr	r2, [pc, #180]	; (405818 <hsmci_adtc_start+0x114>)
  405762:	4b2d      	ldr	r3, [pc, #180]	; (405818 <hsmci_adtc_start+0x114>)
  405764:	685b      	ldr	r3, [r3, #4]
  405766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40576a:	6053      	str	r3, [r2, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  40576c:	68fb      	ldr	r3, [r7, #12]
  40576e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  405772:	2b00      	cmp	r3, #0
  405774:	d003      	beq.n	40577e <hsmci_adtc_start+0x7a>
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
  405776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40577a:	617b      	str	r3, [r7, #20]
  40577c:	e002      	b.n	405784 <hsmci_adtc_start+0x80>
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  40577e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  405782:	617b      	str	r3, [r7, #20]
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  405784:	68fb      	ldr	r3, [r7, #12]
  405786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40578a:	2b00      	cmp	r3, #0
  40578c:	d009      	beq.n	4057a2 <hsmci_adtc_start+0x9e>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  40578e:	697b      	ldr	r3, [r7, #20]
  405790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  405794:	617b      	str	r3, [r7, #20]
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  405796:	4a20      	ldr	r2, [pc, #128]	; (405818 <hsmci_adtc_start+0x114>)
  405798:	88fb      	ldrh	r3, [r7, #6]
  40579a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40579e:	6193      	str	r3, [r2, #24]
  4057a0:	e027      	b.n	4057f2 <hsmci_adtc_start+0xee>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  4057a2:	491d      	ldr	r1, [pc, #116]	; (405818 <hsmci_adtc_start+0x114>)
  4057a4:	88fb      	ldrh	r3, [r7, #6]
  4057a6:	041a      	lsls	r2, r3, #16
				(nb_block << HSMCI_BLKR_BCNT_Pos);
  4057a8:	88bb      	ldrh	r3, [r7, #4]
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  4057aa:	4313      	orrs	r3, r2
  4057ac:	618b      	str	r3, [r1, #24]
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  4057ae:	68fb      	ldr	r3, [r7, #12]
  4057b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4057b4:	2b00      	cmp	r3, #0
  4057b6:	d004      	beq.n	4057c2 <hsmci_adtc_start+0xbe>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  4057b8:	697b      	ldr	r3, [r7, #20]
  4057ba:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
  4057be:	617b      	str	r3, [r7, #20]
  4057c0:	e017      	b.n	4057f2 <hsmci_adtc_start+0xee>
		} else if (cmd & SDMMC_CMD_STREAM) {
  4057c2:	68fb      	ldr	r3, [r7, #12]
  4057c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  4057c8:	2b00      	cmp	r3, #0
  4057ca:	d004      	beq.n	4057d6 <hsmci_adtc_start+0xd2>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  4057cc:	697b      	ldr	r3, [r7, #20]
  4057ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4057d2:	617b      	str	r3, [r7, #20]
  4057d4:	e00d      	b.n	4057f2 <hsmci_adtc_start+0xee>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  4057d6:	68fb      	ldr	r3, [r7, #12]
  4057d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  4057dc:	2b00      	cmp	r3, #0
  4057de:	d108      	bne.n	4057f2 <hsmci_adtc_start+0xee>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  4057e0:	68fb      	ldr	r3, [r7, #12]
  4057e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  4057e6:	2b00      	cmp	r3, #0
  4057e8:	d003      	beq.n	4057f2 <hsmci_adtc_start+0xee>
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  4057ea:	697b      	ldr	r3, [r7, #20]
  4057ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  4057f0:	617b      	str	r3, [r7, #20]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  4057f2:	4b0a      	ldr	r3, [pc, #40]	; (40581c <hsmci_adtc_start+0x118>)
  4057f4:	2200      	movs	r2, #0
  4057f6:	601a      	str	r2, [r3, #0]
	hsmci_block_size = block_size;
  4057f8:	4a09      	ldr	r2, [pc, #36]	; (405820 <hsmci_adtc_start+0x11c>)
  4057fa:	88fb      	ldrh	r3, [r7, #6]
  4057fc:	8013      	strh	r3, [r2, #0]
	hsmci_nb_block = nb_block;
  4057fe:	4a09      	ldr	r2, [pc, #36]	; (405824 <hsmci_adtc_start+0x120>)
  405800:	88bb      	ldrh	r3, [r7, #4]
  405802:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  405804:	68ba      	ldr	r2, [r7, #8]
  405806:	68f9      	ldr	r1, [r7, #12]
  405808:	6978      	ldr	r0, [r7, #20]
  40580a:	4b07      	ldr	r3, [pc, #28]	; (405828 <hsmci_adtc_start+0x124>)
  40580c:	4798      	blx	r3
  40580e:	4603      	mov	r3, r0
}
  405810:	4618      	mov	r0, r3
  405812:	3718      	adds	r7, #24
  405814:	46bd      	mov	sp, r7
  405816:	bd80      	pop	{r7, pc}
  405818:	40080000 	.word	0x40080000
  40581c:	2000ac00 	.word	0x2000ac00
  405820:	2000ac04 	.word	0x2000ac04
  405824:	2000ac06 	.word	0x2000ac06
  405828:	004053f5 	.word	0x004053f5

0040582c <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  40582c:	b580      	push	{r7, lr}
  40582e:	b084      	sub	sp, #16
  405830:	af00      	add	r7, sp, #0
  405832:	6078      	str	r0, [r7, #4]

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  405834:	4b1e      	ldr	r3, [pc, #120]	; (4058b0 <hsmci_read_word+0x84>)
  405836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405838:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40583a:	68fa      	ldr	r2, [r7, #12]
  40583c:	4b1d      	ldr	r3, [pc, #116]	; (4058b4 <hsmci_read_word+0x88>)
  40583e:	4013      	ands	r3, r2
  405840:	2b00      	cmp	r3, #0
  405842:	d003      	beq.n	40584c <hsmci_read_word+0x20>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  405844:	4b1c      	ldr	r3, [pc, #112]	; (4058b8 <hsmci_read_word+0x8c>)
  405846:	4798      	blx	r3
			return false;
  405848:	2300      	movs	r3, #0
  40584a:	e02c      	b.n	4058a6 <hsmci_read_word+0x7a>
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  40584c:	68fb      	ldr	r3, [r7, #12]
  40584e:	f003 0302 	and.w	r3, r3, #2
  405852:	2b00      	cmp	r3, #0
  405854:	d0ee      	beq.n	405834 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  405856:	4b16      	ldr	r3, [pc, #88]	; (4058b0 <hsmci_read_word+0x84>)
  405858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40585a:	687b      	ldr	r3, [r7, #4]
  40585c:	601a      	str	r2, [r3, #0]
	hsmci_transfert_pos += 4;
  40585e:	4b17      	ldr	r3, [pc, #92]	; (4058bc <hsmci_read_word+0x90>)
  405860:	681b      	ldr	r3, [r3, #0]
  405862:	3304      	adds	r3, #4
  405864:	4a15      	ldr	r2, [pc, #84]	; (4058bc <hsmci_read_word+0x90>)
  405866:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  405868:	4b15      	ldr	r3, [pc, #84]	; (4058c0 <hsmci_read_word+0x94>)
  40586a:	881b      	ldrh	r3, [r3, #0]
  40586c:	461a      	mov	r2, r3
  40586e:	4b15      	ldr	r3, [pc, #84]	; (4058c4 <hsmci_read_word+0x98>)
  405870:	881b      	ldrh	r3, [r3, #0]
  405872:	fb03 f202 	mul.w	r2, r3, r2
  405876:	4b11      	ldr	r3, [pc, #68]	; (4058bc <hsmci_read_word+0x90>)
  405878:	681b      	ldr	r3, [r3, #0]
  40587a:	429a      	cmp	r2, r3
  40587c:	d901      	bls.n	405882 <hsmci_read_word+0x56>
		return true;
  40587e:	2301      	movs	r3, #1
  405880:	e011      	b.n	4058a6 <hsmci_read_word+0x7a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  405882:	4b0b      	ldr	r3, [pc, #44]	; (4058b0 <hsmci_read_word+0x84>)
  405884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405886:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  405888:	68fa      	ldr	r2, [r7, #12]
  40588a:	4b0a      	ldr	r3, [pc, #40]	; (4058b4 <hsmci_read_word+0x88>)
  40588c:	4013      	ands	r3, r2
  40588e:	2b00      	cmp	r3, #0
  405890:	d003      	beq.n	40589a <hsmci_read_word+0x6e>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  405892:	4b09      	ldr	r3, [pc, #36]	; (4058b8 <hsmci_read_word+0x8c>)
  405894:	4798      	blx	r3
			return false;
  405896:	2300      	movs	r3, #0
  405898:	e005      	b.n	4058a6 <hsmci_read_word+0x7a>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40589a:	68fb      	ldr	r3, [r7, #12]
  40589c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  4058a0:	2b00      	cmp	r3, #0
  4058a2:	d0ee      	beq.n	405882 <hsmci_read_word+0x56>
	return true;
  4058a4:	2301      	movs	r3, #1
}
  4058a6:	4618      	mov	r0, r3
  4058a8:	3710      	adds	r7, #16
  4058aa:	46bd      	mov	sp, r7
  4058ac:	bd80      	pop	{r7, pc}
  4058ae:	bf00      	nop
  4058b0:	40080000 	.word	0x40080000
  4058b4:	c0600000 	.word	0xc0600000
  4058b8:	004052a1 	.word	0x004052a1
  4058bc:	2000ac00 	.word	0x2000ac00
  4058c0:	2000ac04 	.word	0x2000ac04
  4058c4:	2000ac06 	.word	0x2000ac06

004058c8 <hsmci_start_read_blocks>:
}
#endif // HSMCI_SR_DMADONE

#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  4058c8:	b480      	push	{r7}
  4058ca:	b085      	sub	sp, #20
  4058cc:	af00      	add	r7, sp, #0
  4058ce:	6078      	str	r0, [r7, #4]
  4058d0:	460b      	mov	r3, r1
  4058d2:	807b      	strh	r3, [r7, #2]
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  4058d4:	887b      	ldrh	r3, [r7, #2]
  4058d6:	4a21      	ldr	r2, [pc, #132]	; (40595c <hsmci_start_read_blocks+0x94>)
  4058d8:	8812      	ldrh	r2, [r2, #0]
  4058da:	fb02 f303 	mul.w	r3, r2, r3
  4058de:	60fb      	str	r3, [r7, #12]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  4058e0:	687b      	ldr	r3, [r7, #4]
  4058e2:	f003 0303 	and.w	r3, r3, #3
  4058e6:	2b00      	cmp	r3, #0
  4058e8:	d105      	bne.n	4058f6 <hsmci_start_read_blocks+0x2e>
  4058ea:	4b1c      	ldr	r3, [pc, #112]	; (40595c <hsmci_start_read_blocks+0x94>)
  4058ec:	881b      	ldrh	r3, [r3, #0]
  4058ee:	f003 0303 	and.w	r3, r3, #3
  4058f2:	2b00      	cmp	r3, #0
  4058f4:	d006      	beq.n	405904 <hsmci_start_read_blocks+0x3c>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4058f6:	4a1a      	ldr	r2, [pc, #104]	; (405960 <hsmci_start_read_blocks+0x98>)
  4058f8:	4b19      	ldr	r3, [pc, #100]	; (405960 <hsmci_start_read_blocks+0x98>)
  4058fa:	685b      	ldr	r3, [r3, #4]
  4058fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405900:	6053      	str	r3, [r2, #4]
  405902:	e005      	b.n	405910 <hsmci_start_read_blocks+0x48>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  405904:	4a16      	ldr	r2, [pc, #88]	; (405960 <hsmci_start_read_blocks+0x98>)
  405906:	4b16      	ldr	r3, [pc, #88]	; (405960 <hsmci_start_read_blocks+0x98>)
  405908:	685b      	ldr	r3, [r3, #4]
  40590a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40590e:	6053      	str	r3, [r2, #4]
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  405910:	4a13      	ldr	r2, [pc, #76]	; (405960 <hsmci_start_read_blocks+0x98>)
  405912:	687b      	ldr	r3, [r7, #4]
  405914:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  405918:	4a11      	ldr	r2, [pc, #68]	; (405960 <hsmci_start_read_blocks+0x98>)
  40591a:	4b11      	ldr	r3, [pc, #68]	; (405960 <hsmci_start_read_blocks+0x98>)
  40591c:	685b      	ldr	r3, [r3, #4]
  40591e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
			nb_data : nb_data / 4;
  405922:	2b00      	cmp	r3, #0
  405924:	d102      	bne.n	40592c <hsmci_start_read_blocks+0x64>
  405926:	68fb      	ldr	r3, [r7, #12]
  405928:	089b      	lsrs	r3, r3, #2
  40592a:	e000      	b.n	40592e <hsmci_start_read_blocks+0x66>
  40592c:	68fb      	ldr	r3, [r7, #12]
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  40592e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	HSMCI->HSMCI_RNCR = 0;
  405932:	4b0b      	ldr	r3, [pc, #44]	; (405960 <hsmci_start_read_blocks+0x98>)
  405934:	2200      	movs	r2, #0
  405936:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  40593a:	4b09      	ldr	r3, [pc, #36]	; (405960 <hsmci_start_read_blocks+0x98>)
  40593c:	2201      	movs	r2, #1
  40593e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  405942:	4b08      	ldr	r3, [pc, #32]	; (405964 <hsmci_start_read_blocks+0x9c>)
  405944:	681a      	ldr	r2, [r3, #0]
  405946:	68fb      	ldr	r3, [r7, #12]
  405948:	4413      	add	r3, r2
  40594a:	4a06      	ldr	r2, [pc, #24]	; (405964 <hsmci_start_read_blocks+0x9c>)
  40594c:	6013      	str	r3, [r2, #0]
	return true;
  40594e:	2301      	movs	r3, #1
}
  405950:	4618      	mov	r0, r3
  405952:	3714      	adds	r7, #20
  405954:	46bd      	mov	sp, r7
  405956:	f85d 7b04 	ldr.w	r7, [sp], #4
  40595a:	4770      	bx	lr
  40595c:	2000ac04 	.word	0x2000ac04
  405960:	40080000 	.word	0x40080000
  405964:	2000ac00 	.word	0x2000ac00

00405968 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  405968:	b580      	push	{r7, lr}
  40596a:	b082      	sub	sp, #8
  40596c:	af00      	add	r7, sp, #0
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  40596e:	4b1c      	ldr	r3, [pc, #112]	; (4059e0 <hsmci_wait_end_of_read_blocks+0x78>)
  405970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405972:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  405974:	687a      	ldr	r2, [r7, #4]
  405976:	4b1b      	ldr	r3, [pc, #108]	; (4059e4 <hsmci_wait_end_of_read_blocks+0x7c>)
  405978:	4013      	ands	r3, r2
  40597a:	2b00      	cmp	r3, #0
  40597c:	d008      	beq.n	405990 <hsmci_wait_end_of_read_blocks+0x28>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  40597e:	4b18      	ldr	r3, [pc, #96]	; (4059e0 <hsmci_wait_end_of_read_blocks+0x78>)
  405980:	f240 2202 	movw	r2, #514	; 0x202
  405984:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			hsmci_reset();
  405988:	4b17      	ldr	r3, [pc, #92]	; (4059e8 <hsmci_wait_end_of_read_blocks+0x80>)
  40598a:	4798      	blx	r3
			return false;
  40598c:	2300      	movs	r3, #0
  40598e:	e023      	b.n	4059d8 <hsmci_wait_end_of_read_blocks+0x70>
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  405990:	687b      	ldr	r3, [r7, #4]
  405992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  405996:	2b00      	cmp	r3, #0
  405998:	d0e9      	beq.n	40596e <hsmci_wait_end_of_read_blocks+0x6>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  40599a:	4b14      	ldr	r3, [pc, #80]	; (4059ec <hsmci_wait_end_of_read_blocks+0x84>)
  40599c:	881b      	ldrh	r3, [r3, #0]
  40599e:	461a      	mov	r2, r3
  4059a0:	4b13      	ldr	r3, [pc, #76]	; (4059f0 <hsmci_wait_end_of_read_blocks+0x88>)
  4059a2:	881b      	ldrh	r3, [r3, #0]
  4059a4:	fb03 f202 	mul.w	r2, r3, r2
  4059a8:	4b12      	ldr	r3, [pc, #72]	; (4059f4 <hsmci_wait_end_of_read_blocks+0x8c>)
  4059aa:	681b      	ldr	r3, [r3, #0]
  4059ac:	429a      	cmp	r2, r3
  4059ae:	d901      	bls.n	4059b4 <hsmci_wait_end_of_read_blocks+0x4c>
		return true;
  4059b0:	2301      	movs	r3, #1
  4059b2:	e011      	b.n	4059d8 <hsmci_wait_end_of_read_blocks+0x70>
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4059b4:	4b0a      	ldr	r3, [pc, #40]	; (4059e0 <hsmci_wait_end_of_read_blocks+0x78>)
  4059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4059b8:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4059ba:	687a      	ldr	r2, [r7, #4]
  4059bc:	4b09      	ldr	r3, [pc, #36]	; (4059e4 <hsmci_wait_end_of_read_blocks+0x7c>)
  4059be:	4013      	ands	r3, r2
  4059c0:	2b00      	cmp	r3, #0
  4059c2:	d003      	beq.n	4059cc <hsmci_wait_end_of_read_blocks+0x64>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  4059c4:	4b08      	ldr	r3, [pc, #32]	; (4059e8 <hsmci_wait_end_of_read_blocks+0x80>)
  4059c6:	4798      	blx	r3
			return false;
  4059c8:	2300      	movs	r3, #0
  4059ca:	e005      	b.n	4059d8 <hsmci_wait_end_of_read_blocks+0x70>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4059cc:	687b      	ldr	r3, [r7, #4]
  4059ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  4059d2:	2b00      	cmp	r3, #0
  4059d4:	d0ee      	beq.n	4059b4 <hsmci_wait_end_of_read_blocks+0x4c>
	return true;
  4059d6:	2301      	movs	r3, #1
}
  4059d8:	4618      	mov	r0, r3
  4059da:	3708      	adds	r7, #8
  4059dc:	46bd      	mov	sp, r7
  4059de:	bd80      	pop	{r7, pc}
  4059e0:	40080000 	.word	0x40080000
  4059e4:	c0600000 	.word	0xc0600000
  4059e8:	004052a1 	.word	0x004052a1
  4059ec:	2000ac04 	.word	0x2000ac04
  4059f0:	2000ac06 	.word	0x2000ac06
  4059f4:	2000ac00 	.word	0x2000ac00

004059f8 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
  4059f8:	b480      	push	{r7}
  4059fa:	b085      	sub	sp, #20
  4059fc:	af00      	add	r7, sp, #0
  4059fe:	6078      	str	r0, [r7, #4]
  405a00:	460b      	mov	r3, r1
  405a02:	807b      	strh	r3, [r7, #2]
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  405a04:	887b      	ldrh	r3, [r7, #2]
  405a06:	4a22      	ldr	r2, [pc, #136]	; (405a90 <hsmci_start_write_blocks+0x98>)
  405a08:	8812      	ldrh	r2, [r2, #0]
  405a0a:	fb02 f303 	mul.w	r3, r2, r3
  405a0e:	60fb      	str	r3, [r7, #12]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_TCR_TXCTR_Msk >> PERIPH_TCR_TXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
  405a10:	687b      	ldr	r3, [r7, #4]
  405a12:	f003 0303 	and.w	r3, r3, #3
  405a16:	2b00      	cmp	r3, #0
  405a18:	d105      	bne.n	405a26 <hsmci_start_write_blocks+0x2e>
  405a1a:	4b1d      	ldr	r3, [pc, #116]	; (405a90 <hsmci_start_write_blocks+0x98>)
  405a1c:	881b      	ldrh	r3, [r3, #0]
  405a1e:	f003 0303 	and.w	r3, r3, #3
  405a22:	2b00      	cmp	r3, #0
  405a24:	d006      	beq.n	405a34 <hsmci_start_write_blocks+0x3c>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  405a26:	4a1b      	ldr	r2, [pc, #108]	; (405a94 <hsmci_start_write_blocks+0x9c>)
  405a28:	4b1a      	ldr	r3, [pc, #104]	; (405a94 <hsmci_start_write_blocks+0x9c>)
  405a2a:	685b      	ldr	r3, [r3, #4]
  405a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405a30:	6053      	str	r3, [r2, #4]
  405a32:	e005      	b.n	405a40 <hsmci_start_write_blocks+0x48>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  405a34:	4a17      	ldr	r2, [pc, #92]	; (405a94 <hsmci_start_write_blocks+0x9c>)
  405a36:	4b17      	ldr	r3, [pc, #92]	; (405a94 <hsmci_start_write_blocks+0x9c>)
  405a38:	685b      	ldr	r3, [r3, #4]
  405a3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405a3e:	6053      	str	r3, [r2, #4]
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
  405a40:	4a14      	ldr	r2, [pc, #80]	; (405a94 <hsmci_start_write_blocks+0x9c>)
  405a42:	687b      	ldr	r3, [r7, #4]
  405a44:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  405a48:	4a12      	ldr	r2, [pc, #72]	; (405a94 <hsmci_start_write_blocks+0x9c>)
  405a4a:	4b12      	ldr	r3, [pc, #72]	; (405a94 <hsmci_start_write_blocks+0x9c>)
  405a4c:	685b      	ldr	r3, [r3, #4]
  405a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
			nb_data : nb_data / 4;
  405a52:	2b00      	cmp	r3, #0
  405a54:	d102      	bne.n	405a5c <hsmci_start_write_blocks+0x64>
  405a56:	68fb      	ldr	r3, [r7, #12]
  405a58:	089b      	lsrs	r3, r3, #2
  405a5a:	e000      	b.n	405a5e <hsmci_start_write_blocks+0x66>
  405a5c:	68fb      	ldr	r3, [r7, #12]
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  405a5e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	HSMCI->HSMCI_TNCR = 0;
  405a62:	4b0c      	ldr	r3, [pc, #48]	; (405a94 <hsmci_start_write_blocks+0x9c>)
  405a64:	2200      	movs	r2, #0
  405a66:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  405a6a:	4b0a      	ldr	r3, [pc, #40]	; (405a94 <hsmci_start_write_blocks+0x9c>)
  405a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
  405a70:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  405a74:	4b08      	ldr	r3, [pc, #32]	; (405a98 <hsmci_start_write_blocks+0xa0>)
  405a76:	681a      	ldr	r2, [r3, #0]
  405a78:	68fb      	ldr	r3, [r7, #12]
  405a7a:	4413      	add	r3, r2
  405a7c:	4a06      	ldr	r2, [pc, #24]	; (405a98 <hsmci_start_write_blocks+0xa0>)
  405a7e:	6013      	str	r3, [r2, #0]
	return true;
  405a80:	2301      	movs	r3, #1
}
  405a82:	4618      	mov	r0, r3
  405a84:	3714      	adds	r7, #20
  405a86:	46bd      	mov	sp, r7
  405a88:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a8c:	4770      	bx	lr
  405a8e:	bf00      	nop
  405a90:	2000ac04 	.word	0x2000ac04
  405a94:	40080000 	.word	0x40080000
  405a98:	2000ac00 	.word	0x2000ac00

00405a9c <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  405a9c:	b580      	push	{r7, lr}
  405a9e:	b082      	sub	sp, #8
  405aa0:	af00      	add	r7, sp, #0
	uint32_t sr;

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  405aa2:	4b1c      	ldr	r3, [pc, #112]	; (405b14 <hsmci_wait_end_of_write_blocks+0x78>)
  405aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405aa6:	607b      	str	r3, [r7, #4]
		if (sr &
  405aa8:	687a      	ldr	r2, [r7, #4]
  405aaa:	4b1b      	ldr	r3, [pc, #108]	; (405b18 <hsmci_wait_end_of_write_blocks+0x7c>)
  405aac:	4013      	ands	r3, r2
  405aae:	2b00      	cmp	r3, #0
  405ab0:	d008      	beq.n	405ac4 <hsmci_wait_end_of_write_blocks+0x28>
				(HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  405ab2:	4b1a      	ldr	r3, [pc, #104]	; (405b1c <hsmci_wait_end_of_write_blocks+0x80>)
  405ab4:	4798      	blx	r3
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  405ab6:	4b17      	ldr	r3, [pc, #92]	; (405b14 <hsmci_wait_end_of_write_blocks+0x78>)
  405ab8:	f240 2202 	movw	r2, #514	; 0x202
  405abc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			return false;
  405ac0:	2300      	movs	r3, #0
  405ac2:	e023      	b.n	405b0c <hsmci_wait_end_of_write_blocks+0x70>
		}
	} while (!(sr & HSMCI_SR_TXBUFE));
  405ac4:	687b      	ldr	r3, [r7, #4]
  405ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  405aca:	2b00      	cmp	r3, #0
  405acc:	d0e9      	beq.n	405aa2 <hsmci_wait_end_of_write_blocks+0x6>


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  405ace:	4b14      	ldr	r3, [pc, #80]	; (405b20 <hsmci_wait_end_of_write_blocks+0x84>)
  405ad0:	881b      	ldrh	r3, [r3, #0]
  405ad2:	461a      	mov	r2, r3
  405ad4:	4b13      	ldr	r3, [pc, #76]	; (405b24 <hsmci_wait_end_of_write_blocks+0x88>)
  405ad6:	881b      	ldrh	r3, [r3, #0]
  405ad8:	fb03 f202 	mul.w	r2, r3, r2
  405adc:	4b12      	ldr	r3, [pc, #72]	; (405b28 <hsmci_wait_end_of_write_blocks+0x8c>)
  405ade:	681b      	ldr	r3, [r3, #0]
  405ae0:	429a      	cmp	r2, r3
  405ae2:	d901      	bls.n	405ae8 <hsmci_wait_end_of_write_blocks+0x4c>
		return true;
  405ae4:	2301      	movs	r3, #1
  405ae6:	e011      	b.n	405b0c <hsmci_wait_end_of_write_blocks+0x70>
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  405ae8:	4b0a      	ldr	r3, [pc, #40]	; (405b14 <hsmci_wait_end_of_write_blocks+0x78>)
  405aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405aec:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  405aee:	687a      	ldr	r2, [r7, #4]
  405af0:	4b09      	ldr	r3, [pc, #36]	; (405b18 <hsmci_wait_end_of_write_blocks+0x7c>)
  405af2:	4013      	ands	r3, r2
  405af4:	2b00      	cmp	r3, #0
  405af6:	d003      	beq.n	405b00 <hsmci_wait_end_of_write_blocks+0x64>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  405af8:	4b08      	ldr	r3, [pc, #32]	; (405b1c <hsmci_wait_end_of_write_blocks+0x80>)
  405afa:	4798      	blx	r3
			return false;
  405afc:	2300      	movs	r3, #0
  405afe:	e005      	b.n	405b0c <hsmci_wait_end_of_write_blocks+0x70>
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
  405b00:	687b      	ldr	r3, [r7, #4]
  405b02:	f003 0320 	and.w	r3, r3, #32
  405b06:	2b00      	cmp	r3, #0
  405b08:	d0ee      	beq.n	405ae8 <hsmci_wait_end_of_write_blocks+0x4c>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
  405b0a:	2301      	movs	r3, #1
}
  405b0c:	4618      	mov	r0, r3
  405b0e:	3708      	adds	r7, #8
  405b10:	46bd      	mov	sp, r7
  405b12:	bd80      	pop	{r7, pc}
  405b14:	40080000 	.word	0x40080000
  405b18:	c0600000 	.word	0xc0600000
  405b1c:	004052a1 	.word	0x004052a1
  405b20:	2000ac04 	.word	0x2000ac04
  405b24:	2000ac06 	.word	0x2000ac06
  405b28:	2000ac00 	.word	0x2000ac00

00405b2c <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  405b2c:	b480      	push	{r7}
  405b2e:	b083      	sub	sp, #12
  405b30:	af00      	add	r7, sp, #0
  405b32:	6078      	str	r0, [r7, #4]
  405b34:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  405b36:	683b      	ldr	r3, [r7, #0]
  405b38:	2b00      	cmp	r3, #0
  405b3a:	d006      	beq.n	405b4a <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  405b3c:	687b      	ldr	r3, [r7, #4]
  405b3e:	685b      	ldr	r3, [r3, #4]
  405b40:	f043 0201 	orr.w	r2, r3, #1
  405b44:	687b      	ldr	r3, [r7, #4]
  405b46:	605a      	str	r2, [r3, #4]
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
	}
}
  405b48:	e005      	b.n	405b56 <rtc_set_hour_mode+0x2a>
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  405b4a:	687b      	ldr	r3, [r7, #4]
  405b4c:	685b      	ldr	r3, [r3, #4]
  405b4e:	f023 0201 	bic.w	r2, r3, #1
  405b52:	687b      	ldr	r3, [r7, #4]
  405b54:	605a      	str	r2, [r3, #4]
}
  405b56:	bf00      	nop
  405b58:	370c      	adds	r7, #12
  405b5a:	46bd      	mov	sp, r7
  405b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b60:	4770      	bx	lr

00405b62 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  405b62:	b480      	push	{r7}
  405b64:	b087      	sub	sp, #28
  405b66:	af00      	add	r7, sp, #0
  405b68:	60f8      	str	r0, [r7, #12]
  405b6a:	60b9      	str	r1, [r7, #8]
  405b6c:	607a      	str	r2, [r7, #4]
  405b6e:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  405b70:	68fb      	ldr	r3, [r7, #12]
  405b72:	689b      	ldr	r3, [r3, #8]
  405b74:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  405b76:	e002      	b.n	405b7e <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  405b78:	68fb      	ldr	r3, [r7, #12]
  405b7a:	689b      	ldr	r3, [r3, #8]
  405b7c:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  405b7e:	68fb      	ldr	r3, [r7, #12]
  405b80:	689a      	ldr	r2, [r3, #8]
  405b82:	697b      	ldr	r3, [r7, #20]
  405b84:	429a      	cmp	r2, r3
  405b86:	d1f7      	bne.n	405b78 <rtc_get_time+0x16>
	}

	/* Hour */
	if (pul_hour) {
  405b88:	68bb      	ldr	r3, [r7, #8]
  405b8a:	2b00      	cmp	r3, #0
  405b8c:	d01c      	beq.n	405bc8 <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  405b8e:	697b      	ldr	r3, [r7, #20]
  405b90:	0c1b      	lsrs	r3, r3, #16
  405b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  405b96:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405b98:	693b      	ldr	r3, [r7, #16]
  405b9a:	091a      	lsrs	r2, r3, #4
  405b9c:	4613      	mov	r3, r2
  405b9e:	009b      	lsls	r3, r3, #2
  405ba0:	4413      	add	r3, r2
  405ba2:	005b      	lsls	r3, r3, #1
  405ba4:	461a      	mov	r2, r3
  405ba6:	693b      	ldr	r3, [r7, #16]
  405ba8:	f003 030f 	and.w	r3, r3, #15
  405bac:	441a      	add	r2, r3
  405bae:	68bb      	ldr	r3, [r7, #8]
  405bb0:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  405bb2:	697b      	ldr	r3, [r7, #20]
  405bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  405bb8:	2b00      	cmp	r3, #0
  405bba:	d005      	beq.n	405bc8 <rtc_get_time+0x66>
			*pul_hour += 12;
  405bbc:	68bb      	ldr	r3, [r7, #8]
  405bbe:	681b      	ldr	r3, [r3, #0]
  405bc0:	f103 020c 	add.w	r2, r3, #12
  405bc4:	68bb      	ldr	r3, [r7, #8]
  405bc6:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  405bc8:	687b      	ldr	r3, [r7, #4]
  405bca:	2b00      	cmp	r3, #0
  405bcc:	d011      	beq.n	405bf2 <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  405bce:	697b      	ldr	r3, [r7, #20]
  405bd0:	0a1b      	lsrs	r3, r3, #8
  405bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  405bd6:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  405bd8:	693b      	ldr	r3, [r7, #16]
  405bda:	091a      	lsrs	r2, r3, #4
  405bdc:	4613      	mov	r3, r2
  405bde:	009b      	lsls	r3, r3, #2
  405be0:	4413      	add	r3, r2
  405be2:	005b      	lsls	r3, r3, #1
  405be4:	461a      	mov	r2, r3
  405be6:	693b      	ldr	r3, [r7, #16]
  405be8:	f003 030f 	and.w	r3, r3, #15
  405bec:	441a      	add	r2, r3
  405bee:	687b      	ldr	r3, [r7, #4]
  405bf0:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  405bf2:	683b      	ldr	r3, [r7, #0]
  405bf4:	2b00      	cmp	r3, #0
  405bf6:	d010      	beq.n	405c1a <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  405bf8:	697b      	ldr	r3, [r7, #20]
  405bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  405bfe:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405c00:	693b      	ldr	r3, [r7, #16]
  405c02:	091a      	lsrs	r2, r3, #4
  405c04:	4613      	mov	r3, r2
  405c06:	009b      	lsls	r3, r3, #2
  405c08:	4413      	add	r3, r2
  405c0a:	005b      	lsls	r3, r3, #1
  405c0c:	461a      	mov	r2, r3
  405c0e:	693b      	ldr	r3, [r7, #16]
  405c10:	f003 030f 	and.w	r3, r3, #15
  405c14:	441a      	add	r2, r3
  405c16:	683b      	ldr	r3, [r7, #0]
  405c18:	601a      	str	r2, [r3, #0]
	}
}
  405c1a:	bf00      	nop
  405c1c:	371c      	adds	r7, #28
  405c1e:	46bd      	mov	sp, r7
  405c20:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c24:	4770      	bx	lr

00405c26 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  405c26:	b480      	push	{r7}
  405c28:	b089      	sub	sp, #36	; 0x24
  405c2a:	af00      	add	r7, sp, #0
  405c2c:	60f8      	str	r0, [r7, #12]
  405c2e:	60b9      	str	r1, [r7, #8]
  405c30:	607a      	str	r2, [r7, #4]
  405c32:	603b      	str	r3, [r7, #0]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  405c34:	68fb      	ldr	r3, [r7, #12]
  405c36:	68db      	ldr	r3, [r3, #12]
  405c38:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  405c3a:	e002      	b.n	405c42 <rtc_get_date+0x1c>
		ul_date = p_rtc->RTC_CALR;
  405c3c:	68fb      	ldr	r3, [r7, #12]
  405c3e:	68db      	ldr	r3, [r3, #12]
  405c40:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  405c42:	68fb      	ldr	r3, [r7, #12]
  405c44:	68da      	ldr	r2, [r3, #12]
  405c46:	69fb      	ldr	r3, [r7, #28]
  405c48:	429a      	cmp	r2, r3
  405c4a:	d1f7      	bne.n	405c3c <rtc_get_date+0x16>
	}

	/* Retrieve year */
	if (pul_year) {
  405c4c:	68bb      	ldr	r3, [r7, #8]
  405c4e:	2b00      	cmp	r3, #0
  405c50:	d024      	beq.n	405c9c <rtc_get_date+0x76>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
  405c52:	69fb      	ldr	r3, [r7, #28]
  405c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  405c58:	61bb      	str	r3, [r7, #24]
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405c5a:	69bb      	ldr	r3, [r7, #24]
  405c5c:	091a      	lsrs	r2, r3, #4
  405c5e:	4613      	mov	r3, r2
  405c60:	009b      	lsls	r3, r3, #2
  405c62:	4413      	add	r3, r2
  405c64:	005b      	lsls	r3, r3, #1
  405c66:	461a      	mov	r2, r3
  405c68:	69bb      	ldr	r3, [r7, #24]
  405c6a:	f003 030f 	and.w	r3, r3, #15
  405c6e:	4413      	add	r3, r2
  405c70:	617b      	str	r3, [r7, #20]
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  405c72:	69fb      	ldr	r3, [r7, #28]
  405c74:	0a1b      	lsrs	r3, r3, #8
  405c76:	b2db      	uxtb	r3, r3
  405c78:	61bb      	str	r3, [r7, #24]
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  405c7a:	697b      	ldr	r3, [r7, #20]
  405c7c:	2264      	movs	r2, #100	; 0x64
  405c7e:	fb02 f103 	mul.w	r1, r2, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405c82:	69bb      	ldr	r3, [r7, #24]
  405c84:	091a      	lsrs	r2, r3, #4
  405c86:	4613      	mov	r3, r2
  405c88:	009b      	lsls	r3, r3, #2
  405c8a:	4413      	add	r3, r2
  405c8c:	005b      	lsls	r3, r3, #1
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  405c8e:	18ca      	adds	r2, r1, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405c90:	69bb      	ldr	r3, [r7, #24]
  405c92:	f003 030f 	and.w	r3, r3, #15
  405c96:	441a      	add	r2, r3
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  405c98:	68bb      	ldr	r3, [r7, #8]
  405c9a:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  405c9c:	687b      	ldr	r3, [r7, #4]
  405c9e:	2b00      	cmp	r3, #0
  405ca0:	d011      	beq.n	405cc6 <rtc_get_date+0xa0>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  405ca2:	69fb      	ldr	r3, [r7, #28]
  405ca4:	0c1b      	lsrs	r3, r3, #16
  405ca6:	f003 031f 	and.w	r3, r3, #31
  405caa:	61bb      	str	r3, [r7, #24]
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405cac:	69bb      	ldr	r3, [r7, #24]
  405cae:	091a      	lsrs	r2, r3, #4
  405cb0:	4613      	mov	r3, r2
  405cb2:	009b      	lsls	r3, r3, #2
  405cb4:	4413      	add	r3, r2
  405cb6:	005b      	lsls	r3, r3, #1
  405cb8:	461a      	mov	r2, r3
  405cba:	69bb      	ldr	r3, [r7, #24]
  405cbc:	f003 030f 	and.w	r3, r3, #15
  405cc0:	441a      	add	r2, r3
  405cc2:	687b      	ldr	r3, [r7, #4]
  405cc4:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  405cc6:	683b      	ldr	r3, [r7, #0]
  405cc8:	2b00      	cmp	r3, #0
  405cca:	d011      	beq.n	405cf0 <rtc_get_date+0xca>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  405ccc:	69fb      	ldr	r3, [r7, #28]
  405cce:	0e1b      	lsrs	r3, r3, #24
  405cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  405cd4:	61bb      	str	r3, [r7, #24]
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405cd6:	69bb      	ldr	r3, [r7, #24]
  405cd8:	091a      	lsrs	r2, r3, #4
  405cda:	4613      	mov	r3, r2
  405cdc:	009b      	lsls	r3, r3, #2
  405cde:	4413      	add	r3, r2
  405ce0:	005b      	lsls	r3, r3, #1
  405ce2:	461a      	mov	r2, r3
  405ce4:	69bb      	ldr	r3, [r7, #24]
  405ce6:	f003 030f 	and.w	r3, r3, #15
  405cea:	441a      	add	r2, r3
  405cec:	683b      	ldr	r3, [r7, #0]
  405cee:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  405cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  405cf2:	2b00      	cmp	r3, #0
  405cf4:	d005      	beq.n	405d02 <rtc_get_date+0xdc>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  405cf6:	69fb      	ldr	r3, [r7, #28]
  405cf8:	0d5b      	lsrs	r3, r3, #21
  405cfa:	f003 0207 	and.w	r2, r3, #7
  405cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  405d00:	601a      	str	r2, [r3, #0]
	}
}
  405d02:	bf00      	nop
  405d04:	3724      	adds	r7, #36	; 0x24
  405d06:	46bd      	mov	sp, r7
  405d08:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d0c:	4770      	bx	lr

00405d0e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  405d0e:	b480      	push	{r7}
  405d10:	af00      	add	r7, sp, #0
	while (1) {
  405d12:	e7fe      	b.n	405d12 <Dummy_Handler+0x4>

00405d14 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  405d14:	b480      	push	{r7}
  405d16:	b083      	sub	sp, #12
  405d18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  405d1a:	f3ef 8310 	mrs	r3, PRIMASK
  405d1e:	607b      	str	r3, [r7, #4]
  return(result);
  405d20:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405d22:	2b00      	cmp	r3, #0
  405d24:	bf0c      	ite	eq
  405d26:	2301      	moveq	r3, #1
  405d28:	2300      	movne	r3, #0
  405d2a:	b2db      	uxtb	r3, r3
  405d2c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  405d2e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  405d30:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405d34:	4b04      	ldr	r3, [pc, #16]	; (405d48 <cpu_irq_save+0x34>)
  405d36:	2200      	movs	r2, #0
  405d38:	701a      	strb	r2, [r3, #0]
	return flags;
  405d3a:	683b      	ldr	r3, [r7, #0]
}
  405d3c:	4618      	mov	r0, r3
  405d3e:	370c      	adds	r7, #12
  405d40:	46bd      	mov	sp, r7
  405d42:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d46:	4770      	bx	lr
  405d48:	20000018 	.word	0x20000018

00405d4c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  405d4c:	b480      	push	{r7}
  405d4e:	b083      	sub	sp, #12
  405d50:	af00      	add	r7, sp, #0
  405d52:	6078      	str	r0, [r7, #4]
	return (flags);
  405d54:	687b      	ldr	r3, [r7, #4]
  405d56:	2b00      	cmp	r3, #0
  405d58:	bf14      	ite	ne
  405d5a:	2301      	movne	r3, #1
  405d5c:	2300      	moveq	r3, #0
  405d5e:	b2db      	uxtb	r3, r3
}
  405d60:	4618      	mov	r0, r3
  405d62:	370c      	adds	r7, #12
  405d64:	46bd      	mov	sp, r7
  405d66:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d6a:	4770      	bx	lr

00405d6c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  405d6c:	b580      	push	{r7, lr}
  405d6e:	b082      	sub	sp, #8
  405d70:	af00      	add	r7, sp, #0
  405d72:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  405d74:	6878      	ldr	r0, [r7, #4]
  405d76:	4b07      	ldr	r3, [pc, #28]	; (405d94 <cpu_irq_restore+0x28>)
  405d78:	4798      	blx	r3
  405d7a:	4603      	mov	r3, r0
  405d7c:	2b00      	cmp	r3, #0
  405d7e:	d005      	beq.n	405d8c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  405d80:	4b05      	ldr	r3, [pc, #20]	; (405d98 <cpu_irq_restore+0x2c>)
  405d82:	2201      	movs	r2, #1
  405d84:	701a      	strb	r2, [r3, #0]
  405d86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405d8a:	b662      	cpsie	i
}
  405d8c:	bf00      	nop
  405d8e:	3708      	adds	r7, #8
  405d90:	46bd      	mov	sp, r7
  405d92:	bd80      	pop	{r7, pc}
  405d94:	00405d4d 	.word	0x00405d4d
  405d98:	20000018 	.word	0x20000018

00405d9c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  405d9c:	b580      	push	{r7, lr}
  405d9e:	b084      	sub	sp, #16
  405da0:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  405da2:	4b1e      	ldr	r3, [pc, #120]	; (405e1c <Reset_Handler+0x80>)
  405da4:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  405da6:	4b1e      	ldr	r3, [pc, #120]	; (405e20 <Reset_Handler+0x84>)
  405da8:	60bb      	str	r3, [r7, #8]

	if (pSrc != pDest) {
  405daa:	68fa      	ldr	r2, [r7, #12]
  405dac:	68bb      	ldr	r3, [r7, #8]
  405dae:	429a      	cmp	r2, r3
  405db0:	d00c      	beq.n	405dcc <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  405db2:	e007      	b.n	405dc4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  405db4:	68bb      	ldr	r3, [r7, #8]
  405db6:	1d1a      	adds	r2, r3, #4
  405db8:	60ba      	str	r2, [r7, #8]
  405dba:	68fa      	ldr	r2, [r7, #12]
  405dbc:	1d11      	adds	r1, r2, #4
  405dbe:	60f9      	str	r1, [r7, #12]
  405dc0:	6812      	ldr	r2, [r2, #0]
  405dc2:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  405dc4:	68bb      	ldr	r3, [r7, #8]
  405dc6:	4a17      	ldr	r2, [pc, #92]	; (405e24 <Reset_Handler+0x88>)
  405dc8:	4293      	cmp	r3, r2
  405dca:	d3f3      	bcc.n	405db4 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  405dcc:	4b16      	ldr	r3, [pc, #88]	; (405e28 <Reset_Handler+0x8c>)
  405dce:	60bb      	str	r3, [r7, #8]
  405dd0:	e004      	b.n	405ddc <Reset_Handler+0x40>
		*pDest++ = 0;
  405dd2:	68bb      	ldr	r3, [r7, #8]
  405dd4:	1d1a      	adds	r2, r3, #4
  405dd6:	60ba      	str	r2, [r7, #8]
  405dd8:	2200      	movs	r2, #0
  405dda:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  405ddc:	68bb      	ldr	r3, [r7, #8]
  405dde:	4a13      	ldr	r2, [pc, #76]	; (405e2c <Reset_Handler+0x90>)
  405de0:	4293      	cmp	r3, r2
  405de2:	d3f6      	bcc.n	405dd2 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  405de4:	4b12      	ldr	r3, [pc, #72]	; (405e30 <Reset_Handler+0x94>)
  405de6:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  405de8:	4a12      	ldr	r2, [pc, #72]	; (405e34 <Reset_Handler+0x98>)
  405dea:	68fb      	ldr	r3, [r7, #12]
  405dec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405df0:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  405df2:	4b11      	ldr	r3, [pc, #68]	; (405e38 <Reset_Handler+0x9c>)
  405df4:	4798      	blx	r3
  405df6:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  405df8:	4a10      	ldr	r2, [pc, #64]	; (405e3c <Reset_Handler+0xa0>)
  405dfa:	4b10      	ldr	r3, [pc, #64]	; (405e3c <Reset_Handler+0xa0>)
  405dfc:	681b      	ldr	r3, [r3, #0]
  405dfe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  405e02:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  405e04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  405e08:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  405e0c:	6878      	ldr	r0, [r7, #4]
  405e0e:	4b0c      	ldr	r3, [pc, #48]	; (405e40 <Reset_Handler+0xa4>)
  405e10:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  405e12:	4b0c      	ldr	r3, [pc, #48]	; (405e44 <Reset_Handler+0xa8>)
  405e14:	4798      	blx	r3

	/* Branch to main function */
	main();
  405e16:	4b0c      	ldr	r3, [pc, #48]	; (405e48 <Reset_Handler+0xac>)
  405e18:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  405e1a:	e7fe      	b.n	405e1a <Reset_Handler+0x7e>
  405e1c:	0040f86c 	.word	0x0040f86c
  405e20:	20000000 	.word	0x20000000
  405e24:	200009d0 	.word	0x200009d0
  405e28:	200009d0 	.word	0x200009d0
  405e2c:	2000acf8 	.word	0x2000acf8
  405e30:	00400000 	.word	0x00400000
  405e34:	e000ed00 	.word	0xe000ed00
  405e38:	00405d15 	.word	0x00405d15
  405e3c:	e000ed88 	.word	0xe000ed88
  405e40:	00405d6d 	.word	0x00405d6d
  405e44:	0040a141 	.word	0x0040a141
  405e48:	00408e05 	.word	0x00408e05

00405e4c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  405e4c:	b480      	push	{r7}
  405e4e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  405e50:	4b52      	ldr	r3, [pc, #328]	; (405f9c <SystemCoreClockUpdate+0x150>)
  405e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405e54:	f003 0303 	and.w	r3, r3, #3
  405e58:	2b01      	cmp	r3, #1
  405e5a:	d014      	beq.n	405e86 <SystemCoreClockUpdate+0x3a>
  405e5c:	2b01      	cmp	r3, #1
  405e5e:	d302      	bcc.n	405e66 <SystemCoreClockUpdate+0x1a>
  405e60:	2b02      	cmp	r3, #2
  405e62:	d038      	beq.n	405ed6 <SystemCoreClockUpdate+0x8a>
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
		}
		break;

	default:
		break;
  405e64:	e07a      	b.n	405f5c <SystemCoreClockUpdate+0x110>
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  405e66:	4b4e      	ldr	r3, [pc, #312]	; (405fa0 <SystemCoreClockUpdate+0x154>)
  405e68:	695b      	ldr	r3, [r3, #20]
  405e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405e6e:	2b00      	cmp	r3, #0
  405e70:	d004      	beq.n	405e7c <SystemCoreClockUpdate+0x30>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405e72:	4b4c      	ldr	r3, [pc, #304]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405e74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405e78:	601a      	str	r2, [r3, #0]
		break;
  405e7a:	e06f      	b.n	405f5c <SystemCoreClockUpdate+0x110>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405e7c:	4b49      	ldr	r3, [pc, #292]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405e7e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  405e82:	601a      	str	r2, [r3, #0]
		break;
  405e84:	e06a      	b.n	405f5c <SystemCoreClockUpdate+0x110>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  405e86:	4b45      	ldr	r3, [pc, #276]	; (405f9c <SystemCoreClockUpdate+0x150>)
  405e88:	6a1b      	ldr	r3, [r3, #32]
  405e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  405e8e:	2b00      	cmp	r3, #0
  405e90:	d003      	beq.n	405e9a <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  405e92:	4b44      	ldr	r3, [pc, #272]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405e94:	4a44      	ldr	r2, [pc, #272]	; (405fa8 <SystemCoreClockUpdate+0x15c>)
  405e96:	601a      	str	r2, [r3, #0]
		break;
  405e98:	e060      	b.n	405f5c <SystemCoreClockUpdate+0x110>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405e9a:	4b42      	ldr	r3, [pc, #264]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405e9c:	4a43      	ldr	r2, [pc, #268]	; (405fac <SystemCoreClockUpdate+0x160>)
  405e9e:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  405ea0:	4b3e      	ldr	r3, [pc, #248]	; (405f9c <SystemCoreClockUpdate+0x150>)
  405ea2:	6a1b      	ldr	r3, [r3, #32]
  405ea4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405ea8:	2b10      	cmp	r3, #16
  405eaa:	d004      	beq.n	405eb6 <SystemCoreClockUpdate+0x6a>
  405eac:	2b20      	cmp	r3, #32
  405eae:	d008      	beq.n	405ec2 <SystemCoreClockUpdate+0x76>
  405eb0:	2b00      	cmp	r3, #0
  405eb2:	d00e      	beq.n	405ed2 <SystemCoreClockUpdate+0x86>
				break;
  405eb4:	e00e      	b.n	405ed4 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 2U;
  405eb6:	4b3b      	ldr	r3, [pc, #236]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405eb8:	681b      	ldr	r3, [r3, #0]
  405eba:	005b      	lsls	r3, r3, #1
  405ebc:	4a39      	ldr	r2, [pc, #228]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405ebe:	6013      	str	r3, [r2, #0]
				break;
  405ec0:	e008      	b.n	405ed4 <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 3U;
  405ec2:	4b38      	ldr	r3, [pc, #224]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405ec4:	681a      	ldr	r2, [r3, #0]
  405ec6:	4613      	mov	r3, r2
  405ec8:	005b      	lsls	r3, r3, #1
  405eca:	4413      	add	r3, r2
  405ecc:	4a35      	ldr	r2, [pc, #212]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405ece:	6013      	str	r3, [r2, #0]
				break;
  405ed0:	e000      	b.n	405ed4 <SystemCoreClockUpdate+0x88>
				break;
  405ed2:	bf00      	nop
		break;
  405ed4:	e042      	b.n	405f5c <SystemCoreClockUpdate+0x110>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  405ed6:	4b31      	ldr	r3, [pc, #196]	; (405f9c <SystemCoreClockUpdate+0x150>)
  405ed8:	6a1b      	ldr	r3, [r3, #32]
  405eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  405ede:	2b00      	cmp	r3, #0
  405ee0:	d003      	beq.n	405eea <SystemCoreClockUpdate+0x9e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  405ee2:	4b30      	ldr	r3, [pc, #192]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405ee4:	4a30      	ldr	r2, [pc, #192]	; (405fa8 <SystemCoreClockUpdate+0x15c>)
  405ee6:	601a      	str	r2, [r3, #0]
  405ee8:	e01c      	b.n	405f24 <SystemCoreClockUpdate+0xd8>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405eea:	4b2e      	ldr	r3, [pc, #184]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405eec:	4a2f      	ldr	r2, [pc, #188]	; (405fac <SystemCoreClockUpdate+0x160>)
  405eee:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  405ef0:	4b2a      	ldr	r3, [pc, #168]	; (405f9c <SystemCoreClockUpdate+0x150>)
  405ef2:	6a1b      	ldr	r3, [r3, #32]
  405ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405ef8:	2b10      	cmp	r3, #16
  405efa:	d004      	beq.n	405f06 <SystemCoreClockUpdate+0xba>
  405efc:	2b20      	cmp	r3, #32
  405efe:	d008      	beq.n	405f12 <SystemCoreClockUpdate+0xc6>
  405f00:	2b00      	cmp	r3, #0
  405f02:	d00e      	beq.n	405f22 <SystemCoreClockUpdate+0xd6>
				break;
  405f04:	e00e      	b.n	405f24 <SystemCoreClockUpdate+0xd8>
				SystemCoreClock *= 2U;
  405f06:	4b27      	ldr	r3, [pc, #156]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f08:	681b      	ldr	r3, [r3, #0]
  405f0a:	005b      	lsls	r3, r3, #1
  405f0c:	4a25      	ldr	r2, [pc, #148]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f0e:	6013      	str	r3, [r2, #0]
				break;
  405f10:	e008      	b.n	405f24 <SystemCoreClockUpdate+0xd8>
				SystemCoreClock *= 3U;
  405f12:	4b24      	ldr	r3, [pc, #144]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f14:	681a      	ldr	r2, [r3, #0]
  405f16:	4613      	mov	r3, r2
  405f18:	005b      	lsls	r3, r3, #1
  405f1a:	4413      	add	r3, r2
  405f1c:	4a21      	ldr	r2, [pc, #132]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f1e:	6013      	str	r3, [r2, #0]
				break;
  405f20:	e000      	b.n	405f24 <SystemCoreClockUpdate+0xd8>
				break;
  405f22:	bf00      	nop
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  405f24:	4b1d      	ldr	r3, [pc, #116]	; (405f9c <SystemCoreClockUpdate+0x150>)
  405f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405f28:	f003 0303 	and.w	r3, r3, #3
  405f2c:	2b02      	cmp	r3, #2
  405f2e:	d114      	bne.n	405f5a <SystemCoreClockUpdate+0x10e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405f30:	4b1a      	ldr	r3, [pc, #104]	; (405f9c <SystemCoreClockUpdate+0x150>)
  405f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  405f34:	0c1b      	lsrs	r3, r3, #16
  405f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
  405f3a:	3301      	adds	r3, #1
  405f3c:	4a19      	ldr	r2, [pc, #100]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f3e:	6812      	ldr	r2, [r2, #0]
  405f40:	fb02 f303 	mul.w	r3, r2, r3
  405f44:	4a17      	ldr	r2, [pc, #92]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f46:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405f48:	4b14      	ldr	r3, [pc, #80]	; (405f9c <SystemCoreClockUpdate+0x150>)
  405f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  405f4c:	b2db      	uxtb	r3, r3
  405f4e:	4a15      	ldr	r2, [pc, #84]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f50:	6812      	ldr	r2, [r2, #0]
  405f52:	fbb2 f3f3 	udiv	r3, r2, r3
  405f56:	4a13      	ldr	r2, [pc, #76]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f58:	6013      	str	r3, [r2, #0]
		break;
  405f5a:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  405f5c:	4b0f      	ldr	r3, [pc, #60]	; (405f9c <SystemCoreClockUpdate+0x150>)
  405f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405f60:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405f64:	2b70      	cmp	r3, #112	; 0x70
  405f66:	d108      	bne.n	405f7a <SystemCoreClockUpdate+0x12e>
		SystemCoreClock /= 3U;
  405f68:	4b0e      	ldr	r3, [pc, #56]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f6a:	681b      	ldr	r3, [r3, #0]
  405f6c:	4a10      	ldr	r2, [pc, #64]	; (405fb0 <SystemCoreClockUpdate+0x164>)
  405f6e:	fba2 2303 	umull	r2, r3, r2, r3
  405f72:	085b      	lsrs	r3, r3, #1
  405f74:	4a0b      	ldr	r2, [pc, #44]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f76:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
				PMC_MCKR_PRES_Pos);
	}
}
  405f78:	e00a      	b.n	405f90 <SystemCoreClockUpdate+0x144>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  405f7a:	4b08      	ldr	r3, [pc, #32]	; (405f9c <SystemCoreClockUpdate+0x150>)
  405f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405f7e:	091b      	lsrs	r3, r3, #4
  405f80:	f003 0307 	and.w	r3, r3, #7
  405f84:	4a07      	ldr	r2, [pc, #28]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f86:	6812      	ldr	r2, [r2, #0]
  405f88:	fa22 f303 	lsr.w	r3, r2, r3
  405f8c:	4a05      	ldr	r2, [pc, #20]	; (405fa4 <SystemCoreClockUpdate+0x158>)
  405f8e:	6013      	str	r3, [r2, #0]
}
  405f90:	bf00      	nop
  405f92:	46bd      	mov	sp, r7
  405f94:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f98:	4770      	bx	lr
  405f9a:	bf00      	nop
  405f9c:	400e0400 	.word	0x400e0400
  405fa0:	400e1810 	.word	0x400e1810
  405fa4:	2000001c 	.word	0x2000001c
  405fa8:	00b71b00 	.word	0x00b71b00
  405fac:	003d0900 	.word	0x003d0900
  405fb0:	aaaaaaab 	.word	0xaaaaaaab

00405fb4 <system_init_flash>:

/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  405fb4:	b480      	push	{r7}
  405fb6:	b083      	sub	sp, #12
  405fb8:	af00      	add	r7, sp, #0
  405fba:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  405fbc:	687b      	ldr	r3, [r7, #4]
  405fbe:	4a19      	ldr	r2, [pc, #100]	; (406024 <system_init_flash+0x70>)
  405fc0:	4293      	cmp	r3, r2
  405fc2:	d804      	bhi.n	405fce <system_init_flash+0x1a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  405fc4:	4b18      	ldr	r3, [pc, #96]	; (406028 <system_init_flash+0x74>)
  405fc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  405fca:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
}
  405fcc:	e023      	b.n	406016 <system_init_flash+0x62>
		if (ul_clk < CHIP_FREQ_FWS_1) {
  405fce:	687b      	ldr	r3, [r7, #4]
  405fd0:	4a16      	ldr	r2, [pc, #88]	; (40602c <system_init_flash+0x78>)
  405fd2:	4293      	cmp	r3, r2
  405fd4:	d803      	bhi.n	405fde <system_init_flash+0x2a>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  405fd6:	4b14      	ldr	r3, [pc, #80]	; (406028 <system_init_flash+0x74>)
  405fd8:	4a15      	ldr	r2, [pc, #84]	; (406030 <system_init_flash+0x7c>)
  405fda:	601a      	str	r2, [r3, #0]
}
  405fdc:	e01b      	b.n	406016 <system_init_flash+0x62>
			if (ul_clk < CHIP_FREQ_FWS_2) {
  405fde:	687b      	ldr	r3, [r7, #4]
  405fe0:	4a14      	ldr	r2, [pc, #80]	; (406034 <system_init_flash+0x80>)
  405fe2:	4293      	cmp	r3, r2
  405fe4:	d803      	bhi.n	405fee <system_init_flash+0x3a>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  405fe6:	4b10      	ldr	r3, [pc, #64]	; (406028 <system_init_flash+0x74>)
  405fe8:	4a13      	ldr	r2, [pc, #76]	; (406038 <system_init_flash+0x84>)
  405fea:	601a      	str	r2, [r3, #0]
}
  405fec:	e013      	b.n	406016 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  405fee:	687b      	ldr	r3, [r7, #4]
  405ff0:	4a12      	ldr	r2, [pc, #72]	; (40603c <system_init_flash+0x88>)
  405ff2:	4293      	cmp	r3, r2
  405ff4:	d803      	bhi.n	405ffe <system_init_flash+0x4a>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  405ff6:	4b0c      	ldr	r3, [pc, #48]	; (406028 <system_init_flash+0x74>)
  405ff8:	4a11      	ldr	r2, [pc, #68]	; (406040 <system_init_flash+0x8c>)
  405ffa:	601a      	str	r2, [r3, #0]
}
  405ffc:	e00b      	b.n	406016 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  405ffe:	687b      	ldr	r3, [r7, #4]
  406000:	4a10      	ldr	r2, [pc, #64]	; (406044 <system_init_flash+0x90>)
  406002:	4293      	cmp	r3, r2
  406004:	d804      	bhi.n	406010 <system_init_flash+0x5c>
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  406006:	4b08      	ldr	r3, [pc, #32]	; (406028 <system_init_flash+0x74>)
  406008:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40600c:	601a      	str	r2, [r3, #0]
}
  40600e:	e002      	b.n	406016 <system_init_flash+0x62>
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  406010:	4b05      	ldr	r3, [pc, #20]	; (406028 <system_init_flash+0x74>)
  406012:	4a0d      	ldr	r2, [pc, #52]	; (406048 <system_init_flash+0x94>)
  406014:	601a      	str	r2, [r3, #0]
}
  406016:	bf00      	nop
  406018:	370c      	adds	r7, #12
  40601a:	46bd      	mov	sp, r7
  40601c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406020:	4770      	bx	lr
  406022:	bf00      	nop
  406024:	01312cff 	.word	0x01312cff
  406028:	400e0a00 	.word	0x400e0a00
  40602c:	026259ff 	.word	0x026259ff
  406030:	04000100 	.word	0x04000100
  406034:	039386ff 	.word	0x039386ff
  406038:	04000200 	.word	0x04000200
  40603c:	04c4b3ff 	.word	0x04c4b3ff
  406040:	04000300 	.word	0x04000300
  406044:	05f5e0ff 	.word	0x05f5e0ff
  406048:	04000500 	.word	0x04000500

0040604c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  40604c:	b480      	push	{r7}
  40604e:	b085      	sub	sp, #20
  406050:	af00      	add	r7, sp, #0
  406052:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  406054:	4b10      	ldr	r3, [pc, #64]	; (406098 <_sbrk+0x4c>)
  406056:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  406058:	4b10      	ldr	r3, [pc, #64]	; (40609c <_sbrk+0x50>)
  40605a:	681b      	ldr	r3, [r3, #0]
  40605c:	2b00      	cmp	r3, #0
  40605e:	d102      	bne.n	406066 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  406060:	4b0e      	ldr	r3, [pc, #56]	; (40609c <_sbrk+0x50>)
  406062:	4a0f      	ldr	r2, [pc, #60]	; (4060a0 <_sbrk+0x54>)
  406064:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  406066:	4b0d      	ldr	r3, [pc, #52]	; (40609c <_sbrk+0x50>)
  406068:	681b      	ldr	r3, [r3, #0]
  40606a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  40606c:	68ba      	ldr	r2, [r7, #8]
  40606e:	687b      	ldr	r3, [r7, #4]
  406070:	441a      	add	r2, r3
  406072:	68fb      	ldr	r3, [r7, #12]
  406074:	429a      	cmp	r2, r3
  406076:	dd02      	ble.n	40607e <_sbrk+0x32>
		return (caddr_t) -1;	
  406078:	f04f 33ff 	mov.w	r3, #4294967295
  40607c:	e006      	b.n	40608c <_sbrk+0x40>
	}

	heap += incr;
  40607e:	4b07      	ldr	r3, [pc, #28]	; (40609c <_sbrk+0x50>)
  406080:	681a      	ldr	r2, [r3, #0]
  406082:	687b      	ldr	r3, [r7, #4]
  406084:	4413      	add	r3, r2
  406086:	4a05      	ldr	r2, [pc, #20]	; (40609c <_sbrk+0x50>)
  406088:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  40608a:	68bb      	ldr	r3, [r7, #8]
}
  40608c:	4618      	mov	r0, r3
  40608e:	3714      	adds	r7, #20
  406090:	46bd      	mov	sp, r7
  406092:	f85d 7b04 	ldr.w	r7, [sp], #4
  406096:	4770      	bx	lr
  406098:	2001fffc 	.word	0x2001fffc
  40609c:	2000ac08 	.word	0x2000ac08
  4060a0:	2000dcf8 	.word	0x2000dcf8

004060a4 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  4060a4:	b580      	push	{r7, lr}
  4060a6:	b084      	sub	sp, #16
  4060a8:	af00      	add	r7, sp, #0
  4060aa:	4603      	mov	r3, r0
  4060ac:	71fb      	strb	r3, [r7, #7]
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  4060ae:	79fb      	ldrb	r3, [r7, #7]
  4060b0:	2b02      	cmp	r3, #2
  4060b2:	d901      	bls.n	4060b8 <disk_initialize+0x14>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  4060b4:	2301      	movs	r3, #1
  4060b6:	e022      	b.n	4060fe <disk_initialize+0x5a>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
  4060b8:	2300      	movs	r3, #0
  4060ba:	60fb      	str	r3, [r7, #12]
  4060bc:	e00b      	b.n	4060d6 <disk_initialize+0x32>
		mem_status = mem_test_unit_ready(drv);
  4060be:	79fb      	ldrb	r3, [r7, #7]
  4060c0:	4618      	mov	r0, r3
  4060c2:	4b11      	ldr	r3, [pc, #68]	; (406108 <disk_initialize+0x64>)
  4060c4:	4798      	blx	r3
  4060c6:	4603      	mov	r3, r0
  4060c8:	72fb      	strb	r3, [r7, #11]
		if (CTRL_BUSY != mem_status) {
  4060ca:	7afb      	ldrb	r3, [r7, #11]
  4060cc:	2b03      	cmp	r3, #3
  4060ce:	d106      	bne.n	4060de <disk_initialize+0x3a>
	for (i = 0; i < 2; i ++) {
  4060d0:	68fb      	ldr	r3, [r7, #12]
  4060d2:	3301      	adds	r3, #1
  4060d4:	60fb      	str	r3, [r7, #12]
  4060d6:	68fb      	ldr	r3, [r7, #12]
  4060d8:	2b01      	cmp	r3, #1
  4060da:	ddf0      	ble.n	4060be <disk_initialize+0x1a>
  4060dc:	e000      	b.n	4060e0 <disk_initialize+0x3c>
			break;
  4060de:	bf00      	nop
		}
	}
	if (mem_status != CTRL_GOOD) {
  4060e0:	7afb      	ldrb	r3, [r7, #11]
  4060e2:	2b00      	cmp	r3, #0
  4060e4:	d001      	beq.n	4060ea <disk_initialize+0x46>
		return STA_NOINIT;
  4060e6:	2301      	movs	r3, #1
  4060e8:	e009      	b.n	4060fe <disk_initialize+0x5a>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  4060ea:	79fb      	ldrb	r3, [r7, #7]
  4060ec:	4618      	mov	r0, r3
  4060ee:	4b07      	ldr	r3, [pc, #28]	; (40610c <disk_initialize+0x68>)
  4060f0:	4798      	blx	r3
  4060f2:	4603      	mov	r3, r0
  4060f4:	2b00      	cmp	r3, #0
  4060f6:	d001      	beq.n	4060fc <disk_initialize+0x58>
		return STA_PROTECT;
  4060f8:	2304      	movs	r3, #4
  4060fa:	e000      	b.n	4060fe <disk_initialize+0x5a>
	}

	/* The memory should already be initialized */
	return 0;
  4060fc:	2300      	movs	r3, #0
}
  4060fe:	4618      	mov	r0, r3
  406100:	3710      	adds	r7, #16
  406102:	46bd      	mov	sp, r7
  406104:	bd80      	pop	{r7, pc}
  406106:	bf00      	nop
  406108:	00404c51 	.word	0x00404c51
  40610c:	00404ce5 	.word	0x00404ce5

00406110 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  406110:	b580      	push	{r7, lr}
  406112:	b082      	sub	sp, #8
  406114:	af00      	add	r7, sp, #0
  406116:	4603      	mov	r3, r0
  406118:	71fb      	strb	r3, [r7, #7]
	switch (mem_test_unit_ready(drv)) {
  40611a:	79fb      	ldrb	r3, [r7, #7]
  40611c:	4618      	mov	r0, r3
  40611e:	4b08      	ldr	r3, [pc, #32]	; (406140 <disk_status+0x30>)
  406120:	4798      	blx	r3
  406122:	4603      	mov	r3, r0
  406124:	2b00      	cmp	r3, #0
  406126:	d002      	beq.n	40612e <disk_status+0x1e>
  406128:	2b02      	cmp	r3, #2
  40612a:	d002      	beq.n	406132 <disk_status+0x22>
  40612c:	e003      	b.n	406136 <disk_status+0x26>
	case CTRL_GOOD:
		return 0;
  40612e:	2300      	movs	r3, #0
  406130:	e002      	b.n	406138 <disk_status+0x28>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
  406132:	2303      	movs	r3, #3
  406134:	e000      	b.n	406138 <disk_status+0x28>
	default:
		return STA_NOINIT;
  406136:	2301      	movs	r3, #1
	}
}
  406138:	4618      	mov	r0, r3
  40613a:	3708      	adds	r7, #8
  40613c:	46bd      	mov	sp, r7
  40613e:	bd80      	pop	{r7, pc}
  406140:	00404c51 	.word	0x00404c51

00406144 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  406144:	b580      	push	{r7, lr}
  406146:	b088      	sub	sp, #32
  406148:	af00      	add	r7, sp, #0
  40614a:	60b9      	str	r1, [r7, #8]
  40614c:	607a      	str	r2, [r7, #4]
  40614e:	461a      	mov	r2, r3
  406150:	4603      	mov	r3, r0
  406152:	73fb      	strb	r3, [r7, #15]
  406154:	4613      	mov	r3, r2
  406156:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  406158:	7bfb      	ldrb	r3, [r7, #15]
  40615a:	4618      	mov	r0, r3
  40615c:	4b22      	ldr	r3, [pc, #136]	; (4061e8 <disk_read+0xa4>)
  40615e:	4798      	blx	r3
  406160:	4603      	mov	r3, r0
  406162:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  406164:	7efb      	ldrb	r3, [r7, #27]
  406166:	2b00      	cmp	r3, #0
  406168:	d101      	bne.n	40616e <disk_read+0x2a>
		return RES_ERROR;
  40616a:	2301      	movs	r3, #1
  40616c:	e037      	b.n	4061de <disk_read+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  40616e:	f107 0214 	add.w	r2, r7, #20
  406172:	7bfb      	ldrb	r3, [r7, #15]
  406174:	4611      	mov	r1, r2
  406176:	4618      	mov	r0, r3
  406178:	4b1c      	ldr	r3, [pc, #112]	; (4061ec <disk_read+0xa8>)
  40617a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
  40617c:	7bbb      	ldrb	r3, [r7, #14]
  40617e:	7efa      	ldrb	r2, [r7, #27]
  406180:	fb02 f303 	mul.w	r3, r2, r3
  406184:	461a      	mov	r2, r3
  406186:	687b      	ldr	r3, [r7, #4]
  406188:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  40618a:	697b      	ldr	r3, [r7, #20]
  40618c:	3301      	adds	r3, #1
  40618e:	7ef9      	ldrb	r1, [r7, #27]
  406190:	fb01 f303 	mul.w	r3, r1, r3
	if ((sector + count * uc_sector_size) >
  406194:	429a      	cmp	r2, r3
  406196:	d901      	bls.n	40619c <disk_read+0x58>
		return RES_PARERR;
  406198:	2304      	movs	r3, #4
  40619a:	e020      	b.n	4061de <disk_read+0x9a>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  40619c:	2300      	movs	r3, #0
  40619e:	61fb      	str	r3, [r7, #28]
  4061a0:	e018      	b.n	4061d4 <disk_read+0x90>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  4061a2:	7efb      	ldrb	r3, [r7, #27]
  4061a4:	69fa      	ldr	r2, [r7, #28]
  4061a6:	fb02 f203 	mul.w	r2, r2, r3
  4061aa:	687b      	ldr	r3, [r7, #4]
  4061ac:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
  4061ae:	7efb      	ldrb	r3, [r7, #27]
  4061b0:	69fa      	ldr	r2, [r7, #28]
  4061b2:	fb02 f303 	mul.w	r3, r2, r3
  4061b6:	025b      	lsls	r3, r3, #9
  4061b8:	68ba      	ldr	r2, [r7, #8]
  4061ba:	441a      	add	r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  4061bc:	7bfb      	ldrb	r3, [r7, #15]
  4061be:	4618      	mov	r0, r3
  4061c0:	4b0b      	ldr	r3, [pc, #44]	; (4061f0 <disk_read+0xac>)
  4061c2:	4798      	blx	r3
  4061c4:	4603      	mov	r3, r0
  4061c6:	2b00      	cmp	r3, #0
  4061c8:	d001      	beq.n	4061ce <disk_read+0x8a>
				CTRL_GOOD) {
			return RES_ERROR;
  4061ca:	2301      	movs	r3, #1
  4061cc:	e007      	b.n	4061de <disk_read+0x9a>
	for (i = 0; i < count; i++) {
  4061ce:	69fb      	ldr	r3, [r7, #28]
  4061d0:	3301      	adds	r3, #1
  4061d2:	61fb      	str	r3, [r7, #28]
  4061d4:	7bba      	ldrb	r2, [r7, #14]
  4061d6:	69fb      	ldr	r3, [r7, #28]
  4061d8:	429a      	cmp	r2, r3
  4061da:	d8e2      	bhi.n	4061a2 <disk_read+0x5e>
		}
	}

	return RES_OK;
  4061dc:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
  4061de:	4618      	mov	r0, r3
  4061e0:	3720      	adds	r7, #32
  4061e2:	46bd      	mov	sp, r7
  4061e4:	bd80      	pop	{r7, pc}
  4061e6:	bf00      	nop
  4061e8:	00404cbd 	.word	0x00404cbd
  4061ec:	00404c85 	.word	0x00404c85
  4061f0:	00404d21 	.word	0x00404d21

004061f4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  4061f4:	b580      	push	{r7, lr}
  4061f6:	b088      	sub	sp, #32
  4061f8:	af00      	add	r7, sp, #0
  4061fa:	60b9      	str	r1, [r7, #8]
  4061fc:	607a      	str	r2, [r7, #4]
  4061fe:	461a      	mov	r2, r3
  406200:	4603      	mov	r3, r0
  406202:	73fb      	strb	r3, [r7, #15]
  406204:	4613      	mov	r3, r2
  406206:	73bb      	strb	r3, [r7, #14]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  406208:	7bfb      	ldrb	r3, [r7, #15]
  40620a:	4618      	mov	r0, r3
  40620c:	4b22      	ldr	r3, [pc, #136]	; (406298 <disk_write+0xa4>)
  40620e:	4798      	blx	r3
  406210:	4603      	mov	r3, r0
  406212:	76fb      	strb	r3, [r7, #27]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  406214:	7efb      	ldrb	r3, [r7, #27]
  406216:	2b00      	cmp	r3, #0
  406218:	d101      	bne.n	40621e <disk_write+0x2a>
		return RES_ERROR;
  40621a:	2301      	movs	r3, #1
  40621c:	e037      	b.n	40628e <disk_write+0x9a>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  40621e:	f107 0214 	add.w	r2, r7, #20
  406222:	7bfb      	ldrb	r3, [r7, #15]
  406224:	4611      	mov	r1, r2
  406226:	4618      	mov	r0, r3
  406228:	4b1c      	ldr	r3, [pc, #112]	; (40629c <disk_write+0xa8>)
  40622a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
  40622c:	7bbb      	ldrb	r3, [r7, #14]
  40622e:	7efa      	ldrb	r2, [r7, #27]
  406230:	fb02 f303 	mul.w	r3, r2, r3
  406234:	461a      	mov	r2, r3
  406236:	687b      	ldr	r3, [r7, #4]
  406238:	441a      	add	r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  40623a:	697b      	ldr	r3, [r7, #20]
  40623c:	3301      	adds	r3, #1
  40623e:	7ef9      	ldrb	r1, [r7, #27]
  406240:	fb01 f303 	mul.w	r3, r1, r3
	if ((sector + count * uc_sector_size) >
  406244:	429a      	cmp	r2, r3
  406246:	d901      	bls.n	40624c <disk_write+0x58>
		return RES_PARERR;
  406248:	2304      	movs	r3, #4
  40624a:	e020      	b.n	40628e <disk_write+0x9a>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  40624c:	2300      	movs	r3, #0
  40624e:	61fb      	str	r3, [r7, #28]
  406250:	e018      	b.n	406284 <disk_write+0x90>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  406252:	7efb      	ldrb	r3, [r7, #27]
  406254:	69fa      	ldr	r2, [r7, #28]
  406256:	fb02 f203 	mul.w	r2, r2, r3
  40625a:	687b      	ldr	r3, [r7, #4]
  40625c:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
  40625e:	7efb      	ldrb	r3, [r7, #27]
  406260:	69fa      	ldr	r2, [r7, #28]
  406262:	fb02 f303 	mul.w	r3, r2, r3
  406266:	025b      	lsls	r3, r3, #9
  406268:	68ba      	ldr	r2, [r7, #8]
  40626a:	441a      	add	r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  40626c:	7bfb      	ldrb	r3, [r7, #15]
  40626e:	4618      	mov	r0, r3
  406270:	4b0b      	ldr	r3, [pc, #44]	; (4062a0 <disk_write+0xac>)
  406272:	4798      	blx	r3
  406274:	4603      	mov	r3, r0
  406276:	2b00      	cmp	r3, #0
  406278:	d001      	beq.n	40627e <disk_write+0x8a>
				CTRL_GOOD) {
			return RES_ERROR;
  40627a:	2301      	movs	r3, #1
  40627c:	e007      	b.n	40628e <disk_write+0x9a>
	for (i = 0; i < count; i++) {
  40627e:	69fb      	ldr	r3, [r7, #28]
  406280:	3301      	adds	r3, #1
  406282:	61fb      	str	r3, [r7, #28]
  406284:	7bba      	ldrb	r2, [r7, #14]
  406286:	69fb      	ldr	r3, [r7, #28]
  406288:	429a      	cmp	r2, r3
  40628a:	d8e2      	bhi.n	406252 <disk_write+0x5e>
		}
	}

	return RES_OK;
  40628c:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
  40628e:	4618      	mov	r0, r3
  406290:	3720      	adds	r7, #32
  406292:	46bd      	mov	sp, r7
  406294:	bd80      	pop	{r7, pc}
  406296:	bf00      	nop
  406298:	00404cbd 	.word	0x00404cbd
  40629c:	00404c85 	.word	0x00404c85
  4062a0:	00404d5d 	.word	0x00404d5d

004062a4 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  4062a4:	b580      	push	{r7, lr}
  4062a6:	b084      	sub	sp, #16
  4062a8:	af00      	add	r7, sp, #0
  4062aa:	4603      	mov	r3, r0
  4062ac:	603a      	str	r2, [r7, #0]
  4062ae:	71fb      	strb	r3, [r7, #7]
  4062b0:	460b      	mov	r3, r1
  4062b2:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
  4062b4:	2304      	movs	r3, #4
  4062b6:	73fb      	strb	r3, [r7, #15]

	switch (ctrl) {
  4062b8:	79bb      	ldrb	r3, [r7, #6]
  4062ba:	2b03      	cmp	r3, #3
  4062bc:	d845      	bhi.n	40634a <disk_ioctl+0xa6>
  4062be:	a201      	add	r2, pc, #4	; (adr r2, 4062c4 <disk_ioctl+0x20>)
  4062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4062c4:	00406331 	.word	0x00406331
  4062c8:	004062e1 	.word	0x004062e1
  4062cc:	004062fd 	.word	0x004062fd
  4062d0:	004062d5 	.word	0x004062d5
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  4062d4:	683b      	ldr	r3, [r7, #0]
  4062d6:	2201      	movs	r2, #1
  4062d8:	601a      	str	r2, [r3, #0]
		res = RES_OK;
  4062da:	2300      	movs	r3, #0
  4062dc:	73fb      	strb	r3, [r7, #15]
		break;
  4062de:	e036      	b.n	40634e <disk_ioctl+0xaa>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
  4062e0:	f107 0208 	add.w	r2, r7, #8
  4062e4:	79fb      	ldrb	r3, [r7, #7]
  4062e6:	4611      	mov	r1, r2
  4062e8:	4618      	mov	r0, r3
  4062ea:	4b1b      	ldr	r3, [pc, #108]	; (406358 <disk_ioctl+0xb4>)
  4062ec:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
  4062ee:	68bb      	ldr	r3, [r7, #8]
  4062f0:	1c5a      	adds	r2, r3, #1
  4062f2:	683b      	ldr	r3, [r7, #0]
  4062f4:	601a      	str	r2, [r3, #0]

		res = RES_OK;
  4062f6:	2300      	movs	r3, #0
  4062f8:	73fb      	strb	r3, [r7, #15]
	}
	break;
  4062fa:	e028      	b.n	40634e <disk_ioctl+0xaa>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
  4062fc:	79fb      	ldrb	r3, [r7, #7]
  4062fe:	4618      	mov	r0, r3
  406300:	4b16      	ldr	r3, [pc, #88]	; (40635c <disk_ioctl+0xb8>)
  406302:	4798      	blx	r3
  406304:	4603      	mov	r3, r0
  406306:	73bb      	strb	r3, [r7, #14]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
  406308:	7bbb      	ldrb	r3, [r7, #14]
  40630a:	2b01      	cmp	r3, #1
  40630c:	d00a      	beq.n	406324 <disk_ioctl+0x80>
  40630e:	7bbb      	ldrb	r3, [r7, #14]
  406310:	2b02      	cmp	r3, #2
  406312:	d007      	beq.n	406324 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_1024) &&
  406314:	7bbb      	ldrb	r3, [r7, #14]
  406316:	2b04      	cmp	r3, #4
  406318:	d004      	beq.n	406324 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_2048) &&
  40631a:	7bbb      	ldrb	r3, [r7, #14]
  40631c:	2b08      	cmp	r3, #8
  40631e:	d001      	beq.n	406324 <disk_ioctl+0x80>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
  406320:	2301      	movs	r3, #1
  406322:	e015      	b.n	406350 <disk_ioctl+0xac>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  406324:	683b      	ldr	r3, [r7, #0]
  406326:	2200      	movs	r2, #0
  406328:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
  40632a:	2300      	movs	r3, #0
  40632c:	73fb      	strb	r3, [r7, #15]
	}
	break;
  40632e:	e00e      	b.n	40634e <disk_ioctl+0xaa>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  406330:	79fb      	ldrb	r3, [r7, #7]
  406332:	4618      	mov	r0, r3
  406334:	4b0a      	ldr	r3, [pc, #40]	; (406360 <disk_ioctl+0xbc>)
  406336:	4798      	blx	r3
  406338:	4603      	mov	r3, r0
  40633a:	2b00      	cmp	r3, #0
  40633c:	d102      	bne.n	406344 <disk_ioctl+0xa0>
			res = RES_OK;
  40633e:	2300      	movs	r3, #0
  406340:	73fb      	strb	r3, [r7, #15]
		} else {
			res = RES_NOTRDY;
		}
		break;
  406342:	e004      	b.n	40634e <disk_ioctl+0xaa>
			res = RES_NOTRDY;
  406344:	2303      	movs	r3, #3
  406346:	73fb      	strb	r3, [r7, #15]
		break;
  406348:	e001      	b.n	40634e <disk_ioctl+0xaa>

	default:
		res = RES_PARERR;
  40634a:	2304      	movs	r3, #4
  40634c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
  40634e:	7bfb      	ldrb	r3, [r7, #15]
}
  406350:	4618      	mov	r0, r3
  406352:	3710      	adds	r7, #16
  406354:	46bd      	mov	sp, r7
  406356:	bd80      	pop	{r7, pc}
  406358:	00404c85 	.word	0x00404c85
  40635c:	00404cbd 	.word	0x00404cbd
  406360:	00404c51 	.word	0x00404c51

00406364 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  406364:	b590      	push	{r4, r7, lr}
  406366:	b08b      	sub	sp, #44	; 0x2c
  406368:	af02      	add	r7, sp, #8
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  40636a:	f107 0310 	add.w	r3, r7, #16
  40636e:	f107 0214 	add.w	r2, r7, #20
  406372:	f107 0118 	add.w	r1, r7, #24
  406376:	4813      	ldr	r0, [pc, #76]	; (4063c4 <get_fattime+0x60>)
  406378:	4c13      	ldr	r4, [pc, #76]	; (4063c8 <get_fattime+0x64>)
  40637a:	47a0      	blx	r4
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  40637c:	1d38      	adds	r0, r7, #4
  40637e:	f107 0208 	add.w	r2, r7, #8
  406382:	f107 010c 	add.w	r1, r7, #12
  406386:	463b      	mov	r3, r7
  406388:	9300      	str	r3, [sp, #0]
  40638a:	4603      	mov	r3, r0
  40638c:	480d      	ldr	r0, [pc, #52]	; (4063c4 <get_fattime+0x60>)
  40638e:	4c0f      	ldr	r4, [pc, #60]	; (4063cc <get_fattime+0x68>)
  406390:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
  406392:	68fb      	ldr	r3, [r7, #12]
  406394:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
  406398:	065a      	lsls	r2, r3, #25
			| (ul_month << 21)
  40639a:	68bb      	ldr	r3, [r7, #8]
  40639c:	055b      	lsls	r3, r3, #21
  40639e:	431a      	orrs	r2, r3
			| (ul_day << 16)
  4063a0:	687b      	ldr	r3, [r7, #4]
  4063a2:	041b      	lsls	r3, r3, #16
  4063a4:	431a      	orrs	r2, r3
			| (ul_hour << 11)
  4063a6:	69bb      	ldr	r3, [r7, #24]
  4063a8:	02db      	lsls	r3, r3, #11
  4063aa:	431a      	orrs	r2, r3
			| (ul_minute << 5)
  4063ac:	697b      	ldr	r3, [r7, #20]
  4063ae:	015b      	lsls	r3, r3, #5
  4063b0:	431a      	orrs	r2, r3
			| ((ul_second >> 1) << 0);
  4063b2:	693b      	ldr	r3, [r7, #16]
  4063b4:	085b      	lsrs	r3, r3, #1
	ul_time = ((ul_year - 1980) << 25)
  4063b6:	4313      	orrs	r3, r2
  4063b8:	61fb      	str	r3, [r7, #28]

	return ul_time;
  4063ba:	69fb      	ldr	r3, [r7, #28]
}
  4063bc:	4618      	mov	r0, r3
  4063be:	3724      	adds	r7, #36	; 0x24
  4063c0:	46bd      	mov	sp, r7
  4063c2:	bd90      	pop	{r4, r7, pc}
  4063c4:	400e1860 	.word	0x400e1860
  4063c8:	00405b63 	.word	0x00405b63
  4063cc:	00405c27 	.word	0x00405c27

004063d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
  4063d0:	b480      	push	{r7}
  4063d2:	b087      	sub	sp, #28
  4063d4:	af00      	add	r7, sp, #0
  4063d6:	60f8      	str	r0, [r7, #12]
  4063d8:	60b9      	str	r1, [r7, #8]
  4063da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
  4063dc:	68fb      	ldr	r3, [r7, #12]
  4063de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
  4063e0:	68bb      	ldr	r3, [r7, #8]
  4063e2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  4063e4:	e007      	b.n	4063f6 <mem_cpy+0x26>
		*d++ = *s++;
  4063e6:	697b      	ldr	r3, [r7, #20]
  4063e8:	1c5a      	adds	r2, r3, #1
  4063ea:	617a      	str	r2, [r7, #20]
  4063ec:	693a      	ldr	r2, [r7, #16]
  4063ee:	1c51      	adds	r1, r2, #1
  4063f0:	6139      	str	r1, [r7, #16]
  4063f2:	7812      	ldrb	r2, [r2, #0]
  4063f4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
  4063f6:	687b      	ldr	r3, [r7, #4]
  4063f8:	1e5a      	subs	r2, r3, #1
  4063fa:	607a      	str	r2, [r7, #4]
  4063fc:	2b00      	cmp	r3, #0
  4063fe:	d1f2      	bne.n	4063e6 <mem_cpy+0x16>
}
  406400:	bf00      	nop
  406402:	371c      	adds	r7, #28
  406404:	46bd      	mov	sp, r7
  406406:	f85d 7b04 	ldr.w	r7, [sp], #4
  40640a:	4770      	bx	lr

0040640c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
  40640c:	b480      	push	{r7}
  40640e:	b087      	sub	sp, #28
  406410:	af00      	add	r7, sp, #0
  406412:	60f8      	str	r0, [r7, #12]
  406414:	60b9      	str	r1, [r7, #8]
  406416:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
  406418:	68fb      	ldr	r3, [r7, #12]
  40641a:	617b      	str	r3, [r7, #20]

	while (cnt--)
  40641c:	e005      	b.n	40642a <mem_set+0x1e>
		*d++ = (BYTE)val;
  40641e:	697b      	ldr	r3, [r7, #20]
  406420:	1c5a      	adds	r2, r3, #1
  406422:	617a      	str	r2, [r7, #20]
  406424:	68ba      	ldr	r2, [r7, #8]
  406426:	b2d2      	uxtb	r2, r2
  406428:	701a      	strb	r2, [r3, #0]
	while (cnt--)
  40642a:	687b      	ldr	r3, [r7, #4]
  40642c:	1e5a      	subs	r2, r3, #1
  40642e:	607a      	str	r2, [r7, #4]
  406430:	2b00      	cmp	r3, #0
  406432:	d1f4      	bne.n	40641e <mem_set+0x12>
}
  406434:	bf00      	nop
  406436:	371c      	adds	r7, #28
  406438:	46bd      	mov	sp, r7
  40643a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40643e:	4770      	bx	lr

00406440 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
  406440:	b480      	push	{r7}
  406442:	b089      	sub	sp, #36	; 0x24
  406444:	af00      	add	r7, sp, #0
  406446:	60f8      	str	r0, [r7, #12]
  406448:	60b9      	str	r1, [r7, #8]
  40644a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  40644c:	68fb      	ldr	r3, [r7, #12]
  40644e:	61fb      	str	r3, [r7, #28]
  406450:	68bb      	ldr	r3, [r7, #8]
  406452:	61bb      	str	r3, [r7, #24]
	int r = 0;
  406454:	2300      	movs	r3, #0
  406456:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
  406458:	bf00      	nop
  40645a:	687b      	ldr	r3, [r7, #4]
  40645c:	1e5a      	subs	r2, r3, #1
  40645e:	607a      	str	r2, [r7, #4]
  406460:	2b00      	cmp	r3, #0
  406462:	d00d      	beq.n	406480 <mem_cmp+0x40>
  406464:	69fb      	ldr	r3, [r7, #28]
  406466:	1c5a      	adds	r2, r3, #1
  406468:	61fa      	str	r2, [r7, #28]
  40646a:	781b      	ldrb	r3, [r3, #0]
  40646c:	4619      	mov	r1, r3
  40646e:	69bb      	ldr	r3, [r7, #24]
  406470:	1c5a      	adds	r2, r3, #1
  406472:	61ba      	str	r2, [r7, #24]
  406474:	781b      	ldrb	r3, [r3, #0]
  406476:	1acb      	subs	r3, r1, r3
  406478:	617b      	str	r3, [r7, #20]
  40647a:	697b      	ldr	r3, [r7, #20]
  40647c:	2b00      	cmp	r3, #0
  40647e:	d0ec      	beq.n	40645a <mem_cmp+0x1a>
	return r;
  406480:	697b      	ldr	r3, [r7, #20]
}
  406482:	4618      	mov	r0, r3
  406484:	3724      	adds	r7, #36	; 0x24
  406486:	46bd      	mov	sp, r7
  406488:	f85d 7b04 	ldr.w	r7, [sp], #4
  40648c:	4770      	bx	lr

0040648e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
  40648e:	b480      	push	{r7}
  406490:	b083      	sub	sp, #12
  406492:	af00      	add	r7, sp, #0
  406494:	6078      	str	r0, [r7, #4]
  406496:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
  406498:	e002      	b.n	4064a0 <chk_chr+0x12>
  40649a:	687b      	ldr	r3, [r7, #4]
  40649c:	3301      	adds	r3, #1
  40649e:	607b      	str	r3, [r7, #4]
  4064a0:	687b      	ldr	r3, [r7, #4]
  4064a2:	781b      	ldrb	r3, [r3, #0]
  4064a4:	2b00      	cmp	r3, #0
  4064a6:	d005      	beq.n	4064b4 <chk_chr+0x26>
  4064a8:	687b      	ldr	r3, [r7, #4]
  4064aa:	781b      	ldrb	r3, [r3, #0]
  4064ac:	461a      	mov	r2, r3
  4064ae:	683b      	ldr	r3, [r7, #0]
  4064b0:	429a      	cmp	r2, r3
  4064b2:	d1f2      	bne.n	40649a <chk_chr+0xc>
	return *str;
  4064b4:	687b      	ldr	r3, [r7, #4]
  4064b6:	781b      	ldrb	r3, [r3, #0]
}
  4064b8:	4618      	mov	r0, r3
  4064ba:	370c      	adds	r7, #12
  4064bc:	46bd      	mov	sp, r7
  4064be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4064c2:	4770      	bx	lr

004064c4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
  4064c4:	b590      	push	{r4, r7, lr}
  4064c6:	b085      	sub	sp, #20
  4064c8:	af00      	add	r7, sp, #0
  4064ca:	6078      	str	r0, [r7, #4]
  4064cc:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
  4064ce:	687b      	ldr	r3, [r7, #4]
  4064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4064d2:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
  4064d4:	68fa      	ldr	r2, [r7, #12]
  4064d6:	683b      	ldr	r3, [r7, #0]
  4064d8:	429a      	cmp	r2, r3
  4064da:	d048      	beq.n	40656e <move_window+0xaa>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
  4064dc:	687b      	ldr	r3, [r7, #4]
  4064de:	791b      	ldrb	r3, [r3, #4]
  4064e0:	2b00      	cmp	r3, #0
  4064e2:	d030      	beq.n	406546 <move_window+0x82>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  4064e4:	687b      	ldr	r3, [r7, #4]
  4064e6:	7858      	ldrb	r0, [r3, #1]
  4064e8:	687b      	ldr	r3, [r7, #4]
  4064ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
  4064ee:	2301      	movs	r3, #1
  4064f0:	68fa      	ldr	r2, [r7, #12]
  4064f2:	4c21      	ldr	r4, [pc, #132]	; (406578 <move_window+0xb4>)
  4064f4:	47a0      	blx	r4
  4064f6:	4603      	mov	r3, r0
  4064f8:	2b00      	cmp	r3, #0
  4064fa:	d001      	beq.n	406500 <move_window+0x3c>
				return FR_DISK_ERR;
  4064fc:	2301      	movs	r3, #1
  4064fe:	e037      	b.n	406570 <move_window+0xac>
			fs->wflag = 0;
  406500:	687b      	ldr	r3, [r7, #4]
  406502:	2200      	movs	r2, #0
  406504:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  406506:	687b      	ldr	r3, [r7, #4]
  406508:	6a1a      	ldr	r2, [r3, #32]
  40650a:	687b      	ldr	r3, [r7, #4]
  40650c:	69db      	ldr	r3, [r3, #28]
  40650e:	441a      	add	r2, r3
  406510:	68fb      	ldr	r3, [r7, #12]
  406512:	429a      	cmp	r2, r3
  406514:	d917      	bls.n	406546 <move_window+0x82>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  406516:	687b      	ldr	r3, [r7, #4]
  406518:	78db      	ldrb	r3, [r3, #3]
  40651a:	72fb      	strb	r3, [r7, #11]
  40651c:	e010      	b.n	406540 <move_window+0x7c>
					wsect += fs->fsize;
  40651e:	687b      	ldr	r3, [r7, #4]
  406520:	69db      	ldr	r3, [r3, #28]
  406522:	68fa      	ldr	r2, [r7, #12]
  406524:	4413      	add	r3, r2
  406526:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
  406528:	687b      	ldr	r3, [r7, #4]
  40652a:	7858      	ldrb	r0, [r3, #1]
  40652c:	687b      	ldr	r3, [r7, #4]
  40652e:	f103 0130 	add.w	r1, r3, #48	; 0x30
  406532:	2301      	movs	r3, #1
  406534:	68fa      	ldr	r2, [r7, #12]
  406536:	4c10      	ldr	r4, [pc, #64]	; (406578 <move_window+0xb4>)
  406538:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40653a:	7afb      	ldrb	r3, [r7, #11]
  40653c:	3b01      	subs	r3, #1
  40653e:	72fb      	strb	r3, [r7, #11]
  406540:	7afb      	ldrb	r3, [r7, #11]
  406542:	2b01      	cmp	r3, #1
  406544:	d8eb      	bhi.n	40651e <move_window+0x5a>
				}
			}
		}
#endif
		if (sector) {
  406546:	683b      	ldr	r3, [r7, #0]
  406548:	2b00      	cmp	r3, #0
  40654a:	d010      	beq.n	40656e <move_window+0xaa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  40654c:	687b      	ldr	r3, [r7, #4]
  40654e:	7858      	ldrb	r0, [r3, #1]
  406550:	687b      	ldr	r3, [r7, #4]
  406552:	f103 0130 	add.w	r1, r3, #48	; 0x30
  406556:	2301      	movs	r3, #1
  406558:	683a      	ldr	r2, [r7, #0]
  40655a:	4c08      	ldr	r4, [pc, #32]	; (40657c <move_window+0xb8>)
  40655c:	47a0      	blx	r4
  40655e:	4603      	mov	r3, r0
  406560:	2b00      	cmp	r3, #0
  406562:	d001      	beq.n	406568 <move_window+0xa4>
				return FR_DISK_ERR;
  406564:	2301      	movs	r3, #1
  406566:	e003      	b.n	406570 <move_window+0xac>
			fs->winsect = sector;
  406568:	687b      	ldr	r3, [r7, #4]
  40656a:	683a      	ldr	r2, [r7, #0]
  40656c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
  40656e:	2300      	movs	r3, #0
}
  406570:	4618      	mov	r0, r3
  406572:	3714      	adds	r7, #20
  406574:	46bd      	mov	sp, r7
  406576:	bd90      	pop	{r4, r7, pc}
  406578:	004061f5 	.word	0x004061f5
  40657c:	00406145 	.word	0x00406145

00406580 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
  406580:	b590      	push	{r4, r7, lr}
  406582:	b085      	sub	sp, #20
  406584:	af00      	add	r7, sp, #0
  406586:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
  406588:	2100      	movs	r1, #0
  40658a:	6878      	ldr	r0, [r7, #4]
  40658c:	4b4d      	ldr	r3, [pc, #308]	; (4066c4 <sync+0x144>)
  40658e:	4798      	blx	r3
  406590:	4603      	mov	r3, r0
  406592:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
  406594:	7bfb      	ldrb	r3, [r7, #15]
  406596:	2b00      	cmp	r3, #0
  406598:	f040 808e 	bne.w	4066b8 <sync+0x138>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  40659c:	687b      	ldr	r3, [r7, #4]
  40659e:	781b      	ldrb	r3, [r3, #0]
  4065a0:	2b03      	cmp	r3, #3
  4065a2:	d17d      	bne.n	4066a0 <sync+0x120>
  4065a4:	687b      	ldr	r3, [r7, #4]
  4065a6:	795b      	ldrb	r3, [r3, #5]
  4065a8:	2b00      	cmp	r3, #0
  4065aa:	d079      	beq.n	4066a0 <sync+0x120>
			fs->winsect = 0;
  4065ac:	687b      	ldr	r3, [r7, #4]
  4065ae:	2200      	movs	r2, #0
  4065b0:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
  4065b2:	687b      	ldr	r3, [r7, #4]
  4065b4:	3330      	adds	r3, #48	; 0x30
  4065b6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4065ba:	2100      	movs	r1, #0
  4065bc:	4618      	mov	r0, r3
  4065be:	4b42      	ldr	r3, [pc, #264]	; (4066c8 <sync+0x148>)
  4065c0:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  4065c2:	687b      	ldr	r3, [r7, #4]
  4065c4:	2255      	movs	r2, #85	; 0x55
  4065c6:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
  4065ca:	687b      	ldr	r3, [r7, #4]
  4065cc:	22aa      	movs	r2, #170	; 0xaa
  4065ce:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  4065d2:	687b      	ldr	r3, [r7, #4]
  4065d4:	2252      	movs	r2, #82	; 0x52
  4065d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  4065da:	687b      	ldr	r3, [r7, #4]
  4065dc:	2252      	movs	r2, #82	; 0x52
  4065de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  4065e2:	687b      	ldr	r3, [r7, #4]
  4065e4:	2261      	movs	r2, #97	; 0x61
  4065e6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  4065ea:	687b      	ldr	r3, [r7, #4]
  4065ec:	2241      	movs	r2, #65	; 0x41
  4065ee:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  4065f2:	687b      	ldr	r3, [r7, #4]
  4065f4:	2272      	movs	r2, #114	; 0x72
  4065f6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
  4065fa:	687b      	ldr	r3, [r7, #4]
  4065fc:	2272      	movs	r2, #114	; 0x72
  4065fe:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
  406602:	687b      	ldr	r3, [r7, #4]
  406604:	2241      	movs	r2, #65	; 0x41
  406606:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
  40660a:	687b      	ldr	r3, [r7, #4]
  40660c:	2261      	movs	r2, #97	; 0x61
  40660e:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  406612:	687b      	ldr	r3, [r7, #4]
  406614:	691b      	ldr	r3, [r3, #16]
  406616:	b2da      	uxtb	r2, r3
  406618:	687b      	ldr	r3, [r7, #4]
  40661a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
  40661e:	687b      	ldr	r3, [r7, #4]
  406620:	691b      	ldr	r3, [r3, #16]
  406622:	b29b      	uxth	r3, r3
  406624:	0a1b      	lsrs	r3, r3, #8
  406626:	b29b      	uxth	r3, r3
  406628:	b2da      	uxtb	r2, r3
  40662a:	687b      	ldr	r3, [r7, #4]
  40662c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
  406630:	687b      	ldr	r3, [r7, #4]
  406632:	691b      	ldr	r3, [r3, #16]
  406634:	0c1b      	lsrs	r3, r3, #16
  406636:	b2da      	uxtb	r2, r3
  406638:	687b      	ldr	r3, [r7, #4]
  40663a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
  40663e:	687b      	ldr	r3, [r7, #4]
  406640:	691b      	ldr	r3, [r3, #16]
  406642:	0e1b      	lsrs	r3, r3, #24
  406644:	b2da      	uxtb	r2, r3
  406646:	687b      	ldr	r3, [r7, #4]
  406648:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  40664c:	687b      	ldr	r3, [r7, #4]
  40664e:	68db      	ldr	r3, [r3, #12]
  406650:	b2da      	uxtb	r2, r3
  406652:	687b      	ldr	r3, [r7, #4]
  406654:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
  406658:	687b      	ldr	r3, [r7, #4]
  40665a:	68db      	ldr	r3, [r3, #12]
  40665c:	b29b      	uxth	r3, r3
  40665e:	0a1b      	lsrs	r3, r3, #8
  406660:	b29b      	uxth	r3, r3
  406662:	b2da      	uxtb	r2, r3
  406664:	687b      	ldr	r3, [r7, #4]
  406666:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
  40666a:	687b      	ldr	r3, [r7, #4]
  40666c:	68db      	ldr	r3, [r3, #12]
  40666e:	0c1b      	lsrs	r3, r3, #16
  406670:	b2da      	uxtb	r2, r3
  406672:	687b      	ldr	r3, [r7, #4]
  406674:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
  406678:	687b      	ldr	r3, [r7, #4]
  40667a:	68db      	ldr	r3, [r3, #12]
  40667c:	0e1b      	lsrs	r3, r3, #24
  40667e:	b2da      	uxtb	r2, r3
  406680:	687b      	ldr	r3, [r7, #4]
  406682:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  406686:	687b      	ldr	r3, [r7, #4]
  406688:	7858      	ldrb	r0, [r3, #1]
  40668a:	687b      	ldr	r3, [r7, #4]
  40668c:	f103 0130 	add.w	r1, r3, #48	; 0x30
  406690:	687b      	ldr	r3, [r7, #4]
  406692:	695a      	ldr	r2, [r3, #20]
  406694:	2301      	movs	r3, #1
  406696:	4c0d      	ldr	r4, [pc, #52]	; (4066cc <sync+0x14c>)
  406698:	47a0      	blx	r4
			fs->fsi_flag = 0;
  40669a:	687b      	ldr	r3, [r7, #4]
  40669c:	2200      	movs	r2, #0
  40669e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  4066a0:	687b      	ldr	r3, [r7, #4]
  4066a2:	785b      	ldrb	r3, [r3, #1]
  4066a4:	2200      	movs	r2, #0
  4066a6:	2100      	movs	r1, #0
  4066a8:	4618      	mov	r0, r3
  4066aa:	4b09      	ldr	r3, [pc, #36]	; (4066d0 <sync+0x150>)
  4066ac:	4798      	blx	r3
  4066ae:	4603      	mov	r3, r0
  4066b0:	2b00      	cmp	r3, #0
  4066b2:	d001      	beq.n	4066b8 <sync+0x138>
			res = FR_DISK_ERR;
  4066b4:	2301      	movs	r3, #1
  4066b6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
  4066b8:	7bfb      	ldrb	r3, [r7, #15]
}
  4066ba:	4618      	mov	r0, r3
  4066bc:	3714      	adds	r7, #20
  4066be:	46bd      	mov	sp, r7
  4066c0:	bd90      	pop	{r4, r7, pc}
  4066c2:	bf00      	nop
  4066c4:	004064c5 	.word	0x004064c5
  4066c8:	0040640d 	.word	0x0040640d
  4066cc:	004061f5 	.word	0x004061f5
  4066d0:	004062a5 	.word	0x004062a5

004066d4 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
  4066d4:	b480      	push	{r7}
  4066d6:	b083      	sub	sp, #12
  4066d8:	af00      	add	r7, sp, #0
  4066da:	6078      	str	r0, [r7, #4]
  4066dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
  4066de:	683b      	ldr	r3, [r7, #0]
  4066e0:	3b02      	subs	r3, #2
  4066e2:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  4066e4:	687b      	ldr	r3, [r7, #4]
  4066e6:	699b      	ldr	r3, [r3, #24]
  4066e8:	1e9a      	subs	r2, r3, #2
  4066ea:	683b      	ldr	r3, [r7, #0]
  4066ec:	429a      	cmp	r2, r3
  4066ee:	d801      	bhi.n	4066f4 <clust2sect+0x20>
  4066f0:	2300      	movs	r3, #0
  4066f2:	e008      	b.n	406706 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
  4066f4:	687b      	ldr	r3, [r7, #4]
  4066f6:	789b      	ldrb	r3, [r3, #2]
  4066f8:	461a      	mov	r2, r3
  4066fa:	683b      	ldr	r3, [r7, #0]
  4066fc:	fb03 f202 	mul.w	r2, r3, r2
  406700:	687b      	ldr	r3, [r7, #4]
  406702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  406704:	4413      	add	r3, r2
}
  406706:	4618      	mov	r0, r3
  406708:	370c      	adds	r7, #12
  40670a:	46bd      	mov	sp, r7
  40670c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406710:	4770      	bx	lr
	...

00406714 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
  406714:	b580      	push	{r7, lr}
  406716:	b086      	sub	sp, #24
  406718:	af00      	add	r7, sp, #0
  40671a:	6078      	str	r0, [r7, #4]
  40671c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  40671e:	683b      	ldr	r3, [r7, #0]
  406720:	2b01      	cmp	r3, #1
  406722:	d904      	bls.n	40672e <get_fat+0x1a>
  406724:	687b      	ldr	r3, [r7, #4]
  406726:	699a      	ldr	r2, [r3, #24]
  406728:	683b      	ldr	r3, [r7, #0]
  40672a:	429a      	cmp	r2, r3
  40672c:	d801      	bhi.n	406732 <get_fat+0x1e>
		return 1;
  40672e:	2301      	movs	r3, #1
  406730:	e09b      	b.n	40686a <get_fat+0x156>

	switch (fs->fs_type) {
  406732:	687b      	ldr	r3, [r7, #4]
  406734:	781b      	ldrb	r3, [r3, #0]
  406736:	2b02      	cmp	r3, #2
  406738:	d046      	beq.n	4067c8 <get_fat+0xb4>
  40673a:	2b03      	cmp	r3, #3
  40673c:	d064      	beq.n	406808 <get_fat+0xf4>
  40673e:	2b01      	cmp	r3, #1
  406740:	f040 8091 	bne.w	406866 <get_fat+0x152>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
  406744:	683b      	ldr	r3, [r7, #0]
  406746:	617b      	str	r3, [r7, #20]
  406748:	697b      	ldr	r3, [r7, #20]
  40674a:	085b      	lsrs	r3, r3, #1
  40674c:	697a      	ldr	r2, [r7, #20]
  40674e:	4413      	add	r3, r2
  406750:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  406752:	687b      	ldr	r3, [r7, #4]
  406754:	6a1a      	ldr	r2, [r3, #32]
  406756:	697b      	ldr	r3, [r7, #20]
  406758:	0a5b      	lsrs	r3, r3, #9
  40675a:	4413      	add	r3, r2
  40675c:	4619      	mov	r1, r3
  40675e:	6878      	ldr	r0, [r7, #4]
  406760:	4b44      	ldr	r3, [pc, #272]	; (406874 <get_fat+0x160>)
  406762:	4798      	blx	r3
  406764:	4603      	mov	r3, r0
  406766:	2b00      	cmp	r3, #0
  406768:	d176      	bne.n	406858 <get_fat+0x144>
		wc = fs->win[bc % SS(fs)]; bc++;
  40676a:	697b      	ldr	r3, [r7, #20]
  40676c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  406770:	687a      	ldr	r2, [r7, #4]
  406772:	4413      	add	r3, r2
  406774:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  406778:	613b      	str	r3, [r7, #16]
  40677a:	697b      	ldr	r3, [r7, #20]
  40677c:	3301      	adds	r3, #1
  40677e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  406780:	687b      	ldr	r3, [r7, #4]
  406782:	6a1a      	ldr	r2, [r3, #32]
  406784:	697b      	ldr	r3, [r7, #20]
  406786:	0a5b      	lsrs	r3, r3, #9
  406788:	4413      	add	r3, r2
  40678a:	4619      	mov	r1, r3
  40678c:	6878      	ldr	r0, [r7, #4]
  40678e:	4b39      	ldr	r3, [pc, #228]	; (406874 <get_fat+0x160>)
  406790:	4798      	blx	r3
  406792:	4603      	mov	r3, r0
  406794:	2b00      	cmp	r3, #0
  406796:	d161      	bne.n	40685c <get_fat+0x148>
		wc |= fs->win[bc % SS(fs)] << 8;
  406798:	697b      	ldr	r3, [r7, #20]
  40679a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40679e:	687a      	ldr	r2, [r7, #4]
  4067a0:	4413      	add	r3, r2
  4067a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  4067a6:	021b      	lsls	r3, r3, #8
  4067a8:	461a      	mov	r2, r3
  4067aa:	693b      	ldr	r3, [r7, #16]
  4067ac:	4313      	orrs	r3, r2
  4067ae:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  4067b0:	683b      	ldr	r3, [r7, #0]
  4067b2:	f003 0301 	and.w	r3, r3, #1
  4067b6:	2b00      	cmp	r3, #0
  4067b8:	d002      	beq.n	4067c0 <get_fat+0xac>
  4067ba:	693b      	ldr	r3, [r7, #16]
  4067bc:	091b      	lsrs	r3, r3, #4
  4067be:	e054      	b.n	40686a <get_fat+0x156>
  4067c0:	693b      	ldr	r3, [r7, #16]
  4067c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4067c6:	e050      	b.n	40686a <get_fat+0x156>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  4067c8:	687b      	ldr	r3, [r7, #4]
  4067ca:	6a1a      	ldr	r2, [r3, #32]
  4067cc:	683b      	ldr	r3, [r7, #0]
  4067ce:	0a1b      	lsrs	r3, r3, #8
  4067d0:	4413      	add	r3, r2
  4067d2:	4619      	mov	r1, r3
  4067d4:	6878      	ldr	r0, [r7, #4]
  4067d6:	4b27      	ldr	r3, [pc, #156]	; (406874 <get_fat+0x160>)
  4067d8:	4798      	blx	r3
  4067da:	4603      	mov	r3, r0
  4067dc:	2b00      	cmp	r3, #0
  4067de:	d13f      	bne.n	406860 <get_fat+0x14c>
		p = &fs->win[clst * 2 % SS(fs)];
  4067e0:	683b      	ldr	r3, [r7, #0]
  4067e2:	005b      	lsls	r3, r3, #1
  4067e4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  4067e8:	3330      	adds	r3, #48	; 0x30
  4067ea:	687a      	ldr	r2, [r7, #4]
  4067ec:	4413      	add	r3, r2
  4067ee:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
  4067f0:	68fb      	ldr	r3, [r7, #12]
  4067f2:	3301      	adds	r3, #1
  4067f4:	781b      	ldrb	r3, [r3, #0]
  4067f6:	021b      	lsls	r3, r3, #8
  4067f8:	b21a      	sxth	r2, r3
  4067fa:	68fb      	ldr	r3, [r7, #12]
  4067fc:	781b      	ldrb	r3, [r3, #0]
  4067fe:	b21b      	sxth	r3, r3
  406800:	4313      	orrs	r3, r2
  406802:	b21b      	sxth	r3, r3
  406804:	b29b      	uxth	r3, r3
  406806:	e030      	b.n	40686a <get_fat+0x156>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  406808:	687b      	ldr	r3, [r7, #4]
  40680a:	6a1a      	ldr	r2, [r3, #32]
  40680c:	683b      	ldr	r3, [r7, #0]
  40680e:	09db      	lsrs	r3, r3, #7
  406810:	4413      	add	r3, r2
  406812:	4619      	mov	r1, r3
  406814:	6878      	ldr	r0, [r7, #4]
  406816:	4b17      	ldr	r3, [pc, #92]	; (406874 <get_fat+0x160>)
  406818:	4798      	blx	r3
  40681a:	4603      	mov	r3, r0
  40681c:	2b00      	cmp	r3, #0
  40681e:	d121      	bne.n	406864 <get_fat+0x150>
		p = &fs->win[clst * 4 % SS(fs)];
  406820:	683b      	ldr	r3, [r7, #0]
  406822:	009b      	lsls	r3, r3, #2
  406824:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  406828:	3330      	adds	r3, #48	; 0x30
  40682a:	687a      	ldr	r2, [r7, #4]
  40682c:	4413      	add	r3, r2
  40682e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
  406830:	68fb      	ldr	r3, [r7, #12]
  406832:	3303      	adds	r3, #3
  406834:	781b      	ldrb	r3, [r3, #0]
  406836:	061a      	lsls	r2, r3, #24
  406838:	68fb      	ldr	r3, [r7, #12]
  40683a:	3302      	adds	r3, #2
  40683c:	781b      	ldrb	r3, [r3, #0]
  40683e:	041b      	lsls	r3, r3, #16
  406840:	4313      	orrs	r3, r2
  406842:	68fa      	ldr	r2, [r7, #12]
  406844:	3201      	adds	r2, #1
  406846:	7812      	ldrb	r2, [r2, #0]
  406848:	0212      	lsls	r2, r2, #8
  40684a:	4313      	orrs	r3, r2
  40684c:	68fa      	ldr	r2, [r7, #12]
  40684e:	7812      	ldrb	r2, [r2, #0]
  406850:	4313      	orrs	r3, r2
  406852:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  406856:	e008      	b.n	40686a <get_fat+0x156>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  406858:	bf00      	nop
  40685a:	e004      	b.n	406866 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40685c:	bf00      	nop
  40685e:	e002      	b.n	406866 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  406860:	bf00      	nop
  406862:	e000      	b.n	406866 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  406864:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  406866:	f04f 33ff 	mov.w	r3, #4294967295
}
  40686a:	4618      	mov	r0, r3
  40686c:	3718      	adds	r7, #24
  40686e:	46bd      	mov	sp, r7
  406870:	bd80      	pop	{r7, pc}
  406872:	bf00      	nop
  406874:	004064c5 	.word	0x004064c5

00406878 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
  406878:	b580      	push	{r7, lr}
  40687a:	b088      	sub	sp, #32
  40687c:	af00      	add	r7, sp, #0
  40687e:	60f8      	str	r0, [r7, #12]
  406880:	60b9      	str	r1, [r7, #8]
  406882:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  406884:	68bb      	ldr	r3, [r7, #8]
  406886:	2b01      	cmp	r3, #1
  406888:	d904      	bls.n	406894 <put_fat+0x1c>
  40688a:	68fb      	ldr	r3, [r7, #12]
  40688c:	699a      	ldr	r2, [r3, #24]
  40688e:	68bb      	ldr	r3, [r7, #8]
  406890:	429a      	cmp	r2, r3
  406892:	d802      	bhi.n	40689a <put_fat+0x22>
		res = FR_INT_ERR;
  406894:	2302      	movs	r3, #2
  406896:	77fb      	strb	r3, [r7, #31]
  406898:	e0e9      	b.n	406a6e <put_fat+0x1f6>

	} else {
		switch (fs->fs_type) {
  40689a:	68fb      	ldr	r3, [r7, #12]
  40689c:	781b      	ldrb	r3, [r3, #0]
  40689e:	2b02      	cmp	r3, #2
  4068a0:	d070      	beq.n	406984 <put_fat+0x10c>
  4068a2:	2b03      	cmp	r3, #3
  4068a4:	f000 8091 	beq.w	4069ca <put_fat+0x152>
  4068a8:	2b01      	cmp	r3, #1
  4068aa:	f040 80d3 	bne.w	406a54 <put_fat+0x1dc>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
  4068ae:	68bb      	ldr	r3, [r7, #8]
  4068b0:	61bb      	str	r3, [r7, #24]
  4068b2:	69bb      	ldr	r3, [r7, #24]
  4068b4:	085b      	lsrs	r3, r3, #1
  4068b6:	69ba      	ldr	r2, [r7, #24]
  4068b8:	4413      	add	r3, r2
  4068ba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4068bc:	68fb      	ldr	r3, [r7, #12]
  4068be:	6a1a      	ldr	r2, [r3, #32]
  4068c0:	69bb      	ldr	r3, [r7, #24]
  4068c2:	0a5b      	lsrs	r3, r3, #9
  4068c4:	4413      	add	r3, r2
  4068c6:	4619      	mov	r1, r3
  4068c8:	68f8      	ldr	r0, [r7, #12]
  4068ca:	4b6b      	ldr	r3, [pc, #428]	; (406a78 <put_fat+0x200>)
  4068cc:	4798      	blx	r3
  4068ce:	4603      	mov	r3, r0
  4068d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  4068d2:	7ffb      	ldrb	r3, [r7, #31]
  4068d4:	2b00      	cmp	r3, #0
  4068d6:	f040 80c0 	bne.w	406a5a <put_fat+0x1e2>
			p = &fs->win[bc % SS(fs)];
  4068da:	69bb      	ldr	r3, [r7, #24]
  4068dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4068e0:	3330      	adds	r3, #48	; 0x30
  4068e2:	68fa      	ldr	r2, [r7, #12]
  4068e4:	4413      	add	r3, r2
  4068e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4068e8:	68bb      	ldr	r3, [r7, #8]
  4068ea:	f003 0301 	and.w	r3, r3, #1
  4068ee:	2b00      	cmp	r3, #0
  4068f0:	d00d      	beq.n	40690e <put_fat+0x96>
  4068f2:	697b      	ldr	r3, [r7, #20]
  4068f4:	781b      	ldrb	r3, [r3, #0]
  4068f6:	b25b      	sxtb	r3, r3
  4068f8:	f003 030f 	and.w	r3, r3, #15
  4068fc:	b25a      	sxtb	r2, r3
  4068fe:	687b      	ldr	r3, [r7, #4]
  406900:	b2db      	uxtb	r3, r3
  406902:	011b      	lsls	r3, r3, #4
  406904:	b25b      	sxtb	r3, r3
  406906:	4313      	orrs	r3, r2
  406908:	b25b      	sxtb	r3, r3
  40690a:	b2db      	uxtb	r3, r3
  40690c:	e001      	b.n	406912 <put_fat+0x9a>
  40690e:	687b      	ldr	r3, [r7, #4]
  406910:	b2db      	uxtb	r3, r3
  406912:	697a      	ldr	r2, [r7, #20]
  406914:	7013      	strb	r3, [r2, #0]
			bc++;
  406916:	69bb      	ldr	r3, [r7, #24]
  406918:	3301      	adds	r3, #1
  40691a:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
  40691c:	68fb      	ldr	r3, [r7, #12]
  40691e:	2201      	movs	r2, #1
  406920:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  406922:	68fb      	ldr	r3, [r7, #12]
  406924:	6a1a      	ldr	r2, [r3, #32]
  406926:	69bb      	ldr	r3, [r7, #24]
  406928:	0a5b      	lsrs	r3, r3, #9
  40692a:	4413      	add	r3, r2
  40692c:	4619      	mov	r1, r3
  40692e:	68f8      	ldr	r0, [r7, #12]
  406930:	4b51      	ldr	r3, [pc, #324]	; (406a78 <put_fat+0x200>)
  406932:	4798      	blx	r3
  406934:	4603      	mov	r3, r0
  406936:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  406938:	7ffb      	ldrb	r3, [r7, #31]
  40693a:	2b00      	cmp	r3, #0
  40693c:	f040 808f 	bne.w	406a5e <put_fat+0x1e6>
			p = &fs->win[bc % SS(fs)];
  406940:	69bb      	ldr	r3, [r7, #24]
  406942:	f3c3 0308 	ubfx	r3, r3, #0, #9
  406946:	3330      	adds	r3, #48	; 0x30
  406948:	68fa      	ldr	r2, [r7, #12]
  40694a:	4413      	add	r3, r2
  40694c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40694e:	68bb      	ldr	r3, [r7, #8]
  406950:	f003 0301 	and.w	r3, r3, #1
  406954:	2b00      	cmp	r3, #0
  406956:	d003      	beq.n	406960 <put_fat+0xe8>
  406958:	687b      	ldr	r3, [r7, #4]
  40695a:	091b      	lsrs	r3, r3, #4
  40695c:	b2db      	uxtb	r3, r3
  40695e:	e00e      	b.n	40697e <put_fat+0x106>
  406960:	697b      	ldr	r3, [r7, #20]
  406962:	781b      	ldrb	r3, [r3, #0]
  406964:	b25b      	sxtb	r3, r3
  406966:	f023 030f 	bic.w	r3, r3, #15
  40696a:	b25a      	sxtb	r2, r3
  40696c:	687b      	ldr	r3, [r7, #4]
  40696e:	0a1b      	lsrs	r3, r3, #8
  406970:	b25b      	sxtb	r3, r3
  406972:	f003 030f 	and.w	r3, r3, #15
  406976:	b25b      	sxtb	r3, r3
  406978:	4313      	orrs	r3, r2
  40697a:	b25b      	sxtb	r3, r3
  40697c:	b2db      	uxtb	r3, r3
  40697e:	697a      	ldr	r2, [r7, #20]
  406980:	7013      	strb	r3, [r2, #0]
			break;
  406982:	e071      	b.n	406a68 <put_fat+0x1f0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  406984:	68fb      	ldr	r3, [r7, #12]
  406986:	6a1a      	ldr	r2, [r3, #32]
  406988:	68bb      	ldr	r3, [r7, #8]
  40698a:	0a1b      	lsrs	r3, r3, #8
  40698c:	4413      	add	r3, r2
  40698e:	4619      	mov	r1, r3
  406990:	68f8      	ldr	r0, [r7, #12]
  406992:	4b39      	ldr	r3, [pc, #228]	; (406a78 <put_fat+0x200>)
  406994:	4798      	blx	r3
  406996:	4603      	mov	r3, r0
  406998:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  40699a:	7ffb      	ldrb	r3, [r7, #31]
  40699c:	2b00      	cmp	r3, #0
  40699e:	d160      	bne.n	406a62 <put_fat+0x1ea>
			p = &fs->win[clst * 2 % SS(fs)];
  4069a0:	68bb      	ldr	r3, [r7, #8]
  4069a2:	005b      	lsls	r3, r3, #1
  4069a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  4069a8:	3330      	adds	r3, #48	; 0x30
  4069aa:	68fa      	ldr	r2, [r7, #12]
  4069ac:	4413      	add	r3, r2
  4069ae:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
  4069b0:	687b      	ldr	r3, [r7, #4]
  4069b2:	b2da      	uxtb	r2, r3
  4069b4:	697b      	ldr	r3, [r7, #20]
  4069b6:	701a      	strb	r2, [r3, #0]
  4069b8:	697b      	ldr	r3, [r7, #20]
  4069ba:	3301      	adds	r3, #1
  4069bc:	687a      	ldr	r2, [r7, #4]
  4069be:	b292      	uxth	r2, r2
  4069c0:	0a12      	lsrs	r2, r2, #8
  4069c2:	b292      	uxth	r2, r2
  4069c4:	b2d2      	uxtb	r2, r2
  4069c6:	701a      	strb	r2, [r3, #0]
			break;
  4069c8:	e04e      	b.n	406a68 <put_fat+0x1f0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  4069ca:	68fb      	ldr	r3, [r7, #12]
  4069cc:	6a1a      	ldr	r2, [r3, #32]
  4069ce:	68bb      	ldr	r3, [r7, #8]
  4069d0:	09db      	lsrs	r3, r3, #7
  4069d2:	4413      	add	r3, r2
  4069d4:	4619      	mov	r1, r3
  4069d6:	68f8      	ldr	r0, [r7, #12]
  4069d8:	4b27      	ldr	r3, [pc, #156]	; (406a78 <put_fat+0x200>)
  4069da:	4798      	blx	r3
  4069dc:	4603      	mov	r3, r0
  4069de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
  4069e0:	7ffb      	ldrb	r3, [r7, #31]
  4069e2:	2b00      	cmp	r3, #0
  4069e4:	d13f      	bne.n	406a66 <put_fat+0x1ee>
			p = &fs->win[clst * 4 % SS(fs)];
  4069e6:	68bb      	ldr	r3, [r7, #8]
  4069e8:	009b      	lsls	r3, r3, #2
  4069ea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
  4069ee:	3330      	adds	r3, #48	; 0x30
  4069f0:	68fa      	ldr	r2, [r7, #12]
  4069f2:	4413      	add	r3, r2
  4069f4:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
  4069f6:	697b      	ldr	r3, [r7, #20]
  4069f8:	3303      	adds	r3, #3
  4069fa:	781b      	ldrb	r3, [r3, #0]
  4069fc:	061a      	lsls	r2, r3, #24
  4069fe:	697b      	ldr	r3, [r7, #20]
  406a00:	3302      	adds	r3, #2
  406a02:	781b      	ldrb	r3, [r3, #0]
  406a04:	041b      	lsls	r3, r3, #16
  406a06:	4313      	orrs	r3, r2
  406a08:	697a      	ldr	r2, [r7, #20]
  406a0a:	3201      	adds	r2, #1
  406a0c:	7812      	ldrb	r2, [r2, #0]
  406a0e:	0212      	lsls	r2, r2, #8
  406a10:	4313      	orrs	r3, r2
  406a12:	697a      	ldr	r2, [r7, #20]
  406a14:	7812      	ldrb	r2, [r2, #0]
  406a16:	4313      	orrs	r3, r2
  406a18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
  406a1c:	687a      	ldr	r2, [r7, #4]
  406a1e:	4313      	orrs	r3, r2
  406a20:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
  406a22:	687b      	ldr	r3, [r7, #4]
  406a24:	b2da      	uxtb	r2, r3
  406a26:	697b      	ldr	r3, [r7, #20]
  406a28:	701a      	strb	r2, [r3, #0]
  406a2a:	697b      	ldr	r3, [r7, #20]
  406a2c:	3301      	adds	r3, #1
  406a2e:	687a      	ldr	r2, [r7, #4]
  406a30:	b292      	uxth	r2, r2
  406a32:	0a12      	lsrs	r2, r2, #8
  406a34:	b292      	uxth	r2, r2
  406a36:	b2d2      	uxtb	r2, r2
  406a38:	701a      	strb	r2, [r3, #0]
  406a3a:	697b      	ldr	r3, [r7, #20]
  406a3c:	3302      	adds	r3, #2
  406a3e:	687a      	ldr	r2, [r7, #4]
  406a40:	0c12      	lsrs	r2, r2, #16
  406a42:	b2d2      	uxtb	r2, r2
  406a44:	701a      	strb	r2, [r3, #0]
  406a46:	697b      	ldr	r3, [r7, #20]
  406a48:	3303      	adds	r3, #3
  406a4a:	687a      	ldr	r2, [r7, #4]
  406a4c:	0e12      	lsrs	r2, r2, #24
  406a4e:	b2d2      	uxtb	r2, r2
  406a50:	701a      	strb	r2, [r3, #0]
			break;
  406a52:	e009      	b.n	406a68 <put_fat+0x1f0>

		default :
			res = FR_INT_ERR;
  406a54:	2302      	movs	r3, #2
  406a56:	77fb      	strb	r3, [r7, #31]
  406a58:	e006      	b.n	406a68 <put_fat+0x1f0>
			if (res != FR_OK) break;
  406a5a:	bf00      	nop
  406a5c:	e004      	b.n	406a68 <put_fat+0x1f0>
			if (res != FR_OK) break;
  406a5e:	bf00      	nop
  406a60:	e002      	b.n	406a68 <put_fat+0x1f0>
			if (res != FR_OK) break;
  406a62:	bf00      	nop
  406a64:	e000      	b.n	406a68 <put_fat+0x1f0>
			if (res != FR_OK) break;
  406a66:	bf00      	nop
		}
		fs->wflag = 1;
  406a68:	68fb      	ldr	r3, [r7, #12]
  406a6a:	2201      	movs	r2, #1
  406a6c:	711a      	strb	r2, [r3, #4]
	}

	return res;
  406a6e:	7ffb      	ldrb	r3, [r7, #31]
}
  406a70:	4618      	mov	r0, r3
  406a72:	3720      	adds	r7, #32
  406a74:	46bd      	mov	sp, r7
  406a76:	bd80      	pop	{r7, pc}
  406a78:	004064c5 	.word	0x004064c5

00406a7c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
  406a7c:	b580      	push	{r7, lr}
  406a7e:	b084      	sub	sp, #16
  406a80:	af00      	add	r7, sp, #0
  406a82:	6078      	str	r0, [r7, #4]
  406a84:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  406a86:	683b      	ldr	r3, [r7, #0]
  406a88:	2b01      	cmp	r3, #1
  406a8a:	d904      	bls.n	406a96 <remove_chain+0x1a>
  406a8c:	687b      	ldr	r3, [r7, #4]
  406a8e:	699a      	ldr	r2, [r3, #24]
  406a90:	683b      	ldr	r3, [r7, #0]
  406a92:	429a      	cmp	r2, r3
  406a94:	d802      	bhi.n	406a9c <remove_chain+0x20>
		res = FR_INT_ERR;
  406a96:	2302      	movs	r3, #2
  406a98:	73fb      	strb	r3, [r7, #15]
  406a9a:	e039      	b.n	406b10 <remove_chain+0x94>

	} else {
		res = FR_OK;
  406a9c:	2300      	movs	r3, #0
  406a9e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
  406aa0:	e02d      	b.n	406afe <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  406aa2:	6839      	ldr	r1, [r7, #0]
  406aa4:	6878      	ldr	r0, [r7, #4]
  406aa6:	4b1d      	ldr	r3, [pc, #116]	; (406b1c <remove_chain+0xa0>)
  406aa8:	4798      	blx	r3
  406aaa:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
  406aac:	68bb      	ldr	r3, [r7, #8]
  406aae:	2b00      	cmp	r3, #0
  406ab0:	d02b      	beq.n	406b0a <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  406ab2:	68bb      	ldr	r3, [r7, #8]
  406ab4:	2b01      	cmp	r3, #1
  406ab6:	d102      	bne.n	406abe <remove_chain+0x42>
  406ab8:	2302      	movs	r3, #2
  406aba:	73fb      	strb	r3, [r7, #15]
  406abc:	e028      	b.n	406b10 <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  406abe:	68bb      	ldr	r3, [r7, #8]
  406ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
  406ac4:	d102      	bne.n	406acc <remove_chain+0x50>
  406ac6:	2301      	movs	r3, #1
  406ac8:	73fb      	strb	r3, [r7, #15]
  406aca:	e021      	b.n	406b10 <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  406acc:	2200      	movs	r2, #0
  406ace:	6839      	ldr	r1, [r7, #0]
  406ad0:	6878      	ldr	r0, [r7, #4]
  406ad2:	4b13      	ldr	r3, [pc, #76]	; (406b20 <remove_chain+0xa4>)
  406ad4:	4798      	blx	r3
  406ad6:	4603      	mov	r3, r0
  406ad8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
  406ada:	7bfb      	ldrb	r3, [r7, #15]
  406adc:	2b00      	cmp	r3, #0
  406ade:	d116      	bne.n	406b0e <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  406ae0:	687b      	ldr	r3, [r7, #4]
  406ae2:	691b      	ldr	r3, [r3, #16]
  406ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
  406ae8:	d007      	beq.n	406afa <remove_chain+0x7e>
				fs->free_clust++;
  406aea:	687b      	ldr	r3, [r7, #4]
  406aec:	691b      	ldr	r3, [r3, #16]
  406aee:	1c5a      	adds	r2, r3, #1
  406af0:	687b      	ldr	r3, [r7, #4]
  406af2:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
  406af4:	687b      	ldr	r3, [r7, #4]
  406af6:	2201      	movs	r2, #1
  406af8:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
  406afa:	68bb      	ldr	r3, [r7, #8]
  406afc:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
  406afe:	687b      	ldr	r3, [r7, #4]
  406b00:	699a      	ldr	r2, [r3, #24]
  406b02:	683b      	ldr	r3, [r7, #0]
  406b04:	429a      	cmp	r2, r3
  406b06:	d8cc      	bhi.n	406aa2 <remove_chain+0x26>
  406b08:	e002      	b.n	406b10 <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
  406b0a:	bf00      	nop
  406b0c:	e000      	b.n	406b10 <remove_chain+0x94>
			if (res != FR_OK) break;
  406b0e:	bf00      	nop
		}
	}

	return res;
  406b10:	7bfb      	ldrb	r3, [r7, #15]
}
  406b12:	4618      	mov	r0, r3
  406b14:	3710      	adds	r7, #16
  406b16:	46bd      	mov	sp, r7
  406b18:	bd80      	pop	{r7, pc}
  406b1a:	bf00      	nop
  406b1c:	00406715 	.word	0x00406715
  406b20:	00406879 	.word	0x00406879

00406b24 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
  406b24:	b580      	push	{r7, lr}
  406b26:	b086      	sub	sp, #24
  406b28:	af00      	add	r7, sp, #0
  406b2a:	6078      	str	r0, [r7, #4]
  406b2c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
  406b2e:	683b      	ldr	r3, [r7, #0]
  406b30:	2b00      	cmp	r3, #0
  406b32:	d10d      	bne.n	406b50 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
  406b34:	687b      	ldr	r3, [r7, #4]
  406b36:	68db      	ldr	r3, [r3, #12]
  406b38:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  406b3a:	693b      	ldr	r3, [r7, #16]
  406b3c:	2b00      	cmp	r3, #0
  406b3e:	d004      	beq.n	406b4a <create_chain+0x26>
  406b40:	687b      	ldr	r3, [r7, #4]
  406b42:	699a      	ldr	r2, [r3, #24]
  406b44:	693b      	ldr	r3, [r7, #16]
  406b46:	429a      	cmp	r2, r3
  406b48:	d815      	bhi.n	406b76 <create_chain+0x52>
  406b4a:	2301      	movs	r3, #1
  406b4c:	613b      	str	r3, [r7, #16]
  406b4e:	e012      	b.n	406b76 <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
  406b50:	6839      	ldr	r1, [r7, #0]
  406b52:	6878      	ldr	r0, [r7, #4]
  406b54:	4b38      	ldr	r3, [pc, #224]	; (406c38 <create_chain+0x114>)
  406b56:	4798      	blx	r3
  406b58:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
  406b5a:	68bb      	ldr	r3, [r7, #8]
  406b5c:	2b01      	cmp	r3, #1
  406b5e:	d801      	bhi.n	406b64 <create_chain+0x40>
  406b60:	2301      	movs	r3, #1
  406b62:	e064      	b.n	406c2e <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  406b64:	687b      	ldr	r3, [r7, #4]
  406b66:	699a      	ldr	r2, [r3, #24]
  406b68:	68bb      	ldr	r3, [r7, #8]
  406b6a:	429a      	cmp	r2, r3
  406b6c:	d901      	bls.n	406b72 <create_chain+0x4e>
  406b6e:	68bb      	ldr	r3, [r7, #8]
  406b70:	e05d      	b.n	406c2e <create_chain+0x10a>
		scl = clst;
  406b72:	683b      	ldr	r3, [r7, #0]
  406b74:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
  406b76:	693b      	ldr	r3, [r7, #16]
  406b78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
  406b7a:	697b      	ldr	r3, [r7, #20]
  406b7c:	3301      	adds	r3, #1
  406b7e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  406b80:	687b      	ldr	r3, [r7, #4]
  406b82:	699a      	ldr	r2, [r3, #24]
  406b84:	697b      	ldr	r3, [r7, #20]
  406b86:	429a      	cmp	r2, r3
  406b88:	d807      	bhi.n	406b9a <create_chain+0x76>
			ncl = 2;
  406b8a:	2302      	movs	r3, #2
  406b8c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
  406b8e:	697a      	ldr	r2, [r7, #20]
  406b90:	693b      	ldr	r3, [r7, #16]
  406b92:	429a      	cmp	r2, r3
  406b94:	d901      	bls.n	406b9a <create_chain+0x76>
  406b96:	2300      	movs	r3, #0
  406b98:	e049      	b.n	406c2e <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  406b9a:	6979      	ldr	r1, [r7, #20]
  406b9c:	6878      	ldr	r0, [r7, #4]
  406b9e:	4b26      	ldr	r3, [pc, #152]	; (406c38 <create_chain+0x114>)
  406ba0:	4798      	blx	r3
  406ba2:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
  406ba4:	68bb      	ldr	r3, [r7, #8]
  406ba6:	2b00      	cmp	r3, #0
  406ba8:	d00e      	beq.n	406bc8 <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  406baa:	68bb      	ldr	r3, [r7, #8]
  406bac:	f1b3 3fff 	cmp.w	r3, #4294967295
  406bb0:	d002      	beq.n	406bb8 <create_chain+0x94>
  406bb2:	68bb      	ldr	r3, [r7, #8]
  406bb4:	2b01      	cmp	r3, #1
  406bb6:	d101      	bne.n	406bbc <create_chain+0x98>
			return cs;
  406bb8:	68bb      	ldr	r3, [r7, #8]
  406bba:	e038      	b.n	406c2e <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
  406bbc:	697a      	ldr	r2, [r7, #20]
  406bbe:	693b      	ldr	r3, [r7, #16]
  406bc0:	429a      	cmp	r2, r3
  406bc2:	d1da      	bne.n	406b7a <create_chain+0x56>
  406bc4:	2300      	movs	r3, #0
  406bc6:	e032      	b.n	406c2e <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
  406bc8:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  406bca:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  406bce:	6979      	ldr	r1, [r7, #20]
  406bd0:	6878      	ldr	r0, [r7, #4]
  406bd2:	4b1a      	ldr	r3, [pc, #104]	; (406c3c <create_chain+0x118>)
  406bd4:	4798      	blx	r3
  406bd6:	4603      	mov	r3, r0
  406bd8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
  406bda:	7bfb      	ldrb	r3, [r7, #15]
  406bdc:	2b00      	cmp	r3, #0
  406bde:	d109      	bne.n	406bf4 <create_chain+0xd0>
  406be0:	683b      	ldr	r3, [r7, #0]
  406be2:	2b00      	cmp	r3, #0
  406be4:	d006      	beq.n	406bf4 <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  406be6:	697a      	ldr	r2, [r7, #20]
  406be8:	6839      	ldr	r1, [r7, #0]
  406bea:	6878      	ldr	r0, [r7, #4]
  406bec:	4b13      	ldr	r3, [pc, #76]	; (406c3c <create_chain+0x118>)
  406bee:	4798      	blx	r3
  406bf0:	4603      	mov	r3, r0
  406bf2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
  406bf4:	7bfb      	ldrb	r3, [r7, #15]
  406bf6:	2b00      	cmp	r3, #0
  406bf8:	d110      	bne.n	406c1c <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
  406bfa:	687b      	ldr	r3, [r7, #4]
  406bfc:	697a      	ldr	r2, [r7, #20]
  406bfe:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  406c00:	687b      	ldr	r3, [r7, #4]
  406c02:	691b      	ldr	r3, [r3, #16]
  406c04:	f1b3 3fff 	cmp.w	r3, #4294967295
  406c08:	d010      	beq.n	406c2c <create_chain+0x108>
			fs->free_clust--;
  406c0a:	687b      	ldr	r3, [r7, #4]
  406c0c:	691b      	ldr	r3, [r3, #16]
  406c0e:	1e5a      	subs	r2, r3, #1
  406c10:	687b      	ldr	r3, [r7, #4]
  406c12:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
  406c14:	687b      	ldr	r3, [r7, #4]
  406c16:	2201      	movs	r2, #1
  406c18:	715a      	strb	r2, [r3, #5]
  406c1a:	e007      	b.n	406c2c <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  406c1c:	7bfb      	ldrb	r3, [r7, #15]
  406c1e:	2b01      	cmp	r3, #1
  406c20:	d102      	bne.n	406c28 <create_chain+0x104>
  406c22:	f04f 33ff 	mov.w	r3, #4294967295
  406c26:	e000      	b.n	406c2a <create_chain+0x106>
  406c28:	2301      	movs	r3, #1
  406c2a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
  406c2c:	697b      	ldr	r3, [r7, #20]
}
  406c2e:	4618      	mov	r0, r3
  406c30:	3718      	adds	r7, #24
  406c32:	46bd      	mov	sp, r7
  406c34:	bd80      	pop	{r7, pc}
  406c36:	bf00      	nop
  406c38:	00406715 	.word	0x00406715
  406c3c:	00406879 	.word	0x00406879

00406c40 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  406c40:	b580      	push	{r7, lr}
  406c42:	b084      	sub	sp, #16
  406c44:	af00      	add	r7, sp, #0
  406c46:	6078      	str	r0, [r7, #4]
  406c48:	460b      	mov	r3, r1
  406c4a:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
  406c4c:	687b      	ldr	r3, [r7, #4]
  406c4e:	887a      	ldrh	r2, [r7, #2]
  406c50:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
  406c52:	687b      	ldr	r3, [r7, #4]
  406c54:	689b      	ldr	r3, [r3, #8]
  406c56:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  406c58:	68fb      	ldr	r3, [r7, #12]
  406c5a:	2b01      	cmp	r3, #1
  406c5c:	d005      	beq.n	406c6a <dir_sdi+0x2a>
  406c5e:	687b      	ldr	r3, [r7, #4]
  406c60:	681b      	ldr	r3, [r3, #0]
  406c62:	699a      	ldr	r2, [r3, #24]
  406c64:	68fb      	ldr	r3, [r7, #12]
  406c66:	429a      	cmp	r2, r3
  406c68:	d801      	bhi.n	406c6e <dir_sdi+0x2e>
		return FR_INT_ERR;
  406c6a:	2302      	movs	r3, #2
  406c6c:	e066      	b.n	406d3c <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  406c6e:	68fb      	ldr	r3, [r7, #12]
  406c70:	2b00      	cmp	r3, #0
  406c72:	d108      	bne.n	406c86 <dir_sdi+0x46>
  406c74:	687b      	ldr	r3, [r7, #4]
  406c76:	681b      	ldr	r3, [r3, #0]
  406c78:	781b      	ldrb	r3, [r3, #0]
  406c7a:	2b03      	cmp	r3, #3
  406c7c:	d103      	bne.n	406c86 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
  406c7e:	687b      	ldr	r3, [r7, #4]
  406c80:	681b      	ldr	r3, [r3, #0]
  406c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406c84:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  406c86:	68fb      	ldr	r3, [r7, #12]
  406c88:	2b00      	cmp	r3, #0
  406c8a:	d114      	bne.n	406cb6 <dir_sdi+0x76>
		dj->clust = clst;
  406c8c:	687b      	ldr	r3, [r7, #4]
  406c8e:	68fa      	ldr	r2, [r7, #12]
  406c90:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  406c92:	687b      	ldr	r3, [r7, #4]
  406c94:	681b      	ldr	r3, [r3, #0]
  406c96:	891b      	ldrh	r3, [r3, #8]
  406c98:	887a      	ldrh	r2, [r7, #2]
  406c9a:	429a      	cmp	r2, r3
  406c9c:	d301      	bcc.n	406ca2 <dir_sdi+0x62>
			return FR_INT_ERR;
  406c9e:	2302      	movs	r3, #2
  406ca0:	e04c      	b.n	406d3c <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  406ca2:	687b      	ldr	r3, [r7, #4]
  406ca4:	681b      	ldr	r3, [r3, #0]
  406ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406ca8:	887a      	ldrh	r2, [r7, #2]
  406caa:	0912      	lsrs	r2, r2, #4
  406cac:	b292      	uxth	r2, r2
  406cae:	441a      	add	r2, r3
  406cb0:	687b      	ldr	r3, [r7, #4]
  406cb2:	611a      	str	r2, [r3, #16]
  406cb4:	e036      	b.n	406d24 <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  406cb6:	687b      	ldr	r3, [r7, #4]
  406cb8:	681b      	ldr	r3, [r3, #0]
  406cba:	789b      	ldrb	r3, [r3, #2]
  406cbc:	b29b      	uxth	r3, r3
  406cbe:	011b      	lsls	r3, r3, #4
  406cc0:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
  406cc2:	e01b      	b.n	406cfc <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  406cc4:	687b      	ldr	r3, [r7, #4]
  406cc6:	681b      	ldr	r3, [r3, #0]
  406cc8:	68f9      	ldr	r1, [r7, #12]
  406cca:	4618      	mov	r0, r3
  406ccc:	4b1d      	ldr	r3, [pc, #116]	; (406d44 <dir_sdi+0x104>)
  406cce:	4798      	blx	r3
  406cd0:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  406cd2:	68fb      	ldr	r3, [r7, #12]
  406cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
  406cd8:	d101      	bne.n	406cde <dir_sdi+0x9e>
  406cda:	2301      	movs	r3, #1
  406cdc:	e02e      	b.n	406d3c <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  406cde:	68fb      	ldr	r3, [r7, #12]
  406ce0:	2b01      	cmp	r3, #1
  406ce2:	d905      	bls.n	406cf0 <dir_sdi+0xb0>
  406ce4:	687b      	ldr	r3, [r7, #4]
  406ce6:	681b      	ldr	r3, [r3, #0]
  406ce8:	699a      	ldr	r2, [r3, #24]
  406cea:	68fb      	ldr	r3, [r7, #12]
  406cec:	429a      	cmp	r2, r3
  406cee:	d801      	bhi.n	406cf4 <dir_sdi+0xb4>
				return FR_INT_ERR;
  406cf0:	2302      	movs	r3, #2
  406cf2:	e023      	b.n	406d3c <dir_sdi+0xfc>
			idx -= ic;
  406cf4:	887a      	ldrh	r2, [r7, #2]
  406cf6:	897b      	ldrh	r3, [r7, #10]
  406cf8:	1ad3      	subs	r3, r2, r3
  406cfa:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
  406cfc:	887a      	ldrh	r2, [r7, #2]
  406cfe:	897b      	ldrh	r3, [r7, #10]
  406d00:	429a      	cmp	r2, r3
  406d02:	d2df      	bcs.n	406cc4 <dir_sdi+0x84>
		}
		dj->clust = clst;
  406d04:	687b      	ldr	r3, [r7, #4]
  406d06:	68fa      	ldr	r2, [r7, #12]
  406d08:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  406d0a:	687b      	ldr	r3, [r7, #4]
  406d0c:	681b      	ldr	r3, [r3, #0]
  406d0e:	68f9      	ldr	r1, [r7, #12]
  406d10:	4618      	mov	r0, r3
  406d12:	4b0d      	ldr	r3, [pc, #52]	; (406d48 <dir_sdi+0x108>)
  406d14:	4798      	blx	r3
  406d16:	4602      	mov	r2, r0
  406d18:	887b      	ldrh	r3, [r7, #2]
  406d1a:	091b      	lsrs	r3, r3, #4
  406d1c:	b29b      	uxth	r3, r3
  406d1e:	441a      	add	r2, r3
  406d20:	687b      	ldr	r3, [r7, #4]
  406d22:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  406d24:	687b      	ldr	r3, [r7, #4]
  406d26:	681b      	ldr	r3, [r3, #0]
  406d28:	f103 0230 	add.w	r2, r3, #48	; 0x30
  406d2c:	887b      	ldrh	r3, [r7, #2]
  406d2e:	f003 030f 	and.w	r3, r3, #15
  406d32:	015b      	lsls	r3, r3, #5
  406d34:	441a      	add	r2, r3
  406d36:	687b      	ldr	r3, [r7, #4]
  406d38:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
  406d3a:	2300      	movs	r3, #0
}
  406d3c:	4618      	mov	r0, r3
  406d3e:	3710      	adds	r7, #16
  406d40:	46bd      	mov	sp, r7
  406d42:	bd80      	pop	{r7, pc}
  406d44:	00406715 	.word	0x00406715
  406d48:	004066d5 	.word	0x004066d5

00406d4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  406d4c:	b590      	push	{r4, r7, lr}
  406d4e:	b085      	sub	sp, #20
  406d50:	af00      	add	r7, sp, #0
  406d52:	6078      	str	r0, [r7, #4]
  406d54:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
  406d56:	687b      	ldr	r3, [r7, #4]
  406d58:	88db      	ldrh	r3, [r3, #6]
  406d5a:	3301      	adds	r3, #1
  406d5c:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  406d5e:	893b      	ldrh	r3, [r7, #8]
  406d60:	2b00      	cmp	r3, #0
  406d62:	d003      	beq.n	406d6c <dir_next+0x20>
  406d64:	687b      	ldr	r3, [r7, #4]
  406d66:	691b      	ldr	r3, [r3, #16]
  406d68:	2b00      	cmp	r3, #0
  406d6a:	d101      	bne.n	406d70 <dir_next+0x24>
		return FR_NO_FILE;
  406d6c:	2304      	movs	r3, #4
  406d6e:	e0bd      	b.n	406eec <dir_next+0x1a0>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  406d70:	893b      	ldrh	r3, [r7, #8]
  406d72:	f003 030f 	and.w	r3, r3, #15
  406d76:	b29b      	uxth	r3, r3
  406d78:	2b00      	cmp	r3, #0
  406d7a:	f040 80a8 	bne.w	406ece <dir_next+0x182>
		dj->sect++;					/* Next sector */
  406d7e:	687b      	ldr	r3, [r7, #4]
  406d80:	691b      	ldr	r3, [r3, #16]
  406d82:	1c5a      	adds	r2, r3, #1
  406d84:	687b      	ldr	r3, [r7, #4]
  406d86:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
  406d88:	687b      	ldr	r3, [r7, #4]
  406d8a:	68db      	ldr	r3, [r3, #12]
  406d8c:	2b00      	cmp	r3, #0
  406d8e:	d108      	bne.n	406da2 <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  406d90:	687b      	ldr	r3, [r7, #4]
  406d92:	681b      	ldr	r3, [r3, #0]
  406d94:	891b      	ldrh	r3, [r3, #8]
  406d96:	893a      	ldrh	r2, [r7, #8]
  406d98:	429a      	cmp	r2, r3
  406d9a:	f0c0 8098 	bcc.w	406ece <dir_next+0x182>
				return FR_NO_FILE;
  406d9e:	2304      	movs	r3, #4
  406da0:	e0a4      	b.n	406eec <dir_next+0x1a0>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  406da2:	893b      	ldrh	r3, [r7, #8]
  406da4:	091b      	lsrs	r3, r3, #4
  406da6:	b29b      	uxth	r3, r3
  406da8:	461a      	mov	r2, r3
  406daa:	687b      	ldr	r3, [r7, #4]
  406dac:	681b      	ldr	r3, [r3, #0]
  406dae:	789b      	ldrb	r3, [r3, #2]
  406db0:	3b01      	subs	r3, #1
  406db2:	4013      	ands	r3, r2
  406db4:	2b00      	cmp	r3, #0
  406db6:	f040 808a 	bne.w	406ece <dir_next+0x182>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  406dba:	687b      	ldr	r3, [r7, #4]
  406dbc:	681a      	ldr	r2, [r3, #0]
  406dbe:	687b      	ldr	r3, [r7, #4]
  406dc0:	68db      	ldr	r3, [r3, #12]
  406dc2:	4619      	mov	r1, r3
  406dc4:	4610      	mov	r0, r2
  406dc6:	4b4b      	ldr	r3, [pc, #300]	; (406ef4 <dir_next+0x1a8>)
  406dc8:	4798      	blx	r3
  406dca:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
  406dcc:	68fb      	ldr	r3, [r7, #12]
  406dce:	2b01      	cmp	r3, #1
  406dd0:	d801      	bhi.n	406dd6 <dir_next+0x8a>
  406dd2:	2302      	movs	r3, #2
  406dd4:	e08a      	b.n	406eec <dir_next+0x1a0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  406dd6:	68fb      	ldr	r3, [r7, #12]
  406dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
  406ddc:	d101      	bne.n	406de2 <dir_next+0x96>
  406dde:	2301      	movs	r3, #1
  406de0:	e084      	b.n	406eec <dir_next+0x1a0>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  406de2:	687b      	ldr	r3, [r7, #4]
  406de4:	681b      	ldr	r3, [r3, #0]
  406de6:	699a      	ldr	r2, [r3, #24]
  406de8:	68fb      	ldr	r3, [r7, #12]
  406dea:	429a      	cmp	r2, r3
  406dec:	d863      	bhi.n	406eb6 <dir_next+0x16a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  406dee:	683b      	ldr	r3, [r7, #0]
  406df0:	2b00      	cmp	r3, #0
  406df2:	d101      	bne.n	406df8 <dir_next+0xac>
  406df4:	2304      	movs	r3, #4
  406df6:	e079      	b.n	406eec <dir_next+0x1a0>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  406df8:	687b      	ldr	r3, [r7, #4]
  406dfa:	681a      	ldr	r2, [r3, #0]
  406dfc:	687b      	ldr	r3, [r7, #4]
  406dfe:	68db      	ldr	r3, [r3, #12]
  406e00:	4619      	mov	r1, r3
  406e02:	4610      	mov	r0, r2
  406e04:	4b3c      	ldr	r3, [pc, #240]	; (406ef8 <dir_next+0x1ac>)
  406e06:	4798      	blx	r3
  406e08:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  406e0a:	68fb      	ldr	r3, [r7, #12]
  406e0c:	2b00      	cmp	r3, #0
  406e0e:	d101      	bne.n	406e14 <dir_next+0xc8>
  406e10:	2307      	movs	r3, #7
  406e12:	e06b      	b.n	406eec <dir_next+0x1a0>
					if (clst == 1) return FR_INT_ERR;
  406e14:	68fb      	ldr	r3, [r7, #12]
  406e16:	2b01      	cmp	r3, #1
  406e18:	d101      	bne.n	406e1e <dir_next+0xd2>
  406e1a:	2302      	movs	r3, #2
  406e1c:	e066      	b.n	406eec <dir_next+0x1a0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  406e1e:	68fb      	ldr	r3, [r7, #12]
  406e20:	f1b3 3fff 	cmp.w	r3, #4294967295
  406e24:	d101      	bne.n	406e2a <dir_next+0xde>
  406e26:	2301      	movs	r3, #1
  406e28:	e060      	b.n	406eec <dir_next+0x1a0>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  406e2a:	687b      	ldr	r3, [r7, #4]
  406e2c:	681b      	ldr	r3, [r3, #0]
  406e2e:	2100      	movs	r1, #0
  406e30:	4618      	mov	r0, r3
  406e32:	4b32      	ldr	r3, [pc, #200]	; (406efc <dir_next+0x1b0>)
  406e34:	4798      	blx	r3
  406e36:	4603      	mov	r3, r0
  406e38:	2b00      	cmp	r3, #0
  406e3a:	d001      	beq.n	406e40 <dir_next+0xf4>
  406e3c:	2301      	movs	r3, #1
  406e3e:	e055      	b.n	406eec <dir_next+0x1a0>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  406e40:	687b      	ldr	r3, [r7, #4]
  406e42:	681b      	ldr	r3, [r3, #0]
  406e44:	3330      	adds	r3, #48	; 0x30
  406e46:	f44f 7200 	mov.w	r2, #512	; 0x200
  406e4a:	2100      	movs	r1, #0
  406e4c:	4618      	mov	r0, r3
  406e4e:	4b2c      	ldr	r3, [pc, #176]	; (406f00 <dir_next+0x1b4>)
  406e50:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  406e52:	687b      	ldr	r3, [r7, #4]
  406e54:	681c      	ldr	r4, [r3, #0]
  406e56:	687b      	ldr	r3, [r7, #4]
  406e58:	681b      	ldr	r3, [r3, #0]
  406e5a:	68f9      	ldr	r1, [r7, #12]
  406e5c:	4618      	mov	r0, r3
  406e5e:	4b29      	ldr	r3, [pc, #164]	; (406f04 <dir_next+0x1b8>)
  406e60:	4798      	blx	r3
  406e62:	4603      	mov	r3, r0
  406e64:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  406e66:	2300      	movs	r3, #0
  406e68:	72fb      	strb	r3, [r7, #11]
  406e6a:	e016      	b.n	406e9a <dir_next+0x14e>
						dj->fs->wflag = 1;
  406e6c:	687b      	ldr	r3, [r7, #4]
  406e6e:	681b      	ldr	r3, [r3, #0]
  406e70:	2201      	movs	r2, #1
  406e72:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  406e74:	687b      	ldr	r3, [r7, #4]
  406e76:	681b      	ldr	r3, [r3, #0]
  406e78:	2100      	movs	r1, #0
  406e7a:	4618      	mov	r0, r3
  406e7c:	4b1f      	ldr	r3, [pc, #124]	; (406efc <dir_next+0x1b0>)
  406e7e:	4798      	blx	r3
  406e80:	4603      	mov	r3, r0
  406e82:	2b00      	cmp	r3, #0
  406e84:	d001      	beq.n	406e8a <dir_next+0x13e>
  406e86:	2301      	movs	r3, #1
  406e88:	e030      	b.n	406eec <dir_next+0x1a0>
						dj->fs->winsect++;
  406e8a:	687b      	ldr	r3, [r7, #4]
  406e8c:	681b      	ldr	r3, [r3, #0]
  406e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406e90:	3201      	adds	r2, #1
  406e92:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  406e94:	7afb      	ldrb	r3, [r7, #11]
  406e96:	3301      	adds	r3, #1
  406e98:	72fb      	strb	r3, [r7, #11]
  406e9a:	687b      	ldr	r3, [r7, #4]
  406e9c:	681b      	ldr	r3, [r3, #0]
  406e9e:	789b      	ldrb	r3, [r3, #2]
  406ea0:	7afa      	ldrb	r2, [r7, #11]
  406ea2:	429a      	cmp	r2, r3
  406ea4:	d3e2      	bcc.n	406e6c <dir_next+0x120>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
  406ea6:	687b      	ldr	r3, [r7, #4]
  406ea8:	681b      	ldr	r3, [r3, #0]
  406eaa:	687a      	ldr	r2, [r7, #4]
  406eac:	6812      	ldr	r2, [r2, #0]
  406eae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  406eb0:	7afa      	ldrb	r2, [r7, #11]
  406eb2:	1a8a      	subs	r2, r1, r2
  406eb4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
  406eb6:	687b      	ldr	r3, [r7, #4]
  406eb8:	68fa      	ldr	r2, [r7, #12]
  406eba:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
  406ebc:	687b      	ldr	r3, [r7, #4]
  406ebe:	681b      	ldr	r3, [r3, #0]
  406ec0:	68f9      	ldr	r1, [r7, #12]
  406ec2:	4618      	mov	r0, r3
  406ec4:	4b0f      	ldr	r3, [pc, #60]	; (406f04 <dir_next+0x1b8>)
  406ec6:	4798      	blx	r3
  406ec8:	4602      	mov	r2, r0
  406eca:	687b      	ldr	r3, [r7, #4]
  406ecc:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
  406ece:	687b      	ldr	r3, [r7, #4]
  406ed0:	893a      	ldrh	r2, [r7, #8]
  406ed2:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  406ed4:	687b      	ldr	r3, [r7, #4]
  406ed6:	681b      	ldr	r3, [r3, #0]
  406ed8:	f103 0230 	add.w	r2, r3, #48	; 0x30
  406edc:	893b      	ldrh	r3, [r7, #8]
  406ede:	f003 030f 	and.w	r3, r3, #15
  406ee2:	015b      	lsls	r3, r3, #5
  406ee4:	441a      	add	r2, r3
  406ee6:	687b      	ldr	r3, [r7, #4]
  406ee8:	615a      	str	r2, [r3, #20]

	return FR_OK;
  406eea:	2300      	movs	r3, #0
}
  406eec:	4618      	mov	r0, r3
  406eee:	3714      	adds	r7, #20
  406ef0:	46bd      	mov	sp, r7
  406ef2:	bd90      	pop	{r4, r7, pc}
  406ef4:	00406715 	.word	0x00406715
  406ef8:	00406b25 	.word	0x00406b25
  406efc:	004064c5 	.word	0x004064c5
  406f00:	0040640d 	.word	0x0040640d
  406f04:	004066d5 	.word	0x004066d5

00406f08 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
  406f08:	b580      	push	{r7, lr}
  406f0a:	b086      	sub	sp, #24
  406f0c:	af00      	add	r7, sp, #0
  406f0e:	6078      	str	r0, [r7, #4]
  406f10:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  406f12:	683b      	ldr	r3, [r7, #0]
  406f14:	781b      	ldrb	r3, [r3, #0]
  406f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  406f1a:	1e5a      	subs	r2, r3, #1
  406f1c:	4613      	mov	r3, r2
  406f1e:	005b      	lsls	r3, r3, #1
  406f20:	4413      	add	r3, r2
  406f22:	009b      	lsls	r3, r3, #2
  406f24:	4413      	add	r3, r2
  406f26:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
  406f28:	2300      	movs	r3, #0
  406f2a:	613b      	str	r3, [r7, #16]
  406f2c:	2301      	movs	r3, #1
  406f2e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  406f30:	4a2b      	ldr	r2, [pc, #172]	; (406fe0 <cmp_lfn+0xd8>)
  406f32:	693b      	ldr	r3, [r7, #16]
  406f34:	4413      	add	r3, r2
  406f36:	781b      	ldrb	r3, [r3, #0]
  406f38:	3301      	adds	r3, #1
  406f3a:	683a      	ldr	r2, [r7, #0]
  406f3c:	4413      	add	r3, r2
  406f3e:	781b      	ldrb	r3, [r3, #0]
  406f40:	021b      	lsls	r3, r3, #8
  406f42:	b21a      	sxth	r2, r3
  406f44:	4926      	ldr	r1, [pc, #152]	; (406fe0 <cmp_lfn+0xd8>)
  406f46:	693b      	ldr	r3, [r7, #16]
  406f48:	440b      	add	r3, r1
  406f4a:	781b      	ldrb	r3, [r3, #0]
  406f4c:	4619      	mov	r1, r3
  406f4e:	683b      	ldr	r3, [r7, #0]
  406f50:	440b      	add	r3, r1
  406f52:	781b      	ldrb	r3, [r3, #0]
  406f54:	b21b      	sxth	r3, r3
  406f56:	4313      	orrs	r3, r2
  406f58:	b21b      	sxth	r3, r3
  406f5a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last char has not been processed */
  406f5c:	89fb      	ldrh	r3, [r7, #14]
  406f5e:	2b00      	cmp	r3, #0
  406f60:	d019      	beq.n	406f96 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  406f62:	89bb      	ldrh	r3, [r7, #12]
  406f64:	4618      	mov	r0, r3
  406f66:	4b1f      	ldr	r3, [pc, #124]	; (406fe4 <cmp_lfn+0xdc>)
  406f68:	4798      	blx	r3
  406f6a:	4603      	mov	r3, r0
  406f6c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  406f6e:	697b      	ldr	r3, [r7, #20]
  406f70:	2bfe      	cmp	r3, #254	; 0xfe
  406f72:	d80e      	bhi.n	406f92 <cmp_lfn+0x8a>
  406f74:	697b      	ldr	r3, [r7, #20]
  406f76:	1c5a      	adds	r2, r3, #1
  406f78:	617a      	str	r2, [r7, #20]
  406f7a:	005b      	lsls	r3, r3, #1
  406f7c:	687a      	ldr	r2, [r7, #4]
  406f7e:	4413      	add	r3, r2
  406f80:	881b      	ldrh	r3, [r3, #0]
  406f82:	4618      	mov	r0, r3
  406f84:	4b17      	ldr	r3, [pc, #92]	; (406fe4 <cmp_lfn+0xdc>)
  406f86:	4798      	blx	r3
  406f88:	4603      	mov	r3, r0
  406f8a:	461a      	mov	r2, r3
  406f8c:	89fb      	ldrh	r3, [r7, #14]
  406f8e:	4293      	cmp	r3, r2
  406f90:	d008      	beq.n	406fa4 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
  406f92:	2300      	movs	r3, #0
  406f94:	e01f      	b.n	406fd6 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  406f96:	89bb      	ldrh	r3, [r7, #12]
  406f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
  406f9c:	4293      	cmp	r3, r2
  406f9e:	d001      	beq.n	406fa4 <cmp_lfn+0x9c>
  406fa0:	2300      	movs	r3, #0
  406fa2:	e018      	b.n	406fd6 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  406fa4:	693b      	ldr	r3, [r7, #16]
  406fa6:	3301      	adds	r3, #1
  406fa8:	613b      	str	r3, [r7, #16]
  406faa:	693b      	ldr	r3, [r7, #16]
  406fac:	2b0c      	cmp	r3, #12
  406fae:	d9bf      	bls.n	406f30 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  406fb0:	683b      	ldr	r3, [r7, #0]
  406fb2:	781b      	ldrb	r3, [r3, #0]
  406fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406fb8:	2b00      	cmp	r3, #0
  406fba:	d00b      	beq.n	406fd4 <cmp_lfn+0xcc>
  406fbc:	89fb      	ldrh	r3, [r7, #14]
  406fbe:	2b00      	cmp	r3, #0
  406fc0:	d008      	beq.n	406fd4 <cmp_lfn+0xcc>
  406fc2:	697b      	ldr	r3, [r7, #20]
  406fc4:	005b      	lsls	r3, r3, #1
  406fc6:	687a      	ldr	r2, [r7, #4]
  406fc8:	4413      	add	r3, r2
  406fca:	881b      	ldrh	r3, [r3, #0]
  406fcc:	2b00      	cmp	r3, #0
  406fce:	d001      	beq.n	406fd4 <cmp_lfn+0xcc>
		return 0;
  406fd0:	2300      	movs	r3, #0
  406fd2:	e000      	b.n	406fd6 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
  406fd4:	2301      	movs	r3, #1
}
  406fd6:	4618      	mov	r0, r3
  406fd8:	3718      	adds	r7, #24
  406fda:	46bd      	mov	sp, r7
  406fdc:	bd80      	pop	{r7, pc}
  406fde:	bf00      	nop
  406fe0:	0040efe8 	.word	0x0040efe8
  406fe4:	00408da9 	.word	0x00408da9

00406fe8 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
  406fe8:	b480      	push	{r7}
  406fea:	b089      	sub	sp, #36	; 0x24
  406fec:	af00      	add	r7, sp, #0
  406fee:	60f8      	str	r0, [r7, #12]
  406ff0:	60b9      	str	r1, [r7, #8]
  406ff2:	4611      	mov	r1, r2
  406ff4:	461a      	mov	r2, r3
  406ff6:	460b      	mov	r3, r1
  406ff8:	71fb      	strb	r3, [r7, #7]
  406ffa:	4613      	mov	r3, r2
  406ffc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
  406ffe:	68bb      	ldr	r3, [r7, #8]
  407000:	330d      	adds	r3, #13
  407002:	79ba      	ldrb	r2, [r7, #6]
  407004:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  407006:	68bb      	ldr	r3, [r7, #8]
  407008:	330b      	adds	r3, #11
  40700a:	220f      	movs	r2, #15
  40700c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
  40700e:	68bb      	ldr	r3, [r7, #8]
  407010:	330c      	adds	r3, #12
  407012:	2200      	movs	r2, #0
  407014:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  407016:	68bb      	ldr	r3, [r7, #8]
  407018:	331a      	adds	r3, #26
  40701a:	2200      	movs	r2, #0
  40701c:	701a      	strb	r2, [r3, #0]
  40701e:	68bb      	ldr	r3, [r7, #8]
  407020:	331b      	adds	r3, #27
  407022:	2200      	movs	r2, #0
  407024:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  407026:	79fb      	ldrb	r3, [r7, #7]
  407028:	1e5a      	subs	r2, r3, #1
  40702a:	4613      	mov	r3, r2
  40702c:	005b      	lsls	r3, r3, #1
  40702e:	4413      	add	r3, r2
  407030:	009b      	lsls	r3, r3, #2
  407032:	4413      	add	r3, r2
  407034:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
  407036:	2300      	movs	r3, #0
  407038:	82fb      	strh	r3, [r7, #22]
  40703a:	2300      	movs	r3, #0
  40703c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  40703e:	8afb      	ldrh	r3, [r7, #22]
  407040:	f64f 72ff 	movw	r2, #65535	; 0xffff
  407044:	4293      	cmp	r3, r2
  407046:	d007      	beq.n	407058 <fit_lfn+0x70>
  407048:	69fb      	ldr	r3, [r7, #28]
  40704a:	1c5a      	adds	r2, r3, #1
  40704c:	61fa      	str	r2, [r7, #28]
  40704e:	005b      	lsls	r3, r3, #1
  407050:	68fa      	ldr	r2, [r7, #12]
  407052:	4413      	add	r3, r2
  407054:	881b      	ldrh	r3, [r3, #0]
  407056:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  407058:	4a1d      	ldr	r2, [pc, #116]	; (4070d0 <fit_lfn+0xe8>)
  40705a:	69bb      	ldr	r3, [r7, #24]
  40705c:	4413      	add	r3, r2
  40705e:	781b      	ldrb	r3, [r3, #0]
  407060:	461a      	mov	r2, r3
  407062:	68bb      	ldr	r3, [r7, #8]
  407064:	4413      	add	r3, r2
  407066:	8afa      	ldrh	r2, [r7, #22]
  407068:	b2d2      	uxtb	r2, r2
  40706a:	701a      	strb	r2, [r3, #0]
  40706c:	4a18      	ldr	r2, [pc, #96]	; (4070d0 <fit_lfn+0xe8>)
  40706e:	69bb      	ldr	r3, [r7, #24]
  407070:	4413      	add	r3, r2
  407072:	781b      	ldrb	r3, [r3, #0]
  407074:	3301      	adds	r3, #1
  407076:	68ba      	ldr	r2, [r7, #8]
  407078:	4413      	add	r3, r2
  40707a:	8afa      	ldrh	r2, [r7, #22]
  40707c:	0a12      	lsrs	r2, r2, #8
  40707e:	b292      	uxth	r2, r2
  407080:	b2d2      	uxtb	r2, r2
  407082:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  407084:	8afb      	ldrh	r3, [r7, #22]
  407086:	2b00      	cmp	r3, #0
  407088:	d102      	bne.n	407090 <fit_lfn+0xa8>
  40708a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40708e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
  407090:	69bb      	ldr	r3, [r7, #24]
  407092:	3301      	adds	r3, #1
  407094:	61bb      	str	r3, [r7, #24]
  407096:	69bb      	ldr	r3, [r7, #24]
  407098:	2b0c      	cmp	r3, #12
  40709a:	d9d0      	bls.n	40703e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  40709c:	8afb      	ldrh	r3, [r7, #22]
  40709e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4070a2:	4293      	cmp	r3, r2
  4070a4:	d006      	beq.n	4070b4 <fit_lfn+0xcc>
  4070a6:	69fb      	ldr	r3, [r7, #28]
  4070a8:	005b      	lsls	r3, r3, #1
  4070aa:	68fa      	ldr	r2, [r7, #12]
  4070ac:	4413      	add	r3, r2
  4070ae:	881b      	ldrh	r3, [r3, #0]
  4070b0:	2b00      	cmp	r3, #0
  4070b2:	d103      	bne.n	4070bc <fit_lfn+0xd4>
  4070b4:	79fb      	ldrb	r3, [r7, #7]
  4070b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4070ba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  4070bc:	68bb      	ldr	r3, [r7, #8]
  4070be:	79fa      	ldrb	r2, [r7, #7]
  4070c0:	701a      	strb	r2, [r3, #0]
}
  4070c2:	bf00      	nop
  4070c4:	3724      	adds	r7, #36	; 0x24
  4070c6:	46bd      	mov	sp, r7
  4070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4070cc:	4770      	bx	lr
  4070ce:	bf00      	nop
  4070d0:	0040efe8 	.word	0x0040efe8

004070d4 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
  4070d4:	b580      	push	{r7, lr}
  4070d6:	b08a      	sub	sp, #40	; 0x28
  4070d8:	af00      	add	r7, sp, #0
  4070da:	60f8      	str	r0, [r7, #12]
  4070dc:	60b9      	str	r1, [r7, #8]
  4070de:	607a      	str	r2, [r7, #4]
  4070e0:	807b      	strh	r3, [r7, #2]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
  4070e2:	220b      	movs	r2, #11
  4070e4:	68b9      	ldr	r1, [r7, #8]
  4070e6:	68f8      	ldr	r0, [r7, #12]
  4070e8:	4b33      	ldr	r3, [pc, #204]	; (4071b8 <gen_numname+0xe4>)
  4070ea:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  4070ec:	887b      	ldrh	r3, [r7, #2]
  4070ee:	2b05      	cmp	r3, #5
  4070f0:	d90f      	bls.n	407112 <gen_numname+0x3e>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  4070f2:	887b      	ldrh	r3, [r7, #2]
  4070f4:	b29a      	uxth	r2, r3
  4070f6:	0852      	lsrs	r2, r2, #1
  4070f8:	03db      	lsls	r3, r3, #15
  4070fa:	4313      	orrs	r3, r2
  4070fc:	b29a      	uxth	r2, r3
  4070fe:	687b      	ldr	r3, [r7, #4]
  407100:	1c99      	adds	r1, r3, #2
  407102:	6079      	str	r1, [r7, #4]
  407104:	881b      	ldrh	r3, [r3, #0]
  407106:	4413      	add	r3, r2
  407108:	807b      	strh	r3, [r7, #2]
  40710a:	687b      	ldr	r3, [r7, #4]
  40710c:	881b      	ldrh	r3, [r3, #0]
  40710e:	2b00      	cmp	r3, #0
  407110:	d1ef      	bne.n	4070f2 <gen_numname+0x1e>
	}

	/* itoa (hexdecimal) */
	i = 7;
  407112:	2307      	movs	r3, #7
  407114:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
  407116:	887b      	ldrh	r3, [r7, #2]
  407118:	b2db      	uxtb	r3, r3
  40711a:	f003 030f 	and.w	r3, r3, #15
  40711e:	b2db      	uxtb	r3, r3
  407120:	3330      	adds	r3, #48	; 0x30
  407122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c > '9') c += 7;
  407126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40712a:	2b39      	cmp	r3, #57	; 0x39
  40712c:	d904      	bls.n	407138 <gen_numname+0x64>
  40712e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407132:	3307      	adds	r3, #7
  407134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ns[i--] = c;
  407138:	6a3b      	ldr	r3, [r7, #32]
  40713a:	1e5a      	subs	r2, r3, #1
  40713c:	623a      	str	r2, [r7, #32]
  40713e:	f107 0228 	add.w	r2, r7, #40	; 0x28
  407142:	4413      	add	r3, r2
  407144:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  407148:	f803 2c14 	strb.w	r2, [r3, #-20]
		seq /= 16;
  40714c:	887b      	ldrh	r3, [r7, #2]
  40714e:	091b      	lsrs	r3, r3, #4
  407150:	807b      	strh	r3, [r7, #2]
	} while (seq);
  407152:	887b      	ldrh	r3, [r7, #2]
  407154:	2b00      	cmp	r3, #0
  407156:	d1de      	bne.n	407116 <gen_numname+0x42>
	ns[i] = '~';
  407158:	f107 0214 	add.w	r2, r7, #20
  40715c:	6a3b      	ldr	r3, [r7, #32]
  40715e:	4413      	add	r3, r2
  407160:	227e      	movs	r2, #126	; 0x7e
  407162:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  407164:	2300      	movs	r3, #0
  407166:	61fb      	str	r3, [r7, #28]
  407168:	e002      	b.n	407170 <gen_numname+0x9c>
  40716a:	69fb      	ldr	r3, [r7, #28]
  40716c:	3301      	adds	r3, #1
  40716e:	61fb      	str	r3, [r7, #28]
  407170:	69fa      	ldr	r2, [r7, #28]
  407172:	6a3b      	ldr	r3, [r7, #32]
  407174:	429a      	cmp	r2, r3
  407176:	d205      	bcs.n	407184 <gen_numname+0xb0>
  407178:	68fa      	ldr	r2, [r7, #12]
  40717a:	69fb      	ldr	r3, [r7, #28]
  40717c:	4413      	add	r3, r2
  40717e:	781b      	ldrb	r3, [r3, #0]
  407180:	2b20      	cmp	r3, #32
  407182:	d1f2      	bne.n	40716a <gen_numname+0x96>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  407184:	69fb      	ldr	r3, [r7, #28]
  407186:	1c5a      	adds	r2, r3, #1
  407188:	61fa      	str	r2, [r7, #28]
  40718a:	68fa      	ldr	r2, [r7, #12]
  40718c:	441a      	add	r2, r3
  40718e:	6a3b      	ldr	r3, [r7, #32]
  407190:	2b07      	cmp	r3, #7
  407192:	d808      	bhi.n	4071a6 <gen_numname+0xd2>
  407194:	6a3b      	ldr	r3, [r7, #32]
  407196:	1c59      	adds	r1, r3, #1
  407198:	6239      	str	r1, [r7, #32]
  40719a:	f107 0128 	add.w	r1, r7, #40	; 0x28
  40719e:	440b      	add	r3, r1
  4071a0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
  4071a4:	e000      	b.n	4071a8 <gen_numname+0xd4>
  4071a6:	2320      	movs	r3, #32
  4071a8:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
  4071aa:	69fb      	ldr	r3, [r7, #28]
  4071ac:	2b07      	cmp	r3, #7
  4071ae:	d9e9      	bls.n	407184 <gen_numname+0xb0>
}
  4071b0:	bf00      	nop
  4071b2:	3728      	adds	r7, #40	; 0x28
  4071b4:	46bd      	mov	sp, r7
  4071b6:	bd80      	pop	{r7, pc}
  4071b8:	004063d1 	.word	0x004063d1

004071bc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  4071bc:	b480      	push	{r7}
  4071be:	b085      	sub	sp, #20
  4071c0:	af00      	add	r7, sp, #0
  4071c2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
  4071c4:	2300      	movs	r3, #0
  4071c6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
  4071c8:	230b      	movs	r3, #11
  4071ca:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  4071cc:	7bfb      	ldrb	r3, [r7, #15]
  4071ce:	b2da      	uxtb	r2, r3
  4071d0:	0852      	lsrs	r2, r2, #1
  4071d2:	01db      	lsls	r3, r3, #7
  4071d4:	4313      	orrs	r3, r2
  4071d6:	b2da      	uxtb	r2, r3
  4071d8:	687b      	ldr	r3, [r7, #4]
  4071da:	1c59      	adds	r1, r3, #1
  4071dc:	6079      	str	r1, [r7, #4]
  4071de:	781b      	ldrb	r3, [r3, #0]
  4071e0:	4413      	add	r3, r2
  4071e2:	73fb      	strb	r3, [r7, #15]
  4071e4:	68bb      	ldr	r3, [r7, #8]
  4071e6:	3b01      	subs	r3, #1
  4071e8:	60bb      	str	r3, [r7, #8]
  4071ea:	68bb      	ldr	r3, [r7, #8]
  4071ec:	2b00      	cmp	r3, #0
  4071ee:	d1ed      	bne.n	4071cc <sum_sfn+0x10>
	return sum;
  4071f0:	7bfb      	ldrb	r3, [r7, #15]
}
  4071f2:	4618      	mov	r0, r3
  4071f4:	3714      	adds	r7, #20
  4071f6:	46bd      	mov	sp, r7
  4071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4071fc:	4770      	bx	lr
	...

00407200 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
  407200:	b580      	push	{r7, lr}
  407202:	b086      	sub	sp, #24
  407204:	af00      	add	r7, sp, #0
  407206:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
  407208:	2100      	movs	r1, #0
  40720a:	6878      	ldr	r0, [r7, #4]
  40720c:	4b52      	ldr	r3, [pc, #328]	; (407358 <dir_find+0x158>)
  40720e:	4798      	blx	r3
  407210:	4603      	mov	r3, r0
  407212:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
  407214:	7dfb      	ldrb	r3, [r7, #23]
  407216:	2b00      	cmp	r3, #0
  407218:	d001      	beq.n	40721e <dir_find+0x1e>
  40721a:	7dfb      	ldrb	r3, [r7, #23]
  40721c:	e098      	b.n	407350 <dir_find+0x150>

#if _USE_LFN
	ord = sum = 0xFF;
  40721e:	23ff      	movs	r3, #255	; 0xff
  407220:	753b      	strb	r3, [r7, #20]
  407222:	7d3b      	ldrb	r3, [r7, #20]
  407224:	757b      	strb	r3, [r7, #21]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  407226:	687b      	ldr	r3, [r7, #4]
  407228:	681a      	ldr	r2, [r3, #0]
  40722a:	687b      	ldr	r3, [r7, #4]
  40722c:	691b      	ldr	r3, [r3, #16]
  40722e:	4619      	mov	r1, r3
  407230:	4610      	mov	r0, r2
  407232:	4b4a      	ldr	r3, [pc, #296]	; (40735c <dir_find+0x15c>)
  407234:	4798      	blx	r3
  407236:	4603      	mov	r3, r0
  407238:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
  40723a:	7dfb      	ldrb	r3, [r7, #23]
  40723c:	2b00      	cmp	r3, #0
  40723e:	f040 8081 	bne.w	407344 <dir_find+0x144>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  407242:	687b      	ldr	r3, [r7, #4]
  407244:	695b      	ldr	r3, [r3, #20]
  407246:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
  407248:	693b      	ldr	r3, [r7, #16]
  40724a:	781b      	ldrb	r3, [r3, #0]
  40724c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  40724e:	7dbb      	ldrb	r3, [r7, #22]
  407250:	2b00      	cmp	r3, #0
  407252:	d102      	bne.n	40725a <dir_find+0x5a>
  407254:	2304      	movs	r3, #4
  407256:	75fb      	strb	r3, [r7, #23]
  407258:	e079      	b.n	40734e <dir_find+0x14e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  40725a:	693b      	ldr	r3, [r7, #16]
  40725c:	330b      	adds	r3, #11
  40725e:	781b      	ldrb	r3, [r3, #0]
  407260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  407264:	73fb      	strb	r3, [r7, #15]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  407266:	7dbb      	ldrb	r3, [r7, #22]
  407268:	2be5      	cmp	r3, #229	; 0xe5
  40726a:	d007      	beq.n	40727c <dir_find+0x7c>
  40726c:	7bfb      	ldrb	r3, [r7, #15]
  40726e:	f003 0308 	and.w	r3, r3, #8
  407272:	2b00      	cmp	r3, #0
  407274:	d005      	beq.n	407282 <dir_find+0x82>
  407276:	7bfb      	ldrb	r3, [r7, #15]
  407278:	2b0f      	cmp	r3, #15
  40727a:	d002      	beq.n	407282 <dir_find+0x82>
			ord = 0xFF;
  40727c:	23ff      	movs	r3, #255	; 0xff
  40727e:	757b      	strb	r3, [r7, #21]
  407280:	e055      	b.n	40732e <dir_find+0x12e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  407282:	7bfb      	ldrb	r3, [r7, #15]
  407284:	2b0f      	cmp	r3, #15
  407286:	d12f      	bne.n	4072e8 <dir_find+0xe8>
				if (dj->lfn) {
  407288:	687b      	ldr	r3, [r7, #4]
  40728a:	69db      	ldr	r3, [r3, #28]
  40728c:	2b00      	cmp	r3, #0
  40728e:	d04e      	beq.n	40732e <dir_find+0x12e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  407290:	7dbb      	ldrb	r3, [r7, #22]
  407292:	f003 0340 	and.w	r3, r3, #64	; 0x40
  407296:	2b00      	cmp	r3, #0
  407298:	d00c      	beq.n	4072b4 <dir_find+0xb4>
						sum = dir[LDIR_Chksum];
  40729a:	693b      	ldr	r3, [r7, #16]
  40729c:	7b5b      	ldrb	r3, [r3, #13]
  40729e:	753b      	strb	r3, [r7, #20]
						c &= ~LLE; ord = c;	/* LFN start order */
  4072a0:	7dbb      	ldrb	r3, [r7, #22]
  4072a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4072a6:	75bb      	strb	r3, [r7, #22]
  4072a8:	7dbb      	ldrb	r3, [r7, #22]
  4072aa:	757b      	strb	r3, [r7, #21]
						dj->lfn_idx = dj->index;
  4072ac:	687b      	ldr	r3, [r7, #4]
  4072ae:	88da      	ldrh	r2, [r3, #6]
  4072b0:	687b      	ldr	r3, [r7, #4]
  4072b2:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4072b4:	7dba      	ldrb	r2, [r7, #22]
  4072b6:	7d7b      	ldrb	r3, [r7, #21]
  4072b8:	429a      	cmp	r2, r3
  4072ba:	d112      	bne.n	4072e2 <dir_find+0xe2>
  4072bc:	693b      	ldr	r3, [r7, #16]
  4072be:	330d      	adds	r3, #13
  4072c0:	781b      	ldrb	r3, [r3, #0]
  4072c2:	7d3a      	ldrb	r2, [r7, #20]
  4072c4:	429a      	cmp	r2, r3
  4072c6:	d10c      	bne.n	4072e2 <dir_find+0xe2>
  4072c8:	687b      	ldr	r3, [r7, #4]
  4072ca:	69db      	ldr	r3, [r3, #28]
  4072cc:	6939      	ldr	r1, [r7, #16]
  4072ce:	4618      	mov	r0, r3
  4072d0:	4b23      	ldr	r3, [pc, #140]	; (407360 <dir_find+0x160>)
  4072d2:	4798      	blx	r3
  4072d4:	4603      	mov	r3, r0
  4072d6:	2b00      	cmp	r3, #0
  4072d8:	d003      	beq.n	4072e2 <dir_find+0xe2>
  4072da:	7d7b      	ldrb	r3, [r7, #21]
  4072dc:	3b01      	subs	r3, #1
  4072de:	b2db      	uxtb	r3, r3
  4072e0:	e000      	b.n	4072e4 <dir_find+0xe4>
  4072e2:	23ff      	movs	r3, #255	; 0xff
  4072e4:	757b      	strb	r3, [r7, #21]
  4072e6:	e022      	b.n	40732e <dir_find+0x12e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  4072e8:	7d7b      	ldrb	r3, [r7, #21]
  4072ea:	2b00      	cmp	r3, #0
  4072ec:	d107      	bne.n	4072fe <dir_find+0xfe>
  4072ee:	6938      	ldr	r0, [r7, #16]
  4072f0:	4b1c      	ldr	r3, [pc, #112]	; (407364 <dir_find+0x164>)
  4072f2:	4798      	blx	r3
  4072f4:	4603      	mov	r3, r0
  4072f6:	461a      	mov	r2, r3
  4072f8:	7d3b      	ldrb	r3, [r7, #20]
  4072fa:	4293      	cmp	r3, r2
  4072fc:	d024      	beq.n	407348 <dir_find+0x148>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4072fe:	23ff      	movs	r3, #255	; 0xff
  407300:	757b      	strb	r3, [r7, #21]
  407302:	687b      	ldr	r3, [r7, #4]
  407304:	f64f 72ff 	movw	r2, #65535	; 0xffff
  407308:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  40730a:	687b      	ldr	r3, [r7, #4]
  40730c:	699b      	ldr	r3, [r3, #24]
  40730e:	330b      	adds	r3, #11
  407310:	781b      	ldrb	r3, [r3, #0]
  407312:	f003 0301 	and.w	r3, r3, #1
  407316:	2b00      	cmp	r3, #0
  407318:	d109      	bne.n	40732e <dir_find+0x12e>
  40731a:	687b      	ldr	r3, [r7, #4]
  40731c:	699b      	ldr	r3, [r3, #24]
  40731e:	220b      	movs	r2, #11
  407320:	4619      	mov	r1, r3
  407322:	6938      	ldr	r0, [r7, #16]
  407324:	4b10      	ldr	r3, [pc, #64]	; (407368 <dir_find+0x168>)
  407326:	4798      	blx	r3
  407328:	4603      	mov	r3, r0
  40732a:	2b00      	cmp	r3, #0
  40732c:	d00e      	beq.n	40734c <dir_find+0x14c>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
  40732e:	2100      	movs	r1, #0
  407330:	6878      	ldr	r0, [r7, #4]
  407332:	4b0e      	ldr	r3, [pc, #56]	; (40736c <dir_find+0x16c>)
  407334:	4798      	blx	r3
  407336:	4603      	mov	r3, r0
  407338:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
  40733a:	7dfb      	ldrb	r3, [r7, #23]
  40733c:	2b00      	cmp	r3, #0
  40733e:	f43f af72 	beq.w	407226 <dir_find+0x26>
  407342:	e004      	b.n	40734e <dir_find+0x14e>
		if (res != FR_OK) break;
  407344:	bf00      	nop
  407346:	e002      	b.n	40734e <dir_find+0x14e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  407348:	bf00      	nop
  40734a:	e000      	b.n	40734e <dir_find+0x14e>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  40734c:	bf00      	nop

	return res;
  40734e:	7dfb      	ldrb	r3, [r7, #23]
}
  407350:	4618      	mov	r0, r3
  407352:	3718      	adds	r7, #24
  407354:	46bd      	mov	sp, r7
  407356:	bd80      	pop	{r7, pc}
  407358:	00406c41 	.word	0x00406c41
  40735c:	004064c5 	.word	0x004064c5
  407360:	00406f09 	.word	0x00406f09
  407364:	004071bd 	.word	0x004071bd
  407368:	00406441 	.word	0x00406441
  40736c:	00406d4d 	.word	0x00406d4d

00407370 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
  407370:	b590      	push	{r4, r7, lr}
  407372:	b08d      	sub	sp, #52	; 0x34
  407374:	af00      	add	r7, sp, #0
  407376:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
  407378:	687b      	ldr	r3, [r7, #4]
  40737a:	699b      	ldr	r3, [r3, #24]
  40737c:	627b      	str	r3, [r7, #36]	; 0x24
  40737e:	687b      	ldr	r3, [r7, #4]
  407380:	69db      	ldr	r3, [r3, #28]
  407382:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
  407384:	f107 030c 	add.w	r3, r7, #12
  407388:	220c      	movs	r2, #12
  40738a:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40738c:	4618      	mov	r0, r3
  40738e:	4b92      	ldr	r3, [pc, #584]	; (4075d8 <dir_register+0x268>)
  407390:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  407392:	7dfb      	ldrb	r3, [r7, #23]
  407394:	f003 0301 	and.w	r3, r3, #1
  407398:	2b00      	cmp	r3, #0
  40739a:	d035      	beq.n	407408 <dir_register+0x98>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  40739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40739e:	330b      	adds	r3, #11
  4073a0:	2200      	movs	r2, #0
  4073a2:	701a      	strb	r2, [r3, #0]
  4073a4:	687b      	ldr	r3, [r7, #4]
  4073a6:	2200      	movs	r2, #0
  4073a8:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
  4073aa:	2301      	movs	r3, #1
  4073ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
  4073ae:	e013      	b.n	4073d8 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
  4073b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  4073b2:	f107 010c 	add.w	r1, r7, #12
  4073b6:	6a3a      	ldr	r2, [r7, #32]
  4073b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4073ba:	4c88      	ldr	r4, [pc, #544]	; (4075dc <dir_register+0x26c>)
  4073bc:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  4073be:	6878      	ldr	r0, [r7, #4]
  4073c0:	4b87      	ldr	r3, [pc, #540]	; (4075e0 <dir_register+0x270>)
  4073c2:	4798      	blx	r3
  4073c4:	4603      	mov	r3, r0
  4073c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
  4073ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4073ce:	2b00      	cmp	r3, #0
  4073d0:	d106      	bne.n	4073e0 <dir_register+0x70>
		for (n = 1; n < 100; n++) {
  4073d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  4073d4:	3301      	adds	r3, #1
  4073d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  4073d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  4073da:	2b63      	cmp	r3, #99	; 0x63
  4073dc:	d9e8      	bls.n	4073b0 <dir_register+0x40>
  4073de:	e000      	b.n	4073e2 <dir_register+0x72>
			if (res != FR_OK) break;
  4073e0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  4073e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  4073e4:	2b64      	cmp	r3, #100	; 0x64
  4073e6:	d101      	bne.n	4073ec <dir_register+0x7c>
  4073e8:	2307      	movs	r3, #7
  4073ea:	e0f1      	b.n	4075d0 <dir_register+0x260>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  4073ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4073f0:	2b04      	cmp	r3, #4
  4073f2:	d002      	beq.n	4073fa <dir_register+0x8a>
  4073f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4073f8:	e0ea      	b.n	4075d0 <dir_register+0x260>
		fn[NS] = sn[NS]; dj->lfn = lfn;
  4073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4073fc:	330b      	adds	r3, #11
  4073fe:	7dfa      	ldrb	r2, [r7, #23]
  407400:	701a      	strb	r2, [r3, #0]
  407402:	687b      	ldr	r3, [r7, #4]
  407404:	6a3a      	ldr	r2, [r7, #32]
  407406:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  407408:	7dfb      	ldrb	r3, [r7, #23]
  40740a:	f003 0302 	and.w	r3, r3, #2
  40740e:	2b00      	cmp	r3, #0
  407410:	d016      	beq.n	407440 <dir_register+0xd0>
		for (ne = 0; lfn[ne]; ne++) ;
  407412:	2300      	movs	r3, #0
  407414:	857b      	strh	r3, [r7, #42]	; 0x2a
  407416:	e002      	b.n	40741e <dir_register+0xae>
  407418:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40741a:	3301      	adds	r3, #1
  40741c:	857b      	strh	r3, [r7, #42]	; 0x2a
  40741e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  407420:	005b      	lsls	r3, r3, #1
  407422:	6a3a      	ldr	r2, [r7, #32]
  407424:	4413      	add	r3, r2
  407426:	881b      	ldrh	r3, [r3, #0]
  407428:	2b00      	cmp	r3, #0
  40742a:	d1f5      	bne.n	407418 <dir_register+0xa8>
		ne = (ne + 25) / 13;
  40742c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40742e:	3319      	adds	r3, #25
  407430:	4a6c      	ldr	r2, [pc, #432]	; (4075e4 <dir_register+0x274>)
  407432:	fb82 1203 	smull	r1, r2, r2, r3
  407436:	1092      	asrs	r2, r2, #2
  407438:	17db      	asrs	r3, r3, #31
  40743a:	1ad3      	subs	r3, r2, r3
  40743c:	857b      	strh	r3, [r7, #42]	; 0x2a
  40743e:	e001      	b.n	407444 <dir_register+0xd4>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
  407440:	2301      	movs	r3, #1
  407442:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
  407444:	2100      	movs	r1, #0
  407446:	6878      	ldr	r0, [r7, #4]
  407448:	4b67      	ldr	r3, [pc, #412]	; (4075e8 <dir_register+0x278>)
  40744a:	4798      	blx	r3
  40744c:	4603      	mov	r3, r0
  40744e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK) return res;
  407452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407456:	2b00      	cmp	r3, #0
  407458:	d002      	beq.n	407460 <dir_register+0xf0>
  40745a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40745e:	e0b7      	b.n	4075d0 <dir_register+0x260>
	n = is = 0;
  407460:	2300      	movs	r3, #0
  407462:	853b      	strh	r3, [r7, #40]	; 0x28
  407464:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  407466:	85bb      	strh	r3, [r7, #44]	; 0x2c
	do {
		res = move_window(dj->fs, dj->sect);
  407468:	687b      	ldr	r3, [r7, #4]
  40746a:	681a      	ldr	r2, [r3, #0]
  40746c:	687b      	ldr	r3, [r7, #4]
  40746e:	691b      	ldr	r3, [r3, #16]
  407470:	4619      	mov	r1, r3
  407472:	4610      	mov	r0, r2
  407474:	4b5d      	ldr	r3, [pc, #372]	; (4075ec <dir_register+0x27c>)
  407476:	4798      	blx	r3
  407478:	4603      	mov	r3, r0
  40747a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res != FR_OK) break;
  40747e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407482:	2b00      	cmp	r3, #0
  407484:	d125      	bne.n	4074d2 <dir_register+0x162>
		c = *dj->dir;				/* Check the entry status */
  407486:	687b      	ldr	r3, [r7, #4]
  407488:	695b      	ldr	r3, [r3, #20]
  40748a:	781b      	ldrb	r3, [r3, #0]
  40748c:	77fb      	strb	r3, [r7, #31]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  40748e:	7ffb      	ldrb	r3, [r7, #31]
  407490:	2be5      	cmp	r3, #229	; 0xe5
  407492:	d002      	beq.n	40749a <dir_register+0x12a>
  407494:	7ffb      	ldrb	r3, [r7, #31]
  407496:	2b00      	cmp	r3, #0
  407498:	d10d      	bne.n	4074b6 <dir_register+0x146>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  40749a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40749c:	2b00      	cmp	r3, #0
  40749e:	d102      	bne.n	4074a6 <dir_register+0x136>
  4074a0:	687b      	ldr	r3, [r7, #4]
  4074a2:	88db      	ldrh	r3, [r3, #6]
  4074a4:	853b      	strh	r3, [r7, #40]	; 0x28
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  4074a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  4074a8:	3301      	adds	r3, #1
  4074aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  4074ac:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  4074ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4074b0:	429a      	cmp	r2, r3
  4074b2:	d102      	bne.n	4074ba <dir_register+0x14a>
  4074b4:	e00e      	b.n	4074d4 <dir_register+0x164>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
  4074b6:	2300      	movs	r3, #0
  4074b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  4074ba:	2101      	movs	r1, #1
  4074bc:	6878      	ldr	r0, [r7, #4]
  4074be:	4b4c      	ldr	r3, [pc, #304]	; (4075f0 <dir_register+0x280>)
  4074c0:	4798      	blx	r3
  4074c2:	4603      	mov	r3, r0
  4074c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	} while (res == FR_OK);
  4074c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4074cc:	2b00      	cmp	r3, #0
  4074ce:	d0cb      	beq.n	407468 <dir_register+0xf8>
  4074d0:	e000      	b.n	4074d4 <dir_register+0x164>
		if (res != FR_OK) break;
  4074d2:	bf00      	nop

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  4074d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4074d8:	2b00      	cmp	r3, #0
  4074da:	d147      	bne.n	40756c <dir_register+0x1fc>
  4074dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  4074de:	2b01      	cmp	r3, #1
  4074e0:	d944      	bls.n	40756c <dir_register+0x1fc>
		res = dir_sdi(dj, is);
  4074e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  4074e4:	4619      	mov	r1, r3
  4074e6:	6878      	ldr	r0, [r7, #4]
  4074e8:	4b3f      	ldr	r3, [pc, #252]	; (4075e8 <dir_register+0x278>)
  4074ea:	4798      	blx	r3
  4074ec:	4603      	mov	r3, r0
  4074ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
  4074f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4074f6:	2b00      	cmp	r3, #0
  4074f8:	d138      	bne.n	40756c <dir_register+0x1fc>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  4074fa:	687b      	ldr	r3, [r7, #4]
  4074fc:	699b      	ldr	r3, [r3, #24]
  4074fe:	4618      	mov	r0, r3
  407500:	4b3c      	ldr	r3, [pc, #240]	; (4075f4 <dir_register+0x284>)
  407502:	4798      	blx	r3
  407504:	4603      	mov	r3, r0
  407506:	77bb      	strb	r3, [r7, #30]
			ne--;
  407508:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40750a:	3b01      	subs	r3, #1
  40750c:	857b      	strh	r3, [r7, #42]	; 0x2a
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
  40750e:	687b      	ldr	r3, [r7, #4]
  407510:	681a      	ldr	r2, [r3, #0]
  407512:	687b      	ldr	r3, [r7, #4]
  407514:	691b      	ldr	r3, [r3, #16]
  407516:	4619      	mov	r1, r3
  407518:	4610      	mov	r0, r2
  40751a:	4b34      	ldr	r3, [pc, #208]	; (4075ec <dir_register+0x27c>)
  40751c:	4798      	blx	r3
  40751e:	4603      	mov	r3, r0
  407520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
  407524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407528:	2b00      	cmp	r3, #0
  40752a:	d11e      	bne.n	40756a <dir_register+0x1fa>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  40752c:	687b      	ldr	r3, [r7, #4]
  40752e:	69d8      	ldr	r0, [r3, #28]
  407530:	687b      	ldr	r3, [r7, #4]
  407532:	6959      	ldr	r1, [r3, #20]
  407534:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  407536:	b2da      	uxtb	r2, r3
  407538:	7fbb      	ldrb	r3, [r7, #30]
  40753a:	4c2f      	ldr	r4, [pc, #188]	; (4075f8 <dir_register+0x288>)
  40753c:	47a0      	blx	r4
				dj->fs->wflag = 1;
  40753e:	687b      	ldr	r3, [r7, #4]
  407540:	681b      	ldr	r3, [r3, #0]
  407542:	2201      	movs	r2, #1
  407544:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  407546:	2100      	movs	r1, #0
  407548:	6878      	ldr	r0, [r7, #4]
  40754a:	4b29      	ldr	r3, [pc, #164]	; (4075f0 <dir_register+0x280>)
  40754c:	4798      	blx	r3
  40754e:	4603      	mov	r3, r0
  407550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --ne);
  407554:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407558:	2b00      	cmp	r3, #0
  40755a:	d107      	bne.n	40756c <dir_register+0x1fc>
  40755c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  40755e:	3b01      	subs	r3, #1
  407560:	857b      	strh	r3, [r7, #42]	; 0x2a
  407562:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  407564:	2b00      	cmp	r3, #0
  407566:	d1d2      	bne.n	40750e <dir_register+0x19e>
  407568:	e000      	b.n	40756c <dir_register+0x1fc>
				if (res != FR_OK) break;
  40756a:	bf00      	nop
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
  40756c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  407570:	2b00      	cmp	r3, #0
  407572:	d12b      	bne.n	4075cc <dir_register+0x25c>
		res = move_window(dj->fs, dj->sect);
  407574:	687b      	ldr	r3, [r7, #4]
  407576:	681a      	ldr	r2, [r3, #0]
  407578:	687b      	ldr	r3, [r7, #4]
  40757a:	691b      	ldr	r3, [r3, #16]
  40757c:	4619      	mov	r1, r3
  40757e:	4610      	mov	r0, r2
  407580:	4b1a      	ldr	r3, [pc, #104]	; (4075ec <dir_register+0x27c>)
  407582:	4798      	blx	r3
  407584:	4603      	mov	r3, r0
  407586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
  40758a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40758e:	2b00      	cmp	r3, #0
  407590:	d11c      	bne.n	4075cc <dir_register+0x25c>
			dir = dj->dir;
  407592:	687b      	ldr	r3, [r7, #4]
  407594:	695b      	ldr	r3, [r3, #20]
  407596:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  407598:	2220      	movs	r2, #32
  40759a:	2100      	movs	r1, #0
  40759c:	69b8      	ldr	r0, [r7, #24]
  40759e:	4b17      	ldr	r3, [pc, #92]	; (4075fc <dir_register+0x28c>)
  4075a0:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  4075a2:	687b      	ldr	r3, [r7, #4]
  4075a4:	699b      	ldr	r3, [r3, #24]
  4075a6:	220b      	movs	r2, #11
  4075a8:	4619      	mov	r1, r3
  4075aa:	69b8      	ldr	r0, [r7, #24]
  4075ac:	4b0a      	ldr	r3, [pc, #40]	; (4075d8 <dir_register+0x268>)
  4075ae:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  4075b0:	69bb      	ldr	r3, [r7, #24]
  4075b2:	330c      	adds	r3, #12
  4075b4:	687a      	ldr	r2, [r7, #4]
  4075b6:	6992      	ldr	r2, [r2, #24]
  4075b8:	320b      	adds	r2, #11
  4075ba:	7812      	ldrb	r2, [r2, #0]
  4075bc:	f002 0218 	and.w	r2, r2, #24
  4075c0:	b2d2      	uxtb	r2, r2
  4075c2:	701a      	strb	r2, [r3, #0]
#endif
			dj->fs->wflag = 1;
  4075c4:	687b      	ldr	r3, [r7, #4]
  4075c6:	681b      	ldr	r3, [r3, #0]
  4075c8:	2201      	movs	r2, #1
  4075ca:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
  4075cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
  4075d0:	4618      	mov	r0, r3
  4075d2:	3734      	adds	r7, #52	; 0x34
  4075d4:	46bd      	mov	sp, r7
  4075d6:	bd90      	pop	{r4, r7, pc}
  4075d8:	004063d1 	.word	0x004063d1
  4075dc:	004070d5 	.word	0x004070d5
  4075e0:	00407201 	.word	0x00407201
  4075e4:	4ec4ec4f 	.word	0x4ec4ec4f
  4075e8:	00406c41 	.word	0x00406c41
  4075ec:	004064c5 	.word	0x004064c5
  4075f0:	00406d4d 	.word	0x00406d4d
  4075f4:	004071bd 	.word	0x004071bd
  4075f8:	00406fe9 	.word	0x00406fe9
  4075fc:	0040640d 	.word	0x0040640d

00407600 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
  407600:	b580      	push	{r7, lr}
  407602:	b08a      	sub	sp, #40	; 0x28
  407604:	af00      	add	r7, sp, #0
  407606:	6078      	str	r0, [r7, #4]
  407608:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  40760a:	683b      	ldr	r3, [r7, #0]
  40760c:	681b      	ldr	r3, [r3, #0]
  40760e:	613b      	str	r3, [r7, #16]
  407610:	e002      	b.n	407618 <create_name+0x18>
  407612:	693b      	ldr	r3, [r7, #16]
  407614:	3301      	adds	r3, #1
  407616:	613b      	str	r3, [r7, #16]
  407618:	693b      	ldr	r3, [r7, #16]
  40761a:	781b      	ldrb	r3, [r3, #0]
  40761c:	2b2f      	cmp	r3, #47	; 0x2f
  40761e:	d0f8      	beq.n	407612 <create_name+0x12>
  407620:	693b      	ldr	r3, [r7, #16]
  407622:	781b      	ldrb	r3, [r3, #0]
  407624:	2b5c      	cmp	r3, #92	; 0x5c
  407626:	d0f4      	beq.n	407612 <create_name+0x12>
	lfn = dj->lfn;
  407628:	687b      	ldr	r3, [r7, #4]
  40762a:	69db      	ldr	r3, [r3, #28]
  40762c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
  40762e:	2300      	movs	r3, #0
  407630:	617b      	str	r3, [r7, #20]
  407632:	697b      	ldr	r3, [r7, #20]
  407634:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
  407636:	69bb      	ldr	r3, [r7, #24]
  407638:	1c5a      	adds	r2, r3, #1
  40763a:	61ba      	str	r2, [r7, #24]
  40763c:	693a      	ldr	r2, [r7, #16]
  40763e:	4413      	add	r3, r2
  407640:	781b      	ldrb	r3, [r3, #0]
  407642:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  407644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407646:	2b1f      	cmp	r3, #31
  407648:	d92f      	bls.n	4076aa <create_name+0xaa>
  40764a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40764c:	2b2f      	cmp	r3, #47	; 0x2f
  40764e:	d02c      	beq.n	4076aa <create_name+0xaa>
  407650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407652:	2b5c      	cmp	r3, #92	; 0x5c
  407654:	d029      	beq.n	4076aa <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
  407656:	697b      	ldr	r3, [r7, #20]
  407658:	2bfe      	cmp	r3, #254	; 0xfe
  40765a:	d901      	bls.n	407660 <create_name+0x60>
			return FR_INVALID_NAME;
  40765c:	2306      	movs	r3, #6
  40765e:	e182      	b.n	407966 <create_name+0x366>
#if !_LFN_UNICODE
		w &= 0xFF;
  407660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407662:	b2db      	uxtb	r3, r3
  407664:	84bb      	strh	r3, [r7, #36]	; 0x24
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  407666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407668:	2101      	movs	r1, #1
  40766a:	4618      	mov	r0, r3
  40766c:	4b93      	ldr	r3, [pc, #588]	; (4078bc <create_name+0x2bc>)
  40766e:	4798      	blx	r3
  407670:	4603      	mov	r3, r0
  407672:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  407674:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407676:	2b00      	cmp	r3, #0
  407678:	d101      	bne.n	40767e <create_name+0x7e>
  40767a:	2306      	movs	r3, #6
  40767c:	e173      	b.n	407966 <create_name+0x366>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  40767e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407680:	2b7f      	cmp	r3, #127	; 0x7f
  407682:	d809      	bhi.n	407698 <create_name+0x98>
  407684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407686:	4619      	mov	r1, r3
  407688:	488d      	ldr	r0, [pc, #564]	; (4078c0 <create_name+0x2c0>)
  40768a:	4b8e      	ldr	r3, [pc, #568]	; (4078c4 <create_name+0x2c4>)
  40768c:	4798      	blx	r3
  40768e:	4603      	mov	r3, r0
  407690:	2b00      	cmp	r3, #0
  407692:	d001      	beq.n	407698 <create_name+0x98>
			return FR_INVALID_NAME;
  407694:	2306      	movs	r3, #6
  407696:	e166      	b.n	407966 <create_name+0x366>
		lfn[di++] = w;					/* Store the Unicode char */
  407698:	697b      	ldr	r3, [r7, #20]
  40769a:	1c5a      	adds	r2, r3, #1
  40769c:	617a      	str	r2, [r7, #20]
  40769e:	005b      	lsls	r3, r3, #1
  4076a0:	68fa      	ldr	r2, [r7, #12]
  4076a2:	4413      	add	r3, r2
  4076a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  4076a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
  4076a8:	e7c5      	b.n	407636 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
  4076aa:	693a      	ldr	r2, [r7, #16]
  4076ac:	69bb      	ldr	r3, [r7, #24]
  4076ae:	441a      	add	r2, r3
  4076b0:	683b      	ldr	r3, [r7, #0]
  4076b2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  4076b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4076b6:	2b1f      	cmp	r3, #31
  4076b8:	d801      	bhi.n	4076be <create_name+0xbe>
  4076ba:	2304      	movs	r3, #4
  4076bc:	e000      	b.n	4076c0 <create_name+0xc0>
  4076be:	2300      	movs	r3, #0
  4076c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  4076c4:	e011      	b.n	4076ea <create_name+0xea>
		w = lfn[di-1];
  4076c6:	697b      	ldr	r3, [r7, #20]
  4076c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4076cc:	3b01      	subs	r3, #1
  4076ce:	005b      	lsls	r3, r3, #1
  4076d0:	68fa      	ldr	r2, [r7, #12]
  4076d2:	4413      	add	r3, r2
  4076d4:	881b      	ldrh	r3, [r3, #0]
  4076d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
  4076d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4076da:	2b20      	cmp	r3, #32
  4076dc:	d002      	beq.n	4076e4 <create_name+0xe4>
  4076de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4076e0:	2b2e      	cmp	r3, #46	; 0x2e
  4076e2:	d106      	bne.n	4076f2 <create_name+0xf2>
		di--;
  4076e4:	697b      	ldr	r3, [r7, #20]
  4076e6:	3b01      	subs	r3, #1
  4076e8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
  4076ea:	697b      	ldr	r3, [r7, #20]
  4076ec:	2b00      	cmp	r3, #0
  4076ee:	d1ea      	bne.n	4076c6 <create_name+0xc6>
  4076f0:	e000      	b.n	4076f4 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
  4076f2:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  4076f4:	697b      	ldr	r3, [r7, #20]
  4076f6:	2b00      	cmp	r3, #0
  4076f8:	d101      	bne.n	4076fe <create_name+0xfe>
  4076fa:	2306      	movs	r3, #6
  4076fc:	e133      	b.n	407966 <create_name+0x366>

	lfn[di] = 0;						/* LFN is created */
  4076fe:	697b      	ldr	r3, [r7, #20]
  407700:	005b      	lsls	r3, r3, #1
  407702:	68fa      	ldr	r2, [r7, #12]
  407704:	4413      	add	r3, r2
  407706:	2200      	movs	r2, #0
  407708:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
  40770a:	687b      	ldr	r3, [r7, #4]
  40770c:	699b      	ldr	r3, [r3, #24]
  40770e:	220b      	movs	r2, #11
  407710:	2120      	movs	r1, #32
  407712:	4618      	mov	r0, r3
  407714:	4b6c      	ldr	r3, [pc, #432]	; (4078c8 <create_name+0x2c8>)
  407716:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  407718:	2300      	movs	r3, #0
  40771a:	61bb      	str	r3, [r7, #24]
  40771c:	e002      	b.n	407724 <create_name+0x124>
  40771e:	69bb      	ldr	r3, [r7, #24]
  407720:	3301      	adds	r3, #1
  407722:	61bb      	str	r3, [r7, #24]
  407724:	69bb      	ldr	r3, [r7, #24]
  407726:	005b      	lsls	r3, r3, #1
  407728:	68fa      	ldr	r2, [r7, #12]
  40772a:	4413      	add	r3, r2
  40772c:	881b      	ldrh	r3, [r3, #0]
  40772e:	2b20      	cmp	r3, #32
  407730:	d0f5      	beq.n	40771e <create_name+0x11e>
  407732:	69bb      	ldr	r3, [r7, #24]
  407734:	005b      	lsls	r3, r3, #1
  407736:	68fa      	ldr	r2, [r7, #12]
  407738:	4413      	add	r3, r2
  40773a:	881b      	ldrh	r3, [r3, #0]
  40773c:	2b2e      	cmp	r3, #46	; 0x2e
  40773e:	d0ee      	beq.n	40771e <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
  407740:	69bb      	ldr	r3, [r7, #24]
  407742:	2b00      	cmp	r3, #0
  407744:	d009      	beq.n	40775a <create_name+0x15a>
  407746:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40774a:	f043 0303 	orr.w	r3, r3, #3
  40774e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  407752:	e002      	b.n	40775a <create_name+0x15a>
  407754:	697b      	ldr	r3, [r7, #20]
  407756:	3b01      	subs	r3, #1
  407758:	617b      	str	r3, [r7, #20]
  40775a:	697b      	ldr	r3, [r7, #20]
  40775c:	2b00      	cmp	r3, #0
  40775e:	d009      	beq.n	407774 <create_name+0x174>
  407760:	697b      	ldr	r3, [r7, #20]
  407762:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  407766:	3b01      	subs	r3, #1
  407768:	005b      	lsls	r3, r3, #1
  40776a:	68fa      	ldr	r2, [r7, #12]
  40776c:	4413      	add	r3, r2
  40776e:	881b      	ldrh	r3, [r3, #0]
  407770:	2b2e      	cmp	r3, #46	; 0x2e
  407772:	d1ef      	bne.n	407754 <create_name+0x154>

	b = i = 0; ni = 8;
  407774:	2300      	movs	r3, #0
  407776:	623b      	str	r3, [r7, #32]
  407778:	2300      	movs	r3, #0
  40777a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40777e:	2308      	movs	r3, #8
  407780:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  407782:	69bb      	ldr	r3, [r7, #24]
  407784:	1c5a      	adds	r2, r3, #1
  407786:	61ba      	str	r2, [r7, #24]
  407788:	005b      	lsls	r3, r3, #1
  40778a:	68fa      	ldr	r2, [r7, #12]
  40778c:	4413      	add	r3, r2
  40778e:	881b      	ldrh	r3, [r3, #0]
  407790:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
  407792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407794:	2b00      	cmp	r3, #0
  407796:	f000 808f 	beq.w	4078b8 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  40779a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40779c:	2b20      	cmp	r3, #32
  40779e:	d006      	beq.n	4077ae <create_name+0x1ae>
  4077a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4077a2:	2b2e      	cmp	r3, #46	; 0x2e
  4077a4:	d10a      	bne.n	4077bc <create_name+0x1bc>
  4077a6:	69ba      	ldr	r2, [r7, #24]
  4077a8:	697b      	ldr	r3, [r7, #20]
  4077aa:	429a      	cmp	r2, r3
  4077ac:	d006      	beq.n	4077bc <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
  4077ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4077b2:	f043 0303 	orr.w	r3, r3, #3
  4077b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  4077ba:	e07c      	b.n	4078b6 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
  4077bc:	6a3a      	ldr	r2, [r7, #32]
  4077be:	69fb      	ldr	r3, [r7, #28]
  4077c0:	429a      	cmp	r2, r3
  4077c2:	d203      	bcs.n	4077cc <create_name+0x1cc>
  4077c4:	69ba      	ldr	r2, [r7, #24]
  4077c6:	697b      	ldr	r3, [r7, #20]
  4077c8:	429a      	cmp	r2, r3
  4077ca:	d123      	bne.n	407814 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
  4077cc:	69fb      	ldr	r3, [r7, #28]
  4077ce:	2b0b      	cmp	r3, #11
  4077d0:	d106      	bne.n	4077e0 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
  4077d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4077d6:	f043 0303 	orr.w	r3, r3, #3
  4077da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  4077de:	e07a      	b.n	4078d6 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  4077e0:	69ba      	ldr	r2, [r7, #24]
  4077e2:	697b      	ldr	r3, [r7, #20]
  4077e4:	429a      	cmp	r2, r3
  4077e6:	d005      	beq.n	4077f4 <create_name+0x1f4>
  4077e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  4077ec:	f043 0303 	orr.w	r3, r3, #3
  4077f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
  4077f4:	69ba      	ldr	r2, [r7, #24]
  4077f6:	697b      	ldr	r3, [r7, #20]
  4077f8:	429a      	cmp	r2, r3
  4077fa:	d86b      	bhi.n	4078d4 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
  4077fc:	697b      	ldr	r3, [r7, #20]
  4077fe:	61bb      	str	r3, [r7, #24]
  407800:	2308      	movs	r3, #8
  407802:	623b      	str	r3, [r7, #32]
  407804:	230b      	movs	r3, #11
  407806:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
  407808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40780c:	009b      	lsls	r3, r3, #2
  40780e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  407812:	e050      	b.n	4078b6 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII char */
  407814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407816:	2b7f      	cmp	r3, #127	; 0x7f
  407818:	d914      	bls.n	407844 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  40781a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40781c:	2100      	movs	r1, #0
  40781e:	4618      	mov	r0, r3
  407820:	4b26      	ldr	r3, [pc, #152]	; (4078bc <create_name+0x2bc>)
  407822:	4798      	blx	r3
  407824:	4603      	mov	r3, r0
  407826:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  407828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40782a:	2b00      	cmp	r3, #0
  40782c:	d004      	beq.n	407838 <create_name+0x238>
  40782e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407830:	3b80      	subs	r3, #128	; 0x80
  407832:	4a26      	ldr	r2, [pc, #152]	; (4078cc <create_name+0x2cc>)
  407834:	5cd3      	ldrb	r3, [r2, r3]
  407836:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  407838:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40783c:	f043 0302 	orr.w	r3, r3, #2
  407840:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  407844:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407846:	2b00      	cmp	r3, #0
  407848:	d007      	beq.n	40785a <create_name+0x25a>
  40784a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40784c:	4619      	mov	r1, r3
  40784e:	4820      	ldr	r0, [pc, #128]	; (4078d0 <create_name+0x2d0>)
  407850:	4b1c      	ldr	r3, [pc, #112]	; (4078c4 <create_name+0x2c4>)
  407852:	4798      	blx	r3
  407854:	4603      	mov	r3, r0
  407856:	2b00      	cmp	r3, #0
  407858:	d008      	beq.n	40786c <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  40785a:	235f      	movs	r3, #95	; 0x5f
  40785c:	84bb      	strh	r3, [r7, #36]	; 0x24
  40785e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407862:	f043 0303 	orr.w	r3, r3, #3
  407866:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  40786a:	e01b      	b.n	4078a4 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
  40786c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40786e:	2b40      	cmp	r3, #64	; 0x40
  407870:	d909      	bls.n	407886 <create_name+0x286>
  407872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407874:	2b5a      	cmp	r3, #90	; 0x5a
  407876:	d806      	bhi.n	407886 <create_name+0x286>
					b |= 2;
  407878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40787c:	f043 0302 	orr.w	r3, r3, #2
  407880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  407884:	e00e      	b.n	4078a4 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
  407886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  407888:	2b60      	cmp	r3, #96	; 0x60
  40788a:	d90b      	bls.n	4078a4 <create_name+0x2a4>
  40788c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  40788e:	2b7a      	cmp	r3, #122	; 0x7a
  407890:	d808      	bhi.n	4078a4 <create_name+0x2a4>
						b |= 1; w -= 0x20;
  407892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407896:	f043 0301 	orr.w	r3, r3, #1
  40789a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40789e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4078a0:	3b20      	subs	r3, #32
  4078a2:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  4078a4:	687b      	ldr	r3, [r7, #4]
  4078a6:	699a      	ldr	r2, [r3, #24]
  4078a8:	6a3b      	ldr	r3, [r7, #32]
  4078aa:	1c59      	adds	r1, r3, #1
  4078ac:	6239      	str	r1, [r7, #32]
  4078ae:	4413      	add	r3, r2
  4078b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
  4078b2:	b2d2      	uxtb	r2, r2
  4078b4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
  4078b6:	e764      	b.n	407782 <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
  4078b8:	bf00      	nop
  4078ba:	e00c      	b.n	4078d6 <create_name+0x2d6>
  4078bc:	00408d31 	.word	0x00408d31
  4078c0:	0040eff8 	.word	0x0040eff8
  4078c4:	0040648f 	.word	0x0040648f
  4078c8:	0040640d 	.word	0x0040640d
  4078cc:	0040f00c 	.word	0x0040f00c
  4078d0:	0040f004 	.word	0x0040f004
			if (si > di) break;			/* No extension */
  4078d4:	bf00      	nop
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  4078d6:	687b      	ldr	r3, [r7, #4]
  4078d8:	699b      	ldr	r3, [r3, #24]
  4078da:	781b      	ldrb	r3, [r3, #0]
  4078dc:	2be5      	cmp	r3, #229	; 0xe5
  4078de:	d103      	bne.n	4078e8 <create_name+0x2e8>
  4078e0:	687b      	ldr	r3, [r7, #4]
  4078e2:	699b      	ldr	r3, [r3, #24]
  4078e4:	2205      	movs	r2, #5
  4078e6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
  4078e8:	69fb      	ldr	r3, [r7, #28]
  4078ea:	2b08      	cmp	r3, #8
  4078ec:	d104      	bne.n	4078f8 <create_name+0x2f8>
  4078ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4078f2:	009b      	lsls	r3, r3, #2
  4078f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  4078f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4078fc:	f003 030c 	and.w	r3, r3, #12
  407900:	2b0c      	cmp	r3, #12
  407902:	d005      	beq.n	407910 <create_name+0x310>
  407904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407908:	f003 0303 	and.w	r3, r3, #3
  40790c:	2b03      	cmp	r3, #3
  40790e:	d105      	bne.n	40791c <create_name+0x31c>
		cf |= NS_LFN;
  407910:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407914:	f043 0302 	orr.w	r3, r3, #2
  407918:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  40791c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407920:	f003 0302 	and.w	r3, r3, #2
  407924:	2b00      	cmp	r3, #0
  407926:	d117      	bne.n	407958 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  407928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40792c:	f003 0303 	and.w	r3, r3, #3
  407930:	2b01      	cmp	r3, #1
  407932:	d105      	bne.n	407940 <create_name+0x340>
  407934:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407938:	f043 0310 	orr.w	r3, r3, #16
  40793c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  407940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407944:	f003 030c 	and.w	r3, r3, #12
  407948:	2b04      	cmp	r3, #4
  40794a:	d105      	bne.n	407958 <create_name+0x358>
  40794c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  407950:	f043 0308 	orr.w	r3, r3, #8
  407954:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dj->fn[NS] = cf;	/* SFN is created */
  407958:	687b      	ldr	r3, [r7, #4]
  40795a:	699b      	ldr	r3, [r3, #24]
  40795c:	330b      	adds	r3, #11
  40795e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
  407962:	701a      	strb	r2, [r3, #0]

	return FR_OK;
  407964:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
  407966:	4618      	mov	r0, r3
  407968:	3728      	adds	r7, #40	; 0x28
  40796a:	46bd      	mov	sp, r7
  40796c:	bd80      	pop	{r7, pc}
  40796e:	bf00      	nop

00407970 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
  407970:	b580      	push	{r7, lr}
  407972:	b084      	sub	sp, #16
  407974:	af00      	add	r7, sp, #0
  407976:	6078      	str	r0, [r7, #4]
  407978:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  40797a:	683b      	ldr	r3, [r7, #0]
  40797c:	781b      	ldrb	r3, [r3, #0]
  40797e:	2b2f      	cmp	r3, #47	; 0x2f
  407980:	d003      	beq.n	40798a <follow_path+0x1a>
  407982:	683b      	ldr	r3, [r7, #0]
  407984:	781b      	ldrb	r3, [r3, #0]
  407986:	2b5c      	cmp	r3, #92	; 0x5c
  407988:	d102      	bne.n	407990 <follow_path+0x20>
		path++;
  40798a:	683b      	ldr	r3, [r7, #0]
  40798c:	3301      	adds	r3, #1
  40798e:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
  407990:	687b      	ldr	r3, [r7, #4]
  407992:	2200      	movs	r2, #0
  407994:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  407996:	683b      	ldr	r3, [r7, #0]
  407998:	781b      	ldrb	r3, [r3, #0]
  40799a:	2b1f      	cmp	r3, #31
  40799c:	d809      	bhi.n	4079b2 <follow_path+0x42>
		res = dir_sdi(dj, 0);
  40799e:	2100      	movs	r1, #0
  4079a0:	6878      	ldr	r0, [r7, #4]
  4079a2:	4b32      	ldr	r3, [pc, #200]	; (407a6c <follow_path+0xfc>)
  4079a4:	4798      	blx	r3
  4079a6:	4603      	mov	r3, r0
  4079a8:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
  4079aa:	687b      	ldr	r3, [r7, #4]
  4079ac:	2200      	movs	r2, #0
  4079ae:	615a      	str	r2, [r3, #20]
  4079b0:	e056      	b.n	407a60 <follow_path+0xf0>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
  4079b2:	463b      	mov	r3, r7
  4079b4:	4619      	mov	r1, r3
  4079b6:	6878      	ldr	r0, [r7, #4]
  4079b8:	4b2d      	ldr	r3, [pc, #180]	; (407a70 <follow_path+0x100>)
  4079ba:	4798      	blx	r3
  4079bc:	4603      	mov	r3, r0
  4079be:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
  4079c0:	7bfb      	ldrb	r3, [r7, #15]
  4079c2:	2b00      	cmp	r3, #0
  4079c4:	d145      	bne.n	407a52 <follow_path+0xe2>
			res = dir_find(dj);				/* Find it */
  4079c6:	6878      	ldr	r0, [r7, #4]
  4079c8:	4b2a      	ldr	r3, [pc, #168]	; (407a74 <follow_path+0x104>)
  4079ca:	4798      	blx	r3
  4079cc:	4603      	mov	r3, r0
  4079ce:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
  4079d0:	687b      	ldr	r3, [r7, #4]
  4079d2:	699b      	ldr	r3, [r3, #24]
  4079d4:	7adb      	ldrb	r3, [r3, #11]
  4079d6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
  4079d8:	7bfb      	ldrb	r3, [r7, #15]
  4079da:	2b00      	cmp	r3, #0
  4079dc:	d00a      	beq.n	4079f4 <follow_path+0x84>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  4079de:	7bfb      	ldrb	r3, [r7, #15]
  4079e0:	2b04      	cmp	r3, #4
  4079e2:	d138      	bne.n	407a56 <follow_path+0xe6>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  4079e4:	7bbb      	ldrb	r3, [r7, #14]
  4079e6:	f003 0304 	and.w	r3, r3, #4
  4079ea:	2b00      	cmp	r3, #0
  4079ec:	d135      	bne.n	407a5a <follow_path+0xea>
  4079ee:	2305      	movs	r3, #5
  4079f0:	73fb      	strb	r3, [r7, #15]
				}
				break;
  4079f2:	e032      	b.n	407a5a <follow_path+0xea>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  4079f4:	7bbb      	ldrb	r3, [r7, #14]
  4079f6:	f003 0304 	and.w	r3, r3, #4
  4079fa:	2b00      	cmp	r3, #0
  4079fc:	d12f      	bne.n	407a5e <follow_path+0xee>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  4079fe:	687b      	ldr	r3, [r7, #4]
  407a00:	695b      	ldr	r3, [r3, #20]
  407a02:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  407a04:	68bb      	ldr	r3, [r7, #8]
  407a06:	330b      	adds	r3, #11
  407a08:	781b      	ldrb	r3, [r3, #0]
  407a0a:	f003 0310 	and.w	r3, r3, #16
  407a0e:	2b00      	cmp	r3, #0
  407a10:	d102      	bne.n	407a18 <follow_path+0xa8>
				res = FR_NO_PATH; break;
  407a12:	2305      	movs	r3, #5
  407a14:	73fb      	strb	r3, [r7, #15]
  407a16:	e023      	b.n	407a60 <follow_path+0xf0>
			}
			dj->sclust = LD_CLUST(dir);
  407a18:	68bb      	ldr	r3, [r7, #8]
  407a1a:	3315      	adds	r3, #21
  407a1c:	781b      	ldrb	r3, [r3, #0]
  407a1e:	021b      	lsls	r3, r3, #8
  407a20:	b21a      	sxth	r2, r3
  407a22:	68bb      	ldr	r3, [r7, #8]
  407a24:	3314      	adds	r3, #20
  407a26:	781b      	ldrb	r3, [r3, #0]
  407a28:	b21b      	sxth	r3, r3
  407a2a:	4313      	orrs	r3, r2
  407a2c:	b21b      	sxth	r3, r3
  407a2e:	b29b      	uxth	r3, r3
  407a30:	041b      	lsls	r3, r3, #16
  407a32:	68ba      	ldr	r2, [r7, #8]
  407a34:	321b      	adds	r2, #27
  407a36:	7812      	ldrb	r2, [r2, #0]
  407a38:	0212      	lsls	r2, r2, #8
  407a3a:	b211      	sxth	r1, r2
  407a3c:	68ba      	ldr	r2, [r7, #8]
  407a3e:	321a      	adds	r2, #26
  407a40:	7812      	ldrb	r2, [r2, #0]
  407a42:	b212      	sxth	r2, r2
  407a44:	430a      	orrs	r2, r1
  407a46:	b212      	sxth	r2, r2
  407a48:	b292      	uxth	r2, r2
  407a4a:	431a      	orrs	r2, r3
  407a4c:	687b      	ldr	r3, [r7, #4]
  407a4e:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
  407a50:	e7af      	b.n	4079b2 <follow_path+0x42>
			if (res != FR_OK) break;
  407a52:	bf00      	nop
  407a54:	e004      	b.n	407a60 <follow_path+0xf0>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  407a56:	bf00      	nop
  407a58:	e002      	b.n	407a60 <follow_path+0xf0>
				break;
  407a5a:	bf00      	nop
  407a5c:	e000      	b.n	407a60 <follow_path+0xf0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  407a5e:	bf00      	nop
		}
	}

	return res;
  407a60:	7bfb      	ldrb	r3, [r7, #15]
}
  407a62:	4618      	mov	r0, r3
  407a64:	3710      	adds	r7, #16
  407a66:	46bd      	mov	sp, r7
  407a68:	bd80      	pop	{r7, pc}
  407a6a:	bf00      	nop
  407a6c:	00406c41 	.word	0x00406c41
  407a70:	00407601 	.word	0x00407601
  407a74:	00407201 	.word	0x00407201

00407a78 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  407a78:	b590      	push	{r4, r7, lr}
  407a7a:	b083      	sub	sp, #12
  407a7c:	af00      	add	r7, sp, #0
  407a7e:	6078      	str	r0, [r7, #4]
  407a80:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  407a82:	687b      	ldr	r3, [r7, #4]
  407a84:	7858      	ldrb	r0, [r3, #1]
  407a86:	687b      	ldr	r3, [r7, #4]
  407a88:	f103 0130 	add.w	r1, r3, #48	; 0x30
  407a8c:	2301      	movs	r3, #1
  407a8e:	683a      	ldr	r2, [r7, #0]
  407a90:	4c2a      	ldr	r4, [pc, #168]	; (407b3c <check_fs+0xc4>)
  407a92:	47a0      	blx	r4
  407a94:	4603      	mov	r3, r0
  407a96:	2b00      	cmp	r3, #0
  407a98:	d001      	beq.n	407a9e <check_fs+0x26>
		return 3;
  407a9a:	2303      	movs	r3, #3
  407a9c:	e04a      	b.n	407b34 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  407a9e:	687b      	ldr	r3, [r7, #4]
  407aa0:	f203 232e 	addw	r3, r3, #558	; 0x22e
  407aa4:	3301      	adds	r3, #1
  407aa6:	781b      	ldrb	r3, [r3, #0]
  407aa8:	021b      	lsls	r3, r3, #8
  407aaa:	b21a      	sxth	r2, r3
  407aac:	687b      	ldr	r3, [r7, #4]
  407aae:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
  407ab2:	b21b      	sxth	r3, r3
  407ab4:	4313      	orrs	r3, r2
  407ab6:	b21b      	sxth	r3, r3
  407ab8:	4a21      	ldr	r2, [pc, #132]	; (407b40 <check_fs+0xc8>)
  407aba:	4293      	cmp	r3, r2
  407abc:	d001      	beq.n	407ac2 <check_fs+0x4a>
		return 2;
  407abe:	2302      	movs	r3, #2
  407ac0:	e038      	b.n	407b34 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  407ac2:	687b      	ldr	r3, [r7, #4]
  407ac4:	3366      	adds	r3, #102	; 0x66
  407ac6:	3303      	adds	r3, #3
  407ac8:	781b      	ldrb	r3, [r3, #0]
  407aca:	061a      	lsls	r2, r3, #24
  407acc:	687b      	ldr	r3, [r7, #4]
  407ace:	3366      	adds	r3, #102	; 0x66
  407ad0:	3302      	adds	r3, #2
  407ad2:	781b      	ldrb	r3, [r3, #0]
  407ad4:	041b      	lsls	r3, r3, #16
  407ad6:	4313      	orrs	r3, r2
  407ad8:	687a      	ldr	r2, [r7, #4]
  407ada:	3266      	adds	r2, #102	; 0x66
  407adc:	3201      	adds	r2, #1
  407ade:	7812      	ldrb	r2, [r2, #0]
  407ae0:	0212      	lsls	r2, r2, #8
  407ae2:	4313      	orrs	r3, r2
  407ae4:	687a      	ldr	r2, [r7, #4]
  407ae6:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
  407aea:	4313      	orrs	r3, r2
  407aec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  407af0:	4a14      	ldr	r2, [pc, #80]	; (407b44 <check_fs+0xcc>)
  407af2:	4293      	cmp	r3, r2
  407af4:	d101      	bne.n	407afa <check_fs+0x82>
		return 0;
  407af6:	2300      	movs	r3, #0
  407af8:	e01c      	b.n	407b34 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  407afa:	687b      	ldr	r3, [r7, #4]
  407afc:	3382      	adds	r3, #130	; 0x82
  407afe:	3303      	adds	r3, #3
  407b00:	781b      	ldrb	r3, [r3, #0]
  407b02:	061a      	lsls	r2, r3, #24
  407b04:	687b      	ldr	r3, [r7, #4]
  407b06:	3382      	adds	r3, #130	; 0x82
  407b08:	3302      	adds	r3, #2
  407b0a:	781b      	ldrb	r3, [r3, #0]
  407b0c:	041b      	lsls	r3, r3, #16
  407b0e:	4313      	orrs	r3, r2
  407b10:	687a      	ldr	r2, [r7, #4]
  407b12:	3282      	adds	r2, #130	; 0x82
  407b14:	3201      	adds	r2, #1
  407b16:	7812      	ldrb	r2, [r2, #0]
  407b18:	0212      	lsls	r2, r2, #8
  407b1a:	4313      	orrs	r3, r2
  407b1c:	687a      	ldr	r2, [r7, #4]
  407b1e:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
  407b22:	4313      	orrs	r3, r2
  407b24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  407b28:	4a06      	ldr	r2, [pc, #24]	; (407b44 <check_fs+0xcc>)
  407b2a:	4293      	cmp	r3, r2
  407b2c:	d101      	bne.n	407b32 <check_fs+0xba>
		return 0;
  407b2e:	2300      	movs	r3, #0
  407b30:	e000      	b.n	407b34 <check_fs+0xbc>

	return 1;
  407b32:	2301      	movs	r3, #1
}
  407b34:	4618      	mov	r0, r3
  407b36:	370c      	adds	r7, #12
  407b38:	46bd      	mov	sp, r7
  407b3a:	bd90      	pop	{r4, r7, pc}
  407b3c:	00406145 	.word	0x00406145
  407b40:	ffffaa55 	.word	0xffffaa55
  407b44:	00544146 	.word	0x00544146

00407b48 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
  407b48:	b590      	push	{r4, r7, lr}
  407b4a:	b093      	sub	sp, #76	; 0x4c
  407b4c:	af00      	add	r7, sp, #0
  407b4e:	60f8      	str	r0, [r7, #12]
  407b50:	60b9      	str	r1, [r7, #8]
  407b52:	4613      	mov	r3, r2
  407b54:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
  407b56:	68fb      	ldr	r3, [r7, #12]
  407b58:	681b      	ldr	r3, [r3, #0]
  407b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
  407b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  407b5e:	781b      	ldrb	r3, [r3, #0]
  407b60:	3b30      	subs	r3, #48	; 0x30
  407b62:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  407b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  407b66:	2b09      	cmp	r3, #9
  407b68:	d80b      	bhi.n	407b82 <chk_mounted+0x3a>
  407b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  407b6c:	3301      	adds	r3, #1
  407b6e:	781b      	ldrb	r3, [r3, #0]
  407b70:	2b3a      	cmp	r3, #58	; 0x3a
  407b72:	d106      	bne.n	407b82 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
  407b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  407b76:	3302      	adds	r3, #2
  407b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  407b7a:	68fb      	ldr	r3, [r7, #12]
  407b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  407b7e:	601a      	str	r2, [r3, #0]
  407b80:	e001      	b.n	407b86 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
  407b82:	2300      	movs	r3, #0
  407b84:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  407b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  407b88:	2b00      	cmp	r3, #0
  407b8a:	d001      	beq.n	407b90 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
  407b8c:	230b      	movs	r3, #11
  407b8e:	e276      	b.n	40807e <chk_mounted+0x536>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  407b90:	4aa8      	ldr	r2, [pc, #672]	; (407e34 <chk_mounted+0x2ec>)
  407b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  407b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  407b98:	62bb      	str	r3, [r7, #40]	; 0x28
  407b9a:	68bb      	ldr	r3, [r7, #8]
  407b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407b9e:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  407ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407ba2:	2b00      	cmp	r3, #0
  407ba4:	d101      	bne.n	407baa <chk_mounted+0x62>
  407ba6:	230c      	movs	r3, #12
  407ba8:	e269      	b.n	40807e <chk_mounted+0x536>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
  407baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407bac:	781b      	ldrb	r3, [r3, #0]
  407bae:	2b00      	cmp	r3, #0
  407bb0:	d01a      	beq.n	407be8 <chk_mounted+0xa0>
		stat = disk_status(fs->drv);
  407bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407bb4:	785b      	ldrb	r3, [r3, #1]
  407bb6:	4618      	mov	r0, r3
  407bb8:	4b9f      	ldr	r3, [pc, #636]	; (407e38 <chk_mounted+0x2f0>)
  407bba:	4798      	blx	r3
  407bbc:	4603      	mov	r3, r0
  407bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  407bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407bc6:	f003 0301 	and.w	r3, r3, #1
  407bca:	2b00      	cmp	r3, #0
  407bcc:	d10c      	bne.n	407be8 <chk_mounted+0xa0>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  407bce:	79fb      	ldrb	r3, [r7, #7]
  407bd0:	2b00      	cmp	r3, #0
  407bd2:	d007      	beq.n	407be4 <chk_mounted+0x9c>
  407bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407bd8:	f003 0304 	and.w	r3, r3, #4
  407bdc:	2b00      	cmp	r3, #0
  407bde:	d001      	beq.n	407be4 <chk_mounted+0x9c>
				return FR_WRITE_PROTECTED;
  407be0:	230a      	movs	r3, #10
  407be2:	e24c      	b.n	40807e <chk_mounted+0x536>
			return FR_OK;				/* The file system object is valid */
  407be4:	2300      	movs	r3, #0
  407be6:	e24a      	b.n	40807e <chk_mounted+0x536>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
  407be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407bea:	2200      	movs	r2, #0
  407bec:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  407bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  407bf0:	b2da      	uxtb	r2, r3
  407bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407bf4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  407bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407bf8:	785b      	ldrb	r3, [r3, #1]
  407bfa:	4618      	mov	r0, r3
  407bfc:	4b8f      	ldr	r3, [pc, #572]	; (407e3c <chk_mounted+0x2f4>)
  407bfe:	4798      	blx	r3
  407c00:	4603      	mov	r3, r0
  407c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  407c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407c0a:	f003 0301 	and.w	r3, r3, #1
  407c0e:	2b00      	cmp	r3, #0
  407c10:	d001      	beq.n	407c16 <chk_mounted+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  407c12:	2303      	movs	r3, #3
  407c14:	e233      	b.n	40807e <chk_mounted+0x536>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  407c16:	79fb      	ldrb	r3, [r7, #7]
  407c18:	2b00      	cmp	r3, #0
  407c1a:	d007      	beq.n	407c2c <chk_mounted+0xe4>
  407c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407c20:	f003 0304 	and.w	r3, r3, #4
  407c24:	2b00      	cmp	r3, #0
  407c26:	d001      	beq.n	407c2c <chk_mounted+0xe4>
		return FR_WRITE_PROTECTED;
  407c28:	230a      	movs	r3, #10
  407c2a:	e228      	b.n	40807e <chk_mounted+0x536>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  407c2c:	2300      	movs	r3, #0
  407c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  407c30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
  407c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  407c34:	4b82      	ldr	r3, [pc, #520]	; (407e40 <chk_mounted+0x2f8>)
  407c36:	4798      	blx	r3
  407c38:	4603      	mov	r3, r0
  407c3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  407c3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  407c42:	2b01      	cmp	r3, #1
  407c44:	d133      	bne.n	407cae <chk_mounted+0x166>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
  407c46:	2300      	movs	r3, #0
  407c48:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		if (pi) pi--;
  407c4c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  407c50:	2b00      	cmp	r3, #0
  407c52:	d004      	beq.n	407c5e <chk_mounted+0x116>
  407c54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  407c58:	3b01      	subs	r3, #1
  407c5a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
  407c5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
  407c62:	011b      	lsls	r3, r3, #4
  407c64:	f503 73df 	add.w	r3, r3, #446	; 0x1be
  407c68:	3330      	adds	r3, #48	; 0x30
  407c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407c6c:	4413      	add	r3, r2
  407c6e:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
  407c70:	6a3b      	ldr	r3, [r7, #32]
  407c72:	3304      	adds	r3, #4
  407c74:	781b      	ldrb	r3, [r3, #0]
  407c76:	2b00      	cmp	r3, #0
  407c78:	d019      	beq.n	407cae <chk_mounted+0x166>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  407c7a:	6a3b      	ldr	r3, [r7, #32]
  407c7c:	330b      	adds	r3, #11
  407c7e:	781b      	ldrb	r3, [r3, #0]
  407c80:	061a      	lsls	r2, r3, #24
  407c82:	6a3b      	ldr	r3, [r7, #32]
  407c84:	330a      	adds	r3, #10
  407c86:	781b      	ldrb	r3, [r3, #0]
  407c88:	041b      	lsls	r3, r3, #16
  407c8a:	4313      	orrs	r3, r2
  407c8c:	6a3a      	ldr	r2, [r7, #32]
  407c8e:	3209      	adds	r2, #9
  407c90:	7812      	ldrb	r2, [r2, #0]
  407c92:	0212      	lsls	r2, r2, #8
  407c94:	4313      	orrs	r3, r2
  407c96:	6a3a      	ldr	r2, [r7, #32]
  407c98:	3208      	adds	r2, #8
  407c9a:	7812      	ldrb	r2, [r2, #0]
  407c9c:	4313      	orrs	r3, r2
  407c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
  407ca0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
  407ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  407ca4:	4b66      	ldr	r3, [pc, #408]	; (407e40 <chk_mounted+0x2f8>)
  407ca6:	4798      	blx	r3
  407ca8:	4603      	mov	r3, r0
  407caa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  407cae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  407cb2:	2b03      	cmp	r3, #3
  407cb4:	d101      	bne.n	407cba <chk_mounted+0x172>
  407cb6:	2301      	movs	r3, #1
  407cb8:	e1e1      	b.n	40807e <chk_mounted+0x536>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  407cba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  407cbe:	2b00      	cmp	r3, #0
  407cc0:	d001      	beq.n	407cc6 <chk_mounted+0x17e>
  407cc2:	230d      	movs	r3, #13
  407cc4:	e1db      	b.n	40807e <chk_mounted+0x536>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  407cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  407ccc:	021b      	lsls	r3, r3, #8
  407cce:	b21a      	sxth	r2, r3
  407cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407cd2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
  407cd6:	b21b      	sxth	r3, r3
  407cd8:	4313      	orrs	r3, r2
  407cda:	b21b      	sxth	r3, r3
  407cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407ce0:	d001      	beq.n	407ce6 <chk_mounted+0x19e>
		return FR_NO_FILESYSTEM;
  407ce2:	230d      	movs	r3, #13
  407ce4:	e1cb      	b.n	40807e <chk_mounted+0x536>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  407ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407ce8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  407cec:	021b      	lsls	r3, r3, #8
  407cee:	b21a      	sxth	r2, r3
  407cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407cf2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  407cf6:	b21b      	sxth	r3, r3
  407cf8:	4313      	orrs	r3, r2
  407cfa:	b21b      	sxth	r3, r3
  407cfc:	b29b      	uxth	r3, r3
  407cfe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  407d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  407d02:	2b00      	cmp	r3, #0
  407d04:	d112      	bne.n	407d2c <chk_mounted+0x1e4>
  407d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407d08:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
  407d0c:	061a      	lsls	r2, r3, #24
  407d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407d10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
  407d14:	041b      	lsls	r3, r3, #16
  407d16:	4313      	orrs	r3, r2
  407d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407d1a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
  407d1e:	0212      	lsls	r2, r2, #8
  407d20:	4313      	orrs	r3, r2
  407d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407d24:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  407d28:	4313      	orrs	r3, r2
  407d2a:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
  407d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
  407d30:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  407d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407d34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
  407d38:	77fb      	strb	r3, [r7, #31]
  407d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407d3c:	7ffa      	ldrb	r2, [r7, #31]
  407d3e:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  407d40:	7ffb      	ldrb	r3, [r7, #31]
  407d42:	2b01      	cmp	r3, #1
  407d44:	d004      	beq.n	407d50 <chk_mounted+0x208>
  407d46:	7ffb      	ldrb	r3, [r7, #31]
  407d48:	2b02      	cmp	r3, #2
  407d4a:	d001      	beq.n	407d50 <chk_mounted+0x208>
  407d4c:	230d      	movs	r3, #13
  407d4e:	e196      	b.n	40807e <chk_mounted+0x536>
	fasize *= b;										/* Number of sectors for FAT area */
  407d50:	7ffa      	ldrb	r2, [r7, #31]
  407d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  407d54:	fb02 f303 	mul.w	r3, r2, r3
  407d58:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  407d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
  407d60:	77fb      	strb	r3, [r7, #31]
  407d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407d64:	7ffa      	ldrb	r2, [r7, #31]
  407d66:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  407d68:	7ffb      	ldrb	r3, [r7, #31]
  407d6a:	2b00      	cmp	r3, #0
  407d6c:	d005      	beq.n	407d7a <chk_mounted+0x232>
  407d6e:	7ffa      	ldrb	r2, [r7, #31]
  407d70:	7ffb      	ldrb	r3, [r7, #31]
  407d72:	3b01      	subs	r3, #1
  407d74:	4013      	ands	r3, r2
  407d76:	2b00      	cmp	r3, #0
  407d78:	d001      	beq.n	407d7e <chk_mounted+0x236>
  407d7a:	230d      	movs	r3, #13
  407d7c:	e17f      	b.n	40807e <chk_mounted+0x536>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  407d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407d80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
  407d84:	021b      	lsls	r3, r3, #8
  407d86:	b21a      	sxth	r2, r3
  407d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
  407d8e:	b21b      	sxth	r3, r3
  407d90:	4313      	orrs	r3, r2
  407d92:	b21b      	sxth	r3, r3
  407d94:	b29a      	uxth	r2, r3
  407d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407d98:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  407d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407d9c:	891b      	ldrh	r3, [r3, #8]
  407d9e:	f003 030f 	and.w	r3, r3, #15
  407da2:	b29b      	uxth	r3, r3
  407da4:	2b00      	cmp	r3, #0
  407da6:	d001      	beq.n	407dac <chk_mounted+0x264>
  407da8:	230d      	movs	r3, #13
  407daa:	e168      	b.n	40807e <chk_mounted+0x536>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  407dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407dae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  407db2:	021b      	lsls	r3, r3, #8
  407db4:	b21a      	sxth	r2, r3
  407db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407db8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
  407dbc:	b21b      	sxth	r3, r3
  407dbe:	4313      	orrs	r3, r2
  407dc0:	b21b      	sxth	r3, r3
  407dc2:	b29b      	uxth	r3, r3
  407dc4:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  407dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  407dc8:	2b00      	cmp	r3, #0
  407dca:	d112      	bne.n	407df2 <chk_mounted+0x2aa>
  407dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407dce:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
  407dd2:	061a      	lsls	r2, r3, #24
  407dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407dd6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
  407dda:	041b      	lsls	r3, r3, #16
  407ddc:	4313      	orrs	r3, r2
  407dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407de0:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
  407de4:	0212      	lsls	r2, r2, #8
  407de6:	4313      	orrs	r3, r2
  407de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407dea:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
  407dee:	4313      	orrs	r3, r2
  407df0:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  407df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407df4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
  407df8:	021b      	lsls	r3, r3, #8
  407dfa:	b21a      	sxth	r2, r3
  407dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
  407e02:	b21b      	sxth	r3, r3
  407e04:	4313      	orrs	r3, r2
  407e06:	b21b      	sxth	r3, r3
  407e08:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  407e0a:	8bbb      	ldrh	r3, [r7, #28]
  407e0c:	2b00      	cmp	r3, #0
  407e0e:	d101      	bne.n	407e14 <chk_mounted+0x2cc>
  407e10:	230d      	movs	r3, #13
  407e12:	e134      	b.n	40807e <chk_mounted+0x536>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  407e14:	8bba      	ldrh	r2, [r7, #28]
  407e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  407e18:	4413      	add	r3, r2
  407e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407e1c:	8912      	ldrh	r2, [r2, #8]
  407e1e:	0912      	lsrs	r2, r2, #4
  407e20:	b292      	uxth	r2, r2
  407e22:	4413      	add	r3, r2
  407e24:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  407e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  407e28:	69bb      	ldr	r3, [r7, #24]
  407e2a:	429a      	cmp	r2, r3
  407e2c:	d20a      	bcs.n	407e44 <chk_mounted+0x2fc>
  407e2e:	230d      	movs	r3, #13
  407e30:	e125      	b.n	40807e <chk_mounted+0x536>
  407e32:	bf00      	nop
  407e34:	2000ac0c 	.word	0x2000ac0c
  407e38:	00406111 	.word	0x00406111
  407e3c:	004060a5 	.word	0x004060a5
  407e40:	00407a79 	.word	0x00407a79
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  407e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  407e46:	69bb      	ldr	r3, [r7, #24]
  407e48:	1ad3      	subs	r3, r2, r3
  407e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407e4c:	7892      	ldrb	r2, [r2, #2]
  407e4e:	fbb3 f3f2 	udiv	r3, r3, r2
  407e52:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  407e54:	697b      	ldr	r3, [r7, #20]
  407e56:	2b00      	cmp	r3, #0
  407e58:	d101      	bne.n	407e5e <chk_mounted+0x316>
  407e5a:	230d      	movs	r3, #13
  407e5c:	e10f      	b.n	40807e <chk_mounted+0x536>
	fmt = FS_FAT12;
  407e5e:	2301      	movs	r3, #1
  407e60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  407e64:	697b      	ldr	r3, [r7, #20]
  407e66:	f640 72f5 	movw	r2, #4085	; 0xff5
  407e6a:	4293      	cmp	r3, r2
  407e6c:	d902      	bls.n	407e74 <chk_mounted+0x32c>
  407e6e:	2302      	movs	r3, #2
  407e70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  407e74:	697b      	ldr	r3, [r7, #20]
  407e76:	f64f 72f5 	movw	r2, #65525	; 0xfff5
  407e7a:	4293      	cmp	r3, r2
  407e7c:	d902      	bls.n	407e84 <chk_mounted+0x33c>
  407e7e:	2303      	movs	r3, #3
  407e80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  407e84:	697b      	ldr	r3, [r7, #20]
  407e86:	1c9a      	adds	r2, r3, #2
  407e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407e8a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  407e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  407e8e:	69bb      	ldr	r3, [r7, #24]
  407e90:	441a      	add	r2, r3
  407e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407e94:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  407e96:	8bba      	ldrh	r2, [r7, #28]
  407e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  407e9a:	441a      	add	r2, r3
  407e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407e9e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
  407ea0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  407ea4:	2b03      	cmp	r3, #3
  407ea6:	d11e      	bne.n	407ee6 <chk_mounted+0x39e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  407ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407eaa:	891b      	ldrh	r3, [r3, #8]
  407eac:	2b00      	cmp	r3, #0
  407eae:	d001      	beq.n	407eb4 <chk_mounted+0x36c>
  407eb0:	230d      	movs	r3, #13
  407eb2:	e0e4      	b.n	40807e <chk_mounted+0x536>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  407eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407eb6:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
  407eba:	061a      	lsls	r2, r3, #24
  407ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407ebe:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
  407ec2:	041b      	lsls	r3, r3, #16
  407ec4:	4313      	orrs	r3, r2
  407ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407ec8:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
  407ecc:	0212      	lsls	r2, r2, #8
  407ece:	4313      	orrs	r3, r2
  407ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407ed2:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
  407ed6:	431a      	orrs	r2, r3
  407ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407eda:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  407edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407ede:	699b      	ldr	r3, [r3, #24]
  407ee0:	009b      	lsls	r3, r3, #2
  407ee2:	633b      	str	r3, [r7, #48]	; 0x30
  407ee4:	e01f      	b.n	407f26 <chk_mounted+0x3de>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  407ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407ee8:	891b      	ldrh	r3, [r3, #8]
  407eea:	2b00      	cmp	r3, #0
  407eec:	d101      	bne.n	407ef2 <chk_mounted+0x3aa>
  407eee:	230d      	movs	r3, #13
  407ef0:	e0c5      	b.n	40807e <chk_mounted+0x536>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  407ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407ef4:	6a1a      	ldr	r2, [r3, #32]
  407ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  407ef8:	441a      	add	r2, r3
  407efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407efc:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  407efe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  407f02:	2b02      	cmp	r3, #2
  407f04:	d103      	bne.n	407f0e <chk_mounted+0x3c6>
  407f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f08:	699b      	ldr	r3, [r3, #24]
  407f0a:	005b      	lsls	r3, r3, #1
  407f0c:	e00a      	b.n	407f24 <chk_mounted+0x3dc>
  407f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f10:	699a      	ldr	r2, [r3, #24]
  407f12:	4613      	mov	r3, r2
  407f14:	005b      	lsls	r3, r3, #1
  407f16:	4413      	add	r3, r2
  407f18:	085a      	lsrs	r2, r3, #1
  407f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f1c:	699b      	ldr	r3, [r3, #24]
  407f1e:	f003 0301 	and.w	r3, r3, #1
  407f22:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
  407f24:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  407f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f28:	69da      	ldr	r2, [r3, #28]
  407f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  407f2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  407f30:	0a5b      	lsrs	r3, r3, #9
  407f32:	429a      	cmp	r2, r3
  407f34:	d201      	bcs.n	407f3a <chk_mounted+0x3f2>
		return FR_NO_FILESYSTEM;
  407f36:	230d      	movs	r3, #13
  407f38:	e0a1      	b.n	40807e <chk_mounted+0x536>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  407f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f3c:	f04f 32ff 	mov.w	r2, #4294967295
  407f40:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
  407f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f44:	2200      	movs	r2, #0
  407f46:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
  407f48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
  407f4c:	2b03      	cmp	r3, #3
  407f4e:	f040 8081 	bne.w	408054 <chk_mounted+0x50c>
	 	fs->fsi_flag = 0;
  407f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f54:	2200      	movs	r2, #0
  407f56:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  407f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f5a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
  407f5e:	021b      	lsls	r3, r3, #8
  407f60:	b21a      	sxth	r2, r3
  407f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f64:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  407f68:	b21b      	sxth	r3, r3
  407f6a:	4313      	orrs	r3, r2
  407f6c:	b21b      	sxth	r3, r3
  407f6e:	b29b      	uxth	r3, r3
  407f70:	461a      	mov	r2, r3
  407f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  407f74:	441a      	add	r2, r3
  407f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f78:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  407f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f7c:	7858      	ldrb	r0, [r3, #1]
  407f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f80:	f103 0130 	add.w	r1, r3, #48	; 0x30
  407f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f86:	695a      	ldr	r2, [r3, #20]
  407f88:	2301      	movs	r3, #1
  407f8a:	4c3f      	ldr	r4, [pc, #252]	; (408088 <chk_mounted+0x540>)
  407f8c:	47a0      	blx	r4
  407f8e:	4603      	mov	r3, r0
  407f90:	2b00      	cmp	r3, #0
  407f92:	d15f      	bne.n	408054 <chk_mounted+0x50c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  407f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f96:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
  407f9a:	021b      	lsls	r3, r3, #8
  407f9c:	b21a      	sxth	r2, r3
  407f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407fa0:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
  407fa4:	b21b      	sxth	r3, r3
  407fa6:	4313      	orrs	r3, r2
  407fa8:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  407faa:	4a38      	ldr	r2, [pc, #224]	; (40808c <chk_mounted+0x544>)
  407fac:	4293      	cmp	r3, r2
  407fae:	d151      	bne.n	408054 <chk_mounted+0x50c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  407fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407fb2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
  407fb6:	061a      	lsls	r2, r3, #24
  407fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407fba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
  407fbe:	041b      	lsls	r3, r3, #16
  407fc0:	4313      	orrs	r3, r2
  407fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407fc4:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
  407fc8:	0212      	lsls	r2, r2, #8
  407fca:	4313      	orrs	r3, r2
  407fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407fce:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
  407fd2:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  407fd4:	4a2e      	ldr	r2, [pc, #184]	; (408090 <chk_mounted+0x548>)
  407fd6:	4293      	cmp	r3, r2
  407fd8:	d13c      	bne.n	408054 <chk_mounted+0x50c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  407fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407fdc:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
  407fe0:	061a      	lsls	r2, r3, #24
  407fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407fe4:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
  407fe8:	041b      	lsls	r3, r3, #16
  407fea:	4313      	orrs	r3, r2
  407fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407fee:	f892 2215 	ldrb.w	r2, [r2, #533]	; 0x215
  407ff2:	0212      	lsls	r2, r2, #8
  407ff4:	4313      	orrs	r3, r2
  407ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407ff8:	f892 2214 	ldrb.w	r2, [r2, #532]	; 0x214
  407ffc:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  407ffe:	4a25      	ldr	r2, [pc, #148]	; (408094 <chk_mounted+0x54c>)
  408000:	4293      	cmp	r3, r2
  408002:	d127      	bne.n	408054 <chk_mounted+0x50c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  408004:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408006:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
  40800a:	061a      	lsls	r2, r3, #24
  40800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40800e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
  408012:	041b      	lsls	r3, r3, #16
  408014:	4313      	orrs	r3, r2
  408016:	6aba      	ldr	r2, [r7, #40]	; 0x28
  408018:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
  40801c:	0212      	lsls	r2, r2, #8
  40801e:	4313      	orrs	r3, r2
  408020:	6aba      	ldr	r2, [r7, #40]	; 0x28
  408022:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
  408026:	431a      	orrs	r2, r3
  408028:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40802a:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  40802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40802e:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
  408032:	061a      	lsls	r2, r3, #24
  408034:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408036:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
  40803a:	041b      	lsls	r3, r3, #16
  40803c:	4313      	orrs	r3, r2
  40803e:	6aba      	ldr	r2, [r7, #40]	; 0x28
  408040:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
  408044:	0212      	lsls	r2, r2, #8
  408046:	4313      	orrs	r3, r2
  408048:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40804a:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
  40804e:	431a      	orrs	r2, r3
  408050:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408052:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
  408054:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408056:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
  40805a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  40805c:	4b0e      	ldr	r3, [pc, #56]	; (408098 <chk_mounted+0x550>)
  40805e:	881b      	ldrh	r3, [r3, #0]
  408060:	3301      	adds	r3, #1
  408062:	b29a      	uxth	r2, r3
  408064:	4b0c      	ldr	r3, [pc, #48]	; (408098 <chk_mounted+0x550>)
  408066:	801a      	strh	r2, [r3, #0]
  408068:	4b0b      	ldr	r3, [pc, #44]	; (408098 <chk_mounted+0x550>)
  40806a:	881a      	ldrh	r2, [r3, #0]
  40806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40806e:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  408070:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408072:	2200      	movs	r2, #0
  408074:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
  408076:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408078:	2200      	movs	r2, #0
  40807a:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
  40807c:	2300      	movs	r3, #0
}
  40807e:	4618      	mov	r0, r3
  408080:	374c      	adds	r7, #76	; 0x4c
  408082:	46bd      	mov	sp, r7
  408084:	bd90      	pop	{r4, r7, pc}
  408086:	bf00      	nop
  408088:	00406145 	.word	0x00406145
  40808c:	ffffaa55 	.word	0xffffaa55
  408090:	41615252 	.word	0x41615252
  408094:	61417272 	.word	0x61417272
  408098:	2000ac10 	.word	0x2000ac10

0040809c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
  40809c:	b580      	push	{r7, lr}
  40809e:	b082      	sub	sp, #8
  4080a0:	af00      	add	r7, sp, #0
  4080a2:	6078      	str	r0, [r7, #4]
  4080a4:	460b      	mov	r3, r1
  4080a6:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
  4080a8:	687b      	ldr	r3, [r7, #4]
  4080aa:	2b00      	cmp	r3, #0
  4080ac:	d008      	beq.n	4080c0 <validate+0x24>
  4080ae:	687b      	ldr	r3, [r7, #4]
  4080b0:	781b      	ldrb	r3, [r3, #0]
  4080b2:	2b00      	cmp	r3, #0
  4080b4:	d004      	beq.n	4080c0 <validate+0x24>
  4080b6:	687b      	ldr	r3, [r7, #4]
  4080b8:	88db      	ldrh	r3, [r3, #6]
  4080ba:	887a      	ldrh	r2, [r7, #2]
  4080bc:	429a      	cmp	r2, r3
  4080be:	d001      	beq.n	4080c4 <validate+0x28>
		return FR_INVALID_OBJECT;
  4080c0:	2309      	movs	r3, #9
  4080c2:	e00c      	b.n	4080de <validate+0x42>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
  4080c4:	687b      	ldr	r3, [r7, #4]
  4080c6:	785b      	ldrb	r3, [r3, #1]
  4080c8:	4618      	mov	r0, r3
  4080ca:	4b07      	ldr	r3, [pc, #28]	; (4080e8 <validate+0x4c>)
  4080cc:	4798      	blx	r3
  4080ce:	4603      	mov	r3, r0
  4080d0:	f003 0301 	and.w	r3, r3, #1
  4080d4:	2b00      	cmp	r3, #0
  4080d6:	d001      	beq.n	4080dc <validate+0x40>
		return FR_NOT_READY;
  4080d8:	2303      	movs	r3, #3
  4080da:	e000      	b.n	4080de <validate+0x42>

	return FR_OK;
  4080dc:	2300      	movs	r3, #0
}
  4080de:	4618      	mov	r0, r3
  4080e0:	3708      	adds	r7, #8
  4080e2:	46bd      	mov	sp, r7
  4080e4:	bd80      	pop	{r7, pc}
  4080e6:	bf00      	nop
  4080e8:	00406111 	.word	0x00406111

004080ec <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
  4080ec:	b480      	push	{r7}
  4080ee:	b085      	sub	sp, #20
  4080f0:	af00      	add	r7, sp, #0
  4080f2:	4603      	mov	r3, r0
  4080f4:	6039      	str	r1, [r7, #0]
  4080f6:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  4080f8:	79fb      	ldrb	r3, [r7, #7]
  4080fa:	2b00      	cmp	r3, #0
  4080fc:	d001      	beq.n	408102 <f_mount+0x16>
		return FR_INVALID_DRIVE;
  4080fe:	230b      	movs	r3, #11
  408100:	e016      	b.n	408130 <f_mount+0x44>
	rfs = FatFs[vol];			/* Get current fs object */
  408102:	79fb      	ldrb	r3, [r7, #7]
  408104:	4a0d      	ldr	r2, [pc, #52]	; (40813c <f_mount+0x50>)
  408106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40810a:	60fb      	str	r3, [r7, #12]

	if (rfs) {
  40810c:	68fb      	ldr	r3, [r7, #12]
  40810e:	2b00      	cmp	r3, #0
  408110:	d002      	beq.n	408118 <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  408112:	68fb      	ldr	r3, [r7, #12]
  408114:	2200      	movs	r2, #0
  408116:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  408118:	683b      	ldr	r3, [r7, #0]
  40811a:	2b00      	cmp	r3, #0
  40811c:	d002      	beq.n	408124 <f_mount+0x38>
		fs->fs_type = 0;		/* Clear new fs object */
  40811e:	683b      	ldr	r3, [r7, #0]
  408120:	2200      	movs	r2, #0
  408122:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  408124:	79fb      	ldrb	r3, [r7, #7]
  408126:	4905      	ldr	r1, [pc, #20]	; (40813c <f_mount+0x50>)
  408128:	683a      	ldr	r2, [r7, #0]
  40812a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
  40812e:	2300      	movs	r3, #0
}
  408130:	4618      	mov	r0, r3
  408132:	3714      	adds	r7, #20
  408134:	46bd      	mov	sp, r7
  408136:	f85d 7b04 	ldr.w	r7, [sp], #4
  40813a:	4770      	bx	lr
  40813c:	2000ac0c 	.word	0x2000ac0c

00408140 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  408140:	b580      	push	{r7, lr}
  408142:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
  408146:	af00      	add	r7, sp, #0
  408148:	f107 030c 	add.w	r3, r7, #12
  40814c:	6018      	str	r0, [r3, #0]
  40814e:	f107 0308 	add.w	r3, r7, #8
  408152:	6019      	str	r1, [r3, #0]
  408154:	1dfb      	adds	r3, r7, #7
  408156:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  408158:	f107 030c 	add.w	r3, r7, #12
  40815c:	681b      	ldr	r3, [r3, #0]
  40815e:	2200      	movs	r2, #0
  408160:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  408162:	1dfb      	adds	r3, r7, #7
  408164:	1dfa      	adds	r2, r7, #7
  408166:	7812      	ldrb	r2, [r2, #0]
  408168:	f002 021f 	and.w	r2, r2, #31
  40816c:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  40816e:	1dfb      	adds	r3, r7, #7
  408170:	781b      	ldrb	r3, [r3, #0]
  408172:	f023 0301 	bic.w	r3, r3, #1
  408176:	b2da      	uxtb	r2, r3
  408178:	f507 7107 	add.w	r1, r7, #540	; 0x21c
  40817c:	f107 0308 	add.w	r3, r7, #8
  408180:	4618      	mov	r0, r3
  408182:	4b8e      	ldr	r3, [pc, #568]	; (4083bc <f_open+0x27c>)
  408184:	4798      	blx	r3
  408186:	4603      	mov	r3, r0
  408188:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  40818c:	f507 7304 	add.w	r3, r7, #528	; 0x210
  408190:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  408194:	f107 0310 	add.w	r3, r7, #16
  408198:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	if (res == FR_OK)
  40819c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  4081a0:	2b00      	cmp	r3, #0
  4081a2:	d10b      	bne.n	4081bc <f_open+0x7c>
		res = follow_path(&dj, path);	/* Follow the file path */
  4081a4:	f107 0308 	add.w	r3, r7, #8
  4081a8:	681a      	ldr	r2, [r3, #0]
  4081aa:	f507 7307 	add.w	r3, r7, #540	; 0x21c
  4081ae:	4611      	mov	r1, r2
  4081b0:	4618      	mov	r0, r3
  4081b2:	4b83      	ldr	r3, [pc, #524]	; (4083c0 <f_open+0x280>)
  4081b4:	4798      	blx	r3
  4081b6:	4603      	mov	r3, r0
  4081b8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
	dir = dj.dir;
  4081bc:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
  4081c0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
  4081c4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  4081c8:	2b00      	cmp	r3, #0
  4081ca:	d106      	bne.n	4081da <f_open+0x9a>
		if (!dir)	/* Current dir itself */
  4081cc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4081d0:	2b00      	cmp	r3, #0
  4081d2:	d102      	bne.n	4081da <f_open+0x9a>
			res = FR_INVALID_NAME;
  4081d4:	2306      	movs	r3, #6
  4081d6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  4081da:	1dfb      	adds	r3, r7, #7
  4081dc:	781b      	ldrb	r3, [r3, #0]
  4081de:	f003 031c 	and.w	r3, r3, #28
  4081e2:	2b00      	cmp	r3, #0
  4081e4:	f000 80da 	beq.w	40839c <f_open+0x25c>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
  4081e8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  4081ec:	2b00      	cmp	r3, #0
  4081ee:	d016      	beq.n	40821e <f_open+0xde>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  4081f0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  4081f4:	2b04      	cmp	r3, #4
  4081f6:	d107      	bne.n	408208 <f_open+0xc8>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
  4081f8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
  4081fc:	4618      	mov	r0, r3
  4081fe:	4b71      	ldr	r3, [pc, #452]	; (4083c4 <f_open+0x284>)
  408200:	4798      	blx	r3
  408202:	4603      	mov	r3, r0
  408204:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  408208:	1dfb      	adds	r3, r7, #7
  40820a:	1dfa      	adds	r2, r7, #7
  40820c:	7812      	ldrb	r2, [r2, #0]
  40820e:	f042 0208 	orr.w	r2, r2, #8
  408212:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
  408214:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
  408218:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  40821c:	e014      	b.n	408248 <f_open+0x108>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  40821e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408222:	330b      	adds	r3, #11
  408224:	781b      	ldrb	r3, [r3, #0]
  408226:	f003 0311 	and.w	r3, r3, #17
  40822a:	2b00      	cmp	r3, #0
  40822c:	d003      	beq.n	408236 <f_open+0xf6>
				res = FR_DENIED;
  40822e:	2307      	movs	r3, #7
  408230:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  408234:	e008      	b.n	408248 <f_open+0x108>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  408236:	1dfb      	adds	r3, r7, #7
  408238:	781b      	ldrb	r3, [r3, #0]
  40823a:	f003 0304 	and.w	r3, r3, #4
  40823e:	2b00      	cmp	r3, #0
  408240:	d002      	beq.n	408248 <f_open+0x108>
					res = FR_EXIST;
  408242:	2308      	movs	r3, #8
  408244:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  408248:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  40824c:	2b00      	cmp	r3, #0
  40824e:	f040 80d2 	bne.w	4083f6 <f_open+0x2b6>
  408252:	1dfb      	adds	r3, r7, #7
  408254:	781b      	ldrb	r3, [r3, #0]
  408256:	f003 0308 	and.w	r3, r3, #8
  40825a:	2b00      	cmp	r3, #0
  40825c:	f000 80cb 	beq.w	4083f6 <f_open+0x2b6>
			dw = get_fattime();					/* Created time */
  408260:	4b59      	ldr	r3, [pc, #356]	; (4083c8 <f_open+0x288>)
  408262:	4798      	blx	r3
  408264:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
			ST_DWORD(dir+DIR_CrtTime, dw);
  408268:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40826c:	330e      	adds	r3, #14
  40826e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  408272:	b2d2      	uxtb	r2, r2
  408274:	701a      	strb	r2, [r3, #0]
  408276:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40827a:	330f      	adds	r3, #15
  40827c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  408280:	b292      	uxth	r2, r2
  408282:	0a12      	lsrs	r2, r2, #8
  408284:	b292      	uxth	r2, r2
  408286:	b2d2      	uxtb	r2, r2
  408288:	701a      	strb	r2, [r3, #0]
  40828a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40828e:	3310      	adds	r3, #16
  408290:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  408294:	0c12      	lsrs	r2, r2, #16
  408296:	b2d2      	uxtb	r2, r2
  408298:	701a      	strb	r2, [r3, #0]
  40829a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40829e:	3311      	adds	r3, #17
  4082a0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
  4082a4:	0e12      	lsrs	r2, r2, #24
  4082a6:	b2d2      	uxtb	r2, r2
  4082a8:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  4082aa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4082ae:	330b      	adds	r3, #11
  4082b0:	2200      	movs	r2, #0
  4082b2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  4082b4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4082b8:	331c      	adds	r3, #28
  4082ba:	2200      	movs	r2, #0
  4082bc:	701a      	strb	r2, [r3, #0]
  4082be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4082c2:	331d      	adds	r3, #29
  4082c4:	2200      	movs	r2, #0
  4082c6:	701a      	strb	r2, [r3, #0]
  4082c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4082cc:	331e      	adds	r3, #30
  4082ce:	2200      	movs	r2, #0
  4082d0:	701a      	strb	r2, [r3, #0]
  4082d2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4082d6:	331f      	adds	r3, #31
  4082d8:	2200      	movs	r2, #0
  4082da:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
  4082dc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4082e0:	3315      	adds	r3, #21
  4082e2:	781b      	ldrb	r3, [r3, #0]
  4082e4:	021b      	lsls	r3, r3, #8
  4082e6:	b21a      	sxth	r2, r3
  4082e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4082ec:	3314      	adds	r3, #20
  4082ee:	781b      	ldrb	r3, [r3, #0]
  4082f0:	b21b      	sxth	r3, r3
  4082f2:	4313      	orrs	r3, r2
  4082f4:	b21b      	sxth	r3, r3
  4082f6:	b29b      	uxth	r3, r3
  4082f8:	041b      	lsls	r3, r3, #16
  4082fa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  4082fe:	321b      	adds	r2, #27
  408300:	7812      	ldrb	r2, [r2, #0]
  408302:	0212      	lsls	r2, r2, #8
  408304:	b211      	sxth	r1, r2
  408306:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  40830a:	321a      	adds	r2, #26
  40830c:	7812      	ldrb	r2, [r2, #0]
  40830e:	b212      	sxth	r2, r2
  408310:	430a      	orrs	r2, r1
  408312:	b212      	sxth	r2, r2
  408314:	b292      	uxth	r2, r2
  408316:	4313      	orrs	r3, r2
  408318:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
			ST_CLUST(dir, 0);					/* cluster = 0 */
  40831c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408320:	331a      	adds	r3, #26
  408322:	2200      	movs	r2, #0
  408324:	701a      	strb	r2, [r3, #0]
  408326:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40832a:	331b      	adds	r3, #27
  40832c:	2200      	movs	r2, #0
  40832e:	701a      	strb	r2, [r3, #0]
  408330:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408334:	3314      	adds	r3, #20
  408336:	2200      	movs	r2, #0
  408338:	701a      	strb	r2, [r3, #0]
  40833a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40833e:	3315      	adds	r3, #21
  408340:	2200      	movs	r2, #0
  408342:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
  408344:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  408348:	2201      	movs	r2, #1
  40834a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  40834c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
  408350:	2b00      	cmp	r3, #0
  408352:	d050      	beq.n	4083f6 <f_open+0x2b6>
				dw = dj.fs->winsect;
  408354:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  408358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40835a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				res = remove_chain(dj.fs, cl);
  40835e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  408362:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
  408366:	4618      	mov	r0, r3
  408368:	4b18      	ldr	r3, [pc, #96]	; (4083cc <f_open+0x28c>)
  40836a:	4798      	blx	r3
  40836c:	4603      	mov	r3, r0
  40836e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				if (res == FR_OK) {
  408372:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  408376:	2b00      	cmp	r3, #0
  408378:	d13d      	bne.n	4083f6 <f_open+0x2b6>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  40837a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40837e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
  408382:	3a01      	subs	r2, #1
  408384:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
  408386:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40838a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
  40838e:	4618      	mov	r0, r3
  408390:	4b0f      	ldr	r3, [pc, #60]	; (4083d0 <f_open+0x290>)
  408392:	4798      	blx	r3
  408394:	4603      	mov	r3, r0
  408396:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  40839a:	e02c      	b.n	4083f6 <f_open+0x2b6>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  40839c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  4083a0:	2b00      	cmp	r3, #0
  4083a2:	d128      	bne.n	4083f6 <f_open+0x2b6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  4083a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4083a8:	330b      	adds	r3, #11
  4083aa:	781b      	ldrb	r3, [r3, #0]
  4083ac:	f003 0310 	and.w	r3, r3, #16
  4083b0:	2b00      	cmp	r3, #0
  4083b2:	d00f      	beq.n	4083d4 <f_open+0x294>
				res = FR_NO_FILE;
  4083b4:	2304      	movs	r3, #4
  4083b6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
  4083ba:	e01c      	b.n	4083f6 <f_open+0x2b6>
  4083bc:	00407b49 	.word	0x00407b49
  4083c0:	00407971 	.word	0x00407971
  4083c4:	00407371 	.word	0x00407371
  4083c8:	00406365 	.word	0x00406365
  4083cc:	00406a7d 	.word	0x00406a7d
  4083d0:	004064c5 	.word	0x004064c5
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  4083d4:	1dfb      	adds	r3, r7, #7
  4083d6:	781b      	ldrb	r3, [r3, #0]
  4083d8:	f003 0302 	and.w	r3, r3, #2
  4083dc:	2b00      	cmp	r3, #0
  4083de:	d00a      	beq.n	4083f6 <f_open+0x2b6>
  4083e0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  4083e4:	330b      	adds	r3, #11
  4083e6:	781b      	ldrb	r3, [r3, #0]
  4083e8:	f003 0301 	and.w	r3, r3, #1
  4083ec:	2b00      	cmp	r3, #0
  4083ee:	d002      	beq.n	4083f6 <f_open+0x2b6>
					res = FR_DENIED;
  4083f0:	2307      	movs	r3, #7
  4083f2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
	}
	if (res == FR_OK) {
  4083f6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  4083fa:	2b00      	cmp	r3, #0
  4083fc:	d118      	bne.n	408430 <f_open+0x2f0>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  4083fe:	1dfb      	adds	r3, r7, #7
  408400:	781b      	ldrb	r3, [r3, #0]
  408402:	f003 0308 	and.w	r3, r3, #8
  408406:	2b00      	cmp	r3, #0
  408408:	d005      	beq.n	408416 <f_open+0x2d6>
			mode |= FA__WRITTEN;
  40840a:	1dfb      	adds	r3, r7, #7
  40840c:	1dfa      	adds	r2, r7, #7
  40840e:	7812      	ldrb	r2, [r2, #0]
  408410:	f042 0220 	orr.w	r2, r2, #32
  408414:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  408416:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  40841a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40841c:	f107 030c 	add.w	r3, r7, #12
  408420:	681b      	ldr	r3, [r3, #0]
  408422:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
  408424:	f107 030c 	add.w	r3, r7, #12
  408428:	681b      	ldr	r3, [r3, #0]
  40842a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  40842e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  408430:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
  408434:	2b00      	cmp	r3, #0
  408436:	d158      	bne.n	4084ea <f_open+0x3aa>
		fp->flag = mode;					/* File access mode */
  408438:	f107 030c 	add.w	r3, r7, #12
  40843c:	681b      	ldr	r3, [r3, #0]
  40843e:	1dfa      	adds	r2, r7, #7
  408440:	7812      	ldrb	r2, [r2, #0]
  408442:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  408444:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408448:	3315      	adds	r3, #21
  40844a:	781b      	ldrb	r3, [r3, #0]
  40844c:	021b      	lsls	r3, r3, #8
  40844e:	b21a      	sxth	r2, r3
  408450:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408454:	3314      	adds	r3, #20
  408456:	781b      	ldrb	r3, [r3, #0]
  408458:	b21b      	sxth	r3, r3
  40845a:	4313      	orrs	r3, r2
  40845c:	b21b      	sxth	r3, r3
  40845e:	b29b      	uxth	r3, r3
  408460:	041b      	lsls	r3, r3, #16
  408462:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  408466:	321b      	adds	r2, #27
  408468:	7812      	ldrb	r2, [r2, #0]
  40846a:	0212      	lsls	r2, r2, #8
  40846c:	b211      	sxth	r1, r2
  40846e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  408472:	321a      	adds	r2, #26
  408474:	7812      	ldrb	r2, [r2, #0]
  408476:	b212      	sxth	r2, r2
  408478:	430a      	orrs	r2, r1
  40847a:	b212      	sxth	r2, r2
  40847c:	b292      	uxth	r2, r2
  40847e:	431a      	orrs	r2, r3
  408480:	f107 030c 	add.w	r3, r7, #12
  408484:	681b      	ldr	r3, [r3, #0]
  408486:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  408488:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  40848c:	331f      	adds	r3, #31
  40848e:	781b      	ldrb	r3, [r3, #0]
  408490:	061a      	lsls	r2, r3, #24
  408492:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
  408496:	331e      	adds	r3, #30
  408498:	781b      	ldrb	r3, [r3, #0]
  40849a:	041b      	lsls	r3, r3, #16
  40849c:	4313      	orrs	r3, r2
  40849e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  4084a2:	321d      	adds	r2, #29
  4084a4:	7812      	ldrb	r2, [r2, #0]
  4084a6:	0212      	lsls	r2, r2, #8
  4084a8:	4313      	orrs	r3, r2
  4084aa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
  4084ae:	321c      	adds	r2, #28
  4084b0:	7812      	ldrb	r2, [r2, #0]
  4084b2:	431a      	orrs	r2, r3
  4084b4:	f107 030c 	add.w	r3, r7, #12
  4084b8:	681b      	ldr	r3, [r3, #0]
  4084ba:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
  4084bc:	f107 030c 	add.w	r3, r7, #12
  4084c0:	681b      	ldr	r3, [r3, #0]
  4084c2:	2200      	movs	r2, #0
  4084c4:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
  4084c6:	f107 030c 	add.w	r3, r7, #12
  4084ca:	681b      	ldr	r3, [r3, #0]
  4084cc:	2200      	movs	r2, #0
  4084ce:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  4084d0:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
  4084d4:	f107 030c 	add.w	r3, r7, #12
  4084d8:	681b      	ldr	r3, [r3, #0]
  4084da:	601a      	str	r2, [r3, #0]
  4084dc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
  4084e0:	88da      	ldrh	r2, [r3, #6]
  4084e2:	f107 030c 	add.w	r3, r7, #12
  4084e6:	681b      	ldr	r3, [r3, #0]
  4084e8:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
  4084ea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
  4084ee:	4618      	mov	r0, r3
  4084f0:	f507 7714 	add.w	r7, r7, #592	; 0x250
  4084f4:	46bd      	mov	sp, r7
  4084f6:	bd80      	pop	{r7, pc}

004084f8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  4084f8:	b590      	push	{r4, r7, lr}
  4084fa:	b08b      	sub	sp, #44	; 0x2c
  4084fc:	af00      	add	r7, sp, #0
  4084fe:	60f8      	str	r0, [r7, #12]
  408500:	60b9      	str	r1, [r7, #8]
  408502:	607a      	str	r2, [r7, #4]
  408504:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
  408506:	68bb      	ldr	r3, [r7, #8]
  408508:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  40850a:	683b      	ldr	r3, [r7, #0]
  40850c:	2200      	movs	r2, #0
  40850e:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
  408510:	68fb      	ldr	r3, [r7, #12]
  408512:	681a      	ldr	r2, [r3, #0]
  408514:	68fb      	ldr	r3, [r7, #12]
  408516:	889b      	ldrh	r3, [r3, #4]
  408518:	4619      	mov	r1, r3
  40851a:	4610      	mov	r0, r2
  40851c:	4b8f      	ldr	r3, [pc, #572]	; (40875c <f_write+0x264>)
  40851e:	4798      	blx	r3
  408520:	4603      	mov	r3, r0
  408522:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  408524:	7dfb      	ldrb	r3, [r7, #23]
  408526:	2b00      	cmp	r3, #0
  408528:	d001      	beq.n	40852e <f_write+0x36>
  40852a:	7dfb      	ldrb	r3, [r7, #23]
  40852c:	e172      	b.n	408814 <f_write+0x31c>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  40852e:	68fb      	ldr	r3, [r7, #12]
  408530:	799b      	ldrb	r3, [r3, #6]
  408532:	b25b      	sxtb	r3, r3
  408534:	2b00      	cmp	r3, #0
  408536:	da01      	bge.n	40853c <f_write+0x44>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  408538:	2302      	movs	r3, #2
  40853a:	e16b      	b.n	408814 <f_write+0x31c>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  40853c:	68fb      	ldr	r3, [r7, #12]
  40853e:	799b      	ldrb	r3, [r3, #6]
  408540:	f003 0302 	and.w	r3, r3, #2
  408544:	2b00      	cmp	r3, #0
  408546:	d101      	bne.n	40854c <f_write+0x54>
		LEAVE_FF(fp->fs, FR_DENIED);
  408548:	2307      	movs	r3, #7
  40854a:	e163      	b.n	408814 <f_write+0x31c>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  40854c:	68fb      	ldr	r3, [r7, #12]
  40854e:	68da      	ldr	r2, [r3, #12]
  408550:	687b      	ldr	r3, [r7, #4]
  408552:	441a      	add	r2, r3
  408554:	68fb      	ldr	r3, [r7, #12]
  408556:	68db      	ldr	r3, [r3, #12]
  408558:	429a      	cmp	r2, r3
  40855a:	f080 8143 	bcs.w	4087e4 <f_write+0x2ec>
  40855e:	2300      	movs	r3, #0
  408560:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
  408562:	e13f      	b.n	4087e4 <f_write+0x2ec>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  408564:	68fb      	ldr	r3, [r7, #12]
  408566:	689b      	ldr	r3, [r3, #8]
  408568:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40856c:	2b00      	cmp	r3, #0
  40856e:	f040 8104 	bne.w	40877a <f_write+0x282>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  408572:	68fb      	ldr	r3, [r7, #12]
  408574:	689b      	ldr	r3, [r3, #8]
  408576:	0a5b      	lsrs	r3, r3, #9
  408578:	b2da      	uxtb	r2, r3
  40857a:	68fb      	ldr	r3, [r7, #12]
  40857c:	681b      	ldr	r3, [r3, #0]
  40857e:	789b      	ldrb	r3, [r3, #2]
  408580:	3b01      	subs	r3, #1
  408582:	b2db      	uxtb	r3, r3
  408584:	4013      	ands	r3, r2
  408586:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
  408588:	7dbb      	ldrb	r3, [r7, #22]
  40858a:	2b00      	cmp	r3, #0
  40858c:	d13d      	bne.n	40860a <f_write+0x112>
				if (fp->fptr == 0) {		/* On the top of the file? */
  40858e:	68fb      	ldr	r3, [r7, #12]
  408590:	689b      	ldr	r3, [r3, #8]
  408592:	2b00      	cmp	r3, #0
  408594:	d110      	bne.n	4085b8 <f_write+0xc0>
					clst = fp->sclust;		/* Follow from the origin */
  408596:	68fb      	ldr	r3, [r7, #12]
  408598:	691b      	ldr	r3, [r3, #16]
  40859a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
  40859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40859e:	2b00      	cmp	r3, #0
  4085a0:	d113      	bne.n	4085ca <f_write+0xd2>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  4085a2:	68fb      	ldr	r3, [r7, #12]
  4085a4:	681b      	ldr	r3, [r3, #0]
  4085a6:	2100      	movs	r1, #0
  4085a8:	4618      	mov	r0, r3
  4085aa:	4b6d      	ldr	r3, [pc, #436]	; (408760 <f_write+0x268>)
  4085ac:	4798      	blx	r3
  4085ae:	6278      	str	r0, [r7, #36]	; 0x24
  4085b0:	68fb      	ldr	r3, [r7, #12]
  4085b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4085b4:	611a      	str	r2, [r3, #16]
  4085b6:	e008      	b.n	4085ca <f_write+0xd2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  4085b8:	68fb      	ldr	r3, [r7, #12]
  4085ba:	681a      	ldr	r2, [r3, #0]
  4085bc:	68fb      	ldr	r3, [r7, #12]
  4085be:	695b      	ldr	r3, [r3, #20]
  4085c0:	4619      	mov	r1, r3
  4085c2:	4610      	mov	r0, r2
  4085c4:	4b66      	ldr	r3, [pc, #408]	; (408760 <f_write+0x268>)
  4085c6:	4798      	blx	r3
  4085c8:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  4085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4085cc:	2b00      	cmp	r3, #0
  4085ce:	f000 810e 	beq.w	4087ee <f_write+0x2f6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4085d4:	2b01      	cmp	r3, #1
  4085d6:	d108      	bne.n	4085ea <f_write+0xf2>
  4085d8:	68fb      	ldr	r3, [r7, #12]
  4085da:	799b      	ldrb	r3, [r3, #6]
  4085dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4085e0:	b2da      	uxtb	r2, r3
  4085e2:	68fb      	ldr	r3, [r7, #12]
  4085e4:	719a      	strb	r2, [r3, #6]
  4085e6:	2302      	movs	r3, #2
  4085e8:	e114      	b.n	408814 <f_write+0x31c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4085ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4085f0:	d108      	bne.n	408604 <f_write+0x10c>
  4085f2:	68fb      	ldr	r3, [r7, #12]
  4085f4:	799b      	ldrb	r3, [r3, #6]
  4085f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4085fa:	b2da      	uxtb	r2, r3
  4085fc:	68fb      	ldr	r3, [r7, #12]
  4085fe:	719a      	strb	r2, [r3, #6]
  408600:	2301      	movs	r3, #1
  408602:	e107      	b.n	408814 <f_write+0x31c>
				fp->clust = clst;			/* Update current cluster */
  408604:	68fb      	ldr	r3, [r7, #12]
  408606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  408608:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
  40860a:	68fb      	ldr	r3, [r7, #12]
  40860c:	799b      	ldrb	r3, [r3, #6]
  40860e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  408612:	2b00      	cmp	r3, #0
  408614:	d01d      	beq.n	408652 <f_write+0x15a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  408616:	68fb      	ldr	r3, [r7, #12]
  408618:	681b      	ldr	r3, [r3, #0]
  40861a:	7858      	ldrb	r0, [r3, #1]
  40861c:	68fb      	ldr	r3, [r7, #12]
  40861e:	f103 0124 	add.w	r1, r3, #36	; 0x24
  408622:	68fb      	ldr	r3, [r7, #12]
  408624:	699a      	ldr	r2, [r3, #24]
  408626:	2301      	movs	r3, #1
  408628:	4c4e      	ldr	r4, [pc, #312]	; (408764 <f_write+0x26c>)
  40862a:	47a0      	blx	r4
  40862c:	4603      	mov	r3, r0
  40862e:	2b00      	cmp	r3, #0
  408630:	d008      	beq.n	408644 <f_write+0x14c>
					ABORT(fp->fs, FR_DISK_ERR);
  408632:	68fb      	ldr	r3, [r7, #12]
  408634:	799b      	ldrb	r3, [r3, #6]
  408636:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40863a:	b2da      	uxtb	r2, r3
  40863c:	68fb      	ldr	r3, [r7, #12]
  40863e:	719a      	strb	r2, [r3, #6]
  408640:	2301      	movs	r3, #1
  408642:	e0e7      	b.n	408814 <f_write+0x31c>
				fp->flag &= ~FA__DIRTY;
  408644:	68fb      	ldr	r3, [r7, #12]
  408646:	799b      	ldrb	r3, [r3, #6]
  408648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40864c:	b2da      	uxtb	r2, r3
  40864e:	68fb      	ldr	r3, [r7, #12]
  408650:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  408652:	68fb      	ldr	r3, [r7, #12]
  408654:	681a      	ldr	r2, [r3, #0]
  408656:	68fb      	ldr	r3, [r7, #12]
  408658:	695b      	ldr	r3, [r3, #20]
  40865a:	4619      	mov	r1, r3
  40865c:	4610      	mov	r0, r2
  40865e:	4b42      	ldr	r3, [pc, #264]	; (408768 <f_write+0x270>)
  408660:	4798      	blx	r3
  408662:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  408664:	693b      	ldr	r3, [r7, #16]
  408666:	2b00      	cmp	r3, #0
  408668:	d108      	bne.n	40867c <f_write+0x184>
  40866a:	68fb      	ldr	r3, [r7, #12]
  40866c:	799b      	ldrb	r3, [r3, #6]
  40866e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408672:	b2da      	uxtb	r2, r3
  408674:	68fb      	ldr	r3, [r7, #12]
  408676:	719a      	strb	r2, [r3, #6]
  408678:	2302      	movs	r3, #2
  40867a:	e0cb      	b.n	408814 <f_write+0x31c>
			sect += csect;
  40867c:	7dbb      	ldrb	r3, [r7, #22]
  40867e:	693a      	ldr	r2, [r7, #16]
  408680:	4413      	add	r3, r2
  408682:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
  408684:	687b      	ldr	r3, [r7, #4]
  408686:	0a5b      	lsrs	r3, r3, #9
  408688:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
  40868a:	69fb      	ldr	r3, [r7, #28]
  40868c:	2b00      	cmp	r3, #0
  40868e:	d044      	beq.n	40871a <f_write+0x222>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  408690:	7dba      	ldrb	r2, [r7, #22]
  408692:	69fb      	ldr	r3, [r7, #28]
  408694:	4413      	add	r3, r2
  408696:	68fa      	ldr	r2, [r7, #12]
  408698:	6812      	ldr	r2, [r2, #0]
  40869a:	7892      	ldrb	r2, [r2, #2]
  40869c:	4293      	cmp	r3, r2
  40869e:	d906      	bls.n	4086ae <f_write+0x1b6>
					cc = fp->fs->csize - csect;
  4086a0:	68fb      	ldr	r3, [r7, #12]
  4086a2:	681b      	ldr	r3, [r3, #0]
  4086a4:	789b      	ldrb	r3, [r3, #2]
  4086a6:	461a      	mov	r2, r3
  4086a8:	7dbb      	ldrb	r3, [r7, #22]
  4086aa:	1ad3      	subs	r3, r2, r3
  4086ac:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  4086ae:	68fb      	ldr	r3, [r7, #12]
  4086b0:	681b      	ldr	r3, [r3, #0]
  4086b2:	7858      	ldrb	r0, [r3, #1]
  4086b4:	69fb      	ldr	r3, [r7, #28]
  4086b6:	b2db      	uxtb	r3, r3
  4086b8:	693a      	ldr	r2, [r7, #16]
  4086ba:	69b9      	ldr	r1, [r7, #24]
  4086bc:	4c29      	ldr	r4, [pc, #164]	; (408764 <f_write+0x26c>)
  4086be:	47a0      	blx	r4
  4086c0:	4603      	mov	r3, r0
  4086c2:	2b00      	cmp	r3, #0
  4086c4:	d008      	beq.n	4086d8 <f_write+0x1e0>
					ABORT(fp->fs, FR_DISK_ERR);
  4086c6:	68fb      	ldr	r3, [r7, #12]
  4086c8:	799b      	ldrb	r3, [r3, #6]
  4086ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4086ce:	b2da      	uxtb	r2, r3
  4086d0:	68fb      	ldr	r3, [r7, #12]
  4086d2:	719a      	strb	r2, [r3, #6]
  4086d4:	2301      	movs	r3, #1
  4086d6:	e09d      	b.n	408814 <f_write+0x31c>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  4086d8:	68fb      	ldr	r3, [r7, #12]
  4086da:	699a      	ldr	r2, [r3, #24]
  4086dc:	693b      	ldr	r3, [r7, #16]
  4086de:	1ad2      	subs	r2, r2, r3
  4086e0:	69fb      	ldr	r3, [r7, #28]
  4086e2:	429a      	cmp	r2, r3
  4086e4:	d215      	bcs.n	408712 <f_write+0x21a>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  4086e6:	68fb      	ldr	r3, [r7, #12]
  4086e8:	f103 0024 	add.w	r0, r3, #36	; 0x24
  4086ec:	68fb      	ldr	r3, [r7, #12]
  4086ee:	699a      	ldr	r2, [r3, #24]
  4086f0:	693b      	ldr	r3, [r7, #16]
  4086f2:	1ad3      	subs	r3, r2, r3
  4086f4:	025b      	lsls	r3, r3, #9
  4086f6:	69ba      	ldr	r2, [r7, #24]
  4086f8:	4413      	add	r3, r2
  4086fa:	f44f 7200 	mov.w	r2, #512	; 0x200
  4086fe:	4619      	mov	r1, r3
  408700:	4b1a      	ldr	r3, [pc, #104]	; (40876c <f_write+0x274>)
  408702:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
  408704:	68fb      	ldr	r3, [r7, #12]
  408706:	799b      	ldrb	r3, [r3, #6]
  408708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40870c:	b2da      	uxtb	r2, r3
  40870e:	68fb      	ldr	r3, [r7, #12]
  408710:	719a      	strb	r2, [r3, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  408712:	69fb      	ldr	r3, [r7, #28]
  408714:	025b      	lsls	r3, r3, #9
  408716:	623b      	str	r3, [r7, #32]
				continue;
  408718:	e050      	b.n	4087bc <f_write+0x2c4>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
  40871a:	68fb      	ldr	r3, [r7, #12]
  40871c:	699a      	ldr	r2, [r3, #24]
  40871e:	693b      	ldr	r3, [r7, #16]
  408720:	429a      	cmp	r2, r3
  408722:	d027      	beq.n	408774 <f_write+0x27c>
				if (fp->fptr < fp->fsize &&
  408724:	68fb      	ldr	r3, [r7, #12]
  408726:	689a      	ldr	r2, [r3, #8]
  408728:	68fb      	ldr	r3, [r7, #12]
  40872a:	68db      	ldr	r3, [r3, #12]
  40872c:	429a      	cmp	r2, r3
  40872e:	d221      	bcs.n	408774 <f_write+0x27c>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  408730:	68fb      	ldr	r3, [r7, #12]
  408732:	681b      	ldr	r3, [r3, #0]
  408734:	7858      	ldrb	r0, [r3, #1]
  408736:	68fb      	ldr	r3, [r7, #12]
  408738:	f103 0124 	add.w	r1, r3, #36	; 0x24
  40873c:	2301      	movs	r3, #1
  40873e:	693a      	ldr	r2, [r7, #16]
  408740:	4c0b      	ldr	r4, [pc, #44]	; (408770 <f_write+0x278>)
  408742:	47a0      	blx	r4
  408744:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
  408746:	2b00      	cmp	r3, #0
  408748:	d014      	beq.n	408774 <f_write+0x27c>
						ABORT(fp->fs, FR_DISK_ERR);
  40874a:	68fb      	ldr	r3, [r7, #12]
  40874c:	799b      	ldrb	r3, [r3, #6]
  40874e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408752:	b2da      	uxtb	r2, r3
  408754:	68fb      	ldr	r3, [r7, #12]
  408756:	719a      	strb	r2, [r3, #6]
  408758:	2301      	movs	r3, #1
  40875a:	e05b      	b.n	408814 <f_write+0x31c>
  40875c:	0040809d 	.word	0x0040809d
  408760:	00406b25 	.word	0x00406b25
  408764:	004061f5 	.word	0x004061f5
  408768:	004066d5 	.word	0x004066d5
  40876c:	004063d1 	.word	0x004063d1
  408770:	00406145 	.word	0x00406145
			}
#endif
			fp->dsect = sect;
  408774:	68fb      	ldr	r3, [r7, #12]
  408776:	693a      	ldr	r2, [r7, #16]
  408778:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  40877a:	68fb      	ldr	r3, [r7, #12]
  40877c:	689b      	ldr	r3, [r3, #8]
  40877e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  408782:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
  408786:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
  408788:	6a3a      	ldr	r2, [r7, #32]
  40878a:	687b      	ldr	r3, [r7, #4]
  40878c:	429a      	cmp	r2, r3
  40878e:	d901      	bls.n	408794 <f_write+0x29c>
  408790:	687b      	ldr	r3, [r7, #4]
  408792:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  408794:	68fb      	ldr	r3, [r7, #12]
  408796:	689b      	ldr	r3, [r3, #8]
  408798:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40879c:	3320      	adds	r3, #32
  40879e:	68fa      	ldr	r2, [r7, #12]
  4087a0:	4413      	add	r3, r2
  4087a2:	3304      	adds	r3, #4
  4087a4:	6a3a      	ldr	r2, [r7, #32]
  4087a6:	69b9      	ldr	r1, [r7, #24]
  4087a8:	4618      	mov	r0, r3
  4087aa:	4b1c      	ldr	r3, [pc, #112]	; (40881c <f_write+0x324>)
  4087ac:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
  4087ae:	68fb      	ldr	r3, [r7, #12]
  4087b0:	799b      	ldrb	r3, [r3, #6]
  4087b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4087b6:	b2da      	uxtb	r2, r3
  4087b8:	68fb      	ldr	r3, [r7, #12]
  4087ba:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  4087bc:	69ba      	ldr	r2, [r7, #24]
  4087be:	6a3b      	ldr	r3, [r7, #32]
  4087c0:	4413      	add	r3, r2
  4087c2:	61bb      	str	r3, [r7, #24]
  4087c4:	68fb      	ldr	r3, [r7, #12]
  4087c6:	689a      	ldr	r2, [r3, #8]
  4087c8:	6a3b      	ldr	r3, [r7, #32]
  4087ca:	441a      	add	r2, r3
  4087cc:	68fb      	ldr	r3, [r7, #12]
  4087ce:	609a      	str	r2, [r3, #8]
  4087d0:	683b      	ldr	r3, [r7, #0]
  4087d2:	681a      	ldr	r2, [r3, #0]
  4087d4:	6a3b      	ldr	r3, [r7, #32]
  4087d6:	441a      	add	r2, r3
  4087d8:	683b      	ldr	r3, [r7, #0]
  4087da:	601a      	str	r2, [r3, #0]
  4087dc:	687a      	ldr	r2, [r7, #4]
  4087de:	6a3b      	ldr	r3, [r7, #32]
  4087e0:	1ad3      	subs	r3, r2, r3
  4087e2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
  4087e4:	687b      	ldr	r3, [r7, #4]
  4087e6:	2b00      	cmp	r3, #0
  4087e8:	f47f aebc 	bne.w	408564 <f_write+0x6c>
  4087ec:	e000      	b.n	4087f0 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  4087ee:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  4087f0:	68fb      	ldr	r3, [r7, #12]
  4087f2:	689a      	ldr	r2, [r3, #8]
  4087f4:	68fb      	ldr	r3, [r7, #12]
  4087f6:	68db      	ldr	r3, [r3, #12]
  4087f8:	429a      	cmp	r2, r3
  4087fa:	d903      	bls.n	408804 <f_write+0x30c>
  4087fc:	68fb      	ldr	r3, [r7, #12]
  4087fe:	689a      	ldr	r2, [r3, #8]
  408800:	68fb      	ldr	r3, [r7, #12]
  408802:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  408804:	68fb      	ldr	r3, [r7, #12]
  408806:	799b      	ldrb	r3, [r3, #6]
  408808:	f043 0320 	orr.w	r3, r3, #32
  40880c:	b2da      	uxtb	r2, r3
  40880e:	68fb      	ldr	r3, [r7, #12]
  408810:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
  408812:	2300      	movs	r3, #0
}
  408814:	4618      	mov	r0, r3
  408816:	372c      	adds	r7, #44	; 0x2c
  408818:	46bd      	mov	sp, r7
  40881a:	bd90      	pop	{r4, r7, pc}
  40881c:	004063d1 	.word	0x004063d1

00408820 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  408820:	b590      	push	{r4, r7, lr}
  408822:	b087      	sub	sp, #28
  408824:	af00      	add	r7, sp, #0
  408826:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  408828:	687b      	ldr	r3, [r7, #4]
  40882a:	681a      	ldr	r2, [r3, #0]
  40882c:	687b      	ldr	r3, [r7, #4]
  40882e:	889b      	ldrh	r3, [r3, #4]
  408830:	4619      	mov	r1, r3
  408832:	4610      	mov	r0, r2
  408834:	4b5a      	ldr	r3, [pc, #360]	; (4089a0 <f_sync+0x180>)
  408836:	4798      	blx	r3
  408838:	4603      	mov	r3, r0
  40883a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
  40883c:	7dfb      	ldrb	r3, [r7, #23]
  40883e:	2b00      	cmp	r3, #0
  408840:	f040 80a8 	bne.w	408994 <f_sync+0x174>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  408844:	687b      	ldr	r3, [r7, #4]
  408846:	799b      	ldrb	r3, [r3, #6]
  408848:	f003 0320 	and.w	r3, r3, #32
  40884c:	2b00      	cmp	r3, #0
  40884e:	f000 80a1 	beq.w	408994 <f_sync+0x174>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  408852:	687b      	ldr	r3, [r7, #4]
  408854:	799b      	ldrb	r3, [r3, #6]
  408856:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40885a:	2b00      	cmp	r3, #0
  40885c:	d016      	beq.n	40888c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  40885e:	687b      	ldr	r3, [r7, #4]
  408860:	681b      	ldr	r3, [r3, #0]
  408862:	7858      	ldrb	r0, [r3, #1]
  408864:	687b      	ldr	r3, [r7, #4]
  408866:	f103 0124 	add.w	r1, r3, #36	; 0x24
  40886a:	687b      	ldr	r3, [r7, #4]
  40886c:	699a      	ldr	r2, [r3, #24]
  40886e:	2301      	movs	r3, #1
  408870:	4c4c      	ldr	r4, [pc, #304]	; (4089a4 <f_sync+0x184>)
  408872:	47a0      	blx	r4
  408874:	4603      	mov	r3, r0
  408876:	2b00      	cmp	r3, #0
  408878:	d001      	beq.n	40887e <f_sync+0x5e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  40887a:	2301      	movs	r3, #1
  40887c:	e08b      	b.n	408996 <f_sync+0x176>
				fp->flag &= ~FA__DIRTY;
  40887e:	687b      	ldr	r3, [r7, #4]
  408880:	799b      	ldrb	r3, [r3, #6]
  408882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  408886:	b2da      	uxtb	r2, r3
  408888:	687b      	ldr	r3, [r7, #4]
  40888a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  40888c:	687b      	ldr	r3, [r7, #4]
  40888e:	681a      	ldr	r2, [r3, #0]
  408890:	687b      	ldr	r3, [r7, #4]
  408892:	69db      	ldr	r3, [r3, #28]
  408894:	4619      	mov	r1, r3
  408896:	4610      	mov	r0, r2
  408898:	4b43      	ldr	r3, [pc, #268]	; (4089a8 <f_sync+0x188>)
  40889a:	4798      	blx	r3
  40889c:	4603      	mov	r3, r0
  40889e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
  4088a0:	7dfb      	ldrb	r3, [r7, #23]
  4088a2:	2b00      	cmp	r3, #0
  4088a4:	d176      	bne.n	408994 <f_sync+0x174>
				dir = fp->dir_ptr;
  4088a6:	687b      	ldr	r3, [r7, #4]
  4088a8:	6a1b      	ldr	r3, [r3, #32]
  4088aa:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  4088ac:	693b      	ldr	r3, [r7, #16]
  4088ae:	330b      	adds	r3, #11
  4088b0:	693a      	ldr	r2, [r7, #16]
  4088b2:	320b      	adds	r2, #11
  4088b4:	7812      	ldrb	r2, [r2, #0]
  4088b6:	f042 0220 	orr.w	r2, r2, #32
  4088ba:	b2d2      	uxtb	r2, r2
  4088bc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  4088be:	693b      	ldr	r3, [r7, #16]
  4088c0:	331c      	adds	r3, #28
  4088c2:	687a      	ldr	r2, [r7, #4]
  4088c4:	68d2      	ldr	r2, [r2, #12]
  4088c6:	b2d2      	uxtb	r2, r2
  4088c8:	701a      	strb	r2, [r3, #0]
  4088ca:	693b      	ldr	r3, [r7, #16]
  4088cc:	331d      	adds	r3, #29
  4088ce:	687a      	ldr	r2, [r7, #4]
  4088d0:	68d2      	ldr	r2, [r2, #12]
  4088d2:	b292      	uxth	r2, r2
  4088d4:	0a12      	lsrs	r2, r2, #8
  4088d6:	b292      	uxth	r2, r2
  4088d8:	b2d2      	uxtb	r2, r2
  4088da:	701a      	strb	r2, [r3, #0]
  4088dc:	693b      	ldr	r3, [r7, #16]
  4088de:	331e      	adds	r3, #30
  4088e0:	687a      	ldr	r2, [r7, #4]
  4088e2:	68d2      	ldr	r2, [r2, #12]
  4088e4:	0c12      	lsrs	r2, r2, #16
  4088e6:	b2d2      	uxtb	r2, r2
  4088e8:	701a      	strb	r2, [r3, #0]
  4088ea:	693b      	ldr	r3, [r7, #16]
  4088ec:	331f      	adds	r3, #31
  4088ee:	687a      	ldr	r2, [r7, #4]
  4088f0:	68d2      	ldr	r2, [r2, #12]
  4088f2:	0e12      	lsrs	r2, r2, #24
  4088f4:	b2d2      	uxtb	r2, r2
  4088f6:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  4088f8:	693b      	ldr	r3, [r7, #16]
  4088fa:	331a      	adds	r3, #26
  4088fc:	687a      	ldr	r2, [r7, #4]
  4088fe:	6912      	ldr	r2, [r2, #16]
  408900:	b2d2      	uxtb	r2, r2
  408902:	701a      	strb	r2, [r3, #0]
  408904:	693b      	ldr	r3, [r7, #16]
  408906:	331b      	adds	r3, #27
  408908:	687a      	ldr	r2, [r7, #4]
  40890a:	6912      	ldr	r2, [r2, #16]
  40890c:	b292      	uxth	r2, r2
  40890e:	0a12      	lsrs	r2, r2, #8
  408910:	b292      	uxth	r2, r2
  408912:	b2d2      	uxtb	r2, r2
  408914:	701a      	strb	r2, [r3, #0]
  408916:	693b      	ldr	r3, [r7, #16]
  408918:	3314      	adds	r3, #20
  40891a:	687a      	ldr	r2, [r7, #4]
  40891c:	6912      	ldr	r2, [r2, #16]
  40891e:	0c12      	lsrs	r2, r2, #16
  408920:	b2d2      	uxtb	r2, r2
  408922:	701a      	strb	r2, [r3, #0]
  408924:	693b      	ldr	r3, [r7, #16]
  408926:	3315      	adds	r3, #21
  408928:	687a      	ldr	r2, [r7, #4]
  40892a:	6912      	ldr	r2, [r2, #16]
  40892c:	0c12      	lsrs	r2, r2, #16
  40892e:	b292      	uxth	r2, r2
  408930:	0a12      	lsrs	r2, r2, #8
  408932:	b292      	uxth	r2, r2
  408934:	b2d2      	uxtb	r2, r2
  408936:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();						/* Update updated time */
  408938:	4b1c      	ldr	r3, [pc, #112]	; (4089ac <f_sync+0x18c>)
  40893a:	4798      	blx	r3
  40893c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
  40893e:	693b      	ldr	r3, [r7, #16]
  408940:	3316      	adds	r3, #22
  408942:	68fa      	ldr	r2, [r7, #12]
  408944:	b2d2      	uxtb	r2, r2
  408946:	701a      	strb	r2, [r3, #0]
  408948:	693b      	ldr	r3, [r7, #16]
  40894a:	3317      	adds	r3, #23
  40894c:	68fa      	ldr	r2, [r7, #12]
  40894e:	b292      	uxth	r2, r2
  408950:	0a12      	lsrs	r2, r2, #8
  408952:	b292      	uxth	r2, r2
  408954:	b2d2      	uxtb	r2, r2
  408956:	701a      	strb	r2, [r3, #0]
  408958:	693b      	ldr	r3, [r7, #16]
  40895a:	3318      	adds	r3, #24
  40895c:	68fa      	ldr	r2, [r7, #12]
  40895e:	0c12      	lsrs	r2, r2, #16
  408960:	b2d2      	uxtb	r2, r2
  408962:	701a      	strb	r2, [r3, #0]
  408964:	693b      	ldr	r3, [r7, #16]
  408966:	3319      	adds	r3, #25
  408968:	68fa      	ldr	r2, [r7, #12]
  40896a:	0e12      	lsrs	r2, r2, #24
  40896c:	b2d2      	uxtb	r2, r2
  40896e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
  408970:	687b      	ldr	r3, [r7, #4]
  408972:	799b      	ldrb	r3, [r3, #6]
  408974:	f023 0320 	bic.w	r3, r3, #32
  408978:	b2da      	uxtb	r2, r3
  40897a:	687b      	ldr	r3, [r7, #4]
  40897c:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
  40897e:	687b      	ldr	r3, [r7, #4]
  408980:	681b      	ldr	r3, [r3, #0]
  408982:	2201      	movs	r2, #1
  408984:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  408986:	687b      	ldr	r3, [r7, #4]
  408988:	681b      	ldr	r3, [r3, #0]
  40898a:	4618      	mov	r0, r3
  40898c:	4b08      	ldr	r3, [pc, #32]	; (4089b0 <f_sync+0x190>)
  40898e:	4798      	blx	r3
  408990:	4603      	mov	r3, r0
  408992:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
  408994:	7dfb      	ldrb	r3, [r7, #23]
}
  408996:	4618      	mov	r0, r3
  408998:	371c      	adds	r7, #28
  40899a:	46bd      	mov	sp, r7
  40899c:	bd90      	pop	{r4, r7, pc}
  40899e:	bf00      	nop
  4089a0:	0040809d 	.word	0x0040809d
  4089a4:	004061f5 	.word	0x004061f5
  4089a8:	004064c5 	.word	0x004064c5
  4089ac:	00406365 	.word	0x00406365
  4089b0:	00406581 	.word	0x00406581

004089b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  4089b4:	b580      	push	{r7, lr}
  4089b6:	b084      	sub	sp, #16
  4089b8:	af00      	add	r7, sp, #0
  4089ba:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  4089bc:	6878      	ldr	r0, [r7, #4]
  4089be:	4b07      	ldr	r3, [pc, #28]	; (4089dc <f_close+0x28>)
  4089c0:	4798      	blx	r3
  4089c2:	4603      	mov	r3, r0
  4089c4:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  4089c6:	7bfb      	ldrb	r3, [r7, #15]
  4089c8:	2b00      	cmp	r3, #0
  4089ca:	d102      	bne.n	4089d2 <f_close+0x1e>
  4089cc:	687b      	ldr	r3, [r7, #4]
  4089ce:	2200      	movs	r2, #0
  4089d0:	601a      	str	r2, [r3, #0]
	return res;
  4089d2:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
  4089d4:	4618      	mov	r0, r3
  4089d6:	3710      	adds	r7, #16
  4089d8:	46bd      	mov	sp, r7
  4089da:	bd80      	pop	{r7, pc}
  4089dc:	00408821 	.word	0x00408821

004089e0 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
  4089e0:	b590      	push	{r4, r7, lr}
  4089e2:	b089      	sub	sp, #36	; 0x24
  4089e4:	af00      	add	r7, sp, #0
  4089e6:	6078      	str	r0, [r7, #4]
  4089e8:	6039      	str	r1, [r7, #0]
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  4089ea:	687b      	ldr	r3, [r7, #4]
  4089ec:	681a      	ldr	r2, [r3, #0]
  4089ee:	687b      	ldr	r3, [r7, #4]
  4089f0:	889b      	ldrh	r3, [r3, #4]
  4089f2:	4619      	mov	r1, r3
  4089f4:	4610      	mov	r0, r2
  4089f6:	4b98      	ldr	r3, [pc, #608]	; (408c58 <f_lseek+0x278>)
  4089f8:	4798      	blx	r3
  4089fa:	4603      	mov	r3, r0
  4089fc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  4089fe:	7dfb      	ldrb	r3, [r7, #23]
  408a00:	2b00      	cmp	r3, #0
  408a02:	d001      	beq.n	408a08 <f_lseek+0x28>
  408a04:	7dfb      	ldrb	r3, [r7, #23]
  408a06:	e148      	b.n	408c9a <f_lseek+0x2ba>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
  408a08:	687b      	ldr	r3, [r7, #4]
  408a0a:	799b      	ldrb	r3, [r3, #6]
  408a0c:	b25b      	sxtb	r3, r3
  408a0e:	2b00      	cmp	r3, #0
  408a10:	da01      	bge.n	408a16 <f_lseek+0x36>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  408a12:	2302      	movs	r3, #2
  408a14:	e141      	b.n	408c9a <f_lseek+0x2ba>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
  408a16:	687b      	ldr	r3, [r7, #4]
  408a18:	68da      	ldr	r2, [r3, #12]
  408a1a:	683b      	ldr	r3, [r7, #0]
  408a1c:	429a      	cmp	r2, r3
  408a1e:	d208      	bcs.n	408a32 <f_lseek+0x52>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
  408a20:	687b      	ldr	r3, [r7, #4]
  408a22:	799b      	ldrb	r3, [r3, #6]
  408a24:	f003 0302 	and.w	r3, r3, #2
  408a28:	2b00      	cmp	r3, #0
  408a2a:	d102      	bne.n	408a32 <f_lseek+0x52>
#endif
			) ofs = fp->fsize;
  408a2c:	687b      	ldr	r3, [r7, #4]
  408a2e:	68db      	ldr	r3, [r3, #12]
  408a30:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
  408a32:	687b      	ldr	r3, [r7, #4]
  408a34:	689b      	ldr	r3, [r3, #8]
  408a36:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
  408a38:	2300      	movs	r3, #0
  408a3a:	61bb      	str	r3, [r7, #24]
  408a3c:	687b      	ldr	r3, [r7, #4]
  408a3e:	69ba      	ldr	r2, [r7, #24]
  408a40:	609a      	str	r2, [r3, #8]
		if (ofs) {
  408a42:	683b      	ldr	r3, [r7, #0]
  408a44:	2b00      	cmp	r3, #0
  408a46:	f000 80c1 	beq.w	408bcc <f_lseek+0x1ec>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
  408a4a:	687b      	ldr	r3, [r7, #4]
  408a4c:	681b      	ldr	r3, [r3, #0]
  408a4e:	789b      	ldrb	r3, [r3, #2]
  408a50:	025b      	lsls	r3, r3, #9
  408a52:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
  408a54:	693b      	ldr	r3, [r7, #16]
  408a56:	2b00      	cmp	r3, #0
  408a58:	d01b      	beq.n	408a92 <f_lseek+0xb2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
  408a5a:	683b      	ldr	r3, [r7, #0]
  408a5c:	1e5a      	subs	r2, r3, #1
  408a5e:	68fb      	ldr	r3, [r7, #12]
  408a60:	fbb2 f2f3 	udiv	r2, r2, r3
  408a64:	693b      	ldr	r3, [r7, #16]
  408a66:	1e59      	subs	r1, r3, #1
  408a68:	68fb      	ldr	r3, [r7, #12]
  408a6a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
  408a6e:	429a      	cmp	r2, r3
  408a70:	d30f      	bcc.n	408a92 <f_lseek+0xb2>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
  408a72:	693b      	ldr	r3, [r7, #16]
  408a74:	1e5a      	subs	r2, r3, #1
  408a76:	68fb      	ldr	r3, [r7, #12]
  408a78:	425b      	negs	r3, r3
  408a7a:	401a      	ands	r2, r3
  408a7c:	687b      	ldr	r3, [r7, #4]
  408a7e:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
  408a80:	687b      	ldr	r3, [r7, #4]
  408a82:	689b      	ldr	r3, [r3, #8]
  408a84:	683a      	ldr	r2, [r7, #0]
  408a86:	1ad3      	subs	r3, r2, r3
  408a88:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
  408a8a:	687b      	ldr	r3, [r7, #4]
  408a8c:	695b      	ldr	r3, [r3, #20]
  408a8e:	61fb      	str	r3, [r7, #28]
  408a90:	e02b      	b.n	408aea <f_lseek+0x10a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
  408a92:	687b      	ldr	r3, [r7, #4]
  408a94:	691b      	ldr	r3, [r3, #16]
  408a96:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
  408a98:	69fb      	ldr	r3, [r7, #28]
  408a9a:	2b00      	cmp	r3, #0
  408a9c:	d122      	bne.n	408ae4 <f_lseek+0x104>
					clst = create_chain(fp->fs, 0);
  408a9e:	687b      	ldr	r3, [r7, #4]
  408aa0:	681b      	ldr	r3, [r3, #0]
  408aa2:	2100      	movs	r1, #0
  408aa4:	4618      	mov	r0, r3
  408aa6:	4b6d      	ldr	r3, [pc, #436]	; (408c5c <f_lseek+0x27c>)
  408aa8:	4798      	blx	r3
  408aaa:	61f8      	str	r0, [r7, #28]
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  408aac:	69fb      	ldr	r3, [r7, #28]
  408aae:	2b01      	cmp	r3, #1
  408ab0:	d108      	bne.n	408ac4 <f_lseek+0xe4>
  408ab2:	687b      	ldr	r3, [r7, #4]
  408ab4:	799b      	ldrb	r3, [r3, #6]
  408ab6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408aba:	b2da      	uxtb	r2, r3
  408abc:	687b      	ldr	r3, [r7, #4]
  408abe:	719a      	strb	r2, [r3, #6]
  408ac0:	2302      	movs	r3, #2
  408ac2:	e0ea      	b.n	408c9a <f_lseek+0x2ba>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  408ac4:	69fb      	ldr	r3, [r7, #28]
  408ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
  408aca:	d108      	bne.n	408ade <f_lseek+0xfe>
  408acc:	687b      	ldr	r3, [r7, #4]
  408ace:	799b      	ldrb	r3, [r3, #6]
  408ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408ad4:	b2da      	uxtb	r2, r3
  408ad6:	687b      	ldr	r3, [r7, #4]
  408ad8:	719a      	strb	r2, [r3, #6]
  408ada:	2301      	movs	r3, #1
  408adc:	e0dd      	b.n	408c9a <f_lseek+0x2ba>
					fp->sclust = clst;
  408ade:	687b      	ldr	r3, [r7, #4]
  408ae0:	69fa      	ldr	r2, [r7, #28]
  408ae2:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
  408ae4:	687b      	ldr	r3, [r7, #4]
  408ae6:	69fa      	ldr	r2, [r7, #28]
  408ae8:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
  408aea:	69fb      	ldr	r3, [r7, #28]
  408aec:	2b00      	cmp	r3, #0
  408aee:	d06d      	beq.n	408bcc <f_lseek+0x1ec>
				while (ofs > bcs) {						/* Cluster following loop */
  408af0:	e045      	b.n	408b7e <f_lseek+0x19e>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
  408af2:	687b      	ldr	r3, [r7, #4]
  408af4:	799b      	ldrb	r3, [r3, #6]
  408af6:	f003 0302 	and.w	r3, r3, #2
  408afa:	2b00      	cmp	r3, #0
  408afc:	d00c      	beq.n	408b18 <f_lseek+0x138>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
  408afe:	687b      	ldr	r3, [r7, #4]
  408b00:	681b      	ldr	r3, [r3, #0]
  408b02:	69f9      	ldr	r1, [r7, #28]
  408b04:	4618      	mov	r0, r3
  408b06:	4b55      	ldr	r3, [pc, #340]	; (408c5c <f_lseek+0x27c>)
  408b08:	4798      	blx	r3
  408b0a:	61f8      	str	r0, [r7, #28]
						if (clst == 0) {				/* When disk gets full, clip file size */
  408b0c:	69fb      	ldr	r3, [r7, #28]
  408b0e:	2b00      	cmp	r3, #0
  408b10:	d109      	bne.n	408b26 <f_lseek+0x146>
							ofs = bcs; break;
  408b12:	68fb      	ldr	r3, [r7, #12]
  408b14:	603b      	str	r3, [r7, #0]
  408b16:	e036      	b.n	408b86 <f_lseek+0x1a6>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
  408b18:	687b      	ldr	r3, [r7, #4]
  408b1a:	681b      	ldr	r3, [r3, #0]
  408b1c:	69f9      	ldr	r1, [r7, #28]
  408b1e:	4618      	mov	r0, r3
  408b20:	4b4f      	ldr	r3, [pc, #316]	; (408c60 <f_lseek+0x280>)
  408b22:	4798      	blx	r3
  408b24:	61f8      	str	r0, [r7, #28]
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  408b26:	69fb      	ldr	r3, [r7, #28]
  408b28:	f1b3 3fff 	cmp.w	r3, #4294967295
  408b2c:	d108      	bne.n	408b40 <f_lseek+0x160>
  408b2e:	687b      	ldr	r3, [r7, #4]
  408b30:	799b      	ldrb	r3, [r3, #6]
  408b32:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408b36:	b2da      	uxtb	r2, r3
  408b38:	687b      	ldr	r3, [r7, #4]
  408b3a:	719a      	strb	r2, [r3, #6]
  408b3c:	2301      	movs	r3, #1
  408b3e:	e0ac      	b.n	408c9a <f_lseek+0x2ba>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  408b40:	69fb      	ldr	r3, [r7, #28]
  408b42:	2b01      	cmp	r3, #1
  408b44:	d905      	bls.n	408b52 <f_lseek+0x172>
  408b46:	687b      	ldr	r3, [r7, #4]
  408b48:	681b      	ldr	r3, [r3, #0]
  408b4a:	699a      	ldr	r2, [r3, #24]
  408b4c:	69fb      	ldr	r3, [r7, #28]
  408b4e:	429a      	cmp	r2, r3
  408b50:	d808      	bhi.n	408b64 <f_lseek+0x184>
  408b52:	687b      	ldr	r3, [r7, #4]
  408b54:	799b      	ldrb	r3, [r3, #6]
  408b56:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408b5a:	b2da      	uxtb	r2, r3
  408b5c:	687b      	ldr	r3, [r7, #4]
  408b5e:	719a      	strb	r2, [r3, #6]
  408b60:	2302      	movs	r3, #2
  408b62:	e09a      	b.n	408c9a <f_lseek+0x2ba>
					fp->clust = clst;
  408b64:	687b      	ldr	r3, [r7, #4]
  408b66:	69fa      	ldr	r2, [r7, #28]
  408b68:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
  408b6a:	687b      	ldr	r3, [r7, #4]
  408b6c:	689a      	ldr	r2, [r3, #8]
  408b6e:	68fb      	ldr	r3, [r7, #12]
  408b70:	441a      	add	r2, r3
  408b72:	687b      	ldr	r3, [r7, #4]
  408b74:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
  408b76:	683a      	ldr	r2, [r7, #0]
  408b78:	68fb      	ldr	r3, [r7, #12]
  408b7a:	1ad3      	subs	r3, r2, r3
  408b7c:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
  408b7e:	683a      	ldr	r2, [r7, #0]
  408b80:	68fb      	ldr	r3, [r7, #12]
  408b82:	429a      	cmp	r2, r3
  408b84:	d8b5      	bhi.n	408af2 <f_lseek+0x112>
				}
				fp->fptr += ofs;
  408b86:	687b      	ldr	r3, [r7, #4]
  408b88:	689a      	ldr	r2, [r3, #8]
  408b8a:	683b      	ldr	r3, [r7, #0]
  408b8c:	441a      	add	r2, r3
  408b8e:	687b      	ldr	r3, [r7, #4]
  408b90:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
  408b92:	683b      	ldr	r3, [r7, #0]
  408b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
  408b98:	2b00      	cmp	r3, #0
  408b9a:	d017      	beq.n	408bcc <f_lseek+0x1ec>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
  408b9c:	687b      	ldr	r3, [r7, #4]
  408b9e:	681b      	ldr	r3, [r3, #0]
  408ba0:	69f9      	ldr	r1, [r7, #28]
  408ba2:	4618      	mov	r0, r3
  408ba4:	4b2f      	ldr	r3, [pc, #188]	; (408c64 <f_lseek+0x284>)
  408ba6:	4798      	blx	r3
  408ba8:	61b8      	str	r0, [r7, #24]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
  408baa:	69bb      	ldr	r3, [r7, #24]
  408bac:	2b00      	cmp	r3, #0
  408bae:	d108      	bne.n	408bc2 <f_lseek+0x1e2>
  408bb0:	687b      	ldr	r3, [r7, #4]
  408bb2:	799b      	ldrb	r3, [r3, #6]
  408bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408bb8:	b2da      	uxtb	r2, r3
  408bba:	687b      	ldr	r3, [r7, #4]
  408bbc:	719a      	strb	r2, [r3, #6]
  408bbe:	2302      	movs	r3, #2
  408bc0:	e06b      	b.n	408c9a <f_lseek+0x2ba>
					nsect += ofs / SS(fp->fs);
  408bc2:	683b      	ldr	r3, [r7, #0]
  408bc4:	0a5b      	lsrs	r3, r3, #9
  408bc6:	69ba      	ldr	r2, [r7, #24]
  408bc8:	4413      	add	r3, r2
  408bca:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
  408bcc:	687b      	ldr	r3, [r7, #4]
  408bce:	689b      	ldr	r3, [r3, #8]
  408bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  408bd4:	2b00      	cmp	r3, #0
  408bd6:	d04e      	beq.n	408c76 <f_lseek+0x296>
  408bd8:	687b      	ldr	r3, [r7, #4]
  408bda:	699a      	ldr	r2, [r3, #24]
  408bdc:	69bb      	ldr	r3, [r7, #24]
  408bde:	429a      	cmp	r2, r3
  408be0:	d049      	beq.n	408c76 <f_lseek+0x296>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
  408be2:	687b      	ldr	r3, [r7, #4]
  408be4:	799b      	ldrb	r3, [r3, #6]
  408be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  408bea:	2b00      	cmp	r3, #0
  408bec:	d01d      	beq.n	408c2a <f_lseek+0x24a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  408bee:	687b      	ldr	r3, [r7, #4]
  408bf0:	681b      	ldr	r3, [r3, #0]
  408bf2:	7858      	ldrb	r0, [r3, #1]
  408bf4:	687b      	ldr	r3, [r7, #4]
  408bf6:	f103 0124 	add.w	r1, r3, #36	; 0x24
  408bfa:	687b      	ldr	r3, [r7, #4]
  408bfc:	699a      	ldr	r2, [r3, #24]
  408bfe:	2301      	movs	r3, #1
  408c00:	4c19      	ldr	r4, [pc, #100]	; (408c68 <f_lseek+0x288>)
  408c02:	47a0      	blx	r4
  408c04:	4603      	mov	r3, r0
  408c06:	2b00      	cmp	r3, #0
  408c08:	d008      	beq.n	408c1c <f_lseek+0x23c>
					ABORT(fp->fs, FR_DISK_ERR);
  408c0a:	687b      	ldr	r3, [r7, #4]
  408c0c:	799b      	ldrb	r3, [r3, #6]
  408c0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408c12:	b2da      	uxtb	r2, r3
  408c14:	687b      	ldr	r3, [r7, #4]
  408c16:	719a      	strb	r2, [r3, #6]
  408c18:	2301      	movs	r3, #1
  408c1a:	e03e      	b.n	408c9a <f_lseek+0x2ba>
				fp->flag &= ~FA__DIRTY;
  408c1c:	687b      	ldr	r3, [r7, #4]
  408c1e:	799b      	ldrb	r3, [r3, #6]
  408c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  408c24:	b2da      	uxtb	r2, r3
  408c26:	687b      	ldr	r3, [r7, #4]
  408c28:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
  408c2a:	687b      	ldr	r3, [r7, #4]
  408c2c:	681b      	ldr	r3, [r3, #0]
  408c2e:	7858      	ldrb	r0, [r3, #1]
  408c30:	687b      	ldr	r3, [r7, #4]
  408c32:	f103 0124 	add.w	r1, r3, #36	; 0x24
  408c36:	2301      	movs	r3, #1
  408c38:	69ba      	ldr	r2, [r7, #24]
  408c3a:	4c0c      	ldr	r4, [pc, #48]	; (408c6c <f_lseek+0x28c>)
  408c3c:	47a0      	blx	r4
  408c3e:	4603      	mov	r3, r0
  408c40:	2b00      	cmp	r3, #0
  408c42:	d015      	beq.n	408c70 <f_lseek+0x290>
				ABORT(fp->fs, FR_DISK_ERR);
  408c44:	687b      	ldr	r3, [r7, #4]
  408c46:	799b      	ldrb	r3, [r3, #6]
  408c48:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408c4c:	b2da      	uxtb	r2, r3
  408c4e:	687b      	ldr	r3, [r7, #4]
  408c50:	719a      	strb	r2, [r3, #6]
  408c52:	2301      	movs	r3, #1
  408c54:	e021      	b.n	408c9a <f_lseek+0x2ba>
  408c56:	bf00      	nop
  408c58:	0040809d 	.word	0x0040809d
  408c5c:	00406b25 	.word	0x00406b25
  408c60:	00406715 	.word	0x00406715
  408c64:	004066d5 	.word	0x004066d5
  408c68:	004061f5 	.word	0x004061f5
  408c6c:	00406145 	.word	0x00406145
#endif
			fp->dsect = nsect;
  408c70:	687b      	ldr	r3, [r7, #4]
  408c72:	69ba      	ldr	r2, [r7, #24]
  408c74:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
  408c76:	687b      	ldr	r3, [r7, #4]
  408c78:	689a      	ldr	r2, [r3, #8]
  408c7a:	687b      	ldr	r3, [r7, #4]
  408c7c:	68db      	ldr	r3, [r3, #12]
  408c7e:	429a      	cmp	r2, r3
  408c80:	d90a      	bls.n	408c98 <f_lseek+0x2b8>
			fp->fsize = fp->fptr;
  408c82:	687b      	ldr	r3, [r7, #4]
  408c84:	689a      	ldr	r2, [r3, #8]
  408c86:	687b      	ldr	r3, [r7, #4]
  408c88:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
  408c8a:	687b      	ldr	r3, [r7, #4]
  408c8c:	799b      	ldrb	r3, [r3, #6]
  408c8e:	f043 0320 	orr.w	r3, r3, #32
  408c92:	b2da      	uxtb	r2, r3
  408c94:	687b      	ldr	r3, [r7, #4]
  408c96:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
  408c98:	7dfb      	ldrb	r3, [r7, #23]
}
  408c9a:	4618      	mov	r0, r3
  408c9c:	3724      	adds	r7, #36	; 0x24
  408c9e:	46bd      	mov	sp, r7
  408ca0:	bd90      	pop	{r4, r7, pc}
  408ca2:	bf00      	nop

00408ca4 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  408ca4:	b590      	push	{r4, r7, lr}
  408ca6:	b087      	sub	sp, #28
  408ca8:	af00      	add	r7, sp, #0
  408caa:	4603      	mov	r3, r0
  408cac:	6039      	str	r1, [r7, #0]
  408cae:	71fb      	strb	r3, [r7, #7]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  408cb0:	79fb      	ldrb	r3, [r7, #7]
  408cb2:	733b      	strb	r3, [r7, #12]
	btw = 1;
  408cb4:	2301      	movs	r3, #1
  408cb6:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  408cb8:	f107 0310 	add.w	r3, r7, #16
  408cbc:	f107 010c 	add.w	r1, r7, #12
  408cc0:	697a      	ldr	r2, [r7, #20]
  408cc2:	6838      	ldr	r0, [r7, #0]
  408cc4:	4c06      	ldr	r4, [pc, #24]	; (408ce0 <f_putc+0x3c>)
  408cc6:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  408cc8:	693a      	ldr	r2, [r7, #16]
  408cca:	697b      	ldr	r3, [r7, #20]
  408ccc:	429a      	cmp	r2, r3
  408cce:	d101      	bne.n	408cd4 <f_putc+0x30>
  408cd0:	2301      	movs	r3, #1
  408cd2:	e001      	b.n	408cd8 <f_putc+0x34>
  408cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
  408cd8:	4618      	mov	r0, r3
  408cda:	371c      	adds	r7, #28
  408cdc:	46bd      	mov	sp, r7
  408cde:	bd90      	pop	{r4, r7, pc}
  408ce0:	004084f9 	.word	0x004084f9

00408ce4 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  408ce4:	b580      	push	{r7, lr}
  408ce6:	b084      	sub	sp, #16
  408ce8:	af00      	add	r7, sp, #0
  408cea:	6078      	str	r0, [r7, #4]
  408cec:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
  408cee:	2300      	movs	r3, #0
  408cf0:	60fb      	str	r3, [r7, #12]
  408cf2:	e012      	b.n	408d1a <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
  408cf4:	687b      	ldr	r3, [r7, #4]
  408cf6:	781b      	ldrb	r3, [r3, #0]
  408cf8:	6839      	ldr	r1, [r7, #0]
  408cfa:	4618      	mov	r0, r3
  408cfc:	4b0b      	ldr	r3, [pc, #44]	; (408d2c <f_puts+0x48>)
  408cfe:	4798      	blx	r3
  408d00:	4603      	mov	r3, r0
  408d02:	f1b3 3fff 	cmp.w	r3, #4294967295
  408d06:	d102      	bne.n	408d0e <f_puts+0x2a>
  408d08:	f04f 33ff 	mov.w	r3, #4294967295
  408d0c:	e00a      	b.n	408d24 <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
  408d0e:	687b      	ldr	r3, [r7, #4]
  408d10:	3301      	adds	r3, #1
  408d12:	607b      	str	r3, [r7, #4]
  408d14:	68fb      	ldr	r3, [r7, #12]
  408d16:	3301      	adds	r3, #1
  408d18:	60fb      	str	r3, [r7, #12]
  408d1a:	687b      	ldr	r3, [r7, #4]
  408d1c:	781b      	ldrb	r3, [r3, #0]
  408d1e:	2b00      	cmp	r3, #0
  408d20:	d1e8      	bne.n	408cf4 <f_puts+0x10>
	}
	return n;
  408d22:	68fb      	ldr	r3, [r7, #12]
}
  408d24:	4618      	mov	r0, r3
  408d26:	3710      	adds	r7, #16
  408d28:	46bd      	mov	sp, r7
  408d2a:	bd80      	pop	{r7, pc}
  408d2c:	00408ca5 	.word	0x00408ca5

00408d30 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
  408d30:	b480      	push	{r7}
  408d32:	b085      	sub	sp, #20
  408d34:	af00      	add	r7, sp, #0
  408d36:	4603      	mov	r3, r0
  408d38:	6039      	str	r1, [r7, #0]
  408d3a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  408d3c:	88fb      	ldrh	r3, [r7, #6]
  408d3e:	2b7f      	cmp	r3, #127	; 0x7f
  408d40:	d802      	bhi.n	408d48 <ff_convert+0x18>
		c = src;
  408d42:	88fb      	ldrh	r3, [r7, #6]
  408d44:	81fb      	strh	r3, [r7, #14]
  408d46:	e025      	b.n	408d94 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
  408d48:	683b      	ldr	r3, [r7, #0]
  408d4a:	2b00      	cmp	r3, #0
  408d4c:	d00b      	beq.n	408d66 <ff_convert+0x36>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  408d4e:	88fb      	ldrh	r3, [r7, #6]
  408d50:	2bff      	cmp	r3, #255	; 0xff
  408d52:	d805      	bhi.n	408d60 <ff_convert+0x30>
  408d54:	88fb      	ldrh	r3, [r7, #6]
  408d56:	3b80      	subs	r3, #128	; 0x80
  408d58:	4a12      	ldr	r2, [pc, #72]	; (408da4 <ff_convert+0x74>)
  408d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  408d5e:	e000      	b.n	408d62 <ff_convert+0x32>
  408d60:	2300      	movs	r3, #0
  408d62:	81fb      	strh	r3, [r7, #14]
  408d64:	e016      	b.n	408d94 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  408d66:	2300      	movs	r3, #0
  408d68:	81fb      	strh	r3, [r7, #14]
  408d6a:	e009      	b.n	408d80 <ff_convert+0x50>
				if (src == Tbl[c]) break;
  408d6c:	89fb      	ldrh	r3, [r7, #14]
  408d6e:	4a0d      	ldr	r2, [pc, #52]	; (408da4 <ff_convert+0x74>)
  408d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  408d74:	88fa      	ldrh	r2, [r7, #6]
  408d76:	429a      	cmp	r2, r3
  408d78:	d006      	beq.n	408d88 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
  408d7a:	89fb      	ldrh	r3, [r7, #14]
  408d7c:	3301      	adds	r3, #1
  408d7e:	81fb      	strh	r3, [r7, #14]
  408d80:	89fb      	ldrh	r3, [r7, #14]
  408d82:	2b7f      	cmp	r3, #127	; 0x7f
  408d84:	d9f2      	bls.n	408d6c <ff_convert+0x3c>
  408d86:	e000      	b.n	408d8a <ff_convert+0x5a>
				if (src == Tbl[c]) break;
  408d88:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
  408d8a:	89fb      	ldrh	r3, [r7, #14]
  408d8c:	3380      	adds	r3, #128	; 0x80
  408d8e:	b29b      	uxth	r3, r3
  408d90:	b2db      	uxtb	r3, r3
  408d92:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
  408d94:	89fb      	ldrh	r3, [r7, #14]
}
  408d96:	4618      	mov	r0, r3
  408d98:	3714      	adds	r7, #20
  408d9a:	46bd      	mov	sp, r7
  408d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408da0:	4770      	bx	lr
  408da2:	bf00      	nop
  408da4:	0040f08c 	.word	0x0040f08c

00408da8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
  408da8:	b480      	push	{r7}
  408daa:	b085      	sub	sp, #20
  408dac:	af00      	add	r7, sp, #0
  408dae:	4603      	mov	r3, r0
  408db0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  408db2:	2300      	movs	r3, #0
  408db4:	60fb      	str	r3, [r7, #12]
  408db6:	e002      	b.n	408dbe <ff_wtoupper+0x16>
  408db8:	68fb      	ldr	r3, [r7, #12]
  408dba:	3301      	adds	r3, #1
  408dbc:	60fb      	str	r3, [r7, #12]
  408dbe:	4a0f      	ldr	r2, [pc, #60]	; (408dfc <ff_wtoupper+0x54>)
  408dc0:	68fb      	ldr	r3, [r7, #12]
  408dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  408dc6:	2b00      	cmp	r3, #0
  408dc8:	d006      	beq.n	408dd8 <ff_wtoupper+0x30>
  408dca:	4a0c      	ldr	r2, [pc, #48]	; (408dfc <ff_wtoupper+0x54>)
  408dcc:	68fb      	ldr	r3, [r7, #12]
  408dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  408dd2:	88fa      	ldrh	r2, [r7, #6]
  408dd4:	429a      	cmp	r2, r3
  408dd6:	d1ef      	bne.n	408db8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  408dd8:	4a08      	ldr	r2, [pc, #32]	; (408dfc <ff_wtoupper+0x54>)
  408dda:	68fb      	ldr	r3, [r7, #12]
  408ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  408de0:	2b00      	cmp	r3, #0
  408de2:	d004      	beq.n	408dee <ff_wtoupper+0x46>
  408de4:	4a06      	ldr	r2, [pc, #24]	; (408e00 <ff_wtoupper+0x58>)
  408de6:	68fb      	ldr	r3, [r7, #12]
  408de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  408dec:	e000      	b.n	408df0 <ff_wtoupper+0x48>
  408dee:	88fb      	ldrh	r3, [r7, #6]
}
  408df0:	4618      	mov	r0, r3
  408df2:	3714      	adds	r7, #20
  408df4:	46bd      	mov	sp, r7
  408df6:	f85d 7b04 	ldr.w	r7, [sp], #4
  408dfa:	4770      	bx	lr
  408dfc:	0040f18c 	.word	0x0040f18c
  408e00:	0040f36c 	.word	0x0040f36c

00408e04 <main>:
/* Function definitions ----------------------------------------------- */
/**
 * @brief Entry
 */
int main(void)
{
  408e04:	b580      	push	{r7, lr}
  408e06:	af00      	add	r7, sp, #0
  sys_init();
  408e08:	4b02      	ldr	r3, [pc, #8]	; (408e14 <main+0x10>)
  408e0a:	4798      	blx	r3
  408e0c:	2300      	movs	r3, #0
}
  408e0e:	4618      	mov	r0, r3
  408e10:	bd80      	pop	{r7, pc}
  408e12:	bf00      	nop
  408e14:	00402fa9 	.word	0x00402fa9

00408e18 <osc_enable>:
{
  408e18:	b580      	push	{r7, lr}
  408e1a:	b082      	sub	sp, #8
  408e1c:	af00      	add	r7, sp, #0
  408e1e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  408e20:	687b      	ldr	r3, [r7, #4]
  408e22:	2b07      	cmp	r3, #7
  408e24:	d831      	bhi.n	408e8a <osc_enable+0x72>
  408e26:	a201      	add	r2, pc, #4	; (adr r2, 408e2c <osc_enable+0x14>)
  408e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408e2c:	00408e89 	.word	0x00408e89
  408e30:	00408e4d 	.word	0x00408e4d
  408e34:	00408e55 	.word	0x00408e55
  408e38:	00408e5d 	.word	0x00408e5d
  408e3c:	00408e65 	.word	0x00408e65
  408e40:	00408e6d 	.word	0x00408e6d
  408e44:	00408e75 	.word	0x00408e75
  408e48:	00408e7f 	.word	0x00408e7f
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  408e4c:	2000      	movs	r0, #0
  408e4e:	4b11      	ldr	r3, [pc, #68]	; (408e94 <osc_enable+0x7c>)
  408e50:	4798      	blx	r3
		break;
  408e52:	e01a      	b.n	408e8a <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  408e54:	2001      	movs	r0, #1
  408e56:	4b0f      	ldr	r3, [pc, #60]	; (408e94 <osc_enable+0x7c>)
  408e58:	4798      	blx	r3
		break;
  408e5a:	e016      	b.n	408e8a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  408e5c:	2000      	movs	r0, #0
  408e5e:	4b0e      	ldr	r3, [pc, #56]	; (408e98 <osc_enable+0x80>)
  408e60:	4798      	blx	r3
		break;
  408e62:	e012      	b.n	408e8a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  408e64:	2010      	movs	r0, #16
  408e66:	4b0c      	ldr	r3, [pc, #48]	; (408e98 <osc_enable+0x80>)
  408e68:	4798      	blx	r3
		break;
  408e6a:	e00e      	b.n	408e8a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  408e6c:	2020      	movs	r0, #32
  408e6e:	4b0a      	ldr	r3, [pc, #40]	; (408e98 <osc_enable+0x80>)
  408e70:	4798      	blx	r3
		break;
  408e72:	e00a      	b.n	408e8a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  408e74:	213e      	movs	r1, #62	; 0x3e
  408e76:	2000      	movs	r0, #0
  408e78:	4b08      	ldr	r3, [pc, #32]	; (408e9c <osc_enable+0x84>)
  408e7a:	4798      	blx	r3
		break;
  408e7c:	e005      	b.n	408e8a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  408e7e:	213e      	movs	r1, #62	; 0x3e
  408e80:	2001      	movs	r0, #1
  408e82:	4b06      	ldr	r3, [pc, #24]	; (408e9c <osc_enable+0x84>)
  408e84:	4798      	blx	r3
		break;
  408e86:	e000      	b.n	408e8a <osc_enable+0x72>
		break;
  408e88:	bf00      	nop
}
  408e8a:	bf00      	nop
  408e8c:	3708      	adds	r7, #8
  408e8e:	46bd      	mov	sp, r7
  408e90:	bd80      	pop	{r7, pc}
  408e92:	bf00      	nop
  408e94:	0040992d 	.word	0x0040992d
  408e98:	00409999 	.word	0x00409999
  408e9c:	00409a09 	.word	0x00409a09

00408ea0 <osc_is_ready>:
{
  408ea0:	b580      	push	{r7, lr}
  408ea2:	b082      	sub	sp, #8
  408ea4:	af00      	add	r7, sp, #0
  408ea6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  408ea8:	687b      	ldr	r3, [r7, #4]
  408eaa:	2b07      	cmp	r3, #7
  408eac:	d826      	bhi.n	408efc <osc_is_ready+0x5c>
  408eae:	a201      	add	r2, pc, #4	; (adr r2, 408eb4 <osc_is_ready+0x14>)
  408eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408eb4:	00408ed5 	.word	0x00408ed5
  408eb8:	00408ed9 	.word	0x00408ed9
  408ebc:	00408ed9 	.word	0x00408ed9
  408ec0:	00408eeb 	.word	0x00408eeb
  408ec4:	00408eeb 	.word	0x00408eeb
  408ec8:	00408eeb 	.word	0x00408eeb
  408ecc:	00408eeb 	.word	0x00408eeb
  408ed0:	00408eeb 	.word	0x00408eeb
		return 1;
  408ed4:	2301      	movs	r3, #1
  408ed6:	e012      	b.n	408efe <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  408ed8:	4b0b      	ldr	r3, [pc, #44]	; (408f08 <osc_is_ready+0x68>)
  408eda:	4798      	blx	r3
  408edc:	4603      	mov	r3, r0
  408ede:	2b00      	cmp	r3, #0
  408ee0:	bf14      	ite	ne
  408ee2:	2301      	movne	r3, #1
  408ee4:	2300      	moveq	r3, #0
  408ee6:	b2db      	uxtb	r3, r3
  408ee8:	e009      	b.n	408efe <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  408eea:	4b08      	ldr	r3, [pc, #32]	; (408f0c <osc_is_ready+0x6c>)
  408eec:	4798      	blx	r3
  408eee:	4603      	mov	r3, r0
  408ef0:	2b00      	cmp	r3, #0
  408ef2:	bf14      	ite	ne
  408ef4:	2301      	movne	r3, #1
  408ef6:	2300      	moveq	r3, #0
  408ef8:	b2db      	uxtb	r3, r3
  408efa:	e000      	b.n	408efe <osc_is_ready+0x5e>
	return 0;
  408efc:	2300      	movs	r3, #0
}
  408efe:	4618      	mov	r0, r3
  408f00:	3708      	adds	r7, #8
  408f02:	46bd      	mov	sp, r7
  408f04:	bd80      	pop	{r7, pc}
  408f06:	bf00      	nop
  408f08:	00409965 	.word	0x00409965
  408f0c:	00409a81 	.word	0x00409a81

00408f10 <osc_get_rate>:
{
  408f10:	b480      	push	{r7}
  408f12:	b083      	sub	sp, #12
  408f14:	af00      	add	r7, sp, #0
  408f16:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  408f18:	687b      	ldr	r3, [r7, #4]
  408f1a:	2b07      	cmp	r3, #7
  408f1c:	d825      	bhi.n	408f6a <osc_get_rate+0x5a>
  408f1e:	a201      	add	r2, pc, #4	; (adr r2, 408f24 <osc_get_rate+0x14>)
  408f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408f24:	00408f45 	.word	0x00408f45
  408f28:	00408f4b 	.word	0x00408f4b
  408f2c:	00408f51 	.word	0x00408f51
  408f30:	00408f57 	.word	0x00408f57
  408f34:	00408f5b 	.word	0x00408f5b
  408f38:	00408f5f 	.word	0x00408f5f
  408f3c:	00408f63 	.word	0x00408f63
  408f40:	00408f67 	.word	0x00408f67
		return OSC_SLCK_32K_RC_HZ;
  408f44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  408f48:	e010      	b.n	408f6c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  408f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  408f4e:	e00d      	b.n	408f6c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  408f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  408f54:	e00a      	b.n	408f6c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  408f56:	4b08      	ldr	r3, [pc, #32]	; (408f78 <osc_get_rate+0x68>)
  408f58:	e008      	b.n	408f6c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  408f5a:	4b08      	ldr	r3, [pc, #32]	; (408f7c <osc_get_rate+0x6c>)
  408f5c:	e006      	b.n	408f6c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  408f5e:	4b08      	ldr	r3, [pc, #32]	; (408f80 <osc_get_rate+0x70>)
  408f60:	e004      	b.n	408f6c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  408f62:	4b07      	ldr	r3, [pc, #28]	; (408f80 <osc_get_rate+0x70>)
  408f64:	e002      	b.n	408f6c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  408f66:	4b06      	ldr	r3, [pc, #24]	; (408f80 <osc_get_rate+0x70>)
  408f68:	e000      	b.n	408f6c <osc_get_rate+0x5c>
	return 0;
  408f6a:	2300      	movs	r3, #0
}
  408f6c:	4618      	mov	r0, r3
  408f6e:	370c      	adds	r7, #12
  408f70:	46bd      	mov	sp, r7
  408f72:	f85d 7b04 	ldr.w	r7, [sp], #4
  408f76:	4770      	bx	lr
  408f78:	003d0900 	.word	0x003d0900
  408f7c:	007a1200 	.word	0x007a1200
  408f80:	00b71b00 	.word	0x00b71b00

00408f84 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  408f84:	b580      	push	{r7, lr}
  408f86:	b082      	sub	sp, #8
  408f88:	af00      	add	r7, sp, #0
  408f8a:	4603      	mov	r3, r0
  408f8c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  408f8e:	bf00      	nop
  408f90:	79fb      	ldrb	r3, [r7, #7]
  408f92:	4618      	mov	r0, r3
  408f94:	4b05      	ldr	r3, [pc, #20]	; (408fac <osc_wait_ready+0x28>)
  408f96:	4798      	blx	r3
  408f98:	4603      	mov	r3, r0
  408f9a:	f083 0301 	eor.w	r3, r3, #1
  408f9e:	b2db      	uxtb	r3, r3
  408fa0:	2b00      	cmp	r3, #0
  408fa2:	d1f5      	bne.n	408f90 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  408fa4:	bf00      	nop
  408fa6:	3708      	adds	r7, #8
  408fa8:	46bd      	mov	sp, r7
  408faa:	bd80      	pop	{r7, pc}
  408fac:	00408ea1 	.word	0x00408ea1

00408fb0 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  408fb0:	b580      	push	{r7, lr}
  408fb2:	b086      	sub	sp, #24
  408fb4:	af00      	add	r7, sp, #0
  408fb6:	60f8      	str	r0, [r7, #12]
  408fb8:	607a      	str	r2, [r7, #4]
  408fba:	603b      	str	r3, [r7, #0]
  408fbc:	460b      	mov	r3, r1
  408fbe:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  408fc0:	7afb      	ldrb	r3, [r7, #11]
  408fc2:	4618      	mov	r0, r3
  408fc4:	4b0d      	ldr	r3, [pc, #52]	; (408ffc <pll_config_init+0x4c>)
  408fc6:	4798      	blx	r3
  408fc8:	4602      	mov	r2, r0
  408fca:	687b      	ldr	r3, [r7, #4]
  408fcc:	fbb2 f3f3 	udiv	r3, r2, r3
  408fd0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  408fd2:	697b      	ldr	r3, [r7, #20]
  408fd4:	683a      	ldr	r2, [r7, #0]
  408fd6:	fb02 f303 	mul.w	r3, r2, r3
  408fda:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | \
  408fdc:	683b      	ldr	r3, [r7, #0]
  408fde:	3b01      	subs	r3, #1
  408fe0:	041a      	lsls	r2, r3, #16
  408fe2:	4b07      	ldr	r3, [pc, #28]	; (409000 <pll_config_init+0x50>)
  408fe4:	4013      	ands	r3, r2
  408fe6:	687a      	ldr	r2, [r7, #4]
  408fe8:	b2d2      	uxtb	r2, r2
  408fea:	4313      	orrs	r3, r2
  408fec:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  408ff0:	68fb      	ldr	r3, [r7, #12]
  408ff2:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
}
  408ff4:	bf00      	nop
  408ff6:	3718      	adds	r7, #24
  408ff8:	46bd      	mov	sp, r7
  408ffa:	bd80      	pop	{r7, pc}
  408ffc:	00408f11 	.word	0x00408f11
  409000:	07ff0000 	.word	0x07ff0000

00409004 <pll_enable>:
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  409004:	b580      	push	{r7, lr}
  409006:	b082      	sub	sp, #8
  409008:	af00      	add	r7, sp, #0
  40900a:	6078      	str	r0, [r7, #4]
  40900c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40900e:	683b      	ldr	r3, [r7, #0]
  409010:	2b00      	cmp	r3, #0
  409012:	d107      	bne.n	409024 <pll_enable+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
  409014:	4b05      	ldr	r3, [pc, #20]	; (40902c <pll_enable+0x28>)
  409016:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  409018:	4a05      	ldr	r2, [pc, #20]	; (409030 <pll_enable+0x2c>)
  40901a:	687b      	ldr	r3, [r7, #4]
  40901c:	681b      	ldr	r3, [r3, #0]
  40901e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  409022:	6293      	str	r3, [r2, #40]	; 0x28
	}
}
  409024:	bf00      	nop
  409026:	3708      	adds	r7, #8
  409028:	46bd      	mov	sp, r7
  40902a:	bd80      	pop	{r7, pc}
  40902c:	00409a9d 	.word	0x00409a9d
  409030:	400e0400 	.word	0x400e0400

00409034 <pll_is_locked>:
		pmc_disable_pllack();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  409034:	b580      	push	{r7, lr}
  409036:	b082      	sub	sp, #8
  409038:	af00      	add	r7, sp, #0
  40903a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40903c:	4b03      	ldr	r3, [pc, #12]	; (40904c <pll_is_locked+0x18>)
  40903e:	4798      	blx	r3
  409040:	4603      	mov	r3, r0
}
  409042:	4618      	mov	r0, r3
  409044:	3708      	adds	r7, #8
  409046:	46bd      	mov	sp, r7
  409048:	bd80      	pop	{r7, pc}
  40904a:	bf00      	nop
  40904c:	00409ab9 	.word	0x00409ab9

00409050 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  409050:	b580      	push	{r7, lr}
  409052:	b082      	sub	sp, #8
  409054:	af00      	add	r7, sp, #0
  409056:	4603      	mov	r3, r0
  409058:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40905a:	79fb      	ldrb	r3, [r7, #7]
  40905c:	3b03      	subs	r3, #3
  40905e:	2b04      	cmp	r3, #4
  409060:	d808      	bhi.n	409074 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  409062:	79fb      	ldrb	r3, [r7, #7]
  409064:	4618      	mov	r0, r3
  409066:	4b06      	ldr	r3, [pc, #24]	; (409080 <pll_enable_source+0x30>)
  409068:	4798      	blx	r3
		osc_wait_ready(e_src);
  40906a:	79fb      	ldrb	r3, [r7, #7]
  40906c:	4618      	mov	r0, r3
  40906e:	4b05      	ldr	r3, [pc, #20]	; (409084 <pll_enable_source+0x34>)
  409070:	4798      	blx	r3
		break;
  409072:	e000      	b.n	409076 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  409074:	bf00      	nop
	}
}
  409076:	bf00      	nop
  409078:	3708      	adds	r7, #8
  40907a:	46bd      	mov	sp, r7
  40907c:	bd80      	pop	{r7, pc}
  40907e:	bf00      	nop
  409080:	00408e19 	.word	0x00408e19
  409084:	00408f85 	.word	0x00408f85

00409088 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  409088:	b580      	push	{r7, lr}
  40908a:	b082      	sub	sp, #8
  40908c:	af00      	add	r7, sp, #0
  40908e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  409090:	bf00      	nop
  409092:	6878      	ldr	r0, [r7, #4]
  409094:	4b04      	ldr	r3, [pc, #16]	; (4090a8 <pll_wait_for_lock+0x20>)
  409096:	4798      	blx	r3
  409098:	4603      	mov	r3, r0
  40909a:	2b00      	cmp	r3, #0
  40909c:	d0f9      	beq.n	409092 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40909e:	2300      	movs	r3, #0
}
  4090a0:	4618      	mov	r0, r3
  4090a2:	3708      	adds	r7, #8
  4090a4:	46bd      	mov	sp, r7
  4090a6:	bd80      	pop	{r7, pc}
  4090a8:	00409035 	.word	0x00409035

004090ac <sysclk_get_main_hz>:
{
  4090ac:	b580      	push	{r7, lr}
  4090ae:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4090b0:	2006      	movs	r0, #6
  4090b2:	4b03      	ldr	r3, [pc, #12]	; (4090c0 <sysclk_get_main_hz+0x14>)
  4090b4:	4798      	blx	r3
  4090b6:	4603      	mov	r3, r0
  4090b8:	011b      	lsls	r3, r3, #4
}
  4090ba:	4618      	mov	r0, r3
  4090bc:	bd80      	pop	{r7, pc}
  4090be:	bf00      	nop
  4090c0:	00408f11 	.word	0x00408f11

004090c4 <sysclk_get_cpu_hz>:
{
  4090c4:	b580      	push	{r7, lr}
  4090c6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4090c8:	4b02      	ldr	r3, [pc, #8]	; (4090d4 <sysclk_get_cpu_hz+0x10>)
  4090ca:	4798      	blx	r3
  4090cc:	4603      	mov	r3, r0
  4090ce:	085b      	lsrs	r3, r3, #1
}
  4090d0:	4618      	mov	r0, r3
  4090d2:	bd80      	pop	{r7, pc}
  4090d4:	004090ad 	.word	0x004090ad

004090d8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4090d8:	b590      	push	{r4, r7, lr}
  4090da:	b083      	sub	sp, #12
  4090dc:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4090de:	4811      	ldr	r0, [pc, #68]	; (409124 <sysclk_init+0x4c>)
  4090e0:	4b11      	ldr	r3, [pc, #68]	; (409128 <sysclk_init+0x50>)
  4090e2:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4090e4:	2006      	movs	r0, #6
  4090e6:	4b11      	ldr	r3, [pc, #68]	; (40912c <sysclk_init+0x54>)
  4090e8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4090ea:	1d38      	adds	r0, r7, #4
  4090ec:	2310      	movs	r3, #16
  4090ee:	2201      	movs	r2, #1
  4090f0:	2106      	movs	r1, #6
  4090f2:	4c0f      	ldr	r4, [pc, #60]	; (409130 <sysclk_init+0x58>)
  4090f4:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4090f6:	1d3b      	adds	r3, r7, #4
  4090f8:	2100      	movs	r1, #0
  4090fa:	4618      	mov	r0, r3
  4090fc:	4b0d      	ldr	r3, [pc, #52]	; (409134 <sysclk_init+0x5c>)
  4090fe:	4798      	blx	r3
		pll_wait_for_lock(0);
  409100:	2000      	movs	r0, #0
  409102:	4b0d      	ldr	r3, [pc, #52]	; (409138 <sysclk_init+0x60>)
  409104:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  409106:	2010      	movs	r0, #16
  409108:	4b0c      	ldr	r3, [pc, #48]	; (40913c <sysclk_init+0x64>)
  40910a:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40910c:	4b0c      	ldr	r3, [pc, #48]	; (409140 <sysclk_init+0x68>)
  40910e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  409110:	4b0c      	ldr	r3, [pc, #48]	; (409144 <sysclk_init+0x6c>)
  409112:	4798      	blx	r3
  409114:	4603      	mov	r3, r0
  409116:	4618      	mov	r0, r3
  409118:	4b03      	ldr	r3, [pc, #12]	; (409128 <sysclk_init+0x50>)
  40911a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40911c:	bf00      	nop
  40911e:	370c      	adds	r7, #12
  409120:	46bd      	mov	sp, r7
  409122:	bd90      	pop	{r4, r7, pc}
  409124:	07270e00 	.word	0x07270e00
  409128:	00405fb5 	.word	0x00405fb5
  40912c:	00409051 	.word	0x00409051
  409130:	00408fb1 	.word	0x00408fb1
  409134:	00409005 	.word	0x00409005
  409138:	00409089 	.word	0x00409089
  40913c:	004098a9 	.word	0x004098a9
  409140:	00405e4d 	.word	0x00405e4d
  409144:	004090c5 	.word	0x004090c5

00409148 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  409148:	b580      	push	{r7, lr}
  40914a:	b084      	sub	sp, #16
  40914c:	af00      	add	r7, sp, #0
  40914e:	6078      	str	r0, [r7, #4]
  409150:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  409152:	6878      	ldr	r0, [r7, #4]
  409154:	4b2c      	ldr	r3, [pc, #176]	; (409208 <pio_handler_process+0xc0>)
  409156:	4798      	blx	r3
  409158:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40915a:	6878      	ldr	r0, [r7, #4]
  40915c:	4b2b      	ldr	r3, [pc, #172]	; (40920c <pio_handler_process+0xc4>)
  40915e:	4798      	blx	r3
  409160:	4602      	mov	r2, r0
  409162:	68fb      	ldr	r3, [r7, #12]
  409164:	4013      	ands	r3, r2
  409166:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  409168:	68fb      	ldr	r3, [r7, #12]
  40916a:	2b00      	cmp	r3, #0
  40916c:	d03c      	beq.n	4091e8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40916e:	2300      	movs	r3, #0
  409170:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  409172:	e034      	b.n	4091de <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  409174:	4a26      	ldr	r2, [pc, #152]	; (409210 <pio_handler_process+0xc8>)
  409176:	68bb      	ldr	r3, [r7, #8]
  409178:	011b      	lsls	r3, r3, #4
  40917a:	4413      	add	r3, r2
  40917c:	681a      	ldr	r2, [r3, #0]
  40917e:	683b      	ldr	r3, [r7, #0]
  409180:	429a      	cmp	r2, r3
  409182:	d126      	bne.n	4091d2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  409184:	4a22      	ldr	r2, [pc, #136]	; (409210 <pio_handler_process+0xc8>)
  409186:	68bb      	ldr	r3, [r7, #8]
  409188:	011b      	lsls	r3, r3, #4
  40918a:	4413      	add	r3, r2
  40918c:	3304      	adds	r3, #4
  40918e:	681a      	ldr	r2, [r3, #0]
  409190:	68fb      	ldr	r3, [r7, #12]
  409192:	4013      	ands	r3, r2
  409194:	2b00      	cmp	r3, #0
  409196:	d01c      	beq.n	4091d2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  409198:	4a1d      	ldr	r2, [pc, #116]	; (409210 <pio_handler_process+0xc8>)
  40919a:	68bb      	ldr	r3, [r7, #8]
  40919c:	011b      	lsls	r3, r3, #4
  40919e:	4413      	add	r3, r2
  4091a0:	330c      	adds	r3, #12
  4091a2:	681b      	ldr	r3, [r3, #0]
  4091a4:	491a      	ldr	r1, [pc, #104]	; (409210 <pio_handler_process+0xc8>)
  4091a6:	68ba      	ldr	r2, [r7, #8]
  4091a8:	0112      	lsls	r2, r2, #4
  4091aa:	440a      	add	r2, r1
  4091ac:	6810      	ldr	r0, [r2, #0]
  4091ae:	4918      	ldr	r1, [pc, #96]	; (409210 <pio_handler_process+0xc8>)
  4091b0:	68ba      	ldr	r2, [r7, #8]
  4091b2:	0112      	lsls	r2, r2, #4
  4091b4:	440a      	add	r2, r1
  4091b6:	3204      	adds	r2, #4
  4091b8:	6812      	ldr	r2, [r2, #0]
  4091ba:	4611      	mov	r1, r2
  4091bc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4091be:	4a14      	ldr	r2, [pc, #80]	; (409210 <pio_handler_process+0xc8>)
  4091c0:	68bb      	ldr	r3, [r7, #8]
  4091c2:	011b      	lsls	r3, r3, #4
  4091c4:	4413      	add	r3, r2
  4091c6:	3304      	adds	r3, #4
  4091c8:	681b      	ldr	r3, [r3, #0]
  4091ca:	43db      	mvns	r3, r3
  4091cc:	68fa      	ldr	r2, [r7, #12]
  4091ce:	4013      	ands	r3, r2
  4091d0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4091d2:	68bb      	ldr	r3, [r7, #8]
  4091d4:	3301      	adds	r3, #1
  4091d6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4091d8:	68bb      	ldr	r3, [r7, #8]
  4091da:	2b06      	cmp	r3, #6
  4091dc:	d803      	bhi.n	4091e6 <pio_handler_process+0x9e>
		while (status != 0) {
  4091de:	68fb      	ldr	r3, [r7, #12]
  4091e0:	2b00      	cmp	r3, #0
  4091e2:	d1c7      	bne.n	409174 <pio_handler_process+0x2c>
  4091e4:	e000      	b.n	4091e8 <pio_handler_process+0xa0>
				break;
  4091e6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4091e8:	4b0a      	ldr	r3, [pc, #40]	; (409214 <pio_handler_process+0xcc>)
  4091ea:	681b      	ldr	r3, [r3, #0]
  4091ec:	2b00      	cmp	r3, #0
  4091ee:	d007      	beq.n	409200 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4091f0:	4b09      	ldr	r3, [pc, #36]	; (409218 <pio_handler_process+0xd0>)
  4091f2:	681b      	ldr	r3, [r3, #0]
  4091f4:	2b00      	cmp	r3, #0
  4091f6:	d003      	beq.n	409200 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4091f8:	4b07      	ldr	r3, [pc, #28]	; (409218 <pio_handler_process+0xd0>)
  4091fa:	681b      	ldr	r3, [r3, #0]
  4091fc:	6878      	ldr	r0, [r7, #4]
  4091fe:	4798      	blx	r3
		}
	}
#endif
}
  409200:	bf00      	nop
  409202:	3710      	adds	r7, #16
  409204:	46bd      	mov	sp, r7
  409206:	bd80      	pop	{r7, pc}
  409208:	00409879 	.word	0x00409879
  40920c:	00409891 	.word	0x00409891
  409210:	2000ac14 	.word	0x2000ac14
  409214:	2000accc 	.word	0x2000accc
  409218:	2000ac84 	.word	0x2000ac84

0040921c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40921c:	b580      	push	{r7, lr}
  40921e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  409220:	2109      	movs	r1, #9
  409222:	4802      	ldr	r0, [pc, #8]	; (40922c <PIOA_Handler+0x10>)
  409224:	4b02      	ldr	r3, [pc, #8]	; (409230 <PIOA_Handler+0x14>)
  409226:	4798      	blx	r3
}
  409228:	bf00      	nop
  40922a:	bd80      	pop	{r7, pc}
  40922c:	400e0e00 	.word	0x400e0e00
  409230:	00409149 	.word	0x00409149

00409234 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  409234:	b580      	push	{r7, lr}
  409236:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  409238:	210a      	movs	r1, #10
  40923a:	4802      	ldr	r0, [pc, #8]	; (409244 <PIOB_Handler+0x10>)
  40923c:	4b02      	ldr	r3, [pc, #8]	; (409248 <PIOB_Handler+0x14>)
  40923e:	4798      	blx	r3
}
  409240:	bf00      	nop
  409242:	bd80      	pop	{r7, pc}
  409244:	400e1000 	.word	0x400e1000
  409248:	00409149 	.word	0x00409149

0040924c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40924c:	b580      	push	{r7, lr}
  40924e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  409250:	210b      	movs	r1, #11
  409252:	4802      	ldr	r0, [pc, #8]	; (40925c <PIOC_Handler+0x10>)
  409254:	4b02      	ldr	r3, [pc, #8]	; (409260 <PIOC_Handler+0x14>)
  409256:	4798      	blx	r3
}
  409258:	bf00      	nop
  40925a:	bd80      	pop	{r7, pc}
  40925c:	400e1200 	.word	0x400e1200
  409260:	00409149 	.word	0x00409149

00409264 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  409264:	b580      	push	{r7, lr}
  409266:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  409268:	210c      	movs	r1, #12
  40926a:	4802      	ldr	r0, [pc, #8]	; (409274 <PIOD_Handler+0x10>)
  40926c:	4b02      	ldr	r3, [pc, #8]	; (409278 <PIOD_Handler+0x14>)
  40926e:	4798      	blx	r3
}
  409270:	bf00      	nop
  409272:	bd80      	pop	{r7, pc}
  409274:	400e1400 	.word	0x400e1400
  409278:	00409149 	.word	0x00409149

0040927c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40927c:	b580      	push	{r7, lr}
  40927e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  409280:	210d      	movs	r1, #13
  409282:	4802      	ldr	r0, [pc, #8]	; (40928c <PIOE_Handler+0x10>)
  409284:	4b02      	ldr	r3, [pc, #8]	; (409290 <PIOE_Handler+0x14>)
  409286:	4798      	blx	r3
}
  409288:	bf00      	nop
  40928a:	bd80      	pop	{r7, pc}
  40928c:	400e1600 	.word	0x400e1600
  409290:	00409149 	.word	0x00409149

00409294 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
  409294:	b580      	push	{r7, lr}
  409296:	b08a      	sub	sp, #40	; 0x28
  409298:	af00      	add	r7, sp, #0
  40929a:	60f8      	str	r0, [r7, #12]
  40929c:	60b9      	str	r1, [r7, #8]
  40929e:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  4092a0:	687b      	ldr	r3, [r7, #4]
  4092a2:	f246 12a8 	movw	r2, #25000	; 0x61a8
  4092a6:	fb02 f203 	mul.w	r2, r2, r3
  4092aa:	68bb      	ldr	r3, [r7, #8]
  4092ac:	4413      	add	r3, r2
  4092ae:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
  4092b0:	687b      	ldr	r3, [r7, #4]
  4092b2:	f246 11a8 	movw	r1, #25000	; 0x61a8
  4092b6:	fb01 f303 	mul.w	r3, r1, r3
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  4092ba:	fbb2 f3f3 	udiv	r3, r2, r3
  4092be:	2b80      	cmp	r3, #128	; 0x80
  4092c0:	d901      	bls.n	4092c6 <can_set_baudrate+0x32>
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
  4092c2:	2300      	movs	r3, #0
  4092c4:	e086      	b.n	4093d4 <can_set_baudrate+0x140>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
  4092c6:	68bb      	ldr	r3, [r7, #8]
  4092c8:	085a      	lsrs	r2, r3, #1
  4092ca:	687b      	ldr	r3, [r7, #4]
  4092cc:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  4092d0:	fb01 f303 	mul.w	r3, r1, r3
  4092d4:	429a      	cmp	r2, r3
  4092d6:	d201      	bcs.n	4092dc <can_set_baudrate+0x48>
		return 0;
  4092d8:	2300      	movs	r3, #0
  4092da:	e07b      	b.n	4093d4 <can_set_baudrate+0x140>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
  4092dc:	2308      	movs	r3, #8
  4092de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
  4092e2:	f04f 33ff 	mov.w	r3, #4294967295
  4092e6:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  4092e8:	2308      	movs	r3, #8
  4092ea:	77fb      	strb	r3, [r7, #31]
  4092ec:	e02a      	b.n	409344 <can_set_baudrate+0xb0>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
  4092ee:	7ffb      	ldrb	r3, [r7, #31]
  4092f0:	687a      	ldr	r2, [r7, #4]
  4092f2:	fb02 f303 	mul.w	r3, r2, r3
  4092f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4092fa:	fb02 f303 	mul.w	r3, r2, r3
  4092fe:	68ba      	ldr	r2, [r7, #8]
  409300:	fbb2 f3f3 	udiv	r3, r2, r3
  409304:	2b80      	cmp	r3, #128	; 0x80
  409306:	d81a      	bhi.n	40933e <can_set_baudrate+0xaa>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
  409308:	7ffb      	ldrb	r3, [r7, #31]
  40930a:	687a      	ldr	r2, [r7, #4]
  40930c:	fb02 f303 	mul.w	r3, r2, r3
  409310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  409314:	fb02 f203 	mul.w	r2, r2, r3
  409318:	68bb      	ldr	r3, [r7, #8]
  40931a:	fbb3 f1f2 	udiv	r1, r3, r2
  40931e:	fb02 f201 	mul.w	r2, r2, r1
  409322:	1a9b      	subs	r3, r3, r2
  409324:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
  409326:	69ba      	ldr	r2, [r7, #24]
  409328:	6a3b      	ldr	r3, [r7, #32]
  40932a:	429a      	cmp	r2, r3
  40932c:	d207      	bcs.n	40933e <can_set_baudrate+0xaa>
				ul_mod = ul_cur_mod;
  40932e:	69bb      	ldr	r3, [r7, #24]
  409330:	623b      	str	r3, [r7, #32]
				uc_tq = i;
  409332:	7ffb      	ldrb	r3, [r7, #31]
  409334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
  409338:	6a3b      	ldr	r3, [r7, #32]
  40933a:	2b00      	cmp	r3, #0
  40933c:	d006      	beq.n	40934c <can_set_baudrate+0xb8>
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  40933e:	7ffb      	ldrb	r3, [r7, #31]
  409340:	3301      	adds	r3, #1
  409342:	77fb      	strb	r3, [r7, #31]
  409344:	7ffb      	ldrb	r3, [r7, #31]
  409346:	2b19      	cmp	r3, #25
  409348:	d9d1      	bls.n	4092ee <can_set_baudrate+0x5a>
  40934a:	e000      	b.n	40934e <can_set_baudrate+0xba>
					break;
  40934c:	bf00      	nop
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
  40934e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  409352:	687a      	ldr	r2, [r7, #4]
  409354:	fb02 f303 	mul.w	r3, r2, r3
  409358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40935c:	fb02 f303 	mul.w	r3, r2, r3
  409360:	68ba      	ldr	r2, [r7, #8]
  409362:	fbb2 f3f3 	udiv	r3, r2, r3
  409366:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
  409368:	7dfb      	ldrb	r3, [r7, #23]
  40936a:	2b01      	cmp	r3, #1
  40936c:	d801      	bhi.n	409372 <can_set_baudrate+0xde>
		return 0;
  40936e:	2300      	movs	r3, #0
  409370:	e030      	b.n	4093d4 <can_set_baudrate+0x140>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
  409372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  409376:	f1a3 0208 	sub.w	r2, r3, #8
  40937a:	4613      	mov	r3, r2
  40937c:	005b      	lsls	r3, r3, #1
  40937e:	4413      	add	r3, r2
  409380:	005b      	lsls	r3, r3, #1
  409382:	4a16      	ldr	r2, [pc, #88]	; (4093dc <can_set_baudrate+0x148>)
  409384:	4413      	add	r3, r2
  409386:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
  409388:	68f8      	ldr	r0, [r7, #12]
  40938a:	4b15      	ldr	r3, [pc, #84]	; (4093e0 <can_set_baudrate+0x14c>)
  40938c:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  40938e:	693b      	ldr	r3, [r7, #16]
  409390:	78db      	ldrb	r3, [r3, #3]
  409392:	3b01      	subs	r3, #1
  409394:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  409398:	693b      	ldr	r3, [r7, #16]
  40939a:	789b      	ldrb	r3, [r3, #2]
  40939c:	3b01      	subs	r3, #1
  40939e:	011b      	lsls	r3, r3, #4
  4093a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  4093a4:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  4093a6:	693b      	ldr	r3, [r7, #16]
  4093a8:	785b      	ldrb	r3, [r3, #1]
  4093aa:	3b01      	subs	r3, #1
  4093ac:	021b      	lsls	r3, r3, #8
  4093ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  4093b2:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  4093b4:	693b      	ldr	r3, [r7, #16]
  4093b6:	791b      	ldrb	r3, [r3, #4]
  4093b8:	3b01      	subs	r3, #1
  4093ba:	031b      	lsls	r3, r3, #12
  4093bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  4093c0:	431a      	orrs	r2, r3
			CAN_BR_BRP(uc_prescale - 1);
  4093c2:	7dfb      	ldrb	r3, [r7, #23]
  4093c4:	3b01      	subs	r3, #1
  4093c6:	041b      	lsls	r3, r3, #16
  4093c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  4093cc:	431a      	orrs	r2, r3
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  4093ce:	68fb      	ldr	r3, [r7, #12]
  4093d0:	615a      	str	r2, [r3, #20]
	return 1;
  4093d2:	2301      	movs	r3, #1
}
  4093d4:	4618      	mov	r0, r3
  4093d6:	3728      	adds	r7, #40	; 0x28
  4093d8:	46bd      	mov	sp, r7
  4093da:	bd80      	pop	{r7, pc}
  4093dc:	0040f54c 	.word	0x0040f54c
  4093e0:	0040948d 	.word	0x0040948d

004093e4 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
  4093e4:	b580      	push	{r7, lr}
  4093e6:	b086      	sub	sp, #24
  4093e8:	af00      	add	r7, sp, #0
  4093ea:	60f8      	str	r0, [r7, #12]
  4093ec:	60b9      	str	r1, [r7, #8]
  4093ee:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
  4093f0:	687a      	ldr	r2, [r7, #4]
  4093f2:	68b9      	ldr	r1, [r7, #8]
  4093f4:	68f8      	ldr	r0, [r7, #12]
  4093f6:	4b17      	ldr	r3, [pc, #92]	; (409454 <can_init+0x70>)
  4093f8:	4798      	blx	r3
  4093fa:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
  4093fc:	697b      	ldr	r3, [r7, #20]
  4093fe:	2b00      	cmp	r3, #0
  409400:	d101      	bne.n	409406 <can_init+0x22>
		return 0;
  409402:	2300      	movs	r3, #0
  409404:	e021      	b.n	40944a <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
  409406:	68f8      	ldr	r0, [r7, #12]
  409408:	4b13      	ldr	r3, [pc, #76]	; (409458 <can_init+0x74>)
  40940a:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
  40940c:	68f8      	ldr	r0, [r7, #12]
  40940e:	4b13      	ldr	r3, [pc, #76]	; (40945c <can_init+0x78>)
  409410:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
  409412:	2300      	movs	r3, #0
  409414:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
  409416:	2300      	movs	r3, #0
  409418:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  40941a:	e006      	b.n	40942a <can_init+0x46>
		ul_flag = can_get_status(p_can);
  40941c:	68f8      	ldr	r0, [r7, #12]
  40941e:	4b10      	ldr	r3, [pc, #64]	; (409460 <can_init+0x7c>)
  409420:	4798      	blx	r3
  409422:	6178      	str	r0, [r7, #20]
		ul_tick++;
  409424:	693b      	ldr	r3, [r7, #16]
  409426:	3301      	adds	r3, #1
  409428:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  40942a:	697b      	ldr	r3, [r7, #20]
  40942c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  409430:	2b00      	cmp	r3, #0
  409432:	d103      	bne.n	40943c <can_init+0x58>
  409434:	693b      	ldr	r3, [r7, #16]
  409436:	4a0b      	ldr	r2, [pc, #44]	; (409464 <can_init+0x80>)
  409438:	4293      	cmp	r3, r2
  40943a:	d9ef      	bls.n	40941c <can_init+0x38>
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
  40943c:	693b      	ldr	r3, [r7, #16]
  40943e:	4a0a      	ldr	r2, [pc, #40]	; (409468 <can_init+0x84>)
  409440:	4293      	cmp	r3, r2
  409442:	d101      	bne.n	409448 <can_init+0x64>
		return 0;
  409444:	2300      	movs	r3, #0
  409446:	e000      	b.n	40944a <can_init+0x66>
	} else {
		return 1;
  409448:	2301      	movs	r3, #1
	}
}
  40944a:	4618      	mov	r0, r3
  40944c:	3718      	adds	r7, #24
  40944e:	46bd      	mov	sp, r7
  409450:	bd80      	pop	{r7, pc}
  409452:	bf00      	nop
  409454:	00409295 	.word	0x00409295
  409458:	004096f5 	.word	0x004096f5
  40945c:	0040946d 	.word	0x0040946d
  409460:	004094ad 	.word	0x004094ad
  409464:	0001869f 	.word	0x0001869f
  409468:	000186a0 	.word	0x000186a0

0040946c <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
  40946c:	b480      	push	{r7}
  40946e:	b083      	sub	sp, #12
  409470:	af00      	add	r7, sp, #0
  409472:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
  409474:	687b      	ldr	r3, [r7, #4]
  409476:	681b      	ldr	r3, [r3, #0]
  409478:	f043 0201 	orr.w	r2, r3, #1
  40947c:	687b      	ldr	r3, [r7, #4]
  40947e:	601a      	str	r2, [r3, #0]
}
  409480:	bf00      	nop
  409482:	370c      	adds	r7, #12
  409484:	46bd      	mov	sp, r7
  409486:	f85d 7b04 	ldr.w	r7, [sp], #4
  40948a:	4770      	bx	lr

0040948c <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
  40948c:	b480      	push	{r7}
  40948e:	b083      	sub	sp, #12
  409490:	af00      	add	r7, sp, #0
  409492:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
  409494:	687b      	ldr	r3, [r7, #4]
  409496:	681b      	ldr	r3, [r3, #0]
  409498:	f023 0201 	bic.w	r2, r3, #1
  40949c:	687b      	ldr	r3, [r7, #4]
  40949e:	601a      	str	r2, [r3, #0]
}
  4094a0:	bf00      	nop
  4094a2:	370c      	adds	r7, #12
  4094a4:	46bd      	mov	sp, r7
  4094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4094aa:	4770      	bx	lr

004094ac <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
  4094ac:	b480      	push	{r7}
  4094ae:	b083      	sub	sp, #12
  4094b0:	af00      	add	r7, sp, #0
  4094b2:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
  4094b4:	687b      	ldr	r3, [r7, #4]
  4094b6:	691b      	ldr	r3, [r3, #16]
}
  4094b8:	4618      	mov	r0, r3
  4094ba:	370c      	adds	r7, #12
  4094bc:	46bd      	mov	sp, r7
  4094be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4094c2:	4770      	bx	lr

004094c4 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
  4094c4:	b480      	push	{r7}
  4094c6:	b085      	sub	sp, #20
  4094c8:	af00      	add	r7, sp, #0
  4094ca:	6078      	str	r0, [r7, #4]
  4094cc:	460b      	mov	r3, r1
  4094ce:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
  4094d0:	687b      	ldr	r3, [r7, #4]
  4094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4094d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  4094d8:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
  4094da:	78fa      	ldrb	r2, [r7, #3]
  4094dc:	68fb      	ldr	r3, [r7, #12]
  4094de:	431a      	orrs	r2, r3
  4094e0:	687b      	ldr	r3, [r7, #4]
  4094e2:	625a      	str	r2, [r3, #36]	; 0x24
}
  4094e4:	bf00      	nop
  4094e6:	3714      	adds	r7, #20
  4094e8:	46bd      	mov	sp, r7
  4094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4094ee:	4770      	bx	lr

004094f0 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
  4094f0:	b480      	push	{r7}
  4094f2:	b083      	sub	sp, #12
  4094f4:	af00      	add	r7, sp, #0
  4094f6:	6078      	str	r0, [r7, #4]
  4094f8:	460b      	mov	r3, r1
  4094fa:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
  4094fc:	78fb      	ldrb	r3, [r7, #3]
  4094fe:	687a      	ldr	r2, [r7, #4]
  409500:	015b      	lsls	r3, r3, #5
  409502:	4413      	add	r3, r2
  409504:	f503 7304 	add.w	r3, r3, #528	; 0x210
  409508:	681b      	ldr	r3, [r3, #0]
}
  40950a:	4618      	mov	r0, r3
  40950c:	370c      	adds	r7, #12
  40950e:	46bd      	mov	sp, r7
  409510:	f85d 7b04 	ldr.w	r7, [sp], #4
  409514:	4770      	bx	lr

00409516 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
  409516:	b480      	push	{r7}
  409518:	b085      	sub	sp, #20
  40951a:	af00      	add	r7, sp, #0
  40951c:	6078      	str	r0, [r7, #4]
  40951e:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  409520:	683b      	ldr	r3, [r7, #0]
  409522:	681b      	ldr	r3, [r3, #0]
  409524:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
  409526:	683b      	ldr	r3, [r7, #0]
  409528:	791b      	ldrb	r3, [r3, #4]
  40952a:	2b00      	cmp	r3, #0
  40952c:	d12f      	bne.n	40958e <can_mailbox_init+0x78>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
  40952e:	7bfb      	ldrb	r3, [r7, #15]
  409530:	687a      	ldr	r2, [r7, #4]
  409532:	3310      	adds	r3, #16
  409534:	015b      	lsls	r3, r3, #5
  409536:	4413      	add	r3, r2
  409538:	2200      	movs	r2, #0
  40953a:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
  40953c:	7bfb      	ldrb	r3, [r7, #15]
  40953e:	687a      	ldr	r2, [r7, #4]
  409540:	3310      	adds	r3, #16
  409542:	015b      	lsls	r3, r3, #5
  409544:	4413      	add	r3, r2
  409546:	3304      	adds	r3, #4
  409548:	2200      	movs	r2, #0
  40954a:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
  40954c:	7bfb      	ldrb	r3, [r7, #15]
  40954e:	687a      	ldr	r2, [r7, #4]
  409550:	015b      	lsls	r3, r3, #5
  409552:	4413      	add	r3, r2
  409554:	f503 7302 	add.w	r3, r3, #520	; 0x208
  409558:	2200      	movs	r2, #0
  40955a:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
  40955c:	7bfb      	ldrb	r3, [r7, #15]
  40955e:	687a      	ldr	r2, [r7, #4]
  409560:	015b      	lsls	r3, r3, #5
  409562:	4413      	add	r3, r2
  409564:	f503 7305 	add.w	r3, r3, #532	; 0x214
  409568:	2200      	movs	r2, #0
  40956a:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
  40956c:	7bfb      	ldrb	r3, [r7, #15]
  40956e:	687a      	ldr	r2, [r7, #4]
  409570:	015b      	lsls	r3, r3, #5
  409572:	4413      	add	r3, r2
  409574:	f503 7306 	add.w	r3, r3, #536	; 0x218
  409578:	2200      	movs	r2, #0
  40957a:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
  40957c:	7bfb      	ldrb	r3, [r7, #15]
  40957e:	687a      	ldr	r2, [r7, #4]
  409580:	015b      	lsls	r3, r3, #5
  409582:	4413      	add	r3, r2
  409584:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  409588:	2200      	movs	r2, #0
  40958a:	601a      	str	r2, [r3, #0]
		return;
  40958c:	e050      	b.n	409630 <can_mailbox_init+0x11a>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  40958e:	7bfb      	ldrb	r3, [r7, #15]
  409590:	7bfa      	ldrb	r2, [r7, #15]
  409592:	6879      	ldr	r1, [r7, #4]
  409594:	3210      	adds	r2, #16
  409596:	0152      	lsls	r2, r2, #5
  409598:	440a      	add	r2, r1
  40959a:	6812      	ldr	r2, [r2, #0]
  40959c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
  4095a0:	6839      	ldr	r1, [r7, #0]
  4095a2:	79c9      	ldrb	r1, [r1, #7]
  4095a4:	0409      	lsls	r1, r1, #16
			~CAN_MMR_PRIOR_Msk) |
  4095a6:	430a      	orrs	r2, r1
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4095a8:	6879      	ldr	r1, [r7, #4]
  4095aa:	3310      	adds	r3, #16
  4095ac:	015b      	lsls	r3, r3, #5
  4095ae:	440b      	add	r3, r1
  4095b0:	601a      	str	r2, [r3, #0]

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
  4095b2:	683b      	ldr	r3, [r7, #0]
  4095b4:	795b      	ldrb	r3, [r3, #5]
  4095b6:	2b00      	cmp	r3, #0
  4095b8:	d016      	beq.n	4095e8 <can_mailbox_init+0xd2>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
  4095ba:	7bfb      	ldrb	r3, [r7, #15]
  4095bc:	683a      	ldr	r2, [r7, #0]
  4095be:	68d2      	ldr	r2, [r2, #12]
  4095c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4095c4:	6879      	ldr	r1, [r7, #4]
  4095c6:	3310      	adds	r3, #16
  4095c8:	015b      	lsls	r3, r3, #5
  4095ca:	440b      	add	r3, r1
  4095cc:	3304      	adds	r3, #4
  4095ce:	601a      	str	r2, [r3, #0]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  4095d0:	7bfb      	ldrb	r3, [r7, #15]
  4095d2:	683a      	ldr	r2, [r7, #0]
  4095d4:	6912      	ldr	r2, [r2, #16]
  4095d6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4095da:	6879      	ldr	r1, [r7, #4]
  4095dc:	015b      	lsls	r3, r3, #5
  4095de:	440b      	add	r3, r1
  4095e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4095e4:	601a      	str	r2, [r3, #0]
  4095e6:	e011      	b.n	40960c <can_mailbox_init+0xf6>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
  4095e8:	7bfb      	ldrb	r3, [r7, #15]
  4095ea:	683a      	ldr	r2, [r7, #0]
  4095ec:	68d2      	ldr	r2, [r2, #12]
  4095ee:	6879      	ldr	r1, [r7, #4]
  4095f0:	3310      	adds	r3, #16
  4095f2:	015b      	lsls	r3, r3, #5
  4095f4:	440b      	add	r3, r1
  4095f6:	3304      	adds	r3, #4
  4095f8:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  4095fa:	7bfb      	ldrb	r3, [r7, #15]
  4095fc:	683a      	ldr	r2, [r7, #0]
  4095fe:	6912      	ldr	r2, [r2, #16]
  409600:	6879      	ldr	r1, [r7, #4]
  409602:	015b      	lsls	r3, r3, #5
  409604:	440b      	add	r3, r1
  409606:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40960a:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  40960c:	7bfb      	ldrb	r3, [r7, #15]
  40960e:	7bfa      	ldrb	r2, [r7, #15]
  409610:	6879      	ldr	r1, [r7, #4]
  409612:	3210      	adds	r2, #16
  409614:	0152      	lsls	r2, r2, #5
  409616:	440a      	add	r2, r1
  409618:	6812      	ldr	r2, [r2, #0]
  40961a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
  40961e:	6839      	ldr	r1, [r7, #0]
  409620:	7909      	ldrb	r1, [r1, #4]
  409622:	0609      	lsls	r1, r1, #24
			~CAN_MMR_MOT_Msk) |
  409624:	430a      	orrs	r2, r1
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  409626:	6879      	ldr	r1, [r7, #4]
  409628:	3310      	adds	r3, #16
  40962a:	015b      	lsls	r3, r3, #5
  40962c:	440b      	add	r3, r1
  40962e:	601a      	str	r2, [r3, #0]
}
  409630:	3714      	adds	r7, #20
  409632:	46bd      	mov	sp, r7
  409634:	f85d 7b04 	ldr.w	r7, [sp], #4
  409638:	4770      	bx	lr
	...

0040963c <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
  40963c:	b580      	push	{r7, lr}
  40963e:	b084      	sub	sp, #16
  409640:	af00      	add	r7, sp, #0
  409642:	6078      	str	r0, [r7, #4]
  409644:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  409646:	683b      	ldr	r3, [r7, #0]
  409648:	681b      	ldr	r3, [r3, #0]
  40964a:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
  40964c:	7bfb      	ldrb	r3, [r7, #15]
  40964e:	4619      	mov	r1, r3
  409650:	6878      	ldr	r0, [r7, #4]
  409652:	4b27      	ldr	r3, [pc, #156]	; (4096f0 <can_mailbox_write+0xb4>)
  409654:	4798      	blx	r3
  409656:	4602      	mov	r2, r0
  409658:	683b      	ldr	r3, [r7, #0]
  40965a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
  40965c:	683b      	ldr	r3, [r7, #0]
  40965e:	689b      	ldr	r3, [r3, #8]
  409660:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
  409662:	68bb      	ldr	r3, [r7, #8]
  409664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  409668:	2b00      	cmp	r3, #0
  40966a:	d101      	bne.n	409670 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
  40966c:	2301      	movs	r3, #1
  40966e:	e03b      	b.n	4096e8 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
  409670:	683b      	ldr	r3, [r7, #0]
  409672:	795b      	ldrb	r3, [r3, #5]
  409674:	2b00      	cmp	r3, #0
  409676:	d00b      	beq.n	409690 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  409678:	7bfb      	ldrb	r3, [r7, #15]
  40967a:	683a      	ldr	r2, [r7, #0]
  40967c:	6912      	ldr	r2, [r2, #16]
  40967e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  409682:	6879      	ldr	r1, [r7, #4]
  409684:	015b      	lsls	r3, r3, #5
  409686:	440b      	add	r3, r1
  409688:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40968c:	601a      	str	r2, [r3, #0]
  40968e:	e008      	b.n	4096a2 <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  409690:	7bfb      	ldrb	r3, [r7, #15]
  409692:	683a      	ldr	r2, [r7, #0]
  409694:	6912      	ldr	r2, [r2, #16]
  409696:	6879      	ldr	r1, [r7, #4]
  409698:	015b      	lsls	r3, r3, #5
  40969a:	440b      	add	r3, r1
  40969c:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4096a0:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
  4096a2:	7bfb      	ldrb	r3, [r7, #15]
  4096a4:	683a      	ldr	r2, [r7, #0]
  4096a6:	6992      	ldr	r2, [r2, #24]
  4096a8:	6879      	ldr	r1, [r7, #4]
  4096aa:	015b      	lsls	r3, r3, #5
  4096ac:	440b      	add	r3, r1
  4096ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
  4096b2:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {
  4096b4:	683b      	ldr	r3, [r7, #0]
  4096b6:	799b      	ldrb	r3, [r3, #6]
  4096b8:	2b04      	cmp	r3, #4
  4096ba:	d908      	bls.n	4096ce <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
  4096bc:	7bfb      	ldrb	r3, [r7, #15]
  4096be:	683a      	ldr	r2, [r7, #0]
  4096c0:	69d2      	ldr	r2, [r2, #28]
  4096c2:	6879      	ldr	r1, [r7, #4]
  4096c4:	015b      	lsls	r3, r3, #5
  4096c6:	440b      	add	r3, r1
  4096c8:	f503 7306 	add.w	r3, r3, #536	; 0x218
  4096cc:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
  4096ce:	7bfb      	ldrb	r3, [r7, #15]
  4096d0:	683a      	ldr	r2, [r7, #0]
  4096d2:	7992      	ldrb	r2, [r2, #6]
  4096d4:	0412      	lsls	r2, r2, #16
  4096d6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4096da:	6879      	ldr	r1, [r7, #4]
  4096dc:	015b      	lsls	r3, r3, #5
  4096de:	440b      	add	r3, r1
  4096e0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  4096e4:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
  4096e6:	2300      	movs	r3, #0
}
  4096e8:	4618      	mov	r0, r3
  4096ea:	3710      	adds	r7, #16
  4096ec:	46bd      	mov	sp, r7
  4096ee:	bd80      	pop	{r7, pc}
  4096f0:	004094f1 	.word	0x004094f1

004096f4 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
  4096f4:	b580      	push	{r7, lr}
  4096f6:	b08c      	sub	sp, #48	; 0x30
  4096f8:	af00      	add	r7, sp, #0
  4096fa:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
  4096fc:	2300      	movs	r3, #0
  4096fe:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  409700:	2300      	movs	r3, #0
  409702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  409706:	e00d      	b.n	409724 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
  409708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40970c:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
  40970e:	f107 030c 	add.w	r3, r7, #12
  409712:	4619      	mov	r1, r3
  409714:	6878      	ldr	r0, [r7, #4]
  409716:	4b07      	ldr	r3, [pc, #28]	; (409734 <can_reset_all_mailbox+0x40>)
  409718:	4798      	blx	r3
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  40971a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  40971e:	3301      	adds	r3, #1
  409720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  409724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  409728:	2b07      	cmp	r3, #7
  40972a:	d9ed      	bls.n	409708 <can_reset_all_mailbox+0x14>
	}
}
  40972c:	bf00      	nop
  40972e:	3730      	adds	r7, #48	; 0x30
  409730:	46bd      	mov	sp, r7
  409732:	bd80      	pop	{r7, pc}
  409734:	00409517 	.word	0x00409517

00409738 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  409738:	b480      	push	{r7}
  40973a:	b087      	sub	sp, #28
  40973c:	af00      	add	r7, sp, #0
  40973e:	60f8      	str	r0, [r7, #12]
  409740:	60b9      	str	r1, [r7, #8]
  409742:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  409744:	68fb      	ldr	r3, [r7, #12]
  409746:	687a      	ldr	r2, [r7, #4]
  409748:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40974a:	68bb      	ldr	r3, [r7, #8]
  40974c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  409750:	d04a      	beq.n	4097e8 <pio_set_peripheral+0xb0>
  409752:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  409756:	d808      	bhi.n	40976a <pio_set_peripheral+0x32>
  409758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40975c:	d016      	beq.n	40978c <pio_set_peripheral+0x54>
  40975e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  409762:	d02c      	beq.n	4097be <pio_set_peripheral+0x86>
  409764:	2b00      	cmp	r3, #0
  409766:	d069      	beq.n	40983c <pio_set_peripheral+0x104>
  409768:	e064      	b.n	409834 <pio_set_peripheral+0xfc>
  40976a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40976e:	d065      	beq.n	40983c <pio_set_peripheral+0x104>
  409770:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  409774:	d803      	bhi.n	40977e <pio_set_peripheral+0x46>
  409776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40977a:	d04a      	beq.n	409812 <pio_set_peripheral+0xda>
  40977c:	e05a      	b.n	409834 <pio_set_peripheral+0xfc>
  40977e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  409782:	d05b      	beq.n	40983c <pio_set_peripheral+0x104>
  409784:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  409788:	d058      	beq.n	40983c <pio_set_peripheral+0x104>
  40978a:	e053      	b.n	409834 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40978c:	68fb      	ldr	r3, [r7, #12]
  40978e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  409790:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  409792:	68fb      	ldr	r3, [r7, #12]
  409794:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  409796:	687b      	ldr	r3, [r7, #4]
  409798:	43d9      	mvns	r1, r3
  40979a:	697b      	ldr	r3, [r7, #20]
  40979c:	400b      	ands	r3, r1
  40979e:	401a      	ands	r2, r3
  4097a0:	68fb      	ldr	r3, [r7, #12]
  4097a2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4097a4:	68fb      	ldr	r3, [r7, #12]
  4097a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4097a8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4097aa:	68fb      	ldr	r3, [r7, #12]
  4097ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4097ae:	687b      	ldr	r3, [r7, #4]
  4097b0:	43d9      	mvns	r1, r3
  4097b2:	697b      	ldr	r3, [r7, #20]
  4097b4:	400b      	ands	r3, r1
  4097b6:	401a      	ands	r2, r3
  4097b8:	68fb      	ldr	r3, [r7, #12]
  4097ba:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4097bc:	e03a      	b.n	409834 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4097be:	68fb      	ldr	r3, [r7, #12]
  4097c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4097c2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4097c4:	687a      	ldr	r2, [r7, #4]
  4097c6:	697b      	ldr	r3, [r7, #20]
  4097c8:	431a      	orrs	r2, r3
  4097ca:	68fb      	ldr	r3, [r7, #12]
  4097cc:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4097ce:	68fb      	ldr	r3, [r7, #12]
  4097d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4097d2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4097d4:	68fb      	ldr	r3, [r7, #12]
  4097d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4097d8:	687b      	ldr	r3, [r7, #4]
  4097da:	43d9      	mvns	r1, r3
  4097dc:	697b      	ldr	r3, [r7, #20]
  4097de:	400b      	ands	r3, r1
  4097e0:	401a      	ands	r2, r3
  4097e2:	68fb      	ldr	r3, [r7, #12]
  4097e4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4097e6:	e025      	b.n	409834 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4097e8:	68fb      	ldr	r3, [r7, #12]
  4097ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4097ec:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4097ee:	68fb      	ldr	r3, [r7, #12]
  4097f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4097f2:	687b      	ldr	r3, [r7, #4]
  4097f4:	43d9      	mvns	r1, r3
  4097f6:	697b      	ldr	r3, [r7, #20]
  4097f8:	400b      	ands	r3, r1
  4097fa:	401a      	ands	r2, r3
  4097fc:	68fb      	ldr	r3, [r7, #12]
  4097fe:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  409800:	68fb      	ldr	r3, [r7, #12]
  409802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  409804:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  409806:	687a      	ldr	r2, [r7, #4]
  409808:	697b      	ldr	r3, [r7, #20]
  40980a:	431a      	orrs	r2, r3
  40980c:	68fb      	ldr	r3, [r7, #12]
  40980e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  409810:	e010      	b.n	409834 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  409812:	68fb      	ldr	r3, [r7, #12]
  409814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  409816:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  409818:	687a      	ldr	r2, [r7, #4]
  40981a:	697b      	ldr	r3, [r7, #20]
  40981c:	431a      	orrs	r2, r3
  40981e:	68fb      	ldr	r3, [r7, #12]
  409820:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  409822:	68fb      	ldr	r3, [r7, #12]
  409824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  409826:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  409828:	687a      	ldr	r2, [r7, #4]
  40982a:	697b      	ldr	r3, [r7, #20]
  40982c:	431a      	orrs	r2, r3
  40982e:	68fb      	ldr	r3, [r7, #12]
  409830:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  409832:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  409834:	68fb      	ldr	r3, [r7, #12]
  409836:	687a      	ldr	r2, [r7, #4]
  409838:	605a      	str	r2, [r3, #4]
  40983a:	e000      	b.n	40983e <pio_set_peripheral+0x106>
		return;
  40983c:	bf00      	nop
}
  40983e:	371c      	adds	r7, #28
  409840:	46bd      	mov	sp, r7
  409842:	f85d 7b04 	ldr.w	r7, [sp], #4
  409846:	4770      	bx	lr

00409848 <pio_pull_down>:
 * \param ul_pull_down_enable Indicates if the pin(s) internal pull-down shall
 * be configured.
 */
void pio_pull_down(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_down_enable)
{
  409848:	b480      	push	{r7}
  40984a:	b085      	sub	sp, #20
  40984c:	af00      	add	r7, sp, #0
  40984e:	60f8      	str	r0, [r7, #12]
  409850:	60b9      	str	r1, [r7, #8]
  409852:	607a      	str	r2, [r7, #4]
	/* Enable the pull-down if necessary */
	if (ul_pull_down_enable) {
  409854:	687b      	ldr	r3, [r7, #4]
  409856:	2b00      	cmp	r3, #0
  409858:	d004      	beq.n	409864 <pio_pull_down+0x1c>
		p_pio->PIO_PPDER = ul_mask;
  40985a:	68fb      	ldr	r3, [r7, #12]
  40985c:	68ba      	ldr	r2, [r7, #8]
  40985e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	} else {
		p_pio->PIO_PPDDR = ul_mask;
	}
}
  409862:	e003      	b.n	40986c <pio_pull_down+0x24>
		p_pio->PIO_PPDDR = ul_mask;
  409864:	68fb      	ldr	r3, [r7, #12]
  409866:	68ba      	ldr	r2, [r7, #8]
  409868:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
  40986c:	bf00      	nop
  40986e:	3714      	adds	r7, #20
  409870:	46bd      	mov	sp, r7
  409872:	f85d 7b04 	ldr.w	r7, [sp], #4
  409876:	4770      	bx	lr

00409878 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  409878:	b480      	push	{r7}
  40987a:	b083      	sub	sp, #12
  40987c:	af00      	add	r7, sp, #0
  40987e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  409880:	687b      	ldr	r3, [r7, #4]
  409882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  409884:	4618      	mov	r0, r3
  409886:	370c      	adds	r7, #12
  409888:	46bd      	mov	sp, r7
  40988a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40988e:	4770      	bx	lr

00409890 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  409890:	b480      	push	{r7}
  409892:	b083      	sub	sp, #12
  409894:	af00      	add	r7, sp, #0
  409896:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  409898:	687b      	ldr	r3, [r7, #4]
  40989a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  40989c:	4618      	mov	r0, r3
  40989e:	370c      	adds	r7, #12
  4098a0:	46bd      	mov	sp, r7
  4098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4098a6:	4770      	bx	lr

004098a8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4098a8:	b480      	push	{r7}
  4098aa:	b085      	sub	sp, #20
  4098ac:	af00      	add	r7, sp, #0
  4098ae:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4098b0:	491d      	ldr	r1, [pc, #116]	; (409928 <pmc_switch_mck_to_pllack+0x80>)
  4098b2:	4b1d      	ldr	r3, [pc, #116]	; (409928 <pmc_switch_mck_to_pllack+0x80>)
  4098b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4098b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4098ba:	687b      	ldr	r3, [r7, #4]
  4098bc:	4313      	orrs	r3, r2
  4098be:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4098c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4098c4:	60fb      	str	r3, [r7, #12]
  4098c6:	e007      	b.n	4098d8 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4098c8:	68fb      	ldr	r3, [r7, #12]
  4098ca:	2b00      	cmp	r3, #0
  4098cc:	d101      	bne.n	4098d2 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4098ce:	2301      	movs	r3, #1
  4098d0:	e023      	b.n	40991a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4098d2:	68fb      	ldr	r3, [r7, #12]
  4098d4:	3b01      	subs	r3, #1
  4098d6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4098d8:	4b13      	ldr	r3, [pc, #76]	; (409928 <pmc_switch_mck_to_pllack+0x80>)
  4098da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4098dc:	f003 0308 	and.w	r3, r3, #8
  4098e0:	2b00      	cmp	r3, #0
  4098e2:	d0f1      	beq.n	4098c8 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4098e4:	4a10      	ldr	r2, [pc, #64]	; (409928 <pmc_switch_mck_to_pllack+0x80>)
  4098e6:	4b10      	ldr	r3, [pc, #64]	; (409928 <pmc_switch_mck_to_pllack+0x80>)
  4098e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4098ea:	f023 0303 	bic.w	r3, r3, #3
  4098ee:	f043 0302 	orr.w	r3, r3, #2
  4098f2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4098f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4098f8:	60fb      	str	r3, [r7, #12]
  4098fa:	e007      	b.n	40990c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4098fc:	68fb      	ldr	r3, [r7, #12]
  4098fe:	2b00      	cmp	r3, #0
  409900:	d101      	bne.n	409906 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  409902:	2301      	movs	r3, #1
  409904:	e009      	b.n	40991a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  409906:	68fb      	ldr	r3, [r7, #12]
  409908:	3b01      	subs	r3, #1
  40990a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40990c:	4b06      	ldr	r3, [pc, #24]	; (409928 <pmc_switch_mck_to_pllack+0x80>)
  40990e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409910:	f003 0308 	and.w	r3, r3, #8
  409914:	2b00      	cmp	r3, #0
  409916:	d0f1      	beq.n	4098fc <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  409918:	2300      	movs	r3, #0
}
  40991a:	4618      	mov	r0, r3
  40991c:	3714      	adds	r7, #20
  40991e:	46bd      	mov	sp, r7
  409920:	f85d 7b04 	ldr.w	r7, [sp], #4
  409924:	4770      	bx	lr
  409926:	bf00      	nop
  409928:	400e0400 	.word	0x400e0400

0040992c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  40992c:	b480      	push	{r7}
  40992e:	b083      	sub	sp, #12
  409930:	af00      	add	r7, sp, #0
  409932:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  409934:	687b      	ldr	r3, [r7, #4]
  409936:	2b01      	cmp	r3, #1
  409938:	d107      	bne.n	40994a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40993a:	4a08      	ldr	r2, [pc, #32]	; (40995c <pmc_switch_sclk_to_32kxtal+0x30>)
  40993c:	4b07      	ldr	r3, [pc, #28]	; (40995c <pmc_switch_sclk_to_32kxtal+0x30>)
  40993e:	689b      	ldr	r3, [r3, #8]
  409940:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  409944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  409948:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40994a:	4b04      	ldr	r3, [pc, #16]	; (40995c <pmc_switch_sclk_to_32kxtal+0x30>)
  40994c:	4a04      	ldr	r2, [pc, #16]	; (409960 <pmc_switch_sclk_to_32kxtal+0x34>)
  40994e:	601a      	str	r2, [r3, #0]
}
  409950:	bf00      	nop
  409952:	370c      	adds	r7, #12
  409954:	46bd      	mov	sp, r7
  409956:	f85d 7b04 	ldr.w	r7, [sp], #4
  40995a:	4770      	bx	lr
  40995c:	400e1810 	.word	0x400e1810
  409960:	a5000008 	.word	0xa5000008

00409964 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  409964:	b480      	push	{r7}
  409966:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  409968:	4b09      	ldr	r3, [pc, #36]	; (409990 <pmc_osc_is_ready_32kxtal+0x2c>)
  40996a:	695b      	ldr	r3, [r3, #20]
  40996c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  409970:	2b00      	cmp	r3, #0
  409972:	d007      	beq.n	409984 <pmc_osc_is_ready_32kxtal+0x20>
  409974:	4b07      	ldr	r3, [pc, #28]	; (409994 <pmc_osc_is_ready_32kxtal+0x30>)
  409976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409978:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40997c:	2b00      	cmp	r3, #0
  40997e:	d001      	beq.n	409984 <pmc_osc_is_ready_32kxtal+0x20>
  409980:	2301      	movs	r3, #1
  409982:	e000      	b.n	409986 <pmc_osc_is_ready_32kxtal+0x22>
  409984:	2300      	movs	r3, #0
}
  409986:	4618      	mov	r0, r3
  409988:	46bd      	mov	sp, r7
  40998a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40998e:	4770      	bx	lr
  409990:	400e1810 	.word	0x400e1810
  409994:	400e0400 	.word	0x400e0400

00409998 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  409998:	b480      	push	{r7}
  40999a:	b083      	sub	sp, #12
  40999c:	af00      	add	r7, sp, #0
  40999e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4099a0:	4a18      	ldr	r2, [pc, #96]	; (409a04 <pmc_switch_mainck_to_fastrc+0x6c>)
  4099a2:	4b18      	ldr	r3, [pc, #96]	; (409a04 <pmc_switch_mainck_to_fastrc+0x6c>)
  4099a4:	6a1b      	ldr	r3, [r3, #32]
  4099a6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4099aa:	f043 0308 	orr.w	r3, r3, #8
  4099ae:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4099b0:	bf00      	nop
  4099b2:	4b14      	ldr	r3, [pc, #80]	; (409a04 <pmc_switch_mainck_to_fastrc+0x6c>)
  4099b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4099b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4099ba:	2b00      	cmp	r3, #0
  4099bc:	d0f9      	beq.n	4099b2 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4099be:	4911      	ldr	r1, [pc, #68]	; (409a04 <pmc_switch_mainck_to_fastrc+0x6c>)
  4099c0:	4b10      	ldr	r3, [pc, #64]	; (409a04 <pmc_switch_mainck_to_fastrc+0x6c>)
  4099c2:	6a1b      	ldr	r3, [r3, #32]
  4099c4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4099c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4099cc:	687a      	ldr	r2, [r7, #4]
  4099ce:	4313      	orrs	r3, r2
  4099d0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4099d4:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4099d6:	bf00      	nop
  4099d8:	4b0a      	ldr	r3, [pc, #40]	; (409a04 <pmc_switch_mainck_to_fastrc+0x6c>)
  4099da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4099dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4099e0:	2b00      	cmp	r3, #0
  4099e2:	d0f9      	beq.n	4099d8 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4099e4:	4a07      	ldr	r2, [pc, #28]	; (409a04 <pmc_switch_mainck_to_fastrc+0x6c>)
  4099e6:	4b07      	ldr	r3, [pc, #28]	; (409a04 <pmc_switch_mainck_to_fastrc+0x6c>)
  4099e8:	6a1b      	ldr	r3, [r3, #32]
  4099ea:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4099ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4099f2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4099f6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4099f8:	bf00      	nop
  4099fa:	370c      	adds	r7, #12
  4099fc:	46bd      	mov	sp, r7
  4099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  409a02:	4770      	bx	lr
  409a04:	400e0400 	.word	0x400e0400

00409a08 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  409a08:	b480      	push	{r7}
  409a0a:	b083      	sub	sp, #12
  409a0c:	af00      	add	r7, sp, #0
  409a0e:	6078      	str	r0, [r7, #4]
  409a10:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  409a12:	687b      	ldr	r3, [r7, #4]
  409a14:	2b00      	cmp	r3, #0
  409a16:	d008      	beq.n	409a2a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  409a18:	4916      	ldr	r1, [pc, #88]	; (409a74 <pmc_switch_mainck_to_xtal+0x6c>)
  409a1a:	4b16      	ldr	r3, [pc, #88]	; (409a74 <pmc_switch_mainck_to_xtal+0x6c>)
  409a1c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  409a1e:	4a16      	ldr	r2, [pc, #88]	; (409a78 <pmc_switch_mainck_to_xtal+0x70>)
  409a20:	401a      	ands	r2, r3
  409a22:	4b16      	ldr	r3, [pc, #88]	; (409a7c <pmc_switch_mainck_to_xtal+0x74>)
  409a24:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  409a26:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  409a28:	e01e      	b.n	409a68 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  409a2a:	4912      	ldr	r1, [pc, #72]	; (409a74 <pmc_switch_mainck_to_xtal+0x6c>)
  409a2c:	4b11      	ldr	r3, [pc, #68]	; (409a74 <pmc_switch_mainck_to_xtal+0x6c>)
  409a2e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  409a30:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  409a34:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  409a38:	683a      	ldr	r2, [r7, #0]
  409a3a:	0212      	lsls	r2, r2, #8
  409a3c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  409a3e:	4313      	orrs	r3, r2
  409a40:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  409a44:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  409a48:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  409a4a:	bf00      	nop
  409a4c:	4b09      	ldr	r3, [pc, #36]	; (409a74 <pmc_switch_mainck_to_xtal+0x6c>)
  409a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409a50:	f003 0301 	and.w	r3, r3, #1
  409a54:	2b00      	cmp	r3, #0
  409a56:	d0f9      	beq.n	409a4c <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  409a58:	4a06      	ldr	r2, [pc, #24]	; (409a74 <pmc_switch_mainck_to_xtal+0x6c>)
  409a5a:	4b06      	ldr	r3, [pc, #24]	; (409a74 <pmc_switch_mainck_to_xtal+0x6c>)
  409a5c:	6a1b      	ldr	r3, [r3, #32]
  409a5e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  409a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  409a66:	6213      	str	r3, [r2, #32]
}
  409a68:	bf00      	nop
  409a6a:	370c      	adds	r7, #12
  409a6c:	46bd      	mov	sp, r7
  409a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409a72:	4770      	bx	lr
  409a74:	400e0400 	.word	0x400e0400
  409a78:	fec8fffc 	.word	0xfec8fffc
  409a7c:	01370002 	.word	0x01370002

00409a80 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  409a80:	b480      	push	{r7}
  409a82:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  409a84:	4b04      	ldr	r3, [pc, #16]	; (409a98 <pmc_osc_is_ready_mainck+0x18>)
  409a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  409a8c:	4618      	mov	r0, r3
  409a8e:	46bd      	mov	sp, r7
  409a90:	f85d 7b04 	ldr.w	r7, [sp], #4
  409a94:	4770      	bx	lr
  409a96:	bf00      	nop
  409a98:	400e0400 	.word	0x400e0400

00409a9c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  409a9c:	b480      	push	{r7}
  409a9e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  409aa0:	4b04      	ldr	r3, [pc, #16]	; (409ab4 <pmc_disable_pllack+0x18>)
  409aa2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  409aa6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  409aa8:	bf00      	nop
  409aaa:	46bd      	mov	sp, r7
  409aac:	f85d 7b04 	ldr.w	r7, [sp], #4
  409ab0:	4770      	bx	lr
  409ab2:	bf00      	nop
  409ab4:	400e0400 	.word	0x400e0400

00409ab8 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  409ab8:	b480      	push	{r7}
  409aba:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  409abc:	4b04      	ldr	r3, [pc, #16]	; (409ad0 <pmc_is_locked_pllack+0x18>)
  409abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  409ac0:	f003 0302 	and.w	r3, r3, #2
}
  409ac4:	4618      	mov	r0, r3
  409ac6:	46bd      	mov	sp, r7
  409ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
  409acc:	4770      	bx	lr
  409ace:	bf00      	nop
  409ad0:	400e0400 	.word	0x400e0400

00409ad4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  409ad4:	b480      	push	{r7}
  409ad6:	b083      	sub	sp, #12
  409ad8:	af00      	add	r7, sp, #0
  409ada:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  409adc:	687b      	ldr	r3, [r7, #4]
  409ade:	2b2f      	cmp	r3, #47	; 0x2f
  409ae0:	d901      	bls.n	409ae6 <pmc_enable_periph_clk+0x12>
		return 1;
  409ae2:	2301      	movs	r3, #1
  409ae4:	e02f      	b.n	409b46 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  409ae6:	687b      	ldr	r3, [r7, #4]
  409ae8:	2b1f      	cmp	r3, #31
  409aea:	d813      	bhi.n	409b14 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  409aec:	4b19      	ldr	r3, [pc, #100]	; (409b54 <pmc_enable_periph_clk+0x80>)
  409aee:	699a      	ldr	r2, [r3, #24]
  409af0:	2101      	movs	r1, #1
  409af2:	687b      	ldr	r3, [r7, #4]
  409af4:	fa01 f303 	lsl.w	r3, r1, r3
  409af8:	401a      	ands	r2, r3
  409afa:	2101      	movs	r1, #1
  409afc:	687b      	ldr	r3, [r7, #4]
  409afe:	fa01 f303 	lsl.w	r3, r1, r3
  409b02:	429a      	cmp	r2, r3
  409b04:	d01e      	beq.n	409b44 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  409b06:	4a13      	ldr	r2, [pc, #76]	; (409b54 <pmc_enable_periph_clk+0x80>)
  409b08:	2101      	movs	r1, #1
  409b0a:	687b      	ldr	r3, [r7, #4]
  409b0c:	fa01 f303 	lsl.w	r3, r1, r3
  409b10:	6113      	str	r3, [r2, #16]
  409b12:	e017      	b.n	409b44 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  409b14:	687b      	ldr	r3, [r7, #4]
  409b16:	3b20      	subs	r3, #32
  409b18:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  409b1a:	4b0e      	ldr	r3, [pc, #56]	; (409b54 <pmc_enable_periph_clk+0x80>)
  409b1c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  409b20:	2101      	movs	r1, #1
  409b22:	687b      	ldr	r3, [r7, #4]
  409b24:	fa01 f303 	lsl.w	r3, r1, r3
  409b28:	401a      	ands	r2, r3
  409b2a:	2101      	movs	r1, #1
  409b2c:	687b      	ldr	r3, [r7, #4]
  409b2e:	fa01 f303 	lsl.w	r3, r1, r3
  409b32:	429a      	cmp	r2, r3
  409b34:	d006      	beq.n	409b44 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  409b36:	4a07      	ldr	r2, [pc, #28]	; (409b54 <pmc_enable_periph_clk+0x80>)
  409b38:	2101      	movs	r1, #1
  409b3a:	687b      	ldr	r3, [r7, #4]
  409b3c:	fa01 f303 	lsl.w	r3, r1, r3
  409b40:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  409b44:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  409b46:	4618      	mov	r0, r3
  409b48:	370c      	adds	r7, #12
  409b4a:	46bd      	mov	sp, r7
  409b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409b50:	4770      	bx	lr
  409b52:	bf00      	nop
  409b54:	400e0400 	.word	0x400e0400

00409b58 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  409b58:	b480      	push	{r7}
  409b5a:	b083      	sub	sp, #12
  409b5c:	af00      	add	r7, sp, #0
  409b5e:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  409b60:	687b      	ldr	r3, [r7, #4]
  409b62:	2208      	movs	r2, #8
  409b64:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  409b66:	687b      	ldr	r3, [r7, #4]
  409b68:	2220      	movs	r2, #32
  409b6a:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  409b6c:	687b      	ldr	r3, [r7, #4]
  409b6e:	2204      	movs	r2, #4
  409b70:	601a      	str	r2, [r3, #0]
}
  409b72:	bf00      	nop
  409b74:	370c      	adds	r7, #12
  409b76:	46bd      	mov	sp, r7
  409b78:	f85d 7b04 	ldr.w	r7, [sp], #4
  409b7c:	4770      	bx	lr
	...

00409b80 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  409b80:	b580      	push	{r7, lr}
  409b82:	b084      	sub	sp, #16
  409b84:	af00      	add	r7, sp, #0
  409b86:	6078      	str	r0, [r7, #4]
  409b88:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  409b8a:	2300      	movs	r3, #0
  409b8c:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  409b8e:	687b      	ldr	r3, [r7, #4]
  409b90:	f04f 32ff 	mov.w	r2, #4294967295
  409b94:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  409b96:	687b      	ldr	r3, [r7, #4]
  409b98:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  409b9a:	6878      	ldr	r0, [r7, #4]
  409b9c:	4b0e      	ldr	r3, [pc, #56]	; (409bd8 <twi_master_init+0x58>)
  409b9e:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  409ba0:	6878      	ldr	r0, [r7, #4]
  409ba2:	4b0e      	ldr	r3, [pc, #56]	; (409bdc <twi_master_init+0x5c>)
  409ba4:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  409ba6:	683b      	ldr	r3, [r7, #0]
  409ba8:	6859      	ldr	r1, [r3, #4]
  409baa:	683b      	ldr	r3, [r7, #0]
  409bac:	681b      	ldr	r3, [r3, #0]
  409bae:	461a      	mov	r2, r3
  409bb0:	6878      	ldr	r0, [r7, #4]
  409bb2:	4b0b      	ldr	r3, [pc, #44]	; (409be0 <twi_master_init+0x60>)
  409bb4:	4798      	blx	r3
  409bb6:	4603      	mov	r3, r0
  409bb8:	2b01      	cmp	r3, #1
  409bba:	d101      	bne.n	409bc0 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  409bbc:	2301      	movs	r3, #1
  409bbe:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  409bc0:	683b      	ldr	r3, [r7, #0]
  409bc2:	7a5b      	ldrb	r3, [r3, #9]
  409bc4:	2b01      	cmp	r3, #1
  409bc6:	d102      	bne.n	409bce <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  409bc8:	687b      	ldr	r3, [r7, #4]
  409bca:	2240      	movs	r2, #64	; 0x40
  409bcc:	601a      	str	r2, [r3, #0]
	}

	return status;
  409bce:	68fb      	ldr	r3, [r7, #12]
}
  409bd0:	4618      	mov	r0, r3
  409bd2:	3710      	adds	r7, #16
  409bd4:	46bd      	mov	sp, r7
  409bd6:	bd80      	pop	{r7, pc}
  409bd8:	00409e11 	.word	0x00409e11
  409bdc:	00409b59 	.word	0x00409b59
  409be0:	00409be5 	.word	0x00409be5

00409be4 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  409be4:	b480      	push	{r7}
  409be6:	b089      	sub	sp, #36	; 0x24
  409be8:	af00      	add	r7, sp, #0
  409bea:	60f8      	str	r0, [r7, #12]
  409bec:	60b9      	str	r1, [r7, #8]
  409bee:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  409bf0:	2300      	movs	r3, #0
  409bf2:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  409bf4:	68bb      	ldr	r3, [r7, #8]
  409bf6:	4a34      	ldr	r2, [pc, #208]	; (409cc8 <twi_set_speed+0xe4>)
  409bf8:	4293      	cmp	r3, r2
  409bfa:	d901      	bls.n	409c00 <twi_set_speed+0x1c>
		return FAIL;
  409bfc:	2301      	movs	r3, #1
  409bfe:	e05d      	b.n	409cbc <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  409c00:	68bb      	ldr	r3, [r7, #8]
  409c02:	4a32      	ldr	r2, [pc, #200]	; (409ccc <twi_set_speed+0xe8>)
  409c04:	4293      	cmp	r3, r2
  409c06:	d937      	bls.n	409c78 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  409c08:	687b      	ldr	r3, [r7, #4]
  409c0a:	4a31      	ldr	r2, [pc, #196]	; (409cd0 <twi_set_speed+0xec>)
  409c0c:	fba2 2303 	umull	r2, r3, r2, r3
  409c10:	0b9b      	lsrs	r3, r3, #14
  409c12:	3b04      	subs	r3, #4
  409c14:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  409c16:	68ba      	ldr	r2, [r7, #8]
  409c18:	4b2e      	ldr	r3, [pc, #184]	; (409cd4 <twi_set_speed+0xf0>)
  409c1a:	4413      	add	r3, r2
  409c1c:	009b      	lsls	r3, r3, #2
  409c1e:	687a      	ldr	r2, [r7, #4]
  409c20:	fbb2 f3f3 	udiv	r3, r2, r3
  409c24:	3b04      	subs	r3, #4
  409c26:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409c28:	e005      	b.n	409c36 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  409c2a:	69fb      	ldr	r3, [r7, #28]
  409c2c:	3301      	adds	r3, #1
  409c2e:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  409c30:	697b      	ldr	r3, [r7, #20]
  409c32:	085b      	lsrs	r3, r3, #1
  409c34:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409c36:	697b      	ldr	r3, [r7, #20]
  409c38:	2bff      	cmp	r3, #255	; 0xff
  409c3a:	d909      	bls.n	409c50 <twi_set_speed+0x6c>
  409c3c:	69fb      	ldr	r3, [r7, #28]
  409c3e:	2b06      	cmp	r3, #6
  409c40:	d9f3      	bls.n	409c2a <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409c42:	e005      	b.n	409c50 <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  409c44:	69fb      	ldr	r3, [r7, #28]
  409c46:	3301      	adds	r3, #1
  409c48:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  409c4a:	693b      	ldr	r3, [r7, #16]
  409c4c:	085b      	lsrs	r3, r3, #1
  409c4e:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409c50:	693b      	ldr	r3, [r7, #16]
  409c52:	2bff      	cmp	r3, #255	; 0xff
  409c54:	d902      	bls.n	409c5c <twi_set_speed+0x78>
  409c56:	69fb      	ldr	r3, [r7, #28]
  409c58:	2b06      	cmp	r3, #6
  409c5a:	d9f3      	bls.n	409c44 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  409c5c:	697b      	ldr	r3, [r7, #20]
  409c5e:	b2da      	uxtb	r2, r3
  409c60:	693b      	ldr	r3, [r7, #16]
  409c62:	021b      	lsls	r3, r3, #8
  409c64:	b29b      	uxth	r3, r3
  409c66:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  409c68:	69fb      	ldr	r3, [r7, #28]
  409c6a:	041b      	lsls	r3, r3, #16
  409c6c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  409c70:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  409c72:	68fb      	ldr	r3, [r7, #12]
  409c74:	611a      	str	r2, [r3, #16]
  409c76:	e020      	b.n	409cba <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  409c78:	68bb      	ldr	r3, [r7, #8]
  409c7a:	005b      	lsls	r3, r3, #1
  409c7c:	687a      	ldr	r2, [r7, #4]
  409c7e:	fbb2 f3f3 	udiv	r3, r2, r3
  409c82:	3b04      	subs	r3, #4
  409c84:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409c86:	e005      	b.n	409c94 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  409c88:	69fb      	ldr	r3, [r7, #28]
  409c8a:	3301      	adds	r3, #1
  409c8c:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  409c8e:	69bb      	ldr	r3, [r7, #24]
  409c90:	085b      	lsrs	r3, r3, #1
  409c92:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  409c94:	69bb      	ldr	r3, [r7, #24]
  409c96:	2bff      	cmp	r3, #255	; 0xff
  409c98:	d902      	bls.n	409ca0 <twi_set_speed+0xbc>
  409c9a:	69fb      	ldr	r3, [r7, #28]
  409c9c:	2b06      	cmp	r3, #6
  409c9e:	d9f3      	bls.n	409c88 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  409ca0:	69bb      	ldr	r3, [r7, #24]
  409ca2:	b2da      	uxtb	r2, r3
  409ca4:	69bb      	ldr	r3, [r7, #24]
  409ca6:	021b      	lsls	r3, r3, #8
  409ca8:	b29b      	uxth	r3, r3
  409caa:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  409cac:	69fb      	ldr	r3, [r7, #28]
  409cae:	041b      	lsls	r3, r3, #16
  409cb0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  409cb4:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  409cb6:	68fb      	ldr	r3, [r7, #12]
  409cb8:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  409cba:	2300      	movs	r3, #0
}
  409cbc:	4618      	mov	r0, r3
  409cbe:	3724      	adds	r7, #36	; 0x24
  409cc0:	46bd      	mov	sp, r7
  409cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  409cc6:	4770      	bx	lr
  409cc8:	00061a80 	.word	0x00061a80
  409ccc:	0005dc00 	.word	0x0005dc00
  409cd0:	057619f1 	.word	0x057619f1
  409cd4:	3ffd1200 	.word	0x3ffd1200

00409cd8 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  409cd8:	b480      	push	{r7}
  409cda:	b085      	sub	sp, #20
  409cdc:	af00      	add	r7, sp, #0
  409cde:	6078      	str	r0, [r7, #4]
  409ce0:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  409ce2:	683b      	ldr	r3, [r7, #0]
  409ce4:	2b00      	cmp	r3, #0
  409ce6:	d101      	bne.n	409cec <twi_mk_addr+0x14>
		return 0;
  409ce8:	2300      	movs	r3, #0
  409cea:	e01d      	b.n	409d28 <twi_mk_addr+0x50>

	val = addr[0];
  409cec:	687b      	ldr	r3, [r7, #4]
  409cee:	781b      	ldrb	r3, [r3, #0]
  409cf0:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  409cf2:	683b      	ldr	r3, [r7, #0]
  409cf4:	2b01      	cmp	r3, #1
  409cf6:	dd09      	ble.n	409d0c <twi_mk_addr+0x34>
		val <<= 8;
  409cf8:	68fb      	ldr	r3, [r7, #12]
  409cfa:	021b      	lsls	r3, r3, #8
  409cfc:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  409cfe:	687b      	ldr	r3, [r7, #4]
  409d00:	3301      	adds	r3, #1
  409d02:	781b      	ldrb	r3, [r3, #0]
  409d04:	461a      	mov	r2, r3
  409d06:	68fb      	ldr	r3, [r7, #12]
  409d08:	4313      	orrs	r3, r2
  409d0a:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  409d0c:	683b      	ldr	r3, [r7, #0]
  409d0e:	2b02      	cmp	r3, #2
  409d10:	dd09      	ble.n	409d26 <twi_mk_addr+0x4e>
		val <<= 8;
  409d12:	68fb      	ldr	r3, [r7, #12]
  409d14:	021b      	lsls	r3, r3, #8
  409d16:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  409d18:	687b      	ldr	r3, [r7, #4]
  409d1a:	3302      	adds	r3, #2
  409d1c:	781b      	ldrb	r3, [r3, #0]
  409d1e:	461a      	mov	r2, r3
  409d20:	68fb      	ldr	r3, [r7, #12]
  409d22:	4313      	orrs	r3, r2
  409d24:	60fb      	str	r3, [r7, #12]
	}
	return val;
  409d26:	68fb      	ldr	r3, [r7, #12]
}
  409d28:	4618      	mov	r0, r3
  409d2a:	3714      	adds	r7, #20
  409d2c:	46bd      	mov	sp, r7
  409d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  409d32:	4770      	bx	lr

00409d34 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  409d34:	b580      	push	{r7, lr}
  409d36:	b086      	sub	sp, #24
  409d38:	af00      	add	r7, sp, #0
  409d3a:	6078      	str	r0, [r7, #4]
  409d3c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  409d3e:	683b      	ldr	r3, [r7, #0]
  409d40:	68db      	ldr	r3, [r3, #12]
  409d42:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  409d44:	683b      	ldr	r3, [r7, #0]
  409d46:	689b      	ldr	r3, [r3, #8]
  409d48:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  409d4a:	697b      	ldr	r3, [r7, #20]
  409d4c:	2b00      	cmp	r3, #0
  409d4e:	d101      	bne.n	409d54 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  409d50:	2301      	movs	r3, #1
  409d52:	e056      	b.n	409e02 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  409d54:	687b      	ldr	r3, [r7, #4]
  409d56:	2200      	movs	r2, #0
  409d58:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  409d5a:	683b      	ldr	r3, [r7, #0]
  409d5c:	7c1b      	ldrb	r3, [r3, #16]
  409d5e:	041b      	lsls	r3, r3, #16
  409d60:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  409d64:	683b      	ldr	r3, [r7, #0]
  409d66:	685b      	ldr	r3, [r3, #4]
  409d68:	021b      	lsls	r3, r3, #8
  409d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  409d6e:	431a      	orrs	r2, r3
  409d70:	687b      	ldr	r3, [r7, #4]
  409d72:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  409d74:	687b      	ldr	r3, [r7, #4]
  409d76:	2200      	movs	r2, #0
  409d78:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  409d7a:	683a      	ldr	r2, [r7, #0]
  409d7c:	683b      	ldr	r3, [r7, #0]
  409d7e:	685b      	ldr	r3, [r3, #4]
  409d80:	4619      	mov	r1, r3
  409d82:	4610      	mov	r0, r2
  409d84:	4b21      	ldr	r3, [pc, #132]	; (409e0c <twi_master_write+0xd8>)
  409d86:	4798      	blx	r3
  409d88:	4602      	mov	r2, r0
  409d8a:	687b      	ldr	r3, [r7, #4]
  409d8c:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  409d8e:	e019      	b.n	409dc4 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  409d90:	687b      	ldr	r3, [r7, #4]
  409d92:	6a1b      	ldr	r3, [r3, #32]
  409d94:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  409d96:	68fb      	ldr	r3, [r7, #12]
  409d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
  409d9c:	2b00      	cmp	r3, #0
  409d9e:	d001      	beq.n	409da4 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  409da0:	2305      	movs	r3, #5
  409da2:	e02e      	b.n	409e02 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  409da4:	68fb      	ldr	r3, [r7, #12]
  409da6:	f003 0304 	and.w	r3, r3, #4
  409daa:	2b00      	cmp	r3, #0
  409dac:	d100      	bne.n	409db0 <twi_master_write+0x7c>
			continue;
  409dae:	e009      	b.n	409dc4 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  409db0:	693b      	ldr	r3, [r7, #16]
  409db2:	1c5a      	adds	r2, r3, #1
  409db4:	613a      	str	r2, [r7, #16]
  409db6:	781b      	ldrb	r3, [r3, #0]
  409db8:	461a      	mov	r2, r3
  409dba:	687b      	ldr	r3, [r7, #4]
  409dbc:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  409dbe:	697b      	ldr	r3, [r7, #20]
  409dc0:	3b01      	subs	r3, #1
  409dc2:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  409dc4:	697b      	ldr	r3, [r7, #20]
  409dc6:	2b00      	cmp	r3, #0
  409dc8:	d1e2      	bne.n	409d90 <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  409dca:	687b      	ldr	r3, [r7, #4]
  409dcc:	6a1b      	ldr	r3, [r3, #32]
  409dce:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  409dd0:	68fb      	ldr	r3, [r7, #12]
  409dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  409dd6:	2b00      	cmp	r3, #0
  409dd8:	d001      	beq.n	409dde <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  409dda:	2305      	movs	r3, #5
  409ddc:	e011      	b.n	409e02 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  409dde:	68fb      	ldr	r3, [r7, #12]
  409de0:	f003 0304 	and.w	r3, r3, #4
  409de4:	2b00      	cmp	r3, #0
  409de6:	d100      	bne.n	409dea <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  409de8:	e7ef      	b.n	409dca <twi_master_write+0x96>
			break;
  409dea:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  409dec:	687b      	ldr	r3, [r7, #4]
  409dee:	2202      	movs	r2, #2
  409df0:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  409df2:	bf00      	nop
  409df4:	687b      	ldr	r3, [r7, #4]
  409df6:	6a1b      	ldr	r3, [r3, #32]
  409df8:	f003 0301 	and.w	r3, r3, #1
  409dfc:	2b00      	cmp	r3, #0
  409dfe:	d0f9      	beq.n	409df4 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  409e00:	2300      	movs	r3, #0
}
  409e02:	4618      	mov	r0, r3
  409e04:	3718      	adds	r7, #24
  409e06:	46bd      	mov	sp, r7
  409e08:	bd80      	pop	{r7, pc}
  409e0a:	bf00      	nop
  409e0c:	00409cd9 	.word	0x00409cd9

00409e10 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  409e10:	b480      	push	{r7}
  409e12:	b083      	sub	sp, #12
  409e14:	af00      	add	r7, sp, #0
  409e16:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  409e18:	687b      	ldr	r3, [r7, #4]
  409e1a:	2280      	movs	r2, #128	; 0x80
  409e1c:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  409e1e:	687b      	ldr	r3, [r7, #4]
  409e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  409e22:	bf00      	nop
  409e24:	370c      	adds	r7, #12
  409e26:	46bd      	mov	sp, r7
  409e28:	f85d 7b04 	ldr.w	r7, [sp], #4
  409e2c:	4770      	bx	lr
	...

00409e30 <__aeabi_uldivmod>:
  409e30:	b953      	cbnz	r3, 409e48 <__aeabi_uldivmod+0x18>
  409e32:	b94a      	cbnz	r2, 409e48 <__aeabi_uldivmod+0x18>
  409e34:	2900      	cmp	r1, #0
  409e36:	bf08      	it	eq
  409e38:	2800      	cmpeq	r0, #0
  409e3a:	bf1c      	itt	ne
  409e3c:	f04f 31ff 	movne.w	r1, #4294967295
  409e40:	f04f 30ff 	movne.w	r0, #4294967295
  409e44:	f000 b97a 	b.w	40a13c <__aeabi_idiv0>
  409e48:	f1ad 0c08 	sub.w	ip, sp, #8
  409e4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409e50:	f000 f806 	bl	409e60 <__udivmoddi4>
  409e54:	f8dd e004 	ldr.w	lr, [sp, #4]
  409e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409e5c:	b004      	add	sp, #16
  409e5e:	4770      	bx	lr

00409e60 <__udivmoddi4>:
  409e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409e64:	468c      	mov	ip, r1
  409e66:	460d      	mov	r5, r1
  409e68:	4604      	mov	r4, r0
  409e6a:	9e08      	ldr	r6, [sp, #32]
  409e6c:	2b00      	cmp	r3, #0
  409e6e:	d151      	bne.n	409f14 <__udivmoddi4+0xb4>
  409e70:	428a      	cmp	r2, r1
  409e72:	4617      	mov	r7, r2
  409e74:	d96d      	bls.n	409f52 <__udivmoddi4+0xf2>
  409e76:	fab2 fe82 	clz	lr, r2
  409e7a:	f1be 0f00 	cmp.w	lr, #0
  409e7e:	d00b      	beq.n	409e98 <__udivmoddi4+0x38>
  409e80:	f1ce 0c20 	rsb	ip, lr, #32
  409e84:	fa01 f50e 	lsl.w	r5, r1, lr
  409e88:	fa20 fc0c 	lsr.w	ip, r0, ip
  409e8c:	fa02 f70e 	lsl.w	r7, r2, lr
  409e90:	ea4c 0c05 	orr.w	ip, ip, r5
  409e94:	fa00 f40e 	lsl.w	r4, r0, lr
  409e98:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409e9c:	0c25      	lsrs	r5, r4, #16
  409e9e:	fbbc f8fa 	udiv	r8, ip, sl
  409ea2:	fa1f f987 	uxth.w	r9, r7
  409ea6:	fb0a cc18 	mls	ip, sl, r8, ip
  409eaa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409eae:	fb08 f309 	mul.w	r3, r8, r9
  409eb2:	42ab      	cmp	r3, r5
  409eb4:	d90a      	bls.n	409ecc <__udivmoddi4+0x6c>
  409eb6:	19ed      	adds	r5, r5, r7
  409eb8:	f108 32ff 	add.w	r2, r8, #4294967295
  409ebc:	f080 8123 	bcs.w	40a106 <__udivmoddi4+0x2a6>
  409ec0:	42ab      	cmp	r3, r5
  409ec2:	f240 8120 	bls.w	40a106 <__udivmoddi4+0x2a6>
  409ec6:	f1a8 0802 	sub.w	r8, r8, #2
  409eca:	443d      	add	r5, r7
  409ecc:	1aed      	subs	r5, r5, r3
  409ece:	b2a4      	uxth	r4, r4
  409ed0:	fbb5 f0fa 	udiv	r0, r5, sl
  409ed4:	fb0a 5510 	mls	r5, sl, r0, r5
  409ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  409edc:	fb00 f909 	mul.w	r9, r0, r9
  409ee0:	45a1      	cmp	r9, r4
  409ee2:	d909      	bls.n	409ef8 <__udivmoddi4+0x98>
  409ee4:	19e4      	adds	r4, r4, r7
  409ee6:	f100 33ff 	add.w	r3, r0, #4294967295
  409eea:	f080 810a 	bcs.w	40a102 <__udivmoddi4+0x2a2>
  409eee:	45a1      	cmp	r9, r4
  409ef0:	f240 8107 	bls.w	40a102 <__udivmoddi4+0x2a2>
  409ef4:	3802      	subs	r0, #2
  409ef6:	443c      	add	r4, r7
  409ef8:	eba4 0409 	sub.w	r4, r4, r9
  409efc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409f00:	2100      	movs	r1, #0
  409f02:	2e00      	cmp	r6, #0
  409f04:	d061      	beq.n	409fca <__udivmoddi4+0x16a>
  409f06:	fa24 f40e 	lsr.w	r4, r4, lr
  409f0a:	2300      	movs	r3, #0
  409f0c:	6034      	str	r4, [r6, #0]
  409f0e:	6073      	str	r3, [r6, #4]
  409f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409f14:	428b      	cmp	r3, r1
  409f16:	d907      	bls.n	409f28 <__udivmoddi4+0xc8>
  409f18:	2e00      	cmp	r6, #0
  409f1a:	d054      	beq.n	409fc6 <__udivmoddi4+0x166>
  409f1c:	2100      	movs	r1, #0
  409f1e:	e886 0021 	stmia.w	r6, {r0, r5}
  409f22:	4608      	mov	r0, r1
  409f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409f28:	fab3 f183 	clz	r1, r3
  409f2c:	2900      	cmp	r1, #0
  409f2e:	f040 808e 	bne.w	40a04e <__udivmoddi4+0x1ee>
  409f32:	42ab      	cmp	r3, r5
  409f34:	d302      	bcc.n	409f3c <__udivmoddi4+0xdc>
  409f36:	4282      	cmp	r2, r0
  409f38:	f200 80fa 	bhi.w	40a130 <__udivmoddi4+0x2d0>
  409f3c:	1a84      	subs	r4, r0, r2
  409f3e:	eb65 0503 	sbc.w	r5, r5, r3
  409f42:	2001      	movs	r0, #1
  409f44:	46ac      	mov	ip, r5
  409f46:	2e00      	cmp	r6, #0
  409f48:	d03f      	beq.n	409fca <__udivmoddi4+0x16a>
  409f4a:	e886 1010 	stmia.w	r6, {r4, ip}
  409f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409f52:	b912      	cbnz	r2, 409f5a <__udivmoddi4+0xfa>
  409f54:	2701      	movs	r7, #1
  409f56:	fbb7 f7f2 	udiv	r7, r7, r2
  409f5a:	fab7 fe87 	clz	lr, r7
  409f5e:	f1be 0f00 	cmp.w	lr, #0
  409f62:	d134      	bne.n	409fce <__udivmoddi4+0x16e>
  409f64:	1beb      	subs	r3, r5, r7
  409f66:	0c3a      	lsrs	r2, r7, #16
  409f68:	fa1f fc87 	uxth.w	ip, r7
  409f6c:	2101      	movs	r1, #1
  409f6e:	fbb3 f8f2 	udiv	r8, r3, r2
  409f72:	0c25      	lsrs	r5, r4, #16
  409f74:	fb02 3318 	mls	r3, r2, r8, r3
  409f78:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409f7c:	fb0c f308 	mul.w	r3, ip, r8
  409f80:	42ab      	cmp	r3, r5
  409f82:	d907      	bls.n	409f94 <__udivmoddi4+0x134>
  409f84:	19ed      	adds	r5, r5, r7
  409f86:	f108 30ff 	add.w	r0, r8, #4294967295
  409f8a:	d202      	bcs.n	409f92 <__udivmoddi4+0x132>
  409f8c:	42ab      	cmp	r3, r5
  409f8e:	f200 80d1 	bhi.w	40a134 <__udivmoddi4+0x2d4>
  409f92:	4680      	mov	r8, r0
  409f94:	1aed      	subs	r5, r5, r3
  409f96:	b2a3      	uxth	r3, r4
  409f98:	fbb5 f0f2 	udiv	r0, r5, r2
  409f9c:	fb02 5510 	mls	r5, r2, r0, r5
  409fa0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409fa4:	fb0c fc00 	mul.w	ip, ip, r0
  409fa8:	45a4      	cmp	ip, r4
  409faa:	d907      	bls.n	409fbc <__udivmoddi4+0x15c>
  409fac:	19e4      	adds	r4, r4, r7
  409fae:	f100 33ff 	add.w	r3, r0, #4294967295
  409fb2:	d202      	bcs.n	409fba <__udivmoddi4+0x15a>
  409fb4:	45a4      	cmp	ip, r4
  409fb6:	f200 80b8 	bhi.w	40a12a <__udivmoddi4+0x2ca>
  409fba:	4618      	mov	r0, r3
  409fbc:	eba4 040c 	sub.w	r4, r4, ip
  409fc0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409fc4:	e79d      	b.n	409f02 <__udivmoddi4+0xa2>
  409fc6:	4631      	mov	r1, r6
  409fc8:	4630      	mov	r0, r6
  409fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409fce:	f1ce 0420 	rsb	r4, lr, #32
  409fd2:	fa05 f30e 	lsl.w	r3, r5, lr
  409fd6:	fa07 f70e 	lsl.w	r7, r7, lr
  409fda:	fa20 f804 	lsr.w	r8, r0, r4
  409fde:	0c3a      	lsrs	r2, r7, #16
  409fe0:	fa25 f404 	lsr.w	r4, r5, r4
  409fe4:	ea48 0803 	orr.w	r8, r8, r3
  409fe8:	fbb4 f1f2 	udiv	r1, r4, r2
  409fec:	ea4f 4518 	mov.w	r5, r8, lsr #16
  409ff0:	fb02 4411 	mls	r4, r2, r1, r4
  409ff4:	fa1f fc87 	uxth.w	ip, r7
  409ff8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  409ffc:	fb01 f30c 	mul.w	r3, r1, ip
  40a000:	42ab      	cmp	r3, r5
  40a002:	fa00 f40e 	lsl.w	r4, r0, lr
  40a006:	d909      	bls.n	40a01c <__udivmoddi4+0x1bc>
  40a008:	19ed      	adds	r5, r5, r7
  40a00a:	f101 30ff 	add.w	r0, r1, #4294967295
  40a00e:	f080 808a 	bcs.w	40a126 <__udivmoddi4+0x2c6>
  40a012:	42ab      	cmp	r3, r5
  40a014:	f240 8087 	bls.w	40a126 <__udivmoddi4+0x2c6>
  40a018:	3902      	subs	r1, #2
  40a01a:	443d      	add	r5, r7
  40a01c:	1aeb      	subs	r3, r5, r3
  40a01e:	fa1f f588 	uxth.w	r5, r8
  40a022:	fbb3 f0f2 	udiv	r0, r3, r2
  40a026:	fb02 3310 	mls	r3, r2, r0, r3
  40a02a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a02e:	fb00 f30c 	mul.w	r3, r0, ip
  40a032:	42ab      	cmp	r3, r5
  40a034:	d907      	bls.n	40a046 <__udivmoddi4+0x1e6>
  40a036:	19ed      	adds	r5, r5, r7
  40a038:	f100 38ff 	add.w	r8, r0, #4294967295
  40a03c:	d26f      	bcs.n	40a11e <__udivmoddi4+0x2be>
  40a03e:	42ab      	cmp	r3, r5
  40a040:	d96d      	bls.n	40a11e <__udivmoddi4+0x2be>
  40a042:	3802      	subs	r0, #2
  40a044:	443d      	add	r5, r7
  40a046:	1aeb      	subs	r3, r5, r3
  40a048:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40a04c:	e78f      	b.n	409f6e <__udivmoddi4+0x10e>
  40a04e:	f1c1 0720 	rsb	r7, r1, #32
  40a052:	fa22 f807 	lsr.w	r8, r2, r7
  40a056:	408b      	lsls	r3, r1
  40a058:	fa05 f401 	lsl.w	r4, r5, r1
  40a05c:	ea48 0303 	orr.w	r3, r8, r3
  40a060:	fa20 fe07 	lsr.w	lr, r0, r7
  40a064:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a068:	40fd      	lsrs	r5, r7
  40a06a:	ea4e 0e04 	orr.w	lr, lr, r4
  40a06e:	fbb5 f9fc 	udiv	r9, r5, ip
  40a072:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40a076:	fb0c 5519 	mls	r5, ip, r9, r5
  40a07a:	fa1f f883 	uxth.w	r8, r3
  40a07e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40a082:	fb09 f408 	mul.w	r4, r9, r8
  40a086:	42ac      	cmp	r4, r5
  40a088:	fa02 f201 	lsl.w	r2, r2, r1
  40a08c:	fa00 fa01 	lsl.w	sl, r0, r1
  40a090:	d908      	bls.n	40a0a4 <__udivmoddi4+0x244>
  40a092:	18ed      	adds	r5, r5, r3
  40a094:	f109 30ff 	add.w	r0, r9, #4294967295
  40a098:	d243      	bcs.n	40a122 <__udivmoddi4+0x2c2>
  40a09a:	42ac      	cmp	r4, r5
  40a09c:	d941      	bls.n	40a122 <__udivmoddi4+0x2c2>
  40a09e:	f1a9 0902 	sub.w	r9, r9, #2
  40a0a2:	441d      	add	r5, r3
  40a0a4:	1b2d      	subs	r5, r5, r4
  40a0a6:	fa1f fe8e 	uxth.w	lr, lr
  40a0aa:	fbb5 f0fc 	udiv	r0, r5, ip
  40a0ae:	fb0c 5510 	mls	r5, ip, r0, r5
  40a0b2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40a0b6:	fb00 f808 	mul.w	r8, r0, r8
  40a0ba:	45a0      	cmp	r8, r4
  40a0bc:	d907      	bls.n	40a0ce <__udivmoddi4+0x26e>
  40a0be:	18e4      	adds	r4, r4, r3
  40a0c0:	f100 35ff 	add.w	r5, r0, #4294967295
  40a0c4:	d229      	bcs.n	40a11a <__udivmoddi4+0x2ba>
  40a0c6:	45a0      	cmp	r8, r4
  40a0c8:	d927      	bls.n	40a11a <__udivmoddi4+0x2ba>
  40a0ca:	3802      	subs	r0, #2
  40a0cc:	441c      	add	r4, r3
  40a0ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40a0d2:	eba4 0408 	sub.w	r4, r4, r8
  40a0d6:	fba0 8902 	umull	r8, r9, r0, r2
  40a0da:	454c      	cmp	r4, r9
  40a0dc:	46c6      	mov	lr, r8
  40a0de:	464d      	mov	r5, r9
  40a0e0:	d315      	bcc.n	40a10e <__udivmoddi4+0x2ae>
  40a0e2:	d012      	beq.n	40a10a <__udivmoddi4+0x2aa>
  40a0e4:	b156      	cbz	r6, 40a0fc <__udivmoddi4+0x29c>
  40a0e6:	ebba 030e 	subs.w	r3, sl, lr
  40a0ea:	eb64 0405 	sbc.w	r4, r4, r5
  40a0ee:	fa04 f707 	lsl.w	r7, r4, r7
  40a0f2:	40cb      	lsrs	r3, r1
  40a0f4:	431f      	orrs	r7, r3
  40a0f6:	40cc      	lsrs	r4, r1
  40a0f8:	6037      	str	r7, [r6, #0]
  40a0fa:	6074      	str	r4, [r6, #4]
  40a0fc:	2100      	movs	r1, #0
  40a0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a102:	4618      	mov	r0, r3
  40a104:	e6f8      	b.n	409ef8 <__udivmoddi4+0x98>
  40a106:	4690      	mov	r8, r2
  40a108:	e6e0      	b.n	409ecc <__udivmoddi4+0x6c>
  40a10a:	45c2      	cmp	sl, r8
  40a10c:	d2ea      	bcs.n	40a0e4 <__udivmoddi4+0x284>
  40a10e:	ebb8 0e02 	subs.w	lr, r8, r2
  40a112:	eb69 0503 	sbc.w	r5, r9, r3
  40a116:	3801      	subs	r0, #1
  40a118:	e7e4      	b.n	40a0e4 <__udivmoddi4+0x284>
  40a11a:	4628      	mov	r0, r5
  40a11c:	e7d7      	b.n	40a0ce <__udivmoddi4+0x26e>
  40a11e:	4640      	mov	r0, r8
  40a120:	e791      	b.n	40a046 <__udivmoddi4+0x1e6>
  40a122:	4681      	mov	r9, r0
  40a124:	e7be      	b.n	40a0a4 <__udivmoddi4+0x244>
  40a126:	4601      	mov	r1, r0
  40a128:	e778      	b.n	40a01c <__udivmoddi4+0x1bc>
  40a12a:	3802      	subs	r0, #2
  40a12c:	443c      	add	r4, r7
  40a12e:	e745      	b.n	409fbc <__udivmoddi4+0x15c>
  40a130:	4608      	mov	r0, r1
  40a132:	e708      	b.n	409f46 <__udivmoddi4+0xe6>
  40a134:	f1a8 0802 	sub.w	r8, r8, #2
  40a138:	443d      	add	r5, r7
  40a13a:	e72b      	b.n	409f94 <__udivmoddi4+0x134>

0040a13c <__aeabi_idiv0>:
  40a13c:	4770      	bx	lr
  40a13e:	bf00      	nop

0040a140 <__libc_init_array>:
  40a140:	b570      	push	{r4, r5, r6, lr}
  40a142:	4e0f      	ldr	r6, [pc, #60]	; (40a180 <__libc_init_array+0x40>)
  40a144:	4d0f      	ldr	r5, [pc, #60]	; (40a184 <__libc_init_array+0x44>)
  40a146:	1b76      	subs	r6, r6, r5
  40a148:	10b6      	asrs	r6, r6, #2
  40a14a:	bf18      	it	ne
  40a14c:	2400      	movne	r4, #0
  40a14e:	d005      	beq.n	40a15c <__libc_init_array+0x1c>
  40a150:	3401      	adds	r4, #1
  40a152:	f855 3b04 	ldr.w	r3, [r5], #4
  40a156:	4798      	blx	r3
  40a158:	42a6      	cmp	r6, r4
  40a15a:	d1f9      	bne.n	40a150 <__libc_init_array+0x10>
  40a15c:	4e0a      	ldr	r6, [pc, #40]	; (40a188 <__libc_init_array+0x48>)
  40a15e:	4d0b      	ldr	r5, [pc, #44]	; (40a18c <__libc_init_array+0x4c>)
  40a160:	1b76      	subs	r6, r6, r5
  40a162:	f005 fb6d 	bl	40f840 <_init>
  40a166:	10b6      	asrs	r6, r6, #2
  40a168:	bf18      	it	ne
  40a16a:	2400      	movne	r4, #0
  40a16c:	d006      	beq.n	40a17c <__libc_init_array+0x3c>
  40a16e:	3401      	adds	r4, #1
  40a170:	f855 3b04 	ldr.w	r3, [r5], #4
  40a174:	4798      	blx	r3
  40a176:	42a6      	cmp	r6, r4
  40a178:	d1f9      	bne.n	40a16e <__libc_init_array+0x2e>
  40a17a:	bd70      	pop	{r4, r5, r6, pc}
  40a17c:	bd70      	pop	{r4, r5, r6, pc}
  40a17e:	bf00      	nop
  40a180:	0040f84c 	.word	0x0040f84c
  40a184:	0040f84c 	.word	0x0040f84c
  40a188:	0040f854 	.word	0x0040f854
  40a18c:	0040f84c 	.word	0x0040f84c

0040a190 <memcpy>:
  40a190:	4684      	mov	ip, r0
  40a192:	ea41 0300 	orr.w	r3, r1, r0
  40a196:	f013 0303 	ands.w	r3, r3, #3
  40a19a:	d16d      	bne.n	40a278 <memcpy+0xe8>
  40a19c:	3a40      	subs	r2, #64	; 0x40
  40a19e:	d341      	bcc.n	40a224 <memcpy+0x94>
  40a1a0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1a4:	f840 3b04 	str.w	r3, [r0], #4
  40a1a8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1ac:	f840 3b04 	str.w	r3, [r0], #4
  40a1b0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1b4:	f840 3b04 	str.w	r3, [r0], #4
  40a1b8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1bc:	f840 3b04 	str.w	r3, [r0], #4
  40a1c0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1c4:	f840 3b04 	str.w	r3, [r0], #4
  40a1c8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1cc:	f840 3b04 	str.w	r3, [r0], #4
  40a1d0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1d4:	f840 3b04 	str.w	r3, [r0], #4
  40a1d8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1dc:	f840 3b04 	str.w	r3, [r0], #4
  40a1e0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1e4:	f840 3b04 	str.w	r3, [r0], #4
  40a1e8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1ec:	f840 3b04 	str.w	r3, [r0], #4
  40a1f0:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1f4:	f840 3b04 	str.w	r3, [r0], #4
  40a1f8:	f851 3b04 	ldr.w	r3, [r1], #4
  40a1fc:	f840 3b04 	str.w	r3, [r0], #4
  40a200:	f851 3b04 	ldr.w	r3, [r1], #4
  40a204:	f840 3b04 	str.w	r3, [r0], #4
  40a208:	f851 3b04 	ldr.w	r3, [r1], #4
  40a20c:	f840 3b04 	str.w	r3, [r0], #4
  40a210:	f851 3b04 	ldr.w	r3, [r1], #4
  40a214:	f840 3b04 	str.w	r3, [r0], #4
  40a218:	f851 3b04 	ldr.w	r3, [r1], #4
  40a21c:	f840 3b04 	str.w	r3, [r0], #4
  40a220:	3a40      	subs	r2, #64	; 0x40
  40a222:	d2bd      	bcs.n	40a1a0 <memcpy+0x10>
  40a224:	3230      	adds	r2, #48	; 0x30
  40a226:	d311      	bcc.n	40a24c <memcpy+0xbc>
  40a228:	f851 3b04 	ldr.w	r3, [r1], #4
  40a22c:	f840 3b04 	str.w	r3, [r0], #4
  40a230:	f851 3b04 	ldr.w	r3, [r1], #4
  40a234:	f840 3b04 	str.w	r3, [r0], #4
  40a238:	f851 3b04 	ldr.w	r3, [r1], #4
  40a23c:	f840 3b04 	str.w	r3, [r0], #4
  40a240:	f851 3b04 	ldr.w	r3, [r1], #4
  40a244:	f840 3b04 	str.w	r3, [r0], #4
  40a248:	3a10      	subs	r2, #16
  40a24a:	d2ed      	bcs.n	40a228 <memcpy+0x98>
  40a24c:	320c      	adds	r2, #12
  40a24e:	d305      	bcc.n	40a25c <memcpy+0xcc>
  40a250:	f851 3b04 	ldr.w	r3, [r1], #4
  40a254:	f840 3b04 	str.w	r3, [r0], #4
  40a258:	3a04      	subs	r2, #4
  40a25a:	d2f9      	bcs.n	40a250 <memcpy+0xc0>
  40a25c:	3204      	adds	r2, #4
  40a25e:	d008      	beq.n	40a272 <memcpy+0xe2>
  40a260:	07d2      	lsls	r2, r2, #31
  40a262:	bf1c      	itt	ne
  40a264:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a268:	f800 3b01 	strbne.w	r3, [r0], #1
  40a26c:	d301      	bcc.n	40a272 <memcpy+0xe2>
  40a26e:	880b      	ldrh	r3, [r1, #0]
  40a270:	8003      	strh	r3, [r0, #0]
  40a272:	4660      	mov	r0, ip
  40a274:	4770      	bx	lr
  40a276:	bf00      	nop
  40a278:	2a08      	cmp	r2, #8
  40a27a:	d313      	bcc.n	40a2a4 <memcpy+0x114>
  40a27c:	078b      	lsls	r3, r1, #30
  40a27e:	d08d      	beq.n	40a19c <memcpy+0xc>
  40a280:	f010 0303 	ands.w	r3, r0, #3
  40a284:	d08a      	beq.n	40a19c <memcpy+0xc>
  40a286:	f1c3 0304 	rsb	r3, r3, #4
  40a28a:	1ad2      	subs	r2, r2, r3
  40a28c:	07db      	lsls	r3, r3, #31
  40a28e:	bf1c      	itt	ne
  40a290:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40a294:	f800 3b01 	strbne.w	r3, [r0], #1
  40a298:	d380      	bcc.n	40a19c <memcpy+0xc>
  40a29a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40a29e:	f820 3b02 	strh.w	r3, [r0], #2
  40a2a2:	e77b      	b.n	40a19c <memcpy+0xc>
  40a2a4:	3a04      	subs	r2, #4
  40a2a6:	d3d9      	bcc.n	40a25c <memcpy+0xcc>
  40a2a8:	3a01      	subs	r2, #1
  40a2aa:	f811 3b01 	ldrb.w	r3, [r1], #1
  40a2ae:	f800 3b01 	strb.w	r3, [r0], #1
  40a2b2:	d2f9      	bcs.n	40a2a8 <memcpy+0x118>
  40a2b4:	780b      	ldrb	r3, [r1, #0]
  40a2b6:	7003      	strb	r3, [r0, #0]
  40a2b8:	784b      	ldrb	r3, [r1, #1]
  40a2ba:	7043      	strb	r3, [r0, #1]
  40a2bc:	788b      	ldrb	r3, [r1, #2]
  40a2be:	7083      	strb	r3, [r0, #2]
  40a2c0:	4660      	mov	r0, ip
  40a2c2:	4770      	bx	lr

0040a2c4 <memset>:
  40a2c4:	b470      	push	{r4, r5, r6}
  40a2c6:	0786      	lsls	r6, r0, #30
  40a2c8:	d046      	beq.n	40a358 <memset+0x94>
  40a2ca:	1e54      	subs	r4, r2, #1
  40a2cc:	2a00      	cmp	r2, #0
  40a2ce:	d041      	beq.n	40a354 <memset+0x90>
  40a2d0:	b2ca      	uxtb	r2, r1
  40a2d2:	4603      	mov	r3, r0
  40a2d4:	e002      	b.n	40a2dc <memset+0x18>
  40a2d6:	f114 34ff 	adds.w	r4, r4, #4294967295
  40a2da:	d33b      	bcc.n	40a354 <memset+0x90>
  40a2dc:	f803 2b01 	strb.w	r2, [r3], #1
  40a2e0:	079d      	lsls	r5, r3, #30
  40a2e2:	d1f8      	bne.n	40a2d6 <memset+0x12>
  40a2e4:	2c03      	cmp	r4, #3
  40a2e6:	d92e      	bls.n	40a346 <memset+0x82>
  40a2e8:	b2cd      	uxtb	r5, r1
  40a2ea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40a2ee:	2c0f      	cmp	r4, #15
  40a2f0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40a2f4:	d919      	bls.n	40a32a <memset+0x66>
  40a2f6:	f103 0210 	add.w	r2, r3, #16
  40a2fa:	4626      	mov	r6, r4
  40a2fc:	3e10      	subs	r6, #16
  40a2fe:	2e0f      	cmp	r6, #15
  40a300:	f842 5c10 	str.w	r5, [r2, #-16]
  40a304:	f842 5c0c 	str.w	r5, [r2, #-12]
  40a308:	f842 5c08 	str.w	r5, [r2, #-8]
  40a30c:	f842 5c04 	str.w	r5, [r2, #-4]
  40a310:	f102 0210 	add.w	r2, r2, #16
  40a314:	d8f2      	bhi.n	40a2fc <memset+0x38>
  40a316:	f1a4 0210 	sub.w	r2, r4, #16
  40a31a:	f022 020f 	bic.w	r2, r2, #15
  40a31e:	f004 040f 	and.w	r4, r4, #15
  40a322:	3210      	adds	r2, #16
  40a324:	2c03      	cmp	r4, #3
  40a326:	4413      	add	r3, r2
  40a328:	d90d      	bls.n	40a346 <memset+0x82>
  40a32a:	461e      	mov	r6, r3
  40a32c:	4622      	mov	r2, r4
  40a32e:	3a04      	subs	r2, #4
  40a330:	2a03      	cmp	r2, #3
  40a332:	f846 5b04 	str.w	r5, [r6], #4
  40a336:	d8fa      	bhi.n	40a32e <memset+0x6a>
  40a338:	1f22      	subs	r2, r4, #4
  40a33a:	f022 0203 	bic.w	r2, r2, #3
  40a33e:	3204      	adds	r2, #4
  40a340:	4413      	add	r3, r2
  40a342:	f004 0403 	and.w	r4, r4, #3
  40a346:	b12c      	cbz	r4, 40a354 <memset+0x90>
  40a348:	b2c9      	uxtb	r1, r1
  40a34a:	441c      	add	r4, r3
  40a34c:	f803 1b01 	strb.w	r1, [r3], #1
  40a350:	429c      	cmp	r4, r3
  40a352:	d1fb      	bne.n	40a34c <memset+0x88>
  40a354:	bc70      	pop	{r4, r5, r6}
  40a356:	4770      	bx	lr
  40a358:	4614      	mov	r4, r2
  40a35a:	4603      	mov	r3, r0
  40a35c:	e7c2      	b.n	40a2e4 <memset+0x20>
  40a35e:	bf00      	nop

0040a360 <sprintf>:
  40a360:	b40e      	push	{r1, r2, r3}
  40a362:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a364:	b09c      	sub	sp, #112	; 0x70
  40a366:	ab21      	add	r3, sp, #132	; 0x84
  40a368:	490f      	ldr	r1, [pc, #60]	; (40a3a8 <sprintf+0x48>)
  40a36a:	f853 2b04 	ldr.w	r2, [r3], #4
  40a36e:	9301      	str	r3, [sp, #4]
  40a370:	4605      	mov	r5, r0
  40a372:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40a376:	6808      	ldr	r0, [r1, #0]
  40a378:	9502      	str	r5, [sp, #8]
  40a37a:	f44f 7702 	mov.w	r7, #520	; 0x208
  40a37e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40a382:	a902      	add	r1, sp, #8
  40a384:	9506      	str	r5, [sp, #24]
  40a386:	f8ad 7014 	strh.w	r7, [sp, #20]
  40a38a:	9404      	str	r4, [sp, #16]
  40a38c:	9407      	str	r4, [sp, #28]
  40a38e:	f8ad 6016 	strh.w	r6, [sp, #22]
  40a392:	f000 f8b5 	bl	40a500 <_svfprintf_r>
  40a396:	9b02      	ldr	r3, [sp, #8]
  40a398:	2200      	movs	r2, #0
  40a39a:	701a      	strb	r2, [r3, #0]
  40a39c:	b01c      	add	sp, #112	; 0x70
  40a39e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40a3a2:	b003      	add	sp, #12
  40a3a4:	4770      	bx	lr
  40a3a6:	bf00      	nop
  40a3a8:	20000020 	.word	0x20000020
	...

0040a3c0 <strlen>:
  40a3c0:	f890 f000 	pld	[r0]
  40a3c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40a3c8:	f020 0107 	bic.w	r1, r0, #7
  40a3cc:	f06f 0c00 	mvn.w	ip, #0
  40a3d0:	f010 0407 	ands.w	r4, r0, #7
  40a3d4:	f891 f020 	pld	[r1, #32]
  40a3d8:	f040 8049 	bne.w	40a46e <strlen+0xae>
  40a3dc:	f04f 0400 	mov.w	r4, #0
  40a3e0:	f06f 0007 	mvn.w	r0, #7
  40a3e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  40a3e8:	f891 f040 	pld	[r1, #64]	; 0x40
  40a3ec:	f100 0008 	add.w	r0, r0, #8
  40a3f0:	fa82 f24c 	uadd8	r2, r2, ip
  40a3f4:	faa4 f28c 	sel	r2, r4, ip
  40a3f8:	fa83 f34c 	uadd8	r3, r3, ip
  40a3fc:	faa2 f38c 	sel	r3, r2, ip
  40a400:	bb4b      	cbnz	r3, 40a456 <strlen+0x96>
  40a402:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40a406:	fa82 f24c 	uadd8	r2, r2, ip
  40a40a:	f100 0008 	add.w	r0, r0, #8
  40a40e:	faa4 f28c 	sel	r2, r4, ip
  40a412:	fa83 f34c 	uadd8	r3, r3, ip
  40a416:	faa2 f38c 	sel	r3, r2, ip
  40a41a:	b9e3      	cbnz	r3, 40a456 <strlen+0x96>
  40a41c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40a420:	fa82 f24c 	uadd8	r2, r2, ip
  40a424:	f100 0008 	add.w	r0, r0, #8
  40a428:	faa4 f28c 	sel	r2, r4, ip
  40a42c:	fa83 f34c 	uadd8	r3, r3, ip
  40a430:	faa2 f38c 	sel	r3, r2, ip
  40a434:	b97b      	cbnz	r3, 40a456 <strlen+0x96>
  40a436:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40a43a:	f101 0120 	add.w	r1, r1, #32
  40a43e:	fa82 f24c 	uadd8	r2, r2, ip
  40a442:	f100 0008 	add.w	r0, r0, #8
  40a446:	faa4 f28c 	sel	r2, r4, ip
  40a44a:	fa83 f34c 	uadd8	r3, r3, ip
  40a44e:	faa2 f38c 	sel	r3, r2, ip
  40a452:	2b00      	cmp	r3, #0
  40a454:	d0c6      	beq.n	40a3e4 <strlen+0x24>
  40a456:	2a00      	cmp	r2, #0
  40a458:	bf04      	itt	eq
  40a45a:	3004      	addeq	r0, #4
  40a45c:	461a      	moveq	r2, r3
  40a45e:	ba12      	rev	r2, r2
  40a460:	fab2 f282 	clz	r2, r2
  40a464:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40a468:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40a46c:	4770      	bx	lr
  40a46e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40a472:	f004 0503 	and.w	r5, r4, #3
  40a476:	f1c4 0000 	rsb	r0, r4, #0
  40a47a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40a47e:	f014 0f04 	tst.w	r4, #4
  40a482:	f891 f040 	pld	[r1, #64]	; 0x40
  40a486:	fa0c f505 	lsl.w	r5, ip, r5
  40a48a:	ea62 0205 	orn	r2, r2, r5
  40a48e:	bf1c      	itt	ne
  40a490:	ea63 0305 	ornne	r3, r3, r5
  40a494:	4662      	movne	r2, ip
  40a496:	f04f 0400 	mov.w	r4, #0
  40a49a:	e7a9      	b.n	40a3f0 <strlen+0x30>

0040a49c <strncpy>:
  40a49c:	ea40 0301 	orr.w	r3, r0, r1
  40a4a0:	f013 0f03 	tst.w	r3, #3
  40a4a4:	b470      	push	{r4, r5, r6}
  40a4a6:	4603      	mov	r3, r0
  40a4a8:	d024      	beq.n	40a4f4 <strncpy+0x58>
  40a4aa:	b1a2      	cbz	r2, 40a4d6 <strncpy+0x3a>
  40a4ac:	780c      	ldrb	r4, [r1, #0]
  40a4ae:	701c      	strb	r4, [r3, #0]
  40a4b0:	3a01      	subs	r2, #1
  40a4b2:	3301      	adds	r3, #1
  40a4b4:	3101      	adds	r1, #1
  40a4b6:	b13c      	cbz	r4, 40a4c8 <strncpy+0x2c>
  40a4b8:	b16a      	cbz	r2, 40a4d6 <strncpy+0x3a>
  40a4ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  40a4be:	f803 4b01 	strb.w	r4, [r3], #1
  40a4c2:	3a01      	subs	r2, #1
  40a4c4:	2c00      	cmp	r4, #0
  40a4c6:	d1f7      	bne.n	40a4b8 <strncpy+0x1c>
  40a4c8:	b12a      	cbz	r2, 40a4d6 <strncpy+0x3a>
  40a4ca:	441a      	add	r2, r3
  40a4cc:	2100      	movs	r1, #0
  40a4ce:	f803 1b01 	strb.w	r1, [r3], #1
  40a4d2:	429a      	cmp	r2, r3
  40a4d4:	d1fb      	bne.n	40a4ce <strncpy+0x32>
  40a4d6:	bc70      	pop	{r4, r5, r6}
  40a4d8:	4770      	bx	lr
  40a4da:	460e      	mov	r6, r1
  40a4dc:	f851 5b04 	ldr.w	r5, [r1], #4
  40a4e0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  40a4e4:	ea24 0405 	bic.w	r4, r4, r5
  40a4e8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40a4ec:	d105      	bne.n	40a4fa <strncpy+0x5e>
  40a4ee:	f843 5b04 	str.w	r5, [r3], #4
  40a4f2:	3a04      	subs	r2, #4
  40a4f4:	2a03      	cmp	r2, #3
  40a4f6:	d8f0      	bhi.n	40a4da <strncpy+0x3e>
  40a4f8:	e7d7      	b.n	40a4aa <strncpy+0xe>
  40a4fa:	4631      	mov	r1, r6
  40a4fc:	e7d6      	b.n	40a4ac <strncpy+0x10>
  40a4fe:	bf00      	nop

0040a500 <_svfprintf_r>:
  40a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a504:	b0c3      	sub	sp, #268	; 0x10c
  40a506:	460c      	mov	r4, r1
  40a508:	910b      	str	r1, [sp, #44]	; 0x2c
  40a50a:	4692      	mov	sl, r2
  40a50c:	930f      	str	r3, [sp, #60]	; 0x3c
  40a50e:	900c      	str	r0, [sp, #48]	; 0x30
  40a510:	f002 fa32 	bl	40c978 <_localeconv_r>
  40a514:	6803      	ldr	r3, [r0, #0]
  40a516:	931a      	str	r3, [sp, #104]	; 0x68
  40a518:	4618      	mov	r0, r3
  40a51a:	f7ff ff51 	bl	40a3c0 <strlen>
  40a51e:	89a3      	ldrh	r3, [r4, #12]
  40a520:	9019      	str	r0, [sp, #100]	; 0x64
  40a522:	0619      	lsls	r1, r3, #24
  40a524:	d503      	bpl.n	40a52e <_svfprintf_r+0x2e>
  40a526:	6923      	ldr	r3, [r4, #16]
  40a528:	2b00      	cmp	r3, #0
  40a52a:	f001 8003 	beq.w	40b534 <_svfprintf_r+0x1034>
  40a52e:	2300      	movs	r3, #0
  40a530:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40a534:	9313      	str	r3, [sp, #76]	; 0x4c
  40a536:	9315      	str	r3, [sp, #84]	; 0x54
  40a538:	9314      	str	r3, [sp, #80]	; 0x50
  40a53a:	9327      	str	r3, [sp, #156]	; 0x9c
  40a53c:	9326      	str	r3, [sp, #152]	; 0x98
  40a53e:	9318      	str	r3, [sp, #96]	; 0x60
  40a540:	931b      	str	r3, [sp, #108]	; 0x6c
  40a542:	9309      	str	r3, [sp, #36]	; 0x24
  40a544:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  40a548:	46c8      	mov	r8, r9
  40a54a:	9316      	str	r3, [sp, #88]	; 0x58
  40a54c:	9317      	str	r3, [sp, #92]	; 0x5c
  40a54e:	f89a 3000 	ldrb.w	r3, [sl]
  40a552:	4654      	mov	r4, sl
  40a554:	b1e3      	cbz	r3, 40a590 <_svfprintf_r+0x90>
  40a556:	2b25      	cmp	r3, #37	; 0x25
  40a558:	d102      	bne.n	40a560 <_svfprintf_r+0x60>
  40a55a:	e019      	b.n	40a590 <_svfprintf_r+0x90>
  40a55c:	2b25      	cmp	r3, #37	; 0x25
  40a55e:	d003      	beq.n	40a568 <_svfprintf_r+0x68>
  40a560:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40a564:	2b00      	cmp	r3, #0
  40a566:	d1f9      	bne.n	40a55c <_svfprintf_r+0x5c>
  40a568:	eba4 050a 	sub.w	r5, r4, sl
  40a56c:	b185      	cbz	r5, 40a590 <_svfprintf_r+0x90>
  40a56e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a570:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40a572:	f8c8 a000 	str.w	sl, [r8]
  40a576:	3301      	adds	r3, #1
  40a578:	442a      	add	r2, r5
  40a57a:	2b07      	cmp	r3, #7
  40a57c:	f8c8 5004 	str.w	r5, [r8, #4]
  40a580:	9227      	str	r2, [sp, #156]	; 0x9c
  40a582:	9326      	str	r3, [sp, #152]	; 0x98
  40a584:	dc7f      	bgt.n	40a686 <_svfprintf_r+0x186>
  40a586:	f108 0808 	add.w	r8, r8, #8
  40a58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a58c:	442b      	add	r3, r5
  40a58e:	9309      	str	r3, [sp, #36]	; 0x24
  40a590:	7823      	ldrb	r3, [r4, #0]
  40a592:	2b00      	cmp	r3, #0
  40a594:	d07f      	beq.n	40a696 <_svfprintf_r+0x196>
  40a596:	2300      	movs	r3, #0
  40a598:	461a      	mov	r2, r3
  40a59a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40a59e:	4619      	mov	r1, r3
  40a5a0:	930d      	str	r3, [sp, #52]	; 0x34
  40a5a2:	469b      	mov	fp, r3
  40a5a4:	f04f 30ff 	mov.w	r0, #4294967295
  40a5a8:	7863      	ldrb	r3, [r4, #1]
  40a5aa:	900a      	str	r0, [sp, #40]	; 0x28
  40a5ac:	f104 0a01 	add.w	sl, r4, #1
  40a5b0:	f10a 0a01 	add.w	sl, sl, #1
  40a5b4:	f1a3 0020 	sub.w	r0, r3, #32
  40a5b8:	2858      	cmp	r0, #88	; 0x58
  40a5ba:	f200 83c1 	bhi.w	40ad40 <_svfprintf_r+0x840>
  40a5be:	e8df f010 	tbh	[pc, r0, lsl #1]
  40a5c2:	0238      	.short	0x0238
  40a5c4:	03bf03bf 	.word	0x03bf03bf
  40a5c8:	03bf0240 	.word	0x03bf0240
  40a5cc:	03bf03bf 	.word	0x03bf03bf
  40a5d0:	03bf03bf 	.word	0x03bf03bf
  40a5d4:	024503bf 	.word	0x024503bf
  40a5d8:	03bf0203 	.word	0x03bf0203
  40a5dc:	026b005d 	.word	0x026b005d
  40a5e0:	028603bf 	.word	0x028603bf
  40a5e4:	039d039d 	.word	0x039d039d
  40a5e8:	039d039d 	.word	0x039d039d
  40a5ec:	039d039d 	.word	0x039d039d
  40a5f0:	039d039d 	.word	0x039d039d
  40a5f4:	03bf039d 	.word	0x03bf039d
  40a5f8:	03bf03bf 	.word	0x03bf03bf
  40a5fc:	03bf03bf 	.word	0x03bf03bf
  40a600:	03bf03bf 	.word	0x03bf03bf
  40a604:	03bf03bf 	.word	0x03bf03bf
  40a608:	033703bf 	.word	0x033703bf
  40a60c:	03bf0357 	.word	0x03bf0357
  40a610:	03bf0357 	.word	0x03bf0357
  40a614:	03bf03bf 	.word	0x03bf03bf
  40a618:	039803bf 	.word	0x039803bf
  40a61c:	03bf03bf 	.word	0x03bf03bf
  40a620:	03bf03ad 	.word	0x03bf03ad
  40a624:	03bf03bf 	.word	0x03bf03bf
  40a628:	03bf03bf 	.word	0x03bf03bf
  40a62c:	03bf0259 	.word	0x03bf0259
  40a630:	031e03bf 	.word	0x031e03bf
  40a634:	03bf03bf 	.word	0x03bf03bf
  40a638:	03bf03bf 	.word	0x03bf03bf
  40a63c:	03bf03bf 	.word	0x03bf03bf
  40a640:	03bf03bf 	.word	0x03bf03bf
  40a644:	03bf03bf 	.word	0x03bf03bf
  40a648:	02db02c6 	.word	0x02db02c6
  40a64c:	03570357 	.word	0x03570357
  40a650:	028b0357 	.word	0x028b0357
  40a654:	03bf02db 	.word	0x03bf02db
  40a658:	029003bf 	.word	0x029003bf
  40a65c:	029d03bf 	.word	0x029d03bf
  40a660:	02b401cc 	.word	0x02b401cc
  40a664:	03bf0208 	.word	0x03bf0208
  40a668:	03bf01e1 	.word	0x03bf01e1
  40a66c:	03bf007e 	.word	0x03bf007e
  40a670:	020d03bf 	.word	0x020d03bf
  40a674:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a676:	930f      	str	r3, [sp, #60]	; 0x3c
  40a678:	4240      	negs	r0, r0
  40a67a:	900d      	str	r0, [sp, #52]	; 0x34
  40a67c:	f04b 0b04 	orr.w	fp, fp, #4
  40a680:	f89a 3000 	ldrb.w	r3, [sl]
  40a684:	e794      	b.n	40a5b0 <_svfprintf_r+0xb0>
  40a686:	aa25      	add	r2, sp, #148	; 0x94
  40a688:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a68a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a68c:	f002 ffa0 	bl	40d5d0 <__ssprint_r>
  40a690:	b940      	cbnz	r0, 40a6a4 <_svfprintf_r+0x1a4>
  40a692:	46c8      	mov	r8, r9
  40a694:	e779      	b.n	40a58a <_svfprintf_r+0x8a>
  40a696:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40a698:	b123      	cbz	r3, 40a6a4 <_svfprintf_r+0x1a4>
  40a69a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a69c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a69e:	aa25      	add	r2, sp, #148	; 0x94
  40a6a0:	f002 ff96 	bl	40d5d0 <__ssprint_r>
  40a6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a6a6:	899b      	ldrh	r3, [r3, #12]
  40a6a8:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a6ae:	bf18      	it	ne
  40a6b0:	f04f 33ff 	movne.w	r3, #4294967295
  40a6b4:	9309      	str	r3, [sp, #36]	; 0x24
  40a6b6:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a6b8:	b043      	add	sp, #268	; 0x10c
  40a6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a6be:	f01b 0f20 	tst.w	fp, #32
  40a6c2:	9311      	str	r3, [sp, #68]	; 0x44
  40a6c4:	f040 81dd 	bne.w	40aa82 <_svfprintf_r+0x582>
  40a6c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a6ca:	f01b 0f10 	tst.w	fp, #16
  40a6ce:	4613      	mov	r3, r2
  40a6d0:	f040 856e 	bne.w	40b1b0 <_svfprintf_r+0xcb0>
  40a6d4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40a6d8:	f000 856a 	beq.w	40b1b0 <_svfprintf_r+0xcb0>
  40a6dc:	8814      	ldrh	r4, [r2, #0]
  40a6de:	3204      	adds	r2, #4
  40a6e0:	2500      	movs	r5, #0
  40a6e2:	2301      	movs	r3, #1
  40a6e4:	920f      	str	r2, [sp, #60]	; 0x3c
  40a6e6:	2700      	movs	r7, #0
  40a6e8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40a6ec:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a6ee:	1c4a      	adds	r2, r1, #1
  40a6f0:	f000 8265 	beq.w	40abbe <_svfprintf_r+0x6be>
  40a6f4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40a6f8:	9207      	str	r2, [sp, #28]
  40a6fa:	ea54 0205 	orrs.w	r2, r4, r5
  40a6fe:	f040 8264 	bne.w	40abca <_svfprintf_r+0x6ca>
  40a702:	2900      	cmp	r1, #0
  40a704:	f040 843c 	bne.w	40af80 <_svfprintf_r+0xa80>
  40a708:	2b00      	cmp	r3, #0
  40a70a:	f040 84d7 	bne.w	40b0bc <_svfprintf_r+0xbbc>
  40a70e:	f01b 0301 	ands.w	r3, fp, #1
  40a712:	930e      	str	r3, [sp, #56]	; 0x38
  40a714:	f000 8604 	beq.w	40b320 <_svfprintf_r+0xe20>
  40a718:	ae42      	add	r6, sp, #264	; 0x108
  40a71a:	2330      	movs	r3, #48	; 0x30
  40a71c:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40a720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a724:	4293      	cmp	r3, r2
  40a726:	bfb8      	it	lt
  40a728:	4613      	movlt	r3, r2
  40a72a:	9308      	str	r3, [sp, #32]
  40a72c:	2300      	movs	r3, #0
  40a72e:	9312      	str	r3, [sp, #72]	; 0x48
  40a730:	b117      	cbz	r7, 40a738 <_svfprintf_r+0x238>
  40a732:	9b08      	ldr	r3, [sp, #32]
  40a734:	3301      	adds	r3, #1
  40a736:	9308      	str	r3, [sp, #32]
  40a738:	9b07      	ldr	r3, [sp, #28]
  40a73a:	f013 0302 	ands.w	r3, r3, #2
  40a73e:	9310      	str	r3, [sp, #64]	; 0x40
  40a740:	d002      	beq.n	40a748 <_svfprintf_r+0x248>
  40a742:	9b08      	ldr	r3, [sp, #32]
  40a744:	3302      	adds	r3, #2
  40a746:	9308      	str	r3, [sp, #32]
  40a748:	9b07      	ldr	r3, [sp, #28]
  40a74a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40a74e:	f040 830e 	bne.w	40ad6e <_svfprintf_r+0x86e>
  40a752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a754:	9a08      	ldr	r2, [sp, #32]
  40a756:	eba3 0b02 	sub.w	fp, r3, r2
  40a75a:	f1bb 0f00 	cmp.w	fp, #0
  40a75e:	f340 8306 	ble.w	40ad6e <_svfprintf_r+0x86e>
  40a762:	f1bb 0f10 	cmp.w	fp, #16
  40a766:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a768:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40a76a:	dd29      	ble.n	40a7c0 <_svfprintf_r+0x2c0>
  40a76c:	4643      	mov	r3, r8
  40a76e:	4621      	mov	r1, r4
  40a770:	46a8      	mov	r8, r5
  40a772:	2710      	movs	r7, #16
  40a774:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a776:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a778:	e006      	b.n	40a788 <_svfprintf_r+0x288>
  40a77a:	f1ab 0b10 	sub.w	fp, fp, #16
  40a77e:	f1bb 0f10 	cmp.w	fp, #16
  40a782:	f103 0308 	add.w	r3, r3, #8
  40a786:	dd18      	ble.n	40a7ba <_svfprintf_r+0x2ba>
  40a788:	3201      	adds	r2, #1
  40a78a:	48b7      	ldr	r0, [pc, #732]	; (40aa68 <_svfprintf_r+0x568>)
  40a78c:	9226      	str	r2, [sp, #152]	; 0x98
  40a78e:	3110      	adds	r1, #16
  40a790:	2a07      	cmp	r2, #7
  40a792:	9127      	str	r1, [sp, #156]	; 0x9c
  40a794:	e883 0081 	stmia.w	r3, {r0, r7}
  40a798:	ddef      	ble.n	40a77a <_svfprintf_r+0x27a>
  40a79a:	aa25      	add	r2, sp, #148	; 0x94
  40a79c:	4629      	mov	r1, r5
  40a79e:	4620      	mov	r0, r4
  40a7a0:	f002 ff16 	bl	40d5d0 <__ssprint_r>
  40a7a4:	2800      	cmp	r0, #0
  40a7a6:	f47f af7d 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40a7aa:	f1ab 0b10 	sub.w	fp, fp, #16
  40a7ae:	f1bb 0f10 	cmp.w	fp, #16
  40a7b2:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40a7b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40a7b6:	464b      	mov	r3, r9
  40a7b8:	dce6      	bgt.n	40a788 <_svfprintf_r+0x288>
  40a7ba:	4645      	mov	r5, r8
  40a7bc:	460c      	mov	r4, r1
  40a7be:	4698      	mov	r8, r3
  40a7c0:	3201      	adds	r2, #1
  40a7c2:	4ba9      	ldr	r3, [pc, #676]	; (40aa68 <_svfprintf_r+0x568>)
  40a7c4:	9226      	str	r2, [sp, #152]	; 0x98
  40a7c6:	445c      	add	r4, fp
  40a7c8:	2a07      	cmp	r2, #7
  40a7ca:	9427      	str	r4, [sp, #156]	; 0x9c
  40a7cc:	e888 0808 	stmia.w	r8, {r3, fp}
  40a7d0:	f300 8498 	bgt.w	40b104 <_svfprintf_r+0xc04>
  40a7d4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40a7d8:	f108 0808 	add.w	r8, r8, #8
  40a7dc:	b177      	cbz	r7, 40a7fc <_svfprintf_r+0x2fc>
  40a7de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a7e0:	3301      	adds	r3, #1
  40a7e2:	3401      	adds	r4, #1
  40a7e4:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40a7e8:	2201      	movs	r2, #1
  40a7ea:	2b07      	cmp	r3, #7
  40a7ec:	9427      	str	r4, [sp, #156]	; 0x9c
  40a7ee:	9326      	str	r3, [sp, #152]	; 0x98
  40a7f0:	e888 0006 	stmia.w	r8, {r1, r2}
  40a7f4:	f300 83db 	bgt.w	40afae <_svfprintf_r+0xaae>
  40a7f8:	f108 0808 	add.w	r8, r8, #8
  40a7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a7fe:	b16b      	cbz	r3, 40a81c <_svfprintf_r+0x31c>
  40a800:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a802:	3301      	adds	r3, #1
  40a804:	3402      	adds	r4, #2
  40a806:	a91e      	add	r1, sp, #120	; 0x78
  40a808:	2202      	movs	r2, #2
  40a80a:	2b07      	cmp	r3, #7
  40a80c:	9427      	str	r4, [sp, #156]	; 0x9c
  40a80e:	9326      	str	r3, [sp, #152]	; 0x98
  40a810:	e888 0006 	stmia.w	r8, {r1, r2}
  40a814:	f300 83d6 	bgt.w	40afc4 <_svfprintf_r+0xac4>
  40a818:	f108 0808 	add.w	r8, r8, #8
  40a81c:	2d80      	cmp	r5, #128	; 0x80
  40a81e:	f000 8315 	beq.w	40ae4c <_svfprintf_r+0x94c>
  40a822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a824:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40a826:	1a9f      	subs	r7, r3, r2
  40a828:	2f00      	cmp	r7, #0
  40a82a:	dd36      	ble.n	40a89a <_svfprintf_r+0x39a>
  40a82c:	2f10      	cmp	r7, #16
  40a82e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a830:	4d8e      	ldr	r5, [pc, #568]	; (40aa6c <_svfprintf_r+0x56c>)
  40a832:	dd27      	ble.n	40a884 <_svfprintf_r+0x384>
  40a834:	4642      	mov	r2, r8
  40a836:	4621      	mov	r1, r4
  40a838:	46b0      	mov	r8, r6
  40a83a:	f04f 0b10 	mov.w	fp, #16
  40a83e:	462e      	mov	r6, r5
  40a840:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a842:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a844:	e004      	b.n	40a850 <_svfprintf_r+0x350>
  40a846:	3f10      	subs	r7, #16
  40a848:	2f10      	cmp	r7, #16
  40a84a:	f102 0208 	add.w	r2, r2, #8
  40a84e:	dd15      	ble.n	40a87c <_svfprintf_r+0x37c>
  40a850:	3301      	adds	r3, #1
  40a852:	3110      	adds	r1, #16
  40a854:	2b07      	cmp	r3, #7
  40a856:	9127      	str	r1, [sp, #156]	; 0x9c
  40a858:	9326      	str	r3, [sp, #152]	; 0x98
  40a85a:	e882 0840 	stmia.w	r2, {r6, fp}
  40a85e:	ddf2      	ble.n	40a846 <_svfprintf_r+0x346>
  40a860:	aa25      	add	r2, sp, #148	; 0x94
  40a862:	4629      	mov	r1, r5
  40a864:	4620      	mov	r0, r4
  40a866:	f002 feb3 	bl	40d5d0 <__ssprint_r>
  40a86a:	2800      	cmp	r0, #0
  40a86c:	f47f af1a 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40a870:	3f10      	subs	r7, #16
  40a872:	2f10      	cmp	r7, #16
  40a874:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40a876:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a878:	464a      	mov	r2, r9
  40a87a:	dce9      	bgt.n	40a850 <_svfprintf_r+0x350>
  40a87c:	4635      	mov	r5, r6
  40a87e:	460c      	mov	r4, r1
  40a880:	4646      	mov	r6, r8
  40a882:	4690      	mov	r8, r2
  40a884:	3301      	adds	r3, #1
  40a886:	443c      	add	r4, r7
  40a888:	2b07      	cmp	r3, #7
  40a88a:	9427      	str	r4, [sp, #156]	; 0x9c
  40a88c:	9326      	str	r3, [sp, #152]	; 0x98
  40a88e:	e888 00a0 	stmia.w	r8, {r5, r7}
  40a892:	f300 8381 	bgt.w	40af98 <_svfprintf_r+0xa98>
  40a896:	f108 0808 	add.w	r8, r8, #8
  40a89a:	9b07      	ldr	r3, [sp, #28]
  40a89c:	05df      	lsls	r7, r3, #23
  40a89e:	f100 8268 	bmi.w	40ad72 <_svfprintf_r+0x872>
  40a8a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a8a4:	990e      	ldr	r1, [sp, #56]	; 0x38
  40a8a6:	f8c8 6000 	str.w	r6, [r8]
  40a8aa:	3301      	adds	r3, #1
  40a8ac:	440c      	add	r4, r1
  40a8ae:	2b07      	cmp	r3, #7
  40a8b0:	9427      	str	r4, [sp, #156]	; 0x9c
  40a8b2:	f8c8 1004 	str.w	r1, [r8, #4]
  40a8b6:	9326      	str	r3, [sp, #152]	; 0x98
  40a8b8:	f300 834d 	bgt.w	40af56 <_svfprintf_r+0xa56>
  40a8bc:	f108 0808 	add.w	r8, r8, #8
  40a8c0:	9b07      	ldr	r3, [sp, #28]
  40a8c2:	075b      	lsls	r3, r3, #29
  40a8c4:	d53a      	bpl.n	40a93c <_svfprintf_r+0x43c>
  40a8c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a8c8:	9a08      	ldr	r2, [sp, #32]
  40a8ca:	1a9d      	subs	r5, r3, r2
  40a8cc:	2d00      	cmp	r5, #0
  40a8ce:	dd35      	ble.n	40a93c <_svfprintf_r+0x43c>
  40a8d0:	2d10      	cmp	r5, #16
  40a8d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a8d4:	dd20      	ble.n	40a918 <_svfprintf_r+0x418>
  40a8d6:	2610      	movs	r6, #16
  40a8d8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a8da:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40a8de:	e004      	b.n	40a8ea <_svfprintf_r+0x3ea>
  40a8e0:	3d10      	subs	r5, #16
  40a8e2:	2d10      	cmp	r5, #16
  40a8e4:	f108 0808 	add.w	r8, r8, #8
  40a8e8:	dd16      	ble.n	40a918 <_svfprintf_r+0x418>
  40a8ea:	3301      	adds	r3, #1
  40a8ec:	4a5e      	ldr	r2, [pc, #376]	; (40aa68 <_svfprintf_r+0x568>)
  40a8ee:	9326      	str	r3, [sp, #152]	; 0x98
  40a8f0:	3410      	adds	r4, #16
  40a8f2:	2b07      	cmp	r3, #7
  40a8f4:	9427      	str	r4, [sp, #156]	; 0x9c
  40a8f6:	e888 0044 	stmia.w	r8, {r2, r6}
  40a8fa:	ddf1      	ble.n	40a8e0 <_svfprintf_r+0x3e0>
  40a8fc:	aa25      	add	r2, sp, #148	; 0x94
  40a8fe:	4659      	mov	r1, fp
  40a900:	4638      	mov	r0, r7
  40a902:	f002 fe65 	bl	40d5d0 <__ssprint_r>
  40a906:	2800      	cmp	r0, #0
  40a908:	f47f aecc 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40a90c:	3d10      	subs	r5, #16
  40a90e:	2d10      	cmp	r5, #16
  40a910:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a912:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a914:	46c8      	mov	r8, r9
  40a916:	dce8      	bgt.n	40a8ea <_svfprintf_r+0x3ea>
  40a918:	3301      	adds	r3, #1
  40a91a:	4a53      	ldr	r2, [pc, #332]	; (40aa68 <_svfprintf_r+0x568>)
  40a91c:	9326      	str	r3, [sp, #152]	; 0x98
  40a91e:	442c      	add	r4, r5
  40a920:	2b07      	cmp	r3, #7
  40a922:	9427      	str	r4, [sp, #156]	; 0x9c
  40a924:	e888 0024 	stmia.w	r8, {r2, r5}
  40a928:	dd08      	ble.n	40a93c <_svfprintf_r+0x43c>
  40a92a:	aa25      	add	r2, sp, #148	; 0x94
  40a92c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a92e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a930:	f002 fe4e 	bl	40d5d0 <__ssprint_r>
  40a934:	2800      	cmp	r0, #0
  40a936:	f47f aeb5 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40a93a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40a93e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a940:	9908      	ldr	r1, [sp, #32]
  40a942:	428a      	cmp	r2, r1
  40a944:	bfac      	ite	ge
  40a946:	189b      	addge	r3, r3, r2
  40a948:	185b      	addlt	r3, r3, r1
  40a94a:	9309      	str	r3, [sp, #36]	; 0x24
  40a94c:	2c00      	cmp	r4, #0
  40a94e:	f040 830d 	bne.w	40af6c <_svfprintf_r+0xa6c>
  40a952:	2300      	movs	r3, #0
  40a954:	9326      	str	r3, [sp, #152]	; 0x98
  40a956:	46c8      	mov	r8, r9
  40a958:	e5f9      	b.n	40a54e <_svfprintf_r+0x4e>
  40a95a:	9311      	str	r3, [sp, #68]	; 0x44
  40a95c:	f01b 0320 	ands.w	r3, fp, #32
  40a960:	f040 81e3 	bne.w	40ad2a <_svfprintf_r+0x82a>
  40a964:	f01b 0210 	ands.w	r2, fp, #16
  40a968:	f040 842e 	bne.w	40b1c8 <_svfprintf_r+0xcc8>
  40a96c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40a970:	f000 842a 	beq.w	40b1c8 <_svfprintf_r+0xcc8>
  40a974:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40a976:	4613      	mov	r3, r2
  40a978:	460a      	mov	r2, r1
  40a97a:	3204      	adds	r2, #4
  40a97c:	880c      	ldrh	r4, [r1, #0]
  40a97e:	920f      	str	r2, [sp, #60]	; 0x3c
  40a980:	2500      	movs	r5, #0
  40a982:	e6b0      	b.n	40a6e6 <_svfprintf_r+0x1e6>
  40a984:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a986:	9311      	str	r3, [sp, #68]	; 0x44
  40a988:	6816      	ldr	r6, [r2, #0]
  40a98a:	2400      	movs	r4, #0
  40a98c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40a990:	1d15      	adds	r5, r2, #4
  40a992:	2e00      	cmp	r6, #0
  40a994:	f000 86a7 	beq.w	40b6e6 <_svfprintf_r+0x11e6>
  40a998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a99a:	1c53      	adds	r3, r2, #1
  40a99c:	f000 8609 	beq.w	40b5b2 <_svfprintf_r+0x10b2>
  40a9a0:	4621      	mov	r1, r4
  40a9a2:	4630      	mov	r0, r6
  40a9a4:	f002 faac 	bl	40cf00 <memchr>
  40a9a8:	2800      	cmp	r0, #0
  40a9aa:	f000 86e1 	beq.w	40b770 <_svfprintf_r+0x1270>
  40a9ae:	1b83      	subs	r3, r0, r6
  40a9b0:	930e      	str	r3, [sp, #56]	; 0x38
  40a9b2:	940a      	str	r4, [sp, #40]	; 0x28
  40a9b4:	950f      	str	r5, [sp, #60]	; 0x3c
  40a9b6:	f8cd b01c 	str.w	fp, [sp, #28]
  40a9ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40a9be:	9308      	str	r3, [sp, #32]
  40a9c0:	9412      	str	r4, [sp, #72]	; 0x48
  40a9c2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40a9c6:	e6b3      	b.n	40a730 <_svfprintf_r+0x230>
  40a9c8:	f89a 3000 	ldrb.w	r3, [sl]
  40a9cc:	2201      	movs	r2, #1
  40a9ce:	212b      	movs	r1, #43	; 0x2b
  40a9d0:	e5ee      	b.n	40a5b0 <_svfprintf_r+0xb0>
  40a9d2:	f04b 0b20 	orr.w	fp, fp, #32
  40a9d6:	f89a 3000 	ldrb.w	r3, [sl]
  40a9da:	e5e9      	b.n	40a5b0 <_svfprintf_r+0xb0>
  40a9dc:	9311      	str	r3, [sp, #68]	; 0x44
  40a9de:	2a00      	cmp	r2, #0
  40a9e0:	f040 8795 	bne.w	40b90e <_svfprintf_r+0x140e>
  40a9e4:	4b22      	ldr	r3, [pc, #136]	; (40aa70 <_svfprintf_r+0x570>)
  40a9e6:	9318      	str	r3, [sp, #96]	; 0x60
  40a9e8:	f01b 0f20 	tst.w	fp, #32
  40a9ec:	f040 8111 	bne.w	40ac12 <_svfprintf_r+0x712>
  40a9f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a9f2:	f01b 0f10 	tst.w	fp, #16
  40a9f6:	4613      	mov	r3, r2
  40a9f8:	f040 83e1 	bne.w	40b1be <_svfprintf_r+0xcbe>
  40a9fc:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40aa00:	f000 83dd 	beq.w	40b1be <_svfprintf_r+0xcbe>
  40aa04:	3304      	adds	r3, #4
  40aa06:	8814      	ldrh	r4, [r2, #0]
  40aa08:	930f      	str	r3, [sp, #60]	; 0x3c
  40aa0a:	2500      	movs	r5, #0
  40aa0c:	f01b 0f01 	tst.w	fp, #1
  40aa10:	f000 810c 	beq.w	40ac2c <_svfprintf_r+0x72c>
  40aa14:	ea54 0305 	orrs.w	r3, r4, r5
  40aa18:	f000 8108 	beq.w	40ac2c <_svfprintf_r+0x72c>
  40aa1c:	2330      	movs	r3, #48	; 0x30
  40aa1e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40aa22:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40aa26:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40aa2a:	f04b 0b02 	orr.w	fp, fp, #2
  40aa2e:	2302      	movs	r3, #2
  40aa30:	e659      	b.n	40a6e6 <_svfprintf_r+0x1e6>
  40aa32:	f89a 3000 	ldrb.w	r3, [sl]
  40aa36:	2900      	cmp	r1, #0
  40aa38:	f47f adba 	bne.w	40a5b0 <_svfprintf_r+0xb0>
  40aa3c:	2201      	movs	r2, #1
  40aa3e:	2120      	movs	r1, #32
  40aa40:	e5b6      	b.n	40a5b0 <_svfprintf_r+0xb0>
  40aa42:	f04b 0b01 	orr.w	fp, fp, #1
  40aa46:	f89a 3000 	ldrb.w	r3, [sl]
  40aa4a:	e5b1      	b.n	40a5b0 <_svfprintf_r+0xb0>
  40aa4c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40aa4e:	6823      	ldr	r3, [r4, #0]
  40aa50:	930d      	str	r3, [sp, #52]	; 0x34
  40aa52:	4618      	mov	r0, r3
  40aa54:	2800      	cmp	r0, #0
  40aa56:	4623      	mov	r3, r4
  40aa58:	f103 0304 	add.w	r3, r3, #4
  40aa5c:	f6ff ae0a 	blt.w	40a674 <_svfprintf_r+0x174>
  40aa60:	930f      	str	r3, [sp, #60]	; 0x3c
  40aa62:	f89a 3000 	ldrb.w	r3, [sl]
  40aa66:	e5a3      	b.n	40a5b0 <_svfprintf_r+0xb0>
  40aa68:	0040f600 	.word	0x0040f600
  40aa6c:	0040f610 	.word	0x0040f610
  40aa70:	0040f5e0 	.word	0x0040f5e0
  40aa74:	f04b 0b10 	orr.w	fp, fp, #16
  40aa78:	f01b 0f20 	tst.w	fp, #32
  40aa7c:	9311      	str	r3, [sp, #68]	; 0x44
  40aa7e:	f43f ae23 	beq.w	40a6c8 <_svfprintf_r+0x1c8>
  40aa82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40aa84:	3507      	adds	r5, #7
  40aa86:	f025 0307 	bic.w	r3, r5, #7
  40aa8a:	f103 0208 	add.w	r2, r3, #8
  40aa8e:	e9d3 4500 	ldrd	r4, r5, [r3]
  40aa92:	920f      	str	r2, [sp, #60]	; 0x3c
  40aa94:	2301      	movs	r3, #1
  40aa96:	e626      	b.n	40a6e6 <_svfprintf_r+0x1e6>
  40aa98:	f89a 3000 	ldrb.w	r3, [sl]
  40aa9c:	2b2a      	cmp	r3, #42	; 0x2a
  40aa9e:	f10a 0401 	add.w	r4, sl, #1
  40aaa2:	f000 8727 	beq.w	40b8f4 <_svfprintf_r+0x13f4>
  40aaa6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40aaaa:	2809      	cmp	r0, #9
  40aaac:	46a2      	mov	sl, r4
  40aaae:	f200 86ad 	bhi.w	40b80c <_svfprintf_r+0x130c>
  40aab2:	2300      	movs	r3, #0
  40aab4:	461c      	mov	r4, r3
  40aab6:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40aaba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40aabe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40aac2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40aac6:	2809      	cmp	r0, #9
  40aac8:	d9f5      	bls.n	40aab6 <_svfprintf_r+0x5b6>
  40aaca:	940a      	str	r4, [sp, #40]	; 0x28
  40aacc:	e572      	b.n	40a5b4 <_svfprintf_r+0xb4>
  40aace:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40aad2:	f89a 3000 	ldrb.w	r3, [sl]
  40aad6:	e56b      	b.n	40a5b0 <_svfprintf_r+0xb0>
  40aad8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40aadc:	f89a 3000 	ldrb.w	r3, [sl]
  40aae0:	e566      	b.n	40a5b0 <_svfprintf_r+0xb0>
  40aae2:	f89a 3000 	ldrb.w	r3, [sl]
  40aae6:	2b6c      	cmp	r3, #108	; 0x6c
  40aae8:	bf03      	ittte	eq
  40aaea:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40aaee:	f04b 0b20 	orreq.w	fp, fp, #32
  40aaf2:	f10a 0a01 	addeq.w	sl, sl, #1
  40aaf6:	f04b 0b10 	orrne.w	fp, fp, #16
  40aafa:	e559      	b.n	40a5b0 <_svfprintf_r+0xb0>
  40aafc:	2a00      	cmp	r2, #0
  40aafe:	f040 8711 	bne.w	40b924 <_svfprintf_r+0x1424>
  40ab02:	f01b 0f20 	tst.w	fp, #32
  40ab06:	f040 84f9 	bne.w	40b4fc <_svfprintf_r+0xffc>
  40ab0a:	f01b 0f10 	tst.w	fp, #16
  40ab0e:	f040 84ac 	bne.w	40b46a <_svfprintf_r+0xf6a>
  40ab12:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40ab16:	f000 84a8 	beq.w	40b46a <_svfprintf_r+0xf6a>
  40ab1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ab1c:	6813      	ldr	r3, [r2, #0]
  40ab1e:	3204      	adds	r2, #4
  40ab20:	920f      	str	r2, [sp, #60]	; 0x3c
  40ab22:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40ab26:	801a      	strh	r2, [r3, #0]
  40ab28:	e511      	b.n	40a54e <_svfprintf_r+0x4e>
  40ab2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40ab2c:	4bb3      	ldr	r3, [pc, #716]	; (40adfc <_svfprintf_r+0x8fc>)
  40ab2e:	680c      	ldr	r4, [r1, #0]
  40ab30:	9318      	str	r3, [sp, #96]	; 0x60
  40ab32:	2230      	movs	r2, #48	; 0x30
  40ab34:	2378      	movs	r3, #120	; 0x78
  40ab36:	3104      	adds	r1, #4
  40ab38:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  40ab3c:	9311      	str	r3, [sp, #68]	; 0x44
  40ab3e:	f04b 0b02 	orr.w	fp, fp, #2
  40ab42:	910f      	str	r1, [sp, #60]	; 0x3c
  40ab44:	2500      	movs	r5, #0
  40ab46:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40ab4a:	2302      	movs	r3, #2
  40ab4c:	e5cb      	b.n	40a6e6 <_svfprintf_r+0x1e6>
  40ab4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40ab50:	9311      	str	r3, [sp, #68]	; 0x44
  40ab52:	680a      	ldr	r2, [r1, #0]
  40ab54:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40ab58:	2300      	movs	r3, #0
  40ab5a:	460a      	mov	r2, r1
  40ab5c:	461f      	mov	r7, r3
  40ab5e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40ab62:	3204      	adds	r2, #4
  40ab64:	2301      	movs	r3, #1
  40ab66:	9308      	str	r3, [sp, #32]
  40ab68:	f8cd b01c 	str.w	fp, [sp, #28]
  40ab6c:	970a      	str	r7, [sp, #40]	; 0x28
  40ab6e:	9712      	str	r7, [sp, #72]	; 0x48
  40ab70:	920f      	str	r2, [sp, #60]	; 0x3c
  40ab72:	930e      	str	r3, [sp, #56]	; 0x38
  40ab74:	ae28      	add	r6, sp, #160	; 0xa0
  40ab76:	e5df      	b.n	40a738 <_svfprintf_r+0x238>
  40ab78:	9311      	str	r3, [sp, #68]	; 0x44
  40ab7a:	2a00      	cmp	r2, #0
  40ab7c:	f040 86ea 	bne.w	40b954 <_svfprintf_r+0x1454>
  40ab80:	f01b 0f20 	tst.w	fp, #32
  40ab84:	d15d      	bne.n	40ac42 <_svfprintf_r+0x742>
  40ab86:	f01b 0f10 	tst.w	fp, #16
  40ab8a:	f040 8308 	bne.w	40b19e <_svfprintf_r+0xc9e>
  40ab8e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40ab92:	f000 8304 	beq.w	40b19e <_svfprintf_r+0xc9e>
  40ab96:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40ab98:	f9b1 4000 	ldrsh.w	r4, [r1]
  40ab9c:	3104      	adds	r1, #4
  40ab9e:	17e5      	asrs	r5, r4, #31
  40aba0:	4622      	mov	r2, r4
  40aba2:	462b      	mov	r3, r5
  40aba4:	910f      	str	r1, [sp, #60]	; 0x3c
  40aba6:	2a00      	cmp	r2, #0
  40aba8:	f173 0300 	sbcs.w	r3, r3, #0
  40abac:	db58      	blt.n	40ac60 <_svfprintf_r+0x760>
  40abae:	990a      	ldr	r1, [sp, #40]	; 0x28
  40abb0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40abb4:	1c4a      	adds	r2, r1, #1
  40abb6:	f04f 0301 	mov.w	r3, #1
  40abba:	f47f ad9b 	bne.w	40a6f4 <_svfprintf_r+0x1f4>
  40abbe:	ea54 0205 	orrs.w	r2, r4, r5
  40abc2:	f000 81df 	beq.w	40af84 <_svfprintf_r+0xa84>
  40abc6:	f8cd b01c 	str.w	fp, [sp, #28]
  40abca:	2b01      	cmp	r3, #1
  40abcc:	f000 827b 	beq.w	40b0c6 <_svfprintf_r+0xbc6>
  40abd0:	2b02      	cmp	r3, #2
  40abd2:	f040 8206 	bne.w	40afe2 <_svfprintf_r+0xae2>
  40abd6:	9818      	ldr	r0, [sp, #96]	; 0x60
  40abd8:	464e      	mov	r6, r9
  40abda:	0923      	lsrs	r3, r4, #4
  40abdc:	f004 010f 	and.w	r1, r4, #15
  40abe0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40abe4:	092a      	lsrs	r2, r5, #4
  40abe6:	461c      	mov	r4, r3
  40abe8:	4615      	mov	r5, r2
  40abea:	5c43      	ldrb	r3, [r0, r1]
  40abec:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40abf0:	ea54 0305 	orrs.w	r3, r4, r5
  40abf4:	d1f1      	bne.n	40abda <_svfprintf_r+0x6da>
  40abf6:	eba9 0306 	sub.w	r3, r9, r6
  40abfa:	930e      	str	r3, [sp, #56]	; 0x38
  40abfc:	e590      	b.n	40a720 <_svfprintf_r+0x220>
  40abfe:	9311      	str	r3, [sp, #68]	; 0x44
  40ac00:	2a00      	cmp	r2, #0
  40ac02:	f040 86a3 	bne.w	40b94c <_svfprintf_r+0x144c>
  40ac06:	4b7e      	ldr	r3, [pc, #504]	; (40ae00 <_svfprintf_r+0x900>)
  40ac08:	9318      	str	r3, [sp, #96]	; 0x60
  40ac0a:	f01b 0f20 	tst.w	fp, #32
  40ac0e:	f43f aeef 	beq.w	40a9f0 <_svfprintf_r+0x4f0>
  40ac12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ac14:	3507      	adds	r5, #7
  40ac16:	f025 0307 	bic.w	r3, r5, #7
  40ac1a:	f103 0208 	add.w	r2, r3, #8
  40ac1e:	f01b 0f01 	tst.w	fp, #1
  40ac22:	920f      	str	r2, [sp, #60]	; 0x3c
  40ac24:	e9d3 4500 	ldrd	r4, r5, [r3]
  40ac28:	f47f aef4 	bne.w	40aa14 <_svfprintf_r+0x514>
  40ac2c:	2302      	movs	r3, #2
  40ac2e:	e55a      	b.n	40a6e6 <_svfprintf_r+0x1e6>
  40ac30:	9311      	str	r3, [sp, #68]	; 0x44
  40ac32:	2a00      	cmp	r2, #0
  40ac34:	f040 8686 	bne.w	40b944 <_svfprintf_r+0x1444>
  40ac38:	f04b 0b10 	orr.w	fp, fp, #16
  40ac3c:	f01b 0f20 	tst.w	fp, #32
  40ac40:	d0a1      	beq.n	40ab86 <_svfprintf_r+0x686>
  40ac42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ac44:	3507      	adds	r5, #7
  40ac46:	f025 0507 	bic.w	r5, r5, #7
  40ac4a:	e9d5 2300 	ldrd	r2, r3, [r5]
  40ac4e:	2a00      	cmp	r2, #0
  40ac50:	f105 0108 	add.w	r1, r5, #8
  40ac54:	461d      	mov	r5, r3
  40ac56:	f173 0300 	sbcs.w	r3, r3, #0
  40ac5a:	910f      	str	r1, [sp, #60]	; 0x3c
  40ac5c:	4614      	mov	r4, r2
  40ac5e:	daa6      	bge.n	40abae <_svfprintf_r+0x6ae>
  40ac60:	272d      	movs	r7, #45	; 0x2d
  40ac62:	4264      	negs	r4, r4
  40ac64:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40ac68:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40ac6c:	2301      	movs	r3, #1
  40ac6e:	e53d      	b.n	40a6ec <_svfprintf_r+0x1ec>
  40ac70:	9311      	str	r3, [sp, #68]	; 0x44
  40ac72:	2a00      	cmp	r2, #0
  40ac74:	f040 8662 	bne.w	40b93c <_svfprintf_r+0x143c>
  40ac78:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ac7a:	3507      	adds	r5, #7
  40ac7c:	f025 0307 	bic.w	r3, r5, #7
  40ac80:	f103 0208 	add.w	r2, r3, #8
  40ac84:	920f      	str	r2, [sp, #60]	; 0x3c
  40ac86:	681a      	ldr	r2, [r3, #0]
  40ac88:	9215      	str	r2, [sp, #84]	; 0x54
  40ac8a:	685b      	ldr	r3, [r3, #4]
  40ac8c:	9314      	str	r3, [sp, #80]	; 0x50
  40ac8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40ac90:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40ac92:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40ac96:	4628      	mov	r0, r5
  40ac98:	4621      	mov	r1, r4
  40ac9a:	f04f 32ff 	mov.w	r2, #4294967295
  40ac9e:	4b59      	ldr	r3, [pc, #356]	; (40ae04 <_svfprintf_r+0x904>)
  40aca0:	f003 fd5c 	bl	40e75c <__aeabi_dcmpun>
  40aca4:	2800      	cmp	r0, #0
  40aca6:	f040 834a 	bne.w	40b33e <_svfprintf_r+0xe3e>
  40acaa:	4628      	mov	r0, r5
  40acac:	4621      	mov	r1, r4
  40acae:	f04f 32ff 	mov.w	r2, #4294967295
  40acb2:	4b54      	ldr	r3, [pc, #336]	; (40ae04 <_svfprintf_r+0x904>)
  40acb4:	f003 fd34 	bl	40e720 <__aeabi_dcmple>
  40acb8:	2800      	cmp	r0, #0
  40acba:	f040 8340 	bne.w	40b33e <_svfprintf_r+0xe3e>
  40acbe:	a815      	add	r0, sp, #84	; 0x54
  40acc0:	c80d      	ldmia	r0, {r0, r2, r3}
  40acc2:	9914      	ldr	r1, [sp, #80]	; 0x50
  40acc4:	f003 fd22 	bl	40e70c <__aeabi_dcmplt>
  40acc8:	2800      	cmp	r0, #0
  40acca:	f040 8530 	bne.w	40b72e <_svfprintf_r+0x122e>
  40acce:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40acd2:	4e4d      	ldr	r6, [pc, #308]	; (40ae08 <_svfprintf_r+0x908>)
  40acd4:	4b4d      	ldr	r3, [pc, #308]	; (40ae0c <_svfprintf_r+0x90c>)
  40acd6:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40acda:	9007      	str	r0, [sp, #28]
  40acdc:	9811      	ldr	r0, [sp, #68]	; 0x44
  40acde:	2203      	movs	r2, #3
  40ace0:	2100      	movs	r1, #0
  40ace2:	9208      	str	r2, [sp, #32]
  40ace4:	910a      	str	r1, [sp, #40]	; 0x28
  40ace6:	2847      	cmp	r0, #71	; 0x47
  40ace8:	bfd8      	it	le
  40acea:	461e      	movle	r6, r3
  40acec:	920e      	str	r2, [sp, #56]	; 0x38
  40acee:	9112      	str	r1, [sp, #72]	; 0x48
  40acf0:	e51e      	b.n	40a730 <_svfprintf_r+0x230>
  40acf2:	f04b 0b08 	orr.w	fp, fp, #8
  40acf6:	f89a 3000 	ldrb.w	r3, [sl]
  40acfa:	e459      	b.n	40a5b0 <_svfprintf_r+0xb0>
  40acfc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40ad00:	2300      	movs	r3, #0
  40ad02:	461c      	mov	r4, r3
  40ad04:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40ad08:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40ad0c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40ad10:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40ad14:	2809      	cmp	r0, #9
  40ad16:	d9f5      	bls.n	40ad04 <_svfprintf_r+0x804>
  40ad18:	940d      	str	r4, [sp, #52]	; 0x34
  40ad1a:	e44b      	b.n	40a5b4 <_svfprintf_r+0xb4>
  40ad1c:	f04b 0b10 	orr.w	fp, fp, #16
  40ad20:	9311      	str	r3, [sp, #68]	; 0x44
  40ad22:	f01b 0320 	ands.w	r3, fp, #32
  40ad26:	f43f ae1d 	beq.w	40a964 <_svfprintf_r+0x464>
  40ad2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ad2c:	3507      	adds	r5, #7
  40ad2e:	f025 0307 	bic.w	r3, r5, #7
  40ad32:	f103 0208 	add.w	r2, r3, #8
  40ad36:	e9d3 4500 	ldrd	r4, r5, [r3]
  40ad3a:	920f      	str	r2, [sp, #60]	; 0x3c
  40ad3c:	2300      	movs	r3, #0
  40ad3e:	e4d2      	b.n	40a6e6 <_svfprintf_r+0x1e6>
  40ad40:	9311      	str	r3, [sp, #68]	; 0x44
  40ad42:	2a00      	cmp	r2, #0
  40ad44:	f040 85e7 	bne.w	40b916 <_svfprintf_r+0x1416>
  40ad48:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40ad4a:	2a00      	cmp	r2, #0
  40ad4c:	f43f aca3 	beq.w	40a696 <_svfprintf_r+0x196>
  40ad50:	2300      	movs	r3, #0
  40ad52:	2101      	movs	r1, #1
  40ad54:	461f      	mov	r7, r3
  40ad56:	9108      	str	r1, [sp, #32]
  40ad58:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40ad5c:	f8cd b01c 	str.w	fp, [sp, #28]
  40ad60:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40ad64:	930a      	str	r3, [sp, #40]	; 0x28
  40ad66:	9312      	str	r3, [sp, #72]	; 0x48
  40ad68:	910e      	str	r1, [sp, #56]	; 0x38
  40ad6a:	ae28      	add	r6, sp, #160	; 0xa0
  40ad6c:	e4e4      	b.n	40a738 <_svfprintf_r+0x238>
  40ad6e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40ad70:	e534      	b.n	40a7dc <_svfprintf_r+0x2dc>
  40ad72:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40ad74:	2b65      	cmp	r3, #101	; 0x65
  40ad76:	f340 80a7 	ble.w	40aec8 <_svfprintf_r+0x9c8>
  40ad7a:	a815      	add	r0, sp, #84	; 0x54
  40ad7c:	c80d      	ldmia	r0, {r0, r2, r3}
  40ad7e:	9914      	ldr	r1, [sp, #80]	; 0x50
  40ad80:	f003 fcba 	bl	40e6f8 <__aeabi_dcmpeq>
  40ad84:	2800      	cmp	r0, #0
  40ad86:	f000 8150 	beq.w	40b02a <_svfprintf_r+0xb2a>
  40ad8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ad8c:	4a20      	ldr	r2, [pc, #128]	; (40ae10 <_svfprintf_r+0x910>)
  40ad8e:	f8c8 2000 	str.w	r2, [r8]
  40ad92:	3301      	adds	r3, #1
  40ad94:	3401      	adds	r4, #1
  40ad96:	2201      	movs	r2, #1
  40ad98:	2b07      	cmp	r3, #7
  40ad9a:	9427      	str	r4, [sp, #156]	; 0x9c
  40ad9c:	9326      	str	r3, [sp, #152]	; 0x98
  40ad9e:	f8c8 2004 	str.w	r2, [r8, #4]
  40ada2:	f300 836a 	bgt.w	40b47a <_svfprintf_r+0xf7a>
  40ada6:	f108 0808 	add.w	r8, r8, #8
  40adaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40adac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40adae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40adb0:	4293      	cmp	r3, r2
  40adb2:	db03      	blt.n	40adbc <_svfprintf_r+0x8bc>
  40adb4:	9b07      	ldr	r3, [sp, #28]
  40adb6:	07dd      	lsls	r5, r3, #31
  40adb8:	f57f ad82 	bpl.w	40a8c0 <_svfprintf_r+0x3c0>
  40adbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40adbe:	9919      	ldr	r1, [sp, #100]	; 0x64
  40adc0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40adc2:	f8c8 2000 	str.w	r2, [r8]
  40adc6:	3301      	adds	r3, #1
  40adc8:	440c      	add	r4, r1
  40adca:	2b07      	cmp	r3, #7
  40adcc:	f8c8 1004 	str.w	r1, [r8, #4]
  40add0:	9427      	str	r4, [sp, #156]	; 0x9c
  40add2:	9326      	str	r3, [sp, #152]	; 0x98
  40add4:	f300 839e 	bgt.w	40b514 <_svfprintf_r+0x1014>
  40add8:	f108 0808 	add.w	r8, r8, #8
  40addc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40adde:	1e5e      	subs	r6, r3, #1
  40ade0:	2e00      	cmp	r6, #0
  40ade2:	f77f ad6d 	ble.w	40a8c0 <_svfprintf_r+0x3c0>
  40ade6:	2e10      	cmp	r6, #16
  40ade8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40adea:	4d0a      	ldr	r5, [pc, #40]	; (40ae14 <_svfprintf_r+0x914>)
  40adec:	f340 81f5 	ble.w	40b1da <_svfprintf_r+0xcda>
  40adf0:	4622      	mov	r2, r4
  40adf2:	2710      	movs	r7, #16
  40adf4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40adf8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40adfa:	e013      	b.n	40ae24 <_svfprintf_r+0x924>
  40adfc:	0040f5e0 	.word	0x0040f5e0
  40ae00:	0040f5cc 	.word	0x0040f5cc
  40ae04:	7fefffff 	.word	0x7fefffff
  40ae08:	0040f5c0 	.word	0x0040f5c0
  40ae0c:	0040f5bc 	.word	0x0040f5bc
  40ae10:	0040f5fc 	.word	0x0040f5fc
  40ae14:	0040f610 	.word	0x0040f610
  40ae18:	f108 0808 	add.w	r8, r8, #8
  40ae1c:	3e10      	subs	r6, #16
  40ae1e:	2e10      	cmp	r6, #16
  40ae20:	f340 81da 	ble.w	40b1d8 <_svfprintf_r+0xcd8>
  40ae24:	3301      	adds	r3, #1
  40ae26:	3210      	adds	r2, #16
  40ae28:	2b07      	cmp	r3, #7
  40ae2a:	9227      	str	r2, [sp, #156]	; 0x9c
  40ae2c:	9326      	str	r3, [sp, #152]	; 0x98
  40ae2e:	e888 00a0 	stmia.w	r8, {r5, r7}
  40ae32:	ddf1      	ble.n	40ae18 <_svfprintf_r+0x918>
  40ae34:	aa25      	add	r2, sp, #148	; 0x94
  40ae36:	4621      	mov	r1, r4
  40ae38:	4658      	mov	r0, fp
  40ae3a:	f002 fbc9 	bl	40d5d0 <__ssprint_r>
  40ae3e:	2800      	cmp	r0, #0
  40ae40:	f47f ac30 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40ae44:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40ae46:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ae48:	46c8      	mov	r8, r9
  40ae4a:	e7e7      	b.n	40ae1c <_svfprintf_r+0x91c>
  40ae4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ae4e:	9a08      	ldr	r2, [sp, #32]
  40ae50:	1a9f      	subs	r7, r3, r2
  40ae52:	2f00      	cmp	r7, #0
  40ae54:	f77f ace5 	ble.w	40a822 <_svfprintf_r+0x322>
  40ae58:	2f10      	cmp	r7, #16
  40ae5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ae5c:	4db6      	ldr	r5, [pc, #728]	; (40b138 <_svfprintf_r+0xc38>)
  40ae5e:	dd27      	ble.n	40aeb0 <_svfprintf_r+0x9b0>
  40ae60:	4642      	mov	r2, r8
  40ae62:	4621      	mov	r1, r4
  40ae64:	46b0      	mov	r8, r6
  40ae66:	f04f 0b10 	mov.w	fp, #16
  40ae6a:	462e      	mov	r6, r5
  40ae6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40ae6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40ae70:	e004      	b.n	40ae7c <_svfprintf_r+0x97c>
  40ae72:	3f10      	subs	r7, #16
  40ae74:	2f10      	cmp	r7, #16
  40ae76:	f102 0208 	add.w	r2, r2, #8
  40ae7a:	dd15      	ble.n	40aea8 <_svfprintf_r+0x9a8>
  40ae7c:	3301      	adds	r3, #1
  40ae7e:	3110      	adds	r1, #16
  40ae80:	2b07      	cmp	r3, #7
  40ae82:	9127      	str	r1, [sp, #156]	; 0x9c
  40ae84:	9326      	str	r3, [sp, #152]	; 0x98
  40ae86:	e882 0840 	stmia.w	r2, {r6, fp}
  40ae8a:	ddf2      	ble.n	40ae72 <_svfprintf_r+0x972>
  40ae8c:	aa25      	add	r2, sp, #148	; 0x94
  40ae8e:	4629      	mov	r1, r5
  40ae90:	4620      	mov	r0, r4
  40ae92:	f002 fb9d 	bl	40d5d0 <__ssprint_r>
  40ae96:	2800      	cmp	r0, #0
  40ae98:	f47f ac04 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40ae9c:	3f10      	subs	r7, #16
  40ae9e:	2f10      	cmp	r7, #16
  40aea0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40aea2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40aea4:	464a      	mov	r2, r9
  40aea6:	dce9      	bgt.n	40ae7c <_svfprintf_r+0x97c>
  40aea8:	4635      	mov	r5, r6
  40aeaa:	460c      	mov	r4, r1
  40aeac:	4646      	mov	r6, r8
  40aeae:	4690      	mov	r8, r2
  40aeb0:	3301      	adds	r3, #1
  40aeb2:	443c      	add	r4, r7
  40aeb4:	2b07      	cmp	r3, #7
  40aeb6:	9427      	str	r4, [sp, #156]	; 0x9c
  40aeb8:	9326      	str	r3, [sp, #152]	; 0x98
  40aeba:	e888 00a0 	stmia.w	r8, {r5, r7}
  40aebe:	f300 8232 	bgt.w	40b326 <_svfprintf_r+0xe26>
  40aec2:	f108 0808 	add.w	r8, r8, #8
  40aec6:	e4ac      	b.n	40a822 <_svfprintf_r+0x322>
  40aec8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40aeca:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40aecc:	2b01      	cmp	r3, #1
  40aece:	f340 81fe 	ble.w	40b2ce <_svfprintf_r+0xdce>
  40aed2:	3701      	adds	r7, #1
  40aed4:	3401      	adds	r4, #1
  40aed6:	2301      	movs	r3, #1
  40aed8:	2f07      	cmp	r7, #7
  40aeda:	9427      	str	r4, [sp, #156]	; 0x9c
  40aedc:	9726      	str	r7, [sp, #152]	; 0x98
  40aede:	f8c8 6000 	str.w	r6, [r8]
  40aee2:	f8c8 3004 	str.w	r3, [r8, #4]
  40aee6:	f300 8203 	bgt.w	40b2f0 <_svfprintf_r+0xdf0>
  40aeea:	f108 0808 	add.w	r8, r8, #8
  40aeee:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40aef0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40aef2:	f8c8 3000 	str.w	r3, [r8]
  40aef6:	3701      	adds	r7, #1
  40aef8:	4414      	add	r4, r2
  40aefa:	2f07      	cmp	r7, #7
  40aefc:	9427      	str	r4, [sp, #156]	; 0x9c
  40aefe:	9726      	str	r7, [sp, #152]	; 0x98
  40af00:	f8c8 2004 	str.w	r2, [r8, #4]
  40af04:	f300 8200 	bgt.w	40b308 <_svfprintf_r+0xe08>
  40af08:	f108 0808 	add.w	r8, r8, #8
  40af0c:	a815      	add	r0, sp, #84	; 0x54
  40af0e:	c80d      	ldmia	r0, {r0, r2, r3}
  40af10:	9914      	ldr	r1, [sp, #80]	; 0x50
  40af12:	f003 fbf1 	bl	40e6f8 <__aeabi_dcmpeq>
  40af16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40af18:	2800      	cmp	r0, #0
  40af1a:	f040 8101 	bne.w	40b120 <_svfprintf_r+0xc20>
  40af1e:	3b01      	subs	r3, #1
  40af20:	3701      	adds	r7, #1
  40af22:	3601      	adds	r6, #1
  40af24:	441c      	add	r4, r3
  40af26:	2f07      	cmp	r7, #7
  40af28:	9726      	str	r7, [sp, #152]	; 0x98
  40af2a:	9427      	str	r4, [sp, #156]	; 0x9c
  40af2c:	f8c8 6000 	str.w	r6, [r8]
  40af30:	f8c8 3004 	str.w	r3, [r8, #4]
  40af34:	f300 8127 	bgt.w	40b186 <_svfprintf_r+0xc86>
  40af38:	f108 0808 	add.w	r8, r8, #8
  40af3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40af3e:	f8c8 2004 	str.w	r2, [r8, #4]
  40af42:	3701      	adds	r7, #1
  40af44:	4414      	add	r4, r2
  40af46:	ab21      	add	r3, sp, #132	; 0x84
  40af48:	2f07      	cmp	r7, #7
  40af4a:	9427      	str	r4, [sp, #156]	; 0x9c
  40af4c:	9726      	str	r7, [sp, #152]	; 0x98
  40af4e:	f8c8 3000 	str.w	r3, [r8]
  40af52:	f77f acb3 	ble.w	40a8bc <_svfprintf_r+0x3bc>
  40af56:	aa25      	add	r2, sp, #148	; 0x94
  40af58:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40af5a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40af5c:	f002 fb38 	bl	40d5d0 <__ssprint_r>
  40af60:	2800      	cmp	r0, #0
  40af62:	f47f ab9f 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40af66:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40af68:	46c8      	mov	r8, r9
  40af6a:	e4a9      	b.n	40a8c0 <_svfprintf_r+0x3c0>
  40af6c:	aa25      	add	r2, sp, #148	; 0x94
  40af6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40af70:	980c      	ldr	r0, [sp, #48]	; 0x30
  40af72:	f002 fb2d 	bl	40d5d0 <__ssprint_r>
  40af76:	2800      	cmp	r0, #0
  40af78:	f43f aceb 	beq.w	40a952 <_svfprintf_r+0x452>
  40af7c:	f7ff bb92 	b.w	40a6a4 <_svfprintf_r+0x1a4>
  40af80:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40af84:	2b01      	cmp	r3, #1
  40af86:	f000 8134 	beq.w	40b1f2 <_svfprintf_r+0xcf2>
  40af8a:	2b02      	cmp	r3, #2
  40af8c:	d125      	bne.n	40afda <_svfprintf_r+0xada>
  40af8e:	f8cd b01c 	str.w	fp, [sp, #28]
  40af92:	2400      	movs	r4, #0
  40af94:	2500      	movs	r5, #0
  40af96:	e61e      	b.n	40abd6 <_svfprintf_r+0x6d6>
  40af98:	aa25      	add	r2, sp, #148	; 0x94
  40af9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40af9c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40af9e:	f002 fb17 	bl	40d5d0 <__ssprint_r>
  40afa2:	2800      	cmp	r0, #0
  40afa4:	f47f ab7e 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40afa8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40afaa:	46c8      	mov	r8, r9
  40afac:	e475      	b.n	40a89a <_svfprintf_r+0x39a>
  40afae:	aa25      	add	r2, sp, #148	; 0x94
  40afb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40afb2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40afb4:	f002 fb0c 	bl	40d5d0 <__ssprint_r>
  40afb8:	2800      	cmp	r0, #0
  40afba:	f47f ab73 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40afbe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40afc0:	46c8      	mov	r8, r9
  40afc2:	e41b      	b.n	40a7fc <_svfprintf_r+0x2fc>
  40afc4:	aa25      	add	r2, sp, #148	; 0x94
  40afc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40afc8:	980c      	ldr	r0, [sp, #48]	; 0x30
  40afca:	f002 fb01 	bl	40d5d0 <__ssprint_r>
  40afce:	2800      	cmp	r0, #0
  40afd0:	f47f ab68 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40afd4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40afd6:	46c8      	mov	r8, r9
  40afd8:	e420      	b.n	40a81c <_svfprintf_r+0x31c>
  40afda:	f8cd b01c 	str.w	fp, [sp, #28]
  40afde:	2400      	movs	r4, #0
  40afe0:	2500      	movs	r5, #0
  40afe2:	4649      	mov	r1, r9
  40afe4:	e000      	b.n	40afe8 <_svfprintf_r+0xae8>
  40afe6:	4631      	mov	r1, r6
  40afe8:	08e2      	lsrs	r2, r4, #3
  40afea:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40afee:	08e8      	lsrs	r0, r5, #3
  40aff0:	f004 0307 	and.w	r3, r4, #7
  40aff4:	4605      	mov	r5, r0
  40aff6:	4614      	mov	r4, r2
  40aff8:	3330      	adds	r3, #48	; 0x30
  40affa:	ea54 0205 	orrs.w	r2, r4, r5
  40affe:	f801 3c01 	strb.w	r3, [r1, #-1]
  40b002:	f101 36ff 	add.w	r6, r1, #4294967295
  40b006:	d1ee      	bne.n	40afe6 <_svfprintf_r+0xae6>
  40b008:	9a07      	ldr	r2, [sp, #28]
  40b00a:	07d2      	lsls	r2, r2, #31
  40b00c:	f57f adf3 	bpl.w	40abf6 <_svfprintf_r+0x6f6>
  40b010:	2b30      	cmp	r3, #48	; 0x30
  40b012:	f43f adf0 	beq.w	40abf6 <_svfprintf_r+0x6f6>
  40b016:	3902      	subs	r1, #2
  40b018:	2330      	movs	r3, #48	; 0x30
  40b01a:	f806 3c01 	strb.w	r3, [r6, #-1]
  40b01e:	eba9 0301 	sub.w	r3, r9, r1
  40b022:	930e      	str	r3, [sp, #56]	; 0x38
  40b024:	460e      	mov	r6, r1
  40b026:	f7ff bb7b 	b.w	40a720 <_svfprintf_r+0x220>
  40b02a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40b02c:	2900      	cmp	r1, #0
  40b02e:	f340 822e 	ble.w	40b48e <_svfprintf_r+0xf8e>
  40b032:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b034:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40b036:	4293      	cmp	r3, r2
  40b038:	bfa8      	it	ge
  40b03a:	4613      	movge	r3, r2
  40b03c:	2b00      	cmp	r3, #0
  40b03e:	461f      	mov	r7, r3
  40b040:	dd0d      	ble.n	40b05e <_svfprintf_r+0xb5e>
  40b042:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b044:	f8c8 6000 	str.w	r6, [r8]
  40b048:	3301      	adds	r3, #1
  40b04a:	443c      	add	r4, r7
  40b04c:	2b07      	cmp	r3, #7
  40b04e:	9427      	str	r4, [sp, #156]	; 0x9c
  40b050:	f8c8 7004 	str.w	r7, [r8, #4]
  40b054:	9326      	str	r3, [sp, #152]	; 0x98
  40b056:	f300 831f 	bgt.w	40b698 <_svfprintf_r+0x1198>
  40b05a:	f108 0808 	add.w	r8, r8, #8
  40b05e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b060:	2f00      	cmp	r7, #0
  40b062:	bfa8      	it	ge
  40b064:	1bdb      	subge	r3, r3, r7
  40b066:	2b00      	cmp	r3, #0
  40b068:	461f      	mov	r7, r3
  40b06a:	f340 80d6 	ble.w	40b21a <_svfprintf_r+0xd1a>
  40b06e:	2f10      	cmp	r7, #16
  40b070:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b072:	4d31      	ldr	r5, [pc, #196]	; (40b138 <_svfprintf_r+0xc38>)
  40b074:	f340 81ed 	ble.w	40b452 <_svfprintf_r+0xf52>
  40b078:	4642      	mov	r2, r8
  40b07a:	4621      	mov	r1, r4
  40b07c:	46b0      	mov	r8, r6
  40b07e:	f04f 0b10 	mov.w	fp, #16
  40b082:	462e      	mov	r6, r5
  40b084:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b086:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40b088:	e004      	b.n	40b094 <_svfprintf_r+0xb94>
  40b08a:	3208      	adds	r2, #8
  40b08c:	3f10      	subs	r7, #16
  40b08e:	2f10      	cmp	r7, #16
  40b090:	f340 81db 	ble.w	40b44a <_svfprintf_r+0xf4a>
  40b094:	3301      	adds	r3, #1
  40b096:	3110      	adds	r1, #16
  40b098:	2b07      	cmp	r3, #7
  40b09a:	9127      	str	r1, [sp, #156]	; 0x9c
  40b09c:	9326      	str	r3, [sp, #152]	; 0x98
  40b09e:	e882 0840 	stmia.w	r2, {r6, fp}
  40b0a2:	ddf2      	ble.n	40b08a <_svfprintf_r+0xb8a>
  40b0a4:	aa25      	add	r2, sp, #148	; 0x94
  40b0a6:	4629      	mov	r1, r5
  40b0a8:	4620      	mov	r0, r4
  40b0aa:	f002 fa91 	bl	40d5d0 <__ssprint_r>
  40b0ae:	2800      	cmp	r0, #0
  40b0b0:	f47f aaf8 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b0b4:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40b0b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b0b8:	464a      	mov	r2, r9
  40b0ba:	e7e7      	b.n	40b08c <_svfprintf_r+0xb8c>
  40b0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b0be:	930e      	str	r3, [sp, #56]	; 0x38
  40b0c0:	464e      	mov	r6, r9
  40b0c2:	f7ff bb2d 	b.w	40a720 <_svfprintf_r+0x220>
  40b0c6:	2d00      	cmp	r5, #0
  40b0c8:	bf08      	it	eq
  40b0ca:	2c0a      	cmpeq	r4, #10
  40b0cc:	f0c0 808f 	bcc.w	40b1ee <_svfprintf_r+0xcee>
  40b0d0:	464e      	mov	r6, r9
  40b0d2:	4620      	mov	r0, r4
  40b0d4:	4629      	mov	r1, r5
  40b0d6:	220a      	movs	r2, #10
  40b0d8:	2300      	movs	r3, #0
  40b0da:	f7fe fea9 	bl	409e30 <__aeabi_uldivmod>
  40b0de:	3230      	adds	r2, #48	; 0x30
  40b0e0:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40b0e4:	4620      	mov	r0, r4
  40b0e6:	4629      	mov	r1, r5
  40b0e8:	2300      	movs	r3, #0
  40b0ea:	220a      	movs	r2, #10
  40b0ec:	f7fe fea0 	bl	409e30 <__aeabi_uldivmod>
  40b0f0:	4604      	mov	r4, r0
  40b0f2:	460d      	mov	r5, r1
  40b0f4:	ea54 0305 	orrs.w	r3, r4, r5
  40b0f8:	d1eb      	bne.n	40b0d2 <_svfprintf_r+0xbd2>
  40b0fa:	eba9 0306 	sub.w	r3, r9, r6
  40b0fe:	930e      	str	r3, [sp, #56]	; 0x38
  40b100:	f7ff bb0e 	b.w	40a720 <_svfprintf_r+0x220>
  40b104:	aa25      	add	r2, sp, #148	; 0x94
  40b106:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b108:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b10a:	f002 fa61 	bl	40d5d0 <__ssprint_r>
  40b10e:	2800      	cmp	r0, #0
  40b110:	f47f aac8 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b114:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40b118:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b11a:	46c8      	mov	r8, r9
  40b11c:	f7ff bb5e 	b.w	40a7dc <_svfprintf_r+0x2dc>
  40b120:	1e5e      	subs	r6, r3, #1
  40b122:	2e00      	cmp	r6, #0
  40b124:	f77f af0a 	ble.w	40af3c <_svfprintf_r+0xa3c>
  40b128:	2e10      	cmp	r6, #16
  40b12a:	4d03      	ldr	r5, [pc, #12]	; (40b138 <_svfprintf_r+0xc38>)
  40b12c:	dd22      	ble.n	40b174 <_svfprintf_r+0xc74>
  40b12e:	4622      	mov	r2, r4
  40b130:	f04f 0b10 	mov.w	fp, #16
  40b134:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b136:	e006      	b.n	40b146 <_svfprintf_r+0xc46>
  40b138:	0040f610 	.word	0x0040f610
  40b13c:	3e10      	subs	r6, #16
  40b13e:	2e10      	cmp	r6, #16
  40b140:	f108 0808 	add.w	r8, r8, #8
  40b144:	dd15      	ble.n	40b172 <_svfprintf_r+0xc72>
  40b146:	3701      	adds	r7, #1
  40b148:	3210      	adds	r2, #16
  40b14a:	2f07      	cmp	r7, #7
  40b14c:	9227      	str	r2, [sp, #156]	; 0x9c
  40b14e:	9726      	str	r7, [sp, #152]	; 0x98
  40b150:	e888 0820 	stmia.w	r8, {r5, fp}
  40b154:	ddf2      	ble.n	40b13c <_svfprintf_r+0xc3c>
  40b156:	aa25      	add	r2, sp, #148	; 0x94
  40b158:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b15a:	4620      	mov	r0, r4
  40b15c:	f002 fa38 	bl	40d5d0 <__ssprint_r>
  40b160:	2800      	cmp	r0, #0
  40b162:	f47f aa9f 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b166:	3e10      	subs	r6, #16
  40b168:	2e10      	cmp	r6, #16
  40b16a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40b16c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40b16e:	46c8      	mov	r8, r9
  40b170:	dce9      	bgt.n	40b146 <_svfprintf_r+0xc46>
  40b172:	4614      	mov	r4, r2
  40b174:	3701      	adds	r7, #1
  40b176:	4434      	add	r4, r6
  40b178:	2f07      	cmp	r7, #7
  40b17a:	9427      	str	r4, [sp, #156]	; 0x9c
  40b17c:	9726      	str	r7, [sp, #152]	; 0x98
  40b17e:	e888 0060 	stmia.w	r8, {r5, r6}
  40b182:	f77f aed9 	ble.w	40af38 <_svfprintf_r+0xa38>
  40b186:	aa25      	add	r2, sp, #148	; 0x94
  40b188:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b18a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b18c:	f002 fa20 	bl	40d5d0 <__ssprint_r>
  40b190:	2800      	cmp	r0, #0
  40b192:	f47f aa87 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b196:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b198:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40b19a:	46c8      	mov	r8, r9
  40b19c:	e6ce      	b.n	40af3c <_svfprintf_r+0xa3c>
  40b19e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b1a0:	6814      	ldr	r4, [r2, #0]
  40b1a2:	4613      	mov	r3, r2
  40b1a4:	3304      	adds	r3, #4
  40b1a6:	17e5      	asrs	r5, r4, #31
  40b1a8:	930f      	str	r3, [sp, #60]	; 0x3c
  40b1aa:	4622      	mov	r2, r4
  40b1ac:	462b      	mov	r3, r5
  40b1ae:	e4fa      	b.n	40aba6 <_svfprintf_r+0x6a6>
  40b1b0:	3204      	adds	r2, #4
  40b1b2:	681c      	ldr	r4, [r3, #0]
  40b1b4:	920f      	str	r2, [sp, #60]	; 0x3c
  40b1b6:	2301      	movs	r3, #1
  40b1b8:	2500      	movs	r5, #0
  40b1ba:	f7ff ba94 	b.w	40a6e6 <_svfprintf_r+0x1e6>
  40b1be:	681c      	ldr	r4, [r3, #0]
  40b1c0:	3304      	adds	r3, #4
  40b1c2:	930f      	str	r3, [sp, #60]	; 0x3c
  40b1c4:	2500      	movs	r5, #0
  40b1c6:	e421      	b.n	40aa0c <_svfprintf_r+0x50c>
  40b1c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40b1ca:	460a      	mov	r2, r1
  40b1cc:	3204      	adds	r2, #4
  40b1ce:	680c      	ldr	r4, [r1, #0]
  40b1d0:	920f      	str	r2, [sp, #60]	; 0x3c
  40b1d2:	2500      	movs	r5, #0
  40b1d4:	f7ff ba87 	b.w	40a6e6 <_svfprintf_r+0x1e6>
  40b1d8:	4614      	mov	r4, r2
  40b1da:	3301      	adds	r3, #1
  40b1dc:	4434      	add	r4, r6
  40b1de:	2b07      	cmp	r3, #7
  40b1e0:	9427      	str	r4, [sp, #156]	; 0x9c
  40b1e2:	9326      	str	r3, [sp, #152]	; 0x98
  40b1e4:	e888 0060 	stmia.w	r8, {r5, r6}
  40b1e8:	f77f ab68 	ble.w	40a8bc <_svfprintf_r+0x3bc>
  40b1ec:	e6b3      	b.n	40af56 <_svfprintf_r+0xa56>
  40b1ee:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40b1f2:	f8cd b01c 	str.w	fp, [sp, #28]
  40b1f6:	ae42      	add	r6, sp, #264	; 0x108
  40b1f8:	3430      	adds	r4, #48	; 0x30
  40b1fa:	2301      	movs	r3, #1
  40b1fc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40b200:	930e      	str	r3, [sp, #56]	; 0x38
  40b202:	f7ff ba8d 	b.w	40a720 <_svfprintf_r+0x220>
  40b206:	aa25      	add	r2, sp, #148	; 0x94
  40b208:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b20a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b20c:	f002 f9e0 	bl	40d5d0 <__ssprint_r>
  40b210:	2800      	cmp	r0, #0
  40b212:	f47f aa47 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b216:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b218:	46c8      	mov	r8, r9
  40b21a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40b21c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b21e:	429a      	cmp	r2, r3
  40b220:	db44      	blt.n	40b2ac <_svfprintf_r+0xdac>
  40b222:	9b07      	ldr	r3, [sp, #28]
  40b224:	07d9      	lsls	r1, r3, #31
  40b226:	d441      	bmi.n	40b2ac <_svfprintf_r+0xdac>
  40b228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b22a:	9812      	ldr	r0, [sp, #72]	; 0x48
  40b22c:	1a9a      	subs	r2, r3, r2
  40b22e:	1a1d      	subs	r5, r3, r0
  40b230:	4295      	cmp	r5, r2
  40b232:	bfa8      	it	ge
  40b234:	4615      	movge	r5, r2
  40b236:	2d00      	cmp	r5, #0
  40b238:	dd0e      	ble.n	40b258 <_svfprintf_r+0xd58>
  40b23a:	9926      	ldr	r1, [sp, #152]	; 0x98
  40b23c:	f8c8 5004 	str.w	r5, [r8, #4]
  40b240:	3101      	adds	r1, #1
  40b242:	4406      	add	r6, r0
  40b244:	442c      	add	r4, r5
  40b246:	2907      	cmp	r1, #7
  40b248:	f8c8 6000 	str.w	r6, [r8]
  40b24c:	9427      	str	r4, [sp, #156]	; 0x9c
  40b24e:	9126      	str	r1, [sp, #152]	; 0x98
  40b250:	f300 823b 	bgt.w	40b6ca <_svfprintf_r+0x11ca>
  40b254:	f108 0808 	add.w	r8, r8, #8
  40b258:	2d00      	cmp	r5, #0
  40b25a:	bfac      	ite	ge
  40b25c:	1b56      	subge	r6, r2, r5
  40b25e:	4616      	movlt	r6, r2
  40b260:	2e00      	cmp	r6, #0
  40b262:	f77f ab2d 	ble.w	40a8c0 <_svfprintf_r+0x3c0>
  40b266:	2e10      	cmp	r6, #16
  40b268:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b26a:	4db0      	ldr	r5, [pc, #704]	; (40b52c <_svfprintf_r+0x102c>)
  40b26c:	ddb5      	ble.n	40b1da <_svfprintf_r+0xcda>
  40b26e:	4622      	mov	r2, r4
  40b270:	2710      	movs	r7, #16
  40b272:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40b276:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40b278:	e004      	b.n	40b284 <_svfprintf_r+0xd84>
  40b27a:	f108 0808 	add.w	r8, r8, #8
  40b27e:	3e10      	subs	r6, #16
  40b280:	2e10      	cmp	r6, #16
  40b282:	dda9      	ble.n	40b1d8 <_svfprintf_r+0xcd8>
  40b284:	3301      	adds	r3, #1
  40b286:	3210      	adds	r2, #16
  40b288:	2b07      	cmp	r3, #7
  40b28a:	9227      	str	r2, [sp, #156]	; 0x9c
  40b28c:	9326      	str	r3, [sp, #152]	; 0x98
  40b28e:	e888 00a0 	stmia.w	r8, {r5, r7}
  40b292:	ddf2      	ble.n	40b27a <_svfprintf_r+0xd7a>
  40b294:	aa25      	add	r2, sp, #148	; 0x94
  40b296:	4621      	mov	r1, r4
  40b298:	4658      	mov	r0, fp
  40b29a:	f002 f999 	bl	40d5d0 <__ssprint_r>
  40b29e:	2800      	cmp	r0, #0
  40b2a0:	f47f aa00 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b2a4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40b2a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b2a8:	46c8      	mov	r8, r9
  40b2aa:	e7e8      	b.n	40b27e <_svfprintf_r+0xd7e>
  40b2ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b2ae:	9819      	ldr	r0, [sp, #100]	; 0x64
  40b2b0:	991a      	ldr	r1, [sp, #104]	; 0x68
  40b2b2:	f8c8 1000 	str.w	r1, [r8]
  40b2b6:	3301      	adds	r3, #1
  40b2b8:	4404      	add	r4, r0
  40b2ba:	2b07      	cmp	r3, #7
  40b2bc:	9427      	str	r4, [sp, #156]	; 0x9c
  40b2be:	f8c8 0004 	str.w	r0, [r8, #4]
  40b2c2:	9326      	str	r3, [sp, #152]	; 0x98
  40b2c4:	f300 81f5 	bgt.w	40b6b2 <_svfprintf_r+0x11b2>
  40b2c8:	f108 0808 	add.w	r8, r8, #8
  40b2cc:	e7ac      	b.n	40b228 <_svfprintf_r+0xd28>
  40b2ce:	9b07      	ldr	r3, [sp, #28]
  40b2d0:	07da      	lsls	r2, r3, #31
  40b2d2:	f53f adfe 	bmi.w	40aed2 <_svfprintf_r+0x9d2>
  40b2d6:	3701      	adds	r7, #1
  40b2d8:	3401      	adds	r4, #1
  40b2da:	2301      	movs	r3, #1
  40b2dc:	2f07      	cmp	r7, #7
  40b2de:	9427      	str	r4, [sp, #156]	; 0x9c
  40b2e0:	9726      	str	r7, [sp, #152]	; 0x98
  40b2e2:	f8c8 6000 	str.w	r6, [r8]
  40b2e6:	f8c8 3004 	str.w	r3, [r8, #4]
  40b2ea:	f77f ae25 	ble.w	40af38 <_svfprintf_r+0xa38>
  40b2ee:	e74a      	b.n	40b186 <_svfprintf_r+0xc86>
  40b2f0:	aa25      	add	r2, sp, #148	; 0x94
  40b2f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b2f4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b2f6:	f002 f96b 	bl	40d5d0 <__ssprint_r>
  40b2fa:	2800      	cmp	r0, #0
  40b2fc:	f47f a9d2 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b300:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b302:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40b304:	46c8      	mov	r8, r9
  40b306:	e5f2      	b.n	40aeee <_svfprintf_r+0x9ee>
  40b308:	aa25      	add	r2, sp, #148	; 0x94
  40b30a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b30c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b30e:	f002 f95f 	bl	40d5d0 <__ssprint_r>
  40b312:	2800      	cmp	r0, #0
  40b314:	f47f a9c6 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b318:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b31a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40b31c:	46c8      	mov	r8, r9
  40b31e:	e5f5      	b.n	40af0c <_svfprintf_r+0xa0c>
  40b320:	464e      	mov	r6, r9
  40b322:	f7ff b9fd 	b.w	40a720 <_svfprintf_r+0x220>
  40b326:	aa25      	add	r2, sp, #148	; 0x94
  40b328:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b32a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b32c:	f002 f950 	bl	40d5d0 <__ssprint_r>
  40b330:	2800      	cmp	r0, #0
  40b332:	f47f a9b7 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b336:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b338:	46c8      	mov	r8, r9
  40b33a:	f7ff ba72 	b.w	40a822 <_svfprintf_r+0x322>
  40b33e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40b340:	4622      	mov	r2, r4
  40b342:	4620      	mov	r0, r4
  40b344:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40b346:	4623      	mov	r3, r4
  40b348:	4621      	mov	r1, r4
  40b34a:	f003 fa07 	bl	40e75c <__aeabi_dcmpun>
  40b34e:	2800      	cmp	r0, #0
  40b350:	f040 8286 	bne.w	40b860 <_svfprintf_r+0x1360>
  40b354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b356:	3301      	adds	r3, #1
  40b358:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b35a:	f023 0320 	bic.w	r3, r3, #32
  40b35e:	930e      	str	r3, [sp, #56]	; 0x38
  40b360:	f000 81e2 	beq.w	40b728 <_svfprintf_r+0x1228>
  40b364:	2b47      	cmp	r3, #71	; 0x47
  40b366:	f000 811e 	beq.w	40b5a6 <_svfprintf_r+0x10a6>
  40b36a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40b36e:	9307      	str	r3, [sp, #28]
  40b370:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b372:	1e1f      	subs	r7, r3, #0
  40b374:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40b376:	9308      	str	r3, [sp, #32]
  40b378:	bfbb      	ittet	lt
  40b37a:	463b      	movlt	r3, r7
  40b37c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40b380:	2300      	movge	r3, #0
  40b382:	232d      	movlt	r3, #45	; 0x2d
  40b384:	9310      	str	r3, [sp, #64]	; 0x40
  40b386:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b388:	2b66      	cmp	r3, #102	; 0x66
  40b38a:	f000 81bb 	beq.w	40b704 <_svfprintf_r+0x1204>
  40b38e:	2b46      	cmp	r3, #70	; 0x46
  40b390:	f000 80df 	beq.w	40b552 <_svfprintf_r+0x1052>
  40b394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b396:	9a08      	ldr	r2, [sp, #32]
  40b398:	2b45      	cmp	r3, #69	; 0x45
  40b39a:	bf0c      	ite	eq
  40b39c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40b39e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40b3a0:	a823      	add	r0, sp, #140	; 0x8c
  40b3a2:	a920      	add	r1, sp, #128	; 0x80
  40b3a4:	bf08      	it	eq
  40b3a6:	1c5d      	addeq	r5, r3, #1
  40b3a8:	9004      	str	r0, [sp, #16]
  40b3aa:	9103      	str	r1, [sp, #12]
  40b3ac:	a81f      	add	r0, sp, #124	; 0x7c
  40b3ae:	2102      	movs	r1, #2
  40b3b0:	463b      	mov	r3, r7
  40b3b2:	9002      	str	r0, [sp, #8]
  40b3b4:	9501      	str	r5, [sp, #4]
  40b3b6:	9100      	str	r1, [sp, #0]
  40b3b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b3ba:	f000 fb99 	bl	40baf0 <_dtoa_r>
  40b3be:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b3c0:	2b67      	cmp	r3, #103	; 0x67
  40b3c2:	4606      	mov	r6, r0
  40b3c4:	f040 81e0 	bne.w	40b788 <_svfprintf_r+0x1288>
  40b3c8:	f01b 0f01 	tst.w	fp, #1
  40b3cc:	f000 8246 	beq.w	40b85c <_svfprintf_r+0x135c>
  40b3d0:	1974      	adds	r4, r6, r5
  40b3d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40b3d4:	9808      	ldr	r0, [sp, #32]
  40b3d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40b3d8:	4639      	mov	r1, r7
  40b3da:	f003 f98d 	bl	40e6f8 <__aeabi_dcmpeq>
  40b3de:	2800      	cmp	r0, #0
  40b3e0:	f040 8165 	bne.w	40b6ae <_svfprintf_r+0x11ae>
  40b3e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40b3e6:	42a3      	cmp	r3, r4
  40b3e8:	d206      	bcs.n	40b3f8 <_svfprintf_r+0xef8>
  40b3ea:	2130      	movs	r1, #48	; 0x30
  40b3ec:	1c5a      	adds	r2, r3, #1
  40b3ee:	9223      	str	r2, [sp, #140]	; 0x8c
  40b3f0:	7019      	strb	r1, [r3, #0]
  40b3f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40b3f4:	429c      	cmp	r4, r3
  40b3f6:	d8f9      	bhi.n	40b3ec <_svfprintf_r+0xeec>
  40b3f8:	1b9b      	subs	r3, r3, r6
  40b3fa:	9313      	str	r3, [sp, #76]	; 0x4c
  40b3fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b3fe:	2b47      	cmp	r3, #71	; 0x47
  40b400:	f000 80e9 	beq.w	40b5d6 <_svfprintf_r+0x10d6>
  40b404:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b406:	2b65      	cmp	r3, #101	; 0x65
  40b408:	f340 81cd 	ble.w	40b7a6 <_svfprintf_r+0x12a6>
  40b40c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b40e:	2b66      	cmp	r3, #102	; 0x66
  40b410:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40b412:	9312      	str	r3, [sp, #72]	; 0x48
  40b414:	f000 819e 	beq.w	40b754 <_svfprintf_r+0x1254>
  40b418:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b41a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40b41c:	4619      	mov	r1, r3
  40b41e:	4291      	cmp	r1, r2
  40b420:	f300 818a 	bgt.w	40b738 <_svfprintf_r+0x1238>
  40b424:	f01b 0f01 	tst.w	fp, #1
  40b428:	f040 8213 	bne.w	40b852 <_svfprintf_r+0x1352>
  40b42c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40b430:	9308      	str	r3, [sp, #32]
  40b432:	2367      	movs	r3, #103	; 0x67
  40b434:	920e      	str	r2, [sp, #56]	; 0x38
  40b436:	9311      	str	r3, [sp, #68]	; 0x44
  40b438:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40b43a:	2b00      	cmp	r3, #0
  40b43c:	f040 80c4 	bne.w	40b5c8 <_svfprintf_r+0x10c8>
  40b440:	930a      	str	r3, [sp, #40]	; 0x28
  40b442:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40b446:	f7ff b973 	b.w	40a730 <_svfprintf_r+0x230>
  40b44a:	4635      	mov	r5, r6
  40b44c:	460c      	mov	r4, r1
  40b44e:	4646      	mov	r6, r8
  40b450:	4690      	mov	r8, r2
  40b452:	3301      	adds	r3, #1
  40b454:	443c      	add	r4, r7
  40b456:	2b07      	cmp	r3, #7
  40b458:	9427      	str	r4, [sp, #156]	; 0x9c
  40b45a:	9326      	str	r3, [sp, #152]	; 0x98
  40b45c:	e888 00a0 	stmia.w	r8, {r5, r7}
  40b460:	f73f aed1 	bgt.w	40b206 <_svfprintf_r+0xd06>
  40b464:	f108 0808 	add.w	r8, r8, #8
  40b468:	e6d7      	b.n	40b21a <_svfprintf_r+0xd1a>
  40b46a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b46c:	6813      	ldr	r3, [r2, #0]
  40b46e:	3204      	adds	r2, #4
  40b470:	920f      	str	r2, [sp, #60]	; 0x3c
  40b472:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b474:	601a      	str	r2, [r3, #0]
  40b476:	f7ff b86a 	b.w	40a54e <_svfprintf_r+0x4e>
  40b47a:	aa25      	add	r2, sp, #148	; 0x94
  40b47c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b47e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b480:	f002 f8a6 	bl	40d5d0 <__ssprint_r>
  40b484:	2800      	cmp	r0, #0
  40b486:	f47f a90d 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b48a:	46c8      	mov	r8, r9
  40b48c:	e48d      	b.n	40adaa <_svfprintf_r+0x8aa>
  40b48e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b490:	4a27      	ldr	r2, [pc, #156]	; (40b530 <_svfprintf_r+0x1030>)
  40b492:	f8c8 2000 	str.w	r2, [r8]
  40b496:	3301      	adds	r3, #1
  40b498:	3401      	adds	r4, #1
  40b49a:	2201      	movs	r2, #1
  40b49c:	2b07      	cmp	r3, #7
  40b49e:	9427      	str	r4, [sp, #156]	; 0x9c
  40b4a0:	9326      	str	r3, [sp, #152]	; 0x98
  40b4a2:	f8c8 2004 	str.w	r2, [r8, #4]
  40b4a6:	dc72      	bgt.n	40b58e <_svfprintf_r+0x108e>
  40b4a8:	f108 0808 	add.w	r8, r8, #8
  40b4ac:	b929      	cbnz	r1, 40b4ba <_svfprintf_r+0xfba>
  40b4ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b4b0:	b91b      	cbnz	r3, 40b4ba <_svfprintf_r+0xfba>
  40b4b2:	9b07      	ldr	r3, [sp, #28]
  40b4b4:	07d8      	lsls	r0, r3, #31
  40b4b6:	f57f aa03 	bpl.w	40a8c0 <_svfprintf_r+0x3c0>
  40b4ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b4bc:	9819      	ldr	r0, [sp, #100]	; 0x64
  40b4be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40b4c0:	f8c8 2000 	str.w	r2, [r8]
  40b4c4:	3301      	adds	r3, #1
  40b4c6:	4602      	mov	r2, r0
  40b4c8:	4422      	add	r2, r4
  40b4ca:	2b07      	cmp	r3, #7
  40b4cc:	9227      	str	r2, [sp, #156]	; 0x9c
  40b4ce:	f8c8 0004 	str.w	r0, [r8, #4]
  40b4d2:	9326      	str	r3, [sp, #152]	; 0x98
  40b4d4:	f300 818d 	bgt.w	40b7f2 <_svfprintf_r+0x12f2>
  40b4d8:	f108 0808 	add.w	r8, r8, #8
  40b4dc:	2900      	cmp	r1, #0
  40b4de:	f2c0 8165 	blt.w	40b7ac <_svfprintf_r+0x12ac>
  40b4e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40b4e4:	f8c8 6000 	str.w	r6, [r8]
  40b4e8:	3301      	adds	r3, #1
  40b4ea:	188c      	adds	r4, r1, r2
  40b4ec:	2b07      	cmp	r3, #7
  40b4ee:	9427      	str	r4, [sp, #156]	; 0x9c
  40b4f0:	9326      	str	r3, [sp, #152]	; 0x98
  40b4f2:	f8c8 1004 	str.w	r1, [r8, #4]
  40b4f6:	f77f a9e1 	ble.w	40a8bc <_svfprintf_r+0x3bc>
  40b4fa:	e52c      	b.n	40af56 <_svfprintf_r+0xa56>
  40b4fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b4fe:	9909      	ldr	r1, [sp, #36]	; 0x24
  40b500:	6813      	ldr	r3, [r2, #0]
  40b502:	17cd      	asrs	r5, r1, #31
  40b504:	4608      	mov	r0, r1
  40b506:	3204      	adds	r2, #4
  40b508:	4629      	mov	r1, r5
  40b50a:	920f      	str	r2, [sp, #60]	; 0x3c
  40b50c:	e9c3 0100 	strd	r0, r1, [r3]
  40b510:	f7ff b81d 	b.w	40a54e <_svfprintf_r+0x4e>
  40b514:	aa25      	add	r2, sp, #148	; 0x94
  40b516:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b518:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b51a:	f002 f859 	bl	40d5d0 <__ssprint_r>
  40b51e:	2800      	cmp	r0, #0
  40b520:	f47f a8c0 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b524:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b526:	46c8      	mov	r8, r9
  40b528:	e458      	b.n	40addc <_svfprintf_r+0x8dc>
  40b52a:	bf00      	nop
  40b52c:	0040f610 	.word	0x0040f610
  40b530:	0040f5fc 	.word	0x0040f5fc
  40b534:	2140      	movs	r1, #64	; 0x40
  40b536:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b538:	f001 fa30 	bl	40c99c <_malloc_r>
  40b53c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b53e:	6010      	str	r0, [r2, #0]
  40b540:	6110      	str	r0, [r2, #16]
  40b542:	2800      	cmp	r0, #0
  40b544:	f000 81f2 	beq.w	40b92c <_svfprintf_r+0x142c>
  40b548:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b54a:	2340      	movs	r3, #64	; 0x40
  40b54c:	6153      	str	r3, [r2, #20]
  40b54e:	f7fe bfee 	b.w	40a52e <_svfprintf_r+0x2e>
  40b552:	a823      	add	r0, sp, #140	; 0x8c
  40b554:	a920      	add	r1, sp, #128	; 0x80
  40b556:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40b558:	9004      	str	r0, [sp, #16]
  40b55a:	9103      	str	r1, [sp, #12]
  40b55c:	a81f      	add	r0, sp, #124	; 0x7c
  40b55e:	2103      	movs	r1, #3
  40b560:	9002      	str	r0, [sp, #8]
  40b562:	9a08      	ldr	r2, [sp, #32]
  40b564:	9401      	str	r4, [sp, #4]
  40b566:	463b      	mov	r3, r7
  40b568:	9100      	str	r1, [sp, #0]
  40b56a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b56c:	f000 fac0 	bl	40baf0 <_dtoa_r>
  40b570:	4625      	mov	r5, r4
  40b572:	4606      	mov	r6, r0
  40b574:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b576:	2b46      	cmp	r3, #70	; 0x46
  40b578:	eb06 0405 	add.w	r4, r6, r5
  40b57c:	f47f af29 	bne.w	40b3d2 <_svfprintf_r+0xed2>
  40b580:	7833      	ldrb	r3, [r6, #0]
  40b582:	2b30      	cmp	r3, #48	; 0x30
  40b584:	f000 8178 	beq.w	40b878 <_svfprintf_r+0x1378>
  40b588:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40b58a:	442c      	add	r4, r5
  40b58c:	e721      	b.n	40b3d2 <_svfprintf_r+0xed2>
  40b58e:	aa25      	add	r2, sp, #148	; 0x94
  40b590:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b592:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b594:	f002 f81c 	bl	40d5d0 <__ssprint_r>
  40b598:	2800      	cmp	r0, #0
  40b59a:	f47f a883 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b59e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40b5a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b5a2:	46c8      	mov	r8, r9
  40b5a4:	e782      	b.n	40b4ac <_svfprintf_r+0xfac>
  40b5a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b5a8:	2b00      	cmp	r3, #0
  40b5aa:	bf08      	it	eq
  40b5ac:	2301      	moveq	r3, #1
  40b5ae:	930a      	str	r3, [sp, #40]	; 0x28
  40b5b0:	e6db      	b.n	40b36a <_svfprintf_r+0xe6a>
  40b5b2:	4630      	mov	r0, r6
  40b5b4:	940a      	str	r4, [sp, #40]	; 0x28
  40b5b6:	f7fe ff03 	bl	40a3c0 <strlen>
  40b5ba:	950f      	str	r5, [sp, #60]	; 0x3c
  40b5bc:	900e      	str	r0, [sp, #56]	; 0x38
  40b5be:	f8cd b01c 	str.w	fp, [sp, #28]
  40b5c2:	4603      	mov	r3, r0
  40b5c4:	f7ff b9f9 	b.w	40a9ba <_svfprintf_r+0x4ba>
  40b5c8:	272d      	movs	r7, #45	; 0x2d
  40b5ca:	2300      	movs	r3, #0
  40b5cc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40b5d0:	930a      	str	r3, [sp, #40]	; 0x28
  40b5d2:	f7ff b8ae 	b.w	40a732 <_svfprintf_r+0x232>
  40b5d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40b5d8:	9312      	str	r3, [sp, #72]	; 0x48
  40b5da:	461a      	mov	r2, r3
  40b5dc:	3303      	adds	r3, #3
  40b5de:	db04      	blt.n	40b5ea <_svfprintf_r+0x10ea>
  40b5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b5e2:	4619      	mov	r1, r3
  40b5e4:	4291      	cmp	r1, r2
  40b5e6:	f6bf af17 	bge.w	40b418 <_svfprintf_r+0xf18>
  40b5ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b5ec:	3b02      	subs	r3, #2
  40b5ee:	9311      	str	r3, [sp, #68]	; 0x44
  40b5f0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40b5f4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  40b5f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b5fa:	3b01      	subs	r3, #1
  40b5fc:	2b00      	cmp	r3, #0
  40b5fe:	931f      	str	r3, [sp, #124]	; 0x7c
  40b600:	bfbd      	ittte	lt
  40b602:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40b604:	f1c3 0301 	rsblt	r3, r3, #1
  40b608:	222d      	movlt	r2, #45	; 0x2d
  40b60a:	222b      	movge	r2, #43	; 0x2b
  40b60c:	2b09      	cmp	r3, #9
  40b60e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40b612:	f340 8116 	ble.w	40b842 <_svfprintf_r+0x1342>
  40b616:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40b61a:	4620      	mov	r0, r4
  40b61c:	4dab      	ldr	r5, [pc, #684]	; (40b8cc <_svfprintf_r+0x13cc>)
  40b61e:	e000      	b.n	40b622 <_svfprintf_r+0x1122>
  40b620:	4610      	mov	r0, r2
  40b622:	fb85 1203 	smull	r1, r2, r5, r3
  40b626:	17d9      	asrs	r1, r3, #31
  40b628:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40b62c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40b630:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40b634:	3230      	adds	r2, #48	; 0x30
  40b636:	2909      	cmp	r1, #9
  40b638:	f800 2c01 	strb.w	r2, [r0, #-1]
  40b63c:	460b      	mov	r3, r1
  40b63e:	f100 32ff 	add.w	r2, r0, #4294967295
  40b642:	dced      	bgt.n	40b620 <_svfprintf_r+0x1120>
  40b644:	3330      	adds	r3, #48	; 0x30
  40b646:	3802      	subs	r0, #2
  40b648:	b2d9      	uxtb	r1, r3
  40b64a:	4284      	cmp	r4, r0
  40b64c:	f802 1c01 	strb.w	r1, [r2, #-1]
  40b650:	f240 8165 	bls.w	40b91e <_svfprintf_r+0x141e>
  40b654:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  40b658:	4613      	mov	r3, r2
  40b65a:	e001      	b.n	40b660 <_svfprintf_r+0x1160>
  40b65c:	f813 1b01 	ldrb.w	r1, [r3], #1
  40b660:	f800 1b01 	strb.w	r1, [r0], #1
  40b664:	42a3      	cmp	r3, r4
  40b666:	d1f9      	bne.n	40b65c <_svfprintf_r+0x115c>
  40b668:	3301      	adds	r3, #1
  40b66a:	1a9b      	subs	r3, r3, r2
  40b66c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40b670:	4413      	add	r3, r2
  40b672:	aa21      	add	r2, sp, #132	; 0x84
  40b674:	1a9b      	subs	r3, r3, r2
  40b676:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40b678:	931b      	str	r3, [sp, #108]	; 0x6c
  40b67a:	2a01      	cmp	r2, #1
  40b67c:	4413      	add	r3, r2
  40b67e:	930e      	str	r3, [sp, #56]	; 0x38
  40b680:	f340 8119 	ble.w	40b8b6 <_svfprintf_r+0x13b6>
  40b684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b686:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40b688:	4413      	add	r3, r2
  40b68a:	930e      	str	r3, [sp, #56]	; 0x38
  40b68c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b690:	9308      	str	r3, [sp, #32]
  40b692:	2300      	movs	r3, #0
  40b694:	9312      	str	r3, [sp, #72]	; 0x48
  40b696:	e6cf      	b.n	40b438 <_svfprintf_r+0xf38>
  40b698:	aa25      	add	r2, sp, #148	; 0x94
  40b69a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b69c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b69e:	f001 ff97 	bl	40d5d0 <__ssprint_r>
  40b6a2:	2800      	cmp	r0, #0
  40b6a4:	f47e affe 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b6a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b6aa:	46c8      	mov	r8, r9
  40b6ac:	e4d7      	b.n	40b05e <_svfprintf_r+0xb5e>
  40b6ae:	4623      	mov	r3, r4
  40b6b0:	e6a2      	b.n	40b3f8 <_svfprintf_r+0xef8>
  40b6b2:	aa25      	add	r2, sp, #148	; 0x94
  40b6b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b6b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b6b8:	f001 ff8a 	bl	40d5d0 <__ssprint_r>
  40b6bc:	2800      	cmp	r0, #0
  40b6be:	f47e aff1 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b6c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40b6c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b6c6:	46c8      	mov	r8, r9
  40b6c8:	e5ae      	b.n	40b228 <_svfprintf_r+0xd28>
  40b6ca:	aa25      	add	r2, sp, #148	; 0x94
  40b6cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b6ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b6d0:	f001 ff7e 	bl	40d5d0 <__ssprint_r>
  40b6d4:	2800      	cmp	r0, #0
  40b6d6:	f47e afe5 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b6da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40b6dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b6de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b6e0:	1a9a      	subs	r2, r3, r2
  40b6e2:	46c8      	mov	r8, r9
  40b6e4:	e5b8      	b.n	40b258 <_svfprintf_r+0xd58>
  40b6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b6e8:	9612      	str	r6, [sp, #72]	; 0x48
  40b6ea:	2b06      	cmp	r3, #6
  40b6ec:	bf28      	it	cs
  40b6ee:	2306      	movcs	r3, #6
  40b6f0:	960a      	str	r6, [sp, #40]	; 0x28
  40b6f2:	4637      	mov	r7, r6
  40b6f4:	9308      	str	r3, [sp, #32]
  40b6f6:	950f      	str	r5, [sp, #60]	; 0x3c
  40b6f8:	f8cd b01c 	str.w	fp, [sp, #28]
  40b6fc:	930e      	str	r3, [sp, #56]	; 0x38
  40b6fe:	4e74      	ldr	r6, [pc, #464]	; (40b8d0 <_svfprintf_r+0x13d0>)
  40b700:	f7ff b816 	b.w	40a730 <_svfprintf_r+0x230>
  40b704:	a823      	add	r0, sp, #140	; 0x8c
  40b706:	a920      	add	r1, sp, #128	; 0x80
  40b708:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40b70a:	9004      	str	r0, [sp, #16]
  40b70c:	9103      	str	r1, [sp, #12]
  40b70e:	a81f      	add	r0, sp, #124	; 0x7c
  40b710:	2103      	movs	r1, #3
  40b712:	9002      	str	r0, [sp, #8]
  40b714:	9a08      	ldr	r2, [sp, #32]
  40b716:	9501      	str	r5, [sp, #4]
  40b718:	463b      	mov	r3, r7
  40b71a:	9100      	str	r1, [sp, #0]
  40b71c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b71e:	f000 f9e7 	bl	40baf0 <_dtoa_r>
  40b722:	4606      	mov	r6, r0
  40b724:	1944      	adds	r4, r0, r5
  40b726:	e72b      	b.n	40b580 <_svfprintf_r+0x1080>
  40b728:	2306      	movs	r3, #6
  40b72a:	930a      	str	r3, [sp, #40]	; 0x28
  40b72c:	e61d      	b.n	40b36a <_svfprintf_r+0xe6a>
  40b72e:	272d      	movs	r7, #45	; 0x2d
  40b730:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40b734:	f7ff bacd 	b.w	40acd2 <_svfprintf_r+0x7d2>
  40b738:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40b73a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40b73c:	4413      	add	r3, r2
  40b73e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40b740:	930e      	str	r3, [sp, #56]	; 0x38
  40b742:	2a00      	cmp	r2, #0
  40b744:	f340 80b0 	ble.w	40b8a8 <_svfprintf_r+0x13a8>
  40b748:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b74c:	9308      	str	r3, [sp, #32]
  40b74e:	2367      	movs	r3, #103	; 0x67
  40b750:	9311      	str	r3, [sp, #68]	; 0x44
  40b752:	e671      	b.n	40b438 <_svfprintf_r+0xf38>
  40b754:	2b00      	cmp	r3, #0
  40b756:	f340 80c3 	ble.w	40b8e0 <_svfprintf_r+0x13e0>
  40b75a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b75c:	2a00      	cmp	r2, #0
  40b75e:	f040 8099 	bne.w	40b894 <_svfprintf_r+0x1394>
  40b762:	f01b 0f01 	tst.w	fp, #1
  40b766:	f040 8095 	bne.w	40b894 <_svfprintf_r+0x1394>
  40b76a:	9308      	str	r3, [sp, #32]
  40b76c:	930e      	str	r3, [sp, #56]	; 0x38
  40b76e:	e663      	b.n	40b438 <_svfprintf_r+0xf38>
  40b770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b772:	9308      	str	r3, [sp, #32]
  40b774:	930e      	str	r3, [sp, #56]	; 0x38
  40b776:	900a      	str	r0, [sp, #40]	; 0x28
  40b778:	950f      	str	r5, [sp, #60]	; 0x3c
  40b77a:	f8cd b01c 	str.w	fp, [sp, #28]
  40b77e:	9012      	str	r0, [sp, #72]	; 0x48
  40b780:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40b784:	f7fe bfd4 	b.w	40a730 <_svfprintf_r+0x230>
  40b788:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40b78a:	2b47      	cmp	r3, #71	; 0x47
  40b78c:	f47f ae20 	bne.w	40b3d0 <_svfprintf_r+0xed0>
  40b790:	f01b 0f01 	tst.w	fp, #1
  40b794:	f47f aeee 	bne.w	40b574 <_svfprintf_r+0x1074>
  40b798:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40b79a:	1b9b      	subs	r3, r3, r6
  40b79c:	9313      	str	r3, [sp, #76]	; 0x4c
  40b79e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b7a0:	2b47      	cmp	r3, #71	; 0x47
  40b7a2:	f43f af18 	beq.w	40b5d6 <_svfprintf_r+0x10d6>
  40b7a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40b7a8:	9312      	str	r3, [sp, #72]	; 0x48
  40b7aa:	e721      	b.n	40b5f0 <_svfprintf_r+0x10f0>
  40b7ac:	424f      	negs	r7, r1
  40b7ae:	3110      	adds	r1, #16
  40b7b0:	4d48      	ldr	r5, [pc, #288]	; (40b8d4 <_svfprintf_r+0x13d4>)
  40b7b2:	da2f      	bge.n	40b814 <_svfprintf_r+0x1314>
  40b7b4:	2410      	movs	r4, #16
  40b7b6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40b7ba:	e004      	b.n	40b7c6 <_svfprintf_r+0x12c6>
  40b7bc:	f108 0808 	add.w	r8, r8, #8
  40b7c0:	3f10      	subs	r7, #16
  40b7c2:	2f10      	cmp	r7, #16
  40b7c4:	dd26      	ble.n	40b814 <_svfprintf_r+0x1314>
  40b7c6:	3301      	adds	r3, #1
  40b7c8:	3210      	adds	r2, #16
  40b7ca:	2b07      	cmp	r3, #7
  40b7cc:	9227      	str	r2, [sp, #156]	; 0x9c
  40b7ce:	9326      	str	r3, [sp, #152]	; 0x98
  40b7d0:	f8c8 5000 	str.w	r5, [r8]
  40b7d4:	f8c8 4004 	str.w	r4, [r8, #4]
  40b7d8:	ddf0      	ble.n	40b7bc <_svfprintf_r+0x12bc>
  40b7da:	aa25      	add	r2, sp, #148	; 0x94
  40b7dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b7de:	4658      	mov	r0, fp
  40b7e0:	f001 fef6 	bl	40d5d0 <__ssprint_r>
  40b7e4:	2800      	cmp	r0, #0
  40b7e6:	f47e af5d 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b7ea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40b7ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b7ee:	46c8      	mov	r8, r9
  40b7f0:	e7e6      	b.n	40b7c0 <_svfprintf_r+0x12c0>
  40b7f2:	aa25      	add	r2, sp, #148	; 0x94
  40b7f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b7f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b7f8:	f001 feea 	bl	40d5d0 <__ssprint_r>
  40b7fc:	2800      	cmp	r0, #0
  40b7fe:	f47e af51 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b802:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40b804:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40b806:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b808:	46c8      	mov	r8, r9
  40b80a:	e667      	b.n	40b4dc <_svfprintf_r+0xfdc>
  40b80c:	2000      	movs	r0, #0
  40b80e:	900a      	str	r0, [sp, #40]	; 0x28
  40b810:	f7fe bed0 	b.w	40a5b4 <_svfprintf_r+0xb4>
  40b814:	3301      	adds	r3, #1
  40b816:	443a      	add	r2, r7
  40b818:	2b07      	cmp	r3, #7
  40b81a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40b81e:	9227      	str	r2, [sp, #156]	; 0x9c
  40b820:	9326      	str	r3, [sp, #152]	; 0x98
  40b822:	f108 0808 	add.w	r8, r8, #8
  40b826:	f77f ae5c 	ble.w	40b4e2 <_svfprintf_r+0xfe2>
  40b82a:	aa25      	add	r2, sp, #148	; 0x94
  40b82c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b82e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b830:	f001 fece 	bl	40d5d0 <__ssprint_r>
  40b834:	2800      	cmp	r0, #0
  40b836:	f47e af35 	bne.w	40a6a4 <_svfprintf_r+0x1a4>
  40b83a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40b83c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b83e:	46c8      	mov	r8, r9
  40b840:	e64f      	b.n	40b4e2 <_svfprintf_r+0xfe2>
  40b842:	3330      	adds	r3, #48	; 0x30
  40b844:	2230      	movs	r2, #48	; 0x30
  40b846:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40b84a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40b84e:	ab22      	add	r3, sp, #136	; 0x88
  40b850:	e70f      	b.n	40b672 <_svfprintf_r+0x1172>
  40b852:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b854:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40b856:	4413      	add	r3, r2
  40b858:	930e      	str	r3, [sp, #56]	; 0x38
  40b85a:	e775      	b.n	40b748 <_svfprintf_r+0x1248>
  40b85c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40b85e:	e5cb      	b.n	40b3f8 <_svfprintf_r+0xef8>
  40b860:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40b862:	4e1d      	ldr	r6, [pc, #116]	; (40b8d8 <_svfprintf_r+0x13d8>)
  40b864:	2b00      	cmp	r3, #0
  40b866:	bfb6      	itet	lt
  40b868:	272d      	movlt	r7, #45	; 0x2d
  40b86a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40b86e:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40b872:	4b1a      	ldr	r3, [pc, #104]	; (40b8dc <_svfprintf_r+0x13dc>)
  40b874:	f7ff ba2f 	b.w	40acd6 <_svfprintf_r+0x7d6>
  40b878:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40b87a:	9808      	ldr	r0, [sp, #32]
  40b87c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40b87e:	4639      	mov	r1, r7
  40b880:	f002 ff3a 	bl	40e6f8 <__aeabi_dcmpeq>
  40b884:	2800      	cmp	r0, #0
  40b886:	f47f ae7f 	bne.w	40b588 <_svfprintf_r+0x1088>
  40b88a:	f1c5 0501 	rsb	r5, r5, #1
  40b88e:	951f      	str	r5, [sp, #124]	; 0x7c
  40b890:	442c      	add	r4, r5
  40b892:	e59e      	b.n	40b3d2 <_svfprintf_r+0xed2>
  40b894:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b896:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40b898:	4413      	add	r3, r2
  40b89a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b89c:	441a      	add	r2, r3
  40b89e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40b8a2:	920e      	str	r2, [sp, #56]	; 0x38
  40b8a4:	9308      	str	r3, [sp, #32]
  40b8a6:	e5c7      	b.n	40b438 <_svfprintf_r+0xf38>
  40b8a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b8aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40b8ac:	f1c3 0301 	rsb	r3, r3, #1
  40b8b0:	441a      	add	r2, r3
  40b8b2:	4613      	mov	r3, r2
  40b8b4:	e7d0      	b.n	40b858 <_svfprintf_r+0x1358>
  40b8b6:	f01b 0301 	ands.w	r3, fp, #1
  40b8ba:	9312      	str	r3, [sp, #72]	; 0x48
  40b8bc:	f47f aee2 	bne.w	40b684 <_svfprintf_r+0x1184>
  40b8c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b8c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40b8c6:	9308      	str	r3, [sp, #32]
  40b8c8:	e5b6      	b.n	40b438 <_svfprintf_r+0xf38>
  40b8ca:	bf00      	nop
  40b8cc:	66666667 	.word	0x66666667
  40b8d0:	0040f5f4 	.word	0x0040f5f4
  40b8d4:	0040f610 	.word	0x0040f610
  40b8d8:	0040f5c8 	.word	0x0040f5c8
  40b8dc:	0040f5c4 	.word	0x0040f5c4
  40b8e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b8e2:	b913      	cbnz	r3, 40b8ea <_svfprintf_r+0x13ea>
  40b8e4:	f01b 0f01 	tst.w	fp, #1
  40b8e8:	d002      	beq.n	40b8f0 <_svfprintf_r+0x13f0>
  40b8ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40b8ec:	3301      	adds	r3, #1
  40b8ee:	e7d4      	b.n	40b89a <_svfprintf_r+0x139a>
  40b8f0:	2301      	movs	r3, #1
  40b8f2:	e73a      	b.n	40b76a <_svfprintf_r+0x126a>
  40b8f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40b8f6:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40b8fa:	6828      	ldr	r0, [r5, #0]
  40b8fc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40b900:	900a      	str	r0, [sp, #40]	; 0x28
  40b902:	4628      	mov	r0, r5
  40b904:	3004      	adds	r0, #4
  40b906:	46a2      	mov	sl, r4
  40b908:	900f      	str	r0, [sp, #60]	; 0x3c
  40b90a:	f7fe be51 	b.w	40a5b0 <_svfprintf_r+0xb0>
  40b90e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b912:	f7ff b867 	b.w	40a9e4 <_svfprintf_r+0x4e4>
  40b916:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b91a:	f7ff ba15 	b.w	40ad48 <_svfprintf_r+0x848>
  40b91e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40b922:	e6a6      	b.n	40b672 <_svfprintf_r+0x1172>
  40b924:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b928:	f7ff b8eb 	b.w	40ab02 <_svfprintf_r+0x602>
  40b92c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b92e:	230c      	movs	r3, #12
  40b930:	6013      	str	r3, [r2, #0]
  40b932:	f04f 33ff 	mov.w	r3, #4294967295
  40b936:	9309      	str	r3, [sp, #36]	; 0x24
  40b938:	f7fe bebd 	b.w	40a6b6 <_svfprintf_r+0x1b6>
  40b93c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b940:	f7ff b99a 	b.w	40ac78 <_svfprintf_r+0x778>
  40b944:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b948:	f7ff b976 	b.w	40ac38 <_svfprintf_r+0x738>
  40b94c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b950:	f7ff b959 	b.w	40ac06 <_svfprintf_r+0x706>
  40b954:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40b958:	f7ff b912 	b.w	40ab80 <_svfprintf_r+0x680>

0040b95c <_vsprintf_r>:
  40b95c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b95e:	b09b      	sub	sp, #108	; 0x6c
  40b960:	460d      	mov	r5, r1
  40b962:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40b966:	f44f 7702 	mov.w	r7, #520	; 0x208
  40b96a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40b96e:	4669      	mov	r1, sp
  40b970:	9500      	str	r5, [sp, #0]
  40b972:	9504      	str	r5, [sp, #16]
  40b974:	f8ad 700c 	strh.w	r7, [sp, #12]
  40b978:	9402      	str	r4, [sp, #8]
  40b97a:	9405      	str	r4, [sp, #20]
  40b97c:	f8ad 600e 	strh.w	r6, [sp, #14]
  40b980:	f7fe fdbe 	bl	40a500 <_svfprintf_r>
  40b984:	9b00      	ldr	r3, [sp, #0]
  40b986:	2200      	movs	r2, #0
  40b988:	701a      	strb	r2, [r3, #0]
  40b98a:	b01b      	add	sp, #108	; 0x6c
  40b98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b98e:	bf00      	nop

0040b990 <vsprintf>:
  40b990:	b410      	push	{r4}
  40b992:	4c04      	ldr	r4, [pc, #16]	; (40b9a4 <vsprintf+0x14>)
  40b994:	4613      	mov	r3, r2
  40b996:	460a      	mov	r2, r1
  40b998:	4601      	mov	r1, r0
  40b99a:	6820      	ldr	r0, [r4, #0]
  40b99c:	bc10      	pop	{r4}
  40b99e:	f7ff bfdd 	b.w	40b95c <_vsprintf_r>
  40b9a2:	bf00      	nop
  40b9a4:	20000020 	.word	0x20000020

0040b9a8 <register_fini>:
  40b9a8:	4b02      	ldr	r3, [pc, #8]	; (40b9b4 <register_fini+0xc>)
  40b9aa:	b113      	cbz	r3, 40b9b2 <register_fini+0xa>
  40b9ac:	4802      	ldr	r0, [pc, #8]	; (40b9b8 <register_fini+0x10>)
  40b9ae:	f000 b805 	b.w	40b9bc <atexit>
  40b9b2:	4770      	bx	lr
  40b9b4:	00000000 	.word	0x00000000
  40b9b8:	0040c945 	.word	0x0040c945

0040b9bc <atexit>:
  40b9bc:	2300      	movs	r3, #0
  40b9be:	4601      	mov	r1, r0
  40b9c0:	461a      	mov	r2, r3
  40b9c2:	4618      	mov	r0, r3
  40b9c4:	f001 be82 	b.w	40d6cc <__register_exitproc>

0040b9c8 <quorem>:
  40b9c8:	6902      	ldr	r2, [r0, #16]
  40b9ca:	690b      	ldr	r3, [r1, #16]
  40b9cc:	4293      	cmp	r3, r2
  40b9ce:	f300 808d 	bgt.w	40baec <quorem+0x124>
  40b9d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b9d6:	f103 38ff 	add.w	r8, r3, #4294967295
  40b9da:	f101 0714 	add.w	r7, r1, #20
  40b9de:	f100 0b14 	add.w	fp, r0, #20
  40b9e2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40b9e6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40b9ea:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40b9ee:	b083      	sub	sp, #12
  40b9f0:	3201      	adds	r2, #1
  40b9f2:	fbb3 f9f2 	udiv	r9, r3, r2
  40b9f6:	eb0b 0304 	add.w	r3, fp, r4
  40b9fa:	9400      	str	r4, [sp, #0]
  40b9fc:	eb07 0a04 	add.w	sl, r7, r4
  40ba00:	9301      	str	r3, [sp, #4]
  40ba02:	f1b9 0f00 	cmp.w	r9, #0
  40ba06:	d039      	beq.n	40ba7c <quorem+0xb4>
  40ba08:	2500      	movs	r5, #0
  40ba0a:	462e      	mov	r6, r5
  40ba0c:	46bc      	mov	ip, r7
  40ba0e:	46de      	mov	lr, fp
  40ba10:	f85c 4b04 	ldr.w	r4, [ip], #4
  40ba14:	f8de 3000 	ldr.w	r3, [lr]
  40ba18:	b2a2      	uxth	r2, r4
  40ba1a:	fb09 5502 	mla	r5, r9, r2, r5
  40ba1e:	0c22      	lsrs	r2, r4, #16
  40ba20:	0c2c      	lsrs	r4, r5, #16
  40ba22:	fb09 4202 	mla	r2, r9, r2, r4
  40ba26:	b2ad      	uxth	r5, r5
  40ba28:	1b75      	subs	r5, r6, r5
  40ba2a:	b296      	uxth	r6, r2
  40ba2c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40ba30:	fa15 f383 	uxtah	r3, r5, r3
  40ba34:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40ba38:	b29b      	uxth	r3, r3
  40ba3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40ba3e:	45e2      	cmp	sl, ip
  40ba40:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40ba44:	f84e 3b04 	str.w	r3, [lr], #4
  40ba48:	ea4f 4626 	mov.w	r6, r6, asr #16
  40ba4c:	d2e0      	bcs.n	40ba10 <quorem+0x48>
  40ba4e:	9b00      	ldr	r3, [sp, #0]
  40ba50:	f85b 3003 	ldr.w	r3, [fp, r3]
  40ba54:	b993      	cbnz	r3, 40ba7c <quorem+0xb4>
  40ba56:	9c01      	ldr	r4, [sp, #4]
  40ba58:	1f23      	subs	r3, r4, #4
  40ba5a:	459b      	cmp	fp, r3
  40ba5c:	d20c      	bcs.n	40ba78 <quorem+0xb0>
  40ba5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40ba62:	b94b      	cbnz	r3, 40ba78 <quorem+0xb0>
  40ba64:	f1a4 0308 	sub.w	r3, r4, #8
  40ba68:	e002      	b.n	40ba70 <quorem+0xa8>
  40ba6a:	681a      	ldr	r2, [r3, #0]
  40ba6c:	3b04      	subs	r3, #4
  40ba6e:	b91a      	cbnz	r2, 40ba78 <quorem+0xb0>
  40ba70:	459b      	cmp	fp, r3
  40ba72:	f108 38ff 	add.w	r8, r8, #4294967295
  40ba76:	d3f8      	bcc.n	40ba6a <quorem+0xa2>
  40ba78:	f8c0 8010 	str.w	r8, [r0, #16]
  40ba7c:	4604      	mov	r4, r0
  40ba7e:	f001 fc99 	bl	40d3b4 <__mcmp>
  40ba82:	2800      	cmp	r0, #0
  40ba84:	db2e      	blt.n	40bae4 <quorem+0x11c>
  40ba86:	f109 0901 	add.w	r9, r9, #1
  40ba8a:	465d      	mov	r5, fp
  40ba8c:	2300      	movs	r3, #0
  40ba8e:	f857 1b04 	ldr.w	r1, [r7], #4
  40ba92:	6828      	ldr	r0, [r5, #0]
  40ba94:	b28a      	uxth	r2, r1
  40ba96:	1a9a      	subs	r2, r3, r2
  40ba98:	0c0b      	lsrs	r3, r1, #16
  40ba9a:	fa12 f280 	uxtah	r2, r2, r0
  40ba9e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40baa2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40baa6:	b292      	uxth	r2, r2
  40baa8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40baac:	45ba      	cmp	sl, r7
  40baae:	f845 2b04 	str.w	r2, [r5], #4
  40bab2:	ea4f 4323 	mov.w	r3, r3, asr #16
  40bab6:	d2ea      	bcs.n	40ba8e <quorem+0xc6>
  40bab8:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40babc:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40bac0:	b982      	cbnz	r2, 40bae4 <quorem+0x11c>
  40bac2:	1f1a      	subs	r2, r3, #4
  40bac4:	4593      	cmp	fp, r2
  40bac6:	d20b      	bcs.n	40bae0 <quorem+0x118>
  40bac8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40bacc:	b942      	cbnz	r2, 40bae0 <quorem+0x118>
  40bace:	3b08      	subs	r3, #8
  40bad0:	e002      	b.n	40bad8 <quorem+0x110>
  40bad2:	681a      	ldr	r2, [r3, #0]
  40bad4:	3b04      	subs	r3, #4
  40bad6:	b91a      	cbnz	r2, 40bae0 <quorem+0x118>
  40bad8:	459b      	cmp	fp, r3
  40bada:	f108 38ff 	add.w	r8, r8, #4294967295
  40bade:	d3f8      	bcc.n	40bad2 <quorem+0x10a>
  40bae0:	f8c4 8010 	str.w	r8, [r4, #16]
  40bae4:	4648      	mov	r0, r9
  40bae6:	b003      	add	sp, #12
  40bae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40baec:	2000      	movs	r0, #0
  40baee:	4770      	bx	lr

0040baf0 <_dtoa_r>:
  40baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40baf4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40baf6:	b09b      	sub	sp, #108	; 0x6c
  40baf8:	4604      	mov	r4, r0
  40bafa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40bafc:	4692      	mov	sl, r2
  40bafe:	469b      	mov	fp, r3
  40bb00:	b141      	cbz	r1, 40bb14 <_dtoa_r+0x24>
  40bb02:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40bb04:	604a      	str	r2, [r1, #4]
  40bb06:	2301      	movs	r3, #1
  40bb08:	4093      	lsls	r3, r2
  40bb0a:	608b      	str	r3, [r1, #8]
  40bb0c:	f001 fa7a 	bl	40d004 <_Bfree>
  40bb10:	2300      	movs	r3, #0
  40bb12:	6423      	str	r3, [r4, #64]	; 0x40
  40bb14:	f1bb 0f00 	cmp.w	fp, #0
  40bb18:	465d      	mov	r5, fp
  40bb1a:	db35      	blt.n	40bb88 <_dtoa_r+0x98>
  40bb1c:	2300      	movs	r3, #0
  40bb1e:	6033      	str	r3, [r6, #0]
  40bb20:	4b9d      	ldr	r3, [pc, #628]	; (40bd98 <_dtoa_r+0x2a8>)
  40bb22:	43ab      	bics	r3, r5
  40bb24:	d015      	beq.n	40bb52 <_dtoa_r+0x62>
  40bb26:	4650      	mov	r0, sl
  40bb28:	4659      	mov	r1, fp
  40bb2a:	2200      	movs	r2, #0
  40bb2c:	2300      	movs	r3, #0
  40bb2e:	f002 fde3 	bl	40e6f8 <__aeabi_dcmpeq>
  40bb32:	4680      	mov	r8, r0
  40bb34:	2800      	cmp	r0, #0
  40bb36:	d02d      	beq.n	40bb94 <_dtoa_r+0xa4>
  40bb38:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40bb3a:	2301      	movs	r3, #1
  40bb3c:	6013      	str	r3, [r2, #0]
  40bb3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40bb40:	2b00      	cmp	r3, #0
  40bb42:	f000 80bd 	beq.w	40bcc0 <_dtoa_r+0x1d0>
  40bb46:	4895      	ldr	r0, [pc, #596]	; (40bd9c <_dtoa_r+0x2ac>)
  40bb48:	6018      	str	r0, [r3, #0]
  40bb4a:	3801      	subs	r0, #1
  40bb4c:	b01b      	add	sp, #108	; 0x6c
  40bb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bb52:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40bb54:	f242 730f 	movw	r3, #9999	; 0x270f
  40bb58:	6013      	str	r3, [r2, #0]
  40bb5a:	f1ba 0f00 	cmp.w	sl, #0
  40bb5e:	d10d      	bne.n	40bb7c <_dtoa_r+0x8c>
  40bb60:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40bb64:	b955      	cbnz	r5, 40bb7c <_dtoa_r+0x8c>
  40bb66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40bb68:	488d      	ldr	r0, [pc, #564]	; (40bda0 <_dtoa_r+0x2b0>)
  40bb6a:	2b00      	cmp	r3, #0
  40bb6c:	d0ee      	beq.n	40bb4c <_dtoa_r+0x5c>
  40bb6e:	f100 0308 	add.w	r3, r0, #8
  40bb72:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40bb74:	6013      	str	r3, [r2, #0]
  40bb76:	b01b      	add	sp, #108	; 0x6c
  40bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bb7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40bb7e:	4889      	ldr	r0, [pc, #548]	; (40bda4 <_dtoa_r+0x2b4>)
  40bb80:	2b00      	cmp	r3, #0
  40bb82:	d0e3      	beq.n	40bb4c <_dtoa_r+0x5c>
  40bb84:	1cc3      	adds	r3, r0, #3
  40bb86:	e7f4      	b.n	40bb72 <_dtoa_r+0x82>
  40bb88:	2301      	movs	r3, #1
  40bb8a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40bb8e:	6033      	str	r3, [r6, #0]
  40bb90:	46ab      	mov	fp, r5
  40bb92:	e7c5      	b.n	40bb20 <_dtoa_r+0x30>
  40bb94:	aa18      	add	r2, sp, #96	; 0x60
  40bb96:	ab19      	add	r3, sp, #100	; 0x64
  40bb98:	9201      	str	r2, [sp, #4]
  40bb9a:	9300      	str	r3, [sp, #0]
  40bb9c:	4652      	mov	r2, sl
  40bb9e:	465b      	mov	r3, fp
  40bba0:	4620      	mov	r0, r4
  40bba2:	f001 fca7 	bl	40d4f4 <__d2b>
  40bba6:	0d2b      	lsrs	r3, r5, #20
  40bba8:	4681      	mov	r9, r0
  40bbaa:	d071      	beq.n	40bc90 <_dtoa_r+0x1a0>
  40bbac:	f3cb 0213 	ubfx	r2, fp, #0, #20
  40bbb0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40bbb4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40bbb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40bbba:	4650      	mov	r0, sl
  40bbbc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  40bbc0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40bbc4:	2200      	movs	r2, #0
  40bbc6:	4b78      	ldr	r3, [pc, #480]	; (40bda8 <_dtoa_r+0x2b8>)
  40bbc8:	f002 f97a 	bl	40dec0 <__aeabi_dsub>
  40bbcc:	a36c      	add	r3, pc, #432	; (adr r3, 40bd80 <_dtoa_r+0x290>)
  40bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
  40bbd2:	f002 fb29 	bl	40e228 <__aeabi_dmul>
  40bbd6:	a36c      	add	r3, pc, #432	; (adr r3, 40bd88 <_dtoa_r+0x298>)
  40bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40bbdc:	f002 f972 	bl	40dec4 <__adddf3>
  40bbe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40bbe4:	4630      	mov	r0, r6
  40bbe6:	f002 fab9 	bl	40e15c <__aeabi_i2d>
  40bbea:	a369      	add	r3, pc, #420	; (adr r3, 40bd90 <_dtoa_r+0x2a0>)
  40bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
  40bbf0:	f002 fb1a 	bl	40e228 <__aeabi_dmul>
  40bbf4:	4602      	mov	r2, r0
  40bbf6:	460b      	mov	r3, r1
  40bbf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40bbfc:	f002 f962 	bl	40dec4 <__adddf3>
  40bc00:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40bc04:	f002 fdc0 	bl	40e788 <__aeabi_d2iz>
  40bc08:	2200      	movs	r2, #0
  40bc0a:	9002      	str	r0, [sp, #8]
  40bc0c:	2300      	movs	r3, #0
  40bc0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40bc12:	f002 fd7b 	bl	40e70c <__aeabi_dcmplt>
  40bc16:	2800      	cmp	r0, #0
  40bc18:	f040 8173 	bne.w	40bf02 <_dtoa_r+0x412>
  40bc1c:	9d02      	ldr	r5, [sp, #8]
  40bc1e:	2d16      	cmp	r5, #22
  40bc20:	f200 815d 	bhi.w	40bede <_dtoa_r+0x3ee>
  40bc24:	4b61      	ldr	r3, [pc, #388]	; (40bdac <_dtoa_r+0x2bc>)
  40bc26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40bc2a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40bc2e:	4652      	mov	r2, sl
  40bc30:	465b      	mov	r3, fp
  40bc32:	f002 fd89 	bl	40e748 <__aeabi_dcmpgt>
  40bc36:	2800      	cmp	r0, #0
  40bc38:	f000 81c5 	beq.w	40bfc6 <_dtoa_r+0x4d6>
  40bc3c:	1e6b      	subs	r3, r5, #1
  40bc3e:	9302      	str	r3, [sp, #8]
  40bc40:	2300      	movs	r3, #0
  40bc42:	930e      	str	r3, [sp, #56]	; 0x38
  40bc44:	1bbf      	subs	r7, r7, r6
  40bc46:	1e7b      	subs	r3, r7, #1
  40bc48:	9306      	str	r3, [sp, #24]
  40bc4a:	f100 8154 	bmi.w	40bef6 <_dtoa_r+0x406>
  40bc4e:	2300      	movs	r3, #0
  40bc50:	9308      	str	r3, [sp, #32]
  40bc52:	9b02      	ldr	r3, [sp, #8]
  40bc54:	2b00      	cmp	r3, #0
  40bc56:	f2c0 8145 	blt.w	40bee4 <_dtoa_r+0x3f4>
  40bc5a:	9a06      	ldr	r2, [sp, #24]
  40bc5c:	930d      	str	r3, [sp, #52]	; 0x34
  40bc5e:	4611      	mov	r1, r2
  40bc60:	4419      	add	r1, r3
  40bc62:	2300      	movs	r3, #0
  40bc64:	9106      	str	r1, [sp, #24]
  40bc66:	930c      	str	r3, [sp, #48]	; 0x30
  40bc68:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bc6a:	2b09      	cmp	r3, #9
  40bc6c:	d82a      	bhi.n	40bcc4 <_dtoa_r+0x1d4>
  40bc6e:	2b05      	cmp	r3, #5
  40bc70:	f340 865b 	ble.w	40c92a <_dtoa_r+0xe3a>
  40bc74:	3b04      	subs	r3, #4
  40bc76:	9324      	str	r3, [sp, #144]	; 0x90
  40bc78:	2500      	movs	r5, #0
  40bc7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bc7c:	3b02      	subs	r3, #2
  40bc7e:	2b03      	cmp	r3, #3
  40bc80:	f200 8642 	bhi.w	40c908 <_dtoa_r+0xe18>
  40bc84:	e8df f013 	tbh	[pc, r3, lsl #1]
  40bc88:	02c903d4 	.word	0x02c903d4
  40bc8c:	046103df 	.word	0x046103df
  40bc90:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40bc92:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40bc94:	443e      	add	r6, r7
  40bc96:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40bc9a:	2b20      	cmp	r3, #32
  40bc9c:	f340 818e 	ble.w	40bfbc <_dtoa_r+0x4cc>
  40bca0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40bca4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40bca8:	409d      	lsls	r5, r3
  40bcaa:	fa2a f000 	lsr.w	r0, sl, r0
  40bcae:	4328      	orrs	r0, r5
  40bcb0:	f002 fa44 	bl	40e13c <__aeabi_ui2d>
  40bcb4:	2301      	movs	r3, #1
  40bcb6:	3e01      	subs	r6, #1
  40bcb8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40bcbc:	9314      	str	r3, [sp, #80]	; 0x50
  40bcbe:	e781      	b.n	40bbc4 <_dtoa_r+0xd4>
  40bcc0:	483b      	ldr	r0, [pc, #236]	; (40bdb0 <_dtoa_r+0x2c0>)
  40bcc2:	e743      	b.n	40bb4c <_dtoa_r+0x5c>
  40bcc4:	2100      	movs	r1, #0
  40bcc6:	6461      	str	r1, [r4, #68]	; 0x44
  40bcc8:	4620      	mov	r0, r4
  40bcca:	9125      	str	r1, [sp, #148]	; 0x94
  40bccc:	f001 f974 	bl	40cfb8 <_Balloc>
  40bcd0:	f04f 33ff 	mov.w	r3, #4294967295
  40bcd4:	930a      	str	r3, [sp, #40]	; 0x28
  40bcd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40bcd8:	930f      	str	r3, [sp, #60]	; 0x3c
  40bcda:	2301      	movs	r3, #1
  40bcdc:	9004      	str	r0, [sp, #16]
  40bcde:	6420      	str	r0, [r4, #64]	; 0x40
  40bce0:	9224      	str	r2, [sp, #144]	; 0x90
  40bce2:	930b      	str	r3, [sp, #44]	; 0x2c
  40bce4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40bce6:	2b00      	cmp	r3, #0
  40bce8:	f2c0 80d9 	blt.w	40be9e <_dtoa_r+0x3ae>
  40bcec:	9a02      	ldr	r2, [sp, #8]
  40bcee:	2a0e      	cmp	r2, #14
  40bcf0:	f300 80d5 	bgt.w	40be9e <_dtoa_r+0x3ae>
  40bcf4:	4b2d      	ldr	r3, [pc, #180]	; (40bdac <_dtoa_r+0x2bc>)
  40bcf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
  40bcfe:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40bd02:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40bd04:	2b00      	cmp	r3, #0
  40bd06:	f2c0 83ba 	blt.w	40c47e <_dtoa_r+0x98e>
  40bd0a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40bd0e:	4650      	mov	r0, sl
  40bd10:	462a      	mov	r2, r5
  40bd12:	4633      	mov	r3, r6
  40bd14:	4659      	mov	r1, fp
  40bd16:	f002 fbb1 	bl	40e47c <__aeabi_ddiv>
  40bd1a:	f002 fd35 	bl	40e788 <__aeabi_d2iz>
  40bd1e:	4680      	mov	r8, r0
  40bd20:	f002 fa1c 	bl	40e15c <__aeabi_i2d>
  40bd24:	462a      	mov	r2, r5
  40bd26:	4633      	mov	r3, r6
  40bd28:	f002 fa7e 	bl	40e228 <__aeabi_dmul>
  40bd2c:	460b      	mov	r3, r1
  40bd2e:	4602      	mov	r2, r0
  40bd30:	4659      	mov	r1, fp
  40bd32:	4650      	mov	r0, sl
  40bd34:	f002 f8c4 	bl	40dec0 <__aeabi_dsub>
  40bd38:	9d04      	ldr	r5, [sp, #16]
  40bd3a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40bd3e:	702b      	strb	r3, [r5, #0]
  40bd40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bd42:	2b01      	cmp	r3, #1
  40bd44:	4606      	mov	r6, r0
  40bd46:	460f      	mov	r7, r1
  40bd48:	f105 0501 	add.w	r5, r5, #1
  40bd4c:	d068      	beq.n	40be20 <_dtoa_r+0x330>
  40bd4e:	2200      	movs	r2, #0
  40bd50:	4b18      	ldr	r3, [pc, #96]	; (40bdb4 <_dtoa_r+0x2c4>)
  40bd52:	f002 fa69 	bl	40e228 <__aeabi_dmul>
  40bd56:	2200      	movs	r2, #0
  40bd58:	2300      	movs	r3, #0
  40bd5a:	4606      	mov	r6, r0
  40bd5c:	460f      	mov	r7, r1
  40bd5e:	f002 fccb 	bl	40e6f8 <__aeabi_dcmpeq>
  40bd62:	2800      	cmp	r0, #0
  40bd64:	f040 8088 	bne.w	40be78 <_dtoa_r+0x388>
  40bd68:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40bd6c:	f04f 0a00 	mov.w	sl, #0
  40bd70:	f8df b040 	ldr.w	fp, [pc, #64]	; 40bdb4 <_dtoa_r+0x2c4>
  40bd74:	940c      	str	r4, [sp, #48]	; 0x30
  40bd76:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40bd7a:	e028      	b.n	40bdce <_dtoa_r+0x2de>
  40bd7c:	f3af 8000 	nop.w
  40bd80:	636f4361 	.word	0x636f4361
  40bd84:	3fd287a7 	.word	0x3fd287a7
  40bd88:	8b60c8b3 	.word	0x8b60c8b3
  40bd8c:	3fc68a28 	.word	0x3fc68a28
  40bd90:	509f79fb 	.word	0x509f79fb
  40bd94:	3fd34413 	.word	0x3fd34413
  40bd98:	7ff00000 	.word	0x7ff00000
  40bd9c:	0040f5fd 	.word	0x0040f5fd
  40bda0:	0040f620 	.word	0x0040f620
  40bda4:	0040f62c 	.word	0x0040f62c
  40bda8:	3ff80000 	.word	0x3ff80000
  40bdac:	0040f658 	.word	0x0040f658
  40bdb0:	0040f5fc 	.word	0x0040f5fc
  40bdb4:	40240000 	.word	0x40240000
  40bdb8:	f002 fa36 	bl	40e228 <__aeabi_dmul>
  40bdbc:	2200      	movs	r2, #0
  40bdbe:	2300      	movs	r3, #0
  40bdc0:	4606      	mov	r6, r0
  40bdc2:	460f      	mov	r7, r1
  40bdc4:	f002 fc98 	bl	40e6f8 <__aeabi_dcmpeq>
  40bdc8:	2800      	cmp	r0, #0
  40bdca:	f040 83c1 	bne.w	40c550 <_dtoa_r+0xa60>
  40bdce:	4642      	mov	r2, r8
  40bdd0:	464b      	mov	r3, r9
  40bdd2:	4630      	mov	r0, r6
  40bdd4:	4639      	mov	r1, r7
  40bdd6:	f002 fb51 	bl	40e47c <__aeabi_ddiv>
  40bdda:	f002 fcd5 	bl	40e788 <__aeabi_d2iz>
  40bdde:	4604      	mov	r4, r0
  40bde0:	f002 f9bc 	bl	40e15c <__aeabi_i2d>
  40bde4:	4642      	mov	r2, r8
  40bde6:	464b      	mov	r3, r9
  40bde8:	f002 fa1e 	bl	40e228 <__aeabi_dmul>
  40bdec:	4602      	mov	r2, r0
  40bdee:	460b      	mov	r3, r1
  40bdf0:	4630      	mov	r0, r6
  40bdf2:	4639      	mov	r1, r7
  40bdf4:	f002 f864 	bl	40dec0 <__aeabi_dsub>
  40bdf8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40bdfc:	9e04      	ldr	r6, [sp, #16]
  40bdfe:	f805 eb01 	strb.w	lr, [r5], #1
  40be02:	eba5 0e06 	sub.w	lr, r5, r6
  40be06:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40be08:	45b6      	cmp	lr, r6
  40be0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40be0e:	4652      	mov	r2, sl
  40be10:	465b      	mov	r3, fp
  40be12:	d1d1      	bne.n	40bdb8 <_dtoa_r+0x2c8>
  40be14:	46a0      	mov	r8, r4
  40be16:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40be1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40be1c:	4606      	mov	r6, r0
  40be1e:	460f      	mov	r7, r1
  40be20:	4632      	mov	r2, r6
  40be22:	463b      	mov	r3, r7
  40be24:	4630      	mov	r0, r6
  40be26:	4639      	mov	r1, r7
  40be28:	f002 f84c 	bl	40dec4 <__adddf3>
  40be2c:	4606      	mov	r6, r0
  40be2e:	460f      	mov	r7, r1
  40be30:	4602      	mov	r2, r0
  40be32:	460b      	mov	r3, r1
  40be34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40be38:	f002 fc68 	bl	40e70c <__aeabi_dcmplt>
  40be3c:	b948      	cbnz	r0, 40be52 <_dtoa_r+0x362>
  40be3e:	4632      	mov	r2, r6
  40be40:	463b      	mov	r3, r7
  40be42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40be46:	f002 fc57 	bl	40e6f8 <__aeabi_dcmpeq>
  40be4a:	b1a8      	cbz	r0, 40be78 <_dtoa_r+0x388>
  40be4c:	f018 0f01 	tst.w	r8, #1
  40be50:	d012      	beq.n	40be78 <_dtoa_r+0x388>
  40be52:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40be56:	9a04      	ldr	r2, [sp, #16]
  40be58:	1e6b      	subs	r3, r5, #1
  40be5a:	e004      	b.n	40be66 <_dtoa_r+0x376>
  40be5c:	429a      	cmp	r2, r3
  40be5e:	f000 8401 	beq.w	40c664 <_dtoa_r+0xb74>
  40be62:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40be66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40be6a:	f103 0501 	add.w	r5, r3, #1
  40be6e:	d0f5      	beq.n	40be5c <_dtoa_r+0x36c>
  40be70:	f108 0801 	add.w	r8, r8, #1
  40be74:	f883 8000 	strb.w	r8, [r3]
  40be78:	4649      	mov	r1, r9
  40be7a:	4620      	mov	r0, r4
  40be7c:	f001 f8c2 	bl	40d004 <_Bfree>
  40be80:	2200      	movs	r2, #0
  40be82:	9b02      	ldr	r3, [sp, #8]
  40be84:	702a      	strb	r2, [r5, #0]
  40be86:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40be88:	3301      	adds	r3, #1
  40be8a:	6013      	str	r3, [r2, #0]
  40be8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40be8e:	2b00      	cmp	r3, #0
  40be90:	f000 839e 	beq.w	40c5d0 <_dtoa_r+0xae0>
  40be94:	9804      	ldr	r0, [sp, #16]
  40be96:	601d      	str	r5, [r3, #0]
  40be98:	b01b      	add	sp, #108	; 0x6c
  40be9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40be9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40bea0:	2a00      	cmp	r2, #0
  40bea2:	d03e      	beq.n	40bf22 <_dtoa_r+0x432>
  40bea4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40bea6:	2a01      	cmp	r2, #1
  40bea8:	f340 8311 	ble.w	40c4ce <_dtoa_r+0x9de>
  40beac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40beae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40beb0:	1e5f      	subs	r7, r3, #1
  40beb2:	42ba      	cmp	r2, r7
  40beb4:	f2c0 838f 	blt.w	40c5d6 <_dtoa_r+0xae6>
  40beb8:	1bd7      	subs	r7, r2, r7
  40beba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bebc:	2b00      	cmp	r3, #0
  40bebe:	f2c0 848b 	blt.w	40c7d8 <_dtoa_r+0xce8>
  40bec2:	9d08      	ldr	r5, [sp, #32]
  40bec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40bec6:	9a08      	ldr	r2, [sp, #32]
  40bec8:	441a      	add	r2, r3
  40beca:	9208      	str	r2, [sp, #32]
  40becc:	9a06      	ldr	r2, [sp, #24]
  40bece:	2101      	movs	r1, #1
  40bed0:	441a      	add	r2, r3
  40bed2:	4620      	mov	r0, r4
  40bed4:	9206      	str	r2, [sp, #24]
  40bed6:	f001 f92f 	bl	40d138 <__i2b>
  40beda:	4606      	mov	r6, r0
  40bedc:	e024      	b.n	40bf28 <_dtoa_r+0x438>
  40bede:	2301      	movs	r3, #1
  40bee0:	930e      	str	r3, [sp, #56]	; 0x38
  40bee2:	e6af      	b.n	40bc44 <_dtoa_r+0x154>
  40bee4:	9a08      	ldr	r2, [sp, #32]
  40bee6:	9b02      	ldr	r3, [sp, #8]
  40bee8:	1ad2      	subs	r2, r2, r3
  40beea:	425b      	negs	r3, r3
  40beec:	930c      	str	r3, [sp, #48]	; 0x30
  40beee:	2300      	movs	r3, #0
  40bef0:	9208      	str	r2, [sp, #32]
  40bef2:	930d      	str	r3, [sp, #52]	; 0x34
  40bef4:	e6b8      	b.n	40bc68 <_dtoa_r+0x178>
  40bef6:	f1c7 0301 	rsb	r3, r7, #1
  40befa:	9308      	str	r3, [sp, #32]
  40befc:	2300      	movs	r3, #0
  40befe:	9306      	str	r3, [sp, #24]
  40bf00:	e6a7      	b.n	40bc52 <_dtoa_r+0x162>
  40bf02:	9d02      	ldr	r5, [sp, #8]
  40bf04:	4628      	mov	r0, r5
  40bf06:	f002 f929 	bl	40e15c <__aeabi_i2d>
  40bf0a:	4602      	mov	r2, r0
  40bf0c:	460b      	mov	r3, r1
  40bf0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40bf12:	f002 fbf1 	bl	40e6f8 <__aeabi_dcmpeq>
  40bf16:	2800      	cmp	r0, #0
  40bf18:	f47f ae80 	bne.w	40bc1c <_dtoa_r+0x12c>
  40bf1c:	1e6b      	subs	r3, r5, #1
  40bf1e:	9302      	str	r3, [sp, #8]
  40bf20:	e67c      	b.n	40bc1c <_dtoa_r+0x12c>
  40bf22:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40bf24:	9d08      	ldr	r5, [sp, #32]
  40bf26:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40bf28:	2d00      	cmp	r5, #0
  40bf2a:	dd0c      	ble.n	40bf46 <_dtoa_r+0x456>
  40bf2c:	9906      	ldr	r1, [sp, #24]
  40bf2e:	2900      	cmp	r1, #0
  40bf30:	460b      	mov	r3, r1
  40bf32:	dd08      	ble.n	40bf46 <_dtoa_r+0x456>
  40bf34:	42a9      	cmp	r1, r5
  40bf36:	9a08      	ldr	r2, [sp, #32]
  40bf38:	bfa8      	it	ge
  40bf3a:	462b      	movge	r3, r5
  40bf3c:	1ad2      	subs	r2, r2, r3
  40bf3e:	1aed      	subs	r5, r5, r3
  40bf40:	1acb      	subs	r3, r1, r3
  40bf42:	9208      	str	r2, [sp, #32]
  40bf44:	9306      	str	r3, [sp, #24]
  40bf46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40bf48:	b1d3      	cbz	r3, 40bf80 <_dtoa_r+0x490>
  40bf4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bf4c:	2b00      	cmp	r3, #0
  40bf4e:	f000 82b7 	beq.w	40c4c0 <_dtoa_r+0x9d0>
  40bf52:	2f00      	cmp	r7, #0
  40bf54:	dd10      	ble.n	40bf78 <_dtoa_r+0x488>
  40bf56:	4631      	mov	r1, r6
  40bf58:	463a      	mov	r2, r7
  40bf5a:	4620      	mov	r0, r4
  40bf5c:	f001 f988 	bl	40d270 <__pow5mult>
  40bf60:	464a      	mov	r2, r9
  40bf62:	4601      	mov	r1, r0
  40bf64:	4606      	mov	r6, r0
  40bf66:	4620      	mov	r0, r4
  40bf68:	f001 f8f0 	bl	40d14c <__multiply>
  40bf6c:	4649      	mov	r1, r9
  40bf6e:	4680      	mov	r8, r0
  40bf70:	4620      	mov	r0, r4
  40bf72:	f001 f847 	bl	40d004 <_Bfree>
  40bf76:	46c1      	mov	r9, r8
  40bf78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40bf7a:	1bda      	subs	r2, r3, r7
  40bf7c:	f040 82a1 	bne.w	40c4c2 <_dtoa_r+0x9d2>
  40bf80:	2101      	movs	r1, #1
  40bf82:	4620      	mov	r0, r4
  40bf84:	f001 f8d8 	bl	40d138 <__i2b>
  40bf88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40bf8a:	2b00      	cmp	r3, #0
  40bf8c:	4680      	mov	r8, r0
  40bf8e:	dd1c      	ble.n	40bfca <_dtoa_r+0x4da>
  40bf90:	4601      	mov	r1, r0
  40bf92:	461a      	mov	r2, r3
  40bf94:	4620      	mov	r0, r4
  40bf96:	f001 f96b 	bl	40d270 <__pow5mult>
  40bf9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bf9c:	2b01      	cmp	r3, #1
  40bf9e:	4680      	mov	r8, r0
  40bfa0:	f340 8254 	ble.w	40c44c <_dtoa_r+0x95c>
  40bfa4:	2300      	movs	r3, #0
  40bfa6:	930c      	str	r3, [sp, #48]	; 0x30
  40bfa8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40bfac:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40bfb0:	6918      	ldr	r0, [r3, #16]
  40bfb2:	f001 f871 	bl	40d098 <__hi0bits>
  40bfb6:	f1c0 0020 	rsb	r0, r0, #32
  40bfba:	e010      	b.n	40bfde <_dtoa_r+0x4ee>
  40bfbc:	f1c3 0520 	rsb	r5, r3, #32
  40bfc0:	fa0a f005 	lsl.w	r0, sl, r5
  40bfc4:	e674      	b.n	40bcb0 <_dtoa_r+0x1c0>
  40bfc6:	900e      	str	r0, [sp, #56]	; 0x38
  40bfc8:	e63c      	b.n	40bc44 <_dtoa_r+0x154>
  40bfca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bfcc:	2b01      	cmp	r3, #1
  40bfce:	f340 8287 	ble.w	40c4e0 <_dtoa_r+0x9f0>
  40bfd2:	2300      	movs	r3, #0
  40bfd4:	930c      	str	r3, [sp, #48]	; 0x30
  40bfd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40bfd8:	2001      	movs	r0, #1
  40bfda:	2b00      	cmp	r3, #0
  40bfdc:	d1e4      	bne.n	40bfa8 <_dtoa_r+0x4b8>
  40bfde:	9a06      	ldr	r2, [sp, #24]
  40bfe0:	4410      	add	r0, r2
  40bfe2:	f010 001f 	ands.w	r0, r0, #31
  40bfe6:	f000 80a1 	beq.w	40c12c <_dtoa_r+0x63c>
  40bfea:	f1c0 0320 	rsb	r3, r0, #32
  40bfee:	2b04      	cmp	r3, #4
  40bff0:	f340 849e 	ble.w	40c930 <_dtoa_r+0xe40>
  40bff4:	9b08      	ldr	r3, [sp, #32]
  40bff6:	f1c0 001c 	rsb	r0, r0, #28
  40bffa:	4403      	add	r3, r0
  40bffc:	9308      	str	r3, [sp, #32]
  40bffe:	4613      	mov	r3, r2
  40c000:	4403      	add	r3, r0
  40c002:	4405      	add	r5, r0
  40c004:	9306      	str	r3, [sp, #24]
  40c006:	9b08      	ldr	r3, [sp, #32]
  40c008:	2b00      	cmp	r3, #0
  40c00a:	dd05      	ble.n	40c018 <_dtoa_r+0x528>
  40c00c:	4649      	mov	r1, r9
  40c00e:	461a      	mov	r2, r3
  40c010:	4620      	mov	r0, r4
  40c012:	f001 f97d 	bl	40d310 <__lshift>
  40c016:	4681      	mov	r9, r0
  40c018:	9b06      	ldr	r3, [sp, #24]
  40c01a:	2b00      	cmp	r3, #0
  40c01c:	dd05      	ble.n	40c02a <_dtoa_r+0x53a>
  40c01e:	4641      	mov	r1, r8
  40c020:	461a      	mov	r2, r3
  40c022:	4620      	mov	r0, r4
  40c024:	f001 f974 	bl	40d310 <__lshift>
  40c028:	4680      	mov	r8, r0
  40c02a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c02c:	2b00      	cmp	r3, #0
  40c02e:	f040 8086 	bne.w	40c13e <_dtoa_r+0x64e>
  40c032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c034:	2b00      	cmp	r3, #0
  40c036:	f340 8266 	ble.w	40c506 <_dtoa_r+0xa16>
  40c03a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c03c:	2b00      	cmp	r3, #0
  40c03e:	f000 8098 	beq.w	40c172 <_dtoa_r+0x682>
  40c042:	2d00      	cmp	r5, #0
  40c044:	dd05      	ble.n	40c052 <_dtoa_r+0x562>
  40c046:	4631      	mov	r1, r6
  40c048:	462a      	mov	r2, r5
  40c04a:	4620      	mov	r0, r4
  40c04c:	f001 f960 	bl	40d310 <__lshift>
  40c050:	4606      	mov	r6, r0
  40c052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c054:	2b00      	cmp	r3, #0
  40c056:	f040 8337 	bne.w	40c6c8 <_dtoa_r+0xbd8>
  40c05a:	9606      	str	r6, [sp, #24]
  40c05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c05e:	9a04      	ldr	r2, [sp, #16]
  40c060:	f8dd b018 	ldr.w	fp, [sp, #24]
  40c064:	3b01      	subs	r3, #1
  40c066:	18d3      	adds	r3, r2, r3
  40c068:	930b      	str	r3, [sp, #44]	; 0x2c
  40c06a:	f00a 0301 	and.w	r3, sl, #1
  40c06e:	930c      	str	r3, [sp, #48]	; 0x30
  40c070:	4617      	mov	r7, r2
  40c072:	46c2      	mov	sl, r8
  40c074:	4651      	mov	r1, sl
  40c076:	4648      	mov	r0, r9
  40c078:	f7ff fca6 	bl	40b9c8 <quorem>
  40c07c:	4631      	mov	r1, r6
  40c07e:	4605      	mov	r5, r0
  40c080:	4648      	mov	r0, r9
  40c082:	f001 f997 	bl	40d3b4 <__mcmp>
  40c086:	465a      	mov	r2, fp
  40c088:	900a      	str	r0, [sp, #40]	; 0x28
  40c08a:	4651      	mov	r1, sl
  40c08c:	4620      	mov	r0, r4
  40c08e:	f001 f9ad 	bl	40d3ec <__mdiff>
  40c092:	68c2      	ldr	r2, [r0, #12]
  40c094:	4680      	mov	r8, r0
  40c096:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40c09a:	2a00      	cmp	r2, #0
  40c09c:	f040 822b 	bne.w	40c4f6 <_dtoa_r+0xa06>
  40c0a0:	4601      	mov	r1, r0
  40c0a2:	4648      	mov	r0, r9
  40c0a4:	9308      	str	r3, [sp, #32]
  40c0a6:	f001 f985 	bl	40d3b4 <__mcmp>
  40c0aa:	4641      	mov	r1, r8
  40c0ac:	9006      	str	r0, [sp, #24]
  40c0ae:	4620      	mov	r0, r4
  40c0b0:	f000 ffa8 	bl	40d004 <_Bfree>
  40c0b4:	9a06      	ldr	r2, [sp, #24]
  40c0b6:	9b08      	ldr	r3, [sp, #32]
  40c0b8:	b932      	cbnz	r2, 40c0c8 <_dtoa_r+0x5d8>
  40c0ba:	9924      	ldr	r1, [sp, #144]	; 0x90
  40c0bc:	b921      	cbnz	r1, 40c0c8 <_dtoa_r+0x5d8>
  40c0be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c0c0:	2a00      	cmp	r2, #0
  40c0c2:	f000 83ef 	beq.w	40c8a4 <_dtoa_r+0xdb4>
  40c0c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40c0c8:	990a      	ldr	r1, [sp, #40]	; 0x28
  40c0ca:	2900      	cmp	r1, #0
  40c0cc:	f2c0 829f 	blt.w	40c60e <_dtoa_r+0xb1e>
  40c0d0:	d105      	bne.n	40c0de <_dtoa_r+0x5ee>
  40c0d2:	9924      	ldr	r1, [sp, #144]	; 0x90
  40c0d4:	b919      	cbnz	r1, 40c0de <_dtoa_r+0x5ee>
  40c0d6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c0d8:	2900      	cmp	r1, #0
  40c0da:	f000 8298 	beq.w	40c60e <_dtoa_r+0xb1e>
  40c0de:	2a00      	cmp	r2, #0
  40c0e0:	f300 8306 	bgt.w	40c6f0 <_dtoa_r+0xc00>
  40c0e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c0e6:	703b      	strb	r3, [r7, #0]
  40c0e8:	f107 0801 	add.w	r8, r7, #1
  40c0ec:	4297      	cmp	r7, r2
  40c0ee:	4645      	mov	r5, r8
  40c0f0:	f000 830c 	beq.w	40c70c <_dtoa_r+0xc1c>
  40c0f4:	4649      	mov	r1, r9
  40c0f6:	2300      	movs	r3, #0
  40c0f8:	220a      	movs	r2, #10
  40c0fa:	4620      	mov	r0, r4
  40c0fc:	f000 ff8c 	bl	40d018 <__multadd>
  40c100:	455e      	cmp	r6, fp
  40c102:	4681      	mov	r9, r0
  40c104:	4631      	mov	r1, r6
  40c106:	f04f 0300 	mov.w	r3, #0
  40c10a:	f04f 020a 	mov.w	r2, #10
  40c10e:	4620      	mov	r0, r4
  40c110:	f000 81eb 	beq.w	40c4ea <_dtoa_r+0x9fa>
  40c114:	f000 ff80 	bl	40d018 <__multadd>
  40c118:	4659      	mov	r1, fp
  40c11a:	4606      	mov	r6, r0
  40c11c:	2300      	movs	r3, #0
  40c11e:	220a      	movs	r2, #10
  40c120:	4620      	mov	r0, r4
  40c122:	f000 ff79 	bl	40d018 <__multadd>
  40c126:	4647      	mov	r7, r8
  40c128:	4683      	mov	fp, r0
  40c12a:	e7a3      	b.n	40c074 <_dtoa_r+0x584>
  40c12c:	201c      	movs	r0, #28
  40c12e:	9b08      	ldr	r3, [sp, #32]
  40c130:	4403      	add	r3, r0
  40c132:	9308      	str	r3, [sp, #32]
  40c134:	9b06      	ldr	r3, [sp, #24]
  40c136:	4403      	add	r3, r0
  40c138:	4405      	add	r5, r0
  40c13a:	9306      	str	r3, [sp, #24]
  40c13c:	e763      	b.n	40c006 <_dtoa_r+0x516>
  40c13e:	4641      	mov	r1, r8
  40c140:	4648      	mov	r0, r9
  40c142:	f001 f937 	bl	40d3b4 <__mcmp>
  40c146:	2800      	cmp	r0, #0
  40c148:	f6bf af73 	bge.w	40c032 <_dtoa_r+0x542>
  40c14c:	9f02      	ldr	r7, [sp, #8]
  40c14e:	4649      	mov	r1, r9
  40c150:	2300      	movs	r3, #0
  40c152:	220a      	movs	r2, #10
  40c154:	4620      	mov	r0, r4
  40c156:	3f01      	subs	r7, #1
  40c158:	9702      	str	r7, [sp, #8]
  40c15a:	f000 ff5d 	bl	40d018 <__multadd>
  40c15e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c160:	4681      	mov	r9, r0
  40c162:	2b00      	cmp	r3, #0
  40c164:	f040 83b6 	bne.w	40c8d4 <_dtoa_r+0xde4>
  40c168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c16a:	2b00      	cmp	r3, #0
  40c16c:	f340 83bf 	ble.w	40c8ee <_dtoa_r+0xdfe>
  40c170:	930a      	str	r3, [sp, #40]	; 0x28
  40c172:	f8dd b010 	ldr.w	fp, [sp, #16]
  40c176:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40c178:	465d      	mov	r5, fp
  40c17a:	e002      	b.n	40c182 <_dtoa_r+0x692>
  40c17c:	f000 ff4c 	bl	40d018 <__multadd>
  40c180:	4681      	mov	r9, r0
  40c182:	4641      	mov	r1, r8
  40c184:	4648      	mov	r0, r9
  40c186:	f7ff fc1f 	bl	40b9c8 <quorem>
  40c18a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40c18e:	f805 ab01 	strb.w	sl, [r5], #1
  40c192:	eba5 030b 	sub.w	r3, r5, fp
  40c196:	42bb      	cmp	r3, r7
  40c198:	f04f 020a 	mov.w	r2, #10
  40c19c:	f04f 0300 	mov.w	r3, #0
  40c1a0:	4649      	mov	r1, r9
  40c1a2:	4620      	mov	r0, r4
  40c1a4:	dbea      	blt.n	40c17c <_dtoa_r+0x68c>
  40c1a6:	9b04      	ldr	r3, [sp, #16]
  40c1a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c1aa:	2a01      	cmp	r2, #1
  40c1ac:	bfac      	ite	ge
  40c1ae:	189b      	addge	r3, r3, r2
  40c1b0:	3301      	addlt	r3, #1
  40c1b2:	461d      	mov	r5, r3
  40c1b4:	f04f 0b00 	mov.w	fp, #0
  40c1b8:	4649      	mov	r1, r9
  40c1ba:	2201      	movs	r2, #1
  40c1bc:	4620      	mov	r0, r4
  40c1be:	f001 f8a7 	bl	40d310 <__lshift>
  40c1c2:	4641      	mov	r1, r8
  40c1c4:	4681      	mov	r9, r0
  40c1c6:	f001 f8f5 	bl	40d3b4 <__mcmp>
  40c1ca:	2800      	cmp	r0, #0
  40c1cc:	f340 823d 	ble.w	40c64a <_dtoa_r+0xb5a>
  40c1d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40c1d4:	9904      	ldr	r1, [sp, #16]
  40c1d6:	1e6b      	subs	r3, r5, #1
  40c1d8:	e004      	b.n	40c1e4 <_dtoa_r+0x6f4>
  40c1da:	428b      	cmp	r3, r1
  40c1dc:	f000 81ae 	beq.w	40c53c <_dtoa_r+0xa4c>
  40c1e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40c1e4:	2a39      	cmp	r2, #57	; 0x39
  40c1e6:	f103 0501 	add.w	r5, r3, #1
  40c1ea:	d0f6      	beq.n	40c1da <_dtoa_r+0x6ea>
  40c1ec:	3201      	adds	r2, #1
  40c1ee:	701a      	strb	r2, [r3, #0]
  40c1f0:	4641      	mov	r1, r8
  40c1f2:	4620      	mov	r0, r4
  40c1f4:	f000 ff06 	bl	40d004 <_Bfree>
  40c1f8:	2e00      	cmp	r6, #0
  40c1fa:	f43f ae3d 	beq.w	40be78 <_dtoa_r+0x388>
  40c1fe:	f1bb 0f00 	cmp.w	fp, #0
  40c202:	d005      	beq.n	40c210 <_dtoa_r+0x720>
  40c204:	45b3      	cmp	fp, r6
  40c206:	d003      	beq.n	40c210 <_dtoa_r+0x720>
  40c208:	4659      	mov	r1, fp
  40c20a:	4620      	mov	r0, r4
  40c20c:	f000 fefa 	bl	40d004 <_Bfree>
  40c210:	4631      	mov	r1, r6
  40c212:	4620      	mov	r0, r4
  40c214:	f000 fef6 	bl	40d004 <_Bfree>
  40c218:	e62e      	b.n	40be78 <_dtoa_r+0x388>
  40c21a:	2300      	movs	r3, #0
  40c21c:	930b      	str	r3, [sp, #44]	; 0x2c
  40c21e:	9b02      	ldr	r3, [sp, #8]
  40c220:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40c222:	4413      	add	r3, r2
  40c224:	930f      	str	r3, [sp, #60]	; 0x3c
  40c226:	3301      	adds	r3, #1
  40c228:	2b01      	cmp	r3, #1
  40c22a:	461f      	mov	r7, r3
  40c22c:	461e      	mov	r6, r3
  40c22e:	930a      	str	r3, [sp, #40]	; 0x28
  40c230:	bfb8      	it	lt
  40c232:	2701      	movlt	r7, #1
  40c234:	2100      	movs	r1, #0
  40c236:	2f17      	cmp	r7, #23
  40c238:	6461      	str	r1, [r4, #68]	; 0x44
  40c23a:	d90a      	bls.n	40c252 <_dtoa_r+0x762>
  40c23c:	2201      	movs	r2, #1
  40c23e:	2304      	movs	r3, #4
  40c240:	005b      	lsls	r3, r3, #1
  40c242:	f103 0014 	add.w	r0, r3, #20
  40c246:	4287      	cmp	r7, r0
  40c248:	4611      	mov	r1, r2
  40c24a:	f102 0201 	add.w	r2, r2, #1
  40c24e:	d2f7      	bcs.n	40c240 <_dtoa_r+0x750>
  40c250:	6461      	str	r1, [r4, #68]	; 0x44
  40c252:	4620      	mov	r0, r4
  40c254:	f000 feb0 	bl	40cfb8 <_Balloc>
  40c258:	2e0e      	cmp	r6, #14
  40c25a:	9004      	str	r0, [sp, #16]
  40c25c:	6420      	str	r0, [r4, #64]	; 0x40
  40c25e:	f63f ad41 	bhi.w	40bce4 <_dtoa_r+0x1f4>
  40c262:	2d00      	cmp	r5, #0
  40c264:	f43f ad3e 	beq.w	40bce4 <_dtoa_r+0x1f4>
  40c268:	9902      	ldr	r1, [sp, #8]
  40c26a:	2900      	cmp	r1, #0
  40c26c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40c270:	f340 8202 	ble.w	40c678 <_dtoa_r+0xb88>
  40c274:	4bb8      	ldr	r3, [pc, #736]	; (40c558 <_dtoa_r+0xa68>)
  40c276:	f001 020f 	and.w	r2, r1, #15
  40c27a:	110d      	asrs	r5, r1, #4
  40c27c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c280:	06e9      	lsls	r1, r5, #27
  40c282:	e9d3 6700 	ldrd	r6, r7, [r3]
  40c286:	f140 81ae 	bpl.w	40c5e6 <_dtoa_r+0xaf6>
  40c28a:	4bb4      	ldr	r3, [pc, #720]	; (40c55c <_dtoa_r+0xa6c>)
  40c28c:	4650      	mov	r0, sl
  40c28e:	4659      	mov	r1, fp
  40c290:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40c294:	f002 f8f2 	bl	40e47c <__aeabi_ddiv>
  40c298:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40c29c:	f005 050f 	and.w	r5, r5, #15
  40c2a0:	f04f 0a03 	mov.w	sl, #3
  40c2a4:	b18d      	cbz	r5, 40c2ca <_dtoa_r+0x7da>
  40c2a6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40c55c <_dtoa_r+0xa6c>
  40c2aa:	07ea      	lsls	r2, r5, #31
  40c2ac:	d509      	bpl.n	40c2c2 <_dtoa_r+0x7d2>
  40c2ae:	4630      	mov	r0, r6
  40c2b0:	4639      	mov	r1, r7
  40c2b2:	e9d8 2300 	ldrd	r2, r3, [r8]
  40c2b6:	f001 ffb7 	bl	40e228 <__aeabi_dmul>
  40c2ba:	f10a 0a01 	add.w	sl, sl, #1
  40c2be:	4606      	mov	r6, r0
  40c2c0:	460f      	mov	r7, r1
  40c2c2:	106d      	asrs	r5, r5, #1
  40c2c4:	f108 0808 	add.w	r8, r8, #8
  40c2c8:	d1ef      	bne.n	40c2aa <_dtoa_r+0x7ba>
  40c2ca:	463b      	mov	r3, r7
  40c2cc:	4632      	mov	r2, r6
  40c2ce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40c2d2:	f002 f8d3 	bl	40e47c <__aeabi_ddiv>
  40c2d6:	4607      	mov	r7, r0
  40c2d8:	4688      	mov	r8, r1
  40c2da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c2dc:	b143      	cbz	r3, 40c2f0 <_dtoa_r+0x800>
  40c2de:	2200      	movs	r2, #0
  40c2e0:	4b9f      	ldr	r3, [pc, #636]	; (40c560 <_dtoa_r+0xa70>)
  40c2e2:	4638      	mov	r0, r7
  40c2e4:	4641      	mov	r1, r8
  40c2e6:	f002 fa11 	bl	40e70c <__aeabi_dcmplt>
  40c2ea:	2800      	cmp	r0, #0
  40c2ec:	f040 8286 	bne.w	40c7fc <_dtoa_r+0xd0c>
  40c2f0:	4650      	mov	r0, sl
  40c2f2:	f001 ff33 	bl	40e15c <__aeabi_i2d>
  40c2f6:	463a      	mov	r2, r7
  40c2f8:	4643      	mov	r3, r8
  40c2fa:	f001 ff95 	bl	40e228 <__aeabi_dmul>
  40c2fe:	4b99      	ldr	r3, [pc, #612]	; (40c564 <_dtoa_r+0xa74>)
  40c300:	2200      	movs	r2, #0
  40c302:	f001 fddf 	bl	40dec4 <__adddf3>
  40c306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c308:	4605      	mov	r5, r0
  40c30a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40c30e:	2b00      	cmp	r3, #0
  40c310:	f000 813e 	beq.w	40c590 <_dtoa_r+0xaa0>
  40c314:	9b02      	ldr	r3, [sp, #8]
  40c316:	9315      	str	r3, [sp, #84]	; 0x54
  40c318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c31a:	9312      	str	r3, [sp, #72]	; 0x48
  40c31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40c31e:	2b00      	cmp	r3, #0
  40c320:	f000 81fa 	beq.w	40c718 <_dtoa_r+0xc28>
  40c324:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40c326:	4b8c      	ldr	r3, [pc, #560]	; (40c558 <_dtoa_r+0xa68>)
  40c328:	498f      	ldr	r1, [pc, #572]	; (40c568 <_dtoa_r+0xa78>)
  40c32a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c32e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40c332:	2000      	movs	r0, #0
  40c334:	f002 f8a2 	bl	40e47c <__aeabi_ddiv>
  40c338:	462a      	mov	r2, r5
  40c33a:	4633      	mov	r3, r6
  40c33c:	f001 fdc0 	bl	40dec0 <__aeabi_dsub>
  40c340:	4682      	mov	sl, r0
  40c342:	468b      	mov	fp, r1
  40c344:	4638      	mov	r0, r7
  40c346:	4641      	mov	r1, r8
  40c348:	f002 fa1e 	bl	40e788 <__aeabi_d2iz>
  40c34c:	4605      	mov	r5, r0
  40c34e:	f001 ff05 	bl	40e15c <__aeabi_i2d>
  40c352:	4602      	mov	r2, r0
  40c354:	460b      	mov	r3, r1
  40c356:	4638      	mov	r0, r7
  40c358:	4641      	mov	r1, r8
  40c35a:	f001 fdb1 	bl	40dec0 <__aeabi_dsub>
  40c35e:	3530      	adds	r5, #48	; 0x30
  40c360:	fa5f f885 	uxtb.w	r8, r5
  40c364:	9d04      	ldr	r5, [sp, #16]
  40c366:	4606      	mov	r6, r0
  40c368:	460f      	mov	r7, r1
  40c36a:	f885 8000 	strb.w	r8, [r5]
  40c36e:	4602      	mov	r2, r0
  40c370:	460b      	mov	r3, r1
  40c372:	4650      	mov	r0, sl
  40c374:	4659      	mov	r1, fp
  40c376:	3501      	adds	r5, #1
  40c378:	f002 f9e6 	bl	40e748 <__aeabi_dcmpgt>
  40c37c:	2800      	cmp	r0, #0
  40c37e:	d154      	bne.n	40c42a <_dtoa_r+0x93a>
  40c380:	4632      	mov	r2, r6
  40c382:	463b      	mov	r3, r7
  40c384:	2000      	movs	r0, #0
  40c386:	4976      	ldr	r1, [pc, #472]	; (40c560 <_dtoa_r+0xa70>)
  40c388:	f001 fd9a 	bl	40dec0 <__aeabi_dsub>
  40c38c:	4602      	mov	r2, r0
  40c38e:	460b      	mov	r3, r1
  40c390:	4650      	mov	r0, sl
  40c392:	4659      	mov	r1, fp
  40c394:	f002 f9d8 	bl	40e748 <__aeabi_dcmpgt>
  40c398:	2800      	cmp	r0, #0
  40c39a:	f040 8270 	bne.w	40c87e <_dtoa_r+0xd8e>
  40c39e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40c3a0:	2a01      	cmp	r2, #1
  40c3a2:	f000 8111 	beq.w	40c5c8 <_dtoa_r+0xad8>
  40c3a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c3a8:	9a04      	ldr	r2, [sp, #16]
  40c3aa:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40c3ae:	4413      	add	r3, r2
  40c3b0:	4699      	mov	r9, r3
  40c3b2:	e00d      	b.n	40c3d0 <_dtoa_r+0x8e0>
  40c3b4:	2000      	movs	r0, #0
  40c3b6:	496a      	ldr	r1, [pc, #424]	; (40c560 <_dtoa_r+0xa70>)
  40c3b8:	f001 fd82 	bl	40dec0 <__aeabi_dsub>
  40c3bc:	4652      	mov	r2, sl
  40c3be:	465b      	mov	r3, fp
  40c3c0:	f002 f9a4 	bl	40e70c <__aeabi_dcmplt>
  40c3c4:	2800      	cmp	r0, #0
  40c3c6:	f040 8258 	bne.w	40c87a <_dtoa_r+0xd8a>
  40c3ca:	454d      	cmp	r5, r9
  40c3cc:	f000 80fa 	beq.w	40c5c4 <_dtoa_r+0xad4>
  40c3d0:	4650      	mov	r0, sl
  40c3d2:	4659      	mov	r1, fp
  40c3d4:	2200      	movs	r2, #0
  40c3d6:	4b65      	ldr	r3, [pc, #404]	; (40c56c <_dtoa_r+0xa7c>)
  40c3d8:	f001 ff26 	bl	40e228 <__aeabi_dmul>
  40c3dc:	2200      	movs	r2, #0
  40c3de:	4b63      	ldr	r3, [pc, #396]	; (40c56c <_dtoa_r+0xa7c>)
  40c3e0:	4682      	mov	sl, r0
  40c3e2:	468b      	mov	fp, r1
  40c3e4:	4630      	mov	r0, r6
  40c3e6:	4639      	mov	r1, r7
  40c3e8:	f001 ff1e 	bl	40e228 <__aeabi_dmul>
  40c3ec:	460f      	mov	r7, r1
  40c3ee:	4606      	mov	r6, r0
  40c3f0:	f002 f9ca 	bl	40e788 <__aeabi_d2iz>
  40c3f4:	4680      	mov	r8, r0
  40c3f6:	f001 feb1 	bl	40e15c <__aeabi_i2d>
  40c3fa:	4602      	mov	r2, r0
  40c3fc:	460b      	mov	r3, r1
  40c3fe:	4630      	mov	r0, r6
  40c400:	4639      	mov	r1, r7
  40c402:	f001 fd5d 	bl	40dec0 <__aeabi_dsub>
  40c406:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40c40a:	fa5f f888 	uxtb.w	r8, r8
  40c40e:	4652      	mov	r2, sl
  40c410:	465b      	mov	r3, fp
  40c412:	f805 8b01 	strb.w	r8, [r5], #1
  40c416:	4606      	mov	r6, r0
  40c418:	460f      	mov	r7, r1
  40c41a:	f002 f977 	bl	40e70c <__aeabi_dcmplt>
  40c41e:	4632      	mov	r2, r6
  40c420:	463b      	mov	r3, r7
  40c422:	2800      	cmp	r0, #0
  40c424:	d0c6      	beq.n	40c3b4 <_dtoa_r+0x8c4>
  40c426:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40c42a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c42c:	9302      	str	r3, [sp, #8]
  40c42e:	e523      	b.n	40be78 <_dtoa_r+0x388>
  40c430:	2300      	movs	r3, #0
  40c432:	930b      	str	r3, [sp, #44]	; 0x2c
  40c434:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40c436:	2b00      	cmp	r3, #0
  40c438:	f340 80dc 	ble.w	40c5f4 <_dtoa_r+0xb04>
  40c43c:	461f      	mov	r7, r3
  40c43e:	461e      	mov	r6, r3
  40c440:	930f      	str	r3, [sp, #60]	; 0x3c
  40c442:	930a      	str	r3, [sp, #40]	; 0x28
  40c444:	e6f6      	b.n	40c234 <_dtoa_r+0x744>
  40c446:	2301      	movs	r3, #1
  40c448:	930b      	str	r3, [sp, #44]	; 0x2c
  40c44a:	e7f3      	b.n	40c434 <_dtoa_r+0x944>
  40c44c:	f1ba 0f00 	cmp.w	sl, #0
  40c450:	f47f ada8 	bne.w	40bfa4 <_dtoa_r+0x4b4>
  40c454:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40c458:	2b00      	cmp	r3, #0
  40c45a:	f47f adba 	bne.w	40bfd2 <_dtoa_r+0x4e2>
  40c45e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40c462:	0d3f      	lsrs	r7, r7, #20
  40c464:	053f      	lsls	r7, r7, #20
  40c466:	2f00      	cmp	r7, #0
  40c468:	f000 820d 	beq.w	40c886 <_dtoa_r+0xd96>
  40c46c:	9b08      	ldr	r3, [sp, #32]
  40c46e:	3301      	adds	r3, #1
  40c470:	9308      	str	r3, [sp, #32]
  40c472:	9b06      	ldr	r3, [sp, #24]
  40c474:	3301      	adds	r3, #1
  40c476:	9306      	str	r3, [sp, #24]
  40c478:	2301      	movs	r3, #1
  40c47a:	930c      	str	r3, [sp, #48]	; 0x30
  40c47c:	e5ab      	b.n	40bfd6 <_dtoa_r+0x4e6>
  40c47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c480:	2b00      	cmp	r3, #0
  40c482:	f73f ac42 	bgt.w	40bd0a <_dtoa_r+0x21a>
  40c486:	f040 8221 	bne.w	40c8cc <_dtoa_r+0xddc>
  40c48a:	2200      	movs	r2, #0
  40c48c:	4b38      	ldr	r3, [pc, #224]	; (40c570 <_dtoa_r+0xa80>)
  40c48e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40c492:	f001 fec9 	bl	40e228 <__aeabi_dmul>
  40c496:	4652      	mov	r2, sl
  40c498:	465b      	mov	r3, fp
  40c49a:	f002 f94b 	bl	40e734 <__aeabi_dcmpge>
  40c49e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40c4a2:	4646      	mov	r6, r8
  40c4a4:	2800      	cmp	r0, #0
  40c4a6:	d041      	beq.n	40c52c <_dtoa_r+0xa3c>
  40c4a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40c4aa:	9d04      	ldr	r5, [sp, #16]
  40c4ac:	43db      	mvns	r3, r3
  40c4ae:	9302      	str	r3, [sp, #8]
  40c4b0:	4641      	mov	r1, r8
  40c4b2:	4620      	mov	r0, r4
  40c4b4:	f000 fda6 	bl	40d004 <_Bfree>
  40c4b8:	2e00      	cmp	r6, #0
  40c4ba:	f43f acdd 	beq.w	40be78 <_dtoa_r+0x388>
  40c4be:	e6a7      	b.n	40c210 <_dtoa_r+0x720>
  40c4c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40c4c2:	4649      	mov	r1, r9
  40c4c4:	4620      	mov	r0, r4
  40c4c6:	f000 fed3 	bl	40d270 <__pow5mult>
  40c4ca:	4681      	mov	r9, r0
  40c4cc:	e558      	b.n	40bf80 <_dtoa_r+0x490>
  40c4ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40c4d0:	2a00      	cmp	r2, #0
  40c4d2:	f000 8187 	beq.w	40c7e4 <_dtoa_r+0xcf4>
  40c4d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40c4da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40c4dc:	9d08      	ldr	r5, [sp, #32]
  40c4de:	e4f2      	b.n	40bec6 <_dtoa_r+0x3d6>
  40c4e0:	f1ba 0f00 	cmp.w	sl, #0
  40c4e4:	f47f ad75 	bne.w	40bfd2 <_dtoa_r+0x4e2>
  40c4e8:	e7b4      	b.n	40c454 <_dtoa_r+0x964>
  40c4ea:	f000 fd95 	bl	40d018 <__multadd>
  40c4ee:	4647      	mov	r7, r8
  40c4f0:	4606      	mov	r6, r0
  40c4f2:	4683      	mov	fp, r0
  40c4f4:	e5be      	b.n	40c074 <_dtoa_r+0x584>
  40c4f6:	4601      	mov	r1, r0
  40c4f8:	4620      	mov	r0, r4
  40c4fa:	9306      	str	r3, [sp, #24]
  40c4fc:	f000 fd82 	bl	40d004 <_Bfree>
  40c500:	2201      	movs	r2, #1
  40c502:	9b06      	ldr	r3, [sp, #24]
  40c504:	e5e0      	b.n	40c0c8 <_dtoa_r+0x5d8>
  40c506:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c508:	2b02      	cmp	r3, #2
  40c50a:	f77f ad96 	ble.w	40c03a <_dtoa_r+0x54a>
  40c50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c510:	2b00      	cmp	r3, #0
  40c512:	d1c9      	bne.n	40c4a8 <_dtoa_r+0x9b8>
  40c514:	4641      	mov	r1, r8
  40c516:	2205      	movs	r2, #5
  40c518:	4620      	mov	r0, r4
  40c51a:	f000 fd7d 	bl	40d018 <__multadd>
  40c51e:	4601      	mov	r1, r0
  40c520:	4680      	mov	r8, r0
  40c522:	4648      	mov	r0, r9
  40c524:	f000 ff46 	bl	40d3b4 <__mcmp>
  40c528:	2800      	cmp	r0, #0
  40c52a:	ddbd      	ble.n	40c4a8 <_dtoa_r+0x9b8>
  40c52c:	9a02      	ldr	r2, [sp, #8]
  40c52e:	9904      	ldr	r1, [sp, #16]
  40c530:	2331      	movs	r3, #49	; 0x31
  40c532:	3201      	adds	r2, #1
  40c534:	9202      	str	r2, [sp, #8]
  40c536:	700b      	strb	r3, [r1, #0]
  40c538:	1c4d      	adds	r5, r1, #1
  40c53a:	e7b9      	b.n	40c4b0 <_dtoa_r+0x9c0>
  40c53c:	9a02      	ldr	r2, [sp, #8]
  40c53e:	3201      	adds	r2, #1
  40c540:	9202      	str	r2, [sp, #8]
  40c542:	9a04      	ldr	r2, [sp, #16]
  40c544:	2331      	movs	r3, #49	; 0x31
  40c546:	7013      	strb	r3, [r2, #0]
  40c548:	e652      	b.n	40c1f0 <_dtoa_r+0x700>
  40c54a:	2301      	movs	r3, #1
  40c54c:	930b      	str	r3, [sp, #44]	; 0x2c
  40c54e:	e666      	b.n	40c21e <_dtoa_r+0x72e>
  40c550:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40c554:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40c556:	e48f      	b.n	40be78 <_dtoa_r+0x388>
  40c558:	0040f658 	.word	0x0040f658
  40c55c:	0040f630 	.word	0x0040f630
  40c560:	3ff00000 	.word	0x3ff00000
  40c564:	401c0000 	.word	0x401c0000
  40c568:	3fe00000 	.word	0x3fe00000
  40c56c:	40240000 	.word	0x40240000
  40c570:	40140000 	.word	0x40140000
  40c574:	4650      	mov	r0, sl
  40c576:	f001 fdf1 	bl	40e15c <__aeabi_i2d>
  40c57a:	463a      	mov	r2, r7
  40c57c:	4643      	mov	r3, r8
  40c57e:	f001 fe53 	bl	40e228 <__aeabi_dmul>
  40c582:	2200      	movs	r2, #0
  40c584:	4bc1      	ldr	r3, [pc, #772]	; (40c88c <_dtoa_r+0xd9c>)
  40c586:	f001 fc9d 	bl	40dec4 <__adddf3>
  40c58a:	4605      	mov	r5, r0
  40c58c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40c590:	4641      	mov	r1, r8
  40c592:	2200      	movs	r2, #0
  40c594:	4bbe      	ldr	r3, [pc, #760]	; (40c890 <_dtoa_r+0xda0>)
  40c596:	4638      	mov	r0, r7
  40c598:	f001 fc92 	bl	40dec0 <__aeabi_dsub>
  40c59c:	462a      	mov	r2, r5
  40c59e:	4633      	mov	r3, r6
  40c5a0:	4682      	mov	sl, r0
  40c5a2:	468b      	mov	fp, r1
  40c5a4:	f002 f8d0 	bl	40e748 <__aeabi_dcmpgt>
  40c5a8:	4680      	mov	r8, r0
  40c5aa:	2800      	cmp	r0, #0
  40c5ac:	f040 8110 	bne.w	40c7d0 <_dtoa_r+0xce0>
  40c5b0:	462a      	mov	r2, r5
  40c5b2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40c5b6:	4650      	mov	r0, sl
  40c5b8:	4659      	mov	r1, fp
  40c5ba:	f002 f8a7 	bl	40e70c <__aeabi_dcmplt>
  40c5be:	b118      	cbz	r0, 40c5c8 <_dtoa_r+0xad8>
  40c5c0:	4646      	mov	r6, r8
  40c5c2:	e771      	b.n	40c4a8 <_dtoa_r+0x9b8>
  40c5c4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40c5c8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40c5cc:	f7ff bb8a 	b.w	40bce4 <_dtoa_r+0x1f4>
  40c5d0:	9804      	ldr	r0, [sp, #16]
  40c5d2:	f7ff babb 	b.w	40bb4c <_dtoa_r+0x5c>
  40c5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40c5d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40c5da:	970c      	str	r7, [sp, #48]	; 0x30
  40c5dc:	1afb      	subs	r3, r7, r3
  40c5de:	441a      	add	r2, r3
  40c5e0:	920d      	str	r2, [sp, #52]	; 0x34
  40c5e2:	2700      	movs	r7, #0
  40c5e4:	e469      	b.n	40beba <_dtoa_r+0x3ca>
  40c5e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40c5ea:	f04f 0a02 	mov.w	sl, #2
  40c5ee:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40c5f2:	e657      	b.n	40c2a4 <_dtoa_r+0x7b4>
  40c5f4:	2100      	movs	r1, #0
  40c5f6:	2301      	movs	r3, #1
  40c5f8:	6461      	str	r1, [r4, #68]	; 0x44
  40c5fa:	4620      	mov	r0, r4
  40c5fc:	9325      	str	r3, [sp, #148]	; 0x94
  40c5fe:	f000 fcdb 	bl	40cfb8 <_Balloc>
  40c602:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40c604:	9004      	str	r0, [sp, #16]
  40c606:	6420      	str	r0, [r4, #64]	; 0x40
  40c608:	930a      	str	r3, [sp, #40]	; 0x28
  40c60a:	930f      	str	r3, [sp, #60]	; 0x3c
  40c60c:	e629      	b.n	40c262 <_dtoa_r+0x772>
  40c60e:	2a00      	cmp	r2, #0
  40c610:	46d0      	mov	r8, sl
  40c612:	f8cd b018 	str.w	fp, [sp, #24]
  40c616:	469a      	mov	sl, r3
  40c618:	dd11      	ble.n	40c63e <_dtoa_r+0xb4e>
  40c61a:	4649      	mov	r1, r9
  40c61c:	2201      	movs	r2, #1
  40c61e:	4620      	mov	r0, r4
  40c620:	f000 fe76 	bl	40d310 <__lshift>
  40c624:	4641      	mov	r1, r8
  40c626:	4681      	mov	r9, r0
  40c628:	f000 fec4 	bl	40d3b4 <__mcmp>
  40c62c:	2800      	cmp	r0, #0
  40c62e:	f340 8146 	ble.w	40c8be <_dtoa_r+0xdce>
  40c632:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40c636:	f000 8106 	beq.w	40c846 <_dtoa_r+0xd56>
  40c63a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40c63e:	46b3      	mov	fp, r6
  40c640:	f887 a000 	strb.w	sl, [r7]
  40c644:	1c7d      	adds	r5, r7, #1
  40c646:	9e06      	ldr	r6, [sp, #24]
  40c648:	e5d2      	b.n	40c1f0 <_dtoa_r+0x700>
  40c64a:	d104      	bne.n	40c656 <_dtoa_r+0xb66>
  40c64c:	f01a 0f01 	tst.w	sl, #1
  40c650:	d001      	beq.n	40c656 <_dtoa_r+0xb66>
  40c652:	e5bd      	b.n	40c1d0 <_dtoa_r+0x6e0>
  40c654:	4615      	mov	r5, r2
  40c656:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40c65a:	2b30      	cmp	r3, #48	; 0x30
  40c65c:	f105 32ff 	add.w	r2, r5, #4294967295
  40c660:	d0f8      	beq.n	40c654 <_dtoa_r+0xb64>
  40c662:	e5c5      	b.n	40c1f0 <_dtoa_r+0x700>
  40c664:	9904      	ldr	r1, [sp, #16]
  40c666:	2230      	movs	r2, #48	; 0x30
  40c668:	700a      	strb	r2, [r1, #0]
  40c66a:	9a02      	ldr	r2, [sp, #8]
  40c66c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40c670:	3201      	adds	r2, #1
  40c672:	9202      	str	r2, [sp, #8]
  40c674:	f7ff bbfc 	b.w	40be70 <_dtoa_r+0x380>
  40c678:	f000 80bb 	beq.w	40c7f2 <_dtoa_r+0xd02>
  40c67c:	9b02      	ldr	r3, [sp, #8]
  40c67e:	425d      	negs	r5, r3
  40c680:	4b84      	ldr	r3, [pc, #528]	; (40c894 <_dtoa_r+0xda4>)
  40c682:	f005 020f 	and.w	r2, r5, #15
  40c686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40c68e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40c692:	f001 fdc9 	bl	40e228 <__aeabi_dmul>
  40c696:	112d      	asrs	r5, r5, #4
  40c698:	4607      	mov	r7, r0
  40c69a:	4688      	mov	r8, r1
  40c69c:	f000 812c 	beq.w	40c8f8 <_dtoa_r+0xe08>
  40c6a0:	4e7d      	ldr	r6, [pc, #500]	; (40c898 <_dtoa_r+0xda8>)
  40c6a2:	f04f 0a02 	mov.w	sl, #2
  40c6a6:	07eb      	lsls	r3, r5, #31
  40c6a8:	d509      	bpl.n	40c6be <_dtoa_r+0xbce>
  40c6aa:	4638      	mov	r0, r7
  40c6ac:	4641      	mov	r1, r8
  40c6ae:	e9d6 2300 	ldrd	r2, r3, [r6]
  40c6b2:	f001 fdb9 	bl	40e228 <__aeabi_dmul>
  40c6b6:	f10a 0a01 	add.w	sl, sl, #1
  40c6ba:	4607      	mov	r7, r0
  40c6bc:	4688      	mov	r8, r1
  40c6be:	106d      	asrs	r5, r5, #1
  40c6c0:	f106 0608 	add.w	r6, r6, #8
  40c6c4:	d1ef      	bne.n	40c6a6 <_dtoa_r+0xbb6>
  40c6c6:	e608      	b.n	40c2da <_dtoa_r+0x7ea>
  40c6c8:	6871      	ldr	r1, [r6, #4]
  40c6ca:	4620      	mov	r0, r4
  40c6cc:	f000 fc74 	bl	40cfb8 <_Balloc>
  40c6d0:	6933      	ldr	r3, [r6, #16]
  40c6d2:	3302      	adds	r3, #2
  40c6d4:	009a      	lsls	r2, r3, #2
  40c6d6:	4605      	mov	r5, r0
  40c6d8:	f106 010c 	add.w	r1, r6, #12
  40c6dc:	300c      	adds	r0, #12
  40c6de:	f7fd fd57 	bl	40a190 <memcpy>
  40c6e2:	4629      	mov	r1, r5
  40c6e4:	2201      	movs	r2, #1
  40c6e6:	4620      	mov	r0, r4
  40c6e8:	f000 fe12 	bl	40d310 <__lshift>
  40c6ec:	9006      	str	r0, [sp, #24]
  40c6ee:	e4b5      	b.n	40c05c <_dtoa_r+0x56c>
  40c6f0:	2b39      	cmp	r3, #57	; 0x39
  40c6f2:	f8cd b018 	str.w	fp, [sp, #24]
  40c6f6:	46d0      	mov	r8, sl
  40c6f8:	f000 80a5 	beq.w	40c846 <_dtoa_r+0xd56>
  40c6fc:	f103 0a01 	add.w	sl, r3, #1
  40c700:	46b3      	mov	fp, r6
  40c702:	f887 a000 	strb.w	sl, [r7]
  40c706:	1c7d      	adds	r5, r7, #1
  40c708:	9e06      	ldr	r6, [sp, #24]
  40c70a:	e571      	b.n	40c1f0 <_dtoa_r+0x700>
  40c70c:	465a      	mov	r2, fp
  40c70e:	46d0      	mov	r8, sl
  40c710:	46b3      	mov	fp, r6
  40c712:	469a      	mov	sl, r3
  40c714:	4616      	mov	r6, r2
  40c716:	e54f      	b.n	40c1b8 <_dtoa_r+0x6c8>
  40c718:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c71a:	495e      	ldr	r1, [pc, #376]	; (40c894 <_dtoa_r+0xda4>)
  40c71c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40c720:	462a      	mov	r2, r5
  40c722:	4633      	mov	r3, r6
  40c724:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40c728:	f001 fd7e 	bl	40e228 <__aeabi_dmul>
  40c72c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40c730:	4638      	mov	r0, r7
  40c732:	4641      	mov	r1, r8
  40c734:	f002 f828 	bl	40e788 <__aeabi_d2iz>
  40c738:	4605      	mov	r5, r0
  40c73a:	f001 fd0f 	bl	40e15c <__aeabi_i2d>
  40c73e:	460b      	mov	r3, r1
  40c740:	4602      	mov	r2, r0
  40c742:	4641      	mov	r1, r8
  40c744:	4638      	mov	r0, r7
  40c746:	f001 fbbb 	bl	40dec0 <__aeabi_dsub>
  40c74a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c74c:	460f      	mov	r7, r1
  40c74e:	9904      	ldr	r1, [sp, #16]
  40c750:	3530      	adds	r5, #48	; 0x30
  40c752:	2b01      	cmp	r3, #1
  40c754:	700d      	strb	r5, [r1, #0]
  40c756:	4606      	mov	r6, r0
  40c758:	f101 0501 	add.w	r5, r1, #1
  40c75c:	d026      	beq.n	40c7ac <_dtoa_r+0xcbc>
  40c75e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c760:	9a04      	ldr	r2, [sp, #16]
  40c762:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40c8a0 <_dtoa_r+0xdb0>
  40c766:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40c76a:	4413      	add	r3, r2
  40c76c:	f04f 0a00 	mov.w	sl, #0
  40c770:	4699      	mov	r9, r3
  40c772:	4652      	mov	r2, sl
  40c774:	465b      	mov	r3, fp
  40c776:	4630      	mov	r0, r6
  40c778:	4639      	mov	r1, r7
  40c77a:	f001 fd55 	bl	40e228 <__aeabi_dmul>
  40c77e:	460f      	mov	r7, r1
  40c780:	4606      	mov	r6, r0
  40c782:	f002 f801 	bl	40e788 <__aeabi_d2iz>
  40c786:	4680      	mov	r8, r0
  40c788:	f001 fce8 	bl	40e15c <__aeabi_i2d>
  40c78c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40c790:	4602      	mov	r2, r0
  40c792:	460b      	mov	r3, r1
  40c794:	4630      	mov	r0, r6
  40c796:	4639      	mov	r1, r7
  40c798:	f001 fb92 	bl	40dec0 <__aeabi_dsub>
  40c79c:	f805 8b01 	strb.w	r8, [r5], #1
  40c7a0:	454d      	cmp	r5, r9
  40c7a2:	4606      	mov	r6, r0
  40c7a4:	460f      	mov	r7, r1
  40c7a6:	d1e4      	bne.n	40c772 <_dtoa_r+0xc82>
  40c7a8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40c7ac:	4b3b      	ldr	r3, [pc, #236]	; (40c89c <_dtoa_r+0xdac>)
  40c7ae:	2200      	movs	r2, #0
  40c7b0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40c7b4:	f001 fb86 	bl	40dec4 <__adddf3>
  40c7b8:	4632      	mov	r2, r6
  40c7ba:	463b      	mov	r3, r7
  40c7bc:	f001 ffa6 	bl	40e70c <__aeabi_dcmplt>
  40c7c0:	2800      	cmp	r0, #0
  40c7c2:	d046      	beq.n	40c852 <_dtoa_r+0xd62>
  40c7c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c7c6:	9302      	str	r3, [sp, #8]
  40c7c8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40c7cc:	f7ff bb43 	b.w	40be56 <_dtoa_r+0x366>
  40c7d0:	f04f 0800 	mov.w	r8, #0
  40c7d4:	4646      	mov	r6, r8
  40c7d6:	e6a9      	b.n	40c52c <_dtoa_r+0xa3c>
  40c7d8:	9b08      	ldr	r3, [sp, #32]
  40c7da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c7dc:	1a9d      	subs	r5, r3, r2
  40c7de:	2300      	movs	r3, #0
  40c7e0:	f7ff bb71 	b.w	40bec6 <_dtoa_r+0x3d6>
  40c7e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40c7e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40c7e8:	9d08      	ldr	r5, [sp, #32]
  40c7ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40c7ee:	f7ff bb6a 	b.w	40bec6 <_dtoa_r+0x3d6>
  40c7f2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40c7f6:	f04f 0a02 	mov.w	sl, #2
  40c7fa:	e56e      	b.n	40c2da <_dtoa_r+0x7ea>
  40c7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c7fe:	2b00      	cmp	r3, #0
  40c800:	f43f aeb8 	beq.w	40c574 <_dtoa_r+0xa84>
  40c804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c806:	2b00      	cmp	r3, #0
  40c808:	f77f aede 	ble.w	40c5c8 <_dtoa_r+0xad8>
  40c80c:	2200      	movs	r2, #0
  40c80e:	4b24      	ldr	r3, [pc, #144]	; (40c8a0 <_dtoa_r+0xdb0>)
  40c810:	4638      	mov	r0, r7
  40c812:	4641      	mov	r1, r8
  40c814:	f001 fd08 	bl	40e228 <__aeabi_dmul>
  40c818:	4607      	mov	r7, r0
  40c81a:	4688      	mov	r8, r1
  40c81c:	f10a 0001 	add.w	r0, sl, #1
  40c820:	f001 fc9c 	bl	40e15c <__aeabi_i2d>
  40c824:	463a      	mov	r2, r7
  40c826:	4643      	mov	r3, r8
  40c828:	f001 fcfe 	bl	40e228 <__aeabi_dmul>
  40c82c:	2200      	movs	r2, #0
  40c82e:	4b17      	ldr	r3, [pc, #92]	; (40c88c <_dtoa_r+0xd9c>)
  40c830:	f001 fb48 	bl	40dec4 <__adddf3>
  40c834:	9a02      	ldr	r2, [sp, #8]
  40c836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c838:	9312      	str	r3, [sp, #72]	; 0x48
  40c83a:	3a01      	subs	r2, #1
  40c83c:	4605      	mov	r5, r0
  40c83e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40c842:	9215      	str	r2, [sp, #84]	; 0x54
  40c844:	e56a      	b.n	40c31c <_dtoa_r+0x82c>
  40c846:	2239      	movs	r2, #57	; 0x39
  40c848:	46b3      	mov	fp, r6
  40c84a:	703a      	strb	r2, [r7, #0]
  40c84c:	9e06      	ldr	r6, [sp, #24]
  40c84e:	1c7d      	adds	r5, r7, #1
  40c850:	e4c0      	b.n	40c1d4 <_dtoa_r+0x6e4>
  40c852:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40c856:	2000      	movs	r0, #0
  40c858:	4910      	ldr	r1, [pc, #64]	; (40c89c <_dtoa_r+0xdac>)
  40c85a:	f001 fb31 	bl	40dec0 <__aeabi_dsub>
  40c85e:	4632      	mov	r2, r6
  40c860:	463b      	mov	r3, r7
  40c862:	f001 ff71 	bl	40e748 <__aeabi_dcmpgt>
  40c866:	b908      	cbnz	r0, 40c86c <_dtoa_r+0xd7c>
  40c868:	e6ae      	b.n	40c5c8 <_dtoa_r+0xad8>
  40c86a:	4615      	mov	r5, r2
  40c86c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40c870:	2b30      	cmp	r3, #48	; 0x30
  40c872:	f105 32ff 	add.w	r2, r5, #4294967295
  40c876:	d0f8      	beq.n	40c86a <_dtoa_r+0xd7a>
  40c878:	e5d7      	b.n	40c42a <_dtoa_r+0x93a>
  40c87a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40c87e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c880:	9302      	str	r3, [sp, #8]
  40c882:	f7ff bae8 	b.w	40be56 <_dtoa_r+0x366>
  40c886:	970c      	str	r7, [sp, #48]	; 0x30
  40c888:	f7ff bba5 	b.w	40bfd6 <_dtoa_r+0x4e6>
  40c88c:	401c0000 	.word	0x401c0000
  40c890:	40140000 	.word	0x40140000
  40c894:	0040f658 	.word	0x0040f658
  40c898:	0040f630 	.word	0x0040f630
  40c89c:	3fe00000 	.word	0x3fe00000
  40c8a0:	40240000 	.word	0x40240000
  40c8a4:	2b39      	cmp	r3, #57	; 0x39
  40c8a6:	f8cd b018 	str.w	fp, [sp, #24]
  40c8aa:	46d0      	mov	r8, sl
  40c8ac:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40c8b0:	469a      	mov	sl, r3
  40c8b2:	d0c8      	beq.n	40c846 <_dtoa_r+0xd56>
  40c8b4:	f1bb 0f00 	cmp.w	fp, #0
  40c8b8:	f73f aebf 	bgt.w	40c63a <_dtoa_r+0xb4a>
  40c8bc:	e6bf      	b.n	40c63e <_dtoa_r+0xb4e>
  40c8be:	f47f aebe 	bne.w	40c63e <_dtoa_r+0xb4e>
  40c8c2:	f01a 0f01 	tst.w	sl, #1
  40c8c6:	f43f aeba 	beq.w	40c63e <_dtoa_r+0xb4e>
  40c8ca:	e6b2      	b.n	40c632 <_dtoa_r+0xb42>
  40c8cc:	f04f 0800 	mov.w	r8, #0
  40c8d0:	4646      	mov	r6, r8
  40c8d2:	e5e9      	b.n	40c4a8 <_dtoa_r+0x9b8>
  40c8d4:	4631      	mov	r1, r6
  40c8d6:	2300      	movs	r3, #0
  40c8d8:	220a      	movs	r2, #10
  40c8da:	4620      	mov	r0, r4
  40c8dc:	f000 fb9c 	bl	40d018 <__multadd>
  40c8e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c8e2:	2b00      	cmp	r3, #0
  40c8e4:	4606      	mov	r6, r0
  40c8e6:	dd0a      	ble.n	40c8fe <_dtoa_r+0xe0e>
  40c8e8:	930a      	str	r3, [sp, #40]	; 0x28
  40c8ea:	f7ff bbaa 	b.w	40c042 <_dtoa_r+0x552>
  40c8ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c8f0:	2b02      	cmp	r3, #2
  40c8f2:	dc23      	bgt.n	40c93c <_dtoa_r+0xe4c>
  40c8f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c8f6:	e43b      	b.n	40c170 <_dtoa_r+0x680>
  40c8f8:	f04f 0a02 	mov.w	sl, #2
  40c8fc:	e4ed      	b.n	40c2da <_dtoa_r+0x7ea>
  40c8fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40c900:	2b02      	cmp	r3, #2
  40c902:	dc1b      	bgt.n	40c93c <_dtoa_r+0xe4c>
  40c904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c906:	e7ef      	b.n	40c8e8 <_dtoa_r+0xdf8>
  40c908:	2500      	movs	r5, #0
  40c90a:	6465      	str	r5, [r4, #68]	; 0x44
  40c90c:	4629      	mov	r1, r5
  40c90e:	4620      	mov	r0, r4
  40c910:	f000 fb52 	bl	40cfb8 <_Balloc>
  40c914:	f04f 33ff 	mov.w	r3, #4294967295
  40c918:	930a      	str	r3, [sp, #40]	; 0x28
  40c91a:	930f      	str	r3, [sp, #60]	; 0x3c
  40c91c:	2301      	movs	r3, #1
  40c91e:	9004      	str	r0, [sp, #16]
  40c920:	9525      	str	r5, [sp, #148]	; 0x94
  40c922:	6420      	str	r0, [r4, #64]	; 0x40
  40c924:	930b      	str	r3, [sp, #44]	; 0x2c
  40c926:	f7ff b9dd 	b.w	40bce4 <_dtoa_r+0x1f4>
  40c92a:	2501      	movs	r5, #1
  40c92c:	f7ff b9a5 	b.w	40bc7a <_dtoa_r+0x18a>
  40c930:	f43f ab69 	beq.w	40c006 <_dtoa_r+0x516>
  40c934:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40c938:	f7ff bbf9 	b.w	40c12e <_dtoa_r+0x63e>
  40c93c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40c93e:	930a      	str	r3, [sp, #40]	; 0x28
  40c940:	e5e5      	b.n	40c50e <_dtoa_r+0xa1e>
  40c942:	bf00      	nop

0040c944 <__libc_fini_array>:
  40c944:	b538      	push	{r3, r4, r5, lr}
  40c946:	4c0a      	ldr	r4, [pc, #40]	; (40c970 <__libc_fini_array+0x2c>)
  40c948:	4d0a      	ldr	r5, [pc, #40]	; (40c974 <__libc_fini_array+0x30>)
  40c94a:	1b64      	subs	r4, r4, r5
  40c94c:	10a4      	asrs	r4, r4, #2
  40c94e:	d00a      	beq.n	40c966 <__libc_fini_array+0x22>
  40c950:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40c954:	3b01      	subs	r3, #1
  40c956:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40c95a:	3c01      	subs	r4, #1
  40c95c:	f855 3904 	ldr.w	r3, [r5], #-4
  40c960:	4798      	blx	r3
  40c962:	2c00      	cmp	r4, #0
  40c964:	d1f9      	bne.n	40c95a <__libc_fini_array+0x16>
  40c966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40c96a:	f002 bf73 	b.w	40f854 <_fini>
  40c96e:	bf00      	nop
  40c970:	0040f864 	.word	0x0040f864
  40c974:	0040f860 	.word	0x0040f860

0040c978 <_localeconv_r>:
  40c978:	4a04      	ldr	r2, [pc, #16]	; (40c98c <_localeconv_r+0x14>)
  40c97a:	4b05      	ldr	r3, [pc, #20]	; (40c990 <_localeconv_r+0x18>)
  40c97c:	6812      	ldr	r2, [r2, #0]
  40c97e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40c980:	2800      	cmp	r0, #0
  40c982:	bf08      	it	eq
  40c984:	4618      	moveq	r0, r3
  40c986:	30f0      	adds	r0, #240	; 0xf0
  40c988:	4770      	bx	lr
  40c98a:	bf00      	nop
  40c98c:	20000020 	.word	0x20000020
  40c990:	20000864 	.word	0x20000864

0040c994 <__retarget_lock_acquire_recursive>:
  40c994:	4770      	bx	lr
  40c996:	bf00      	nop

0040c998 <__retarget_lock_release_recursive>:
  40c998:	4770      	bx	lr
  40c99a:	bf00      	nop

0040c99c <_malloc_r>:
  40c99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c9a0:	f101 060b 	add.w	r6, r1, #11
  40c9a4:	2e16      	cmp	r6, #22
  40c9a6:	b083      	sub	sp, #12
  40c9a8:	4605      	mov	r5, r0
  40c9aa:	f240 809e 	bls.w	40caea <_malloc_r+0x14e>
  40c9ae:	f036 0607 	bics.w	r6, r6, #7
  40c9b2:	f100 80bd 	bmi.w	40cb30 <_malloc_r+0x194>
  40c9b6:	42b1      	cmp	r1, r6
  40c9b8:	f200 80ba 	bhi.w	40cb30 <_malloc_r+0x194>
  40c9bc:	f000 faf0 	bl	40cfa0 <__malloc_lock>
  40c9c0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40c9c4:	f0c0 8293 	bcc.w	40ceee <_malloc_r+0x552>
  40c9c8:	0a73      	lsrs	r3, r6, #9
  40c9ca:	f000 80b8 	beq.w	40cb3e <_malloc_r+0x1a2>
  40c9ce:	2b04      	cmp	r3, #4
  40c9d0:	f200 8179 	bhi.w	40ccc6 <_malloc_r+0x32a>
  40c9d4:	09b3      	lsrs	r3, r6, #6
  40c9d6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40c9da:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40c9de:	00c3      	lsls	r3, r0, #3
  40c9e0:	4fbf      	ldr	r7, [pc, #764]	; (40cce0 <_malloc_r+0x344>)
  40c9e2:	443b      	add	r3, r7
  40c9e4:	f1a3 0108 	sub.w	r1, r3, #8
  40c9e8:	685c      	ldr	r4, [r3, #4]
  40c9ea:	42a1      	cmp	r1, r4
  40c9ec:	d106      	bne.n	40c9fc <_malloc_r+0x60>
  40c9ee:	e00c      	b.n	40ca0a <_malloc_r+0x6e>
  40c9f0:	2a00      	cmp	r2, #0
  40c9f2:	f280 80aa 	bge.w	40cb4a <_malloc_r+0x1ae>
  40c9f6:	68e4      	ldr	r4, [r4, #12]
  40c9f8:	42a1      	cmp	r1, r4
  40c9fa:	d006      	beq.n	40ca0a <_malloc_r+0x6e>
  40c9fc:	6863      	ldr	r3, [r4, #4]
  40c9fe:	f023 0303 	bic.w	r3, r3, #3
  40ca02:	1b9a      	subs	r2, r3, r6
  40ca04:	2a0f      	cmp	r2, #15
  40ca06:	ddf3      	ble.n	40c9f0 <_malloc_r+0x54>
  40ca08:	4670      	mov	r0, lr
  40ca0a:	693c      	ldr	r4, [r7, #16]
  40ca0c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40ccf4 <_malloc_r+0x358>
  40ca10:	4574      	cmp	r4, lr
  40ca12:	f000 81ab 	beq.w	40cd6c <_malloc_r+0x3d0>
  40ca16:	6863      	ldr	r3, [r4, #4]
  40ca18:	f023 0303 	bic.w	r3, r3, #3
  40ca1c:	1b9a      	subs	r2, r3, r6
  40ca1e:	2a0f      	cmp	r2, #15
  40ca20:	f300 8190 	bgt.w	40cd44 <_malloc_r+0x3a8>
  40ca24:	2a00      	cmp	r2, #0
  40ca26:	f8c7 e014 	str.w	lr, [r7, #20]
  40ca2a:	f8c7 e010 	str.w	lr, [r7, #16]
  40ca2e:	f280 809d 	bge.w	40cb6c <_malloc_r+0x1d0>
  40ca32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40ca36:	f080 8161 	bcs.w	40ccfc <_malloc_r+0x360>
  40ca3a:	08db      	lsrs	r3, r3, #3
  40ca3c:	f103 0c01 	add.w	ip, r3, #1
  40ca40:	1099      	asrs	r1, r3, #2
  40ca42:	687a      	ldr	r2, [r7, #4]
  40ca44:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40ca48:	f8c4 8008 	str.w	r8, [r4, #8]
  40ca4c:	2301      	movs	r3, #1
  40ca4e:	408b      	lsls	r3, r1
  40ca50:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40ca54:	4313      	orrs	r3, r2
  40ca56:	3908      	subs	r1, #8
  40ca58:	60e1      	str	r1, [r4, #12]
  40ca5a:	607b      	str	r3, [r7, #4]
  40ca5c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40ca60:	f8c8 400c 	str.w	r4, [r8, #12]
  40ca64:	1082      	asrs	r2, r0, #2
  40ca66:	2401      	movs	r4, #1
  40ca68:	4094      	lsls	r4, r2
  40ca6a:	429c      	cmp	r4, r3
  40ca6c:	f200 808b 	bhi.w	40cb86 <_malloc_r+0x1ea>
  40ca70:	421c      	tst	r4, r3
  40ca72:	d106      	bne.n	40ca82 <_malloc_r+0xe6>
  40ca74:	f020 0003 	bic.w	r0, r0, #3
  40ca78:	0064      	lsls	r4, r4, #1
  40ca7a:	421c      	tst	r4, r3
  40ca7c:	f100 0004 	add.w	r0, r0, #4
  40ca80:	d0fa      	beq.n	40ca78 <_malloc_r+0xdc>
  40ca82:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40ca86:	46cc      	mov	ip, r9
  40ca88:	4680      	mov	r8, r0
  40ca8a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40ca8e:	459c      	cmp	ip, r3
  40ca90:	d107      	bne.n	40caa2 <_malloc_r+0x106>
  40ca92:	e16d      	b.n	40cd70 <_malloc_r+0x3d4>
  40ca94:	2a00      	cmp	r2, #0
  40ca96:	f280 817b 	bge.w	40cd90 <_malloc_r+0x3f4>
  40ca9a:	68db      	ldr	r3, [r3, #12]
  40ca9c:	459c      	cmp	ip, r3
  40ca9e:	f000 8167 	beq.w	40cd70 <_malloc_r+0x3d4>
  40caa2:	6859      	ldr	r1, [r3, #4]
  40caa4:	f021 0103 	bic.w	r1, r1, #3
  40caa8:	1b8a      	subs	r2, r1, r6
  40caaa:	2a0f      	cmp	r2, #15
  40caac:	ddf2      	ble.n	40ca94 <_malloc_r+0xf8>
  40caae:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40cab2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40cab6:	9300      	str	r3, [sp, #0]
  40cab8:	199c      	adds	r4, r3, r6
  40caba:	4628      	mov	r0, r5
  40cabc:	f046 0601 	orr.w	r6, r6, #1
  40cac0:	f042 0501 	orr.w	r5, r2, #1
  40cac4:	605e      	str	r6, [r3, #4]
  40cac6:	f8c8 c00c 	str.w	ip, [r8, #12]
  40caca:	f8cc 8008 	str.w	r8, [ip, #8]
  40cace:	617c      	str	r4, [r7, #20]
  40cad0:	613c      	str	r4, [r7, #16]
  40cad2:	f8c4 e00c 	str.w	lr, [r4, #12]
  40cad6:	f8c4 e008 	str.w	lr, [r4, #8]
  40cada:	6065      	str	r5, [r4, #4]
  40cadc:	505a      	str	r2, [r3, r1]
  40cade:	f000 fa65 	bl	40cfac <__malloc_unlock>
  40cae2:	9b00      	ldr	r3, [sp, #0]
  40cae4:	f103 0408 	add.w	r4, r3, #8
  40cae8:	e01e      	b.n	40cb28 <_malloc_r+0x18c>
  40caea:	2910      	cmp	r1, #16
  40caec:	d820      	bhi.n	40cb30 <_malloc_r+0x194>
  40caee:	f000 fa57 	bl	40cfa0 <__malloc_lock>
  40caf2:	2610      	movs	r6, #16
  40caf4:	2318      	movs	r3, #24
  40caf6:	2002      	movs	r0, #2
  40caf8:	4f79      	ldr	r7, [pc, #484]	; (40cce0 <_malloc_r+0x344>)
  40cafa:	443b      	add	r3, r7
  40cafc:	f1a3 0208 	sub.w	r2, r3, #8
  40cb00:	685c      	ldr	r4, [r3, #4]
  40cb02:	4294      	cmp	r4, r2
  40cb04:	f000 813d 	beq.w	40cd82 <_malloc_r+0x3e6>
  40cb08:	6863      	ldr	r3, [r4, #4]
  40cb0a:	68e1      	ldr	r1, [r4, #12]
  40cb0c:	68a6      	ldr	r6, [r4, #8]
  40cb0e:	f023 0303 	bic.w	r3, r3, #3
  40cb12:	4423      	add	r3, r4
  40cb14:	4628      	mov	r0, r5
  40cb16:	685a      	ldr	r2, [r3, #4]
  40cb18:	60f1      	str	r1, [r6, #12]
  40cb1a:	f042 0201 	orr.w	r2, r2, #1
  40cb1e:	608e      	str	r6, [r1, #8]
  40cb20:	605a      	str	r2, [r3, #4]
  40cb22:	f000 fa43 	bl	40cfac <__malloc_unlock>
  40cb26:	3408      	adds	r4, #8
  40cb28:	4620      	mov	r0, r4
  40cb2a:	b003      	add	sp, #12
  40cb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cb30:	2400      	movs	r4, #0
  40cb32:	230c      	movs	r3, #12
  40cb34:	4620      	mov	r0, r4
  40cb36:	602b      	str	r3, [r5, #0]
  40cb38:	b003      	add	sp, #12
  40cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cb3e:	2040      	movs	r0, #64	; 0x40
  40cb40:	f44f 7300 	mov.w	r3, #512	; 0x200
  40cb44:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40cb48:	e74a      	b.n	40c9e0 <_malloc_r+0x44>
  40cb4a:	4423      	add	r3, r4
  40cb4c:	68e1      	ldr	r1, [r4, #12]
  40cb4e:	685a      	ldr	r2, [r3, #4]
  40cb50:	68a6      	ldr	r6, [r4, #8]
  40cb52:	f042 0201 	orr.w	r2, r2, #1
  40cb56:	60f1      	str	r1, [r6, #12]
  40cb58:	4628      	mov	r0, r5
  40cb5a:	608e      	str	r6, [r1, #8]
  40cb5c:	605a      	str	r2, [r3, #4]
  40cb5e:	f000 fa25 	bl	40cfac <__malloc_unlock>
  40cb62:	3408      	adds	r4, #8
  40cb64:	4620      	mov	r0, r4
  40cb66:	b003      	add	sp, #12
  40cb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cb6c:	4423      	add	r3, r4
  40cb6e:	4628      	mov	r0, r5
  40cb70:	685a      	ldr	r2, [r3, #4]
  40cb72:	f042 0201 	orr.w	r2, r2, #1
  40cb76:	605a      	str	r2, [r3, #4]
  40cb78:	f000 fa18 	bl	40cfac <__malloc_unlock>
  40cb7c:	3408      	adds	r4, #8
  40cb7e:	4620      	mov	r0, r4
  40cb80:	b003      	add	sp, #12
  40cb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cb86:	68bc      	ldr	r4, [r7, #8]
  40cb88:	6863      	ldr	r3, [r4, #4]
  40cb8a:	f023 0803 	bic.w	r8, r3, #3
  40cb8e:	45b0      	cmp	r8, r6
  40cb90:	d304      	bcc.n	40cb9c <_malloc_r+0x200>
  40cb92:	eba8 0306 	sub.w	r3, r8, r6
  40cb96:	2b0f      	cmp	r3, #15
  40cb98:	f300 8085 	bgt.w	40cca6 <_malloc_r+0x30a>
  40cb9c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40ccf8 <_malloc_r+0x35c>
  40cba0:	4b50      	ldr	r3, [pc, #320]	; (40cce4 <_malloc_r+0x348>)
  40cba2:	f8d9 2000 	ldr.w	r2, [r9]
  40cba6:	681b      	ldr	r3, [r3, #0]
  40cba8:	3201      	adds	r2, #1
  40cbaa:	4433      	add	r3, r6
  40cbac:	eb04 0a08 	add.w	sl, r4, r8
  40cbb0:	f000 8155 	beq.w	40ce5e <_malloc_r+0x4c2>
  40cbb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40cbb8:	330f      	adds	r3, #15
  40cbba:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40cbbe:	f02b 0b0f 	bic.w	fp, fp, #15
  40cbc2:	4659      	mov	r1, fp
  40cbc4:	4628      	mov	r0, r5
  40cbc6:	f000 fcf1 	bl	40d5ac <_sbrk_r>
  40cbca:	1c41      	adds	r1, r0, #1
  40cbcc:	4602      	mov	r2, r0
  40cbce:	f000 80fc 	beq.w	40cdca <_malloc_r+0x42e>
  40cbd2:	4582      	cmp	sl, r0
  40cbd4:	f200 80f7 	bhi.w	40cdc6 <_malloc_r+0x42a>
  40cbd8:	4b43      	ldr	r3, [pc, #268]	; (40cce8 <_malloc_r+0x34c>)
  40cbda:	6819      	ldr	r1, [r3, #0]
  40cbdc:	4459      	add	r1, fp
  40cbde:	6019      	str	r1, [r3, #0]
  40cbe0:	f000 814d 	beq.w	40ce7e <_malloc_r+0x4e2>
  40cbe4:	f8d9 0000 	ldr.w	r0, [r9]
  40cbe8:	3001      	adds	r0, #1
  40cbea:	bf1b      	ittet	ne
  40cbec:	eba2 0a0a 	subne.w	sl, r2, sl
  40cbf0:	4451      	addne	r1, sl
  40cbf2:	f8c9 2000 	streq.w	r2, [r9]
  40cbf6:	6019      	strne	r1, [r3, #0]
  40cbf8:	f012 0107 	ands.w	r1, r2, #7
  40cbfc:	f000 8115 	beq.w	40ce2a <_malloc_r+0x48e>
  40cc00:	f1c1 0008 	rsb	r0, r1, #8
  40cc04:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40cc08:	4402      	add	r2, r0
  40cc0a:	3108      	adds	r1, #8
  40cc0c:	eb02 090b 	add.w	r9, r2, fp
  40cc10:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40cc14:	eba1 0909 	sub.w	r9, r1, r9
  40cc18:	4649      	mov	r1, r9
  40cc1a:	4628      	mov	r0, r5
  40cc1c:	9301      	str	r3, [sp, #4]
  40cc1e:	9200      	str	r2, [sp, #0]
  40cc20:	f000 fcc4 	bl	40d5ac <_sbrk_r>
  40cc24:	1c43      	adds	r3, r0, #1
  40cc26:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40cc2a:	f000 8143 	beq.w	40ceb4 <_malloc_r+0x518>
  40cc2e:	1a80      	subs	r0, r0, r2
  40cc30:	4448      	add	r0, r9
  40cc32:	f040 0001 	orr.w	r0, r0, #1
  40cc36:	6819      	ldr	r1, [r3, #0]
  40cc38:	60ba      	str	r2, [r7, #8]
  40cc3a:	4449      	add	r1, r9
  40cc3c:	42bc      	cmp	r4, r7
  40cc3e:	6050      	str	r0, [r2, #4]
  40cc40:	6019      	str	r1, [r3, #0]
  40cc42:	d017      	beq.n	40cc74 <_malloc_r+0x2d8>
  40cc44:	f1b8 0f0f 	cmp.w	r8, #15
  40cc48:	f240 80fb 	bls.w	40ce42 <_malloc_r+0x4a6>
  40cc4c:	6860      	ldr	r0, [r4, #4]
  40cc4e:	f1a8 020c 	sub.w	r2, r8, #12
  40cc52:	f022 0207 	bic.w	r2, r2, #7
  40cc56:	eb04 0e02 	add.w	lr, r4, r2
  40cc5a:	f000 0001 	and.w	r0, r0, #1
  40cc5e:	f04f 0c05 	mov.w	ip, #5
  40cc62:	4310      	orrs	r0, r2
  40cc64:	2a0f      	cmp	r2, #15
  40cc66:	6060      	str	r0, [r4, #4]
  40cc68:	f8ce c004 	str.w	ip, [lr, #4]
  40cc6c:	f8ce c008 	str.w	ip, [lr, #8]
  40cc70:	f200 8117 	bhi.w	40cea2 <_malloc_r+0x506>
  40cc74:	4b1d      	ldr	r3, [pc, #116]	; (40ccec <_malloc_r+0x350>)
  40cc76:	68bc      	ldr	r4, [r7, #8]
  40cc78:	681a      	ldr	r2, [r3, #0]
  40cc7a:	4291      	cmp	r1, r2
  40cc7c:	bf88      	it	hi
  40cc7e:	6019      	strhi	r1, [r3, #0]
  40cc80:	4b1b      	ldr	r3, [pc, #108]	; (40ccf0 <_malloc_r+0x354>)
  40cc82:	681a      	ldr	r2, [r3, #0]
  40cc84:	4291      	cmp	r1, r2
  40cc86:	6862      	ldr	r2, [r4, #4]
  40cc88:	bf88      	it	hi
  40cc8a:	6019      	strhi	r1, [r3, #0]
  40cc8c:	f022 0203 	bic.w	r2, r2, #3
  40cc90:	4296      	cmp	r6, r2
  40cc92:	eba2 0306 	sub.w	r3, r2, r6
  40cc96:	d801      	bhi.n	40cc9c <_malloc_r+0x300>
  40cc98:	2b0f      	cmp	r3, #15
  40cc9a:	dc04      	bgt.n	40cca6 <_malloc_r+0x30a>
  40cc9c:	4628      	mov	r0, r5
  40cc9e:	f000 f985 	bl	40cfac <__malloc_unlock>
  40cca2:	2400      	movs	r4, #0
  40cca4:	e740      	b.n	40cb28 <_malloc_r+0x18c>
  40cca6:	19a2      	adds	r2, r4, r6
  40cca8:	f043 0301 	orr.w	r3, r3, #1
  40ccac:	f046 0601 	orr.w	r6, r6, #1
  40ccb0:	6066      	str	r6, [r4, #4]
  40ccb2:	4628      	mov	r0, r5
  40ccb4:	60ba      	str	r2, [r7, #8]
  40ccb6:	6053      	str	r3, [r2, #4]
  40ccb8:	f000 f978 	bl	40cfac <__malloc_unlock>
  40ccbc:	3408      	adds	r4, #8
  40ccbe:	4620      	mov	r0, r4
  40ccc0:	b003      	add	sp, #12
  40ccc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ccc6:	2b14      	cmp	r3, #20
  40ccc8:	d971      	bls.n	40cdae <_malloc_r+0x412>
  40ccca:	2b54      	cmp	r3, #84	; 0x54
  40cccc:	f200 80a3 	bhi.w	40ce16 <_malloc_r+0x47a>
  40ccd0:	0b33      	lsrs	r3, r6, #12
  40ccd2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40ccd6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40ccda:	00c3      	lsls	r3, r0, #3
  40ccdc:	e680      	b.n	40c9e0 <_malloc_r+0x44>
  40ccde:	bf00      	nop
  40cce0:	20000454 	.word	0x20000454
  40cce4:	2000acb8 	.word	0x2000acb8
  40cce8:	2000ac88 	.word	0x2000ac88
  40ccec:	2000acb0 	.word	0x2000acb0
  40ccf0:	2000acb4 	.word	0x2000acb4
  40ccf4:	2000045c 	.word	0x2000045c
  40ccf8:	2000085c 	.word	0x2000085c
  40ccfc:	0a5a      	lsrs	r2, r3, #9
  40ccfe:	2a04      	cmp	r2, #4
  40cd00:	d95b      	bls.n	40cdba <_malloc_r+0x41e>
  40cd02:	2a14      	cmp	r2, #20
  40cd04:	f200 80ae 	bhi.w	40ce64 <_malloc_r+0x4c8>
  40cd08:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40cd0c:	00c9      	lsls	r1, r1, #3
  40cd0e:	325b      	adds	r2, #91	; 0x5b
  40cd10:	eb07 0c01 	add.w	ip, r7, r1
  40cd14:	5879      	ldr	r1, [r7, r1]
  40cd16:	f1ac 0c08 	sub.w	ip, ip, #8
  40cd1a:	458c      	cmp	ip, r1
  40cd1c:	f000 8088 	beq.w	40ce30 <_malloc_r+0x494>
  40cd20:	684a      	ldr	r2, [r1, #4]
  40cd22:	f022 0203 	bic.w	r2, r2, #3
  40cd26:	4293      	cmp	r3, r2
  40cd28:	d273      	bcs.n	40ce12 <_malloc_r+0x476>
  40cd2a:	6889      	ldr	r1, [r1, #8]
  40cd2c:	458c      	cmp	ip, r1
  40cd2e:	d1f7      	bne.n	40cd20 <_malloc_r+0x384>
  40cd30:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40cd34:	687b      	ldr	r3, [r7, #4]
  40cd36:	60e2      	str	r2, [r4, #12]
  40cd38:	f8c4 c008 	str.w	ip, [r4, #8]
  40cd3c:	6094      	str	r4, [r2, #8]
  40cd3e:	f8cc 400c 	str.w	r4, [ip, #12]
  40cd42:	e68f      	b.n	40ca64 <_malloc_r+0xc8>
  40cd44:	19a1      	adds	r1, r4, r6
  40cd46:	f046 0c01 	orr.w	ip, r6, #1
  40cd4a:	f042 0601 	orr.w	r6, r2, #1
  40cd4e:	f8c4 c004 	str.w	ip, [r4, #4]
  40cd52:	4628      	mov	r0, r5
  40cd54:	6179      	str	r1, [r7, #20]
  40cd56:	6139      	str	r1, [r7, #16]
  40cd58:	f8c1 e00c 	str.w	lr, [r1, #12]
  40cd5c:	f8c1 e008 	str.w	lr, [r1, #8]
  40cd60:	604e      	str	r6, [r1, #4]
  40cd62:	50e2      	str	r2, [r4, r3]
  40cd64:	f000 f922 	bl	40cfac <__malloc_unlock>
  40cd68:	3408      	adds	r4, #8
  40cd6a:	e6dd      	b.n	40cb28 <_malloc_r+0x18c>
  40cd6c:	687b      	ldr	r3, [r7, #4]
  40cd6e:	e679      	b.n	40ca64 <_malloc_r+0xc8>
  40cd70:	f108 0801 	add.w	r8, r8, #1
  40cd74:	f018 0f03 	tst.w	r8, #3
  40cd78:	f10c 0c08 	add.w	ip, ip, #8
  40cd7c:	f47f ae85 	bne.w	40ca8a <_malloc_r+0xee>
  40cd80:	e02d      	b.n	40cdde <_malloc_r+0x442>
  40cd82:	68dc      	ldr	r4, [r3, #12]
  40cd84:	42a3      	cmp	r3, r4
  40cd86:	bf08      	it	eq
  40cd88:	3002      	addeq	r0, #2
  40cd8a:	f43f ae3e 	beq.w	40ca0a <_malloc_r+0x6e>
  40cd8e:	e6bb      	b.n	40cb08 <_malloc_r+0x16c>
  40cd90:	4419      	add	r1, r3
  40cd92:	461c      	mov	r4, r3
  40cd94:	684a      	ldr	r2, [r1, #4]
  40cd96:	68db      	ldr	r3, [r3, #12]
  40cd98:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40cd9c:	f042 0201 	orr.w	r2, r2, #1
  40cda0:	604a      	str	r2, [r1, #4]
  40cda2:	4628      	mov	r0, r5
  40cda4:	60f3      	str	r3, [r6, #12]
  40cda6:	609e      	str	r6, [r3, #8]
  40cda8:	f000 f900 	bl	40cfac <__malloc_unlock>
  40cdac:	e6bc      	b.n	40cb28 <_malloc_r+0x18c>
  40cdae:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40cdb2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40cdb6:	00c3      	lsls	r3, r0, #3
  40cdb8:	e612      	b.n	40c9e0 <_malloc_r+0x44>
  40cdba:	099a      	lsrs	r2, r3, #6
  40cdbc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40cdc0:	00c9      	lsls	r1, r1, #3
  40cdc2:	3238      	adds	r2, #56	; 0x38
  40cdc4:	e7a4      	b.n	40cd10 <_malloc_r+0x374>
  40cdc6:	42bc      	cmp	r4, r7
  40cdc8:	d054      	beq.n	40ce74 <_malloc_r+0x4d8>
  40cdca:	68bc      	ldr	r4, [r7, #8]
  40cdcc:	6862      	ldr	r2, [r4, #4]
  40cdce:	f022 0203 	bic.w	r2, r2, #3
  40cdd2:	e75d      	b.n	40cc90 <_malloc_r+0x2f4>
  40cdd4:	f859 3908 	ldr.w	r3, [r9], #-8
  40cdd8:	4599      	cmp	r9, r3
  40cdda:	f040 8086 	bne.w	40ceea <_malloc_r+0x54e>
  40cdde:	f010 0f03 	tst.w	r0, #3
  40cde2:	f100 30ff 	add.w	r0, r0, #4294967295
  40cde6:	d1f5      	bne.n	40cdd4 <_malloc_r+0x438>
  40cde8:	687b      	ldr	r3, [r7, #4]
  40cdea:	ea23 0304 	bic.w	r3, r3, r4
  40cdee:	607b      	str	r3, [r7, #4]
  40cdf0:	0064      	lsls	r4, r4, #1
  40cdf2:	429c      	cmp	r4, r3
  40cdf4:	f63f aec7 	bhi.w	40cb86 <_malloc_r+0x1ea>
  40cdf8:	2c00      	cmp	r4, #0
  40cdfa:	f43f aec4 	beq.w	40cb86 <_malloc_r+0x1ea>
  40cdfe:	421c      	tst	r4, r3
  40ce00:	4640      	mov	r0, r8
  40ce02:	f47f ae3e 	bne.w	40ca82 <_malloc_r+0xe6>
  40ce06:	0064      	lsls	r4, r4, #1
  40ce08:	421c      	tst	r4, r3
  40ce0a:	f100 0004 	add.w	r0, r0, #4
  40ce0e:	d0fa      	beq.n	40ce06 <_malloc_r+0x46a>
  40ce10:	e637      	b.n	40ca82 <_malloc_r+0xe6>
  40ce12:	468c      	mov	ip, r1
  40ce14:	e78c      	b.n	40cd30 <_malloc_r+0x394>
  40ce16:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40ce1a:	d815      	bhi.n	40ce48 <_malloc_r+0x4ac>
  40ce1c:	0bf3      	lsrs	r3, r6, #15
  40ce1e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40ce22:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40ce26:	00c3      	lsls	r3, r0, #3
  40ce28:	e5da      	b.n	40c9e0 <_malloc_r+0x44>
  40ce2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40ce2e:	e6ed      	b.n	40cc0c <_malloc_r+0x270>
  40ce30:	687b      	ldr	r3, [r7, #4]
  40ce32:	1092      	asrs	r2, r2, #2
  40ce34:	2101      	movs	r1, #1
  40ce36:	fa01 f202 	lsl.w	r2, r1, r2
  40ce3a:	4313      	orrs	r3, r2
  40ce3c:	607b      	str	r3, [r7, #4]
  40ce3e:	4662      	mov	r2, ip
  40ce40:	e779      	b.n	40cd36 <_malloc_r+0x39a>
  40ce42:	2301      	movs	r3, #1
  40ce44:	6053      	str	r3, [r2, #4]
  40ce46:	e729      	b.n	40cc9c <_malloc_r+0x300>
  40ce48:	f240 5254 	movw	r2, #1364	; 0x554
  40ce4c:	4293      	cmp	r3, r2
  40ce4e:	d822      	bhi.n	40ce96 <_malloc_r+0x4fa>
  40ce50:	0cb3      	lsrs	r3, r6, #18
  40ce52:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40ce56:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40ce5a:	00c3      	lsls	r3, r0, #3
  40ce5c:	e5c0      	b.n	40c9e0 <_malloc_r+0x44>
  40ce5e:	f103 0b10 	add.w	fp, r3, #16
  40ce62:	e6ae      	b.n	40cbc2 <_malloc_r+0x226>
  40ce64:	2a54      	cmp	r2, #84	; 0x54
  40ce66:	d829      	bhi.n	40cebc <_malloc_r+0x520>
  40ce68:	0b1a      	lsrs	r2, r3, #12
  40ce6a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40ce6e:	00c9      	lsls	r1, r1, #3
  40ce70:	326e      	adds	r2, #110	; 0x6e
  40ce72:	e74d      	b.n	40cd10 <_malloc_r+0x374>
  40ce74:	4b20      	ldr	r3, [pc, #128]	; (40cef8 <_malloc_r+0x55c>)
  40ce76:	6819      	ldr	r1, [r3, #0]
  40ce78:	4459      	add	r1, fp
  40ce7a:	6019      	str	r1, [r3, #0]
  40ce7c:	e6b2      	b.n	40cbe4 <_malloc_r+0x248>
  40ce7e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40ce82:	2800      	cmp	r0, #0
  40ce84:	f47f aeae 	bne.w	40cbe4 <_malloc_r+0x248>
  40ce88:	eb08 030b 	add.w	r3, r8, fp
  40ce8c:	68ba      	ldr	r2, [r7, #8]
  40ce8e:	f043 0301 	orr.w	r3, r3, #1
  40ce92:	6053      	str	r3, [r2, #4]
  40ce94:	e6ee      	b.n	40cc74 <_malloc_r+0x2d8>
  40ce96:	207f      	movs	r0, #127	; 0x7f
  40ce98:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40ce9c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40cea0:	e59e      	b.n	40c9e0 <_malloc_r+0x44>
  40cea2:	f104 0108 	add.w	r1, r4, #8
  40cea6:	4628      	mov	r0, r5
  40cea8:	9300      	str	r3, [sp, #0]
  40ceaa:	f000 fcf1 	bl	40d890 <_free_r>
  40ceae:	9b00      	ldr	r3, [sp, #0]
  40ceb0:	6819      	ldr	r1, [r3, #0]
  40ceb2:	e6df      	b.n	40cc74 <_malloc_r+0x2d8>
  40ceb4:	2001      	movs	r0, #1
  40ceb6:	f04f 0900 	mov.w	r9, #0
  40ceba:	e6bc      	b.n	40cc36 <_malloc_r+0x29a>
  40cebc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40cec0:	d805      	bhi.n	40cece <_malloc_r+0x532>
  40cec2:	0bda      	lsrs	r2, r3, #15
  40cec4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40cec8:	00c9      	lsls	r1, r1, #3
  40ceca:	3277      	adds	r2, #119	; 0x77
  40cecc:	e720      	b.n	40cd10 <_malloc_r+0x374>
  40cece:	f240 5154 	movw	r1, #1364	; 0x554
  40ced2:	428a      	cmp	r2, r1
  40ced4:	d805      	bhi.n	40cee2 <_malloc_r+0x546>
  40ced6:	0c9a      	lsrs	r2, r3, #18
  40ced8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40cedc:	00c9      	lsls	r1, r1, #3
  40cede:	327c      	adds	r2, #124	; 0x7c
  40cee0:	e716      	b.n	40cd10 <_malloc_r+0x374>
  40cee2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40cee6:	227e      	movs	r2, #126	; 0x7e
  40cee8:	e712      	b.n	40cd10 <_malloc_r+0x374>
  40ceea:	687b      	ldr	r3, [r7, #4]
  40ceec:	e780      	b.n	40cdf0 <_malloc_r+0x454>
  40ceee:	08f0      	lsrs	r0, r6, #3
  40cef0:	f106 0308 	add.w	r3, r6, #8
  40cef4:	e600      	b.n	40caf8 <_malloc_r+0x15c>
  40cef6:	bf00      	nop
  40cef8:	2000ac88 	.word	0x2000ac88
  40cefc:	00000000 	.word	0x00000000

0040cf00 <memchr>:
  40cf00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40cf04:	2a10      	cmp	r2, #16
  40cf06:	db2b      	blt.n	40cf60 <memchr+0x60>
  40cf08:	f010 0f07 	tst.w	r0, #7
  40cf0c:	d008      	beq.n	40cf20 <memchr+0x20>
  40cf0e:	f810 3b01 	ldrb.w	r3, [r0], #1
  40cf12:	3a01      	subs	r2, #1
  40cf14:	428b      	cmp	r3, r1
  40cf16:	d02d      	beq.n	40cf74 <memchr+0x74>
  40cf18:	f010 0f07 	tst.w	r0, #7
  40cf1c:	b342      	cbz	r2, 40cf70 <memchr+0x70>
  40cf1e:	d1f6      	bne.n	40cf0e <memchr+0xe>
  40cf20:	b4f0      	push	{r4, r5, r6, r7}
  40cf22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40cf26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40cf2a:	f022 0407 	bic.w	r4, r2, #7
  40cf2e:	f07f 0700 	mvns.w	r7, #0
  40cf32:	2300      	movs	r3, #0
  40cf34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40cf38:	3c08      	subs	r4, #8
  40cf3a:	ea85 0501 	eor.w	r5, r5, r1
  40cf3e:	ea86 0601 	eor.w	r6, r6, r1
  40cf42:	fa85 f547 	uadd8	r5, r5, r7
  40cf46:	faa3 f587 	sel	r5, r3, r7
  40cf4a:	fa86 f647 	uadd8	r6, r6, r7
  40cf4e:	faa5 f687 	sel	r6, r5, r7
  40cf52:	b98e      	cbnz	r6, 40cf78 <memchr+0x78>
  40cf54:	d1ee      	bne.n	40cf34 <memchr+0x34>
  40cf56:	bcf0      	pop	{r4, r5, r6, r7}
  40cf58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40cf5c:	f002 0207 	and.w	r2, r2, #7
  40cf60:	b132      	cbz	r2, 40cf70 <memchr+0x70>
  40cf62:	f810 3b01 	ldrb.w	r3, [r0], #1
  40cf66:	3a01      	subs	r2, #1
  40cf68:	ea83 0301 	eor.w	r3, r3, r1
  40cf6c:	b113      	cbz	r3, 40cf74 <memchr+0x74>
  40cf6e:	d1f8      	bne.n	40cf62 <memchr+0x62>
  40cf70:	2000      	movs	r0, #0
  40cf72:	4770      	bx	lr
  40cf74:	3801      	subs	r0, #1
  40cf76:	4770      	bx	lr
  40cf78:	2d00      	cmp	r5, #0
  40cf7a:	bf06      	itte	eq
  40cf7c:	4635      	moveq	r5, r6
  40cf7e:	3803      	subeq	r0, #3
  40cf80:	3807      	subne	r0, #7
  40cf82:	f015 0f01 	tst.w	r5, #1
  40cf86:	d107      	bne.n	40cf98 <memchr+0x98>
  40cf88:	3001      	adds	r0, #1
  40cf8a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40cf8e:	bf02      	ittt	eq
  40cf90:	3001      	addeq	r0, #1
  40cf92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40cf96:	3001      	addeq	r0, #1
  40cf98:	bcf0      	pop	{r4, r5, r6, r7}
  40cf9a:	3801      	subs	r0, #1
  40cf9c:	4770      	bx	lr
  40cf9e:	bf00      	nop

0040cfa0 <__malloc_lock>:
  40cfa0:	4801      	ldr	r0, [pc, #4]	; (40cfa8 <__malloc_lock+0x8>)
  40cfa2:	f7ff bcf7 	b.w	40c994 <__retarget_lock_acquire_recursive>
  40cfa6:	bf00      	nop
  40cfa8:	2000ace0 	.word	0x2000ace0

0040cfac <__malloc_unlock>:
  40cfac:	4801      	ldr	r0, [pc, #4]	; (40cfb4 <__malloc_unlock+0x8>)
  40cfae:	f7ff bcf3 	b.w	40c998 <__retarget_lock_release_recursive>
  40cfb2:	bf00      	nop
  40cfb4:	2000ace0 	.word	0x2000ace0

0040cfb8 <_Balloc>:
  40cfb8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40cfba:	b570      	push	{r4, r5, r6, lr}
  40cfbc:	4605      	mov	r5, r0
  40cfbe:	460c      	mov	r4, r1
  40cfc0:	b14b      	cbz	r3, 40cfd6 <_Balloc+0x1e>
  40cfc2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40cfc6:	b180      	cbz	r0, 40cfea <_Balloc+0x32>
  40cfc8:	6802      	ldr	r2, [r0, #0]
  40cfca:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40cfce:	2300      	movs	r3, #0
  40cfd0:	6103      	str	r3, [r0, #16]
  40cfd2:	60c3      	str	r3, [r0, #12]
  40cfd4:	bd70      	pop	{r4, r5, r6, pc}
  40cfd6:	2221      	movs	r2, #33	; 0x21
  40cfd8:	2104      	movs	r1, #4
  40cfda:	f000 fbd9 	bl	40d790 <_calloc_r>
  40cfde:	64e8      	str	r0, [r5, #76]	; 0x4c
  40cfe0:	4603      	mov	r3, r0
  40cfe2:	2800      	cmp	r0, #0
  40cfe4:	d1ed      	bne.n	40cfc2 <_Balloc+0xa>
  40cfe6:	2000      	movs	r0, #0
  40cfe8:	bd70      	pop	{r4, r5, r6, pc}
  40cfea:	2101      	movs	r1, #1
  40cfec:	fa01 f604 	lsl.w	r6, r1, r4
  40cff0:	1d72      	adds	r2, r6, #5
  40cff2:	4628      	mov	r0, r5
  40cff4:	0092      	lsls	r2, r2, #2
  40cff6:	f000 fbcb 	bl	40d790 <_calloc_r>
  40cffa:	2800      	cmp	r0, #0
  40cffc:	d0f3      	beq.n	40cfe6 <_Balloc+0x2e>
  40cffe:	6044      	str	r4, [r0, #4]
  40d000:	6086      	str	r6, [r0, #8]
  40d002:	e7e4      	b.n	40cfce <_Balloc+0x16>

0040d004 <_Bfree>:
  40d004:	b131      	cbz	r1, 40d014 <_Bfree+0x10>
  40d006:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40d008:	684a      	ldr	r2, [r1, #4]
  40d00a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40d00e:	6008      	str	r0, [r1, #0]
  40d010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40d014:	4770      	bx	lr
  40d016:	bf00      	nop

0040d018 <__multadd>:
  40d018:	b5f0      	push	{r4, r5, r6, r7, lr}
  40d01a:	690c      	ldr	r4, [r1, #16]
  40d01c:	b083      	sub	sp, #12
  40d01e:	460d      	mov	r5, r1
  40d020:	4606      	mov	r6, r0
  40d022:	f101 0e14 	add.w	lr, r1, #20
  40d026:	2700      	movs	r7, #0
  40d028:	f8de 0000 	ldr.w	r0, [lr]
  40d02c:	b281      	uxth	r1, r0
  40d02e:	fb02 3301 	mla	r3, r2, r1, r3
  40d032:	0c01      	lsrs	r1, r0, #16
  40d034:	0c18      	lsrs	r0, r3, #16
  40d036:	fb02 0101 	mla	r1, r2, r1, r0
  40d03a:	b29b      	uxth	r3, r3
  40d03c:	3701      	adds	r7, #1
  40d03e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40d042:	42bc      	cmp	r4, r7
  40d044:	f84e 3b04 	str.w	r3, [lr], #4
  40d048:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40d04c:	dcec      	bgt.n	40d028 <__multadd+0x10>
  40d04e:	b13b      	cbz	r3, 40d060 <__multadd+0x48>
  40d050:	68aa      	ldr	r2, [r5, #8]
  40d052:	4294      	cmp	r4, r2
  40d054:	da07      	bge.n	40d066 <__multadd+0x4e>
  40d056:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40d05a:	3401      	adds	r4, #1
  40d05c:	6153      	str	r3, [r2, #20]
  40d05e:	612c      	str	r4, [r5, #16]
  40d060:	4628      	mov	r0, r5
  40d062:	b003      	add	sp, #12
  40d064:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40d066:	6869      	ldr	r1, [r5, #4]
  40d068:	9301      	str	r3, [sp, #4]
  40d06a:	3101      	adds	r1, #1
  40d06c:	4630      	mov	r0, r6
  40d06e:	f7ff ffa3 	bl	40cfb8 <_Balloc>
  40d072:	692a      	ldr	r2, [r5, #16]
  40d074:	3202      	adds	r2, #2
  40d076:	f105 010c 	add.w	r1, r5, #12
  40d07a:	4607      	mov	r7, r0
  40d07c:	0092      	lsls	r2, r2, #2
  40d07e:	300c      	adds	r0, #12
  40d080:	f7fd f886 	bl	40a190 <memcpy>
  40d084:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40d086:	6869      	ldr	r1, [r5, #4]
  40d088:	9b01      	ldr	r3, [sp, #4]
  40d08a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40d08e:	6028      	str	r0, [r5, #0]
  40d090:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40d094:	463d      	mov	r5, r7
  40d096:	e7de      	b.n	40d056 <__multadd+0x3e>

0040d098 <__hi0bits>:
  40d098:	0c02      	lsrs	r2, r0, #16
  40d09a:	0412      	lsls	r2, r2, #16
  40d09c:	4603      	mov	r3, r0
  40d09e:	b9b2      	cbnz	r2, 40d0ce <__hi0bits+0x36>
  40d0a0:	0403      	lsls	r3, r0, #16
  40d0a2:	2010      	movs	r0, #16
  40d0a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40d0a8:	bf04      	itt	eq
  40d0aa:	021b      	lsleq	r3, r3, #8
  40d0ac:	3008      	addeq	r0, #8
  40d0ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40d0b2:	bf04      	itt	eq
  40d0b4:	011b      	lsleq	r3, r3, #4
  40d0b6:	3004      	addeq	r0, #4
  40d0b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40d0bc:	bf04      	itt	eq
  40d0be:	009b      	lsleq	r3, r3, #2
  40d0c0:	3002      	addeq	r0, #2
  40d0c2:	2b00      	cmp	r3, #0
  40d0c4:	db02      	blt.n	40d0cc <__hi0bits+0x34>
  40d0c6:	005b      	lsls	r3, r3, #1
  40d0c8:	d403      	bmi.n	40d0d2 <__hi0bits+0x3a>
  40d0ca:	2020      	movs	r0, #32
  40d0cc:	4770      	bx	lr
  40d0ce:	2000      	movs	r0, #0
  40d0d0:	e7e8      	b.n	40d0a4 <__hi0bits+0xc>
  40d0d2:	3001      	adds	r0, #1
  40d0d4:	4770      	bx	lr
  40d0d6:	bf00      	nop

0040d0d8 <__lo0bits>:
  40d0d8:	6803      	ldr	r3, [r0, #0]
  40d0da:	f013 0207 	ands.w	r2, r3, #7
  40d0de:	4601      	mov	r1, r0
  40d0e0:	d007      	beq.n	40d0f2 <__lo0bits+0x1a>
  40d0e2:	07da      	lsls	r2, r3, #31
  40d0e4:	d421      	bmi.n	40d12a <__lo0bits+0x52>
  40d0e6:	0798      	lsls	r0, r3, #30
  40d0e8:	d421      	bmi.n	40d12e <__lo0bits+0x56>
  40d0ea:	089b      	lsrs	r3, r3, #2
  40d0ec:	600b      	str	r3, [r1, #0]
  40d0ee:	2002      	movs	r0, #2
  40d0f0:	4770      	bx	lr
  40d0f2:	b298      	uxth	r0, r3
  40d0f4:	b198      	cbz	r0, 40d11e <__lo0bits+0x46>
  40d0f6:	4610      	mov	r0, r2
  40d0f8:	f013 0fff 	tst.w	r3, #255	; 0xff
  40d0fc:	bf04      	itt	eq
  40d0fe:	0a1b      	lsreq	r3, r3, #8
  40d100:	3008      	addeq	r0, #8
  40d102:	071a      	lsls	r2, r3, #28
  40d104:	bf04      	itt	eq
  40d106:	091b      	lsreq	r3, r3, #4
  40d108:	3004      	addeq	r0, #4
  40d10a:	079a      	lsls	r2, r3, #30
  40d10c:	bf04      	itt	eq
  40d10e:	089b      	lsreq	r3, r3, #2
  40d110:	3002      	addeq	r0, #2
  40d112:	07da      	lsls	r2, r3, #31
  40d114:	d407      	bmi.n	40d126 <__lo0bits+0x4e>
  40d116:	085b      	lsrs	r3, r3, #1
  40d118:	d104      	bne.n	40d124 <__lo0bits+0x4c>
  40d11a:	2020      	movs	r0, #32
  40d11c:	4770      	bx	lr
  40d11e:	0c1b      	lsrs	r3, r3, #16
  40d120:	2010      	movs	r0, #16
  40d122:	e7e9      	b.n	40d0f8 <__lo0bits+0x20>
  40d124:	3001      	adds	r0, #1
  40d126:	600b      	str	r3, [r1, #0]
  40d128:	4770      	bx	lr
  40d12a:	2000      	movs	r0, #0
  40d12c:	4770      	bx	lr
  40d12e:	085b      	lsrs	r3, r3, #1
  40d130:	600b      	str	r3, [r1, #0]
  40d132:	2001      	movs	r0, #1
  40d134:	4770      	bx	lr
  40d136:	bf00      	nop

0040d138 <__i2b>:
  40d138:	b510      	push	{r4, lr}
  40d13a:	460c      	mov	r4, r1
  40d13c:	2101      	movs	r1, #1
  40d13e:	f7ff ff3b 	bl	40cfb8 <_Balloc>
  40d142:	2201      	movs	r2, #1
  40d144:	6144      	str	r4, [r0, #20]
  40d146:	6102      	str	r2, [r0, #16]
  40d148:	bd10      	pop	{r4, pc}
  40d14a:	bf00      	nop

0040d14c <__multiply>:
  40d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d150:	690c      	ldr	r4, [r1, #16]
  40d152:	6915      	ldr	r5, [r2, #16]
  40d154:	42ac      	cmp	r4, r5
  40d156:	b083      	sub	sp, #12
  40d158:	468b      	mov	fp, r1
  40d15a:	4616      	mov	r6, r2
  40d15c:	da04      	bge.n	40d168 <__multiply+0x1c>
  40d15e:	4622      	mov	r2, r4
  40d160:	46b3      	mov	fp, r6
  40d162:	462c      	mov	r4, r5
  40d164:	460e      	mov	r6, r1
  40d166:	4615      	mov	r5, r2
  40d168:	f8db 3008 	ldr.w	r3, [fp, #8]
  40d16c:	f8db 1004 	ldr.w	r1, [fp, #4]
  40d170:	eb04 0805 	add.w	r8, r4, r5
  40d174:	4598      	cmp	r8, r3
  40d176:	bfc8      	it	gt
  40d178:	3101      	addgt	r1, #1
  40d17a:	f7ff ff1d 	bl	40cfb8 <_Balloc>
  40d17e:	f100 0914 	add.w	r9, r0, #20
  40d182:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40d186:	45d1      	cmp	r9, sl
  40d188:	9000      	str	r0, [sp, #0]
  40d18a:	d205      	bcs.n	40d198 <__multiply+0x4c>
  40d18c:	464b      	mov	r3, r9
  40d18e:	2100      	movs	r1, #0
  40d190:	f843 1b04 	str.w	r1, [r3], #4
  40d194:	459a      	cmp	sl, r3
  40d196:	d8fb      	bhi.n	40d190 <__multiply+0x44>
  40d198:	f106 0c14 	add.w	ip, r6, #20
  40d19c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40d1a0:	f10b 0b14 	add.w	fp, fp, #20
  40d1a4:	459c      	cmp	ip, r3
  40d1a6:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40d1aa:	d24c      	bcs.n	40d246 <__multiply+0xfa>
  40d1ac:	f8cd a004 	str.w	sl, [sp, #4]
  40d1b0:	469a      	mov	sl, r3
  40d1b2:	f8dc 5000 	ldr.w	r5, [ip]
  40d1b6:	b2af      	uxth	r7, r5
  40d1b8:	b1ef      	cbz	r7, 40d1f6 <__multiply+0xaa>
  40d1ba:	2100      	movs	r1, #0
  40d1bc:	464d      	mov	r5, r9
  40d1be:	465e      	mov	r6, fp
  40d1c0:	460c      	mov	r4, r1
  40d1c2:	f856 2b04 	ldr.w	r2, [r6], #4
  40d1c6:	6828      	ldr	r0, [r5, #0]
  40d1c8:	b293      	uxth	r3, r2
  40d1ca:	b281      	uxth	r1, r0
  40d1cc:	fb07 1303 	mla	r3, r7, r3, r1
  40d1d0:	0c12      	lsrs	r2, r2, #16
  40d1d2:	0c01      	lsrs	r1, r0, #16
  40d1d4:	4423      	add	r3, r4
  40d1d6:	fb07 1102 	mla	r1, r7, r2, r1
  40d1da:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40d1de:	b29b      	uxth	r3, r3
  40d1e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40d1e4:	45b6      	cmp	lr, r6
  40d1e6:	f845 3b04 	str.w	r3, [r5], #4
  40d1ea:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40d1ee:	d8e8      	bhi.n	40d1c2 <__multiply+0x76>
  40d1f0:	602c      	str	r4, [r5, #0]
  40d1f2:	f8dc 5000 	ldr.w	r5, [ip]
  40d1f6:	0c2d      	lsrs	r5, r5, #16
  40d1f8:	d01d      	beq.n	40d236 <__multiply+0xea>
  40d1fa:	f8d9 3000 	ldr.w	r3, [r9]
  40d1fe:	4648      	mov	r0, r9
  40d200:	461c      	mov	r4, r3
  40d202:	4659      	mov	r1, fp
  40d204:	2200      	movs	r2, #0
  40d206:	880e      	ldrh	r6, [r1, #0]
  40d208:	0c24      	lsrs	r4, r4, #16
  40d20a:	fb05 4406 	mla	r4, r5, r6, r4
  40d20e:	4422      	add	r2, r4
  40d210:	b29b      	uxth	r3, r3
  40d212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40d216:	f840 3b04 	str.w	r3, [r0], #4
  40d21a:	f851 3b04 	ldr.w	r3, [r1], #4
  40d21e:	6804      	ldr	r4, [r0, #0]
  40d220:	0c1b      	lsrs	r3, r3, #16
  40d222:	b2a6      	uxth	r6, r4
  40d224:	fb05 6303 	mla	r3, r5, r3, r6
  40d228:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40d22c:	458e      	cmp	lr, r1
  40d22e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40d232:	d8e8      	bhi.n	40d206 <__multiply+0xba>
  40d234:	6003      	str	r3, [r0, #0]
  40d236:	f10c 0c04 	add.w	ip, ip, #4
  40d23a:	45e2      	cmp	sl, ip
  40d23c:	f109 0904 	add.w	r9, r9, #4
  40d240:	d8b7      	bhi.n	40d1b2 <__multiply+0x66>
  40d242:	f8dd a004 	ldr.w	sl, [sp, #4]
  40d246:	f1b8 0f00 	cmp.w	r8, #0
  40d24a:	dd0b      	ble.n	40d264 <__multiply+0x118>
  40d24c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40d250:	f1aa 0a04 	sub.w	sl, sl, #4
  40d254:	b11b      	cbz	r3, 40d25e <__multiply+0x112>
  40d256:	e005      	b.n	40d264 <__multiply+0x118>
  40d258:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40d25c:	b913      	cbnz	r3, 40d264 <__multiply+0x118>
  40d25e:	f1b8 0801 	subs.w	r8, r8, #1
  40d262:	d1f9      	bne.n	40d258 <__multiply+0x10c>
  40d264:	9800      	ldr	r0, [sp, #0]
  40d266:	f8c0 8010 	str.w	r8, [r0, #16]
  40d26a:	b003      	add	sp, #12
  40d26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d270 <__pow5mult>:
  40d270:	f012 0303 	ands.w	r3, r2, #3
  40d274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d278:	4614      	mov	r4, r2
  40d27a:	4607      	mov	r7, r0
  40d27c:	d12e      	bne.n	40d2dc <__pow5mult+0x6c>
  40d27e:	460d      	mov	r5, r1
  40d280:	10a4      	asrs	r4, r4, #2
  40d282:	d01c      	beq.n	40d2be <__pow5mult+0x4e>
  40d284:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40d286:	b396      	cbz	r6, 40d2ee <__pow5mult+0x7e>
  40d288:	07e3      	lsls	r3, r4, #31
  40d28a:	f04f 0800 	mov.w	r8, #0
  40d28e:	d406      	bmi.n	40d29e <__pow5mult+0x2e>
  40d290:	1064      	asrs	r4, r4, #1
  40d292:	d014      	beq.n	40d2be <__pow5mult+0x4e>
  40d294:	6830      	ldr	r0, [r6, #0]
  40d296:	b1a8      	cbz	r0, 40d2c4 <__pow5mult+0x54>
  40d298:	4606      	mov	r6, r0
  40d29a:	07e3      	lsls	r3, r4, #31
  40d29c:	d5f8      	bpl.n	40d290 <__pow5mult+0x20>
  40d29e:	4632      	mov	r2, r6
  40d2a0:	4629      	mov	r1, r5
  40d2a2:	4638      	mov	r0, r7
  40d2a4:	f7ff ff52 	bl	40d14c <__multiply>
  40d2a8:	b1b5      	cbz	r5, 40d2d8 <__pow5mult+0x68>
  40d2aa:	686a      	ldr	r2, [r5, #4]
  40d2ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40d2ae:	1064      	asrs	r4, r4, #1
  40d2b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40d2b4:	6029      	str	r1, [r5, #0]
  40d2b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40d2ba:	4605      	mov	r5, r0
  40d2bc:	d1ea      	bne.n	40d294 <__pow5mult+0x24>
  40d2be:	4628      	mov	r0, r5
  40d2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d2c4:	4632      	mov	r2, r6
  40d2c6:	4631      	mov	r1, r6
  40d2c8:	4638      	mov	r0, r7
  40d2ca:	f7ff ff3f 	bl	40d14c <__multiply>
  40d2ce:	6030      	str	r0, [r6, #0]
  40d2d0:	f8c0 8000 	str.w	r8, [r0]
  40d2d4:	4606      	mov	r6, r0
  40d2d6:	e7e0      	b.n	40d29a <__pow5mult+0x2a>
  40d2d8:	4605      	mov	r5, r0
  40d2da:	e7d9      	b.n	40d290 <__pow5mult+0x20>
  40d2dc:	1e5a      	subs	r2, r3, #1
  40d2de:	4d0b      	ldr	r5, [pc, #44]	; (40d30c <__pow5mult+0x9c>)
  40d2e0:	2300      	movs	r3, #0
  40d2e2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40d2e6:	f7ff fe97 	bl	40d018 <__multadd>
  40d2ea:	4605      	mov	r5, r0
  40d2ec:	e7c8      	b.n	40d280 <__pow5mult+0x10>
  40d2ee:	2101      	movs	r1, #1
  40d2f0:	4638      	mov	r0, r7
  40d2f2:	f7ff fe61 	bl	40cfb8 <_Balloc>
  40d2f6:	f240 2171 	movw	r1, #625	; 0x271
  40d2fa:	2201      	movs	r2, #1
  40d2fc:	2300      	movs	r3, #0
  40d2fe:	6141      	str	r1, [r0, #20]
  40d300:	6102      	str	r2, [r0, #16]
  40d302:	4606      	mov	r6, r0
  40d304:	64b8      	str	r0, [r7, #72]	; 0x48
  40d306:	6003      	str	r3, [r0, #0]
  40d308:	e7be      	b.n	40d288 <__pow5mult+0x18>
  40d30a:	bf00      	nop
  40d30c:	0040f720 	.word	0x0040f720

0040d310 <__lshift>:
  40d310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40d314:	4691      	mov	r9, r2
  40d316:	690a      	ldr	r2, [r1, #16]
  40d318:	688b      	ldr	r3, [r1, #8]
  40d31a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40d31e:	eb04 0802 	add.w	r8, r4, r2
  40d322:	f108 0501 	add.w	r5, r8, #1
  40d326:	429d      	cmp	r5, r3
  40d328:	460e      	mov	r6, r1
  40d32a:	4607      	mov	r7, r0
  40d32c:	6849      	ldr	r1, [r1, #4]
  40d32e:	dd04      	ble.n	40d33a <__lshift+0x2a>
  40d330:	005b      	lsls	r3, r3, #1
  40d332:	429d      	cmp	r5, r3
  40d334:	f101 0101 	add.w	r1, r1, #1
  40d338:	dcfa      	bgt.n	40d330 <__lshift+0x20>
  40d33a:	4638      	mov	r0, r7
  40d33c:	f7ff fe3c 	bl	40cfb8 <_Balloc>
  40d340:	2c00      	cmp	r4, #0
  40d342:	f100 0314 	add.w	r3, r0, #20
  40d346:	dd06      	ble.n	40d356 <__lshift+0x46>
  40d348:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40d34c:	2100      	movs	r1, #0
  40d34e:	f843 1b04 	str.w	r1, [r3], #4
  40d352:	429a      	cmp	r2, r3
  40d354:	d1fb      	bne.n	40d34e <__lshift+0x3e>
  40d356:	6934      	ldr	r4, [r6, #16]
  40d358:	f106 0114 	add.w	r1, r6, #20
  40d35c:	f019 091f 	ands.w	r9, r9, #31
  40d360:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40d364:	d01d      	beq.n	40d3a2 <__lshift+0x92>
  40d366:	f1c9 0c20 	rsb	ip, r9, #32
  40d36a:	2200      	movs	r2, #0
  40d36c:	680c      	ldr	r4, [r1, #0]
  40d36e:	fa04 f409 	lsl.w	r4, r4, r9
  40d372:	4314      	orrs	r4, r2
  40d374:	f843 4b04 	str.w	r4, [r3], #4
  40d378:	f851 2b04 	ldr.w	r2, [r1], #4
  40d37c:	458e      	cmp	lr, r1
  40d37e:	fa22 f20c 	lsr.w	r2, r2, ip
  40d382:	d8f3      	bhi.n	40d36c <__lshift+0x5c>
  40d384:	601a      	str	r2, [r3, #0]
  40d386:	b10a      	cbz	r2, 40d38c <__lshift+0x7c>
  40d388:	f108 0502 	add.w	r5, r8, #2
  40d38c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40d38e:	6872      	ldr	r2, [r6, #4]
  40d390:	3d01      	subs	r5, #1
  40d392:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40d396:	6105      	str	r5, [r0, #16]
  40d398:	6031      	str	r1, [r6, #0]
  40d39a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40d39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d3a2:	3b04      	subs	r3, #4
  40d3a4:	f851 2b04 	ldr.w	r2, [r1], #4
  40d3a8:	f843 2f04 	str.w	r2, [r3, #4]!
  40d3ac:	458e      	cmp	lr, r1
  40d3ae:	d8f9      	bhi.n	40d3a4 <__lshift+0x94>
  40d3b0:	e7ec      	b.n	40d38c <__lshift+0x7c>
  40d3b2:	bf00      	nop

0040d3b4 <__mcmp>:
  40d3b4:	b430      	push	{r4, r5}
  40d3b6:	690b      	ldr	r3, [r1, #16]
  40d3b8:	4605      	mov	r5, r0
  40d3ba:	6900      	ldr	r0, [r0, #16]
  40d3bc:	1ac0      	subs	r0, r0, r3
  40d3be:	d10f      	bne.n	40d3e0 <__mcmp+0x2c>
  40d3c0:	009b      	lsls	r3, r3, #2
  40d3c2:	3514      	adds	r5, #20
  40d3c4:	3114      	adds	r1, #20
  40d3c6:	4419      	add	r1, r3
  40d3c8:	442b      	add	r3, r5
  40d3ca:	e001      	b.n	40d3d0 <__mcmp+0x1c>
  40d3cc:	429d      	cmp	r5, r3
  40d3ce:	d207      	bcs.n	40d3e0 <__mcmp+0x2c>
  40d3d0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40d3d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40d3d8:	4294      	cmp	r4, r2
  40d3da:	d0f7      	beq.n	40d3cc <__mcmp+0x18>
  40d3dc:	d302      	bcc.n	40d3e4 <__mcmp+0x30>
  40d3de:	2001      	movs	r0, #1
  40d3e0:	bc30      	pop	{r4, r5}
  40d3e2:	4770      	bx	lr
  40d3e4:	f04f 30ff 	mov.w	r0, #4294967295
  40d3e8:	e7fa      	b.n	40d3e0 <__mcmp+0x2c>
  40d3ea:	bf00      	nop

0040d3ec <__mdiff>:
  40d3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d3f0:	690f      	ldr	r7, [r1, #16]
  40d3f2:	460e      	mov	r6, r1
  40d3f4:	6911      	ldr	r1, [r2, #16]
  40d3f6:	1a7f      	subs	r7, r7, r1
  40d3f8:	2f00      	cmp	r7, #0
  40d3fa:	4690      	mov	r8, r2
  40d3fc:	d117      	bne.n	40d42e <__mdiff+0x42>
  40d3fe:	0089      	lsls	r1, r1, #2
  40d400:	f106 0514 	add.w	r5, r6, #20
  40d404:	f102 0e14 	add.w	lr, r2, #20
  40d408:	186b      	adds	r3, r5, r1
  40d40a:	4471      	add	r1, lr
  40d40c:	e001      	b.n	40d412 <__mdiff+0x26>
  40d40e:	429d      	cmp	r5, r3
  40d410:	d25c      	bcs.n	40d4cc <__mdiff+0xe0>
  40d412:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40d416:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40d41a:	42a2      	cmp	r2, r4
  40d41c:	d0f7      	beq.n	40d40e <__mdiff+0x22>
  40d41e:	d25e      	bcs.n	40d4de <__mdiff+0xf2>
  40d420:	4633      	mov	r3, r6
  40d422:	462c      	mov	r4, r5
  40d424:	4646      	mov	r6, r8
  40d426:	4675      	mov	r5, lr
  40d428:	4698      	mov	r8, r3
  40d42a:	2701      	movs	r7, #1
  40d42c:	e005      	b.n	40d43a <__mdiff+0x4e>
  40d42e:	db58      	blt.n	40d4e2 <__mdiff+0xf6>
  40d430:	f106 0514 	add.w	r5, r6, #20
  40d434:	f108 0414 	add.w	r4, r8, #20
  40d438:	2700      	movs	r7, #0
  40d43a:	6871      	ldr	r1, [r6, #4]
  40d43c:	f7ff fdbc 	bl	40cfb8 <_Balloc>
  40d440:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40d444:	6936      	ldr	r6, [r6, #16]
  40d446:	60c7      	str	r7, [r0, #12]
  40d448:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40d44c:	46a6      	mov	lr, r4
  40d44e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40d452:	f100 0414 	add.w	r4, r0, #20
  40d456:	2300      	movs	r3, #0
  40d458:	f85e 1b04 	ldr.w	r1, [lr], #4
  40d45c:	f855 8b04 	ldr.w	r8, [r5], #4
  40d460:	b28a      	uxth	r2, r1
  40d462:	fa13 f388 	uxtah	r3, r3, r8
  40d466:	0c09      	lsrs	r1, r1, #16
  40d468:	1a9a      	subs	r2, r3, r2
  40d46a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40d46e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40d472:	b292      	uxth	r2, r2
  40d474:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40d478:	45f4      	cmp	ip, lr
  40d47a:	f844 2b04 	str.w	r2, [r4], #4
  40d47e:	ea4f 4323 	mov.w	r3, r3, asr #16
  40d482:	d8e9      	bhi.n	40d458 <__mdiff+0x6c>
  40d484:	42af      	cmp	r7, r5
  40d486:	d917      	bls.n	40d4b8 <__mdiff+0xcc>
  40d488:	46a4      	mov	ip, r4
  40d48a:	46ae      	mov	lr, r5
  40d48c:	f85e 2b04 	ldr.w	r2, [lr], #4
  40d490:	fa13 f382 	uxtah	r3, r3, r2
  40d494:	1419      	asrs	r1, r3, #16
  40d496:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40d49a:	b29b      	uxth	r3, r3
  40d49c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40d4a0:	4577      	cmp	r7, lr
  40d4a2:	f84c 2b04 	str.w	r2, [ip], #4
  40d4a6:	ea4f 4321 	mov.w	r3, r1, asr #16
  40d4aa:	d8ef      	bhi.n	40d48c <__mdiff+0xa0>
  40d4ac:	43ed      	mvns	r5, r5
  40d4ae:	442f      	add	r7, r5
  40d4b0:	f027 0703 	bic.w	r7, r7, #3
  40d4b4:	3704      	adds	r7, #4
  40d4b6:	443c      	add	r4, r7
  40d4b8:	3c04      	subs	r4, #4
  40d4ba:	b922      	cbnz	r2, 40d4c6 <__mdiff+0xda>
  40d4bc:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40d4c0:	3e01      	subs	r6, #1
  40d4c2:	2b00      	cmp	r3, #0
  40d4c4:	d0fa      	beq.n	40d4bc <__mdiff+0xd0>
  40d4c6:	6106      	str	r6, [r0, #16]
  40d4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d4cc:	2100      	movs	r1, #0
  40d4ce:	f7ff fd73 	bl	40cfb8 <_Balloc>
  40d4d2:	2201      	movs	r2, #1
  40d4d4:	2300      	movs	r3, #0
  40d4d6:	6102      	str	r2, [r0, #16]
  40d4d8:	6143      	str	r3, [r0, #20]
  40d4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d4de:	4674      	mov	r4, lr
  40d4e0:	e7ab      	b.n	40d43a <__mdiff+0x4e>
  40d4e2:	4633      	mov	r3, r6
  40d4e4:	f106 0414 	add.w	r4, r6, #20
  40d4e8:	f102 0514 	add.w	r5, r2, #20
  40d4ec:	4616      	mov	r6, r2
  40d4ee:	2701      	movs	r7, #1
  40d4f0:	4698      	mov	r8, r3
  40d4f2:	e7a2      	b.n	40d43a <__mdiff+0x4e>

0040d4f4 <__d2b>:
  40d4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d4f8:	b082      	sub	sp, #8
  40d4fa:	2101      	movs	r1, #1
  40d4fc:	461c      	mov	r4, r3
  40d4fe:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40d502:	4615      	mov	r5, r2
  40d504:	9e08      	ldr	r6, [sp, #32]
  40d506:	f7ff fd57 	bl	40cfb8 <_Balloc>
  40d50a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40d50e:	4680      	mov	r8, r0
  40d510:	b10f      	cbz	r7, 40d516 <__d2b+0x22>
  40d512:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40d516:	9401      	str	r4, [sp, #4]
  40d518:	b31d      	cbz	r5, 40d562 <__d2b+0x6e>
  40d51a:	a802      	add	r0, sp, #8
  40d51c:	f840 5d08 	str.w	r5, [r0, #-8]!
  40d520:	f7ff fdda 	bl	40d0d8 <__lo0bits>
  40d524:	2800      	cmp	r0, #0
  40d526:	d134      	bne.n	40d592 <__d2b+0x9e>
  40d528:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40d52c:	f8c8 2014 	str.w	r2, [r8, #20]
  40d530:	2b00      	cmp	r3, #0
  40d532:	bf0c      	ite	eq
  40d534:	2101      	moveq	r1, #1
  40d536:	2102      	movne	r1, #2
  40d538:	f8c8 3018 	str.w	r3, [r8, #24]
  40d53c:	f8c8 1010 	str.w	r1, [r8, #16]
  40d540:	b9df      	cbnz	r7, 40d57a <__d2b+0x86>
  40d542:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40d546:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40d54a:	6030      	str	r0, [r6, #0]
  40d54c:	6918      	ldr	r0, [r3, #16]
  40d54e:	f7ff fda3 	bl	40d098 <__hi0bits>
  40d552:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d554:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40d558:	6018      	str	r0, [r3, #0]
  40d55a:	4640      	mov	r0, r8
  40d55c:	b002      	add	sp, #8
  40d55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d562:	a801      	add	r0, sp, #4
  40d564:	f7ff fdb8 	bl	40d0d8 <__lo0bits>
  40d568:	9b01      	ldr	r3, [sp, #4]
  40d56a:	f8c8 3014 	str.w	r3, [r8, #20]
  40d56e:	2101      	movs	r1, #1
  40d570:	3020      	adds	r0, #32
  40d572:	f8c8 1010 	str.w	r1, [r8, #16]
  40d576:	2f00      	cmp	r7, #0
  40d578:	d0e3      	beq.n	40d542 <__d2b+0x4e>
  40d57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d57c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40d580:	4407      	add	r7, r0
  40d582:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40d586:	6037      	str	r7, [r6, #0]
  40d588:	6018      	str	r0, [r3, #0]
  40d58a:	4640      	mov	r0, r8
  40d58c:	b002      	add	sp, #8
  40d58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40d592:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40d596:	f1c0 0220 	rsb	r2, r0, #32
  40d59a:	fa03 f202 	lsl.w	r2, r3, r2
  40d59e:	430a      	orrs	r2, r1
  40d5a0:	40c3      	lsrs	r3, r0
  40d5a2:	9301      	str	r3, [sp, #4]
  40d5a4:	f8c8 2014 	str.w	r2, [r8, #20]
  40d5a8:	e7c2      	b.n	40d530 <__d2b+0x3c>
  40d5aa:	bf00      	nop

0040d5ac <_sbrk_r>:
  40d5ac:	b538      	push	{r3, r4, r5, lr}
  40d5ae:	4c07      	ldr	r4, [pc, #28]	; (40d5cc <_sbrk_r+0x20>)
  40d5b0:	2300      	movs	r3, #0
  40d5b2:	4605      	mov	r5, r0
  40d5b4:	4608      	mov	r0, r1
  40d5b6:	6023      	str	r3, [r4, #0]
  40d5b8:	f7f8 fd48 	bl	40604c <_sbrk>
  40d5bc:	1c43      	adds	r3, r0, #1
  40d5be:	d000      	beq.n	40d5c2 <_sbrk_r+0x16>
  40d5c0:	bd38      	pop	{r3, r4, r5, pc}
  40d5c2:	6823      	ldr	r3, [r4, #0]
  40d5c4:	2b00      	cmp	r3, #0
  40d5c6:	d0fb      	beq.n	40d5c0 <_sbrk_r+0x14>
  40d5c8:	602b      	str	r3, [r5, #0]
  40d5ca:	bd38      	pop	{r3, r4, r5, pc}
  40d5cc:	2000acf4 	.word	0x2000acf4

0040d5d0 <__ssprint_r>:
  40d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d5d4:	6893      	ldr	r3, [r2, #8]
  40d5d6:	b083      	sub	sp, #12
  40d5d8:	4690      	mov	r8, r2
  40d5da:	2b00      	cmp	r3, #0
  40d5dc:	d070      	beq.n	40d6c0 <__ssprint_r+0xf0>
  40d5de:	4682      	mov	sl, r0
  40d5e0:	460c      	mov	r4, r1
  40d5e2:	6817      	ldr	r7, [r2, #0]
  40d5e4:	688d      	ldr	r5, [r1, #8]
  40d5e6:	6808      	ldr	r0, [r1, #0]
  40d5e8:	e042      	b.n	40d670 <__ssprint_r+0xa0>
  40d5ea:	89a3      	ldrh	r3, [r4, #12]
  40d5ec:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40d5f0:	d02e      	beq.n	40d650 <__ssprint_r+0x80>
  40d5f2:	6965      	ldr	r5, [r4, #20]
  40d5f4:	6921      	ldr	r1, [r4, #16]
  40d5f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40d5fa:	eba0 0b01 	sub.w	fp, r0, r1
  40d5fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40d602:	f10b 0001 	add.w	r0, fp, #1
  40d606:	106d      	asrs	r5, r5, #1
  40d608:	4430      	add	r0, r6
  40d60a:	42a8      	cmp	r0, r5
  40d60c:	462a      	mov	r2, r5
  40d60e:	bf84      	itt	hi
  40d610:	4605      	movhi	r5, r0
  40d612:	462a      	movhi	r2, r5
  40d614:	055b      	lsls	r3, r3, #21
  40d616:	d538      	bpl.n	40d68a <__ssprint_r+0xba>
  40d618:	4611      	mov	r1, r2
  40d61a:	4650      	mov	r0, sl
  40d61c:	f7ff f9be 	bl	40c99c <_malloc_r>
  40d620:	2800      	cmp	r0, #0
  40d622:	d03c      	beq.n	40d69e <__ssprint_r+0xce>
  40d624:	465a      	mov	r2, fp
  40d626:	6921      	ldr	r1, [r4, #16]
  40d628:	9001      	str	r0, [sp, #4]
  40d62a:	f7fc fdb1 	bl	40a190 <memcpy>
  40d62e:	89a2      	ldrh	r2, [r4, #12]
  40d630:	9b01      	ldr	r3, [sp, #4]
  40d632:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40d636:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40d63a:	81a2      	strh	r2, [r4, #12]
  40d63c:	eba5 020b 	sub.w	r2, r5, fp
  40d640:	eb03 000b 	add.w	r0, r3, fp
  40d644:	6165      	str	r5, [r4, #20]
  40d646:	6123      	str	r3, [r4, #16]
  40d648:	6020      	str	r0, [r4, #0]
  40d64a:	60a2      	str	r2, [r4, #8]
  40d64c:	4635      	mov	r5, r6
  40d64e:	46b3      	mov	fp, r6
  40d650:	465a      	mov	r2, fp
  40d652:	4649      	mov	r1, r9
  40d654:	f000 fa18 	bl	40da88 <memmove>
  40d658:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40d65c:	68a2      	ldr	r2, [r4, #8]
  40d65e:	6820      	ldr	r0, [r4, #0]
  40d660:	1b55      	subs	r5, r2, r5
  40d662:	4458      	add	r0, fp
  40d664:	1b9e      	subs	r6, r3, r6
  40d666:	60a5      	str	r5, [r4, #8]
  40d668:	6020      	str	r0, [r4, #0]
  40d66a:	f8c8 6008 	str.w	r6, [r8, #8]
  40d66e:	b33e      	cbz	r6, 40d6c0 <__ssprint_r+0xf0>
  40d670:	687e      	ldr	r6, [r7, #4]
  40d672:	463b      	mov	r3, r7
  40d674:	3708      	adds	r7, #8
  40d676:	2e00      	cmp	r6, #0
  40d678:	d0fa      	beq.n	40d670 <__ssprint_r+0xa0>
  40d67a:	42ae      	cmp	r6, r5
  40d67c:	f8d3 9000 	ldr.w	r9, [r3]
  40d680:	46ab      	mov	fp, r5
  40d682:	d2b2      	bcs.n	40d5ea <__ssprint_r+0x1a>
  40d684:	4635      	mov	r5, r6
  40d686:	46b3      	mov	fp, r6
  40d688:	e7e2      	b.n	40d650 <__ssprint_r+0x80>
  40d68a:	4650      	mov	r0, sl
  40d68c:	f000 fa60 	bl	40db50 <_realloc_r>
  40d690:	4603      	mov	r3, r0
  40d692:	2800      	cmp	r0, #0
  40d694:	d1d2      	bne.n	40d63c <__ssprint_r+0x6c>
  40d696:	6921      	ldr	r1, [r4, #16]
  40d698:	4650      	mov	r0, sl
  40d69a:	f000 f8f9 	bl	40d890 <_free_r>
  40d69e:	230c      	movs	r3, #12
  40d6a0:	f8ca 3000 	str.w	r3, [sl]
  40d6a4:	89a3      	ldrh	r3, [r4, #12]
  40d6a6:	2200      	movs	r2, #0
  40d6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d6ac:	f04f 30ff 	mov.w	r0, #4294967295
  40d6b0:	81a3      	strh	r3, [r4, #12]
  40d6b2:	f8c8 2008 	str.w	r2, [r8, #8]
  40d6b6:	f8c8 2004 	str.w	r2, [r8, #4]
  40d6ba:	b003      	add	sp, #12
  40d6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d6c0:	2000      	movs	r0, #0
  40d6c2:	f8c8 0004 	str.w	r0, [r8, #4]
  40d6c6:	b003      	add	sp, #12
  40d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d6cc <__register_exitproc>:
  40d6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40d6d0:	4d2c      	ldr	r5, [pc, #176]	; (40d784 <__register_exitproc+0xb8>)
  40d6d2:	4606      	mov	r6, r0
  40d6d4:	6828      	ldr	r0, [r5, #0]
  40d6d6:	4698      	mov	r8, r3
  40d6d8:	460f      	mov	r7, r1
  40d6da:	4691      	mov	r9, r2
  40d6dc:	f7ff f95a 	bl	40c994 <__retarget_lock_acquire_recursive>
  40d6e0:	4b29      	ldr	r3, [pc, #164]	; (40d788 <__register_exitproc+0xbc>)
  40d6e2:	681c      	ldr	r4, [r3, #0]
  40d6e4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40d6e8:	2b00      	cmp	r3, #0
  40d6ea:	d03e      	beq.n	40d76a <__register_exitproc+0x9e>
  40d6ec:	685a      	ldr	r2, [r3, #4]
  40d6ee:	2a1f      	cmp	r2, #31
  40d6f0:	dc1c      	bgt.n	40d72c <__register_exitproc+0x60>
  40d6f2:	f102 0e01 	add.w	lr, r2, #1
  40d6f6:	b176      	cbz	r6, 40d716 <__register_exitproc+0x4a>
  40d6f8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40d6fc:	2401      	movs	r4, #1
  40d6fe:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40d702:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40d706:	4094      	lsls	r4, r2
  40d708:	4320      	orrs	r0, r4
  40d70a:	2e02      	cmp	r6, #2
  40d70c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40d710:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40d714:	d023      	beq.n	40d75e <__register_exitproc+0x92>
  40d716:	3202      	adds	r2, #2
  40d718:	f8c3 e004 	str.w	lr, [r3, #4]
  40d71c:	6828      	ldr	r0, [r5, #0]
  40d71e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40d722:	f7ff f939 	bl	40c998 <__retarget_lock_release_recursive>
  40d726:	2000      	movs	r0, #0
  40d728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d72c:	4b17      	ldr	r3, [pc, #92]	; (40d78c <__register_exitproc+0xc0>)
  40d72e:	b30b      	cbz	r3, 40d774 <__register_exitproc+0xa8>
  40d730:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40d734:	f3af 8000 	nop.w
  40d738:	4603      	mov	r3, r0
  40d73a:	b1d8      	cbz	r0, 40d774 <__register_exitproc+0xa8>
  40d73c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40d740:	6002      	str	r2, [r0, #0]
  40d742:	2100      	movs	r1, #0
  40d744:	6041      	str	r1, [r0, #4]
  40d746:	460a      	mov	r2, r1
  40d748:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40d74c:	f04f 0e01 	mov.w	lr, #1
  40d750:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40d754:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40d758:	2e00      	cmp	r6, #0
  40d75a:	d0dc      	beq.n	40d716 <__register_exitproc+0x4a>
  40d75c:	e7cc      	b.n	40d6f8 <__register_exitproc+0x2c>
  40d75e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40d762:	430c      	orrs	r4, r1
  40d764:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40d768:	e7d5      	b.n	40d716 <__register_exitproc+0x4a>
  40d76a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40d76e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40d772:	e7bb      	b.n	40d6ec <__register_exitproc+0x20>
  40d774:	6828      	ldr	r0, [r5, #0]
  40d776:	f7ff f90f 	bl	40c998 <__retarget_lock_release_recursive>
  40d77a:	f04f 30ff 	mov.w	r0, #4294967295
  40d77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d782:	bf00      	nop
  40d784:	20000450 	.word	0x20000450
  40d788:	0040f5b8 	.word	0x0040f5b8
  40d78c:	00000000 	.word	0x00000000

0040d790 <_calloc_r>:
  40d790:	b510      	push	{r4, lr}
  40d792:	fb02 f101 	mul.w	r1, r2, r1
  40d796:	f7ff f901 	bl	40c99c <_malloc_r>
  40d79a:	4604      	mov	r4, r0
  40d79c:	b1d8      	cbz	r0, 40d7d6 <_calloc_r+0x46>
  40d79e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40d7a2:	f022 0203 	bic.w	r2, r2, #3
  40d7a6:	3a04      	subs	r2, #4
  40d7a8:	2a24      	cmp	r2, #36	; 0x24
  40d7aa:	d818      	bhi.n	40d7de <_calloc_r+0x4e>
  40d7ac:	2a13      	cmp	r2, #19
  40d7ae:	d914      	bls.n	40d7da <_calloc_r+0x4a>
  40d7b0:	2300      	movs	r3, #0
  40d7b2:	2a1b      	cmp	r2, #27
  40d7b4:	6003      	str	r3, [r0, #0]
  40d7b6:	6043      	str	r3, [r0, #4]
  40d7b8:	d916      	bls.n	40d7e8 <_calloc_r+0x58>
  40d7ba:	2a24      	cmp	r2, #36	; 0x24
  40d7bc:	6083      	str	r3, [r0, #8]
  40d7be:	60c3      	str	r3, [r0, #12]
  40d7c0:	bf11      	iteee	ne
  40d7c2:	f100 0210 	addne.w	r2, r0, #16
  40d7c6:	6103      	streq	r3, [r0, #16]
  40d7c8:	6143      	streq	r3, [r0, #20]
  40d7ca:	f100 0218 	addeq.w	r2, r0, #24
  40d7ce:	2300      	movs	r3, #0
  40d7d0:	6013      	str	r3, [r2, #0]
  40d7d2:	6053      	str	r3, [r2, #4]
  40d7d4:	6093      	str	r3, [r2, #8]
  40d7d6:	4620      	mov	r0, r4
  40d7d8:	bd10      	pop	{r4, pc}
  40d7da:	4602      	mov	r2, r0
  40d7dc:	e7f7      	b.n	40d7ce <_calloc_r+0x3e>
  40d7de:	2100      	movs	r1, #0
  40d7e0:	f7fc fd70 	bl	40a2c4 <memset>
  40d7e4:	4620      	mov	r0, r4
  40d7e6:	bd10      	pop	{r4, pc}
  40d7e8:	f100 0208 	add.w	r2, r0, #8
  40d7ec:	e7ef      	b.n	40d7ce <_calloc_r+0x3e>
  40d7ee:	bf00      	nop

0040d7f0 <_malloc_trim_r>:
  40d7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d7f2:	4f24      	ldr	r7, [pc, #144]	; (40d884 <_malloc_trim_r+0x94>)
  40d7f4:	460c      	mov	r4, r1
  40d7f6:	4606      	mov	r6, r0
  40d7f8:	f7ff fbd2 	bl	40cfa0 <__malloc_lock>
  40d7fc:	68bb      	ldr	r3, [r7, #8]
  40d7fe:	685d      	ldr	r5, [r3, #4]
  40d800:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40d804:	310f      	adds	r1, #15
  40d806:	f025 0503 	bic.w	r5, r5, #3
  40d80a:	4429      	add	r1, r5
  40d80c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40d810:	f021 010f 	bic.w	r1, r1, #15
  40d814:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40d818:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40d81c:	db07      	blt.n	40d82e <_malloc_trim_r+0x3e>
  40d81e:	2100      	movs	r1, #0
  40d820:	4630      	mov	r0, r6
  40d822:	f7ff fec3 	bl	40d5ac <_sbrk_r>
  40d826:	68bb      	ldr	r3, [r7, #8]
  40d828:	442b      	add	r3, r5
  40d82a:	4298      	cmp	r0, r3
  40d82c:	d004      	beq.n	40d838 <_malloc_trim_r+0x48>
  40d82e:	4630      	mov	r0, r6
  40d830:	f7ff fbbc 	bl	40cfac <__malloc_unlock>
  40d834:	2000      	movs	r0, #0
  40d836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d838:	4261      	negs	r1, r4
  40d83a:	4630      	mov	r0, r6
  40d83c:	f7ff feb6 	bl	40d5ac <_sbrk_r>
  40d840:	3001      	adds	r0, #1
  40d842:	d00d      	beq.n	40d860 <_malloc_trim_r+0x70>
  40d844:	4b10      	ldr	r3, [pc, #64]	; (40d888 <_malloc_trim_r+0x98>)
  40d846:	68ba      	ldr	r2, [r7, #8]
  40d848:	6819      	ldr	r1, [r3, #0]
  40d84a:	1b2d      	subs	r5, r5, r4
  40d84c:	f045 0501 	orr.w	r5, r5, #1
  40d850:	4630      	mov	r0, r6
  40d852:	1b09      	subs	r1, r1, r4
  40d854:	6055      	str	r5, [r2, #4]
  40d856:	6019      	str	r1, [r3, #0]
  40d858:	f7ff fba8 	bl	40cfac <__malloc_unlock>
  40d85c:	2001      	movs	r0, #1
  40d85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40d860:	2100      	movs	r1, #0
  40d862:	4630      	mov	r0, r6
  40d864:	f7ff fea2 	bl	40d5ac <_sbrk_r>
  40d868:	68ba      	ldr	r2, [r7, #8]
  40d86a:	1a83      	subs	r3, r0, r2
  40d86c:	2b0f      	cmp	r3, #15
  40d86e:	ddde      	ble.n	40d82e <_malloc_trim_r+0x3e>
  40d870:	4c06      	ldr	r4, [pc, #24]	; (40d88c <_malloc_trim_r+0x9c>)
  40d872:	4905      	ldr	r1, [pc, #20]	; (40d888 <_malloc_trim_r+0x98>)
  40d874:	6824      	ldr	r4, [r4, #0]
  40d876:	f043 0301 	orr.w	r3, r3, #1
  40d87a:	1b00      	subs	r0, r0, r4
  40d87c:	6053      	str	r3, [r2, #4]
  40d87e:	6008      	str	r0, [r1, #0]
  40d880:	e7d5      	b.n	40d82e <_malloc_trim_r+0x3e>
  40d882:	bf00      	nop
  40d884:	20000454 	.word	0x20000454
  40d888:	2000ac88 	.word	0x2000ac88
  40d88c:	2000085c 	.word	0x2000085c

0040d890 <_free_r>:
  40d890:	2900      	cmp	r1, #0
  40d892:	d044      	beq.n	40d91e <_free_r+0x8e>
  40d894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40d898:	460d      	mov	r5, r1
  40d89a:	4680      	mov	r8, r0
  40d89c:	f7ff fb80 	bl	40cfa0 <__malloc_lock>
  40d8a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40d8a4:	4969      	ldr	r1, [pc, #420]	; (40da4c <_free_r+0x1bc>)
  40d8a6:	f027 0301 	bic.w	r3, r7, #1
  40d8aa:	f1a5 0408 	sub.w	r4, r5, #8
  40d8ae:	18e2      	adds	r2, r4, r3
  40d8b0:	688e      	ldr	r6, [r1, #8]
  40d8b2:	6850      	ldr	r0, [r2, #4]
  40d8b4:	42b2      	cmp	r2, r6
  40d8b6:	f020 0003 	bic.w	r0, r0, #3
  40d8ba:	d05e      	beq.n	40d97a <_free_r+0xea>
  40d8bc:	07fe      	lsls	r6, r7, #31
  40d8be:	6050      	str	r0, [r2, #4]
  40d8c0:	d40b      	bmi.n	40d8da <_free_r+0x4a>
  40d8c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40d8c6:	1be4      	subs	r4, r4, r7
  40d8c8:	f101 0e08 	add.w	lr, r1, #8
  40d8cc:	68a5      	ldr	r5, [r4, #8]
  40d8ce:	4575      	cmp	r5, lr
  40d8d0:	443b      	add	r3, r7
  40d8d2:	d06d      	beq.n	40d9b0 <_free_r+0x120>
  40d8d4:	68e7      	ldr	r7, [r4, #12]
  40d8d6:	60ef      	str	r7, [r5, #12]
  40d8d8:	60bd      	str	r5, [r7, #8]
  40d8da:	1815      	adds	r5, r2, r0
  40d8dc:	686d      	ldr	r5, [r5, #4]
  40d8de:	07ed      	lsls	r5, r5, #31
  40d8e0:	d53e      	bpl.n	40d960 <_free_r+0xd0>
  40d8e2:	f043 0201 	orr.w	r2, r3, #1
  40d8e6:	6062      	str	r2, [r4, #4]
  40d8e8:	50e3      	str	r3, [r4, r3]
  40d8ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40d8ee:	d217      	bcs.n	40d920 <_free_r+0x90>
  40d8f0:	08db      	lsrs	r3, r3, #3
  40d8f2:	1c58      	adds	r0, r3, #1
  40d8f4:	109a      	asrs	r2, r3, #2
  40d8f6:	684d      	ldr	r5, [r1, #4]
  40d8f8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40d8fc:	60a7      	str	r7, [r4, #8]
  40d8fe:	2301      	movs	r3, #1
  40d900:	4093      	lsls	r3, r2
  40d902:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40d906:	432b      	orrs	r3, r5
  40d908:	3a08      	subs	r2, #8
  40d90a:	60e2      	str	r2, [r4, #12]
  40d90c:	604b      	str	r3, [r1, #4]
  40d90e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40d912:	60fc      	str	r4, [r7, #12]
  40d914:	4640      	mov	r0, r8
  40d916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40d91a:	f7ff bb47 	b.w	40cfac <__malloc_unlock>
  40d91e:	4770      	bx	lr
  40d920:	0a5a      	lsrs	r2, r3, #9
  40d922:	2a04      	cmp	r2, #4
  40d924:	d852      	bhi.n	40d9cc <_free_r+0x13c>
  40d926:	099a      	lsrs	r2, r3, #6
  40d928:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40d92c:	00ff      	lsls	r7, r7, #3
  40d92e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40d932:	19c8      	adds	r0, r1, r7
  40d934:	59ca      	ldr	r2, [r1, r7]
  40d936:	3808      	subs	r0, #8
  40d938:	4290      	cmp	r0, r2
  40d93a:	d04f      	beq.n	40d9dc <_free_r+0x14c>
  40d93c:	6851      	ldr	r1, [r2, #4]
  40d93e:	f021 0103 	bic.w	r1, r1, #3
  40d942:	428b      	cmp	r3, r1
  40d944:	d232      	bcs.n	40d9ac <_free_r+0x11c>
  40d946:	6892      	ldr	r2, [r2, #8]
  40d948:	4290      	cmp	r0, r2
  40d94a:	d1f7      	bne.n	40d93c <_free_r+0xac>
  40d94c:	68c3      	ldr	r3, [r0, #12]
  40d94e:	60a0      	str	r0, [r4, #8]
  40d950:	60e3      	str	r3, [r4, #12]
  40d952:	609c      	str	r4, [r3, #8]
  40d954:	60c4      	str	r4, [r0, #12]
  40d956:	4640      	mov	r0, r8
  40d958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40d95c:	f7ff bb26 	b.w	40cfac <__malloc_unlock>
  40d960:	6895      	ldr	r5, [r2, #8]
  40d962:	4f3b      	ldr	r7, [pc, #236]	; (40da50 <_free_r+0x1c0>)
  40d964:	42bd      	cmp	r5, r7
  40d966:	4403      	add	r3, r0
  40d968:	d040      	beq.n	40d9ec <_free_r+0x15c>
  40d96a:	68d0      	ldr	r0, [r2, #12]
  40d96c:	60e8      	str	r0, [r5, #12]
  40d96e:	f043 0201 	orr.w	r2, r3, #1
  40d972:	6085      	str	r5, [r0, #8]
  40d974:	6062      	str	r2, [r4, #4]
  40d976:	50e3      	str	r3, [r4, r3]
  40d978:	e7b7      	b.n	40d8ea <_free_r+0x5a>
  40d97a:	07ff      	lsls	r7, r7, #31
  40d97c:	4403      	add	r3, r0
  40d97e:	d407      	bmi.n	40d990 <_free_r+0x100>
  40d980:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40d984:	1aa4      	subs	r4, r4, r2
  40d986:	4413      	add	r3, r2
  40d988:	68a0      	ldr	r0, [r4, #8]
  40d98a:	68e2      	ldr	r2, [r4, #12]
  40d98c:	60c2      	str	r2, [r0, #12]
  40d98e:	6090      	str	r0, [r2, #8]
  40d990:	4a30      	ldr	r2, [pc, #192]	; (40da54 <_free_r+0x1c4>)
  40d992:	6812      	ldr	r2, [r2, #0]
  40d994:	f043 0001 	orr.w	r0, r3, #1
  40d998:	4293      	cmp	r3, r2
  40d99a:	6060      	str	r0, [r4, #4]
  40d99c:	608c      	str	r4, [r1, #8]
  40d99e:	d3b9      	bcc.n	40d914 <_free_r+0x84>
  40d9a0:	4b2d      	ldr	r3, [pc, #180]	; (40da58 <_free_r+0x1c8>)
  40d9a2:	4640      	mov	r0, r8
  40d9a4:	6819      	ldr	r1, [r3, #0]
  40d9a6:	f7ff ff23 	bl	40d7f0 <_malloc_trim_r>
  40d9aa:	e7b3      	b.n	40d914 <_free_r+0x84>
  40d9ac:	4610      	mov	r0, r2
  40d9ae:	e7cd      	b.n	40d94c <_free_r+0xbc>
  40d9b0:	1811      	adds	r1, r2, r0
  40d9b2:	6849      	ldr	r1, [r1, #4]
  40d9b4:	07c9      	lsls	r1, r1, #31
  40d9b6:	d444      	bmi.n	40da42 <_free_r+0x1b2>
  40d9b8:	6891      	ldr	r1, [r2, #8]
  40d9ba:	68d2      	ldr	r2, [r2, #12]
  40d9bc:	60ca      	str	r2, [r1, #12]
  40d9be:	4403      	add	r3, r0
  40d9c0:	f043 0001 	orr.w	r0, r3, #1
  40d9c4:	6091      	str	r1, [r2, #8]
  40d9c6:	6060      	str	r0, [r4, #4]
  40d9c8:	50e3      	str	r3, [r4, r3]
  40d9ca:	e7a3      	b.n	40d914 <_free_r+0x84>
  40d9cc:	2a14      	cmp	r2, #20
  40d9ce:	d816      	bhi.n	40d9fe <_free_r+0x16e>
  40d9d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40d9d4:	00ff      	lsls	r7, r7, #3
  40d9d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40d9da:	e7aa      	b.n	40d932 <_free_r+0xa2>
  40d9dc:	10aa      	asrs	r2, r5, #2
  40d9de:	2301      	movs	r3, #1
  40d9e0:	684d      	ldr	r5, [r1, #4]
  40d9e2:	4093      	lsls	r3, r2
  40d9e4:	432b      	orrs	r3, r5
  40d9e6:	604b      	str	r3, [r1, #4]
  40d9e8:	4603      	mov	r3, r0
  40d9ea:	e7b0      	b.n	40d94e <_free_r+0xbe>
  40d9ec:	f043 0201 	orr.w	r2, r3, #1
  40d9f0:	614c      	str	r4, [r1, #20]
  40d9f2:	610c      	str	r4, [r1, #16]
  40d9f4:	60e5      	str	r5, [r4, #12]
  40d9f6:	60a5      	str	r5, [r4, #8]
  40d9f8:	6062      	str	r2, [r4, #4]
  40d9fa:	50e3      	str	r3, [r4, r3]
  40d9fc:	e78a      	b.n	40d914 <_free_r+0x84>
  40d9fe:	2a54      	cmp	r2, #84	; 0x54
  40da00:	d806      	bhi.n	40da10 <_free_r+0x180>
  40da02:	0b1a      	lsrs	r2, r3, #12
  40da04:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40da08:	00ff      	lsls	r7, r7, #3
  40da0a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40da0e:	e790      	b.n	40d932 <_free_r+0xa2>
  40da10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40da14:	d806      	bhi.n	40da24 <_free_r+0x194>
  40da16:	0bda      	lsrs	r2, r3, #15
  40da18:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40da1c:	00ff      	lsls	r7, r7, #3
  40da1e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40da22:	e786      	b.n	40d932 <_free_r+0xa2>
  40da24:	f240 5054 	movw	r0, #1364	; 0x554
  40da28:	4282      	cmp	r2, r0
  40da2a:	d806      	bhi.n	40da3a <_free_r+0x1aa>
  40da2c:	0c9a      	lsrs	r2, r3, #18
  40da2e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40da32:	00ff      	lsls	r7, r7, #3
  40da34:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40da38:	e77b      	b.n	40d932 <_free_r+0xa2>
  40da3a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40da3e:	257e      	movs	r5, #126	; 0x7e
  40da40:	e777      	b.n	40d932 <_free_r+0xa2>
  40da42:	f043 0101 	orr.w	r1, r3, #1
  40da46:	6061      	str	r1, [r4, #4]
  40da48:	6013      	str	r3, [r2, #0]
  40da4a:	e763      	b.n	40d914 <_free_r+0x84>
  40da4c:	20000454 	.word	0x20000454
  40da50:	2000045c 	.word	0x2000045c
  40da54:	20000860 	.word	0x20000860
  40da58:	2000acb8 	.word	0x2000acb8

0040da5c <__ascii_mbtowc>:
  40da5c:	b082      	sub	sp, #8
  40da5e:	b149      	cbz	r1, 40da74 <__ascii_mbtowc+0x18>
  40da60:	b15a      	cbz	r2, 40da7a <__ascii_mbtowc+0x1e>
  40da62:	b16b      	cbz	r3, 40da80 <__ascii_mbtowc+0x24>
  40da64:	7813      	ldrb	r3, [r2, #0]
  40da66:	600b      	str	r3, [r1, #0]
  40da68:	7812      	ldrb	r2, [r2, #0]
  40da6a:	1c10      	adds	r0, r2, #0
  40da6c:	bf18      	it	ne
  40da6e:	2001      	movne	r0, #1
  40da70:	b002      	add	sp, #8
  40da72:	4770      	bx	lr
  40da74:	a901      	add	r1, sp, #4
  40da76:	2a00      	cmp	r2, #0
  40da78:	d1f3      	bne.n	40da62 <__ascii_mbtowc+0x6>
  40da7a:	4610      	mov	r0, r2
  40da7c:	b002      	add	sp, #8
  40da7e:	4770      	bx	lr
  40da80:	f06f 0001 	mvn.w	r0, #1
  40da84:	e7f4      	b.n	40da70 <__ascii_mbtowc+0x14>
  40da86:	bf00      	nop

0040da88 <memmove>:
  40da88:	4288      	cmp	r0, r1
  40da8a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40da8c:	d90d      	bls.n	40daaa <memmove+0x22>
  40da8e:	188b      	adds	r3, r1, r2
  40da90:	4298      	cmp	r0, r3
  40da92:	d20a      	bcs.n	40daaa <memmove+0x22>
  40da94:	1884      	adds	r4, r0, r2
  40da96:	2a00      	cmp	r2, #0
  40da98:	d051      	beq.n	40db3e <memmove+0xb6>
  40da9a:	4622      	mov	r2, r4
  40da9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40daa0:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40daa4:	4299      	cmp	r1, r3
  40daa6:	d1f9      	bne.n	40da9c <memmove+0x14>
  40daa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40daaa:	2a0f      	cmp	r2, #15
  40daac:	d948      	bls.n	40db40 <memmove+0xb8>
  40daae:	ea41 0300 	orr.w	r3, r1, r0
  40dab2:	079b      	lsls	r3, r3, #30
  40dab4:	d146      	bne.n	40db44 <memmove+0xbc>
  40dab6:	f100 0410 	add.w	r4, r0, #16
  40daba:	f101 0310 	add.w	r3, r1, #16
  40dabe:	4615      	mov	r5, r2
  40dac0:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40dac4:	f844 6c10 	str.w	r6, [r4, #-16]
  40dac8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40dacc:	f844 6c0c 	str.w	r6, [r4, #-12]
  40dad0:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40dad4:	f844 6c08 	str.w	r6, [r4, #-8]
  40dad8:	3d10      	subs	r5, #16
  40dada:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40dade:	f844 6c04 	str.w	r6, [r4, #-4]
  40dae2:	2d0f      	cmp	r5, #15
  40dae4:	f103 0310 	add.w	r3, r3, #16
  40dae8:	f104 0410 	add.w	r4, r4, #16
  40daec:	d8e8      	bhi.n	40dac0 <memmove+0x38>
  40daee:	f1a2 0310 	sub.w	r3, r2, #16
  40daf2:	f023 030f 	bic.w	r3, r3, #15
  40daf6:	f002 0e0f 	and.w	lr, r2, #15
  40dafa:	3310      	adds	r3, #16
  40dafc:	f1be 0f03 	cmp.w	lr, #3
  40db00:	4419      	add	r1, r3
  40db02:	4403      	add	r3, r0
  40db04:	d921      	bls.n	40db4a <memmove+0xc2>
  40db06:	1f1e      	subs	r6, r3, #4
  40db08:	460d      	mov	r5, r1
  40db0a:	4674      	mov	r4, lr
  40db0c:	3c04      	subs	r4, #4
  40db0e:	f855 7b04 	ldr.w	r7, [r5], #4
  40db12:	f846 7f04 	str.w	r7, [r6, #4]!
  40db16:	2c03      	cmp	r4, #3
  40db18:	d8f8      	bhi.n	40db0c <memmove+0x84>
  40db1a:	f1ae 0404 	sub.w	r4, lr, #4
  40db1e:	f024 0403 	bic.w	r4, r4, #3
  40db22:	3404      	adds	r4, #4
  40db24:	4421      	add	r1, r4
  40db26:	4423      	add	r3, r4
  40db28:	f002 0203 	and.w	r2, r2, #3
  40db2c:	b162      	cbz	r2, 40db48 <memmove+0xc0>
  40db2e:	3b01      	subs	r3, #1
  40db30:	440a      	add	r2, r1
  40db32:	f811 4b01 	ldrb.w	r4, [r1], #1
  40db36:	f803 4f01 	strb.w	r4, [r3, #1]!
  40db3a:	428a      	cmp	r2, r1
  40db3c:	d1f9      	bne.n	40db32 <memmove+0xaa>
  40db3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40db40:	4603      	mov	r3, r0
  40db42:	e7f3      	b.n	40db2c <memmove+0xa4>
  40db44:	4603      	mov	r3, r0
  40db46:	e7f2      	b.n	40db2e <memmove+0xa6>
  40db48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40db4a:	4672      	mov	r2, lr
  40db4c:	e7ee      	b.n	40db2c <memmove+0xa4>
  40db4e:	bf00      	nop

0040db50 <_realloc_r>:
  40db50:	2900      	cmp	r1, #0
  40db52:	f000 8095 	beq.w	40dc80 <_realloc_r+0x130>
  40db56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40db5a:	460d      	mov	r5, r1
  40db5c:	4616      	mov	r6, r2
  40db5e:	b083      	sub	sp, #12
  40db60:	4680      	mov	r8, r0
  40db62:	f106 070b 	add.w	r7, r6, #11
  40db66:	f7ff fa1b 	bl	40cfa0 <__malloc_lock>
  40db6a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40db6e:	2f16      	cmp	r7, #22
  40db70:	f02e 0403 	bic.w	r4, lr, #3
  40db74:	f1a5 0908 	sub.w	r9, r5, #8
  40db78:	d83c      	bhi.n	40dbf4 <_realloc_r+0xa4>
  40db7a:	2210      	movs	r2, #16
  40db7c:	4617      	mov	r7, r2
  40db7e:	42be      	cmp	r6, r7
  40db80:	d83d      	bhi.n	40dbfe <_realloc_r+0xae>
  40db82:	4294      	cmp	r4, r2
  40db84:	da43      	bge.n	40dc0e <_realloc_r+0xbe>
  40db86:	4bc4      	ldr	r3, [pc, #784]	; (40de98 <_realloc_r+0x348>)
  40db88:	6899      	ldr	r1, [r3, #8]
  40db8a:	eb09 0004 	add.w	r0, r9, r4
  40db8e:	4288      	cmp	r0, r1
  40db90:	f000 80b4 	beq.w	40dcfc <_realloc_r+0x1ac>
  40db94:	6843      	ldr	r3, [r0, #4]
  40db96:	f023 0101 	bic.w	r1, r3, #1
  40db9a:	4401      	add	r1, r0
  40db9c:	6849      	ldr	r1, [r1, #4]
  40db9e:	07c9      	lsls	r1, r1, #31
  40dba0:	d54c      	bpl.n	40dc3c <_realloc_r+0xec>
  40dba2:	f01e 0f01 	tst.w	lr, #1
  40dba6:	f000 809b 	beq.w	40dce0 <_realloc_r+0x190>
  40dbaa:	4631      	mov	r1, r6
  40dbac:	4640      	mov	r0, r8
  40dbae:	f7fe fef5 	bl	40c99c <_malloc_r>
  40dbb2:	4606      	mov	r6, r0
  40dbb4:	2800      	cmp	r0, #0
  40dbb6:	d03a      	beq.n	40dc2e <_realloc_r+0xde>
  40dbb8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40dbbc:	f023 0301 	bic.w	r3, r3, #1
  40dbc0:	444b      	add	r3, r9
  40dbc2:	f1a0 0208 	sub.w	r2, r0, #8
  40dbc6:	429a      	cmp	r2, r3
  40dbc8:	f000 8121 	beq.w	40de0e <_realloc_r+0x2be>
  40dbcc:	1f22      	subs	r2, r4, #4
  40dbce:	2a24      	cmp	r2, #36	; 0x24
  40dbd0:	f200 8107 	bhi.w	40dde2 <_realloc_r+0x292>
  40dbd4:	2a13      	cmp	r2, #19
  40dbd6:	f200 80db 	bhi.w	40dd90 <_realloc_r+0x240>
  40dbda:	4603      	mov	r3, r0
  40dbdc:	462a      	mov	r2, r5
  40dbde:	6811      	ldr	r1, [r2, #0]
  40dbe0:	6019      	str	r1, [r3, #0]
  40dbe2:	6851      	ldr	r1, [r2, #4]
  40dbe4:	6059      	str	r1, [r3, #4]
  40dbe6:	6892      	ldr	r2, [r2, #8]
  40dbe8:	609a      	str	r2, [r3, #8]
  40dbea:	4629      	mov	r1, r5
  40dbec:	4640      	mov	r0, r8
  40dbee:	f7ff fe4f 	bl	40d890 <_free_r>
  40dbf2:	e01c      	b.n	40dc2e <_realloc_r+0xde>
  40dbf4:	f027 0707 	bic.w	r7, r7, #7
  40dbf8:	2f00      	cmp	r7, #0
  40dbfa:	463a      	mov	r2, r7
  40dbfc:	dabf      	bge.n	40db7e <_realloc_r+0x2e>
  40dbfe:	2600      	movs	r6, #0
  40dc00:	230c      	movs	r3, #12
  40dc02:	4630      	mov	r0, r6
  40dc04:	f8c8 3000 	str.w	r3, [r8]
  40dc08:	b003      	add	sp, #12
  40dc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dc0e:	462e      	mov	r6, r5
  40dc10:	1be3      	subs	r3, r4, r7
  40dc12:	2b0f      	cmp	r3, #15
  40dc14:	d81e      	bhi.n	40dc54 <_realloc_r+0x104>
  40dc16:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40dc1a:	f003 0301 	and.w	r3, r3, #1
  40dc1e:	4323      	orrs	r3, r4
  40dc20:	444c      	add	r4, r9
  40dc22:	f8c9 3004 	str.w	r3, [r9, #4]
  40dc26:	6863      	ldr	r3, [r4, #4]
  40dc28:	f043 0301 	orr.w	r3, r3, #1
  40dc2c:	6063      	str	r3, [r4, #4]
  40dc2e:	4640      	mov	r0, r8
  40dc30:	f7ff f9bc 	bl	40cfac <__malloc_unlock>
  40dc34:	4630      	mov	r0, r6
  40dc36:	b003      	add	sp, #12
  40dc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dc3c:	f023 0303 	bic.w	r3, r3, #3
  40dc40:	18e1      	adds	r1, r4, r3
  40dc42:	4291      	cmp	r1, r2
  40dc44:	db1f      	blt.n	40dc86 <_realloc_r+0x136>
  40dc46:	68c3      	ldr	r3, [r0, #12]
  40dc48:	6882      	ldr	r2, [r0, #8]
  40dc4a:	462e      	mov	r6, r5
  40dc4c:	60d3      	str	r3, [r2, #12]
  40dc4e:	460c      	mov	r4, r1
  40dc50:	609a      	str	r2, [r3, #8]
  40dc52:	e7dd      	b.n	40dc10 <_realloc_r+0xc0>
  40dc54:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40dc58:	eb09 0107 	add.w	r1, r9, r7
  40dc5c:	f002 0201 	and.w	r2, r2, #1
  40dc60:	444c      	add	r4, r9
  40dc62:	f043 0301 	orr.w	r3, r3, #1
  40dc66:	4317      	orrs	r7, r2
  40dc68:	f8c9 7004 	str.w	r7, [r9, #4]
  40dc6c:	604b      	str	r3, [r1, #4]
  40dc6e:	6863      	ldr	r3, [r4, #4]
  40dc70:	f043 0301 	orr.w	r3, r3, #1
  40dc74:	3108      	adds	r1, #8
  40dc76:	6063      	str	r3, [r4, #4]
  40dc78:	4640      	mov	r0, r8
  40dc7a:	f7ff fe09 	bl	40d890 <_free_r>
  40dc7e:	e7d6      	b.n	40dc2e <_realloc_r+0xde>
  40dc80:	4611      	mov	r1, r2
  40dc82:	f7fe be8b 	b.w	40c99c <_malloc_r>
  40dc86:	f01e 0f01 	tst.w	lr, #1
  40dc8a:	d18e      	bne.n	40dbaa <_realloc_r+0x5a>
  40dc8c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40dc90:	eba9 0a01 	sub.w	sl, r9, r1
  40dc94:	f8da 1004 	ldr.w	r1, [sl, #4]
  40dc98:	f021 0103 	bic.w	r1, r1, #3
  40dc9c:	440b      	add	r3, r1
  40dc9e:	4423      	add	r3, r4
  40dca0:	4293      	cmp	r3, r2
  40dca2:	db25      	blt.n	40dcf0 <_realloc_r+0x1a0>
  40dca4:	68c2      	ldr	r2, [r0, #12]
  40dca6:	6881      	ldr	r1, [r0, #8]
  40dca8:	4656      	mov	r6, sl
  40dcaa:	60ca      	str	r2, [r1, #12]
  40dcac:	6091      	str	r1, [r2, #8]
  40dcae:	f8da 100c 	ldr.w	r1, [sl, #12]
  40dcb2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40dcb6:	1f22      	subs	r2, r4, #4
  40dcb8:	2a24      	cmp	r2, #36	; 0x24
  40dcba:	60c1      	str	r1, [r0, #12]
  40dcbc:	6088      	str	r0, [r1, #8]
  40dcbe:	f200 8094 	bhi.w	40ddea <_realloc_r+0x29a>
  40dcc2:	2a13      	cmp	r2, #19
  40dcc4:	d96f      	bls.n	40dda6 <_realloc_r+0x256>
  40dcc6:	6829      	ldr	r1, [r5, #0]
  40dcc8:	f8ca 1008 	str.w	r1, [sl, #8]
  40dccc:	6869      	ldr	r1, [r5, #4]
  40dcce:	f8ca 100c 	str.w	r1, [sl, #12]
  40dcd2:	2a1b      	cmp	r2, #27
  40dcd4:	f200 80a2 	bhi.w	40de1c <_realloc_r+0x2cc>
  40dcd8:	3508      	adds	r5, #8
  40dcda:	f10a 0210 	add.w	r2, sl, #16
  40dcde:	e063      	b.n	40dda8 <_realloc_r+0x258>
  40dce0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40dce4:	eba9 0a03 	sub.w	sl, r9, r3
  40dce8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40dcec:	f021 0103 	bic.w	r1, r1, #3
  40dcf0:	1863      	adds	r3, r4, r1
  40dcf2:	4293      	cmp	r3, r2
  40dcf4:	f6ff af59 	blt.w	40dbaa <_realloc_r+0x5a>
  40dcf8:	4656      	mov	r6, sl
  40dcfa:	e7d8      	b.n	40dcae <_realloc_r+0x15e>
  40dcfc:	6841      	ldr	r1, [r0, #4]
  40dcfe:	f021 0b03 	bic.w	fp, r1, #3
  40dd02:	44a3      	add	fp, r4
  40dd04:	f107 0010 	add.w	r0, r7, #16
  40dd08:	4583      	cmp	fp, r0
  40dd0a:	da56      	bge.n	40ddba <_realloc_r+0x26a>
  40dd0c:	f01e 0f01 	tst.w	lr, #1
  40dd10:	f47f af4b 	bne.w	40dbaa <_realloc_r+0x5a>
  40dd14:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40dd18:	eba9 0a01 	sub.w	sl, r9, r1
  40dd1c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40dd20:	f021 0103 	bic.w	r1, r1, #3
  40dd24:	448b      	add	fp, r1
  40dd26:	4558      	cmp	r0, fp
  40dd28:	dce2      	bgt.n	40dcf0 <_realloc_r+0x1a0>
  40dd2a:	4656      	mov	r6, sl
  40dd2c:	f8da 100c 	ldr.w	r1, [sl, #12]
  40dd30:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40dd34:	1f22      	subs	r2, r4, #4
  40dd36:	2a24      	cmp	r2, #36	; 0x24
  40dd38:	60c1      	str	r1, [r0, #12]
  40dd3a:	6088      	str	r0, [r1, #8]
  40dd3c:	f200 808f 	bhi.w	40de5e <_realloc_r+0x30e>
  40dd40:	2a13      	cmp	r2, #19
  40dd42:	f240 808a 	bls.w	40de5a <_realloc_r+0x30a>
  40dd46:	6829      	ldr	r1, [r5, #0]
  40dd48:	f8ca 1008 	str.w	r1, [sl, #8]
  40dd4c:	6869      	ldr	r1, [r5, #4]
  40dd4e:	f8ca 100c 	str.w	r1, [sl, #12]
  40dd52:	2a1b      	cmp	r2, #27
  40dd54:	f200 808a 	bhi.w	40de6c <_realloc_r+0x31c>
  40dd58:	3508      	adds	r5, #8
  40dd5a:	f10a 0210 	add.w	r2, sl, #16
  40dd5e:	6829      	ldr	r1, [r5, #0]
  40dd60:	6011      	str	r1, [r2, #0]
  40dd62:	6869      	ldr	r1, [r5, #4]
  40dd64:	6051      	str	r1, [r2, #4]
  40dd66:	68a9      	ldr	r1, [r5, #8]
  40dd68:	6091      	str	r1, [r2, #8]
  40dd6a:	eb0a 0107 	add.w	r1, sl, r7
  40dd6e:	ebab 0207 	sub.w	r2, fp, r7
  40dd72:	f042 0201 	orr.w	r2, r2, #1
  40dd76:	6099      	str	r1, [r3, #8]
  40dd78:	604a      	str	r2, [r1, #4]
  40dd7a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40dd7e:	f003 0301 	and.w	r3, r3, #1
  40dd82:	431f      	orrs	r7, r3
  40dd84:	4640      	mov	r0, r8
  40dd86:	f8ca 7004 	str.w	r7, [sl, #4]
  40dd8a:	f7ff f90f 	bl	40cfac <__malloc_unlock>
  40dd8e:	e751      	b.n	40dc34 <_realloc_r+0xe4>
  40dd90:	682b      	ldr	r3, [r5, #0]
  40dd92:	6003      	str	r3, [r0, #0]
  40dd94:	686b      	ldr	r3, [r5, #4]
  40dd96:	6043      	str	r3, [r0, #4]
  40dd98:	2a1b      	cmp	r2, #27
  40dd9a:	d82d      	bhi.n	40ddf8 <_realloc_r+0x2a8>
  40dd9c:	f100 0308 	add.w	r3, r0, #8
  40dda0:	f105 0208 	add.w	r2, r5, #8
  40dda4:	e71b      	b.n	40dbde <_realloc_r+0x8e>
  40dda6:	4632      	mov	r2, r6
  40dda8:	6829      	ldr	r1, [r5, #0]
  40ddaa:	6011      	str	r1, [r2, #0]
  40ddac:	6869      	ldr	r1, [r5, #4]
  40ddae:	6051      	str	r1, [r2, #4]
  40ddb0:	68a9      	ldr	r1, [r5, #8]
  40ddb2:	6091      	str	r1, [r2, #8]
  40ddb4:	461c      	mov	r4, r3
  40ddb6:	46d1      	mov	r9, sl
  40ddb8:	e72a      	b.n	40dc10 <_realloc_r+0xc0>
  40ddba:	eb09 0107 	add.w	r1, r9, r7
  40ddbe:	ebab 0b07 	sub.w	fp, fp, r7
  40ddc2:	f04b 0201 	orr.w	r2, fp, #1
  40ddc6:	6099      	str	r1, [r3, #8]
  40ddc8:	604a      	str	r2, [r1, #4]
  40ddca:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40ddce:	f003 0301 	and.w	r3, r3, #1
  40ddd2:	431f      	orrs	r7, r3
  40ddd4:	4640      	mov	r0, r8
  40ddd6:	f845 7c04 	str.w	r7, [r5, #-4]
  40ddda:	f7ff f8e7 	bl	40cfac <__malloc_unlock>
  40ddde:	462e      	mov	r6, r5
  40dde0:	e728      	b.n	40dc34 <_realloc_r+0xe4>
  40dde2:	4629      	mov	r1, r5
  40dde4:	f7ff fe50 	bl	40da88 <memmove>
  40dde8:	e6ff      	b.n	40dbea <_realloc_r+0x9a>
  40ddea:	4629      	mov	r1, r5
  40ddec:	4630      	mov	r0, r6
  40ddee:	461c      	mov	r4, r3
  40ddf0:	46d1      	mov	r9, sl
  40ddf2:	f7ff fe49 	bl	40da88 <memmove>
  40ddf6:	e70b      	b.n	40dc10 <_realloc_r+0xc0>
  40ddf8:	68ab      	ldr	r3, [r5, #8]
  40ddfa:	6083      	str	r3, [r0, #8]
  40ddfc:	68eb      	ldr	r3, [r5, #12]
  40ddfe:	60c3      	str	r3, [r0, #12]
  40de00:	2a24      	cmp	r2, #36	; 0x24
  40de02:	d017      	beq.n	40de34 <_realloc_r+0x2e4>
  40de04:	f100 0310 	add.w	r3, r0, #16
  40de08:	f105 0210 	add.w	r2, r5, #16
  40de0c:	e6e7      	b.n	40dbde <_realloc_r+0x8e>
  40de0e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40de12:	f023 0303 	bic.w	r3, r3, #3
  40de16:	441c      	add	r4, r3
  40de18:	462e      	mov	r6, r5
  40de1a:	e6f9      	b.n	40dc10 <_realloc_r+0xc0>
  40de1c:	68a9      	ldr	r1, [r5, #8]
  40de1e:	f8ca 1010 	str.w	r1, [sl, #16]
  40de22:	68e9      	ldr	r1, [r5, #12]
  40de24:	f8ca 1014 	str.w	r1, [sl, #20]
  40de28:	2a24      	cmp	r2, #36	; 0x24
  40de2a:	d00c      	beq.n	40de46 <_realloc_r+0x2f6>
  40de2c:	3510      	adds	r5, #16
  40de2e:	f10a 0218 	add.w	r2, sl, #24
  40de32:	e7b9      	b.n	40dda8 <_realloc_r+0x258>
  40de34:	692b      	ldr	r3, [r5, #16]
  40de36:	6103      	str	r3, [r0, #16]
  40de38:	696b      	ldr	r3, [r5, #20]
  40de3a:	6143      	str	r3, [r0, #20]
  40de3c:	f105 0218 	add.w	r2, r5, #24
  40de40:	f100 0318 	add.w	r3, r0, #24
  40de44:	e6cb      	b.n	40dbde <_realloc_r+0x8e>
  40de46:	692a      	ldr	r2, [r5, #16]
  40de48:	f8ca 2018 	str.w	r2, [sl, #24]
  40de4c:	696a      	ldr	r2, [r5, #20]
  40de4e:	f8ca 201c 	str.w	r2, [sl, #28]
  40de52:	3518      	adds	r5, #24
  40de54:	f10a 0220 	add.w	r2, sl, #32
  40de58:	e7a6      	b.n	40dda8 <_realloc_r+0x258>
  40de5a:	4632      	mov	r2, r6
  40de5c:	e77f      	b.n	40dd5e <_realloc_r+0x20e>
  40de5e:	4629      	mov	r1, r5
  40de60:	4630      	mov	r0, r6
  40de62:	9301      	str	r3, [sp, #4]
  40de64:	f7ff fe10 	bl	40da88 <memmove>
  40de68:	9b01      	ldr	r3, [sp, #4]
  40de6a:	e77e      	b.n	40dd6a <_realloc_r+0x21a>
  40de6c:	68a9      	ldr	r1, [r5, #8]
  40de6e:	f8ca 1010 	str.w	r1, [sl, #16]
  40de72:	68e9      	ldr	r1, [r5, #12]
  40de74:	f8ca 1014 	str.w	r1, [sl, #20]
  40de78:	2a24      	cmp	r2, #36	; 0x24
  40de7a:	d003      	beq.n	40de84 <_realloc_r+0x334>
  40de7c:	3510      	adds	r5, #16
  40de7e:	f10a 0218 	add.w	r2, sl, #24
  40de82:	e76c      	b.n	40dd5e <_realloc_r+0x20e>
  40de84:	692a      	ldr	r2, [r5, #16]
  40de86:	f8ca 2018 	str.w	r2, [sl, #24]
  40de8a:	696a      	ldr	r2, [r5, #20]
  40de8c:	f8ca 201c 	str.w	r2, [sl, #28]
  40de90:	3518      	adds	r5, #24
  40de92:	f10a 0220 	add.w	r2, sl, #32
  40de96:	e762      	b.n	40dd5e <_realloc_r+0x20e>
  40de98:	20000454 	.word	0x20000454

0040de9c <__ascii_wctomb>:
  40de9c:	b121      	cbz	r1, 40dea8 <__ascii_wctomb+0xc>
  40de9e:	2aff      	cmp	r2, #255	; 0xff
  40dea0:	d804      	bhi.n	40deac <__ascii_wctomb+0x10>
  40dea2:	700a      	strb	r2, [r1, #0]
  40dea4:	2001      	movs	r0, #1
  40dea6:	4770      	bx	lr
  40dea8:	4608      	mov	r0, r1
  40deaa:	4770      	bx	lr
  40deac:	238a      	movs	r3, #138	; 0x8a
  40deae:	6003      	str	r3, [r0, #0]
  40deb0:	f04f 30ff 	mov.w	r0, #4294967295
  40deb4:	4770      	bx	lr
  40deb6:	bf00      	nop

0040deb8 <__aeabi_drsub>:
  40deb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40debc:	e002      	b.n	40dec4 <__adddf3>
  40debe:	bf00      	nop

0040dec0 <__aeabi_dsub>:
  40dec0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040dec4 <__adddf3>:
  40dec4:	b530      	push	{r4, r5, lr}
  40dec6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40deca:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40dece:	ea94 0f05 	teq	r4, r5
  40ded2:	bf08      	it	eq
  40ded4:	ea90 0f02 	teqeq	r0, r2
  40ded8:	bf1f      	itttt	ne
  40deda:	ea54 0c00 	orrsne.w	ip, r4, r0
  40dede:	ea55 0c02 	orrsne.w	ip, r5, r2
  40dee2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40dee6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40deea:	f000 80e2 	beq.w	40e0b2 <__adddf3+0x1ee>
  40deee:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40def2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40def6:	bfb8      	it	lt
  40def8:	426d      	neglt	r5, r5
  40defa:	dd0c      	ble.n	40df16 <__adddf3+0x52>
  40defc:	442c      	add	r4, r5
  40defe:	ea80 0202 	eor.w	r2, r0, r2
  40df02:	ea81 0303 	eor.w	r3, r1, r3
  40df06:	ea82 0000 	eor.w	r0, r2, r0
  40df0a:	ea83 0101 	eor.w	r1, r3, r1
  40df0e:	ea80 0202 	eor.w	r2, r0, r2
  40df12:	ea81 0303 	eor.w	r3, r1, r3
  40df16:	2d36      	cmp	r5, #54	; 0x36
  40df18:	bf88      	it	hi
  40df1a:	bd30      	pophi	{r4, r5, pc}
  40df1c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40df20:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40df24:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40df28:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40df2c:	d002      	beq.n	40df34 <__adddf3+0x70>
  40df2e:	4240      	negs	r0, r0
  40df30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40df34:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40df38:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40df3c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40df40:	d002      	beq.n	40df48 <__adddf3+0x84>
  40df42:	4252      	negs	r2, r2
  40df44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40df48:	ea94 0f05 	teq	r4, r5
  40df4c:	f000 80a7 	beq.w	40e09e <__adddf3+0x1da>
  40df50:	f1a4 0401 	sub.w	r4, r4, #1
  40df54:	f1d5 0e20 	rsbs	lr, r5, #32
  40df58:	db0d      	blt.n	40df76 <__adddf3+0xb2>
  40df5a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40df5e:	fa22 f205 	lsr.w	r2, r2, r5
  40df62:	1880      	adds	r0, r0, r2
  40df64:	f141 0100 	adc.w	r1, r1, #0
  40df68:	fa03 f20e 	lsl.w	r2, r3, lr
  40df6c:	1880      	adds	r0, r0, r2
  40df6e:	fa43 f305 	asr.w	r3, r3, r5
  40df72:	4159      	adcs	r1, r3
  40df74:	e00e      	b.n	40df94 <__adddf3+0xd0>
  40df76:	f1a5 0520 	sub.w	r5, r5, #32
  40df7a:	f10e 0e20 	add.w	lr, lr, #32
  40df7e:	2a01      	cmp	r2, #1
  40df80:	fa03 fc0e 	lsl.w	ip, r3, lr
  40df84:	bf28      	it	cs
  40df86:	f04c 0c02 	orrcs.w	ip, ip, #2
  40df8a:	fa43 f305 	asr.w	r3, r3, r5
  40df8e:	18c0      	adds	r0, r0, r3
  40df90:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40df94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40df98:	d507      	bpl.n	40dfaa <__adddf3+0xe6>
  40df9a:	f04f 0e00 	mov.w	lr, #0
  40df9e:	f1dc 0c00 	rsbs	ip, ip, #0
  40dfa2:	eb7e 0000 	sbcs.w	r0, lr, r0
  40dfa6:	eb6e 0101 	sbc.w	r1, lr, r1
  40dfaa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40dfae:	d31b      	bcc.n	40dfe8 <__adddf3+0x124>
  40dfb0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40dfb4:	d30c      	bcc.n	40dfd0 <__adddf3+0x10c>
  40dfb6:	0849      	lsrs	r1, r1, #1
  40dfb8:	ea5f 0030 	movs.w	r0, r0, rrx
  40dfbc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40dfc0:	f104 0401 	add.w	r4, r4, #1
  40dfc4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40dfc8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40dfcc:	f080 809a 	bcs.w	40e104 <__adddf3+0x240>
  40dfd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40dfd4:	bf08      	it	eq
  40dfd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40dfda:	f150 0000 	adcs.w	r0, r0, #0
  40dfde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40dfe2:	ea41 0105 	orr.w	r1, r1, r5
  40dfe6:	bd30      	pop	{r4, r5, pc}
  40dfe8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40dfec:	4140      	adcs	r0, r0
  40dfee:	eb41 0101 	adc.w	r1, r1, r1
  40dff2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40dff6:	f1a4 0401 	sub.w	r4, r4, #1
  40dffa:	d1e9      	bne.n	40dfd0 <__adddf3+0x10c>
  40dffc:	f091 0f00 	teq	r1, #0
  40e000:	bf04      	itt	eq
  40e002:	4601      	moveq	r1, r0
  40e004:	2000      	moveq	r0, #0
  40e006:	fab1 f381 	clz	r3, r1
  40e00a:	bf08      	it	eq
  40e00c:	3320      	addeq	r3, #32
  40e00e:	f1a3 030b 	sub.w	r3, r3, #11
  40e012:	f1b3 0220 	subs.w	r2, r3, #32
  40e016:	da0c      	bge.n	40e032 <__adddf3+0x16e>
  40e018:	320c      	adds	r2, #12
  40e01a:	dd08      	ble.n	40e02e <__adddf3+0x16a>
  40e01c:	f102 0c14 	add.w	ip, r2, #20
  40e020:	f1c2 020c 	rsb	r2, r2, #12
  40e024:	fa01 f00c 	lsl.w	r0, r1, ip
  40e028:	fa21 f102 	lsr.w	r1, r1, r2
  40e02c:	e00c      	b.n	40e048 <__adddf3+0x184>
  40e02e:	f102 0214 	add.w	r2, r2, #20
  40e032:	bfd8      	it	le
  40e034:	f1c2 0c20 	rsble	ip, r2, #32
  40e038:	fa01 f102 	lsl.w	r1, r1, r2
  40e03c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40e040:	bfdc      	itt	le
  40e042:	ea41 010c 	orrle.w	r1, r1, ip
  40e046:	4090      	lslle	r0, r2
  40e048:	1ae4      	subs	r4, r4, r3
  40e04a:	bfa2      	ittt	ge
  40e04c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40e050:	4329      	orrge	r1, r5
  40e052:	bd30      	popge	{r4, r5, pc}
  40e054:	ea6f 0404 	mvn.w	r4, r4
  40e058:	3c1f      	subs	r4, #31
  40e05a:	da1c      	bge.n	40e096 <__adddf3+0x1d2>
  40e05c:	340c      	adds	r4, #12
  40e05e:	dc0e      	bgt.n	40e07e <__adddf3+0x1ba>
  40e060:	f104 0414 	add.w	r4, r4, #20
  40e064:	f1c4 0220 	rsb	r2, r4, #32
  40e068:	fa20 f004 	lsr.w	r0, r0, r4
  40e06c:	fa01 f302 	lsl.w	r3, r1, r2
  40e070:	ea40 0003 	orr.w	r0, r0, r3
  40e074:	fa21 f304 	lsr.w	r3, r1, r4
  40e078:	ea45 0103 	orr.w	r1, r5, r3
  40e07c:	bd30      	pop	{r4, r5, pc}
  40e07e:	f1c4 040c 	rsb	r4, r4, #12
  40e082:	f1c4 0220 	rsb	r2, r4, #32
  40e086:	fa20 f002 	lsr.w	r0, r0, r2
  40e08a:	fa01 f304 	lsl.w	r3, r1, r4
  40e08e:	ea40 0003 	orr.w	r0, r0, r3
  40e092:	4629      	mov	r1, r5
  40e094:	bd30      	pop	{r4, r5, pc}
  40e096:	fa21 f004 	lsr.w	r0, r1, r4
  40e09a:	4629      	mov	r1, r5
  40e09c:	bd30      	pop	{r4, r5, pc}
  40e09e:	f094 0f00 	teq	r4, #0
  40e0a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40e0a6:	bf06      	itte	eq
  40e0a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40e0ac:	3401      	addeq	r4, #1
  40e0ae:	3d01      	subne	r5, #1
  40e0b0:	e74e      	b.n	40df50 <__adddf3+0x8c>
  40e0b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40e0b6:	bf18      	it	ne
  40e0b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40e0bc:	d029      	beq.n	40e112 <__adddf3+0x24e>
  40e0be:	ea94 0f05 	teq	r4, r5
  40e0c2:	bf08      	it	eq
  40e0c4:	ea90 0f02 	teqeq	r0, r2
  40e0c8:	d005      	beq.n	40e0d6 <__adddf3+0x212>
  40e0ca:	ea54 0c00 	orrs.w	ip, r4, r0
  40e0ce:	bf04      	itt	eq
  40e0d0:	4619      	moveq	r1, r3
  40e0d2:	4610      	moveq	r0, r2
  40e0d4:	bd30      	pop	{r4, r5, pc}
  40e0d6:	ea91 0f03 	teq	r1, r3
  40e0da:	bf1e      	ittt	ne
  40e0dc:	2100      	movne	r1, #0
  40e0de:	2000      	movne	r0, #0
  40e0e0:	bd30      	popne	{r4, r5, pc}
  40e0e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40e0e6:	d105      	bne.n	40e0f4 <__adddf3+0x230>
  40e0e8:	0040      	lsls	r0, r0, #1
  40e0ea:	4149      	adcs	r1, r1
  40e0ec:	bf28      	it	cs
  40e0ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40e0f2:	bd30      	pop	{r4, r5, pc}
  40e0f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40e0f8:	bf3c      	itt	cc
  40e0fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40e0fe:	bd30      	popcc	{r4, r5, pc}
  40e100:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40e104:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40e108:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40e10c:	f04f 0000 	mov.w	r0, #0
  40e110:	bd30      	pop	{r4, r5, pc}
  40e112:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40e116:	bf1a      	itte	ne
  40e118:	4619      	movne	r1, r3
  40e11a:	4610      	movne	r0, r2
  40e11c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40e120:	bf1c      	itt	ne
  40e122:	460b      	movne	r3, r1
  40e124:	4602      	movne	r2, r0
  40e126:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40e12a:	bf06      	itte	eq
  40e12c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40e130:	ea91 0f03 	teqeq	r1, r3
  40e134:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40e138:	bd30      	pop	{r4, r5, pc}
  40e13a:	bf00      	nop

0040e13c <__aeabi_ui2d>:
  40e13c:	f090 0f00 	teq	r0, #0
  40e140:	bf04      	itt	eq
  40e142:	2100      	moveq	r1, #0
  40e144:	4770      	bxeq	lr
  40e146:	b530      	push	{r4, r5, lr}
  40e148:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40e14c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40e150:	f04f 0500 	mov.w	r5, #0
  40e154:	f04f 0100 	mov.w	r1, #0
  40e158:	e750      	b.n	40dffc <__adddf3+0x138>
  40e15a:	bf00      	nop

0040e15c <__aeabi_i2d>:
  40e15c:	f090 0f00 	teq	r0, #0
  40e160:	bf04      	itt	eq
  40e162:	2100      	moveq	r1, #0
  40e164:	4770      	bxeq	lr
  40e166:	b530      	push	{r4, r5, lr}
  40e168:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40e16c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40e170:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40e174:	bf48      	it	mi
  40e176:	4240      	negmi	r0, r0
  40e178:	f04f 0100 	mov.w	r1, #0
  40e17c:	e73e      	b.n	40dffc <__adddf3+0x138>
  40e17e:	bf00      	nop

0040e180 <__aeabi_f2d>:
  40e180:	0042      	lsls	r2, r0, #1
  40e182:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40e186:	ea4f 0131 	mov.w	r1, r1, rrx
  40e18a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40e18e:	bf1f      	itttt	ne
  40e190:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40e194:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40e198:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40e19c:	4770      	bxne	lr
  40e19e:	f092 0f00 	teq	r2, #0
  40e1a2:	bf14      	ite	ne
  40e1a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40e1a8:	4770      	bxeq	lr
  40e1aa:	b530      	push	{r4, r5, lr}
  40e1ac:	f44f 7460 	mov.w	r4, #896	; 0x380
  40e1b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40e1b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40e1b8:	e720      	b.n	40dffc <__adddf3+0x138>
  40e1ba:	bf00      	nop

0040e1bc <__aeabi_ul2d>:
  40e1bc:	ea50 0201 	orrs.w	r2, r0, r1
  40e1c0:	bf08      	it	eq
  40e1c2:	4770      	bxeq	lr
  40e1c4:	b530      	push	{r4, r5, lr}
  40e1c6:	f04f 0500 	mov.w	r5, #0
  40e1ca:	e00a      	b.n	40e1e2 <__aeabi_l2d+0x16>

0040e1cc <__aeabi_l2d>:
  40e1cc:	ea50 0201 	orrs.w	r2, r0, r1
  40e1d0:	bf08      	it	eq
  40e1d2:	4770      	bxeq	lr
  40e1d4:	b530      	push	{r4, r5, lr}
  40e1d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40e1da:	d502      	bpl.n	40e1e2 <__aeabi_l2d+0x16>
  40e1dc:	4240      	negs	r0, r0
  40e1de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40e1e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40e1e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40e1ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40e1ee:	f43f aedc 	beq.w	40dfaa <__adddf3+0xe6>
  40e1f2:	f04f 0203 	mov.w	r2, #3
  40e1f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40e1fa:	bf18      	it	ne
  40e1fc:	3203      	addne	r2, #3
  40e1fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40e202:	bf18      	it	ne
  40e204:	3203      	addne	r2, #3
  40e206:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40e20a:	f1c2 0320 	rsb	r3, r2, #32
  40e20e:	fa00 fc03 	lsl.w	ip, r0, r3
  40e212:	fa20 f002 	lsr.w	r0, r0, r2
  40e216:	fa01 fe03 	lsl.w	lr, r1, r3
  40e21a:	ea40 000e 	orr.w	r0, r0, lr
  40e21e:	fa21 f102 	lsr.w	r1, r1, r2
  40e222:	4414      	add	r4, r2
  40e224:	e6c1      	b.n	40dfaa <__adddf3+0xe6>
  40e226:	bf00      	nop

0040e228 <__aeabi_dmul>:
  40e228:	b570      	push	{r4, r5, r6, lr}
  40e22a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40e22e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40e232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40e236:	bf1d      	ittte	ne
  40e238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40e23c:	ea94 0f0c 	teqne	r4, ip
  40e240:	ea95 0f0c 	teqne	r5, ip
  40e244:	f000 f8de 	bleq	40e404 <__aeabi_dmul+0x1dc>
  40e248:	442c      	add	r4, r5
  40e24a:	ea81 0603 	eor.w	r6, r1, r3
  40e24e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40e252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40e256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40e25a:	bf18      	it	ne
  40e25c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40e260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40e268:	d038      	beq.n	40e2dc <__aeabi_dmul+0xb4>
  40e26a:	fba0 ce02 	umull	ip, lr, r0, r2
  40e26e:	f04f 0500 	mov.w	r5, #0
  40e272:	fbe1 e502 	umlal	lr, r5, r1, r2
  40e276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40e27a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40e27e:	f04f 0600 	mov.w	r6, #0
  40e282:	fbe1 5603 	umlal	r5, r6, r1, r3
  40e286:	f09c 0f00 	teq	ip, #0
  40e28a:	bf18      	it	ne
  40e28c:	f04e 0e01 	orrne.w	lr, lr, #1
  40e290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40e294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40e298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40e29c:	d204      	bcs.n	40e2a8 <__aeabi_dmul+0x80>
  40e29e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40e2a2:	416d      	adcs	r5, r5
  40e2a4:	eb46 0606 	adc.w	r6, r6, r6
  40e2a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40e2ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40e2b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40e2b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40e2b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40e2bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40e2c0:	bf88      	it	hi
  40e2c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40e2c6:	d81e      	bhi.n	40e306 <__aeabi_dmul+0xde>
  40e2c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40e2cc:	bf08      	it	eq
  40e2ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40e2d2:	f150 0000 	adcs.w	r0, r0, #0
  40e2d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40e2da:	bd70      	pop	{r4, r5, r6, pc}
  40e2dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40e2e0:	ea46 0101 	orr.w	r1, r6, r1
  40e2e4:	ea40 0002 	orr.w	r0, r0, r2
  40e2e8:	ea81 0103 	eor.w	r1, r1, r3
  40e2ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40e2f0:	bfc2      	ittt	gt
  40e2f2:	ebd4 050c 	rsbsgt	r5, r4, ip
  40e2f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40e2fa:	bd70      	popgt	{r4, r5, r6, pc}
  40e2fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e300:	f04f 0e00 	mov.w	lr, #0
  40e304:	3c01      	subs	r4, #1
  40e306:	f300 80ab 	bgt.w	40e460 <__aeabi_dmul+0x238>
  40e30a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40e30e:	bfde      	ittt	le
  40e310:	2000      	movle	r0, #0
  40e312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40e316:	bd70      	pople	{r4, r5, r6, pc}
  40e318:	f1c4 0400 	rsb	r4, r4, #0
  40e31c:	3c20      	subs	r4, #32
  40e31e:	da35      	bge.n	40e38c <__aeabi_dmul+0x164>
  40e320:	340c      	adds	r4, #12
  40e322:	dc1b      	bgt.n	40e35c <__aeabi_dmul+0x134>
  40e324:	f104 0414 	add.w	r4, r4, #20
  40e328:	f1c4 0520 	rsb	r5, r4, #32
  40e32c:	fa00 f305 	lsl.w	r3, r0, r5
  40e330:	fa20 f004 	lsr.w	r0, r0, r4
  40e334:	fa01 f205 	lsl.w	r2, r1, r5
  40e338:	ea40 0002 	orr.w	r0, r0, r2
  40e33c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40e340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40e344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40e348:	fa21 f604 	lsr.w	r6, r1, r4
  40e34c:	eb42 0106 	adc.w	r1, r2, r6
  40e350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e354:	bf08      	it	eq
  40e356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e35a:	bd70      	pop	{r4, r5, r6, pc}
  40e35c:	f1c4 040c 	rsb	r4, r4, #12
  40e360:	f1c4 0520 	rsb	r5, r4, #32
  40e364:	fa00 f304 	lsl.w	r3, r0, r4
  40e368:	fa20 f005 	lsr.w	r0, r0, r5
  40e36c:	fa01 f204 	lsl.w	r2, r1, r4
  40e370:	ea40 0002 	orr.w	r0, r0, r2
  40e374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40e37c:	f141 0100 	adc.w	r1, r1, #0
  40e380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e384:	bf08      	it	eq
  40e386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e38a:	bd70      	pop	{r4, r5, r6, pc}
  40e38c:	f1c4 0520 	rsb	r5, r4, #32
  40e390:	fa00 f205 	lsl.w	r2, r0, r5
  40e394:	ea4e 0e02 	orr.w	lr, lr, r2
  40e398:	fa20 f304 	lsr.w	r3, r0, r4
  40e39c:	fa01 f205 	lsl.w	r2, r1, r5
  40e3a0:	ea43 0302 	orr.w	r3, r3, r2
  40e3a4:	fa21 f004 	lsr.w	r0, r1, r4
  40e3a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e3ac:	fa21 f204 	lsr.w	r2, r1, r4
  40e3b0:	ea20 0002 	bic.w	r0, r0, r2
  40e3b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40e3b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40e3bc:	bf08      	it	eq
  40e3be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40e3c2:	bd70      	pop	{r4, r5, r6, pc}
  40e3c4:	f094 0f00 	teq	r4, #0
  40e3c8:	d10f      	bne.n	40e3ea <__aeabi_dmul+0x1c2>
  40e3ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40e3ce:	0040      	lsls	r0, r0, #1
  40e3d0:	eb41 0101 	adc.w	r1, r1, r1
  40e3d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e3d8:	bf08      	it	eq
  40e3da:	3c01      	subeq	r4, #1
  40e3dc:	d0f7      	beq.n	40e3ce <__aeabi_dmul+0x1a6>
  40e3de:	ea41 0106 	orr.w	r1, r1, r6
  40e3e2:	f095 0f00 	teq	r5, #0
  40e3e6:	bf18      	it	ne
  40e3e8:	4770      	bxne	lr
  40e3ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40e3ee:	0052      	lsls	r2, r2, #1
  40e3f0:	eb43 0303 	adc.w	r3, r3, r3
  40e3f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40e3f8:	bf08      	it	eq
  40e3fa:	3d01      	subeq	r5, #1
  40e3fc:	d0f7      	beq.n	40e3ee <__aeabi_dmul+0x1c6>
  40e3fe:	ea43 0306 	orr.w	r3, r3, r6
  40e402:	4770      	bx	lr
  40e404:	ea94 0f0c 	teq	r4, ip
  40e408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40e40c:	bf18      	it	ne
  40e40e:	ea95 0f0c 	teqne	r5, ip
  40e412:	d00c      	beq.n	40e42e <__aeabi_dmul+0x206>
  40e414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e418:	bf18      	it	ne
  40e41a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e41e:	d1d1      	bne.n	40e3c4 <__aeabi_dmul+0x19c>
  40e420:	ea81 0103 	eor.w	r1, r1, r3
  40e424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e428:	f04f 0000 	mov.w	r0, #0
  40e42c:	bd70      	pop	{r4, r5, r6, pc}
  40e42e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e432:	bf06      	itte	eq
  40e434:	4610      	moveq	r0, r2
  40e436:	4619      	moveq	r1, r3
  40e438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e43c:	d019      	beq.n	40e472 <__aeabi_dmul+0x24a>
  40e43e:	ea94 0f0c 	teq	r4, ip
  40e442:	d102      	bne.n	40e44a <__aeabi_dmul+0x222>
  40e444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40e448:	d113      	bne.n	40e472 <__aeabi_dmul+0x24a>
  40e44a:	ea95 0f0c 	teq	r5, ip
  40e44e:	d105      	bne.n	40e45c <__aeabi_dmul+0x234>
  40e450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40e454:	bf1c      	itt	ne
  40e456:	4610      	movne	r0, r2
  40e458:	4619      	movne	r1, r3
  40e45a:	d10a      	bne.n	40e472 <__aeabi_dmul+0x24a>
  40e45c:	ea81 0103 	eor.w	r1, r1, r3
  40e460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40e464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40e468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40e46c:	f04f 0000 	mov.w	r0, #0
  40e470:	bd70      	pop	{r4, r5, r6, pc}
  40e472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40e476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40e47a:	bd70      	pop	{r4, r5, r6, pc}

0040e47c <__aeabi_ddiv>:
  40e47c:	b570      	push	{r4, r5, r6, lr}
  40e47e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40e482:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40e486:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40e48a:	bf1d      	ittte	ne
  40e48c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40e490:	ea94 0f0c 	teqne	r4, ip
  40e494:	ea95 0f0c 	teqne	r5, ip
  40e498:	f000 f8a7 	bleq	40e5ea <__aeabi_ddiv+0x16e>
  40e49c:	eba4 0405 	sub.w	r4, r4, r5
  40e4a0:	ea81 0e03 	eor.w	lr, r1, r3
  40e4a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40e4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40e4ac:	f000 8088 	beq.w	40e5c0 <__aeabi_ddiv+0x144>
  40e4b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40e4b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40e4b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40e4bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40e4c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40e4c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40e4c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40e4cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40e4d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40e4d4:	429d      	cmp	r5, r3
  40e4d6:	bf08      	it	eq
  40e4d8:	4296      	cmpeq	r6, r2
  40e4da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40e4de:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40e4e2:	d202      	bcs.n	40e4ea <__aeabi_ddiv+0x6e>
  40e4e4:	085b      	lsrs	r3, r3, #1
  40e4e6:	ea4f 0232 	mov.w	r2, r2, rrx
  40e4ea:	1ab6      	subs	r6, r6, r2
  40e4ec:	eb65 0503 	sbc.w	r5, r5, r3
  40e4f0:	085b      	lsrs	r3, r3, #1
  40e4f2:	ea4f 0232 	mov.w	r2, r2, rrx
  40e4f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40e4fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40e4fe:	ebb6 0e02 	subs.w	lr, r6, r2
  40e502:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e506:	bf22      	ittt	cs
  40e508:	1ab6      	subcs	r6, r6, r2
  40e50a:	4675      	movcs	r5, lr
  40e50c:	ea40 000c 	orrcs.w	r0, r0, ip
  40e510:	085b      	lsrs	r3, r3, #1
  40e512:	ea4f 0232 	mov.w	r2, r2, rrx
  40e516:	ebb6 0e02 	subs.w	lr, r6, r2
  40e51a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e51e:	bf22      	ittt	cs
  40e520:	1ab6      	subcs	r6, r6, r2
  40e522:	4675      	movcs	r5, lr
  40e524:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40e528:	085b      	lsrs	r3, r3, #1
  40e52a:	ea4f 0232 	mov.w	r2, r2, rrx
  40e52e:	ebb6 0e02 	subs.w	lr, r6, r2
  40e532:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e536:	bf22      	ittt	cs
  40e538:	1ab6      	subcs	r6, r6, r2
  40e53a:	4675      	movcs	r5, lr
  40e53c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40e540:	085b      	lsrs	r3, r3, #1
  40e542:	ea4f 0232 	mov.w	r2, r2, rrx
  40e546:	ebb6 0e02 	subs.w	lr, r6, r2
  40e54a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40e54e:	bf22      	ittt	cs
  40e550:	1ab6      	subcs	r6, r6, r2
  40e552:	4675      	movcs	r5, lr
  40e554:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40e558:	ea55 0e06 	orrs.w	lr, r5, r6
  40e55c:	d018      	beq.n	40e590 <__aeabi_ddiv+0x114>
  40e55e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40e562:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40e566:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40e56a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40e56e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40e572:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40e576:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40e57a:	d1c0      	bne.n	40e4fe <__aeabi_ddiv+0x82>
  40e57c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e580:	d10b      	bne.n	40e59a <__aeabi_ddiv+0x11e>
  40e582:	ea41 0100 	orr.w	r1, r1, r0
  40e586:	f04f 0000 	mov.w	r0, #0
  40e58a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40e58e:	e7b6      	b.n	40e4fe <__aeabi_ddiv+0x82>
  40e590:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40e594:	bf04      	itt	eq
  40e596:	4301      	orreq	r1, r0
  40e598:	2000      	moveq	r0, #0
  40e59a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40e59e:	bf88      	it	hi
  40e5a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40e5a4:	f63f aeaf 	bhi.w	40e306 <__aeabi_dmul+0xde>
  40e5a8:	ebb5 0c03 	subs.w	ip, r5, r3
  40e5ac:	bf04      	itt	eq
  40e5ae:	ebb6 0c02 	subseq.w	ip, r6, r2
  40e5b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40e5b6:	f150 0000 	adcs.w	r0, r0, #0
  40e5ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40e5be:	bd70      	pop	{r4, r5, r6, pc}
  40e5c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40e5c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40e5c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40e5cc:	bfc2      	ittt	gt
  40e5ce:	ebd4 050c 	rsbsgt	r5, r4, ip
  40e5d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40e5d6:	bd70      	popgt	{r4, r5, r6, pc}
  40e5d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40e5dc:	f04f 0e00 	mov.w	lr, #0
  40e5e0:	3c01      	subs	r4, #1
  40e5e2:	e690      	b.n	40e306 <__aeabi_dmul+0xde>
  40e5e4:	ea45 0e06 	orr.w	lr, r5, r6
  40e5e8:	e68d      	b.n	40e306 <__aeabi_dmul+0xde>
  40e5ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40e5ee:	ea94 0f0c 	teq	r4, ip
  40e5f2:	bf08      	it	eq
  40e5f4:	ea95 0f0c 	teqeq	r5, ip
  40e5f8:	f43f af3b 	beq.w	40e472 <__aeabi_dmul+0x24a>
  40e5fc:	ea94 0f0c 	teq	r4, ip
  40e600:	d10a      	bne.n	40e618 <__aeabi_ddiv+0x19c>
  40e602:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40e606:	f47f af34 	bne.w	40e472 <__aeabi_dmul+0x24a>
  40e60a:	ea95 0f0c 	teq	r5, ip
  40e60e:	f47f af25 	bne.w	40e45c <__aeabi_dmul+0x234>
  40e612:	4610      	mov	r0, r2
  40e614:	4619      	mov	r1, r3
  40e616:	e72c      	b.n	40e472 <__aeabi_dmul+0x24a>
  40e618:	ea95 0f0c 	teq	r5, ip
  40e61c:	d106      	bne.n	40e62c <__aeabi_ddiv+0x1b0>
  40e61e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40e622:	f43f aefd 	beq.w	40e420 <__aeabi_dmul+0x1f8>
  40e626:	4610      	mov	r0, r2
  40e628:	4619      	mov	r1, r3
  40e62a:	e722      	b.n	40e472 <__aeabi_dmul+0x24a>
  40e62c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40e630:	bf18      	it	ne
  40e632:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40e636:	f47f aec5 	bne.w	40e3c4 <__aeabi_dmul+0x19c>
  40e63a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40e63e:	f47f af0d 	bne.w	40e45c <__aeabi_dmul+0x234>
  40e642:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40e646:	f47f aeeb 	bne.w	40e420 <__aeabi_dmul+0x1f8>
  40e64a:	e712      	b.n	40e472 <__aeabi_dmul+0x24a>

0040e64c <__gedf2>:
  40e64c:	f04f 3cff 	mov.w	ip, #4294967295
  40e650:	e006      	b.n	40e660 <__cmpdf2+0x4>
  40e652:	bf00      	nop

0040e654 <__ledf2>:
  40e654:	f04f 0c01 	mov.w	ip, #1
  40e658:	e002      	b.n	40e660 <__cmpdf2+0x4>
  40e65a:	bf00      	nop

0040e65c <__cmpdf2>:
  40e65c:	f04f 0c01 	mov.w	ip, #1
  40e660:	f84d cd04 	str.w	ip, [sp, #-4]!
  40e664:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e668:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e66c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e670:	bf18      	it	ne
  40e672:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40e676:	d01b      	beq.n	40e6b0 <__cmpdf2+0x54>
  40e678:	b001      	add	sp, #4
  40e67a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40e67e:	bf0c      	ite	eq
  40e680:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40e684:	ea91 0f03 	teqne	r1, r3
  40e688:	bf02      	ittt	eq
  40e68a:	ea90 0f02 	teqeq	r0, r2
  40e68e:	2000      	moveq	r0, #0
  40e690:	4770      	bxeq	lr
  40e692:	f110 0f00 	cmn.w	r0, #0
  40e696:	ea91 0f03 	teq	r1, r3
  40e69a:	bf58      	it	pl
  40e69c:	4299      	cmppl	r1, r3
  40e69e:	bf08      	it	eq
  40e6a0:	4290      	cmpeq	r0, r2
  40e6a2:	bf2c      	ite	cs
  40e6a4:	17d8      	asrcs	r0, r3, #31
  40e6a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40e6aa:	f040 0001 	orr.w	r0, r0, #1
  40e6ae:	4770      	bx	lr
  40e6b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e6b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e6b8:	d102      	bne.n	40e6c0 <__cmpdf2+0x64>
  40e6ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40e6be:	d107      	bne.n	40e6d0 <__cmpdf2+0x74>
  40e6c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e6c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e6c8:	d1d6      	bne.n	40e678 <__cmpdf2+0x1c>
  40e6ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40e6ce:	d0d3      	beq.n	40e678 <__cmpdf2+0x1c>
  40e6d0:	f85d 0b04 	ldr.w	r0, [sp], #4
  40e6d4:	4770      	bx	lr
  40e6d6:	bf00      	nop

0040e6d8 <__aeabi_cdrcmple>:
  40e6d8:	4684      	mov	ip, r0
  40e6da:	4610      	mov	r0, r2
  40e6dc:	4662      	mov	r2, ip
  40e6de:	468c      	mov	ip, r1
  40e6e0:	4619      	mov	r1, r3
  40e6e2:	4663      	mov	r3, ip
  40e6e4:	e000      	b.n	40e6e8 <__aeabi_cdcmpeq>
  40e6e6:	bf00      	nop

0040e6e8 <__aeabi_cdcmpeq>:
  40e6e8:	b501      	push	{r0, lr}
  40e6ea:	f7ff ffb7 	bl	40e65c <__cmpdf2>
  40e6ee:	2800      	cmp	r0, #0
  40e6f0:	bf48      	it	mi
  40e6f2:	f110 0f00 	cmnmi.w	r0, #0
  40e6f6:	bd01      	pop	{r0, pc}

0040e6f8 <__aeabi_dcmpeq>:
  40e6f8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e6fc:	f7ff fff4 	bl	40e6e8 <__aeabi_cdcmpeq>
  40e700:	bf0c      	ite	eq
  40e702:	2001      	moveq	r0, #1
  40e704:	2000      	movne	r0, #0
  40e706:	f85d fb08 	ldr.w	pc, [sp], #8
  40e70a:	bf00      	nop

0040e70c <__aeabi_dcmplt>:
  40e70c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e710:	f7ff ffea 	bl	40e6e8 <__aeabi_cdcmpeq>
  40e714:	bf34      	ite	cc
  40e716:	2001      	movcc	r0, #1
  40e718:	2000      	movcs	r0, #0
  40e71a:	f85d fb08 	ldr.w	pc, [sp], #8
  40e71e:	bf00      	nop

0040e720 <__aeabi_dcmple>:
  40e720:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e724:	f7ff ffe0 	bl	40e6e8 <__aeabi_cdcmpeq>
  40e728:	bf94      	ite	ls
  40e72a:	2001      	movls	r0, #1
  40e72c:	2000      	movhi	r0, #0
  40e72e:	f85d fb08 	ldr.w	pc, [sp], #8
  40e732:	bf00      	nop

0040e734 <__aeabi_dcmpge>:
  40e734:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e738:	f7ff ffce 	bl	40e6d8 <__aeabi_cdrcmple>
  40e73c:	bf94      	ite	ls
  40e73e:	2001      	movls	r0, #1
  40e740:	2000      	movhi	r0, #0
  40e742:	f85d fb08 	ldr.w	pc, [sp], #8
  40e746:	bf00      	nop

0040e748 <__aeabi_dcmpgt>:
  40e748:	f84d ed08 	str.w	lr, [sp, #-8]!
  40e74c:	f7ff ffc4 	bl	40e6d8 <__aeabi_cdrcmple>
  40e750:	bf34      	ite	cc
  40e752:	2001      	movcc	r0, #1
  40e754:	2000      	movcs	r0, #0
  40e756:	f85d fb08 	ldr.w	pc, [sp], #8
  40e75a:	bf00      	nop

0040e75c <__aeabi_dcmpun>:
  40e75c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40e760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e764:	d102      	bne.n	40e76c <__aeabi_dcmpun+0x10>
  40e766:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40e76a:	d10a      	bne.n	40e782 <__aeabi_dcmpun+0x26>
  40e76c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40e770:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40e774:	d102      	bne.n	40e77c <__aeabi_dcmpun+0x20>
  40e776:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40e77a:	d102      	bne.n	40e782 <__aeabi_dcmpun+0x26>
  40e77c:	f04f 0000 	mov.w	r0, #0
  40e780:	4770      	bx	lr
  40e782:	f04f 0001 	mov.w	r0, #1
  40e786:	4770      	bx	lr

0040e788 <__aeabi_d2iz>:
  40e788:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40e78c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40e790:	d215      	bcs.n	40e7be <__aeabi_d2iz+0x36>
  40e792:	d511      	bpl.n	40e7b8 <__aeabi_d2iz+0x30>
  40e794:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40e798:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40e79c:	d912      	bls.n	40e7c4 <__aeabi_d2iz+0x3c>
  40e79e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40e7a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40e7a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40e7aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40e7ae:	fa23 f002 	lsr.w	r0, r3, r2
  40e7b2:	bf18      	it	ne
  40e7b4:	4240      	negne	r0, r0
  40e7b6:	4770      	bx	lr
  40e7b8:	f04f 0000 	mov.w	r0, #0
  40e7bc:	4770      	bx	lr
  40e7be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40e7c2:	d105      	bne.n	40e7d0 <__aeabi_d2iz+0x48>
  40e7c4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40e7c8:	bf08      	it	eq
  40e7ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40e7ce:	4770      	bx	lr
  40e7d0:	f04f 0000 	mov.w	r0, #0
  40e7d4:	4770      	bx	lr
  40e7d6:	bf00      	nop
  40e7d8:	454c4449 	.word	0x454c4449
  40e7dc:	00000000 	.word	0x00000000
  40e7e0:	00000a0d 	.word	0x00000a0d
  40e7e4:	09097325 	.word	0x09097325
  40e7e8:	25096325 	.word	0x25096325
  40e7ec:	75250975 	.word	0x75250975
  40e7f0:	0d752509 	.word	0x0d752509
  40e7f4:	0000000a 	.word	0x0000000a
  40e7f8:	20726d54 	.word	0x20726d54
  40e7fc:	00637653 	.word	0x00637653

0040e800 <IO_SENSOR>:
	...
  40e810:	400e1000 0000000a 00004000 0000002e     ...@.....@......
  40e820:	400e1000 0000000a 00002000 0000002d     ...@..... ..-...
  40e830:	400e1400 0000000c 00000001 00000060     ...@........`...
  40e840:	400e1400 0000000c 80000000 0000007f     ...@............
  40e850:	400e1600 0000000d 00000008 00000083     ...@............
  40e860:	400e1600 0000000d 00000001 00000080     ...@............
  40e870:	400e1600 0000000d 00000002 00000081     ...@............
  40e880:	400e1600 0000000d 00000004 00000082     ...@............
  40e890:	400e1200 0000000b 08000000 0000005b     ...@........[...
  40e8a0:	400e1200 0000000b 00000001 00000040     ...@........@...
  40e8b0:	400e1200 0000000b 04000000 0000005a     ...@........Z...
  40e8c0:	400e1200 0000000b 80000000 0000005f     ...@........_...
  40e8d0:	400e1200 0000000b 40000000 0000005e     ...@.......@^...
  40e8e0:	400e1200 0000000b 20000000 0000005d     ...@....... ]...
  40e8f0:	400e1200 0000000b 00002000 0000004d     ...@..... ..M...
  40e900:	400e1000 0000000a 00000001 00000020     ...@........ ...
  40e910:	400e1000 0000000a 00000002 00000021     ...@........!...
  40e920:	400e0e00 00000009 00100000 00000014     ...@............
  40e930:	400e0e00 00000009 00020000 00000011     ...@............
  40e940:	400e1600 0000000d 00000010 00000084     ...@............
  40e950:	400e0e00 00000009 00080000 00000013     ...@............
  40e960:	400e1600 0000000d 00000020 00000085     ...@.... .......
  40e970:	400e1000 0000000a 00000004 00000022     ...@........"...
  40e980:	400e0e00 00000009 00040000 00000012     ...@............
  40e990:	400e0e00 00000009 00200000 00000015     ...@...... .....
  40e9a0:	400e1000 0000000a 00000008 00000023     ...@........#...
  40e9b0:	400e1400 0000000c 04000000 0000007a     ...@........z...
  40e9c0:	400e1400 0000000c 40000000 0000007e     ...@.......@~...
  40e9d0:	400e0e00 00000009 00800000 00000017     ...@............
  40e9e0:	400e0e00 00000009 00004000 0000000e     ...@.....@......
  40e9f0:	400e1400 0000000c 00200000 00000075     ...@...... .u...
  40ea00:	400e1400 0000000c 02000000 00000079     ...@........y...
  40ea10:	400e0e00 00000009 00010000 00000010     ...@............
  40ea20:	400e1400 0000000c 00100000 00000074     ...@........t...
  40ea30:	400e0e00 00000009 00008000 0000000f     ...@............
  40ea40:	400e1200 0000000b 00000080 00000047     ...@........G...
  40ea50:	400e1400 0000000c 08000000 0000007b     ...@........{...
  40ea60:	400e0e00 00000009 00400000 00000016     ...@......@.....
  40ea70:	400e1200 0000000b 00000002 00000041     ...@........A...
  40ea80:	400e1200 0000000b 00000004 00000042     ...@........B...
  40ea90:	400e1200 0000000b 00000008 00000043     ...@........C...
  40eaa0:	400e1200 0000000b 00000010 00000044     ...@........D...
  40eab0:	400e0e00 00000009 00002000 0000000d     ...@..... ......
  40eac0:	400e1200 0000000b 00000020 00000045     ...@.... ...E...
  40ead0:	400e1200 0000000b 00000040 00000046     ...@....@...F...
  40eae0:	400e1400 0000000c 01000000 00000078     ...@........x...
  40eaf0:	400e0e00 00000009 01000000 00000018     ...@............
  40eb00:	400e1400 0000000c 00800000 00000077     ...@........w...
  40eb10:	400e0e00 00000009 02000000 00000019     ...@............
  40eb20:	400e1400 0000000c 00400000 00000076     ...@......@.v...
  40eb30:	400e1400 0000000c 00080000 00000073     ...@........s...
  40eb40:	400e0e00 00000009 00001000 0000000c     ...@............
  40eb50:	400e1400 0000000c 00040000 00000072     ...@........r...
  40eb60:	400e0e00 00000009 00000800 0000000b     ...@............
  40eb70:	400e1400 0000000c 00002000 0000006d     ...@..... ..m...
  40eb80:	400e1200 0000000b 00000200 00000049     ...@........I...
  40eb90:	400e1400 0000000c 00004000 0000006e     ...@.....@..n...
  40eba0:	400e1400 0000000c 10000000 0000007c     ...@........|...
  40ebb0:	400e1200 0000000b 10000000 0000005c     ...@........\...
  40ebc0:	400e1000 0000000a 00000040 00000026     ...@....@...&...
  40ebd0:	400e0e00 00000009 00000040 00000006     ...@....@.......
  40ebe0:	400e1400 0000000c 00020000 00000071     ...@........q...
  40ebf0:	400e1400 0000000c 00010000 00000070     ...@........p...
  40ec00:	400e1200 0000000b 00000100 00000048     ...@........H...
  40ec10:	400e1400 0000000c 00001000 0000006c     ...@........l...
  40ec20:	400e1200 0000000b 00000800 0000004b     ...@........K...
  40ec30:	400e0e00 00000009 00000004 00000002     ...@............
  40ec40:	400e1000 0000000a 00001000 0000002c     ...@........,...
  40ec50:	400e1200 0000000b 00004000 0000004e     ...@.....@..N...
  40ec60:	400e1400 0000000c 00000080 00000067     ...@........g...
  40ec70:	400e1000 0000000a 00000080 00000027     ...@........'...
  40ec80:	400e1200 0000000b 00000400 0000004a     ...@........J...
  40ec90:	400e1400 0000000c 00000800 0000006b     ...@........k...
  40eca0:	400e0e00 00000009 00000002 00000001     ...@............
  40ecb0:	400e1200 0000000b 00010000 00000050     ...@........P...
  40ecc0:	400e1400 0000000c 00000400 0000006a     ...@........j...
  40ecd0:	400e0e00 00000009 00000001 00000000     ...@............
  40ece0:	400e1200 0000000b 00020000 00000051     ...@........Q...
  40ecf0:	400e1200 0000000b 00080000 00000053     ...@........S...
  40ed00:	400e1000 0000000a 00000010 00000024     ...@........$...
  40ed10:	400e1400 0000000c 00008000 0000006f     ...@........o...
  40ed20:	400e1400 0000000c 20000000 0000007d     ...@....... }...
  40ed30:	400e1000 0000000a 00000020 00000025     ...@.... ...%...
  40ed40:	400e1400 0000000c 00000200 00000069     ...@........i...
  40ed50:	400e1200 0000000b 00040000 00000052     ...@........R...
  40ed60:	400e1400 0000000c 00000100 00000068     ...@........h...
  40ed70:	400e0e00 00000009 00000040 00000006     ...@....@.......
  40ed80:	400e1200 0000000b 00100000 00000054     ...@........T...
  40ed90:	400e1200 0000000b 00400000 00000056     ...@......@.V...
  40eda0:	400e1400 0000000c 00000040 00000066     ...@....@...f...
  40edb0:	400e1200 0000000b 00200000 00000055     ...@...... .U...
  40edc0:	400e1200 0000000b 01000000 00000058     ...@........X...
  40edd0:	400e1400 0000000c 00000020 00000065     ...@.... ...e...
  40ede0:	400e1400 0000000c 00000010 00000064     ...@........d...
  40edf0:	400e1400 0000000c 00000008 00000063     ...@........c...
  40ee00:	400e1200 0000000b 00800000 00000057     ...@........W...
  40ee10:	400e1400 0000000c 00000004 00000062     ...@........b...
  40ee20:	400e1400 0000000c 00000002 00000061     ...@........a...
  40ee30:	400e1200 0000000b 02000000 00000059     ...@........Y...
  40ee40:	64323025 64323025 64323025 3230253a     %02d%02d%02d:%02
  40ee50:	32302564 32302564 00000064              d%02d%02d...

0040ee5c <SSD1311_CFG_SCRIPT>:
  40ee5c:	08020000 71022a02 72020003 79020003     .....*.q...r...y
  40ee6c:	7f028102 6002d502 7802d902 1002da02     .......`...x....
  40ee7c:	4002db02 0302dc02 78027804 06020902     ...@.....x.x....
  40ee8c:	01022802 06020202 05040c02 00000101     .(..............
  40ee9c:	736e6553 6148726f 656c646e 6b736154     SensorHandleTask
  40eeac:	00000000 203a7325 30255353 00006432     ....%s: SS%02d..
  40eebc:	203a7325 32255353 00000a64 65733a30     %s: SS%2d...0:se
  40eecc:	726f736e 6576655f 2e73746e 00676f6c     nsor_events.log.

0040eedc <sd_mmc_trans_units>:
  40eedc:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0040eef8 <sd_trans_multipliers>:
  40eef8:	00000000 0000000a 0000000c 0000000d     ................
  40ef08:	0000000f 00000014 00000019 0000001e     ................
  40ef18:	00000023 00000028 0000002d 00000032     #...(...-...2...
  40ef28:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040ef38 <mmc_trans_multipliers>:
  40ef38:	00000000 0000000a 0000000c 0000000d     ................
  40ef48:	0000000f 00000014 0000001a 0000001e     ................
  40ef58:	00000023 00000028 0000002d 00000034     #...(...-...4...
  40ef68:	00000037 0000003c 00000046 00000050     7...<...F...P...
  40ef78:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
  40ef88:	22302074 00000000 2f445322 20434d4d     t 0"...."SD/MMC 
  40ef98:	64726143 6f6c5320 22312074 00000000     Card Slot 1"....

0040efa8 <lun_desc>:
  40efa8:	00404955 004049b5 00404a21 00404a89     UI@..I@.!J@..J@.
  40efb8:	00404ac9 00404b59 00404c09 0040ef78     .J@.YK@..L@.x.@.
  40efc8:	00404969 004049d5 00404a45 00404a9d     iI@..I@.EJ@..J@.
  40efd8:	00404add 00404b7d 00404c2d 0040ef90     .J@.}K@.-L@...@.

0040efe8 <LfnOfs>:
  40efe8:	07050301 12100e09 1c181614 0000001e     ................
  40eff8:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  40f008:	00005d5b                                []..

0040f00c <excvt.5682>:
  40f00c:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  40f01c:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  40f02c:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  40f03c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  40f04c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  40f05c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  40f06c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  40f07c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0040f08c <Tbl>:
  40f08c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  40f09c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  40f0ac:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  40f0bc:	00d600ff 00f800dc 00d800a3 019200d7     ................
  40f0cc:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  40f0dc:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  40f0ec:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  40f0fc:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  40f10c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  40f11c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  40f12c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  40f13c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  40f14c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  40f15c:	00da00de 00d900db 00dd00fd 00b400af     ................
  40f16c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  40f17c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0040f18c <tbl_lower.5432>:
  40f18c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  40f19c:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  40f1ac:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  40f1bc:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  40f1cc:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  40f1dc:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  40f1ec:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  40f1fc:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  40f20c:	01050103 01090107 010d010b 0111010f     ................
  40f21c:	01150113 01190117 011d011b 0121011f     ..............!.
  40f22c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  40f23c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  40f24c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  40f25c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  40f26c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  40f27c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  40f28c:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  40f29c:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  40f2ac:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  40f2bc:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  40f2cc:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  40f2dc:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  40f2ec:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  40f2fc:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  40f30c:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  40f31c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  40f32c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  40f33c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  40f34c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  40f35c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0040f36c <tbl_upper.5433>:
  40f36c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  40f37c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  40f38c:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  40f39c:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  40f3ac:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  40f3bc:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  40f3cc:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  40f3dc:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  40f3ec:	01040102 01080106 010c010a 0110010e     ................
  40f3fc:	01140112 01180116 011c011a 0120011e     .............. .
  40f40c:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  40f41c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  40f42c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  40f43c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  40f44c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  40f45c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  40f46c:	03940393 03960395 03980397 039a0399     ................
  40f47c:	039c039b 039e039d 03a0039f 03a303a1     ................
  40f48c:	03a503a4 03a703a6 03a903a8 041003aa     ................
  40f49c:	04120411 04140413 04160415 04180417     ................
  40f4ac:	041a0419 041c041b 041e041d 0420041f     .............. .
  40f4bc:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  40f4cc:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  40f4dc:	04030402 04050404 04070406 04090408     ................
  40f4ec:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  40f4fc:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  40f50c:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  40f51c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  40f52c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  40f53c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...

0040f54c <can_bit_time>:
  40f54c:	02020308 02094b03 43020303 0303030a     .....K.....C....
  40f55c:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
  40f56c:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
  40f57c:	05050510 06114504 47040505 06060512     .....E.....G....
  40f58c:	06134304 44040606 06060714 08154604     .C.....D.....F..
  40f59c:	47040606 07070716 08174404 46040708     ...G.....D.....F
  40f5ac:	08080718 08194304 44040808              .....C.....D

0040f5b8 <_global_impure_ptr>:
  40f5b8:	20000028 00464e49 00666e69 004e414e     (.. INF.inf.NAN.
  40f5c8:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40f5d8:	46454443 00000000 33323130 37363534     CDEF....01234567
  40f5e8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40f5f8:	0000296c 00000030                       l)..0...

0040f600 <blanks.7223>:
  40f600:	20202020 20202020 20202020 20202020                     

0040f610 <zeroes.7224>:
  40f610:	30303030 30303030 30303030 30303030     0000000000000000
  40f620:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0040f630 <__mprec_bigtens>:
  40f630:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40f640:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40f650:	7f73bf3c 75154fdd                       <.s..O.u

0040f658 <__mprec_tens>:
  40f658:	00000000 3ff00000 00000000 40240000     .......?......$@
  40f668:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40f678:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40f688:	00000000 412e8480 00000000 416312d0     .......A......cA
  40f698:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40f6a8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40f6b8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40f6c8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40f6d8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40f6e8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40f6f8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40f708:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40f718:	79d99db4 44ea7843                       ...yCx.D

0040f720 <p05.6055>:
  40f720:	00000005 00000019 0000007d 00000043     ........}...C...
  40f730:	49534f50 00000058 0000002e              POSIX.......

0040f73c <_ctype_>:
  40f73c:	20202000 20202020 28282020 20282828     .         ((((( 
  40f74c:	20202020 20202020 20202020 20202020                     
  40f75c:	10108820 10101010 10101010 10101010      ...............
  40f76c:	04040410 04040404 10040404 10101010     ................
  40f77c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40f78c:	01010101 01010101 01010101 10101010     ................
  40f79c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40f7ac:	02020202 02020202 02020202 10101010     ................
  40f7bc:	00000020 00000000 00000000 00000000      ...............
	...

0040f840 <_init>:
  40f840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f842:	bf00      	nop
  40f844:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f846:	bc08      	pop	{r3}
  40f848:	469e      	mov	lr, r3
  40f84a:	4770      	bx	lr

0040f84c <__init_array_start>:
  40f84c:	0040b9a9 	.word	0x0040b9a9

0040f850 <__frame_dummy_init_array_entry>:
  40f850:	0040011d                                ..@.

0040f854 <_fini>:
  40f854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f856:	bf00      	nop
  40f858:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f85a:	bc08      	pop	{r3}
  40f85c:	469e      	mov	lr, r3
  40f85e:	4770      	bx	lr

0040f860 <__fini_array_start>:
  40f860:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <uxCriticalNesting>:
2000000c:	aaaa aaaa                                   ....

20000010 <xFreeBytesRemaining>:
20000010:	a000 0000                                   ....

20000014 <xNextTaskUnblockTime>:
20000014:	ffff ffff                                   ....

20000018 <g_interrupt_enabled>:
20000018:	0001 0000                                   ....

2000001c <SystemCoreClock>:
2000001c:	0900 003d                                   ..=.

20000020 <_impure_ptr>:
20000020:	0028 2000 0000 0000                         (.. ....

20000028 <impure_data>:
20000028:	0000 0000 0314 2000 037c 2000 03e4 2000     ....... |.. ... 
	...
200000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000450 <__atexit_recursive_mutex>:
20000450:	acd0 2000                                   ... 

20000454 <__malloc_av_>:
	...
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 
2000084c:	0844 2000 0844 2000 084c 2000 084c 2000     D.. D.. L.. L.. 

2000085c <__malloc_sbrk_base>:
2000085c:	ffff ffff                                   ....

20000860 <__malloc_trim_threshold>:
20000860:	0000 0002                                   ....

20000864 <__global_locale>:
20000864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000944:	de9d 0040 da5d 0040 0000 0000 f73c 0040     ..@.].@.....<.@.
20000954:	f738 0040 f5dc 0040 f5dc 0040 f5dc 0040     8.@...@...@...@.
20000964:	f5dc 0040 f5dc 0040 f5dc 0040 f5dc 0040     ..@...@...@...@.
20000974:	f5dc 0040 f5dc 0040 ffff ffff ffff ffff     ..@...@.........
20000984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
