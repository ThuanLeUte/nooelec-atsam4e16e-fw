
arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009024  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409024  00409024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20000000  0040902c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000154  200009b8  004099e4  000209b8  2**2
                  ALLOC
  4 .stack        00003004  20000b0c  00409b38  000209b8  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001cfa1  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004283  00000000  00000000  0003d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d425  00000000  00000000  00041c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d28  00000000  00000000  0004f088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e90  00000000  00000000  0004fdb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ca3d  00000000  00000000  00050c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010ab3  00000000  00000000  0006d67d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006c644  00000000  00000000  0007e130  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002bcc  00000000  00000000  000ea774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	10 3b 00 20 f5 19 40 00 f1 19 40 00 f1 19 40 00     .;. ..@...@...@.
  400010:	f1 19 40 00 f1 19 40 00 f1 19 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	f1 19 40 00 f1 19 40 00 00 00 00 00 f1 19 40 00     ..@...@.......@.
  40003c:	f1 19 40 00 f1 19 40 00 f1 19 40 00 f1 19 40 00     ..@...@...@...@.
  40004c:	f1 19 40 00 f1 19 40 00 f1 19 40 00 f1 19 40 00     ..@...@...@...@.
  40005c:	f1 19 40 00 f1 19 40 00 6d 37 40 00 81 37 40 00     ..@...@.m7@..7@.
  40006c:	95 37 40 00 a9 37 40 00 bd 37 40 00 f1 19 40 00     .7@..7@..7@...@.
  40007c:	f1 19 40 00 f1 19 40 00 f1 19 40 00 f1 19 40 00     ..@...@...@...@.
  40008c:	f1 19 40 00 f1 19 40 00 f1 19 40 00 f1 19 40 00     ..@...@...@...@.
  40009c:	f1 19 40 00 f1 19 40 00 f1 19 40 00 f1 19 40 00     ..@...@...@...@.
  4000ac:	f1 19 40 00 f1 19 40 00 f1 19 40 00 f1 19 40 00     ..@...@...@...@.
  4000bc:	f1 19 40 00 f1 19 40 00 f1 19 40 00 f1 19 40 00     ..@...@...@...@.
  4000cc:	f1 19 40 00 f1 19 40 00 f1 19 40 00 f1 19 40 00     ..@...@...@...@.
  4000dc:	f1 19 40 00 f1 19 40 00 f1 19 40 00 f1 19 40 00     ..@...@...@...@.
  4000ec:	f1 19 40 00 f1 19 40 00 f1 19 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009b8 	.word	0x200009b8
  400114:	00000000 	.word	0x00000000
  400118:	0040902c 	.word	0x0040902c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	0040902c 	.word	0x0040902c
  400158:	200009bc 	.word	0x200009bc
  40015c:	0040902c 	.word	0x0040902c
  400160:	00000000 	.word	0x00000000

00400164 <bsp_hw_init>:
static void m_bsp_gpio_init(void);
static void m_bsp_sdcard_init(void);

/* Function definitions ----------------------------------------------- */
void bsp_hw_init(void)
{
  400164:	b570      	push	{r4, r5, r6, lr}
  400166:	b084      	sub	sp, #16
/**
 * @brief I2C init
 */
static void m_bsp_i2c_init(void)
{
  twi_master_options_t opt = {
  400168:	2300      	movs	r3, #0
  40016a:	9303      	str	r3, [sp, #12]
  40016c:	4b12      	ldr	r3, [pc, #72]	; (4001b8 <bsp_hw_init+0x54>)
  40016e:	9302      	str	r3, [sp, #8]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  400170:	4b12      	ldr	r3, [pc, #72]	; (4001bc <bsp_hw_init+0x58>)
  400172:	9301      	str	r3, [sp, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400174:	2011      	movs	r0, #17
  400176:	4c12      	ldr	r4, [pc, #72]	; (4001c0 <bsp_hw_init+0x5c>)
  400178:	47a0      	blx	r4
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
  40017a:	a901      	add	r1, sp, #4
  40017c:	4811      	ldr	r0, [pc, #68]	; (4001c4 <bsp_hw_init+0x60>)
  40017e:	4b12      	ldr	r3, [pc, #72]	; (4001c8 <bsp_hw_init+0x64>)
  400180:	4798      	blx	r3
  400182:	2009      	movs	r0, #9
  400184:	47a0      	blx	r4

  // Enable PIOA clock to detect Card Detect (CD) change
  sysclk_enable_peripheral_clock(ID_PIOA);

  // Configure SD card pins as per MCI peripheral (periph C)
  pio_set_peripheral(PIOA, PIO_PERIPH_C, PIO_PA30C_MCDA0 | // MCI Data 0
  400186:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
  40018a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40018e:	480f      	ldr	r0, [pc, #60]	; (4001cc <bsp_hw_init+0x68>)
  400190:	4b0f      	ldr	r3, [pc, #60]	; (4001d0 <bsp_hw_init+0x6c>)
  400192:	4798      	blx	r3
                                         PIO_PA27C_MCDA3 | // MCI Data 3
                                         PIO_PA28C_MCCDA | // MCI Command
                                         PIO_PA29C_MCCK);  // MCI Clock

  // Initialize SD MMC stack
  sd_mmc_init();
  400194:	4b0f      	ldr	r3, [pc, #60]	; (4001d4 <bsp_hw_init+0x70>)
  400196:	4798      	blx	r3

  //  Wait until SD stack initialized and SD card inserted
  do
  {
    // Check if stack ready
    status = sd_mmc_test_unit_ready(0);
  400198:	2400      	movs	r4, #0
  40019a:	4e0f      	ldr	r6, [pc, #60]	; (4001d8 <bsp_hw_init+0x74>)
    if (status == CTRL_FAIL)
    {
      // Wait for a card to be inserted
      while (sd_mmc_check(0) != CTRL_NO_PRESENT)
  40019c:	4d0f      	ldr	r5, [pc, #60]	; (4001dc <bsp_hw_init+0x78>)
  40019e:	e003      	b.n	4001a8 <bsp_hw_init+0x44>
  4001a0:	4620      	mov	r0, r4
  4001a2:	47a8      	blx	r5
  4001a4:	2802      	cmp	r0, #2
  4001a6:	d1fb      	bne.n	4001a0 <bsp_hw_init+0x3c>
    status = sd_mmc_test_unit_ready(0);
  4001a8:	4620      	mov	r0, r4
  4001aa:	47b0      	blx	r6
    if (status == CTRL_FAIL)
  4001ac:	2801      	cmp	r0, #1
  4001ae:	d0f7      	beq.n	4001a0 <bsp_hw_init+0x3c>
      {
        // Use a timeout here for real projects.
      }
    }
  } while (status != CTRL_GOOD);
  4001b0:	2800      	cmp	r0, #0
  4001b2:	d1f9      	bne.n	4001a8 <bsp_hw_init+0x44>
}
  4001b4:	b004      	add	sp, #16
  4001b6:	bd70      	pop	{r4, r5, r6, pc}
  4001b8:	00061a80 	.word	0x00061a80
  4001bc:	05b8d800 	.word	0x05b8d800
  4001c0:	00403b79 	.word	0x00403b79
  4001c4:	400a8000 	.word	0x400a8000
  4001c8:	00403c85 	.word	0x00403c85
  4001cc:	400e0e00 	.word	0x400e0e00
  4001d0:	004039dd 	.word	0x004039dd
  4001d4:	00400459 	.word	0x00400459
  4001d8:	00400fc1 	.word	0x00400fc1
  4001dc:	00400479 	.word	0x00400479

004001e0 <bsp_i2c_write>:
{
  4001e0:	b500      	push	{lr}
  4001e2:	b087      	sub	sp, #28
  packet_write.chip        = slave_addr;        // TWI slave bus address
  4001e4:	f88d 0014 	strb.w	r0, [sp, #20]
  packet_write.addr[0]     = reg_addr;          // TWI slave memory address data
  4001e8:	f88d 1004 	strb.w	r1, [sp, #4]
  packet_write.addr_length = sizeof(reg_addr);  // TWI slave memory address data size
  4001ec:	2101      	movs	r1, #1
  4001ee:	9102      	str	r1, [sp, #8]
  packet_write.buffer      = (void *)p_data;    // Transfer data source buffer
  4001f0:	9203      	str	r2, [sp, #12]
  packet_write.length      = len;               // Transfer data size (bytes)
  4001f2:	9304      	str	r3, [sp, #16]
  return twi_master_write(TWI0, &packet_write);
  4001f4:	a901      	add	r1, sp, #4
  4001f6:	4803      	ldr	r0, [pc, #12]	; (400204 <bsp_i2c_write+0x24>)
  4001f8:	4b03      	ldr	r3, [pc, #12]	; (400208 <bsp_i2c_write+0x28>)
  4001fa:	4798      	blx	r3
}
  4001fc:	b007      	add	sp, #28
  4001fe:	f85d fb04 	ldr.w	pc, [sp], #4
  400202:	bf00      	nop
  400204:	400a8000 	.word	0x400a8000
  400208:	00403ce9 	.word	0x00403ce9

0040020c <bsp_can_init>:
can_mb_conf_t m_can1_mailbox;

/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
void bsp_can_init(void)
{
  40020c:	b538      	push	{r3, r4, r5, lr}
  uint32_t ul_sysclk = sysclk_get_cpu_hz();

  pmc_enable_periph_clk(ID_CAN1);
  40020e:	2026      	movs	r0, #38	; 0x26
  400210:	4b13      	ldr	r3, [pc, #76]	; (400260 <bsp_can_init+0x54>)
  400212:	4798      	blx	r3

  can_init(CAN1, ul_sysclk, CAN_BPS_1000K);
  400214:	4d13      	ldr	r5, [pc, #76]	; (400264 <bsp_can_init+0x58>)
  400216:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40021a:	4913      	ldr	r1, [pc, #76]	; (400268 <bsp_can_init+0x5c>)
  40021c:	4628      	mov	r0, r5
  40021e:	4b13      	ldr	r3, [pc, #76]	; (40026c <bsp_can_init+0x60>)
  400220:	4798      	blx	r3
  can_reset_all_mailbox(CAN1);
  400222:	4628      	mov	r0, r5
  400224:	4b12      	ldr	r3, [pc, #72]	; (400270 <bsp_can_init+0x64>)
  400226:	4798      	blx	r3

  m_can1_mailbox.ul_mb_idx   = 0;
  400228:	4c12      	ldr	r4, [pc, #72]	; (400274 <bsp_can_init+0x68>)
  40022a:	2300      	movs	r3, #0
  40022c:	6023      	str	r3, [r4, #0]
  m_can1_mailbox.uc_obj_type = CAN_MB_TX_MODE;
  40022e:	2203      	movs	r2, #3
  400230:	7122      	strb	r2, [r4, #4]
  m_can1_mailbox.uc_tx_prio  = 15;
  400232:	220f      	movs	r2, #15
  400234:	71e2      	strb	r2, [r4, #7]
  m_can1_mailbox.uc_id_ver   = 0;
  400236:	7163      	strb	r3, [r4, #5]
  m_can1_mailbox.ul_id_msk   = 0;
  400238:	60e3      	str	r3, [r4, #12]
  can_mailbox_init(CAN1, &m_can1_mailbox);
  40023a:	4621      	mov	r1, r4
  40023c:	4628      	mov	r0, r5
  40023e:	4b0e      	ldr	r3, [pc, #56]	; (400278 <bsp_can_init+0x6c>)
  400240:	4798      	blx	r3
  
  m_can1_mailbox.ul_id     = CAN_MID_MIDvA(0x07);
  400242:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  400246:	6123      	str	r3, [r4, #16]
  m_can1_mailbox.ul_datal  = 0x12345678;
  400248:	4b0c      	ldr	r3, [pc, #48]	; (40027c <bsp_can_init+0x70>)
  40024a:	61a3      	str	r3, [r4, #24]
  m_can1_mailbox.ul_datah  = 0x87654321;
  40024c:	4b0c      	ldr	r3, [pc, #48]	; (400280 <bsp_can_init+0x74>)
  40024e:	61e3      	str	r3, [r4, #28]
  m_can1_mailbox.uc_length = 8;
  400250:	2308      	movs	r3, #8
  400252:	71a3      	strb	r3, [r4, #6]
  can_mailbox_write(CAN1, &m_can1_mailbox);
  400254:	4621      	mov	r1, r4
  400256:	4628      	mov	r0, r5
  400258:	4b0a      	ldr	r3, [pc, #40]	; (400284 <bsp_can_init+0x78>)
  40025a:	4798      	blx	r3
  40025c:	bd38      	pop	{r3, r4, r5, pc}
  40025e:	bf00      	nop
  400260:	00403b79 	.word	0x00403b79
  400264:	40014000 	.word	0x40014000
  400268:	05b8d800 	.word	0x05b8d800
  40026c:	004038e1 	.word	0x004038e1
  400270:	004038bd 	.word	0x004038bd
  400274:	20000ac0 	.word	0x20000ac0
  400278:	004037d1 	.word	0x004037d1
  40027c:	12345678 	.word	0x12345678
  400280:	87654321 	.word	0x87654321
  400284:	00403853 	.word	0x00403853

00400288 <m_sys_sdcard_test>:
/* Private function definitions --------------------------------------- */
/**
 * @brief SDcard test
 */
static void m_sys_sdcard_test(void)
{
  400288:	b530      	push	{r4, r5, lr}
  40028a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
  FATFS fs;    // File system variable
  FIL fhandle; // File handle variable
  char buf[25];

  // Test file name (note 0: indicates volume 0)
  const char test_file_name[] = "0:sam_arm_sd.txt";
  40028e:	ac01      	add	r4, sp, #4
  400290:	4d13      	ldr	r5, [pc, #76]	; (4002e0 <m_sys_sdcard_test+0x58>)
  400292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400296:	682b      	ldr	r3, [r5, #0]
  400298:	7023      	strb	r3, [r4, #0]

  // Mount the file system
  if (f_mount(LUN_ID_SD_MMC_0_MEM, &fs) != FR_OK)
  40029a:	a996      	add	r1, sp, #600	; 0x258
  40029c:	2000      	movs	r0, #0
  40029e:	4b11      	ldr	r3, [pc, #68]	; (4002e4 <m_sys_sdcard_test+0x5c>)
  4002a0:	4798      	blx	r3
  4002a2:	b110      	cbz	r0, 4002aa <m_sys_sdcard_test+0x22>
  }

  // Nothing else to do
  while (1)
    ;
}
  4002a4:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
  4002a8:	bd30      	pop	{r4, r5, pc}
  if (f_open(&fhandle, test_file_name, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
  4002aa:	220a      	movs	r2, #10
  4002ac:	a901      	add	r1, sp, #4
  4002ae:	a80d      	add	r0, sp, #52	; 0x34
  4002b0:	4b0d      	ldr	r3, [pc, #52]	; (4002e8 <m_sys_sdcard_test+0x60>)
  4002b2:	4798      	blx	r3
  4002b4:	b100      	cbz	r0, 4002b8 <m_sys_sdcard_test+0x30>
  4002b6:	e7fe      	b.n	4002b6 <m_sys_sdcard_test+0x2e>
    uint32_t cap = sd_mmc_get_capacity(0);
  4002b8:	4b0c      	ldr	r3, [pc, #48]	; (4002ec <m_sys_sdcard_test+0x64>)
  4002ba:	4798      	blx	r3
    sprintf(buf, "Capacity: %lu\n", cap);
  4002bc:	4602      	mov	r2, r0
  4002be:	490c      	ldr	r1, [pc, #48]	; (4002f0 <m_sys_sdcard_test+0x68>)
  4002c0:	a806      	add	r0, sp, #24
  4002c2:	4b0c      	ldr	r3, [pc, #48]	; (4002f4 <m_sys_sdcard_test+0x6c>)
  4002c4:	4798      	blx	r3
    if (f_puts(buf, &fhandle) != 0)
  4002c6:	a90d      	add	r1, sp, #52	; 0x34
  4002c8:	a806      	add	r0, sp, #24
  4002ca:	4b0b      	ldr	r3, [pc, #44]	; (4002f8 <m_sys_sdcard_test+0x70>)
  4002cc:	4798      	blx	r3
  4002ce:	b110      	cbz	r0, 4002d6 <m_sys_sdcard_test+0x4e>
      pio_set_pin_high(LED_0_PIN);
  4002d0:	2076      	movs	r0, #118	; 0x76
  4002d2:	4b0a      	ldr	r3, [pc, #40]	; (4002fc <m_sys_sdcard_test+0x74>)
  4002d4:	4798      	blx	r3
    f_close(&fhandle);
  4002d6:	a80d      	add	r0, sp, #52	; 0x34
  4002d8:	4b09      	ldr	r3, [pc, #36]	; (400300 <m_sys_sdcard_test+0x78>)
  4002da:	4798      	blx	r3
  4002dc:	e7eb      	b.n	4002b6 <m_sys_sdcard_test+0x2e>
  4002de:	bf00      	nop
  4002e0:	00408684 	.word	0x00408684
  4002e4:	0040311d 	.word	0x0040311d
  4002e8:	00403141 	.word	0x00403141
  4002ec:	00400d1d 	.word	0x00400d1d
  4002f0:	00408674 	.word	0x00408674
  4002f4:	00403e5d 	.word	0x00403e5d
  4002f8:	004035e5 	.word	0x004035e5
  4002fc:	00403a77 	.word	0x00403a77
  400300:	004035a1 	.word	0x004035a1

00400304 <sys_init>:
{
  400304:	b508      	push	{r3, lr}
  sysclk_init();  // Initialize System Clock
  400306:	4b05      	ldr	r3, [pc, #20]	; (40031c <sys_init+0x18>)
  400308:	4798      	blx	r3
  board_init();   // Board init
  40030a:	4b05      	ldr	r3, [pc, #20]	; (400320 <sys_init+0x1c>)
  40030c:	4798      	blx	r3
  bsp_hw_init();  // Hardware init
  40030e:	4b05      	ldr	r3, [pc, #20]	; (400324 <sys_init+0x20>)
  400310:	4798      	blx	r3
  bsp_can_init(); // Can bus init
  400312:	4b05      	ldr	r3, [pc, #20]	; (400328 <sys_init+0x24>)
  400314:	4798      	blx	r3
  m_sys_sdcard_test();
  400316:	4b05      	ldr	r3, [pc, #20]	; (40032c <sys_init+0x28>)
  400318:	4798      	blx	r3
  40031a:	bd08      	pop	{r3, pc}
  40031c:	0040369d 	.word	0x0040369d
  400320:	00401221 	.word	0x00401221
  400324:	00400165 	.word	0x00400165
  400328:	0040020d 	.word	0x0040020d
  40032c:	00400289 	.word	0x00400289

00400330 <sys_run>:
{
  400330:	b510      	push	{r4, lr}
  400332:	b082      	sub	sp, #8
  uint8_t data = 0x99;
  400334:	aa02      	add	r2, sp, #8
  400336:	2399      	movs	r3, #153	; 0x99
  400338:	f802 3d01 	strb.w	r3, [r2, #-1]!
  bsp_i2c_write(0x77, 0x11, &data, 1);
  40033c:	2301      	movs	r3, #1
  40033e:	2111      	movs	r1, #17
  400340:	2077      	movs	r0, #119	; 0x77
  400342:	4c02      	ldr	r4, [pc, #8]	; (40034c <sys_run+0x1c>)
  400344:	47a0      	blx	r4
}
  400346:	b002      	add	sp, #8
  400348:	bd10      	pop	{r4, pc}
  40034a:	bf00      	nop
  40034c:	004001e1 	.word	0x004001e1

00400350 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  400350:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  400352:	4b06      	ldr	r3, [pc, #24]	; (40036c <sd_mmc_configure_slot+0x1c>)
  400354:	6819      	ldr	r1, [r3, #0]
  400356:	7f8b      	ldrb	r3, [r1, #30]
  400358:	3300      	adds	r3, #0
  40035a:	bf18      	it	ne
  40035c:	2301      	movne	r3, #1
  40035e:	7b4a      	ldrb	r2, [r1, #13]
  400360:	6809      	ldr	r1, [r1, #0]
  400362:	4803      	ldr	r0, [pc, #12]	; (400370 <sd_mmc_configure_slot+0x20>)
  400364:	7800      	ldrb	r0, [r0, #0]
  400366:	4c03      	ldr	r4, [pc, #12]	; (400374 <sd_mmc_configure_slot+0x24>)
  400368:	47a0      	blx	r4
  40036a:	bd10      	pop	{r4, pc}
  40036c:	200009d4 	.word	0x200009d4
  400370:	200009fc 	.word	0x200009fc
  400374:	004014fd 	.word	0x004014fd

00400378 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  400378:	b108      	cbz	r0, 40037e <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  40037a:	2004      	movs	r0, #4
  40037c:	4770      	bx	lr
{
  40037e:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  400380:	4b0e      	ldr	r3, [pc, #56]	; (4003bc <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  400382:	7a9b      	ldrb	r3, [r3, #10]
  400384:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  400386:	b2db      	uxtb	r3, r3
  400388:	2b01      	cmp	r3, #1
  40038a:	d90d      	bls.n	4003a8 <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  40038c:	2200      	movs	r2, #0
  40038e:	4b0c      	ldr	r3, [pc, #48]	; (4003c0 <sd_mmc_select_slot+0x48>)
  400390:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  400392:	4c0a      	ldr	r4, [pc, #40]	; (4003bc <sd_mmc_select_slot+0x44>)
  400394:	4b0b      	ldr	r3, [pc, #44]	; (4003c4 <sd_mmc_select_slot+0x4c>)
  400396:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400398:	4b0b      	ldr	r3, [pc, #44]	; (4003c8 <sd_mmc_select_slot+0x50>)
  40039a:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  40039c:	7aa0      	ldrb	r0, [r4, #10]
  40039e:	2802      	cmp	r0, #2
  4003a0:	bf14      	ite	ne
  4003a2:	2000      	movne	r0, #0
  4003a4:	2001      	moveq	r0, #1
  4003a6:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  4003a8:	4b04      	ldr	r3, [pc, #16]	; (4003bc <sd_mmc_select_slot+0x44>)
  4003aa:	2202      	movs	r2, #2
  4003ac:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  4003ae:	4a07      	ldr	r2, [pc, #28]	; (4003cc <sd_mmc_select_slot+0x54>)
  4003b0:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  4003b2:	2201      	movs	r2, #1
  4003b4:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  4003b6:	2200      	movs	r2, #0
  4003b8:	779a      	strb	r2, [r3, #30]
  4003ba:	e7e7      	b.n	40038c <sd_mmc_select_slot+0x14>
  4003bc:	200009d8 	.word	0x200009d8
  4003c0:	200009fc 	.word	0x200009fc
  4003c4:	200009d4 	.word	0x200009d4
  4003c8:	00400351 	.word	0x00400351
  4003cc:	00061a80 	.word	0x00061a80

004003d0 <sdio_cmd52>:
{
  4003d0:	b538      	push	{r3, r4, r5, lr}
  4003d2:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  4003d4:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4003d6:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  4003da:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  4003de:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  4003e2:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4003e4:	4311      	orrs	r1, r2
  4003e6:	f241 3034 	movw	r0, #4916	; 0x1334
  4003ea:	4b05      	ldr	r3, [pc, #20]	; (400400 <sdio_cmd52+0x30>)
  4003ec:	4798      	blx	r3
  4003ee:	4605      	mov	r5, r0
  4003f0:	b908      	cbnz	r0, 4003f6 <sdio_cmd52+0x26>
}
  4003f2:	4628      	mov	r0, r5
  4003f4:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  4003f6:	4b03      	ldr	r3, [pc, #12]	; (400404 <sdio_cmd52+0x34>)
  4003f8:	4798      	blx	r3
  4003fa:	7020      	strb	r0, [r4, #0]
	return true;
  4003fc:	e7f9      	b.n	4003f2 <sdio_cmd52+0x22>
  4003fe:	bf00      	nop
  400400:	004015dd 	.word	0x004015dd
  400404:	00401609 	.word	0x00401609

00400408 <sd_mmc_cmd9_mci>:
{
  400408:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40040a:	4b09      	ldr	r3, [pc, #36]	; (400430 <sd_mmc_cmd9_mci+0x28>)
  40040c:	681b      	ldr	r3, [r3, #0]
  40040e:	8919      	ldrh	r1, [r3, #8]
  400410:	0409      	lsls	r1, r1, #16
  400412:	f641 3009 	movw	r0, #6921	; 0x1b09
  400416:	4b07      	ldr	r3, [pc, #28]	; (400434 <sd_mmc_cmd9_mci+0x2c>)
  400418:	4798      	blx	r3
  40041a:	4604      	mov	r4, r0
  40041c:	b908      	cbnz	r0, 400422 <sd_mmc_cmd9_mci+0x1a>
}
  40041e:	4620      	mov	r0, r4
  400420:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400422:	4b03      	ldr	r3, [pc, #12]	; (400430 <sd_mmc_cmd9_mci+0x28>)
  400424:	6818      	ldr	r0, [r3, #0]
  400426:	300e      	adds	r0, #14
  400428:	4b03      	ldr	r3, [pc, #12]	; (400438 <sd_mmc_cmd9_mci+0x30>)
  40042a:	4798      	blx	r3
	return true;
  40042c:	e7f7      	b.n	40041e <sd_mmc_cmd9_mci+0x16>
  40042e:	bf00      	nop
  400430:	200009d4 	.word	0x200009d4
  400434:	004015dd 	.word	0x004015dd
  400438:	00401615 	.word	0x00401615

0040043c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  40043c:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40043e:	4b04      	ldr	r3, [pc, #16]	; (400450 <sd_mmc_deselect_slot+0x14>)
  400440:	781b      	ldrb	r3, [r3, #0]
  400442:	b103      	cbz	r3, 400446 <sd_mmc_deselect_slot+0xa>
  400444:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  400446:	2000      	movs	r0, #0
  400448:	4b02      	ldr	r3, [pc, #8]	; (400454 <sd_mmc_deselect_slot+0x18>)
  40044a:	4798      	blx	r3
	}
}
  40044c:	e7fa      	b.n	400444 <sd_mmc_deselect_slot+0x8>
  40044e:	bf00      	nop
  400450:	200009fc 	.word	0x200009fc
  400454:	004015b5 	.word	0x004015b5

00400458 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  400458:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40045a:	2204      	movs	r2, #4
  40045c:	4b03      	ldr	r3, [pc, #12]	; (40046c <sd_mmc_init+0x14>)
  40045e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400460:	22ff      	movs	r2, #255	; 0xff
  400462:	4b03      	ldr	r3, [pc, #12]	; (400470 <sd_mmc_init+0x18>)
  400464:	701a      	strb	r2, [r3, #0]
	driver_init();
  400466:	4b03      	ldr	r3, [pc, #12]	; (400474 <sd_mmc_init+0x1c>)
  400468:	4798      	blx	r3
  40046a:	bd08      	pop	{r3, pc}
  40046c:	200009d8 	.word	0x200009d8
  400470:	200009fc 	.word	0x200009fc
  400474:	004014c5 	.word	0x004014c5

00400478 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40047c:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40047e:	4ba7      	ldr	r3, [pc, #668]	; (40071c <sd_mmc_check+0x2a4>)
  400480:	4798      	blx	r3
  400482:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  400484:	2801      	cmp	r0, #1
  400486:	d005      	beq.n	400494 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  400488:	4ba5      	ldr	r3, [pc, #660]	; (400720 <sd_mmc_check+0x2a8>)
  40048a:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  40048c:	4620      	mov	r0, r4
  40048e:	b015      	add	sp, #84	; 0x54
  400490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  400494:	ae14      	add	r6, sp, #80	; 0x50
  400496:	2308      	movs	r3, #8
  400498:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  40049c:	4ba1      	ldr	r3, [pc, #644]	; (400724 <sd_mmc_check+0x2ac>)
  40049e:	681b      	ldr	r3, [r3, #0]
  4004a0:	2701      	movs	r7, #1
  4004a2:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4004a4:	2500      	movs	r5, #0
  4004a6:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  4004a8:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
  4004aa:	4b9f      	ldr	r3, [pc, #636]	; (400728 <sd_mmc_check+0x2b0>)
  4004ac:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4004ae:	9600      	str	r6, [sp, #0]
  4004b0:	462b      	mov	r3, r5
  4004b2:	2206      	movs	r2, #6
  4004b4:	4629      	mov	r1, r5
  4004b6:	4638      	mov	r0, r7
  4004b8:	4e9c      	ldr	r6, [pc, #624]	; (40072c <sd_mmc_check+0x2b4>)
  4004ba:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4004bc:	4629      	mov	r1, r5
  4004be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4004c2:	4b9b      	ldr	r3, [pc, #620]	; (400730 <sd_mmc_check+0x2b8>)
  4004c4:	4798      	blx	r3
  4004c6:	b930      	cbnz	r0, 4004d6 <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4004c8:	4b96      	ldr	r3, [pc, #600]	; (400724 <sd_mmc_check+0x2ac>)
  4004ca:	681b      	ldr	r3, [r3, #0]
  4004cc:	2403      	movs	r4, #3
  4004ce:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  4004d0:	4b93      	ldr	r3, [pc, #588]	; (400720 <sd_mmc_check+0x2a8>)
  4004d2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4004d4:	e7da      	b.n	40048c <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4004d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4004da:	f245 5008 	movw	r0, #21768	; 0x5508
  4004de:	4b94      	ldr	r3, [pc, #592]	; (400730 <sd_mmc_check+0x2b8>)
  4004e0:	4798      	blx	r3
  4004e2:	2800      	cmp	r0, #0
  4004e4:	f040 8093 	bne.w	40060e <sd_mmc_check+0x196>
	*v2 = 0;
  4004e8:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  4004ec:	2100      	movs	r1, #0
  4004ee:	f244 5005 	movw	r0, #17669	; 0x4505
  4004f2:	4b8f      	ldr	r3, [pc, #572]	; (400730 <sd_mmc_check+0x2b8>)
  4004f4:	4798      	blx	r3
  4004f6:	2800      	cmp	r0, #0
  4004f8:	f040 8097 	bne.w	40062a <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4004fc:	4b89      	ldr	r3, [pc, #548]	; (400724 <sd_mmc_check+0x2ac>)
  4004fe:	681b      	ldr	r3, [r3, #0]
  400500:	7adb      	ldrb	r3, [r3, #11]
  400502:	f013 0f01 	tst.w	r3, #1
  400506:	f040 80b5 	bne.w	400674 <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40050a:	2100      	movs	r1, #0
  40050c:	f245 1003 	movw	r0, #20739	; 0x5103
  400510:	4b87      	ldr	r3, [pc, #540]	; (400730 <sd_mmc_check+0x2b8>)
  400512:	4798      	blx	r3
  400514:	2800      	cmp	r0, #0
  400516:	d0d7      	beq.n	4004c8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400518:	4d82      	ldr	r5, [pc, #520]	; (400724 <sd_mmc_check+0x2ac>)
  40051a:	682e      	ldr	r6, [r5, #0]
  40051c:	4b85      	ldr	r3, [pc, #532]	; (400734 <sd_mmc_check+0x2bc>)
  40051e:	4798      	blx	r3
  400520:	0c00      	lsrs	r0, r0, #16
  400522:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400524:	682b      	ldr	r3, [r5, #0]
  400526:	7adb      	ldrb	r3, [r3, #11]
  400528:	f013 0f01 	tst.w	r3, #1
  40052c:	d034      	beq.n	400598 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  40052e:	4b82      	ldr	r3, [pc, #520]	; (400738 <sd_mmc_check+0x2c0>)
  400530:	4798      	blx	r3
  400532:	2800      	cmp	r0, #0
  400534:	d0c8      	beq.n	4004c8 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400536:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400538:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40053a:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40053e:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400542:	497e      	ldr	r1, [pc, #504]	; (40073c <sd_mmc_check+0x2c4>)
  400544:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40054c:	fb02 f201 	mul.w	r2, r2, r1
  400550:	497b      	ldr	r1, [pc, #492]	; (400740 <sd_mmc_check+0x2c8>)
  400552:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400556:	fb02 f201 	mul.w	r2, r2, r1
  40055a:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  40055c:	7b9a      	ldrb	r2, [r3, #14]
  40055e:	0992      	lsrs	r2, r2, #6
  400560:	f040 820b 	bne.w	40097a <sd_mmc_check+0x502>
  400564:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400566:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400568:	7d1a      	ldrb	r2, [r3, #20]
  40056a:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40056c:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  400570:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400574:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400576:	7dd9      	ldrb	r1, [r3, #23]
  400578:	0049      	lsls	r1, r1, #1
  40057a:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40057e:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400582:	3201      	adds	r2, #1
  400584:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400588:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40058a:	408a      	lsls	r2, r1
  40058c:	7cd9      	ldrb	r1, [r3, #19]
  40058e:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  400592:	408a      	lsls	r2, r1
				/ 1024;
  400594:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  400596:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400598:	4b62      	ldr	r3, [pc, #392]	; (400724 <sd_mmc_check+0x2ac>)
  40059a:	681b      	ldr	r3, [r3, #0]
  40059c:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40059e:	0409      	lsls	r1, r1, #16
  4005a0:	f243 1007 	movw	r0, #12551	; 0x3107
  4005a4:	4b62      	ldr	r3, [pc, #392]	; (400730 <sd_mmc_check+0x2b8>)
  4005a6:	4798      	blx	r3
  4005a8:	2800      	cmp	r0, #0
  4005aa:	d08d      	beq.n	4004c8 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4005ac:	4b5d      	ldr	r3, [pc, #372]	; (400724 <sd_mmc_check+0x2ac>)
  4005ae:	681b      	ldr	r3, [r3, #0]
  4005b0:	7ada      	ldrb	r2, [r3, #11]
  4005b2:	f012 0f01 	tst.w	r2, #1
  4005b6:	f040 81ed 	bne.w	400994 <sd_mmc_check+0x51c>
	if (IS_SDIO()) {
  4005ba:	4b5a      	ldr	r3, [pc, #360]	; (400724 <sd_mmc_check+0x2ac>)
  4005bc:	681b      	ldr	r3, [r3, #0]
  4005be:	7adb      	ldrb	r3, [r3, #11]
  4005c0:	f013 0f04 	tst.w	r3, #4
  4005c4:	f000 829c 	beq.w	400b00 <sd_mmc_check+0x688>
  4005c8:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4005ca:	2700      	movs	r7, #0
  4005cc:	4e57      	ldr	r6, [pc, #348]	; (40072c <sd_mmc_check+0x2b4>)
  4005ce:	f1a5 0309 	sub.w	r3, r5, #9
  4005d2:	aa03      	add	r2, sp, #12
  4005d4:	4413      	add	r3, r2
  4005d6:	9300      	str	r3, [sp, #0]
  4005d8:	463b      	mov	r3, r7
  4005da:	462a      	mov	r2, r5
  4005dc:	4639      	mov	r1, r7
  4005de:	4638      	mov	r0, r7
  4005e0:	47b0      	blx	r6
		addr_old++;
  4005e2:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  4005e4:	2d0d      	cmp	r5, #13
  4005e6:	d1f2      	bne.n	4005ce <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4005e8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4005ec:	f89d 900c 	ldrb.w	r9, [sp, #12]
  4005f0:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  4005f4:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4005f8:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  4005fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400600:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  400604:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400606:	f04f 0800 	mov.w	r8, #0
  40060a:	4f48      	ldr	r7, [pc, #288]	; (40072c <sd_mmc_check+0x2b4>)
  40060c:	e239      	b.n	400a82 <sd_mmc_check+0x60a>
	resp = driver_get_response();
  40060e:	4b49      	ldr	r3, [pc, #292]	; (400734 <sd_mmc_check+0x2bc>)
  400610:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  400612:	f1b0 3fff 	cmp.w	r0, #4294967295
  400616:	f000 8347 	beq.w	400ca8 <sd_mmc_check+0x830>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  40061a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40061e:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  400622:	f47f af51 	bne.w	4004c8 <sd_mmc_check+0x50>
	*v2 = 1;
  400626:	46b9      	mov	r9, r7
  400628:	e760      	b.n	4004ec <sd_mmc_check+0x74>
	resp = driver_get_response();
  40062a:	4b42      	ldr	r3, [pc, #264]	; (400734 <sd_mmc_check+0x2bc>)
  40062c:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  40062e:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  400632:	f43f af63 	beq.w	4004fc <sd_mmc_check+0x84>
  400636:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40063a:	f244 5805 	movw	r8, #17669	; 0x4505
  40063e:	4e3c      	ldr	r6, [pc, #240]	; (400730 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400640:	4f3c      	ldr	r7, [pc, #240]	; (400734 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400642:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  400646:	4640      	mov	r0, r8
  400648:	47b0      	blx	r6
  40064a:	2800      	cmp	r0, #0
  40064c:	f43f af3c 	beq.w	4004c8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  400650:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400652:	2800      	cmp	r0, #0
  400654:	db02      	blt.n	40065c <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  400656:	3d01      	subs	r5, #1
  400658:	d1f3      	bne.n	400642 <sd_mmc_check+0x1ca>
  40065a:	e735      	b.n	4004c8 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  40065c:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400660:	d104      	bne.n	40066c <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400662:	4b30      	ldr	r3, [pc, #192]	; (400724 <sd_mmc_check+0x2ac>)
  400664:	681b      	ldr	r3, [r3, #0]
  400666:	2204      	movs	r2, #4
  400668:	72da      	strb	r2, [r3, #11]
  40066a:	e74e      	b.n	40050a <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  40066c:	4b2d      	ldr	r3, [pc, #180]	; (400724 <sd_mmc_check+0x2ac>)
  40066e:	681b      	ldr	r3, [r3, #0]
  400670:	2205      	movs	r2, #5
  400672:	72da      	strb	r2, [r3, #11]
  400674:	f1b9 0f00 	cmp.w	r9, #0
  400678:	4f32      	ldr	r7, [pc, #200]	; (400744 <sd_mmc_check+0x2cc>)
  40067a:	bf14      	ite	ne
  40067c:	46b9      	movne	r9, r7
  40067e:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  400682:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400686:	f04f 0800 	mov.w	r8, #0
  40068a:	4e29      	ldr	r6, [pc, #164]	; (400730 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  40068c:	4f29      	ldr	r7, [pc, #164]	; (400734 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40068e:	4641      	mov	r1, r8
  400690:	f241 1037 	movw	r0, #4407	; 0x1137
  400694:	47b0      	blx	r6
  400696:	b148      	cbz	r0, 4006ac <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  400698:	4649      	mov	r1, r9
  40069a:	f244 5029 	movw	r0, #17705	; 0x4529
  40069e:	47b0      	blx	r6
  4006a0:	b120      	cbz	r0, 4006ac <sd_mmc_check+0x234>
		resp = driver_get_response();
  4006a2:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4006a4:	2800      	cmp	r0, #0
  4006a6:	db20      	blt.n	4006ea <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4006a8:	3d01      	subs	r5, #1
  4006aa:	d1f0      	bne.n	40068e <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4006ac:	4b1d      	ldr	r3, [pc, #116]	; (400724 <sd_mmc_check+0x2ac>)
  4006ae:	681b      	ldr	r3, [r3, #0]
  4006b0:	2202      	movs	r2, #2
  4006b2:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4006b4:	2100      	movs	r1, #0
  4006b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4006ba:	4b1d      	ldr	r3, [pc, #116]	; (400730 <sd_mmc_check+0x2b8>)
  4006bc:	4798      	blx	r3
  4006be:	2800      	cmp	r0, #0
  4006c0:	f43f af02 	beq.w	4004c8 <sd_mmc_check+0x50>
  4006c4:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4006c8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400744 <sd_mmc_check+0x2cc>
  4006cc:	4e18      	ldr	r6, [pc, #96]	; (400730 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4006ce:	4f19      	ldr	r7, [pc, #100]	; (400734 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4006d0:	4641      	mov	r1, r8
  4006d2:	f244 5001 	movw	r0, #17665	; 0x4501
  4006d6:	47b0      	blx	r6
  4006d8:	2800      	cmp	r0, #0
  4006da:	f43f aef5 	beq.w	4004c8 <sd_mmc_check+0x50>
		resp = driver_get_response();
  4006de:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4006e0:	2800      	cmp	r0, #0
  4006e2:	db31      	blt.n	400748 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  4006e4:	3d01      	subs	r5, #1
  4006e6:	d1f3      	bne.n	4006d0 <sd_mmc_check+0x258>
  4006e8:	e6ee      	b.n	4004c8 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  4006ea:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4006ee:	d005      	beq.n	4006fc <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  4006f0:	4b0c      	ldr	r3, [pc, #48]	; (400724 <sd_mmc_check+0x2ac>)
  4006f2:	681a      	ldr	r2, [r3, #0]
  4006f4:	7ad3      	ldrb	r3, [r2, #11]
  4006f6:	f043 0308 	orr.w	r3, r3, #8
  4006fa:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4006fc:	4b09      	ldr	r3, [pc, #36]	; (400724 <sd_mmc_check+0x2ac>)
  4006fe:	681b      	ldr	r3, [r3, #0]
  400700:	7adb      	ldrb	r3, [r3, #11]
  400702:	f013 0f01 	tst.w	r3, #1
  400706:	f43f af00 	beq.w	40050a <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40070a:	2100      	movs	r1, #0
  40070c:	f645 3002 	movw	r0, #23298	; 0x5b02
  400710:	4b07      	ldr	r3, [pc, #28]	; (400730 <sd_mmc_check+0x2b8>)
  400712:	4798      	blx	r3
  400714:	2800      	cmp	r0, #0
  400716:	f47f aef8 	bne.w	40050a <sd_mmc_check+0x92>
  40071a:	e6d5      	b.n	4004c8 <sd_mmc_check+0x50>
  40071c:	00400379 	.word	0x00400379
  400720:	0040043d 	.word	0x0040043d
  400724:	200009d4 	.word	0x200009d4
  400728:	004015b9 	.word	0x004015b9
  40072c:	004003d1 	.word	0x004003d1
  400730:	004015dd 	.word	0x004015dd
  400734:	00401609 	.word	0x00401609
  400738:	00400409 	.word	0x00400409
  40073c:	004086d8 	.word	0x004086d8
  400740:	004086f4 	.word	0x004086f4
  400744:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400748:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  40074c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400750:	d027      	beq.n	4007a2 <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400752:	2100      	movs	r1, #0
  400754:	f645 3002 	movw	r0, #23298	; 0x5b02
  400758:	4ba7      	ldr	r3, [pc, #668]	; (4009f8 <sd_mmc_check+0x580>)
  40075a:	4798      	blx	r3
  40075c:	2800      	cmp	r0, #0
  40075e:	f43f aeb3 	beq.w	4004c8 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  400762:	4ba6      	ldr	r3, [pc, #664]	; (4009fc <sd_mmc_check+0x584>)
  400764:	681b      	ldr	r3, [r3, #0]
  400766:	2201      	movs	r2, #1
  400768:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  40076a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40076e:	f241 1003 	movw	r0, #4355	; 0x1103
  400772:	4ba1      	ldr	r3, [pc, #644]	; (4009f8 <sd_mmc_check+0x580>)
  400774:	4798      	blx	r3
  400776:	2800      	cmp	r0, #0
  400778:	f43f aea6 	beq.w	4004c8 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  40077c:	4ba0      	ldr	r3, [pc, #640]	; (400a00 <sd_mmc_check+0x588>)
  40077e:	4798      	blx	r3
  400780:	2800      	cmp	r0, #0
  400782:	f43f aea1 	beq.w	4004c8 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  400786:	4b9d      	ldr	r3, [pc, #628]	; (4009fc <sd_mmc_check+0x584>)
  400788:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40078a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  40078c:	f3c3 0383 	ubfx	r3, r3, #2, #4
  400790:	3b01      	subs	r3, #1
  400792:	2b03      	cmp	r3, #3
  400794:	d80c      	bhi.n	4007b0 <sd_mmc_check+0x338>
  400796:	e8df f013 	tbh	[pc, r3, lsl #1]
  40079a:	00cc      	.short	0x00cc
  40079c:	00d200cf 	.word	0x00d200cf
  4007a0:	00d5      	.short	0x00d5
				sd_mmc_card->type |= CARD_TYPE_HC;
  4007a2:	4b96      	ldr	r3, [pc, #600]	; (4009fc <sd_mmc_check+0x584>)
  4007a4:	681a      	ldr	r2, [r3, #0]
  4007a6:	7ad3      	ldrb	r3, [r2, #11]
  4007a8:	f043 0308 	orr.w	r3, r3, #8
  4007ac:	72d3      	strb	r3, [r2, #11]
  4007ae:	e7d0      	b.n	400752 <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4007b0:	2312      	movs	r3, #18
  4007b2:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007b4:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4007b6:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4007ba:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4007be:	4991      	ldr	r1, [pc, #580]	; (400a04 <sd_mmc_check+0x58c>)
  4007c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4007c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4007c8:	fb03 f301 	mul.w	r3, r3, r1
  4007cc:	498e      	ldr	r1, [pc, #568]	; (400a08 <sd_mmc_check+0x590>)
  4007ce:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4007d2:	fb03 f301 	mul.w	r3, r3, r1
  4007d6:	6013      	str	r3, [r2, #0]
  4007d8:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4007da:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4007dc:	7d13      	ldrb	r3, [r2, #20]
  4007de:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4007e0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  4007e4:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4007e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4007ec:	f640 71ff 	movw	r1, #4095	; 0xfff
  4007f0:	428b      	cmp	r3, r1
  4007f2:	d00f      	beq.n	400814 <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4007f4:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4007f6:	7dd1      	ldrb	r1, [r2, #23]
  4007f8:	0049      	lsls	r1, r1, #1
  4007fa:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  4007fe:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400800:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400804:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400806:	408b      	lsls	r3, r1
  400808:	7cd1      	ldrb	r1, [r2, #19]
  40080a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40080e:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400810:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400812:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400814:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400816:	0409      	lsls	r1, r1, #16
  400818:	f243 1007 	movw	r0, #12551	; 0x3107
  40081c:	4b76      	ldr	r3, [pc, #472]	; (4009f8 <sd_mmc_check+0x580>)
  40081e:	4798      	blx	r3
  400820:	2800      	cmp	r0, #0
  400822:	f43f ae51 	beq.w	4004c8 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400826:	4b75      	ldr	r3, [pc, #468]	; (4009fc <sd_mmc_check+0x584>)
  400828:	681b      	ldr	r3, [r3, #0]
  40082a:	7b1b      	ldrb	r3, [r3, #12]
  40082c:	2b3f      	cmp	r3, #63	; 0x3f
  40082e:	f240 8096 	bls.w	40095e <sd_mmc_check+0x4e6>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400832:	2100      	movs	r1, #0
  400834:	9100      	str	r1, [sp, #0]
  400836:	2301      	movs	r3, #1
  400838:	f44f 7200 	mov.w	r2, #512	; 0x200
  40083c:	4873      	ldr	r0, [pc, #460]	; (400a0c <sd_mmc_check+0x594>)
  40083e:	4d74      	ldr	r5, [pc, #464]	; (400a10 <sd_mmc_check+0x598>)
  400840:	47a8      	blx	r5
  400842:	2800      	cmp	r0, #0
  400844:	f43f ae40 	beq.w	4004c8 <sd_mmc_check+0x50>
  400848:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40084a:	4e72      	ldr	r6, [pc, #456]	; (400a14 <sd_mmc_check+0x59c>)
  40084c:	a803      	add	r0, sp, #12
  40084e:	47b0      	blx	r6
  400850:	2800      	cmp	r0, #0
  400852:	f43f ae39 	beq.w	4004c8 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  400856:	3501      	adds	r5, #1
  400858:	b2ad      	uxth	r5, r5
  40085a:	2d32      	cmp	r5, #50	; 0x32
  40085c:	d1f6      	bne.n	40084c <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  40085e:	9e03      	ldr	r6, [sp, #12]
  400860:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400864:	4b65      	ldr	r3, [pc, #404]	; (4009fc <sd_mmc_check+0x584>)
  400866:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400868:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40086a:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40086c:	7d1b      	ldrb	r3, [r3, #20]
  40086e:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400870:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  400874:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400878:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40087c:	f640 72ff 	movw	r2, #4095	; 0xfff
  400880:	4293      	cmp	r3, r2
  400882:	d10e      	bne.n	4008a2 <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  400884:	4f63      	ldr	r7, [pc, #396]	; (400a14 <sd_mmc_check+0x59c>)
  400886:	a804      	add	r0, sp, #16
  400888:	47b8      	blx	r7
  40088a:	2800      	cmp	r0, #0
  40088c:	f43f ae1c 	beq.w	4004c8 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  400890:	3501      	adds	r5, #1
  400892:	b2ad      	uxth	r5, r5
  400894:	2d35      	cmp	r5, #53	; 0x35
  400896:	d9f6      	bls.n	400886 <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  400898:	4b58      	ldr	r3, [pc, #352]	; (4009fc <sd_mmc_check+0x584>)
  40089a:	681a      	ldr	r2, [r3, #0]
  40089c:	9b04      	ldr	r3, [sp, #16]
  40089e:	085b      	lsrs	r3, r3, #1
  4008a0:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4008a2:	4f5c      	ldr	r7, [pc, #368]	; (400a14 <sd_mmc_check+0x59c>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4008a4:	2d7f      	cmp	r5, #127	; 0x7f
  4008a6:	d950      	bls.n	40094a <sd_mmc_check+0x4d2>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4008a8:	4b5b      	ldr	r3, [pc, #364]	; (400a18 <sd_mmc_check+0x5a0>)
  4008aa:	7818      	ldrb	r0, [r3, #0]
  4008ac:	4b5b      	ldr	r3, [pc, #364]	; (400a1c <sd_mmc_check+0x5a4>)
  4008ae:	4798      	blx	r3
  4008b0:	2803      	cmp	r0, #3
  4008b2:	d91d      	bls.n	4008f0 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4008b4:	4b58      	ldr	r3, [pc, #352]	; (400a18 <sd_mmc_check+0x5a0>)
  4008b6:	7818      	ldrb	r0, [r3, #0]
  4008b8:	4b58      	ldr	r3, [pc, #352]	; (400a1c <sd_mmc_check+0x5a4>)
  4008ba:	4798      	blx	r3
  4008bc:	4605      	mov	r5, r0
	switch (bus_width) {
  4008be:	2804      	cmp	r0, #4
  4008c0:	d04b      	beq.n	40095a <sd_mmc_check+0x4e2>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4008c2:	4b57      	ldr	r3, [pc, #348]	; (400a20 <sd_mmc_check+0x5a8>)
  4008c4:	4957      	ldr	r1, [pc, #348]	; (400a24 <sd_mmc_check+0x5ac>)
  4008c6:	2808      	cmp	r0, #8
  4008c8:	bf18      	it	ne
  4008ca:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4008cc:	f243 1006 	movw	r0, #12550	; 0x3106
  4008d0:	4b49      	ldr	r3, [pc, #292]	; (4009f8 <sd_mmc_check+0x580>)
  4008d2:	4798      	blx	r3
  4008d4:	2800      	cmp	r0, #0
  4008d6:	f43f adf7 	beq.w	4004c8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4008da:	4b53      	ldr	r3, [pc, #332]	; (400a28 <sd_mmc_check+0x5b0>)
  4008dc:	4798      	blx	r3
  4008de:	f010 0f80 	tst.w	r0, #128	; 0x80
  4008e2:	f47f adf1 	bne.w	4004c8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  4008e6:	4b45      	ldr	r3, [pc, #276]	; (4009fc <sd_mmc_check+0x584>)
  4008e8:	681b      	ldr	r3, [r3, #0]
  4008ea:	735d      	strb	r5, [r3, #13]
			sd_mmc_configure_slot();
  4008ec:	4b4f      	ldr	r3, [pc, #316]	; (400a2c <sd_mmc_check+0x5b4>)
  4008ee:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  4008f0:	4b4f      	ldr	r3, [pc, #316]	; (400a30 <sd_mmc_check+0x5b8>)
  4008f2:	4798      	blx	r3
  4008f4:	b1b0      	cbz	r0, 400924 <sd_mmc_check+0x4ac>
  4008f6:	b1ae      	cbz	r6, 400924 <sd_mmc_check+0x4ac>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  4008f8:	494e      	ldr	r1, [pc, #312]	; (400a34 <sd_mmc_check+0x5bc>)
  4008fa:	f243 1006 	movw	r0, #12550	; 0x3106
  4008fe:	4b3e      	ldr	r3, [pc, #248]	; (4009f8 <sd_mmc_check+0x580>)
  400900:	4798      	blx	r3
  400902:	2800      	cmp	r0, #0
  400904:	f43f ade0 	beq.w	4004c8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400908:	4b47      	ldr	r3, [pc, #284]	; (400a28 <sd_mmc_check+0x5b0>)
  40090a:	4798      	blx	r3
  40090c:	f010 0f80 	tst.w	r0, #128	; 0x80
  400910:	f47f adda 	bne.w	4004c8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400914:	4b39      	ldr	r3, [pc, #228]	; (4009fc <sd_mmc_check+0x584>)
  400916:	681b      	ldr	r3, [r3, #0]
  400918:	2201      	movs	r2, #1
  40091a:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  40091c:	4a46      	ldr	r2, [pc, #280]	; (400a38 <sd_mmc_check+0x5c0>)
  40091e:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400920:	4b42      	ldr	r3, [pc, #264]	; (400a2c <sd_mmc_check+0x5b4>)
  400922:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400924:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400926:	f44f 7800 	mov.w	r8, #512	; 0x200
  40092a:	f241 1710 	movw	r7, #4368	; 0x1110
  40092e:	4e32      	ldr	r6, [pc, #200]	; (4009f8 <sd_mmc_check+0x580>)
  400930:	e01d      	b.n	40096e <sd_mmc_check+0x4f6>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400932:	2314      	movs	r3, #20
  400934:	7313      	strb	r3, [r2, #12]
  400936:	e73d      	b.n	4007b4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400938:	2322      	movs	r3, #34	; 0x22
  40093a:	7313      	strb	r3, [r2, #12]
  40093c:	e73a      	b.n	4007b4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  40093e:	2330      	movs	r3, #48	; 0x30
  400940:	7313      	strb	r3, [r2, #12]
  400942:	e737      	b.n	4007b4 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400944:	2340      	movs	r3, #64	; 0x40
  400946:	7313      	strb	r3, [r2, #12]
  400948:	e734      	b.n	4007b4 <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  40094a:	a804      	add	r0, sp, #16
  40094c:	47b8      	blx	r7
  40094e:	2800      	cmp	r0, #0
  400950:	f43f adba 	beq.w	4004c8 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400954:	3501      	adds	r5, #1
  400956:	b2ad      	uxth	r5, r5
  400958:	e7a4      	b.n	4008a4 <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40095a:	4938      	ldr	r1, [pc, #224]	; (400a3c <sd_mmc_check+0x5c4>)
  40095c:	e7b6      	b.n	4008cc <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  40095e:	4b33      	ldr	r3, [pc, #204]	; (400a2c <sd_mmc_check+0x5b4>)
  400960:	4798      	blx	r3
  400962:	e7df      	b.n	400924 <sd_mmc_check+0x4ac>
  400964:	3d01      	subs	r5, #1
	while (retry--) {
  400966:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  40096a:	f43f adad 	beq.w	4004c8 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40096e:	4641      	mov	r1, r8
  400970:	4638      	mov	r0, r7
  400972:	47b0      	blx	r6
  400974:	2800      	cmp	r0, #0
  400976:	d0f5      	beq.n	400964 <sd_mmc_check+0x4ec>
  400978:	e10e      	b.n	400b98 <sd_mmc_check+0x720>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40097a:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40097c:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40097e:	7d5a      	ldrb	r2, [r3, #21]
  400980:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400982:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  400986:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  400988:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  40098c:	3201      	adds	r2, #1
  40098e:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  400990:	605a      	str	r2, [r3, #4]
  400992:	e601      	b.n	400598 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400994:	8919      	ldrh	r1, [r3, #8]
  400996:	0409      	lsls	r1, r1, #16
  400998:	f241 1037 	movw	r0, #4407	; 0x1137
  40099c:	4b16      	ldr	r3, [pc, #88]	; (4009f8 <sd_mmc_check+0x580>)
  40099e:	4798      	blx	r3
  4009a0:	2800      	cmp	r0, #0
  4009a2:	f43f ad91 	beq.w	4004c8 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4009a6:	2301      	movs	r3, #1
  4009a8:	9300      	str	r3, [sp, #0]
  4009aa:	2208      	movs	r2, #8
  4009ac:	2100      	movs	r1, #0
  4009ae:	4824      	ldr	r0, [pc, #144]	; (400a40 <sd_mmc_check+0x5c8>)
  4009b0:	4d17      	ldr	r5, [pc, #92]	; (400a10 <sd_mmc_check+0x598>)
  4009b2:	47a8      	blx	r5
  4009b4:	2800      	cmp	r0, #0
  4009b6:	f43f ad87 	beq.w	4004c8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  4009ba:	2101      	movs	r1, #1
  4009bc:	a804      	add	r0, sp, #16
  4009be:	4b21      	ldr	r3, [pc, #132]	; (400a44 <sd_mmc_check+0x5cc>)
  4009c0:	4798      	blx	r3
  4009c2:	2800      	cmp	r0, #0
  4009c4:	f43f ad80 	beq.w	4004c8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  4009c8:	4b1f      	ldr	r3, [pc, #124]	; (400a48 <sd_mmc_check+0x5d0>)
  4009ca:	4798      	blx	r3
  4009cc:	2800      	cmp	r0, #0
  4009ce:	f43f ad7b 	beq.w	4004c8 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  4009d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4009d6:	f003 030f 	and.w	r3, r3, #15
  4009da:	2b01      	cmp	r3, #1
  4009dc:	d036      	beq.n	400a4c <sd_mmc_check+0x5d4>
  4009de:	b133      	cbz	r3, 4009ee <sd_mmc_check+0x576>
  4009e0:	2b02      	cmp	r3, #2
  4009e2:	d038      	beq.n	400a56 <sd_mmc_check+0x5de>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4009e4:	4b05      	ldr	r3, [pc, #20]	; (4009fc <sd_mmc_check+0x584>)
  4009e6:	681b      	ldr	r3, [r3, #0]
  4009e8:	2210      	movs	r2, #16
  4009ea:	731a      	strb	r2, [r3, #12]
  4009ec:	e5e5      	b.n	4005ba <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4009ee:	4b03      	ldr	r3, [pc, #12]	; (4009fc <sd_mmc_check+0x584>)
  4009f0:	681b      	ldr	r3, [r3, #0]
  4009f2:	2210      	movs	r2, #16
  4009f4:	731a      	strb	r2, [r3, #12]
  4009f6:	e5e0      	b.n	4005ba <sd_mmc_check+0x142>
  4009f8:	004015dd 	.word	0x004015dd
  4009fc:	200009d4 	.word	0x200009d4
  400a00:	00400409 	.word	0x00400409
  400a04:	004086d8 	.word	0x004086d8
  400a08:	00408698 	.word	0x00408698
  400a0c:	00081108 	.word	0x00081108
  400a10:	00401645 	.word	0x00401645
  400a14:	00401709 	.word	0x00401709
  400a18:	200009fc 	.word	0x200009fc
  400a1c:	004014ed 	.word	0x004014ed
  400a20:	01b70000 	.word	0x01b70000
  400a24:	01b70200 	.word	0x01b70200
  400a28:	00401609 	.word	0x00401609
  400a2c:	00400351 	.word	0x00400351
  400a30:	004014f7 	.word	0x004014f7
  400a34:	03b90100 	.word	0x03b90100
  400a38:	03197500 	.word	0x03197500
  400a3c:	01b70100 	.word	0x01b70100
  400a40:	00081133 	.word	0x00081133
  400a44:	00401779 	.word	0x00401779
  400a48:	004017dd 	.word	0x004017dd
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400a4c:	4b98      	ldr	r3, [pc, #608]	; (400cb0 <sd_mmc_check+0x838>)
  400a4e:	681b      	ldr	r3, [r3, #0]
  400a50:	221a      	movs	r2, #26
  400a52:	731a      	strb	r2, [r3, #12]
  400a54:	e5b1      	b.n	4005ba <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400a56:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400a5a:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400a5c:	4b94      	ldr	r3, [pc, #592]	; (400cb0 <sd_mmc_check+0x838>)
  400a5e:	681b      	ldr	r3, [r3, #0]
  400a60:	bf14      	ite	ne
  400a62:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400a64:	2220      	moveq	r2, #32
  400a66:	731a      	strb	r2, [r3, #12]
  400a68:	e5a7      	b.n	4005ba <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  400a6a:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400a6e:	2b00      	cmp	r3, #0
  400a70:	f43f ad2a 	beq.w	4004c8 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400a74:	3302      	adds	r3, #2
  400a76:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  400a78:	f509 7380 	add.w	r3, r9, #256	; 0x100
  400a7c:	429e      	cmp	r6, r3
  400a7e:	f63f ad23 	bhi.w	4004c8 <sd_mmc_check+0x50>
	addr_new = addr_old;
  400a82:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400a84:	ab04      	add	r3, sp, #16
  400a86:	442b      	add	r3, r5
  400a88:	9300      	str	r3, [sp, #0]
  400a8a:	4643      	mov	r3, r8
  400a8c:	1972      	adds	r2, r6, r5
  400a8e:	4641      	mov	r1, r8
  400a90:	4640      	mov	r0, r8
  400a92:	47b8      	blx	r7
  400a94:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  400a96:	2d03      	cmp	r5, #3
  400a98:	d1f4      	bne.n	400a84 <sd_mmc_check+0x60c>
		if (buf[0] == SDIO_CISTPL_END) {
  400a9a:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a9e:	2bff      	cmp	r3, #255	; 0xff
  400aa0:	f43f ad12 	beq.w	4004c8 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  400aa4:	2b22      	cmp	r3, #34	; 0x22
  400aa6:	d1e0      	bne.n	400a6a <sd_mmc_check+0x5f2>
  400aa8:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400aac:	2b00      	cmp	r3, #0
  400aae:	d1dc      	bne.n	400a6a <sd_mmc_check+0x5f2>
  400ab0:	ad04      	add	r5, sp, #16
  400ab2:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400ab6:	f04f 0800 	mov.w	r8, #0
  400aba:	4f7e      	ldr	r7, [pc, #504]	; (400cb4 <sd_mmc_check+0x83c>)
  400abc:	9500      	str	r5, [sp, #0]
  400abe:	4643      	mov	r3, r8
  400ac0:	4632      	mov	r2, r6
  400ac2:	4641      	mov	r1, r8
  400ac4:	4640      	mov	r0, r8
  400ac6:	47b8      	blx	r7
		addr_new++;
  400ac8:	3601      	adds	r6, #1
  400aca:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  400acc:	454e      	cmp	r6, r9
  400ace:	d1f5      	bne.n	400abc <sd_mmc_check+0x644>
	tplfe_max_tran_speed = buf[5];
  400ad0:	f89d 3015 	ldrb.w	r3, [sp, #21]
  400ad4:	2b32      	cmp	r3, #50	; 0x32
  400ad6:	bf28      	it	cs
  400ad8:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  400ada:	4a75      	ldr	r2, [pc, #468]	; (400cb0 <sd_mmc_check+0x838>)
  400adc:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  400ade:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  400ae2:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400ae6:	4974      	ldr	r1, [pc, #464]	; (400cb8 <sd_mmc_check+0x840>)
  400ae8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400af0:	fb03 f301 	mul.w	r3, r3, r1
  400af4:	4971      	ldr	r1, [pc, #452]	; (400cbc <sd_mmc_check+0x844>)
  400af6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400afa:	fb03 f301 	mul.w	r3, r3, r1
  400afe:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400b00:	4b6f      	ldr	r3, [pc, #444]	; (400cc0 <sd_mmc_check+0x848>)
  400b02:	7818      	ldrb	r0, [r3, #0]
  400b04:	4b6f      	ldr	r3, [pc, #444]	; (400cc4 <sd_mmc_check+0x84c>)
  400b06:	4798      	blx	r3
  400b08:	2803      	cmp	r0, #3
  400b0a:	d922      	bls.n	400b52 <sd_mmc_check+0x6da>
		if (IS_SDIO()) {
  400b0c:	4b68      	ldr	r3, [pc, #416]	; (400cb0 <sd_mmc_check+0x838>)
  400b0e:	681b      	ldr	r3, [r3, #0]
  400b10:	7adb      	ldrb	r3, [r3, #11]
  400b12:	f013 0f04 	tst.w	r3, #4
  400b16:	d146      	bne.n	400ba6 <sd_mmc_check+0x72e>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b18:	4b65      	ldr	r3, [pc, #404]	; (400cb0 <sd_mmc_check+0x838>)
  400b1a:	681b      	ldr	r3, [r3, #0]
  400b1c:	7ada      	ldrb	r2, [r3, #11]
  400b1e:	f012 0f01 	tst.w	r2, #1
  400b22:	d014      	beq.n	400b4e <sd_mmc_check+0x6d6>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400b24:	8919      	ldrh	r1, [r3, #8]
  400b26:	0409      	lsls	r1, r1, #16
  400b28:	f241 1037 	movw	r0, #4407	; 0x1137
  400b2c:	4b66      	ldr	r3, [pc, #408]	; (400cc8 <sd_mmc_check+0x850>)
  400b2e:	4798      	blx	r3
  400b30:	2800      	cmp	r0, #0
  400b32:	f43f acc9 	beq.w	4004c8 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400b36:	2102      	movs	r1, #2
  400b38:	f241 1006 	movw	r0, #4358	; 0x1106
  400b3c:	4b62      	ldr	r3, [pc, #392]	; (400cc8 <sd_mmc_check+0x850>)
  400b3e:	4798      	blx	r3
  400b40:	2800      	cmp	r0, #0
  400b42:	f43f acc1 	beq.w	4004c8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400b46:	4b5a      	ldr	r3, [pc, #360]	; (400cb0 <sd_mmc_check+0x838>)
  400b48:	681b      	ldr	r3, [r3, #0]
  400b4a:	2204      	movs	r2, #4
  400b4c:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  400b4e:	4b5f      	ldr	r3, [pc, #380]	; (400ccc <sd_mmc_check+0x854>)
  400b50:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400b52:	4b5f      	ldr	r3, [pc, #380]	; (400cd0 <sd_mmc_check+0x858>)
  400b54:	4798      	blx	r3
  400b56:	b180      	cbz	r0, 400b7a <sd_mmc_check+0x702>
		if (IS_SDIO()) {
  400b58:	4b55      	ldr	r3, [pc, #340]	; (400cb0 <sd_mmc_check+0x838>)
  400b5a:	681b      	ldr	r3, [r3, #0]
  400b5c:	7adb      	ldrb	r3, [r3, #11]
  400b5e:	f013 0f04 	tst.w	r3, #4
  400b62:	d141      	bne.n	400be8 <sd_mmc_check+0x770>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b64:	4b52      	ldr	r3, [pc, #328]	; (400cb0 <sd_mmc_check+0x838>)
  400b66:	681b      	ldr	r3, [r3, #0]
  400b68:	7ada      	ldrb	r2, [r3, #11]
  400b6a:	f012 0f01 	tst.w	r2, #1
  400b6e:	d002      	beq.n	400b76 <sd_mmc_check+0x6fe>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400b70:	7b1b      	ldrb	r3, [r3, #12]
  400b72:	2b10      	cmp	r3, #16
  400b74:	d85d      	bhi.n	400c32 <sd_mmc_check+0x7ba>
		sd_mmc_configure_slot();
  400b76:	4b55      	ldr	r3, [pc, #340]	; (400ccc <sd_mmc_check+0x854>)
  400b78:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b7a:	4b4d      	ldr	r3, [pc, #308]	; (400cb0 <sd_mmc_check+0x838>)
  400b7c:	681b      	ldr	r3, [r3, #0]
  400b7e:	7adb      	ldrb	r3, [r3, #11]
  400b80:	f013 0f01 	tst.w	r3, #1
  400b84:	d008      	beq.n	400b98 <sd_mmc_check+0x720>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400b86:	f44f 7100 	mov.w	r1, #512	; 0x200
  400b8a:	f241 1010 	movw	r0, #4368	; 0x1110
  400b8e:	4b4e      	ldr	r3, [pc, #312]	; (400cc8 <sd_mmc_check+0x850>)
  400b90:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400b92:	2800      	cmp	r0, #0
  400b94:	f43f ac98 	beq.w	4004c8 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400b98:	4b45      	ldr	r3, [pc, #276]	; (400cb0 <sd_mmc_check+0x838>)
  400b9a:	681b      	ldr	r3, [r3, #0]
  400b9c:	2200      	movs	r2, #0
  400b9e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  400ba0:	4b4c      	ldr	r3, [pc, #304]	; (400cd4 <sd_mmc_check+0x85c>)
  400ba2:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400ba4:	e472      	b.n	40048c <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400ba6:	ab04      	add	r3, sp, #16
  400ba8:	9300      	str	r3, [sp, #0]
  400baa:	2300      	movs	r3, #0
  400bac:	2208      	movs	r2, #8
  400bae:	4619      	mov	r1, r3
  400bb0:	4618      	mov	r0, r3
  400bb2:	4d40      	ldr	r5, [pc, #256]	; (400cb4 <sd_mmc_check+0x83c>)
  400bb4:	47a8      	blx	r5
  400bb6:	2800      	cmp	r0, #0
  400bb8:	f43f ac86 	beq.w	4004c8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400bbc:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400bc0:	2b00      	cmp	r3, #0
  400bc2:	daa9      	bge.n	400b18 <sd_mmc_check+0x6a0>
	u8_value = SDIO_BUSWIDTH_4B;
  400bc4:	ab14      	add	r3, sp, #80	; 0x50
  400bc6:	2202      	movs	r2, #2
  400bc8:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400bcc:	9300      	str	r3, [sp, #0]
  400bce:	2301      	movs	r3, #1
  400bd0:	2207      	movs	r2, #7
  400bd2:	2100      	movs	r1, #0
  400bd4:	4618      	mov	r0, r3
  400bd6:	47a8      	blx	r5
  400bd8:	2800      	cmp	r0, #0
  400bda:	f43f ac75 	beq.w	4004c8 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400bde:	4b34      	ldr	r3, [pc, #208]	; (400cb0 <sd_mmc_check+0x838>)
  400be0:	681b      	ldr	r3, [r3, #0]
  400be2:	2204      	movs	r2, #4
  400be4:	735a      	strb	r2, [r3, #13]
  400be6:	e797      	b.n	400b18 <sd_mmc_check+0x6a0>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400be8:	ab04      	add	r3, sp, #16
  400bea:	9300      	str	r3, [sp, #0]
  400bec:	2300      	movs	r3, #0
  400bee:	2213      	movs	r2, #19
  400bf0:	4619      	mov	r1, r3
  400bf2:	4618      	mov	r0, r3
  400bf4:	4d2f      	ldr	r5, [pc, #188]	; (400cb4 <sd_mmc_check+0x83c>)
  400bf6:	47a8      	blx	r5
  400bf8:	2800      	cmp	r0, #0
  400bfa:	f43f ac65 	beq.w	4004c8 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400bfe:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400c02:	f013 0f01 	tst.w	r3, #1
  400c06:	d0ad      	beq.n	400b64 <sd_mmc_check+0x6ec>
	u8_value = SDIO_EHS;
  400c08:	ab14      	add	r3, sp, #80	; 0x50
  400c0a:	2202      	movs	r2, #2
  400c0c:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400c10:	9300      	str	r3, [sp, #0]
  400c12:	2301      	movs	r3, #1
  400c14:	2213      	movs	r2, #19
  400c16:	2100      	movs	r1, #0
  400c18:	4618      	mov	r0, r3
  400c1a:	47a8      	blx	r5
  400c1c:	2800      	cmp	r0, #0
  400c1e:	f43f ac53 	beq.w	4004c8 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400c22:	4b23      	ldr	r3, [pc, #140]	; (400cb0 <sd_mmc_check+0x838>)
  400c24:	681b      	ldr	r3, [r3, #0]
  400c26:	2201      	movs	r2, #1
  400c28:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400c2a:	681a      	ldr	r2, [r3, #0]
  400c2c:	0052      	lsls	r2, r2, #1
  400c2e:	601a      	str	r2, [r3, #0]
  400c30:	e798      	b.n	400b64 <sd_mmc_check+0x6ec>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400c32:	2540      	movs	r5, #64	; 0x40
  400c34:	462a      	mov	r2, r5
  400c36:	2100      	movs	r1, #0
  400c38:	a804      	add	r0, sp, #16
  400c3a:	4b27      	ldr	r3, [pc, #156]	; (400cd8 <sd_mmc_check+0x860>)
  400c3c:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400c3e:	2301      	movs	r3, #1
  400c40:	9300      	str	r3, [sp, #0]
  400c42:	462a      	mov	r2, r5
  400c44:	4925      	ldr	r1, [pc, #148]	; (400cdc <sd_mmc_check+0x864>)
  400c46:	4826      	ldr	r0, [pc, #152]	; (400ce0 <sd_mmc_check+0x868>)
  400c48:	4d26      	ldr	r5, [pc, #152]	; (400ce4 <sd_mmc_check+0x86c>)
  400c4a:	47a8      	blx	r5
  400c4c:	2800      	cmp	r0, #0
  400c4e:	f43f ac3b 	beq.w	4004c8 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400c52:	2101      	movs	r1, #1
  400c54:	a804      	add	r0, sp, #16
  400c56:	4b24      	ldr	r3, [pc, #144]	; (400ce8 <sd_mmc_check+0x870>)
  400c58:	4798      	blx	r3
  400c5a:	2800      	cmp	r0, #0
  400c5c:	f43f ac34 	beq.w	4004c8 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400c60:	4b22      	ldr	r3, [pc, #136]	; (400cec <sd_mmc_check+0x874>)
  400c62:	4798      	blx	r3
  400c64:	2800      	cmp	r0, #0
  400c66:	f43f ac2f 	beq.w	4004c8 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400c6a:	4b21      	ldr	r3, [pc, #132]	; (400cf0 <sd_mmc_check+0x878>)
  400c6c:	4798      	blx	r3
  400c6e:	f010 0f80 	tst.w	r0, #128	; 0x80
  400c72:	f47f ac29 	bne.w	4004c8 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400c76:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400c7a:	f003 030f 	and.w	r3, r3, #15
  400c7e:	2b0f      	cmp	r3, #15
  400c80:	f43f af79 	beq.w	400b76 <sd_mmc_check+0x6fe>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400c84:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400c88:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400c8c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400c90:	f47f ac1a 	bne.w	4004c8 <sd_mmc_check+0x50>
	driver_send_clock();
  400c94:	4b17      	ldr	r3, [pc, #92]	; (400cf4 <sd_mmc_check+0x87c>)
  400c96:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400c98:	4b05      	ldr	r3, [pc, #20]	; (400cb0 <sd_mmc_check+0x838>)
  400c9a:	681b      	ldr	r3, [r3, #0]
  400c9c:	2201      	movs	r2, #1
  400c9e:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400ca0:	681a      	ldr	r2, [r3, #0]
  400ca2:	0052      	lsls	r2, r2, #1
  400ca4:	601a      	str	r2, [r3, #0]
  400ca6:	e766      	b.n	400b76 <sd_mmc_check+0x6fe>
	*v2 = 0;
  400ca8:	f04f 0900 	mov.w	r9, #0
  400cac:	e41e      	b.n	4004ec <sd_mmc_check+0x74>
  400cae:	bf00      	nop
  400cb0:	200009d4 	.word	0x200009d4
  400cb4:	004003d1 	.word	0x004003d1
  400cb8:	004086d8 	.word	0x004086d8
  400cbc:	004086f4 	.word	0x004086f4
  400cc0:	200009fc 	.word	0x200009fc
  400cc4:	004014ed 	.word	0x004014ed
  400cc8:	004015dd 	.word	0x004015dd
  400ccc:	00400351 	.word	0x00400351
  400cd0:	004014f7 	.word	0x004014f7
  400cd4:	0040043d 	.word	0x0040043d
  400cd8:	00403dc1 	.word	0x00403dc1
  400cdc:	80ffff01 	.word	0x80ffff01
  400ce0:	00081106 	.word	0x00081106
  400ce4:	00401645 	.word	0x00401645
  400ce8:	00401779 	.word	0x00401779
  400cec:	004017dd 	.word	0x004017dd
  400cf0:	00401609 	.word	0x00401609
  400cf4:	004015b9 	.word	0x004015b9

00400cf8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400cf8:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400cfa:	4b05      	ldr	r3, [pc, #20]	; (400d10 <sd_mmc_get_type+0x18>)
  400cfc:	4798      	blx	r3
  400cfe:	b108      	cbz	r0, 400d04 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400d00:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400d02:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400d04:	4b03      	ldr	r3, [pc, #12]	; (400d14 <sd_mmc_get_type+0x1c>)
  400d06:	4798      	blx	r3
	return sd_mmc_card->type;
  400d08:	4b03      	ldr	r3, [pc, #12]	; (400d18 <sd_mmc_get_type+0x20>)
  400d0a:	681b      	ldr	r3, [r3, #0]
  400d0c:	7ad8      	ldrb	r0, [r3, #11]
  400d0e:	bd08      	pop	{r3, pc}
  400d10:	00400379 	.word	0x00400379
  400d14:	0040043d 	.word	0x0040043d
  400d18:	200009d4 	.word	0x200009d4

00400d1c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400d1c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400d1e:	4b05      	ldr	r3, [pc, #20]	; (400d34 <sd_mmc_get_capacity+0x18>)
  400d20:	4798      	blx	r3
  400d22:	b108      	cbz	r0, 400d28 <sd_mmc_get_capacity+0xc>
		return 0;
  400d24:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400d26:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400d28:	4b03      	ldr	r3, [pc, #12]	; (400d38 <sd_mmc_get_capacity+0x1c>)
  400d2a:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400d2c:	4b03      	ldr	r3, [pc, #12]	; (400d3c <sd_mmc_get_capacity+0x20>)
  400d2e:	681b      	ldr	r3, [r3, #0]
  400d30:	6858      	ldr	r0, [r3, #4]
  400d32:	bd08      	pop	{r3, pc}
  400d34:	00400379 	.word	0x00400379
  400d38:	0040043d 	.word	0x0040043d
  400d3c:	200009d4 	.word	0x200009d4

00400d40 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400d40:	2000      	movs	r0, #0
  400d42:	4770      	bx	lr

00400d44 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400d48:	b082      	sub	sp, #8
  400d4a:	468a      	mov	sl, r1
  400d4c:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400d4e:	4b26      	ldr	r3, [pc, #152]	; (400de8 <sd_mmc_init_read_blocks+0xa4>)
  400d50:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400d52:	4680      	mov	r8, r0
  400d54:	b118      	cbz	r0, 400d5e <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400d56:	4640      	mov	r0, r8
  400d58:	b002      	add	sp, #8
  400d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400d5e:	4c23      	ldr	r4, [pc, #140]	; (400dec <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400d60:	4e23      	ldr	r6, [pc, #140]	; (400df0 <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400d62:	4d24      	ldr	r5, [pc, #144]	; (400df4 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400d64:	4f24      	ldr	r7, [pc, #144]	; (400df8 <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400d66:	6833      	ldr	r3, [r6, #0]
  400d68:	8919      	ldrh	r1, [r3, #8]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400d6a:	0409      	lsls	r1, r1, #16
  400d6c:	f241 100d 	movw	r0, #4365	; 0x110d
  400d70:	47a8      	blx	r5
  400d72:	b128      	cbz	r0, 400d80 <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400d74:	47b8      	blx	r7
  400d76:	f410 7f80 	tst.w	r0, #256	; 0x100
  400d7a:	d117      	bne.n	400dac <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400d7c:	3c01      	subs	r4, #1
  400d7e:	d1f2      	bne.n	400d66 <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400d80:	4b1e      	ldr	r3, [pc, #120]	; (400dfc <sd_mmc_init_read_blocks+0xb8>)
  400d82:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400d84:	f04f 0805 	mov.w	r8, #5
  400d88:	e7e5      	b.n	400d56 <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400d8a:	4b1b      	ldr	r3, [pc, #108]	; (400df8 <sd_mmc_init_read_blocks+0xb4>)
  400d8c:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400d8e:	4b1c      	ldr	r3, [pc, #112]	; (400e00 <sd_mmc_init_read_blocks+0xbc>)
  400d90:	4003      	ands	r3, r0
  400d92:	b933      	cbnz	r3, 400da2 <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400d94:	4b1b      	ldr	r3, [pc, #108]	; (400e04 <sd_mmc_init_read_blocks+0xc0>)
  400d96:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400d9a:	4b1b      	ldr	r3, [pc, #108]	; (400e08 <sd_mmc_init_read_blocks+0xc4>)
  400d9c:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400da0:	e7d9      	b.n	400d56 <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400da2:	4b16      	ldr	r3, [pc, #88]	; (400dfc <sd_mmc_init_read_blocks+0xb8>)
  400da4:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400da6:	f04f 0805 	mov.w	r8, #5
  400daa:	e7d4      	b.n	400d56 <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400dac:	4b17      	ldr	r3, [pc, #92]	; (400e0c <sd_mmc_init_read_blocks+0xc8>)
  400dae:	4818      	ldr	r0, [pc, #96]	; (400e10 <sd_mmc_init_read_blocks+0xcc>)
  400db0:	f1b9 0f01 	cmp.w	r9, #1
  400db4:	bf98      	it	ls
  400db6:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400db8:	4b0d      	ldr	r3, [pc, #52]	; (400df0 <sd_mmc_init_read_blocks+0xac>)
  400dba:	681b      	ldr	r3, [r3, #0]
  400dbc:	7adb      	ldrb	r3, [r3, #11]
  400dbe:	f013 0f08 	tst.w	r3, #8
  400dc2:	d101      	bne.n	400dc8 <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400dc4:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400dc8:	2301      	movs	r3, #1
  400dca:	9300      	str	r3, [sp, #0]
  400dcc:	464b      	mov	r3, r9
  400dce:	f44f 7200 	mov.w	r2, #512	; 0x200
  400dd2:	4651      	mov	r1, sl
  400dd4:	4c0f      	ldr	r4, [pc, #60]	; (400e14 <sd_mmc_init_read_blocks+0xd0>)
  400dd6:	47a0      	blx	r4
  400dd8:	2800      	cmp	r0, #0
  400dda:	d1d6      	bne.n	400d8a <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400ddc:	4b07      	ldr	r3, [pc, #28]	; (400dfc <sd_mmc_init_read_blocks+0xb8>)
  400dde:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400de0:	f04f 0805 	mov.w	r8, #5
  400de4:	e7b7      	b.n	400d56 <sd_mmc_init_read_blocks+0x12>
  400de6:	bf00      	nop
  400de8:	00400379 	.word	0x00400379
  400dec:	00030d41 	.word	0x00030d41
  400df0:	200009d4 	.word	0x200009d4
  400df4:	004015dd 	.word	0x004015dd
  400df8:	00401609 	.word	0x00401609
  400dfc:	0040043d 	.word	0x0040043d
  400e00:	e4580000 	.word	0xe4580000
  400e04:	200009f8 	.word	0x200009f8
  400e08:	200009fa 	.word	0x200009fa
  400e0c:	00081111 	.word	0x00081111
  400e10:	00101112 	.word	0x00101112
  400e14:	00401645 	.word	0x00401645

00400e18 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400e18:	b510      	push	{r4, lr}
  400e1a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400e1c:	4b06      	ldr	r3, [pc, #24]	; (400e38 <sd_mmc_start_read_blocks+0x20>)
  400e1e:	4798      	blx	r3
  400e20:	b920      	cbnz	r0, 400e2c <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e22:	2200      	movs	r2, #0
  400e24:	4b05      	ldr	r3, [pc, #20]	; (400e3c <sd_mmc_start_read_blocks+0x24>)
  400e26:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e28:	2005      	movs	r0, #5
  400e2a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e2c:	4a03      	ldr	r2, [pc, #12]	; (400e3c <sd_mmc_start_read_blocks+0x24>)
  400e2e:	8813      	ldrh	r3, [r2, #0]
  400e30:	1b1c      	subs	r4, r3, r4
  400e32:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e34:	2000      	movs	r0, #0
}
  400e36:	bd10      	pop	{r4, pc}
  400e38:	00401779 	.word	0x00401779
  400e3c:	200009f8 	.word	0x200009f8

00400e40 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400e40:	b510      	push	{r4, lr}
  400e42:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400e44:	4b13      	ldr	r3, [pc, #76]	; (400e94 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400e46:	4798      	blx	r3
  400e48:	b908      	cbnz	r0, 400e4e <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400e4a:	2005      	movs	r0, #5
  400e4c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400e4e:	b184      	cbz	r4, 400e72 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400e50:	2200      	movs	r2, #0
  400e52:	4b11      	ldr	r3, [pc, #68]	; (400e98 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400e54:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e56:	4b11      	ldr	r3, [pc, #68]	; (400e9c <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400e58:	881b      	ldrh	r3, [r3, #0]
  400e5a:	2b01      	cmp	r3, #1
  400e5c:	d00f      	beq.n	400e7e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400e5e:	2100      	movs	r1, #0
  400e60:	f243 100c 	movw	r0, #12556	; 0x310c
  400e64:	4b0e      	ldr	r3, [pc, #56]	; (400ea0 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400e66:	4798      	blx	r3
  400e68:	b168      	cbz	r0, 400e86 <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400e6a:	4b0e      	ldr	r3, [pc, #56]	; (400ea4 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400e6c:	4798      	blx	r3
	return SD_MMC_OK;
  400e6e:	2000      	movs	r0, #0
  400e70:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400e72:	4b09      	ldr	r3, [pc, #36]	; (400e98 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400e74:	881b      	ldrh	r3, [r3, #0]
  400e76:	2b00      	cmp	r3, #0
  400e78:	d0ed      	beq.n	400e56 <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400e7a:	2000      	movs	r0, #0
}
  400e7c:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400e7e:	4b09      	ldr	r3, [pc, #36]	; (400ea4 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400e80:	4798      	blx	r3
		return SD_MMC_OK;
  400e82:	2000      	movs	r0, #0
  400e84:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400e86:	2100      	movs	r1, #0
  400e88:	f243 100c 	movw	r0, #12556	; 0x310c
  400e8c:	4b04      	ldr	r3, [pc, #16]	; (400ea0 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400e8e:	4798      	blx	r3
  400e90:	e7eb      	b.n	400e6a <sd_mmc_wait_end_of_read_blocks+0x2a>
  400e92:	bf00      	nop
  400e94:	004017dd 	.word	0x004017dd
  400e98:	200009f8 	.word	0x200009f8
  400e9c:	200009fa 	.word	0x200009fa
  400ea0:	004015dd 	.word	0x004015dd
  400ea4:	0040043d 	.word	0x0040043d

00400ea8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400ea8:	b570      	push	{r4, r5, r6, lr}
  400eaa:	b082      	sub	sp, #8
  400eac:	460e      	mov	r6, r1
  400eae:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400eb0:	4b16      	ldr	r3, [pc, #88]	; (400f0c <sd_mmc_init_write_blocks+0x64>)
  400eb2:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400eb4:	4604      	mov	r4, r0
  400eb6:	b9b8      	cbnz	r0, 400ee8 <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400eb8:	4b15      	ldr	r3, [pc, #84]	; (400f10 <sd_mmc_init_write_blocks+0x68>)
  400eba:	4816      	ldr	r0, [pc, #88]	; (400f14 <sd_mmc_init_write_blocks+0x6c>)
  400ebc:	2d01      	cmp	r5, #1
  400ebe:	bf98      	it	ls
  400ec0:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400ec2:	4b15      	ldr	r3, [pc, #84]	; (400f18 <sd_mmc_init_write_blocks+0x70>)
  400ec4:	681b      	ldr	r3, [r3, #0]
  400ec6:	7adb      	ldrb	r3, [r3, #11]
  400ec8:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400ecc:	bf08      	it	eq
  400ece:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400ed0:	2301      	movs	r3, #1
  400ed2:	9300      	str	r3, [sp, #0]
  400ed4:	462b      	mov	r3, r5
  400ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
  400eda:	4631      	mov	r1, r6
  400edc:	4e0f      	ldr	r6, [pc, #60]	; (400f1c <sd_mmc_init_write_blocks+0x74>)
  400ede:	47b0      	blx	r6
  400ee0:	b928      	cbnz	r0, 400eee <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400ee2:	4b0f      	ldr	r3, [pc, #60]	; (400f20 <sd_mmc_init_write_blocks+0x78>)
  400ee4:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400ee6:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400ee8:	4620      	mov	r0, r4
  400eea:	b002      	add	sp, #8
  400eec:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400eee:	4b0d      	ldr	r3, [pc, #52]	; (400f24 <sd_mmc_init_write_blocks+0x7c>)
  400ef0:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400ef2:	4b0d      	ldr	r3, [pc, #52]	; (400f28 <sd_mmc_init_write_blocks+0x80>)
  400ef4:	4003      	ands	r3, r0
  400ef6:	b923      	cbnz	r3, 400f02 <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400ef8:	4b0c      	ldr	r3, [pc, #48]	; (400f2c <sd_mmc_init_write_blocks+0x84>)
  400efa:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400efc:	4b0c      	ldr	r3, [pc, #48]	; (400f30 <sd_mmc_init_write_blocks+0x88>)
  400efe:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400f00:	e7f2      	b.n	400ee8 <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400f02:	4b07      	ldr	r3, [pc, #28]	; (400f20 <sd_mmc_init_write_blocks+0x78>)
  400f04:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400f06:	2405      	movs	r4, #5
  400f08:	e7ee      	b.n	400ee8 <sd_mmc_init_write_blocks+0x40>
  400f0a:	bf00      	nop
  400f0c:	00400379 	.word	0x00400379
  400f10:	00089118 	.word	0x00089118
  400f14:	00109119 	.word	0x00109119
  400f18:	200009d4 	.word	0x200009d4
  400f1c:	00401645 	.word	0x00401645
  400f20:	0040043d 	.word	0x0040043d
  400f24:	00401609 	.word	0x00401609
  400f28:	e4580000 	.word	0xe4580000
  400f2c:	200009f8 	.word	0x200009f8
  400f30:	200009fa 	.word	0x200009fa

00400f34 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400f34:	b510      	push	{r4, lr}
  400f36:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400f38:	4b06      	ldr	r3, [pc, #24]	; (400f54 <sd_mmc_start_write_blocks+0x20>)
  400f3a:	4798      	blx	r3
  400f3c:	b920      	cbnz	r0, 400f48 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400f3e:	2200      	movs	r2, #0
  400f40:	4b05      	ldr	r3, [pc, #20]	; (400f58 <sd_mmc_start_write_blocks+0x24>)
  400f42:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400f44:	2005      	movs	r0, #5
  400f46:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400f48:	4a03      	ldr	r2, [pc, #12]	; (400f58 <sd_mmc_start_write_blocks+0x24>)
  400f4a:	8813      	ldrh	r3, [r2, #0]
  400f4c:	1b1c      	subs	r4, r3, r4
  400f4e:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400f50:	2000      	movs	r0, #0
}
  400f52:	bd10      	pop	{r4, pc}
  400f54:	0040184d 	.word	0x0040184d
  400f58:	200009f8 	.word	0x200009f8

00400f5c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400f5c:	b510      	push	{r4, lr}
  400f5e:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400f60:	4b12      	ldr	r3, [pc, #72]	; (400fac <sd_mmc_wait_end_of_write_blocks+0x50>)
  400f62:	4798      	blx	r3
  400f64:	b908      	cbnz	r0, 400f6a <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400f66:	2005      	movs	r0, #5
  400f68:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400f6a:	b184      	cbz	r4, 400f8e <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400f6c:	2200      	movs	r2, #0
  400f6e:	4b10      	ldr	r3, [pc, #64]	; (400fb0 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400f70:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400f72:	4b10      	ldr	r3, [pc, #64]	; (400fb4 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400f74:	881b      	ldrh	r3, [r3, #0]
  400f76:	2b01      	cmp	r3, #1
  400f78:	d00f      	beq.n	400f9a <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400f7a:	2100      	movs	r1, #0
  400f7c:	f243 100c 	movw	r0, #12556	; 0x310c
  400f80:	4b0d      	ldr	r3, [pc, #52]	; (400fb8 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400f82:	4798      	blx	r3
  400f84:	b968      	cbnz	r0, 400fa2 <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400f86:	4b0d      	ldr	r3, [pc, #52]	; (400fbc <sd_mmc_wait_end_of_write_blocks+0x60>)
  400f88:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400f8a:	2005      	movs	r0, #5
  400f8c:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400f8e:	4b08      	ldr	r3, [pc, #32]	; (400fb0 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400f90:	881b      	ldrh	r3, [r3, #0]
  400f92:	2b00      	cmp	r3, #0
  400f94:	d0ed      	beq.n	400f72 <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400f96:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400f98:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400f9a:	4b08      	ldr	r3, [pc, #32]	; (400fbc <sd_mmc_wait_end_of_write_blocks+0x60>)
  400f9c:	4798      	blx	r3
		return SD_MMC_OK;
  400f9e:	2000      	movs	r0, #0
  400fa0:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400fa2:	4b06      	ldr	r3, [pc, #24]	; (400fbc <sd_mmc_wait_end_of_write_blocks+0x60>)
  400fa4:	4798      	blx	r3
	return SD_MMC_OK;
  400fa6:	2000      	movs	r0, #0
  400fa8:	bd10      	pop	{r4, pc}
  400faa:	bf00      	nop
  400fac:	004018b5 	.word	0x004018b5
  400fb0:	200009f8 	.word	0x200009f8
  400fb4:	200009fa 	.word	0x200009fa
  400fb8:	004015dd 	.word	0x004015dd
  400fbc:	0040043d 	.word	0x0040043d

00400fc0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400fc0:	b510      	push	{r4, lr}
  400fc2:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400fc4:	4b0f      	ldr	r3, [pc, #60]	; (401004 <sd_mmc_test_unit_ready+0x44>)
  400fc6:	4798      	blx	r3
  400fc8:	2801      	cmp	r0, #1
  400fca:	d018      	beq.n	400ffe <sd_mmc_test_unit_ready+0x3e>
  400fcc:	b118      	cbz	r0, 400fd6 <sd_mmc_test_unit_ready+0x16>
  400fce:	2802      	cmp	r0, #2
  400fd0:	d010      	beq.n	400ff4 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400fd2:	2001      	movs	r0, #1
  400fd4:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400fd6:	4b0c      	ldr	r3, [pc, #48]	; (401008 <sd_mmc_test_unit_ready+0x48>)
  400fd8:	5d1b      	ldrb	r3, [r3, r4]
  400fda:	b10b      	cbz	r3, 400fe0 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400fdc:	2002      	movs	r0, #2
	}
}
  400fde:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400fe0:	4620      	mov	r0, r4
  400fe2:	4b0a      	ldr	r3, [pc, #40]	; (40100c <sd_mmc_test_unit_ready+0x4c>)
  400fe4:	4798      	blx	r3
  400fe6:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400fea:	2800      	cmp	r0, #0
  400fec:	bf14      	ite	ne
  400fee:	2000      	movne	r0, #0
  400ff0:	2002      	moveq	r0, #2
  400ff2:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400ff4:	2200      	movs	r2, #0
  400ff6:	4b04      	ldr	r3, [pc, #16]	; (401008 <sd_mmc_test_unit_ready+0x48>)
  400ff8:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400ffa:	2002      	movs	r0, #2
  400ffc:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400ffe:	2003      	movs	r0, #3
  401000:	bd10      	pop	{r4, pc}
  401002:	bf00      	nop
  401004:	00400479 	.word	0x00400479
  401008:	20000a00 	.word	0x20000a00
  40100c:	00400cf9 	.word	0x00400cf9

00401010 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  401010:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  401012:	2000      	movs	r0, #0
  401014:	4b01      	ldr	r3, [pc, #4]	; (40101c <sd_mmc_test_unit_ready_0+0xc>)
  401016:	4798      	blx	r3
}
  401018:	bd08      	pop	{r3, pc}
  40101a:	bf00      	nop
  40101c:	00400fc1 	.word	0x00400fc1

00401020 <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
  401020:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(1);
  401022:	2001      	movs	r0, #1
  401024:	4b01      	ldr	r3, [pc, #4]	; (40102c <sd_mmc_test_unit_ready_1+0xc>)
  401026:	4798      	blx	r3
}
  401028:	bd08      	pop	{r3, pc}
  40102a:	bf00      	nop
  40102c:	00400fc1 	.word	0x00400fc1

00401030 <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  401030:	b538      	push	{r3, r4, r5, lr}
  401032:	4604      	mov	r4, r0
  401034:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  401036:	4b04      	ldr	r3, [pc, #16]	; (401048 <sd_mmc_read_capacity+0x18>)
  401038:	4798      	blx	r3
  40103a:	0040      	lsls	r0, r0, #1
  40103c:	3801      	subs	r0, #1
  40103e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  401040:	4620      	mov	r0, r4
  401042:	4b02      	ldr	r3, [pc, #8]	; (40104c <sd_mmc_read_capacity+0x1c>)
  401044:	4798      	blx	r3
}
  401046:	bd38      	pop	{r3, r4, r5, pc}
  401048:	00400d1d 	.word	0x00400d1d
  40104c:	00400fc1 	.word	0x00400fc1

00401050 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  401050:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  401052:	4601      	mov	r1, r0
  401054:	2000      	movs	r0, #0
  401056:	4b01      	ldr	r3, [pc, #4]	; (40105c <sd_mmc_read_capacity_0+0xc>)
  401058:	4798      	blx	r3
}
  40105a:	bd08      	pop	{r3, pc}
  40105c:	00401031 	.word	0x00401031

00401060 <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
  401060:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(1, nb_sector);
  401062:	4601      	mov	r1, r0
  401064:	2001      	movs	r0, #1
  401066:	4b01      	ldr	r3, [pc, #4]	; (40106c <sd_mmc_read_capacity_1+0xc>)
  401068:	4798      	blx	r3
}
  40106a:	bd08      	pop	{r3, pc}
  40106c:	00401031 	.word	0x00401031

00401070 <sd_mmc_unload_0>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
  401070:	4b01      	ldr	r3, [pc, #4]	; (401078 <sd_mmc_unload_0+0x8>)
  401072:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
  401074:	2001      	movs	r0, #1
  401076:	4770      	bx	lr
  401078:	20000a00 	.word	0x20000a00

0040107c <sd_mmc_unload_1>:
	sd_mmc_ejected[slot] = unload;
  40107c:	4b01      	ldr	r3, [pc, #4]	; (401084 <sd_mmc_unload_1+0x8>)
  40107e:	7058      	strb	r0, [r3, #1]

bool sd_mmc_unload_1(bool unload)
{
	return sd_mmc_unload(1, unload);
}
  401080:	2001      	movs	r0, #1
  401082:	4770      	bx	lr
  401084:	20000a00 	.word	0x20000a00

00401088 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  401088:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  40108a:	2000      	movs	r0, #0
  40108c:	4b01      	ldr	r3, [pc, #4]	; (401094 <sd_mmc_wr_protect_0+0xc>)
  40108e:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  401090:	bd08      	pop	{r3, pc}
  401092:	bf00      	nop
  401094:	00400d41 	.word	0x00400d41

00401098 <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
  401098:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  40109a:	2001      	movs	r0, #1
  40109c:	4b01      	ldr	r3, [pc, #4]	; (4010a4 <sd_mmc_wr_protect_1+0xc>)
  40109e:	4798      	blx	r3
	return sd_mmc_wr_protect(1);
}
  4010a0:	bd08      	pop	{r3, pc}
  4010a2:	bf00      	nop
  4010a4:	00400d41 	.word	0x00400d41

004010a8 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
  4010a8:	2001      	movs	r0, #1
  4010aa:	4770      	bx	lr

004010ac <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
	return sd_mmc_removal(1);
}
  4010ac:	2001      	movs	r0, #1
  4010ae:	4770      	bx	lr

004010b0 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  4010b0:	b510      	push	{r4, lr}
  4010b2:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  4010b4:	2201      	movs	r2, #1
  4010b6:	4b0a      	ldr	r3, [pc, #40]	; (4010e0 <sd_mmc_mem_2_ram+0x30>)
  4010b8:	4798      	blx	r3
  4010ba:	b120      	cbz	r0, 4010c6 <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  4010bc:	2802      	cmp	r0, #2
  4010be:	bf0c      	ite	eq
  4010c0:	2002      	moveq	r0, #2
  4010c2:	2001      	movne	r0, #1
  4010c4:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  4010c6:	2101      	movs	r1, #1
  4010c8:	4620      	mov	r0, r4
  4010ca:	4b06      	ldr	r3, [pc, #24]	; (4010e4 <sd_mmc_mem_2_ram+0x34>)
  4010cc:	4798      	blx	r3
  4010ce:	b108      	cbz	r0, 4010d4 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  4010d0:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  4010d2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  4010d4:	4b04      	ldr	r3, [pc, #16]	; (4010e8 <sd_mmc_mem_2_ram+0x38>)
  4010d6:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  4010d8:	3000      	adds	r0, #0
  4010da:	bf18      	it	ne
  4010dc:	2001      	movne	r0, #1
  4010de:	bd10      	pop	{r4, pc}
  4010e0:	00400d45 	.word	0x00400d45
  4010e4:	00400e19 	.word	0x00400e19
  4010e8:	00400e41 	.word	0x00400e41

004010ec <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  4010ec:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  4010ee:	460a      	mov	r2, r1
  4010f0:	4601      	mov	r1, r0
  4010f2:	2000      	movs	r0, #0
  4010f4:	4b01      	ldr	r3, [pc, #4]	; (4010fc <sd_mmc_mem_2_ram_0+0x10>)
  4010f6:	4798      	blx	r3
}
  4010f8:	bd08      	pop	{r3, pc}
  4010fa:	bf00      	nop
  4010fc:	004010b1 	.word	0x004010b1

00401100 <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
  401100:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(1, addr, ram);
  401102:	460a      	mov	r2, r1
  401104:	4601      	mov	r1, r0
  401106:	2001      	movs	r0, #1
  401108:	4b01      	ldr	r3, [pc, #4]	; (401110 <sd_mmc_mem_2_ram_1+0x10>)
  40110a:	4798      	blx	r3
}
  40110c:	bd08      	pop	{r3, pc}
  40110e:	bf00      	nop
  401110:	004010b1 	.word	0x004010b1

00401114 <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  401114:	b510      	push	{r4, lr}
  401116:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  401118:	2201      	movs	r2, #1
  40111a:	4b0a      	ldr	r3, [pc, #40]	; (401144 <sd_mmc_ram_2_mem+0x30>)
  40111c:	4798      	blx	r3
  40111e:	b120      	cbz	r0, 40112a <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  401120:	2802      	cmp	r0, #2
  401122:	bf0c      	ite	eq
  401124:	2002      	moveq	r0, #2
  401126:	2001      	movne	r0, #1
  401128:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  40112a:	2101      	movs	r1, #1
  40112c:	4620      	mov	r0, r4
  40112e:	4b06      	ldr	r3, [pc, #24]	; (401148 <sd_mmc_ram_2_mem+0x34>)
  401130:	4798      	blx	r3
  401132:	b108      	cbz	r0, 401138 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  401134:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  401136:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  401138:	4b04      	ldr	r3, [pc, #16]	; (40114c <sd_mmc_ram_2_mem+0x38>)
  40113a:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  40113c:	3000      	adds	r0, #0
  40113e:	bf18      	it	ne
  401140:	2001      	movne	r0, #1
  401142:	bd10      	pop	{r4, pc}
  401144:	00400ea9 	.word	0x00400ea9
  401148:	00400f35 	.word	0x00400f35
  40114c:	00400f5d 	.word	0x00400f5d

00401150 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  401150:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  401152:	460a      	mov	r2, r1
  401154:	4601      	mov	r1, r0
  401156:	2000      	movs	r0, #0
  401158:	4b01      	ldr	r3, [pc, #4]	; (401160 <sd_mmc_ram_2_mem_0+0x10>)
  40115a:	4798      	blx	r3
}
  40115c:	bd08      	pop	{r3, pc}
  40115e:	bf00      	nop
  401160:	00401115 	.word	0x00401115

00401164 <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
  401164:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(1, addr, ram);
  401166:	460a      	mov	r2, r1
  401168:	4601      	mov	r1, r0
  40116a:	2001      	movs	r0, #1
  40116c:	4b01      	ldr	r3, [pc, #4]	; (401174 <sd_mmc_ram_2_mem_1+0x10>)
  40116e:	4798      	blx	r3
}
  401170:	bd08      	pop	{r3, pc}
  401172:	bf00      	nop
  401174:	00401115 	.word	0x00401115

00401178 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401178:	2801      	cmp	r0, #1
  40117a:	d901      	bls.n	401180 <mem_test_unit_ready+0x8>
  40117c:	2001      	movs	r0, #1
  40117e:	4770      	bx	lr
{
  401180:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401182:	0140      	lsls	r0, r0, #5
  401184:	4b01      	ldr	r3, [pc, #4]	; (40118c <mem_test_unit_ready+0x14>)
  401186:	581b      	ldr	r3, [r3, r0]
  401188:	4798      	blx	r3
  40118a:	bd08      	pop	{r3, pc}
  40118c:	00408734 	.word	0x00408734

00401190 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401190:	2801      	cmp	r0, #1
  401192:	d901      	bls.n	401198 <mem_read_capacity+0x8>
  401194:	2001      	movs	r0, #1
  401196:	4770      	bx	lr
{
  401198:	b508      	push	{r3, lr}
  40119a:	4603      	mov	r3, r0
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  40119c:	4803      	ldr	r0, [pc, #12]	; (4011ac <mem_read_capacity+0x1c>)
  40119e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4011a2:	6843      	ldr	r3, [r0, #4]
  4011a4:	4608      	mov	r0, r1
  4011a6:	4798      	blx	r3
  4011a8:	bd08      	pop	{r3, pc}
  4011aa:	bf00      	nop
  4011ac:	00408734 	.word	0x00408734

004011b0 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  4011b0:	2801      	cmp	r0, #1
  4011b2:	bf8c      	ite	hi
  4011b4:	2000      	movhi	r0, #0
  4011b6:	2001      	movls	r0, #1
  4011b8:	4770      	bx	lr
	...

004011bc <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4011bc:	2801      	cmp	r0, #1
  4011be:	d901      	bls.n	4011c4 <mem_wr_protect+0x8>
  4011c0:	2001      	movs	r0, #1
  4011c2:	4770      	bx	lr
{
  4011c4:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4011c6:	4b03      	ldr	r3, [pc, #12]	; (4011d4 <mem_wr_protect+0x18>)
  4011c8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  4011cc:	68c3      	ldr	r3, [r0, #12]
  4011ce:	4798      	blx	r3
  4011d0:	bd08      	pop	{r3, pc}
  4011d2:	bf00      	nop
  4011d4:	00408734 	.word	0x00408734

004011d8 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  4011d8:	2801      	cmp	r0, #1
  4011da:	d901      	bls.n	4011e0 <memory_2_ram+0x8>
  4011dc:	2001      	movs	r0, #1
  4011de:	4770      	bx	lr
{
  4011e0:	b510      	push	{r4, lr}
  4011e2:	460c      	mov	r4, r1
  4011e4:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  4011e6:	4804      	ldr	r0, [pc, #16]	; (4011f8 <memory_2_ram+0x20>)
  4011e8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4011ec:	6943      	ldr	r3, [r0, #20]
  4011ee:	4611      	mov	r1, r2
  4011f0:	4620      	mov	r0, r4
  4011f2:	4798      	blx	r3
  4011f4:	bd10      	pop	{r4, pc}
  4011f6:	bf00      	nop
  4011f8:	00408734 	.word	0x00408734

004011fc <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  4011fc:	2801      	cmp	r0, #1
  4011fe:	d901      	bls.n	401204 <ram_2_memory+0x8>
  401200:	2001      	movs	r0, #1
  401202:	4770      	bx	lr
{
  401204:	b510      	push	{r4, lr}
  401206:	460c      	mov	r4, r1
  401208:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  40120a:	4804      	ldr	r0, [pc, #16]	; (40121c <ram_2_memory+0x20>)
  40120c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401210:	6983      	ldr	r3, [r0, #24]
  401212:	4611      	mov	r1, r2
  401214:	4620      	mov	r0, r4
  401216:	4798      	blx	r3
  401218:	bd10      	pop	{r4, pc}
  40121a:	bf00      	nop
  40121c:	00408734 	.word	0x00408734

00401220 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  401220:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401222:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  401226:	4b70      	ldr	r3, [pc, #448]	; (4013e8 <board_init+0x1c8>)
  401228:	605c      	str	r4, [r3, #4]
  40122a:	2009      	movs	r0, #9
  40122c:	4d6f      	ldr	r5, [pc, #444]	; (4013ec <board_init+0x1cc>)
  40122e:	47a8      	blx	r5
  401230:	200a      	movs	r0, #10
  401232:	47a8      	blx	r5
  401234:	200b      	movs	r0, #11
  401236:	47a8      	blx	r5
  401238:	200c      	movs	r0, #12
  40123a:	47a8      	blx	r5
  40123c:	200d      	movs	r0, #13
  40123e:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401240:	4b6b      	ldr	r3, [pc, #428]	; (4013f0 <board_init+0x1d0>)
  401242:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401246:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401248:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40124c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40124e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401252:	2104      	movs	r1, #4
  401254:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401256:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40125a:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40125c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401260:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401262:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  401264:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401268:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40126a:	f022 0204 	bic.w	r2, r2, #4
  40126e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401270:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401272:	f022 0204 	bic.w	r2, r2, #4
  401276:	675a      	str	r2, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401278:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40127c:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401280:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401284:	4a5b      	ldr	r2, [pc, #364]	; (4013f4 <board_init+0x1d4>)
  401286:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40128a:	6610      	str	r0, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40128c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  401290:	6550      	str	r0, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  401292:	6250      	str	r0, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401294:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401298:	6f15      	ldr	r5, [r2, #112]	; 0x70
  40129a:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  40129e:	6715      	str	r5, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4012a0:	6f55      	ldr	r5, [r2, #116]	; 0x74
  4012a2:	4305      	orrs	r5, r0
  4012a4:	6755      	str	r5, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4012a6:	6050      	str	r0, [r2, #4]
		base->PIO_PUDR = mask;
  4012a8:	6614      	str	r4, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4012aa:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  4012ae:	6554      	str	r4, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  4012b0:	6254      	str	r4, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4012b2:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4012b6:	6f10      	ldr	r0, [r2, #112]	; 0x70
  4012b8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  4012bc:	6710      	str	r0, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4012be:	6f50      	ldr	r0, [r2, #116]	; 0x74
  4012c0:	4320      	orrs	r0, r4
  4012c2:	6750      	str	r0, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4012c4:	6054      	str	r4, [r2, #4]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012c6:	484c      	ldr	r0, [pc, #304]	; (4013f8 <board_init+0x1d8>)
  4012c8:	6101      	str	r1, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012ca:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4012ce:	2208      	movs	r2, #8
  4012d0:	6102      	str	r2, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4012d2:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
		base->PIO_PUDR = mask;
  4012d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4012da:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4012dc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4012e0:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4012e2:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4012e4:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4012e8:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4012ea:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
  4012ee:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4012f0:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4012f2:	4308      	orrs	r0, r1
  4012f4:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4012f6:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4012f8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4012fc:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4012fe:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401302:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401304:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401306:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40130a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40130c:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  401310:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401312:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401314:	4308      	orrs	r0, r1
  401316:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401318:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40131a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40131e:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401320:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401324:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401326:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401328:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40132c:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40132e:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  401332:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401334:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401336:	4308      	orrs	r0, r1
  401338:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40133a:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40133c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401340:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401342:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401346:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401348:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40134a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40134e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401350:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  401354:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401356:	6f58      	ldr	r0, [r3, #116]	; 0x74
  401358:	4308      	orrs	r0, r1
  40135a:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40135c:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  40135e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  401362:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401364:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401368:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40136a:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40136c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401370:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401372:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  401376:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401378:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40137a:	4308      	orrs	r0, r1
  40137c:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40137e:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  401380:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401384:	6619      	str	r1, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401386:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40138a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40138c:	6259      	str	r1, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40138e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401392:	6f18      	ldr	r0, [r3, #112]	; 0x70
  401394:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
  401398:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40139a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40139c:	4308      	orrs	r0, r1
  40139e:	6758      	str	r0, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013a0:	6059      	str	r1, [r3, #4]
		base->PIO_PUDR = mask;
  4013a2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4013a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4013a8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013aa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4013b2:	f021 0108 	bic.w	r1, r1, #8
  4013b6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4013b8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4013ba:	f021 0108 	bic.w	r1, r1, #8
  4013be:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013c0:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4013c2:	2210      	movs	r2, #16
  4013c4:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4013c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4013ca:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4013cc:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4013ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4013d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4013d4:	f021 0110 	bic.w	r1, r1, #16
  4013d8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4013da:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4013dc:	f021 0110 	bic.w	r1, r1, #16
  4013e0:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4013e2:	605a      	str	r2, [r3, #4]
  4013e4:	bd38      	pop	{r3, r4, r5, pc}
  4013e6:	bf00      	nop
  4013e8:	400e1850 	.word	0x400e1850
  4013ec:	00403b79 	.word	0x00403b79
  4013f0:	400e1400 	.word	0x400e1400
  4013f4:	400e1200 	.word	0x400e1200
  4013f8:	400e1600 	.word	0x400e1600

004013fc <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  4013fc:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  4013fe:	4b08      	ldr	r3, [pc, #32]	; (401420 <hsmci_reset+0x24>)
  401400:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401402:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401404:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401406:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  40140a:	2680      	movs	r6, #128	; 0x80
  40140c:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  40140e:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401410:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401412:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401414:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  401416:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401418:	2205      	movs	r2, #5
  40141a:	601a      	str	r2, [r3, #0]
}
  40141c:	bc70      	pop	{r4, r5, r6}
  40141e:	4770      	bx	lr
  401420:	40080000 	.word	0x40080000

00401424 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  401424:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  401426:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  40142a:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  40142c:	f411 7f80 	tst.w	r1, #256	; 0x100
  401430:	d004      	beq.n	40143c <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  401432:	f411 6f00 	tst.w	r1, #2048	; 0x800
  401436:	d00d      	beq.n	401454 <hsmci_send_cmd_execute+0x30>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  401438:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  40143c:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  401440:	bf18      	it	ne
  401442:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  401446:	4b1d      	ldr	r3, [pc, #116]	; (4014bc <hsmci_send_cmd_execute+0x98>)
  401448:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  40144a:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  40144c:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  40144e:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  401452:	e00d      	b.n	401470 <hsmci_send_cmd_execute+0x4c>
		} else if (cmd & SDMMC_RESP_BUSY) {
  401454:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  401458:	bf14      	ite	ne
  40145a:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  40145e:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  401462:	e7eb      	b.n	40143c <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401464:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  401468:	d10c      	bne.n	401484 <hsmci_send_cmd_execute+0x60>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  40146a:	f013 0f01 	tst.w	r3, #1
  40146e:	d10d      	bne.n	40148c <hsmci_send_cmd_execute+0x68>
		sr = HSMCI->HSMCI_SR;
  401470:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  401472:	2a00      	cmp	r2, #0
  401474:	d0f6      	beq.n	401464 <hsmci_send_cmd_execute+0x40>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  401476:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  40147a:	d0f6      	beq.n	40146a <hsmci_send_cmd_execute+0x46>
				hsmci_reset();
  40147c:	4b10      	ldr	r3, [pc, #64]	; (4014c0 <hsmci_send_cmd_execute+0x9c>)
  40147e:	4798      	blx	r3
				return false;
  401480:	2000      	movs	r0, #0
  401482:	bd08      	pop	{r3, pc}
				hsmci_reset();
  401484:	4b0e      	ldr	r3, [pc, #56]	; (4014c0 <hsmci_send_cmd_execute+0x9c>)
  401486:	4798      	blx	r3
				return false;
  401488:	2000      	movs	r0, #0
  40148a:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  40148c:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  401490:	d103      	bne.n	40149a <hsmci_send_cmd_execute+0x76>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  401492:	2001      	movs	r0, #1
  401494:	bd08      	pop	{r3, pc}
	return true;
  401496:	2001      	movs	r0, #1
  401498:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  40149a:	4b08      	ldr	r3, [pc, #32]	; (4014bc <hsmci_send_cmd_execute+0x98>)
  40149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40149e:	f04f 32ff 	mov.w	r2, #4294967295
  4014a2:	4906      	ldr	r1, [pc, #24]	; (4014bc <hsmci_send_cmd_execute+0x98>)
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  4014a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
  4014a8:	2b20      	cmp	r3, #32
  4014aa:	d0f4      	beq.n	401496 <hsmci_send_cmd_execute+0x72>
		sr = HSMCI->HSMCI_SR;
  4014ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  4014ae:	3a01      	subs	r2, #1
  4014b0:	d1f8      	bne.n	4014a4 <hsmci_send_cmd_execute+0x80>
			hsmci_reset();
  4014b2:	4b03      	ldr	r3, [pc, #12]	; (4014c0 <hsmci_send_cmd_execute+0x9c>)
  4014b4:	4798      	blx	r3
			return false;
  4014b6:	2000      	movs	r0, #0
  4014b8:	bd08      	pop	{r3, pc}
  4014ba:	bf00      	nop
  4014bc:	40080000 	.word	0x40080000
  4014c0:	004013fd 	.word	0x004013fd

004014c4 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  4014c4:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  4014c6:	2010      	movs	r0, #16
  4014c8:	4b06      	ldr	r3, [pc, #24]	; (4014e4 <hsmci_init+0x20>)
  4014ca:	4798      	blx	r3
	pmc_enable_periph_clk(ID_XDMAC);
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  4014cc:	4b06      	ldr	r3, [pc, #24]	; (4014e8 <hsmci_init+0x24>)
  4014ce:	2272      	movs	r2, #114	; 0x72
  4014d0:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  4014d2:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  4014d4:	2211      	movs	r2, #17
  4014d6:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  4014d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  4014dc:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  4014de:	2205      	movs	r2, #5
  4014e0:	601a      	str	r2, [r3, #0]
  4014e2:	bd08      	pop	{r3, pc}
  4014e4:	00403b79 	.word	0x00403b79
  4014e8:	40080000 	.word	0x40080000

004014ec <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  4014ec:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  4014ee:	bf0c      	ite	eq
  4014f0:	2004      	moveq	r0, #4
  4014f2:	2000      	movne	r0, #0
  4014f4:	4770      	bx	lr

004014f6 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  4014f6:	2001      	movs	r0, #1
  4014f8:	4770      	bx	lr
	...

004014fc <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  4014fc:	b363      	cbz	r3, 401558 <hsmci_select_device+0x5c>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  4014fe:	482a      	ldr	r0, [pc, #168]	; (4015a8 <hsmci_select_device+0xac>)
  401500:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401506:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  401508:	4b28      	ldr	r3, [pc, #160]	; (4015ac <hsmci_select_device+0xb0>)
  40150a:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  40150e:	d333      	bcc.n	401578 <hsmci_select_device+0x7c>
{
  401510:	b410      	push	{r4}
		div = (mck / speed) - 2;
  401512:	4827      	ldr	r0, [pc, #156]	; (4015b0 <hsmci_select_device+0xb4>)
  401514:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  401518:	fb01 0113 	mls	r1, r1, r3, r0
  40151c:	bb11      	cbnz	r1, 401564 <hsmci_select_device+0x68>
		div = (mck / speed) - 2;
  40151e:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401520:	4921      	ldr	r1, [pc, #132]	; (4015a8 <hsmci_select_device+0xac>)
  401522:	6848      	ldr	r0, [r1, #4]
  401524:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  401528:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  40152a:	684c      	ldr	r4, [r1, #4]
  40152c:	f3c3 0047 	ubfx	r0, r3, #1, #8
  401530:	4320      	orrs	r0, r4
  401532:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  401534:	f013 0f01 	tst.w	r3, #1
  401538:	d016      	beq.n	401568 <hsmci_select_device+0x6c>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  40153a:	684b      	ldr	r3, [r1, #4]
  40153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401540:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  401542:	2a04      	cmp	r2, #4
  401544:	d016      	beq.n	401574 <hsmci_select_device+0x78>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  401546:	2a08      	cmp	r2, #8
  401548:	bf0c      	ite	eq
  40154a:	22c0      	moveq	r2, #192	; 0xc0
  40154c:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40154e:	4b16      	ldr	r3, [pc, #88]	; (4015a8 <hsmci_select_device+0xac>)
  401550:	60da      	str	r2, [r3, #12]
}
  401552:	f85d 4b04 	ldr.w	r4, [sp], #4
  401556:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  401558:	4813      	ldr	r0, [pc, #76]	; (4015a8 <hsmci_select_device+0xac>)
  40155a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40155c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401560:	6543      	str	r3, [r0, #84]	; 0x54
  401562:	e7d1      	b.n	401508 <hsmci_select_device+0xc>
			div++;
  401564:	3b01      	subs	r3, #1
  401566:	e7db      	b.n	401520 <hsmci_select_device+0x24>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401568:	490f      	ldr	r1, [pc, #60]	; (4015a8 <hsmci_select_device+0xac>)
  40156a:	684b      	ldr	r3, [r1, #4]
  40156c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401570:	604b      	str	r3, [r1, #4]
  401572:	e7e6      	b.n	401542 <hsmci_select_device+0x46>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401574:	2280      	movs	r2, #128	; 0x80
  401576:	e7ea      	b.n	40154e <hsmci_select_device+0x52>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401578:	4b0b      	ldr	r3, [pc, #44]	; (4015a8 <hsmci_select_device+0xac>)
  40157a:	6859      	ldr	r1, [r3, #4]
  40157c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  401580:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  401582:	6859      	ldr	r1, [r3, #4]
  401584:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  401586:	4908      	ldr	r1, [pc, #32]	; (4015a8 <hsmci_select_device+0xac>)
  401588:	684b      	ldr	r3, [r1, #4]
  40158a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40158e:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  401590:	2a04      	cmp	r2, #4
  401592:	d006      	beq.n	4015a2 <hsmci_select_device+0xa6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  401594:	2a08      	cmp	r2, #8
  401596:	bf0c      	ite	eq
  401598:	22c0      	moveq	r2, #192	; 0xc0
  40159a:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40159c:	4b02      	ldr	r3, [pc, #8]	; (4015a8 <hsmci_select_device+0xac>)
  40159e:	60da      	str	r2, [r3, #12]
  4015a0:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4015a2:	2280      	movs	r2, #128	; 0x80
  4015a4:	e7fa      	b.n	40159c <hsmci_select_device+0xa0>
  4015a6:	bf00      	nop
  4015a8:	40080000 	.word	0x40080000
  4015ac:	05b8d7ff 	.word	0x05b8d7ff
  4015b0:	05b8d800 	.word	0x05b8d800

004015b4 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  4015b4:	4770      	bx	lr
	...

004015b8 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4015b8:	4b07      	ldr	r3, [pc, #28]	; (4015d8 <hsmci_send_clock+0x20>)
  4015ba:	685a      	ldr	r2, [r3, #4]
  4015bc:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4015c0:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  4015c2:	2200      	movs	r2, #0
  4015c4:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  4015c6:	f44f 6210 	mov.w	r2, #2304	; 0x900
  4015ca:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  4015cc:	461a      	mov	r2, r3
  4015ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
  4015d0:	f013 0f01 	tst.w	r3, #1
  4015d4:	d0fb      	beq.n	4015ce <hsmci_send_clock+0x16>
}
  4015d6:	4770      	bx	lr
  4015d8:	40080000 	.word	0x40080000

004015dc <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  4015dc:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4015de:	4b08      	ldr	r3, [pc, #32]	; (401600 <hsmci_send_cmd+0x24>)
  4015e0:	685a      	ldr	r2, [r3, #4]
  4015e2:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4015e6:	605a      	str	r2, [r3, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  4015e8:	685a      	ldr	r2, [r3, #4]
  4015ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  4015ee:	605a      	str	r2, [r3, #4]
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  4015f0:	2400      	movs	r4, #0
  4015f2:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  4015f4:	460a      	mov	r2, r1
  4015f6:	4601      	mov	r1, r0
  4015f8:	4620      	mov	r0, r4
  4015fa:	4b02      	ldr	r3, [pc, #8]	; (401604 <hsmci_send_cmd+0x28>)
  4015fc:	4798      	blx	r3
}
  4015fe:	bd10      	pop	{r4, pc}
  401600:	40080000 	.word	0x40080000
  401604:	00401425 	.word	0x00401425

00401608 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  401608:	4b01      	ldr	r3, [pc, #4]	; (401610 <hsmci_get_response+0x8>)
  40160a:	6a18      	ldr	r0, [r3, #32]
}
  40160c:	4770      	bx	lr
  40160e:	bf00      	nop
  401610:	40080000 	.word	0x40080000

00401614 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  401614:	b410      	push	{r4}
  401616:	1d03      	adds	r3, r0, #4
  401618:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  40161a:	4c09      	ldr	r4, [pc, #36]	; (401640 <hsmci_get_response_128+0x2c>)
  40161c:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  40161e:	0e11      	lsrs	r1, r2, #24
  401620:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  401624:	0c11      	lsrs	r1, r2, #16
  401626:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  40162a:	0a11      	lsrs	r1, r2, #8
  40162c:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  401630:	f803 2c01 	strb.w	r2, [r3, #-1]
  401634:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  401636:	4283      	cmp	r3, r0
  401638:	d1f0      	bne.n	40161c <hsmci_get_response_128+0x8>
		response++;
	}
}
  40163a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40163e:	4770      	bx	lr
  401640:	40080000 	.word	0x40080000

00401644 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  401644:	b570      	push	{r4, r5, r6, lr}
  401646:	f89d 4010 	ldrb.w	r4, [sp, #16]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  40164a:	b374      	cbz	r4, 4016aa <hsmci_adtc_start+0x66>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  40164c:	4d29      	ldr	r5, [pc, #164]	; (4016f4 <hsmci_adtc_start+0xb0>)
  40164e:	686c      	ldr	r4, [r5, #4]
  401650:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  401654:	606c      	str	r4, [r5, #4]
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  401656:	4d27      	ldr	r5, [pc, #156]	; (4016f4 <hsmci_adtc_start+0xb0>)
  401658:	686c      	ldr	r4, [r5, #4]
  40165a:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  40165e:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  401660:	f012 0f03 	tst.w	r2, #3
  401664:	d027      	beq.n	4016b6 <hsmci_adtc_start+0x72>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401666:	686c      	ldr	r4, [r5, #4]
  401668:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  40166c:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  40166e:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  401672:	2c00      	cmp	r4, #0
  401674:	bf14      	ite	ne
  401676:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  40167a:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  40167e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  401682:	d11e      	bne.n	4016c2 <hsmci_adtc_start+0x7e>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  401684:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  401688:	4e1a      	ldr	r6, [pc, #104]	; (4016f4 <hsmci_adtc_start+0xb0>)
  40168a:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  40168c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  401690:	d12a      	bne.n	4016e8 <hsmci_adtc_start+0xa4>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  401692:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  401696:	d12a      	bne.n	4016ee <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  401698:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  40169c:	d117      	bne.n	4016ce <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  40169e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  4016a2:	bf18      	it	ne
  4016a4:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  4016a8:	e011      	b.n	4016ce <hsmci_adtc_start+0x8a>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  4016aa:	4d12      	ldr	r5, [pc, #72]	; (4016f4 <hsmci_adtc_start+0xb0>)
  4016ac:	686c      	ldr	r4, [r5, #4]
  4016ae:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
  4016b2:	606c      	str	r4, [r5, #4]
  4016b4:	e7cf      	b.n	401656 <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4016b6:	4d0f      	ldr	r5, [pc, #60]	; (4016f4 <hsmci_adtc_start+0xb0>)
  4016b8:	686c      	ldr	r4, [r5, #4]
  4016ba:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  4016be:	606c      	str	r4, [r5, #4]
  4016c0:	e7d5      	b.n	40166e <hsmci_adtc_start+0x2a>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  4016c2:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  4016c6:	f3c2 0508 	ubfx	r5, r2, #0, #9
  4016ca:	4e0a      	ldr	r6, [pc, #40]	; (4016f4 <hsmci_adtc_start+0xb0>)
  4016cc:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  4016ce:	2600      	movs	r6, #0
  4016d0:	4d09      	ldr	r5, [pc, #36]	; (4016f8 <hsmci_adtc_start+0xb4>)
  4016d2:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  4016d4:	4d09      	ldr	r5, [pc, #36]	; (4016fc <hsmci_adtc_start+0xb8>)
  4016d6:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  4016d8:	4a09      	ldr	r2, [pc, #36]	; (401700 <hsmci_adtc_start+0xbc>)
  4016da:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  4016dc:	460a      	mov	r2, r1
  4016de:	4601      	mov	r1, r0
  4016e0:	4620      	mov	r0, r4
  4016e2:	4b08      	ldr	r3, [pc, #32]	; (401704 <hsmci_adtc_start+0xc0>)
  4016e4:	4798      	blx	r3
}
  4016e6:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  4016e8:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  4016ec:	e7ef      	b.n	4016ce <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  4016ee:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4016f2:	e7ec      	b.n	4016ce <hsmci_adtc_start+0x8a>
  4016f4:	40080000 	.word	0x40080000
  4016f8:	20000a08 	.word	0x20000a08
  4016fc:	20000a02 	.word	0x20000a02
  401700:	20000a04 	.word	0x20000a04
  401704:	00401425 	.word	0x00401425

00401708 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  401708:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  40170a:	4915      	ldr	r1, [pc, #84]	; (401760 <hsmci_read_word+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40170c:	4a15      	ldr	r2, [pc, #84]	; (401764 <hsmci_read_word+0x5c>)
		sr = HSMCI->HSMCI_SR;
  40170e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401710:	4213      	tst	r3, r2
  401712:	d11b      	bne.n	40174c <hsmci_read_word+0x44>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  401714:	f013 0f02 	tst.w	r3, #2
  401718:	d0f9      	beq.n	40170e <hsmci_read_word+0x6>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  40171a:	4b11      	ldr	r3, [pc, #68]	; (401760 <hsmci_read_word+0x58>)
  40171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40171e:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  401720:	4a11      	ldr	r2, [pc, #68]	; (401768 <hsmci_read_word+0x60>)
  401722:	6813      	ldr	r3, [r2, #0]
  401724:	3304      	adds	r3, #4
  401726:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401728:	4a10      	ldr	r2, [pc, #64]	; (40176c <hsmci_read_word+0x64>)
  40172a:	8811      	ldrh	r1, [r2, #0]
  40172c:	4a10      	ldr	r2, [pc, #64]	; (401770 <hsmci_read_word+0x68>)
  40172e:	8812      	ldrh	r2, [r2, #0]
  401730:	fb02 f201 	mul.w	r2, r2, r1
  401734:	4293      	cmp	r3, r2
  401736:	d311      	bcc.n	40175c <hsmci_read_word+0x54>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  401738:	4909      	ldr	r1, [pc, #36]	; (401760 <hsmci_read_word+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40173a:	4a0a      	ldr	r2, [pc, #40]	; (401764 <hsmci_read_word+0x5c>)
		sr = HSMCI->HSMCI_SR;
  40173c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40173e:	4213      	tst	r3, r2
  401740:	d108      	bne.n	401754 <hsmci_read_word+0x4c>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401742:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401746:	d0f9      	beq.n	40173c <hsmci_read_word+0x34>
	return true;
  401748:	2001      	movs	r0, #1
  40174a:	bd08      	pop	{r3, pc}
			hsmci_reset();
  40174c:	4b09      	ldr	r3, [pc, #36]	; (401774 <hsmci_read_word+0x6c>)
  40174e:	4798      	blx	r3
			return false;
  401750:	2000      	movs	r0, #0
  401752:	bd08      	pop	{r3, pc}
			hsmci_reset();
  401754:	4b07      	ldr	r3, [pc, #28]	; (401774 <hsmci_read_word+0x6c>)
  401756:	4798      	blx	r3
			return false;
  401758:	2000      	movs	r0, #0
  40175a:	bd08      	pop	{r3, pc}
		return true;
  40175c:	2001      	movs	r0, #1
}
  40175e:	bd08      	pop	{r3, pc}
  401760:	40080000 	.word	0x40080000
  401764:	c0600000 	.word	0xc0600000
  401768:	20000a08 	.word	0x20000a08
  40176c:	20000a02 	.word	0x20000a02
  401770:	20000a04 	.word	0x20000a04
  401774:	004013fd 	.word	0x004013fd

00401778 <hsmci_start_read_blocks>:
#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  401778:	4b15      	ldr	r3, [pc, #84]	; (4017d0 <hsmci_start_read_blocks+0x58>)
  40177a:	881b      	ldrh	r3, [r3, #0]
  40177c:	fb03 f101 	mul.w	r1, r3, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  401780:	f010 0f03 	tst.w	r0, #3
  401784:	d102      	bne.n	40178c <hsmci_start_read_blocks+0x14>
  401786:	f013 0f03 	tst.w	r3, #3
  40178a:	d01b      	beq.n	4017c4 <hsmci_start_read_blocks+0x4c>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40178c:	4a11      	ldr	r2, [pc, #68]	; (4017d4 <hsmci_start_read_blocks+0x5c>)
  40178e:	6853      	ldr	r3, [r2, #4]
  401790:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401794:	6053      	str	r3, [r2, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  401796:	4b0f      	ldr	r3, [pc, #60]	; (4017d4 <hsmci_start_read_blocks+0x5c>)
  401798:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  40179c:	685b      	ldr	r3, [r3, #4]
			nb_data : nb_data / 4;
  40179e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4017a2:	bf0c      	ite	eq
  4017a4:	088b      	lsreq	r3, r1, #2
  4017a6:	460b      	movne	r3, r1
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  4017a8:	4a0a      	ldr	r2, [pc, #40]	; (4017d4 <hsmci_start_read_blocks+0x5c>)
  4017aa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	HSMCI->HSMCI_RNCR = 0;
  4017ae:	2300      	movs	r3, #0
  4017b0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  4017b4:	2001      	movs	r0, #1
  4017b6:	f8c2 0120 	str.w	r0, [r2, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  4017ba:	4a07      	ldr	r2, [pc, #28]	; (4017d8 <hsmci_start_read_blocks+0x60>)
  4017bc:	6813      	ldr	r3, [r2, #0]
  4017be:	440b      	add	r3, r1
  4017c0:	6013      	str	r3, [r2, #0]
	return true;
}
  4017c2:	4770      	bx	lr
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4017c4:	4a03      	ldr	r2, [pc, #12]	; (4017d4 <hsmci_start_read_blocks+0x5c>)
  4017c6:	6853      	ldr	r3, [r2, #4]
  4017c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4017cc:	6053      	str	r3, [r2, #4]
  4017ce:	e7e2      	b.n	401796 <hsmci_start_read_blocks+0x1e>
  4017d0:	20000a02 	.word	0x20000a02
  4017d4:	40080000 	.word	0x40080000
  4017d8:	20000a08 	.word	0x20000a08

004017dc <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  4017dc:	b508      	push	{r3, lr}
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4017de:	4915      	ldr	r1, [pc, #84]	; (401834 <hsmci_wait_end_of_read_blocks+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4017e0:	4a15      	ldr	r2, [pc, #84]	; (401838 <hsmci_wait_end_of_read_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  4017e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4017e4:	4213      	tst	r3, r2
  4017e6:	d116      	bne.n	401816 <hsmci_wait_end_of_read_blocks+0x3a>
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			hsmci_reset();
			return false;
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  4017e8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4017ec:	d0f9      	beq.n	4017e2 <hsmci_wait_end_of_read_blocks+0x6>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  4017ee:	4b13      	ldr	r3, [pc, #76]	; (40183c <hsmci_wait_end_of_read_blocks+0x60>)
  4017f0:	881a      	ldrh	r2, [r3, #0]
  4017f2:	4b13      	ldr	r3, [pc, #76]	; (401840 <hsmci_wait_end_of_read_blocks+0x64>)
  4017f4:	881b      	ldrh	r3, [r3, #0]
  4017f6:	fb03 f302 	mul.w	r3, r3, r2
  4017fa:	4a12      	ldr	r2, [pc, #72]	; (401844 <hsmci_wait_end_of_read_blocks+0x68>)
  4017fc:	6812      	ldr	r2, [r2, #0]
  4017fe:	4293      	cmp	r3, r2
  401800:	d816      	bhi.n	401830 <hsmci_wait_end_of_read_blocks+0x54>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401802:	490c      	ldr	r1, [pc, #48]	; (401834 <hsmci_wait_end_of_read_blocks+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401804:	4a0c      	ldr	r2, [pc, #48]	; (401838 <hsmci_wait_end_of_read_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  401806:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401808:	4213      	tst	r3, r2
  40180a:	d10d      	bne.n	401828 <hsmci_wait_end_of_read_blocks+0x4c>
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40180c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401810:	d0f9      	beq.n	401806 <hsmci_wait_end_of_read_blocks+0x2a>
	return true;
  401812:	2001      	movs	r0, #1
  401814:	bd08      	pop	{r3, pc}
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  401816:	f240 2202 	movw	r2, #514	; 0x202
  40181a:	4b06      	ldr	r3, [pc, #24]	; (401834 <hsmci_wait_end_of_read_blocks+0x58>)
  40181c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			hsmci_reset();
  401820:	4b09      	ldr	r3, [pc, #36]	; (401848 <hsmci_wait_end_of_read_blocks+0x6c>)
  401822:	4798      	blx	r3
			return false;
  401824:	2000      	movs	r0, #0
  401826:	bd08      	pop	{r3, pc}
			hsmci_reset();
  401828:	4b07      	ldr	r3, [pc, #28]	; (401848 <hsmci_wait_end_of_read_blocks+0x6c>)
  40182a:	4798      	blx	r3
			return false;
  40182c:	2000      	movs	r0, #0
  40182e:	bd08      	pop	{r3, pc}
		return true;
  401830:	2001      	movs	r0, #1
}
  401832:	bd08      	pop	{r3, pc}
  401834:	40080000 	.word	0x40080000
  401838:	c0600000 	.word	0xc0600000
  40183c:	20000a02 	.word	0x20000a02
  401840:	20000a04 	.word	0x20000a04
  401844:	20000a08 	.word	0x20000a08
  401848:	004013fd 	.word	0x004013fd

0040184c <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  40184c:	4b16      	ldr	r3, [pc, #88]	; (4018a8 <hsmci_start_write_blocks+0x5c>)
  40184e:	881b      	ldrh	r3, [r3, #0]
  401850:	fb03 f101 	mul.w	r1, r3, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_TCR_TXCTR_Msk >> PERIPH_TCR_TXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
  401854:	f010 0f03 	tst.w	r0, #3
  401858:	d102      	bne.n	401860 <hsmci_start_write_blocks+0x14>
  40185a:	f013 0f03 	tst.w	r3, #3
  40185e:	d01d      	beq.n	40189c <hsmci_start_write_blocks+0x50>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401860:	4a12      	ldr	r2, [pc, #72]	; (4018ac <hsmci_start_write_blocks+0x60>)
  401862:	6853      	ldr	r3, [r2, #4]
  401864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401868:	6053      	str	r3, [r2, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
  40186a:	4b10      	ldr	r3, [pc, #64]	; (4018ac <hsmci_start_write_blocks+0x60>)
  40186c:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  401870:	685b      	ldr	r3, [r3, #4]
			nb_data : nb_data / 4;
  401872:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401876:	bf0c      	ite	eq
  401878:	088b      	lsreq	r3, r1, #2
  40187a:	460b      	movne	r3, r1
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  40187c:	4a0b      	ldr	r2, [pc, #44]	; (4018ac <hsmci_start_write_blocks+0x60>)
  40187e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	HSMCI->HSMCI_TNCR = 0;
  401882:	2300      	movs	r3, #0
  401884:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  401888:	f44f 7380 	mov.w	r3, #256	; 0x100
  40188c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  401890:	4a07      	ldr	r2, [pc, #28]	; (4018b0 <hsmci_start_write_blocks+0x64>)
  401892:	6813      	ldr	r3, [r2, #0]
  401894:	440b      	add	r3, r1
  401896:	6013      	str	r3, [r2, #0]
	return true;
}
  401898:	2001      	movs	r0, #1
  40189a:	4770      	bx	lr
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40189c:	4a03      	ldr	r2, [pc, #12]	; (4018ac <hsmci_start_write_blocks+0x60>)
  40189e:	6853      	ldr	r3, [r2, #4]
  4018a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4018a4:	6053      	str	r3, [r2, #4]
  4018a6:	e7e0      	b.n	40186a <hsmci_start_write_blocks+0x1e>
  4018a8:	20000a02 	.word	0x20000a02
  4018ac:	40080000 	.word	0x40080000
  4018b0:	20000a08 	.word	0x20000a08

004018b4 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  4018b4:	b508      	push	{r3, lr}
	uint32_t sr;

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4018b6:	4915      	ldr	r1, [pc, #84]	; (40190c <hsmci_wait_end_of_write_blocks+0x58>)
		if (sr &
  4018b8:	4a15      	ldr	r2, [pc, #84]	; (401910 <hsmci_wait_end_of_write_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  4018ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr &
  4018bc:	4213      	tst	r3, r2
  4018be:	d116      	bne.n	4018ee <hsmci_wait_end_of_write_blocks+0x3a>
					__func__, sr);
			hsmci_reset();
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			return false;
		}
	} while (!(sr & HSMCI_SR_TXBUFE));
  4018c0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4018c4:	d0f9      	beq.n	4018ba <hsmci_wait_end_of_write_blocks+0x6>


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  4018c6:	4b13      	ldr	r3, [pc, #76]	; (401914 <hsmci_wait_end_of_write_blocks+0x60>)
  4018c8:	881a      	ldrh	r2, [r3, #0]
  4018ca:	4b13      	ldr	r3, [pc, #76]	; (401918 <hsmci_wait_end_of_write_blocks+0x64>)
  4018cc:	881b      	ldrh	r3, [r3, #0]
  4018ce:	fb03 f302 	mul.w	r3, r3, r2
  4018d2:	4a12      	ldr	r2, [pc, #72]	; (40191c <hsmci_wait_end_of_write_blocks+0x68>)
  4018d4:	6812      	ldr	r2, [r2, #0]
  4018d6:	4293      	cmp	r3, r2
  4018d8:	d816      	bhi.n	401908 <hsmci_wait_end_of_write_blocks+0x54>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4018da:	490c      	ldr	r1, [pc, #48]	; (40190c <hsmci_wait_end_of_write_blocks+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4018dc:	4a0c      	ldr	r2, [pc, #48]	; (401910 <hsmci_wait_end_of_write_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  4018de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4018e0:	4213      	tst	r3, r2
  4018e2:	d10d      	bne.n	401900 <hsmci_wait_end_of_write_blocks+0x4c>
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
  4018e4:	f013 0f20 	tst.w	r3, #32
  4018e8:	d0f9      	beq.n	4018de <hsmci_wait_end_of_write_blocks+0x2a>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
  4018ea:	2001      	movs	r0, #1
  4018ec:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4018ee:	4b0c      	ldr	r3, [pc, #48]	; (401920 <hsmci_wait_end_of_write_blocks+0x6c>)
  4018f0:	4798      	blx	r3
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  4018f2:	f240 2202 	movw	r2, #514	; 0x202
  4018f6:	4b05      	ldr	r3, [pc, #20]	; (40190c <hsmci_wait_end_of_write_blocks+0x58>)
  4018f8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			return false;
  4018fc:	2000      	movs	r0, #0
  4018fe:	bd08      	pop	{r3, pc}
			hsmci_reset();
  401900:	4b07      	ldr	r3, [pc, #28]	; (401920 <hsmci_wait_end_of_write_blocks+0x6c>)
  401902:	4798      	blx	r3
			return false;
  401904:	2000      	movs	r0, #0
  401906:	bd08      	pop	{r3, pc}
		return true;
  401908:	2001      	movs	r0, #1
}
  40190a:	bd08      	pop	{r3, pc}
  40190c:	40080000 	.word	0x40080000
  401910:	c0600000 	.word	0xc0600000
  401914:	20000a02 	.word	0x20000a02
  401918:	20000a04 	.word	0x20000a04
  40191c:	20000a08 	.word	0x20000a08
  401920:	004013fd 	.word	0x004013fd

00401924 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401924:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401926:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401928:	6884      	ldr	r4, [r0, #8]
  40192a:	42a5      	cmp	r5, r4
  40192c:	d003      	beq.n	401936 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  40192e:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401930:	6884      	ldr	r4, [r0, #8]
  401932:	42ac      	cmp	r4, r5
  401934:	d1fb      	bne.n	40192e <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  401936:	b161      	cbz	r1, 401952 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401938:	f3c4 5001 	ubfx	r0, r4, #20, #2
  40193c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401940:	f3c4 4003 	ubfx	r0, r4, #16, #4
  401944:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401948:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  40194c:	bf18      	it	ne
  40194e:	300c      	addne	r0, #12
  401950:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  401952:	b142      	cbz	r2, 401966 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  401954:	f3c4 3102 	ubfx	r1, r4, #12, #3
  401958:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40195c:	f3c4 2003 	ubfx	r0, r4, #8, #4
  401960:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401964:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  401966:	b143      	cbz	r3, 40197a <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401968:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40196c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401970:	f004 040f 	and.w	r4, r4, #15
  401974:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  401978:	601c      	str	r4, [r3, #0]
	}
}
  40197a:	bc30      	pop	{r4, r5}
  40197c:	4770      	bx	lr

0040197e <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  40197e:	b4f0      	push	{r4, r5, r6, r7}
  401980:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  401982:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401984:	68c4      	ldr	r4, [r0, #12]
  401986:	42a5      	cmp	r5, r4
  401988:	d003      	beq.n	401992 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  40198a:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40198c:	68c4      	ldr	r4, [r0, #12]
  40198e:	42ac      	cmp	r4, r5
  401990:	d1fb      	bne.n	40198a <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  401992:	b199      	cbz	r1, 4019bc <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401994:	f3c4 3003 	ubfx	r0, r4, #12, #4
  401998:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40199c:	f3c4 2703 	ubfx	r7, r4, #8, #4
  4019a0:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4019a4:	f3c4 1002 	ubfx	r0, r4, #4, #3
  4019a8:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4019ac:	f004 000f 	and.w	r0, r4, #15
  4019b0:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4019b4:	2564      	movs	r5, #100	; 0x64
  4019b6:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  4019ba:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  4019bc:	b142      	cbz	r2, 4019d0 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4019be:	f3c4 5000 	ubfx	r0, r4, #20, #1
  4019c2:	0081      	lsls	r1, r0, #2
  4019c4:	4408      	add	r0, r1
  4019c6:	f3c4 4103 	ubfx	r1, r4, #16, #4
  4019ca:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  4019ce:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  4019d0:	b143      	cbz	r3, 4019e4 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4019d2:	f3c4 7201 	ubfx	r2, r4, #28, #2
  4019d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4019da:	f3c4 6103 	ubfx	r1, r4, #24, #4
  4019de:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4019e2:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4019e4:	b116      	cbz	r6, 4019ec <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4019e6:	f3c4 5442 	ubfx	r4, r4, #21, #3
  4019ea:	6034      	str	r4, [r6, #0]
	}
}
  4019ec:	bcf0      	pop	{r4, r5, r6, r7}
  4019ee:	4770      	bx	lr

004019f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4019f0:	e7fe      	b.n	4019f0 <Dummy_Handler>
	...

004019f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4019f4:	b500      	push	{lr}
  4019f6:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4019f8:	4b25      	ldr	r3, [pc, #148]	; (401a90 <Reset_Handler+0x9c>)
  4019fa:	4a26      	ldr	r2, [pc, #152]	; (401a94 <Reset_Handler+0xa0>)
  4019fc:	429a      	cmp	r2, r3
  4019fe:	d010      	beq.n	401a22 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  401a00:	4b25      	ldr	r3, [pc, #148]	; (401a98 <Reset_Handler+0xa4>)
  401a02:	4a23      	ldr	r2, [pc, #140]	; (401a90 <Reset_Handler+0x9c>)
  401a04:	429a      	cmp	r2, r3
  401a06:	d20c      	bcs.n	401a22 <Reset_Handler+0x2e>
  401a08:	3b01      	subs	r3, #1
  401a0a:	1a9b      	subs	r3, r3, r2
  401a0c:	f023 0303 	bic.w	r3, r3, #3
  401a10:	3304      	adds	r3, #4
  401a12:	4413      	add	r3, r2
  401a14:	491f      	ldr	r1, [pc, #124]	; (401a94 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  401a16:	f851 0b04 	ldr.w	r0, [r1], #4
  401a1a:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  401a1e:	429a      	cmp	r2, r3
  401a20:	d1f9      	bne.n	401a16 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401a22:	4b1e      	ldr	r3, [pc, #120]	; (401a9c <Reset_Handler+0xa8>)
  401a24:	4a1e      	ldr	r2, [pc, #120]	; (401aa0 <Reset_Handler+0xac>)
  401a26:	429a      	cmp	r2, r3
  401a28:	d20a      	bcs.n	401a40 <Reset_Handler+0x4c>
  401a2a:	3b01      	subs	r3, #1
  401a2c:	1a9b      	subs	r3, r3, r2
  401a2e:	f023 0303 	bic.w	r3, r3, #3
  401a32:	3304      	adds	r3, #4
  401a34:	4413      	add	r3, r2
		*pDest++ = 0;
  401a36:	2100      	movs	r1, #0
  401a38:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  401a3c:	4293      	cmp	r3, r2
  401a3e:	d1fb      	bne.n	401a38 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401a40:	4a18      	ldr	r2, [pc, #96]	; (401aa4 <Reset_Handler+0xb0>)
  401a42:	4b19      	ldr	r3, [pc, #100]	; (401aa8 <Reset_Handler+0xb4>)
  401a44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401a48:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401a4a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401a4e:	fab3 f383 	clz	r3, r3
  401a52:	095b      	lsrs	r3, r3, #5
  401a54:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401a56:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401a58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401a5c:	2200      	movs	r2, #0
  401a5e:	4b13      	ldr	r3, [pc, #76]	; (401aac <Reset_Handler+0xb8>)
  401a60:	701a      	strb	r2, [r3, #0]
	return flags;
  401a62:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401a64:	4a12      	ldr	r2, [pc, #72]	; (401ab0 <Reset_Handler+0xbc>)
  401a66:	6813      	ldr	r3, [r2, #0]
  401a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401a6c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401a6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401a72:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401a76:	b129      	cbz	r1, 401a84 <Reset_Handler+0x90>
		cpu_irq_enable();
  401a78:	2201      	movs	r2, #1
  401a7a:	4b0c      	ldr	r3, [pc, #48]	; (401aac <Reset_Handler+0xb8>)
  401a7c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401a7e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401a82:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  401a84:	4b0b      	ldr	r3, [pc, #44]	; (401ab4 <Reset_Handler+0xc0>)
  401a86:	4798      	blx	r3

	/* Branch to main function */
	main();
  401a88:	4b0b      	ldr	r3, [pc, #44]	; (401ab8 <Reset_Handler+0xc4>)
  401a8a:	4798      	blx	r3
  401a8c:	e7fe      	b.n	401a8c <Reset_Handler+0x98>
  401a8e:	bf00      	nop
  401a90:	20000000 	.word	0x20000000
  401a94:	0040902c 	.word	0x0040902c
  401a98:	200009b8 	.word	0x200009b8
  401a9c:	20000b0c 	.word	0x20000b0c
  401aa0:	200009b8 	.word	0x200009b8
  401aa4:	e000ed00 	.word	0xe000ed00
  401aa8:	00400000 	.word	0x00400000
  401aac:	20000000 	.word	0x20000000
  401ab0:	e000ed88 	.word	0xe000ed88
  401ab4:	00403d71 	.word	0x00403d71
  401ab8:	00403689 	.word	0x00403689

00401abc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  401abc:	4b3b      	ldr	r3, [pc, #236]	; (401bac <SystemCoreClockUpdate+0xf0>)
  401abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ac0:	f003 0303 	and.w	r3, r3, #3
  401ac4:	2b01      	cmp	r3, #1
  401ac6:	d01d      	beq.n	401b04 <SystemCoreClockUpdate+0x48>
  401ac8:	b183      	cbz	r3, 401aec <SystemCoreClockUpdate+0x30>
  401aca:	2b02      	cmp	r3, #2
  401acc:	d036      	beq.n	401b3c <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  401ace:	4b37      	ldr	r3, [pc, #220]	; (401bac <SystemCoreClockUpdate+0xf0>)
  401ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ad6:	2b70      	cmp	r3, #112	; 0x70
  401ad8:	d05f      	beq.n	401b9a <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  401ada:	4b34      	ldr	r3, [pc, #208]	; (401bac <SystemCoreClockUpdate+0xf0>)
  401adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ade:	4934      	ldr	r1, [pc, #208]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
  401ae0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401ae4:	680b      	ldr	r3, [r1, #0]
  401ae6:	40d3      	lsrs	r3, r2
  401ae8:	600b      	str	r3, [r1, #0]
  401aea:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401aec:	4b31      	ldr	r3, [pc, #196]	; (401bb4 <SystemCoreClockUpdate+0xf8>)
  401aee:	695b      	ldr	r3, [r3, #20]
  401af0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401af4:	bf14      	ite	ne
  401af6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401afa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401afe:	4b2c      	ldr	r3, [pc, #176]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
  401b00:	601a      	str	r2, [r3, #0]
  401b02:	e7e4      	b.n	401ace <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401b04:	4b29      	ldr	r3, [pc, #164]	; (401bac <SystemCoreClockUpdate+0xf0>)
  401b06:	6a1b      	ldr	r3, [r3, #32]
  401b08:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401b0c:	d003      	beq.n	401b16 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401b0e:	4a2a      	ldr	r2, [pc, #168]	; (401bb8 <SystemCoreClockUpdate+0xfc>)
  401b10:	4b27      	ldr	r3, [pc, #156]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
  401b12:	601a      	str	r2, [r3, #0]
  401b14:	e7db      	b.n	401ace <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401b16:	4a29      	ldr	r2, [pc, #164]	; (401bbc <SystemCoreClockUpdate+0x100>)
  401b18:	4b25      	ldr	r3, [pc, #148]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
  401b1a:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401b1c:	4b23      	ldr	r3, [pc, #140]	; (401bac <SystemCoreClockUpdate+0xf0>)
  401b1e:	6a1b      	ldr	r3, [r3, #32]
  401b20:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401b24:	2b10      	cmp	r3, #16
  401b26:	d005      	beq.n	401b34 <SystemCoreClockUpdate+0x78>
  401b28:	2b20      	cmp	r3, #32
  401b2a:	d1d0      	bne.n	401ace <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  401b2c:	4a22      	ldr	r2, [pc, #136]	; (401bb8 <SystemCoreClockUpdate+0xfc>)
  401b2e:	4b20      	ldr	r3, [pc, #128]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
  401b30:	601a      	str	r2, [r3, #0]
				break;
  401b32:	e7cc      	b.n	401ace <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  401b34:	4a22      	ldr	r2, [pc, #136]	; (401bc0 <SystemCoreClockUpdate+0x104>)
  401b36:	4b1e      	ldr	r3, [pc, #120]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
  401b38:	601a      	str	r2, [r3, #0]
				break;
  401b3a:	e7c8      	b.n	401ace <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401b3c:	4b1b      	ldr	r3, [pc, #108]	; (401bac <SystemCoreClockUpdate+0xf0>)
  401b3e:	6a1b      	ldr	r3, [r3, #32]
  401b40:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401b44:	d016      	beq.n	401b74 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401b46:	4a1c      	ldr	r2, [pc, #112]	; (401bb8 <SystemCoreClockUpdate+0xfc>)
  401b48:	4b19      	ldr	r3, [pc, #100]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
  401b4a:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  401b4c:	4b17      	ldr	r3, [pc, #92]	; (401bac <SystemCoreClockUpdate+0xf0>)
  401b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b50:	f003 0303 	and.w	r3, r3, #3
  401b54:	2b02      	cmp	r3, #2
  401b56:	d1ba      	bne.n	401ace <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401b58:	4a14      	ldr	r2, [pc, #80]	; (401bac <SystemCoreClockUpdate+0xf0>)
  401b5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401b5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401b5e:	4814      	ldr	r0, [pc, #80]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401b60:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401b64:	6803      	ldr	r3, [r0, #0]
  401b66:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401b6a:	b2d2      	uxtb	r2, r2
  401b6c:	fbb3 f3f2 	udiv	r3, r3, r2
  401b70:	6003      	str	r3, [r0, #0]
  401b72:	e7ac      	b.n	401ace <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401b74:	4a11      	ldr	r2, [pc, #68]	; (401bbc <SystemCoreClockUpdate+0x100>)
  401b76:	4b0e      	ldr	r3, [pc, #56]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
  401b78:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401b7a:	4b0c      	ldr	r3, [pc, #48]	; (401bac <SystemCoreClockUpdate+0xf0>)
  401b7c:	6a1b      	ldr	r3, [r3, #32]
  401b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401b82:	2b10      	cmp	r3, #16
  401b84:	d005      	beq.n	401b92 <SystemCoreClockUpdate+0xd6>
  401b86:	2b20      	cmp	r3, #32
  401b88:	d1e0      	bne.n	401b4c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  401b8a:	4a0b      	ldr	r2, [pc, #44]	; (401bb8 <SystemCoreClockUpdate+0xfc>)
  401b8c:	4b08      	ldr	r3, [pc, #32]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
  401b8e:	601a      	str	r2, [r3, #0]
				break;
  401b90:	e7dc      	b.n	401b4c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  401b92:	4a0b      	ldr	r2, [pc, #44]	; (401bc0 <SystemCoreClockUpdate+0x104>)
  401b94:	4b06      	ldr	r3, [pc, #24]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
  401b96:	601a      	str	r2, [r3, #0]
				break;
  401b98:	e7d8      	b.n	401b4c <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  401b9a:	4a05      	ldr	r2, [pc, #20]	; (401bb0 <SystemCoreClockUpdate+0xf4>)
  401b9c:	6813      	ldr	r3, [r2, #0]
  401b9e:	4909      	ldr	r1, [pc, #36]	; (401bc4 <SystemCoreClockUpdate+0x108>)
  401ba0:	fba1 1303 	umull	r1, r3, r1, r3
  401ba4:	085b      	lsrs	r3, r3, #1
  401ba6:	6013      	str	r3, [r2, #0]
  401ba8:	4770      	bx	lr
  401baa:	bf00      	nop
  401bac:	400e0400 	.word	0x400e0400
  401bb0:	20000004 	.word	0x20000004
  401bb4:	400e1810 	.word	0x400e1810
  401bb8:	00b71b00 	.word	0x00b71b00
  401bbc:	003d0900 	.word	0x003d0900
  401bc0:	007a1200 	.word	0x007a1200
  401bc4:	aaaaaaab 	.word	0xaaaaaaab

00401bc8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401bc8:	4b12      	ldr	r3, [pc, #72]	; (401c14 <system_init_flash+0x4c>)
  401bca:	4298      	cmp	r0, r3
  401bcc:	d911      	bls.n	401bf2 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  401bce:	4b12      	ldr	r3, [pc, #72]	; (401c18 <system_init_flash+0x50>)
  401bd0:	4298      	cmp	r0, r3
  401bd2:	d913      	bls.n	401bfc <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  401bd4:	4b11      	ldr	r3, [pc, #68]	; (401c1c <system_init_flash+0x54>)
  401bd6:	4298      	cmp	r0, r3
  401bd8:	d914      	bls.n	401c04 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401bda:	4b11      	ldr	r3, [pc, #68]	; (401c20 <system_init_flash+0x58>)
  401bdc:	4298      	cmp	r0, r3
  401bde:	d915      	bls.n	401c0c <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401be0:	4b10      	ldr	r3, [pc, #64]	; (401c24 <system_init_flash+0x5c>)
  401be2:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401be4:	bf94      	ite	ls
  401be6:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401bea:	4a0f      	ldrhi	r2, [pc, #60]	; (401c28 <system_init_flash+0x60>)
  401bec:	4b0f      	ldr	r3, [pc, #60]	; (401c2c <system_init_flash+0x64>)
  401bee:	601a      	str	r2, [r3, #0]
  401bf0:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401bf2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401bf6:	4b0d      	ldr	r3, [pc, #52]	; (401c2c <system_init_flash+0x64>)
  401bf8:	601a      	str	r2, [r3, #0]
  401bfa:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401bfc:	4a0c      	ldr	r2, [pc, #48]	; (401c30 <system_init_flash+0x68>)
  401bfe:	4b0b      	ldr	r3, [pc, #44]	; (401c2c <system_init_flash+0x64>)
  401c00:	601a      	str	r2, [r3, #0]
  401c02:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401c04:	4a0b      	ldr	r2, [pc, #44]	; (401c34 <system_init_flash+0x6c>)
  401c06:	4b09      	ldr	r3, [pc, #36]	; (401c2c <system_init_flash+0x64>)
  401c08:	601a      	str	r2, [r3, #0]
  401c0a:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401c0c:	4a0a      	ldr	r2, [pc, #40]	; (401c38 <system_init_flash+0x70>)
  401c0e:	4b07      	ldr	r3, [pc, #28]	; (401c2c <system_init_flash+0x64>)
  401c10:	601a      	str	r2, [r3, #0]
  401c12:	4770      	bx	lr
  401c14:	01312cff 	.word	0x01312cff
  401c18:	026259ff 	.word	0x026259ff
  401c1c:	039386ff 	.word	0x039386ff
  401c20:	04c4b3ff 	.word	0x04c4b3ff
  401c24:	05f5e0ff 	.word	0x05f5e0ff
  401c28:	04000500 	.word	0x04000500
  401c2c:	400e0a00 	.word	0x400e0a00
  401c30:	04000100 	.word	0x04000100
  401c34:	04000200 	.word	0x04000200
  401c38:	04000300 	.word	0x04000300

00401c3c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401c3c:	4b0a      	ldr	r3, [pc, #40]	; (401c68 <_sbrk+0x2c>)
  401c3e:	681b      	ldr	r3, [r3, #0]
  401c40:	b153      	cbz	r3, 401c58 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401c42:	4b09      	ldr	r3, [pc, #36]	; (401c68 <_sbrk+0x2c>)
  401c44:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401c46:	181a      	adds	r2, r3, r0
  401c48:	4908      	ldr	r1, [pc, #32]	; (401c6c <_sbrk+0x30>)
  401c4a:	4291      	cmp	r1, r2
  401c4c:	db08      	blt.n	401c60 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401c4e:	4610      	mov	r0, r2
  401c50:	4a05      	ldr	r2, [pc, #20]	; (401c68 <_sbrk+0x2c>)
  401c52:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401c54:	4618      	mov	r0, r3
  401c56:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401c58:	4a05      	ldr	r2, [pc, #20]	; (401c70 <_sbrk+0x34>)
  401c5a:	4b03      	ldr	r3, [pc, #12]	; (401c68 <_sbrk+0x2c>)
  401c5c:	601a      	str	r2, [r3, #0]
  401c5e:	e7f0      	b.n	401c42 <_sbrk+0x6>
		return (caddr_t) -1;	
  401c60:	f04f 30ff 	mov.w	r0, #4294967295
}
  401c64:	4770      	bx	lr
  401c66:	bf00      	nop
  401c68:	20000a0c 	.word	0x20000a0c
  401c6c:	2001fffc 	.word	0x2001fffc
  401c70:	20003b10 	.word	0x20003b10

00401c74 <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  401c74:	2802      	cmp	r0, #2
  401c76:	d815      	bhi.n	401ca4 <disk_initialize+0x30>
{
  401c78:	b510      	push	{r4, lr}
  401c7a:	4604      	mov	r4, r0
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  401c7c:	4b0b      	ldr	r3, [pc, #44]	; (401cac <disk_initialize+0x38>)
  401c7e:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  401c80:	2803      	cmp	r0, #3
  401c82:	d106      	bne.n	401c92 <disk_initialize+0x1e>
		mem_status = mem_test_unit_ready(drv);
  401c84:	4620      	mov	r0, r4
  401c86:	4b09      	ldr	r3, [pc, #36]	; (401cac <disk_initialize+0x38>)
  401c88:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  401c8a:	2803      	cmp	r0, #3
  401c8c:	d101      	bne.n	401c92 <disk_initialize+0x1e>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  401c8e:	2001      	movs	r0, #1
  401c90:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  401c92:	b948      	cbnz	r0, 401ca8 <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  401c94:	4620      	mov	r0, r4
  401c96:	4b06      	ldr	r3, [pc, #24]	; (401cb0 <disk_initialize+0x3c>)
  401c98:	4798      	blx	r3
  401c9a:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  401c9c:	bf14      	ite	ne
  401c9e:	2004      	movne	r0, #4
  401ca0:	2000      	moveq	r0, #0
  401ca2:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  401ca4:	2001      	movs	r0, #1
  401ca6:	4770      	bx	lr
		return STA_NOINIT;
  401ca8:	2001      	movs	r0, #1
}
  401caa:	bd10      	pop	{r4, pc}
  401cac:	00401179 	.word	0x00401179
  401cb0:	004011bd 	.word	0x004011bd

00401cb4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  401cb4:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  401cb6:	4b05      	ldr	r3, [pc, #20]	; (401ccc <disk_status+0x18>)
  401cb8:	4798      	blx	r3
  401cba:	b120      	cbz	r0, 401cc6 <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  401cbc:	2802      	cmp	r0, #2
  401cbe:	bf0c      	ite	eq
  401cc0:	2003      	moveq	r0, #3
  401cc2:	2001      	movne	r0, #1
  401cc4:	bd08      	pop	{r3, pc}
		return 0;
  401cc6:	2000      	movs	r0, #0
	}
}
  401cc8:	bd08      	pop	{r3, pc}
  401cca:	bf00      	nop
  401ccc:	00401179 	.word	0x00401179

00401cd0 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  401cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401cd4:	b083      	sub	sp, #12
  401cd6:	4680      	mov	r8, r0
  401cd8:	460d      	mov	r5, r1
  401cda:	4614      	mov	r4, r2
  401cdc:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  401cde:	4b15      	ldr	r3, [pc, #84]	; (401d34 <disk_read+0x64>)
  401ce0:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  401ce2:	b918      	cbnz	r0, 401cec <disk_read+0x1c>
		return RES_ERROR;
  401ce4:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  401ce6:	b003      	add	sp, #12
  401ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cec:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  401cee:	a901      	add	r1, sp, #4
  401cf0:	4640      	mov	r0, r8
  401cf2:	4b11      	ldr	r3, [pc, #68]	; (401d38 <disk_read+0x68>)
  401cf4:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  401cf6:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  401cf8:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  401cfc:	9b01      	ldr	r3, [sp, #4]
  401cfe:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  401d02:	429a      	cmp	r2, r3
  401d04:	d901      	bls.n	401d0a <disk_read+0x3a>
		return RES_PARERR;
  401d06:	2004      	movs	r0, #4
  401d08:	e7ed      	b.n	401ce6 <disk_read+0x16>
	for (i = 0; i < count; i++) {
  401d0a:	46ba      	mov	sl, r7
  401d0c:	b177      	cbz	r7, 401d2c <disk_read+0x5c>
  401d0e:	0276      	lsls	r6, r6, #9
  401d10:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  401d12:	f8df b028 	ldr.w	fp, [pc, #40]	; 401d3c <disk_read+0x6c>
  401d16:	462a      	mov	r2, r5
  401d18:	4621      	mov	r1, r4
  401d1a:	4640      	mov	r0, r8
  401d1c:	47d8      	blx	fp
  401d1e:	b938      	cbnz	r0, 401d30 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  401d20:	3701      	adds	r7, #1
  401d22:	444c      	add	r4, r9
  401d24:	4435      	add	r5, r6
  401d26:	4557      	cmp	r7, sl
  401d28:	d1f5      	bne.n	401d16 <disk_read+0x46>
  401d2a:	e7dc      	b.n	401ce6 <disk_read+0x16>
	return RES_OK;
  401d2c:	2000      	movs	r0, #0
  401d2e:	e7da      	b.n	401ce6 <disk_read+0x16>
			return RES_ERROR;
  401d30:	2001      	movs	r0, #1
  401d32:	e7d8      	b.n	401ce6 <disk_read+0x16>
  401d34:	004011b1 	.word	0x004011b1
  401d38:	00401191 	.word	0x00401191
  401d3c:	004011d9 	.word	0x004011d9

00401d40 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  401d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d44:	b083      	sub	sp, #12
  401d46:	4680      	mov	r8, r0
  401d48:	460d      	mov	r5, r1
  401d4a:	4614      	mov	r4, r2
  401d4c:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  401d4e:	4b15      	ldr	r3, [pc, #84]	; (401da4 <disk_write+0x64>)
  401d50:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  401d52:	b918      	cbnz	r0, 401d5c <disk_write+0x1c>
		return RES_ERROR;
  401d54:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  401d56:	b003      	add	sp, #12
  401d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d5c:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  401d5e:	a901      	add	r1, sp, #4
  401d60:	4640      	mov	r0, r8
  401d62:	4b11      	ldr	r3, [pc, #68]	; (401da8 <disk_write+0x68>)
  401d64:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  401d66:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  401d68:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  401d6c:	9b01      	ldr	r3, [sp, #4]
  401d6e:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  401d72:	429a      	cmp	r2, r3
  401d74:	d901      	bls.n	401d7a <disk_write+0x3a>
		return RES_PARERR;
  401d76:	2004      	movs	r0, #4
  401d78:	e7ed      	b.n	401d56 <disk_write+0x16>
	for (i = 0; i < count; i++) {
  401d7a:	46ba      	mov	sl, r7
  401d7c:	b177      	cbz	r7, 401d9c <disk_write+0x5c>
  401d7e:	0276      	lsls	r6, r6, #9
  401d80:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  401d82:	f8df b028 	ldr.w	fp, [pc, #40]	; 401dac <disk_write+0x6c>
  401d86:	462a      	mov	r2, r5
  401d88:	4621      	mov	r1, r4
  401d8a:	4640      	mov	r0, r8
  401d8c:	47d8      	blx	fp
  401d8e:	b938      	cbnz	r0, 401da0 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  401d90:	3701      	adds	r7, #1
  401d92:	444c      	add	r4, r9
  401d94:	4435      	add	r5, r6
  401d96:	4557      	cmp	r7, sl
  401d98:	d1f5      	bne.n	401d86 <disk_write+0x46>
  401d9a:	e7dc      	b.n	401d56 <disk_write+0x16>
	return RES_OK;
  401d9c:	2000      	movs	r0, #0
  401d9e:	e7da      	b.n	401d56 <disk_write+0x16>
			return RES_ERROR;
  401da0:	2001      	movs	r0, #1
  401da2:	e7d8      	b.n	401d56 <disk_write+0x16>
  401da4:	004011b1 	.word	0x004011b1
  401da8:	00401191 	.word	0x00401191
  401dac:	004011fd 	.word	0x004011fd

00401db0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  401db0:	b510      	push	{r4, lr}
  401db2:	b082      	sub	sp, #8
  401db4:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  401db6:	2903      	cmp	r1, #3
  401db8:	d827      	bhi.n	401e0a <disk_ioctl+0x5a>
  401dba:	e8df f001 	tbb	[pc, r1]
  401dbe:	071f      	.short	0x071f
  401dc0:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  401dc2:	2301      	movs	r3, #1
  401dc4:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  401dc6:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  401dc8:	b002      	add	sp, #8
  401dca:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  401dcc:	a901      	add	r1, sp, #4
  401dce:	4b11      	ldr	r3, [pc, #68]	; (401e14 <disk_ioctl+0x64>)
  401dd0:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  401dd2:	9b01      	ldr	r3, [sp, #4]
  401dd4:	3301      	adds	r3, #1
  401dd6:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  401dd8:	2000      	movs	r0, #0
	break;
  401dda:	e7f5      	b.n	401dc8 <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  401ddc:	4b0e      	ldr	r3, [pc, #56]	; (401e18 <disk_ioctl+0x68>)
  401dde:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  401de0:	2808      	cmp	r0, #8
  401de2:	d814      	bhi.n	401e0e <disk_ioctl+0x5e>
  401de4:	f44f 738b 	mov.w	r3, #278	; 0x116
  401de8:	fa23 f000 	lsr.w	r0, r3, r0
  401dec:	f010 0f01 	tst.w	r0, #1
  401df0:	d101      	bne.n	401df6 <disk_ioctl+0x46>
			return RES_ERROR;
  401df2:	2001      	movs	r0, #1
  401df4:	e7e8      	b.n	401dc8 <disk_ioctl+0x18>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  401df6:	2000      	movs	r0, #0
  401df8:	7020      	strb	r0, [r4, #0]
	break;
  401dfa:	e7e5      	b.n	401dc8 <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  401dfc:	4b07      	ldr	r3, [pc, #28]	; (401e1c <disk_ioctl+0x6c>)
  401dfe:	4798      	blx	r3
  401e00:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  401e02:	bf0c      	ite	eq
  401e04:	2000      	moveq	r0, #0
  401e06:	2003      	movne	r0, #3
  401e08:	e7de      	b.n	401dc8 <disk_ioctl+0x18>
		res = RES_PARERR;
  401e0a:	2004      	movs	r0, #4
  401e0c:	e7dc      	b.n	401dc8 <disk_ioctl+0x18>
			return RES_ERROR;
  401e0e:	2001      	movs	r0, #1
  401e10:	e7da      	b.n	401dc8 <disk_ioctl+0x18>
  401e12:	bf00      	nop
  401e14:	00401191 	.word	0x00401191
  401e18:	004011b1 	.word	0x004011b1
  401e1c:	00401179 	.word	0x00401179

00401e20 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  401e20:	b530      	push	{r4, r5, lr}
  401e22:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  401e24:	4c11      	ldr	r4, [pc, #68]	; (401e6c <get_fattime+0x4c>)
  401e26:	ab07      	add	r3, sp, #28
  401e28:	aa08      	add	r2, sp, #32
  401e2a:	a909      	add	r1, sp, #36	; 0x24
  401e2c:	4620      	mov	r0, r4
  401e2e:	4d10      	ldr	r5, [pc, #64]	; (401e70 <get_fattime+0x50>)
  401e30:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  401e32:	ab03      	add	r3, sp, #12
  401e34:	9300      	str	r3, [sp, #0]
  401e36:	ab04      	add	r3, sp, #16
  401e38:	aa05      	add	r2, sp, #20
  401e3a:	a906      	add	r1, sp, #24
  401e3c:	4620      	mov	r0, r4
  401e3e:	4c0d      	ldr	r4, [pc, #52]	; (401e74 <get_fattime+0x54>)
  401e40:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  401e42:	9b04      	ldr	r3, [sp, #16]
  401e44:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  401e46:	9805      	ldr	r0, [sp, #20]
  401e48:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  401e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
  401e4e:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  401e52:	9808      	ldr	r0, [sp, #32]
  401e54:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  401e58:	9807      	ldr	r0, [sp, #28]
  401e5a:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  401e5e:	9806      	ldr	r0, [sp, #24]
  401e60:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  401e64:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  401e68:	b00b      	add	sp, #44	; 0x2c
  401e6a:	bd30      	pop	{r4, r5, pc}
  401e6c:	400e1860 	.word	0x400e1860
  401e70:	00401925 	.word	0x00401925
  401e74:	0040197f 	.word	0x0040197f

00401e78 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  401e78:	b13a      	cbz	r2, 401e8a <mem_cpy+0x12>
  401e7a:	3801      	subs	r0, #1
  401e7c:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  401e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
  401e82:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  401e86:	4291      	cmp	r1, r2
  401e88:	d1f9      	bne.n	401e7e <mem_cpy+0x6>
  401e8a:	4770      	bx	lr

00401e8c <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  401e8c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  401e8e:	6983      	ldr	r3, [r0, #24]
  401e90:	3b02      	subs	r3, #2
  401e92:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
  401e94:	bf3d      	ittte	cc
  401e96:	7883      	ldrbcc	r3, [r0, #2]
  401e98:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
  401e9a:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  401e9e:	2000      	movcs	r0, #0
}
  401ea0:	4770      	bx	lr

00401ea2 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  401ea2:	4602      	mov	r2, r0
  401ea4:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  401ea8:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  401eaa:	01c3      	lsls	r3, r0, #7
  401eac:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  401eb0:	f812 0b01 	ldrb.w	r0, [r2], #1
  401eb4:	fa50 f383 	uxtab	r3, r0, r3
  401eb8:	b2d8      	uxtb	r0, r3
  401eba:	428a      	cmp	r2, r1
  401ebc:	d1f5      	bne.n	401eaa <sum_sfn+0x8>
	return sum;
}
  401ebe:	4770      	bx	lr

00401ec0 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  401ec0:	b198      	cbz	r0, 401eea <validate+0x2a>
{
  401ec2:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  401ec4:	7802      	ldrb	r2, [r0, #0]
  401ec6:	b90a      	cbnz	r2, 401ecc <validate+0xc>
		return FR_INVALID_OBJECT;
  401ec8:	2009      	movs	r0, #9
  401eca:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  401ecc:	88c2      	ldrh	r2, [r0, #6]
  401ece:	428a      	cmp	r2, r1
  401ed0:	d001      	beq.n	401ed6 <validate+0x16>
		return FR_INVALID_OBJECT;
  401ed2:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  401ed4:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  401ed6:	7840      	ldrb	r0, [r0, #1]
  401ed8:	4b05      	ldr	r3, [pc, #20]	; (401ef0 <validate+0x30>)
  401eda:	4798      	blx	r3
  401edc:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  401ee0:	2800      	cmp	r0, #0
  401ee2:	bf14      	ite	ne
  401ee4:	2003      	movne	r0, #3
  401ee6:	2000      	moveq	r0, #0
  401ee8:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  401eea:	2009      	movs	r0, #9
  401eec:	4770      	bx	lr
  401eee:	bf00      	nop
  401ef0:	00401cb5 	.word	0x00401cb5

00401ef4 <check_fs>:
{
  401ef4:	b538      	push	{r3, r4, r5, lr}
  401ef6:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  401ef8:	2301      	movs	r3, #1
  401efa:	460a      	mov	r2, r1
  401efc:	f100 0130 	add.w	r1, r0, #48	; 0x30
  401f00:	7840      	ldrb	r0, [r0, #1]
  401f02:	4d1d      	ldr	r5, [pc, #116]	; (401f78 <check_fs+0x84>)
  401f04:	47a8      	blx	r5
  401f06:	b108      	cbz	r0, 401f0c <check_fs+0x18>
		return 3;
  401f08:	2003      	movs	r0, #3
  401f0a:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  401f0c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  401f10:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  401f14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401f18:	b21b      	sxth	r3, r3
  401f1a:	4a18      	ldr	r2, [pc, #96]	; (401f7c <check_fs+0x88>)
  401f1c:	4293      	cmp	r3, r2
  401f1e:	d001      	beq.n	401f24 <check_fs+0x30>
		return 2;
  401f20:	2002      	movs	r0, #2
  401f22:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  401f24:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  401f28:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  401f2c:	041b      	lsls	r3, r3, #16
  401f2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401f32:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  401f36:	4313      	orrs	r3, r2
  401f38:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  401f3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401f40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401f44:	4a0e      	ldr	r2, [pc, #56]	; (401f80 <check_fs+0x8c>)
  401f46:	4293      	cmp	r3, r2
  401f48:	d013      	beq.n	401f72 <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  401f4a:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  401f4e:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  401f52:	0400      	lsls	r0, r0, #16
  401f54:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  401f58:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  401f5c:	4318      	orrs	r0, r3
  401f5e:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  401f62:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401f66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  401f6a:	1a80      	subs	r0, r0, r2
  401f6c:	bf18      	it	ne
  401f6e:	2001      	movne	r0, #1
  401f70:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  401f72:	2000      	movs	r0, #0
}
  401f74:	bd38      	pop	{r3, r4, r5, pc}
  401f76:	bf00      	nop
  401f78:	00401cd1 	.word	0x00401cd1
  401f7c:	ffffaa55 	.word	0xffffaa55
  401f80:	00544146 	.word	0x00544146

00401f84 <chk_mounted>:
{
  401f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  401f86:	6804      	ldr	r4, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  401f88:	7823      	ldrb	r3, [r4, #0]
  401f8a:	3b30      	subs	r3, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  401f8c:	2b09      	cmp	r3, #9
  401f8e:	d802      	bhi.n	401f96 <chk_mounted+0x12>
  401f90:	7865      	ldrb	r5, [r4, #1]
  401f92:	2d3a      	cmp	r5, #58	; 0x3a
  401f94:	d018      	beq.n	401fc8 <chk_mounted+0x44>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  401f96:	4bb0      	ldr	r3, [pc, #704]	; (402258 <chk_mounted+0x2d4>)
  401f98:	681c      	ldr	r4, [r3, #0]
  401f9a:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401f9c:	2c00      	cmp	r4, #0
  401f9e:	f000 8142 	beq.w	402226 <chk_mounted+0x2a2>
  401fa2:	4615      	mov	r5, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  401fa4:	7823      	ldrb	r3, [r4, #0]
  401fa6:	b1ab      	cbz	r3, 401fd4 <chk_mounted+0x50>
		stat = disk_status(fs->drv);
  401fa8:	7860      	ldrb	r0, [r4, #1]
  401faa:	4bac      	ldr	r3, [pc, #688]	; (40225c <chk_mounted+0x2d8>)
  401fac:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  401fae:	f010 0f01 	tst.w	r0, #1
  401fb2:	d10f      	bne.n	401fd4 <chk_mounted+0x50>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  401fb4:	2d00      	cmp	r5, #0
  401fb6:	f000 8138 	beq.w	40222a <chk_mounted+0x2a6>
  401fba:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  401fbe:	2800      	cmp	r0, #0
  401fc0:	bf0c      	ite	eq
  401fc2:	2000      	moveq	r0, #0
  401fc4:	200a      	movne	r0, #10
  401fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p += 2; *path = p;				/* Return pointer to the path name */
  401fc8:	3402      	adds	r4, #2
  401fca:	6004      	str	r4, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  401fcc:	2b00      	cmp	r3, #0
  401fce:	d0e2      	beq.n	401f96 <chk_mounted+0x12>
		return FR_INVALID_DRIVE;
  401fd0:	200b      	movs	r0, #11
  401fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  401fd4:	2000      	movs	r0, #0
  401fd6:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  401fd8:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  401fda:	4ba1      	ldr	r3, [pc, #644]	; (402260 <chk_mounted+0x2dc>)
  401fdc:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  401fde:	f010 0f01 	tst.w	r0, #1
  401fe2:	d001      	beq.n	401fe8 <chk_mounted+0x64>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  401fe4:	2003      	movs	r0, #3
  401fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  401fe8:	b125      	cbz	r5, 401ff4 <chk_mounted+0x70>
  401fea:	f010 0f04 	tst.w	r0, #4
  401fee:	d001      	beq.n	401ff4 <chk_mounted+0x70>
		return FR_WRITE_PROTECTED;
  401ff0:	200a      	movs	r0, #10
  401ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401ff4:	2100      	movs	r1, #0
  401ff6:	4620      	mov	r0, r4
  401ff8:	4b9a      	ldr	r3, [pc, #616]	; (402264 <chk_mounted+0x2e0>)
  401ffa:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  401ffc:	2801      	cmp	r0, #1
  401ffe:	d006      	beq.n	40200e <chk_mounted+0x8a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  402000:	2500      	movs	r5, #0
	if (fmt == 3) return FR_DISK_ERR;
  402002:	2803      	cmp	r0, #3
  402004:	f000 8113 	beq.w	40222e <chk_mounted+0x2aa>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402008:	b1c8      	cbz	r0, 40203e <chk_mounted+0xba>
  40200a:	200d      	movs	r0, #13
  40200c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  40200e:	f894 31f2 	ldrb.w	r3, [r4, #498]	; 0x1f2
  402012:	b90b      	cbnz	r3, 402018 <chk_mounted+0x94>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  402014:	200d      	movs	r0, #13
  402016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  402018:	f894 31f9 	ldrb.w	r3, [r4, #505]	; 0x1f9
  40201c:	f894 51f8 	ldrb.w	r5, [r4, #504]	; 0x1f8
  402020:	042d      	lsls	r5, r5, #16
  402022:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  402026:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
  40202a:	431d      	orrs	r5, r3
  40202c:	f894 31f7 	ldrb.w	r3, [r4, #503]	; 0x1f7
  402030:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  402034:	4629      	mov	r1, r5
  402036:	4620      	mov	r0, r4
  402038:	4b8a      	ldr	r3, [pc, #552]	; (402264 <chk_mounted+0x2e0>)
  40203a:	4798      	blx	r3
  40203c:	e7e1      	b.n	402002 <chk_mounted+0x7e>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  40203e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  402042:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
  402046:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40204a:	b21b      	sxth	r3, r3
  40204c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402050:	d001      	beq.n	402056 <chk_mounted+0xd2>
		return FR_NO_FILESYSTEM;
  402052:	200d      	movs	r0, #13
  402054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  402056:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  40205a:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  40205e:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  402062:	d10d      	bne.n	402080 <chk_mounted+0xfc>
  402064:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
  402068:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
  40206c:	0412      	lsls	r2, r2, #16
  40206e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  402072:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
  402076:	431a      	orrs	r2, r3
  402078:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
  40207c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  402080:	61e2      	str	r2, [r4, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  402082:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
  402086:	f884 e003 	strb.w	lr, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  40208a:	f10e 33ff 	add.w	r3, lr, #4294967295
  40208e:	b2db      	uxtb	r3, r3
  402090:	2b01      	cmp	r3, #1
  402092:	d901      	bls.n	402098 <chk_mounted+0x114>
  402094:	200d      	movs	r0, #13
  402096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  402098:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
  40209c:	70a6      	strb	r6, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  40209e:	2e00      	cmp	r6, #0
  4020a0:	f000 80c7 	beq.w	402232 <chk_mounted+0x2ae>
  4020a4:	1e73      	subs	r3, r6, #1
  4020a6:	4233      	tst	r3, r6
  4020a8:	d001      	beq.n	4020ae <chk_mounted+0x12a>
  4020aa:	200d      	movs	r0, #13
  4020ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  4020ae:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  4020b2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  4020b6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  4020ba:	8121      	strh	r1, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  4020bc:	f011 0f0f 	tst.w	r1, #15
  4020c0:	f040 80b9 	bne.w	402236 <chk_mounted+0x2b2>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  4020c4:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  4020c8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  4020cc:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  4020d0:	d10d      	bne.n	4020ee <chk_mounted+0x16a>
  4020d2:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
  4020d6:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
  4020da:	041b      	lsls	r3, r3, #16
  4020dc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  4020e0:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
  4020e4:	4303      	orrs	r3, r0
  4020e6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  4020ea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  4020ee:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
  4020f2:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  4020f6:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  4020fa:	f000 809e 	beq.w	40223a <chk_mounted+0x2b6>
	fasize *= b;										/* Number of sectors for FAT area */
  4020fe:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  402102:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  402106:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  402108:	4283      	cmp	r3, r0
  40210a:	f0c0 8098 	bcc.w	40223e <chk_mounted+0x2ba>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  40210e:	1a1b      	subs	r3, r3, r0
  402110:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402114:	2b00      	cmp	r3, #0
  402116:	f000 8094 	beq.w	402242 <chk_mounted+0x2be>
	fmt = FS_FAT12;
  40211a:	f640 76f5 	movw	r6, #4085	; 0xff5
  40211e:	42b3      	cmp	r3, r6
  402120:	bf8c      	ite	hi
  402122:	2602      	movhi	r6, #2
  402124:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  402126:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  40212a:	4563      	cmp	r3, ip
  40212c:	f200 80a4 	bhi.w	402278 <chk_mounted+0x2f4>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402130:	3302      	adds	r3, #2
  402132:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  402134:	4428      	add	r0, r5
  402136:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402138:	443d      	add	r5, r7
  40213a:	6225      	str	r5, [r4, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  40213c:	2900      	cmp	r1, #0
  40213e:	f000 8088 	beq.w	402252 <chk_mounted+0x2ce>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  402142:	4475      	add	r5, lr
  402144:	6265      	str	r5, [r4, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  402146:	2e02      	cmp	r6, #2
  402148:	bf0f      	iteee	eq
  40214a:	005b      	lsleq	r3, r3, #1
  40214c:	eb03 0143 	addne.w	r1, r3, r3, lsl #1
  402150:	f003 0301 	andne.w	r3, r3, #1
  402154:	eb03 0351 	addne.w	r3, r3, r1, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402158:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40215c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  402160:	d375      	bcc.n	40224e <chk_mounted+0x2ca>
	fs->free_clust = 0xFFFFFFFF;
  402162:	f04f 33ff 	mov.w	r3, #4294967295
  402166:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  402168:	2300      	movs	r3, #0
  40216a:	60e3      	str	r3, [r4, #12]
  40216c:	e04a      	b.n	402204 <chk_mounted+0x280>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40216e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  402172:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  402176:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  40217a:	b21b      	sxth	r3, r3
  40217c:	4a3a      	ldr	r2, [pc, #232]	; (402268 <chk_mounted+0x2e4>)
  40217e:	4293      	cmp	r3, r2
  402180:	d14b      	bne.n	40221a <chk_mounted+0x296>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402182:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  402186:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  40218a:	041b      	lsls	r3, r3, #16
  40218c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402190:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  402194:	4313      	orrs	r3, r2
  402196:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
  40219a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40219e:	4a33      	ldr	r2, [pc, #204]	; (40226c <chk_mounted+0x2e8>)
  4021a0:	4293      	cmp	r3, r2
  4021a2:	d13c      	bne.n	40221e <chk_mounted+0x29a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  4021a4:	f894 2217 	ldrb.w	r2, [r4, #535]	; 0x217
  4021a8:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
  4021ac:	041b      	lsls	r3, r3, #16
  4021ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4021b2:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
  4021b6:	4313      	orrs	r3, r2
  4021b8:	f894 2215 	ldrb.w	r2, [r4, #533]	; 0x215
  4021bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4021c0:	4a2b      	ldr	r2, [pc, #172]	; (402270 <chk_mounted+0x2ec>)
  4021c2:	4293      	cmp	r3, r2
  4021c4:	d12d      	bne.n	402222 <chk_mounted+0x29e>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4021c6:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
  4021ca:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
  4021ce:	041b      	lsls	r3, r3, #16
  4021d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4021d4:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
  4021d8:	4313      	orrs	r3, r2
  4021da:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
  4021de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4021e2:	60e3      	str	r3, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4021e4:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
  4021e8:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
  4021ec:	041b      	lsls	r3, r3, #16
  4021ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4021f2:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
  4021f6:	4313      	orrs	r3, r2
  4021f8:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
  4021fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402200:	6123      	str	r3, [r4, #16]
  402202:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  402204:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  402206:	4a1b      	ldr	r2, [pc, #108]	; (402274 <chk_mounted+0x2f0>)
  402208:	8813      	ldrh	r3, [r2, #0]
  40220a:	3301      	adds	r3, #1
  40220c:	b29b      	uxth	r3, r3
  40220e:	8013      	strh	r3, [r2, #0]
  402210:	80e3      	strh	r3, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  402212:	2000      	movs	r0, #0
  402214:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->wflag = 0;
  402216:	7120      	strb	r0, [r4, #4]
	return FR_OK;
  402218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40221a:	2603      	movs	r6, #3
  40221c:	e7f2      	b.n	402204 <chk_mounted+0x280>
  40221e:	2603      	movs	r6, #3
  402220:	e7f0      	b.n	402204 <chk_mounted+0x280>
  402222:	2603      	movs	r6, #3
  402224:	e7ee      	b.n	402204 <chk_mounted+0x280>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402226:	200c      	movs	r0, #12
  402228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  40222a:	2000      	movs	r0, #0
  40222c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  40222e:	2001      	movs	r0, #1
  402230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  402232:	200d      	movs	r0, #13
  402234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402236:	200d      	movs	r0, #13
  402238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  40223a:	200d      	movs	r0, #13
  40223c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  40223e:	200d      	movs	r0, #13
  402240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  402242:	200d      	movs	r0, #13
  402244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  402246:	200d      	movs	r0, #13
  402248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  40224a:	200d      	movs	r0, #13
  40224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  40224e:	200d      	movs	r0, #13
  402250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  402252:	200d      	movs	r0, #13
  402254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402256:	bf00      	nop
  402258:	20000a10 	.word	0x20000a10
  40225c:	00401cb5 	.word	0x00401cb5
  402260:	00401c75 	.word	0x00401c75
  402264:	00401ef5 	.word	0x00401ef5
  402268:	ffffaa55 	.word	0xffffaa55
  40226c:	41615252 	.word	0x41615252
  402270:	61417272 	.word	0x61417272
  402274:	20000a14 	.word	0x20000a14
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  402278:	3302      	adds	r3, #2
  40227a:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  40227c:	4428      	add	r0, r5
  40227e:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  402280:	442f      	add	r7, r5
  402282:	6227      	str	r7, [r4, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  402284:	2900      	cmp	r1, #0
  402286:	d1e0      	bne.n	40224a <chk_mounted+0x2c6>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  402288:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
  40228c:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
  402290:	0409      	lsls	r1, r1, #16
  402292:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  402296:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  40229a:	4301      	orrs	r1, r0
  40229c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  4022a0:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  4022a4:	6261      	str	r1, [r4, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  4022a6:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  4022a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  4022ac:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  4022b0:	d3c9      	bcc.n	402246 <chk_mounted+0x2c2>
	fs->free_clust = 0xFFFFFFFF;
  4022b2:	f04f 33ff 	mov.w	r3, #4294967295
  4022b6:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  4022b8:	2300      	movs	r3, #0
  4022ba:	60e3      	str	r3, [r4, #12]
	 	fs->fsi_flag = 0;
  4022bc:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  4022be:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
  4022c2:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
  4022c6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  4022ca:	442a      	add	r2, r5
  4022cc:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  4022ce:	2301      	movs	r3, #1
  4022d0:	f104 0130 	add.w	r1, r4, #48	; 0x30
  4022d4:	7860      	ldrb	r0, [r4, #1]
  4022d6:	4d03      	ldr	r5, [pc, #12]	; (4022e4 <chk_mounted+0x360>)
  4022d8:	47a8      	blx	r5
  4022da:	2800      	cmp	r0, #0
  4022dc:	f43f af47 	beq.w	40216e <chk_mounted+0x1ea>
  4022e0:	2603      	movs	r6, #3
  4022e2:	e78f      	b.n	402204 <chk_mounted+0x280>
  4022e4:	00401cd1 	.word	0x00401cd1

004022e8 <move_window>:
{
  4022e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  4022ec:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  4022ee:	428f      	cmp	r7, r1
  4022f0:	d035      	beq.n	40235e <move_window+0x76>
  4022f2:	460e      	mov	r6, r1
  4022f4:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  4022f6:	7903      	ldrb	r3, [r0, #4]
  4022f8:	b91b      	cbnz	r3, 402302 <move_window+0x1a>
		if (sector) {
  4022fa:	bb2e      	cbnz	r6, 402348 <move_window+0x60>
	return FR_OK;
  4022fc:	2000      	movs	r0, #0
  4022fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  402302:	f100 0830 	add.w	r8, r0, #48	; 0x30
  402306:	2301      	movs	r3, #1
  402308:	463a      	mov	r2, r7
  40230a:	4641      	mov	r1, r8
  40230c:	7840      	ldrb	r0, [r0, #1]
  40230e:	4d18      	ldr	r5, [pc, #96]	; (402370 <move_window+0x88>)
  402310:	47a8      	blx	r5
  402312:	bb38      	cbnz	r0, 402364 <move_window+0x7c>
			fs->wflag = 0;
  402314:	2300      	movs	r3, #0
  402316:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  402318:	6a23      	ldr	r3, [r4, #32]
  40231a:	69e2      	ldr	r2, [r4, #28]
  40231c:	4413      	add	r3, r2
  40231e:	429f      	cmp	r7, r3
  402320:	d2eb      	bcs.n	4022fa <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402322:	78e5      	ldrb	r5, [r4, #3]
  402324:	2d01      	cmp	r5, #1
  402326:	d9e8      	bls.n	4022fa <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  402328:	f04f 0a01 	mov.w	sl, #1
  40232c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 402370 <move_window+0x88>
					wsect += fs->fsize;
  402330:	69e3      	ldr	r3, [r4, #28]
  402332:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  402334:	4653      	mov	r3, sl
  402336:	463a      	mov	r2, r7
  402338:	4641      	mov	r1, r8
  40233a:	7860      	ldrb	r0, [r4, #1]
  40233c:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40233e:	3d01      	subs	r5, #1
  402340:	b2ed      	uxtb	r5, r5
  402342:	2d01      	cmp	r5, #1
  402344:	d1f4      	bne.n	402330 <move_window+0x48>
  402346:	e7d8      	b.n	4022fa <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  402348:	2301      	movs	r3, #1
  40234a:	4632      	mov	r2, r6
  40234c:	f104 0130 	add.w	r1, r4, #48	; 0x30
  402350:	7860      	ldrb	r0, [r4, #1]
  402352:	4d08      	ldr	r5, [pc, #32]	; (402374 <move_window+0x8c>)
  402354:	47a8      	blx	r5
  402356:	b940      	cbnz	r0, 40236a <move_window+0x82>
			fs->winsect = sector;
  402358:	62e6      	str	r6, [r4, #44]	; 0x2c
  40235a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  40235e:	2000      	movs	r0, #0
  402360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  402364:	2001      	movs	r0, #1
  402366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  40236a:	2001      	movs	r0, #1
}
  40236c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402370:	00401d41 	.word	0x00401d41
  402374:	00401cd1 	.word	0x00401cd1

00402378 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  402378:	2901      	cmp	r1, #1
  40237a:	d96a      	bls.n	402452 <get_fat+0xda>
{
  40237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  40237e:	6983      	ldr	r3, [r0, #24]
  402380:	4299      	cmp	r1, r3
  402382:	d268      	bcs.n	402456 <get_fat+0xde>
  402384:	460c      	mov	r4, r1
  402386:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  402388:	7803      	ldrb	r3, [r0, #0]
  40238a:	2b02      	cmp	r3, #2
  40238c:	d02f      	beq.n	4023ee <get_fat+0x76>
  40238e:	2b03      	cmp	r3, #3
  402390:	d041      	beq.n	402416 <get_fat+0x9e>
  402392:	2b01      	cmp	r3, #1
  402394:	d002      	beq.n	40239c <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402396:	f04f 30ff 	mov.w	r0, #4294967295
  40239a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  40239c:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  4023a0:	6a01      	ldr	r1, [r0, #32]
  4023a2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  4023a6:	4b2d      	ldr	r3, [pc, #180]	; (40245c <get_fat+0xe4>)
  4023a8:	4798      	blx	r3
  4023aa:	b110      	cbz	r0, 4023b2 <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4023ac:	f04f 30ff 	mov.w	r0, #4294967295
  4023b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  4023b2:	f3c7 0308 	ubfx	r3, r7, #0, #9
  4023b6:	4433      	add	r3, r6
  4023b8:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  4023bc:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  4023be:	6a31      	ldr	r1, [r6, #32]
  4023c0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  4023c4:	4630      	mov	r0, r6
  4023c6:	4b25      	ldr	r3, [pc, #148]	; (40245c <get_fat+0xe4>)
  4023c8:	4798      	blx	r3
  4023ca:	b110      	cbz	r0, 4023d2 <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4023cc:	f04f 30ff 	mov.w	r0, #4294967295
  4023d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  4023d2:	f3c7 0708 	ubfx	r7, r7, #0, #9
  4023d6:	19f0      	adds	r0, r6, r7
  4023d8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4023dc:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  4023e0:	f014 0f01 	tst.w	r4, #1
  4023e4:	bf14      	ite	ne
  4023e6:	0900      	lsrne	r0, r0, #4
  4023e8:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  4023ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  4023ee:	6a01      	ldr	r1, [r0, #32]
  4023f0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  4023f4:	4b19      	ldr	r3, [pc, #100]	; (40245c <get_fat+0xe4>)
  4023f6:	4798      	blx	r3
  4023f8:	b110      	cbz	r0, 402400 <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4023fa:	f04f 30ff 	mov.w	r0, #4294967295
  4023fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  402400:	0060      	lsls	r0, r4, #1
  402402:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  402406:	4430      	add	r0, r6
  402408:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  40240c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402410:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  402416:	6a01      	ldr	r1, [r0, #32]
  402418:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  40241c:	4b0f      	ldr	r3, [pc, #60]	; (40245c <get_fat+0xe4>)
  40241e:	4798      	blx	r3
  402420:	b110      	cbz	r0, 402428 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402422:	f04f 30ff 	mov.w	r0, #4294967295
}
  402426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  402428:	00a0      	lsls	r0, r4, #2
  40242a:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  40242e:	f100 0230 	add.w	r2, r0, #48	; 0x30
  402432:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  402434:	78d1      	ldrb	r1, [r2, #3]
  402436:	7893      	ldrb	r3, [r2, #2]
  402438:	041b      	lsls	r3, r3, #16
  40243a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  40243e:	4430      	add	r0, r6
  402440:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402444:	4318      	orrs	r0, r3
  402446:	7853      	ldrb	r3, [r2, #1]
  402448:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40244c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  402450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  402452:	2001      	movs	r0, #1
  402454:	4770      	bx	lr
  402456:	2001      	movs	r0, #1
  402458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40245a:	bf00      	nop
  40245c:	004022e9 	.word	0x004022e9

00402460 <dir_sdi>:
{
  402460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402462:	4605      	mov	r5, r0
  402464:	460c      	mov	r4, r1
	dj->index = idx;
  402466:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  402468:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  40246a:	2901      	cmp	r1, #1
  40246c:	d03d      	beq.n	4024ea <dir_sdi+0x8a>
  40246e:	6803      	ldr	r3, [r0, #0]
  402470:	699a      	ldr	r2, [r3, #24]
  402472:	4291      	cmp	r1, r2
  402474:	d301      	bcc.n	40247a <dir_sdi+0x1a>
		return FR_INT_ERR;
  402476:	2002      	movs	r0, #2
  402478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  40247a:	b961      	cbnz	r1, 402496 <dir_sdi+0x36>
  40247c:	781a      	ldrb	r2, [r3, #0]
  40247e:	2a03      	cmp	r2, #3
  402480:	d006      	beq.n	402490 <dir_sdi+0x30>
		dj->clust = clst;
  402482:	2200      	movs	r2, #0
  402484:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  402486:	891a      	ldrh	r2, [r3, #8]
  402488:	42a2      	cmp	r2, r4
  40248a:	d821      	bhi.n	4024d0 <dir_sdi+0x70>
			return FR_INT_ERR;
  40248c:	2002      	movs	r0, #2
  40248e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  402490:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  402492:	2900      	cmp	r1, #0
  402494:	d0f5      	beq.n	402482 <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  402496:	789e      	ldrb	r6, [r3, #2]
  402498:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  40249a:	42b4      	cmp	r4, r6
  40249c:	d310      	bcc.n	4024c0 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  40249e:	4f17      	ldr	r7, [pc, #92]	; (4024fc <dir_sdi+0x9c>)
  4024a0:	6828      	ldr	r0, [r5, #0]
  4024a2:	47b8      	blx	r7
  4024a4:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4024a6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4024aa:	d020      	beq.n	4024ee <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  4024ac:	2801      	cmp	r0, #1
  4024ae:	d920      	bls.n	4024f2 <dir_sdi+0x92>
  4024b0:	682b      	ldr	r3, [r5, #0]
  4024b2:	699b      	ldr	r3, [r3, #24]
  4024b4:	4298      	cmp	r0, r3
  4024b6:	d21e      	bcs.n	4024f6 <dir_sdi+0x96>
			idx -= ic;
  4024b8:	1ba4      	subs	r4, r4, r6
  4024ba:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  4024bc:	42a6      	cmp	r6, r4
  4024be:	d9ef      	bls.n	4024a0 <dir_sdi+0x40>
		dj->clust = clst;
  4024c0:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  4024c2:	6828      	ldr	r0, [r5, #0]
  4024c4:	4b0e      	ldr	r3, [pc, #56]	; (402500 <dir_sdi+0xa0>)
  4024c6:	4798      	blx	r3
  4024c8:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  4024cc:	6128      	str	r0, [r5, #16]
  4024ce:	e003      	b.n	4024d8 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  4024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4024d2:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  4024d6:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  4024d8:	682b      	ldr	r3, [r5, #0]
  4024da:	3330      	adds	r3, #48	; 0x30
  4024dc:	f004 040f 	and.w	r4, r4, #15
  4024e0:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  4024e4:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  4024e6:	2000      	movs	r0, #0
  4024e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  4024ea:	2002      	movs	r0, #2
  4024ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4024ee:	2001      	movs	r0, #1
  4024f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  4024f2:	2002      	movs	r0, #2
  4024f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024f6:	2002      	movs	r0, #2
}
  4024f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024fa:	bf00      	nop
  4024fc:	00402379 	.word	0x00402379
  402500:	00401e8d 	.word	0x00401e8d

00402504 <put_fat>:
{
  402504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402508:	2901      	cmp	r1, #1
  40250a:	f240 808f 	bls.w	40262c <put_fat+0x128>
  40250e:	6983      	ldr	r3, [r0, #24]
  402510:	4299      	cmp	r1, r3
  402512:	d301      	bcc.n	402518 <put_fat+0x14>
		res = FR_INT_ERR;
  402514:	2702      	movs	r7, #2
	return res;
  402516:	e08a      	b.n	40262e <put_fat+0x12a>
  402518:	4615      	mov	r5, r2
  40251a:	460c      	mov	r4, r1
  40251c:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  40251e:	7803      	ldrb	r3, [r0, #0]
  402520:	2b02      	cmp	r3, #2
  402522:	d04e      	beq.n	4025c2 <put_fat+0xbe>
  402524:	2b03      	cmp	r3, #3
  402526:	d05f      	beq.n	4025e8 <put_fat+0xe4>
  402528:	2b01      	cmp	r3, #1
  40252a:	d003      	beq.n	402534 <put_fat+0x30>
			res = FR_INT_ERR;
  40252c:	2702      	movs	r7, #2
		fs->wflag = 1;
  40252e:	2301      	movs	r3, #1
  402530:	7133      	strb	r3, [r6, #4]
  402532:	e07c      	b.n	40262e <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  402534:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402538:	6a01      	ldr	r1, [r0, #32]
  40253a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  40253e:	4b3d      	ldr	r3, [pc, #244]	; (402634 <put_fat+0x130>)
  402540:	4798      	blx	r3
			if (res != FR_OK) break;
  402542:	4607      	mov	r7, r0
  402544:	2800      	cmp	r0, #0
  402546:	d1f2      	bne.n	40252e <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  402548:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  40254c:	f014 0f01 	tst.w	r4, #1
  402550:	d01c      	beq.n	40258c <put_fat+0x88>
  402552:	4433      	add	r3, r6
  402554:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  402558:	f002 020f 	and.w	r2, r2, #15
  40255c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  402560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  402564:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402568:	2301      	movs	r3, #1
  40256a:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40256c:	6a31      	ldr	r1, [r6, #32]
  40256e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402572:	4630      	mov	r0, r6
  402574:	4b2f      	ldr	r3, [pc, #188]	; (402634 <put_fat+0x130>)
  402576:	4798      	blx	r3
			if (res != FR_OK) break;
  402578:	2800      	cmp	r0, #0
  40257a:	d153      	bne.n	402624 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  40257c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402580:	f3c5 1207 	ubfx	r2, r5, #4, #8
  402584:	44b0      	add	r8, r6
  402586:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  40258a:	e7d0      	b.n	40252e <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  40258c:	4433      	add	r3, r6
  40258e:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  402592:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  402596:	2301      	movs	r3, #1
  402598:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40259a:	6a31      	ldr	r1, [r6, #32]
  40259c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4025a0:	4630      	mov	r0, r6
  4025a2:	4b24      	ldr	r3, [pc, #144]	; (402634 <put_fat+0x130>)
  4025a4:	4798      	blx	r3
			if (res != FR_OK) break;
  4025a6:	2800      	cmp	r0, #0
  4025a8:	d13e      	bne.n	402628 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  4025aa:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4025ae:	eb06 0308 	add.w	r3, r6, r8
  4025b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  4025b6:	f023 030f 	bic.w	r3, r3, #15
  4025ba:	f3c5 2203 	ubfx	r2, r5, #8, #4
  4025be:	431a      	orrs	r2, r3
  4025c0:	e7e0      	b.n	402584 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  4025c2:	6a01      	ldr	r1, [r0, #32]
  4025c4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  4025c8:	4b1a      	ldr	r3, [pc, #104]	; (402634 <put_fat+0x130>)
  4025ca:	4798      	blx	r3
			if (res != FR_OK) break;
  4025cc:	4607      	mov	r7, r0
  4025ce:	2800      	cmp	r0, #0
  4025d0:	d1ad      	bne.n	40252e <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  4025d2:	0063      	lsls	r3, r4, #1
  4025d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  4025d8:	4433      	add	r3, r6
  4025da:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  4025de:	f3c5 2207 	ubfx	r2, r5, #8, #8
  4025e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  4025e6:	e7a2      	b.n	40252e <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  4025e8:	6a01      	ldr	r1, [r0, #32]
  4025ea:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  4025ee:	4b11      	ldr	r3, [pc, #68]	; (402634 <put_fat+0x130>)
  4025f0:	4798      	blx	r3
			if (res != FR_OK) break;
  4025f2:	4607      	mov	r7, r0
  4025f4:	2800      	cmp	r0, #0
  4025f6:	d19a      	bne.n	40252e <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  4025f8:	00a1      	lsls	r1, r4, #2
  4025fa:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  4025fe:	f101 0330 	add.w	r3, r1, #48	; 0x30
  402602:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  402604:	78da      	ldrb	r2, [r3, #3]
  402606:	0612      	lsls	r2, r2, #24
  402608:	4431      	add	r1, r6
  40260a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  40260e:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  402610:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  402614:	f3c2 2107 	ubfx	r1, r2, #8, #8
  402618:	7059      	strb	r1, [r3, #1]
  40261a:	0c11      	lsrs	r1, r2, #16
  40261c:	7099      	strb	r1, [r3, #2]
  40261e:	0e12      	lsrs	r2, r2, #24
  402620:	70da      	strb	r2, [r3, #3]
			break;
  402622:	e784      	b.n	40252e <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402624:	4607      	mov	r7, r0
  402626:	e782      	b.n	40252e <put_fat+0x2a>
  402628:	4607      	mov	r7, r0
  40262a:	e780      	b.n	40252e <put_fat+0x2a>
		res = FR_INT_ERR;
  40262c:	2702      	movs	r7, #2
}
  40262e:	4638      	mov	r0, r7
  402630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402634:	004022e9 	.word	0x004022e9

00402638 <create_chain>:
{
  402638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40263c:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  40263e:	4688      	mov	r8, r1
  402640:	b941      	cbnz	r1, 402654 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  402642:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402644:	b186      	cbz	r6, 402668 <create_chain+0x30>
  402646:	6983      	ldr	r3, [r0, #24]
  402648:	429e      	cmp	r6, r3
  40264a:	bf28      	it	cs
  40264c:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  40264e:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  402650:	4f27      	ldr	r7, [pc, #156]	; (4026f0 <create_chain+0xb8>)
  402652:	e017      	b.n	402684 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  402654:	4b26      	ldr	r3, [pc, #152]	; (4026f0 <create_chain+0xb8>)
  402656:	4798      	blx	r3
  402658:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40265a:	2801      	cmp	r0, #1
  40265c:	d93e      	bls.n	4026dc <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  40265e:	69aa      	ldr	r2, [r5, #24]
  402660:	4290      	cmp	r0, r2
  402662:	d340      	bcc.n	4026e6 <create_chain+0xae>
		scl = clst;
  402664:	4646      	mov	r6, r8
  402666:	e7f2      	b.n	40264e <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  402668:	2601      	movs	r6, #1
  40266a:	e7f0      	b.n	40264e <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  40266c:	4621      	mov	r1, r4
  40266e:	4628      	mov	r0, r5
  402670:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  402672:	4603      	mov	r3, r0
  402674:	b170      	cbz	r0, 402694 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  402676:	f1b0 3fff 	cmp.w	r0, #4294967295
  40267a:	d034      	beq.n	4026e6 <create_chain+0xae>
  40267c:	2801      	cmp	r0, #1
  40267e:	d032      	beq.n	4026e6 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  402680:	42b4      	cmp	r4, r6
  402682:	d02f      	beq.n	4026e4 <create_chain+0xac>
		ncl++;							/* Next cluster */
  402684:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  402686:	69ab      	ldr	r3, [r5, #24]
  402688:	429c      	cmp	r4, r3
  40268a:	d3ef      	bcc.n	40266c <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  40268c:	2e01      	cmp	r6, #1
  40268e:	d927      	bls.n	4026e0 <create_chain+0xa8>
			ncl = 2;
  402690:	2402      	movs	r4, #2
  402692:	e7eb      	b.n	40266c <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  402694:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  402698:	4621      	mov	r1, r4
  40269a:	4628      	mov	r0, r5
  40269c:	4b15      	ldr	r3, [pc, #84]	; (4026f4 <create_chain+0xbc>)
  40269e:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  4026a0:	4603      	mov	r3, r0
  4026a2:	b9a8      	cbnz	r0, 4026d0 <create_chain+0x98>
  4026a4:	f1b8 0f00 	cmp.w	r8, #0
  4026a8:	d10a      	bne.n	4026c0 <create_chain+0x88>
		fs->last_clust = ncl;			/* Update FSINFO */
  4026aa:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  4026ac:	692b      	ldr	r3, [r5, #16]
  4026ae:	f1b3 3fff 	cmp.w	r3, #4294967295
  4026b2:	d01b      	beq.n	4026ec <create_chain+0xb4>
			fs->free_clust--;
  4026b4:	3b01      	subs	r3, #1
  4026b6:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  4026b8:	2301      	movs	r3, #1
  4026ba:	716b      	strb	r3, [r5, #5]
  4026bc:	4623      	mov	r3, r4
  4026be:	e012      	b.n	4026e6 <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  4026c0:	4622      	mov	r2, r4
  4026c2:	4641      	mov	r1, r8
  4026c4:	4628      	mov	r0, r5
  4026c6:	4b0b      	ldr	r3, [pc, #44]	; (4026f4 <create_chain+0xbc>)
  4026c8:	4798      	blx	r3
	if (res == FR_OK) {
  4026ca:	4603      	mov	r3, r0
  4026cc:	2800      	cmp	r0, #0
  4026ce:	d0ec      	beq.n	4026aa <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  4026d0:	2b01      	cmp	r3, #1
  4026d2:	bf0c      	ite	eq
  4026d4:	f04f 33ff 	moveq.w	r3, #4294967295
  4026d8:	2301      	movne	r3, #1
  4026da:	e004      	b.n	4026e6 <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4026dc:	2301      	movs	r3, #1
  4026de:	e002      	b.n	4026e6 <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  4026e0:	2300      	movs	r3, #0
  4026e2:	e000      	b.n	4026e6 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4026e4:	2300      	movs	r3, #0
}
  4026e6:	4618      	mov	r0, r3
  4026e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4026ec:	4623      	mov	r3, r4
  4026ee:	e7fa      	b.n	4026e6 <create_chain+0xae>
  4026f0:	00402379 	.word	0x00402379
  4026f4:	00402505 	.word	0x00402505

004026f8 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  4026f8:	2901      	cmp	r1, #1
  4026fa:	d92e      	bls.n	40275a <remove_chain+0x62>
{
  4026fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402700:	4604      	mov	r4, r0
  402702:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402704:	6983      	ldr	r3, [r0, #24]
  402706:	4299      	cmp	r1, r3
  402708:	d303      	bcc.n	402712 <remove_chain+0x1a>
		res = FR_INT_ERR;
  40270a:	2202      	movs	r2, #2
}
  40270c:	4610      	mov	r0, r2
  40270e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402712:	4f16      	ldr	r7, [pc, #88]	; (40276c <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  402714:	f04f 0900 	mov.w	r9, #0
  402718:	f8df 8054 	ldr.w	r8, [pc, #84]	; 402770 <remove_chain+0x78>
  40271c:	e003      	b.n	402726 <remove_chain+0x2e>
  40271e:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  402720:	69a3      	ldr	r3, [r4, #24]
  402722:	42ab      	cmp	r3, r5
  402724:	d9f2      	bls.n	40270c <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402726:	4631      	mov	r1, r6
  402728:	4620      	mov	r0, r4
  40272a:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  40272c:	4605      	mov	r5, r0
  40272e:	b1b8      	cbz	r0, 402760 <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402730:	2801      	cmp	r0, #1
  402732:	d017      	beq.n	402764 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402734:	f1b0 3fff 	cmp.w	r0, #4294967295
  402738:	d016      	beq.n	402768 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40273a:	464a      	mov	r2, r9
  40273c:	4631      	mov	r1, r6
  40273e:	4620      	mov	r0, r4
  402740:	47c0      	blx	r8
			if (res != FR_OK) break;
  402742:	4602      	mov	r2, r0
  402744:	2800      	cmp	r0, #0
  402746:	d1e1      	bne.n	40270c <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  402748:	6923      	ldr	r3, [r4, #16]
  40274a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40274e:	d0e6      	beq.n	40271e <remove_chain+0x26>
				fs->free_clust++;
  402750:	3301      	adds	r3, #1
  402752:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  402754:	2301      	movs	r3, #1
  402756:	7163      	strb	r3, [r4, #5]
  402758:	e7e1      	b.n	40271e <remove_chain+0x26>
		res = FR_INT_ERR;
  40275a:	2202      	movs	r2, #2
}
  40275c:	4610      	mov	r0, r2
  40275e:	4770      	bx	lr
  402760:	2200      	movs	r2, #0
  402762:	e7d3      	b.n	40270c <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402764:	2202      	movs	r2, #2
  402766:	e7d1      	b.n	40270c <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402768:	2201      	movs	r2, #1
  40276a:	e7cf      	b.n	40270c <remove_chain+0x14>
  40276c:	00402379 	.word	0x00402379
  402770:	00402505 	.word	0x00402505

00402774 <sync>:
{
  402774:	b538      	push	{r3, r4, r5, lr}
  402776:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  402778:	2100      	movs	r1, #0
  40277a:	4b2e      	ldr	r3, [pc, #184]	; (402834 <sync+0xc0>)
  40277c:	4798      	blx	r3
	if (res == FR_OK) {
  40277e:	4603      	mov	r3, r0
  402780:	b950      	cbnz	r0, 402798 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  402782:	7823      	ldrb	r3, [r4, #0]
  402784:	2b03      	cmp	r3, #3
  402786:	d009      	beq.n	40279c <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  402788:	2200      	movs	r2, #0
  40278a:	4611      	mov	r1, r2
  40278c:	7860      	ldrb	r0, [r4, #1]
  40278e:	4b2a      	ldr	r3, [pc, #168]	; (402838 <sync+0xc4>)
  402790:	4798      	blx	r3
	res = move_window(fs, 0);
  402792:	1c03      	adds	r3, r0, #0
  402794:	bf18      	it	ne
  402796:	2301      	movne	r3, #1
}
  402798:	4618      	mov	r0, r3
  40279a:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  40279c:	7963      	ldrb	r3, [r4, #5]
  40279e:	2b00      	cmp	r3, #0
  4027a0:	d0f2      	beq.n	402788 <sync+0x14>
			fs->winsect = 0;
  4027a2:	2300      	movs	r3, #0
  4027a4:	62e3      	str	r3, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  4027a6:	f104 0130 	add.w	r1, r4, #48	; 0x30
  4027aa:	f504 700c 	add.w	r0, r4, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  4027ae:	460b      	mov	r3, r1
		*d++ = (BYTE)val;
  4027b0:	2200      	movs	r2, #0
  4027b2:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  4027b6:	4283      	cmp	r3, r0
  4027b8:	d1fb      	bne.n	4027b2 <sync+0x3e>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  4027ba:	2355      	movs	r3, #85	; 0x55
  4027bc:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  4027c0:	23aa      	movs	r3, #170	; 0xaa
  4027c2:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  4027c6:	2352      	movs	r3, #82	; 0x52
  4027c8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  4027cc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  4027d0:	2361      	movs	r3, #97	; 0x61
  4027d2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  4027d6:	2241      	movs	r2, #65	; 0x41
  4027d8:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  4027dc:	2072      	movs	r0, #114	; 0x72
  4027de:	f884 0214 	strb.w	r0, [r4, #532]	; 0x214
  4027e2:	f884 0215 	strb.w	r0, [r4, #533]	; 0x215
  4027e6:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  4027ea:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  4027ee:	6923      	ldr	r3, [r4, #16]
  4027f0:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  4027f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
  4027f8:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  4027fc:	0c1a      	lsrs	r2, r3, #16
  4027fe:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  402802:	0e1b      	lsrs	r3, r3, #24
  402804:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  402808:	68e3      	ldr	r3, [r4, #12]
  40280a:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  40280e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  402812:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  402816:	0c1a      	lsrs	r2, r3, #16
  402818:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  40281c:	0e1b      	lsrs	r3, r3, #24
  40281e:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  402822:	2301      	movs	r3, #1
  402824:	6962      	ldr	r2, [r4, #20]
  402826:	7860      	ldrb	r0, [r4, #1]
  402828:	4d04      	ldr	r5, [pc, #16]	; (40283c <sync+0xc8>)
  40282a:	47a8      	blx	r5
			fs->fsi_flag = 0;
  40282c:	2300      	movs	r3, #0
  40282e:	7163      	strb	r3, [r4, #5]
  402830:	e7aa      	b.n	402788 <sync+0x14>
  402832:	bf00      	nop
  402834:	004022e9 	.word	0x004022e9
  402838:	00401db1 	.word	0x00401db1
  40283c:	00401d41 	.word	0x00401d41

00402840 <dir_next>:
{
  402840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  402844:	88c4      	ldrh	r4, [r0, #6]
  402846:	3401      	adds	r4, #1
  402848:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  40284a:	b914      	cbnz	r4, 402852 <dir_next+0x12>
		return FR_NO_FILE;
  40284c:	2004      	movs	r0, #4
  40284e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  402852:	6903      	ldr	r3, [r0, #16]
  402854:	b913      	cbnz	r3, 40285c <dir_next+0x1c>
		return FR_NO_FILE;
  402856:	2004      	movs	r0, #4
  402858:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40285c:	460e      	mov	r6, r1
  40285e:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  402860:	f014 070f 	ands.w	r7, r4, #15
  402864:	d110      	bne.n	402888 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  402866:	3301      	adds	r3, #1
  402868:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  40286a:	68c1      	ldr	r1, [r0, #12]
  40286c:	b931      	cbnz	r1, 40287c <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  40286e:	6803      	ldr	r3, [r0, #0]
  402870:	891b      	ldrh	r3, [r3, #8]
  402872:	42a3      	cmp	r3, r4
  402874:	d808      	bhi.n	402888 <dir_next+0x48>
				return FR_NO_FILE;
  402876:	2004      	movs	r0, #4
  402878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  40287c:	6800      	ldr	r0, [r0, #0]
  40287e:	7883      	ldrb	r3, [r0, #2]
  402880:	3b01      	subs	r3, #1
  402882:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  402886:	d008      	beq.n	40289a <dir_next+0x5a>
	dj->index = i;
  402888:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  40288a:	682b      	ldr	r3, [r5, #0]
  40288c:	3330      	adds	r3, #48	; 0x30
  40288e:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  402892:	616b      	str	r3, [r5, #20]
	return FR_OK;
  402894:	2000      	movs	r0, #0
  402896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  40289a:	4b33      	ldr	r3, [pc, #204]	; (402968 <dir_next+0x128>)
  40289c:	4798      	blx	r3
  40289e:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  4028a0:	2801      	cmp	r0, #1
  4028a2:	d94f      	bls.n	402944 <dir_next+0x104>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4028a4:	f1b0 3fff 	cmp.w	r0, #4294967295
  4028a8:	d04f      	beq.n	40294a <dir_next+0x10a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  4028aa:	6828      	ldr	r0, [r5, #0]
  4028ac:	6983      	ldr	r3, [r0, #24]
  4028ae:	4598      	cmp	r8, r3
  4028b0:	d340      	bcc.n	402934 <dir_next+0xf4>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  4028b2:	b916      	cbnz	r6, 4028ba <dir_next+0x7a>
  4028b4:	2004      	movs	r0, #4
  4028b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  4028ba:	68e9      	ldr	r1, [r5, #12]
  4028bc:	4b2b      	ldr	r3, [pc, #172]	; (40296c <dir_next+0x12c>)
  4028be:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  4028c0:	4680      	mov	r8, r0
  4028c2:	b910      	cbnz	r0, 4028ca <dir_next+0x8a>
  4028c4:	2007      	movs	r0, #7
  4028c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4028ca:	2801      	cmp	r0, #1
  4028cc:	d040      	beq.n	402950 <dir_next+0x110>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4028ce:	f1b0 3fff 	cmp.w	r0, #4294967295
  4028d2:	d040      	beq.n	402956 <dir_next+0x116>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4028d4:	2100      	movs	r1, #0
  4028d6:	6828      	ldr	r0, [r5, #0]
  4028d8:	4b25      	ldr	r3, [pc, #148]	; (402970 <dir_next+0x130>)
  4028da:	4798      	blx	r3
  4028dc:	2800      	cmp	r0, #0
  4028de:	d13d      	bne.n	40295c <dir_next+0x11c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  4028e0:	682b      	ldr	r3, [r5, #0]
  4028e2:	f503 710c 	add.w	r1, r3, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  4028e6:	3330      	adds	r3, #48	; 0x30
		*d++ = (BYTE)val;
  4028e8:	2200      	movs	r2, #0
  4028ea:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  4028ee:	428b      	cmp	r3, r1
  4028f0:	d1fb      	bne.n	4028ea <dir_next+0xaa>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  4028f2:	682e      	ldr	r6, [r5, #0]
  4028f4:	4641      	mov	r1, r8
  4028f6:	4630      	mov	r0, r6
  4028f8:	4b1e      	ldr	r3, [pc, #120]	; (402974 <dir_next+0x134>)
  4028fa:	4798      	blx	r3
  4028fc:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  4028fe:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  402900:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402904:	46b2      	mov	sl, r6
  402906:	f8df 9068 	ldr.w	r9, [pc, #104]	; 402970 <dir_next+0x130>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40290a:	682b      	ldr	r3, [r5, #0]
  40290c:	7899      	ldrb	r1, [r3, #2]
  40290e:	b2f2      	uxtb	r2, r6
  402910:	4291      	cmp	r1, r2
  402912:	d90b      	bls.n	40292c <dir_next+0xec>
						dj->fs->wflag = 1;
  402914:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402918:	4651      	mov	r1, sl
  40291a:	6828      	ldr	r0, [r5, #0]
  40291c:	47c8      	blx	r9
  40291e:	3601      	adds	r6, #1
  402920:	b9f8      	cbnz	r0, 402962 <dir_next+0x122>
						dj->fs->winsect++;
  402922:	682a      	ldr	r2, [r5, #0]
  402924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402926:	3301      	adds	r3, #1
  402928:	62d3      	str	r3, [r2, #44]	; 0x2c
  40292a:	e7ee      	b.n	40290a <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
  40292c:	4616      	mov	r6, r2
  40292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402930:	1b96      	subs	r6, r2, r6
  402932:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  402934:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  402938:	4641      	mov	r1, r8
  40293a:	6828      	ldr	r0, [r5, #0]
  40293c:	4b0d      	ldr	r3, [pc, #52]	; (402974 <dir_next+0x134>)
  40293e:	4798      	blx	r3
  402940:	6128      	str	r0, [r5, #16]
  402942:	e7a1      	b.n	402888 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  402944:	2002      	movs	r0, #2
  402946:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40294a:	2001      	movs	r0, #1
  40294c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  402950:	2002      	movs	r0, #2
  402952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402956:	2001      	movs	r0, #1
  402958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  40295c:	2001      	movs	r0, #1
  40295e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402962:	2001      	movs	r0, #1
}
  402964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402968:	00402379 	.word	0x00402379
  40296c:	00402639 	.word	0x00402639
  402970:	004022e9 	.word	0x004022e9
  402974:	00401e8d 	.word	0x00401e8d

00402978 <dir_find>:
{
  402978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40297c:	b085      	sub	sp, #20
  40297e:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  402980:	2100      	movs	r1, #0
  402982:	4b62      	ldr	r3, [pc, #392]	; (402b0c <dir_find+0x194>)
  402984:	4798      	blx	r3
	if (res != FR_OK) return res;
  402986:	4680      	mov	r8, r0
  402988:	bb08      	cbnz	r0, 4029ce <dir_find+0x56>
  40298a:	f04f 0bff 	mov.w	fp, #255	; 0xff
  40298e:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  402990:	4f5f      	ldr	r7, [pc, #380]	; (402b10 <dir_find+0x198>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402992:	46da      	mov	sl, fp
  402994:	e095      	b.n	402ac2 <dir_find+0x14a>
			if (a == AM_LFN) {			/* An LFN entry is found */
  402996:	2a0f      	cmp	r2, #15
  402998:	d01d      	beq.n	4029d6 <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  40299a:	f1b9 0f00 	cmp.w	r9, #0
  40299e:	d104      	bne.n	4029aa <dir_find+0x32>
  4029a0:	4620      	mov	r0, r4
  4029a2:	4b5c      	ldr	r3, [pc, #368]	; (402b14 <dir_find+0x19c>)
  4029a4:	4798      	blx	r3
  4029a6:	4582      	cmp	sl, r0
  4029a8:	d011      	beq.n	4029ce <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4029aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4029ae:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  4029b0:	69ab      	ldr	r3, [r5, #24]
  4029b2:	7ada      	ldrb	r2, [r3, #11]
  4029b4:	f012 0f01 	tst.w	r2, #1
  4029b8:	d17a      	bne.n	402ab0 <dir_find+0x138>
  4029ba:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  4029be:	f814 1b01 	ldrb.w	r1, [r4], #1
  4029c2:	f813 2b01 	ldrb.w	r2, [r3], #1
  4029c6:	4291      	cmp	r1, r2
  4029c8:	d16c      	bne.n	402aa4 <dir_find+0x12c>
  4029ca:	42a0      	cmp	r0, r4
  4029cc:	d1f7      	bne.n	4029be <dir_find+0x46>
}
  4029ce:	4640      	mov	r0, r8
  4029d0:	b005      	add	sp, #20
  4029d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  4029d6:	f8d5 801c 	ldr.w	r8, [r5, #28]
  4029da:	f1b8 0f00 	cmp.w	r8, #0
  4029de:	d069      	beq.n	402ab4 <dir_find+0x13c>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  4029e0:	f016 0f40 	tst.w	r6, #64	; 0x40
  4029e4:	d00c      	beq.n	402a00 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  4029e6:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  4029ea:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  4029ee:	88eb      	ldrh	r3, [r5, #6]
  4029f0:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4029f2:	f894 b00d 	ldrb.w	fp, [r4, #13]
  4029f6:	45d3      	cmp	fp, sl
  4029f8:	d008      	beq.n	402a0c <dir_find+0x94>
  4029fa:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4029fe:	e059      	b.n	402ab4 <dir_find+0x13c>
  402a00:	45b1      	cmp	r9, r6
  402a02:	bf18      	it	ne
  402a04:	f04f 09ff 	movne.w	r9, #255	; 0xff
  402a08:	d154      	bne.n	402ab4 <dir_find+0x13c>
  402a0a:	e7f2      	b.n	4029f2 <dir_find+0x7a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  402a0c:	f894 a000 	ldrb.w	sl, [r4]
  402a10:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  402a14:	f10a 3aff 	add.w	sl, sl, #4294967295
  402a18:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  402a1c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  402a20:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 402b20 <dir_find+0x1a8>
  402a24:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  402a28:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  402a2a:	9603      	str	r6, [sp, #12]
  402a2c:	f8cd b004 	str.w	fp, [sp, #4]
  402a30:	461e      	mov	r6, r3
  402a32:	9502      	str	r5, [sp, #8]
  402a34:	e00f      	b.n	402a56 <dir_find+0xde>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402a36:	4618      	mov	r0, r3
  402a38:	4b37      	ldr	r3, [pc, #220]	; (402b18 <dir_find+0x1a0>)
  402a3a:	4798      	blx	r3
  402a3c:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  402a3e:	2efe      	cmp	r6, #254	; 0xfe
  402a40:	d85b      	bhi.n	402afa <dir_find+0x182>
  402a42:	1c75      	adds	r5, r6, #1
  402a44:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  402a48:	4b33      	ldr	r3, [pc, #204]	; (402b18 <dir_find+0x1a0>)
  402a4a:	4798      	blx	r3
  402a4c:	4583      	cmp	fp, r0
  402a4e:	d158      	bne.n	402b02 <dir_find+0x18a>
  402a50:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  402a52:	45d1      	cmp	r9, sl
  402a54:	d013      	beq.n	402a7e <dir_find+0x106>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  402a56:	f819 2b01 	ldrb.w	r2, [r9], #1
  402a5a:	18a3      	adds	r3, r4, r2
  402a5c:	7859      	ldrb	r1, [r3, #1]
  402a5e:	5ca3      	ldrb	r3, [r4, r2]
  402a60:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  402a64:	2800      	cmp	r0, #0
  402a66:	d1e6      	bne.n	402a36 <dir_find+0xbe>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  402a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402a6c:	4293      	cmp	r3, r2
  402a6e:	d0f0      	beq.n	402a52 <dir_find+0xda>
  402a70:	f8dd b004 	ldr.w	fp, [sp, #4]
  402a74:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402a76:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402a78:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402a7c:	e01a      	b.n	402ab4 <dir_find+0x13c>
  402a7e:	f8dd b004 	ldr.w	fp, [sp, #4]
  402a82:	4632      	mov	r2, r6
  402a84:	9e03      	ldr	r6, [sp, #12]
  402a86:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  402a88:	7823      	ldrb	r3, [r4, #0]
  402a8a:	f013 0f40 	tst.w	r3, #64	; 0x40
  402a8e:	d004      	beq.n	402a9a <dir_find+0x122>
  402a90:	b118      	cbz	r0, 402a9a <dir_find+0x122>
  402a92:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  402a96:	2b00      	cmp	r3, #0
  402a98:	d1ed      	bne.n	402a76 <dir_find+0xfe>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402a9a:	3e01      	subs	r6, #1
  402a9c:	fa5f f986 	uxtb.w	r9, r6
  402aa0:	46da      	mov	sl, fp
  402aa2:	e007      	b.n	402ab4 <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402aa4:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402aa8:	e004      	b.n	402ab4 <dir_find+0x13c>
			ord = 0xFF;
  402aaa:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402aae:	e001      	b.n	402ab4 <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402ab0:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  402ab4:	2100      	movs	r1, #0
  402ab6:	4628      	mov	r0, r5
  402ab8:	4b18      	ldr	r3, [pc, #96]	; (402b1c <dir_find+0x1a4>)
  402aba:	4798      	blx	r3
	} while (res == FR_OK);
  402abc:	4680      	mov	r8, r0
  402abe:	2800      	cmp	r0, #0
  402ac0:	d185      	bne.n	4029ce <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  402ac2:	6929      	ldr	r1, [r5, #16]
  402ac4:	6828      	ldr	r0, [r5, #0]
  402ac6:	47b8      	blx	r7
		if (res != FR_OK) break;
  402ac8:	4680      	mov	r8, r0
  402aca:	2800      	cmp	r0, #0
  402acc:	f47f af7f 	bne.w	4029ce <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  402ad0:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  402ad2:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402ad4:	b176      	cbz	r6, 402af4 <dir_find+0x17c>
		a = dir[DIR_Attr] & AM_MASK;
  402ad6:	7ae3      	ldrb	r3, [r4, #11]
  402ad8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  402adc:	2ee5      	cmp	r6, #229	; 0xe5
  402ade:	d0e4      	beq.n	402aaa <dir_find+0x132>
  402ae0:	f013 0f08 	tst.w	r3, #8
  402ae4:	f43f af57 	beq.w	402996 <dir_find+0x1e>
  402ae8:	2a0f      	cmp	r2, #15
  402aea:	f43f af74 	beq.w	4029d6 <dir_find+0x5e>
			ord = 0xFF;
  402aee:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402af2:	e7df      	b.n	402ab4 <dir_find+0x13c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402af4:	f04f 0804 	mov.w	r8, #4
  402af8:	e769      	b.n	4029ce <dir_find+0x56>
  402afa:	f8dd b004 	ldr.w	fp, [sp, #4]
  402afe:	9d02      	ldr	r5, [sp, #8]
  402b00:	e7b9      	b.n	402a76 <dir_find+0xfe>
  402b02:	f8dd b004 	ldr.w	fp, [sp, #4]
  402b06:	9d02      	ldr	r5, [sp, #8]
  402b08:	e7b5      	b.n	402a76 <dir_find+0xfe>
  402b0a:	bf00      	nop
  402b0c:	00402461 	.word	0x00402461
  402b10:	004022e9 	.word	0x004022e9
  402b14:	00401ea3 	.word	0x00401ea3
  402b18:	00403655 	.word	0x00403655
  402b1c:	00402841 	.word	0x00402841
  402b20:	004087a4 	.word	0x004087a4

00402b24 <follow_path>:
{
  402b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402b28:	b083      	sub	sp, #12
  402b2a:	4682      	mov	sl, r0
  402b2c:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  402b2e:	780b      	ldrb	r3, [r1, #0]
  402b30:	2b2f      	cmp	r3, #47	; 0x2f
  402b32:	d00c      	beq.n	402b4e <follow_path+0x2a>
  402b34:	2b5c      	cmp	r3, #92	; 0x5c
  402b36:	d00a      	beq.n	402b4e <follow_path+0x2a>
	dj->sclust = 0;						/* Start from the root dir */
  402b38:	2300      	movs	r3, #0
  402b3a:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  402b3e:	f898 3000 	ldrb.w	r3, [r8]
  402b42:	2b1f      	cmp	r3, #31
  402b44:	d906      	bls.n	402b54 <follow_path+0x30>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402b46:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 402e3c <follow_path+0x318>
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  402b4a:	4644      	mov	r4, r8
  402b4c:	e00c      	b.n	402b68 <follow_path+0x44>
		path++;
  402b4e:	f108 0801 	add.w	r8, r8, #1
  402b52:	e7f1      	b.n	402b38 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  402b54:	2100      	movs	r1, #0
  402b56:	4650      	mov	r0, sl
  402b58:	4bb3      	ldr	r3, [pc, #716]	; (402e28 <follow_path+0x304>)
  402b5a:	4798      	blx	r3
  402b5c:	4603      	mov	r3, r0
		dj->dir = 0;
  402b5e:	2200      	movs	r2, #0
  402b60:	f8ca 2014 	str.w	r2, [sl, #20]
  402b64:	e130      	b.n	402dc8 <follow_path+0x2a4>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  402b66:	461c      	mov	r4, r3
  402b68:	4627      	mov	r7, r4
  402b6a:	4623      	mov	r3, r4
  402b6c:	f813 0b01 	ldrb.w	r0, [r3], #1
  402b70:	282f      	cmp	r0, #47	; 0x2f
  402b72:	d0f8      	beq.n	402b66 <follow_path+0x42>
  402b74:	285c      	cmp	r0, #92	; 0x5c
  402b76:	bf08      	it	eq
  402b78:	461c      	moveq	r4, r3
  402b7a:	d0f5      	beq.n	402b68 <follow_path+0x44>
	lfn = dj->lfn;
  402b7c:	f8da b01c 	ldr.w	fp, [sl, #28]
		w = p[si++];					/* Get a character */
  402b80:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  402b82:	281f      	cmp	r0, #31
  402b84:	f240 812f 	bls.w	402de6 <follow_path+0x2c2>
  402b88:	282f      	cmp	r0, #47	; 0x2f
  402b8a:	f000 8131 	beq.w	402df0 <follow_path+0x2cc>
  402b8e:	285c      	cmp	r0, #92	; 0x5c
  402b90:	f000 8137 	beq.w	402e02 <follow_path+0x2de>
  402b94:	f1ab 0602 	sub.w	r6, fp, #2
  402b98:	2501      	movs	r5, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402b9a:	46a8      	mov	r8, r5
  402b9c:	e012      	b.n	402bc4 <follow_path+0xa0>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  402b9e:	bb73      	cbnz	r3, 402bfe <follow_path+0xda>
		lfn[di++] = w;					/* Store the Unicode char */
  402ba0:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
  402ba4:	1c6b      	adds	r3, r5, #1
  402ba6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  402baa:	281f      	cmp	r0, #31
  402bac:	f240 811d 	bls.w	402dea <follow_path+0x2c6>
  402bb0:	282f      	cmp	r0, #47	; 0x2f
  402bb2:	f000 811f 	beq.w	402df4 <follow_path+0x2d0>
  402bb6:	285c      	cmp	r0, #92	; 0x5c
  402bb8:	f000 811c 	beq.w	402df4 <follow_path+0x2d0>
		if (di >= _MAX_LFN)				/* Reject too long name */
  402bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402bc0:	d01d      	beq.n	402bfe <follow_path+0xda>
		w = p[si++];					/* Get a character */
  402bc2:	461d      	mov	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402bc4:	4641      	mov	r1, r8
  402bc6:	47c8      	blx	r9
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  402bc8:	4602      	mov	r2, r0
  402bca:	b1c0      	cbz	r0, 402bfe <follow_path+0xda>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  402bcc:	287f      	cmp	r0, #127	; 0x7f
  402bce:	d8e7      	bhi.n	402ba0 <follow_path+0x7c>
	while (*str && *str != chr) str++;
  402bd0:	2822      	cmp	r0, #34	; 0x22
  402bd2:	f000 80f8 	beq.w	402dc6 <follow_path+0x2a2>
  402bd6:	232a      	movs	r3, #42	; 0x2a
  402bd8:	4994      	ldr	r1, [pc, #592]	; (402e2c <follow_path+0x308>)
  402bda:	b298      	uxth	r0, r3
  402bdc:	4290      	cmp	r0, r2
  402bde:	d0de      	beq.n	402b9e <follow_path+0x7a>
  402be0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402be4:	2b00      	cmp	r3, #0
  402be6:	d1f8      	bne.n	402bda <follow_path+0xb6>
  402be8:	e7da      	b.n	402ba0 <follow_path+0x7c>
	while (di) {						/* Strip trailing spaces and dots */
  402bea:	3d01      	subs	r5, #1
  402bec:	f000 80eb 	beq.w	402dc6 <follow_path+0x2a2>
		w = lfn[di-1];
  402bf0:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  402bf4:	2b20      	cmp	r3, #32
  402bf6:	d0f8      	beq.n	402bea <follow_path+0xc6>
  402bf8:	2b2e      	cmp	r3, #46	; 0x2e
  402bfa:	d0f6      	beq.n	402bea <follow_path+0xc6>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  402bfc:	b90d      	cbnz	r5, 402c02 <follow_path+0xde>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402bfe:	2306      	movs	r3, #6
	return res;
  402c00:	e0e2      	b.n	402dc8 <follow_path+0x2a4>
	lfn[di] = 0;						/* LFN is created */
  402c02:	0068      	lsls	r0, r5, #1
  402c04:	2300      	movs	r3, #0
  402c06:	f82b 3015 	strh.w	r3, [fp, r5, lsl #1]
	mem_set(dj->fn, ' ', 11);
  402c0a:	f8da 3018 	ldr.w	r3, [sl, #24]
  402c0e:	f103 010b 	add.w	r1, r3, #11
		*d++ = (BYTE)val;
  402c12:	2220      	movs	r2, #32
  402c14:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  402c18:	428b      	cmp	r3, r1
  402c1a:	d1fb      	bne.n	402c14 <follow_path+0xf0>
  402c1c:	f1ab 0102 	sub.w	r1, fp, #2
  402c20:	2300      	movs	r3, #0
  402c22:	e000      	b.n	402c26 <follow_path+0x102>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  402c24:	3301      	adds	r3, #1
  402c26:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  402c2a:	2a20      	cmp	r2, #32
  402c2c:	d0fa      	beq.n	402c24 <follow_path+0x100>
  402c2e:	2a2e      	cmp	r2, #46	; 0x2e
  402c30:	d0f8      	beq.n	402c24 <follow_path+0x100>
	if (si) cf |= NS_LOSS | NS_LFN;
  402c32:	b10b      	cbz	r3, 402c38 <follow_path+0x114>
  402c34:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  402c38:	1e81      	subs	r1, r0, #2
  402c3a:	eb0b 0201 	add.w	r2, fp, r1
  402c3e:	f83b 1001 	ldrh.w	r1, [fp, r1]
  402c42:	292e      	cmp	r1, #46	; 0x2e
  402c44:	d005      	beq.n	402c52 <follow_path+0x12e>
  402c46:	3d01      	subs	r5, #1
  402c48:	d003      	beq.n	402c52 <follow_path+0x12e>
  402c4a:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  402c4e:	292e      	cmp	r1, #46	; 0x2e
  402c50:	d1f9      	bne.n	402c46 <follow_path+0x122>
		dj->fn[i++] = (BYTE)w;
  402c52:	2208      	movs	r2, #8
  402c54:	9200      	str	r2, [sp, #0]
  402c56:	f04f 0800 	mov.w	r8, #0
  402c5a:	f8cd 8004 	str.w	r8, [sp, #4]
  402c5e:	e005      	b.n	402c6c <follow_path+0x148>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  402c60:	42af      	cmp	r7, r5
  402c62:	f000 80d1 	beq.w	402e08 <follow_path+0x2e4>
			cf |= NS_LOSS | NS_LFN; continue;
  402c66:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  402c6a:	463b      	mov	r3, r7
  402c6c:	1c5f      	adds	r7, r3, #1
  402c6e:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  402c72:	b350      	cbz	r0, 402cca <follow_path+0x1a6>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  402c74:	2820      	cmp	r0, #32
  402c76:	d0f6      	beq.n	402c66 <follow_path+0x142>
  402c78:	282e      	cmp	r0, #46	; 0x2e
  402c7a:	d0f1      	beq.n	402c60 <follow_path+0x13c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  402c7c:	9b00      	ldr	r3, [sp, #0]
  402c7e:	4598      	cmp	r8, r3
  402c80:	d219      	bcs.n	402cb6 <follow_path+0x192>
  402c82:	42af      	cmp	r7, r5
  402c84:	f000 80c0 	beq.w	402e08 <follow_path+0x2e4>
		if (w >= 0x80) {				/* Non ASCII char */
  402c88:	287f      	cmp	r0, #127	; 0x7f
  402c8a:	d86c      	bhi.n	402d66 <follow_path+0x242>
	while (*str && *str != chr) str++;
  402c8c:	282b      	cmp	r0, #43	; 0x2b
  402c8e:	d079      	beq.n	402d84 <follow_path+0x260>
  402c90:	232c      	movs	r3, #44	; 0x2c
  402c92:	4a67      	ldr	r2, [pc, #412]	; (402e30 <follow_path+0x30c>)
  402c94:	b299      	uxth	r1, r3
  402c96:	4281      	cmp	r1, r0
  402c98:	d072      	beq.n	402d80 <follow_path+0x25c>
  402c9a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  402c9e:	2b00      	cmp	r3, #0
  402ca0:	d1f8      	bne.n	402c94 <follow_path+0x170>
				if (IsUpper(w)) {		/* ASCII large capital */
  402ca2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  402ca6:	b29b      	uxth	r3, r3
  402ca8:	2b19      	cmp	r3, #25
  402caa:	d876      	bhi.n	402d9a <follow_path+0x276>
					b |= 2;
  402cac:	9b01      	ldr	r3, [sp, #4]
  402cae:	f043 0302 	orr.w	r3, r3, #2
  402cb2:	9301      	str	r3, [sp, #4]
  402cb4:	e069      	b.n	402d8a <follow_path+0x266>
			if (ni == 11) {				/* Long extension */
  402cb6:	9b00      	ldr	r3, [sp, #0]
  402cb8:	2b0b      	cmp	r3, #11
  402cba:	d048      	beq.n	402d4e <follow_path+0x22a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  402cbc:	42af      	cmp	r7, r5
  402cbe:	f000 80a6 	beq.w	402e0e <follow_path+0x2ea>
  402cc2:	f046 0603 	orr.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  402cc6:	f240 80a2 	bls.w	402e0e <follow_path+0x2ea>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402cca:	f8da 3018 	ldr.w	r3, [sl, #24]
  402cce:	781a      	ldrb	r2, [r3, #0]
  402cd0:	2ae5      	cmp	r2, #229	; 0xe5
  402cd2:	d045      	beq.n	402d60 <follow_path+0x23c>
	if (ni == 8) b <<= 2;
  402cd4:	9b00      	ldr	r3, [sp, #0]
  402cd6:	2b08      	cmp	r3, #8
  402cd8:	d06b      	beq.n	402db2 <follow_path+0x28e>
  402cda:	9a01      	ldr	r2, [sp, #4]
  402cdc:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  402ce0:	2b0c      	cmp	r3, #12
  402ce2:	d06d      	beq.n	402dc0 <follow_path+0x29c>
  402ce4:	f002 0203 	and.w	r2, r2, #3
  402ce8:	2a03      	cmp	r2, #3
  402cea:	d069      	beq.n	402dc0 <follow_path+0x29c>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  402cec:	f016 0f02 	tst.w	r6, #2
  402cf0:	d10b      	bne.n	402d0a <follow_path+0x1e6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  402cf2:	9a01      	ldr	r2, [sp, #4]
  402cf4:	f002 0b03 	and.w	fp, r2, #3
  402cf8:	f1bb 0f01 	cmp.w	fp, #1
  402cfc:	bf08      	it	eq
  402cfe:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  402d02:	2b04      	cmp	r3, #4
  402d04:	bf08      	it	eq
  402d06:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  402d0a:	f8da 3018 	ldr.w	r3, [sl, #24]
  402d0e:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  402d10:	4650      	mov	r0, sl
  402d12:	4b48      	ldr	r3, [pc, #288]	; (402e34 <follow_path+0x310>)
  402d14:	4798      	blx	r3
			ns = *(dj->fn+NS);
  402d16:	f8da 3018 	ldr.w	r3, [sl, #24]
  402d1a:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  402d1c:	4603      	mov	r3, r0
  402d1e:	2800      	cmp	r0, #0
  402d20:	d156      	bne.n	402dd0 <follow_path+0x2ac>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  402d22:	f012 0f04 	tst.w	r2, #4
  402d26:	d14f      	bne.n	402dc8 <follow_path+0x2a4>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  402d28:	f8da 2014 	ldr.w	r2, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  402d2c:	7ad3      	ldrb	r3, [r2, #11]
  402d2e:	f013 0f10 	tst.w	r3, #16
  402d32:	d056      	beq.n	402de2 <follow_path+0x2be>
			dj->sclust = LD_CLUST(dir);
  402d34:	7d51      	ldrb	r1, [r2, #21]
  402d36:	7d13      	ldrb	r3, [r2, #20]
  402d38:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  402d3c:	7ed0      	ldrb	r0, [r2, #27]
  402d3e:	7e93      	ldrb	r3, [r2, #26]
  402d40:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  402d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  402d48:	f8ca 3008 	str.w	r3, [sl, #8]
			res = create_name(dj, &path);	/* Get a segment */
  402d4c:	e70c      	b.n	402b68 <follow_path+0x44>
				cf |= NS_LOSS | NS_LFN; break;
  402d4e:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402d52:	f8da 3018 	ldr.w	r3, [sl, #24]
  402d56:	781a      	ldrb	r2, [r3, #0]
  402d58:	2ae5      	cmp	r2, #229	; 0xe5
  402d5a:	d1be      	bne.n	402cda <follow_path+0x1b6>
  402d5c:	220b      	movs	r2, #11
  402d5e:	9200      	str	r2, [sp, #0]
  402d60:	2205      	movs	r2, #5
  402d62:	701a      	strb	r2, [r3, #0]
  402d64:	e7b6      	b.n	402cd4 <follow_path+0x1b0>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  402d66:	2100      	movs	r1, #0
  402d68:	47c8      	blx	r9
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  402d6a:	4603      	mov	r3, r0
  402d6c:	2800      	cmp	r0, #0
  402d6e:	d058      	beq.n	402e22 <follow_path+0x2fe>
  402d70:	4a31      	ldr	r2, [pc, #196]	; (402e38 <follow_path+0x314>)
  402d72:	4413      	add	r3, r2
  402d74:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  402d78:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  402d7c:	b110      	cbz	r0, 402d84 <follow_path+0x260>
  402d7e:	e785      	b.n	402c8c <follow_path+0x168>
  402d80:	2b00      	cmp	r3, #0
  402d82:	d08e      	beq.n	402ca2 <follow_path+0x17e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  402d84:	f046 0603 	orr.w	r6, r6, #3
  402d88:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  402d8a:	f8da 3018 	ldr.w	r3, [sl, #24]
  402d8e:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  402d92:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  402d94:	f108 0801 	add.w	r8, r8, #1
  402d98:	e768      	b.n	402c6c <follow_path+0x148>
					if (IsLower(w)) {	/* ASCII small capital */
  402d9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  402d9e:	b29b      	uxth	r3, r3
  402da0:	2b19      	cmp	r3, #25
  402da2:	d8f2      	bhi.n	402d8a <follow_path+0x266>
						b |= 1; w -= 0x20;
  402da4:	9b01      	ldr	r3, [sp, #4]
  402da6:	f043 0301 	orr.w	r3, r3, #1
  402daa:	9301      	str	r3, [sp, #4]
  402dac:	3820      	subs	r0, #32
  402dae:	b280      	uxth	r0, r0
  402db0:	e7eb      	b.n	402d8a <follow_path+0x266>
	if (ni == 8) b <<= 2;
  402db2:	9b01      	ldr	r3, [sp, #4]
  402db4:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  402db8:	fa5f f38b 	uxtb.w	r3, fp
  402dbc:	9301      	str	r3, [sp, #4]
  402dbe:	e78c      	b.n	402cda <follow_path+0x1b6>
		cf |= NS_LFN;
  402dc0:	f046 0602 	orr.w	r6, r6, #2
  402dc4:	e792      	b.n	402cec <follow_path+0x1c8>
  402dc6:	2306      	movs	r3, #6
}
  402dc8:	4618      	mov	r0, r3
  402dca:	b003      	add	sp, #12
  402dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  402dd0:	2804      	cmp	r0, #4
  402dd2:	d1f9      	bne.n	402dc8 <follow_path+0x2a4>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402dd4:	f002 0204 	and.w	r2, r2, #4
  402dd8:	2a00      	cmp	r2, #0
  402dda:	bf14      	ite	ne
  402ddc:	4603      	movne	r3, r0
  402dde:	2305      	moveq	r3, #5
  402de0:	e7f2      	b.n	402dc8 <follow_path+0x2a4>
				res = FR_NO_PATH; break;
  402de2:	2305      	movs	r3, #5
  402de4:	e7f0      	b.n	402dc8 <follow_path+0x2a4>
		w = p[si++];					/* Get a character */
  402de6:	2301      	movs	r3, #1
	si = di = 0;
  402de8:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  402dea:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402dec:	2604      	movs	r6, #4
  402dee:	e003      	b.n	402df8 <follow_path+0x2d4>
		w = p[si++];					/* Get a character */
  402df0:	2301      	movs	r3, #1
	si = di = 0;
  402df2:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  402df4:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402df6:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  402df8:	2d00      	cmp	r5, #0
  402dfa:	d0e4      	beq.n	402dc6 <follow_path+0x2a2>
  402dfc:	eb0b 0245 	add.w	r2, fp, r5, lsl #1
  402e00:	e6f6      	b.n	402bf0 <follow_path+0xcc>
		w = p[si++];					/* Get a character */
  402e02:	2301      	movs	r3, #1
	si = di = 0;
  402e04:	2500      	movs	r5, #0
  402e06:	e7f5      	b.n	402df4 <follow_path+0x2d0>
			if (ni == 11) {				/* Long extension */
  402e08:	9b00      	ldr	r3, [sp, #0]
  402e0a:	2b0b      	cmp	r3, #11
  402e0c:	d09f      	beq.n	402d4e <follow_path+0x22a>
			b <<= 2; continue;
  402e0e:	9b01      	ldr	r3, [sp, #4]
  402e10:	009b      	lsls	r3, r3, #2
  402e12:	b2db      	uxtb	r3, r3
  402e14:	9301      	str	r3, [sp, #4]
  402e16:	462b      	mov	r3, r5
			si = di; i = 8; ni = 11;	/* Enter extension section */
  402e18:	220b      	movs	r2, #11
  402e1a:	9200      	str	r2, [sp, #0]
  402e1c:	f04f 0808 	mov.w	r8, #8
  402e20:	e724      	b.n	402c6c <follow_path+0x148>
			cf |= NS_LFN;				/* Force create LFN entry */
  402e22:	f046 0602 	orr.w	r6, r6, #2
  402e26:	e7ad      	b.n	402d84 <follow_path+0x260>
  402e28:	00402461 	.word	0x00402461
  402e2c:	00408835 	.word	0x00408835
  402e30:	00408841 	.word	0x00408841
  402e34:	00402979 	.word	0x00402979
  402e38:	004087b4 	.word	0x004087b4
  402e3c:	00403615 	.word	0x00403615

00402e40 <dir_register>:
{
  402e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e44:	b089      	sub	sp, #36	; 0x24
  402e46:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  402e48:	6985      	ldr	r5, [r0, #24]
  402e4a:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  402e4e:	220c      	movs	r2, #12
  402e50:	4629      	mov	r1, r5
  402e52:	a805      	add	r0, sp, #20
  402e54:	4ba9      	ldr	r3, [pc, #676]	; (4030fc <dir_register+0x2bc>)
  402e56:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  402e58:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402e5c:	f013 0f01 	tst.w	r3, #1
  402e60:	d079      	beq.n	402f56 <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  402e62:	2300      	movs	r3, #0
  402e64:	72eb      	strb	r3, [r5, #11]
  402e66:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  402e68:	220b      	movs	r2, #11
  402e6a:	a905      	add	r1, sp, #20
  402e6c:	4628      	mov	r0, r5
  402e6e:	4ba3      	ldr	r3, [pc, #652]	; (4030fc <dir_register+0x2bc>)
  402e70:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  402e72:	2701      	movs	r7, #1
  402e74:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402e76:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402e7a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 403118 <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  402e7e:	f8df a27c 	ldr.w	sl, [pc, #636]	; 4030fc <dir_register+0x2bc>
  402e82:	e032      	b.n	402eea <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  402e84:	463b      	mov	r3, r7
  402e86:	e030      	b.n	402eea <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  402e88:	4613      	mov	r3, r2
  402e8a:	e002      	b.n	402e92 <dir_register+0x52>
  402e8c:	2300      	movs	r3, #0
  402e8e:	e000      	b.n	402e92 <dir_register+0x52>
  402e90:	4613      	mov	r3, r2
  402e92:	442b      	add	r3, r5
  402e94:	e005      	b.n	402ea2 <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402e96:	4641      	mov	r1, r8
  402e98:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  402e9c:	1b59      	subs	r1, r3, r5
  402e9e:	2907      	cmp	r1, #7
  402ea0:	d807      	bhi.n	402eb2 <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402ea2:	2a07      	cmp	r2, #7
  402ea4:	d8f7      	bhi.n	402e96 <dir_register+0x56>
  402ea6:	a908      	add	r1, sp, #32
  402ea8:	4411      	add	r1, r2
  402eaa:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  402eae:	3201      	adds	r2, #1
  402eb0:	e7f2      	b.n	402e98 <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402eb2:	4620      	mov	r0, r4
  402eb4:	47c8      	blx	r9
			if (res != FR_OK) break;
  402eb6:	4606      	mov	r6, r0
  402eb8:	2800      	cmp	r0, #0
  402eba:	d13e      	bne.n	402f3a <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  402ebc:	3701      	adds	r7, #1
  402ebe:	b2bf      	uxth	r7, r7
  402ec0:	2f64      	cmp	r7, #100	; 0x64
  402ec2:	d038      	beq.n	402f36 <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  402ec4:	220b      	movs	r2, #11
  402ec6:	a905      	add	r1, sp, #20
  402ec8:	4628      	mov	r0, r5
  402eca:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  402ecc:	2f05      	cmp	r7, #5
  402ece:	d9d9      	bls.n	402e84 <dir_register+0x44>
  402ed0:	463b      	mov	r3, r7
  402ed2:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  402ed4:	03da      	lsls	r2, r3, #15
  402ed6:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  402eda:	f831 2b02 	ldrh.w	r2, [r1], #2
  402ede:	fa12 f383 	uxtah	r3, r2, r3
  402ee2:	b29b      	uxth	r3, r3
  402ee4:	880a      	ldrh	r2, [r1, #0]
  402ee6:	2a00      	cmp	r2, #0
  402ee8:	d1f4      	bne.n	402ed4 <dir_register+0x94>
  402eea:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  402eee:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  402ef0:	f003 000f 	and.w	r0, r3, #15
  402ef4:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  402ef8:	2939      	cmp	r1, #57	; 0x39
  402efa:	bf88      	it	hi
  402efc:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  402f00:	3a01      	subs	r2, #1
  402f02:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  402f06:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  402f0a:	2b00      	cmp	r3, #0
  402f0c:	d1f0      	bne.n	402ef0 <dir_register+0xb0>
	ns[i] = '~';
  402f0e:	217e      	movs	r1, #126	; 0x7e
  402f10:	ab08      	add	r3, sp, #32
  402f12:	4413      	add	r3, r2
  402f14:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  402f18:	2a00      	cmp	r2, #0
  402f1a:	d0b5      	beq.n	402e88 <dir_register+0x48>
  402f1c:	782b      	ldrb	r3, [r5, #0]
  402f1e:	2b20      	cmp	r3, #32
  402f20:	d0b4      	beq.n	402e8c <dir_register+0x4c>
  402f22:	4629      	mov	r1, r5
  402f24:	2300      	movs	r3, #0
  402f26:	3301      	adds	r3, #1
  402f28:	429a      	cmp	r2, r3
  402f2a:	d0b1      	beq.n	402e90 <dir_register+0x50>
  402f2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  402f30:	2820      	cmp	r0, #32
  402f32:	d1f8      	bne.n	402f26 <dir_register+0xe6>
  402f34:	e7ad      	b.n	402e92 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  402f36:	2607      	movs	r6, #7
  402f38:	e004      	b.n	402f44 <dir_register+0x104>
  402f3a:	2f64      	cmp	r7, #100	; 0x64
  402f3c:	f000 809f 	beq.w	40307e <dir_register+0x23e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  402f40:	2804      	cmp	r0, #4
  402f42:	d003      	beq.n	402f4c <dir_register+0x10c>
}
  402f44:	4630      	mov	r0, r6
  402f46:	b009      	add	sp, #36	; 0x24
  402f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  402f4c:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402f50:	72eb      	strb	r3, [r5, #11]
  402f52:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  402f56:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402f5a:	f013 0f02 	tst.w	r3, #2
  402f5e:	d014      	beq.n	402f8a <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  402f60:	f8bb 3000 	ldrh.w	r3, [fp]
  402f64:	b17b      	cbz	r3, 402f86 <dir_register+0x146>
  402f66:	2300      	movs	r3, #0
  402f68:	3301      	adds	r3, #1
  402f6a:	b29b      	uxth	r3, r3
  402f6c:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  402f70:	2a00      	cmp	r2, #0
  402f72:	d1f9      	bne.n	402f68 <dir_register+0x128>
		ne = (ne + 25) / 13;
  402f74:	3319      	adds	r3, #25
  402f76:	4f62      	ldr	r7, [pc, #392]	; (403100 <dir_register+0x2c0>)
  402f78:	fb87 2703 	smull	r2, r7, r7, r3
  402f7c:	17db      	asrs	r3, r3, #31
  402f7e:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  402f82:	b2bf      	uxth	r7, r7
  402f84:	e002      	b.n	402f8c <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  402f86:	2300      	movs	r3, #0
  402f88:	e7f4      	b.n	402f74 <dir_register+0x134>
		ne = 1;
  402f8a:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  402f8c:	2100      	movs	r1, #0
  402f8e:	4620      	mov	r0, r4
  402f90:	4b5c      	ldr	r3, [pc, #368]	; (403104 <dir_register+0x2c4>)
  402f92:	4798      	blx	r3
	if (res != FR_OK) return res;
  402f94:	4606      	mov	r6, r0
  402f96:	2800      	cmp	r0, #0
  402f98:	d1d4      	bne.n	402f44 <dir_register+0x104>
  402f9a:	f04f 0a00 	mov.w	sl, #0
  402f9e:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  402fa0:	f8df 816c 	ldr.w	r8, [pc, #364]	; 403110 <dir_register+0x2d0>
			n = 0;					/* Not a blank entry. Restart to search */
  402fa4:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402fa6:	f8df 9164 	ldr.w	r9, [pc, #356]	; 40310c <dir_register+0x2cc>
  402faa:	e00a      	b.n	402fc2 <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  402fac:	1c6b      	adds	r3, r5, #1
  402fae:	b29b      	uxth	r3, r3
  402fb0:	429f      	cmp	r7, r3
  402fb2:	d066      	beq.n	403082 <dir_register+0x242>
  402fb4:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402fb6:	2101      	movs	r1, #1
  402fb8:	4620      	mov	r0, r4
  402fba:	47c8      	blx	r9
	} while (res == FR_OK);
  402fbc:	4606      	mov	r6, r0
  402fbe:	2800      	cmp	r0, #0
  402fc0:	d1c0      	bne.n	402f44 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  402fc2:	6921      	ldr	r1, [r4, #16]
  402fc4:	6820      	ldr	r0, [r4, #0]
  402fc6:	47c0      	blx	r8
		if (res != FR_OK) break;
  402fc8:	4606      	mov	r6, r0
  402fca:	2800      	cmp	r0, #0
  402fcc:	d1ba      	bne.n	402f44 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  402fce:	6963      	ldr	r3, [r4, #20]
  402fd0:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  402fd2:	2be5      	cmp	r3, #229	; 0xe5
  402fd4:	d000      	beq.n	402fd8 <dir_register+0x198>
  402fd6:	b923      	cbnz	r3, 402fe2 <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  402fd8:	2d00      	cmp	r5, #0
  402fda:	d1e7      	bne.n	402fac <dir_register+0x16c>
  402fdc:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  402fe0:	e7e4      	b.n	402fac <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  402fe2:	465d      	mov	r5, fp
  402fe4:	e7e7      	b.n	402fb6 <dir_register+0x176>
		res = dir_sdi(dj, is);
  402fe6:	4651      	mov	r1, sl
  402fe8:	4620      	mov	r0, r4
  402fea:	4b46      	ldr	r3, [pc, #280]	; (403104 <dir_register+0x2c4>)
  402fec:	4798      	blx	r3
		if (res == FR_OK) {
  402fee:	4606      	mov	r6, r0
  402ff0:	2800      	cmp	r0, #0
  402ff2:	d1a7      	bne.n	402f44 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  402ff4:	69a0      	ldr	r0, [r4, #24]
  402ff6:	4b44      	ldr	r3, [pc, #272]	; (403108 <dir_register+0x2c8>)
  402ff8:	4798      	blx	r3
  402ffa:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  402ffc:	2700      	movs	r7, #0
	s = wc = 0;
  402ffe:	9701      	str	r7, [sp, #4]
  403000:	e019      	b.n	403036 <dir_register+0x1f6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  403002:	4671      	mov	r1, lr
  403004:	e065      	b.n	4030d2 <dir_register+0x292>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  403006:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40300a:	4293      	cmp	r3, r2
  40300c:	d002      	beq.n	403014 <dir_register+0x1d4>
  40300e:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  403012:	b90b      	cbnz	r3, 403018 <dir_register+0x1d8>
  403014:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  403018:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  40301c:	6823      	ldr	r3, [r4, #0]
  40301e:	2201      	movs	r2, #1
  403020:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  403022:	4639      	mov	r1, r7
  403024:	4620      	mov	r0, r4
  403026:	4b39      	ldr	r3, [pc, #228]	; (40310c <dir_register+0x2cc>)
  403028:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  40302a:	4606      	mov	r6, r0
  40302c:	2800      	cmp	r0, #0
  40302e:	d189      	bne.n	402f44 <dir_register+0x104>
  403030:	3d01      	subs	r5, #1
  403032:	b2ad      	uxth	r5, r5
  403034:	b33d      	cbz	r5, 403086 <dir_register+0x246>
				res = move_window(dj->fs, dj->sect);
  403036:	6921      	ldr	r1, [r4, #16]
  403038:	6820      	ldr	r0, [r4, #0]
  40303a:	4b35      	ldr	r3, [pc, #212]	; (403110 <dir_register+0x2d0>)
  40303c:	4798      	blx	r3
				if (res != FR_OK) break;
  40303e:	4606      	mov	r6, r0
  403040:	2800      	cmp	r0, #0
  403042:	f47f af7f 	bne.w	402f44 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  403046:	f8d4 901c 	ldr.w	r9, [r4, #28]
  40304a:	6960      	ldr	r0, [r4, #20]
  40304c:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  403050:	f89d 3000 	ldrb.w	r3, [sp]
  403054:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  403056:	230f      	movs	r3, #15
  403058:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  40305a:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  40305c:	7687      	strb	r7, [r0, #26]
  40305e:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  403060:	f10b 31ff 	add.w	r1, fp, #4294967295
  403064:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  403068:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  40306c:	4a29      	ldr	r2, [pc, #164]	; (403114 <dir_register+0x2d4>)
  40306e:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  403072:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  403074:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  403078:	f04f 0aff 	mov.w	sl, #255	; 0xff
  40307c:	e02c      	b.n	4030d8 <dir_register+0x298>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40307e:	2607      	movs	r6, #7
  403080:	e760      	b.n	402f44 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  403082:	2b01      	cmp	r3, #1
  403084:	d8af      	bhi.n	402fe6 <dir_register+0x1a6>
		res = move_window(dj->fs, dj->sect);
  403086:	6921      	ldr	r1, [r4, #16]
  403088:	6820      	ldr	r0, [r4, #0]
  40308a:	4b21      	ldr	r3, [pc, #132]	; (403110 <dir_register+0x2d0>)
  40308c:	4798      	blx	r3
		if (res == FR_OK) {
  40308e:	4606      	mov	r6, r0
  403090:	2800      	cmp	r0, #0
  403092:	f47f af57 	bne.w	402f44 <dir_register+0x104>
			dir = dj->dir;
  403096:	6965      	ldr	r5, [r4, #20]
  403098:	f105 0120 	add.w	r1, r5, #32
	BYTE *d = (BYTE*)dst;
  40309c:	462b      	mov	r3, r5
		*d++ = (BYTE)val;
  40309e:	2200      	movs	r2, #0
  4030a0:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  4030a4:	4299      	cmp	r1, r3
  4030a6:	d1fb      	bne.n	4030a0 <dir_register+0x260>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  4030a8:	220b      	movs	r2, #11
  4030aa:	69a1      	ldr	r1, [r4, #24]
  4030ac:	4628      	mov	r0, r5
  4030ae:	4b13      	ldr	r3, [pc, #76]	; (4030fc <dir_register+0x2bc>)
  4030b0:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  4030b2:	69a3      	ldr	r3, [r4, #24]
  4030b4:	7adb      	ldrb	r3, [r3, #11]
  4030b6:	f003 0318 	and.w	r3, r3, #24
  4030ba:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  4030bc:	6823      	ldr	r3, [r4, #0]
  4030be:	2201      	movs	r2, #1
  4030c0:	711a      	strb	r2, [r3, #4]
  4030c2:	e73f      	b.n	402f44 <dir_register+0x104>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4030c4:	f892 e000 	ldrb.w	lr, [r2]
  4030c8:	f800 a00e 	strb.w	sl, [r0, lr]
  4030cc:	4486      	add	lr, r0
  4030ce:	f88e a001 	strb.w	sl, [lr, #1]
  4030d2:	3201      	adds	r2, #1
	} while (++s < 13);
  4030d4:	4590      	cmp	r8, r2
  4030d6:	d096      	beq.n	403006 <dir_register+0x1c6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4030d8:	42b3      	cmp	r3, r6
  4030da:	d0f3      	beq.n	4030c4 <dir_register+0x284>
  4030dc:	f101 0e01 	add.w	lr, r1, #1
  4030e0:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4030e4:	7811      	ldrb	r1, [r2, #0]
  4030e6:	5443      	strb	r3, [r0, r1]
  4030e8:	4401      	add	r1, r0
  4030ea:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  4030ee:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4030f2:	2b00      	cmp	r3, #0
  4030f4:	d185      	bne.n	403002 <dir_register+0x1c2>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4030f6:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4030f8:	4633      	mov	r3, r6
  4030fa:	e7ea      	b.n	4030d2 <dir_register+0x292>
  4030fc:	00401e79 	.word	0x00401e79
  403100:	4ec4ec4f 	.word	0x4ec4ec4f
  403104:	00402461 	.word	0x00402461
  403108:	00401ea3 	.word	0x00401ea3
  40310c:	00402841 	.word	0x00402841
  403110:	004022e9 	.word	0x004022e9
  403114:	004087a4 	.word	0x004087a4
  403118:	00402979 	.word	0x00402979

0040311c <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  40311c:	b108      	cbz	r0, 403122 <f_mount+0x6>
		return FR_INVALID_DRIVE;
  40311e:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  403120:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  403122:	4b06      	ldr	r3, [pc, #24]	; (40313c <f_mount+0x20>)
  403124:	681b      	ldr	r3, [r3, #0]
	if (rfs) {
  403126:	b10b      	cbz	r3, 40312c <f_mount+0x10>
		rfs->fs_type = 0;		/* Clear old fs object */
  403128:	2200      	movs	r2, #0
  40312a:	701a      	strb	r2, [r3, #0]
	if (fs) {
  40312c:	b109      	cbz	r1, 403132 <f_mount+0x16>
		fs->fs_type = 0;		/* Clear new fs object */
  40312e:	2300      	movs	r3, #0
  403130:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  403132:	4b02      	ldr	r3, [pc, #8]	; (40313c <f_mount+0x20>)
  403134:	6019      	str	r1, [r3, #0]
	return FR_OK;
  403136:	2000      	movs	r0, #0
  403138:	4770      	bx	lr
  40313a:	bf00      	nop
  40313c:	20000a10 	.word	0x20000a10

00403140 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  403140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403144:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  403148:	4605      	mov	r5, r0
  40314a:	9101      	str	r1, [sp, #4]
  40314c:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  40314e:	2300      	movs	r3, #0
  403150:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  403152:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  403156:	f002 021e 	and.w	r2, r2, #30
  40315a:	a985      	add	r1, sp, #532	; 0x214
  40315c:	a801      	add	r0, sp, #4
  40315e:	4b58      	ldr	r3, [pc, #352]	; (4032c0 <f_open+0x180>)
  403160:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  403162:	ab82      	add	r3, sp, #520	; 0x208
  403164:	938b      	str	r3, [sp, #556]	; 0x22c
  403166:	ab02      	add	r3, sp, #8
  403168:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  40316a:	b140      	cbz	r0, 40317e <f_open+0x3e>
  40316c:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  40316e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403170:	f016 0f1c 	tst.w	r6, #28
  403174:	d117      	bne.n	4031a6 <f_open+0x66>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  403176:	2b00      	cmp	r3, #0
  403178:	f040 8092 	bne.w	4032a0 <f_open+0x160>
  40317c:	e00d      	b.n	40319a <f_open+0x5a>
		res = follow_path(&dj, path);	/* Follow the file path */
  40317e:	9901      	ldr	r1, [sp, #4]
  403180:	a885      	add	r0, sp, #532	; 0x214
  403182:	4b50      	ldr	r3, [pc, #320]	; (4032c4 <f_open+0x184>)
  403184:	4798      	blx	r3
	dir = dj.dir;
  403186:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
  403188:	4603      	mov	r3, r0
  40318a:	2800      	cmp	r0, #0
  40318c:	d1f0      	bne.n	403170 <f_open+0x30>
		if (!dir)	/* Current dir itself */
  40318e:	2c00      	cmp	r4, #0
  403190:	f000 808b 	beq.w	4032aa <f_open+0x16a>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403194:	f016 0f1c 	tst.w	r6, #28
  403198:	d116      	bne.n	4031c8 <f_open+0x88>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  40319a:	7ae3      	ldrb	r3, [r4, #11]
  40319c:	f013 0f10 	tst.w	r3, #16
  4031a0:	d04f      	beq.n	403242 <f_open+0x102>
				res = FR_NO_FILE;
  4031a2:	2304      	movs	r3, #4
  4031a4:	e07c      	b.n	4032a0 <f_open+0x160>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  4031a6:	2b04      	cmp	r3, #4
  4031a8:	d005      	beq.n	4031b6 <f_open+0x76>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  4031aa:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  4031ae:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  4031b0:	2b00      	cmp	r3, #0
  4031b2:	d057      	beq.n	403264 <f_open+0x124>
  4031b4:	e074      	b.n	4032a0 <f_open+0x160>
				res = dir_register(&dj);
  4031b6:	a885      	add	r0, sp, #532	; 0x214
  4031b8:	4b43      	ldr	r3, [pc, #268]	; (4032c8 <f_open+0x188>)
  4031ba:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  4031bc:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  4031c0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  4031c2:	4603      	mov	r3, r0
  4031c4:	b138      	cbz	r0, 4031d6 <f_open+0x96>
  4031c6:	e06b      	b.n	4032a0 <f_open+0x160>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  4031c8:	7ae3      	ldrb	r3, [r4, #11]
  4031ca:	f013 0f11 	tst.w	r3, #17
  4031ce:	d173      	bne.n	4032b8 <f_open+0x178>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  4031d0:	f016 0f04 	tst.w	r6, #4
  4031d4:	d172      	bne.n	4032bc <f_open+0x17c>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  4031d6:	f017 0f08 	tst.w	r7, #8
  4031da:	d03f      	beq.n	40325c <f_open+0x11c>
			dw = get_fattime();					/* Created time */
  4031dc:	4b3b      	ldr	r3, [pc, #236]	; (4032cc <f_open+0x18c>)
  4031de:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  4031e0:	73a0      	strb	r0, [r4, #14]
  4031e2:	f3c0 2307 	ubfx	r3, r0, #8, #8
  4031e6:	73e3      	strb	r3, [r4, #15]
  4031e8:	0c03      	lsrs	r3, r0, #16
  4031ea:	7423      	strb	r3, [r4, #16]
  4031ec:	0e00      	lsrs	r0, r0, #24
  4031ee:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  4031f0:	2300      	movs	r3, #0
  4031f2:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  4031f4:	7723      	strb	r3, [r4, #28]
  4031f6:	7763      	strb	r3, [r4, #29]
  4031f8:	77a3      	strb	r3, [r4, #30]
  4031fa:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  4031fc:	7d62      	ldrb	r2, [r4, #21]
  4031fe:	7d26      	ldrb	r6, [r4, #20]
  403200:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  403204:	7ee1      	ldrb	r1, [r4, #27]
  403206:	7ea2      	ldrb	r2, [r4, #26]
  403208:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  40320c:	76a3      	strb	r3, [r4, #26]
  40320e:	76e3      	strb	r3, [r4, #27]
  403210:	7523      	strb	r3, [r4, #20]
  403212:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  403214:	9885      	ldr	r0, [sp, #532]	; 0x214
  403216:	2301      	movs	r3, #1
  403218:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  40321a:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  40321e:	d01b      	beq.n	403258 <f_open+0x118>
				dw = dj.fs->winsect;
  403220:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  403224:	4631      	mov	r1, r6
  403226:	4b2a      	ldr	r3, [pc, #168]	; (4032d0 <f_open+0x190>)
  403228:	4798      	blx	r3
				if (res == FR_OK) {
  40322a:	4603      	mov	r3, r0
  40322c:	2800      	cmp	r0, #0
  40322e:	d137      	bne.n	4032a0 <f_open+0x160>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  403230:	9885      	ldr	r0, [sp, #532]	; 0x214
  403232:	3e01      	subs	r6, #1
  403234:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  403236:	4641      	mov	r1, r8
  403238:	4b26      	ldr	r3, [pc, #152]	; (4032d4 <f_open+0x194>)
  40323a:	4798      	blx	r3
	if (res == FR_OK) {
  40323c:	4603      	mov	r3, r0
  40323e:	b158      	cbz	r0, 403258 <f_open+0x118>
  403240:	e02e      	b.n	4032a0 <f_open+0x160>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  403242:	f016 0f02 	tst.w	r6, #2
  403246:	d004      	beq.n	403252 <f_open+0x112>
  403248:	f013 0f01 	tst.w	r3, #1
  40324c:	d001      	beq.n	403252 <f_open+0x112>
					res = FR_DENIED;
  40324e:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  403250:	e026      	b.n	4032a0 <f_open+0x160>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  403252:	f016 0f08 	tst.w	r6, #8
  403256:	d001      	beq.n	40325c <f_open+0x11c>
			mode |= FA__WRITTEN;
  403258:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  40325c:	9b85      	ldr	r3, [sp, #532]	; 0x214
  40325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403260:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  403262:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  403264:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  403266:	7d62      	ldrb	r2, [r4, #21]
  403268:	7d23      	ldrb	r3, [r4, #20]
  40326a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  40326e:	7ee1      	ldrb	r1, [r4, #27]
  403270:	7ea3      	ldrb	r3, [r4, #26]
  403272:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  403276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40327a:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  40327c:	7fe2      	ldrb	r2, [r4, #31]
  40327e:	7fa3      	ldrb	r3, [r4, #30]
  403280:	041b      	lsls	r3, r3, #16
  403282:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  403286:	7f22      	ldrb	r2, [r4, #28]
  403288:	4313      	orrs	r3, r2
  40328a:	7f62      	ldrb	r2, [r4, #29]
  40328c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403290:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  403292:	2300      	movs	r3, #0
  403294:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  403296:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  403298:	9a85      	ldr	r2, [sp, #532]	; 0x214
  40329a:	602a      	str	r2, [r5, #0]
  40329c:	88d2      	ldrh	r2, [r2, #6]
  40329e:	80aa      	strh	r2, [r5, #4]
}
  4032a0:	4618      	mov	r0, r3
  4032a2:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  4032a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  4032aa:	f016 0f1c 	tst.w	r6, #28
  4032ae:	d101      	bne.n	4032b4 <f_open+0x174>
			res = FR_INVALID_NAME;
  4032b0:	2306      	movs	r3, #6
  4032b2:	e77d      	b.n	4031b0 <f_open+0x70>
  4032b4:	2306      	movs	r3, #6
  4032b6:	e778      	b.n	4031aa <f_open+0x6a>
				res = FR_DENIED;
  4032b8:	2307      	movs	r3, #7
  4032ba:	e7f1      	b.n	4032a0 <f_open+0x160>
					res = FR_EXIST;
  4032bc:	2308      	movs	r3, #8
  4032be:	e7ef      	b.n	4032a0 <f_open+0x160>
  4032c0:	00401f85 	.word	0x00401f85
  4032c4:	00402b25 	.word	0x00402b25
  4032c8:	00402e41 	.word	0x00402e41
  4032cc:	00401e21 	.word	0x00401e21
  4032d0:	004026f9 	.word	0x004026f9
  4032d4:	004022e9 	.word	0x004022e9

004032d8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  4032d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032dc:	b083      	sub	sp, #12
  4032de:	4604      	mov	r4, r0
  4032e0:	4689      	mov	r9, r1
  4032e2:	4616      	mov	r6, r2
  4032e4:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  4032e6:	2300      	movs	r3, #0
  4032e8:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  4032ec:	8881      	ldrh	r1, [r0, #4]
  4032ee:	6800      	ldr	r0, [r0, #0]
  4032f0:	4b75      	ldr	r3, [pc, #468]	; (4034c8 <f_write+0x1f0>)
  4032f2:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  4032f4:	9001      	str	r0, [sp, #4]
  4032f6:	2800      	cmp	r0, #0
  4032f8:	f040 80e2 	bne.w	4034c0 <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  4032fc:	79a3      	ldrb	r3, [r4, #6]
  4032fe:	f013 0f80 	tst.w	r3, #128	; 0x80
  403302:	f040 80db 	bne.w	4034bc <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  403306:	f013 0f02 	tst.w	r3, #2
  40330a:	d102      	bne.n	403312 <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  40330c:	2307      	movs	r3, #7
  40330e:	9301      	str	r3, [sp, #4]
  403310:	e0d6      	b.n	4034c0 <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  403312:	68e3      	ldr	r3, [r4, #12]
  403314:	42f3      	cmn	r3, r6
  403316:	d20f      	bcs.n	403338 <f_write+0x60>

	for ( ;  btw;							/* Repeat until all data written */
  403318:	2e00      	cmp	r6, #0
  40331a:	d17a      	bne.n	403412 <f_write+0x13a>
  40331c:	e00c      	b.n	403338 <f_write+0x60>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  40331e:	2100      	movs	r1, #0
  403320:	4b6a      	ldr	r3, [pc, #424]	; (4034cc <f_write+0x1f4>)
  403322:	4798      	blx	r3
  403324:	4603      	mov	r3, r0
  403326:	6120      	str	r0, [r4, #16]
  403328:	e003      	b.n	403332 <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  40332a:	6961      	ldr	r1, [r4, #20]
  40332c:	4b67      	ldr	r3, [pc, #412]	; (4034cc <f_write+0x1f4>)
  40332e:	4798      	blx	r3
  403330:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  403332:	2b00      	cmp	r3, #0
  403334:	f040 8081 	bne.w	40343a <f_write+0x162>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  403338:	68a3      	ldr	r3, [r4, #8]
  40333a:	68e2      	ldr	r2, [r4, #12]
  40333c:	4293      	cmp	r3, r2
  40333e:	bf88      	it	hi
  403340:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  403342:	79a3      	ldrb	r3, [r4, #6]
  403344:	f043 0320 	orr.w	r3, r3, #32
  403348:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  40334a:	e0b9      	b.n	4034c0 <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  40334c:	79a3      	ldrb	r3, [r4, #6]
  40334e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403352:	71a3      	strb	r3, [r4, #6]
  403354:	2302      	movs	r3, #2
  403356:	9301      	str	r3, [sp, #4]
  403358:	e0b2      	b.n	4034c0 <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  40335a:	79a3      	ldrb	r3, [r4, #6]
  40335c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403360:	71a3      	strb	r3, [r4, #6]
  403362:	2301      	movs	r3, #1
  403364:	9301      	str	r3, [sp, #4]
  403366:	e0ab      	b.n	4034c0 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  403368:	6820      	ldr	r0, [r4, #0]
  40336a:	2301      	movs	r3, #1
  40336c:	69a2      	ldr	r2, [r4, #24]
  40336e:	f104 0124 	add.w	r1, r4, #36	; 0x24
  403372:	7840      	ldrb	r0, [r0, #1]
  403374:	4d56      	ldr	r5, [pc, #344]	; (4034d0 <f_write+0x1f8>)
  403376:	47a8      	blx	r5
  403378:	b920      	cbnz	r0, 403384 <f_write+0xac>
				fp->flag &= ~FA__DIRTY;
  40337a:	79a3      	ldrb	r3, [r4, #6]
  40337c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  403380:	71a3      	strb	r3, [r4, #6]
  403382:	e064      	b.n	40344e <f_write+0x176>
					ABORT(fp->fs, FR_DISK_ERR);
  403384:	79a3      	ldrb	r3, [r4, #6]
  403386:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40338a:	71a3      	strb	r3, [r4, #6]
  40338c:	2301      	movs	r3, #1
  40338e:	9301      	str	r3, [sp, #4]
  403390:	e096      	b.n	4034c0 <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  403392:	79a3      	ldrb	r3, [r4, #6]
  403394:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403398:	71a3      	strb	r3, [r4, #6]
  40339a:	2302      	movs	r3, #2
  40339c:	9301      	str	r3, [sp, #4]
  40339e:	e08f      	b.n	4034c0 <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  4033a0:	79a3      	ldrb	r3, [r4, #6]
  4033a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4033a6:	71a3      	strb	r3, [r4, #6]
  4033a8:	2301      	movs	r3, #1
  4033aa:	9301      	str	r3, [sp, #4]
  4033ac:	e088      	b.n	4034c0 <f_write+0x1e8>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  4033ae:	f44f 7200 	mov.w	r2, #512	; 0x200
  4033b2:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  4033b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4033ba:	4b46      	ldr	r3, [pc, #280]	; (4034d4 <f_write+0x1fc>)
  4033bc:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
  4033be:	79a3      	ldrb	r3, [r4, #6]
  4033c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4033c4:	71a3      	strb	r3, [r4, #6]
  4033c6:	e065      	b.n	403494 <f_write+0x1bc>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
  4033c8:	69a3      	ldr	r3, [r4, #24]
  4033ca:	429d      	cmp	r5, r3
  4033cc:	d003      	beq.n	4033d6 <f_write+0xfe>
				if (fp->fptr < fp->fsize &&
  4033ce:	68a2      	ldr	r2, [r4, #8]
  4033d0:	68e3      	ldr	r3, [r4, #12]
  4033d2:	429a      	cmp	r2, r3
  4033d4:	d361      	bcc.n	40349a <f_write+0x1c2>
			fp->dsect = sect;
  4033d6:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  4033d8:	68a0      	ldr	r0, [r4, #8]
  4033da:	f3c0 0008 	ubfx	r0, r0, #0, #9
  4033de:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
  4033e2:	42b5      	cmp	r5, r6
  4033e4:	bf28      	it	cs
  4033e6:	4635      	movcs	r5, r6
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  4033e8:	3024      	adds	r0, #36	; 0x24
  4033ea:	462a      	mov	r2, r5
  4033ec:	4649      	mov	r1, r9
  4033ee:	4420      	add	r0, r4
  4033f0:	4b38      	ldr	r3, [pc, #224]	; (4034d4 <f_write+0x1fc>)
  4033f2:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
  4033f4:	79a3      	ldrb	r3, [r4, #6]
  4033f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4033fa:	71a3      	strb	r3, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  4033fc:	44a9      	add	r9, r5
  4033fe:	68a3      	ldr	r3, [r4, #8]
  403400:	442b      	add	r3, r5
  403402:	60a3      	str	r3, [r4, #8]
  403404:	f8d8 3000 	ldr.w	r3, [r8]
  403408:	442b      	add	r3, r5
  40340a:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  40340e:	1b76      	subs	r6, r6, r5
  403410:	d092      	beq.n	403338 <f_write+0x60>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  403412:	68a2      	ldr	r2, [r4, #8]
  403414:	f3c2 0308 	ubfx	r3, r2, #0, #9
  403418:	2b00      	cmp	r3, #0
  40341a:	d1dd      	bne.n	4033d8 <f_write+0x100>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  40341c:	6820      	ldr	r0, [r4, #0]
  40341e:	7883      	ldrb	r3, [r0, #2]
  403420:	3b01      	subs	r3, #1
  403422:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  403426:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  40342a:	d10c      	bne.n	403446 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
  40342c:	2a00      	cmp	r2, #0
  40342e:	f47f af7c 	bne.w	40332a <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  403432:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  403434:	2b00      	cmp	r3, #0
  403436:	f43f af72 	beq.w	40331e <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  40343a:	2b01      	cmp	r3, #1
  40343c:	d086      	beq.n	40334c <f_write+0x74>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  40343e:	f1b3 3fff 	cmp.w	r3, #4294967295
  403442:	d08a      	beq.n	40335a <f_write+0x82>
				fp->clust = clst;			/* Update current cluster */
  403444:	6163      	str	r3, [r4, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
  403446:	79a3      	ldrb	r3, [r4, #6]
  403448:	f013 0f40 	tst.w	r3, #64	; 0x40
  40344c:	d18c      	bne.n	403368 <f_write+0x90>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  40344e:	f8d4 a000 	ldr.w	sl, [r4]
  403452:	6961      	ldr	r1, [r4, #20]
  403454:	4650      	mov	r0, sl
  403456:	4b20      	ldr	r3, [pc, #128]	; (4034d8 <f_write+0x200>)
  403458:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  40345a:	4605      	mov	r5, r0
  40345c:	2800      	cmp	r0, #0
  40345e:	d098      	beq.n	403392 <f_write+0xba>
			sect += csect;
  403460:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  403462:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  403466:	d0af      	beq.n	4033c8 <f_write+0xf0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  403468:	f89a 3002 	ldrb.w	r3, [sl, #2]
  40346c:	eb07 020b 	add.w	r2, r7, fp
  403470:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  403472:	bf88      	it	hi
  403474:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  403478:	fa5f f38b 	uxtb.w	r3, fp
  40347c:	462a      	mov	r2, r5
  40347e:	4649      	mov	r1, r9
  403480:	f89a 0001 	ldrb.w	r0, [sl, #1]
  403484:	4f12      	ldr	r7, [pc, #72]	; (4034d0 <f_write+0x1f8>)
  403486:	47b8      	blx	r7
  403488:	2800      	cmp	r0, #0
  40348a:	d189      	bne.n	4033a0 <f_write+0xc8>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  40348c:	69a1      	ldr	r1, [r4, #24]
  40348e:	1b49      	subs	r1, r1, r5
  403490:	458b      	cmp	fp, r1
  403492:	d88c      	bhi.n	4033ae <f_write+0xd6>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  403494:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  403498:	e7b0      	b.n	4033fc <f_write+0x124>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  40349a:	2301      	movs	r3, #1
  40349c:	462a      	mov	r2, r5
  40349e:	f104 0124 	add.w	r1, r4, #36	; 0x24
  4034a2:	f89a 0001 	ldrb.w	r0, [sl, #1]
  4034a6:	4f0d      	ldr	r7, [pc, #52]	; (4034dc <f_write+0x204>)
  4034a8:	47b8      	blx	r7
				if (fp->fptr < fp->fsize &&
  4034aa:	2800      	cmp	r0, #0
  4034ac:	d093      	beq.n	4033d6 <f_write+0xfe>
						ABORT(fp->fs, FR_DISK_ERR);
  4034ae:	79a3      	ldrb	r3, [r4, #6]
  4034b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4034b4:	71a3      	strb	r3, [r4, #6]
  4034b6:	2301      	movs	r3, #1
  4034b8:	9301      	str	r3, [sp, #4]
  4034ba:	e001      	b.n	4034c0 <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  4034bc:	2302      	movs	r3, #2
  4034be:	9301      	str	r3, [sp, #4]
}
  4034c0:	9801      	ldr	r0, [sp, #4]
  4034c2:	b003      	add	sp, #12
  4034c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034c8:	00401ec1 	.word	0x00401ec1
  4034cc:	00402639 	.word	0x00402639
  4034d0:	00401d41 	.word	0x00401d41
  4034d4:	00401e79 	.word	0x00401e79
  4034d8:	00401e8d 	.word	0x00401e8d
  4034dc:	00401cd1 	.word	0x00401cd1

004034e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  4034e0:	b538      	push	{r3, r4, r5, lr}
  4034e2:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  4034e4:	8881      	ldrh	r1, [r0, #4]
  4034e6:	6800      	ldr	r0, [r0, #0]
  4034e8:	4b28      	ldr	r3, [pc, #160]	; (40358c <f_sync+0xac>)
  4034ea:	4798      	blx	r3
	if (res == FR_OK) {
  4034ec:	4603      	mov	r3, r0
  4034ee:	b9d0      	cbnz	r0, 403526 <f_sync+0x46>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  4034f0:	79a2      	ldrb	r2, [r4, #6]
  4034f2:	f012 0f20 	tst.w	r2, #32
  4034f6:	d016      	beq.n	403526 <f_sync+0x46>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  4034f8:	f012 0f40 	tst.w	r2, #64	; 0x40
  4034fc:	d00d      	beq.n	40351a <f_sync+0x3a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4034fe:	6820      	ldr	r0, [r4, #0]
  403500:	2301      	movs	r3, #1
  403502:	69a2      	ldr	r2, [r4, #24]
  403504:	f104 0124 	add.w	r1, r4, #36	; 0x24
  403508:	7840      	ldrb	r0, [r0, #1]
  40350a:	4d21      	ldr	r5, [pc, #132]	; (403590 <f_sync+0xb0>)
  40350c:	47a8      	blx	r5
  40350e:	2800      	cmp	r0, #0
  403510:	d139      	bne.n	403586 <f_sync+0xa6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
  403512:	79a3      	ldrb	r3, [r4, #6]
  403514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  403518:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  40351a:	69e1      	ldr	r1, [r4, #28]
  40351c:	6820      	ldr	r0, [r4, #0]
  40351e:	4b1d      	ldr	r3, [pc, #116]	; (403594 <f_sync+0xb4>)
  403520:	4798      	blx	r3
			if (res == FR_OK) {
  403522:	4603      	mov	r3, r0
  403524:	b108      	cbz	r0, 40352a <f_sync+0x4a>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  403526:	4618      	mov	r0, r3
  403528:	bd38      	pop	{r3, r4, r5, pc}
				dir = fp->dir_ptr;
  40352a:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  40352c:	7aeb      	ldrb	r3, [r5, #11]
  40352e:	f043 0320 	orr.w	r3, r3, #32
  403532:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  403534:	68e3      	ldr	r3, [r4, #12]
  403536:	772b      	strb	r3, [r5, #28]
  403538:	89a3      	ldrh	r3, [r4, #12]
  40353a:	0a1b      	lsrs	r3, r3, #8
  40353c:	776b      	strb	r3, [r5, #29]
  40353e:	89e3      	ldrh	r3, [r4, #14]
  403540:	77ab      	strb	r3, [r5, #30]
  403542:	7be3      	ldrb	r3, [r4, #15]
  403544:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  403546:	6923      	ldr	r3, [r4, #16]
  403548:	76ab      	strb	r3, [r5, #26]
  40354a:	8a23      	ldrh	r3, [r4, #16]
  40354c:	0a1b      	lsrs	r3, r3, #8
  40354e:	76eb      	strb	r3, [r5, #27]
  403550:	8a63      	ldrh	r3, [r4, #18]
  403552:	752b      	strb	r3, [r5, #20]
  403554:	8a63      	ldrh	r3, [r4, #18]
  403556:	0a1b      	lsrs	r3, r3, #8
  403558:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  40355a:	4b0f      	ldr	r3, [pc, #60]	; (403598 <f_sync+0xb8>)
  40355c:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  40355e:	75a8      	strb	r0, [r5, #22]
  403560:	f3c0 2307 	ubfx	r3, r0, #8, #8
  403564:	75eb      	strb	r3, [r5, #23]
  403566:	0c03      	lsrs	r3, r0, #16
  403568:	762b      	strb	r3, [r5, #24]
  40356a:	0e00      	lsrs	r0, r0, #24
  40356c:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  40356e:	79a3      	ldrb	r3, [r4, #6]
  403570:	f023 0320 	bic.w	r3, r3, #32
  403574:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  403576:	6823      	ldr	r3, [r4, #0]
  403578:	2201      	movs	r2, #1
  40357a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  40357c:	6820      	ldr	r0, [r4, #0]
  40357e:	4b07      	ldr	r3, [pc, #28]	; (40359c <f_sync+0xbc>)
  403580:	4798      	blx	r3
  403582:	4603      	mov	r3, r0
  403584:	e7cf      	b.n	403526 <f_sync+0x46>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  403586:	2301      	movs	r3, #1
  403588:	e7cd      	b.n	403526 <f_sync+0x46>
  40358a:	bf00      	nop
  40358c:	00401ec1 	.word	0x00401ec1
  403590:	00401d41 	.word	0x00401d41
  403594:	004022e9 	.word	0x004022e9
  403598:	00401e21 	.word	0x00401e21
  40359c:	00402775 	.word	0x00402775

004035a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  4035a0:	b510      	push	{r4, lr}
  4035a2:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  4035a4:	4b03      	ldr	r3, [pc, #12]	; (4035b4 <f_close+0x14>)
  4035a6:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  4035a8:	4603      	mov	r3, r0
  4035aa:	b908      	cbnz	r0, 4035b0 <f_close+0x10>
  4035ac:	2200      	movs	r2, #0
  4035ae:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  4035b0:	4618      	mov	r0, r3
  4035b2:	bd10      	pop	{r4, pc}
  4035b4:	004034e1 	.word	0x004034e1

004035b8 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  4035b8:	b510      	push	{r4, lr}
  4035ba:	b082      	sub	sp, #8
  4035bc:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  4035be:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  4035c2:	ab01      	add	r3, sp, #4
  4035c4:	2201      	movs	r2, #1
  4035c6:	4669      	mov	r1, sp
  4035c8:	4620      	mov	r0, r4
  4035ca:	4c05      	ldr	r4, [pc, #20]	; (4035e0 <f_putc+0x28>)
  4035cc:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  4035ce:	9b01      	ldr	r3, [sp, #4]
  4035d0:	2b01      	cmp	r3, #1
}
  4035d2:	bf0c      	ite	eq
  4035d4:	2001      	moveq	r0, #1
  4035d6:	f04f 30ff 	movne.w	r0, #4294967295
  4035da:	b002      	add	sp, #8
  4035dc:	bd10      	pop	{r4, pc}
  4035de:	bf00      	nop
  4035e0:	004032d9 	.word	0x004032d9

004035e4 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  4035e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  4035e6:	7803      	ldrb	r3, [r0, #0]
  4035e8:	b17b      	cbz	r3, 40360a <f_puts+0x26>
  4035ea:	460e      	mov	r6, r1
  4035ec:	4605      	mov	r5, r0
  4035ee:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  4035f0:	4f07      	ldr	r7, [pc, #28]	; (403610 <f_puts+0x2c>)
  4035f2:	4631      	mov	r1, r6
  4035f4:	4618      	mov	r0, r3
  4035f6:	47b8      	blx	r7
  4035f8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4035fc:	d006      	beq.n	40360c <f_puts+0x28>
  4035fe:	1b60      	subs	r0, r4, r5
	for (n = 0; *str; str++, n++) {
  403600:	f814 3b01 	ldrb.w	r3, [r4], #1
  403604:	2b00      	cmp	r3, #0
  403606:	d1f4      	bne.n	4035f2 <f_puts+0xe>
  403608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40360a:	2000      	movs	r0, #0
	}
	return n;
}
  40360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40360e:	bf00      	nop
  403610:	004035b9 	.word	0x004035b9

00403614 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  403614:	287f      	cmp	r0, #127	; 0x7f
  403616:	d919      	bls.n	40364c <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  403618:	b971      	cbnz	r1, 403638 <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  40361a:	28c7      	cmp	r0, #199	; 0xc7
  40361c:	d013      	beq.n	403646 <ff_convert+0x32>
  40361e:	4a0c      	ldr	r2, [pc, #48]	; (403650 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  403620:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  403622:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  403626:	4281      	cmp	r1, r0
  403628:	d003      	beq.n	403632 <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  40362a:	3301      	adds	r3, #1
  40362c:	b29b      	uxth	r3, r3
  40362e:	2b80      	cmp	r3, #128	; 0x80
  403630:	d1f7      	bne.n	403622 <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  403632:	3380      	adds	r3, #128	; 0x80
  403634:	b2d8      	uxtb	r0, r3
  403636:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  403638:	28ff      	cmp	r0, #255	; 0xff
  40363a:	d806      	bhi.n	40364a <ff_convert+0x36>
  40363c:	3880      	subs	r0, #128	; 0x80
  40363e:	4b04      	ldr	r3, [pc, #16]	; (403650 <ff_convert+0x3c>)
  403640:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  403644:	4770      	bx	lr
				if (src == Tbl[c]) break;
  403646:	2300      	movs	r3, #0
  403648:	e7f3      	b.n	403632 <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  40364a:	2000      	movs	r0, #0
		}
	}

	return c;
}
  40364c:	4770      	bx	lr
  40364e:	bf00      	nop
  403650:	00408848 	.word	0x00408848

00403654 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  403654:	2861      	cmp	r0, #97	; 0x61
  403656:	d010      	beq.n	40367a <ff_wtoupper+0x26>
  403658:	4909      	ldr	r1, [pc, #36]	; (403680 <ff_wtoupper+0x2c>)
  40365a:	2201      	movs	r2, #1
  40365c:	2362      	movs	r3, #98	; 0x62
  40365e:	4298      	cmp	r0, r3
  403660:	d005      	beq.n	40366e <ff_wtoupper+0x1a>
  403662:	3201      	adds	r2, #1
  403664:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  403668:	2b00      	cmp	r3, #0
  40366a:	d1f8      	bne.n	40365e <ff_wtoupper+0xa>
  40366c:	e003      	b.n	403676 <ff_wtoupper+0x22>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  40366e:	b118      	cbz	r0, 403678 <ff_wtoupper+0x24>
  403670:	4b04      	ldr	r3, [pc, #16]	; (403684 <ff_wtoupper+0x30>)
  403672:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  403676:	4770      	bx	lr
  403678:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  40367a:	2200      	movs	r2, #0
  40367c:	e7f8      	b.n	403670 <ff_wtoupper+0x1c>
  40367e:	bf00      	nop
  403680:	0040894a 	.word	0x0040894a
  403684:	00408b28 	.word	0x00408b28

00403688 <main>:
/* Function definitions ----------------------------------------------- */
/**
 * @brief Entry
 */
int main(void)
{
  403688:	b508      	push	{r3, lr}
  sys_init();
  40368a:	4b02      	ldr	r3, [pc, #8]	; (403694 <main+0xc>)
  40368c:	4798      	blx	r3

  while (1)
  {
    sys_run();
  40368e:	4c02      	ldr	r4, [pc, #8]	; (403698 <main+0x10>)
  403690:	47a0      	blx	r4
  403692:	e7fd      	b.n	403690 <main+0x8>
  403694:	00400305 	.word	0x00400305
  403698:	00400331 	.word	0x00400331

0040369c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40369c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40369e:	480e      	ldr	r0, [pc, #56]	; (4036d8 <sysclk_init+0x3c>)
  4036a0:	4b0e      	ldr	r3, [pc, #56]	; (4036dc <sysclk_init+0x40>)
  4036a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4036a4:	213e      	movs	r1, #62	; 0x3e
  4036a6:	2000      	movs	r0, #0
  4036a8:	4b0d      	ldr	r3, [pc, #52]	; (4036e0 <sysclk_init+0x44>)
  4036aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4036ac:	4c0d      	ldr	r4, [pc, #52]	; (4036e4 <sysclk_init+0x48>)
  4036ae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4036b0:	2800      	cmp	r0, #0
  4036b2:	d0fc      	beq.n	4036ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4036b4:	4b0c      	ldr	r3, [pc, #48]	; (4036e8 <sysclk_init+0x4c>)
  4036b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4036b8:	4a0c      	ldr	r2, [pc, #48]	; (4036ec <sysclk_init+0x50>)
  4036ba:	4b0d      	ldr	r3, [pc, #52]	; (4036f0 <sysclk_init+0x54>)
  4036bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  4036be:	4c0d      	ldr	r4, [pc, #52]	; (4036f4 <sysclk_init+0x58>)
  4036c0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4036c2:	2800      	cmp	r0, #0
  4036c4:	d0fc      	beq.n	4036c0 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4036c6:	2010      	movs	r0, #16
  4036c8:	4b0b      	ldr	r3, [pc, #44]	; (4036f8 <sysclk_init+0x5c>)
  4036ca:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4036cc:	4b0b      	ldr	r3, [pc, #44]	; (4036fc <sysclk_init+0x60>)
  4036ce:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4036d0:	480b      	ldr	r0, [pc, #44]	; (403700 <sysclk_init+0x64>)
  4036d2:	4b02      	ldr	r3, [pc, #8]	; (4036dc <sysclk_init+0x40>)
  4036d4:	4798      	blx	r3
  4036d6:	bd10      	pop	{r4, pc}
  4036d8:	07270e00 	.word	0x07270e00
  4036dc:	00401bc9 	.word	0x00401bc9
  4036e0:	00403af5 	.word	0x00403af5
  4036e4:	00403b49 	.word	0x00403b49
  4036e8:	00403b59 	.word	0x00403b59
  4036ec:	200f3f01 	.word	0x200f3f01
  4036f0:	400e0400 	.word	0x400e0400
  4036f4:	00403b69 	.word	0x00403b69
  4036f8:	00403a91 	.word	0x00403a91
  4036fc:	00401abd 	.word	0x00401abd
  403700:	05b8d800 	.word	0x05b8d800

00403704 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  403704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403708:	4681      	mov	r9, r0
  40370a:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40370c:	4b12      	ldr	r3, [pc, #72]	; (403758 <pio_handler_process+0x54>)
  40370e:	4798      	blx	r3
  403710:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  403712:	4648      	mov	r0, r9
  403714:	4b11      	ldr	r3, [pc, #68]	; (40375c <pio_handler_process+0x58>)
  403716:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  403718:	4005      	ands	r5, r0
  40371a:	d013      	beq.n	403744 <pio_handler_process+0x40>
  40371c:	4c10      	ldr	r4, [pc, #64]	; (403760 <pio_handler_process+0x5c>)
  40371e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  403722:	e003      	b.n	40372c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  403724:	42b4      	cmp	r4, r6
  403726:	d00d      	beq.n	403744 <pio_handler_process+0x40>
  403728:	3410      	adds	r4, #16
		while (status != 0) {
  40372a:	b15d      	cbz	r5, 403744 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40372c:	6820      	ldr	r0, [r4, #0]
  40372e:	42b8      	cmp	r0, r7
  403730:	d1f8      	bne.n	403724 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  403732:	6861      	ldr	r1, [r4, #4]
  403734:	4229      	tst	r1, r5
  403736:	d0f5      	beq.n	403724 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403738:	68e3      	ldr	r3, [r4, #12]
  40373a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40373c:	6863      	ldr	r3, [r4, #4]
  40373e:	ea25 0503 	bic.w	r5, r5, r3
  403742:	e7ef      	b.n	403724 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  403744:	4b07      	ldr	r3, [pc, #28]	; (403764 <pio_handler_process+0x60>)
  403746:	681b      	ldr	r3, [r3, #0]
  403748:	b123      	cbz	r3, 403754 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40374a:	4b07      	ldr	r3, [pc, #28]	; (403768 <pio_handler_process+0x64>)
  40374c:	681b      	ldr	r3, [r3, #0]
  40374e:	b10b      	cbz	r3, 403754 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  403750:	4648      	mov	r0, r9
  403752:	4798      	blx	r3
  403754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403758:	00403a6f 	.word	0x00403a6f
  40375c:	00403a73 	.word	0x00403a73
  403760:	20000a18 	.word	0x20000a18
  403764:	20000ae0 	.word	0x20000ae0
  403768:	20000a88 	.word	0x20000a88

0040376c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40376c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40376e:	2109      	movs	r1, #9
  403770:	4801      	ldr	r0, [pc, #4]	; (403778 <PIOA_Handler+0xc>)
  403772:	4b02      	ldr	r3, [pc, #8]	; (40377c <PIOA_Handler+0x10>)
  403774:	4798      	blx	r3
  403776:	bd08      	pop	{r3, pc}
  403778:	400e0e00 	.word	0x400e0e00
  40377c:	00403705 	.word	0x00403705

00403780 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403780:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  403782:	210a      	movs	r1, #10
  403784:	4801      	ldr	r0, [pc, #4]	; (40378c <PIOB_Handler+0xc>)
  403786:	4b02      	ldr	r3, [pc, #8]	; (403790 <PIOB_Handler+0x10>)
  403788:	4798      	blx	r3
  40378a:	bd08      	pop	{r3, pc}
  40378c:	400e1000 	.word	0x400e1000
  403790:	00403705 	.word	0x00403705

00403794 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  403794:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  403796:	210b      	movs	r1, #11
  403798:	4801      	ldr	r0, [pc, #4]	; (4037a0 <PIOC_Handler+0xc>)
  40379a:	4b02      	ldr	r3, [pc, #8]	; (4037a4 <PIOC_Handler+0x10>)
  40379c:	4798      	blx	r3
  40379e:	bd08      	pop	{r3, pc}
  4037a0:	400e1200 	.word	0x400e1200
  4037a4:	00403705 	.word	0x00403705

004037a8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4037a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4037aa:	210c      	movs	r1, #12
  4037ac:	4801      	ldr	r0, [pc, #4]	; (4037b4 <PIOD_Handler+0xc>)
  4037ae:	4b02      	ldr	r3, [pc, #8]	; (4037b8 <PIOD_Handler+0x10>)
  4037b0:	4798      	blx	r3
  4037b2:	bd08      	pop	{r3, pc}
  4037b4:	400e1400 	.word	0x400e1400
  4037b8:	00403705 	.word	0x00403705

004037bc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4037bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4037be:	210d      	movs	r1, #13
  4037c0:	4801      	ldr	r0, [pc, #4]	; (4037c8 <PIOE_Handler+0xc>)
  4037c2:	4b02      	ldr	r3, [pc, #8]	; (4037cc <PIOE_Handler+0x10>)
  4037c4:	4798      	blx	r3
  4037c6:	bd08      	pop	{r3, pc}
  4037c8:	400e1600 	.word	0x400e1600
  4037cc:	00403705 	.word	0x00403705

004037d0 <can_mailbox_init>:
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  4037d0:	680b      	ldr	r3, [r1, #0]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
  4037d2:	790a      	ldrb	r2, [r1, #4]
  4037d4:	b31a      	cbz	r2, 40381e <can_mailbox_init+0x4e>
{
  4037d6:	b430      	push	{r4, r5}
  4037d8:	b2db      	uxtb	r3, r3
  4037da:	eb00 1243 	add.w	r2, r0, r3, lsl #5
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4037de:	f8d2 4200 	ldr.w	r4, [r2, #512]	; 0x200
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
  4037e2:	79cd      	ldrb	r5, [r1, #7]
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4037e4:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
  4037e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4037ec:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
  4037f0:	794c      	ldrb	r4, [r1, #5]
  4037f2:	b32c      	cbz	r4, 403840 <can_mailbox_init+0x70>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
  4037f4:	68cc      	ldr	r4, [r1, #12]
  4037f6:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
  4037fa:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  4037fe:	690c      	ldr	r4, [r1, #16]
  403800:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
  403804:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  403808:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
  40380c:	7909      	ldrb	r1, [r1, #4]
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  40380e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
  403812:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  403816:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
  40381a:	bc30      	pop	{r4, r5}
  40381c:	4770      	bx	lr
  40381e:	b2db      	uxtb	r3, r3
  403820:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
  403824:	2300      	movs	r3, #0
  403826:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
  40382a:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
		p_can->CAN_MB[uc_index].CAN_MID = 0;
  40382e:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
  403832:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
  403836:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
  40383a:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
		return;
  40383e:	4770      	bx	lr
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
  403840:	68cc      	ldr	r4, [r1, #12]
  403842:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  403846:	690c      	ldr	r4, [r1, #16]
  403848:	eb00 1343 	add.w	r3, r0, r3, lsl #5
  40384c:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
  403850:	e7da      	b.n	403808 <can_mailbox_init+0x38>

00403852 <can_mailbox_write>:
	return (p_can->CAN_MB[uc_index].CAN_MSR);
  403852:	780b      	ldrb	r3, [r1, #0]
  403854:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  403858:	f8d2 2210 	ldr.w	r2, [r2, #528]	; 0x210
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
  40385c:	608a      	str	r2, [r1, #8]
	ul_status = p_mailbox->ul_status;
	if (!(ul_status & CAN_MSR_MRDY)) {
  40385e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
  403862:	d028      	beq.n	4038b6 <can_mailbox_write+0x64>
{
  403864:	b410      	push	{r4}
		return CAN_MAILBOX_NOT_READY;
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
  403866:	794a      	ldrb	r2, [r1, #5]
  403868:	b1fa      	cbz	r2, 4038aa <can_mailbox_write+0x58>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  40386a:	690a      	ldr	r2, [r1, #16]
  40386c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  403870:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  403874:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
  403878:	698c      	ldr	r4, [r1, #24]
  40387a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  40387e:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
	if (p_mailbox->uc_length > 4) {
  403882:	798a      	ldrb	r2, [r1, #6]
  403884:	2a04      	cmp	r2, #4
  403886:	d904      	bls.n	403892 <can_mailbox_write+0x40>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
  403888:	69cc      	ldr	r4, [r1, #28]
  40388a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  40388e:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
  403892:	798a      	ldrb	r2, [r1, #6]
  403894:	0412      	lsls	r2, r2, #16
  403896:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40389a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  40389e:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c

	return CAN_MAILBOX_TRANSFER_OK;
  4038a2:	2000      	movs	r0, #0
}
  4038a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4038a8:	4770      	bx	lr
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  4038aa:	690c      	ldr	r4, [r1, #16]
  4038ac:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  4038b0:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
  4038b4:	e7e0      	b.n	403878 <can_mailbox_write+0x26>
		return CAN_MAILBOX_NOT_READY;
  4038b6:	2001      	movs	r0, #1
  4038b8:	4770      	bx	lr
	...

004038bc <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
  4038bc:	b570      	push	{r4, r5, r6, lr}
  4038be:	b088      	sub	sp, #32
  4038c0:	4606      	mov	r6, r0
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
  4038c2:	2400      	movs	r4, #0
  4038c4:	f88d 4004 	strb.w	r4, [sp, #4]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
  4038c8:	4d04      	ldr	r5, [pc, #16]	; (4038dc <can_reset_all_mailbox+0x20>)
		mb_config_t.ul_mb_idx = i;
  4038ca:	9400      	str	r4, [sp, #0]
		can_mailbox_init(p_can, &mb_config_t);
  4038cc:	4669      	mov	r1, sp
  4038ce:	4630      	mov	r0, r6
  4038d0:	47a8      	blx	r5
  4038d2:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  4038d4:	2c08      	cmp	r4, #8
  4038d6:	d1f8      	bne.n	4038ca <can_reset_all_mailbox+0xe>
	}
}
  4038d8:	b008      	add	sp, #32
  4038da:	bd70      	pop	{r4, r5, r6, pc}
  4038dc:	004037d1 	.word	0x004037d1

004038e0 <can_init>:
{
  4038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  4038e2:	f246 13a8 	movw	r3, #25000	; 0x61a8
  4038e6:	fb03 f402 	mul.w	r4, r3, r2
  4038ea:	190b      	adds	r3, r1, r4
  4038ec:	3b01      	subs	r3, #1
  4038ee:	fbb3 f3f4 	udiv	r3, r3, r4
  4038f2:	2b80      	cmp	r3, #128	; 0x80
  4038f4:	d866      	bhi.n	4039c4 <can_init+0xe4>
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
  4038f6:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
  4038fa:	fb04 f402 	mul.w	r4, r4, r2
  4038fe:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
  403902:	d861      	bhi.n	4039c8 <can_init+0xe8>
  403904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  403908:	fb03 f202 	mul.w	r2, r3, r2
  40390c:	2708      	movs	r7, #8
  40390e:	f04f 36ff 	mov.w	r6, #4294967295
  403912:	463b      	mov	r3, r7
  403914:	e004      	b.n	403920 <can_init+0x40>
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  403916:	3301      	adds	r3, #1
  403918:	b2db      	uxtb	r3, r3
  40391a:	4414      	add	r4, r2
  40391c:	2b1a      	cmp	r3, #26
  40391e:	d00c      	beq.n	40393a <can_init+0x5a>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
  403920:	fbb1 f5f4 	udiv	r5, r1, r4
  403924:	2d80      	cmp	r5, #128	; 0x80
  403926:	d8f6      	bhi.n	403916 <can_init+0x36>
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
  403928:	fb04 1515 	mls	r5, r4, r5, r1
			if (ul_cur_mod < ul_mod) {
  40392c:	42b5      	cmp	r5, r6
  40392e:	d2f2      	bcs.n	403916 <can_init+0x36>
				if (!ul_mod) {
  403930:	b115      	cbz	r5, 403938 <can_init+0x58>
				ul_mod = ul_cur_mod;
  403932:	462e      	mov	r6, r5
				if (!ul_mod) {
  403934:	461f      	mov	r7, r3
  403936:	e7ee      	b.n	403916 <can_init+0x36>
  403938:	461f      	mov	r7, r3
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
  40393a:	fb02 f207 	mul.w	r2, r2, r7
  40393e:	fbb1 f1f2 	udiv	r1, r1, r2
	if (uc_prescale < 2) {
  403942:	b2cb      	uxtb	r3, r1
  403944:	2b01      	cmp	r3, #1
  403946:	d941      	bls.n	4039cc <can_init+0xec>
  403948:	4604      	mov	r4, r0
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
  40394a:	f1a7 0208 	sub.w	r2, r7, #8
	p_can->CAN_MR &= ~CAN_MR_CANEN;
  40394e:	6803      	ldr	r3, [r0, #0]
  403950:	f023 0301 	bic.w	r3, r3, #1
  403954:	6003      	str	r3, [r0, #0]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  403956:	4d1e      	ldr	r5, [pc, #120]	; (4039d0 <can_init+0xf0>)
  403958:	0056      	lsls	r6, r2, #1
  40395a:	18b7      	adds	r7, r6, r2
  40395c:	eb05 0747 	add.w	r7, r5, r7, lsl #1
  403960:	78bb      	ldrb	r3, [r7, #2]
  403962:	3b01      	subs	r3, #1
  403964:	011b      	lsls	r3, r3, #4
  403966:	f003 0370 	and.w	r3, r3, #112	; 0x70
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  40396a:	7878      	ldrb	r0, [r7, #1]
  40396c:	3801      	subs	r0, #1
  40396e:	0200      	lsls	r0, r0, #8
  403970:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  403974:	4303      	orrs	r3, r0
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  403976:	78f8      	ldrb	r0, [r7, #3]
  403978:	3801      	subs	r0, #1
  40397a:	f000 0007 	and.w	r0, r0, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  40397e:	4303      	orrs	r3, r0
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  403980:	793a      	ldrb	r2, [r7, #4]
  403982:	3a01      	subs	r2, #1
  403984:	0312      	lsls	r2, r2, #12
  403986:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  40398a:	4313      	orrs	r3, r2
			CAN_BR_BRP(uc_prescale - 1);
  40398c:	b2ca      	uxtb	r2, r1
  40398e:	3a01      	subs	r2, #1
  403990:	0412      	lsls	r2, r2, #16
  403992:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  403996:	4313      	orrs	r3, r2
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  403998:	6163      	str	r3, [r4, #20]
	can_reset_all_mailbox(p_can);
  40399a:	4620      	mov	r0, r4
  40399c:	4b0d      	ldr	r3, [pc, #52]	; (4039d4 <can_init+0xf4>)
  40399e:	4798      	blx	r3
	p_can->CAN_MR |= CAN_MR_CANEN;
  4039a0:	6823      	ldr	r3, [r4, #0]
  4039a2:	f043 0301 	orr.w	r3, r3, #1
  4039a6:	6023      	str	r3, [r4, #0]
  4039a8:	2300      	movs	r3, #0
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  4039aa:	490b      	ldr	r1, [pc, #44]	; (4039d8 <can_init+0xf8>)
	return (p_can->CAN_SR);
  4039ac:	6922      	ldr	r2, [r4, #16]
		ul_tick++;
  4039ae:	3301      	adds	r3, #1
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  4039b0:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
  4039b4:	d101      	bne.n	4039ba <can_init+0xda>
  4039b6:	428b      	cmp	r3, r1
  4039b8:	d1f8      	bne.n	4039ac <can_init+0xcc>
	if (CAN_TIMEOUT == ul_tick) {
  4039ba:	4807      	ldr	r0, [pc, #28]	; (4039d8 <can_init+0xf8>)
  4039bc:	1a18      	subs	r0, r3, r0
  4039be:	bf18      	it	ne
  4039c0:	2001      	movne	r0, #1
  4039c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
  4039c4:	2000      	movs	r0, #0
  4039c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039c8:	2000      	movs	r0, #0
  4039ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039cc:	2000      	movs	r0, #0
}
  4039ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4039d0:	00408d08 	.word	0x00408d08
  4039d4:	004038bd 	.word	0x004038bd
  4039d8:	000186a0 	.word	0x000186a0

004039dc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4039dc:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4039de:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4039e2:	d03a      	beq.n	403a5a <pio_set_peripheral+0x7e>
  4039e4:	d813      	bhi.n	403a0e <pio_set_peripheral+0x32>
  4039e6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4039ea:	d025      	beq.n	403a38 <pio_set_peripheral+0x5c>
  4039ec:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4039f0:	d10a      	bne.n	403a08 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4039f2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4039f4:	4313      	orrs	r3, r2
  4039f6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4039f8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4039fa:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4039fc:	400b      	ands	r3, r1
  4039fe:	ea23 0302 	bic.w	r3, r3, r2
  403a02:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403a04:	6042      	str	r2, [r0, #4]
  403a06:	4770      	bx	lr
	switch (ul_type) {
  403a08:	2900      	cmp	r1, #0
  403a0a:	d1fb      	bne.n	403a04 <pio_set_peripheral+0x28>
  403a0c:	4770      	bx	lr
  403a0e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  403a12:	d021      	beq.n	403a58 <pio_set_peripheral+0x7c>
  403a14:	d809      	bhi.n	403a2a <pio_set_peripheral+0x4e>
  403a16:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  403a1a:	d1f3      	bne.n	403a04 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  403a1c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403a1e:	4313      	orrs	r3, r2
  403a20:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403a22:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403a24:	4313      	orrs	r3, r2
  403a26:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403a28:	e7ec      	b.n	403a04 <pio_set_peripheral+0x28>
	switch (ul_type) {
  403a2a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  403a2e:	d013      	beq.n	403a58 <pio_set_peripheral+0x7c>
  403a30:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  403a34:	d010      	beq.n	403a58 <pio_set_peripheral+0x7c>
  403a36:	e7e5      	b.n	403a04 <pio_set_peripheral+0x28>
{
  403a38:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  403a3a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403a3c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  403a3e:	43d3      	mvns	r3, r2
  403a40:	4021      	ands	r1, r4
  403a42:	461c      	mov	r4, r3
  403a44:	4019      	ands	r1, r3
  403a46:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403a48:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403a4a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  403a4c:	400b      	ands	r3, r1
  403a4e:	4023      	ands	r3, r4
  403a50:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  403a52:	6042      	str	r2, [r0, #4]
}
  403a54:	f85d 4b04 	ldr.w	r4, [sp], #4
  403a58:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  403a5a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403a5c:	6f01      	ldr	r1, [r0, #112]	; 0x70
  403a5e:	400b      	ands	r3, r1
  403a60:	ea23 0302 	bic.w	r3, r3, r2
  403a64:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403a66:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403a68:	4313      	orrs	r3, r2
  403a6a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403a6c:	e7ca      	b.n	403a04 <pio_set_peripheral+0x28>

00403a6e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  403a6e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  403a70:	4770      	bx	lr

00403a72 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403a72:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403a74:	4770      	bx	lr

00403a76 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403a76:	0943      	lsrs	r3, r0, #5
  403a78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403a7c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  403a80:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  403a82:	f000 001f 	and.w	r0, r0, #31
  403a86:	2201      	movs	r2, #1
  403a88:	fa02 f000 	lsl.w	r0, r2, r0
  403a8c:	6318      	str	r0, [r3, #48]	; 0x30
  403a8e:	4770      	bx	lr

00403a90 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403a90:	4a17      	ldr	r2, [pc, #92]	; (403af0 <pmc_switch_mck_to_pllack+0x60>)
  403a92:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403a98:	4318      	orrs	r0, r3
  403a9a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403a9c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403a9e:	f013 0f08 	tst.w	r3, #8
  403aa2:	d10a      	bne.n	403aba <pmc_switch_mck_to_pllack+0x2a>
  403aa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403aa8:	4911      	ldr	r1, [pc, #68]	; (403af0 <pmc_switch_mck_to_pllack+0x60>)
  403aaa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403aac:	f012 0f08 	tst.w	r2, #8
  403ab0:	d103      	bne.n	403aba <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403ab2:	3b01      	subs	r3, #1
  403ab4:	d1f9      	bne.n	403aaa <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  403ab6:	2001      	movs	r0, #1
  403ab8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  403aba:	4a0d      	ldr	r2, [pc, #52]	; (403af0 <pmc_switch_mck_to_pllack+0x60>)
  403abc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403abe:	f023 0303 	bic.w	r3, r3, #3
  403ac2:	f043 0302 	orr.w	r3, r3, #2
  403ac6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403ac8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403aca:	f013 0f08 	tst.w	r3, #8
  403ace:	d10a      	bne.n	403ae6 <pmc_switch_mck_to_pllack+0x56>
  403ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403ad4:	4906      	ldr	r1, [pc, #24]	; (403af0 <pmc_switch_mck_to_pllack+0x60>)
  403ad6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403ad8:	f012 0f08 	tst.w	r2, #8
  403adc:	d105      	bne.n	403aea <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403ade:	3b01      	subs	r3, #1
  403ae0:	d1f9      	bne.n	403ad6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  403ae2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403ae4:	4770      	bx	lr
	return 0;
  403ae6:	2000      	movs	r0, #0
  403ae8:	4770      	bx	lr
  403aea:	2000      	movs	r0, #0
  403aec:	4770      	bx	lr
  403aee:	bf00      	nop
  403af0:	400e0400 	.word	0x400e0400

00403af4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  403af4:	b9c8      	cbnz	r0, 403b2a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403af6:	4a11      	ldr	r2, [pc, #68]	; (403b3c <pmc_switch_mainck_to_xtal+0x48>)
  403af8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  403afa:	0209      	lsls	r1, r1, #8
  403afc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  403afe:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  403b02:	f023 0303 	bic.w	r3, r3, #3
  403b06:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403b0a:	f043 0301 	orr.w	r3, r3, #1
  403b0e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403b10:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  403b12:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403b14:	f013 0f01 	tst.w	r3, #1
  403b18:	d0fb      	beq.n	403b12 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403b1a:	4a08      	ldr	r2, [pc, #32]	; (403b3c <pmc_switch_mainck_to_xtal+0x48>)
  403b1c:	6a13      	ldr	r3, [r2, #32]
  403b1e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  403b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403b26:	6213      	str	r3, [r2, #32]
  403b28:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403b2a:	4904      	ldr	r1, [pc, #16]	; (403b3c <pmc_switch_mainck_to_xtal+0x48>)
  403b2c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  403b2e:	4a04      	ldr	r2, [pc, #16]	; (403b40 <pmc_switch_mainck_to_xtal+0x4c>)
  403b30:	401a      	ands	r2, r3
  403b32:	4b04      	ldr	r3, [pc, #16]	; (403b44 <pmc_switch_mainck_to_xtal+0x50>)
  403b34:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403b36:	620b      	str	r3, [r1, #32]
  403b38:	4770      	bx	lr
  403b3a:	bf00      	nop
  403b3c:	400e0400 	.word	0x400e0400
  403b40:	fec8fffc 	.word	0xfec8fffc
  403b44:	01370002 	.word	0x01370002

00403b48 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  403b48:	4b02      	ldr	r3, [pc, #8]	; (403b54 <pmc_osc_is_ready_mainck+0xc>)
  403b4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403b4c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  403b50:	4770      	bx	lr
  403b52:	bf00      	nop
  403b54:	400e0400 	.word	0x400e0400

00403b58 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403b58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403b5c:	4b01      	ldr	r3, [pc, #4]	; (403b64 <pmc_disable_pllack+0xc>)
  403b5e:	629a      	str	r2, [r3, #40]	; 0x28
  403b60:	4770      	bx	lr
  403b62:	bf00      	nop
  403b64:	400e0400 	.word	0x400e0400

00403b68 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403b68:	4b02      	ldr	r3, [pc, #8]	; (403b74 <pmc_is_locked_pllack+0xc>)
  403b6a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403b6c:	f000 0002 	and.w	r0, r0, #2
  403b70:	4770      	bx	lr
  403b72:	bf00      	nop
  403b74:	400e0400 	.word	0x400e0400

00403b78 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  403b78:	282f      	cmp	r0, #47	; 0x2f
  403b7a:	d81e      	bhi.n	403bba <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403b7c:	281f      	cmp	r0, #31
  403b7e:	d80c      	bhi.n	403b9a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403b80:	4b11      	ldr	r3, [pc, #68]	; (403bc8 <pmc_enable_periph_clk+0x50>)
  403b82:	699a      	ldr	r2, [r3, #24]
  403b84:	2301      	movs	r3, #1
  403b86:	4083      	lsls	r3, r0
  403b88:	4393      	bics	r3, r2
  403b8a:	d018      	beq.n	403bbe <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403b8c:	2301      	movs	r3, #1
  403b8e:	fa03 f000 	lsl.w	r0, r3, r0
  403b92:	4b0d      	ldr	r3, [pc, #52]	; (403bc8 <pmc_enable_periph_clk+0x50>)
  403b94:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  403b96:	2000      	movs	r0, #0
  403b98:	4770      	bx	lr
		ul_id -= 32;
  403b9a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403b9c:	4b0a      	ldr	r3, [pc, #40]	; (403bc8 <pmc_enable_periph_clk+0x50>)
  403b9e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403ba2:	2301      	movs	r3, #1
  403ba4:	4083      	lsls	r3, r0
  403ba6:	4393      	bics	r3, r2
  403ba8:	d00b      	beq.n	403bc2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  403baa:	2301      	movs	r3, #1
  403bac:	fa03 f000 	lsl.w	r0, r3, r0
  403bb0:	4b05      	ldr	r3, [pc, #20]	; (403bc8 <pmc_enable_periph_clk+0x50>)
  403bb2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  403bb6:	2000      	movs	r0, #0
  403bb8:	4770      	bx	lr
		return 1;
  403bba:	2001      	movs	r0, #1
  403bbc:	4770      	bx	lr
	return 0;
  403bbe:	2000      	movs	r0, #0
  403bc0:	4770      	bx	lr
  403bc2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403bc4:	4770      	bx	lr
  403bc6:	bf00      	nop
  403bc8:	400e0400 	.word	0x400e0400

00403bcc <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  403bcc:	4b2a      	ldr	r3, [pc, #168]	; (403c78 <twi_set_speed+0xac>)
  403bce:	4299      	cmp	r1, r3
  403bd0:	d84a      	bhi.n	403c68 <twi_set_speed+0x9c>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  403bd2:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  403bd6:	4299      	cmp	r1, r3
  403bd8:	d92c      	bls.n	403c34 <twi_set_speed+0x68>
{
  403bda:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403bdc:	4c27      	ldr	r4, [pc, #156]	; (403c7c <twi_set_speed+0xb0>)
  403bde:	fba4 3402 	umull	r3, r4, r4, r2
  403be2:	0ba4      	lsrs	r4, r4, #14
  403be4:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403be6:	4b26      	ldr	r3, [pc, #152]	; (403c80 <twi_set_speed+0xb4>)
  403be8:	440b      	add	r3, r1
  403bea:	009b      	lsls	r3, r3, #2
  403bec:	fbb2 f2f3 	udiv	r2, r2, r3
  403bf0:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403bf2:	2cff      	cmp	r4, #255	; 0xff
  403bf4:	d93a      	bls.n	403c6c <twi_set_speed+0xa0>
  403bf6:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  403bf8:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  403bfa:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403bfc:	2cff      	cmp	r4, #255	; 0xff
  403bfe:	d90e      	bls.n	403c1e <twi_set_speed+0x52>
  403c00:	2907      	cmp	r1, #7
  403c02:	d1f9      	bne.n	403bf8 <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  403c04:	0213      	lsls	r3, r2, #8
  403c06:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
  403c08:	0409      	lsls	r1, r1, #16
  403c0a:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  403c0e:	430b      	orrs	r3, r1
  403c10:	b2e4      	uxtb	r4, r4
  403c12:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
  403c14:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  403c16:	2000      	movs	r0, #0
}
  403c18:	f85d 4b04 	ldr.w	r4, [sp], #4
  403c1c:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403c1e:	2aff      	cmp	r2, #255	; 0xff
  403c20:	d9f0      	bls.n	403c04 <twi_set_speed+0x38>
  403c22:	2906      	cmp	r1, #6
  403c24:	d8ee      	bhi.n	403c04 <twi_set_speed+0x38>
			ckdiv++;
  403c26:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
  403c28:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403c2a:	2aff      	cmp	r2, #255	; 0xff
  403c2c:	d9ea      	bls.n	403c04 <twi_set_speed+0x38>
  403c2e:	2906      	cmp	r1, #6
  403c30:	d9f9      	bls.n	403c26 <twi_set_speed+0x5a>
  403c32:	e7e7      	b.n	403c04 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  403c34:	0049      	lsls	r1, r1, #1
  403c36:	fbb2 f2f1 	udiv	r2, r2, r1
  403c3a:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403c3c:	2aff      	cmp	r2, #255	; 0xff
  403c3e:	d911      	bls.n	403c64 <twi_set_speed+0x98>
  403c40:	2300      	movs	r3, #0
			ckdiv++;
  403c42:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
  403c44:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403c46:	2aff      	cmp	r2, #255	; 0xff
  403c48:	d901      	bls.n	403c4e <twi_set_speed+0x82>
  403c4a:	2b07      	cmp	r3, #7
  403c4c:	d1f9      	bne.n	403c42 <twi_set_speed+0x76>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  403c4e:	0211      	lsls	r1, r2, #8
  403c50:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
  403c52:	041b      	lsls	r3, r3, #16
  403c54:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  403c58:	430b      	orrs	r3, r1
  403c5a:	b2d2      	uxtb	r2, r2
  403c5c:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  403c5e:	6102      	str	r2, [r0, #16]
	return PASS;
  403c60:	2000      	movs	r0, #0
  403c62:	4770      	bx	lr
	uint32_t ckdiv = 0;
  403c64:	2300      	movs	r3, #0
  403c66:	e7f2      	b.n	403c4e <twi_set_speed+0x82>
		return FAIL;
  403c68:	2001      	movs	r0, #1
  403c6a:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403c6c:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
  403c6e:	bf88      	it	hi
  403c70:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  403c72:	d8d8      	bhi.n	403c26 <twi_set_speed+0x5a>
	uint32_t ckdiv = 0;
  403c74:	2100      	movs	r1, #0
  403c76:	e7c5      	b.n	403c04 <twi_set_speed+0x38>
  403c78:	00061a80 	.word	0x00061a80
  403c7c:	057619f1 	.word	0x057619f1
  403c80:	3ffd1200 	.word	0x3ffd1200

00403c84 <twi_master_init>:
{
  403c84:	b538      	push	{r3, r4, r5, lr}
  403c86:	4604      	mov	r4, r0
  403c88:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
  403c8a:	f04f 33ff 	mov.w	r3, #4294967295
  403c8e:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
  403c90:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  403c92:	2380      	movs	r3, #128	; 0x80
  403c94:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  403c96:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
  403c98:	2308      	movs	r3, #8
  403c9a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  403c9c:	2320      	movs	r3, #32
  403c9e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
  403ca0:	2304      	movs	r3, #4
  403ca2:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  403ca4:	680a      	ldr	r2, [r1, #0]
  403ca6:	6849      	ldr	r1, [r1, #4]
  403ca8:	4b05      	ldr	r3, [pc, #20]	; (403cc0 <twi_master_init+0x3c>)
  403caa:	4798      	blx	r3
  403cac:	2801      	cmp	r0, #1
  403cae:	bf14      	ite	ne
  403cb0:	2000      	movne	r0, #0
  403cb2:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
  403cb4:	7a6b      	ldrb	r3, [r5, #9]
  403cb6:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  403cb8:	bf04      	itt	eq
  403cba:	2340      	moveq	r3, #64	; 0x40
  403cbc:	6023      	streq	r3, [r4, #0]
}
  403cbe:	bd38      	pop	{r3, r4, r5, pc}
  403cc0:	00403bcd 	.word	0x00403bcd

00403cc4 <twi_mk_addr>:
	if (len == 0)
  403cc4:	460a      	mov	r2, r1
  403cc6:	b159      	cbz	r1, 403ce0 <twi_mk_addr+0x1c>
	val = addr[0];
  403cc8:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  403cca:	2901      	cmp	r1, #1
		val |= addr[1];
  403ccc:	bfc4      	itt	gt
  403cce:	7841      	ldrbgt	r1, [r0, #1]
  403cd0:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
  403cd4:	2a02      	cmp	r2, #2
  403cd6:	dd04      	ble.n	403ce2 <twi_mk_addr+0x1e>
		val |= addr[2];
  403cd8:	7882      	ldrb	r2, [r0, #2]
  403cda:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  403cde:	e000      	b.n	403ce2 <twi_mk_addr+0x1e>
		return 0;
  403ce0:	2300      	movs	r3, #0
}
  403ce2:	4618      	mov	r0, r3
  403ce4:	4770      	bx	lr
	...

00403ce8 <twi_master_write>:
{
  403ce8:	b570      	push	{r4, r5, r6, lr}
	uint32_t cnt = p_packet->length;
  403cea:	68cd      	ldr	r5, [r1, #12]
	if (cnt == 0) {
  403cec:	2d00      	cmp	r5, #0
  403cee:	d035      	beq.n	403d5c <twi_master_write+0x74>
  403cf0:	460b      	mov	r3, r1
  403cf2:	4604      	mov	r4, r0
	uint8_t *buffer = p_packet->buffer;
  403cf4:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  403cf6:	2000      	movs	r0, #0
  403cf8:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  403cfa:	7c0a      	ldrb	r2, [r1, #16]
  403cfc:	0412      	lsls	r2, r2, #16
  403cfe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  403d02:	6849      	ldr	r1, [r1, #4]
  403d04:	0209      	lsls	r1, r1, #8
  403d06:	f401 7140 	and.w	r1, r1, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  403d0a:	430a      	orrs	r2, r1
  403d0c:	6062      	str	r2, [r4, #4]
	p_twi->TWI_IADR = 0;
  403d0e:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  403d10:	6859      	ldr	r1, [r3, #4]
  403d12:	4618      	mov	r0, r3
  403d14:	4b15      	ldr	r3, [pc, #84]	; (403d6c <twi_master_write+0x84>)
  403d16:	4798      	blx	r3
  403d18:	60e0      	str	r0, [r4, #12]
		status = p_twi->TWI_SR;
  403d1a:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  403d1c:	f413 7f80 	tst.w	r3, #256	; 0x100
  403d20:	d006      	beq.n	403d30 <twi_master_write+0x48>
			return TWI_RECEIVE_NACK;
  403d22:	2505      	movs	r5, #5
  403d24:	e01b      	b.n	403d5e <twi_master_write+0x76>
	while (cnt > 0) {
  403d26:	b15d      	cbz	r5, 403d40 <twi_master_write+0x58>
		status = p_twi->TWI_SR;
  403d28:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  403d2a:	f413 7f80 	tst.w	r3, #256	; 0x100
  403d2e:	d118      	bne.n	403d62 <twi_master_write+0x7a>
		if (!(status & TWI_SR_TXRDY)) {
  403d30:	f013 0f04 	tst.w	r3, #4
  403d34:	d0f7      	beq.n	403d26 <twi_master_write+0x3e>
		p_twi->TWI_THR = *buffer++;
  403d36:	7833      	ldrb	r3, [r6, #0]
  403d38:	6363      	str	r3, [r4, #52]	; 0x34
		cnt--;
  403d3a:	3d01      	subs	r5, #1
		p_twi->TWI_THR = *buffer++;
  403d3c:	3601      	adds	r6, #1
  403d3e:	e7f2      	b.n	403d26 <twi_master_write+0x3e>
		status = p_twi->TWI_SR;
  403d40:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  403d42:	f413 7f80 	tst.w	r3, #256	; 0x100
  403d46:	d10e      	bne.n	403d66 <twi_master_write+0x7e>
		if (status & TWI_SR_TXRDY) {
  403d48:	f013 0f04 	tst.w	r3, #4
  403d4c:	d0f8      	beq.n	403d40 <twi_master_write+0x58>
	p_twi->TWI_CR = TWI_CR_STOP;
  403d4e:	2302      	movs	r3, #2
  403d50:	6023      	str	r3, [r4, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  403d52:	6a23      	ldr	r3, [r4, #32]
  403d54:	f013 0f01 	tst.w	r3, #1
  403d58:	d0fb      	beq.n	403d52 <twi_master_write+0x6a>
  403d5a:	e000      	b.n	403d5e <twi_master_write+0x76>
		return TWI_INVALID_ARGUMENT;
  403d5c:	2501      	movs	r5, #1
}
  403d5e:	4628      	mov	r0, r5
  403d60:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
  403d62:	2505      	movs	r5, #5
  403d64:	e7fb      	b.n	403d5e <twi_master_write+0x76>
			return TWI_RECEIVE_NACK;
  403d66:	2505      	movs	r5, #5
  403d68:	e7f9      	b.n	403d5e <twi_master_write+0x76>
  403d6a:	bf00      	nop
  403d6c:	00403cc5 	.word	0x00403cc5

00403d70 <__libc_init_array>:
  403d70:	b570      	push	{r4, r5, r6, lr}
  403d72:	4e0f      	ldr	r6, [pc, #60]	; (403db0 <__libc_init_array+0x40>)
  403d74:	4d0f      	ldr	r5, [pc, #60]	; (403db4 <__libc_init_array+0x44>)
  403d76:	1b76      	subs	r6, r6, r5
  403d78:	10b6      	asrs	r6, r6, #2
  403d7a:	bf18      	it	ne
  403d7c:	2400      	movne	r4, #0
  403d7e:	d005      	beq.n	403d8c <__libc_init_array+0x1c>
  403d80:	3401      	adds	r4, #1
  403d82:	f855 3b04 	ldr.w	r3, [r5], #4
  403d86:	4798      	blx	r3
  403d88:	42a6      	cmp	r6, r4
  403d8a:	d1f9      	bne.n	403d80 <__libc_init_array+0x10>
  403d8c:	4e0a      	ldr	r6, [pc, #40]	; (403db8 <__libc_init_array+0x48>)
  403d8e:	4d0b      	ldr	r5, [pc, #44]	; (403dbc <__libc_init_array+0x4c>)
  403d90:	1b76      	subs	r6, r6, r5
  403d92:	f005 f935 	bl	409000 <_init>
  403d96:	10b6      	asrs	r6, r6, #2
  403d98:	bf18      	it	ne
  403d9a:	2400      	movne	r4, #0
  403d9c:	d006      	beq.n	403dac <__libc_init_array+0x3c>
  403d9e:	3401      	adds	r4, #1
  403da0:	f855 3b04 	ldr.w	r3, [r5], #4
  403da4:	4798      	blx	r3
  403da6:	42a6      	cmp	r6, r4
  403da8:	d1f9      	bne.n	403d9e <__libc_init_array+0x2e>
  403daa:	bd70      	pop	{r4, r5, r6, pc}
  403dac:	bd70      	pop	{r4, r5, r6, pc}
  403dae:	bf00      	nop
  403db0:	0040900c 	.word	0x0040900c
  403db4:	0040900c 	.word	0x0040900c
  403db8:	00409014 	.word	0x00409014
  403dbc:	0040900c 	.word	0x0040900c

00403dc0 <memset>:
  403dc0:	b470      	push	{r4, r5, r6}
  403dc2:	0786      	lsls	r6, r0, #30
  403dc4:	d046      	beq.n	403e54 <memset+0x94>
  403dc6:	1e54      	subs	r4, r2, #1
  403dc8:	2a00      	cmp	r2, #0
  403dca:	d041      	beq.n	403e50 <memset+0x90>
  403dcc:	b2ca      	uxtb	r2, r1
  403dce:	4603      	mov	r3, r0
  403dd0:	e002      	b.n	403dd8 <memset+0x18>
  403dd2:	f114 34ff 	adds.w	r4, r4, #4294967295
  403dd6:	d33b      	bcc.n	403e50 <memset+0x90>
  403dd8:	f803 2b01 	strb.w	r2, [r3], #1
  403ddc:	079d      	lsls	r5, r3, #30
  403dde:	d1f8      	bne.n	403dd2 <memset+0x12>
  403de0:	2c03      	cmp	r4, #3
  403de2:	d92e      	bls.n	403e42 <memset+0x82>
  403de4:	b2cd      	uxtb	r5, r1
  403de6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403dea:	2c0f      	cmp	r4, #15
  403dec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403df0:	d919      	bls.n	403e26 <memset+0x66>
  403df2:	f103 0210 	add.w	r2, r3, #16
  403df6:	4626      	mov	r6, r4
  403df8:	3e10      	subs	r6, #16
  403dfa:	2e0f      	cmp	r6, #15
  403dfc:	f842 5c10 	str.w	r5, [r2, #-16]
  403e00:	f842 5c0c 	str.w	r5, [r2, #-12]
  403e04:	f842 5c08 	str.w	r5, [r2, #-8]
  403e08:	f842 5c04 	str.w	r5, [r2, #-4]
  403e0c:	f102 0210 	add.w	r2, r2, #16
  403e10:	d8f2      	bhi.n	403df8 <memset+0x38>
  403e12:	f1a4 0210 	sub.w	r2, r4, #16
  403e16:	f022 020f 	bic.w	r2, r2, #15
  403e1a:	f004 040f 	and.w	r4, r4, #15
  403e1e:	3210      	adds	r2, #16
  403e20:	2c03      	cmp	r4, #3
  403e22:	4413      	add	r3, r2
  403e24:	d90d      	bls.n	403e42 <memset+0x82>
  403e26:	461e      	mov	r6, r3
  403e28:	4622      	mov	r2, r4
  403e2a:	3a04      	subs	r2, #4
  403e2c:	2a03      	cmp	r2, #3
  403e2e:	f846 5b04 	str.w	r5, [r6], #4
  403e32:	d8fa      	bhi.n	403e2a <memset+0x6a>
  403e34:	1f22      	subs	r2, r4, #4
  403e36:	f022 0203 	bic.w	r2, r2, #3
  403e3a:	3204      	adds	r2, #4
  403e3c:	4413      	add	r3, r2
  403e3e:	f004 0403 	and.w	r4, r4, #3
  403e42:	b12c      	cbz	r4, 403e50 <memset+0x90>
  403e44:	b2c9      	uxtb	r1, r1
  403e46:	441c      	add	r4, r3
  403e48:	f803 1b01 	strb.w	r1, [r3], #1
  403e4c:	429c      	cmp	r4, r3
  403e4e:	d1fb      	bne.n	403e48 <memset+0x88>
  403e50:	bc70      	pop	{r4, r5, r6}
  403e52:	4770      	bx	lr
  403e54:	4614      	mov	r4, r2
  403e56:	4603      	mov	r3, r0
  403e58:	e7c2      	b.n	403de0 <memset+0x20>
  403e5a:	bf00      	nop

00403e5c <sprintf>:
  403e5c:	b40e      	push	{r1, r2, r3}
  403e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e60:	b09c      	sub	sp, #112	; 0x70
  403e62:	ab21      	add	r3, sp, #132	; 0x84
  403e64:	490f      	ldr	r1, [pc, #60]	; (403ea4 <sprintf+0x48>)
  403e66:	f853 2b04 	ldr.w	r2, [r3], #4
  403e6a:	9301      	str	r3, [sp, #4]
  403e6c:	4605      	mov	r5, r0
  403e6e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403e72:	6808      	ldr	r0, [r1, #0]
  403e74:	9502      	str	r5, [sp, #8]
  403e76:	f44f 7702 	mov.w	r7, #520	; 0x208
  403e7a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403e7e:	a902      	add	r1, sp, #8
  403e80:	9506      	str	r5, [sp, #24]
  403e82:	f8ad 7014 	strh.w	r7, [sp, #20]
  403e86:	9404      	str	r4, [sp, #16]
  403e88:	9407      	str	r4, [sp, #28]
  403e8a:	f8ad 6016 	strh.w	r6, [sp, #22]
  403e8e:	f000 f80b 	bl	403ea8 <_svfprintf_r>
  403e92:	9b02      	ldr	r3, [sp, #8]
  403e94:	2200      	movs	r2, #0
  403e96:	701a      	strb	r2, [r3, #0]
  403e98:	b01c      	add	sp, #112	; 0x70
  403e9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403e9e:	b003      	add	sp, #12
  403ea0:	4770      	bx	lr
  403ea2:	bf00      	nop
  403ea4:	20000008 	.word	0x20000008

00403ea8 <_svfprintf_r>:
  403ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403eac:	b0c3      	sub	sp, #268	; 0x10c
  403eae:	460c      	mov	r4, r1
  403eb0:	910b      	str	r1, [sp, #44]	; 0x2c
  403eb2:	4692      	mov	sl, r2
  403eb4:	930f      	str	r3, [sp, #60]	; 0x3c
  403eb6:	900c      	str	r0, [sp, #48]	; 0x30
  403eb8:	f002 fa0e 	bl	4062d8 <_localeconv_r>
  403ebc:	6803      	ldr	r3, [r0, #0]
  403ebe:	931a      	str	r3, [sp, #104]	; 0x68
  403ec0:	4618      	mov	r0, r3
  403ec2:	f003 f8dd 	bl	407080 <strlen>
  403ec6:	89a3      	ldrh	r3, [r4, #12]
  403ec8:	9019      	str	r0, [sp, #100]	; 0x64
  403eca:	0619      	lsls	r1, r3, #24
  403ecc:	d503      	bpl.n	403ed6 <_svfprintf_r+0x2e>
  403ece:	6923      	ldr	r3, [r4, #16]
  403ed0:	2b00      	cmp	r3, #0
  403ed2:	f001 8003 	beq.w	404edc <_svfprintf_r+0x1034>
  403ed6:	2300      	movs	r3, #0
  403ed8:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403edc:	9313      	str	r3, [sp, #76]	; 0x4c
  403ede:	9315      	str	r3, [sp, #84]	; 0x54
  403ee0:	9314      	str	r3, [sp, #80]	; 0x50
  403ee2:	9327      	str	r3, [sp, #156]	; 0x9c
  403ee4:	9326      	str	r3, [sp, #152]	; 0x98
  403ee6:	9318      	str	r3, [sp, #96]	; 0x60
  403ee8:	931b      	str	r3, [sp, #108]	; 0x6c
  403eea:	9309      	str	r3, [sp, #36]	; 0x24
  403eec:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403ef0:	46c8      	mov	r8, r9
  403ef2:	9316      	str	r3, [sp, #88]	; 0x58
  403ef4:	9317      	str	r3, [sp, #92]	; 0x5c
  403ef6:	f89a 3000 	ldrb.w	r3, [sl]
  403efa:	4654      	mov	r4, sl
  403efc:	b1e3      	cbz	r3, 403f38 <_svfprintf_r+0x90>
  403efe:	2b25      	cmp	r3, #37	; 0x25
  403f00:	d102      	bne.n	403f08 <_svfprintf_r+0x60>
  403f02:	e019      	b.n	403f38 <_svfprintf_r+0x90>
  403f04:	2b25      	cmp	r3, #37	; 0x25
  403f06:	d003      	beq.n	403f10 <_svfprintf_r+0x68>
  403f08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403f0c:	2b00      	cmp	r3, #0
  403f0e:	d1f9      	bne.n	403f04 <_svfprintf_r+0x5c>
  403f10:	eba4 050a 	sub.w	r5, r4, sl
  403f14:	b185      	cbz	r5, 403f38 <_svfprintf_r+0x90>
  403f16:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f18:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403f1a:	f8c8 a000 	str.w	sl, [r8]
  403f1e:	3301      	adds	r3, #1
  403f20:	442a      	add	r2, r5
  403f22:	2b07      	cmp	r3, #7
  403f24:	f8c8 5004 	str.w	r5, [r8, #4]
  403f28:	9227      	str	r2, [sp, #156]	; 0x9c
  403f2a:	9326      	str	r3, [sp, #152]	; 0x98
  403f2c:	dc7f      	bgt.n	40402e <_svfprintf_r+0x186>
  403f2e:	f108 0808 	add.w	r8, r8, #8
  403f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403f34:	442b      	add	r3, r5
  403f36:	9309      	str	r3, [sp, #36]	; 0x24
  403f38:	7823      	ldrb	r3, [r4, #0]
  403f3a:	2b00      	cmp	r3, #0
  403f3c:	d07f      	beq.n	40403e <_svfprintf_r+0x196>
  403f3e:	2300      	movs	r3, #0
  403f40:	461a      	mov	r2, r3
  403f42:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403f46:	4619      	mov	r1, r3
  403f48:	930d      	str	r3, [sp, #52]	; 0x34
  403f4a:	469b      	mov	fp, r3
  403f4c:	f04f 30ff 	mov.w	r0, #4294967295
  403f50:	7863      	ldrb	r3, [r4, #1]
  403f52:	900a      	str	r0, [sp, #40]	; 0x28
  403f54:	f104 0a01 	add.w	sl, r4, #1
  403f58:	f10a 0a01 	add.w	sl, sl, #1
  403f5c:	f1a3 0020 	sub.w	r0, r3, #32
  403f60:	2858      	cmp	r0, #88	; 0x58
  403f62:	f200 83c1 	bhi.w	4046e8 <_svfprintf_r+0x840>
  403f66:	e8df f010 	tbh	[pc, r0, lsl #1]
  403f6a:	0238      	.short	0x0238
  403f6c:	03bf03bf 	.word	0x03bf03bf
  403f70:	03bf0240 	.word	0x03bf0240
  403f74:	03bf03bf 	.word	0x03bf03bf
  403f78:	03bf03bf 	.word	0x03bf03bf
  403f7c:	024503bf 	.word	0x024503bf
  403f80:	03bf0203 	.word	0x03bf0203
  403f84:	026b005d 	.word	0x026b005d
  403f88:	028603bf 	.word	0x028603bf
  403f8c:	039d039d 	.word	0x039d039d
  403f90:	039d039d 	.word	0x039d039d
  403f94:	039d039d 	.word	0x039d039d
  403f98:	039d039d 	.word	0x039d039d
  403f9c:	03bf039d 	.word	0x03bf039d
  403fa0:	03bf03bf 	.word	0x03bf03bf
  403fa4:	03bf03bf 	.word	0x03bf03bf
  403fa8:	03bf03bf 	.word	0x03bf03bf
  403fac:	03bf03bf 	.word	0x03bf03bf
  403fb0:	033703bf 	.word	0x033703bf
  403fb4:	03bf0357 	.word	0x03bf0357
  403fb8:	03bf0357 	.word	0x03bf0357
  403fbc:	03bf03bf 	.word	0x03bf03bf
  403fc0:	039803bf 	.word	0x039803bf
  403fc4:	03bf03bf 	.word	0x03bf03bf
  403fc8:	03bf03ad 	.word	0x03bf03ad
  403fcc:	03bf03bf 	.word	0x03bf03bf
  403fd0:	03bf03bf 	.word	0x03bf03bf
  403fd4:	03bf0259 	.word	0x03bf0259
  403fd8:	031e03bf 	.word	0x031e03bf
  403fdc:	03bf03bf 	.word	0x03bf03bf
  403fe0:	03bf03bf 	.word	0x03bf03bf
  403fe4:	03bf03bf 	.word	0x03bf03bf
  403fe8:	03bf03bf 	.word	0x03bf03bf
  403fec:	03bf03bf 	.word	0x03bf03bf
  403ff0:	02db02c6 	.word	0x02db02c6
  403ff4:	03570357 	.word	0x03570357
  403ff8:	028b0357 	.word	0x028b0357
  403ffc:	03bf02db 	.word	0x03bf02db
  404000:	029003bf 	.word	0x029003bf
  404004:	029d03bf 	.word	0x029d03bf
  404008:	02b401cc 	.word	0x02b401cc
  40400c:	03bf0208 	.word	0x03bf0208
  404010:	03bf01e1 	.word	0x03bf01e1
  404014:	03bf007e 	.word	0x03bf007e
  404018:	020d03bf 	.word	0x020d03bf
  40401c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40401e:	930f      	str	r3, [sp, #60]	; 0x3c
  404020:	4240      	negs	r0, r0
  404022:	900d      	str	r0, [sp, #52]	; 0x34
  404024:	f04b 0b04 	orr.w	fp, fp, #4
  404028:	f89a 3000 	ldrb.w	r3, [sl]
  40402c:	e794      	b.n	403f58 <_svfprintf_r+0xb0>
  40402e:	aa25      	add	r2, sp, #148	; 0x94
  404030:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404032:	980c      	ldr	r0, [sp, #48]	; 0x30
  404034:	f003 f892 	bl	40715c <__ssprint_r>
  404038:	b940      	cbnz	r0, 40404c <_svfprintf_r+0x1a4>
  40403a:	46c8      	mov	r8, r9
  40403c:	e779      	b.n	403f32 <_svfprintf_r+0x8a>
  40403e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404040:	b123      	cbz	r3, 40404c <_svfprintf_r+0x1a4>
  404042:	980c      	ldr	r0, [sp, #48]	; 0x30
  404044:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404046:	aa25      	add	r2, sp, #148	; 0x94
  404048:	f003 f888 	bl	40715c <__ssprint_r>
  40404c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40404e:	899b      	ldrh	r3, [r3, #12]
  404050:	f013 0f40 	tst.w	r3, #64	; 0x40
  404054:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404056:	bf18      	it	ne
  404058:	f04f 33ff 	movne.w	r3, #4294967295
  40405c:	9309      	str	r3, [sp, #36]	; 0x24
  40405e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404060:	b043      	add	sp, #268	; 0x10c
  404062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404066:	f01b 0f20 	tst.w	fp, #32
  40406a:	9311      	str	r3, [sp, #68]	; 0x44
  40406c:	f040 81dd 	bne.w	40442a <_svfprintf_r+0x582>
  404070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404072:	f01b 0f10 	tst.w	fp, #16
  404076:	4613      	mov	r3, r2
  404078:	f040 856e 	bne.w	404b58 <_svfprintf_r+0xcb0>
  40407c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404080:	f000 856a 	beq.w	404b58 <_svfprintf_r+0xcb0>
  404084:	8814      	ldrh	r4, [r2, #0]
  404086:	3204      	adds	r2, #4
  404088:	2500      	movs	r5, #0
  40408a:	2301      	movs	r3, #1
  40408c:	920f      	str	r2, [sp, #60]	; 0x3c
  40408e:	2700      	movs	r7, #0
  404090:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404094:	990a      	ldr	r1, [sp, #40]	; 0x28
  404096:	1c4a      	adds	r2, r1, #1
  404098:	f000 8265 	beq.w	404566 <_svfprintf_r+0x6be>
  40409c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4040a0:	9207      	str	r2, [sp, #28]
  4040a2:	ea54 0205 	orrs.w	r2, r4, r5
  4040a6:	f040 8264 	bne.w	404572 <_svfprintf_r+0x6ca>
  4040aa:	2900      	cmp	r1, #0
  4040ac:	f040 843c 	bne.w	404928 <_svfprintf_r+0xa80>
  4040b0:	2b00      	cmp	r3, #0
  4040b2:	f040 84d7 	bne.w	404a64 <_svfprintf_r+0xbbc>
  4040b6:	f01b 0301 	ands.w	r3, fp, #1
  4040ba:	930e      	str	r3, [sp, #56]	; 0x38
  4040bc:	f000 8604 	beq.w	404cc8 <_svfprintf_r+0xe20>
  4040c0:	ae42      	add	r6, sp, #264	; 0x108
  4040c2:	2330      	movs	r3, #48	; 0x30
  4040c4:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4040c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4040ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4040cc:	4293      	cmp	r3, r2
  4040ce:	bfb8      	it	lt
  4040d0:	4613      	movlt	r3, r2
  4040d2:	9308      	str	r3, [sp, #32]
  4040d4:	2300      	movs	r3, #0
  4040d6:	9312      	str	r3, [sp, #72]	; 0x48
  4040d8:	b117      	cbz	r7, 4040e0 <_svfprintf_r+0x238>
  4040da:	9b08      	ldr	r3, [sp, #32]
  4040dc:	3301      	adds	r3, #1
  4040de:	9308      	str	r3, [sp, #32]
  4040e0:	9b07      	ldr	r3, [sp, #28]
  4040e2:	f013 0302 	ands.w	r3, r3, #2
  4040e6:	9310      	str	r3, [sp, #64]	; 0x40
  4040e8:	d002      	beq.n	4040f0 <_svfprintf_r+0x248>
  4040ea:	9b08      	ldr	r3, [sp, #32]
  4040ec:	3302      	adds	r3, #2
  4040ee:	9308      	str	r3, [sp, #32]
  4040f0:	9b07      	ldr	r3, [sp, #28]
  4040f2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4040f6:	f040 830e 	bne.w	404716 <_svfprintf_r+0x86e>
  4040fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4040fc:	9a08      	ldr	r2, [sp, #32]
  4040fe:	eba3 0b02 	sub.w	fp, r3, r2
  404102:	f1bb 0f00 	cmp.w	fp, #0
  404106:	f340 8306 	ble.w	404716 <_svfprintf_r+0x86e>
  40410a:	f1bb 0f10 	cmp.w	fp, #16
  40410e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404110:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404112:	dd29      	ble.n	404168 <_svfprintf_r+0x2c0>
  404114:	4643      	mov	r3, r8
  404116:	4621      	mov	r1, r4
  404118:	46a8      	mov	r8, r5
  40411a:	2710      	movs	r7, #16
  40411c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40411e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404120:	e006      	b.n	404130 <_svfprintf_r+0x288>
  404122:	f1ab 0b10 	sub.w	fp, fp, #16
  404126:	f1bb 0f10 	cmp.w	fp, #16
  40412a:	f103 0308 	add.w	r3, r3, #8
  40412e:	dd18      	ble.n	404162 <_svfprintf_r+0x2ba>
  404130:	3201      	adds	r2, #1
  404132:	48b7      	ldr	r0, [pc, #732]	; (404410 <_svfprintf_r+0x568>)
  404134:	9226      	str	r2, [sp, #152]	; 0x98
  404136:	3110      	adds	r1, #16
  404138:	2a07      	cmp	r2, #7
  40413a:	9127      	str	r1, [sp, #156]	; 0x9c
  40413c:	e883 0081 	stmia.w	r3, {r0, r7}
  404140:	ddef      	ble.n	404122 <_svfprintf_r+0x27a>
  404142:	aa25      	add	r2, sp, #148	; 0x94
  404144:	4629      	mov	r1, r5
  404146:	4620      	mov	r0, r4
  404148:	f003 f808 	bl	40715c <__ssprint_r>
  40414c:	2800      	cmp	r0, #0
  40414e:	f47f af7d 	bne.w	40404c <_svfprintf_r+0x1a4>
  404152:	f1ab 0b10 	sub.w	fp, fp, #16
  404156:	f1bb 0f10 	cmp.w	fp, #16
  40415a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40415c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40415e:	464b      	mov	r3, r9
  404160:	dce6      	bgt.n	404130 <_svfprintf_r+0x288>
  404162:	4645      	mov	r5, r8
  404164:	460c      	mov	r4, r1
  404166:	4698      	mov	r8, r3
  404168:	3201      	adds	r2, #1
  40416a:	4ba9      	ldr	r3, [pc, #676]	; (404410 <_svfprintf_r+0x568>)
  40416c:	9226      	str	r2, [sp, #152]	; 0x98
  40416e:	445c      	add	r4, fp
  404170:	2a07      	cmp	r2, #7
  404172:	9427      	str	r4, [sp, #156]	; 0x9c
  404174:	e888 0808 	stmia.w	r8, {r3, fp}
  404178:	f300 8498 	bgt.w	404aac <_svfprintf_r+0xc04>
  40417c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404180:	f108 0808 	add.w	r8, r8, #8
  404184:	b177      	cbz	r7, 4041a4 <_svfprintf_r+0x2fc>
  404186:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404188:	3301      	adds	r3, #1
  40418a:	3401      	adds	r4, #1
  40418c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404190:	2201      	movs	r2, #1
  404192:	2b07      	cmp	r3, #7
  404194:	9427      	str	r4, [sp, #156]	; 0x9c
  404196:	9326      	str	r3, [sp, #152]	; 0x98
  404198:	e888 0006 	stmia.w	r8, {r1, r2}
  40419c:	f300 83db 	bgt.w	404956 <_svfprintf_r+0xaae>
  4041a0:	f108 0808 	add.w	r8, r8, #8
  4041a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4041a6:	b16b      	cbz	r3, 4041c4 <_svfprintf_r+0x31c>
  4041a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041aa:	3301      	adds	r3, #1
  4041ac:	3402      	adds	r4, #2
  4041ae:	a91e      	add	r1, sp, #120	; 0x78
  4041b0:	2202      	movs	r2, #2
  4041b2:	2b07      	cmp	r3, #7
  4041b4:	9427      	str	r4, [sp, #156]	; 0x9c
  4041b6:	9326      	str	r3, [sp, #152]	; 0x98
  4041b8:	e888 0006 	stmia.w	r8, {r1, r2}
  4041bc:	f300 83d6 	bgt.w	40496c <_svfprintf_r+0xac4>
  4041c0:	f108 0808 	add.w	r8, r8, #8
  4041c4:	2d80      	cmp	r5, #128	; 0x80
  4041c6:	f000 8315 	beq.w	4047f4 <_svfprintf_r+0x94c>
  4041ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4041cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4041ce:	1a9f      	subs	r7, r3, r2
  4041d0:	2f00      	cmp	r7, #0
  4041d2:	dd36      	ble.n	404242 <_svfprintf_r+0x39a>
  4041d4:	2f10      	cmp	r7, #16
  4041d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041d8:	4d8e      	ldr	r5, [pc, #568]	; (404414 <_svfprintf_r+0x56c>)
  4041da:	dd27      	ble.n	40422c <_svfprintf_r+0x384>
  4041dc:	4642      	mov	r2, r8
  4041de:	4621      	mov	r1, r4
  4041e0:	46b0      	mov	r8, r6
  4041e2:	f04f 0b10 	mov.w	fp, #16
  4041e6:	462e      	mov	r6, r5
  4041e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4041ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4041ec:	e004      	b.n	4041f8 <_svfprintf_r+0x350>
  4041ee:	3f10      	subs	r7, #16
  4041f0:	2f10      	cmp	r7, #16
  4041f2:	f102 0208 	add.w	r2, r2, #8
  4041f6:	dd15      	ble.n	404224 <_svfprintf_r+0x37c>
  4041f8:	3301      	adds	r3, #1
  4041fa:	3110      	adds	r1, #16
  4041fc:	2b07      	cmp	r3, #7
  4041fe:	9127      	str	r1, [sp, #156]	; 0x9c
  404200:	9326      	str	r3, [sp, #152]	; 0x98
  404202:	e882 0840 	stmia.w	r2, {r6, fp}
  404206:	ddf2      	ble.n	4041ee <_svfprintf_r+0x346>
  404208:	aa25      	add	r2, sp, #148	; 0x94
  40420a:	4629      	mov	r1, r5
  40420c:	4620      	mov	r0, r4
  40420e:	f002 ffa5 	bl	40715c <__ssprint_r>
  404212:	2800      	cmp	r0, #0
  404214:	f47f af1a 	bne.w	40404c <_svfprintf_r+0x1a4>
  404218:	3f10      	subs	r7, #16
  40421a:	2f10      	cmp	r7, #16
  40421c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40421e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404220:	464a      	mov	r2, r9
  404222:	dce9      	bgt.n	4041f8 <_svfprintf_r+0x350>
  404224:	4635      	mov	r5, r6
  404226:	460c      	mov	r4, r1
  404228:	4646      	mov	r6, r8
  40422a:	4690      	mov	r8, r2
  40422c:	3301      	adds	r3, #1
  40422e:	443c      	add	r4, r7
  404230:	2b07      	cmp	r3, #7
  404232:	9427      	str	r4, [sp, #156]	; 0x9c
  404234:	9326      	str	r3, [sp, #152]	; 0x98
  404236:	e888 00a0 	stmia.w	r8, {r5, r7}
  40423a:	f300 8381 	bgt.w	404940 <_svfprintf_r+0xa98>
  40423e:	f108 0808 	add.w	r8, r8, #8
  404242:	9b07      	ldr	r3, [sp, #28]
  404244:	05df      	lsls	r7, r3, #23
  404246:	f100 8268 	bmi.w	40471a <_svfprintf_r+0x872>
  40424a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40424c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40424e:	f8c8 6000 	str.w	r6, [r8]
  404252:	3301      	adds	r3, #1
  404254:	440c      	add	r4, r1
  404256:	2b07      	cmp	r3, #7
  404258:	9427      	str	r4, [sp, #156]	; 0x9c
  40425a:	f8c8 1004 	str.w	r1, [r8, #4]
  40425e:	9326      	str	r3, [sp, #152]	; 0x98
  404260:	f300 834d 	bgt.w	4048fe <_svfprintf_r+0xa56>
  404264:	f108 0808 	add.w	r8, r8, #8
  404268:	9b07      	ldr	r3, [sp, #28]
  40426a:	075b      	lsls	r3, r3, #29
  40426c:	d53a      	bpl.n	4042e4 <_svfprintf_r+0x43c>
  40426e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404270:	9a08      	ldr	r2, [sp, #32]
  404272:	1a9d      	subs	r5, r3, r2
  404274:	2d00      	cmp	r5, #0
  404276:	dd35      	ble.n	4042e4 <_svfprintf_r+0x43c>
  404278:	2d10      	cmp	r5, #16
  40427a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40427c:	dd20      	ble.n	4042c0 <_svfprintf_r+0x418>
  40427e:	2610      	movs	r6, #16
  404280:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404282:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404286:	e004      	b.n	404292 <_svfprintf_r+0x3ea>
  404288:	3d10      	subs	r5, #16
  40428a:	2d10      	cmp	r5, #16
  40428c:	f108 0808 	add.w	r8, r8, #8
  404290:	dd16      	ble.n	4042c0 <_svfprintf_r+0x418>
  404292:	3301      	adds	r3, #1
  404294:	4a5e      	ldr	r2, [pc, #376]	; (404410 <_svfprintf_r+0x568>)
  404296:	9326      	str	r3, [sp, #152]	; 0x98
  404298:	3410      	adds	r4, #16
  40429a:	2b07      	cmp	r3, #7
  40429c:	9427      	str	r4, [sp, #156]	; 0x9c
  40429e:	e888 0044 	stmia.w	r8, {r2, r6}
  4042a2:	ddf1      	ble.n	404288 <_svfprintf_r+0x3e0>
  4042a4:	aa25      	add	r2, sp, #148	; 0x94
  4042a6:	4659      	mov	r1, fp
  4042a8:	4638      	mov	r0, r7
  4042aa:	f002 ff57 	bl	40715c <__ssprint_r>
  4042ae:	2800      	cmp	r0, #0
  4042b0:	f47f aecc 	bne.w	40404c <_svfprintf_r+0x1a4>
  4042b4:	3d10      	subs	r5, #16
  4042b6:	2d10      	cmp	r5, #16
  4042b8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4042ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042bc:	46c8      	mov	r8, r9
  4042be:	dce8      	bgt.n	404292 <_svfprintf_r+0x3ea>
  4042c0:	3301      	adds	r3, #1
  4042c2:	4a53      	ldr	r2, [pc, #332]	; (404410 <_svfprintf_r+0x568>)
  4042c4:	9326      	str	r3, [sp, #152]	; 0x98
  4042c6:	442c      	add	r4, r5
  4042c8:	2b07      	cmp	r3, #7
  4042ca:	9427      	str	r4, [sp, #156]	; 0x9c
  4042cc:	e888 0024 	stmia.w	r8, {r2, r5}
  4042d0:	dd08      	ble.n	4042e4 <_svfprintf_r+0x43c>
  4042d2:	aa25      	add	r2, sp, #148	; 0x94
  4042d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4042d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4042d8:	f002 ff40 	bl	40715c <__ssprint_r>
  4042dc:	2800      	cmp	r0, #0
  4042de:	f47f aeb5 	bne.w	40404c <_svfprintf_r+0x1a4>
  4042e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4042e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4042e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4042e8:	9908      	ldr	r1, [sp, #32]
  4042ea:	428a      	cmp	r2, r1
  4042ec:	bfac      	ite	ge
  4042ee:	189b      	addge	r3, r3, r2
  4042f0:	185b      	addlt	r3, r3, r1
  4042f2:	9309      	str	r3, [sp, #36]	; 0x24
  4042f4:	2c00      	cmp	r4, #0
  4042f6:	f040 830d 	bne.w	404914 <_svfprintf_r+0xa6c>
  4042fa:	2300      	movs	r3, #0
  4042fc:	9326      	str	r3, [sp, #152]	; 0x98
  4042fe:	46c8      	mov	r8, r9
  404300:	e5f9      	b.n	403ef6 <_svfprintf_r+0x4e>
  404302:	9311      	str	r3, [sp, #68]	; 0x44
  404304:	f01b 0320 	ands.w	r3, fp, #32
  404308:	f040 81e3 	bne.w	4046d2 <_svfprintf_r+0x82a>
  40430c:	f01b 0210 	ands.w	r2, fp, #16
  404310:	f040 842e 	bne.w	404b70 <_svfprintf_r+0xcc8>
  404314:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404318:	f000 842a 	beq.w	404b70 <_svfprintf_r+0xcc8>
  40431c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40431e:	4613      	mov	r3, r2
  404320:	460a      	mov	r2, r1
  404322:	3204      	adds	r2, #4
  404324:	880c      	ldrh	r4, [r1, #0]
  404326:	920f      	str	r2, [sp, #60]	; 0x3c
  404328:	2500      	movs	r5, #0
  40432a:	e6b0      	b.n	40408e <_svfprintf_r+0x1e6>
  40432c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40432e:	9311      	str	r3, [sp, #68]	; 0x44
  404330:	6816      	ldr	r6, [r2, #0]
  404332:	2400      	movs	r4, #0
  404334:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404338:	1d15      	adds	r5, r2, #4
  40433a:	2e00      	cmp	r6, #0
  40433c:	f000 86a7 	beq.w	40508e <_svfprintf_r+0x11e6>
  404340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404342:	1c53      	adds	r3, r2, #1
  404344:	f000 8609 	beq.w	404f5a <_svfprintf_r+0x10b2>
  404348:	4621      	mov	r1, r4
  40434a:	4630      	mov	r0, r6
  40434c:	f002 fa88 	bl	406860 <memchr>
  404350:	2800      	cmp	r0, #0
  404352:	f000 86e1 	beq.w	405118 <_svfprintf_r+0x1270>
  404356:	1b83      	subs	r3, r0, r6
  404358:	930e      	str	r3, [sp, #56]	; 0x38
  40435a:	940a      	str	r4, [sp, #40]	; 0x28
  40435c:	950f      	str	r5, [sp, #60]	; 0x3c
  40435e:	f8cd b01c 	str.w	fp, [sp, #28]
  404362:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404366:	9308      	str	r3, [sp, #32]
  404368:	9412      	str	r4, [sp, #72]	; 0x48
  40436a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40436e:	e6b3      	b.n	4040d8 <_svfprintf_r+0x230>
  404370:	f89a 3000 	ldrb.w	r3, [sl]
  404374:	2201      	movs	r2, #1
  404376:	212b      	movs	r1, #43	; 0x2b
  404378:	e5ee      	b.n	403f58 <_svfprintf_r+0xb0>
  40437a:	f04b 0b20 	orr.w	fp, fp, #32
  40437e:	f89a 3000 	ldrb.w	r3, [sl]
  404382:	e5e9      	b.n	403f58 <_svfprintf_r+0xb0>
  404384:	9311      	str	r3, [sp, #68]	; 0x44
  404386:	2a00      	cmp	r2, #0
  404388:	f040 8795 	bne.w	4052b6 <_svfprintf_r+0x140e>
  40438c:	4b22      	ldr	r3, [pc, #136]	; (404418 <_svfprintf_r+0x570>)
  40438e:	9318      	str	r3, [sp, #96]	; 0x60
  404390:	f01b 0f20 	tst.w	fp, #32
  404394:	f040 8111 	bne.w	4045ba <_svfprintf_r+0x712>
  404398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40439a:	f01b 0f10 	tst.w	fp, #16
  40439e:	4613      	mov	r3, r2
  4043a0:	f040 83e1 	bne.w	404b66 <_svfprintf_r+0xcbe>
  4043a4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4043a8:	f000 83dd 	beq.w	404b66 <_svfprintf_r+0xcbe>
  4043ac:	3304      	adds	r3, #4
  4043ae:	8814      	ldrh	r4, [r2, #0]
  4043b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4043b2:	2500      	movs	r5, #0
  4043b4:	f01b 0f01 	tst.w	fp, #1
  4043b8:	f000 810c 	beq.w	4045d4 <_svfprintf_r+0x72c>
  4043bc:	ea54 0305 	orrs.w	r3, r4, r5
  4043c0:	f000 8108 	beq.w	4045d4 <_svfprintf_r+0x72c>
  4043c4:	2330      	movs	r3, #48	; 0x30
  4043c6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4043ca:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4043ce:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4043d2:	f04b 0b02 	orr.w	fp, fp, #2
  4043d6:	2302      	movs	r3, #2
  4043d8:	e659      	b.n	40408e <_svfprintf_r+0x1e6>
  4043da:	f89a 3000 	ldrb.w	r3, [sl]
  4043de:	2900      	cmp	r1, #0
  4043e0:	f47f adba 	bne.w	403f58 <_svfprintf_r+0xb0>
  4043e4:	2201      	movs	r2, #1
  4043e6:	2120      	movs	r1, #32
  4043e8:	e5b6      	b.n	403f58 <_svfprintf_r+0xb0>
  4043ea:	f04b 0b01 	orr.w	fp, fp, #1
  4043ee:	f89a 3000 	ldrb.w	r3, [sl]
  4043f2:	e5b1      	b.n	403f58 <_svfprintf_r+0xb0>
  4043f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4043f6:	6823      	ldr	r3, [r4, #0]
  4043f8:	930d      	str	r3, [sp, #52]	; 0x34
  4043fa:	4618      	mov	r0, r3
  4043fc:	2800      	cmp	r0, #0
  4043fe:	4623      	mov	r3, r4
  404400:	f103 0304 	add.w	r3, r3, #4
  404404:	f6ff ae0a 	blt.w	40401c <_svfprintf_r+0x174>
  404408:	930f      	str	r3, [sp, #60]	; 0x3c
  40440a:	f89a 3000 	ldrb.w	r3, [sl]
  40440e:	e5a3      	b.n	403f58 <_svfprintf_r+0xb0>
  404410:	00408dbc 	.word	0x00408dbc
  404414:	00408dcc 	.word	0x00408dcc
  404418:	00408d9c 	.word	0x00408d9c
  40441c:	f04b 0b10 	orr.w	fp, fp, #16
  404420:	f01b 0f20 	tst.w	fp, #32
  404424:	9311      	str	r3, [sp, #68]	; 0x44
  404426:	f43f ae23 	beq.w	404070 <_svfprintf_r+0x1c8>
  40442a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40442c:	3507      	adds	r5, #7
  40442e:	f025 0307 	bic.w	r3, r5, #7
  404432:	f103 0208 	add.w	r2, r3, #8
  404436:	e9d3 4500 	ldrd	r4, r5, [r3]
  40443a:	920f      	str	r2, [sp, #60]	; 0x3c
  40443c:	2301      	movs	r3, #1
  40443e:	e626      	b.n	40408e <_svfprintf_r+0x1e6>
  404440:	f89a 3000 	ldrb.w	r3, [sl]
  404444:	2b2a      	cmp	r3, #42	; 0x2a
  404446:	f10a 0401 	add.w	r4, sl, #1
  40444a:	f000 8727 	beq.w	40529c <_svfprintf_r+0x13f4>
  40444e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404452:	2809      	cmp	r0, #9
  404454:	46a2      	mov	sl, r4
  404456:	f200 86ad 	bhi.w	4051b4 <_svfprintf_r+0x130c>
  40445a:	2300      	movs	r3, #0
  40445c:	461c      	mov	r4, r3
  40445e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404462:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404466:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40446a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40446e:	2809      	cmp	r0, #9
  404470:	d9f5      	bls.n	40445e <_svfprintf_r+0x5b6>
  404472:	940a      	str	r4, [sp, #40]	; 0x28
  404474:	e572      	b.n	403f5c <_svfprintf_r+0xb4>
  404476:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40447a:	f89a 3000 	ldrb.w	r3, [sl]
  40447e:	e56b      	b.n	403f58 <_svfprintf_r+0xb0>
  404480:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404484:	f89a 3000 	ldrb.w	r3, [sl]
  404488:	e566      	b.n	403f58 <_svfprintf_r+0xb0>
  40448a:	f89a 3000 	ldrb.w	r3, [sl]
  40448e:	2b6c      	cmp	r3, #108	; 0x6c
  404490:	bf03      	ittte	eq
  404492:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404496:	f04b 0b20 	orreq.w	fp, fp, #32
  40449a:	f10a 0a01 	addeq.w	sl, sl, #1
  40449e:	f04b 0b10 	orrne.w	fp, fp, #16
  4044a2:	e559      	b.n	403f58 <_svfprintf_r+0xb0>
  4044a4:	2a00      	cmp	r2, #0
  4044a6:	f040 8711 	bne.w	4052cc <_svfprintf_r+0x1424>
  4044aa:	f01b 0f20 	tst.w	fp, #32
  4044ae:	f040 84f9 	bne.w	404ea4 <_svfprintf_r+0xffc>
  4044b2:	f01b 0f10 	tst.w	fp, #16
  4044b6:	f040 84ac 	bne.w	404e12 <_svfprintf_r+0xf6a>
  4044ba:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4044be:	f000 84a8 	beq.w	404e12 <_svfprintf_r+0xf6a>
  4044c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4044c4:	6813      	ldr	r3, [r2, #0]
  4044c6:	3204      	adds	r2, #4
  4044c8:	920f      	str	r2, [sp, #60]	; 0x3c
  4044ca:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4044ce:	801a      	strh	r2, [r3, #0]
  4044d0:	e511      	b.n	403ef6 <_svfprintf_r+0x4e>
  4044d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4044d4:	4bb3      	ldr	r3, [pc, #716]	; (4047a4 <_svfprintf_r+0x8fc>)
  4044d6:	680c      	ldr	r4, [r1, #0]
  4044d8:	9318      	str	r3, [sp, #96]	; 0x60
  4044da:	2230      	movs	r2, #48	; 0x30
  4044dc:	2378      	movs	r3, #120	; 0x78
  4044de:	3104      	adds	r1, #4
  4044e0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4044e4:	9311      	str	r3, [sp, #68]	; 0x44
  4044e6:	f04b 0b02 	orr.w	fp, fp, #2
  4044ea:	910f      	str	r1, [sp, #60]	; 0x3c
  4044ec:	2500      	movs	r5, #0
  4044ee:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4044f2:	2302      	movs	r3, #2
  4044f4:	e5cb      	b.n	40408e <_svfprintf_r+0x1e6>
  4044f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4044f8:	9311      	str	r3, [sp, #68]	; 0x44
  4044fa:	680a      	ldr	r2, [r1, #0]
  4044fc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404500:	2300      	movs	r3, #0
  404502:	460a      	mov	r2, r1
  404504:	461f      	mov	r7, r3
  404506:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40450a:	3204      	adds	r2, #4
  40450c:	2301      	movs	r3, #1
  40450e:	9308      	str	r3, [sp, #32]
  404510:	f8cd b01c 	str.w	fp, [sp, #28]
  404514:	970a      	str	r7, [sp, #40]	; 0x28
  404516:	9712      	str	r7, [sp, #72]	; 0x48
  404518:	920f      	str	r2, [sp, #60]	; 0x3c
  40451a:	930e      	str	r3, [sp, #56]	; 0x38
  40451c:	ae28      	add	r6, sp, #160	; 0xa0
  40451e:	e5df      	b.n	4040e0 <_svfprintf_r+0x238>
  404520:	9311      	str	r3, [sp, #68]	; 0x44
  404522:	2a00      	cmp	r2, #0
  404524:	f040 86ea 	bne.w	4052fc <_svfprintf_r+0x1454>
  404528:	f01b 0f20 	tst.w	fp, #32
  40452c:	d15d      	bne.n	4045ea <_svfprintf_r+0x742>
  40452e:	f01b 0f10 	tst.w	fp, #16
  404532:	f040 8308 	bne.w	404b46 <_svfprintf_r+0xc9e>
  404536:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40453a:	f000 8304 	beq.w	404b46 <_svfprintf_r+0xc9e>
  40453e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404540:	f9b1 4000 	ldrsh.w	r4, [r1]
  404544:	3104      	adds	r1, #4
  404546:	17e5      	asrs	r5, r4, #31
  404548:	4622      	mov	r2, r4
  40454a:	462b      	mov	r3, r5
  40454c:	910f      	str	r1, [sp, #60]	; 0x3c
  40454e:	2a00      	cmp	r2, #0
  404550:	f173 0300 	sbcs.w	r3, r3, #0
  404554:	db58      	blt.n	404608 <_svfprintf_r+0x760>
  404556:	990a      	ldr	r1, [sp, #40]	; 0x28
  404558:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40455c:	1c4a      	adds	r2, r1, #1
  40455e:	f04f 0301 	mov.w	r3, #1
  404562:	f47f ad9b 	bne.w	40409c <_svfprintf_r+0x1f4>
  404566:	ea54 0205 	orrs.w	r2, r4, r5
  40456a:	f000 81df 	beq.w	40492c <_svfprintf_r+0xa84>
  40456e:	f8cd b01c 	str.w	fp, [sp, #28]
  404572:	2b01      	cmp	r3, #1
  404574:	f000 827b 	beq.w	404a6e <_svfprintf_r+0xbc6>
  404578:	2b02      	cmp	r3, #2
  40457a:	f040 8206 	bne.w	40498a <_svfprintf_r+0xae2>
  40457e:	9818      	ldr	r0, [sp, #96]	; 0x60
  404580:	464e      	mov	r6, r9
  404582:	0923      	lsrs	r3, r4, #4
  404584:	f004 010f 	and.w	r1, r4, #15
  404588:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40458c:	092a      	lsrs	r2, r5, #4
  40458e:	461c      	mov	r4, r3
  404590:	4615      	mov	r5, r2
  404592:	5c43      	ldrb	r3, [r0, r1]
  404594:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404598:	ea54 0305 	orrs.w	r3, r4, r5
  40459c:	d1f1      	bne.n	404582 <_svfprintf_r+0x6da>
  40459e:	eba9 0306 	sub.w	r3, r9, r6
  4045a2:	930e      	str	r3, [sp, #56]	; 0x38
  4045a4:	e590      	b.n	4040c8 <_svfprintf_r+0x220>
  4045a6:	9311      	str	r3, [sp, #68]	; 0x44
  4045a8:	2a00      	cmp	r2, #0
  4045aa:	f040 86a3 	bne.w	4052f4 <_svfprintf_r+0x144c>
  4045ae:	4b7e      	ldr	r3, [pc, #504]	; (4047a8 <_svfprintf_r+0x900>)
  4045b0:	9318      	str	r3, [sp, #96]	; 0x60
  4045b2:	f01b 0f20 	tst.w	fp, #32
  4045b6:	f43f aeef 	beq.w	404398 <_svfprintf_r+0x4f0>
  4045ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4045bc:	3507      	adds	r5, #7
  4045be:	f025 0307 	bic.w	r3, r5, #7
  4045c2:	f103 0208 	add.w	r2, r3, #8
  4045c6:	f01b 0f01 	tst.w	fp, #1
  4045ca:	920f      	str	r2, [sp, #60]	; 0x3c
  4045cc:	e9d3 4500 	ldrd	r4, r5, [r3]
  4045d0:	f47f aef4 	bne.w	4043bc <_svfprintf_r+0x514>
  4045d4:	2302      	movs	r3, #2
  4045d6:	e55a      	b.n	40408e <_svfprintf_r+0x1e6>
  4045d8:	9311      	str	r3, [sp, #68]	; 0x44
  4045da:	2a00      	cmp	r2, #0
  4045dc:	f040 8686 	bne.w	4052ec <_svfprintf_r+0x1444>
  4045e0:	f04b 0b10 	orr.w	fp, fp, #16
  4045e4:	f01b 0f20 	tst.w	fp, #32
  4045e8:	d0a1      	beq.n	40452e <_svfprintf_r+0x686>
  4045ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4045ec:	3507      	adds	r5, #7
  4045ee:	f025 0507 	bic.w	r5, r5, #7
  4045f2:	e9d5 2300 	ldrd	r2, r3, [r5]
  4045f6:	2a00      	cmp	r2, #0
  4045f8:	f105 0108 	add.w	r1, r5, #8
  4045fc:	461d      	mov	r5, r3
  4045fe:	f173 0300 	sbcs.w	r3, r3, #0
  404602:	910f      	str	r1, [sp, #60]	; 0x3c
  404604:	4614      	mov	r4, r2
  404606:	daa6      	bge.n	404556 <_svfprintf_r+0x6ae>
  404608:	272d      	movs	r7, #45	; 0x2d
  40460a:	4264      	negs	r4, r4
  40460c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404610:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404614:	2301      	movs	r3, #1
  404616:	e53d      	b.n	404094 <_svfprintf_r+0x1ec>
  404618:	9311      	str	r3, [sp, #68]	; 0x44
  40461a:	2a00      	cmp	r2, #0
  40461c:	f040 8662 	bne.w	4052e4 <_svfprintf_r+0x143c>
  404620:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404622:	3507      	adds	r5, #7
  404624:	f025 0307 	bic.w	r3, r5, #7
  404628:	f103 0208 	add.w	r2, r3, #8
  40462c:	920f      	str	r2, [sp, #60]	; 0x3c
  40462e:	681a      	ldr	r2, [r3, #0]
  404630:	9215      	str	r2, [sp, #84]	; 0x54
  404632:	685b      	ldr	r3, [r3, #4]
  404634:	9314      	str	r3, [sp, #80]	; 0x50
  404636:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404638:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40463a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40463e:	4628      	mov	r0, r5
  404640:	4621      	mov	r1, r4
  404642:	f04f 32ff 	mov.w	r2, #4294967295
  404646:	4b59      	ldr	r3, [pc, #356]	; (4047ac <_svfprintf_r+0x904>)
  404648:	f003 fe4e 	bl	4082e8 <__aeabi_dcmpun>
  40464c:	2800      	cmp	r0, #0
  40464e:	f040 834a 	bne.w	404ce6 <_svfprintf_r+0xe3e>
  404652:	4628      	mov	r0, r5
  404654:	4621      	mov	r1, r4
  404656:	f04f 32ff 	mov.w	r2, #4294967295
  40465a:	4b54      	ldr	r3, [pc, #336]	; (4047ac <_svfprintf_r+0x904>)
  40465c:	f003 fe26 	bl	4082ac <__aeabi_dcmple>
  404660:	2800      	cmp	r0, #0
  404662:	f040 8340 	bne.w	404ce6 <_svfprintf_r+0xe3e>
  404666:	a815      	add	r0, sp, #84	; 0x54
  404668:	c80d      	ldmia	r0, {r0, r2, r3}
  40466a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40466c:	f003 fe14 	bl	408298 <__aeabi_dcmplt>
  404670:	2800      	cmp	r0, #0
  404672:	f040 8530 	bne.w	4050d6 <_svfprintf_r+0x122e>
  404676:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40467a:	4e4d      	ldr	r6, [pc, #308]	; (4047b0 <_svfprintf_r+0x908>)
  40467c:	4b4d      	ldr	r3, [pc, #308]	; (4047b4 <_svfprintf_r+0x90c>)
  40467e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404682:	9007      	str	r0, [sp, #28]
  404684:	9811      	ldr	r0, [sp, #68]	; 0x44
  404686:	2203      	movs	r2, #3
  404688:	2100      	movs	r1, #0
  40468a:	9208      	str	r2, [sp, #32]
  40468c:	910a      	str	r1, [sp, #40]	; 0x28
  40468e:	2847      	cmp	r0, #71	; 0x47
  404690:	bfd8      	it	le
  404692:	461e      	movle	r6, r3
  404694:	920e      	str	r2, [sp, #56]	; 0x38
  404696:	9112      	str	r1, [sp, #72]	; 0x48
  404698:	e51e      	b.n	4040d8 <_svfprintf_r+0x230>
  40469a:	f04b 0b08 	orr.w	fp, fp, #8
  40469e:	f89a 3000 	ldrb.w	r3, [sl]
  4046a2:	e459      	b.n	403f58 <_svfprintf_r+0xb0>
  4046a4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4046a8:	2300      	movs	r3, #0
  4046aa:	461c      	mov	r4, r3
  4046ac:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4046b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4046b4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4046b8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4046bc:	2809      	cmp	r0, #9
  4046be:	d9f5      	bls.n	4046ac <_svfprintf_r+0x804>
  4046c0:	940d      	str	r4, [sp, #52]	; 0x34
  4046c2:	e44b      	b.n	403f5c <_svfprintf_r+0xb4>
  4046c4:	f04b 0b10 	orr.w	fp, fp, #16
  4046c8:	9311      	str	r3, [sp, #68]	; 0x44
  4046ca:	f01b 0320 	ands.w	r3, fp, #32
  4046ce:	f43f ae1d 	beq.w	40430c <_svfprintf_r+0x464>
  4046d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4046d4:	3507      	adds	r5, #7
  4046d6:	f025 0307 	bic.w	r3, r5, #7
  4046da:	f103 0208 	add.w	r2, r3, #8
  4046de:	e9d3 4500 	ldrd	r4, r5, [r3]
  4046e2:	920f      	str	r2, [sp, #60]	; 0x3c
  4046e4:	2300      	movs	r3, #0
  4046e6:	e4d2      	b.n	40408e <_svfprintf_r+0x1e6>
  4046e8:	9311      	str	r3, [sp, #68]	; 0x44
  4046ea:	2a00      	cmp	r2, #0
  4046ec:	f040 85e7 	bne.w	4052be <_svfprintf_r+0x1416>
  4046f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4046f2:	2a00      	cmp	r2, #0
  4046f4:	f43f aca3 	beq.w	40403e <_svfprintf_r+0x196>
  4046f8:	2300      	movs	r3, #0
  4046fa:	2101      	movs	r1, #1
  4046fc:	461f      	mov	r7, r3
  4046fe:	9108      	str	r1, [sp, #32]
  404700:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404704:	f8cd b01c 	str.w	fp, [sp, #28]
  404708:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40470c:	930a      	str	r3, [sp, #40]	; 0x28
  40470e:	9312      	str	r3, [sp, #72]	; 0x48
  404710:	910e      	str	r1, [sp, #56]	; 0x38
  404712:	ae28      	add	r6, sp, #160	; 0xa0
  404714:	e4e4      	b.n	4040e0 <_svfprintf_r+0x238>
  404716:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404718:	e534      	b.n	404184 <_svfprintf_r+0x2dc>
  40471a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40471c:	2b65      	cmp	r3, #101	; 0x65
  40471e:	f340 80a7 	ble.w	404870 <_svfprintf_r+0x9c8>
  404722:	a815      	add	r0, sp, #84	; 0x54
  404724:	c80d      	ldmia	r0, {r0, r2, r3}
  404726:	9914      	ldr	r1, [sp, #80]	; 0x50
  404728:	f003 fdac 	bl	408284 <__aeabi_dcmpeq>
  40472c:	2800      	cmp	r0, #0
  40472e:	f000 8150 	beq.w	4049d2 <_svfprintf_r+0xb2a>
  404732:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404734:	4a20      	ldr	r2, [pc, #128]	; (4047b8 <_svfprintf_r+0x910>)
  404736:	f8c8 2000 	str.w	r2, [r8]
  40473a:	3301      	adds	r3, #1
  40473c:	3401      	adds	r4, #1
  40473e:	2201      	movs	r2, #1
  404740:	2b07      	cmp	r3, #7
  404742:	9427      	str	r4, [sp, #156]	; 0x9c
  404744:	9326      	str	r3, [sp, #152]	; 0x98
  404746:	f8c8 2004 	str.w	r2, [r8, #4]
  40474a:	f300 836a 	bgt.w	404e22 <_svfprintf_r+0xf7a>
  40474e:	f108 0808 	add.w	r8, r8, #8
  404752:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404754:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404756:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404758:	4293      	cmp	r3, r2
  40475a:	db03      	blt.n	404764 <_svfprintf_r+0x8bc>
  40475c:	9b07      	ldr	r3, [sp, #28]
  40475e:	07dd      	lsls	r5, r3, #31
  404760:	f57f ad82 	bpl.w	404268 <_svfprintf_r+0x3c0>
  404764:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404766:	9919      	ldr	r1, [sp, #100]	; 0x64
  404768:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40476a:	f8c8 2000 	str.w	r2, [r8]
  40476e:	3301      	adds	r3, #1
  404770:	440c      	add	r4, r1
  404772:	2b07      	cmp	r3, #7
  404774:	f8c8 1004 	str.w	r1, [r8, #4]
  404778:	9427      	str	r4, [sp, #156]	; 0x9c
  40477a:	9326      	str	r3, [sp, #152]	; 0x98
  40477c:	f300 839e 	bgt.w	404ebc <_svfprintf_r+0x1014>
  404780:	f108 0808 	add.w	r8, r8, #8
  404784:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404786:	1e5e      	subs	r6, r3, #1
  404788:	2e00      	cmp	r6, #0
  40478a:	f77f ad6d 	ble.w	404268 <_svfprintf_r+0x3c0>
  40478e:	2e10      	cmp	r6, #16
  404790:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404792:	4d0a      	ldr	r5, [pc, #40]	; (4047bc <_svfprintf_r+0x914>)
  404794:	f340 81f5 	ble.w	404b82 <_svfprintf_r+0xcda>
  404798:	4622      	mov	r2, r4
  40479a:	2710      	movs	r7, #16
  40479c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4047a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4047a2:	e013      	b.n	4047cc <_svfprintf_r+0x924>
  4047a4:	00408d9c 	.word	0x00408d9c
  4047a8:	00408d88 	.word	0x00408d88
  4047ac:	7fefffff 	.word	0x7fefffff
  4047b0:	00408d7c 	.word	0x00408d7c
  4047b4:	00408d78 	.word	0x00408d78
  4047b8:	00408db8 	.word	0x00408db8
  4047bc:	00408dcc 	.word	0x00408dcc
  4047c0:	f108 0808 	add.w	r8, r8, #8
  4047c4:	3e10      	subs	r6, #16
  4047c6:	2e10      	cmp	r6, #16
  4047c8:	f340 81da 	ble.w	404b80 <_svfprintf_r+0xcd8>
  4047cc:	3301      	adds	r3, #1
  4047ce:	3210      	adds	r2, #16
  4047d0:	2b07      	cmp	r3, #7
  4047d2:	9227      	str	r2, [sp, #156]	; 0x9c
  4047d4:	9326      	str	r3, [sp, #152]	; 0x98
  4047d6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4047da:	ddf1      	ble.n	4047c0 <_svfprintf_r+0x918>
  4047dc:	aa25      	add	r2, sp, #148	; 0x94
  4047de:	4621      	mov	r1, r4
  4047e0:	4658      	mov	r0, fp
  4047e2:	f002 fcbb 	bl	40715c <__ssprint_r>
  4047e6:	2800      	cmp	r0, #0
  4047e8:	f47f ac30 	bne.w	40404c <_svfprintf_r+0x1a4>
  4047ec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4047ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047f0:	46c8      	mov	r8, r9
  4047f2:	e7e7      	b.n	4047c4 <_svfprintf_r+0x91c>
  4047f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4047f6:	9a08      	ldr	r2, [sp, #32]
  4047f8:	1a9f      	subs	r7, r3, r2
  4047fa:	2f00      	cmp	r7, #0
  4047fc:	f77f ace5 	ble.w	4041ca <_svfprintf_r+0x322>
  404800:	2f10      	cmp	r7, #16
  404802:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404804:	4db6      	ldr	r5, [pc, #728]	; (404ae0 <_svfprintf_r+0xc38>)
  404806:	dd27      	ble.n	404858 <_svfprintf_r+0x9b0>
  404808:	4642      	mov	r2, r8
  40480a:	4621      	mov	r1, r4
  40480c:	46b0      	mov	r8, r6
  40480e:	f04f 0b10 	mov.w	fp, #16
  404812:	462e      	mov	r6, r5
  404814:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404816:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404818:	e004      	b.n	404824 <_svfprintf_r+0x97c>
  40481a:	3f10      	subs	r7, #16
  40481c:	2f10      	cmp	r7, #16
  40481e:	f102 0208 	add.w	r2, r2, #8
  404822:	dd15      	ble.n	404850 <_svfprintf_r+0x9a8>
  404824:	3301      	adds	r3, #1
  404826:	3110      	adds	r1, #16
  404828:	2b07      	cmp	r3, #7
  40482a:	9127      	str	r1, [sp, #156]	; 0x9c
  40482c:	9326      	str	r3, [sp, #152]	; 0x98
  40482e:	e882 0840 	stmia.w	r2, {r6, fp}
  404832:	ddf2      	ble.n	40481a <_svfprintf_r+0x972>
  404834:	aa25      	add	r2, sp, #148	; 0x94
  404836:	4629      	mov	r1, r5
  404838:	4620      	mov	r0, r4
  40483a:	f002 fc8f 	bl	40715c <__ssprint_r>
  40483e:	2800      	cmp	r0, #0
  404840:	f47f ac04 	bne.w	40404c <_svfprintf_r+0x1a4>
  404844:	3f10      	subs	r7, #16
  404846:	2f10      	cmp	r7, #16
  404848:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40484a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40484c:	464a      	mov	r2, r9
  40484e:	dce9      	bgt.n	404824 <_svfprintf_r+0x97c>
  404850:	4635      	mov	r5, r6
  404852:	460c      	mov	r4, r1
  404854:	4646      	mov	r6, r8
  404856:	4690      	mov	r8, r2
  404858:	3301      	adds	r3, #1
  40485a:	443c      	add	r4, r7
  40485c:	2b07      	cmp	r3, #7
  40485e:	9427      	str	r4, [sp, #156]	; 0x9c
  404860:	9326      	str	r3, [sp, #152]	; 0x98
  404862:	e888 00a0 	stmia.w	r8, {r5, r7}
  404866:	f300 8232 	bgt.w	404cce <_svfprintf_r+0xe26>
  40486a:	f108 0808 	add.w	r8, r8, #8
  40486e:	e4ac      	b.n	4041ca <_svfprintf_r+0x322>
  404870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404872:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404874:	2b01      	cmp	r3, #1
  404876:	f340 81fe 	ble.w	404c76 <_svfprintf_r+0xdce>
  40487a:	3701      	adds	r7, #1
  40487c:	3401      	adds	r4, #1
  40487e:	2301      	movs	r3, #1
  404880:	2f07      	cmp	r7, #7
  404882:	9427      	str	r4, [sp, #156]	; 0x9c
  404884:	9726      	str	r7, [sp, #152]	; 0x98
  404886:	f8c8 6000 	str.w	r6, [r8]
  40488a:	f8c8 3004 	str.w	r3, [r8, #4]
  40488e:	f300 8203 	bgt.w	404c98 <_svfprintf_r+0xdf0>
  404892:	f108 0808 	add.w	r8, r8, #8
  404896:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404898:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40489a:	f8c8 3000 	str.w	r3, [r8]
  40489e:	3701      	adds	r7, #1
  4048a0:	4414      	add	r4, r2
  4048a2:	2f07      	cmp	r7, #7
  4048a4:	9427      	str	r4, [sp, #156]	; 0x9c
  4048a6:	9726      	str	r7, [sp, #152]	; 0x98
  4048a8:	f8c8 2004 	str.w	r2, [r8, #4]
  4048ac:	f300 8200 	bgt.w	404cb0 <_svfprintf_r+0xe08>
  4048b0:	f108 0808 	add.w	r8, r8, #8
  4048b4:	a815      	add	r0, sp, #84	; 0x54
  4048b6:	c80d      	ldmia	r0, {r0, r2, r3}
  4048b8:	9914      	ldr	r1, [sp, #80]	; 0x50
  4048ba:	f003 fce3 	bl	408284 <__aeabi_dcmpeq>
  4048be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4048c0:	2800      	cmp	r0, #0
  4048c2:	f040 8101 	bne.w	404ac8 <_svfprintf_r+0xc20>
  4048c6:	3b01      	subs	r3, #1
  4048c8:	3701      	adds	r7, #1
  4048ca:	3601      	adds	r6, #1
  4048cc:	441c      	add	r4, r3
  4048ce:	2f07      	cmp	r7, #7
  4048d0:	9726      	str	r7, [sp, #152]	; 0x98
  4048d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4048d4:	f8c8 6000 	str.w	r6, [r8]
  4048d8:	f8c8 3004 	str.w	r3, [r8, #4]
  4048dc:	f300 8127 	bgt.w	404b2e <_svfprintf_r+0xc86>
  4048e0:	f108 0808 	add.w	r8, r8, #8
  4048e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4048e6:	f8c8 2004 	str.w	r2, [r8, #4]
  4048ea:	3701      	adds	r7, #1
  4048ec:	4414      	add	r4, r2
  4048ee:	ab21      	add	r3, sp, #132	; 0x84
  4048f0:	2f07      	cmp	r7, #7
  4048f2:	9427      	str	r4, [sp, #156]	; 0x9c
  4048f4:	9726      	str	r7, [sp, #152]	; 0x98
  4048f6:	f8c8 3000 	str.w	r3, [r8]
  4048fa:	f77f acb3 	ble.w	404264 <_svfprintf_r+0x3bc>
  4048fe:	aa25      	add	r2, sp, #148	; 0x94
  404900:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404902:	980c      	ldr	r0, [sp, #48]	; 0x30
  404904:	f002 fc2a 	bl	40715c <__ssprint_r>
  404908:	2800      	cmp	r0, #0
  40490a:	f47f ab9f 	bne.w	40404c <_svfprintf_r+0x1a4>
  40490e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404910:	46c8      	mov	r8, r9
  404912:	e4a9      	b.n	404268 <_svfprintf_r+0x3c0>
  404914:	aa25      	add	r2, sp, #148	; 0x94
  404916:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404918:	980c      	ldr	r0, [sp, #48]	; 0x30
  40491a:	f002 fc1f 	bl	40715c <__ssprint_r>
  40491e:	2800      	cmp	r0, #0
  404920:	f43f aceb 	beq.w	4042fa <_svfprintf_r+0x452>
  404924:	f7ff bb92 	b.w	40404c <_svfprintf_r+0x1a4>
  404928:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40492c:	2b01      	cmp	r3, #1
  40492e:	f000 8134 	beq.w	404b9a <_svfprintf_r+0xcf2>
  404932:	2b02      	cmp	r3, #2
  404934:	d125      	bne.n	404982 <_svfprintf_r+0xada>
  404936:	f8cd b01c 	str.w	fp, [sp, #28]
  40493a:	2400      	movs	r4, #0
  40493c:	2500      	movs	r5, #0
  40493e:	e61e      	b.n	40457e <_svfprintf_r+0x6d6>
  404940:	aa25      	add	r2, sp, #148	; 0x94
  404942:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404944:	980c      	ldr	r0, [sp, #48]	; 0x30
  404946:	f002 fc09 	bl	40715c <__ssprint_r>
  40494a:	2800      	cmp	r0, #0
  40494c:	f47f ab7e 	bne.w	40404c <_svfprintf_r+0x1a4>
  404950:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404952:	46c8      	mov	r8, r9
  404954:	e475      	b.n	404242 <_svfprintf_r+0x39a>
  404956:	aa25      	add	r2, sp, #148	; 0x94
  404958:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40495a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40495c:	f002 fbfe 	bl	40715c <__ssprint_r>
  404960:	2800      	cmp	r0, #0
  404962:	f47f ab73 	bne.w	40404c <_svfprintf_r+0x1a4>
  404966:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404968:	46c8      	mov	r8, r9
  40496a:	e41b      	b.n	4041a4 <_svfprintf_r+0x2fc>
  40496c:	aa25      	add	r2, sp, #148	; 0x94
  40496e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404970:	980c      	ldr	r0, [sp, #48]	; 0x30
  404972:	f002 fbf3 	bl	40715c <__ssprint_r>
  404976:	2800      	cmp	r0, #0
  404978:	f47f ab68 	bne.w	40404c <_svfprintf_r+0x1a4>
  40497c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40497e:	46c8      	mov	r8, r9
  404980:	e420      	b.n	4041c4 <_svfprintf_r+0x31c>
  404982:	f8cd b01c 	str.w	fp, [sp, #28]
  404986:	2400      	movs	r4, #0
  404988:	2500      	movs	r5, #0
  40498a:	4649      	mov	r1, r9
  40498c:	e000      	b.n	404990 <_svfprintf_r+0xae8>
  40498e:	4631      	mov	r1, r6
  404990:	08e2      	lsrs	r2, r4, #3
  404992:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404996:	08e8      	lsrs	r0, r5, #3
  404998:	f004 0307 	and.w	r3, r4, #7
  40499c:	4605      	mov	r5, r0
  40499e:	4614      	mov	r4, r2
  4049a0:	3330      	adds	r3, #48	; 0x30
  4049a2:	ea54 0205 	orrs.w	r2, r4, r5
  4049a6:	f801 3c01 	strb.w	r3, [r1, #-1]
  4049aa:	f101 36ff 	add.w	r6, r1, #4294967295
  4049ae:	d1ee      	bne.n	40498e <_svfprintf_r+0xae6>
  4049b0:	9a07      	ldr	r2, [sp, #28]
  4049b2:	07d2      	lsls	r2, r2, #31
  4049b4:	f57f adf3 	bpl.w	40459e <_svfprintf_r+0x6f6>
  4049b8:	2b30      	cmp	r3, #48	; 0x30
  4049ba:	f43f adf0 	beq.w	40459e <_svfprintf_r+0x6f6>
  4049be:	3902      	subs	r1, #2
  4049c0:	2330      	movs	r3, #48	; 0x30
  4049c2:	f806 3c01 	strb.w	r3, [r6, #-1]
  4049c6:	eba9 0301 	sub.w	r3, r9, r1
  4049ca:	930e      	str	r3, [sp, #56]	; 0x38
  4049cc:	460e      	mov	r6, r1
  4049ce:	f7ff bb7b 	b.w	4040c8 <_svfprintf_r+0x220>
  4049d2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4049d4:	2900      	cmp	r1, #0
  4049d6:	f340 822e 	ble.w	404e36 <_svfprintf_r+0xf8e>
  4049da:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4049dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4049de:	4293      	cmp	r3, r2
  4049e0:	bfa8      	it	ge
  4049e2:	4613      	movge	r3, r2
  4049e4:	2b00      	cmp	r3, #0
  4049e6:	461f      	mov	r7, r3
  4049e8:	dd0d      	ble.n	404a06 <_svfprintf_r+0xb5e>
  4049ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049ec:	f8c8 6000 	str.w	r6, [r8]
  4049f0:	3301      	adds	r3, #1
  4049f2:	443c      	add	r4, r7
  4049f4:	2b07      	cmp	r3, #7
  4049f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4049f8:	f8c8 7004 	str.w	r7, [r8, #4]
  4049fc:	9326      	str	r3, [sp, #152]	; 0x98
  4049fe:	f300 831f 	bgt.w	405040 <_svfprintf_r+0x1198>
  404a02:	f108 0808 	add.w	r8, r8, #8
  404a06:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a08:	2f00      	cmp	r7, #0
  404a0a:	bfa8      	it	ge
  404a0c:	1bdb      	subge	r3, r3, r7
  404a0e:	2b00      	cmp	r3, #0
  404a10:	461f      	mov	r7, r3
  404a12:	f340 80d6 	ble.w	404bc2 <_svfprintf_r+0xd1a>
  404a16:	2f10      	cmp	r7, #16
  404a18:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a1a:	4d31      	ldr	r5, [pc, #196]	; (404ae0 <_svfprintf_r+0xc38>)
  404a1c:	f340 81ed 	ble.w	404dfa <_svfprintf_r+0xf52>
  404a20:	4642      	mov	r2, r8
  404a22:	4621      	mov	r1, r4
  404a24:	46b0      	mov	r8, r6
  404a26:	f04f 0b10 	mov.w	fp, #16
  404a2a:	462e      	mov	r6, r5
  404a2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404a2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404a30:	e004      	b.n	404a3c <_svfprintf_r+0xb94>
  404a32:	3208      	adds	r2, #8
  404a34:	3f10      	subs	r7, #16
  404a36:	2f10      	cmp	r7, #16
  404a38:	f340 81db 	ble.w	404df2 <_svfprintf_r+0xf4a>
  404a3c:	3301      	adds	r3, #1
  404a3e:	3110      	adds	r1, #16
  404a40:	2b07      	cmp	r3, #7
  404a42:	9127      	str	r1, [sp, #156]	; 0x9c
  404a44:	9326      	str	r3, [sp, #152]	; 0x98
  404a46:	e882 0840 	stmia.w	r2, {r6, fp}
  404a4a:	ddf2      	ble.n	404a32 <_svfprintf_r+0xb8a>
  404a4c:	aa25      	add	r2, sp, #148	; 0x94
  404a4e:	4629      	mov	r1, r5
  404a50:	4620      	mov	r0, r4
  404a52:	f002 fb83 	bl	40715c <__ssprint_r>
  404a56:	2800      	cmp	r0, #0
  404a58:	f47f aaf8 	bne.w	40404c <_svfprintf_r+0x1a4>
  404a5c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404a5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a60:	464a      	mov	r2, r9
  404a62:	e7e7      	b.n	404a34 <_svfprintf_r+0xb8c>
  404a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a66:	930e      	str	r3, [sp, #56]	; 0x38
  404a68:	464e      	mov	r6, r9
  404a6a:	f7ff bb2d 	b.w	4040c8 <_svfprintf_r+0x220>
  404a6e:	2d00      	cmp	r5, #0
  404a70:	bf08      	it	eq
  404a72:	2c0a      	cmpeq	r4, #10
  404a74:	f0c0 808f 	bcc.w	404b96 <_svfprintf_r+0xcee>
  404a78:	464e      	mov	r6, r9
  404a7a:	4620      	mov	r0, r4
  404a7c:	4629      	mov	r1, r5
  404a7e:	220a      	movs	r2, #10
  404a80:	2300      	movs	r3, #0
  404a82:	f003 fc6f 	bl	408364 <__aeabi_uldivmod>
  404a86:	3230      	adds	r2, #48	; 0x30
  404a88:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404a8c:	4620      	mov	r0, r4
  404a8e:	4629      	mov	r1, r5
  404a90:	2300      	movs	r3, #0
  404a92:	220a      	movs	r2, #10
  404a94:	f003 fc66 	bl	408364 <__aeabi_uldivmod>
  404a98:	4604      	mov	r4, r0
  404a9a:	460d      	mov	r5, r1
  404a9c:	ea54 0305 	orrs.w	r3, r4, r5
  404aa0:	d1eb      	bne.n	404a7a <_svfprintf_r+0xbd2>
  404aa2:	eba9 0306 	sub.w	r3, r9, r6
  404aa6:	930e      	str	r3, [sp, #56]	; 0x38
  404aa8:	f7ff bb0e 	b.w	4040c8 <_svfprintf_r+0x220>
  404aac:	aa25      	add	r2, sp, #148	; 0x94
  404aae:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ab0:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ab2:	f002 fb53 	bl	40715c <__ssprint_r>
  404ab6:	2800      	cmp	r0, #0
  404ab8:	f47f aac8 	bne.w	40404c <_svfprintf_r+0x1a4>
  404abc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404ac0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ac2:	46c8      	mov	r8, r9
  404ac4:	f7ff bb5e 	b.w	404184 <_svfprintf_r+0x2dc>
  404ac8:	1e5e      	subs	r6, r3, #1
  404aca:	2e00      	cmp	r6, #0
  404acc:	f77f af0a 	ble.w	4048e4 <_svfprintf_r+0xa3c>
  404ad0:	2e10      	cmp	r6, #16
  404ad2:	4d03      	ldr	r5, [pc, #12]	; (404ae0 <_svfprintf_r+0xc38>)
  404ad4:	dd22      	ble.n	404b1c <_svfprintf_r+0xc74>
  404ad6:	4622      	mov	r2, r4
  404ad8:	f04f 0b10 	mov.w	fp, #16
  404adc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404ade:	e006      	b.n	404aee <_svfprintf_r+0xc46>
  404ae0:	00408dcc 	.word	0x00408dcc
  404ae4:	3e10      	subs	r6, #16
  404ae6:	2e10      	cmp	r6, #16
  404ae8:	f108 0808 	add.w	r8, r8, #8
  404aec:	dd15      	ble.n	404b1a <_svfprintf_r+0xc72>
  404aee:	3701      	adds	r7, #1
  404af0:	3210      	adds	r2, #16
  404af2:	2f07      	cmp	r7, #7
  404af4:	9227      	str	r2, [sp, #156]	; 0x9c
  404af6:	9726      	str	r7, [sp, #152]	; 0x98
  404af8:	e888 0820 	stmia.w	r8, {r5, fp}
  404afc:	ddf2      	ble.n	404ae4 <_svfprintf_r+0xc3c>
  404afe:	aa25      	add	r2, sp, #148	; 0x94
  404b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b02:	4620      	mov	r0, r4
  404b04:	f002 fb2a 	bl	40715c <__ssprint_r>
  404b08:	2800      	cmp	r0, #0
  404b0a:	f47f aa9f 	bne.w	40404c <_svfprintf_r+0x1a4>
  404b0e:	3e10      	subs	r6, #16
  404b10:	2e10      	cmp	r6, #16
  404b12:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404b14:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404b16:	46c8      	mov	r8, r9
  404b18:	dce9      	bgt.n	404aee <_svfprintf_r+0xc46>
  404b1a:	4614      	mov	r4, r2
  404b1c:	3701      	adds	r7, #1
  404b1e:	4434      	add	r4, r6
  404b20:	2f07      	cmp	r7, #7
  404b22:	9427      	str	r4, [sp, #156]	; 0x9c
  404b24:	9726      	str	r7, [sp, #152]	; 0x98
  404b26:	e888 0060 	stmia.w	r8, {r5, r6}
  404b2a:	f77f aed9 	ble.w	4048e0 <_svfprintf_r+0xa38>
  404b2e:	aa25      	add	r2, sp, #148	; 0x94
  404b30:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b32:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b34:	f002 fb12 	bl	40715c <__ssprint_r>
  404b38:	2800      	cmp	r0, #0
  404b3a:	f47f aa87 	bne.w	40404c <_svfprintf_r+0x1a4>
  404b3e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b40:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404b42:	46c8      	mov	r8, r9
  404b44:	e6ce      	b.n	4048e4 <_svfprintf_r+0xa3c>
  404b46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b48:	6814      	ldr	r4, [r2, #0]
  404b4a:	4613      	mov	r3, r2
  404b4c:	3304      	adds	r3, #4
  404b4e:	17e5      	asrs	r5, r4, #31
  404b50:	930f      	str	r3, [sp, #60]	; 0x3c
  404b52:	4622      	mov	r2, r4
  404b54:	462b      	mov	r3, r5
  404b56:	e4fa      	b.n	40454e <_svfprintf_r+0x6a6>
  404b58:	3204      	adds	r2, #4
  404b5a:	681c      	ldr	r4, [r3, #0]
  404b5c:	920f      	str	r2, [sp, #60]	; 0x3c
  404b5e:	2301      	movs	r3, #1
  404b60:	2500      	movs	r5, #0
  404b62:	f7ff ba94 	b.w	40408e <_svfprintf_r+0x1e6>
  404b66:	681c      	ldr	r4, [r3, #0]
  404b68:	3304      	adds	r3, #4
  404b6a:	930f      	str	r3, [sp, #60]	; 0x3c
  404b6c:	2500      	movs	r5, #0
  404b6e:	e421      	b.n	4043b4 <_svfprintf_r+0x50c>
  404b70:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404b72:	460a      	mov	r2, r1
  404b74:	3204      	adds	r2, #4
  404b76:	680c      	ldr	r4, [r1, #0]
  404b78:	920f      	str	r2, [sp, #60]	; 0x3c
  404b7a:	2500      	movs	r5, #0
  404b7c:	f7ff ba87 	b.w	40408e <_svfprintf_r+0x1e6>
  404b80:	4614      	mov	r4, r2
  404b82:	3301      	adds	r3, #1
  404b84:	4434      	add	r4, r6
  404b86:	2b07      	cmp	r3, #7
  404b88:	9427      	str	r4, [sp, #156]	; 0x9c
  404b8a:	9326      	str	r3, [sp, #152]	; 0x98
  404b8c:	e888 0060 	stmia.w	r8, {r5, r6}
  404b90:	f77f ab68 	ble.w	404264 <_svfprintf_r+0x3bc>
  404b94:	e6b3      	b.n	4048fe <_svfprintf_r+0xa56>
  404b96:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404b9a:	f8cd b01c 	str.w	fp, [sp, #28]
  404b9e:	ae42      	add	r6, sp, #264	; 0x108
  404ba0:	3430      	adds	r4, #48	; 0x30
  404ba2:	2301      	movs	r3, #1
  404ba4:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404ba8:	930e      	str	r3, [sp, #56]	; 0x38
  404baa:	f7ff ba8d 	b.w	4040c8 <_svfprintf_r+0x220>
  404bae:	aa25      	add	r2, sp, #148	; 0x94
  404bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404bb2:	980c      	ldr	r0, [sp, #48]	; 0x30
  404bb4:	f002 fad2 	bl	40715c <__ssprint_r>
  404bb8:	2800      	cmp	r0, #0
  404bba:	f47f aa47 	bne.w	40404c <_svfprintf_r+0x1a4>
  404bbe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404bc0:	46c8      	mov	r8, r9
  404bc2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404bc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404bc6:	429a      	cmp	r2, r3
  404bc8:	db44      	blt.n	404c54 <_svfprintf_r+0xdac>
  404bca:	9b07      	ldr	r3, [sp, #28]
  404bcc:	07d9      	lsls	r1, r3, #31
  404bce:	d441      	bmi.n	404c54 <_svfprintf_r+0xdac>
  404bd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404bd2:	9812      	ldr	r0, [sp, #72]	; 0x48
  404bd4:	1a9a      	subs	r2, r3, r2
  404bd6:	1a1d      	subs	r5, r3, r0
  404bd8:	4295      	cmp	r5, r2
  404bda:	bfa8      	it	ge
  404bdc:	4615      	movge	r5, r2
  404bde:	2d00      	cmp	r5, #0
  404be0:	dd0e      	ble.n	404c00 <_svfprintf_r+0xd58>
  404be2:	9926      	ldr	r1, [sp, #152]	; 0x98
  404be4:	f8c8 5004 	str.w	r5, [r8, #4]
  404be8:	3101      	adds	r1, #1
  404bea:	4406      	add	r6, r0
  404bec:	442c      	add	r4, r5
  404bee:	2907      	cmp	r1, #7
  404bf0:	f8c8 6000 	str.w	r6, [r8]
  404bf4:	9427      	str	r4, [sp, #156]	; 0x9c
  404bf6:	9126      	str	r1, [sp, #152]	; 0x98
  404bf8:	f300 823b 	bgt.w	405072 <_svfprintf_r+0x11ca>
  404bfc:	f108 0808 	add.w	r8, r8, #8
  404c00:	2d00      	cmp	r5, #0
  404c02:	bfac      	ite	ge
  404c04:	1b56      	subge	r6, r2, r5
  404c06:	4616      	movlt	r6, r2
  404c08:	2e00      	cmp	r6, #0
  404c0a:	f77f ab2d 	ble.w	404268 <_svfprintf_r+0x3c0>
  404c0e:	2e10      	cmp	r6, #16
  404c10:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c12:	4db0      	ldr	r5, [pc, #704]	; (404ed4 <_svfprintf_r+0x102c>)
  404c14:	ddb5      	ble.n	404b82 <_svfprintf_r+0xcda>
  404c16:	4622      	mov	r2, r4
  404c18:	2710      	movs	r7, #16
  404c1a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404c1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404c20:	e004      	b.n	404c2c <_svfprintf_r+0xd84>
  404c22:	f108 0808 	add.w	r8, r8, #8
  404c26:	3e10      	subs	r6, #16
  404c28:	2e10      	cmp	r6, #16
  404c2a:	dda9      	ble.n	404b80 <_svfprintf_r+0xcd8>
  404c2c:	3301      	adds	r3, #1
  404c2e:	3210      	adds	r2, #16
  404c30:	2b07      	cmp	r3, #7
  404c32:	9227      	str	r2, [sp, #156]	; 0x9c
  404c34:	9326      	str	r3, [sp, #152]	; 0x98
  404c36:	e888 00a0 	stmia.w	r8, {r5, r7}
  404c3a:	ddf2      	ble.n	404c22 <_svfprintf_r+0xd7a>
  404c3c:	aa25      	add	r2, sp, #148	; 0x94
  404c3e:	4621      	mov	r1, r4
  404c40:	4658      	mov	r0, fp
  404c42:	f002 fa8b 	bl	40715c <__ssprint_r>
  404c46:	2800      	cmp	r0, #0
  404c48:	f47f aa00 	bne.w	40404c <_svfprintf_r+0x1a4>
  404c4c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404c4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c50:	46c8      	mov	r8, r9
  404c52:	e7e8      	b.n	404c26 <_svfprintf_r+0xd7e>
  404c54:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c56:	9819      	ldr	r0, [sp, #100]	; 0x64
  404c58:	991a      	ldr	r1, [sp, #104]	; 0x68
  404c5a:	f8c8 1000 	str.w	r1, [r8]
  404c5e:	3301      	adds	r3, #1
  404c60:	4404      	add	r4, r0
  404c62:	2b07      	cmp	r3, #7
  404c64:	9427      	str	r4, [sp, #156]	; 0x9c
  404c66:	f8c8 0004 	str.w	r0, [r8, #4]
  404c6a:	9326      	str	r3, [sp, #152]	; 0x98
  404c6c:	f300 81f5 	bgt.w	40505a <_svfprintf_r+0x11b2>
  404c70:	f108 0808 	add.w	r8, r8, #8
  404c74:	e7ac      	b.n	404bd0 <_svfprintf_r+0xd28>
  404c76:	9b07      	ldr	r3, [sp, #28]
  404c78:	07da      	lsls	r2, r3, #31
  404c7a:	f53f adfe 	bmi.w	40487a <_svfprintf_r+0x9d2>
  404c7e:	3701      	adds	r7, #1
  404c80:	3401      	adds	r4, #1
  404c82:	2301      	movs	r3, #1
  404c84:	2f07      	cmp	r7, #7
  404c86:	9427      	str	r4, [sp, #156]	; 0x9c
  404c88:	9726      	str	r7, [sp, #152]	; 0x98
  404c8a:	f8c8 6000 	str.w	r6, [r8]
  404c8e:	f8c8 3004 	str.w	r3, [r8, #4]
  404c92:	f77f ae25 	ble.w	4048e0 <_svfprintf_r+0xa38>
  404c96:	e74a      	b.n	404b2e <_svfprintf_r+0xc86>
  404c98:	aa25      	add	r2, sp, #148	; 0x94
  404c9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c9c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c9e:	f002 fa5d 	bl	40715c <__ssprint_r>
  404ca2:	2800      	cmp	r0, #0
  404ca4:	f47f a9d2 	bne.w	40404c <_svfprintf_r+0x1a4>
  404ca8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404caa:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404cac:	46c8      	mov	r8, r9
  404cae:	e5f2      	b.n	404896 <_svfprintf_r+0x9ee>
  404cb0:	aa25      	add	r2, sp, #148	; 0x94
  404cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cb4:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cb6:	f002 fa51 	bl	40715c <__ssprint_r>
  404cba:	2800      	cmp	r0, #0
  404cbc:	f47f a9c6 	bne.w	40404c <_svfprintf_r+0x1a4>
  404cc0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404cc2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404cc4:	46c8      	mov	r8, r9
  404cc6:	e5f5      	b.n	4048b4 <_svfprintf_r+0xa0c>
  404cc8:	464e      	mov	r6, r9
  404cca:	f7ff b9fd 	b.w	4040c8 <_svfprintf_r+0x220>
  404cce:	aa25      	add	r2, sp, #148	; 0x94
  404cd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cd2:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cd4:	f002 fa42 	bl	40715c <__ssprint_r>
  404cd8:	2800      	cmp	r0, #0
  404cda:	f47f a9b7 	bne.w	40404c <_svfprintf_r+0x1a4>
  404cde:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ce0:	46c8      	mov	r8, r9
  404ce2:	f7ff ba72 	b.w	4041ca <_svfprintf_r+0x322>
  404ce6:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404ce8:	4622      	mov	r2, r4
  404cea:	4620      	mov	r0, r4
  404cec:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404cee:	4623      	mov	r3, r4
  404cf0:	4621      	mov	r1, r4
  404cf2:	f003 faf9 	bl	4082e8 <__aeabi_dcmpun>
  404cf6:	2800      	cmp	r0, #0
  404cf8:	f040 8286 	bne.w	405208 <_svfprintf_r+0x1360>
  404cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404cfe:	3301      	adds	r3, #1
  404d00:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d02:	f023 0320 	bic.w	r3, r3, #32
  404d06:	930e      	str	r3, [sp, #56]	; 0x38
  404d08:	f000 81e2 	beq.w	4050d0 <_svfprintf_r+0x1228>
  404d0c:	2b47      	cmp	r3, #71	; 0x47
  404d0e:	f000 811e 	beq.w	404f4e <_svfprintf_r+0x10a6>
  404d12:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  404d16:	9307      	str	r3, [sp, #28]
  404d18:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404d1a:	1e1f      	subs	r7, r3, #0
  404d1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404d1e:	9308      	str	r3, [sp, #32]
  404d20:	bfbb      	ittet	lt
  404d22:	463b      	movlt	r3, r7
  404d24:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404d28:	2300      	movge	r3, #0
  404d2a:	232d      	movlt	r3, #45	; 0x2d
  404d2c:	9310      	str	r3, [sp, #64]	; 0x40
  404d2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d30:	2b66      	cmp	r3, #102	; 0x66
  404d32:	f000 81bb 	beq.w	4050ac <_svfprintf_r+0x1204>
  404d36:	2b46      	cmp	r3, #70	; 0x46
  404d38:	f000 80df 	beq.w	404efa <_svfprintf_r+0x1052>
  404d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404d3e:	9a08      	ldr	r2, [sp, #32]
  404d40:	2b45      	cmp	r3, #69	; 0x45
  404d42:	bf0c      	ite	eq
  404d44:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  404d46:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  404d48:	a823      	add	r0, sp, #140	; 0x8c
  404d4a:	a920      	add	r1, sp, #128	; 0x80
  404d4c:	bf08      	it	eq
  404d4e:	1c5d      	addeq	r5, r3, #1
  404d50:	9004      	str	r0, [sp, #16]
  404d52:	9103      	str	r1, [sp, #12]
  404d54:	a81f      	add	r0, sp, #124	; 0x7c
  404d56:	2102      	movs	r1, #2
  404d58:	463b      	mov	r3, r7
  404d5a:	9002      	str	r0, [sp, #8]
  404d5c:	9501      	str	r5, [sp, #4]
  404d5e:	9100      	str	r1, [sp, #0]
  404d60:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d62:	f000 fb75 	bl	405450 <_dtoa_r>
  404d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d68:	2b67      	cmp	r3, #103	; 0x67
  404d6a:	4606      	mov	r6, r0
  404d6c:	f040 81e0 	bne.w	405130 <_svfprintf_r+0x1288>
  404d70:	f01b 0f01 	tst.w	fp, #1
  404d74:	f000 8246 	beq.w	405204 <_svfprintf_r+0x135c>
  404d78:	1974      	adds	r4, r6, r5
  404d7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404d7c:	9808      	ldr	r0, [sp, #32]
  404d7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404d80:	4639      	mov	r1, r7
  404d82:	f003 fa7f 	bl	408284 <__aeabi_dcmpeq>
  404d86:	2800      	cmp	r0, #0
  404d88:	f040 8165 	bne.w	405056 <_svfprintf_r+0x11ae>
  404d8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404d8e:	42a3      	cmp	r3, r4
  404d90:	d206      	bcs.n	404da0 <_svfprintf_r+0xef8>
  404d92:	2130      	movs	r1, #48	; 0x30
  404d94:	1c5a      	adds	r2, r3, #1
  404d96:	9223      	str	r2, [sp, #140]	; 0x8c
  404d98:	7019      	strb	r1, [r3, #0]
  404d9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404d9c:	429c      	cmp	r4, r3
  404d9e:	d8f9      	bhi.n	404d94 <_svfprintf_r+0xeec>
  404da0:	1b9b      	subs	r3, r3, r6
  404da2:	9313      	str	r3, [sp, #76]	; 0x4c
  404da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404da6:	2b47      	cmp	r3, #71	; 0x47
  404da8:	f000 80e9 	beq.w	404f7e <_svfprintf_r+0x10d6>
  404dac:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404dae:	2b65      	cmp	r3, #101	; 0x65
  404db0:	f340 81cd 	ble.w	40514e <_svfprintf_r+0x12a6>
  404db4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404db6:	2b66      	cmp	r3, #102	; 0x66
  404db8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404dba:	9312      	str	r3, [sp, #72]	; 0x48
  404dbc:	f000 819e 	beq.w	4050fc <_svfprintf_r+0x1254>
  404dc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404dc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404dc4:	4619      	mov	r1, r3
  404dc6:	4291      	cmp	r1, r2
  404dc8:	f300 818a 	bgt.w	4050e0 <_svfprintf_r+0x1238>
  404dcc:	f01b 0f01 	tst.w	fp, #1
  404dd0:	f040 8213 	bne.w	4051fa <_svfprintf_r+0x1352>
  404dd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404dd8:	9308      	str	r3, [sp, #32]
  404dda:	2367      	movs	r3, #103	; 0x67
  404ddc:	920e      	str	r2, [sp, #56]	; 0x38
  404dde:	9311      	str	r3, [sp, #68]	; 0x44
  404de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404de2:	2b00      	cmp	r3, #0
  404de4:	f040 80c4 	bne.w	404f70 <_svfprintf_r+0x10c8>
  404de8:	930a      	str	r3, [sp, #40]	; 0x28
  404dea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404dee:	f7ff b973 	b.w	4040d8 <_svfprintf_r+0x230>
  404df2:	4635      	mov	r5, r6
  404df4:	460c      	mov	r4, r1
  404df6:	4646      	mov	r6, r8
  404df8:	4690      	mov	r8, r2
  404dfa:	3301      	adds	r3, #1
  404dfc:	443c      	add	r4, r7
  404dfe:	2b07      	cmp	r3, #7
  404e00:	9427      	str	r4, [sp, #156]	; 0x9c
  404e02:	9326      	str	r3, [sp, #152]	; 0x98
  404e04:	e888 00a0 	stmia.w	r8, {r5, r7}
  404e08:	f73f aed1 	bgt.w	404bae <_svfprintf_r+0xd06>
  404e0c:	f108 0808 	add.w	r8, r8, #8
  404e10:	e6d7      	b.n	404bc2 <_svfprintf_r+0xd1a>
  404e12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e14:	6813      	ldr	r3, [r2, #0]
  404e16:	3204      	adds	r2, #4
  404e18:	920f      	str	r2, [sp, #60]	; 0x3c
  404e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404e1c:	601a      	str	r2, [r3, #0]
  404e1e:	f7ff b86a 	b.w	403ef6 <_svfprintf_r+0x4e>
  404e22:	aa25      	add	r2, sp, #148	; 0x94
  404e24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404e26:	980c      	ldr	r0, [sp, #48]	; 0x30
  404e28:	f002 f998 	bl	40715c <__ssprint_r>
  404e2c:	2800      	cmp	r0, #0
  404e2e:	f47f a90d 	bne.w	40404c <_svfprintf_r+0x1a4>
  404e32:	46c8      	mov	r8, r9
  404e34:	e48d      	b.n	404752 <_svfprintf_r+0x8aa>
  404e36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e38:	4a27      	ldr	r2, [pc, #156]	; (404ed8 <_svfprintf_r+0x1030>)
  404e3a:	f8c8 2000 	str.w	r2, [r8]
  404e3e:	3301      	adds	r3, #1
  404e40:	3401      	adds	r4, #1
  404e42:	2201      	movs	r2, #1
  404e44:	2b07      	cmp	r3, #7
  404e46:	9427      	str	r4, [sp, #156]	; 0x9c
  404e48:	9326      	str	r3, [sp, #152]	; 0x98
  404e4a:	f8c8 2004 	str.w	r2, [r8, #4]
  404e4e:	dc72      	bgt.n	404f36 <_svfprintf_r+0x108e>
  404e50:	f108 0808 	add.w	r8, r8, #8
  404e54:	b929      	cbnz	r1, 404e62 <_svfprintf_r+0xfba>
  404e56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404e58:	b91b      	cbnz	r3, 404e62 <_svfprintf_r+0xfba>
  404e5a:	9b07      	ldr	r3, [sp, #28]
  404e5c:	07d8      	lsls	r0, r3, #31
  404e5e:	f57f aa03 	bpl.w	404268 <_svfprintf_r+0x3c0>
  404e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e64:	9819      	ldr	r0, [sp, #100]	; 0x64
  404e66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404e68:	f8c8 2000 	str.w	r2, [r8]
  404e6c:	3301      	adds	r3, #1
  404e6e:	4602      	mov	r2, r0
  404e70:	4422      	add	r2, r4
  404e72:	2b07      	cmp	r3, #7
  404e74:	9227      	str	r2, [sp, #156]	; 0x9c
  404e76:	f8c8 0004 	str.w	r0, [r8, #4]
  404e7a:	9326      	str	r3, [sp, #152]	; 0x98
  404e7c:	f300 818d 	bgt.w	40519a <_svfprintf_r+0x12f2>
  404e80:	f108 0808 	add.w	r8, r8, #8
  404e84:	2900      	cmp	r1, #0
  404e86:	f2c0 8165 	blt.w	405154 <_svfprintf_r+0x12ac>
  404e8a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404e8c:	f8c8 6000 	str.w	r6, [r8]
  404e90:	3301      	adds	r3, #1
  404e92:	188c      	adds	r4, r1, r2
  404e94:	2b07      	cmp	r3, #7
  404e96:	9427      	str	r4, [sp, #156]	; 0x9c
  404e98:	9326      	str	r3, [sp, #152]	; 0x98
  404e9a:	f8c8 1004 	str.w	r1, [r8, #4]
  404e9e:	f77f a9e1 	ble.w	404264 <_svfprintf_r+0x3bc>
  404ea2:	e52c      	b.n	4048fe <_svfprintf_r+0xa56>
  404ea4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404ea6:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ea8:	6813      	ldr	r3, [r2, #0]
  404eaa:	17cd      	asrs	r5, r1, #31
  404eac:	4608      	mov	r0, r1
  404eae:	3204      	adds	r2, #4
  404eb0:	4629      	mov	r1, r5
  404eb2:	920f      	str	r2, [sp, #60]	; 0x3c
  404eb4:	e9c3 0100 	strd	r0, r1, [r3]
  404eb8:	f7ff b81d 	b.w	403ef6 <_svfprintf_r+0x4e>
  404ebc:	aa25      	add	r2, sp, #148	; 0x94
  404ebe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404ec0:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ec2:	f002 f94b 	bl	40715c <__ssprint_r>
  404ec6:	2800      	cmp	r0, #0
  404ec8:	f47f a8c0 	bne.w	40404c <_svfprintf_r+0x1a4>
  404ecc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ece:	46c8      	mov	r8, r9
  404ed0:	e458      	b.n	404784 <_svfprintf_r+0x8dc>
  404ed2:	bf00      	nop
  404ed4:	00408dcc 	.word	0x00408dcc
  404ed8:	00408db8 	.word	0x00408db8
  404edc:	2140      	movs	r1, #64	; 0x40
  404ede:	980c      	ldr	r0, [sp, #48]	; 0x30
  404ee0:	f001 fa0c 	bl	4062fc <_malloc_r>
  404ee4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404ee6:	6010      	str	r0, [r2, #0]
  404ee8:	6110      	str	r0, [r2, #16]
  404eea:	2800      	cmp	r0, #0
  404eec:	f000 81f2 	beq.w	4052d4 <_svfprintf_r+0x142c>
  404ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404ef2:	2340      	movs	r3, #64	; 0x40
  404ef4:	6153      	str	r3, [r2, #20]
  404ef6:	f7fe bfee 	b.w	403ed6 <_svfprintf_r+0x2e>
  404efa:	a823      	add	r0, sp, #140	; 0x8c
  404efc:	a920      	add	r1, sp, #128	; 0x80
  404efe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404f00:	9004      	str	r0, [sp, #16]
  404f02:	9103      	str	r1, [sp, #12]
  404f04:	a81f      	add	r0, sp, #124	; 0x7c
  404f06:	2103      	movs	r1, #3
  404f08:	9002      	str	r0, [sp, #8]
  404f0a:	9a08      	ldr	r2, [sp, #32]
  404f0c:	9401      	str	r4, [sp, #4]
  404f0e:	463b      	mov	r3, r7
  404f10:	9100      	str	r1, [sp, #0]
  404f12:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f14:	f000 fa9c 	bl	405450 <_dtoa_r>
  404f18:	4625      	mov	r5, r4
  404f1a:	4606      	mov	r6, r0
  404f1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f1e:	2b46      	cmp	r3, #70	; 0x46
  404f20:	eb06 0405 	add.w	r4, r6, r5
  404f24:	f47f af29 	bne.w	404d7a <_svfprintf_r+0xed2>
  404f28:	7833      	ldrb	r3, [r6, #0]
  404f2a:	2b30      	cmp	r3, #48	; 0x30
  404f2c:	f000 8178 	beq.w	405220 <_svfprintf_r+0x1378>
  404f30:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404f32:	442c      	add	r4, r5
  404f34:	e721      	b.n	404d7a <_svfprintf_r+0xed2>
  404f36:	aa25      	add	r2, sp, #148	; 0x94
  404f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f3a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f3c:	f002 f90e 	bl	40715c <__ssprint_r>
  404f40:	2800      	cmp	r0, #0
  404f42:	f47f a883 	bne.w	40404c <_svfprintf_r+0x1a4>
  404f46:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404f48:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f4a:	46c8      	mov	r8, r9
  404f4c:	e782      	b.n	404e54 <_svfprintf_r+0xfac>
  404f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f50:	2b00      	cmp	r3, #0
  404f52:	bf08      	it	eq
  404f54:	2301      	moveq	r3, #1
  404f56:	930a      	str	r3, [sp, #40]	; 0x28
  404f58:	e6db      	b.n	404d12 <_svfprintf_r+0xe6a>
  404f5a:	4630      	mov	r0, r6
  404f5c:	940a      	str	r4, [sp, #40]	; 0x28
  404f5e:	f002 f88f 	bl	407080 <strlen>
  404f62:	950f      	str	r5, [sp, #60]	; 0x3c
  404f64:	900e      	str	r0, [sp, #56]	; 0x38
  404f66:	f8cd b01c 	str.w	fp, [sp, #28]
  404f6a:	4603      	mov	r3, r0
  404f6c:	f7ff b9f9 	b.w	404362 <_svfprintf_r+0x4ba>
  404f70:	272d      	movs	r7, #45	; 0x2d
  404f72:	2300      	movs	r3, #0
  404f74:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404f78:	930a      	str	r3, [sp, #40]	; 0x28
  404f7a:	f7ff b8ae 	b.w	4040da <_svfprintf_r+0x232>
  404f7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404f80:	9312      	str	r3, [sp, #72]	; 0x48
  404f82:	461a      	mov	r2, r3
  404f84:	3303      	adds	r3, #3
  404f86:	db04      	blt.n	404f92 <_svfprintf_r+0x10ea>
  404f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f8a:	4619      	mov	r1, r3
  404f8c:	4291      	cmp	r1, r2
  404f8e:	f6bf af17 	bge.w	404dc0 <_svfprintf_r+0xf18>
  404f92:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f94:	3b02      	subs	r3, #2
  404f96:	9311      	str	r3, [sp, #68]	; 0x44
  404f98:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404f9c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404fa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404fa2:	3b01      	subs	r3, #1
  404fa4:	2b00      	cmp	r3, #0
  404fa6:	931f      	str	r3, [sp, #124]	; 0x7c
  404fa8:	bfbd      	ittte	lt
  404faa:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404fac:	f1c3 0301 	rsblt	r3, r3, #1
  404fb0:	222d      	movlt	r2, #45	; 0x2d
  404fb2:	222b      	movge	r2, #43	; 0x2b
  404fb4:	2b09      	cmp	r3, #9
  404fb6:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404fba:	f340 8116 	ble.w	4051ea <_svfprintf_r+0x1342>
  404fbe:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404fc2:	4620      	mov	r0, r4
  404fc4:	4dab      	ldr	r5, [pc, #684]	; (405274 <_svfprintf_r+0x13cc>)
  404fc6:	e000      	b.n	404fca <_svfprintf_r+0x1122>
  404fc8:	4610      	mov	r0, r2
  404fca:	fb85 1203 	smull	r1, r2, r5, r3
  404fce:	17d9      	asrs	r1, r3, #31
  404fd0:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404fd4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404fd8:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404fdc:	3230      	adds	r2, #48	; 0x30
  404fde:	2909      	cmp	r1, #9
  404fe0:	f800 2c01 	strb.w	r2, [r0, #-1]
  404fe4:	460b      	mov	r3, r1
  404fe6:	f100 32ff 	add.w	r2, r0, #4294967295
  404fea:	dced      	bgt.n	404fc8 <_svfprintf_r+0x1120>
  404fec:	3330      	adds	r3, #48	; 0x30
  404fee:	3802      	subs	r0, #2
  404ff0:	b2d9      	uxtb	r1, r3
  404ff2:	4284      	cmp	r4, r0
  404ff4:	f802 1c01 	strb.w	r1, [r2, #-1]
  404ff8:	f240 8165 	bls.w	4052c6 <_svfprintf_r+0x141e>
  404ffc:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405000:	4613      	mov	r3, r2
  405002:	e001      	b.n	405008 <_svfprintf_r+0x1160>
  405004:	f813 1b01 	ldrb.w	r1, [r3], #1
  405008:	f800 1b01 	strb.w	r1, [r0], #1
  40500c:	42a3      	cmp	r3, r4
  40500e:	d1f9      	bne.n	405004 <_svfprintf_r+0x115c>
  405010:	3301      	adds	r3, #1
  405012:	1a9b      	subs	r3, r3, r2
  405014:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  405018:	4413      	add	r3, r2
  40501a:	aa21      	add	r2, sp, #132	; 0x84
  40501c:	1a9b      	subs	r3, r3, r2
  40501e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405020:	931b      	str	r3, [sp, #108]	; 0x6c
  405022:	2a01      	cmp	r2, #1
  405024:	4413      	add	r3, r2
  405026:	930e      	str	r3, [sp, #56]	; 0x38
  405028:	f340 8119 	ble.w	40525e <_svfprintf_r+0x13b6>
  40502c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40502e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405030:	4413      	add	r3, r2
  405032:	930e      	str	r3, [sp, #56]	; 0x38
  405034:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405038:	9308      	str	r3, [sp, #32]
  40503a:	2300      	movs	r3, #0
  40503c:	9312      	str	r3, [sp, #72]	; 0x48
  40503e:	e6cf      	b.n	404de0 <_svfprintf_r+0xf38>
  405040:	aa25      	add	r2, sp, #148	; 0x94
  405042:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405044:	980c      	ldr	r0, [sp, #48]	; 0x30
  405046:	f002 f889 	bl	40715c <__ssprint_r>
  40504a:	2800      	cmp	r0, #0
  40504c:	f47e affe 	bne.w	40404c <_svfprintf_r+0x1a4>
  405050:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405052:	46c8      	mov	r8, r9
  405054:	e4d7      	b.n	404a06 <_svfprintf_r+0xb5e>
  405056:	4623      	mov	r3, r4
  405058:	e6a2      	b.n	404da0 <_svfprintf_r+0xef8>
  40505a:	aa25      	add	r2, sp, #148	; 0x94
  40505c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40505e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405060:	f002 f87c 	bl	40715c <__ssprint_r>
  405064:	2800      	cmp	r0, #0
  405066:	f47e aff1 	bne.w	40404c <_svfprintf_r+0x1a4>
  40506a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40506c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40506e:	46c8      	mov	r8, r9
  405070:	e5ae      	b.n	404bd0 <_svfprintf_r+0xd28>
  405072:	aa25      	add	r2, sp, #148	; 0x94
  405074:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405076:	980c      	ldr	r0, [sp, #48]	; 0x30
  405078:	f002 f870 	bl	40715c <__ssprint_r>
  40507c:	2800      	cmp	r0, #0
  40507e:	f47e afe5 	bne.w	40404c <_svfprintf_r+0x1a4>
  405082:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405084:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405086:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405088:	1a9a      	subs	r2, r3, r2
  40508a:	46c8      	mov	r8, r9
  40508c:	e5b8      	b.n	404c00 <_svfprintf_r+0xd58>
  40508e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405090:	9612      	str	r6, [sp, #72]	; 0x48
  405092:	2b06      	cmp	r3, #6
  405094:	bf28      	it	cs
  405096:	2306      	movcs	r3, #6
  405098:	960a      	str	r6, [sp, #40]	; 0x28
  40509a:	4637      	mov	r7, r6
  40509c:	9308      	str	r3, [sp, #32]
  40509e:	950f      	str	r5, [sp, #60]	; 0x3c
  4050a0:	f8cd b01c 	str.w	fp, [sp, #28]
  4050a4:	930e      	str	r3, [sp, #56]	; 0x38
  4050a6:	4e74      	ldr	r6, [pc, #464]	; (405278 <_svfprintf_r+0x13d0>)
  4050a8:	f7ff b816 	b.w	4040d8 <_svfprintf_r+0x230>
  4050ac:	a823      	add	r0, sp, #140	; 0x8c
  4050ae:	a920      	add	r1, sp, #128	; 0x80
  4050b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4050b2:	9004      	str	r0, [sp, #16]
  4050b4:	9103      	str	r1, [sp, #12]
  4050b6:	a81f      	add	r0, sp, #124	; 0x7c
  4050b8:	2103      	movs	r1, #3
  4050ba:	9002      	str	r0, [sp, #8]
  4050bc:	9a08      	ldr	r2, [sp, #32]
  4050be:	9501      	str	r5, [sp, #4]
  4050c0:	463b      	mov	r3, r7
  4050c2:	9100      	str	r1, [sp, #0]
  4050c4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4050c6:	f000 f9c3 	bl	405450 <_dtoa_r>
  4050ca:	4606      	mov	r6, r0
  4050cc:	1944      	adds	r4, r0, r5
  4050ce:	e72b      	b.n	404f28 <_svfprintf_r+0x1080>
  4050d0:	2306      	movs	r3, #6
  4050d2:	930a      	str	r3, [sp, #40]	; 0x28
  4050d4:	e61d      	b.n	404d12 <_svfprintf_r+0xe6a>
  4050d6:	272d      	movs	r7, #45	; 0x2d
  4050d8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4050dc:	f7ff bacd 	b.w	40467a <_svfprintf_r+0x7d2>
  4050e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4050e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4050e4:	4413      	add	r3, r2
  4050e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4050e8:	930e      	str	r3, [sp, #56]	; 0x38
  4050ea:	2a00      	cmp	r2, #0
  4050ec:	f340 80b0 	ble.w	405250 <_svfprintf_r+0x13a8>
  4050f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4050f4:	9308      	str	r3, [sp, #32]
  4050f6:	2367      	movs	r3, #103	; 0x67
  4050f8:	9311      	str	r3, [sp, #68]	; 0x44
  4050fa:	e671      	b.n	404de0 <_svfprintf_r+0xf38>
  4050fc:	2b00      	cmp	r3, #0
  4050fe:	f340 80c3 	ble.w	405288 <_svfprintf_r+0x13e0>
  405102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405104:	2a00      	cmp	r2, #0
  405106:	f040 8099 	bne.w	40523c <_svfprintf_r+0x1394>
  40510a:	f01b 0f01 	tst.w	fp, #1
  40510e:	f040 8095 	bne.w	40523c <_svfprintf_r+0x1394>
  405112:	9308      	str	r3, [sp, #32]
  405114:	930e      	str	r3, [sp, #56]	; 0x38
  405116:	e663      	b.n	404de0 <_svfprintf_r+0xf38>
  405118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40511a:	9308      	str	r3, [sp, #32]
  40511c:	930e      	str	r3, [sp, #56]	; 0x38
  40511e:	900a      	str	r0, [sp, #40]	; 0x28
  405120:	950f      	str	r5, [sp, #60]	; 0x3c
  405122:	f8cd b01c 	str.w	fp, [sp, #28]
  405126:	9012      	str	r0, [sp, #72]	; 0x48
  405128:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40512c:	f7fe bfd4 	b.w	4040d8 <_svfprintf_r+0x230>
  405130:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405132:	2b47      	cmp	r3, #71	; 0x47
  405134:	f47f ae20 	bne.w	404d78 <_svfprintf_r+0xed0>
  405138:	f01b 0f01 	tst.w	fp, #1
  40513c:	f47f aeee 	bne.w	404f1c <_svfprintf_r+0x1074>
  405140:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405142:	1b9b      	subs	r3, r3, r6
  405144:	9313      	str	r3, [sp, #76]	; 0x4c
  405146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405148:	2b47      	cmp	r3, #71	; 0x47
  40514a:	f43f af18 	beq.w	404f7e <_svfprintf_r+0x10d6>
  40514e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405150:	9312      	str	r3, [sp, #72]	; 0x48
  405152:	e721      	b.n	404f98 <_svfprintf_r+0x10f0>
  405154:	424f      	negs	r7, r1
  405156:	3110      	adds	r1, #16
  405158:	4d48      	ldr	r5, [pc, #288]	; (40527c <_svfprintf_r+0x13d4>)
  40515a:	da2f      	bge.n	4051bc <_svfprintf_r+0x1314>
  40515c:	2410      	movs	r4, #16
  40515e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405162:	e004      	b.n	40516e <_svfprintf_r+0x12c6>
  405164:	f108 0808 	add.w	r8, r8, #8
  405168:	3f10      	subs	r7, #16
  40516a:	2f10      	cmp	r7, #16
  40516c:	dd26      	ble.n	4051bc <_svfprintf_r+0x1314>
  40516e:	3301      	adds	r3, #1
  405170:	3210      	adds	r2, #16
  405172:	2b07      	cmp	r3, #7
  405174:	9227      	str	r2, [sp, #156]	; 0x9c
  405176:	9326      	str	r3, [sp, #152]	; 0x98
  405178:	f8c8 5000 	str.w	r5, [r8]
  40517c:	f8c8 4004 	str.w	r4, [r8, #4]
  405180:	ddf0      	ble.n	405164 <_svfprintf_r+0x12bc>
  405182:	aa25      	add	r2, sp, #148	; 0x94
  405184:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405186:	4658      	mov	r0, fp
  405188:	f001 ffe8 	bl	40715c <__ssprint_r>
  40518c:	2800      	cmp	r0, #0
  40518e:	f47e af5d 	bne.w	40404c <_svfprintf_r+0x1a4>
  405192:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405194:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405196:	46c8      	mov	r8, r9
  405198:	e7e6      	b.n	405168 <_svfprintf_r+0x12c0>
  40519a:	aa25      	add	r2, sp, #148	; 0x94
  40519c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40519e:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051a0:	f001 ffdc 	bl	40715c <__ssprint_r>
  4051a4:	2800      	cmp	r0, #0
  4051a6:	f47e af51 	bne.w	40404c <_svfprintf_r+0x1a4>
  4051aa:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4051ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4051ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051b0:	46c8      	mov	r8, r9
  4051b2:	e667      	b.n	404e84 <_svfprintf_r+0xfdc>
  4051b4:	2000      	movs	r0, #0
  4051b6:	900a      	str	r0, [sp, #40]	; 0x28
  4051b8:	f7fe bed0 	b.w	403f5c <_svfprintf_r+0xb4>
  4051bc:	3301      	adds	r3, #1
  4051be:	443a      	add	r2, r7
  4051c0:	2b07      	cmp	r3, #7
  4051c2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4051c6:	9227      	str	r2, [sp, #156]	; 0x9c
  4051c8:	9326      	str	r3, [sp, #152]	; 0x98
  4051ca:	f108 0808 	add.w	r8, r8, #8
  4051ce:	f77f ae5c 	ble.w	404e8a <_svfprintf_r+0xfe2>
  4051d2:	aa25      	add	r2, sp, #148	; 0x94
  4051d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051d8:	f001 ffc0 	bl	40715c <__ssprint_r>
  4051dc:	2800      	cmp	r0, #0
  4051de:	f47e af35 	bne.w	40404c <_svfprintf_r+0x1a4>
  4051e2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4051e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4051e6:	46c8      	mov	r8, r9
  4051e8:	e64f      	b.n	404e8a <_svfprintf_r+0xfe2>
  4051ea:	3330      	adds	r3, #48	; 0x30
  4051ec:	2230      	movs	r2, #48	; 0x30
  4051ee:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4051f2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4051f6:	ab22      	add	r3, sp, #136	; 0x88
  4051f8:	e70f      	b.n	40501a <_svfprintf_r+0x1172>
  4051fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4051fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4051fe:	4413      	add	r3, r2
  405200:	930e      	str	r3, [sp, #56]	; 0x38
  405202:	e775      	b.n	4050f0 <_svfprintf_r+0x1248>
  405204:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405206:	e5cb      	b.n	404da0 <_svfprintf_r+0xef8>
  405208:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40520a:	4e1d      	ldr	r6, [pc, #116]	; (405280 <_svfprintf_r+0x13d8>)
  40520c:	2b00      	cmp	r3, #0
  40520e:	bfb6      	itet	lt
  405210:	272d      	movlt	r7, #45	; 0x2d
  405212:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  405216:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40521a:	4b1a      	ldr	r3, [pc, #104]	; (405284 <_svfprintf_r+0x13dc>)
  40521c:	f7ff ba2f 	b.w	40467e <_svfprintf_r+0x7d6>
  405220:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405222:	9808      	ldr	r0, [sp, #32]
  405224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405226:	4639      	mov	r1, r7
  405228:	f003 f82c 	bl	408284 <__aeabi_dcmpeq>
  40522c:	2800      	cmp	r0, #0
  40522e:	f47f ae7f 	bne.w	404f30 <_svfprintf_r+0x1088>
  405232:	f1c5 0501 	rsb	r5, r5, #1
  405236:	951f      	str	r5, [sp, #124]	; 0x7c
  405238:	442c      	add	r4, r5
  40523a:	e59e      	b.n	404d7a <_svfprintf_r+0xed2>
  40523c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40523e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405240:	4413      	add	r3, r2
  405242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405244:	441a      	add	r2, r3
  405246:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40524a:	920e      	str	r2, [sp, #56]	; 0x38
  40524c:	9308      	str	r3, [sp, #32]
  40524e:	e5c7      	b.n	404de0 <_svfprintf_r+0xf38>
  405250:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405254:	f1c3 0301 	rsb	r3, r3, #1
  405258:	441a      	add	r2, r3
  40525a:	4613      	mov	r3, r2
  40525c:	e7d0      	b.n	405200 <_svfprintf_r+0x1358>
  40525e:	f01b 0301 	ands.w	r3, fp, #1
  405262:	9312      	str	r3, [sp, #72]	; 0x48
  405264:	f47f aee2 	bne.w	40502c <_svfprintf_r+0x1184>
  405268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40526a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40526e:	9308      	str	r3, [sp, #32]
  405270:	e5b6      	b.n	404de0 <_svfprintf_r+0xf38>
  405272:	bf00      	nop
  405274:	66666667 	.word	0x66666667
  405278:	00408db0 	.word	0x00408db0
  40527c:	00408dcc 	.word	0x00408dcc
  405280:	00408d84 	.word	0x00408d84
  405284:	00408d80 	.word	0x00408d80
  405288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40528a:	b913      	cbnz	r3, 405292 <_svfprintf_r+0x13ea>
  40528c:	f01b 0f01 	tst.w	fp, #1
  405290:	d002      	beq.n	405298 <_svfprintf_r+0x13f0>
  405292:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405294:	3301      	adds	r3, #1
  405296:	e7d4      	b.n	405242 <_svfprintf_r+0x139a>
  405298:	2301      	movs	r3, #1
  40529a:	e73a      	b.n	405112 <_svfprintf_r+0x126a>
  40529c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40529e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4052a2:	6828      	ldr	r0, [r5, #0]
  4052a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4052a8:	900a      	str	r0, [sp, #40]	; 0x28
  4052aa:	4628      	mov	r0, r5
  4052ac:	3004      	adds	r0, #4
  4052ae:	46a2      	mov	sl, r4
  4052b0:	900f      	str	r0, [sp, #60]	; 0x3c
  4052b2:	f7fe be51 	b.w	403f58 <_svfprintf_r+0xb0>
  4052b6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4052ba:	f7ff b867 	b.w	40438c <_svfprintf_r+0x4e4>
  4052be:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4052c2:	f7ff ba15 	b.w	4046f0 <_svfprintf_r+0x848>
  4052c6:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4052ca:	e6a6      	b.n	40501a <_svfprintf_r+0x1172>
  4052cc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4052d0:	f7ff b8eb 	b.w	4044aa <_svfprintf_r+0x602>
  4052d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4052d6:	230c      	movs	r3, #12
  4052d8:	6013      	str	r3, [r2, #0]
  4052da:	f04f 33ff 	mov.w	r3, #4294967295
  4052de:	9309      	str	r3, [sp, #36]	; 0x24
  4052e0:	f7fe bebd 	b.w	40405e <_svfprintf_r+0x1b6>
  4052e4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4052e8:	f7ff b99a 	b.w	404620 <_svfprintf_r+0x778>
  4052ec:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4052f0:	f7ff b976 	b.w	4045e0 <_svfprintf_r+0x738>
  4052f4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4052f8:	f7ff b959 	b.w	4045ae <_svfprintf_r+0x706>
  4052fc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405300:	f7ff b912 	b.w	404528 <_svfprintf_r+0x680>

00405304 <register_fini>:
  405304:	4b02      	ldr	r3, [pc, #8]	; (405310 <register_fini+0xc>)
  405306:	b113      	cbz	r3, 40530e <register_fini+0xa>
  405308:	4802      	ldr	r0, [pc, #8]	; (405314 <register_fini+0x10>)
  40530a:	f000 b805 	b.w	405318 <atexit>
  40530e:	4770      	bx	lr
  405310:	00000000 	.word	0x00000000
  405314:	004062a5 	.word	0x004062a5

00405318 <atexit>:
  405318:	2300      	movs	r3, #0
  40531a:	4601      	mov	r1, r0
  40531c:	461a      	mov	r2, r3
  40531e:	4618      	mov	r0, r3
  405320:	f001 bf9a 	b.w	407258 <__register_exitproc>

00405324 <quorem>:
  405324:	6902      	ldr	r2, [r0, #16]
  405326:	690b      	ldr	r3, [r1, #16]
  405328:	4293      	cmp	r3, r2
  40532a:	f300 808d 	bgt.w	405448 <quorem+0x124>
  40532e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405332:	f103 38ff 	add.w	r8, r3, #4294967295
  405336:	f101 0714 	add.w	r7, r1, #20
  40533a:	f100 0b14 	add.w	fp, r0, #20
  40533e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405342:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405346:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40534a:	b083      	sub	sp, #12
  40534c:	3201      	adds	r2, #1
  40534e:	fbb3 f9f2 	udiv	r9, r3, r2
  405352:	eb0b 0304 	add.w	r3, fp, r4
  405356:	9400      	str	r4, [sp, #0]
  405358:	eb07 0a04 	add.w	sl, r7, r4
  40535c:	9301      	str	r3, [sp, #4]
  40535e:	f1b9 0f00 	cmp.w	r9, #0
  405362:	d039      	beq.n	4053d8 <quorem+0xb4>
  405364:	2500      	movs	r5, #0
  405366:	462e      	mov	r6, r5
  405368:	46bc      	mov	ip, r7
  40536a:	46de      	mov	lr, fp
  40536c:	f85c 4b04 	ldr.w	r4, [ip], #4
  405370:	f8de 3000 	ldr.w	r3, [lr]
  405374:	b2a2      	uxth	r2, r4
  405376:	fb09 5502 	mla	r5, r9, r2, r5
  40537a:	0c22      	lsrs	r2, r4, #16
  40537c:	0c2c      	lsrs	r4, r5, #16
  40537e:	fb09 4202 	mla	r2, r9, r2, r4
  405382:	b2ad      	uxth	r5, r5
  405384:	1b75      	subs	r5, r6, r5
  405386:	b296      	uxth	r6, r2
  405388:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40538c:	fa15 f383 	uxtah	r3, r5, r3
  405390:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405394:	b29b      	uxth	r3, r3
  405396:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40539a:	45e2      	cmp	sl, ip
  40539c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4053a0:	f84e 3b04 	str.w	r3, [lr], #4
  4053a4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4053a8:	d2e0      	bcs.n	40536c <quorem+0x48>
  4053aa:	9b00      	ldr	r3, [sp, #0]
  4053ac:	f85b 3003 	ldr.w	r3, [fp, r3]
  4053b0:	b993      	cbnz	r3, 4053d8 <quorem+0xb4>
  4053b2:	9c01      	ldr	r4, [sp, #4]
  4053b4:	1f23      	subs	r3, r4, #4
  4053b6:	459b      	cmp	fp, r3
  4053b8:	d20c      	bcs.n	4053d4 <quorem+0xb0>
  4053ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4053be:	b94b      	cbnz	r3, 4053d4 <quorem+0xb0>
  4053c0:	f1a4 0308 	sub.w	r3, r4, #8
  4053c4:	e002      	b.n	4053cc <quorem+0xa8>
  4053c6:	681a      	ldr	r2, [r3, #0]
  4053c8:	3b04      	subs	r3, #4
  4053ca:	b91a      	cbnz	r2, 4053d4 <quorem+0xb0>
  4053cc:	459b      	cmp	fp, r3
  4053ce:	f108 38ff 	add.w	r8, r8, #4294967295
  4053d2:	d3f8      	bcc.n	4053c6 <quorem+0xa2>
  4053d4:	f8c0 8010 	str.w	r8, [r0, #16]
  4053d8:	4604      	mov	r4, r0
  4053da:	f001 fd35 	bl	406e48 <__mcmp>
  4053de:	2800      	cmp	r0, #0
  4053e0:	db2e      	blt.n	405440 <quorem+0x11c>
  4053e2:	f109 0901 	add.w	r9, r9, #1
  4053e6:	465d      	mov	r5, fp
  4053e8:	2300      	movs	r3, #0
  4053ea:	f857 1b04 	ldr.w	r1, [r7], #4
  4053ee:	6828      	ldr	r0, [r5, #0]
  4053f0:	b28a      	uxth	r2, r1
  4053f2:	1a9a      	subs	r2, r3, r2
  4053f4:	0c0b      	lsrs	r3, r1, #16
  4053f6:	fa12 f280 	uxtah	r2, r2, r0
  4053fa:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4053fe:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405402:	b292      	uxth	r2, r2
  405404:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405408:	45ba      	cmp	sl, r7
  40540a:	f845 2b04 	str.w	r2, [r5], #4
  40540e:	ea4f 4323 	mov.w	r3, r3, asr #16
  405412:	d2ea      	bcs.n	4053ea <quorem+0xc6>
  405414:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405418:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40541c:	b982      	cbnz	r2, 405440 <quorem+0x11c>
  40541e:	1f1a      	subs	r2, r3, #4
  405420:	4593      	cmp	fp, r2
  405422:	d20b      	bcs.n	40543c <quorem+0x118>
  405424:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405428:	b942      	cbnz	r2, 40543c <quorem+0x118>
  40542a:	3b08      	subs	r3, #8
  40542c:	e002      	b.n	405434 <quorem+0x110>
  40542e:	681a      	ldr	r2, [r3, #0]
  405430:	3b04      	subs	r3, #4
  405432:	b91a      	cbnz	r2, 40543c <quorem+0x118>
  405434:	459b      	cmp	fp, r3
  405436:	f108 38ff 	add.w	r8, r8, #4294967295
  40543a:	d3f8      	bcc.n	40542e <quorem+0x10a>
  40543c:	f8c4 8010 	str.w	r8, [r4, #16]
  405440:	4648      	mov	r0, r9
  405442:	b003      	add	sp, #12
  405444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405448:	2000      	movs	r0, #0
  40544a:	4770      	bx	lr
  40544c:	0000      	movs	r0, r0
	...

00405450 <_dtoa_r>:
  405450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405454:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405456:	b09b      	sub	sp, #108	; 0x6c
  405458:	4604      	mov	r4, r0
  40545a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40545c:	4692      	mov	sl, r2
  40545e:	469b      	mov	fp, r3
  405460:	b141      	cbz	r1, 405474 <_dtoa_r+0x24>
  405462:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405464:	604a      	str	r2, [r1, #4]
  405466:	2301      	movs	r3, #1
  405468:	4093      	lsls	r3, r2
  40546a:	608b      	str	r3, [r1, #8]
  40546c:	f001 fb14 	bl	406a98 <_Bfree>
  405470:	2300      	movs	r3, #0
  405472:	6423      	str	r3, [r4, #64]	; 0x40
  405474:	f1bb 0f00 	cmp.w	fp, #0
  405478:	465d      	mov	r5, fp
  40547a:	db35      	blt.n	4054e8 <_dtoa_r+0x98>
  40547c:	2300      	movs	r3, #0
  40547e:	6033      	str	r3, [r6, #0]
  405480:	4b9d      	ldr	r3, [pc, #628]	; (4056f8 <_dtoa_r+0x2a8>)
  405482:	43ab      	bics	r3, r5
  405484:	d015      	beq.n	4054b2 <_dtoa_r+0x62>
  405486:	4650      	mov	r0, sl
  405488:	4659      	mov	r1, fp
  40548a:	2200      	movs	r2, #0
  40548c:	2300      	movs	r3, #0
  40548e:	f002 fef9 	bl	408284 <__aeabi_dcmpeq>
  405492:	4680      	mov	r8, r0
  405494:	2800      	cmp	r0, #0
  405496:	d02d      	beq.n	4054f4 <_dtoa_r+0xa4>
  405498:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40549a:	2301      	movs	r3, #1
  40549c:	6013      	str	r3, [r2, #0]
  40549e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4054a0:	2b00      	cmp	r3, #0
  4054a2:	f000 80bd 	beq.w	405620 <_dtoa_r+0x1d0>
  4054a6:	4895      	ldr	r0, [pc, #596]	; (4056fc <_dtoa_r+0x2ac>)
  4054a8:	6018      	str	r0, [r3, #0]
  4054aa:	3801      	subs	r0, #1
  4054ac:	b01b      	add	sp, #108	; 0x6c
  4054ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4054b4:	f242 730f 	movw	r3, #9999	; 0x270f
  4054b8:	6013      	str	r3, [r2, #0]
  4054ba:	f1ba 0f00 	cmp.w	sl, #0
  4054be:	d10d      	bne.n	4054dc <_dtoa_r+0x8c>
  4054c0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4054c4:	b955      	cbnz	r5, 4054dc <_dtoa_r+0x8c>
  4054c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4054c8:	488d      	ldr	r0, [pc, #564]	; (405700 <_dtoa_r+0x2b0>)
  4054ca:	2b00      	cmp	r3, #0
  4054cc:	d0ee      	beq.n	4054ac <_dtoa_r+0x5c>
  4054ce:	f100 0308 	add.w	r3, r0, #8
  4054d2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4054d4:	6013      	str	r3, [r2, #0]
  4054d6:	b01b      	add	sp, #108	; 0x6c
  4054d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4054de:	4889      	ldr	r0, [pc, #548]	; (405704 <_dtoa_r+0x2b4>)
  4054e0:	2b00      	cmp	r3, #0
  4054e2:	d0e3      	beq.n	4054ac <_dtoa_r+0x5c>
  4054e4:	1cc3      	adds	r3, r0, #3
  4054e6:	e7f4      	b.n	4054d2 <_dtoa_r+0x82>
  4054e8:	2301      	movs	r3, #1
  4054ea:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4054ee:	6033      	str	r3, [r6, #0]
  4054f0:	46ab      	mov	fp, r5
  4054f2:	e7c5      	b.n	405480 <_dtoa_r+0x30>
  4054f4:	aa18      	add	r2, sp, #96	; 0x60
  4054f6:	ab19      	add	r3, sp, #100	; 0x64
  4054f8:	9201      	str	r2, [sp, #4]
  4054fa:	9300      	str	r3, [sp, #0]
  4054fc:	4652      	mov	r2, sl
  4054fe:	465b      	mov	r3, fp
  405500:	4620      	mov	r0, r4
  405502:	f001 fd41 	bl	406f88 <__d2b>
  405506:	0d2b      	lsrs	r3, r5, #20
  405508:	4681      	mov	r9, r0
  40550a:	d071      	beq.n	4055f0 <_dtoa_r+0x1a0>
  40550c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405510:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405514:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405516:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40551a:	4650      	mov	r0, sl
  40551c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405520:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405524:	2200      	movs	r2, #0
  405526:	4b78      	ldr	r3, [pc, #480]	; (405708 <_dtoa_r+0x2b8>)
  405528:	f002 fa90 	bl	407a4c <__aeabi_dsub>
  40552c:	a36c      	add	r3, pc, #432	; (adr r3, 4056e0 <_dtoa_r+0x290>)
  40552e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405532:	f002 fc3f 	bl	407db4 <__aeabi_dmul>
  405536:	a36c      	add	r3, pc, #432	; (adr r3, 4056e8 <_dtoa_r+0x298>)
  405538:	e9d3 2300 	ldrd	r2, r3, [r3]
  40553c:	f002 fa88 	bl	407a50 <__adddf3>
  405540:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405544:	4630      	mov	r0, r6
  405546:	f002 fbcf 	bl	407ce8 <__aeabi_i2d>
  40554a:	a369      	add	r3, pc, #420	; (adr r3, 4056f0 <_dtoa_r+0x2a0>)
  40554c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405550:	f002 fc30 	bl	407db4 <__aeabi_dmul>
  405554:	4602      	mov	r2, r0
  405556:	460b      	mov	r3, r1
  405558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40555c:	f002 fa78 	bl	407a50 <__adddf3>
  405560:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405564:	f002 fed6 	bl	408314 <__aeabi_d2iz>
  405568:	2200      	movs	r2, #0
  40556a:	9002      	str	r0, [sp, #8]
  40556c:	2300      	movs	r3, #0
  40556e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405572:	f002 fe91 	bl	408298 <__aeabi_dcmplt>
  405576:	2800      	cmp	r0, #0
  405578:	f040 8173 	bne.w	405862 <_dtoa_r+0x412>
  40557c:	9d02      	ldr	r5, [sp, #8]
  40557e:	2d16      	cmp	r5, #22
  405580:	f200 815d 	bhi.w	40583e <_dtoa_r+0x3ee>
  405584:	4b61      	ldr	r3, [pc, #388]	; (40570c <_dtoa_r+0x2bc>)
  405586:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40558a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40558e:	4652      	mov	r2, sl
  405590:	465b      	mov	r3, fp
  405592:	f002 fe9f 	bl	4082d4 <__aeabi_dcmpgt>
  405596:	2800      	cmp	r0, #0
  405598:	f000 81c5 	beq.w	405926 <_dtoa_r+0x4d6>
  40559c:	1e6b      	subs	r3, r5, #1
  40559e:	9302      	str	r3, [sp, #8]
  4055a0:	2300      	movs	r3, #0
  4055a2:	930e      	str	r3, [sp, #56]	; 0x38
  4055a4:	1bbf      	subs	r7, r7, r6
  4055a6:	1e7b      	subs	r3, r7, #1
  4055a8:	9306      	str	r3, [sp, #24]
  4055aa:	f100 8154 	bmi.w	405856 <_dtoa_r+0x406>
  4055ae:	2300      	movs	r3, #0
  4055b0:	9308      	str	r3, [sp, #32]
  4055b2:	9b02      	ldr	r3, [sp, #8]
  4055b4:	2b00      	cmp	r3, #0
  4055b6:	f2c0 8145 	blt.w	405844 <_dtoa_r+0x3f4>
  4055ba:	9a06      	ldr	r2, [sp, #24]
  4055bc:	930d      	str	r3, [sp, #52]	; 0x34
  4055be:	4611      	mov	r1, r2
  4055c0:	4419      	add	r1, r3
  4055c2:	2300      	movs	r3, #0
  4055c4:	9106      	str	r1, [sp, #24]
  4055c6:	930c      	str	r3, [sp, #48]	; 0x30
  4055c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055ca:	2b09      	cmp	r3, #9
  4055cc:	d82a      	bhi.n	405624 <_dtoa_r+0x1d4>
  4055ce:	2b05      	cmp	r3, #5
  4055d0:	f340 865b 	ble.w	40628a <_dtoa_r+0xe3a>
  4055d4:	3b04      	subs	r3, #4
  4055d6:	9324      	str	r3, [sp, #144]	; 0x90
  4055d8:	2500      	movs	r5, #0
  4055da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4055dc:	3b02      	subs	r3, #2
  4055de:	2b03      	cmp	r3, #3
  4055e0:	f200 8642 	bhi.w	406268 <_dtoa_r+0xe18>
  4055e4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4055e8:	02c903d4 	.word	0x02c903d4
  4055ec:	046103df 	.word	0x046103df
  4055f0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4055f2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4055f4:	443e      	add	r6, r7
  4055f6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4055fa:	2b20      	cmp	r3, #32
  4055fc:	f340 818e 	ble.w	40591c <_dtoa_r+0x4cc>
  405600:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405604:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405608:	409d      	lsls	r5, r3
  40560a:	fa2a f000 	lsr.w	r0, sl, r0
  40560e:	4328      	orrs	r0, r5
  405610:	f002 fb5a 	bl	407cc8 <__aeabi_ui2d>
  405614:	2301      	movs	r3, #1
  405616:	3e01      	subs	r6, #1
  405618:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40561c:	9314      	str	r3, [sp, #80]	; 0x50
  40561e:	e781      	b.n	405524 <_dtoa_r+0xd4>
  405620:	483b      	ldr	r0, [pc, #236]	; (405710 <_dtoa_r+0x2c0>)
  405622:	e743      	b.n	4054ac <_dtoa_r+0x5c>
  405624:	2100      	movs	r1, #0
  405626:	6461      	str	r1, [r4, #68]	; 0x44
  405628:	4620      	mov	r0, r4
  40562a:	9125      	str	r1, [sp, #148]	; 0x94
  40562c:	f001 fa0e 	bl	406a4c <_Balloc>
  405630:	f04f 33ff 	mov.w	r3, #4294967295
  405634:	930a      	str	r3, [sp, #40]	; 0x28
  405636:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405638:	930f      	str	r3, [sp, #60]	; 0x3c
  40563a:	2301      	movs	r3, #1
  40563c:	9004      	str	r0, [sp, #16]
  40563e:	6420      	str	r0, [r4, #64]	; 0x40
  405640:	9224      	str	r2, [sp, #144]	; 0x90
  405642:	930b      	str	r3, [sp, #44]	; 0x2c
  405644:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405646:	2b00      	cmp	r3, #0
  405648:	f2c0 80d9 	blt.w	4057fe <_dtoa_r+0x3ae>
  40564c:	9a02      	ldr	r2, [sp, #8]
  40564e:	2a0e      	cmp	r2, #14
  405650:	f300 80d5 	bgt.w	4057fe <_dtoa_r+0x3ae>
  405654:	4b2d      	ldr	r3, [pc, #180]	; (40570c <_dtoa_r+0x2bc>)
  405656:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40565a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40565e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405662:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405664:	2b00      	cmp	r3, #0
  405666:	f2c0 83ba 	blt.w	405dde <_dtoa_r+0x98e>
  40566a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40566e:	4650      	mov	r0, sl
  405670:	462a      	mov	r2, r5
  405672:	4633      	mov	r3, r6
  405674:	4659      	mov	r1, fp
  405676:	f002 fcc7 	bl	408008 <__aeabi_ddiv>
  40567a:	f002 fe4b 	bl	408314 <__aeabi_d2iz>
  40567e:	4680      	mov	r8, r0
  405680:	f002 fb32 	bl	407ce8 <__aeabi_i2d>
  405684:	462a      	mov	r2, r5
  405686:	4633      	mov	r3, r6
  405688:	f002 fb94 	bl	407db4 <__aeabi_dmul>
  40568c:	460b      	mov	r3, r1
  40568e:	4602      	mov	r2, r0
  405690:	4659      	mov	r1, fp
  405692:	4650      	mov	r0, sl
  405694:	f002 f9da 	bl	407a4c <__aeabi_dsub>
  405698:	9d04      	ldr	r5, [sp, #16]
  40569a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40569e:	702b      	strb	r3, [r5, #0]
  4056a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056a2:	2b01      	cmp	r3, #1
  4056a4:	4606      	mov	r6, r0
  4056a6:	460f      	mov	r7, r1
  4056a8:	f105 0501 	add.w	r5, r5, #1
  4056ac:	d068      	beq.n	405780 <_dtoa_r+0x330>
  4056ae:	2200      	movs	r2, #0
  4056b0:	4b18      	ldr	r3, [pc, #96]	; (405714 <_dtoa_r+0x2c4>)
  4056b2:	f002 fb7f 	bl	407db4 <__aeabi_dmul>
  4056b6:	2200      	movs	r2, #0
  4056b8:	2300      	movs	r3, #0
  4056ba:	4606      	mov	r6, r0
  4056bc:	460f      	mov	r7, r1
  4056be:	f002 fde1 	bl	408284 <__aeabi_dcmpeq>
  4056c2:	2800      	cmp	r0, #0
  4056c4:	f040 8088 	bne.w	4057d8 <_dtoa_r+0x388>
  4056c8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  4056cc:	f04f 0a00 	mov.w	sl, #0
  4056d0:	f8df b040 	ldr.w	fp, [pc, #64]	; 405714 <_dtoa_r+0x2c4>
  4056d4:	940c      	str	r4, [sp, #48]	; 0x30
  4056d6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4056da:	e028      	b.n	40572e <_dtoa_r+0x2de>
  4056dc:	f3af 8000 	nop.w
  4056e0:	636f4361 	.word	0x636f4361
  4056e4:	3fd287a7 	.word	0x3fd287a7
  4056e8:	8b60c8b3 	.word	0x8b60c8b3
  4056ec:	3fc68a28 	.word	0x3fc68a28
  4056f0:	509f79fb 	.word	0x509f79fb
  4056f4:	3fd34413 	.word	0x3fd34413
  4056f8:	7ff00000 	.word	0x7ff00000
  4056fc:	00408db9 	.word	0x00408db9
  405700:	00408ddc 	.word	0x00408ddc
  405704:	00408de8 	.word	0x00408de8
  405708:	3ff80000 	.word	0x3ff80000
  40570c:	00408e18 	.word	0x00408e18
  405710:	00408db8 	.word	0x00408db8
  405714:	40240000 	.word	0x40240000
  405718:	f002 fb4c 	bl	407db4 <__aeabi_dmul>
  40571c:	2200      	movs	r2, #0
  40571e:	2300      	movs	r3, #0
  405720:	4606      	mov	r6, r0
  405722:	460f      	mov	r7, r1
  405724:	f002 fdae 	bl	408284 <__aeabi_dcmpeq>
  405728:	2800      	cmp	r0, #0
  40572a:	f040 83c1 	bne.w	405eb0 <_dtoa_r+0xa60>
  40572e:	4642      	mov	r2, r8
  405730:	464b      	mov	r3, r9
  405732:	4630      	mov	r0, r6
  405734:	4639      	mov	r1, r7
  405736:	f002 fc67 	bl	408008 <__aeabi_ddiv>
  40573a:	f002 fdeb 	bl	408314 <__aeabi_d2iz>
  40573e:	4604      	mov	r4, r0
  405740:	f002 fad2 	bl	407ce8 <__aeabi_i2d>
  405744:	4642      	mov	r2, r8
  405746:	464b      	mov	r3, r9
  405748:	f002 fb34 	bl	407db4 <__aeabi_dmul>
  40574c:	4602      	mov	r2, r0
  40574e:	460b      	mov	r3, r1
  405750:	4630      	mov	r0, r6
  405752:	4639      	mov	r1, r7
  405754:	f002 f97a 	bl	407a4c <__aeabi_dsub>
  405758:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40575c:	9e04      	ldr	r6, [sp, #16]
  40575e:	f805 eb01 	strb.w	lr, [r5], #1
  405762:	eba5 0e06 	sub.w	lr, r5, r6
  405766:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405768:	45b6      	cmp	lr, r6
  40576a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40576e:	4652      	mov	r2, sl
  405770:	465b      	mov	r3, fp
  405772:	d1d1      	bne.n	405718 <_dtoa_r+0x2c8>
  405774:	46a0      	mov	r8, r4
  405776:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40577a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40577c:	4606      	mov	r6, r0
  40577e:	460f      	mov	r7, r1
  405780:	4632      	mov	r2, r6
  405782:	463b      	mov	r3, r7
  405784:	4630      	mov	r0, r6
  405786:	4639      	mov	r1, r7
  405788:	f002 f962 	bl	407a50 <__adddf3>
  40578c:	4606      	mov	r6, r0
  40578e:	460f      	mov	r7, r1
  405790:	4602      	mov	r2, r0
  405792:	460b      	mov	r3, r1
  405794:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405798:	f002 fd7e 	bl	408298 <__aeabi_dcmplt>
  40579c:	b948      	cbnz	r0, 4057b2 <_dtoa_r+0x362>
  40579e:	4632      	mov	r2, r6
  4057a0:	463b      	mov	r3, r7
  4057a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4057a6:	f002 fd6d 	bl	408284 <__aeabi_dcmpeq>
  4057aa:	b1a8      	cbz	r0, 4057d8 <_dtoa_r+0x388>
  4057ac:	f018 0f01 	tst.w	r8, #1
  4057b0:	d012      	beq.n	4057d8 <_dtoa_r+0x388>
  4057b2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4057b6:	9a04      	ldr	r2, [sp, #16]
  4057b8:	1e6b      	subs	r3, r5, #1
  4057ba:	e004      	b.n	4057c6 <_dtoa_r+0x376>
  4057bc:	429a      	cmp	r2, r3
  4057be:	f000 8401 	beq.w	405fc4 <_dtoa_r+0xb74>
  4057c2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  4057c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  4057ca:	f103 0501 	add.w	r5, r3, #1
  4057ce:	d0f5      	beq.n	4057bc <_dtoa_r+0x36c>
  4057d0:	f108 0801 	add.w	r8, r8, #1
  4057d4:	f883 8000 	strb.w	r8, [r3]
  4057d8:	4649      	mov	r1, r9
  4057da:	4620      	mov	r0, r4
  4057dc:	f001 f95c 	bl	406a98 <_Bfree>
  4057e0:	2200      	movs	r2, #0
  4057e2:	9b02      	ldr	r3, [sp, #8]
  4057e4:	702a      	strb	r2, [r5, #0]
  4057e6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4057e8:	3301      	adds	r3, #1
  4057ea:	6013      	str	r3, [r2, #0]
  4057ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4057ee:	2b00      	cmp	r3, #0
  4057f0:	f000 839e 	beq.w	405f30 <_dtoa_r+0xae0>
  4057f4:	9804      	ldr	r0, [sp, #16]
  4057f6:	601d      	str	r5, [r3, #0]
  4057f8:	b01b      	add	sp, #108	; 0x6c
  4057fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405800:	2a00      	cmp	r2, #0
  405802:	d03e      	beq.n	405882 <_dtoa_r+0x432>
  405804:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405806:	2a01      	cmp	r2, #1
  405808:	f340 8311 	ble.w	405e2e <_dtoa_r+0x9de>
  40580c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40580e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405810:	1e5f      	subs	r7, r3, #1
  405812:	42ba      	cmp	r2, r7
  405814:	f2c0 838f 	blt.w	405f36 <_dtoa_r+0xae6>
  405818:	1bd7      	subs	r7, r2, r7
  40581a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40581c:	2b00      	cmp	r3, #0
  40581e:	f2c0 848b 	blt.w	406138 <_dtoa_r+0xce8>
  405822:	9d08      	ldr	r5, [sp, #32]
  405824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405826:	9a08      	ldr	r2, [sp, #32]
  405828:	441a      	add	r2, r3
  40582a:	9208      	str	r2, [sp, #32]
  40582c:	9a06      	ldr	r2, [sp, #24]
  40582e:	2101      	movs	r1, #1
  405830:	441a      	add	r2, r3
  405832:	4620      	mov	r0, r4
  405834:	9206      	str	r2, [sp, #24]
  405836:	f001 f9c9 	bl	406bcc <__i2b>
  40583a:	4606      	mov	r6, r0
  40583c:	e024      	b.n	405888 <_dtoa_r+0x438>
  40583e:	2301      	movs	r3, #1
  405840:	930e      	str	r3, [sp, #56]	; 0x38
  405842:	e6af      	b.n	4055a4 <_dtoa_r+0x154>
  405844:	9a08      	ldr	r2, [sp, #32]
  405846:	9b02      	ldr	r3, [sp, #8]
  405848:	1ad2      	subs	r2, r2, r3
  40584a:	425b      	negs	r3, r3
  40584c:	930c      	str	r3, [sp, #48]	; 0x30
  40584e:	2300      	movs	r3, #0
  405850:	9208      	str	r2, [sp, #32]
  405852:	930d      	str	r3, [sp, #52]	; 0x34
  405854:	e6b8      	b.n	4055c8 <_dtoa_r+0x178>
  405856:	f1c7 0301 	rsb	r3, r7, #1
  40585a:	9308      	str	r3, [sp, #32]
  40585c:	2300      	movs	r3, #0
  40585e:	9306      	str	r3, [sp, #24]
  405860:	e6a7      	b.n	4055b2 <_dtoa_r+0x162>
  405862:	9d02      	ldr	r5, [sp, #8]
  405864:	4628      	mov	r0, r5
  405866:	f002 fa3f 	bl	407ce8 <__aeabi_i2d>
  40586a:	4602      	mov	r2, r0
  40586c:	460b      	mov	r3, r1
  40586e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405872:	f002 fd07 	bl	408284 <__aeabi_dcmpeq>
  405876:	2800      	cmp	r0, #0
  405878:	f47f ae80 	bne.w	40557c <_dtoa_r+0x12c>
  40587c:	1e6b      	subs	r3, r5, #1
  40587e:	9302      	str	r3, [sp, #8]
  405880:	e67c      	b.n	40557c <_dtoa_r+0x12c>
  405882:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405884:	9d08      	ldr	r5, [sp, #32]
  405886:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405888:	2d00      	cmp	r5, #0
  40588a:	dd0c      	ble.n	4058a6 <_dtoa_r+0x456>
  40588c:	9906      	ldr	r1, [sp, #24]
  40588e:	2900      	cmp	r1, #0
  405890:	460b      	mov	r3, r1
  405892:	dd08      	ble.n	4058a6 <_dtoa_r+0x456>
  405894:	42a9      	cmp	r1, r5
  405896:	9a08      	ldr	r2, [sp, #32]
  405898:	bfa8      	it	ge
  40589a:	462b      	movge	r3, r5
  40589c:	1ad2      	subs	r2, r2, r3
  40589e:	1aed      	subs	r5, r5, r3
  4058a0:	1acb      	subs	r3, r1, r3
  4058a2:	9208      	str	r2, [sp, #32]
  4058a4:	9306      	str	r3, [sp, #24]
  4058a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4058a8:	b1d3      	cbz	r3, 4058e0 <_dtoa_r+0x490>
  4058aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4058ac:	2b00      	cmp	r3, #0
  4058ae:	f000 82b7 	beq.w	405e20 <_dtoa_r+0x9d0>
  4058b2:	2f00      	cmp	r7, #0
  4058b4:	dd10      	ble.n	4058d8 <_dtoa_r+0x488>
  4058b6:	4631      	mov	r1, r6
  4058b8:	463a      	mov	r2, r7
  4058ba:	4620      	mov	r0, r4
  4058bc:	f001 fa22 	bl	406d04 <__pow5mult>
  4058c0:	464a      	mov	r2, r9
  4058c2:	4601      	mov	r1, r0
  4058c4:	4606      	mov	r6, r0
  4058c6:	4620      	mov	r0, r4
  4058c8:	f001 f98a 	bl	406be0 <__multiply>
  4058cc:	4649      	mov	r1, r9
  4058ce:	4680      	mov	r8, r0
  4058d0:	4620      	mov	r0, r4
  4058d2:	f001 f8e1 	bl	406a98 <_Bfree>
  4058d6:	46c1      	mov	r9, r8
  4058d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4058da:	1bda      	subs	r2, r3, r7
  4058dc:	f040 82a1 	bne.w	405e22 <_dtoa_r+0x9d2>
  4058e0:	2101      	movs	r1, #1
  4058e2:	4620      	mov	r0, r4
  4058e4:	f001 f972 	bl	406bcc <__i2b>
  4058e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4058ea:	2b00      	cmp	r3, #0
  4058ec:	4680      	mov	r8, r0
  4058ee:	dd1c      	ble.n	40592a <_dtoa_r+0x4da>
  4058f0:	4601      	mov	r1, r0
  4058f2:	461a      	mov	r2, r3
  4058f4:	4620      	mov	r0, r4
  4058f6:	f001 fa05 	bl	406d04 <__pow5mult>
  4058fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4058fc:	2b01      	cmp	r3, #1
  4058fe:	4680      	mov	r8, r0
  405900:	f340 8254 	ble.w	405dac <_dtoa_r+0x95c>
  405904:	2300      	movs	r3, #0
  405906:	930c      	str	r3, [sp, #48]	; 0x30
  405908:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40590c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405910:	6918      	ldr	r0, [r3, #16]
  405912:	f001 f90b 	bl	406b2c <__hi0bits>
  405916:	f1c0 0020 	rsb	r0, r0, #32
  40591a:	e010      	b.n	40593e <_dtoa_r+0x4ee>
  40591c:	f1c3 0520 	rsb	r5, r3, #32
  405920:	fa0a f005 	lsl.w	r0, sl, r5
  405924:	e674      	b.n	405610 <_dtoa_r+0x1c0>
  405926:	900e      	str	r0, [sp, #56]	; 0x38
  405928:	e63c      	b.n	4055a4 <_dtoa_r+0x154>
  40592a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40592c:	2b01      	cmp	r3, #1
  40592e:	f340 8287 	ble.w	405e40 <_dtoa_r+0x9f0>
  405932:	2300      	movs	r3, #0
  405934:	930c      	str	r3, [sp, #48]	; 0x30
  405936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405938:	2001      	movs	r0, #1
  40593a:	2b00      	cmp	r3, #0
  40593c:	d1e4      	bne.n	405908 <_dtoa_r+0x4b8>
  40593e:	9a06      	ldr	r2, [sp, #24]
  405940:	4410      	add	r0, r2
  405942:	f010 001f 	ands.w	r0, r0, #31
  405946:	f000 80a1 	beq.w	405a8c <_dtoa_r+0x63c>
  40594a:	f1c0 0320 	rsb	r3, r0, #32
  40594e:	2b04      	cmp	r3, #4
  405950:	f340 849e 	ble.w	406290 <_dtoa_r+0xe40>
  405954:	9b08      	ldr	r3, [sp, #32]
  405956:	f1c0 001c 	rsb	r0, r0, #28
  40595a:	4403      	add	r3, r0
  40595c:	9308      	str	r3, [sp, #32]
  40595e:	4613      	mov	r3, r2
  405960:	4403      	add	r3, r0
  405962:	4405      	add	r5, r0
  405964:	9306      	str	r3, [sp, #24]
  405966:	9b08      	ldr	r3, [sp, #32]
  405968:	2b00      	cmp	r3, #0
  40596a:	dd05      	ble.n	405978 <_dtoa_r+0x528>
  40596c:	4649      	mov	r1, r9
  40596e:	461a      	mov	r2, r3
  405970:	4620      	mov	r0, r4
  405972:	f001 fa17 	bl	406da4 <__lshift>
  405976:	4681      	mov	r9, r0
  405978:	9b06      	ldr	r3, [sp, #24]
  40597a:	2b00      	cmp	r3, #0
  40597c:	dd05      	ble.n	40598a <_dtoa_r+0x53a>
  40597e:	4641      	mov	r1, r8
  405980:	461a      	mov	r2, r3
  405982:	4620      	mov	r0, r4
  405984:	f001 fa0e 	bl	406da4 <__lshift>
  405988:	4680      	mov	r8, r0
  40598a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40598c:	2b00      	cmp	r3, #0
  40598e:	f040 8086 	bne.w	405a9e <_dtoa_r+0x64e>
  405992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405994:	2b00      	cmp	r3, #0
  405996:	f340 8266 	ble.w	405e66 <_dtoa_r+0xa16>
  40599a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40599c:	2b00      	cmp	r3, #0
  40599e:	f000 8098 	beq.w	405ad2 <_dtoa_r+0x682>
  4059a2:	2d00      	cmp	r5, #0
  4059a4:	dd05      	ble.n	4059b2 <_dtoa_r+0x562>
  4059a6:	4631      	mov	r1, r6
  4059a8:	462a      	mov	r2, r5
  4059aa:	4620      	mov	r0, r4
  4059ac:	f001 f9fa 	bl	406da4 <__lshift>
  4059b0:	4606      	mov	r6, r0
  4059b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4059b4:	2b00      	cmp	r3, #0
  4059b6:	f040 8337 	bne.w	406028 <_dtoa_r+0xbd8>
  4059ba:	9606      	str	r6, [sp, #24]
  4059bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059be:	9a04      	ldr	r2, [sp, #16]
  4059c0:	f8dd b018 	ldr.w	fp, [sp, #24]
  4059c4:	3b01      	subs	r3, #1
  4059c6:	18d3      	adds	r3, r2, r3
  4059c8:	930b      	str	r3, [sp, #44]	; 0x2c
  4059ca:	f00a 0301 	and.w	r3, sl, #1
  4059ce:	930c      	str	r3, [sp, #48]	; 0x30
  4059d0:	4617      	mov	r7, r2
  4059d2:	46c2      	mov	sl, r8
  4059d4:	4651      	mov	r1, sl
  4059d6:	4648      	mov	r0, r9
  4059d8:	f7ff fca4 	bl	405324 <quorem>
  4059dc:	4631      	mov	r1, r6
  4059de:	4605      	mov	r5, r0
  4059e0:	4648      	mov	r0, r9
  4059e2:	f001 fa31 	bl	406e48 <__mcmp>
  4059e6:	465a      	mov	r2, fp
  4059e8:	900a      	str	r0, [sp, #40]	; 0x28
  4059ea:	4651      	mov	r1, sl
  4059ec:	4620      	mov	r0, r4
  4059ee:	f001 fa47 	bl	406e80 <__mdiff>
  4059f2:	68c2      	ldr	r2, [r0, #12]
  4059f4:	4680      	mov	r8, r0
  4059f6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4059fa:	2a00      	cmp	r2, #0
  4059fc:	f040 822b 	bne.w	405e56 <_dtoa_r+0xa06>
  405a00:	4601      	mov	r1, r0
  405a02:	4648      	mov	r0, r9
  405a04:	9308      	str	r3, [sp, #32]
  405a06:	f001 fa1f 	bl	406e48 <__mcmp>
  405a0a:	4641      	mov	r1, r8
  405a0c:	9006      	str	r0, [sp, #24]
  405a0e:	4620      	mov	r0, r4
  405a10:	f001 f842 	bl	406a98 <_Bfree>
  405a14:	9a06      	ldr	r2, [sp, #24]
  405a16:	9b08      	ldr	r3, [sp, #32]
  405a18:	b932      	cbnz	r2, 405a28 <_dtoa_r+0x5d8>
  405a1a:	9924      	ldr	r1, [sp, #144]	; 0x90
  405a1c:	b921      	cbnz	r1, 405a28 <_dtoa_r+0x5d8>
  405a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405a20:	2a00      	cmp	r2, #0
  405a22:	f000 83ef 	beq.w	406204 <_dtoa_r+0xdb4>
  405a26:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405a28:	990a      	ldr	r1, [sp, #40]	; 0x28
  405a2a:	2900      	cmp	r1, #0
  405a2c:	f2c0 829f 	blt.w	405f6e <_dtoa_r+0xb1e>
  405a30:	d105      	bne.n	405a3e <_dtoa_r+0x5ee>
  405a32:	9924      	ldr	r1, [sp, #144]	; 0x90
  405a34:	b919      	cbnz	r1, 405a3e <_dtoa_r+0x5ee>
  405a36:	990c      	ldr	r1, [sp, #48]	; 0x30
  405a38:	2900      	cmp	r1, #0
  405a3a:	f000 8298 	beq.w	405f6e <_dtoa_r+0xb1e>
  405a3e:	2a00      	cmp	r2, #0
  405a40:	f300 8306 	bgt.w	406050 <_dtoa_r+0xc00>
  405a44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405a46:	703b      	strb	r3, [r7, #0]
  405a48:	f107 0801 	add.w	r8, r7, #1
  405a4c:	4297      	cmp	r7, r2
  405a4e:	4645      	mov	r5, r8
  405a50:	f000 830c 	beq.w	40606c <_dtoa_r+0xc1c>
  405a54:	4649      	mov	r1, r9
  405a56:	2300      	movs	r3, #0
  405a58:	220a      	movs	r2, #10
  405a5a:	4620      	mov	r0, r4
  405a5c:	f001 f826 	bl	406aac <__multadd>
  405a60:	455e      	cmp	r6, fp
  405a62:	4681      	mov	r9, r0
  405a64:	4631      	mov	r1, r6
  405a66:	f04f 0300 	mov.w	r3, #0
  405a6a:	f04f 020a 	mov.w	r2, #10
  405a6e:	4620      	mov	r0, r4
  405a70:	f000 81eb 	beq.w	405e4a <_dtoa_r+0x9fa>
  405a74:	f001 f81a 	bl	406aac <__multadd>
  405a78:	4659      	mov	r1, fp
  405a7a:	4606      	mov	r6, r0
  405a7c:	2300      	movs	r3, #0
  405a7e:	220a      	movs	r2, #10
  405a80:	4620      	mov	r0, r4
  405a82:	f001 f813 	bl	406aac <__multadd>
  405a86:	4647      	mov	r7, r8
  405a88:	4683      	mov	fp, r0
  405a8a:	e7a3      	b.n	4059d4 <_dtoa_r+0x584>
  405a8c:	201c      	movs	r0, #28
  405a8e:	9b08      	ldr	r3, [sp, #32]
  405a90:	4403      	add	r3, r0
  405a92:	9308      	str	r3, [sp, #32]
  405a94:	9b06      	ldr	r3, [sp, #24]
  405a96:	4403      	add	r3, r0
  405a98:	4405      	add	r5, r0
  405a9a:	9306      	str	r3, [sp, #24]
  405a9c:	e763      	b.n	405966 <_dtoa_r+0x516>
  405a9e:	4641      	mov	r1, r8
  405aa0:	4648      	mov	r0, r9
  405aa2:	f001 f9d1 	bl	406e48 <__mcmp>
  405aa6:	2800      	cmp	r0, #0
  405aa8:	f6bf af73 	bge.w	405992 <_dtoa_r+0x542>
  405aac:	9f02      	ldr	r7, [sp, #8]
  405aae:	4649      	mov	r1, r9
  405ab0:	2300      	movs	r3, #0
  405ab2:	220a      	movs	r2, #10
  405ab4:	4620      	mov	r0, r4
  405ab6:	3f01      	subs	r7, #1
  405ab8:	9702      	str	r7, [sp, #8]
  405aba:	f000 fff7 	bl	406aac <__multadd>
  405abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405ac0:	4681      	mov	r9, r0
  405ac2:	2b00      	cmp	r3, #0
  405ac4:	f040 83b6 	bne.w	406234 <_dtoa_r+0xde4>
  405ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405aca:	2b00      	cmp	r3, #0
  405acc:	f340 83bf 	ble.w	40624e <_dtoa_r+0xdfe>
  405ad0:	930a      	str	r3, [sp, #40]	; 0x28
  405ad2:	f8dd b010 	ldr.w	fp, [sp, #16]
  405ad6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405ad8:	465d      	mov	r5, fp
  405ada:	e002      	b.n	405ae2 <_dtoa_r+0x692>
  405adc:	f000 ffe6 	bl	406aac <__multadd>
  405ae0:	4681      	mov	r9, r0
  405ae2:	4641      	mov	r1, r8
  405ae4:	4648      	mov	r0, r9
  405ae6:	f7ff fc1d 	bl	405324 <quorem>
  405aea:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405aee:	f805 ab01 	strb.w	sl, [r5], #1
  405af2:	eba5 030b 	sub.w	r3, r5, fp
  405af6:	42bb      	cmp	r3, r7
  405af8:	f04f 020a 	mov.w	r2, #10
  405afc:	f04f 0300 	mov.w	r3, #0
  405b00:	4649      	mov	r1, r9
  405b02:	4620      	mov	r0, r4
  405b04:	dbea      	blt.n	405adc <_dtoa_r+0x68c>
  405b06:	9b04      	ldr	r3, [sp, #16]
  405b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405b0a:	2a01      	cmp	r2, #1
  405b0c:	bfac      	ite	ge
  405b0e:	189b      	addge	r3, r3, r2
  405b10:	3301      	addlt	r3, #1
  405b12:	461d      	mov	r5, r3
  405b14:	f04f 0b00 	mov.w	fp, #0
  405b18:	4649      	mov	r1, r9
  405b1a:	2201      	movs	r2, #1
  405b1c:	4620      	mov	r0, r4
  405b1e:	f001 f941 	bl	406da4 <__lshift>
  405b22:	4641      	mov	r1, r8
  405b24:	4681      	mov	r9, r0
  405b26:	f001 f98f 	bl	406e48 <__mcmp>
  405b2a:	2800      	cmp	r0, #0
  405b2c:	f340 823d 	ble.w	405faa <_dtoa_r+0xb5a>
  405b30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405b34:	9904      	ldr	r1, [sp, #16]
  405b36:	1e6b      	subs	r3, r5, #1
  405b38:	e004      	b.n	405b44 <_dtoa_r+0x6f4>
  405b3a:	428b      	cmp	r3, r1
  405b3c:	f000 81ae 	beq.w	405e9c <_dtoa_r+0xa4c>
  405b40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405b44:	2a39      	cmp	r2, #57	; 0x39
  405b46:	f103 0501 	add.w	r5, r3, #1
  405b4a:	d0f6      	beq.n	405b3a <_dtoa_r+0x6ea>
  405b4c:	3201      	adds	r2, #1
  405b4e:	701a      	strb	r2, [r3, #0]
  405b50:	4641      	mov	r1, r8
  405b52:	4620      	mov	r0, r4
  405b54:	f000 ffa0 	bl	406a98 <_Bfree>
  405b58:	2e00      	cmp	r6, #0
  405b5a:	f43f ae3d 	beq.w	4057d8 <_dtoa_r+0x388>
  405b5e:	f1bb 0f00 	cmp.w	fp, #0
  405b62:	d005      	beq.n	405b70 <_dtoa_r+0x720>
  405b64:	45b3      	cmp	fp, r6
  405b66:	d003      	beq.n	405b70 <_dtoa_r+0x720>
  405b68:	4659      	mov	r1, fp
  405b6a:	4620      	mov	r0, r4
  405b6c:	f000 ff94 	bl	406a98 <_Bfree>
  405b70:	4631      	mov	r1, r6
  405b72:	4620      	mov	r0, r4
  405b74:	f000 ff90 	bl	406a98 <_Bfree>
  405b78:	e62e      	b.n	4057d8 <_dtoa_r+0x388>
  405b7a:	2300      	movs	r3, #0
  405b7c:	930b      	str	r3, [sp, #44]	; 0x2c
  405b7e:	9b02      	ldr	r3, [sp, #8]
  405b80:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405b82:	4413      	add	r3, r2
  405b84:	930f      	str	r3, [sp, #60]	; 0x3c
  405b86:	3301      	adds	r3, #1
  405b88:	2b01      	cmp	r3, #1
  405b8a:	461f      	mov	r7, r3
  405b8c:	461e      	mov	r6, r3
  405b8e:	930a      	str	r3, [sp, #40]	; 0x28
  405b90:	bfb8      	it	lt
  405b92:	2701      	movlt	r7, #1
  405b94:	2100      	movs	r1, #0
  405b96:	2f17      	cmp	r7, #23
  405b98:	6461      	str	r1, [r4, #68]	; 0x44
  405b9a:	d90a      	bls.n	405bb2 <_dtoa_r+0x762>
  405b9c:	2201      	movs	r2, #1
  405b9e:	2304      	movs	r3, #4
  405ba0:	005b      	lsls	r3, r3, #1
  405ba2:	f103 0014 	add.w	r0, r3, #20
  405ba6:	4287      	cmp	r7, r0
  405ba8:	4611      	mov	r1, r2
  405baa:	f102 0201 	add.w	r2, r2, #1
  405bae:	d2f7      	bcs.n	405ba0 <_dtoa_r+0x750>
  405bb0:	6461      	str	r1, [r4, #68]	; 0x44
  405bb2:	4620      	mov	r0, r4
  405bb4:	f000 ff4a 	bl	406a4c <_Balloc>
  405bb8:	2e0e      	cmp	r6, #14
  405bba:	9004      	str	r0, [sp, #16]
  405bbc:	6420      	str	r0, [r4, #64]	; 0x40
  405bbe:	f63f ad41 	bhi.w	405644 <_dtoa_r+0x1f4>
  405bc2:	2d00      	cmp	r5, #0
  405bc4:	f43f ad3e 	beq.w	405644 <_dtoa_r+0x1f4>
  405bc8:	9902      	ldr	r1, [sp, #8]
  405bca:	2900      	cmp	r1, #0
  405bcc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405bd0:	f340 8202 	ble.w	405fd8 <_dtoa_r+0xb88>
  405bd4:	4bb8      	ldr	r3, [pc, #736]	; (405eb8 <_dtoa_r+0xa68>)
  405bd6:	f001 020f 	and.w	r2, r1, #15
  405bda:	110d      	asrs	r5, r1, #4
  405bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405be0:	06e9      	lsls	r1, r5, #27
  405be2:	e9d3 6700 	ldrd	r6, r7, [r3]
  405be6:	f140 81ae 	bpl.w	405f46 <_dtoa_r+0xaf6>
  405bea:	4bb4      	ldr	r3, [pc, #720]	; (405ebc <_dtoa_r+0xa6c>)
  405bec:	4650      	mov	r0, sl
  405bee:	4659      	mov	r1, fp
  405bf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405bf4:	f002 fa08 	bl	408008 <__aeabi_ddiv>
  405bf8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405bfc:	f005 050f 	and.w	r5, r5, #15
  405c00:	f04f 0a03 	mov.w	sl, #3
  405c04:	b18d      	cbz	r5, 405c2a <_dtoa_r+0x7da>
  405c06:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405ebc <_dtoa_r+0xa6c>
  405c0a:	07ea      	lsls	r2, r5, #31
  405c0c:	d509      	bpl.n	405c22 <_dtoa_r+0x7d2>
  405c0e:	4630      	mov	r0, r6
  405c10:	4639      	mov	r1, r7
  405c12:	e9d8 2300 	ldrd	r2, r3, [r8]
  405c16:	f002 f8cd 	bl	407db4 <__aeabi_dmul>
  405c1a:	f10a 0a01 	add.w	sl, sl, #1
  405c1e:	4606      	mov	r6, r0
  405c20:	460f      	mov	r7, r1
  405c22:	106d      	asrs	r5, r5, #1
  405c24:	f108 0808 	add.w	r8, r8, #8
  405c28:	d1ef      	bne.n	405c0a <_dtoa_r+0x7ba>
  405c2a:	463b      	mov	r3, r7
  405c2c:	4632      	mov	r2, r6
  405c2e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  405c32:	f002 f9e9 	bl	408008 <__aeabi_ddiv>
  405c36:	4607      	mov	r7, r0
  405c38:	4688      	mov	r8, r1
  405c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405c3c:	b143      	cbz	r3, 405c50 <_dtoa_r+0x800>
  405c3e:	2200      	movs	r2, #0
  405c40:	4b9f      	ldr	r3, [pc, #636]	; (405ec0 <_dtoa_r+0xa70>)
  405c42:	4638      	mov	r0, r7
  405c44:	4641      	mov	r1, r8
  405c46:	f002 fb27 	bl	408298 <__aeabi_dcmplt>
  405c4a:	2800      	cmp	r0, #0
  405c4c:	f040 8286 	bne.w	40615c <_dtoa_r+0xd0c>
  405c50:	4650      	mov	r0, sl
  405c52:	f002 f849 	bl	407ce8 <__aeabi_i2d>
  405c56:	463a      	mov	r2, r7
  405c58:	4643      	mov	r3, r8
  405c5a:	f002 f8ab 	bl	407db4 <__aeabi_dmul>
  405c5e:	4b99      	ldr	r3, [pc, #612]	; (405ec4 <_dtoa_r+0xa74>)
  405c60:	2200      	movs	r2, #0
  405c62:	f001 fef5 	bl	407a50 <__adddf3>
  405c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c68:	4605      	mov	r5, r0
  405c6a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405c6e:	2b00      	cmp	r3, #0
  405c70:	f000 813e 	beq.w	405ef0 <_dtoa_r+0xaa0>
  405c74:	9b02      	ldr	r3, [sp, #8]
  405c76:	9315      	str	r3, [sp, #84]	; 0x54
  405c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c7a:	9312      	str	r3, [sp, #72]	; 0x48
  405c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405c7e:	2b00      	cmp	r3, #0
  405c80:	f000 81fa 	beq.w	406078 <_dtoa_r+0xc28>
  405c84:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405c86:	4b8c      	ldr	r3, [pc, #560]	; (405eb8 <_dtoa_r+0xa68>)
  405c88:	498f      	ldr	r1, [pc, #572]	; (405ec8 <_dtoa_r+0xa78>)
  405c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405c8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405c92:	2000      	movs	r0, #0
  405c94:	f002 f9b8 	bl	408008 <__aeabi_ddiv>
  405c98:	462a      	mov	r2, r5
  405c9a:	4633      	mov	r3, r6
  405c9c:	f001 fed6 	bl	407a4c <__aeabi_dsub>
  405ca0:	4682      	mov	sl, r0
  405ca2:	468b      	mov	fp, r1
  405ca4:	4638      	mov	r0, r7
  405ca6:	4641      	mov	r1, r8
  405ca8:	f002 fb34 	bl	408314 <__aeabi_d2iz>
  405cac:	4605      	mov	r5, r0
  405cae:	f002 f81b 	bl	407ce8 <__aeabi_i2d>
  405cb2:	4602      	mov	r2, r0
  405cb4:	460b      	mov	r3, r1
  405cb6:	4638      	mov	r0, r7
  405cb8:	4641      	mov	r1, r8
  405cba:	f001 fec7 	bl	407a4c <__aeabi_dsub>
  405cbe:	3530      	adds	r5, #48	; 0x30
  405cc0:	fa5f f885 	uxtb.w	r8, r5
  405cc4:	9d04      	ldr	r5, [sp, #16]
  405cc6:	4606      	mov	r6, r0
  405cc8:	460f      	mov	r7, r1
  405cca:	f885 8000 	strb.w	r8, [r5]
  405cce:	4602      	mov	r2, r0
  405cd0:	460b      	mov	r3, r1
  405cd2:	4650      	mov	r0, sl
  405cd4:	4659      	mov	r1, fp
  405cd6:	3501      	adds	r5, #1
  405cd8:	f002 fafc 	bl	4082d4 <__aeabi_dcmpgt>
  405cdc:	2800      	cmp	r0, #0
  405cde:	d154      	bne.n	405d8a <_dtoa_r+0x93a>
  405ce0:	4632      	mov	r2, r6
  405ce2:	463b      	mov	r3, r7
  405ce4:	2000      	movs	r0, #0
  405ce6:	4976      	ldr	r1, [pc, #472]	; (405ec0 <_dtoa_r+0xa70>)
  405ce8:	f001 feb0 	bl	407a4c <__aeabi_dsub>
  405cec:	4602      	mov	r2, r0
  405cee:	460b      	mov	r3, r1
  405cf0:	4650      	mov	r0, sl
  405cf2:	4659      	mov	r1, fp
  405cf4:	f002 faee 	bl	4082d4 <__aeabi_dcmpgt>
  405cf8:	2800      	cmp	r0, #0
  405cfa:	f040 8270 	bne.w	4061de <_dtoa_r+0xd8e>
  405cfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405d00:	2a01      	cmp	r2, #1
  405d02:	f000 8111 	beq.w	405f28 <_dtoa_r+0xad8>
  405d06:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405d08:	9a04      	ldr	r2, [sp, #16]
  405d0a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405d0e:	4413      	add	r3, r2
  405d10:	4699      	mov	r9, r3
  405d12:	e00d      	b.n	405d30 <_dtoa_r+0x8e0>
  405d14:	2000      	movs	r0, #0
  405d16:	496a      	ldr	r1, [pc, #424]	; (405ec0 <_dtoa_r+0xa70>)
  405d18:	f001 fe98 	bl	407a4c <__aeabi_dsub>
  405d1c:	4652      	mov	r2, sl
  405d1e:	465b      	mov	r3, fp
  405d20:	f002 faba 	bl	408298 <__aeabi_dcmplt>
  405d24:	2800      	cmp	r0, #0
  405d26:	f040 8258 	bne.w	4061da <_dtoa_r+0xd8a>
  405d2a:	454d      	cmp	r5, r9
  405d2c:	f000 80fa 	beq.w	405f24 <_dtoa_r+0xad4>
  405d30:	4650      	mov	r0, sl
  405d32:	4659      	mov	r1, fp
  405d34:	2200      	movs	r2, #0
  405d36:	4b65      	ldr	r3, [pc, #404]	; (405ecc <_dtoa_r+0xa7c>)
  405d38:	f002 f83c 	bl	407db4 <__aeabi_dmul>
  405d3c:	2200      	movs	r2, #0
  405d3e:	4b63      	ldr	r3, [pc, #396]	; (405ecc <_dtoa_r+0xa7c>)
  405d40:	4682      	mov	sl, r0
  405d42:	468b      	mov	fp, r1
  405d44:	4630      	mov	r0, r6
  405d46:	4639      	mov	r1, r7
  405d48:	f002 f834 	bl	407db4 <__aeabi_dmul>
  405d4c:	460f      	mov	r7, r1
  405d4e:	4606      	mov	r6, r0
  405d50:	f002 fae0 	bl	408314 <__aeabi_d2iz>
  405d54:	4680      	mov	r8, r0
  405d56:	f001 ffc7 	bl	407ce8 <__aeabi_i2d>
  405d5a:	4602      	mov	r2, r0
  405d5c:	460b      	mov	r3, r1
  405d5e:	4630      	mov	r0, r6
  405d60:	4639      	mov	r1, r7
  405d62:	f001 fe73 	bl	407a4c <__aeabi_dsub>
  405d66:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405d6a:	fa5f f888 	uxtb.w	r8, r8
  405d6e:	4652      	mov	r2, sl
  405d70:	465b      	mov	r3, fp
  405d72:	f805 8b01 	strb.w	r8, [r5], #1
  405d76:	4606      	mov	r6, r0
  405d78:	460f      	mov	r7, r1
  405d7a:	f002 fa8d 	bl	408298 <__aeabi_dcmplt>
  405d7e:	4632      	mov	r2, r6
  405d80:	463b      	mov	r3, r7
  405d82:	2800      	cmp	r0, #0
  405d84:	d0c6      	beq.n	405d14 <_dtoa_r+0x8c4>
  405d86:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405d8c:	9302      	str	r3, [sp, #8]
  405d8e:	e523      	b.n	4057d8 <_dtoa_r+0x388>
  405d90:	2300      	movs	r3, #0
  405d92:	930b      	str	r3, [sp, #44]	; 0x2c
  405d94:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405d96:	2b00      	cmp	r3, #0
  405d98:	f340 80dc 	ble.w	405f54 <_dtoa_r+0xb04>
  405d9c:	461f      	mov	r7, r3
  405d9e:	461e      	mov	r6, r3
  405da0:	930f      	str	r3, [sp, #60]	; 0x3c
  405da2:	930a      	str	r3, [sp, #40]	; 0x28
  405da4:	e6f6      	b.n	405b94 <_dtoa_r+0x744>
  405da6:	2301      	movs	r3, #1
  405da8:	930b      	str	r3, [sp, #44]	; 0x2c
  405daa:	e7f3      	b.n	405d94 <_dtoa_r+0x944>
  405dac:	f1ba 0f00 	cmp.w	sl, #0
  405db0:	f47f ada8 	bne.w	405904 <_dtoa_r+0x4b4>
  405db4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405db8:	2b00      	cmp	r3, #0
  405dba:	f47f adba 	bne.w	405932 <_dtoa_r+0x4e2>
  405dbe:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405dc2:	0d3f      	lsrs	r7, r7, #20
  405dc4:	053f      	lsls	r7, r7, #20
  405dc6:	2f00      	cmp	r7, #0
  405dc8:	f000 820d 	beq.w	4061e6 <_dtoa_r+0xd96>
  405dcc:	9b08      	ldr	r3, [sp, #32]
  405dce:	3301      	adds	r3, #1
  405dd0:	9308      	str	r3, [sp, #32]
  405dd2:	9b06      	ldr	r3, [sp, #24]
  405dd4:	3301      	adds	r3, #1
  405dd6:	9306      	str	r3, [sp, #24]
  405dd8:	2301      	movs	r3, #1
  405dda:	930c      	str	r3, [sp, #48]	; 0x30
  405ddc:	e5ab      	b.n	405936 <_dtoa_r+0x4e6>
  405dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405de0:	2b00      	cmp	r3, #0
  405de2:	f73f ac42 	bgt.w	40566a <_dtoa_r+0x21a>
  405de6:	f040 8221 	bne.w	40622c <_dtoa_r+0xddc>
  405dea:	2200      	movs	r2, #0
  405dec:	4b38      	ldr	r3, [pc, #224]	; (405ed0 <_dtoa_r+0xa80>)
  405dee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405df2:	f001 ffdf 	bl	407db4 <__aeabi_dmul>
  405df6:	4652      	mov	r2, sl
  405df8:	465b      	mov	r3, fp
  405dfa:	f002 fa61 	bl	4082c0 <__aeabi_dcmpge>
  405dfe:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  405e02:	4646      	mov	r6, r8
  405e04:	2800      	cmp	r0, #0
  405e06:	d041      	beq.n	405e8c <_dtoa_r+0xa3c>
  405e08:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405e0a:	9d04      	ldr	r5, [sp, #16]
  405e0c:	43db      	mvns	r3, r3
  405e0e:	9302      	str	r3, [sp, #8]
  405e10:	4641      	mov	r1, r8
  405e12:	4620      	mov	r0, r4
  405e14:	f000 fe40 	bl	406a98 <_Bfree>
  405e18:	2e00      	cmp	r6, #0
  405e1a:	f43f acdd 	beq.w	4057d8 <_dtoa_r+0x388>
  405e1e:	e6a7      	b.n	405b70 <_dtoa_r+0x720>
  405e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405e22:	4649      	mov	r1, r9
  405e24:	4620      	mov	r0, r4
  405e26:	f000 ff6d 	bl	406d04 <__pow5mult>
  405e2a:	4681      	mov	r9, r0
  405e2c:	e558      	b.n	4058e0 <_dtoa_r+0x490>
  405e2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405e30:	2a00      	cmp	r2, #0
  405e32:	f000 8187 	beq.w	406144 <_dtoa_r+0xcf4>
  405e36:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405e3a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405e3c:	9d08      	ldr	r5, [sp, #32]
  405e3e:	e4f2      	b.n	405826 <_dtoa_r+0x3d6>
  405e40:	f1ba 0f00 	cmp.w	sl, #0
  405e44:	f47f ad75 	bne.w	405932 <_dtoa_r+0x4e2>
  405e48:	e7b4      	b.n	405db4 <_dtoa_r+0x964>
  405e4a:	f000 fe2f 	bl	406aac <__multadd>
  405e4e:	4647      	mov	r7, r8
  405e50:	4606      	mov	r6, r0
  405e52:	4683      	mov	fp, r0
  405e54:	e5be      	b.n	4059d4 <_dtoa_r+0x584>
  405e56:	4601      	mov	r1, r0
  405e58:	4620      	mov	r0, r4
  405e5a:	9306      	str	r3, [sp, #24]
  405e5c:	f000 fe1c 	bl	406a98 <_Bfree>
  405e60:	2201      	movs	r2, #1
  405e62:	9b06      	ldr	r3, [sp, #24]
  405e64:	e5e0      	b.n	405a28 <_dtoa_r+0x5d8>
  405e66:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405e68:	2b02      	cmp	r3, #2
  405e6a:	f77f ad96 	ble.w	40599a <_dtoa_r+0x54a>
  405e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e70:	2b00      	cmp	r3, #0
  405e72:	d1c9      	bne.n	405e08 <_dtoa_r+0x9b8>
  405e74:	4641      	mov	r1, r8
  405e76:	2205      	movs	r2, #5
  405e78:	4620      	mov	r0, r4
  405e7a:	f000 fe17 	bl	406aac <__multadd>
  405e7e:	4601      	mov	r1, r0
  405e80:	4680      	mov	r8, r0
  405e82:	4648      	mov	r0, r9
  405e84:	f000 ffe0 	bl	406e48 <__mcmp>
  405e88:	2800      	cmp	r0, #0
  405e8a:	ddbd      	ble.n	405e08 <_dtoa_r+0x9b8>
  405e8c:	9a02      	ldr	r2, [sp, #8]
  405e8e:	9904      	ldr	r1, [sp, #16]
  405e90:	2331      	movs	r3, #49	; 0x31
  405e92:	3201      	adds	r2, #1
  405e94:	9202      	str	r2, [sp, #8]
  405e96:	700b      	strb	r3, [r1, #0]
  405e98:	1c4d      	adds	r5, r1, #1
  405e9a:	e7b9      	b.n	405e10 <_dtoa_r+0x9c0>
  405e9c:	9a02      	ldr	r2, [sp, #8]
  405e9e:	3201      	adds	r2, #1
  405ea0:	9202      	str	r2, [sp, #8]
  405ea2:	9a04      	ldr	r2, [sp, #16]
  405ea4:	2331      	movs	r3, #49	; 0x31
  405ea6:	7013      	strb	r3, [r2, #0]
  405ea8:	e652      	b.n	405b50 <_dtoa_r+0x700>
  405eaa:	2301      	movs	r3, #1
  405eac:	930b      	str	r3, [sp, #44]	; 0x2c
  405eae:	e666      	b.n	405b7e <_dtoa_r+0x72e>
  405eb0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405eb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405eb6:	e48f      	b.n	4057d8 <_dtoa_r+0x388>
  405eb8:	00408e18 	.word	0x00408e18
  405ebc:	00408df0 	.word	0x00408df0
  405ec0:	3ff00000 	.word	0x3ff00000
  405ec4:	401c0000 	.word	0x401c0000
  405ec8:	3fe00000 	.word	0x3fe00000
  405ecc:	40240000 	.word	0x40240000
  405ed0:	40140000 	.word	0x40140000
  405ed4:	4650      	mov	r0, sl
  405ed6:	f001 ff07 	bl	407ce8 <__aeabi_i2d>
  405eda:	463a      	mov	r2, r7
  405edc:	4643      	mov	r3, r8
  405ede:	f001 ff69 	bl	407db4 <__aeabi_dmul>
  405ee2:	2200      	movs	r2, #0
  405ee4:	4bc1      	ldr	r3, [pc, #772]	; (4061ec <_dtoa_r+0xd9c>)
  405ee6:	f001 fdb3 	bl	407a50 <__adddf3>
  405eea:	4605      	mov	r5, r0
  405eec:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405ef0:	4641      	mov	r1, r8
  405ef2:	2200      	movs	r2, #0
  405ef4:	4bbe      	ldr	r3, [pc, #760]	; (4061f0 <_dtoa_r+0xda0>)
  405ef6:	4638      	mov	r0, r7
  405ef8:	f001 fda8 	bl	407a4c <__aeabi_dsub>
  405efc:	462a      	mov	r2, r5
  405efe:	4633      	mov	r3, r6
  405f00:	4682      	mov	sl, r0
  405f02:	468b      	mov	fp, r1
  405f04:	f002 f9e6 	bl	4082d4 <__aeabi_dcmpgt>
  405f08:	4680      	mov	r8, r0
  405f0a:	2800      	cmp	r0, #0
  405f0c:	f040 8110 	bne.w	406130 <_dtoa_r+0xce0>
  405f10:	462a      	mov	r2, r5
  405f12:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405f16:	4650      	mov	r0, sl
  405f18:	4659      	mov	r1, fp
  405f1a:	f002 f9bd 	bl	408298 <__aeabi_dcmplt>
  405f1e:	b118      	cbz	r0, 405f28 <_dtoa_r+0xad8>
  405f20:	4646      	mov	r6, r8
  405f22:	e771      	b.n	405e08 <_dtoa_r+0x9b8>
  405f24:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405f28:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405f2c:	f7ff bb8a 	b.w	405644 <_dtoa_r+0x1f4>
  405f30:	9804      	ldr	r0, [sp, #16]
  405f32:	f7ff babb 	b.w	4054ac <_dtoa_r+0x5c>
  405f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405f3a:	970c      	str	r7, [sp, #48]	; 0x30
  405f3c:	1afb      	subs	r3, r7, r3
  405f3e:	441a      	add	r2, r3
  405f40:	920d      	str	r2, [sp, #52]	; 0x34
  405f42:	2700      	movs	r7, #0
  405f44:	e469      	b.n	40581a <_dtoa_r+0x3ca>
  405f46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405f4a:	f04f 0a02 	mov.w	sl, #2
  405f4e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405f52:	e657      	b.n	405c04 <_dtoa_r+0x7b4>
  405f54:	2100      	movs	r1, #0
  405f56:	2301      	movs	r3, #1
  405f58:	6461      	str	r1, [r4, #68]	; 0x44
  405f5a:	4620      	mov	r0, r4
  405f5c:	9325      	str	r3, [sp, #148]	; 0x94
  405f5e:	f000 fd75 	bl	406a4c <_Balloc>
  405f62:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405f64:	9004      	str	r0, [sp, #16]
  405f66:	6420      	str	r0, [r4, #64]	; 0x40
  405f68:	930a      	str	r3, [sp, #40]	; 0x28
  405f6a:	930f      	str	r3, [sp, #60]	; 0x3c
  405f6c:	e629      	b.n	405bc2 <_dtoa_r+0x772>
  405f6e:	2a00      	cmp	r2, #0
  405f70:	46d0      	mov	r8, sl
  405f72:	f8cd b018 	str.w	fp, [sp, #24]
  405f76:	469a      	mov	sl, r3
  405f78:	dd11      	ble.n	405f9e <_dtoa_r+0xb4e>
  405f7a:	4649      	mov	r1, r9
  405f7c:	2201      	movs	r2, #1
  405f7e:	4620      	mov	r0, r4
  405f80:	f000 ff10 	bl	406da4 <__lshift>
  405f84:	4641      	mov	r1, r8
  405f86:	4681      	mov	r9, r0
  405f88:	f000 ff5e 	bl	406e48 <__mcmp>
  405f8c:	2800      	cmp	r0, #0
  405f8e:	f340 8146 	ble.w	40621e <_dtoa_r+0xdce>
  405f92:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405f96:	f000 8106 	beq.w	4061a6 <_dtoa_r+0xd56>
  405f9a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405f9e:	46b3      	mov	fp, r6
  405fa0:	f887 a000 	strb.w	sl, [r7]
  405fa4:	1c7d      	adds	r5, r7, #1
  405fa6:	9e06      	ldr	r6, [sp, #24]
  405fa8:	e5d2      	b.n	405b50 <_dtoa_r+0x700>
  405faa:	d104      	bne.n	405fb6 <_dtoa_r+0xb66>
  405fac:	f01a 0f01 	tst.w	sl, #1
  405fb0:	d001      	beq.n	405fb6 <_dtoa_r+0xb66>
  405fb2:	e5bd      	b.n	405b30 <_dtoa_r+0x6e0>
  405fb4:	4615      	mov	r5, r2
  405fb6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405fba:	2b30      	cmp	r3, #48	; 0x30
  405fbc:	f105 32ff 	add.w	r2, r5, #4294967295
  405fc0:	d0f8      	beq.n	405fb4 <_dtoa_r+0xb64>
  405fc2:	e5c5      	b.n	405b50 <_dtoa_r+0x700>
  405fc4:	9904      	ldr	r1, [sp, #16]
  405fc6:	2230      	movs	r2, #48	; 0x30
  405fc8:	700a      	strb	r2, [r1, #0]
  405fca:	9a02      	ldr	r2, [sp, #8]
  405fcc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405fd0:	3201      	adds	r2, #1
  405fd2:	9202      	str	r2, [sp, #8]
  405fd4:	f7ff bbfc 	b.w	4057d0 <_dtoa_r+0x380>
  405fd8:	f000 80bb 	beq.w	406152 <_dtoa_r+0xd02>
  405fdc:	9b02      	ldr	r3, [sp, #8]
  405fde:	425d      	negs	r5, r3
  405fe0:	4b84      	ldr	r3, [pc, #528]	; (4061f4 <_dtoa_r+0xda4>)
  405fe2:	f005 020f 	and.w	r2, r5, #15
  405fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405fea:	e9d3 2300 	ldrd	r2, r3, [r3]
  405fee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405ff2:	f001 fedf 	bl	407db4 <__aeabi_dmul>
  405ff6:	112d      	asrs	r5, r5, #4
  405ff8:	4607      	mov	r7, r0
  405ffa:	4688      	mov	r8, r1
  405ffc:	f000 812c 	beq.w	406258 <_dtoa_r+0xe08>
  406000:	4e7d      	ldr	r6, [pc, #500]	; (4061f8 <_dtoa_r+0xda8>)
  406002:	f04f 0a02 	mov.w	sl, #2
  406006:	07eb      	lsls	r3, r5, #31
  406008:	d509      	bpl.n	40601e <_dtoa_r+0xbce>
  40600a:	4638      	mov	r0, r7
  40600c:	4641      	mov	r1, r8
  40600e:	e9d6 2300 	ldrd	r2, r3, [r6]
  406012:	f001 fecf 	bl	407db4 <__aeabi_dmul>
  406016:	f10a 0a01 	add.w	sl, sl, #1
  40601a:	4607      	mov	r7, r0
  40601c:	4688      	mov	r8, r1
  40601e:	106d      	asrs	r5, r5, #1
  406020:	f106 0608 	add.w	r6, r6, #8
  406024:	d1ef      	bne.n	406006 <_dtoa_r+0xbb6>
  406026:	e608      	b.n	405c3a <_dtoa_r+0x7ea>
  406028:	6871      	ldr	r1, [r6, #4]
  40602a:	4620      	mov	r0, r4
  40602c:	f000 fd0e 	bl	406a4c <_Balloc>
  406030:	6933      	ldr	r3, [r6, #16]
  406032:	3302      	adds	r3, #2
  406034:	009a      	lsls	r2, r3, #2
  406036:	4605      	mov	r5, r0
  406038:	f106 010c 	add.w	r1, r6, #12
  40603c:	300c      	adds	r0, #12
  40603e:	f000 fc5f 	bl	406900 <memcpy>
  406042:	4629      	mov	r1, r5
  406044:	2201      	movs	r2, #1
  406046:	4620      	mov	r0, r4
  406048:	f000 feac 	bl	406da4 <__lshift>
  40604c:	9006      	str	r0, [sp, #24]
  40604e:	e4b5      	b.n	4059bc <_dtoa_r+0x56c>
  406050:	2b39      	cmp	r3, #57	; 0x39
  406052:	f8cd b018 	str.w	fp, [sp, #24]
  406056:	46d0      	mov	r8, sl
  406058:	f000 80a5 	beq.w	4061a6 <_dtoa_r+0xd56>
  40605c:	f103 0a01 	add.w	sl, r3, #1
  406060:	46b3      	mov	fp, r6
  406062:	f887 a000 	strb.w	sl, [r7]
  406066:	1c7d      	adds	r5, r7, #1
  406068:	9e06      	ldr	r6, [sp, #24]
  40606a:	e571      	b.n	405b50 <_dtoa_r+0x700>
  40606c:	465a      	mov	r2, fp
  40606e:	46d0      	mov	r8, sl
  406070:	46b3      	mov	fp, r6
  406072:	469a      	mov	sl, r3
  406074:	4616      	mov	r6, r2
  406076:	e54f      	b.n	405b18 <_dtoa_r+0x6c8>
  406078:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40607a:	495e      	ldr	r1, [pc, #376]	; (4061f4 <_dtoa_r+0xda4>)
  40607c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406080:	462a      	mov	r2, r5
  406082:	4633      	mov	r3, r6
  406084:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406088:	f001 fe94 	bl	407db4 <__aeabi_dmul>
  40608c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406090:	4638      	mov	r0, r7
  406092:	4641      	mov	r1, r8
  406094:	f002 f93e 	bl	408314 <__aeabi_d2iz>
  406098:	4605      	mov	r5, r0
  40609a:	f001 fe25 	bl	407ce8 <__aeabi_i2d>
  40609e:	460b      	mov	r3, r1
  4060a0:	4602      	mov	r2, r0
  4060a2:	4641      	mov	r1, r8
  4060a4:	4638      	mov	r0, r7
  4060a6:	f001 fcd1 	bl	407a4c <__aeabi_dsub>
  4060aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4060ac:	460f      	mov	r7, r1
  4060ae:	9904      	ldr	r1, [sp, #16]
  4060b0:	3530      	adds	r5, #48	; 0x30
  4060b2:	2b01      	cmp	r3, #1
  4060b4:	700d      	strb	r5, [r1, #0]
  4060b6:	4606      	mov	r6, r0
  4060b8:	f101 0501 	add.w	r5, r1, #1
  4060bc:	d026      	beq.n	40610c <_dtoa_r+0xcbc>
  4060be:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4060c0:	9a04      	ldr	r2, [sp, #16]
  4060c2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406200 <_dtoa_r+0xdb0>
  4060c6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4060ca:	4413      	add	r3, r2
  4060cc:	f04f 0a00 	mov.w	sl, #0
  4060d0:	4699      	mov	r9, r3
  4060d2:	4652      	mov	r2, sl
  4060d4:	465b      	mov	r3, fp
  4060d6:	4630      	mov	r0, r6
  4060d8:	4639      	mov	r1, r7
  4060da:	f001 fe6b 	bl	407db4 <__aeabi_dmul>
  4060de:	460f      	mov	r7, r1
  4060e0:	4606      	mov	r6, r0
  4060e2:	f002 f917 	bl	408314 <__aeabi_d2iz>
  4060e6:	4680      	mov	r8, r0
  4060e8:	f001 fdfe 	bl	407ce8 <__aeabi_i2d>
  4060ec:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4060f0:	4602      	mov	r2, r0
  4060f2:	460b      	mov	r3, r1
  4060f4:	4630      	mov	r0, r6
  4060f6:	4639      	mov	r1, r7
  4060f8:	f001 fca8 	bl	407a4c <__aeabi_dsub>
  4060fc:	f805 8b01 	strb.w	r8, [r5], #1
  406100:	454d      	cmp	r5, r9
  406102:	4606      	mov	r6, r0
  406104:	460f      	mov	r7, r1
  406106:	d1e4      	bne.n	4060d2 <_dtoa_r+0xc82>
  406108:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40610c:	4b3b      	ldr	r3, [pc, #236]	; (4061fc <_dtoa_r+0xdac>)
  40610e:	2200      	movs	r2, #0
  406110:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  406114:	f001 fc9c 	bl	407a50 <__adddf3>
  406118:	4632      	mov	r2, r6
  40611a:	463b      	mov	r3, r7
  40611c:	f002 f8bc 	bl	408298 <__aeabi_dcmplt>
  406120:	2800      	cmp	r0, #0
  406122:	d046      	beq.n	4061b2 <_dtoa_r+0xd62>
  406124:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406126:	9302      	str	r3, [sp, #8]
  406128:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40612c:	f7ff bb43 	b.w	4057b6 <_dtoa_r+0x366>
  406130:	f04f 0800 	mov.w	r8, #0
  406134:	4646      	mov	r6, r8
  406136:	e6a9      	b.n	405e8c <_dtoa_r+0xa3c>
  406138:	9b08      	ldr	r3, [sp, #32]
  40613a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40613c:	1a9d      	subs	r5, r3, r2
  40613e:	2300      	movs	r3, #0
  406140:	f7ff bb71 	b.w	405826 <_dtoa_r+0x3d6>
  406144:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406146:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406148:	9d08      	ldr	r5, [sp, #32]
  40614a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40614e:	f7ff bb6a 	b.w	405826 <_dtoa_r+0x3d6>
  406152:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  406156:	f04f 0a02 	mov.w	sl, #2
  40615a:	e56e      	b.n	405c3a <_dtoa_r+0x7ea>
  40615c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40615e:	2b00      	cmp	r3, #0
  406160:	f43f aeb8 	beq.w	405ed4 <_dtoa_r+0xa84>
  406164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406166:	2b00      	cmp	r3, #0
  406168:	f77f aede 	ble.w	405f28 <_dtoa_r+0xad8>
  40616c:	2200      	movs	r2, #0
  40616e:	4b24      	ldr	r3, [pc, #144]	; (406200 <_dtoa_r+0xdb0>)
  406170:	4638      	mov	r0, r7
  406172:	4641      	mov	r1, r8
  406174:	f001 fe1e 	bl	407db4 <__aeabi_dmul>
  406178:	4607      	mov	r7, r0
  40617a:	4688      	mov	r8, r1
  40617c:	f10a 0001 	add.w	r0, sl, #1
  406180:	f001 fdb2 	bl	407ce8 <__aeabi_i2d>
  406184:	463a      	mov	r2, r7
  406186:	4643      	mov	r3, r8
  406188:	f001 fe14 	bl	407db4 <__aeabi_dmul>
  40618c:	2200      	movs	r2, #0
  40618e:	4b17      	ldr	r3, [pc, #92]	; (4061ec <_dtoa_r+0xd9c>)
  406190:	f001 fc5e 	bl	407a50 <__adddf3>
  406194:	9a02      	ldr	r2, [sp, #8]
  406196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406198:	9312      	str	r3, [sp, #72]	; 0x48
  40619a:	3a01      	subs	r2, #1
  40619c:	4605      	mov	r5, r0
  40619e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4061a2:	9215      	str	r2, [sp, #84]	; 0x54
  4061a4:	e56a      	b.n	405c7c <_dtoa_r+0x82c>
  4061a6:	2239      	movs	r2, #57	; 0x39
  4061a8:	46b3      	mov	fp, r6
  4061aa:	703a      	strb	r2, [r7, #0]
  4061ac:	9e06      	ldr	r6, [sp, #24]
  4061ae:	1c7d      	adds	r5, r7, #1
  4061b0:	e4c0      	b.n	405b34 <_dtoa_r+0x6e4>
  4061b2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4061b6:	2000      	movs	r0, #0
  4061b8:	4910      	ldr	r1, [pc, #64]	; (4061fc <_dtoa_r+0xdac>)
  4061ba:	f001 fc47 	bl	407a4c <__aeabi_dsub>
  4061be:	4632      	mov	r2, r6
  4061c0:	463b      	mov	r3, r7
  4061c2:	f002 f887 	bl	4082d4 <__aeabi_dcmpgt>
  4061c6:	b908      	cbnz	r0, 4061cc <_dtoa_r+0xd7c>
  4061c8:	e6ae      	b.n	405f28 <_dtoa_r+0xad8>
  4061ca:	4615      	mov	r5, r2
  4061cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4061d0:	2b30      	cmp	r3, #48	; 0x30
  4061d2:	f105 32ff 	add.w	r2, r5, #4294967295
  4061d6:	d0f8      	beq.n	4061ca <_dtoa_r+0xd7a>
  4061d8:	e5d7      	b.n	405d8a <_dtoa_r+0x93a>
  4061da:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4061de:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4061e0:	9302      	str	r3, [sp, #8]
  4061e2:	f7ff bae8 	b.w	4057b6 <_dtoa_r+0x366>
  4061e6:	970c      	str	r7, [sp, #48]	; 0x30
  4061e8:	f7ff bba5 	b.w	405936 <_dtoa_r+0x4e6>
  4061ec:	401c0000 	.word	0x401c0000
  4061f0:	40140000 	.word	0x40140000
  4061f4:	00408e18 	.word	0x00408e18
  4061f8:	00408df0 	.word	0x00408df0
  4061fc:	3fe00000 	.word	0x3fe00000
  406200:	40240000 	.word	0x40240000
  406204:	2b39      	cmp	r3, #57	; 0x39
  406206:	f8cd b018 	str.w	fp, [sp, #24]
  40620a:	46d0      	mov	r8, sl
  40620c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406210:	469a      	mov	sl, r3
  406212:	d0c8      	beq.n	4061a6 <_dtoa_r+0xd56>
  406214:	f1bb 0f00 	cmp.w	fp, #0
  406218:	f73f aebf 	bgt.w	405f9a <_dtoa_r+0xb4a>
  40621c:	e6bf      	b.n	405f9e <_dtoa_r+0xb4e>
  40621e:	f47f aebe 	bne.w	405f9e <_dtoa_r+0xb4e>
  406222:	f01a 0f01 	tst.w	sl, #1
  406226:	f43f aeba 	beq.w	405f9e <_dtoa_r+0xb4e>
  40622a:	e6b2      	b.n	405f92 <_dtoa_r+0xb42>
  40622c:	f04f 0800 	mov.w	r8, #0
  406230:	4646      	mov	r6, r8
  406232:	e5e9      	b.n	405e08 <_dtoa_r+0x9b8>
  406234:	4631      	mov	r1, r6
  406236:	2300      	movs	r3, #0
  406238:	220a      	movs	r2, #10
  40623a:	4620      	mov	r0, r4
  40623c:	f000 fc36 	bl	406aac <__multadd>
  406240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406242:	2b00      	cmp	r3, #0
  406244:	4606      	mov	r6, r0
  406246:	dd0a      	ble.n	40625e <_dtoa_r+0xe0e>
  406248:	930a      	str	r3, [sp, #40]	; 0x28
  40624a:	f7ff bbaa 	b.w	4059a2 <_dtoa_r+0x552>
  40624e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406250:	2b02      	cmp	r3, #2
  406252:	dc23      	bgt.n	40629c <_dtoa_r+0xe4c>
  406254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406256:	e43b      	b.n	405ad0 <_dtoa_r+0x680>
  406258:	f04f 0a02 	mov.w	sl, #2
  40625c:	e4ed      	b.n	405c3a <_dtoa_r+0x7ea>
  40625e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406260:	2b02      	cmp	r3, #2
  406262:	dc1b      	bgt.n	40629c <_dtoa_r+0xe4c>
  406264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406266:	e7ef      	b.n	406248 <_dtoa_r+0xdf8>
  406268:	2500      	movs	r5, #0
  40626a:	6465      	str	r5, [r4, #68]	; 0x44
  40626c:	4629      	mov	r1, r5
  40626e:	4620      	mov	r0, r4
  406270:	f000 fbec 	bl	406a4c <_Balloc>
  406274:	f04f 33ff 	mov.w	r3, #4294967295
  406278:	930a      	str	r3, [sp, #40]	; 0x28
  40627a:	930f      	str	r3, [sp, #60]	; 0x3c
  40627c:	2301      	movs	r3, #1
  40627e:	9004      	str	r0, [sp, #16]
  406280:	9525      	str	r5, [sp, #148]	; 0x94
  406282:	6420      	str	r0, [r4, #64]	; 0x40
  406284:	930b      	str	r3, [sp, #44]	; 0x2c
  406286:	f7ff b9dd 	b.w	405644 <_dtoa_r+0x1f4>
  40628a:	2501      	movs	r5, #1
  40628c:	f7ff b9a5 	b.w	4055da <_dtoa_r+0x18a>
  406290:	f43f ab69 	beq.w	405966 <_dtoa_r+0x516>
  406294:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406298:	f7ff bbf9 	b.w	405a8e <_dtoa_r+0x63e>
  40629c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40629e:	930a      	str	r3, [sp, #40]	; 0x28
  4062a0:	e5e5      	b.n	405e6e <_dtoa_r+0xa1e>
  4062a2:	bf00      	nop

004062a4 <__libc_fini_array>:
  4062a4:	b538      	push	{r3, r4, r5, lr}
  4062a6:	4c0a      	ldr	r4, [pc, #40]	; (4062d0 <__libc_fini_array+0x2c>)
  4062a8:	4d0a      	ldr	r5, [pc, #40]	; (4062d4 <__libc_fini_array+0x30>)
  4062aa:	1b64      	subs	r4, r4, r5
  4062ac:	10a4      	asrs	r4, r4, #2
  4062ae:	d00a      	beq.n	4062c6 <__libc_fini_array+0x22>
  4062b0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4062b4:	3b01      	subs	r3, #1
  4062b6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4062ba:	3c01      	subs	r4, #1
  4062bc:	f855 3904 	ldr.w	r3, [r5], #-4
  4062c0:	4798      	blx	r3
  4062c2:	2c00      	cmp	r4, #0
  4062c4:	d1f9      	bne.n	4062ba <__libc_fini_array+0x16>
  4062c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4062ca:	f002 bea3 	b.w	409014 <_fini>
  4062ce:	bf00      	nop
  4062d0:	00409024 	.word	0x00409024
  4062d4:	00409020 	.word	0x00409020

004062d8 <_localeconv_r>:
  4062d8:	4a04      	ldr	r2, [pc, #16]	; (4062ec <_localeconv_r+0x14>)
  4062da:	4b05      	ldr	r3, [pc, #20]	; (4062f0 <_localeconv_r+0x18>)
  4062dc:	6812      	ldr	r2, [r2, #0]
  4062de:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4062e0:	2800      	cmp	r0, #0
  4062e2:	bf08      	it	eq
  4062e4:	4618      	moveq	r0, r3
  4062e6:	30f0      	adds	r0, #240	; 0xf0
  4062e8:	4770      	bx	lr
  4062ea:	bf00      	nop
  4062ec:	20000008 	.word	0x20000008
  4062f0:	2000084c 	.word	0x2000084c

004062f4 <__retarget_lock_acquire_recursive>:
  4062f4:	4770      	bx	lr
  4062f6:	bf00      	nop

004062f8 <__retarget_lock_release_recursive>:
  4062f8:	4770      	bx	lr
  4062fa:	bf00      	nop

004062fc <_malloc_r>:
  4062fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406300:	f101 060b 	add.w	r6, r1, #11
  406304:	2e16      	cmp	r6, #22
  406306:	b083      	sub	sp, #12
  406308:	4605      	mov	r5, r0
  40630a:	f240 809e 	bls.w	40644a <_malloc_r+0x14e>
  40630e:	f036 0607 	bics.w	r6, r6, #7
  406312:	f100 80bd 	bmi.w	406490 <_malloc_r+0x194>
  406316:	42b1      	cmp	r1, r6
  406318:	f200 80ba 	bhi.w	406490 <_malloc_r+0x194>
  40631c:	f000 fb8a 	bl	406a34 <__malloc_lock>
  406320:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406324:	f0c0 8293 	bcc.w	40684e <_malloc_r+0x552>
  406328:	0a73      	lsrs	r3, r6, #9
  40632a:	f000 80b8 	beq.w	40649e <_malloc_r+0x1a2>
  40632e:	2b04      	cmp	r3, #4
  406330:	f200 8179 	bhi.w	406626 <_malloc_r+0x32a>
  406334:	09b3      	lsrs	r3, r6, #6
  406336:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40633a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40633e:	00c3      	lsls	r3, r0, #3
  406340:	4fbf      	ldr	r7, [pc, #764]	; (406640 <_malloc_r+0x344>)
  406342:	443b      	add	r3, r7
  406344:	f1a3 0108 	sub.w	r1, r3, #8
  406348:	685c      	ldr	r4, [r3, #4]
  40634a:	42a1      	cmp	r1, r4
  40634c:	d106      	bne.n	40635c <_malloc_r+0x60>
  40634e:	e00c      	b.n	40636a <_malloc_r+0x6e>
  406350:	2a00      	cmp	r2, #0
  406352:	f280 80aa 	bge.w	4064aa <_malloc_r+0x1ae>
  406356:	68e4      	ldr	r4, [r4, #12]
  406358:	42a1      	cmp	r1, r4
  40635a:	d006      	beq.n	40636a <_malloc_r+0x6e>
  40635c:	6863      	ldr	r3, [r4, #4]
  40635e:	f023 0303 	bic.w	r3, r3, #3
  406362:	1b9a      	subs	r2, r3, r6
  406364:	2a0f      	cmp	r2, #15
  406366:	ddf3      	ble.n	406350 <_malloc_r+0x54>
  406368:	4670      	mov	r0, lr
  40636a:	693c      	ldr	r4, [r7, #16]
  40636c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406654 <_malloc_r+0x358>
  406370:	4574      	cmp	r4, lr
  406372:	f000 81ab 	beq.w	4066cc <_malloc_r+0x3d0>
  406376:	6863      	ldr	r3, [r4, #4]
  406378:	f023 0303 	bic.w	r3, r3, #3
  40637c:	1b9a      	subs	r2, r3, r6
  40637e:	2a0f      	cmp	r2, #15
  406380:	f300 8190 	bgt.w	4066a4 <_malloc_r+0x3a8>
  406384:	2a00      	cmp	r2, #0
  406386:	f8c7 e014 	str.w	lr, [r7, #20]
  40638a:	f8c7 e010 	str.w	lr, [r7, #16]
  40638e:	f280 809d 	bge.w	4064cc <_malloc_r+0x1d0>
  406392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406396:	f080 8161 	bcs.w	40665c <_malloc_r+0x360>
  40639a:	08db      	lsrs	r3, r3, #3
  40639c:	f103 0c01 	add.w	ip, r3, #1
  4063a0:	1099      	asrs	r1, r3, #2
  4063a2:	687a      	ldr	r2, [r7, #4]
  4063a4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4063a8:	f8c4 8008 	str.w	r8, [r4, #8]
  4063ac:	2301      	movs	r3, #1
  4063ae:	408b      	lsls	r3, r1
  4063b0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4063b4:	4313      	orrs	r3, r2
  4063b6:	3908      	subs	r1, #8
  4063b8:	60e1      	str	r1, [r4, #12]
  4063ba:	607b      	str	r3, [r7, #4]
  4063bc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4063c0:	f8c8 400c 	str.w	r4, [r8, #12]
  4063c4:	1082      	asrs	r2, r0, #2
  4063c6:	2401      	movs	r4, #1
  4063c8:	4094      	lsls	r4, r2
  4063ca:	429c      	cmp	r4, r3
  4063cc:	f200 808b 	bhi.w	4064e6 <_malloc_r+0x1ea>
  4063d0:	421c      	tst	r4, r3
  4063d2:	d106      	bne.n	4063e2 <_malloc_r+0xe6>
  4063d4:	f020 0003 	bic.w	r0, r0, #3
  4063d8:	0064      	lsls	r4, r4, #1
  4063da:	421c      	tst	r4, r3
  4063dc:	f100 0004 	add.w	r0, r0, #4
  4063e0:	d0fa      	beq.n	4063d8 <_malloc_r+0xdc>
  4063e2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4063e6:	46cc      	mov	ip, r9
  4063e8:	4680      	mov	r8, r0
  4063ea:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4063ee:	459c      	cmp	ip, r3
  4063f0:	d107      	bne.n	406402 <_malloc_r+0x106>
  4063f2:	e16d      	b.n	4066d0 <_malloc_r+0x3d4>
  4063f4:	2a00      	cmp	r2, #0
  4063f6:	f280 817b 	bge.w	4066f0 <_malloc_r+0x3f4>
  4063fa:	68db      	ldr	r3, [r3, #12]
  4063fc:	459c      	cmp	ip, r3
  4063fe:	f000 8167 	beq.w	4066d0 <_malloc_r+0x3d4>
  406402:	6859      	ldr	r1, [r3, #4]
  406404:	f021 0103 	bic.w	r1, r1, #3
  406408:	1b8a      	subs	r2, r1, r6
  40640a:	2a0f      	cmp	r2, #15
  40640c:	ddf2      	ble.n	4063f4 <_malloc_r+0xf8>
  40640e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406412:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406416:	9300      	str	r3, [sp, #0]
  406418:	199c      	adds	r4, r3, r6
  40641a:	4628      	mov	r0, r5
  40641c:	f046 0601 	orr.w	r6, r6, #1
  406420:	f042 0501 	orr.w	r5, r2, #1
  406424:	605e      	str	r6, [r3, #4]
  406426:	f8c8 c00c 	str.w	ip, [r8, #12]
  40642a:	f8cc 8008 	str.w	r8, [ip, #8]
  40642e:	617c      	str	r4, [r7, #20]
  406430:	613c      	str	r4, [r7, #16]
  406432:	f8c4 e00c 	str.w	lr, [r4, #12]
  406436:	f8c4 e008 	str.w	lr, [r4, #8]
  40643a:	6065      	str	r5, [r4, #4]
  40643c:	505a      	str	r2, [r3, r1]
  40643e:	f000 faff 	bl	406a40 <__malloc_unlock>
  406442:	9b00      	ldr	r3, [sp, #0]
  406444:	f103 0408 	add.w	r4, r3, #8
  406448:	e01e      	b.n	406488 <_malloc_r+0x18c>
  40644a:	2910      	cmp	r1, #16
  40644c:	d820      	bhi.n	406490 <_malloc_r+0x194>
  40644e:	f000 faf1 	bl	406a34 <__malloc_lock>
  406452:	2610      	movs	r6, #16
  406454:	2318      	movs	r3, #24
  406456:	2002      	movs	r0, #2
  406458:	4f79      	ldr	r7, [pc, #484]	; (406640 <_malloc_r+0x344>)
  40645a:	443b      	add	r3, r7
  40645c:	f1a3 0208 	sub.w	r2, r3, #8
  406460:	685c      	ldr	r4, [r3, #4]
  406462:	4294      	cmp	r4, r2
  406464:	f000 813d 	beq.w	4066e2 <_malloc_r+0x3e6>
  406468:	6863      	ldr	r3, [r4, #4]
  40646a:	68e1      	ldr	r1, [r4, #12]
  40646c:	68a6      	ldr	r6, [r4, #8]
  40646e:	f023 0303 	bic.w	r3, r3, #3
  406472:	4423      	add	r3, r4
  406474:	4628      	mov	r0, r5
  406476:	685a      	ldr	r2, [r3, #4]
  406478:	60f1      	str	r1, [r6, #12]
  40647a:	f042 0201 	orr.w	r2, r2, #1
  40647e:	608e      	str	r6, [r1, #8]
  406480:	605a      	str	r2, [r3, #4]
  406482:	f000 fadd 	bl	406a40 <__malloc_unlock>
  406486:	3408      	adds	r4, #8
  406488:	4620      	mov	r0, r4
  40648a:	b003      	add	sp, #12
  40648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406490:	2400      	movs	r4, #0
  406492:	230c      	movs	r3, #12
  406494:	4620      	mov	r0, r4
  406496:	602b      	str	r3, [r5, #0]
  406498:	b003      	add	sp, #12
  40649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40649e:	2040      	movs	r0, #64	; 0x40
  4064a0:	f44f 7300 	mov.w	r3, #512	; 0x200
  4064a4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4064a8:	e74a      	b.n	406340 <_malloc_r+0x44>
  4064aa:	4423      	add	r3, r4
  4064ac:	68e1      	ldr	r1, [r4, #12]
  4064ae:	685a      	ldr	r2, [r3, #4]
  4064b0:	68a6      	ldr	r6, [r4, #8]
  4064b2:	f042 0201 	orr.w	r2, r2, #1
  4064b6:	60f1      	str	r1, [r6, #12]
  4064b8:	4628      	mov	r0, r5
  4064ba:	608e      	str	r6, [r1, #8]
  4064bc:	605a      	str	r2, [r3, #4]
  4064be:	f000 fabf 	bl	406a40 <__malloc_unlock>
  4064c2:	3408      	adds	r4, #8
  4064c4:	4620      	mov	r0, r4
  4064c6:	b003      	add	sp, #12
  4064c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064cc:	4423      	add	r3, r4
  4064ce:	4628      	mov	r0, r5
  4064d0:	685a      	ldr	r2, [r3, #4]
  4064d2:	f042 0201 	orr.w	r2, r2, #1
  4064d6:	605a      	str	r2, [r3, #4]
  4064d8:	f000 fab2 	bl	406a40 <__malloc_unlock>
  4064dc:	3408      	adds	r4, #8
  4064de:	4620      	mov	r0, r4
  4064e0:	b003      	add	sp, #12
  4064e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064e6:	68bc      	ldr	r4, [r7, #8]
  4064e8:	6863      	ldr	r3, [r4, #4]
  4064ea:	f023 0803 	bic.w	r8, r3, #3
  4064ee:	45b0      	cmp	r8, r6
  4064f0:	d304      	bcc.n	4064fc <_malloc_r+0x200>
  4064f2:	eba8 0306 	sub.w	r3, r8, r6
  4064f6:	2b0f      	cmp	r3, #15
  4064f8:	f300 8085 	bgt.w	406606 <_malloc_r+0x30a>
  4064fc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406658 <_malloc_r+0x35c>
  406500:	4b50      	ldr	r3, [pc, #320]	; (406644 <_malloc_r+0x348>)
  406502:	f8d9 2000 	ldr.w	r2, [r9]
  406506:	681b      	ldr	r3, [r3, #0]
  406508:	3201      	adds	r2, #1
  40650a:	4433      	add	r3, r6
  40650c:	eb04 0a08 	add.w	sl, r4, r8
  406510:	f000 8155 	beq.w	4067be <_malloc_r+0x4c2>
  406514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406518:	330f      	adds	r3, #15
  40651a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40651e:	f02b 0b0f 	bic.w	fp, fp, #15
  406522:	4659      	mov	r1, fp
  406524:	4628      	mov	r0, r5
  406526:	f000 fd8b 	bl	407040 <_sbrk_r>
  40652a:	1c41      	adds	r1, r0, #1
  40652c:	4602      	mov	r2, r0
  40652e:	f000 80fc 	beq.w	40672a <_malloc_r+0x42e>
  406532:	4582      	cmp	sl, r0
  406534:	f200 80f7 	bhi.w	406726 <_malloc_r+0x42a>
  406538:	4b43      	ldr	r3, [pc, #268]	; (406648 <_malloc_r+0x34c>)
  40653a:	6819      	ldr	r1, [r3, #0]
  40653c:	4459      	add	r1, fp
  40653e:	6019      	str	r1, [r3, #0]
  406540:	f000 814d 	beq.w	4067de <_malloc_r+0x4e2>
  406544:	f8d9 0000 	ldr.w	r0, [r9]
  406548:	3001      	adds	r0, #1
  40654a:	bf1b      	ittet	ne
  40654c:	eba2 0a0a 	subne.w	sl, r2, sl
  406550:	4451      	addne	r1, sl
  406552:	f8c9 2000 	streq.w	r2, [r9]
  406556:	6019      	strne	r1, [r3, #0]
  406558:	f012 0107 	ands.w	r1, r2, #7
  40655c:	f000 8115 	beq.w	40678a <_malloc_r+0x48e>
  406560:	f1c1 0008 	rsb	r0, r1, #8
  406564:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406568:	4402      	add	r2, r0
  40656a:	3108      	adds	r1, #8
  40656c:	eb02 090b 	add.w	r9, r2, fp
  406570:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406574:	eba1 0909 	sub.w	r9, r1, r9
  406578:	4649      	mov	r1, r9
  40657a:	4628      	mov	r0, r5
  40657c:	9301      	str	r3, [sp, #4]
  40657e:	9200      	str	r2, [sp, #0]
  406580:	f000 fd5e 	bl	407040 <_sbrk_r>
  406584:	1c43      	adds	r3, r0, #1
  406586:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40658a:	f000 8143 	beq.w	406814 <_malloc_r+0x518>
  40658e:	1a80      	subs	r0, r0, r2
  406590:	4448      	add	r0, r9
  406592:	f040 0001 	orr.w	r0, r0, #1
  406596:	6819      	ldr	r1, [r3, #0]
  406598:	60ba      	str	r2, [r7, #8]
  40659a:	4449      	add	r1, r9
  40659c:	42bc      	cmp	r4, r7
  40659e:	6050      	str	r0, [r2, #4]
  4065a0:	6019      	str	r1, [r3, #0]
  4065a2:	d017      	beq.n	4065d4 <_malloc_r+0x2d8>
  4065a4:	f1b8 0f0f 	cmp.w	r8, #15
  4065a8:	f240 80fb 	bls.w	4067a2 <_malloc_r+0x4a6>
  4065ac:	6860      	ldr	r0, [r4, #4]
  4065ae:	f1a8 020c 	sub.w	r2, r8, #12
  4065b2:	f022 0207 	bic.w	r2, r2, #7
  4065b6:	eb04 0e02 	add.w	lr, r4, r2
  4065ba:	f000 0001 	and.w	r0, r0, #1
  4065be:	f04f 0c05 	mov.w	ip, #5
  4065c2:	4310      	orrs	r0, r2
  4065c4:	2a0f      	cmp	r2, #15
  4065c6:	6060      	str	r0, [r4, #4]
  4065c8:	f8ce c004 	str.w	ip, [lr, #4]
  4065cc:	f8ce c008 	str.w	ip, [lr, #8]
  4065d0:	f200 8117 	bhi.w	406802 <_malloc_r+0x506>
  4065d4:	4b1d      	ldr	r3, [pc, #116]	; (40664c <_malloc_r+0x350>)
  4065d6:	68bc      	ldr	r4, [r7, #8]
  4065d8:	681a      	ldr	r2, [r3, #0]
  4065da:	4291      	cmp	r1, r2
  4065dc:	bf88      	it	hi
  4065de:	6019      	strhi	r1, [r3, #0]
  4065e0:	4b1b      	ldr	r3, [pc, #108]	; (406650 <_malloc_r+0x354>)
  4065e2:	681a      	ldr	r2, [r3, #0]
  4065e4:	4291      	cmp	r1, r2
  4065e6:	6862      	ldr	r2, [r4, #4]
  4065e8:	bf88      	it	hi
  4065ea:	6019      	strhi	r1, [r3, #0]
  4065ec:	f022 0203 	bic.w	r2, r2, #3
  4065f0:	4296      	cmp	r6, r2
  4065f2:	eba2 0306 	sub.w	r3, r2, r6
  4065f6:	d801      	bhi.n	4065fc <_malloc_r+0x300>
  4065f8:	2b0f      	cmp	r3, #15
  4065fa:	dc04      	bgt.n	406606 <_malloc_r+0x30a>
  4065fc:	4628      	mov	r0, r5
  4065fe:	f000 fa1f 	bl	406a40 <__malloc_unlock>
  406602:	2400      	movs	r4, #0
  406604:	e740      	b.n	406488 <_malloc_r+0x18c>
  406606:	19a2      	adds	r2, r4, r6
  406608:	f043 0301 	orr.w	r3, r3, #1
  40660c:	f046 0601 	orr.w	r6, r6, #1
  406610:	6066      	str	r6, [r4, #4]
  406612:	4628      	mov	r0, r5
  406614:	60ba      	str	r2, [r7, #8]
  406616:	6053      	str	r3, [r2, #4]
  406618:	f000 fa12 	bl	406a40 <__malloc_unlock>
  40661c:	3408      	adds	r4, #8
  40661e:	4620      	mov	r0, r4
  406620:	b003      	add	sp, #12
  406622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406626:	2b14      	cmp	r3, #20
  406628:	d971      	bls.n	40670e <_malloc_r+0x412>
  40662a:	2b54      	cmp	r3, #84	; 0x54
  40662c:	f200 80a3 	bhi.w	406776 <_malloc_r+0x47a>
  406630:	0b33      	lsrs	r3, r6, #12
  406632:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406636:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40663a:	00c3      	lsls	r3, r0, #3
  40663c:	e680      	b.n	406340 <_malloc_r+0x44>
  40663e:	bf00      	nop
  406640:	2000043c 	.word	0x2000043c
  406644:	20000abc 	.word	0x20000abc
  406648:	20000a8c 	.word	0x20000a8c
  40664c:	20000ab4 	.word	0x20000ab4
  406650:	20000ab8 	.word	0x20000ab8
  406654:	20000444 	.word	0x20000444
  406658:	20000844 	.word	0x20000844
  40665c:	0a5a      	lsrs	r2, r3, #9
  40665e:	2a04      	cmp	r2, #4
  406660:	d95b      	bls.n	40671a <_malloc_r+0x41e>
  406662:	2a14      	cmp	r2, #20
  406664:	f200 80ae 	bhi.w	4067c4 <_malloc_r+0x4c8>
  406668:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40666c:	00c9      	lsls	r1, r1, #3
  40666e:	325b      	adds	r2, #91	; 0x5b
  406670:	eb07 0c01 	add.w	ip, r7, r1
  406674:	5879      	ldr	r1, [r7, r1]
  406676:	f1ac 0c08 	sub.w	ip, ip, #8
  40667a:	458c      	cmp	ip, r1
  40667c:	f000 8088 	beq.w	406790 <_malloc_r+0x494>
  406680:	684a      	ldr	r2, [r1, #4]
  406682:	f022 0203 	bic.w	r2, r2, #3
  406686:	4293      	cmp	r3, r2
  406688:	d273      	bcs.n	406772 <_malloc_r+0x476>
  40668a:	6889      	ldr	r1, [r1, #8]
  40668c:	458c      	cmp	ip, r1
  40668e:	d1f7      	bne.n	406680 <_malloc_r+0x384>
  406690:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406694:	687b      	ldr	r3, [r7, #4]
  406696:	60e2      	str	r2, [r4, #12]
  406698:	f8c4 c008 	str.w	ip, [r4, #8]
  40669c:	6094      	str	r4, [r2, #8]
  40669e:	f8cc 400c 	str.w	r4, [ip, #12]
  4066a2:	e68f      	b.n	4063c4 <_malloc_r+0xc8>
  4066a4:	19a1      	adds	r1, r4, r6
  4066a6:	f046 0c01 	orr.w	ip, r6, #1
  4066aa:	f042 0601 	orr.w	r6, r2, #1
  4066ae:	f8c4 c004 	str.w	ip, [r4, #4]
  4066b2:	4628      	mov	r0, r5
  4066b4:	6179      	str	r1, [r7, #20]
  4066b6:	6139      	str	r1, [r7, #16]
  4066b8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4066bc:	f8c1 e008 	str.w	lr, [r1, #8]
  4066c0:	604e      	str	r6, [r1, #4]
  4066c2:	50e2      	str	r2, [r4, r3]
  4066c4:	f000 f9bc 	bl	406a40 <__malloc_unlock>
  4066c8:	3408      	adds	r4, #8
  4066ca:	e6dd      	b.n	406488 <_malloc_r+0x18c>
  4066cc:	687b      	ldr	r3, [r7, #4]
  4066ce:	e679      	b.n	4063c4 <_malloc_r+0xc8>
  4066d0:	f108 0801 	add.w	r8, r8, #1
  4066d4:	f018 0f03 	tst.w	r8, #3
  4066d8:	f10c 0c08 	add.w	ip, ip, #8
  4066dc:	f47f ae85 	bne.w	4063ea <_malloc_r+0xee>
  4066e0:	e02d      	b.n	40673e <_malloc_r+0x442>
  4066e2:	68dc      	ldr	r4, [r3, #12]
  4066e4:	42a3      	cmp	r3, r4
  4066e6:	bf08      	it	eq
  4066e8:	3002      	addeq	r0, #2
  4066ea:	f43f ae3e 	beq.w	40636a <_malloc_r+0x6e>
  4066ee:	e6bb      	b.n	406468 <_malloc_r+0x16c>
  4066f0:	4419      	add	r1, r3
  4066f2:	461c      	mov	r4, r3
  4066f4:	684a      	ldr	r2, [r1, #4]
  4066f6:	68db      	ldr	r3, [r3, #12]
  4066f8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4066fc:	f042 0201 	orr.w	r2, r2, #1
  406700:	604a      	str	r2, [r1, #4]
  406702:	4628      	mov	r0, r5
  406704:	60f3      	str	r3, [r6, #12]
  406706:	609e      	str	r6, [r3, #8]
  406708:	f000 f99a 	bl	406a40 <__malloc_unlock>
  40670c:	e6bc      	b.n	406488 <_malloc_r+0x18c>
  40670e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406712:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406716:	00c3      	lsls	r3, r0, #3
  406718:	e612      	b.n	406340 <_malloc_r+0x44>
  40671a:	099a      	lsrs	r2, r3, #6
  40671c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406720:	00c9      	lsls	r1, r1, #3
  406722:	3238      	adds	r2, #56	; 0x38
  406724:	e7a4      	b.n	406670 <_malloc_r+0x374>
  406726:	42bc      	cmp	r4, r7
  406728:	d054      	beq.n	4067d4 <_malloc_r+0x4d8>
  40672a:	68bc      	ldr	r4, [r7, #8]
  40672c:	6862      	ldr	r2, [r4, #4]
  40672e:	f022 0203 	bic.w	r2, r2, #3
  406732:	e75d      	b.n	4065f0 <_malloc_r+0x2f4>
  406734:	f859 3908 	ldr.w	r3, [r9], #-8
  406738:	4599      	cmp	r9, r3
  40673a:	f040 8086 	bne.w	40684a <_malloc_r+0x54e>
  40673e:	f010 0f03 	tst.w	r0, #3
  406742:	f100 30ff 	add.w	r0, r0, #4294967295
  406746:	d1f5      	bne.n	406734 <_malloc_r+0x438>
  406748:	687b      	ldr	r3, [r7, #4]
  40674a:	ea23 0304 	bic.w	r3, r3, r4
  40674e:	607b      	str	r3, [r7, #4]
  406750:	0064      	lsls	r4, r4, #1
  406752:	429c      	cmp	r4, r3
  406754:	f63f aec7 	bhi.w	4064e6 <_malloc_r+0x1ea>
  406758:	2c00      	cmp	r4, #0
  40675a:	f43f aec4 	beq.w	4064e6 <_malloc_r+0x1ea>
  40675e:	421c      	tst	r4, r3
  406760:	4640      	mov	r0, r8
  406762:	f47f ae3e 	bne.w	4063e2 <_malloc_r+0xe6>
  406766:	0064      	lsls	r4, r4, #1
  406768:	421c      	tst	r4, r3
  40676a:	f100 0004 	add.w	r0, r0, #4
  40676e:	d0fa      	beq.n	406766 <_malloc_r+0x46a>
  406770:	e637      	b.n	4063e2 <_malloc_r+0xe6>
  406772:	468c      	mov	ip, r1
  406774:	e78c      	b.n	406690 <_malloc_r+0x394>
  406776:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40677a:	d815      	bhi.n	4067a8 <_malloc_r+0x4ac>
  40677c:	0bf3      	lsrs	r3, r6, #15
  40677e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406782:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406786:	00c3      	lsls	r3, r0, #3
  406788:	e5da      	b.n	406340 <_malloc_r+0x44>
  40678a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40678e:	e6ed      	b.n	40656c <_malloc_r+0x270>
  406790:	687b      	ldr	r3, [r7, #4]
  406792:	1092      	asrs	r2, r2, #2
  406794:	2101      	movs	r1, #1
  406796:	fa01 f202 	lsl.w	r2, r1, r2
  40679a:	4313      	orrs	r3, r2
  40679c:	607b      	str	r3, [r7, #4]
  40679e:	4662      	mov	r2, ip
  4067a0:	e779      	b.n	406696 <_malloc_r+0x39a>
  4067a2:	2301      	movs	r3, #1
  4067a4:	6053      	str	r3, [r2, #4]
  4067a6:	e729      	b.n	4065fc <_malloc_r+0x300>
  4067a8:	f240 5254 	movw	r2, #1364	; 0x554
  4067ac:	4293      	cmp	r3, r2
  4067ae:	d822      	bhi.n	4067f6 <_malloc_r+0x4fa>
  4067b0:	0cb3      	lsrs	r3, r6, #18
  4067b2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4067b6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4067ba:	00c3      	lsls	r3, r0, #3
  4067bc:	e5c0      	b.n	406340 <_malloc_r+0x44>
  4067be:	f103 0b10 	add.w	fp, r3, #16
  4067c2:	e6ae      	b.n	406522 <_malloc_r+0x226>
  4067c4:	2a54      	cmp	r2, #84	; 0x54
  4067c6:	d829      	bhi.n	40681c <_malloc_r+0x520>
  4067c8:	0b1a      	lsrs	r2, r3, #12
  4067ca:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4067ce:	00c9      	lsls	r1, r1, #3
  4067d0:	326e      	adds	r2, #110	; 0x6e
  4067d2:	e74d      	b.n	406670 <_malloc_r+0x374>
  4067d4:	4b20      	ldr	r3, [pc, #128]	; (406858 <_malloc_r+0x55c>)
  4067d6:	6819      	ldr	r1, [r3, #0]
  4067d8:	4459      	add	r1, fp
  4067da:	6019      	str	r1, [r3, #0]
  4067dc:	e6b2      	b.n	406544 <_malloc_r+0x248>
  4067de:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4067e2:	2800      	cmp	r0, #0
  4067e4:	f47f aeae 	bne.w	406544 <_malloc_r+0x248>
  4067e8:	eb08 030b 	add.w	r3, r8, fp
  4067ec:	68ba      	ldr	r2, [r7, #8]
  4067ee:	f043 0301 	orr.w	r3, r3, #1
  4067f2:	6053      	str	r3, [r2, #4]
  4067f4:	e6ee      	b.n	4065d4 <_malloc_r+0x2d8>
  4067f6:	207f      	movs	r0, #127	; 0x7f
  4067f8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4067fc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406800:	e59e      	b.n	406340 <_malloc_r+0x44>
  406802:	f104 0108 	add.w	r1, r4, #8
  406806:	4628      	mov	r0, r5
  406808:	9300      	str	r3, [sp, #0]
  40680a:	f000 fe07 	bl	40741c <_free_r>
  40680e:	9b00      	ldr	r3, [sp, #0]
  406810:	6819      	ldr	r1, [r3, #0]
  406812:	e6df      	b.n	4065d4 <_malloc_r+0x2d8>
  406814:	2001      	movs	r0, #1
  406816:	f04f 0900 	mov.w	r9, #0
  40681a:	e6bc      	b.n	406596 <_malloc_r+0x29a>
  40681c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406820:	d805      	bhi.n	40682e <_malloc_r+0x532>
  406822:	0bda      	lsrs	r2, r3, #15
  406824:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406828:	00c9      	lsls	r1, r1, #3
  40682a:	3277      	adds	r2, #119	; 0x77
  40682c:	e720      	b.n	406670 <_malloc_r+0x374>
  40682e:	f240 5154 	movw	r1, #1364	; 0x554
  406832:	428a      	cmp	r2, r1
  406834:	d805      	bhi.n	406842 <_malloc_r+0x546>
  406836:	0c9a      	lsrs	r2, r3, #18
  406838:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40683c:	00c9      	lsls	r1, r1, #3
  40683e:	327c      	adds	r2, #124	; 0x7c
  406840:	e716      	b.n	406670 <_malloc_r+0x374>
  406842:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406846:	227e      	movs	r2, #126	; 0x7e
  406848:	e712      	b.n	406670 <_malloc_r+0x374>
  40684a:	687b      	ldr	r3, [r7, #4]
  40684c:	e780      	b.n	406750 <_malloc_r+0x454>
  40684e:	08f0      	lsrs	r0, r6, #3
  406850:	f106 0308 	add.w	r3, r6, #8
  406854:	e600      	b.n	406458 <_malloc_r+0x15c>
  406856:	bf00      	nop
  406858:	20000a8c 	.word	0x20000a8c
  40685c:	00000000 	.word	0x00000000

00406860 <memchr>:
  406860:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406864:	2a10      	cmp	r2, #16
  406866:	db2b      	blt.n	4068c0 <memchr+0x60>
  406868:	f010 0f07 	tst.w	r0, #7
  40686c:	d008      	beq.n	406880 <memchr+0x20>
  40686e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406872:	3a01      	subs	r2, #1
  406874:	428b      	cmp	r3, r1
  406876:	d02d      	beq.n	4068d4 <memchr+0x74>
  406878:	f010 0f07 	tst.w	r0, #7
  40687c:	b342      	cbz	r2, 4068d0 <memchr+0x70>
  40687e:	d1f6      	bne.n	40686e <memchr+0xe>
  406880:	b4f0      	push	{r4, r5, r6, r7}
  406882:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406886:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40688a:	f022 0407 	bic.w	r4, r2, #7
  40688e:	f07f 0700 	mvns.w	r7, #0
  406892:	2300      	movs	r3, #0
  406894:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406898:	3c08      	subs	r4, #8
  40689a:	ea85 0501 	eor.w	r5, r5, r1
  40689e:	ea86 0601 	eor.w	r6, r6, r1
  4068a2:	fa85 f547 	uadd8	r5, r5, r7
  4068a6:	faa3 f587 	sel	r5, r3, r7
  4068aa:	fa86 f647 	uadd8	r6, r6, r7
  4068ae:	faa5 f687 	sel	r6, r5, r7
  4068b2:	b98e      	cbnz	r6, 4068d8 <memchr+0x78>
  4068b4:	d1ee      	bne.n	406894 <memchr+0x34>
  4068b6:	bcf0      	pop	{r4, r5, r6, r7}
  4068b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4068bc:	f002 0207 	and.w	r2, r2, #7
  4068c0:	b132      	cbz	r2, 4068d0 <memchr+0x70>
  4068c2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4068c6:	3a01      	subs	r2, #1
  4068c8:	ea83 0301 	eor.w	r3, r3, r1
  4068cc:	b113      	cbz	r3, 4068d4 <memchr+0x74>
  4068ce:	d1f8      	bne.n	4068c2 <memchr+0x62>
  4068d0:	2000      	movs	r0, #0
  4068d2:	4770      	bx	lr
  4068d4:	3801      	subs	r0, #1
  4068d6:	4770      	bx	lr
  4068d8:	2d00      	cmp	r5, #0
  4068da:	bf06      	itte	eq
  4068dc:	4635      	moveq	r5, r6
  4068de:	3803      	subeq	r0, #3
  4068e0:	3807      	subne	r0, #7
  4068e2:	f015 0f01 	tst.w	r5, #1
  4068e6:	d107      	bne.n	4068f8 <memchr+0x98>
  4068e8:	3001      	adds	r0, #1
  4068ea:	f415 7f80 	tst.w	r5, #256	; 0x100
  4068ee:	bf02      	ittt	eq
  4068f0:	3001      	addeq	r0, #1
  4068f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4068f6:	3001      	addeq	r0, #1
  4068f8:	bcf0      	pop	{r4, r5, r6, r7}
  4068fa:	3801      	subs	r0, #1
  4068fc:	4770      	bx	lr
  4068fe:	bf00      	nop

00406900 <memcpy>:
  406900:	4684      	mov	ip, r0
  406902:	ea41 0300 	orr.w	r3, r1, r0
  406906:	f013 0303 	ands.w	r3, r3, #3
  40690a:	d16d      	bne.n	4069e8 <memcpy+0xe8>
  40690c:	3a40      	subs	r2, #64	; 0x40
  40690e:	d341      	bcc.n	406994 <memcpy+0x94>
  406910:	f851 3b04 	ldr.w	r3, [r1], #4
  406914:	f840 3b04 	str.w	r3, [r0], #4
  406918:	f851 3b04 	ldr.w	r3, [r1], #4
  40691c:	f840 3b04 	str.w	r3, [r0], #4
  406920:	f851 3b04 	ldr.w	r3, [r1], #4
  406924:	f840 3b04 	str.w	r3, [r0], #4
  406928:	f851 3b04 	ldr.w	r3, [r1], #4
  40692c:	f840 3b04 	str.w	r3, [r0], #4
  406930:	f851 3b04 	ldr.w	r3, [r1], #4
  406934:	f840 3b04 	str.w	r3, [r0], #4
  406938:	f851 3b04 	ldr.w	r3, [r1], #4
  40693c:	f840 3b04 	str.w	r3, [r0], #4
  406940:	f851 3b04 	ldr.w	r3, [r1], #4
  406944:	f840 3b04 	str.w	r3, [r0], #4
  406948:	f851 3b04 	ldr.w	r3, [r1], #4
  40694c:	f840 3b04 	str.w	r3, [r0], #4
  406950:	f851 3b04 	ldr.w	r3, [r1], #4
  406954:	f840 3b04 	str.w	r3, [r0], #4
  406958:	f851 3b04 	ldr.w	r3, [r1], #4
  40695c:	f840 3b04 	str.w	r3, [r0], #4
  406960:	f851 3b04 	ldr.w	r3, [r1], #4
  406964:	f840 3b04 	str.w	r3, [r0], #4
  406968:	f851 3b04 	ldr.w	r3, [r1], #4
  40696c:	f840 3b04 	str.w	r3, [r0], #4
  406970:	f851 3b04 	ldr.w	r3, [r1], #4
  406974:	f840 3b04 	str.w	r3, [r0], #4
  406978:	f851 3b04 	ldr.w	r3, [r1], #4
  40697c:	f840 3b04 	str.w	r3, [r0], #4
  406980:	f851 3b04 	ldr.w	r3, [r1], #4
  406984:	f840 3b04 	str.w	r3, [r0], #4
  406988:	f851 3b04 	ldr.w	r3, [r1], #4
  40698c:	f840 3b04 	str.w	r3, [r0], #4
  406990:	3a40      	subs	r2, #64	; 0x40
  406992:	d2bd      	bcs.n	406910 <memcpy+0x10>
  406994:	3230      	adds	r2, #48	; 0x30
  406996:	d311      	bcc.n	4069bc <memcpy+0xbc>
  406998:	f851 3b04 	ldr.w	r3, [r1], #4
  40699c:	f840 3b04 	str.w	r3, [r0], #4
  4069a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069a4:	f840 3b04 	str.w	r3, [r0], #4
  4069a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069ac:	f840 3b04 	str.w	r3, [r0], #4
  4069b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069b4:	f840 3b04 	str.w	r3, [r0], #4
  4069b8:	3a10      	subs	r2, #16
  4069ba:	d2ed      	bcs.n	406998 <memcpy+0x98>
  4069bc:	320c      	adds	r2, #12
  4069be:	d305      	bcc.n	4069cc <memcpy+0xcc>
  4069c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069c4:	f840 3b04 	str.w	r3, [r0], #4
  4069c8:	3a04      	subs	r2, #4
  4069ca:	d2f9      	bcs.n	4069c0 <memcpy+0xc0>
  4069cc:	3204      	adds	r2, #4
  4069ce:	d008      	beq.n	4069e2 <memcpy+0xe2>
  4069d0:	07d2      	lsls	r2, r2, #31
  4069d2:	bf1c      	itt	ne
  4069d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4069d8:	f800 3b01 	strbne.w	r3, [r0], #1
  4069dc:	d301      	bcc.n	4069e2 <memcpy+0xe2>
  4069de:	880b      	ldrh	r3, [r1, #0]
  4069e0:	8003      	strh	r3, [r0, #0]
  4069e2:	4660      	mov	r0, ip
  4069e4:	4770      	bx	lr
  4069e6:	bf00      	nop
  4069e8:	2a08      	cmp	r2, #8
  4069ea:	d313      	bcc.n	406a14 <memcpy+0x114>
  4069ec:	078b      	lsls	r3, r1, #30
  4069ee:	d08d      	beq.n	40690c <memcpy+0xc>
  4069f0:	f010 0303 	ands.w	r3, r0, #3
  4069f4:	d08a      	beq.n	40690c <memcpy+0xc>
  4069f6:	f1c3 0304 	rsb	r3, r3, #4
  4069fa:	1ad2      	subs	r2, r2, r3
  4069fc:	07db      	lsls	r3, r3, #31
  4069fe:	bf1c      	itt	ne
  406a00:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406a04:	f800 3b01 	strbne.w	r3, [r0], #1
  406a08:	d380      	bcc.n	40690c <memcpy+0xc>
  406a0a:	f831 3b02 	ldrh.w	r3, [r1], #2
  406a0e:	f820 3b02 	strh.w	r3, [r0], #2
  406a12:	e77b      	b.n	40690c <memcpy+0xc>
  406a14:	3a04      	subs	r2, #4
  406a16:	d3d9      	bcc.n	4069cc <memcpy+0xcc>
  406a18:	3a01      	subs	r2, #1
  406a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
  406a1e:	f800 3b01 	strb.w	r3, [r0], #1
  406a22:	d2f9      	bcs.n	406a18 <memcpy+0x118>
  406a24:	780b      	ldrb	r3, [r1, #0]
  406a26:	7003      	strb	r3, [r0, #0]
  406a28:	784b      	ldrb	r3, [r1, #1]
  406a2a:	7043      	strb	r3, [r0, #1]
  406a2c:	788b      	ldrb	r3, [r1, #2]
  406a2e:	7083      	strb	r3, [r0, #2]
  406a30:	4660      	mov	r0, ip
  406a32:	4770      	bx	lr

00406a34 <__malloc_lock>:
  406a34:	4801      	ldr	r0, [pc, #4]	; (406a3c <__malloc_lock+0x8>)
  406a36:	f7ff bc5d 	b.w	4062f4 <__retarget_lock_acquire_recursive>
  406a3a:	bf00      	nop
  406a3c:	20000af4 	.word	0x20000af4

00406a40 <__malloc_unlock>:
  406a40:	4801      	ldr	r0, [pc, #4]	; (406a48 <__malloc_unlock+0x8>)
  406a42:	f7ff bc59 	b.w	4062f8 <__retarget_lock_release_recursive>
  406a46:	bf00      	nop
  406a48:	20000af4 	.word	0x20000af4

00406a4c <_Balloc>:
  406a4c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406a4e:	b570      	push	{r4, r5, r6, lr}
  406a50:	4605      	mov	r5, r0
  406a52:	460c      	mov	r4, r1
  406a54:	b14b      	cbz	r3, 406a6a <_Balloc+0x1e>
  406a56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406a5a:	b180      	cbz	r0, 406a7e <_Balloc+0x32>
  406a5c:	6802      	ldr	r2, [r0, #0]
  406a5e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406a62:	2300      	movs	r3, #0
  406a64:	6103      	str	r3, [r0, #16]
  406a66:	60c3      	str	r3, [r0, #12]
  406a68:	bd70      	pop	{r4, r5, r6, pc}
  406a6a:	2221      	movs	r2, #33	; 0x21
  406a6c:	2104      	movs	r1, #4
  406a6e:	f000 fc55 	bl	40731c <_calloc_r>
  406a72:	64e8      	str	r0, [r5, #76]	; 0x4c
  406a74:	4603      	mov	r3, r0
  406a76:	2800      	cmp	r0, #0
  406a78:	d1ed      	bne.n	406a56 <_Balloc+0xa>
  406a7a:	2000      	movs	r0, #0
  406a7c:	bd70      	pop	{r4, r5, r6, pc}
  406a7e:	2101      	movs	r1, #1
  406a80:	fa01 f604 	lsl.w	r6, r1, r4
  406a84:	1d72      	adds	r2, r6, #5
  406a86:	4628      	mov	r0, r5
  406a88:	0092      	lsls	r2, r2, #2
  406a8a:	f000 fc47 	bl	40731c <_calloc_r>
  406a8e:	2800      	cmp	r0, #0
  406a90:	d0f3      	beq.n	406a7a <_Balloc+0x2e>
  406a92:	6044      	str	r4, [r0, #4]
  406a94:	6086      	str	r6, [r0, #8]
  406a96:	e7e4      	b.n	406a62 <_Balloc+0x16>

00406a98 <_Bfree>:
  406a98:	b131      	cbz	r1, 406aa8 <_Bfree+0x10>
  406a9a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406a9c:	684a      	ldr	r2, [r1, #4]
  406a9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406aa2:	6008      	str	r0, [r1, #0]
  406aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406aa8:	4770      	bx	lr
  406aaa:	bf00      	nop

00406aac <__multadd>:
  406aac:	b5f0      	push	{r4, r5, r6, r7, lr}
  406aae:	690c      	ldr	r4, [r1, #16]
  406ab0:	b083      	sub	sp, #12
  406ab2:	460d      	mov	r5, r1
  406ab4:	4606      	mov	r6, r0
  406ab6:	f101 0e14 	add.w	lr, r1, #20
  406aba:	2700      	movs	r7, #0
  406abc:	f8de 0000 	ldr.w	r0, [lr]
  406ac0:	b281      	uxth	r1, r0
  406ac2:	fb02 3301 	mla	r3, r2, r1, r3
  406ac6:	0c01      	lsrs	r1, r0, #16
  406ac8:	0c18      	lsrs	r0, r3, #16
  406aca:	fb02 0101 	mla	r1, r2, r1, r0
  406ace:	b29b      	uxth	r3, r3
  406ad0:	3701      	adds	r7, #1
  406ad2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406ad6:	42bc      	cmp	r4, r7
  406ad8:	f84e 3b04 	str.w	r3, [lr], #4
  406adc:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406ae0:	dcec      	bgt.n	406abc <__multadd+0x10>
  406ae2:	b13b      	cbz	r3, 406af4 <__multadd+0x48>
  406ae4:	68aa      	ldr	r2, [r5, #8]
  406ae6:	4294      	cmp	r4, r2
  406ae8:	da07      	bge.n	406afa <__multadd+0x4e>
  406aea:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  406aee:	3401      	adds	r4, #1
  406af0:	6153      	str	r3, [r2, #20]
  406af2:	612c      	str	r4, [r5, #16]
  406af4:	4628      	mov	r0, r5
  406af6:	b003      	add	sp, #12
  406af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406afa:	6869      	ldr	r1, [r5, #4]
  406afc:	9301      	str	r3, [sp, #4]
  406afe:	3101      	adds	r1, #1
  406b00:	4630      	mov	r0, r6
  406b02:	f7ff ffa3 	bl	406a4c <_Balloc>
  406b06:	692a      	ldr	r2, [r5, #16]
  406b08:	3202      	adds	r2, #2
  406b0a:	f105 010c 	add.w	r1, r5, #12
  406b0e:	4607      	mov	r7, r0
  406b10:	0092      	lsls	r2, r2, #2
  406b12:	300c      	adds	r0, #12
  406b14:	f7ff fef4 	bl	406900 <memcpy>
  406b18:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  406b1a:	6869      	ldr	r1, [r5, #4]
  406b1c:	9b01      	ldr	r3, [sp, #4]
  406b1e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406b22:	6028      	str	r0, [r5, #0]
  406b24:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406b28:	463d      	mov	r5, r7
  406b2a:	e7de      	b.n	406aea <__multadd+0x3e>

00406b2c <__hi0bits>:
  406b2c:	0c02      	lsrs	r2, r0, #16
  406b2e:	0412      	lsls	r2, r2, #16
  406b30:	4603      	mov	r3, r0
  406b32:	b9b2      	cbnz	r2, 406b62 <__hi0bits+0x36>
  406b34:	0403      	lsls	r3, r0, #16
  406b36:	2010      	movs	r0, #16
  406b38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  406b3c:	bf04      	itt	eq
  406b3e:	021b      	lsleq	r3, r3, #8
  406b40:	3008      	addeq	r0, #8
  406b42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  406b46:	bf04      	itt	eq
  406b48:	011b      	lsleq	r3, r3, #4
  406b4a:	3004      	addeq	r0, #4
  406b4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406b50:	bf04      	itt	eq
  406b52:	009b      	lsleq	r3, r3, #2
  406b54:	3002      	addeq	r0, #2
  406b56:	2b00      	cmp	r3, #0
  406b58:	db02      	blt.n	406b60 <__hi0bits+0x34>
  406b5a:	005b      	lsls	r3, r3, #1
  406b5c:	d403      	bmi.n	406b66 <__hi0bits+0x3a>
  406b5e:	2020      	movs	r0, #32
  406b60:	4770      	bx	lr
  406b62:	2000      	movs	r0, #0
  406b64:	e7e8      	b.n	406b38 <__hi0bits+0xc>
  406b66:	3001      	adds	r0, #1
  406b68:	4770      	bx	lr
  406b6a:	bf00      	nop

00406b6c <__lo0bits>:
  406b6c:	6803      	ldr	r3, [r0, #0]
  406b6e:	f013 0207 	ands.w	r2, r3, #7
  406b72:	4601      	mov	r1, r0
  406b74:	d007      	beq.n	406b86 <__lo0bits+0x1a>
  406b76:	07da      	lsls	r2, r3, #31
  406b78:	d421      	bmi.n	406bbe <__lo0bits+0x52>
  406b7a:	0798      	lsls	r0, r3, #30
  406b7c:	d421      	bmi.n	406bc2 <__lo0bits+0x56>
  406b7e:	089b      	lsrs	r3, r3, #2
  406b80:	600b      	str	r3, [r1, #0]
  406b82:	2002      	movs	r0, #2
  406b84:	4770      	bx	lr
  406b86:	b298      	uxth	r0, r3
  406b88:	b198      	cbz	r0, 406bb2 <__lo0bits+0x46>
  406b8a:	4610      	mov	r0, r2
  406b8c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406b90:	bf04      	itt	eq
  406b92:	0a1b      	lsreq	r3, r3, #8
  406b94:	3008      	addeq	r0, #8
  406b96:	071a      	lsls	r2, r3, #28
  406b98:	bf04      	itt	eq
  406b9a:	091b      	lsreq	r3, r3, #4
  406b9c:	3004      	addeq	r0, #4
  406b9e:	079a      	lsls	r2, r3, #30
  406ba0:	bf04      	itt	eq
  406ba2:	089b      	lsreq	r3, r3, #2
  406ba4:	3002      	addeq	r0, #2
  406ba6:	07da      	lsls	r2, r3, #31
  406ba8:	d407      	bmi.n	406bba <__lo0bits+0x4e>
  406baa:	085b      	lsrs	r3, r3, #1
  406bac:	d104      	bne.n	406bb8 <__lo0bits+0x4c>
  406bae:	2020      	movs	r0, #32
  406bb0:	4770      	bx	lr
  406bb2:	0c1b      	lsrs	r3, r3, #16
  406bb4:	2010      	movs	r0, #16
  406bb6:	e7e9      	b.n	406b8c <__lo0bits+0x20>
  406bb8:	3001      	adds	r0, #1
  406bba:	600b      	str	r3, [r1, #0]
  406bbc:	4770      	bx	lr
  406bbe:	2000      	movs	r0, #0
  406bc0:	4770      	bx	lr
  406bc2:	085b      	lsrs	r3, r3, #1
  406bc4:	600b      	str	r3, [r1, #0]
  406bc6:	2001      	movs	r0, #1
  406bc8:	4770      	bx	lr
  406bca:	bf00      	nop

00406bcc <__i2b>:
  406bcc:	b510      	push	{r4, lr}
  406bce:	460c      	mov	r4, r1
  406bd0:	2101      	movs	r1, #1
  406bd2:	f7ff ff3b 	bl	406a4c <_Balloc>
  406bd6:	2201      	movs	r2, #1
  406bd8:	6144      	str	r4, [r0, #20]
  406bda:	6102      	str	r2, [r0, #16]
  406bdc:	bd10      	pop	{r4, pc}
  406bde:	bf00      	nop

00406be0 <__multiply>:
  406be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406be4:	690c      	ldr	r4, [r1, #16]
  406be6:	6915      	ldr	r5, [r2, #16]
  406be8:	42ac      	cmp	r4, r5
  406bea:	b083      	sub	sp, #12
  406bec:	468b      	mov	fp, r1
  406bee:	4616      	mov	r6, r2
  406bf0:	da04      	bge.n	406bfc <__multiply+0x1c>
  406bf2:	4622      	mov	r2, r4
  406bf4:	46b3      	mov	fp, r6
  406bf6:	462c      	mov	r4, r5
  406bf8:	460e      	mov	r6, r1
  406bfa:	4615      	mov	r5, r2
  406bfc:	f8db 3008 	ldr.w	r3, [fp, #8]
  406c00:	f8db 1004 	ldr.w	r1, [fp, #4]
  406c04:	eb04 0805 	add.w	r8, r4, r5
  406c08:	4598      	cmp	r8, r3
  406c0a:	bfc8      	it	gt
  406c0c:	3101      	addgt	r1, #1
  406c0e:	f7ff ff1d 	bl	406a4c <_Balloc>
  406c12:	f100 0914 	add.w	r9, r0, #20
  406c16:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  406c1a:	45d1      	cmp	r9, sl
  406c1c:	9000      	str	r0, [sp, #0]
  406c1e:	d205      	bcs.n	406c2c <__multiply+0x4c>
  406c20:	464b      	mov	r3, r9
  406c22:	2100      	movs	r1, #0
  406c24:	f843 1b04 	str.w	r1, [r3], #4
  406c28:	459a      	cmp	sl, r3
  406c2a:	d8fb      	bhi.n	406c24 <__multiply+0x44>
  406c2c:	f106 0c14 	add.w	ip, r6, #20
  406c30:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406c34:	f10b 0b14 	add.w	fp, fp, #20
  406c38:	459c      	cmp	ip, r3
  406c3a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  406c3e:	d24c      	bcs.n	406cda <__multiply+0xfa>
  406c40:	f8cd a004 	str.w	sl, [sp, #4]
  406c44:	469a      	mov	sl, r3
  406c46:	f8dc 5000 	ldr.w	r5, [ip]
  406c4a:	b2af      	uxth	r7, r5
  406c4c:	b1ef      	cbz	r7, 406c8a <__multiply+0xaa>
  406c4e:	2100      	movs	r1, #0
  406c50:	464d      	mov	r5, r9
  406c52:	465e      	mov	r6, fp
  406c54:	460c      	mov	r4, r1
  406c56:	f856 2b04 	ldr.w	r2, [r6], #4
  406c5a:	6828      	ldr	r0, [r5, #0]
  406c5c:	b293      	uxth	r3, r2
  406c5e:	b281      	uxth	r1, r0
  406c60:	fb07 1303 	mla	r3, r7, r3, r1
  406c64:	0c12      	lsrs	r2, r2, #16
  406c66:	0c01      	lsrs	r1, r0, #16
  406c68:	4423      	add	r3, r4
  406c6a:	fb07 1102 	mla	r1, r7, r2, r1
  406c6e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406c72:	b29b      	uxth	r3, r3
  406c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406c78:	45b6      	cmp	lr, r6
  406c7a:	f845 3b04 	str.w	r3, [r5], #4
  406c7e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406c82:	d8e8      	bhi.n	406c56 <__multiply+0x76>
  406c84:	602c      	str	r4, [r5, #0]
  406c86:	f8dc 5000 	ldr.w	r5, [ip]
  406c8a:	0c2d      	lsrs	r5, r5, #16
  406c8c:	d01d      	beq.n	406cca <__multiply+0xea>
  406c8e:	f8d9 3000 	ldr.w	r3, [r9]
  406c92:	4648      	mov	r0, r9
  406c94:	461c      	mov	r4, r3
  406c96:	4659      	mov	r1, fp
  406c98:	2200      	movs	r2, #0
  406c9a:	880e      	ldrh	r6, [r1, #0]
  406c9c:	0c24      	lsrs	r4, r4, #16
  406c9e:	fb05 4406 	mla	r4, r5, r6, r4
  406ca2:	4422      	add	r2, r4
  406ca4:	b29b      	uxth	r3, r3
  406ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406caa:	f840 3b04 	str.w	r3, [r0], #4
  406cae:	f851 3b04 	ldr.w	r3, [r1], #4
  406cb2:	6804      	ldr	r4, [r0, #0]
  406cb4:	0c1b      	lsrs	r3, r3, #16
  406cb6:	b2a6      	uxth	r6, r4
  406cb8:	fb05 6303 	mla	r3, r5, r3, r6
  406cbc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406cc0:	458e      	cmp	lr, r1
  406cc2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406cc6:	d8e8      	bhi.n	406c9a <__multiply+0xba>
  406cc8:	6003      	str	r3, [r0, #0]
  406cca:	f10c 0c04 	add.w	ip, ip, #4
  406cce:	45e2      	cmp	sl, ip
  406cd0:	f109 0904 	add.w	r9, r9, #4
  406cd4:	d8b7      	bhi.n	406c46 <__multiply+0x66>
  406cd6:	f8dd a004 	ldr.w	sl, [sp, #4]
  406cda:	f1b8 0f00 	cmp.w	r8, #0
  406cde:	dd0b      	ble.n	406cf8 <__multiply+0x118>
  406ce0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406ce4:	f1aa 0a04 	sub.w	sl, sl, #4
  406ce8:	b11b      	cbz	r3, 406cf2 <__multiply+0x112>
  406cea:	e005      	b.n	406cf8 <__multiply+0x118>
  406cec:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406cf0:	b913      	cbnz	r3, 406cf8 <__multiply+0x118>
  406cf2:	f1b8 0801 	subs.w	r8, r8, #1
  406cf6:	d1f9      	bne.n	406cec <__multiply+0x10c>
  406cf8:	9800      	ldr	r0, [sp, #0]
  406cfa:	f8c0 8010 	str.w	r8, [r0, #16]
  406cfe:	b003      	add	sp, #12
  406d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406d04 <__pow5mult>:
  406d04:	f012 0303 	ands.w	r3, r2, #3
  406d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d0c:	4614      	mov	r4, r2
  406d0e:	4607      	mov	r7, r0
  406d10:	d12e      	bne.n	406d70 <__pow5mult+0x6c>
  406d12:	460d      	mov	r5, r1
  406d14:	10a4      	asrs	r4, r4, #2
  406d16:	d01c      	beq.n	406d52 <__pow5mult+0x4e>
  406d18:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  406d1a:	b396      	cbz	r6, 406d82 <__pow5mult+0x7e>
  406d1c:	07e3      	lsls	r3, r4, #31
  406d1e:	f04f 0800 	mov.w	r8, #0
  406d22:	d406      	bmi.n	406d32 <__pow5mult+0x2e>
  406d24:	1064      	asrs	r4, r4, #1
  406d26:	d014      	beq.n	406d52 <__pow5mult+0x4e>
  406d28:	6830      	ldr	r0, [r6, #0]
  406d2a:	b1a8      	cbz	r0, 406d58 <__pow5mult+0x54>
  406d2c:	4606      	mov	r6, r0
  406d2e:	07e3      	lsls	r3, r4, #31
  406d30:	d5f8      	bpl.n	406d24 <__pow5mult+0x20>
  406d32:	4632      	mov	r2, r6
  406d34:	4629      	mov	r1, r5
  406d36:	4638      	mov	r0, r7
  406d38:	f7ff ff52 	bl	406be0 <__multiply>
  406d3c:	b1b5      	cbz	r5, 406d6c <__pow5mult+0x68>
  406d3e:	686a      	ldr	r2, [r5, #4]
  406d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406d42:	1064      	asrs	r4, r4, #1
  406d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406d48:	6029      	str	r1, [r5, #0]
  406d4a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  406d4e:	4605      	mov	r5, r0
  406d50:	d1ea      	bne.n	406d28 <__pow5mult+0x24>
  406d52:	4628      	mov	r0, r5
  406d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d58:	4632      	mov	r2, r6
  406d5a:	4631      	mov	r1, r6
  406d5c:	4638      	mov	r0, r7
  406d5e:	f7ff ff3f 	bl	406be0 <__multiply>
  406d62:	6030      	str	r0, [r6, #0]
  406d64:	f8c0 8000 	str.w	r8, [r0]
  406d68:	4606      	mov	r6, r0
  406d6a:	e7e0      	b.n	406d2e <__pow5mult+0x2a>
  406d6c:	4605      	mov	r5, r0
  406d6e:	e7d9      	b.n	406d24 <__pow5mult+0x20>
  406d70:	1e5a      	subs	r2, r3, #1
  406d72:	4d0b      	ldr	r5, [pc, #44]	; (406da0 <__pow5mult+0x9c>)
  406d74:	2300      	movs	r3, #0
  406d76:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  406d7a:	f7ff fe97 	bl	406aac <__multadd>
  406d7e:	4605      	mov	r5, r0
  406d80:	e7c8      	b.n	406d14 <__pow5mult+0x10>
  406d82:	2101      	movs	r1, #1
  406d84:	4638      	mov	r0, r7
  406d86:	f7ff fe61 	bl	406a4c <_Balloc>
  406d8a:	f240 2171 	movw	r1, #625	; 0x271
  406d8e:	2201      	movs	r2, #1
  406d90:	2300      	movs	r3, #0
  406d92:	6141      	str	r1, [r0, #20]
  406d94:	6102      	str	r2, [r0, #16]
  406d96:	4606      	mov	r6, r0
  406d98:	64b8      	str	r0, [r7, #72]	; 0x48
  406d9a:	6003      	str	r3, [r0, #0]
  406d9c:	e7be      	b.n	406d1c <__pow5mult+0x18>
  406d9e:	bf00      	nop
  406da0:	00408ee0 	.word	0x00408ee0

00406da4 <__lshift>:
  406da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406da8:	4691      	mov	r9, r2
  406daa:	690a      	ldr	r2, [r1, #16]
  406dac:	688b      	ldr	r3, [r1, #8]
  406dae:	ea4f 1469 	mov.w	r4, r9, asr #5
  406db2:	eb04 0802 	add.w	r8, r4, r2
  406db6:	f108 0501 	add.w	r5, r8, #1
  406dba:	429d      	cmp	r5, r3
  406dbc:	460e      	mov	r6, r1
  406dbe:	4607      	mov	r7, r0
  406dc0:	6849      	ldr	r1, [r1, #4]
  406dc2:	dd04      	ble.n	406dce <__lshift+0x2a>
  406dc4:	005b      	lsls	r3, r3, #1
  406dc6:	429d      	cmp	r5, r3
  406dc8:	f101 0101 	add.w	r1, r1, #1
  406dcc:	dcfa      	bgt.n	406dc4 <__lshift+0x20>
  406dce:	4638      	mov	r0, r7
  406dd0:	f7ff fe3c 	bl	406a4c <_Balloc>
  406dd4:	2c00      	cmp	r4, #0
  406dd6:	f100 0314 	add.w	r3, r0, #20
  406dda:	dd06      	ble.n	406dea <__lshift+0x46>
  406ddc:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406de0:	2100      	movs	r1, #0
  406de2:	f843 1b04 	str.w	r1, [r3], #4
  406de6:	429a      	cmp	r2, r3
  406de8:	d1fb      	bne.n	406de2 <__lshift+0x3e>
  406dea:	6934      	ldr	r4, [r6, #16]
  406dec:	f106 0114 	add.w	r1, r6, #20
  406df0:	f019 091f 	ands.w	r9, r9, #31
  406df4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406df8:	d01d      	beq.n	406e36 <__lshift+0x92>
  406dfa:	f1c9 0c20 	rsb	ip, r9, #32
  406dfe:	2200      	movs	r2, #0
  406e00:	680c      	ldr	r4, [r1, #0]
  406e02:	fa04 f409 	lsl.w	r4, r4, r9
  406e06:	4314      	orrs	r4, r2
  406e08:	f843 4b04 	str.w	r4, [r3], #4
  406e0c:	f851 2b04 	ldr.w	r2, [r1], #4
  406e10:	458e      	cmp	lr, r1
  406e12:	fa22 f20c 	lsr.w	r2, r2, ip
  406e16:	d8f3      	bhi.n	406e00 <__lshift+0x5c>
  406e18:	601a      	str	r2, [r3, #0]
  406e1a:	b10a      	cbz	r2, 406e20 <__lshift+0x7c>
  406e1c:	f108 0502 	add.w	r5, r8, #2
  406e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406e22:	6872      	ldr	r2, [r6, #4]
  406e24:	3d01      	subs	r5, #1
  406e26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406e2a:	6105      	str	r5, [r0, #16]
  406e2c:	6031      	str	r1, [r6, #0]
  406e2e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406e36:	3b04      	subs	r3, #4
  406e38:	f851 2b04 	ldr.w	r2, [r1], #4
  406e3c:	f843 2f04 	str.w	r2, [r3, #4]!
  406e40:	458e      	cmp	lr, r1
  406e42:	d8f9      	bhi.n	406e38 <__lshift+0x94>
  406e44:	e7ec      	b.n	406e20 <__lshift+0x7c>
  406e46:	bf00      	nop

00406e48 <__mcmp>:
  406e48:	b430      	push	{r4, r5}
  406e4a:	690b      	ldr	r3, [r1, #16]
  406e4c:	4605      	mov	r5, r0
  406e4e:	6900      	ldr	r0, [r0, #16]
  406e50:	1ac0      	subs	r0, r0, r3
  406e52:	d10f      	bne.n	406e74 <__mcmp+0x2c>
  406e54:	009b      	lsls	r3, r3, #2
  406e56:	3514      	adds	r5, #20
  406e58:	3114      	adds	r1, #20
  406e5a:	4419      	add	r1, r3
  406e5c:	442b      	add	r3, r5
  406e5e:	e001      	b.n	406e64 <__mcmp+0x1c>
  406e60:	429d      	cmp	r5, r3
  406e62:	d207      	bcs.n	406e74 <__mcmp+0x2c>
  406e64:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406e68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  406e6c:	4294      	cmp	r4, r2
  406e6e:	d0f7      	beq.n	406e60 <__mcmp+0x18>
  406e70:	d302      	bcc.n	406e78 <__mcmp+0x30>
  406e72:	2001      	movs	r0, #1
  406e74:	bc30      	pop	{r4, r5}
  406e76:	4770      	bx	lr
  406e78:	f04f 30ff 	mov.w	r0, #4294967295
  406e7c:	e7fa      	b.n	406e74 <__mcmp+0x2c>
  406e7e:	bf00      	nop

00406e80 <__mdiff>:
  406e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406e84:	690f      	ldr	r7, [r1, #16]
  406e86:	460e      	mov	r6, r1
  406e88:	6911      	ldr	r1, [r2, #16]
  406e8a:	1a7f      	subs	r7, r7, r1
  406e8c:	2f00      	cmp	r7, #0
  406e8e:	4690      	mov	r8, r2
  406e90:	d117      	bne.n	406ec2 <__mdiff+0x42>
  406e92:	0089      	lsls	r1, r1, #2
  406e94:	f106 0514 	add.w	r5, r6, #20
  406e98:	f102 0e14 	add.w	lr, r2, #20
  406e9c:	186b      	adds	r3, r5, r1
  406e9e:	4471      	add	r1, lr
  406ea0:	e001      	b.n	406ea6 <__mdiff+0x26>
  406ea2:	429d      	cmp	r5, r3
  406ea4:	d25c      	bcs.n	406f60 <__mdiff+0xe0>
  406ea6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406eaa:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406eae:	42a2      	cmp	r2, r4
  406eb0:	d0f7      	beq.n	406ea2 <__mdiff+0x22>
  406eb2:	d25e      	bcs.n	406f72 <__mdiff+0xf2>
  406eb4:	4633      	mov	r3, r6
  406eb6:	462c      	mov	r4, r5
  406eb8:	4646      	mov	r6, r8
  406eba:	4675      	mov	r5, lr
  406ebc:	4698      	mov	r8, r3
  406ebe:	2701      	movs	r7, #1
  406ec0:	e005      	b.n	406ece <__mdiff+0x4e>
  406ec2:	db58      	blt.n	406f76 <__mdiff+0xf6>
  406ec4:	f106 0514 	add.w	r5, r6, #20
  406ec8:	f108 0414 	add.w	r4, r8, #20
  406ecc:	2700      	movs	r7, #0
  406ece:	6871      	ldr	r1, [r6, #4]
  406ed0:	f7ff fdbc 	bl	406a4c <_Balloc>
  406ed4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406ed8:	6936      	ldr	r6, [r6, #16]
  406eda:	60c7      	str	r7, [r0, #12]
  406edc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406ee0:	46a6      	mov	lr, r4
  406ee2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406ee6:	f100 0414 	add.w	r4, r0, #20
  406eea:	2300      	movs	r3, #0
  406eec:	f85e 1b04 	ldr.w	r1, [lr], #4
  406ef0:	f855 8b04 	ldr.w	r8, [r5], #4
  406ef4:	b28a      	uxth	r2, r1
  406ef6:	fa13 f388 	uxtah	r3, r3, r8
  406efa:	0c09      	lsrs	r1, r1, #16
  406efc:	1a9a      	subs	r2, r3, r2
  406efe:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406f02:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406f06:	b292      	uxth	r2, r2
  406f08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406f0c:	45f4      	cmp	ip, lr
  406f0e:	f844 2b04 	str.w	r2, [r4], #4
  406f12:	ea4f 4323 	mov.w	r3, r3, asr #16
  406f16:	d8e9      	bhi.n	406eec <__mdiff+0x6c>
  406f18:	42af      	cmp	r7, r5
  406f1a:	d917      	bls.n	406f4c <__mdiff+0xcc>
  406f1c:	46a4      	mov	ip, r4
  406f1e:	46ae      	mov	lr, r5
  406f20:	f85e 2b04 	ldr.w	r2, [lr], #4
  406f24:	fa13 f382 	uxtah	r3, r3, r2
  406f28:	1419      	asrs	r1, r3, #16
  406f2a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406f2e:	b29b      	uxth	r3, r3
  406f30:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406f34:	4577      	cmp	r7, lr
  406f36:	f84c 2b04 	str.w	r2, [ip], #4
  406f3a:	ea4f 4321 	mov.w	r3, r1, asr #16
  406f3e:	d8ef      	bhi.n	406f20 <__mdiff+0xa0>
  406f40:	43ed      	mvns	r5, r5
  406f42:	442f      	add	r7, r5
  406f44:	f027 0703 	bic.w	r7, r7, #3
  406f48:	3704      	adds	r7, #4
  406f4a:	443c      	add	r4, r7
  406f4c:	3c04      	subs	r4, #4
  406f4e:	b922      	cbnz	r2, 406f5a <__mdiff+0xda>
  406f50:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406f54:	3e01      	subs	r6, #1
  406f56:	2b00      	cmp	r3, #0
  406f58:	d0fa      	beq.n	406f50 <__mdiff+0xd0>
  406f5a:	6106      	str	r6, [r0, #16]
  406f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f60:	2100      	movs	r1, #0
  406f62:	f7ff fd73 	bl	406a4c <_Balloc>
  406f66:	2201      	movs	r2, #1
  406f68:	2300      	movs	r3, #0
  406f6a:	6102      	str	r2, [r0, #16]
  406f6c:	6143      	str	r3, [r0, #20]
  406f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406f72:	4674      	mov	r4, lr
  406f74:	e7ab      	b.n	406ece <__mdiff+0x4e>
  406f76:	4633      	mov	r3, r6
  406f78:	f106 0414 	add.w	r4, r6, #20
  406f7c:	f102 0514 	add.w	r5, r2, #20
  406f80:	4616      	mov	r6, r2
  406f82:	2701      	movs	r7, #1
  406f84:	4698      	mov	r8, r3
  406f86:	e7a2      	b.n	406ece <__mdiff+0x4e>

00406f88 <__d2b>:
  406f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406f8c:	b082      	sub	sp, #8
  406f8e:	2101      	movs	r1, #1
  406f90:	461c      	mov	r4, r3
  406f92:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406f96:	4615      	mov	r5, r2
  406f98:	9e08      	ldr	r6, [sp, #32]
  406f9a:	f7ff fd57 	bl	406a4c <_Balloc>
  406f9e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406fa2:	4680      	mov	r8, r0
  406fa4:	b10f      	cbz	r7, 406faa <__d2b+0x22>
  406fa6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406faa:	9401      	str	r4, [sp, #4]
  406fac:	b31d      	cbz	r5, 406ff6 <__d2b+0x6e>
  406fae:	a802      	add	r0, sp, #8
  406fb0:	f840 5d08 	str.w	r5, [r0, #-8]!
  406fb4:	f7ff fdda 	bl	406b6c <__lo0bits>
  406fb8:	2800      	cmp	r0, #0
  406fba:	d134      	bne.n	407026 <__d2b+0x9e>
  406fbc:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406fc0:	f8c8 2014 	str.w	r2, [r8, #20]
  406fc4:	2b00      	cmp	r3, #0
  406fc6:	bf0c      	ite	eq
  406fc8:	2101      	moveq	r1, #1
  406fca:	2102      	movne	r1, #2
  406fcc:	f8c8 3018 	str.w	r3, [r8, #24]
  406fd0:	f8c8 1010 	str.w	r1, [r8, #16]
  406fd4:	b9df      	cbnz	r7, 40700e <__d2b+0x86>
  406fd6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406fda:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406fde:	6030      	str	r0, [r6, #0]
  406fe0:	6918      	ldr	r0, [r3, #16]
  406fe2:	f7ff fda3 	bl	406b2c <__hi0bits>
  406fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406fe8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406fec:	6018      	str	r0, [r3, #0]
  406fee:	4640      	mov	r0, r8
  406ff0:	b002      	add	sp, #8
  406ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ff6:	a801      	add	r0, sp, #4
  406ff8:	f7ff fdb8 	bl	406b6c <__lo0bits>
  406ffc:	9b01      	ldr	r3, [sp, #4]
  406ffe:	f8c8 3014 	str.w	r3, [r8, #20]
  407002:	2101      	movs	r1, #1
  407004:	3020      	adds	r0, #32
  407006:	f8c8 1010 	str.w	r1, [r8, #16]
  40700a:	2f00      	cmp	r7, #0
  40700c:	d0e3      	beq.n	406fd6 <__d2b+0x4e>
  40700e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407010:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407014:	4407      	add	r7, r0
  407016:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40701a:	6037      	str	r7, [r6, #0]
  40701c:	6018      	str	r0, [r3, #0]
  40701e:	4640      	mov	r0, r8
  407020:	b002      	add	sp, #8
  407022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407026:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40702a:	f1c0 0220 	rsb	r2, r0, #32
  40702e:	fa03 f202 	lsl.w	r2, r3, r2
  407032:	430a      	orrs	r2, r1
  407034:	40c3      	lsrs	r3, r0
  407036:	9301      	str	r3, [sp, #4]
  407038:	f8c8 2014 	str.w	r2, [r8, #20]
  40703c:	e7c2      	b.n	406fc4 <__d2b+0x3c>
  40703e:	bf00      	nop

00407040 <_sbrk_r>:
  407040:	b538      	push	{r3, r4, r5, lr}
  407042:	4c07      	ldr	r4, [pc, #28]	; (407060 <_sbrk_r+0x20>)
  407044:	2300      	movs	r3, #0
  407046:	4605      	mov	r5, r0
  407048:	4608      	mov	r0, r1
  40704a:	6023      	str	r3, [r4, #0]
  40704c:	f7fa fdf6 	bl	401c3c <_sbrk>
  407050:	1c43      	adds	r3, r0, #1
  407052:	d000      	beq.n	407056 <_sbrk_r+0x16>
  407054:	bd38      	pop	{r3, r4, r5, pc}
  407056:	6823      	ldr	r3, [r4, #0]
  407058:	2b00      	cmp	r3, #0
  40705a:	d0fb      	beq.n	407054 <_sbrk_r+0x14>
  40705c:	602b      	str	r3, [r5, #0]
  40705e:	bd38      	pop	{r3, r4, r5, pc}
  407060:	20000b08 	.word	0x20000b08
	...

00407080 <strlen>:
  407080:	f890 f000 	pld	[r0]
  407084:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407088:	f020 0107 	bic.w	r1, r0, #7
  40708c:	f06f 0c00 	mvn.w	ip, #0
  407090:	f010 0407 	ands.w	r4, r0, #7
  407094:	f891 f020 	pld	[r1, #32]
  407098:	f040 8049 	bne.w	40712e <strlen+0xae>
  40709c:	f04f 0400 	mov.w	r4, #0
  4070a0:	f06f 0007 	mvn.w	r0, #7
  4070a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4070a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4070ac:	f100 0008 	add.w	r0, r0, #8
  4070b0:	fa82 f24c 	uadd8	r2, r2, ip
  4070b4:	faa4 f28c 	sel	r2, r4, ip
  4070b8:	fa83 f34c 	uadd8	r3, r3, ip
  4070bc:	faa2 f38c 	sel	r3, r2, ip
  4070c0:	bb4b      	cbnz	r3, 407116 <strlen+0x96>
  4070c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4070c6:	fa82 f24c 	uadd8	r2, r2, ip
  4070ca:	f100 0008 	add.w	r0, r0, #8
  4070ce:	faa4 f28c 	sel	r2, r4, ip
  4070d2:	fa83 f34c 	uadd8	r3, r3, ip
  4070d6:	faa2 f38c 	sel	r3, r2, ip
  4070da:	b9e3      	cbnz	r3, 407116 <strlen+0x96>
  4070dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4070e0:	fa82 f24c 	uadd8	r2, r2, ip
  4070e4:	f100 0008 	add.w	r0, r0, #8
  4070e8:	faa4 f28c 	sel	r2, r4, ip
  4070ec:	fa83 f34c 	uadd8	r3, r3, ip
  4070f0:	faa2 f38c 	sel	r3, r2, ip
  4070f4:	b97b      	cbnz	r3, 407116 <strlen+0x96>
  4070f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4070fa:	f101 0120 	add.w	r1, r1, #32
  4070fe:	fa82 f24c 	uadd8	r2, r2, ip
  407102:	f100 0008 	add.w	r0, r0, #8
  407106:	faa4 f28c 	sel	r2, r4, ip
  40710a:	fa83 f34c 	uadd8	r3, r3, ip
  40710e:	faa2 f38c 	sel	r3, r2, ip
  407112:	2b00      	cmp	r3, #0
  407114:	d0c6      	beq.n	4070a4 <strlen+0x24>
  407116:	2a00      	cmp	r2, #0
  407118:	bf04      	itt	eq
  40711a:	3004      	addeq	r0, #4
  40711c:	461a      	moveq	r2, r3
  40711e:	ba12      	rev	r2, r2
  407120:	fab2 f282 	clz	r2, r2
  407124:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407128:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40712c:	4770      	bx	lr
  40712e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407132:	f004 0503 	and.w	r5, r4, #3
  407136:	f1c4 0000 	rsb	r0, r4, #0
  40713a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40713e:	f014 0f04 	tst.w	r4, #4
  407142:	f891 f040 	pld	[r1, #64]	; 0x40
  407146:	fa0c f505 	lsl.w	r5, ip, r5
  40714a:	ea62 0205 	orn	r2, r2, r5
  40714e:	bf1c      	itt	ne
  407150:	ea63 0305 	ornne	r3, r3, r5
  407154:	4662      	movne	r2, ip
  407156:	f04f 0400 	mov.w	r4, #0
  40715a:	e7a9      	b.n	4070b0 <strlen+0x30>

0040715c <__ssprint_r>:
  40715c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407160:	6893      	ldr	r3, [r2, #8]
  407162:	b083      	sub	sp, #12
  407164:	4690      	mov	r8, r2
  407166:	2b00      	cmp	r3, #0
  407168:	d070      	beq.n	40724c <__ssprint_r+0xf0>
  40716a:	4682      	mov	sl, r0
  40716c:	460c      	mov	r4, r1
  40716e:	6817      	ldr	r7, [r2, #0]
  407170:	688d      	ldr	r5, [r1, #8]
  407172:	6808      	ldr	r0, [r1, #0]
  407174:	e042      	b.n	4071fc <__ssprint_r+0xa0>
  407176:	89a3      	ldrh	r3, [r4, #12]
  407178:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40717c:	d02e      	beq.n	4071dc <__ssprint_r+0x80>
  40717e:	6965      	ldr	r5, [r4, #20]
  407180:	6921      	ldr	r1, [r4, #16]
  407182:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  407186:	eba0 0b01 	sub.w	fp, r0, r1
  40718a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40718e:	f10b 0001 	add.w	r0, fp, #1
  407192:	106d      	asrs	r5, r5, #1
  407194:	4430      	add	r0, r6
  407196:	42a8      	cmp	r0, r5
  407198:	462a      	mov	r2, r5
  40719a:	bf84      	itt	hi
  40719c:	4605      	movhi	r5, r0
  40719e:	462a      	movhi	r2, r5
  4071a0:	055b      	lsls	r3, r3, #21
  4071a2:	d538      	bpl.n	407216 <__ssprint_r+0xba>
  4071a4:	4611      	mov	r1, r2
  4071a6:	4650      	mov	r0, sl
  4071a8:	f7ff f8a8 	bl	4062fc <_malloc_r>
  4071ac:	2800      	cmp	r0, #0
  4071ae:	d03c      	beq.n	40722a <__ssprint_r+0xce>
  4071b0:	465a      	mov	r2, fp
  4071b2:	6921      	ldr	r1, [r4, #16]
  4071b4:	9001      	str	r0, [sp, #4]
  4071b6:	f7ff fba3 	bl	406900 <memcpy>
  4071ba:	89a2      	ldrh	r2, [r4, #12]
  4071bc:	9b01      	ldr	r3, [sp, #4]
  4071be:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4071c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4071c6:	81a2      	strh	r2, [r4, #12]
  4071c8:	eba5 020b 	sub.w	r2, r5, fp
  4071cc:	eb03 000b 	add.w	r0, r3, fp
  4071d0:	6165      	str	r5, [r4, #20]
  4071d2:	6123      	str	r3, [r4, #16]
  4071d4:	6020      	str	r0, [r4, #0]
  4071d6:	60a2      	str	r2, [r4, #8]
  4071d8:	4635      	mov	r5, r6
  4071da:	46b3      	mov	fp, r6
  4071dc:	465a      	mov	r2, fp
  4071de:	4649      	mov	r1, r9
  4071e0:	f000 fa18 	bl	407614 <memmove>
  4071e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4071e8:	68a2      	ldr	r2, [r4, #8]
  4071ea:	6820      	ldr	r0, [r4, #0]
  4071ec:	1b55      	subs	r5, r2, r5
  4071ee:	4458      	add	r0, fp
  4071f0:	1b9e      	subs	r6, r3, r6
  4071f2:	60a5      	str	r5, [r4, #8]
  4071f4:	6020      	str	r0, [r4, #0]
  4071f6:	f8c8 6008 	str.w	r6, [r8, #8]
  4071fa:	b33e      	cbz	r6, 40724c <__ssprint_r+0xf0>
  4071fc:	687e      	ldr	r6, [r7, #4]
  4071fe:	463b      	mov	r3, r7
  407200:	3708      	adds	r7, #8
  407202:	2e00      	cmp	r6, #0
  407204:	d0fa      	beq.n	4071fc <__ssprint_r+0xa0>
  407206:	42ae      	cmp	r6, r5
  407208:	f8d3 9000 	ldr.w	r9, [r3]
  40720c:	46ab      	mov	fp, r5
  40720e:	d2b2      	bcs.n	407176 <__ssprint_r+0x1a>
  407210:	4635      	mov	r5, r6
  407212:	46b3      	mov	fp, r6
  407214:	e7e2      	b.n	4071dc <__ssprint_r+0x80>
  407216:	4650      	mov	r0, sl
  407218:	f000 fa60 	bl	4076dc <_realloc_r>
  40721c:	4603      	mov	r3, r0
  40721e:	2800      	cmp	r0, #0
  407220:	d1d2      	bne.n	4071c8 <__ssprint_r+0x6c>
  407222:	6921      	ldr	r1, [r4, #16]
  407224:	4650      	mov	r0, sl
  407226:	f000 f8f9 	bl	40741c <_free_r>
  40722a:	230c      	movs	r3, #12
  40722c:	f8ca 3000 	str.w	r3, [sl]
  407230:	89a3      	ldrh	r3, [r4, #12]
  407232:	2200      	movs	r2, #0
  407234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407238:	f04f 30ff 	mov.w	r0, #4294967295
  40723c:	81a3      	strh	r3, [r4, #12]
  40723e:	f8c8 2008 	str.w	r2, [r8, #8]
  407242:	f8c8 2004 	str.w	r2, [r8, #4]
  407246:	b003      	add	sp, #12
  407248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40724c:	2000      	movs	r0, #0
  40724e:	f8c8 0004 	str.w	r0, [r8, #4]
  407252:	b003      	add	sp, #12
  407254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407258 <__register_exitproc>:
  407258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40725c:	4d2c      	ldr	r5, [pc, #176]	; (407310 <__register_exitproc+0xb8>)
  40725e:	4606      	mov	r6, r0
  407260:	6828      	ldr	r0, [r5, #0]
  407262:	4698      	mov	r8, r3
  407264:	460f      	mov	r7, r1
  407266:	4691      	mov	r9, r2
  407268:	f7ff f844 	bl	4062f4 <__retarget_lock_acquire_recursive>
  40726c:	4b29      	ldr	r3, [pc, #164]	; (407314 <__register_exitproc+0xbc>)
  40726e:	681c      	ldr	r4, [r3, #0]
  407270:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  407274:	2b00      	cmp	r3, #0
  407276:	d03e      	beq.n	4072f6 <__register_exitproc+0x9e>
  407278:	685a      	ldr	r2, [r3, #4]
  40727a:	2a1f      	cmp	r2, #31
  40727c:	dc1c      	bgt.n	4072b8 <__register_exitproc+0x60>
  40727e:	f102 0e01 	add.w	lr, r2, #1
  407282:	b176      	cbz	r6, 4072a2 <__register_exitproc+0x4a>
  407284:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  407288:	2401      	movs	r4, #1
  40728a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40728e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  407292:	4094      	lsls	r4, r2
  407294:	4320      	orrs	r0, r4
  407296:	2e02      	cmp	r6, #2
  407298:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40729c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4072a0:	d023      	beq.n	4072ea <__register_exitproc+0x92>
  4072a2:	3202      	adds	r2, #2
  4072a4:	f8c3 e004 	str.w	lr, [r3, #4]
  4072a8:	6828      	ldr	r0, [r5, #0]
  4072aa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4072ae:	f7ff f823 	bl	4062f8 <__retarget_lock_release_recursive>
  4072b2:	2000      	movs	r0, #0
  4072b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4072b8:	4b17      	ldr	r3, [pc, #92]	; (407318 <__register_exitproc+0xc0>)
  4072ba:	b30b      	cbz	r3, 407300 <__register_exitproc+0xa8>
  4072bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4072c0:	f3af 8000 	nop.w
  4072c4:	4603      	mov	r3, r0
  4072c6:	b1d8      	cbz	r0, 407300 <__register_exitproc+0xa8>
  4072c8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4072cc:	6002      	str	r2, [r0, #0]
  4072ce:	2100      	movs	r1, #0
  4072d0:	6041      	str	r1, [r0, #4]
  4072d2:	460a      	mov	r2, r1
  4072d4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4072d8:	f04f 0e01 	mov.w	lr, #1
  4072dc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4072e0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4072e4:	2e00      	cmp	r6, #0
  4072e6:	d0dc      	beq.n	4072a2 <__register_exitproc+0x4a>
  4072e8:	e7cc      	b.n	407284 <__register_exitproc+0x2c>
  4072ea:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4072ee:	430c      	orrs	r4, r1
  4072f0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4072f4:	e7d5      	b.n	4072a2 <__register_exitproc+0x4a>
  4072f6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4072fa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4072fe:	e7bb      	b.n	407278 <__register_exitproc+0x20>
  407300:	6828      	ldr	r0, [r5, #0]
  407302:	f7fe fff9 	bl	4062f8 <__retarget_lock_release_recursive>
  407306:	f04f 30ff 	mov.w	r0, #4294967295
  40730a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40730e:	bf00      	nop
  407310:	20000438 	.word	0x20000438
  407314:	00408d74 	.word	0x00408d74
  407318:	00000000 	.word	0x00000000

0040731c <_calloc_r>:
  40731c:	b510      	push	{r4, lr}
  40731e:	fb02 f101 	mul.w	r1, r2, r1
  407322:	f7fe ffeb 	bl	4062fc <_malloc_r>
  407326:	4604      	mov	r4, r0
  407328:	b1d8      	cbz	r0, 407362 <_calloc_r+0x46>
  40732a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40732e:	f022 0203 	bic.w	r2, r2, #3
  407332:	3a04      	subs	r2, #4
  407334:	2a24      	cmp	r2, #36	; 0x24
  407336:	d818      	bhi.n	40736a <_calloc_r+0x4e>
  407338:	2a13      	cmp	r2, #19
  40733a:	d914      	bls.n	407366 <_calloc_r+0x4a>
  40733c:	2300      	movs	r3, #0
  40733e:	2a1b      	cmp	r2, #27
  407340:	6003      	str	r3, [r0, #0]
  407342:	6043      	str	r3, [r0, #4]
  407344:	d916      	bls.n	407374 <_calloc_r+0x58>
  407346:	2a24      	cmp	r2, #36	; 0x24
  407348:	6083      	str	r3, [r0, #8]
  40734a:	60c3      	str	r3, [r0, #12]
  40734c:	bf11      	iteee	ne
  40734e:	f100 0210 	addne.w	r2, r0, #16
  407352:	6103      	streq	r3, [r0, #16]
  407354:	6143      	streq	r3, [r0, #20]
  407356:	f100 0218 	addeq.w	r2, r0, #24
  40735a:	2300      	movs	r3, #0
  40735c:	6013      	str	r3, [r2, #0]
  40735e:	6053      	str	r3, [r2, #4]
  407360:	6093      	str	r3, [r2, #8]
  407362:	4620      	mov	r0, r4
  407364:	bd10      	pop	{r4, pc}
  407366:	4602      	mov	r2, r0
  407368:	e7f7      	b.n	40735a <_calloc_r+0x3e>
  40736a:	2100      	movs	r1, #0
  40736c:	f7fc fd28 	bl	403dc0 <memset>
  407370:	4620      	mov	r0, r4
  407372:	bd10      	pop	{r4, pc}
  407374:	f100 0208 	add.w	r2, r0, #8
  407378:	e7ef      	b.n	40735a <_calloc_r+0x3e>
  40737a:	bf00      	nop

0040737c <_malloc_trim_r>:
  40737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40737e:	4f24      	ldr	r7, [pc, #144]	; (407410 <_malloc_trim_r+0x94>)
  407380:	460c      	mov	r4, r1
  407382:	4606      	mov	r6, r0
  407384:	f7ff fb56 	bl	406a34 <__malloc_lock>
  407388:	68bb      	ldr	r3, [r7, #8]
  40738a:	685d      	ldr	r5, [r3, #4]
  40738c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407390:	310f      	adds	r1, #15
  407392:	f025 0503 	bic.w	r5, r5, #3
  407396:	4429      	add	r1, r5
  407398:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40739c:	f021 010f 	bic.w	r1, r1, #15
  4073a0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4073a4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4073a8:	db07      	blt.n	4073ba <_malloc_trim_r+0x3e>
  4073aa:	2100      	movs	r1, #0
  4073ac:	4630      	mov	r0, r6
  4073ae:	f7ff fe47 	bl	407040 <_sbrk_r>
  4073b2:	68bb      	ldr	r3, [r7, #8]
  4073b4:	442b      	add	r3, r5
  4073b6:	4298      	cmp	r0, r3
  4073b8:	d004      	beq.n	4073c4 <_malloc_trim_r+0x48>
  4073ba:	4630      	mov	r0, r6
  4073bc:	f7ff fb40 	bl	406a40 <__malloc_unlock>
  4073c0:	2000      	movs	r0, #0
  4073c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073c4:	4261      	negs	r1, r4
  4073c6:	4630      	mov	r0, r6
  4073c8:	f7ff fe3a 	bl	407040 <_sbrk_r>
  4073cc:	3001      	adds	r0, #1
  4073ce:	d00d      	beq.n	4073ec <_malloc_trim_r+0x70>
  4073d0:	4b10      	ldr	r3, [pc, #64]	; (407414 <_malloc_trim_r+0x98>)
  4073d2:	68ba      	ldr	r2, [r7, #8]
  4073d4:	6819      	ldr	r1, [r3, #0]
  4073d6:	1b2d      	subs	r5, r5, r4
  4073d8:	f045 0501 	orr.w	r5, r5, #1
  4073dc:	4630      	mov	r0, r6
  4073de:	1b09      	subs	r1, r1, r4
  4073e0:	6055      	str	r5, [r2, #4]
  4073e2:	6019      	str	r1, [r3, #0]
  4073e4:	f7ff fb2c 	bl	406a40 <__malloc_unlock>
  4073e8:	2001      	movs	r0, #1
  4073ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073ec:	2100      	movs	r1, #0
  4073ee:	4630      	mov	r0, r6
  4073f0:	f7ff fe26 	bl	407040 <_sbrk_r>
  4073f4:	68ba      	ldr	r2, [r7, #8]
  4073f6:	1a83      	subs	r3, r0, r2
  4073f8:	2b0f      	cmp	r3, #15
  4073fa:	ddde      	ble.n	4073ba <_malloc_trim_r+0x3e>
  4073fc:	4c06      	ldr	r4, [pc, #24]	; (407418 <_malloc_trim_r+0x9c>)
  4073fe:	4905      	ldr	r1, [pc, #20]	; (407414 <_malloc_trim_r+0x98>)
  407400:	6824      	ldr	r4, [r4, #0]
  407402:	f043 0301 	orr.w	r3, r3, #1
  407406:	1b00      	subs	r0, r0, r4
  407408:	6053      	str	r3, [r2, #4]
  40740a:	6008      	str	r0, [r1, #0]
  40740c:	e7d5      	b.n	4073ba <_malloc_trim_r+0x3e>
  40740e:	bf00      	nop
  407410:	2000043c 	.word	0x2000043c
  407414:	20000a8c 	.word	0x20000a8c
  407418:	20000844 	.word	0x20000844

0040741c <_free_r>:
  40741c:	2900      	cmp	r1, #0
  40741e:	d044      	beq.n	4074aa <_free_r+0x8e>
  407420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407424:	460d      	mov	r5, r1
  407426:	4680      	mov	r8, r0
  407428:	f7ff fb04 	bl	406a34 <__malloc_lock>
  40742c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407430:	4969      	ldr	r1, [pc, #420]	; (4075d8 <_free_r+0x1bc>)
  407432:	f027 0301 	bic.w	r3, r7, #1
  407436:	f1a5 0408 	sub.w	r4, r5, #8
  40743a:	18e2      	adds	r2, r4, r3
  40743c:	688e      	ldr	r6, [r1, #8]
  40743e:	6850      	ldr	r0, [r2, #4]
  407440:	42b2      	cmp	r2, r6
  407442:	f020 0003 	bic.w	r0, r0, #3
  407446:	d05e      	beq.n	407506 <_free_r+0xea>
  407448:	07fe      	lsls	r6, r7, #31
  40744a:	6050      	str	r0, [r2, #4]
  40744c:	d40b      	bmi.n	407466 <_free_r+0x4a>
  40744e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407452:	1be4      	subs	r4, r4, r7
  407454:	f101 0e08 	add.w	lr, r1, #8
  407458:	68a5      	ldr	r5, [r4, #8]
  40745a:	4575      	cmp	r5, lr
  40745c:	443b      	add	r3, r7
  40745e:	d06d      	beq.n	40753c <_free_r+0x120>
  407460:	68e7      	ldr	r7, [r4, #12]
  407462:	60ef      	str	r7, [r5, #12]
  407464:	60bd      	str	r5, [r7, #8]
  407466:	1815      	adds	r5, r2, r0
  407468:	686d      	ldr	r5, [r5, #4]
  40746a:	07ed      	lsls	r5, r5, #31
  40746c:	d53e      	bpl.n	4074ec <_free_r+0xd0>
  40746e:	f043 0201 	orr.w	r2, r3, #1
  407472:	6062      	str	r2, [r4, #4]
  407474:	50e3      	str	r3, [r4, r3]
  407476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40747a:	d217      	bcs.n	4074ac <_free_r+0x90>
  40747c:	08db      	lsrs	r3, r3, #3
  40747e:	1c58      	adds	r0, r3, #1
  407480:	109a      	asrs	r2, r3, #2
  407482:	684d      	ldr	r5, [r1, #4]
  407484:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407488:	60a7      	str	r7, [r4, #8]
  40748a:	2301      	movs	r3, #1
  40748c:	4093      	lsls	r3, r2
  40748e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407492:	432b      	orrs	r3, r5
  407494:	3a08      	subs	r2, #8
  407496:	60e2      	str	r2, [r4, #12]
  407498:	604b      	str	r3, [r1, #4]
  40749a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40749e:	60fc      	str	r4, [r7, #12]
  4074a0:	4640      	mov	r0, r8
  4074a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4074a6:	f7ff bacb 	b.w	406a40 <__malloc_unlock>
  4074aa:	4770      	bx	lr
  4074ac:	0a5a      	lsrs	r2, r3, #9
  4074ae:	2a04      	cmp	r2, #4
  4074b0:	d852      	bhi.n	407558 <_free_r+0x13c>
  4074b2:	099a      	lsrs	r2, r3, #6
  4074b4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4074b8:	00ff      	lsls	r7, r7, #3
  4074ba:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4074be:	19c8      	adds	r0, r1, r7
  4074c0:	59ca      	ldr	r2, [r1, r7]
  4074c2:	3808      	subs	r0, #8
  4074c4:	4290      	cmp	r0, r2
  4074c6:	d04f      	beq.n	407568 <_free_r+0x14c>
  4074c8:	6851      	ldr	r1, [r2, #4]
  4074ca:	f021 0103 	bic.w	r1, r1, #3
  4074ce:	428b      	cmp	r3, r1
  4074d0:	d232      	bcs.n	407538 <_free_r+0x11c>
  4074d2:	6892      	ldr	r2, [r2, #8]
  4074d4:	4290      	cmp	r0, r2
  4074d6:	d1f7      	bne.n	4074c8 <_free_r+0xac>
  4074d8:	68c3      	ldr	r3, [r0, #12]
  4074da:	60a0      	str	r0, [r4, #8]
  4074dc:	60e3      	str	r3, [r4, #12]
  4074de:	609c      	str	r4, [r3, #8]
  4074e0:	60c4      	str	r4, [r0, #12]
  4074e2:	4640      	mov	r0, r8
  4074e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4074e8:	f7ff baaa 	b.w	406a40 <__malloc_unlock>
  4074ec:	6895      	ldr	r5, [r2, #8]
  4074ee:	4f3b      	ldr	r7, [pc, #236]	; (4075dc <_free_r+0x1c0>)
  4074f0:	42bd      	cmp	r5, r7
  4074f2:	4403      	add	r3, r0
  4074f4:	d040      	beq.n	407578 <_free_r+0x15c>
  4074f6:	68d0      	ldr	r0, [r2, #12]
  4074f8:	60e8      	str	r0, [r5, #12]
  4074fa:	f043 0201 	orr.w	r2, r3, #1
  4074fe:	6085      	str	r5, [r0, #8]
  407500:	6062      	str	r2, [r4, #4]
  407502:	50e3      	str	r3, [r4, r3]
  407504:	e7b7      	b.n	407476 <_free_r+0x5a>
  407506:	07ff      	lsls	r7, r7, #31
  407508:	4403      	add	r3, r0
  40750a:	d407      	bmi.n	40751c <_free_r+0x100>
  40750c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407510:	1aa4      	subs	r4, r4, r2
  407512:	4413      	add	r3, r2
  407514:	68a0      	ldr	r0, [r4, #8]
  407516:	68e2      	ldr	r2, [r4, #12]
  407518:	60c2      	str	r2, [r0, #12]
  40751a:	6090      	str	r0, [r2, #8]
  40751c:	4a30      	ldr	r2, [pc, #192]	; (4075e0 <_free_r+0x1c4>)
  40751e:	6812      	ldr	r2, [r2, #0]
  407520:	f043 0001 	orr.w	r0, r3, #1
  407524:	4293      	cmp	r3, r2
  407526:	6060      	str	r0, [r4, #4]
  407528:	608c      	str	r4, [r1, #8]
  40752a:	d3b9      	bcc.n	4074a0 <_free_r+0x84>
  40752c:	4b2d      	ldr	r3, [pc, #180]	; (4075e4 <_free_r+0x1c8>)
  40752e:	4640      	mov	r0, r8
  407530:	6819      	ldr	r1, [r3, #0]
  407532:	f7ff ff23 	bl	40737c <_malloc_trim_r>
  407536:	e7b3      	b.n	4074a0 <_free_r+0x84>
  407538:	4610      	mov	r0, r2
  40753a:	e7cd      	b.n	4074d8 <_free_r+0xbc>
  40753c:	1811      	adds	r1, r2, r0
  40753e:	6849      	ldr	r1, [r1, #4]
  407540:	07c9      	lsls	r1, r1, #31
  407542:	d444      	bmi.n	4075ce <_free_r+0x1b2>
  407544:	6891      	ldr	r1, [r2, #8]
  407546:	68d2      	ldr	r2, [r2, #12]
  407548:	60ca      	str	r2, [r1, #12]
  40754a:	4403      	add	r3, r0
  40754c:	f043 0001 	orr.w	r0, r3, #1
  407550:	6091      	str	r1, [r2, #8]
  407552:	6060      	str	r0, [r4, #4]
  407554:	50e3      	str	r3, [r4, r3]
  407556:	e7a3      	b.n	4074a0 <_free_r+0x84>
  407558:	2a14      	cmp	r2, #20
  40755a:	d816      	bhi.n	40758a <_free_r+0x16e>
  40755c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407560:	00ff      	lsls	r7, r7, #3
  407562:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407566:	e7aa      	b.n	4074be <_free_r+0xa2>
  407568:	10aa      	asrs	r2, r5, #2
  40756a:	2301      	movs	r3, #1
  40756c:	684d      	ldr	r5, [r1, #4]
  40756e:	4093      	lsls	r3, r2
  407570:	432b      	orrs	r3, r5
  407572:	604b      	str	r3, [r1, #4]
  407574:	4603      	mov	r3, r0
  407576:	e7b0      	b.n	4074da <_free_r+0xbe>
  407578:	f043 0201 	orr.w	r2, r3, #1
  40757c:	614c      	str	r4, [r1, #20]
  40757e:	610c      	str	r4, [r1, #16]
  407580:	60e5      	str	r5, [r4, #12]
  407582:	60a5      	str	r5, [r4, #8]
  407584:	6062      	str	r2, [r4, #4]
  407586:	50e3      	str	r3, [r4, r3]
  407588:	e78a      	b.n	4074a0 <_free_r+0x84>
  40758a:	2a54      	cmp	r2, #84	; 0x54
  40758c:	d806      	bhi.n	40759c <_free_r+0x180>
  40758e:	0b1a      	lsrs	r2, r3, #12
  407590:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407594:	00ff      	lsls	r7, r7, #3
  407596:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40759a:	e790      	b.n	4074be <_free_r+0xa2>
  40759c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4075a0:	d806      	bhi.n	4075b0 <_free_r+0x194>
  4075a2:	0bda      	lsrs	r2, r3, #15
  4075a4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4075a8:	00ff      	lsls	r7, r7, #3
  4075aa:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4075ae:	e786      	b.n	4074be <_free_r+0xa2>
  4075b0:	f240 5054 	movw	r0, #1364	; 0x554
  4075b4:	4282      	cmp	r2, r0
  4075b6:	d806      	bhi.n	4075c6 <_free_r+0x1aa>
  4075b8:	0c9a      	lsrs	r2, r3, #18
  4075ba:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4075be:	00ff      	lsls	r7, r7, #3
  4075c0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4075c4:	e77b      	b.n	4074be <_free_r+0xa2>
  4075c6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4075ca:	257e      	movs	r5, #126	; 0x7e
  4075cc:	e777      	b.n	4074be <_free_r+0xa2>
  4075ce:	f043 0101 	orr.w	r1, r3, #1
  4075d2:	6061      	str	r1, [r4, #4]
  4075d4:	6013      	str	r3, [r2, #0]
  4075d6:	e763      	b.n	4074a0 <_free_r+0x84>
  4075d8:	2000043c 	.word	0x2000043c
  4075dc:	20000444 	.word	0x20000444
  4075e0:	20000848 	.word	0x20000848
  4075e4:	20000abc 	.word	0x20000abc

004075e8 <__ascii_mbtowc>:
  4075e8:	b082      	sub	sp, #8
  4075ea:	b149      	cbz	r1, 407600 <__ascii_mbtowc+0x18>
  4075ec:	b15a      	cbz	r2, 407606 <__ascii_mbtowc+0x1e>
  4075ee:	b16b      	cbz	r3, 40760c <__ascii_mbtowc+0x24>
  4075f0:	7813      	ldrb	r3, [r2, #0]
  4075f2:	600b      	str	r3, [r1, #0]
  4075f4:	7812      	ldrb	r2, [r2, #0]
  4075f6:	1c10      	adds	r0, r2, #0
  4075f8:	bf18      	it	ne
  4075fa:	2001      	movne	r0, #1
  4075fc:	b002      	add	sp, #8
  4075fe:	4770      	bx	lr
  407600:	a901      	add	r1, sp, #4
  407602:	2a00      	cmp	r2, #0
  407604:	d1f3      	bne.n	4075ee <__ascii_mbtowc+0x6>
  407606:	4610      	mov	r0, r2
  407608:	b002      	add	sp, #8
  40760a:	4770      	bx	lr
  40760c:	f06f 0001 	mvn.w	r0, #1
  407610:	e7f4      	b.n	4075fc <__ascii_mbtowc+0x14>
  407612:	bf00      	nop

00407614 <memmove>:
  407614:	4288      	cmp	r0, r1
  407616:	b5f0      	push	{r4, r5, r6, r7, lr}
  407618:	d90d      	bls.n	407636 <memmove+0x22>
  40761a:	188b      	adds	r3, r1, r2
  40761c:	4298      	cmp	r0, r3
  40761e:	d20a      	bcs.n	407636 <memmove+0x22>
  407620:	1884      	adds	r4, r0, r2
  407622:	2a00      	cmp	r2, #0
  407624:	d051      	beq.n	4076ca <memmove+0xb6>
  407626:	4622      	mov	r2, r4
  407628:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40762c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407630:	4299      	cmp	r1, r3
  407632:	d1f9      	bne.n	407628 <memmove+0x14>
  407634:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407636:	2a0f      	cmp	r2, #15
  407638:	d948      	bls.n	4076cc <memmove+0xb8>
  40763a:	ea41 0300 	orr.w	r3, r1, r0
  40763e:	079b      	lsls	r3, r3, #30
  407640:	d146      	bne.n	4076d0 <memmove+0xbc>
  407642:	f100 0410 	add.w	r4, r0, #16
  407646:	f101 0310 	add.w	r3, r1, #16
  40764a:	4615      	mov	r5, r2
  40764c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407650:	f844 6c10 	str.w	r6, [r4, #-16]
  407654:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407658:	f844 6c0c 	str.w	r6, [r4, #-12]
  40765c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407660:	f844 6c08 	str.w	r6, [r4, #-8]
  407664:	3d10      	subs	r5, #16
  407666:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40766a:	f844 6c04 	str.w	r6, [r4, #-4]
  40766e:	2d0f      	cmp	r5, #15
  407670:	f103 0310 	add.w	r3, r3, #16
  407674:	f104 0410 	add.w	r4, r4, #16
  407678:	d8e8      	bhi.n	40764c <memmove+0x38>
  40767a:	f1a2 0310 	sub.w	r3, r2, #16
  40767e:	f023 030f 	bic.w	r3, r3, #15
  407682:	f002 0e0f 	and.w	lr, r2, #15
  407686:	3310      	adds	r3, #16
  407688:	f1be 0f03 	cmp.w	lr, #3
  40768c:	4419      	add	r1, r3
  40768e:	4403      	add	r3, r0
  407690:	d921      	bls.n	4076d6 <memmove+0xc2>
  407692:	1f1e      	subs	r6, r3, #4
  407694:	460d      	mov	r5, r1
  407696:	4674      	mov	r4, lr
  407698:	3c04      	subs	r4, #4
  40769a:	f855 7b04 	ldr.w	r7, [r5], #4
  40769e:	f846 7f04 	str.w	r7, [r6, #4]!
  4076a2:	2c03      	cmp	r4, #3
  4076a4:	d8f8      	bhi.n	407698 <memmove+0x84>
  4076a6:	f1ae 0404 	sub.w	r4, lr, #4
  4076aa:	f024 0403 	bic.w	r4, r4, #3
  4076ae:	3404      	adds	r4, #4
  4076b0:	4421      	add	r1, r4
  4076b2:	4423      	add	r3, r4
  4076b4:	f002 0203 	and.w	r2, r2, #3
  4076b8:	b162      	cbz	r2, 4076d4 <memmove+0xc0>
  4076ba:	3b01      	subs	r3, #1
  4076bc:	440a      	add	r2, r1
  4076be:	f811 4b01 	ldrb.w	r4, [r1], #1
  4076c2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4076c6:	428a      	cmp	r2, r1
  4076c8:	d1f9      	bne.n	4076be <memmove+0xaa>
  4076ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4076cc:	4603      	mov	r3, r0
  4076ce:	e7f3      	b.n	4076b8 <memmove+0xa4>
  4076d0:	4603      	mov	r3, r0
  4076d2:	e7f2      	b.n	4076ba <memmove+0xa6>
  4076d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4076d6:	4672      	mov	r2, lr
  4076d8:	e7ee      	b.n	4076b8 <memmove+0xa4>
  4076da:	bf00      	nop

004076dc <_realloc_r>:
  4076dc:	2900      	cmp	r1, #0
  4076de:	f000 8095 	beq.w	40780c <_realloc_r+0x130>
  4076e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4076e6:	460d      	mov	r5, r1
  4076e8:	4616      	mov	r6, r2
  4076ea:	b083      	sub	sp, #12
  4076ec:	4680      	mov	r8, r0
  4076ee:	f106 070b 	add.w	r7, r6, #11
  4076f2:	f7ff f99f 	bl	406a34 <__malloc_lock>
  4076f6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4076fa:	2f16      	cmp	r7, #22
  4076fc:	f02e 0403 	bic.w	r4, lr, #3
  407700:	f1a5 0908 	sub.w	r9, r5, #8
  407704:	d83c      	bhi.n	407780 <_realloc_r+0xa4>
  407706:	2210      	movs	r2, #16
  407708:	4617      	mov	r7, r2
  40770a:	42be      	cmp	r6, r7
  40770c:	d83d      	bhi.n	40778a <_realloc_r+0xae>
  40770e:	4294      	cmp	r4, r2
  407710:	da43      	bge.n	40779a <_realloc_r+0xbe>
  407712:	4bc4      	ldr	r3, [pc, #784]	; (407a24 <_realloc_r+0x348>)
  407714:	6899      	ldr	r1, [r3, #8]
  407716:	eb09 0004 	add.w	r0, r9, r4
  40771a:	4288      	cmp	r0, r1
  40771c:	f000 80b4 	beq.w	407888 <_realloc_r+0x1ac>
  407720:	6843      	ldr	r3, [r0, #4]
  407722:	f023 0101 	bic.w	r1, r3, #1
  407726:	4401      	add	r1, r0
  407728:	6849      	ldr	r1, [r1, #4]
  40772a:	07c9      	lsls	r1, r1, #31
  40772c:	d54c      	bpl.n	4077c8 <_realloc_r+0xec>
  40772e:	f01e 0f01 	tst.w	lr, #1
  407732:	f000 809b 	beq.w	40786c <_realloc_r+0x190>
  407736:	4631      	mov	r1, r6
  407738:	4640      	mov	r0, r8
  40773a:	f7fe fddf 	bl	4062fc <_malloc_r>
  40773e:	4606      	mov	r6, r0
  407740:	2800      	cmp	r0, #0
  407742:	d03a      	beq.n	4077ba <_realloc_r+0xde>
  407744:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407748:	f023 0301 	bic.w	r3, r3, #1
  40774c:	444b      	add	r3, r9
  40774e:	f1a0 0208 	sub.w	r2, r0, #8
  407752:	429a      	cmp	r2, r3
  407754:	f000 8121 	beq.w	40799a <_realloc_r+0x2be>
  407758:	1f22      	subs	r2, r4, #4
  40775a:	2a24      	cmp	r2, #36	; 0x24
  40775c:	f200 8107 	bhi.w	40796e <_realloc_r+0x292>
  407760:	2a13      	cmp	r2, #19
  407762:	f200 80db 	bhi.w	40791c <_realloc_r+0x240>
  407766:	4603      	mov	r3, r0
  407768:	462a      	mov	r2, r5
  40776a:	6811      	ldr	r1, [r2, #0]
  40776c:	6019      	str	r1, [r3, #0]
  40776e:	6851      	ldr	r1, [r2, #4]
  407770:	6059      	str	r1, [r3, #4]
  407772:	6892      	ldr	r2, [r2, #8]
  407774:	609a      	str	r2, [r3, #8]
  407776:	4629      	mov	r1, r5
  407778:	4640      	mov	r0, r8
  40777a:	f7ff fe4f 	bl	40741c <_free_r>
  40777e:	e01c      	b.n	4077ba <_realloc_r+0xde>
  407780:	f027 0707 	bic.w	r7, r7, #7
  407784:	2f00      	cmp	r7, #0
  407786:	463a      	mov	r2, r7
  407788:	dabf      	bge.n	40770a <_realloc_r+0x2e>
  40778a:	2600      	movs	r6, #0
  40778c:	230c      	movs	r3, #12
  40778e:	4630      	mov	r0, r6
  407790:	f8c8 3000 	str.w	r3, [r8]
  407794:	b003      	add	sp, #12
  407796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40779a:	462e      	mov	r6, r5
  40779c:	1be3      	subs	r3, r4, r7
  40779e:	2b0f      	cmp	r3, #15
  4077a0:	d81e      	bhi.n	4077e0 <_realloc_r+0x104>
  4077a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4077a6:	f003 0301 	and.w	r3, r3, #1
  4077aa:	4323      	orrs	r3, r4
  4077ac:	444c      	add	r4, r9
  4077ae:	f8c9 3004 	str.w	r3, [r9, #4]
  4077b2:	6863      	ldr	r3, [r4, #4]
  4077b4:	f043 0301 	orr.w	r3, r3, #1
  4077b8:	6063      	str	r3, [r4, #4]
  4077ba:	4640      	mov	r0, r8
  4077bc:	f7ff f940 	bl	406a40 <__malloc_unlock>
  4077c0:	4630      	mov	r0, r6
  4077c2:	b003      	add	sp, #12
  4077c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077c8:	f023 0303 	bic.w	r3, r3, #3
  4077cc:	18e1      	adds	r1, r4, r3
  4077ce:	4291      	cmp	r1, r2
  4077d0:	db1f      	blt.n	407812 <_realloc_r+0x136>
  4077d2:	68c3      	ldr	r3, [r0, #12]
  4077d4:	6882      	ldr	r2, [r0, #8]
  4077d6:	462e      	mov	r6, r5
  4077d8:	60d3      	str	r3, [r2, #12]
  4077da:	460c      	mov	r4, r1
  4077dc:	609a      	str	r2, [r3, #8]
  4077de:	e7dd      	b.n	40779c <_realloc_r+0xc0>
  4077e0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4077e4:	eb09 0107 	add.w	r1, r9, r7
  4077e8:	f002 0201 	and.w	r2, r2, #1
  4077ec:	444c      	add	r4, r9
  4077ee:	f043 0301 	orr.w	r3, r3, #1
  4077f2:	4317      	orrs	r7, r2
  4077f4:	f8c9 7004 	str.w	r7, [r9, #4]
  4077f8:	604b      	str	r3, [r1, #4]
  4077fa:	6863      	ldr	r3, [r4, #4]
  4077fc:	f043 0301 	orr.w	r3, r3, #1
  407800:	3108      	adds	r1, #8
  407802:	6063      	str	r3, [r4, #4]
  407804:	4640      	mov	r0, r8
  407806:	f7ff fe09 	bl	40741c <_free_r>
  40780a:	e7d6      	b.n	4077ba <_realloc_r+0xde>
  40780c:	4611      	mov	r1, r2
  40780e:	f7fe bd75 	b.w	4062fc <_malloc_r>
  407812:	f01e 0f01 	tst.w	lr, #1
  407816:	d18e      	bne.n	407736 <_realloc_r+0x5a>
  407818:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40781c:	eba9 0a01 	sub.w	sl, r9, r1
  407820:	f8da 1004 	ldr.w	r1, [sl, #4]
  407824:	f021 0103 	bic.w	r1, r1, #3
  407828:	440b      	add	r3, r1
  40782a:	4423      	add	r3, r4
  40782c:	4293      	cmp	r3, r2
  40782e:	db25      	blt.n	40787c <_realloc_r+0x1a0>
  407830:	68c2      	ldr	r2, [r0, #12]
  407832:	6881      	ldr	r1, [r0, #8]
  407834:	4656      	mov	r6, sl
  407836:	60ca      	str	r2, [r1, #12]
  407838:	6091      	str	r1, [r2, #8]
  40783a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40783e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407842:	1f22      	subs	r2, r4, #4
  407844:	2a24      	cmp	r2, #36	; 0x24
  407846:	60c1      	str	r1, [r0, #12]
  407848:	6088      	str	r0, [r1, #8]
  40784a:	f200 8094 	bhi.w	407976 <_realloc_r+0x29a>
  40784e:	2a13      	cmp	r2, #19
  407850:	d96f      	bls.n	407932 <_realloc_r+0x256>
  407852:	6829      	ldr	r1, [r5, #0]
  407854:	f8ca 1008 	str.w	r1, [sl, #8]
  407858:	6869      	ldr	r1, [r5, #4]
  40785a:	f8ca 100c 	str.w	r1, [sl, #12]
  40785e:	2a1b      	cmp	r2, #27
  407860:	f200 80a2 	bhi.w	4079a8 <_realloc_r+0x2cc>
  407864:	3508      	adds	r5, #8
  407866:	f10a 0210 	add.w	r2, sl, #16
  40786a:	e063      	b.n	407934 <_realloc_r+0x258>
  40786c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407870:	eba9 0a03 	sub.w	sl, r9, r3
  407874:	f8da 1004 	ldr.w	r1, [sl, #4]
  407878:	f021 0103 	bic.w	r1, r1, #3
  40787c:	1863      	adds	r3, r4, r1
  40787e:	4293      	cmp	r3, r2
  407880:	f6ff af59 	blt.w	407736 <_realloc_r+0x5a>
  407884:	4656      	mov	r6, sl
  407886:	e7d8      	b.n	40783a <_realloc_r+0x15e>
  407888:	6841      	ldr	r1, [r0, #4]
  40788a:	f021 0b03 	bic.w	fp, r1, #3
  40788e:	44a3      	add	fp, r4
  407890:	f107 0010 	add.w	r0, r7, #16
  407894:	4583      	cmp	fp, r0
  407896:	da56      	bge.n	407946 <_realloc_r+0x26a>
  407898:	f01e 0f01 	tst.w	lr, #1
  40789c:	f47f af4b 	bne.w	407736 <_realloc_r+0x5a>
  4078a0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4078a4:	eba9 0a01 	sub.w	sl, r9, r1
  4078a8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4078ac:	f021 0103 	bic.w	r1, r1, #3
  4078b0:	448b      	add	fp, r1
  4078b2:	4558      	cmp	r0, fp
  4078b4:	dce2      	bgt.n	40787c <_realloc_r+0x1a0>
  4078b6:	4656      	mov	r6, sl
  4078b8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4078bc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4078c0:	1f22      	subs	r2, r4, #4
  4078c2:	2a24      	cmp	r2, #36	; 0x24
  4078c4:	60c1      	str	r1, [r0, #12]
  4078c6:	6088      	str	r0, [r1, #8]
  4078c8:	f200 808f 	bhi.w	4079ea <_realloc_r+0x30e>
  4078cc:	2a13      	cmp	r2, #19
  4078ce:	f240 808a 	bls.w	4079e6 <_realloc_r+0x30a>
  4078d2:	6829      	ldr	r1, [r5, #0]
  4078d4:	f8ca 1008 	str.w	r1, [sl, #8]
  4078d8:	6869      	ldr	r1, [r5, #4]
  4078da:	f8ca 100c 	str.w	r1, [sl, #12]
  4078de:	2a1b      	cmp	r2, #27
  4078e0:	f200 808a 	bhi.w	4079f8 <_realloc_r+0x31c>
  4078e4:	3508      	adds	r5, #8
  4078e6:	f10a 0210 	add.w	r2, sl, #16
  4078ea:	6829      	ldr	r1, [r5, #0]
  4078ec:	6011      	str	r1, [r2, #0]
  4078ee:	6869      	ldr	r1, [r5, #4]
  4078f0:	6051      	str	r1, [r2, #4]
  4078f2:	68a9      	ldr	r1, [r5, #8]
  4078f4:	6091      	str	r1, [r2, #8]
  4078f6:	eb0a 0107 	add.w	r1, sl, r7
  4078fa:	ebab 0207 	sub.w	r2, fp, r7
  4078fe:	f042 0201 	orr.w	r2, r2, #1
  407902:	6099      	str	r1, [r3, #8]
  407904:	604a      	str	r2, [r1, #4]
  407906:	f8da 3004 	ldr.w	r3, [sl, #4]
  40790a:	f003 0301 	and.w	r3, r3, #1
  40790e:	431f      	orrs	r7, r3
  407910:	4640      	mov	r0, r8
  407912:	f8ca 7004 	str.w	r7, [sl, #4]
  407916:	f7ff f893 	bl	406a40 <__malloc_unlock>
  40791a:	e751      	b.n	4077c0 <_realloc_r+0xe4>
  40791c:	682b      	ldr	r3, [r5, #0]
  40791e:	6003      	str	r3, [r0, #0]
  407920:	686b      	ldr	r3, [r5, #4]
  407922:	6043      	str	r3, [r0, #4]
  407924:	2a1b      	cmp	r2, #27
  407926:	d82d      	bhi.n	407984 <_realloc_r+0x2a8>
  407928:	f100 0308 	add.w	r3, r0, #8
  40792c:	f105 0208 	add.w	r2, r5, #8
  407930:	e71b      	b.n	40776a <_realloc_r+0x8e>
  407932:	4632      	mov	r2, r6
  407934:	6829      	ldr	r1, [r5, #0]
  407936:	6011      	str	r1, [r2, #0]
  407938:	6869      	ldr	r1, [r5, #4]
  40793a:	6051      	str	r1, [r2, #4]
  40793c:	68a9      	ldr	r1, [r5, #8]
  40793e:	6091      	str	r1, [r2, #8]
  407940:	461c      	mov	r4, r3
  407942:	46d1      	mov	r9, sl
  407944:	e72a      	b.n	40779c <_realloc_r+0xc0>
  407946:	eb09 0107 	add.w	r1, r9, r7
  40794a:	ebab 0b07 	sub.w	fp, fp, r7
  40794e:	f04b 0201 	orr.w	r2, fp, #1
  407952:	6099      	str	r1, [r3, #8]
  407954:	604a      	str	r2, [r1, #4]
  407956:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40795a:	f003 0301 	and.w	r3, r3, #1
  40795e:	431f      	orrs	r7, r3
  407960:	4640      	mov	r0, r8
  407962:	f845 7c04 	str.w	r7, [r5, #-4]
  407966:	f7ff f86b 	bl	406a40 <__malloc_unlock>
  40796a:	462e      	mov	r6, r5
  40796c:	e728      	b.n	4077c0 <_realloc_r+0xe4>
  40796e:	4629      	mov	r1, r5
  407970:	f7ff fe50 	bl	407614 <memmove>
  407974:	e6ff      	b.n	407776 <_realloc_r+0x9a>
  407976:	4629      	mov	r1, r5
  407978:	4630      	mov	r0, r6
  40797a:	461c      	mov	r4, r3
  40797c:	46d1      	mov	r9, sl
  40797e:	f7ff fe49 	bl	407614 <memmove>
  407982:	e70b      	b.n	40779c <_realloc_r+0xc0>
  407984:	68ab      	ldr	r3, [r5, #8]
  407986:	6083      	str	r3, [r0, #8]
  407988:	68eb      	ldr	r3, [r5, #12]
  40798a:	60c3      	str	r3, [r0, #12]
  40798c:	2a24      	cmp	r2, #36	; 0x24
  40798e:	d017      	beq.n	4079c0 <_realloc_r+0x2e4>
  407990:	f100 0310 	add.w	r3, r0, #16
  407994:	f105 0210 	add.w	r2, r5, #16
  407998:	e6e7      	b.n	40776a <_realloc_r+0x8e>
  40799a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40799e:	f023 0303 	bic.w	r3, r3, #3
  4079a2:	441c      	add	r4, r3
  4079a4:	462e      	mov	r6, r5
  4079a6:	e6f9      	b.n	40779c <_realloc_r+0xc0>
  4079a8:	68a9      	ldr	r1, [r5, #8]
  4079aa:	f8ca 1010 	str.w	r1, [sl, #16]
  4079ae:	68e9      	ldr	r1, [r5, #12]
  4079b0:	f8ca 1014 	str.w	r1, [sl, #20]
  4079b4:	2a24      	cmp	r2, #36	; 0x24
  4079b6:	d00c      	beq.n	4079d2 <_realloc_r+0x2f6>
  4079b8:	3510      	adds	r5, #16
  4079ba:	f10a 0218 	add.w	r2, sl, #24
  4079be:	e7b9      	b.n	407934 <_realloc_r+0x258>
  4079c0:	692b      	ldr	r3, [r5, #16]
  4079c2:	6103      	str	r3, [r0, #16]
  4079c4:	696b      	ldr	r3, [r5, #20]
  4079c6:	6143      	str	r3, [r0, #20]
  4079c8:	f105 0218 	add.w	r2, r5, #24
  4079cc:	f100 0318 	add.w	r3, r0, #24
  4079d0:	e6cb      	b.n	40776a <_realloc_r+0x8e>
  4079d2:	692a      	ldr	r2, [r5, #16]
  4079d4:	f8ca 2018 	str.w	r2, [sl, #24]
  4079d8:	696a      	ldr	r2, [r5, #20]
  4079da:	f8ca 201c 	str.w	r2, [sl, #28]
  4079de:	3518      	adds	r5, #24
  4079e0:	f10a 0220 	add.w	r2, sl, #32
  4079e4:	e7a6      	b.n	407934 <_realloc_r+0x258>
  4079e6:	4632      	mov	r2, r6
  4079e8:	e77f      	b.n	4078ea <_realloc_r+0x20e>
  4079ea:	4629      	mov	r1, r5
  4079ec:	4630      	mov	r0, r6
  4079ee:	9301      	str	r3, [sp, #4]
  4079f0:	f7ff fe10 	bl	407614 <memmove>
  4079f4:	9b01      	ldr	r3, [sp, #4]
  4079f6:	e77e      	b.n	4078f6 <_realloc_r+0x21a>
  4079f8:	68a9      	ldr	r1, [r5, #8]
  4079fa:	f8ca 1010 	str.w	r1, [sl, #16]
  4079fe:	68e9      	ldr	r1, [r5, #12]
  407a00:	f8ca 1014 	str.w	r1, [sl, #20]
  407a04:	2a24      	cmp	r2, #36	; 0x24
  407a06:	d003      	beq.n	407a10 <_realloc_r+0x334>
  407a08:	3510      	adds	r5, #16
  407a0a:	f10a 0218 	add.w	r2, sl, #24
  407a0e:	e76c      	b.n	4078ea <_realloc_r+0x20e>
  407a10:	692a      	ldr	r2, [r5, #16]
  407a12:	f8ca 2018 	str.w	r2, [sl, #24]
  407a16:	696a      	ldr	r2, [r5, #20]
  407a18:	f8ca 201c 	str.w	r2, [sl, #28]
  407a1c:	3518      	adds	r5, #24
  407a1e:	f10a 0220 	add.w	r2, sl, #32
  407a22:	e762      	b.n	4078ea <_realloc_r+0x20e>
  407a24:	2000043c 	.word	0x2000043c

00407a28 <__ascii_wctomb>:
  407a28:	b121      	cbz	r1, 407a34 <__ascii_wctomb+0xc>
  407a2a:	2aff      	cmp	r2, #255	; 0xff
  407a2c:	d804      	bhi.n	407a38 <__ascii_wctomb+0x10>
  407a2e:	700a      	strb	r2, [r1, #0]
  407a30:	2001      	movs	r0, #1
  407a32:	4770      	bx	lr
  407a34:	4608      	mov	r0, r1
  407a36:	4770      	bx	lr
  407a38:	238a      	movs	r3, #138	; 0x8a
  407a3a:	6003      	str	r3, [r0, #0]
  407a3c:	f04f 30ff 	mov.w	r0, #4294967295
  407a40:	4770      	bx	lr
  407a42:	bf00      	nop

00407a44 <__aeabi_drsub>:
  407a44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407a48:	e002      	b.n	407a50 <__adddf3>
  407a4a:	bf00      	nop

00407a4c <__aeabi_dsub>:
  407a4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407a50 <__adddf3>:
  407a50:	b530      	push	{r4, r5, lr}
  407a52:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407a56:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407a5a:	ea94 0f05 	teq	r4, r5
  407a5e:	bf08      	it	eq
  407a60:	ea90 0f02 	teqeq	r0, r2
  407a64:	bf1f      	itttt	ne
  407a66:	ea54 0c00 	orrsne.w	ip, r4, r0
  407a6a:	ea55 0c02 	orrsne.w	ip, r5, r2
  407a6e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407a72:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407a76:	f000 80e2 	beq.w	407c3e <__adddf3+0x1ee>
  407a7a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407a7e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407a82:	bfb8      	it	lt
  407a84:	426d      	neglt	r5, r5
  407a86:	dd0c      	ble.n	407aa2 <__adddf3+0x52>
  407a88:	442c      	add	r4, r5
  407a8a:	ea80 0202 	eor.w	r2, r0, r2
  407a8e:	ea81 0303 	eor.w	r3, r1, r3
  407a92:	ea82 0000 	eor.w	r0, r2, r0
  407a96:	ea83 0101 	eor.w	r1, r3, r1
  407a9a:	ea80 0202 	eor.w	r2, r0, r2
  407a9e:	ea81 0303 	eor.w	r3, r1, r3
  407aa2:	2d36      	cmp	r5, #54	; 0x36
  407aa4:	bf88      	it	hi
  407aa6:	bd30      	pophi	{r4, r5, pc}
  407aa8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407aac:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407ab0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407ab4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407ab8:	d002      	beq.n	407ac0 <__adddf3+0x70>
  407aba:	4240      	negs	r0, r0
  407abc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407ac0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407ac4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407ac8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  407acc:	d002      	beq.n	407ad4 <__adddf3+0x84>
  407ace:	4252      	negs	r2, r2
  407ad0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407ad4:	ea94 0f05 	teq	r4, r5
  407ad8:	f000 80a7 	beq.w	407c2a <__adddf3+0x1da>
  407adc:	f1a4 0401 	sub.w	r4, r4, #1
  407ae0:	f1d5 0e20 	rsbs	lr, r5, #32
  407ae4:	db0d      	blt.n	407b02 <__adddf3+0xb2>
  407ae6:	fa02 fc0e 	lsl.w	ip, r2, lr
  407aea:	fa22 f205 	lsr.w	r2, r2, r5
  407aee:	1880      	adds	r0, r0, r2
  407af0:	f141 0100 	adc.w	r1, r1, #0
  407af4:	fa03 f20e 	lsl.w	r2, r3, lr
  407af8:	1880      	adds	r0, r0, r2
  407afa:	fa43 f305 	asr.w	r3, r3, r5
  407afe:	4159      	adcs	r1, r3
  407b00:	e00e      	b.n	407b20 <__adddf3+0xd0>
  407b02:	f1a5 0520 	sub.w	r5, r5, #32
  407b06:	f10e 0e20 	add.w	lr, lr, #32
  407b0a:	2a01      	cmp	r2, #1
  407b0c:	fa03 fc0e 	lsl.w	ip, r3, lr
  407b10:	bf28      	it	cs
  407b12:	f04c 0c02 	orrcs.w	ip, ip, #2
  407b16:	fa43 f305 	asr.w	r3, r3, r5
  407b1a:	18c0      	adds	r0, r0, r3
  407b1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407b20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407b24:	d507      	bpl.n	407b36 <__adddf3+0xe6>
  407b26:	f04f 0e00 	mov.w	lr, #0
  407b2a:	f1dc 0c00 	rsbs	ip, ip, #0
  407b2e:	eb7e 0000 	sbcs.w	r0, lr, r0
  407b32:	eb6e 0101 	sbc.w	r1, lr, r1
  407b36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407b3a:	d31b      	bcc.n	407b74 <__adddf3+0x124>
  407b3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407b40:	d30c      	bcc.n	407b5c <__adddf3+0x10c>
  407b42:	0849      	lsrs	r1, r1, #1
  407b44:	ea5f 0030 	movs.w	r0, r0, rrx
  407b48:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407b4c:	f104 0401 	add.w	r4, r4, #1
  407b50:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407b54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407b58:	f080 809a 	bcs.w	407c90 <__adddf3+0x240>
  407b5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407b60:	bf08      	it	eq
  407b62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407b66:	f150 0000 	adcs.w	r0, r0, #0
  407b6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407b6e:	ea41 0105 	orr.w	r1, r1, r5
  407b72:	bd30      	pop	{r4, r5, pc}
  407b74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407b78:	4140      	adcs	r0, r0
  407b7a:	eb41 0101 	adc.w	r1, r1, r1
  407b7e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407b82:	f1a4 0401 	sub.w	r4, r4, #1
  407b86:	d1e9      	bne.n	407b5c <__adddf3+0x10c>
  407b88:	f091 0f00 	teq	r1, #0
  407b8c:	bf04      	itt	eq
  407b8e:	4601      	moveq	r1, r0
  407b90:	2000      	moveq	r0, #0
  407b92:	fab1 f381 	clz	r3, r1
  407b96:	bf08      	it	eq
  407b98:	3320      	addeq	r3, #32
  407b9a:	f1a3 030b 	sub.w	r3, r3, #11
  407b9e:	f1b3 0220 	subs.w	r2, r3, #32
  407ba2:	da0c      	bge.n	407bbe <__adddf3+0x16e>
  407ba4:	320c      	adds	r2, #12
  407ba6:	dd08      	ble.n	407bba <__adddf3+0x16a>
  407ba8:	f102 0c14 	add.w	ip, r2, #20
  407bac:	f1c2 020c 	rsb	r2, r2, #12
  407bb0:	fa01 f00c 	lsl.w	r0, r1, ip
  407bb4:	fa21 f102 	lsr.w	r1, r1, r2
  407bb8:	e00c      	b.n	407bd4 <__adddf3+0x184>
  407bba:	f102 0214 	add.w	r2, r2, #20
  407bbe:	bfd8      	it	le
  407bc0:	f1c2 0c20 	rsble	ip, r2, #32
  407bc4:	fa01 f102 	lsl.w	r1, r1, r2
  407bc8:	fa20 fc0c 	lsr.w	ip, r0, ip
  407bcc:	bfdc      	itt	le
  407bce:	ea41 010c 	orrle.w	r1, r1, ip
  407bd2:	4090      	lslle	r0, r2
  407bd4:	1ae4      	subs	r4, r4, r3
  407bd6:	bfa2      	ittt	ge
  407bd8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407bdc:	4329      	orrge	r1, r5
  407bde:	bd30      	popge	{r4, r5, pc}
  407be0:	ea6f 0404 	mvn.w	r4, r4
  407be4:	3c1f      	subs	r4, #31
  407be6:	da1c      	bge.n	407c22 <__adddf3+0x1d2>
  407be8:	340c      	adds	r4, #12
  407bea:	dc0e      	bgt.n	407c0a <__adddf3+0x1ba>
  407bec:	f104 0414 	add.w	r4, r4, #20
  407bf0:	f1c4 0220 	rsb	r2, r4, #32
  407bf4:	fa20 f004 	lsr.w	r0, r0, r4
  407bf8:	fa01 f302 	lsl.w	r3, r1, r2
  407bfc:	ea40 0003 	orr.w	r0, r0, r3
  407c00:	fa21 f304 	lsr.w	r3, r1, r4
  407c04:	ea45 0103 	orr.w	r1, r5, r3
  407c08:	bd30      	pop	{r4, r5, pc}
  407c0a:	f1c4 040c 	rsb	r4, r4, #12
  407c0e:	f1c4 0220 	rsb	r2, r4, #32
  407c12:	fa20 f002 	lsr.w	r0, r0, r2
  407c16:	fa01 f304 	lsl.w	r3, r1, r4
  407c1a:	ea40 0003 	orr.w	r0, r0, r3
  407c1e:	4629      	mov	r1, r5
  407c20:	bd30      	pop	{r4, r5, pc}
  407c22:	fa21 f004 	lsr.w	r0, r1, r4
  407c26:	4629      	mov	r1, r5
  407c28:	bd30      	pop	{r4, r5, pc}
  407c2a:	f094 0f00 	teq	r4, #0
  407c2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407c32:	bf06      	itte	eq
  407c34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407c38:	3401      	addeq	r4, #1
  407c3a:	3d01      	subne	r5, #1
  407c3c:	e74e      	b.n	407adc <__adddf3+0x8c>
  407c3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407c42:	bf18      	it	ne
  407c44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407c48:	d029      	beq.n	407c9e <__adddf3+0x24e>
  407c4a:	ea94 0f05 	teq	r4, r5
  407c4e:	bf08      	it	eq
  407c50:	ea90 0f02 	teqeq	r0, r2
  407c54:	d005      	beq.n	407c62 <__adddf3+0x212>
  407c56:	ea54 0c00 	orrs.w	ip, r4, r0
  407c5a:	bf04      	itt	eq
  407c5c:	4619      	moveq	r1, r3
  407c5e:	4610      	moveq	r0, r2
  407c60:	bd30      	pop	{r4, r5, pc}
  407c62:	ea91 0f03 	teq	r1, r3
  407c66:	bf1e      	ittt	ne
  407c68:	2100      	movne	r1, #0
  407c6a:	2000      	movne	r0, #0
  407c6c:	bd30      	popne	{r4, r5, pc}
  407c6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407c72:	d105      	bne.n	407c80 <__adddf3+0x230>
  407c74:	0040      	lsls	r0, r0, #1
  407c76:	4149      	adcs	r1, r1
  407c78:	bf28      	it	cs
  407c7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407c7e:	bd30      	pop	{r4, r5, pc}
  407c80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407c84:	bf3c      	itt	cc
  407c86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407c8a:	bd30      	popcc	{r4, r5, pc}
  407c8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407c90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407c94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407c98:	f04f 0000 	mov.w	r0, #0
  407c9c:	bd30      	pop	{r4, r5, pc}
  407c9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407ca2:	bf1a      	itte	ne
  407ca4:	4619      	movne	r1, r3
  407ca6:	4610      	movne	r0, r2
  407ca8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407cac:	bf1c      	itt	ne
  407cae:	460b      	movne	r3, r1
  407cb0:	4602      	movne	r2, r0
  407cb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407cb6:	bf06      	itte	eq
  407cb8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407cbc:	ea91 0f03 	teqeq	r1, r3
  407cc0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407cc4:	bd30      	pop	{r4, r5, pc}
  407cc6:	bf00      	nop

00407cc8 <__aeabi_ui2d>:
  407cc8:	f090 0f00 	teq	r0, #0
  407ccc:	bf04      	itt	eq
  407cce:	2100      	moveq	r1, #0
  407cd0:	4770      	bxeq	lr
  407cd2:	b530      	push	{r4, r5, lr}
  407cd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407cd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407cdc:	f04f 0500 	mov.w	r5, #0
  407ce0:	f04f 0100 	mov.w	r1, #0
  407ce4:	e750      	b.n	407b88 <__adddf3+0x138>
  407ce6:	bf00      	nop

00407ce8 <__aeabi_i2d>:
  407ce8:	f090 0f00 	teq	r0, #0
  407cec:	bf04      	itt	eq
  407cee:	2100      	moveq	r1, #0
  407cf0:	4770      	bxeq	lr
  407cf2:	b530      	push	{r4, r5, lr}
  407cf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407cf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407cfc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407d00:	bf48      	it	mi
  407d02:	4240      	negmi	r0, r0
  407d04:	f04f 0100 	mov.w	r1, #0
  407d08:	e73e      	b.n	407b88 <__adddf3+0x138>
  407d0a:	bf00      	nop

00407d0c <__aeabi_f2d>:
  407d0c:	0042      	lsls	r2, r0, #1
  407d0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407d12:	ea4f 0131 	mov.w	r1, r1, rrx
  407d16:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407d1a:	bf1f      	itttt	ne
  407d1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407d20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407d24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407d28:	4770      	bxne	lr
  407d2a:	f092 0f00 	teq	r2, #0
  407d2e:	bf14      	ite	ne
  407d30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407d34:	4770      	bxeq	lr
  407d36:	b530      	push	{r4, r5, lr}
  407d38:	f44f 7460 	mov.w	r4, #896	; 0x380
  407d3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407d40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407d44:	e720      	b.n	407b88 <__adddf3+0x138>
  407d46:	bf00      	nop

00407d48 <__aeabi_ul2d>:
  407d48:	ea50 0201 	orrs.w	r2, r0, r1
  407d4c:	bf08      	it	eq
  407d4e:	4770      	bxeq	lr
  407d50:	b530      	push	{r4, r5, lr}
  407d52:	f04f 0500 	mov.w	r5, #0
  407d56:	e00a      	b.n	407d6e <__aeabi_l2d+0x16>

00407d58 <__aeabi_l2d>:
  407d58:	ea50 0201 	orrs.w	r2, r0, r1
  407d5c:	bf08      	it	eq
  407d5e:	4770      	bxeq	lr
  407d60:	b530      	push	{r4, r5, lr}
  407d62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407d66:	d502      	bpl.n	407d6e <__aeabi_l2d+0x16>
  407d68:	4240      	negs	r0, r0
  407d6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407d6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407d72:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407d76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407d7a:	f43f aedc 	beq.w	407b36 <__adddf3+0xe6>
  407d7e:	f04f 0203 	mov.w	r2, #3
  407d82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407d86:	bf18      	it	ne
  407d88:	3203      	addne	r2, #3
  407d8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407d8e:	bf18      	it	ne
  407d90:	3203      	addne	r2, #3
  407d92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407d96:	f1c2 0320 	rsb	r3, r2, #32
  407d9a:	fa00 fc03 	lsl.w	ip, r0, r3
  407d9e:	fa20 f002 	lsr.w	r0, r0, r2
  407da2:	fa01 fe03 	lsl.w	lr, r1, r3
  407da6:	ea40 000e 	orr.w	r0, r0, lr
  407daa:	fa21 f102 	lsr.w	r1, r1, r2
  407dae:	4414      	add	r4, r2
  407db0:	e6c1      	b.n	407b36 <__adddf3+0xe6>
  407db2:	bf00      	nop

00407db4 <__aeabi_dmul>:
  407db4:	b570      	push	{r4, r5, r6, lr}
  407db6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407dba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407dbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407dc2:	bf1d      	ittte	ne
  407dc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407dc8:	ea94 0f0c 	teqne	r4, ip
  407dcc:	ea95 0f0c 	teqne	r5, ip
  407dd0:	f000 f8de 	bleq	407f90 <__aeabi_dmul+0x1dc>
  407dd4:	442c      	add	r4, r5
  407dd6:	ea81 0603 	eor.w	r6, r1, r3
  407dda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407dde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407de2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407de6:	bf18      	it	ne
  407de8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407dec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407df0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407df4:	d038      	beq.n	407e68 <__aeabi_dmul+0xb4>
  407df6:	fba0 ce02 	umull	ip, lr, r0, r2
  407dfa:	f04f 0500 	mov.w	r5, #0
  407dfe:	fbe1 e502 	umlal	lr, r5, r1, r2
  407e02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407e06:	fbe0 e503 	umlal	lr, r5, r0, r3
  407e0a:	f04f 0600 	mov.w	r6, #0
  407e0e:	fbe1 5603 	umlal	r5, r6, r1, r3
  407e12:	f09c 0f00 	teq	ip, #0
  407e16:	bf18      	it	ne
  407e18:	f04e 0e01 	orrne.w	lr, lr, #1
  407e1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407e20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407e24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407e28:	d204      	bcs.n	407e34 <__aeabi_dmul+0x80>
  407e2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407e2e:	416d      	adcs	r5, r5
  407e30:	eb46 0606 	adc.w	r6, r6, r6
  407e34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407e38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407e3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407e40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407e44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407e48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407e4c:	bf88      	it	hi
  407e4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407e52:	d81e      	bhi.n	407e92 <__aeabi_dmul+0xde>
  407e54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407e58:	bf08      	it	eq
  407e5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407e5e:	f150 0000 	adcs.w	r0, r0, #0
  407e62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407e66:	bd70      	pop	{r4, r5, r6, pc}
  407e68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407e6c:	ea46 0101 	orr.w	r1, r6, r1
  407e70:	ea40 0002 	orr.w	r0, r0, r2
  407e74:	ea81 0103 	eor.w	r1, r1, r3
  407e78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407e7c:	bfc2      	ittt	gt
  407e7e:	ebd4 050c 	rsbsgt	r5, r4, ip
  407e82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407e86:	bd70      	popgt	{r4, r5, r6, pc}
  407e88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407e8c:	f04f 0e00 	mov.w	lr, #0
  407e90:	3c01      	subs	r4, #1
  407e92:	f300 80ab 	bgt.w	407fec <__aeabi_dmul+0x238>
  407e96:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407e9a:	bfde      	ittt	le
  407e9c:	2000      	movle	r0, #0
  407e9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407ea2:	bd70      	pople	{r4, r5, r6, pc}
  407ea4:	f1c4 0400 	rsb	r4, r4, #0
  407ea8:	3c20      	subs	r4, #32
  407eaa:	da35      	bge.n	407f18 <__aeabi_dmul+0x164>
  407eac:	340c      	adds	r4, #12
  407eae:	dc1b      	bgt.n	407ee8 <__aeabi_dmul+0x134>
  407eb0:	f104 0414 	add.w	r4, r4, #20
  407eb4:	f1c4 0520 	rsb	r5, r4, #32
  407eb8:	fa00 f305 	lsl.w	r3, r0, r5
  407ebc:	fa20 f004 	lsr.w	r0, r0, r4
  407ec0:	fa01 f205 	lsl.w	r2, r1, r5
  407ec4:	ea40 0002 	orr.w	r0, r0, r2
  407ec8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407ecc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407ed0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407ed4:	fa21 f604 	lsr.w	r6, r1, r4
  407ed8:	eb42 0106 	adc.w	r1, r2, r6
  407edc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407ee0:	bf08      	it	eq
  407ee2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407ee6:	bd70      	pop	{r4, r5, r6, pc}
  407ee8:	f1c4 040c 	rsb	r4, r4, #12
  407eec:	f1c4 0520 	rsb	r5, r4, #32
  407ef0:	fa00 f304 	lsl.w	r3, r0, r4
  407ef4:	fa20 f005 	lsr.w	r0, r0, r5
  407ef8:	fa01 f204 	lsl.w	r2, r1, r4
  407efc:	ea40 0002 	orr.w	r0, r0, r2
  407f00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407f08:	f141 0100 	adc.w	r1, r1, #0
  407f0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407f10:	bf08      	it	eq
  407f12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407f16:	bd70      	pop	{r4, r5, r6, pc}
  407f18:	f1c4 0520 	rsb	r5, r4, #32
  407f1c:	fa00 f205 	lsl.w	r2, r0, r5
  407f20:	ea4e 0e02 	orr.w	lr, lr, r2
  407f24:	fa20 f304 	lsr.w	r3, r0, r4
  407f28:	fa01 f205 	lsl.w	r2, r1, r5
  407f2c:	ea43 0302 	orr.w	r3, r3, r2
  407f30:	fa21 f004 	lsr.w	r0, r1, r4
  407f34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407f38:	fa21 f204 	lsr.w	r2, r1, r4
  407f3c:	ea20 0002 	bic.w	r0, r0, r2
  407f40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407f44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407f48:	bf08      	it	eq
  407f4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407f4e:	bd70      	pop	{r4, r5, r6, pc}
  407f50:	f094 0f00 	teq	r4, #0
  407f54:	d10f      	bne.n	407f76 <__aeabi_dmul+0x1c2>
  407f56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407f5a:	0040      	lsls	r0, r0, #1
  407f5c:	eb41 0101 	adc.w	r1, r1, r1
  407f60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407f64:	bf08      	it	eq
  407f66:	3c01      	subeq	r4, #1
  407f68:	d0f7      	beq.n	407f5a <__aeabi_dmul+0x1a6>
  407f6a:	ea41 0106 	orr.w	r1, r1, r6
  407f6e:	f095 0f00 	teq	r5, #0
  407f72:	bf18      	it	ne
  407f74:	4770      	bxne	lr
  407f76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407f7a:	0052      	lsls	r2, r2, #1
  407f7c:	eb43 0303 	adc.w	r3, r3, r3
  407f80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407f84:	bf08      	it	eq
  407f86:	3d01      	subeq	r5, #1
  407f88:	d0f7      	beq.n	407f7a <__aeabi_dmul+0x1c6>
  407f8a:	ea43 0306 	orr.w	r3, r3, r6
  407f8e:	4770      	bx	lr
  407f90:	ea94 0f0c 	teq	r4, ip
  407f94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407f98:	bf18      	it	ne
  407f9a:	ea95 0f0c 	teqne	r5, ip
  407f9e:	d00c      	beq.n	407fba <__aeabi_dmul+0x206>
  407fa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407fa4:	bf18      	it	ne
  407fa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407faa:	d1d1      	bne.n	407f50 <__aeabi_dmul+0x19c>
  407fac:	ea81 0103 	eor.w	r1, r1, r3
  407fb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407fb4:	f04f 0000 	mov.w	r0, #0
  407fb8:	bd70      	pop	{r4, r5, r6, pc}
  407fba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407fbe:	bf06      	itte	eq
  407fc0:	4610      	moveq	r0, r2
  407fc2:	4619      	moveq	r1, r3
  407fc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407fc8:	d019      	beq.n	407ffe <__aeabi_dmul+0x24a>
  407fca:	ea94 0f0c 	teq	r4, ip
  407fce:	d102      	bne.n	407fd6 <__aeabi_dmul+0x222>
  407fd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407fd4:	d113      	bne.n	407ffe <__aeabi_dmul+0x24a>
  407fd6:	ea95 0f0c 	teq	r5, ip
  407fda:	d105      	bne.n	407fe8 <__aeabi_dmul+0x234>
  407fdc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407fe0:	bf1c      	itt	ne
  407fe2:	4610      	movne	r0, r2
  407fe4:	4619      	movne	r1, r3
  407fe6:	d10a      	bne.n	407ffe <__aeabi_dmul+0x24a>
  407fe8:	ea81 0103 	eor.w	r1, r1, r3
  407fec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407ff0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407ff4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407ff8:	f04f 0000 	mov.w	r0, #0
  407ffc:	bd70      	pop	{r4, r5, r6, pc}
  407ffe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408002:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408006:	bd70      	pop	{r4, r5, r6, pc}

00408008 <__aeabi_ddiv>:
  408008:	b570      	push	{r4, r5, r6, lr}
  40800a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40800e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408012:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408016:	bf1d      	ittte	ne
  408018:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40801c:	ea94 0f0c 	teqne	r4, ip
  408020:	ea95 0f0c 	teqne	r5, ip
  408024:	f000 f8a7 	bleq	408176 <__aeabi_ddiv+0x16e>
  408028:	eba4 0405 	sub.w	r4, r4, r5
  40802c:	ea81 0e03 	eor.w	lr, r1, r3
  408030:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408034:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408038:	f000 8088 	beq.w	40814c <__aeabi_ddiv+0x144>
  40803c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408040:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408044:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408048:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40804c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408050:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408054:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408058:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40805c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408060:	429d      	cmp	r5, r3
  408062:	bf08      	it	eq
  408064:	4296      	cmpeq	r6, r2
  408066:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40806a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40806e:	d202      	bcs.n	408076 <__aeabi_ddiv+0x6e>
  408070:	085b      	lsrs	r3, r3, #1
  408072:	ea4f 0232 	mov.w	r2, r2, rrx
  408076:	1ab6      	subs	r6, r6, r2
  408078:	eb65 0503 	sbc.w	r5, r5, r3
  40807c:	085b      	lsrs	r3, r3, #1
  40807e:	ea4f 0232 	mov.w	r2, r2, rrx
  408082:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408086:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40808a:	ebb6 0e02 	subs.w	lr, r6, r2
  40808e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408092:	bf22      	ittt	cs
  408094:	1ab6      	subcs	r6, r6, r2
  408096:	4675      	movcs	r5, lr
  408098:	ea40 000c 	orrcs.w	r0, r0, ip
  40809c:	085b      	lsrs	r3, r3, #1
  40809e:	ea4f 0232 	mov.w	r2, r2, rrx
  4080a2:	ebb6 0e02 	subs.w	lr, r6, r2
  4080a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4080aa:	bf22      	ittt	cs
  4080ac:	1ab6      	subcs	r6, r6, r2
  4080ae:	4675      	movcs	r5, lr
  4080b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4080b4:	085b      	lsrs	r3, r3, #1
  4080b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4080ba:	ebb6 0e02 	subs.w	lr, r6, r2
  4080be:	eb75 0e03 	sbcs.w	lr, r5, r3
  4080c2:	bf22      	ittt	cs
  4080c4:	1ab6      	subcs	r6, r6, r2
  4080c6:	4675      	movcs	r5, lr
  4080c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4080cc:	085b      	lsrs	r3, r3, #1
  4080ce:	ea4f 0232 	mov.w	r2, r2, rrx
  4080d2:	ebb6 0e02 	subs.w	lr, r6, r2
  4080d6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4080da:	bf22      	ittt	cs
  4080dc:	1ab6      	subcs	r6, r6, r2
  4080de:	4675      	movcs	r5, lr
  4080e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4080e4:	ea55 0e06 	orrs.w	lr, r5, r6
  4080e8:	d018      	beq.n	40811c <__aeabi_ddiv+0x114>
  4080ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4080ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4080f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4080f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4080fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4080fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408102:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408106:	d1c0      	bne.n	40808a <__aeabi_ddiv+0x82>
  408108:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40810c:	d10b      	bne.n	408126 <__aeabi_ddiv+0x11e>
  40810e:	ea41 0100 	orr.w	r1, r1, r0
  408112:	f04f 0000 	mov.w	r0, #0
  408116:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40811a:	e7b6      	b.n	40808a <__aeabi_ddiv+0x82>
  40811c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408120:	bf04      	itt	eq
  408122:	4301      	orreq	r1, r0
  408124:	2000      	moveq	r0, #0
  408126:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40812a:	bf88      	it	hi
  40812c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408130:	f63f aeaf 	bhi.w	407e92 <__aeabi_dmul+0xde>
  408134:	ebb5 0c03 	subs.w	ip, r5, r3
  408138:	bf04      	itt	eq
  40813a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40813e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408142:	f150 0000 	adcs.w	r0, r0, #0
  408146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40814a:	bd70      	pop	{r4, r5, r6, pc}
  40814c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408150:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408154:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408158:	bfc2      	ittt	gt
  40815a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40815e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408162:	bd70      	popgt	{r4, r5, r6, pc}
  408164:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408168:	f04f 0e00 	mov.w	lr, #0
  40816c:	3c01      	subs	r4, #1
  40816e:	e690      	b.n	407e92 <__aeabi_dmul+0xde>
  408170:	ea45 0e06 	orr.w	lr, r5, r6
  408174:	e68d      	b.n	407e92 <__aeabi_dmul+0xde>
  408176:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40817a:	ea94 0f0c 	teq	r4, ip
  40817e:	bf08      	it	eq
  408180:	ea95 0f0c 	teqeq	r5, ip
  408184:	f43f af3b 	beq.w	407ffe <__aeabi_dmul+0x24a>
  408188:	ea94 0f0c 	teq	r4, ip
  40818c:	d10a      	bne.n	4081a4 <__aeabi_ddiv+0x19c>
  40818e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408192:	f47f af34 	bne.w	407ffe <__aeabi_dmul+0x24a>
  408196:	ea95 0f0c 	teq	r5, ip
  40819a:	f47f af25 	bne.w	407fe8 <__aeabi_dmul+0x234>
  40819e:	4610      	mov	r0, r2
  4081a0:	4619      	mov	r1, r3
  4081a2:	e72c      	b.n	407ffe <__aeabi_dmul+0x24a>
  4081a4:	ea95 0f0c 	teq	r5, ip
  4081a8:	d106      	bne.n	4081b8 <__aeabi_ddiv+0x1b0>
  4081aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4081ae:	f43f aefd 	beq.w	407fac <__aeabi_dmul+0x1f8>
  4081b2:	4610      	mov	r0, r2
  4081b4:	4619      	mov	r1, r3
  4081b6:	e722      	b.n	407ffe <__aeabi_dmul+0x24a>
  4081b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4081bc:	bf18      	it	ne
  4081be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4081c2:	f47f aec5 	bne.w	407f50 <__aeabi_dmul+0x19c>
  4081c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4081ca:	f47f af0d 	bne.w	407fe8 <__aeabi_dmul+0x234>
  4081ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4081d2:	f47f aeeb 	bne.w	407fac <__aeabi_dmul+0x1f8>
  4081d6:	e712      	b.n	407ffe <__aeabi_dmul+0x24a>

004081d8 <__gedf2>:
  4081d8:	f04f 3cff 	mov.w	ip, #4294967295
  4081dc:	e006      	b.n	4081ec <__cmpdf2+0x4>
  4081de:	bf00      	nop

004081e0 <__ledf2>:
  4081e0:	f04f 0c01 	mov.w	ip, #1
  4081e4:	e002      	b.n	4081ec <__cmpdf2+0x4>
  4081e6:	bf00      	nop

004081e8 <__cmpdf2>:
  4081e8:	f04f 0c01 	mov.w	ip, #1
  4081ec:	f84d cd04 	str.w	ip, [sp, #-4]!
  4081f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4081f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4081f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4081fc:	bf18      	it	ne
  4081fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408202:	d01b      	beq.n	40823c <__cmpdf2+0x54>
  408204:	b001      	add	sp, #4
  408206:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40820a:	bf0c      	ite	eq
  40820c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408210:	ea91 0f03 	teqne	r1, r3
  408214:	bf02      	ittt	eq
  408216:	ea90 0f02 	teqeq	r0, r2
  40821a:	2000      	moveq	r0, #0
  40821c:	4770      	bxeq	lr
  40821e:	f110 0f00 	cmn.w	r0, #0
  408222:	ea91 0f03 	teq	r1, r3
  408226:	bf58      	it	pl
  408228:	4299      	cmppl	r1, r3
  40822a:	bf08      	it	eq
  40822c:	4290      	cmpeq	r0, r2
  40822e:	bf2c      	ite	cs
  408230:	17d8      	asrcs	r0, r3, #31
  408232:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408236:	f040 0001 	orr.w	r0, r0, #1
  40823a:	4770      	bx	lr
  40823c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408240:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408244:	d102      	bne.n	40824c <__cmpdf2+0x64>
  408246:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40824a:	d107      	bne.n	40825c <__cmpdf2+0x74>
  40824c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408250:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408254:	d1d6      	bne.n	408204 <__cmpdf2+0x1c>
  408256:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40825a:	d0d3      	beq.n	408204 <__cmpdf2+0x1c>
  40825c:	f85d 0b04 	ldr.w	r0, [sp], #4
  408260:	4770      	bx	lr
  408262:	bf00      	nop

00408264 <__aeabi_cdrcmple>:
  408264:	4684      	mov	ip, r0
  408266:	4610      	mov	r0, r2
  408268:	4662      	mov	r2, ip
  40826a:	468c      	mov	ip, r1
  40826c:	4619      	mov	r1, r3
  40826e:	4663      	mov	r3, ip
  408270:	e000      	b.n	408274 <__aeabi_cdcmpeq>
  408272:	bf00      	nop

00408274 <__aeabi_cdcmpeq>:
  408274:	b501      	push	{r0, lr}
  408276:	f7ff ffb7 	bl	4081e8 <__cmpdf2>
  40827a:	2800      	cmp	r0, #0
  40827c:	bf48      	it	mi
  40827e:	f110 0f00 	cmnmi.w	r0, #0
  408282:	bd01      	pop	{r0, pc}

00408284 <__aeabi_dcmpeq>:
  408284:	f84d ed08 	str.w	lr, [sp, #-8]!
  408288:	f7ff fff4 	bl	408274 <__aeabi_cdcmpeq>
  40828c:	bf0c      	ite	eq
  40828e:	2001      	moveq	r0, #1
  408290:	2000      	movne	r0, #0
  408292:	f85d fb08 	ldr.w	pc, [sp], #8
  408296:	bf00      	nop

00408298 <__aeabi_dcmplt>:
  408298:	f84d ed08 	str.w	lr, [sp, #-8]!
  40829c:	f7ff ffea 	bl	408274 <__aeabi_cdcmpeq>
  4082a0:	bf34      	ite	cc
  4082a2:	2001      	movcc	r0, #1
  4082a4:	2000      	movcs	r0, #0
  4082a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4082aa:	bf00      	nop

004082ac <__aeabi_dcmple>:
  4082ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4082b0:	f7ff ffe0 	bl	408274 <__aeabi_cdcmpeq>
  4082b4:	bf94      	ite	ls
  4082b6:	2001      	movls	r0, #1
  4082b8:	2000      	movhi	r0, #0
  4082ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4082be:	bf00      	nop

004082c0 <__aeabi_dcmpge>:
  4082c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4082c4:	f7ff ffce 	bl	408264 <__aeabi_cdrcmple>
  4082c8:	bf94      	ite	ls
  4082ca:	2001      	movls	r0, #1
  4082cc:	2000      	movhi	r0, #0
  4082ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4082d2:	bf00      	nop

004082d4 <__aeabi_dcmpgt>:
  4082d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4082d8:	f7ff ffc4 	bl	408264 <__aeabi_cdrcmple>
  4082dc:	bf34      	ite	cc
  4082de:	2001      	movcc	r0, #1
  4082e0:	2000      	movcs	r0, #0
  4082e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4082e6:	bf00      	nop

004082e8 <__aeabi_dcmpun>:
  4082e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4082ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4082f0:	d102      	bne.n	4082f8 <__aeabi_dcmpun+0x10>
  4082f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4082f6:	d10a      	bne.n	40830e <__aeabi_dcmpun+0x26>
  4082f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4082fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408300:	d102      	bne.n	408308 <__aeabi_dcmpun+0x20>
  408302:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408306:	d102      	bne.n	40830e <__aeabi_dcmpun+0x26>
  408308:	f04f 0000 	mov.w	r0, #0
  40830c:	4770      	bx	lr
  40830e:	f04f 0001 	mov.w	r0, #1
  408312:	4770      	bx	lr

00408314 <__aeabi_d2iz>:
  408314:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408318:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40831c:	d215      	bcs.n	40834a <__aeabi_d2iz+0x36>
  40831e:	d511      	bpl.n	408344 <__aeabi_d2iz+0x30>
  408320:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408324:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408328:	d912      	bls.n	408350 <__aeabi_d2iz+0x3c>
  40832a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40832e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408332:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408336:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40833a:	fa23 f002 	lsr.w	r0, r3, r2
  40833e:	bf18      	it	ne
  408340:	4240      	negne	r0, r0
  408342:	4770      	bx	lr
  408344:	f04f 0000 	mov.w	r0, #0
  408348:	4770      	bx	lr
  40834a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40834e:	d105      	bne.n	40835c <__aeabi_d2iz+0x48>
  408350:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408354:	bf08      	it	eq
  408356:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40835a:	4770      	bx	lr
  40835c:	f04f 0000 	mov.w	r0, #0
  408360:	4770      	bx	lr
  408362:	bf00      	nop

00408364 <__aeabi_uldivmod>:
  408364:	b953      	cbnz	r3, 40837c <__aeabi_uldivmod+0x18>
  408366:	b94a      	cbnz	r2, 40837c <__aeabi_uldivmod+0x18>
  408368:	2900      	cmp	r1, #0
  40836a:	bf08      	it	eq
  40836c:	2800      	cmpeq	r0, #0
  40836e:	bf1c      	itt	ne
  408370:	f04f 31ff 	movne.w	r1, #4294967295
  408374:	f04f 30ff 	movne.w	r0, #4294967295
  408378:	f000 b97a 	b.w	408670 <__aeabi_idiv0>
  40837c:	f1ad 0c08 	sub.w	ip, sp, #8
  408380:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408384:	f000 f806 	bl	408394 <__udivmoddi4>
  408388:	f8dd e004 	ldr.w	lr, [sp, #4]
  40838c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408390:	b004      	add	sp, #16
  408392:	4770      	bx	lr

00408394 <__udivmoddi4>:
  408394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408398:	468c      	mov	ip, r1
  40839a:	460d      	mov	r5, r1
  40839c:	4604      	mov	r4, r0
  40839e:	9e08      	ldr	r6, [sp, #32]
  4083a0:	2b00      	cmp	r3, #0
  4083a2:	d151      	bne.n	408448 <__udivmoddi4+0xb4>
  4083a4:	428a      	cmp	r2, r1
  4083a6:	4617      	mov	r7, r2
  4083a8:	d96d      	bls.n	408486 <__udivmoddi4+0xf2>
  4083aa:	fab2 fe82 	clz	lr, r2
  4083ae:	f1be 0f00 	cmp.w	lr, #0
  4083b2:	d00b      	beq.n	4083cc <__udivmoddi4+0x38>
  4083b4:	f1ce 0c20 	rsb	ip, lr, #32
  4083b8:	fa01 f50e 	lsl.w	r5, r1, lr
  4083bc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4083c0:	fa02 f70e 	lsl.w	r7, r2, lr
  4083c4:	ea4c 0c05 	orr.w	ip, ip, r5
  4083c8:	fa00 f40e 	lsl.w	r4, r0, lr
  4083cc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4083d0:	0c25      	lsrs	r5, r4, #16
  4083d2:	fbbc f8fa 	udiv	r8, ip, sl
  4083d6:	fa1f f987 	uxth.w	r9, r7
  4083da:	fb0a cc18 	mls	ip, sl, r8, ip
  4083de:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4083e2:	fb08 f309 	mul.w	r3, r8, r9
  4083e6:	42ab      	cmp	r3, r5
  4083e8:	d90a      	bls.n	408400 <__udivmoddi4+0x6c>
  4083ea:	19ed      	adds	r5, r5, r7
  4083ec:	f108 32ff 	add.w	r2, r8, #4294967295
  4083f0:	f080 8123 	bcs.w	40863a <__udivmoddi4+0x2a6>
  4083f4:	42ab      	cmp	r3, r5
  4083f6:	f240 8120 	bls.w	40863a <__udivmoddi4+0x2a6>
  4083fa:	f1a8 0802 	sub.w	r8, r8, #2
  4083fe:	443d      	add	r5, r7
  408400:	1aed      	subs	r5, r5, r3
  408402:	b2a4      	uxth	r4, r4
  408404:	fbb5 f0fa 	udiv	r0, r5, sl
  408408:	fb0a 5510 	mls	r5, sl, r0, r5
  40840c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408410:	fb00 f909 	mul.w	r9, r0, r9
  408414:	45a1      	cmp	r9, r4
  408416:	d909      	bls.n	40842c <__udivmoddi4+0x98>
  408418:	19e4      	adds	r4, r4, r7
  40841a:	f100 33ff 	add.w	r3, r0, #4294967295
  40841e:	f080 810a 	bcs.w	408636 <__udivmoddi4+0x2a2>
  408422:	45a1      	cmp	r9, r4
  408424:	f240 8107 	bls.w	408636 <__udivmoddi4+0x2a2>
  408428:	3802      	subs	r0, #2
  40842a:	443c      	add	r4, r7
  40842c:	eba4 0409 	sub.w	r4, r4, r9
  408430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408434:	2100      	movs	r1, #0
  408436:	2e00      	cmp	r6, #0
  408438:	d061      	beq.n	4084fe <__udivmoddi4+0x16a>
  40843a:	fa24 f40e 	lsr.w	r4, r4, lr
  40843e:	2300      	movs	r3, #0
  408440:	6034      	str	r4, [r6, #0]
  408442:	6073      	str	r3, [r6, #4]
  408444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408448:	428b      	cmp	r3, r1
  40844a:	d907      	bls.n	40845c <__udivmoddi4+0xc8>
  40844c:	2e00      	cmp	r6, #0
  40844e:	d054      	beq.n	4084fa <__udivmoddi4+0x166>
  408450:	2100      	movs	r1, #0
  408452:	e886 0021 	stmia.w	r6, {r0, r5}
  408456:	4608      	mov	r0, r1
  408458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40845c:	fab3 f183 	clz	r1, r3
  408460:	2900      	cmp	r1, #0
  408462:	f040 808e 	bne.w	408582 <__udivmoddi4+0x1ee>
  408466:	42ab      	cmp	r3, r5
  408468:	d302      	bcc.n	408470 <__udivmoddi4+0xdc>
  40846a:	4282      	cmp	r2, r0
  40846c:	f200 80fa 	bhi.w	408664 <__udivmoddi4+0x2d0>
  408470:	1a84      	subs	r4, r0, r2
  408472:	eb65 0503 	sbc.w	r5, r5, r3
  408476:	2001      	movs	r0, #1
  408478:	46ac      	mov	ip, r5
  40847a:	2e00      	cmp	r6, #0
  40847c:	d03f      	beq.n	4084fe <__udivmoddi4+0x16a>
  40847e:	e886 1010 	stmia.w	r6, {r4, ip}
  408482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408486:	b912      	cbnz	r2, 40848e <__udivmoddi4+0xfa>
  408488:	2701      	movs	r7, #1
  40848a:	fbb7 f7f2 	udiv	r7, r7, r2
  40848e:	fab7 fe87 	clz	lr, r7
  408492:	f1be 0f00 	cmp.w	lr, #0
  408496:	d134      	bne.n	408502 <__udivmoddi4+0x16e>
  408498:	1beb      	subs	r3, r5, r7
  40849a:	0c3a      	lsrs	r2, r7, #16
  40849c:	fa1f fc87 	uxth.w	ip, r7
  4084a0:	2101      	movs	r1, #1
  4084a2:	fbb3 f8f2 	udiv	r8, r3, r2
  4084a6:	0c25      	lsrs	r5, r4, #16
  4084a8:	fb02 3318 	mls	r3, r2, r8, r3
  4084ac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4084b0:	fb0c f308 	mul.w	r3, ip, r8
  4084b4:	42ab      	cmp	r3, r5
  4084b6:	d907      	bls.n	4084c8 <__udivmoddi4+0x134>
  4084b8:	19ed      	adds	r5, r5, r7
  4084ba:	f108 30ff 	add.w	r0, r8, #4294967295
  4084be:	d202      	bcs.n	4084c6 <__udivmoddi4+0x132>
  4084c0:	42ab      	cmp	r3, r5
  4084c2:	f200 80d1 	bhi.w	408668 <__udivmoddi4+0x2d4>
  4084c6:	4680      	mov	r8, r0
  4084c8:	1aed      	subs	r5, r5, r3
  4084ca:	b2a3      	uxth	r3, r4
  4084cc:	fbb5 f0f2 	udiv	r0, r5, r2
  4084d0:	fb02 5510 	mls	r5, r2, r0, r5
  4084d4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4084d8:	fb0c fc00 	mul.w	ip, ip, r0
  4084dc:	45a4      	cmp	ip, r4
  4084de:	d907      	bls.n	4084f0 <__udivmoddi4+0x15c>
  4084e0:	19e4      	adds	r4, r4, r7
  4084e2:	f100 33ff 	add.w	r3, r0, #4294967295
  4084e6:	d202      	bcs.n	4084ee <__udivmoddi4+0x15a>
  4084e8:	45a4      	cmp	ip, r4
  4084ea:	f200 80b8 	bhi.w	40865e <__udivmoddi4+0x2ca>
  4084ee:	4618      	mov	r0, r3
  4084f0:	eba4 040c 	sub.w	r4, r4, ip
  4084f4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4084f8:	e79d      	b.n	408436 <__udivmoddi4+0xa2>
  4084fa:	4631      	mov	r1, r6
  4084fc:	4630      	mov	r0, r6
  4084fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408502:	f1ce 0420 	rsb	r4, lr, #32
  408506:	fa05 f30e 	lsl.w	r3, r5, lr
  40850a:	fa07 f70e 	lsl.w	r7, r7, lr
  40850e:	fa20 f804 	lsr.w	r8, r0, r4
  408512:	0c3a      	lsrs	r2, r7, #16
  408514:	fa25 f404 	lsr.w	r4, r5, r4
  408518:	ea48 0803 	orr.w	r8, r8, r3
  40851c:	fbb4 f1f2 	udiv	r1, r4, r2
  408520:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408524:	fb02 4411 	mls	r4, r2, r1, r4
  408528:	fa1f fc87 	uxth.w	ip, r7
  40852c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408530:	fb01 f30c 	mul.w	r3, r1, ip
  408534:	42ab      	cmp	r3, r5
  408536:	fa00 f40e 	lsl.w	r4, r0, lr
  40853a:	d909      	bls.n	408550 <__udivmoddi4+0x1bc>
  40853c:	19ed      	adds	r5, r5, r7
  40853e:	f101 30ff 	add.w	r0, r1, #4294967295
  408542:	f080 808a 	bcs.w	40865a <__udivmoddi4+0x2c6>
  408546:	42ab      	cmp	r3, r5
  408548:	f240 8087 	bls.w	40865a <__udivmoddi4+0x2c6>
  40854c:	3902      	subs	r1, #2
  40854e:	443d      	add	r5, r7
  408550:	1aeb      	subs	r3, r5, r3
  408552:	fa1f f588 	uxth.w	r5, r8
  408556:	fbb3 f0f2 	udiv	r0, r3, r2
  40855a:	fb02 3310 	mls	r3, r2, r0, r3
  40855e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408562:	fb00 f30c 	mul.w	r3, r0, ip
  408566:	42ab      	cmp	r3, r5
  408568:	d907      	bls.n	40857a <__udivmoddi4+0x1e6>
  40856a:	19ed      	adds	r5, r5, r7
  40856c:	f100 38ff 	add.w	r8, r0, #4294967295
  408570:	d26f      	bcs.n	408652 <__udivmoddi4+0x2be>
  408572:	42ab      	cmp	r3, r5
  408574:	d96d      	bls.n	408652 <__udivmoddi4+0x2be>
  408576:	3802      	subs	r0, #2
  408578:	443d      	add	r5, r7
  40857a:	1aeb      	subs	r3, r5, r3
  40857c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408580:	e78f      	b.n	4084a2 <__udivmoddi4+0x10e>
  408582:	f1c1 0720 	rsb	r7, r1, #32
  408586:	fa22 f807 	lsr.w	r8, r2, r7
  40858a:	408b      	lsls	r3, r1
  40858c:	fa05 f401 	lsl.w	r4, r5, r1
  408590:	ea48 0303 	orr.w	r3, r8, r3
  408594:	fa20 fe07 	lsr.w	lr, r0, r7
  408598:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40859c:	40fd      	lsrs	r5, r7
  40859e:	ea4e 0e04 	orr.w	lr, lr, r4
  4085a2:	fbb5 f9fc 	udiv	r9, r5, ip
  4085a6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4085aa:	fb0c 5519 	mls	r5, ip, r9, r5
  4085ae:	fa1f f883 	uxth.w	r8, r3
  4085b2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4085b6:	fb09 f408 	mul.w	r4, r9, r8
  4085ba:	42ac      	cmp	r4, r5
  4085bc:	fa02 f201 	lsl.w	r2, r2, r1
  4085c0:	fa00 fa01 	lsl.w	sl, r0, r1
  4085c4:	d908      	bls.n	4085d8 <__udivmoddi4+0x244>
  4085c6:	18ed      	adds	r5, r5, r3
  4085c8:	f109 30ff 	add.w	r0, r9, #4294967295
  4085cc:	d243      	bcs.n	408656 <__udivmoddi4+0x2c2>
  4085ce:	42ac      	cmp	r4, r5
  4085d0:	d941      	bls.n	408656 <__udivmoddi4+0x2c2>
  4085d2:	f1a9 0902 	sub.w	r9, r9, #2
  4085d6:	441d      	add	r5, r3
  4085d8:	1b2d      	subs	r5, r5, r4
  4085da:	fa1f fe8e 	uxth.w	lr, lr
  4085de:	fbb5 f0fc 	udiv	r0, r5, ip
  4085e2:	fb0c 5510 	mls	r5, ip, r0, r5
  4085e6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4085ea:	fb00 f808 	mul.w	r8, r0, r8
  4085ee:	45a0      	cmp	r8, r4
  4085f0:	d907      	bls.n	408602 <__udivmoddi4+0x26e>
  4085f2:	18e4      	adds	r4, r4, r3
  4085f4:	f100 35ff 	add.w	r5, r0, #4294967295
  4085f8:	d229      	bcs.n	40864e <__udivmoddi4+0x2ba>
  4085fa:	45a0      	cmp	r8, r4
  4085fc:	d927      	bls.n	40864e <__udivmoddi4+0x2ba>
  4085fe:	3802      	subs	r0, #2
  408600:	441c      	add	r4, r3
  408602:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408606:	eba4 0408 	sub.w	r4, r4, r8
  40860a:	fba0 8902 	umull	r8, r9, r0, r2
  40860e:	454c      	cmp	r4, r9
  408610:	46c6      	mov	lr, r8
  408612:	464d      	mov	r5, r9
  408614:	d315      	bcc.n	408642 <__udivmoddi4+0x2ae>
  408616:	d012      	beq.n	40863e <__udivmoddi4+0x2aa>
  408618:	b156      	cbz	r6, 408630 <__udivmoddi4+0x29c>
  40861a:	ebba 030e 	subs.w	r3, sl, lr
  40861e:	eb64 0405 	sbc.w	r4, r4, r5
  408622:	fa04 f707 	lsl.w	r7, r4, r7
  408626:	40cb      	lsrs	r3, r1
  408628:	431f      	orrs	r7, r3
  40862a:	40cc      	lsrs	r4, r1
  40862c:	6037      	str	r7, [r6, #0]
  40862e:	6074      	str	r4, [r6, #4]
  408630:	2100      	movs	r1, #0
  408632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408636:	4618      	mov	r0, r3
  408638:	e6f8      	b.n	40842c <__udivmoddi4+0x98>
  40863a:	4690      	mov	r8, r2
  40863c:	e6e0      	b.n	408400 <__udivmoddi4+0x6c>
  40863e:	45c2      	cmp	sl, r8
  408640:	d2ea      	bcs.n	408618 <__udivmoddi4+0x284>
  408642:	ebb8 0e02 	subs.w	lr, r8, r2
  408646:	eb69 0503 	sbc.w	r5, r9, r3
  40864a:	3801      	subs	r0, #1
  40864c:	e7e4      	b.n	408618 <__udivmoddi4+0x284>
  40864e:	4628      	mov	r0, r5
  408650:	e7d7      	b.n	408602 <__udivmoddi4+0x26e>
  408652:	4640      	mov	r0, r8
  408654:	e791      	b.n	40857a <__udivmoddi4+0x1e6>
  408656:	4681      	mov	r9, r0
  408658:	e7be      	b.n	4085d8 <__udivmoddi4+0x244>
  40865a:	4601      	mov	r1, r0
  40865c:	e778      	b.n	408550 <__udivmoddi4+0x1bc>
  40865e:	3802      	subs	r0, #2
  408660:	443c      	add	r4, r7
  408662:	e745      	b.n	4084f0 <__udivmoddi4+0x15c>
  408664:	4608      	mov	r0, r1
  408666:	e708      	b.n	40847a <__udivmoddi4+0xe6>
  408668:	f1a8 0802 	sub.w	r8, r8, #2
  40866c:	443d      	add	r5, r7
  40866e:	e72b      	b.n	4084c8 <__udivmoddi4+0x134>

00408670 <__aeabi_idiv0>:
  408670:	4770      	bx	lr
  408672:	bf00      	nop
  408674:	61706143 	.word	0x61706143
  408678:	79746963 	.word	0x79746963
  40867c:	6c25203a 	.word	0x6c25203a
  408680:	00000a75 	.word	0x00000a75
  408684:	61733a30 	.word	0x61733a30
  408688:	72615f6d 	.word	0x72615f6d
  40868c:	64735f6d 	.word	0x64735f6d
  408690:	7478742e 	.word	0x7478742e
  408694:	00000000 	.word	0x00000000

00408698 <mmc_trans_multipliers>:
  408698:	00000000 0000000a 0000000c 0000000d     ................
  4086a8:	0000000f 00000014 0000001a 0000001e     ................
  4086b8:	00000023 00000028 0000002d 00000034     #...(...-...4...
  4086c8:	00000037 0000003c 00000046 00000050     7...<...F...P...

004086d8 <sd_mmc_trans_units>:
  4086d8:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

004086f4 <sd_trans_multipliers>:
  4086f4:	00000000 0000000a 0000000c 0000000d     ................
  408704:	0000000f 00000014 00000019 0000001e     ................
  408714:	00000023 00000028 0000002d 00000032     #...(...-...2...
  408724:	00000037 0000003c 00000046 00000050     7...<...F...P...

00408734 <lun_desc>:
  408734:	00401011 00401051 00401071 00401089     ..@.Q.@.q.@...@.
  408744:	004010a9 004010ed 00401151 00408774     ..@...@.Q.@.t.@.
  408754:	00401021 00401061 0040107d 00401099     !.@.a.@.}.@...@.
  408764:	004010ad 00401101 00401165 0040878c     ..@...@.e.@...@.
  408774:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
  408784:	22302074 00000000 2f445322 20434d4d     t 0"...."SD/MMC 
  408794:	64726143 6f6c5320 22312074 00000000     Card Slot 1"....

004087a4 <LfnOfs>:
  4087a4:	07050301 12100e09 1c181614 0000001e     ................

004087b4 <excvt.5682>:
  4087b4:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  4087c4:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  4087d4:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  4087e4:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  4087f4:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  408804:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  408814:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  408824:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
  408834:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  408844:	00005d5b                                []..

00408848 <Tbl>:
  408848:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  408858:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  408868:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  408878:	00d600ff 00f800dc 00d800a3 019200d7     ................
  408888:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  408898:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  4088a8:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  4088b8:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  4088c8:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  4088d8:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  4088e8:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  4088f8:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  408908:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  408918:	00da00de 00d900db 00dd00fd 00b400af     ................
  408928:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  408938:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00408948 <tbl_lower.5432>:
  408948:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  408958:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  408968:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  408978:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  408988:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  408998:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  4089a8:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  4089b8:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  4089c8:	01050103 01090107 010d010b 0111010f     ................
  4089d8:	01150113 01190117 011d011b 0121011f     ..............!.
  4089e8:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  4089f8:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  408a08:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  408a18:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  408a28:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  408a38:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  408a48:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  408a58:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  408a68:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  408a78:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  408a88:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  408a98:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  408aa8:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  408ab8:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  408ac8:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  408ad8:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  408ae8:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  408af8:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  408b08:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  408b18:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00408b28 <tbl_upper.5433>:
  408b28:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  408b38:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  408b48:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  408b58:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  408b68:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  408b78:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  408b88:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  408b98:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  408ba8:	01040102 01080106 010c010a 0110010e     ................
  408bb8:	01140112 01180116 011c011a 0120011e     .............. .
  408bc8:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  408bd8:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  408be8:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  408bf8:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  408c08:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  408c18:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  408c28:	03940393 03960395 03980397 039a0399     ................
  408c38:	039c039b 039e039d 03a0039f 03a303a1     ................
  408c48:	03a503a4 03a703a6 03a903a8 041003aa     ................
  408c58:	04120411 04140413 04160415 04180417     ................
  408c68:	041a0419 041c041b 041e041d 0420041f     .............. .
  408c78:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  408c88:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  408c98:	04030402 04050404 04070406 04090408     ................
  408ca8:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  408cb8:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  408cc8:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  408cd8:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  408ce8:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  408cf8:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...

00408d08 <can_bit_time>:
  408d08:	02020308 02094b03 43020303 0303030a     .....K.....C....
  408d18:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
  408d28:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
  408d38:	05050510 06114504 47040505 06060512     .....E.....G....
  408d48:	06134304 44040606 06060714 08154604     .C.....D.....F..
  408d58:	47040606 07070716 08174404 46040708     ...G.....D.....F
  408d68:	08080718 08194304 44040808              .....C.....D

00408d74 <_global_impure_ptr>:
  408d74:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  408d84:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  408d94:	46454443 00000000 33323130 37363534     CDEF....01234567
  408da4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  408db4:	0000296c 00000030                       l)..0...

00408dbc <blanks.7223>:
  408dbc:	20202020 20202020 20202020 20202020                     

00408dcc <zeroes.7224>:
  408dcc:	30303030 30303030 30303030 30303030     0000000000000000
  408ddc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  408dec:	00000000                                ....

00408df0 <__mprec_bigtens>:
  408df0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408e00:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408e10:	7f73bf3c 75154fdd                       <.s..O.u

00408e18 <__mprec_tens>:
  408e18:	00000000 3ff00000 00000000 40240000     .......?......$@
  408e28:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408e38:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408e48:	00000000 412e8480 00000000 416312d0     .......A......cA
  408e58:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408e68:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408e78:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408e88:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408e98:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408ea8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408eb8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408ec8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408ed8:	79d99db4 44ea7843                       ...yCx.D

00408ee0 <p05.6055>:
  408ee0:	00000005 00000019 0000007d 00000043     ........}...C...
  408ef0:	49534f50 00000058 0000002e              POSIX.......

00408efc <_ctype_>:
  408efc:	20202000 20202020 28282020 20282828     .         ((((( 
  408f0c:	20202020 20202020 20202020 20202020                     
  408f1c:	10108820 10101010 10101010 10101010      ...............
  408f2c:	04040410 04040404 10040404 10101010     ................
  408f3c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408f4c:	01010101 01010101 01010101 10101010     ................
  408f5c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408f6c:	02020202 02020202 02020202 10101010     ................
  408f7c:	00000020 00000000 00000000 00000000      ...............
	...

00409000 <_init>:
  409000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409002:	bf00      	nop
  409004:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409006:	bc08      	pop	{r3}
  409008:	469e      	mov	lr, r3
  40900a:	4770      	bx	lr

0040900c <__init_array_start>:
  40900c:	00405305 	.word	0x00405305

00409010 <__frame_dummy_init_array_entry>:
  409010:	0040011d                                ..@.

00409014 <_fini>:
  409014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409016:	bf00      	nop
  409018:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40901a:	bc08      	pop	{r3}
  40901c:	469e      	mov	lr, r3
  40901e:	4770      	bx	lr

00409020 <__fini_array_start>:
  409020:	004000f9 	.word	0x004000f9
