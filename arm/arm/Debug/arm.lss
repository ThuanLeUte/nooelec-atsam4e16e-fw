
arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008a74  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408a74  00408a74  00018a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20000000  00408a7c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000134  200009b8  00409434  000209b8  2**2
                  ALLOC
  4 .stack        00003004  20000aec  00409568  000209b8  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00018ca3  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003816  00000000  00000000  000396e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000bd86  00000000  00000000  0003cef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000af0  00000000  00000000  00048c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c70  00000000  00000000  0004976e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b66d  00000000  00000000  0004a3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e43b  00000000  00000000  00065a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006bb5d  00000000  00000000  00073e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000026bc  00000000  00000000  000df9e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 3a 00 20 55 18 40 00 51 18 40 00 51 18 40 00     .:. U.@.Q.@.Q.@.
  400010:	51 18 40 00 51 18 40 00 51 18 40 00 00 00 00 00     Q.@.Q.@.Q.@.....
	...
  40002c:	51 18 40 00 51 18 40 00 00 00 00 00 51 18 40 00     Q.@.Q.@.....Q.@.
  40003c:	51 18 40 00 51 18 40 00 51 18 40 00 51 18 40 00     Q.@.Q.@.Q.@.Q.@.
  40004c:	51 18 40 00 51 18 40 00 51 18 40 00 51 18 40 00     Q.@.Q.@.Q.@.Q.@.
  40005c:	51 18 40 00 51 18 40 00 cd 35 40 00 e1 35 40 00     Q.@.Q.@..5@..5@.
  40006c:	f5 35 40 00 09 36 40 00 1d 36 40 00 51 18 40 00     .5@..6@..6@.Q.@.
  40007c:	51 18 40 00 51 18 40 00 51 18 40 00 51 18 40 00     Q.@.Q.@.Q.@.Q.@.
  40008c:	51 18 40 00 51 18 40 00 51 18 40 00 51 18 40 00     Q.@.Q.@.Q.@.Q.@.
  40009c:	51 18 40 00 51 18 40 00 51 18 40 00 51 18 40 00     Q.@.Q.@.Q.@.Q.@.
  4000ac:	51 18 40 00 51 18 40 00 51 18 40 00 51 18 40 00     Q.@.Q.@.Q.@.Q.@.
  4000bc:	51 18 40 00 51 18 40 00 51 18 40 00 51 18 40 00     Q.@.Q.@.Q.@.Q.@.
  4000cc:	51 18 40 00 51 18 40 00 51 18 40 00 51 18 40 00     Q.@.Q.@.Q.@.Q.@.
  4000dc:	51 18 40 00 51 18 40 00 51 18 40 00 51 18 40 00     Q.@.Q.@.Q.@.Q.@.
  4000ec:	51 18 40 00 51 18 40 00 51 18 40 00                 Q.@.Q.@.Q.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009b8 	.word	0x200009b8
  400114:	00000000 	.word	0x00000000
  400118:	00408a7c 	.word	0x00408a7c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00408a7c 	.word	0x00408a7c
  400158:	200009bc 	.word	0x200009bc
  40015c:	00408a7c 	.word	0x00408a7c
  400160:	00000000 	.word	0x00000000

00400164 <bsp_hw_init>:
static void m_bsp_gpio_init(void);
static void m_bsp_sdcard_init(void);

/* Function definitions ----------------------------------------------- */
void bsp_hw_init(void)
{
  400164:	b570      	push	{r4, r5, r6, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400166:	2009      	movs	r0, #9
  400168:	4b0c      	ldr	r3, [pc, #48]	; (40019c <bsp_hw_init+0x38>)
  40016a:	4798      	blx	r3

  // Enable PIOA clock to detect Card Detect (CD) change
  sysclk_enable_peripheral_clock(ID_PIOA);

  // Configure SD card pins as per MCI peripheral (periph C)
  pio_set_peripheral(PIOA, PIO_PERIPH_C, PIO_PA30C_MCDA0 | // MCI Data 0
  40016c:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
  400170:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400174:	480a      	ldr	r0, [pc, #40]	; (4001a0 <bsp_hw_init+0x3c>)
  400176:	4b0b      	ldr	r3, [pc, #44]	; (4001a4 <bsp_hw_init+0x40>)
  400178:	4798      	blx	r3
                                         PIO_PA27C_MCDA3 | // MCI Data 3
                                         PIO_PA28C_MCCDA | // MCI Command
                                         PIO_PA29C_MCCK);  // MCI Clock

  // Initialize SD MMC stack
  sd_mmc_init();
  40017a:	4b0b      	ldr	r3, [pc, #44]	; (4001a8 <bsp_hw_init+0x44>)
  40017c:	4798      	blx	r3

  //  Wait until SD stack initialized and SD card inserted
  do
  {
    // Check if stack ready
    status = sd_mmc_test_unit_ready(0);
  40017e:	2400      	movs	r4, #0
  400180:	4e0a      	ldr	r6, [pc, #40]	; (4001ac <bsp_hw_init+0x48>)
    if (status == CTRL_FAIL)
    {
      // Wait for a card to be inserted
      while (sd_mmc_check(0) != CTRL_NO_PRESENT)
  400182:	4d0b      	ldr	r5, [pc, #44]	; (4001b0 <bsp_hw_init+0x4c>)
  400184:	e003      	b.n	40018e <bsp_hw_init+0x2a>
  400186:	4620      	mov	r0, r4
  400188:	47a8      	blx	r5
  40018a:	2802      	cmp	r0, #2
  40018c:	d1fb      	bne.n	400186 <bsp_hw_init+0x22>
    status = sd_mmc_test_unit_ready(0);
  40018e:	4620      	mov	r0, r4
  400190:	47b0      	blx	r6
    if (status == CTRL_FAIL)
  400192:	2801      	cmp	r0, #1
  400194:	d0f7      	beq.n	400186 <bsp_hw_init+0x22>
      {
        // Use a timeout here for real projects.
      }
    }
  } while (status != CTRL_GOOD);
  400196:	2800      	cmp	r0, #0
  400198:	d1f9      	bne.n	40018e <bsp_hw_init+0x2a>
}
  40019a:	bd70      	pop	{r4, r5, r6, pc}
  40019c:	004037cd 	.word	0x004037cd
  4001a0:	400e0e00 	.word	0x400e0e00
  4001a4:	00403631 	.word	0x00403631
  4001a8:	00400355 	.word	0x00400355
  4001ac:	00400ebd 	.word	0x00400ebd
  4001b0:	00400375 	.word	0x00400375

004001b4 <sys_init>:
/* Public variables --------------------------------------------------- */
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
void sys_init(void)
{
  4001b4:	b508      	push	{r3, lr}
  sysclk_init();  // Initialize System Clock
  4001b6:	4b03      	ldr	r3, [pc, #12]	; (4001c4 <sys_init+0x10>)
  4001b8:	4798      	blx	r3
  board_init();   // Board init
  4001ba:	4b03      	ldr	r3, [pc, #12]	; (4001c8 <sys_init+0x14>)
  4001bc:	4798      	blx	r3
  bsp_hw_init();  // Hardware init
  4001be:	4b03      	ldr	r3, [pc, #12]	; (4001cc <sys_init+0x18>)
  4001c0:	4798      	blx	r3
  4001c2:	bd08      	pop	{r3, pc}
  4001c4:	004034fd 	.word	0x004034fd
  4001c8:	0040111d 	.word	0x0040111d
  4001cc:	00400165 	.word	0x00400165

004001d0 <sys_run>:
}

void sys_run(void)
{
  4001d0:	b530      	push	{r4, r5, lr}
  4001d2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
  FATFS fs;    // File system variable
  FIL fhandle; // File handle variable
  char buf[25];

  // Test file name (note 0: indicates volume 0)
  const char test_file_name[] = "0:sam_arm_sd.txt";
  4001d6:	ac01      	add	r4, sp, #4
  4001d8:	4d13      	ldr	r5, [pc, #76]	; (400228 <sys_run+0x58>)
  4001da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4001dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4001de:	682b      	ldr	r3, [r5, #0]
  4001e0:	7023      	strb	r3, [r4, #0]

  // Mount the file system
  if (f_mount(LUN_ID_SD_MMC_0_MEM, &fs) != FR_OK)
  4001e2:	a996      	add	r1, sp, #600	; 0x258
  4001e4:	2000      	movs	r0, #0
  4001e6:	4b11      	ldr	r3, [pc, #68]	; (40022c <sys_run+0x5c>)
  4001e8:	4798      	blx	r3
  4001ea:	b110      	cbz	r0, 4001f2 <sys_run+0x22>
  }

  // Nothing else to do
  while (1)
    ;
}
  4001ec:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
  4001f0:	bd30      	pop	{r4, r5, pc}
  if (f_open(&fhandle, test_file_name, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
  4001f2:	220a      	movs	r2, #10
  4001f4:	a901      	add	r1, sp, #4
  4001f6:	a80d      	add	r0, sp, #52	; 0x34
  4001f8:	4b0d      	ldr	r3, [pc, #52]	; (400230 <sys_run+0x60>)
  4001fa:	4798      	blx	r3
  4001fc:	b100      	cbz	r0, 400200 <sys_run+0x30>
  4001fe:	e7fe      	b.n	4001fe <sys_run+0x2e>
    uint32_t cap = sd_mmc_get_capacity(0);
  400200:	4b0c      	ldr	r3, [pc, #48]	; (400234 <sys_run+0x64>)
  400202:	4798      	blx	r3
    sprintf(buf, "Capacity: %lu\n", cap);
  400204:	4602      	mov	r2, r0
  400206:	490c      	ldr	r1, [pc, #48]	; (400238 <sys_run+0x68>)
  400208:	a806      	add	r0, sp, #24
  40020a:	4b0c      	ldr	r3, [pc, #48]	; (40023c <sys_run+0x6c>)
  40020c:	4798      	blx	r3
    if (f_puts(buf, &fhandle) != 0)
  40020e:	a90d      	add	r1, sp, #52	; 0x34
  400210:	a806      	add	r0, sp, #24
  400212:	4b0b      	ldr	r3, [pc, #44]	; (400240 <sys_run+0x70>)
  400214:	4798      	blx	r3
  400216:	b110      	cbz	r0, 40021e <sys_run+0x4e>
      pio_set_pin_high(LED_0_PIN);
  400218:	2076      	movs	r0, #118	; 0x76
  40021a:	4b0a      	ldr	r3, [pc, #40]	; (400244 <sys_run+0x74>)
  40021c:	4798      	blx	r3
    f_close(&fhandle);
  40021e:	a80d      	add	r0, sp, #52	; 0x34
  400220:	4b09      	ldr	r3, [pc, #36]	; (400248 <sys_run+0x78>)
  400222:	4798      	blx	r3
  400224:	e7eb      	b.n	4001fe <sys_run+0x2e>
  400226:	bf00      	nop
  400228:	00408144 	.word	0x00408144
  40022c:	00402f7d 	.word	0x00402f7d
  400230:	00402fa1 	.word	0x00402fa1
  400234:	00400c19 	.word	0x00400c19
  400238:	00408134 	.word	0x00408134
  40023c:	0040390d 	.word	0x0040390d
  400240:	00403445 	.word	0x00403445
  400244:	004036cb 	.word	0x004036cb
  400248:	00403401 	.word	0x00403401

0040024c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  40024c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40024e:	4b06      	ldr	r3, [pc, #24]	; (400268 <sd_mmc_configure_slot+0x1c>)
  400250:	6819      	ldr	r1, [r3, #0]
  400252:	7f8b      	ldrb	r3, [r1, #30]
  400254:	3300      	adds	r3, #0
  400256:	bf18      	it	ne
  400258:	2301      	movne	r3, #1
  40025a:	7b4a      	ldrb	r2, [r1, #13]
  40025c:	6809      	ldr	r1, [r1, #0]
  40025e:	4803      	ldr	r0, [pc, #12]	; (40026c <sd_mmc_configure_slot+0x20>)
  400260:	7800      	ldrb	r0, [r0, #0]
  400262:	4c03      	ldr	r4, [pc, #12]	; (400270 <sd_mmc_configure_slot+0x24>)
  400264:	47a0      	blx	r4
  400266:	bd10      	pop	{r4, pc}
  400268:	200009d4 	.word	0x200009d4
  40026c:	200009fc 	.word	0x200009fc
  400270:	0040135d 	.word	0x0040135d

00400274 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  400274:	b108      	cbz	r0, 40027a <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  400276:	2004      	movs	r0, #4
  400278:	4770      	bx	lr
{
  40027a:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  40027c:	4b0e      	ldr	r3, [pc, #56]	; (4002b8 <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  40027e:	7a9b      	ldrb	r3, [r3, #10]
  400280:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  400282:	b2db      	uxtb	r3, r3
  400284:	2b01      	cmp	r3, #1
  400286:	d90d      	bls.n	4002a4 <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  400288:	2200      	movs	r2, #0
  40028a:	4b0c      	ldr	r3, [pc, #48]	; (4002bc <sd_mmc_select_slot+0x48>)
  40028c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40028e:	4c0a      	ldr	r4, [pc, #40]	; (4002b8 <sd_mmc_select_slot+0x44>)
  400290:	4b0b      	ldr	r3, [pc, #44]	; (4002c0 <sd_mmc_select_slot+0x4c>)
  400292:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  400294:	4b0b      	ldr	r3, [pc, #44]	; (4002c4 <sd_mmc_select_slot+0x50>)
  400296:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400298:	7aa0      	ldrb	r0, [r4, #10]
  40029a:	2802      	cmp	r0, #2
  40029c:	bf14      	ite	ne
  40029e:	2000      	movne	r0, #0
  4002a0:	2001      	moveq	r0, #1
  4002a2:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  4002a4:	4b04      	ldr	r3, [pc, #16]	; (4002b8 <sd_mmc_select_slot+0x44>)
  4002a6:	2202      	movs	r2, #2
  4002a8:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  4002aa:	4a07      	ldr	r2, [pc, #28]	; (4002c8 <sd_mmc_select_slot+0x54>)
  4002ac:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  4002ae:	2201      	movs	r2, #1
  4002b0:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  4002b2:	2200      	movs	r2, #0
  4002b4:	779a      	strb	r2, [r3, #30]
  4002b6:	e7e7      	b.n	400288 <sd_mmc_select_slot+0x14>
  4002b8:	200009d8 	.word	0x200009d8
  4002bc:	200009fc 	.word	0x200009fc
  4002c0:	200009d4 	.word	0x200009d4
  4002c4:	0040024d 	.word	0x0040024d
  4002c8:	00061a80 	.word	0x00061a80

004002cc <sdio_cmd52>:
{
  4002cc:	b538      	push	{r3, r4, r5, lr}
  4002ce:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  4002d0:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002d2:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  4002d6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  4002da:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  4002de:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4002e0:	4311      	orrs	r1, r2
  4002e2:	f241 3034 	movw	r0, #4916	; 0x1334
  4002e6:	4b05      	ldr	r3, [pc, #20]	; (4002fc <sdio_cmd52+0x30>)
  4002e8:	4798      	blx	r3
  4002ea:	4605      	mov	r5, r0
  4002ec:	b908      	cbnz	r0, 4002f2 <sdio_cmd52+0x26>
}
  4002ee:	4628      	mov	r0, r5
  4002f0:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  4002f2:	4b03      	ldr	r3, [pc, #12]	; (400300 <sdio_cmd52+0x34>)
  4002f4:	4798      	blx	r3
  4002f6:	7020      	strb	r0, [r4, #0]
	return true;
  4002f8:	e7f9      	b.n	4002ee <sdio_cmd52+0x22>
  4002fa:	bf00      	nop
  4002fc:	0040143d 	.word	0x0040143d
  400300:	00401469 	.word	0x00401469

00400304 <sd_mmc_cmd9_mci>:
{
  400304:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  400306:	4b09      	ldr	r3, [pc, #36]	; (40032c <sd_mmc_cmd9_mci+0x28>)
  400308:	681b      	ldr	r3, [r3, #0]
  40030a:	8919      	ldrh	r1, [r3, #8]
  40030c:	0409      	lsls	r1, r1, #16
  40030e:	f641 3009 	movw	r0, #6921	; 0x1b09
  400312:	4b07      	ldr	r3, [pc, #28]	; (400330 <sd_mmc_cmd9_mci+0x2c>)
  400314:	4798      	blx	r3
  400316:	4604      	mov	r4, r0
  400318:	b908      	cbnz	r0, 40031e <sd_mmc_cmd9_mci+0x1a>
}
  40031a:	4620      	mov	r0, r4
  40031c:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  40031e:	4b03      	ldr	r3, [pc, #12]	; (40032c <sd_mmc_cmd9_mci+0x28>)
  400320:	6818      	ldr	r0, [r3, #0]
  400322:	300e      	adds	r0, #14
  400324:	4b03      	ldr	r3, [pc, #12]	; (400334 <sd_mmc_cmd9_mci+0x30>)
  400326:	4798      	blx	r3
	return true;
  400328:	e7f7      	b.n	40031a <sd_mmc_cmd9_mci+0x16>
  40032a:	bf00      	nop
  40032c:	200009d4 	.word	0x200009d4
  400330:	0040143d 	.word	0x0040143d
  400334:	00401475 	.word	0x00401475

00400338 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400338:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40033a:	4b04      	ldr	r3, [pc, #16]	; (40034c <sd_mmc_deselect_slot+0x14>)
  40033c:	781b      	ldrb	r3, [r3, #0]
  40033e:	b103      	cbz	r3, 400342 <sd_mmc_deselect_slot+0xa>
  400340:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  400342:	2000      	movs	r0, #0
  400344:	4b02      	ldr	r3, [pc, #8]	; (400350 <sd_mmc_deselect_slot+0x18>)
  400346:	4798      	blx	r3
	}
}
  400348:	e7fa      	b.n	400340 <sd_mmc_deselect_slot+0x8>
  40034a:	bf00      	nop
  40034c:	200009fc 	.word	0x200009fc
  400350:	00401415 	.word	0x00401415

00400354 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  400354:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400356:	2204      	movs	r2, #4
  400358:	4b03      	ldr	r3, [pc, #12]	; (400368 <sd_mmc_init+0x14>)
  40035a:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  40035c:	22ff      	movs	r2, #255	; 0xff
  40035e:	4b03      	ldr	r3, [pc, #12]	; (40036c <sd_mmc_init+0x18>)
  400360:	701a      	strb	r2, [r3, #0]
	driver_init();
  400362:	4b03      	ldr	r3, [pc, #12]	; (400370 <sd_mmc_init+0x1c>)
  400364:	4798      	blx	r3
  400366:	bd08      	pop	{r3, pc}
  400368:	200009d8 	.word	0x200009d8
  40036c:	200009fc 	.word	0x200009fc
  400370:	00401325 	.word	0x00401325

00400374 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  400374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400378:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40037a:	4ba7      	ldr	r3, [pc, #668]	; (400618 <sd_mmc_check+0x2a4>)
  40037c:	4798      	blx	r3
  40037e:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  400380:	2801      	cmp	r0, #1
  400382:	d005      	beq.n	400390 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  400384:	4ba5      	ldr	r3, [pc, #660]	; (40061c <sd_mmc_check+0x2a8>)
  400386:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  400388:	4620      	mov	r0, r4
  40038a:	b015      	add	sp, #84	; 0x54
  40038c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  400390:	ae14      	add	r6, sp, #80	; 0x50
  400392:	2308      	movs	r3, #8
  400394:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  400398:	4ba1      	ldr	r3, [pc, #644]	; (400620 <sd_mmc_check+0x2ac>)
  40039a:	681b      	ldr	r3, [r3, #0]
  40039c:	2701      	movs	r7, #1
  40039e:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4003a0:	2500      	movs	r5, #0
  4003a2:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  4003a4:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
  4003a6:	4b9f      	ldr	r3, [pc, #636]	; (400624 <sd_mmc_check+0x2b0>)
  4003a8:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4003aa:	9600      	str	r6, [sp, #0]
  4003ac:	462b      	mov	r3, r5
  4003ae:	2206      	movs	r2, #6
  4003b0:	4629      	mov	r1, r5
  4003b2:	4638      	mov	r0, r7
  4003b4:	4e9c      	ldr	r6, [pc, #624]	; (400628 <sd_mmc_check+0x2b4>)
  4003b6:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4003b8:	4629      	mov	r1, r5
  4003ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4003be:	4b9b      	ldr	r3, [pc, #620]	; (40062c <sd_mmc_check+0x2b8>)
  4003c0:	4798      	blx	r3
  4003c2:	b930      	cbnz	r0, 4003d2 <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4003c4:	4b96      	ldr	r3, [pc, #600]	; (400620 <sd_mmc_check+0x2ac>)
  4003c6:	681b      	ldr	r3, [r3, #0]
  4003c8:	2403      	movs	r4, #3
  4003ca:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  4003cc:	4b93      	ldr	r3, [pc, #588]	; (40061c <sd_mmc_check+0x2a8>)
  4003ce:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4003d0:	e7da      	b.n	400388 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4003d2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4003d6:	f245 5008 	movw	r0, #21768	; 0x5508
  4003da:	4b94      	ldr	r3, [pc, #592]	; (40062c <sd_mmc_check+0x2b8>)
  4003dc:	4798      	blx	r3
  4003de:	2800      	cmp	r0, #0
  4003e0:	f040 8093 	bne.w	40050a <sd_mmc_check+0x196>
	*v2 = 0;
  4003e4:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  4003e8:	2100      	movs	r1, #0
  4003ea:	f244 5005 	movw	r0, #17669	; 0x4505
  4003ee:	4b8f      	ldr	r3, [pc, #572]	; (40062c <sd_mmc_check+0x2b8>)
  4003f0:	4798      	blx	r3
  4003f2:	2800      	cmp	r0, #0
  4003f4:	f040 8097 	bne.w	400526 <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4003f8:	4b89      	ldr	r3, [pc, #548]	; (400620 <sd_mmc_check+0x2ac>)
  4003fa:	681b      	ldr	r3, [r3, #0]
  4003fc:	7adb      	ldrb	r3, [r3, #11]
  4003fe:	f013 0f01 	tst.w	r3, #1
  400402:	f040 80b5 	bne.w	400570 <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400406:	2100      	movs	r1, #0
  400408:	f245 1003 	movw	r0, #20739	; 0x5103
  40040c:	4b87      	ldr	r3, [pc, #540]	; (40062c <sd_mmc_check+0x2b8>)
  40040e:	4798      	blx	r3
  400410:	2800      	cmp	r0, #0
  400412:	d0d7      	beq.n	4003c4 <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400414:	4d82      	ldr	r5, [pc, #520]	; (400620 <sd_mmc_check+0x2ac>)
  400416:	682e      	ldr	r6, [r5, #0]
  400418:	4b85      	ldr	r3, [pc, #532]	; (400630 <sd_mmc_check+0x2bc>)
  40041a:	4798      	blx	r3
  40041c:	0c00      	lsrs	r0, r0, #16
  40041e:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400420:	682b      	ldr	r3, [r5, #0]
  400422:	7adb      	ldrb	r3, [r3, #11]
  400424:	f013 0f01 	tst.w	r3, #1
  400428:	d034      	beq.n	400494 <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  40042a:	4b82      	ldr	r3, [pc, #520]	; (400634 <sd_mmc_check+0x2c0>)
  40042c:	4798      	blx	r3
  40042e:	2800      	cmp	r0, #0
  400430:	d0c8      	beq.n	4003c4 <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400432:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400434:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400436:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40043a:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  40043e:	497e      	ldr	r1, [pc, #504]	; (400638 <sd_mmc_check+0x2c4>)
  400440:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  400444:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400448:	fb02 f201 	mul.w	r2, r2, r1
  40044c:	497b      	ldr	r1, [pc, #492]	; (40063c <sd_mmc_check+0x2c8>)
  40044e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400452:	fb02 f201 	mul.w	r2, r2, r1
  400456:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400458:	7b9a      	ldrb	r2, [r3, #14]
  40045a:	0992      	lsrs	r2, r2, #6
  40045c:	f040 820b 	bne.w	400876 <sd_mmc_check+0x502>
  400460:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400462:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400464:	7d1a      	ldrb	r2, [r3, #20]
  400466:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400468:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  40046c:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400470:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400472:	7dd9      	ldrb	r1, [r3, #23]
  400474:	0049      	lsls	r1, r1, #1
  400476:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  40047a:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40047e:	3201      	adds	r2, #1
  400480:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400484:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400486:	408a      	lsls	r2, r1
  400488:	7cd9      	ldrb	r1, [r3, #19]
  40048a:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40048e:	408a      	lsls	r2, r1
				/ 1024;
  400490:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  400492:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400494:	4b62      	ldr	r3, [pc, #392]	; (400620 <sd_mmc_check+0x2ac>)
  400496:	681b      	ldr	r3, [r3, #0]
  400498:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40049a:	0409      	lsls	r1, r1, #16
  40049c:	f243 1007 	movw	r0, #12551	; 0x3107
  4004a0:	4b62      	ldr	r3, [pc, #392]	; (40062c <sd_mmc_check+0x2b8>)
  4004a2:	4798      	blx	r3
  4004a4:	2800      	cmp	r0, #0
  4004a6:	d08d      	beq.n	4003c4 <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4004a8:	4b5d      	ldr	r3, [pc, #372]	; (400620 <sd_mmc_check+0x2ac>)
  4004aa:	681b      	ldr	r3, [r3, #0]
  4004ac:	7ada      	ldrb	r2, [r3, #11]
  4004ae:	f012 0f01 	tst.w	r2, #1
  4004b2:	f040 81ed 	bne.w	400890 <sd_mmc_check+0x51c>
	if (IS_SDIO()) {
  4004b6:	4b5a      	ldr	r3, [pc, #360]	; (400620 <sd_mmc_check+0x2ac>)
  4004b8:	681b      	ldr	r3, [r3, #0]
  4004ba:	7adb      	ldrb	r3, [r3, #11]
  4004bc:	f013 0f04 	tst.w	r3, #4
  4004c0:	f000 829c 	beq.w	4009fc <sd_mmc_check+0x688>
  4004c4:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4004c6:	2700      	movs	r7, #0
  4004c8:	4e57      	ldr	r6, [pc, #348]	; (400628 <sd_mmc_check+0x2b4>)
  4004ca:	f1a5 0309 	sub.w	r3, r5, #9
  4004ce:	aa03      	add	r2, sp, #12
  4004d0:	4413      	add	r3, r2
  4004d2:	9300      	str	r3, [sp, #0]
  4004d4:	463b      	mov	r3, r7
  4004d6:	462a      	mov	r2, r5
  4004d8:	4639      	mov	r1, r7
  4004da:	4638      	mov	r0, r7
  4004dc:	47b0      	blx	r6
		addr_old++;
  4004de:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  4004e0:	2d0d      	cmp	r5, #13
  4004e2:	d1f2      	bne.n	4004ca <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4004e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
  4004e8:	f89d 900c 	ldrb.w	r9, [sp, #12]
  4004ec:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  4004f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4004f4:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  4004f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
  4004fc:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  400500:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400502:	f04f 0800 	mov.w	r8, #0
  400506:	4f48      	ldr	r7, [pc, #288]	; (400628 <sd_mmc_check+0x2b4>)
  400508:	e239      	b.n	40097e <sd_mmc_check+0x60a>
	resp = driver_get_response();
  40050a:	4b49      	ldr	r3, [pc, #292]	; (400630 <sd_mmc_check+0x2bc>)
  40050c:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40050e:	f1b0 3fff 	cmp.w	r0, #4294967295
  400512:	f000 8347 	beq.w	400ba4 <sd_mmc_check+0x830>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400516:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40051a:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40051e:	f47f af51 	bne.w	4003c4 <sd_mmc_check+0x50>
	*v2 = 1;
  400522:	46b9      	mov	r9, r7
  400524:	e760      	b.n	4003e8 <sd_mmc_check+0x74>
	resp = driver_get_response();
  400526:	4b42      	ldr	r3, [pc, #264]	; (400630 <sd_mmc_check+0x2bc>)
  400528:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  40052a:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  40052e:	f43f af63 	beq.w	4003f8 <sd_mmc_check+0x84>
  400532:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400536:	f244 5805 	movw	r8, #17669	; 0x4505
  40053a:	4e3c      	ldr	r6, [pc, #240]	; (40062c <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  40053c:	4f3c      	ldr	r7, [pc, #240]	; (400630 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40053e:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  400542:	4640      	mov	r0, r8
  400544:	47b0      	blx	r6
  400546:	2800      	cmp	r0, #0
  400548:	f43f af3c 	beq.w	4003c4 <sd_mmc_check+0x50>
		resp = driver_get_response();
  40054c:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  40054e:	2800      	cmp	r0, #0
  400550:	db02      	blt.n	400558 <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  400552:	3d01      	subs	r5, #1
  400554:	d1f3      	bne.n	40053e <sd_mmc_check+0x1ca>
  400556:	e735      	b.n	4003c4 <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  400558:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  40055c:	d104      	bne.n	400568 <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  40055e:	4b30      	ldr	r3, [pc, #192]	; (400620 <sd_mmc_check+0x2ac>)
  400560:	681b      	ldr	r3, [r3, #0]
  400562:	2204      	movs	r2, #4
  400564:	72da      	strb	r2, [r3, #11]
  400566:	e74e      	b.n	400406 <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  400568:	4b2d      	ldr	r3, [pc, #180]	; (400620 <sd_mmc_check+0x2ac>)
  40056a:	681b      	ldr	r3, [r3, #0]
  40056c:	2205      	movs	r2, #5
  40056e:	72da      	strb	r2, [r3, #11]
  400570:	f1b9 0f00 	cmp.w	r9, #0
  400574:	4f32      	ldr	r7, [pc, #200]	; (400640 <sd_mmc_check+0x2cc>)
  400576:	bf14      	ite	ne
  400578:	46b9      	movne	r9, r7
  40057a:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  40057e:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  400582:	f04f 0800 	mov.w	r8, #0
  400586:	4e29      	ldr	r6, [pc, #164]	; (40062c <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400588:	4f29      	ldr	r7, [pc, #164]	; (400630 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40058a:	4641      	mov	r1, r8
  40058c:	f241 1037 	movw	r0, #4407	; 0x1137
  400590:	47b0      	blx	r6
  400592:	b148      	cbz	r0, 4005a8 <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  400594:	4649      	mov	r1, r9
  400596:	f244 5029 	movw	r0, #17705	; 0x4529
  40059a:	47b0      	blx	r6
  40059c:	b120      	cbz	r0, 4005a8 <sd_mmc_check+0x234>
		resp = driver_get_response();
  40059e:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005a0:	2800      	cmp	r0, #0
  4005a2:	db20      	blt.n	4005e6 <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4005a4:	3d01      	subs	r5, #1
  4005a6:	d1f0      	bne.n	40058a <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4005a8:	4b1d      	ldr	r3, [pc, #116]	; (400620 <sd_mmc_check+0x2ac>)
  4005aa:	681b      	ldr	r3, [r3, #0]
  4005ac:	2202      	movs	r2, #2
  4005ae:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4005b0:	2100      	movs	r1, #0
  4005b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4005b6:	4b1d      	ldr	r3, [pc, #116]	; (40062c <sd_mmc_check+0x2b8>)
  4005b8:	4798      	blx	r3
  4005ba:	2800      	cmp	r0, #0
  4005bc:	f43f af02 	beq.w	4003c4 <sd_mmc_check+0x50>
  4005c0:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005c4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400640 <sd_mmc_check+0x2cc>
  4005c8:	4e18      	ldr	r6, [pc, #96]	; (40062c <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4005ca:	4f19      	ldr	r7, [pc, #100]	; (400630 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4005cc:	4641      	mov	r1, r8
  4005ce:	f244 5001 	movw	r0, #17665	; 0x4501
  4005d2:	47b0      	blx	r6
  4005d4:	2800      	cmp	r0, #0
  4005d6:	f43f aef5 	beq.w	4003c4 <sd_mmc_check+0x50>
		resp = driver_get_response();
  4005da:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4005dc:	2800      	cmp	r0, #0
  4005de:	db31      	blt.n	400644 <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  4005e0:	3d01      	subs	r5, #1
  4005e2:	d1f3      	bne.n	4005cc <sd_mmc_check+0x258>
  4005e4:	e6ee      	b.n	4003c4 <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  4005e6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4005ea:	d005      	beq.n	4005f8 <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  4005ec:	4b0c      	ldr	r3, [pc, #48]	; (400620 <sd_mmc_check+0x2ac>)
  4005ee:	681a      	ldr	r2, [r3, #0]
  4005f0:	7ad3      	ldrb	r3, [r2, #11]
  4005f2:	f043 0308 	orr.w	r3, r3, #8
  4005f6:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4005f8:	4b09      	ldr	r3, [pc, #36]	; (400620 <sd_mmc_check+0x2ac>)
  4005fa:	681b      	ldr	r3, [r3, #0]
  4005fc:	7adb      	ldrb	r3, [r3, #11]
  4005fe:	f013 0f01 	tst.w	r3, #1
  400602:	f43f af00 	beq.w	400406 <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400606:	2100      	movs	r1, #0
  400608:	f645 3002 	movw	r0, #23298	; 0x5b02
  40060c:	4b07      	ldr	r3, [pc, #28]	; (40062c <sd_mmc_check+0x2b8>)
  40060e:	4798      	blx	r3
  400610:	2800      	cmp	r0, #0
  400612:	f47f aef8 	bne.w	400406 <sd_mmc_check+0x92>
  400616:	e6d5      	b.n	4003c4 <sd_mmc_check+0x50>
  400618:	00400275 	.word	0x00400275
  40061c:	00400339 	.word	0x00400339
  400620:	200009d4 	.word	0x200009d4
  400624:	00401419 	.word	0x00401419
  400628:	004002cd 	.word	0x004002cd
  40062c:	0040143d 	.word	0x0040143d
  400630:	00401469 	.word	0x00401469
  400634:	00400305 	.word	0x00400305
  400638:	00408198 	.word	0x00408198
  40063c:	004081b4 	.word	0x004081b4
  400640:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  400644:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  400648:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  40064c:	d027      	beq.n	40069e <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40064e:	2100      	movs	r1, #0
  400650:	f645 3002 	movw	r0, #23298	; 0x5b02
  400654:	4ba7      	ldr	r3, [pc, #668]	; (4008f4 <sd_mmc_check+0x580>)
  400656:	4798      	blx	r3
  400658:	2800      	cmp	r0, #0
  40065a:	f43f aeb3 	beq.w	4003c4 <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  40065e:	4ba6      	ldr	r3, [pc, #664]	; (4008f8 <sd_mmc_check+0x584>)
  400660:	681b      	ldr	r3, [r3, #0]
  400662:	2201      	movs	r2, #1
  400664:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  400666:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40066a:	f241 1003 	movw	r0, #4355	; 0x1103
  40066e:	4ba1      	ldr	r3, [pc, #644]	; (4008f4 <sd_mmc_check+0x580>)
  400670:	4798      	blx	r3
  400672:	2800      	cmp	r0, #0
  400674:	f43f aea6 	beq.w	4003c4 <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  400678:	4ba0      	ldr	r3, [pc, #640]	; (4008fc <sd_mmc_check+0x588>)
  40067a:	4798      	blx	r3
  40067c:	2800      	cmp	r0, #0
  40067e:	f43f aea1 	beq.w	4003c4 <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  400682:	4b9d      	ldr	r3, [pc, #628]	; (4008f8 <sd_mmc_check+0x584>)
  400684:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400686:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  400688:	f3c3 0383 	ubfx	r3, r3, #2, #4
  40068c:	3b01      	subs	r3, #1
  40068e:	2b03      	cmp	r3, #3
  400690:	d80c      	bhi.n	4006ac <sd_mmc_check+0x338>
  400692:	e8df f013 	tbh	[pc, r3, lsl #1]
  400696:	00cc      	.short	0x00cc
  400698:	00d200cf 	.word	0x00d200cf
  40069c:	00d5      	.short	0x00d5
				sd_mmc_card->type |= CARD_TYPE_HC;
  40069e:	4b96      	ldr	r3, [pc, #600]	; (4008f8 <sd_mmc_check+0x584>)
  4006a0:	681a      	ldr	r2, [r3, #0]
  4006a2:	7ad3      	ldrb	r3, [r2, #11]
  4006a4:	f043 0308 	orr.w	r3, r3, #8
  4006a8:	72d3      	strb	r3, [r2, #11]
  4006aa:	e7d0      	b.n	40064e <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4006ac:	2312      	movs	r3, #18
  4006ae:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006b0:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4006b2:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4006b6:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4006ba:	4991      	ldr	r1, [pc, #580]	; (400900 <sd_mmc_check+0x58c>)
  4006bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4006c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4006c4:	fb03 f301 	mul.w	r3, r3, r1
  4006c8:	498e      	ldr	r1, [pc, #568]	; (400904 <sd_mmc_check+0x590>)
  4006ca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4006ce:	fb03 f301 	mul.w	r3, r3, r1
  4006d2:	6013      	str	r3, [r2, #0]
  4006d4:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006d6:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006d8:	7d13      	ldrb	r3, [r2, #20]
  4006da:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006dc:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  4006e0:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4006e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4006e8:	f640 71ff 	movw	r1, #4095	; 0xfff
  4006ec:	428b      	cmp	r3, r1
  4006ee:	d00f      	beq.n	400710 <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4006f0:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4006f2:	7dd1      	ldrb	r1, [r2, #23]
  4006f4:	0049      	lsls	r1, r1, #1
  4006f6:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  4006fa:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  4006fc:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400700:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400702:	408b      	lsls	r3, r1
  400704:	7cd1      	ldrb	r1, [r2, #19]
  400706:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  40070a:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  40070c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  40070e:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400710:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400712:	0409      	lsls	r1, r1, #16
  400714:	f243 1007 	movw	r0, #12551	; 0x3107
  400718:	4b76      	ldr	r3, [pc, #472]	; (4008f4 <sd_mmc_check+0x580>)
  40071a:	4798      	blx	r3
  40071c:	2800      	cmp	r0, #0
  40071e:	f43f ae51 	beq.w	4003c4 <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400722:	4b75      	ldr	r3, [pc, #468]	; (4008f8 <sd_mmc_check+0x584>)
  400724:	681b      	ldr	r3, [r3, #0]
  400726:	7b1b      	ldrb	r3, [r3, #12]
  400728:	2b3f      	cmp	r3, #63	; 0x3f
  40072a:	f240 8096 	bls.w	40085a <sd_mmc_check+0x4e6>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  40072e:	2100      	movs	r1, #0
  400730:	9100      	str	r1, [sp, #0]
  400732:	2301      	movs	r3, #1
  400734:	f44f 7200 	mov.w	r2, #512	; 0x200
  400738:	4873      	ldr	r0, [pc, #460]	; (400908 <sd_mmc_check+0x594>)
  40073a:	4d74      	ldr	r5, [pc, #464]	; (40090c <sd_mmc_check+0x598>)
  40073c:	47a8      	blx	r5
  40073e:	2800      	cmp	r0, #0
  400740:	f43f ae40 	beq.w	4003c4 <sd_mmc_check+0x50>
  400744:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  400746:	4e72      	ldr	r6, [pc, #456]	; (400910 <sd_mmc_check+0x59c>)
  400748:	a803      	add	r0, sp, #12
  40074a:	47b0      	blx	r6
  40074c:	2800      	cmp	r0, #0
  40074e:	f43f ae39 	beq.w	4003c4 <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  400752:	3501      	adds	r5, #1
  400754:	b2ad      	uxth	r5, r5
  400756:	2d32      	cmp	r5, #50	; 0x32
  400758:	d1f6      	bne.n	400748 <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  40075a:	9e03      	ldr	r6, [sp, #12]
  40075c:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400760:	4b65      	ldr	r3, [pc, #404]	; (4008f8 <sd_mmc_check+0x584>)
  400762:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400764:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400766:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400768:	7d1b      	ldrb	r3, [r3, #20]
  40076a:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40076c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  400770:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  400774:	f3c3 030b 	ubfx	r3, r3, #0, #12
  400778:	f640 72ff 	movw	r2, #4095	; 0xfff
  40077c:	4293      	cmp	r3, r2
  40077e:	d10e      	bne.n	40079e <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  400780:	4f63      	ldr	r7, [pc, #396]	; (400910 <sd_mmc_check+0x59c>)
  400782:	a804      	add	r0, sp, #16
  400784:	47b8      	blx	r7
  400786:	2800      	cmp	r0, #0
  400788:	f43f ae1c 	beq.w	4003c4 <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  40078c:	3501      	adds	r5, #1
  40078e:	b2ad      	uxth	r5, r5
  400790:	2d35      	cmp	r5, #53	; 0x35
  400792:	d9f6      	bls.n	400782 <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  400794:	4b58      	ldr	r3, [pc, #352]	; (4008f8 <sd_mmc_check+0x584>)
  400796:	681a      	ldr	r2, [r3, #0]
  400798:	9b04      	ldr	r3, [sp, #16]
  40079a:	085b      	lsrs	r3, r3, #1
  40079c:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  40079e:	4f5c      	ldr	r7, [pc, #368]	; (400910 <sd_mmc_check+0x59c>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4007a0:	2d7f      	cmp	r5, #127	; 0x7f
  4007a2:	d950      	bls.n	400846 <sd_mmc_check+0x4d2>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4007a4:	4b5b      	ldr	r3, [pc, #364]	; (400914 <sd_mmc_check+0x5a0>)
  4007a6:	7818      	ldrb	r0, [r3, #0]
  4007a8:	4b5b      	ldr	r3, [pc, #364]	; (400918 <sd_mmc_check+0x5a4>)
  4007aa:	4798      	blx	r3
  4007ac:	2803      	cmp	r0, #3
  4007ae:	d91d      	bls.n	4007ec <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4007b0:	4b58      	ldr	r3, [pc, #352]	; (400914 <sd_mmc_check+0x5a0>)
  4007b2:	7818      	ldrb	r0, [r3, #0]
  4007b4:	4b58      	ldr	r3, [pc, #352]	; (400918 <sd_mmc_check+0x5a4>)
  4007b6:	4798      	blx	r3
  4007b8:	4605      	mov	r5, r0
	switch (bus_width) {
  4007ba:	2804      	cmp	r0, #4
  4007bc:	d04b      	beq.n	400856 <sd_mmc_check+0x4e2>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4007be:	4b57      	ldr	r3, [pc, #348]	; (40091c <sd_mmc_check+0x5a8>)
  4007c0:	4957      	ldr	r1, [pc, #348]	; (400920 <sd_mmc_check+0x5ac>)
  4007c2:	2808      	cmp	r0, #8
  4007c4:	bf18      	it	ne
  4007c6:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4007c8:	f243 1006 	movw	r0, #12550	; 0x3106
  4007cc:	4b49      	ldr	r3, [pc, #292]	; (4008f4 <sd_mmc_check+0x580>)
  4007ce:	4798      	blx	r3
  4007d0:	2800      	cmp	r0, #0
  4007d2:	f43f adf7 	beq.w	4003c4 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4007d6:	4b53      	ldr	r3, [pc, #332]	; (400924 <sd_mmc_check+0x5b0>)
  4007d8:	4798      	blx	r3
  4007da:	f010 0f80 	tst.w	r0, #128	; 0x80
  4007de:	f47f adf1 	bne.w	4003c4 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  4007e2:	4b45      	ldr	r3, [pc, #276]	; (4008f8 <sd_mmc_check+0x584>)
  4007e4:	681b      	ldr	r3, [r3, #0]
  4007e6:	735d      	strb	r5, [r3, #13]
			sd_mmc_configure_slot();
  4007e8:	4b4f      	ldr	r3, [pc, #316]	; (400928 <sd_mmc_check+0x5b4>)
  4007ea:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  4007ec:	4b4f      	ldr	r3, [pc, #316]	; (40092c <sd_mmc_check+0x5b8>)
  4007ee:	4798      	blx	r3
  4007f0:	b1b0      	cbz	r0, 400820 <sd_mmc_check+0x4ac>
  4007f2:	b1ae      	cbz	r6, 400820 <sd_mmc_check+0x4ac>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  4007f4:	494e      	ldr	r1, [pc, #312]	; (400930 <sd_mmc_check+0x5bc>)
  4007f6:	f243 1006 	movw	r0, #12550	; 0x3106
  4007fa:	4b3e      	ldr	r3, [pc, #248]	; (4008f4 <sd_mmc_check+0x580>)
  4007fc:	4798      	blx	r3
  4007fe:	2800      	cmp	r0, #0
  400800:	f43f ade0 	beq.w	4003c4 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400804:	4b47      	ldr	r3, [pc, #284]	; (400924 <sd_mmc_check+0x5b0>)
  400806:	4798      	blx	r3
  400808:	f010 0f80 	tst.w	r0, #128	; 0x80
  40080c:	f47f adda 	bne.w	4003c4 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400810:	4b39      	ldr	r3, [pc, #228]	; (4008f8 <sd_mmc_check+0x584>)
  400812:	681b      	ldr	r3, [r3, #0]
  400814:	2201      	movs	r2, #1
  400816:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  400818:	4a46      	ldr	r2, [pc, #280]	; (400934 <sd_mmc_check+0x5c0>)
  40081a:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  40081c:	4b42      	ldr	r3, [pc, #264]	; (400928 <sd_mmc_check+0x5b4>)
  40081e:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400820:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400822:	f44f 7800 	mov.w	r8, #512	; 0x200
  400826:	f241 1710 	movw	r7, #4368	; 0x1110
  40082a:	4e32      	ldr	r6, [pc, #200]	; (4008f4 <sd_mmc_check+0x580>)
  40082c:	e01d      	b.n	40086a <sd_mmc_check+0x4f6>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  40082e:	2314      	movs	r3, #20
  400830:	7313      	strb	r3, [r2, #12]
  400832:	e73d      	b.n	4006b0 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  400834:	2322      	movs	r3, #34	; 0x22
  400836:	7313      	strb	r3, [r2, #12]
  400838:	e73a      	b.n	4006b0 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  40083a:	2330      	movs	r3, #48	; 0x30
  40083c:	7313      	strb	r3, [r2, #12]
  40083e:	e737      	b.n	4006b0 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400840:	2340      	movs	r3, #64	; 0x40
  400842:	7313      	strb	r3, [r2, #12]
  400844:	e734      	b.n	4006b0 <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  400846:	a804      	add	r0, sp, #16
  400848:	47b8      	blx	r7
  40084a:	2800      	cmp	r0, #0
  40084c:	f43f adba 	beq.w	4003c4 <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400850:	3501      	adds	r5, #1
  400852:	b2ad      	uxth	r5, r5
  400854:	e7a4      	b.n	4007a0 <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  400856:	4938      	ldr	r1, [pc, #224]	; (400938 <sd_mmc_check+0x5c4>)
  400858:	e7b6      	b.n	4007c8 <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  40085a:	4b33      	ldr	r3, [pc, #204]	; (400928 <sd_mmc_check+0x5b4>)
  40085c:	4798      	blx	r3
  40085e:	e7df      	b.n	400820 <sd_mmc_check+0x4ac>
  400860:	3d01      	subs	r5, #1
	while (retry--) {
  400862:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  400866:	f43f adad 	beq.w	4003c4 <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40086a:	4641      	mov	r1, r8
  40086c:	4638      	mov	r0, r7
  40086e:	47b0      	blx	r6
  400870:	2800      	cmp	r0, #0
  400872:	d0f5      	beq.n	400860 <sd_mmc_check+0x4ec>
  400874:	e10e      	b.n	400a94 <sd_mmc_check+0x720>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400876:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400878:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40087a:	7d5a      	ldrb	r2, [r3, #21]
  40087c:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40087e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  400882:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  400884:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  400888:	3201      	adds	r2, #1
  40088a:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  40088c:	605a      	str	r2, [r3, #4]
  40088e:	e601      	b.n	400494 <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400890:	8919      	ldrh	r1, [r3, #8]
  400892:	0409      	lsls	r1, r1, #16
  400894:	f241 1037 	movw	r0, #4407	; 0x1137
  400898:	4b16      	ldr	r3, [pc, #88]	; (4008f4 <sd_mmc_check+0x580>)
  40089a:	4798      	blx	r3
  40089c:	2800      	cmp	r0, #0
  40089e:	f43f ad91 	beq.w	4003c4 <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4008a2:	2301      	movs	r3, #1
  4008a4:	9300      	str	r3, [sp, #0]
  4008a6:	2208      	movs	r2, #8
  4008a8:	2100      	movs	r1, #0
  4008aa:	4824      	ldr	r0, [pc, #144]	; (40093c <sd_mmc_check+0x5c8>)
  4008ac:	4d17      	ldr	r5, [pc, #92]	; (40090c <sd_mmc_check+0x598>)
  4008ae:	47a8      	blx	r5
  4008b0:	2800      	cmp	r0, #0
  4008b2:	f43f ad87 	beq.w	4003c4 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  4008b6:	2101      	movs	r1, #1
  4008b8:	a804      	add	r0, sp, #16
  4008ba:	4b21      	ldr	r3, [pc, #132]	; (400940 <sd_mmc_check+0x5cc>)
  4008bc:	4798      	blx	r3
  4008be:	2800      	cmp	r0, #0
  4008c0:	f43f ad80 	beq.w	4003c4 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  4008c4:	4b1f      	ldr	r3, [pc, #124]	; (400944 <sd_mmc_check+0x5d0>)
  4008c6:	4798      	blx	r3
  4008c8:	2800      	cmp	r0, #0
  4008ca:	f43f ad7b 	beq.w	4003c4 <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  4008ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008d2:	f003 030f 	and.w	r3, r3, #15
  4008d6:	2b01      	cmp	r3, #1
  4008d8:	d036      	beq.n	400948 <sd_mmc_check+0x5d4>
  4008da:	b133      	cbz	r3, 4008ea <sd_mmc_check+0x576>
  4008dc:	2b02      	cmp	r3, #2
  4008de:	d038      	beq.n	400952 <sd_mmc_check+0x5de>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4008e0:	4b05      	ldr	r3, [pc, #20]	; (4008f8 <sd_mmc_check+0x584>)
  4008e2:	681b      	ldr	r3, [r3, #0]
  4008e4:	2210      	movs	r2, #16
  4008e6:	731a      	strb	r2, [r3, #12]
  4008e8:	e5e5      	b.n	4004b6 <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4008ea:	4b03      	ldr	r3, [pc, #12]	; (4008f8 <sd_mmc_check+0x584>)
  4008ec:	681b      	ldr	r3, [r3, #0]
  4008ee:	2210      	movs	r2, #16
  4008f0:	731a      	strb	r2, [r3, #12]
  4008f2:	e5e0      	b.n	4004b6 <sd_mmc_check+0x142>
  4008f4:	0040143d 	.word	0x0040143d
  4008f8:	200009d4 	.word	0x200009d4
  4008fc:	00400305 	.word	0x00400305
  400900:	00408198 	.word	0x00408198
  400904:	00408158 	.word	0x00408158
  400908:	00081108 	.word	0x00081108
  40090c:	004014a5 	.word	0x004014a5
  400910:	00401569 	.word	0x00401569
  400914:	200009fc 	.word	0x200009fc
  400918:	0040134d 	.word	0x0040134d
  40091c:	01b70000 	.word	0x01b70000
  400920:	01b70200 	.word	0x01b70200
  400924:	00401469 	.word	0x00401469
  400928:	0040024d 	.word	0x0040024d
  40092c:	00401357 	.word	0x00401357
  400930:	03b90100 	.word	0x03b90100
  400934:	03197500 	.word	0x03197500
  400938:	01b70100 	.word	0x01b70100
  40093c:	00081133 	.word	0x00081133
  400940:	004015d9 	.word	0x004015d9
  400944:	0040163d 	.word	0x0040163d
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400948:	4b98      	ldr	r3, [pc, #608]	; (400bac <sd_mmc_check+0x838>)
  40094a:	681b      	ldr	r3, [r3, #0]
  40094c:	221a      	movs	r2, #26
  40094e:	731a      	strb	r2, [r3, #12]
  400950:	e5b1      	b.n	4004b6 <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  400952:	f89d 3012 	ldrb.w	r3, [sp, #18]
  400956:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400958:	4b94      	ldr	r3, [pc, #592]	; (400bac <sd_mmc_check+0x838>)
  40095a:	681b      	ldr	r3, [r3, #0]
  40095c:	bf14      	ite	ne
  40095e:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400960:	2220      	moveq	r2, #32
  400962:	731a      	strb	r2, [r3, #12]
  400964:	e5a7      	b.n	4004b6 <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  400966:	f89d 3011 	ldrb.w	r3, [sp, #17]
  40096a:	2b00      	cmp	r3, #0
  40096c:	f43f ad2a 	beq.w	4003c4 <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400970:	3302      	adds	r3, #2
  400972:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  400974:	f509 7380 	add.w	r3, r9, #256	; 0x100
  400978:	429e      	cmp	r6, r3
  40097a:	f63f ad23 	bhi.w	4003c4 <sd_mmc_check+0x50>
	addr_new = addr_old;
  40097e:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400980:	ab04      	add	r3, sp, #16
  400982:	442b      	add	r3, r5
  400984:	9300      	str	r3, [sp, #0]
  400986:	4643      	mov	r3, r8
  400988:	1972      	adds	r2, r6, r5
  40098a:	4641      	mov	r1, r8
  40098c:	4640      	mov	r0, r8
  40098e:	47b8      	blx	r7
  400990:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  400992:	2d03      	cmp	r5, #3
  400994:	d1f4      	bne.n	400980 <sd_mmc_check+0x60c>
		if (buf[0] == SDIO_CISTPL_END) {
  400996:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40099a:	2bff      	cmp	r3, #255	; 0xff
  40099c:	f43f ad12 	beq.w	4003c4 <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4009a0:	2b22      	cmp	r3, #34	; 0x22
  4009a2:	d1e0      	bne.n	400966 <sd_mmc_check+0x5f2>
  4009a4:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4009a8:	2b00      	cmp	r3, #0
  4009aa:	d1dc      	bne.n	400966 <sd_mmc_check+0x5f2>
  4009ac:	ad04      	add	r5, sp, #16
  4009ae:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4009b2:	f04f 0800 	mov.w	r8, #0
  4009b6:	4f7e      	ldr	r7, [pc, #504]	; (400bb0 <sd_mmc_check+0x83c>)
  4009b8:	9500      	str	r5, [sp, #0]
  4009ba:	4643      	mov	r3, r8
  4009bc:	4632      	mov	r2, r6
  4009be:	4641      	mov	r1, r8
  4009c0:	4640      	mov	r0, r8
  4009c2:	47b8      	blx	r7
		addr_new++;
  4009c4:	3601      	adds	r6, #1
  4009c6:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  4009c8:	454e      	cmp	r6, r9
  4009ca:	d1f5      	bne.n	4009b8 <sd_mmc_check+0x644>
	tplfe_max_tran_speed = buf[5];
  4009cc:	f89d 3015 	ldrb.w	r3, [sp, #21]
  4009d0:	2b32      	cmp	r3, #50	; 0x32
  4009d2:	bf28      	it	cs
  4009d4:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  4009d6:	4a75      	ldr	r2, [pc, #468]	; (400bac <sd_mmc_check+0x838>)
  4009d8:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  4009da:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  4009de:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4009e2:	4974      	ldr	r1, [pc, #464]	; (400bb4 <sd_mmc_check+0x840>)
  4009e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4009e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4009ec:	fb03 f301 	mul.w	r3, r3, r1
  4009f0:	4971      	ldr	r1, [pc, #452]	; (400bb8 <sd_mmc_check+0x844>)
  4009f2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4009f6:	fb03 f301 	mul.w	r3, r3, r1
  4009fa:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  4009fc:	4b6f      	ldr	r3, [pc, #444]	; (400bbc <sd_mmc_check+0x848>)
  4009fe:	7818      	ldrb	r0, [r3, #0]
  400a00:	4b6f      	ldr	r3, [pc, #444]	; (400bc0 <sd_mmc_check+0x84c>)
  400a02:	4798      	blx	r3
  400a04:	2803      	cmp	r0, #3
  400a06:	d922      	bls.n	400a4e <sd_mmc_check+0x6da>
		if (IS_SDIO()) {
  400a08:	4b68      	ldr	r3, [pc, #416]	; (400bac <sd_mmc_check+0x838>)
  400a0a:	681b      	ldr	r3, [r3, #0]
  400a0c:	7adb      	ldrb	r3, [r3, #11]
  400a0e:	f013 0f04 	tst.w	r3, #4
  400a12:	d146      	bne.n	400aa2 <sd_mmc_check+0x72e>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a14:	4b65      	ldr	r3, [pc, #404]	; (400bac <sd_mmc_check+0x838>)
  400a16:	681b      	ldr	r3, [r3, #0]
  400a18:	7ada      	ldrb	r2, [r3, #11]
  400a1a:	f012 0f01 	tst.w	r2, #1
  400a1e:	d014      	beq.n	400a4a <sd_mmc_check+0x6d6>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400a20:	8919      	ldrh	r1, [r3, #8]
  400a22:	0409      	lsls	r1, r1, #16
  400a24:	f241 1037 	movw	r0, #4407	; 0x1137
  400a28:	4b66      	ldr	r3, [pc, #408]	; (400bc4 <sd_mmc_check+0x850>)
  400a2a:	4798      	blx	r3
  400a2c:	2800      	cmp	r0, #0
  400a2e:	f43f acc9 	beq.w	4003c4 <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400a32:	2102      	movs	r1, #2
  400a34:	f241 1006 	movw	r0, #4358	; 0x1106
  400a38:	4b62      	ldr	r3, [pc, #392]	; (400bc4 <sd_mmc_check+0x850>)
  400a3a:	4798      	blx	r3
  400a3c:	2800      	cmp	r0, #0
  400a3e:	f43f acc1 	beq.w	4003c4 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400a42:	4b5a      	ldr	r3, [pc, #360]	; (400bac <sd_mmc_check+0x838>)
  400a44:	681b      	ldr	r3, [r3, #0]
  400a46:	2204      	movs	r2, #4
  400a48:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  400a4a:	4b5f      	ldr	r3, [pc, #380]	; (400bc8 <sd_mmc_check+0x854>)
  400a4c:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400a4e:	4b5f      	ldr	r3, [pc, #380]	; (400bcc <sd_mmc_check+0x858>)
  400a50:	4798      	blx	r3
  400a52:	b180      	cbz	r0, 400a76 <sd_mmc_check+0x702>
		if (IS_SDIO()) {
  400a54:	4b55      	ldr	r3, [pc, #340]	; (400bac <sd_mmc_check+0x838>)
  400a56:	681b      	ldr	r3, [r3, #0]
  400a58:	7adb      	ldrb	r3, [r3, #11]
  400a5a:	f013 0f04 	tst.w	r3, #4
  400a5e:	d141      	bne.n	400ae4 <sd_mmc_check+0x770>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a60:	4b52      	ldr	r3, [pc, #328]	; (400bac <sd_mmc_check+0x838>)
  400a62:	681b      	ldr	r3, [r3, #0]
  400a64:	7ada      	ldrb	r2, [r3, #11]
  400a66:	f012 0f01 	tst.w	r2, #1
  400a6a:	d002      	beq.n	400a72 <sd_mmc_check+0x6fe>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a6c:	7b1b      	ldrb	r3, [r3, #12]
  400a6e:	2b10      	cmp	r3, #16
  400a70:	d85d      	bhi.n	400b2e <sd_mmc_check+0x7ba>
		sd_mmc_configure_slot();
  400a72:	4b55      	ldr	r3, [pc, #340]	; (400bc8 <sd_mmc_check+0x854>)
  400a74:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a76:	4b4d      	ldr	r3, [pc, #308]	; (400bac <sd_mmc_check+0x838>)
  400a78:	681b      	ldr	r3, [r3, #0]
  400a7a:	7adb      	ldrb	r3, [r3, #11]
  400a7c:	f013 0f01 	tst.w	r3, #1
  400a80:	d008      	beq.n	400a94 <sd_mmc_check+0x720>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400a82:	f44f 7100 	mov.w	r1, #512	; 0x200
  400a86:	f241 1010 	movw	r0, #4368	; 0x1110
  400a8a:	4b4e      	ldr	r3, [pc, #312]	; (400bc4 <sd_mmc_check+0x850>)
  400a8c:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400a8e:	2800      	cmp	r0, #0
  400a90:	f43f ac98 	beq.w	4003c4 <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400a94:	4b45      	ldr	r3, [pc, #276]	; (400bac <sd_mmc_check+0x838>)
  400a96:	681b      	ldr	r3, [r3, #0]
  400a98:	2200      	movs	r2, #0
  400a9a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  400a9c:	4b4c      	ldr	r3, [pc, #304]	; (400bd0 <sd_mmc_check+0x85c>)
  400a9e:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  400aa0:	e472      	b.n	400388 <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  400aa2:	ab04      	add	r3, sp, #16
  400aa4:	9300      	str	r3, [sp, #0]
  400aa6:	2300      	movs	r3, #0
  400aa8:	2208      	movs	r2, #8
  400aaa:	4619      	mov	r1, r3
  400aac:	4618      	mov	r0, r3
  400aae:	4d40      	ldr	r5, [pc, #256]	; (400bb0 <sd_mmc_check+0x83c>)
  400ab0:	47a8      	blx	r5
  400ab2:	2800      	cmp	r0, #0
  400ab4:	f43f ac86 	beq.w	4003c4 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  400ab8:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  400abc:	2b00      	cmp	r3, #0
  400abe:	daa9      	bge.n	400a14 <sd_mmc_check+0x6a0>
	u8_value = SDIO_BUSWIDTH_4B;
  400ac0:	ab14      	add	r3, sp, #80	; 0x50
  400ac2:	2202      	movs	r2, #2
  400ac4:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  400ac8:	9300      	str	r3, [sp, #0]
  400aca:	2301      	movs	r3, #1
  400acc:	2207      	movs	r2, #7
  400ace:	2100      	movs	r1, #0
  400ad0:	4618      	mov	r0, r3
  400ad2:	47a8      	blx	r5
  400ad4:	2800      	cmp	r0, #0
  400ad6:	f43f ac75 	beq.w	4003c4 <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  400ada:	4b34      	ldr	r3, [pc, #208]	; (400bac <sd_mmc_check+0x838>)
  400adc:	681b      	ldr	r3, [r3, #0]
  400ade:	2204      	movs	r2, #4
  400ae0:	735a      	strb	r2, [r3, #13]
  400ae2:	e797      	b.n	400a14 <sd_mmc_check+0x6a0>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  400ae4:	ab04      	add	r3, sp, #16
  400ae6:	9300      	str	r3, [sp, #0]
  400ae8:	2300      	movs	r3, #0
  400aea:	2213      	movs	r2, #19
  400aec:	4619      	mov	r1, r3
  400aee:	4618      	mov	r0, r3
  400af0:	4d2f      	ldr	r5, [pc, #188]	; (400bb0 <sd_mmc_check+0x83c>)
  400af2:	47a8      	blx	r5
  400af4:	2800      	cmp	r0, #0
  400af6:	f43f ac65 	beq.w	4003c4 <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400afa:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400afe:	f013 0f01 	tst.w	r3, #1
  400b02:	d0ad      	beq.n	400a60 <sd_mmc_check+0x6ec>
	u8_value = SDIO_EHS;
  400b04:	ab14      	add	r3, sp, #80	; 0x50
  400b06:	2202      	movs	r2, #2
  400b08:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400b0c:	9300      	str	r3, [sp, #0]
  400b0e:	2301      	movs	r3, #1
  400b10:	2213      	movs	r2, #19
  400b12:	2100      	movs	r1, #0
  400b14:	4618      	mov	r0, r3
  400b16:	47a8      	blx	r5
  400b18:	2800      	cmp	r0, #0
  400b1a:	f43f ac53 	beq.w	4003c4 <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400b1e:	4b23      	ldr	r3, [pc, #140]	; (400bac <sd_mmc_check+0x838>)
  400b20:	681b      	ldr	r3, [r3, #0]
  400b22:	2201      	movs	r2, #1
  400b24:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400b26:	681a      	ldr	r2, [r3, #0]
  400b28:	0052      	lsls	r2, r2, #1
  400b2a:	601a      	str	r2, [r3, #0]
  400b2c:	e798      	b.n	400a60 <sd_mmc_check+0x6ec>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400b2e:	2540      	movs	r5, #64	; 0x40
  400b30:	462a      	mov	r2, r5
  400b32:	2100      	movs	r1, #0
  400b34:	a804      	add	r0, sp, #16
  400b36:	4b27      	ldr	r3, [pc, #156]	; (400bd4 <sd_mmc_check+0x860>)
  400b38:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400b3a:	2301      	movs	r3, #1
  400b3c:	9300      	str	r3, [sp, #0]
  400b3e:	462a      	mov	r2, r5
  400b40:	4925      	ldr	r1, [pc, #148]	; (400bd8 <sd_mmc_check+0x864>)
  400b42:	4826      	ldr	r0, [pc, #152]	; (400bdc <sd_mmc_check+0x868>)
  400b44:	4d26      	ldr	r5, [pc, #152]	; (400be0 <sd_mmc_check+0x86c>)
  400b46:	47a8      	blx	r5
  400b48:	2800      	cmp	r0, #0
  400b4a:	f43f ac3b 	beq.w	4003c4 <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400b4e:	2101      	movs	r1, #1
  400b50:	a804      	add	r0, sp, #16
  400b52:	4b24      	ldr	r3, [pc, #144]	; (400be4 <sd_mmc_check+0x870>)
  400b54:	4798      	blx	r3
  400b56:	2800      	cmp	r0, #0
  400b58:	f43f ac34 	beq.w	4003c4 <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400b5c:	4b22      	ldr	r3, [pc, #136]	; (400be8 <sd_mmc_check+0x874>)
  400b5e:	4798      	blx	r3
  400b60:	2800      	cmp	r0, #0
  400b62:	f43f ac2f 	beq.w	4003c4 <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400b66:	4b21      	ldr	r3, [pc, #132]	; (400bec <sd_mmc_check+0x878>)
  400b68:	4798      	blx	r3
  400b6a:	f010 0f80 	tst.w	r0, #128	; 0x80
  400b6e:	f47f ac29 	bne.w	4003c4 <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400b72:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400b76:	f003 030f 	and.w	r3, r3, #15
  400b7a:	2b0f      	cmp	r3, #15
  400b7c:	f43f af79 	beq.w	400a72 <sd_mmc_check+0x6fe>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400b80:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400b84:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400b88:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400b8c:	f47f ac1a 	bne.w	4003c4 <sd_mmc_check+0x50>
	driver_send_clock();
  400b90:	4b17      	ldr	r3, [pc, #92]	; (400bf0 <sd_mmc_check+0x87c>)
  400b92:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400b94:	4b05      	ldr	r3, [pc, #20]	; (400bac <sd_mmc_check+0x838>)
  400b96:	681b      	ldr	r3, [r3, #0]
  400b98:	2201      	movs	r2, #1
  400b9a:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400b9c:	681a      	ldr	r2, [r3, #0]
  400b9e:	0052      	lsls	r2, r2, #1
  400ba0:	601a      	str	r2, [r3, #0]
  400ba2:	e766      	b.n	400a72 <sd_mmc_check+0x6fe>
	*v2 = 0;
  400ba4:	f04f 0900 	mov.w	r9, #0
  400ba8:	e41e      	b.n	4003e8 <sd_mmc_check+0x74>
  400baa:	bf00      	nop
  400bac:	200009d4 	.word	0x200009d4
  400bb0:	004002cd 	.word	0x004002cd
  400bb4:	00408198 	.word	0x00408198
  400bb8:	004081b4 	.word	0x004081b4
  400bbc:	200009fc 	.word	0x200009fc
  400bc0:	0040134d 	.word	0x0040134d
  400bc4:	0040143d 	.word	0x0040143d
  400bc8:	0040024d 	.word	0x0040024d
  400bcc:	00401357 	.word	0x00401357
  400bd0:	00400339 	.word	0x00400339
  400bd4:	00403871 	.word	0x00403871
  400bd8:	80ffff01 	.word	0x80ffff01
  400bdc:	00081106 	.word	0x00081106
  400be0:	004014a5 	.word	0x004014a5
  400be4:	004015d9 	.word	0x004015d9
  400be8:	0040163d 	.word	0x0040163d
  400bec:	00401469 	.word	0x00401469
  400bf0:	00401419 	.word	0x00401419

00400bf4 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400bf4:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400bf6:	4b05      	ldr	r3, [pc, #20]	; (400c0c <sd_mmc_get_type+0x18>)
  400bf8:	4798      	blx	r3
  400bfa:	b108      	cbz	r0, 400c00 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400bfc:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400bfe:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c00:	4b03      	ldr	r3, [pc, #12]	; (400c10 <sd_mmc_get_type+0x1c>)
  400c02:	4798      	blx	r3
	return sd_mmc_card->type;
  400c04:	4b03      	ldr	r3, [pc, #12]	; (400c14 <sd_mmc_get_type+0x20>)
  400c06:	681b      	ldr	r3, [r3, #0]
  400c08:	7ad8      	ldrb	r0, [r3, #11]
  400c0a:	bd08      	pop	{r3, pc}
  400c0c:	00400275 	.word	0x00400275
  400c10:	00400339 	.word	0x00400339
  400c14:	200009d4 	.word	0x200009d4

00400c18 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400c18:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c1a:	4b05      	ldr	r3, [pc, #20]	; (400c30 <sd_mmc_get_capacity+0x18>)
  400c1c:	4798      	blx	r3
  400c1e:	b108      	cbz	r0, 400c24 <sd_mmc_get_capacity+0xc>
		return 0;
  400c20:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400c22:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400c24:	4b03      	ldr	r3, [pc, #12]	; (400c34 <sd_mmc_get_capacity+0x1c>)
  400c26:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400c28:	4b03      	ldr	r3, [pc, #12]	; (400c38 <sd_mmc_get_capacity+0x20>)
  400c2a:	681b      	ldr	r3, [r3, #0]
  400c2c:	6858      	ldr	r0, [r3, #4]
  400c2e:	bd08      	pop	{r3, pc}
  400c30:	00400275 	.word	0x00400275
  400c34:	00400339 	.word	0x00400339
  400c38:	200009d4 	.word	0x200009d4

00400c3c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400c3c:	2000      	movs	r0, #0
  400c3e:	4770      	bx	lr

00400c40 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400c44:	b082      	sub	sp, #8
  400c46:	468a      	mov	sl, r1
  400c48:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400c4a:	4b26      	ldr	r3, [pc, #152]	; (400ce4 <sd_mmc_init_read_blocks+0xa4>)
  400c4c:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400c4e:	4680      	mov	r8, r0
  400c50:	b118      	cbz	r0, 400c5a <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400c52:	4640      	mov	r0, r8
  400c54:	b002      	add	sp, #8
  400c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c5a:	4c23      	ldr	r4, [pc, #140]	; (400ce8 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c5c:	4e23      	ldr	r6, [pc, #140]	; (400cec <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c5e:	4d24      	ldr	r5, [pc, #144]	; (400cf0 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c60:	4f24      	ldr	r7, [pc, #144]	; (400cf4 <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400c62:	6833      	ldr	r3, [r6, #0]
  400c64:	8919      	ldrh	r1, [r3, #8]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400c66:	0409      	lsls	r1, r1, #16
  400c68:	f241 100d 	movw	r0, #4365	; 0x110d
  400c6c:	47a8      	blx	r5
  400c6e:	b128      	cbz	r0, 400c7c <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400c70:	47b8      	blx	r7
  400c72:	f410 7f80 	tst.w	r0, #256	; 0x100
  400c76:	d117      	bne.n	400ca8 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400c78:	3c01      	subs	r4, #1
  400c7a:	d1f2      	bne.n	400c62 <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400c7c:	4b1e      	ldr	r3, [pc, #120]	; (400cf8 <sd_mmc_init_read_blocks+0xb8>)
  400c7e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400c80:	f04f 0805 	mov.w	r8, #5
  400c84:	e7e5      	b.n	400c52 <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400c86:	4b1b      	ldr	r3, [pc, #108]	; (400cf4 <sd_mmc_init_read_blocks+0xb4>)
  400c88:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400c8a:	4b1c      	ldr	r3, [pc, #112]	; (400cfc <sd_mmc_init_read_blocks+0xbc>)
  400c8c:	4003      	ands	r3, r0
  400c8e:	b933      	cbnz	r3, 400c9e <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400c90:	4b1b      	ldr	r3, [pc, #108]	; (400d00 <sd_mmc_init_read_blocks+0xc0>)
  400c92:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400c96:	4b1b      	ldr	r3, [pc, #108]	; (400d04 <sd_mmc_init_read_blocks+0xc4>)
  400c98:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400c9c:	e7d9      	b.n	400c52 <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400c9e:	4b16      	ldr	r3, [pc, #88]	; (400cf8 <sd_mmc_init_read_blocks+0xb8>)
  400ca0:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400ca2:	f04f 0805 	mov.w	r8, #5
  400ca6:	e7d4      	b.n	400c52 <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400ca8:	4b17      	ldr	r3, [pc, #92]	; (400d08 <sd_mmc_init_read_blocks+0xc8>)
  400caa:	4818      	ldr	r0, [pc, #96]	; (400d0c <sd_mmc_init_read_blocks+0xcc>)
  400cac:	f1b9 0f01 	cmp.w	r9, #1
  400cb0:	bf98      	it	ls
  400cb2:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400cb4:	4b0d      	ldr	r3, [pc, #52]	; (400cec <sd_mmc_init_read_blocks+0xac>)
  400cb6:	681b      	ldr	r3, [r3, #0]
  400cb8:	7adb      	ldrb	r3, [r3, #11]
  400cba:	f013 0f08 	tst.w	r3, #8
  400cbe:	d101      	bne.n	400cc4 <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400cc0:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400cc4:	2301      	movs	r3, #1
  400cc6:	9300      	str	r3, [sp, #0]
  400cc8:	464b      	mov	r3, r9
  400cca:	f44f 7200 	mov.w	r2, #512	; 0x200
  400cce:	4651      	mov	r1, sl
  400cd0:	4c0f      	ldr	r4, [pc, #60]	; (400d10 <sd_mmc_init_read_blocks+0xd0>)
  400cd2:	47a0      	blx	r4
  400cd4:	2800      	cmp	r0, #0
  400cd6:	d1d6      	bne.n	400c86 <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400cd8:	4b07      	ldr	r3, [pc, #28]	; (400cf8 <sd_mmc_init_read_blocks+0xb8>)
  400cda:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400cdc:	f04f 0805 	mov.w	r8, #5
  400ce0:	e7b7      	b.n	400c52 <sd_mmc_init_read_blocks+0x12>
  400ce2:	bf00      	nop
  400ce4:	00400275 	.word	0x00400275
  400ce8:	00030d41 	.word	0x00030d41
  400cec:	200009d4 	.word	0x200009d4
  400cf0:	0040143d 	.word	0x0040143d
  400cf4:	00401469 	.word	0x00401469
  400cf8:	00400339 	.word	0x00400339
  400cfc:	e4580000 	.word	0xe4580000
  400d00:	200009f8 	.word	0x200009f8
  400d04:	200009fa 	.word	0x200009fa
  400d08:	00081111 	.word	0x00081111
  400d0c:	00101112 	.word	0x00101112
  400d10:	004014a5 	.word	0x004014a5

00400d14 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400d14:	b510      	push	{r4, lr}
  400d16:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400d18:	4b06      	ldr	r3, [pc, #24]	; (400d34 <sd_mmc_start_read_blocks+0x20>)
  400d1a:	4798      	blx	r3
  400d1c:	b920      	cbnz	r0, 400d28 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d1e:	2200      	movs	r2, #0
  400d20:	4b05      	ldr	r3, [pc, #20]	; (400d38 <sd_mmc_start_read_blocks+0x24>)
  400d22:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400d24:	2005      	movs	r0, #5
  400d26:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400d28:	4a03      	ldr	r2, [pc, #12]	; (400d38 <sd_mmc_start_read_blocks+0x24>)
  400d2a:	8813      	ldrh	r3, [r2, #0]
  400d2c:	1b1c      	subs	r4, r3, r4
  400d2e:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400d30:	2000      	movs	r0, #0
}
  400d32:	bd10      	pop	{r4, pc}
  400d34:	004015d9 	.word	0x004015d9
  400d38:	200009f8 	.word	0x200009f8

00400d3c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400d3c:	b510      	push	{r4, lr}
  400d3e:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400d40:	4b13      	ldr	r3, [pc, #76]	; (400d90 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400d42:	4798      	blx	r3
  400d44:	b908      	cbnz	r0, 400d4a <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400d46:	2005      	movs	r0, #5
  400d48:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400d4a:	b184      	cbz	r4, 400d6e <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400d4c:	2200      	movs	r2, #0
  400d4e:	4b11      	ldr	r3, [pc, #68]	; (400d94 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d50:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400d52:	4b11      	ldr	r3, [pc, #68]	; (400d98 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400d54:	881b      	ldrh	r3, [r3, #0]
  400d56:	2b01      	cmp	r3, #1
  400d58:	d00f      	beq.n	400d7a <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400d5a:	2100      	movs	r1, #0
  400d5c:	f243 100c 	movw	r0, #12556	; 0x310c
  400d60:	4b0e      	ldr	r3, [pc, #56]	; (400d9c <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d62:	4798      	blx	r3
  400d64:	b168      	cbz	r0, 400d82 <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400d66:	4b0e      	ldr	r3, [pc, #56]	; (400da0 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d68:	4798      	blx	r3
	return SD_MMC_OK;
  400d6a:	2000      	movs	r0, #0
  400d6c:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400d6e:	4b09      	ldr	r3, [pc, #36]	; (400d94 <sd_mmc_wait_end_of_read_blocks+0x58>)
  400d70:	881b      	ldrh	r3, [r3, #0]
  400d72:	2b00      	cmp	r3, #0
  400d74:	d0ed      	beq.n	400d52 <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400d76:	2000      	movs	r0, #0
}
  400d78:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400d7a:	4b09      	ldr	r3, [pc, #36]	; (400da0 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400d7c:	4798      	blx	r3
		return SD_MMC_OK;
  400d7e:	2000      	movs	r0, #0
  400d80:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400d82:	2100      	movs	r1, #0
  400d84:	f243 100c 	movw	r0, #12556	; 0x310c
  400d88:	4b04      	ldr	r3, [pc, #16]	; (400d9c <sd_mmc_wait_end_of_read_blocks+0x60>)
  400d8a:	4798      	blx	r3
  400d8c:	e7eb      	b.n	400d66 <sd_mmc_wait_end_of_read_blocks+0x2a>
  400d8e:	bf00      	nop
  400d90:	0040163d 	.word	0x0040163d
  400d94:	200009f8 	.word	0x200009f8
  400d98:	200009fa 	.word	0x200009fa
  400d9c:	0040143d 	.word	0x0040143d
  400da0:	00400339 	.word	0x00400339

00400da4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400da4:	b570      	push	{r4, r5, r6, lr}
  400da6:	b082      	sub	sp, #8
  400da8:	460e      	mov	r6, r1
  400daa:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400dac:	4b16      	ldr	r3, [pc, #88]	; (400e08 <sd_mmc_init_write_blocks+0x64>)
  400dae:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400db0:	4604      	mov	r4, r0
  400db2:	b9b8      	cbnz	r0, 400de4 <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400db4:	4b15      	ldr	r3, [pc, #84]	; (400e0c <sd_mmc_init_write_blocks+0x68>)
  400db6:	4816      	ldr	r0, [pc, #88]	; (400e10 <sd_mmc_init_write_blocks+0x6c>)
  400db8:	2d01      	cmp	r5, #1
  400dba:	bf98      	it	ls
  400dbc:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400dbe:	4b15      	ldr	r3, [pc, #84]	; (400e14 <sd_mmc_init_write_blocks+0x70>)
  400dc0:	681b      	ldr	r3, [r3, #0]
  400dc2:	7adb      	ldrb	r3, [r3, #11]
  400dc4:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400dc8:	bf08      	it	eq
  400dca:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400dcc:	2301      	movs	r3, #1
  400dce:	9300      	str	r3, [sp, #0]
  400dd0:	462b      	mov	r3, r5
  400dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400dd6:	4631      	mov	r1, r6
  400dd8:	4e0f      	ldr	r6, [pc, #60]	; (400e18 <sd_mmc_init_write_blocks+0x74>)
  400dda:	47b0      	blx	r6
  400ddc:	b928      	cbnz	r0, 400dea <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400dde:	4b0f      	ldr	r3, [pc, #60]	; (400e1c <sd_mmc_init_write_blocks+0x78>)
  400de0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400de2:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400de4:	4620      	mov	r0, r4
  400de6:	b002      	add	sp, #8
  400de8:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400dea:	4b0d      	ldr	r3, [pc, #52]	; (400e20 <sd_mmc_init_write_blocks+0x7c>)
  400dec:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400dee:	4b0d      	ldr	r3, [pc, #52]	; (400e24 <sd_mmc_init_write_blocks+0x80>)
  400df0:	4003      	ands	r3, r0
  400df2:	b923      	cbnz	r3, 400dfe <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400df4:	4b0c      	ldr	r3, [pc, #48]	; (400e28 <sd_mmc_init_write_blocks+0x84>)
  400df6:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400df8:	4b0c      	ldr	r3, [pc, #48]	; (400e2c <sd_mmc_init_write_blocks+0x88>)
  400dfa:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400dfc:	e7f2      	b.n	400de4 <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400dfe:	4b07      	ldr	r3, [pc, #28]	; (400e1c <sd_mmc_init_write_blocks+0x78>)
  400e00:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e02:	2405      	movs	r4, #5
  400e04:	e7ee      	b.n	400de4 <sd_mmc_init_write_blocks+0x40>
  400e06:	bf00      	nop
  400e08:	00400275 	.word	0x00400275
  400e0c:	00089118 	.word	0x00089118
  400e10:	00109119 	.word	0x00109119
  400e14:	200009d4 	.word	0x200009d4
  400e18:	004014a5 	.word	0x004014a5
  400e1c:	00400339 	.word	0x00400339
  400e20:	00401469 	.word	0x00401469
  400e24:	e4580000 	.word	0xe4580000
  400e28:	200009f8 	.word	0x200009f8
  400e2c:	200009fa 	.word	0x200009fa

00400e30 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400e30:	b510      	push	{r4, lr}
  400e32:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400e34:	4b06      	ldr	r3, [pc, #24]	; (400e50 <sd_mmc_start_write_blocks+0x20>)
  400e36:	4798      	blx	r3
  400e38:	b920      	cbnz	r0, 400e44 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400e3a:	2200      	movs	r2, #0
  400e3c:	4b05      	ldr	r3, [pc, #20]	; (400e54 <sd_mmc_start_write_blocks+0x24>)
  400e3e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400e40:	2005      	movs	r0, #5
  400e42:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e44:	4a03      	ldr	r2, [pc, #12]	; (400e54 <sd_mmc_start_write_blocks+0x24>)
  400e46:	8813      	ldrh	r3, [r2, #0]
  400e48:	1b1c      	subs	r4, r3, r4
  400e4a:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400e4c:	2000      	movs	r0, #0
}
  400e4e:	bd10      	pop	{r4, pc}
  400e50:	004016ad 	.word	0x004016ad
  400e54:	200009f8 	.word	0x200009f8

00400e58 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400e58:	b510      	push	{r4, lr}
  400e5a:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400e5c:	4b12      	ldr	r3, [pc, #72]	; (400ea8 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400e5e:	4798      	blx	r3
  400e60:	b908      	cbnz	r0, 400e66 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400e62:	2005      	movs	r0, #5
  400e64:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400e66:	b184      	cbz	r4, 400e8a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400e68:	2200      	movs	r2, #0
  400e6a:	4b10      	ldr	r3, [pc, #64]	; (400eac <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e6c:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e6e:	4b10      	ldr	r3, [pc, #64]	; (400eb0 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400e70:	881b      	ldrh	r3, [r3, #0]
  400e72:	2b01      	cmp	r3, #1
  400e74:	d00f      	beq.n	400e96 <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400e76:	2100      	movs	r1, #0
  400e78:	f243 100c 	movw	r0, #12556	; 0x310c
  400e7c:	4b0d      	ldr	r3, [pc, #52]	; (400eb4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400e7e:	4798      	blx	r3
  400e80:	b968      	cbnz	r0, 400e9e <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400e82:	4b0d      	ldr	r3, [pc, #52]	; (400eb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400e84:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400e86:	2005      	movs	r0, #5
  400e88:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400e8a:	4b08      	ldr	r3, [pc, #32]	; (400eac <sd_mmc_wait_end_of_write_blocks+0x54>)
  400e8c:	881b      	ldrh	r3, [r3, #0]
  400e8e:	2b00      	cmp	r3, #0
  400e90:	d0ed      	beq.n	400e6e <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400e92:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400e94:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400e96:	4b08      	ldr	r3, [pc, #32]	; (400eb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400e98:	4798      	blx	r3
		return SD_MMC_OK;
  400e9a:	2000      	movs	r0, #0
  400e9c:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400e9e:	4b06      	ldr	r3, [pc, #24]	; (400eb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400ea0:	4798      	blx	r3
	return SD_MMC_OK;
  400ea2:	2000      	movs	r0, #0
  400ea4:	bd10      	pop	{r4, pc}
  400ea6:	bf00      	nop
  400ea8:	00401715 	.word	0x00401715
  400eac:	200009f8 	.word	0x200009f8
  400eb0:	200009fa 	.word	0x200009fa
  400eb4:	0040143d 	.word	0x0040143d
  400eb8:	00400339 	.word	0x00400339

00400ebc <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400ebc:	b510      	push	{r4, lr}
  400ebe:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400ec0:	4b0f      	ldr	r3, [pc, #60]	; (400f00 <sd_mmc_test_unit_ready+0x44>)
  400ec2:	4798      	blx	r3
  400ec4:	2801      	cmp	r0, #1
  400ec6:	d018      	beq.n	400efa <sd_mmc_test_unit_ready+0x3e>
  400ec8:	b118      	cbz	r0, 400ed2 <sd_mmc_test_unit_ready+0x16>
  400eca:	2802      	cmp	r0, #2
  400ecc:	d010      	beq.n	400ef0 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400ece:	2001      	movs	r0, #1
  400ed0:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400ed2:	4b0c      	ldr	r3, [pc, #48]	; (400f04 <sd_mmc_test_unit_ready+0x48>)
  400ed4:	5d1b      	ldrb	r3, [r3, r4]
  400ed6:	b10b      	cbz	r3, 400edc <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400ed8:	2002      	movs	r0, #2
	}
}
  400eda:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400edc:	4620      	mov	r0, r4
  400ede:	4b0a      	ldr	r3, [pc, #40]	; (400f08 <sd_mmc_test_unit_ready+0x4c>)
  400ee0:	4798      	blx	r3
  400ee2:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400ee6:	2800      	cmp	r0, #0
  400ee8:	bf14      	ite	ne
  400eea:	2000      	movne	r0, #0
  400eec:	2002      	moveq	r0, #2
  400eee:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400ef0:	2200      	movs	r2, #0
  400ef2:	4b04      	ldr	r3, [pc, #16]	; (400f04 <sd_mmc_test_unit_ready+0x48>)
  400ef4:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400ef6:	2002      	movs	r0, #2
  400ef8:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400efa:	2003      	movs	r0, #3
  400efc:	bd10      	pop	{r4, pc}
  400efe:	bf00      	nop
  400f00:	00400375 	.word	0x00400375
  400f04:	20000a00 	.word	0x20000a00
  400f08:	00400bf5 	.word	0x00400bf5

00400f0c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400f0c:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400f0e:	2000      	movs	r0, #0
  400f10:	4b01      	ldr	r3, [pc, #4]	; (400f18 <sd_mmc_test_unit_ready_0+0xc>)
  400f12:	4798      	blx	r3
}
  400f14:	bd08      	pop	{r3, pc}
  400f16:	bf00      	nop
  400f18:	00400ebd 	.word	0x00400ebd

00400f1c <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
  400f1c:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(1);
  400f1e:	2001      	movs	r0, #1
  400f20:	4b01      	ldr	r3, [pc, #4]	; (400f28 <sd_mmc_test_unit_ready_1+0xc>)
  400f22:	4798      	blx	r3
}
  400f24:	bd08      	pop	{r3, pc}
  400f26:	bf00      	nop
  400f28:	00400ebd 	.word	0x00400ebd

00400f2c <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400f2c:	b538      	push	{r3, r4, r5, lr}
  400f2e:	4604      	mov	r4, r0
  400f30:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400f32:	4b04      	ldr	r3, [pc, #16]	; (400f44 <sd_mmc_read_capacity+0x18>)
  400f34:	4798      	blx	r3
  400f36:	0040      	lsls	r0, r0, #1
  400f38:	3801      	subs	r0, #1
  400f3a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400f3c:	4620      	mov	r0, r4
  400f3e:	4b02      	ldr	r3, [pc, #8]	; (400f48 <sd_mmc_read_capacity+0x1c>)
  400f40:	4798      	blx	r3
}
  400f42:	bd38      	pop	{r3, r4, r5, pc}
  400f44:	00400c19 	.word	0x00400c19
  400f48:	00400ebd 	.word	0x00400ebd

00400f4c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400f4c:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  400f4e:	4601      	mov	r1, r0
  400f50:	2000      	movs	r0, #0
  400f52:	4b01      	ldr	r3, [pc, #4]	; (400f58 <sd_mmc_read_capacity_0+0xc>)
  400f54:	4798      	blx	r3
}
  400f56:	bd08      	pop	{r3, pc}
  400f58:	00400f2d 	.word	0x00400f2d

00400f5c <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
  400f5c:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(1, nb_sector);
  400f5e:	4601      	mov	r1, r0
  400f60:	2001      	movs	r0, #1
  400f62:	4b01      	ldr	r3, [pc, #4]	; (400f68 <sd_mmc_read_capacity_1+0xc>)
  400f64:	4798      	blx	r3
}
  400f66:	bd08      	pop	{r3, pc}
  400f68:	00400f2d 	.word	0x00400f2d

00400f6c <sd_mmc_unload_0>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
  400f6c:	4b01      	ldr	r3, [pc, #4]	; (400f74 <sd_mmc_unload_0+0x8>)
  400f6e:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
  400f70:	2001      	movs	r0, #1
  400f72:	4770      	bx	lr
  400f74:	20000a00 	.word	0x20000a00

00400f78 <sd_mmc_unload_1>:
	sd_mmc_ejected[slot] = unload;
  400f78:	4b01      	ldr	r3, [pc, #4]	; (400f80 <sd_mmc_unload_1+0x8>)
  400f7a:	7058      	strb	r0, [r3, #1]

bool sd_mmc_unload_1(bool unload)
{
	return sd_mmc_unload(1, unload);
}
  400f7c:	2001      	movs	r0, #1
  400f7e:	4770      	bx	lr
  400f80:	20000a00 	.word	0x20000a00

00400f84 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400f84:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  400f86:	2000      	movs	r0, #0
  400f88:	4b01      	ldr	r3, [pc, #4]	; (400f90 <sd_mmc_wr_protect_0+0xc>)
  400f8a:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  400f8c:	bd08      	pop	{r3, pc}
  400f8e:	bf00      	nop
  400f90:	00400c3d 	.word	0x00400c3d

00400f94 <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
  400f94:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  400f96:	2001      	movs	r0, #1
  400f98:	4b01      	ldr	r3, [pc, #4]	; (400fa0 <sd_mmc_wr_protect_1+0xc>)
  400f9a:	4798      	blx	r3
	return sd_mmc_wr_protect(1);
}
  400f9c:	bd08      	pop	{r3, pc}
  400f9e:	bf00      	nop
  400fa0:	00400c3d 	.word	0x00400c3d

00400fa4 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
  400fa4:	2001      	movs	r0, #1
  400fa6:	4770      	bx	lr

00400fa8 <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
	return sd_mmc_removal(1);
}
  400fa8:	2001      	movs	r0, #1
  400faa:	4770      	bx	lr

00400fac <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400fac:	b510      	push	{r4, lr}
  400fae:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400fb0:	2201      	movs	r2, #1
  400fb2:	4b0a      	ldr	r3, [pc, #40]	; (400fdc <sd_mmc_mem_2_ram+0x30>)
  400fb4:	4798      	blx	r3
  400fb6:	b120      	cbz	r0, 400fc2 <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400fb8:	2802      	cmp	r0, #2
  400fba:	bf0c      	ite	eq
  400fbc:	2002      	moveq	r0, #2
  400fbe:	2001      	movne	r0, #1
  400fc0:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400fc2:	2101      	movs	r1, #1
  400fc4:	4620      	mov	r0, r4
  400fc6:	4b06      	ldr	r3, [pc, #24]	; (400fe0 <sd_mmc_mem_2_ram+0x34>)
  400fc8:	4798      	blx	r3
  400fca:	b108      	cbz	r0, 400fd0 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  400fcc:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400fce:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400fd0:	4b04      	ldr	r3, [pc, #16]	; (400fe4 <sd_mmc_mem_2_ram+0x38>)
  400fd2:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400fd4:	3000      	adds	r0, #0
  400fd6:	bf18      	it	ne
  400fd8:	2001      	movne	r0, #1
  400fda:	bd10      	pop	{r4, pc}
  400fdc:	00400c41 	.word	0x00400c41
  400fe0:	00400d15 	.word	0x00400d15
  400fe4:	00400d3d 	.word	0x00400d3d

00400fe8 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400fe8:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  400fea:	460a      	mov	r2, r1
  400fec:	4601      	mov	r1, r0
  400fee:	2000      	movs	r0, #0
  400ff0:	4b01      	ldr	r3, [pc, #4]	; (400ff8 <sd_mmc_mem_2_ram_0+0x10>)
  400ff2:	4798      	blx	r3
}
  400ff4:	bd08      	pop	{r3, pc}
  400ff6:	bf00      	nop
  400ff8:	00400fad 	.word	0x00400fad

00400ffc <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
  400ffc:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(1, addr, ram);
  400ffe:	460a      	mov	r2, r1
  401000:	4601      	mov	r1, r0
  401002:	2001      	movs	r0, #1
  401004:	4b01      	ldr	r3, [pc, #4]	; (40100c <sd_mmc_mem_2_ram_1+0x10>)
  401006:	4798      	blx	r3
}
  401008:	bd08      	pop	{r3, pc}
  40100a:	bf00      	nop
  40100c:	00400fad 	.word	0x00400fad

00401010 <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  401010:	b510      	push	{r4, lr}
  401012:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  401014:	2201      	movs	r2, #1
  401016:	4b0a      	ldr	r3, [pc, #40]	; (401040 <sd_mmc_ram_2_mem+0x30>)
  401018:	4798      	blx	r3
  40101a:	b120      	cbz	r0, 401026 <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  40101c:	2802      	cmp	r0, #2
  40101e:	bf0c      	ite	eq
  401020:	2002      	moveq	r0, #2
  401022:	2001      	movne	r0, #1
  401024:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  401026:	2101      	movs	r1, #1
  401028:	4620      	mov	r0, r4
  40102a:	4b06      	ldr	r3, [pc, #24]	; (401044 <sd_mmc_ram_2_mem+0x34>)
  40102c:	4798      	blx	r3
  40102e:	b108      	cbz	r0, 401034 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  401030:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  401032:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  401034:	4b04      	ldr	r3, [pc, #16]	; (401048 <sd_mmc_ram_2_mem+0x38>)
  401036:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  401038:	3000      	adds	r0, #0
  40103a:	bf18      	it	ne
  40103c:	2001      	movne	r0, #1
  40103e:	bd10      	pop	{r4, pc}
  401040:	00400da5 	.word	0x00400da5
  401044:	00400e31 	.word	0x00400e31
  401048:	00400e59 	.word	0x00400e59

0040104c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  40104c:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  40104e:	460a      	mov	r2, r1
  401050:	4601      	mov	r1, r0
  401052:	2000      	movs	r0, #0
  401054:	4b01      	ldr	r3, [pc, #4]	; (40105c <sd_mmc_ram_2_mem_0+0x10>)
  401056:	4798      	blx	r3
}
  401058:	bd08      	pop	{r3, pc}
  40105a:	bf00      	nop
  40105c:	00401011 	.word	0x00401011

00401060 <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
  401060:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(1, addr, ram);
  401062:	460a      	mov	r2, r1
  401064:	4601      	mov	r1, r0
  401066:	2001      	movs	r0, #1
  401068:	4b01      	ldr	r3, [pc, #4]	; (401070 <sd_mmc_ram_2_mem_1+0x10>)
  40106a:	4798      	blx	r3
}
  40106c:	bd08      	pop	{r3, pc}
  40106e:	bf00      	nop
  401070:	00401011 	.word	0x00401011

00401074 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  401074:	2801      	cmp	r0, #1
  401076:	d901      	bls.n	40107c <mem_test_unit_ready+0x8>
  401078:	2001      	movs	r0, #1
  40107a:	4770      	bx	lr
{
  40107c:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  40107e:	0140      	lsls	r0, r0, #5
  401080:	4b01      	ldr	r3, [pc, #4]	; (401088 <mem_test_unit_ready+0x14>)
  401082:	581b      	ldr	r3, [r3, r0]
  401084:	4798      	blx	r3
  401086:	bd08      	pop	{r3, pc}
  401088:	004081f4 	.word	0x004081f4

0040108c <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  40108c:	2801      	cmp	r0, #1
  40108e:	d901      	bls.n	401094 <mem_read_capacity+0x8>
  401090:	2001      	movs	r0, #1
  401092:	4770      	bx	lr
{
  401094:	b508      	push	{r3, lr}
  401096:	4603      	mov	r3, r0
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  401098:	4803      	ldr	r0, [pc, #12]	; (4010a8 <mem_read_capacity+0x1c>)
  40109a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  40109e:	6843      	ldr	r3, [r0, #4]
  4010a0:	4608      	mov	r0, r1
  4010a2:	4798      	blx	r3
  4010a4:	bd08      	pop	{r3, pc}
  4010a6:	bf00      	nop
  4010a8:	004081f4 	.word	0x004081f4

004010ac <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  4010ac:	2801      	cmp	r0, #1
  4010ae:	bf8c      	ite	hi
  4010b0:	2000      	movhi	r0, #0
  4010b2:	2001      	movls	r0, #1
  4010b4:	4770      	bx	lr
	...

004010b8 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4010b8:	2801      	cmp	r0, #1
  4010ba:	d901      	bls.n	4010c0 <mem_wr_protect+0x8>
  4010bc:	2001      	movs	r0, #1
  4010be:	4770      	bx	lr
{
  4010c0:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  4010c2:	4b03      	ldr	r3, [pc, #12]	; (4010d0 <mem_wr_protect+0x18>)
  4010c4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  4010c8:	68c3      	ldr	r3, [r0, #12]
  4010ca:	4798      	blx	r3
  4010cc:	bd08      	pop	{r3, pc}
  4010ce:	bf00      	nop
  4010d0:	004081f4 	.word	0x004081f4

004010d4 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  4010d4:	2801      	cmp	r0, #1
  4010d6:	d901      	bls.n	4010dc <memory_2_ram+0x8>
  4010d8:	2001      	movs	r0, #1
  4010da:	4770      	bx	lr
{
  4010dc:	b510      	push	{r4, lr}
  4010de:	460c      	mov	r4, r1
  4010e0:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  4010e2:	4804      	ldr	r0, [pc, #16]	; (4010f4 <memory_2_ram+0x20>)
  4010e4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4010e8:	6943      	ldr	r3, [r0, #20]
  4010ea:	4611      	mov	r1, r2
  4010ec:	4620      	mov	r0, r4
  4010ee:	4798      	blx	r3
  4010f0:	bd10      	pop	{r4, pc}
  4010f2:	bf00      	nop
  4010f4:	004081f4 	.word	0x004081f4

004010f8 <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  4010f8:	2801      	cmp	r0, #1
  4010fa:	d901      	bls.n	401100 <ram_2_memory+0x8>
  4010fc:	2001      	movs	r0, #1
  4010fe:	4770      	bx	lr
{
  401100:	b510      	push	{r4, lr}
  401102:	460c      	mov	r4, r1
  401104:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  401106:	4804      	ldr	r0, [pc, #16]	; (401118 <ram_2_memory+0x20>)
  401108:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  40110c:	6983      	ldr	r3, [r0, #24]
  40110e:	4611      	mov	r1, r2
  401110:	4620      	mov	r0, r4
  401112:	4798      	blx	r3
  401114:	bd10      	pop	{r4, pc}
  401116:	bf00      	nop
  401118:	004081f4 	.word	0x004081f4

0040111c <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  40111c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40111e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401122:	4b4b      	ldr	r3, [pc, #300]	; (401250 <board_init+0x134>)
  401124:	605a      	str	r2, [r3, #4]
  401126:	2009      	movs	r0, #9
  401128:	4c4a      	ldr	r4, [pc, #296]	; (401254 <board_init+0x138>)
  40112a:	47a0      	blx	r4
  40112c:	200a      	movs	r0, #10
  40112e:	47a0      	blx	r4
  401130:	200b      	movs	r0, #11
  401132:	47a0      	blx	r4
  401134:	200c      	movs	r0, #12
  401136:	47a0      	blx	r4
  401138:	200d      	movs	r0, #13
  40113a:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40113c:	4b46      	ldr	r3, [pc, #280]	; (401258 <board_init+0x13c>)
  40113e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401142:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401144:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401148:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40114a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40114e:	2204      	movs	r2, #4
  401150:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401152:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401156:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401158:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40115c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40115e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  401164:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401166:	f021 0104 	bic.w	r1, r1, #4
  40116a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40116c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40116e:	f021 0104 	bic.w	r1, r1, #4
  401172:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401174:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401178:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40117c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401184:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40118a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40118c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40118e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401192:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401194:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  401198:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40119a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40119c:	4311      	orrs	r1, r2
  40119e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4011a0:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4011a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4011a6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4011a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4011ac:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4011ae:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4011b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4011b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4011b6:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  4011ba:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4011bc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4011be:	4311      	orrs	r1, r2
  4011c0:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4011c2:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4011c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4011c8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4011ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4011ce:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4011d0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4011d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4011d6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4011d8:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  4011dc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4011de:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4011e0:	4311      	orrs	r1, r2
  4011e2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4011e4:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4011e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4011ea:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4011ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4011f0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4011f2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4011f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4011f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4011fa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4011fe:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401200:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401202:	4311      	orrs	r1, r2
  401204:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401206:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401208:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40120c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40120e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401212:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401214:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40121a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40121c:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  401220:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401222:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401224:	4311      	orrs	r1, r2
  401226:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401228:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40122a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40122e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401230:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401234:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401236:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40123c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40123e:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  401242:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401244:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401246:	4311      	orrs	r1, r2
  401248:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40124a:	605a      	str	r2, [r3, #4]
  40124c:	bd10      	pop	{r4, pc}
  40124e:	bf00      	nop
  401250:	400e1850 	.word	0x400e1850
  401254:	004037cd 	.word	0x004037cd
  401258:	400e1400 	.word	0x400e1400

0040125c <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  40125c:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  40125e:	4b08      	ldr	r3, [pc, #32]	; (401280 <hsmci_reset+0x24>)
  401260:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  401262:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  401264:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  401266:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  40126a:	2680      	movs	r6, #128	; 0x80
  40126c:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  40126e:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401270:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  401272:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  401274:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  401276:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401278:	2205      	movs	r2, #5
  40127a:	601a      	str	r2, [r3, #0]
}
  40127c:	bc70      	pop	{r4, r5, r6}
  40127e:	4770      	bx	lr
  401280:	40080000 	.word	0x40080000

00401284 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  401284:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  401286:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  40128a:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  40128c:	f411 7f80 	tst.w	r1, #256	; 0x100
  401290:	d004      	beq.n	40129c <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  401292:	f411 6f00 	tst.w	r1, #2048	; 0x800
  401296:	d00d      	beq.n	4012b4 <hsmci_send_cmd_execute+0x30>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  401298:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  40129c:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  4012a0:	bf18      	it	ne
  4012a2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  4012a6:	4b1d      	ldr	r3, [pc, #116]	; (40131c <hsmci_send_cmd_execute+0x98>)
  4012a8:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  4012aa:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  4012ac:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  4012ae:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  4012b2:	e00d      	b.n	4012d0 <hsmci_send_cmd_execute+0x4c>
		} else if (cmd & SDMMC_RESP_BUSY) {
  4012b4:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  4012b8:	bf14      	ite	ne
  4012ba:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  4012be:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  4012c2:	e7eb      	b.n	40129c <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4012c4:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  4012c8:	d10c      	bne.n	4012e4 <hsmci_send_cmd_execute+0x60>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4012ca:	f013 0f01 	tst.w	r3, #1
  4012ce:	d10d      	bne.n	4012ec <hsmci_send_cmd_execute+0x68>
		sr = HSMCI->HSMCI_SR;
  4012d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  4012d2:	2a00      	cmp	r2, #0
  4012d4:	d0f6      	beq.n	4012c4 <hsmci_send_cmd_execute+0x40>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4012d6:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  4012da:	d0f6      	beq.n	4012ca <hsmci_send_cmd_execute+0x46>
				hsmci_reset();
  4012dc:	4b10      	ldr	r3, [pc, #64]	; (401320 <hsmci_send_cmd_execute+0x9c>)
  4012de:	4798      	blx	r3
				return false;
  4012e0:	2000      	movs	r0, #0
  4012e2:	bd08      	pop	{r3, pc}
				hsmci_reset();
  4012e4:	4b0e      	ldr	r3, [pc, #56]	; (401320 <hsmci_send_cmd_execute+0x9c>)
  4012e6:	4798      	blx	r3
				return false;
  4012e8:	2000      	movs	r0, #0
  4012ea:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  4012ec:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  4012f0:	d103      	bne.n	4012fa <hsmci_send_cmd_execute+0x76>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  4012f2:	2001      	movs	r0, #1
  4012f4:	bd08      	pop	{r3, pc}
	return true;
  4012f6:	2001      	movs	r0, #1
  4012f8:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  4012fa:	4b08      	ldr	r3, [pc, #32]	; (40131c <hsmci_send_cmd_execute+0x98>)
  4012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4012fe:	f04f 32ff 	mov.w	r2, #4294967295
  401302:	4906      	ldr	r1, [pc, #24]	; (40131c <hsmci_send_cmd_execute+0x98>)
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  401304:	f003 0330 	and.w	r3, r3, #48	; 0x30
  401308:	2b20      	cmp	r3, #32
  40130a:	d0f4      	beq.n	4012f6 <hsmci_send_cmd_execute+0x72>
		sr = HSMCI->HSMCI_SR;
  40130c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  40130e:	3a01      	subs	r2, #1
  401310:	d1f8      	bne.n	401304 <hsmci_send_cmd_execute+0x80>
			hsmci_reset();
  401312:	4b03      	ldr	r3, [pc, #12]	; (401320 <hsmci_send_cmd_execute+0x9c>)
  401314:	4798      	blx	r3
			return false;
  401316:	2000      	movs	r0, #0
  401318:	bd08      	pop	{r3, pc}
  40131a:	bf00      	nop
  40131c:	40080000 	.word	0x40080000
  401320:	0040125d 	.word	0x0040125d

00401324 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  401324:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  401326:	2010      	movs	r0, #16
  401328:	4b06      	ldr	r3, [pc, #24]	; (401344 <hsmci_init+0x20>)
  40132a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_XDMAC);
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  40132c:	4b06      	ldr	r3, [pc, #24]	; (401348 <hsmci_init+0x24>)
  40132e:	2272      	movs	r2, #114	; 0x72
  401330:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  401332:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  401334:	2211      	movs	r2, #17
  401336:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  401338:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  40133c:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  40133e:	2205      	movs	r2, #5
  401340:	601a      	str	r2, [r3, #0]
  401342:	bd08      	pop	{r3, pc}
  401344:	004037cd 	.word	0x004037cd
  401348:	40080000 	.word	0x40080000

0040134c <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  40134c:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  40134e:	bf0c      	ite	eq
  401350:	2004      	moveq	r0, #4
  401352:	2000      	movne	r0, #0
  401354:	4770      	bx	lr

00401356 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  401356:	2001      	movs	r0, #1
  401358:	4770      	bx	lr
	...

0040135c <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  40135c:	b363      	cbz	r3, 4013b8 <hsmci_select_device+0x5c>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  40135e:	482a      	ldr	r0, [pc, #168]	; (401408 <hsmci_select_device+0xac>)
  401360:	6d43      	ldr	r3, [r0, #84]	; 0x54
  401362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401366:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  401368:	4b28      	ldr	r3, [pc, #160]	; (40140c <hsmci_select_device+0xb0>)
  40136a:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  40136e:	d333      	bcc.n	4013d8 <hsmci_select_device+0x7c>
{
  401370:	b410      	push	{r4}
		div = (mck / speed) - 2;
  401372:	4827      	ldr	r0, [pc, #156]	; (401410 <hsmci_select_device+0xb4>)
  401374:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  401378:	fb01 0113 	mls	r1, r1, r3, r0
  40137c:	bb11      	cbnz	r1, 4013c4 <hsmci_select_device+0x68>
		div = (mck / speed) - 2;
  40137e:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401380:	4921      	ldr	r1, [pc, #132]	; (401408 <hsmci_select_device+0xac>)
  401382:	6848      	ldr	r0, [r1, #4]
  401384:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  401388:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  40138a:	684c      	ldr	r4, [r1, #4]
  40138c:	f3c3 0047 	ubfx	r0, r3, #1, #8
  401390:	4320      	orrs	r0, r4
  401392:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  401394:	f013 0f01 	tst.w	r3, #1
  401398:	d016      	beq.n	4013c8 <hsmci_select_device+0x6c>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  40139a:	684b      	ldr	r3, [r1, #4]
  40139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4013a0:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4013a2:	2a04      	cmp	r2, #4
  4013a4:	d016      	beq.n	4013d4 <hsmci_select_device+0x78>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4013a6:	2a08      	cmp	r2, #8
  4013a8:	bf0c      	ite	eq
  4013aa:	22c0      	moveq	r2, #192	; 0xc0
  4013ac:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4013ae:	4b16      	ldr	r3, [pc, #88]	; (401408 <hsmci_select_device+0xac>)
  4013b0:	60da      	str	r2, [r3, #12]
}
  4013b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013b6:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  4013b8:	4813      	ldr	r0, [pc, #76]	; (401408 <hsmci_select_device+0xac>)
  4013ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
  4013bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4013c0:	6543      	str	r3, [r0, #84]	; 0x54
  4013c2:	e7d1      	b.n	401368 <hsmci_select_device+0xc>
			div++;
  4013c4:	3b01      	subs	r3, #1
  4013c6:	e7db      	b.n	401380 <hsmci_select_device+0x24>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  4013c8:	490f      	ldr	r1, [pc, #60]	; (401408 <hsmci_select_device+0xac>)
  4013ca:	684b      	ldr	r3, [r1, #4]
  4013cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4013d0:	604b      	str	r3, [r1, #4]
  4013d2:	e7e6      	b.n	4013a2 <hsmci_select_device+0x46>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4013d4:	2280      	movs	r2, #128	; 0x80
  4013d6:	e7ea      	b.n	4013ae <hsmci_select_device+0x52>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4013d8:	4b0b      	ldr	r3, [pc, #44]	; (401408 <hsmci_select_device+0xac>)
  4013da:	6859      	ldr	r1, [r3, #4]
  4013dc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  4013e0:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4013e2:	6859      	ldr	r1, [r3, #4]
  4013e4:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  4013e6:	4908      	ldr	r1, [pc, #32]	; (401408 <hsmci_select_device+0xac>)
  4013e8:	684b      	ldr	r3, [r1, #4]
  4013ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4013ee:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  4013f0:	2a04      	cmp	r2, #4
  4013f2:	d006      	beq.n	401402 <hsmci_select_device+0xa6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4013f4:	2a08      	cmp	r2, #8
  4013f6:	bf0c      	ite	eq
  4013f8:	22c0      	moveq	r2, #192	; 0xc0
  4013fa:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4013fc:	4b02      	ldr	r3, [pc, #8]	; (401408 <hsmci_select_device+0xac>)
  4013fe:	60da      	str	r2, [r3, #12]
  401400:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  401402:	2280      	movs	r2, #128	; 0x80
  401404:	e7fa      	b.n	4013fc <hsmci_select_device+0xa0>
  401406:	bf00      	nop
  401408:	40080000 	.word	0x40080000
  40140c:	05b8d7ff 	.word	0x05b8d7ff
  401410:	05b8d800 	.word	0x05b8d800

00401414 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  401414:	4770      	bx	lr
	...

00401418 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401418:	4b07      	ldr	r3, [pc, #28]	; (401438 <hsmci_send_clock+0x20>)
  40141a:	685a      	ldr	r2, [r3, #4]
  40141c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401420:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  401422:	2200      	movs	r2, #0
  401424:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  401426:	f44f 6210 	mov.w	r2, #2304	; 0x900
  40142a:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  40142c:	461a      	mov	r2, r3
  40142e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  401430:	f013 0f01 	tst.w	r3, #1
  401434:	d0fb      	beq.n	40142e <hsmci_send_clock+0x16>
}
  401436:	4770      	bx	lr
  401438:	40080000 	.word	0x40080000

0040143c <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  40143c:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40143e:	4b08      	ldr	r3, [pc, #32]	; (401460 <hsmci_send_cmd+0x24>)
  401440:	685a      	ldr	r2, [r3, #4]
  401442:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401446:	605a      	str	r2, [r3, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  401448:	685a      	ldr	r2, [r3, #4]
  40144a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  40144e:	605a      	str	r2, [r3, #4]
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  401450:	2400      	movs	r4, #0
  401452:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  401454:	460a      	mov	r2, r1
  401456:	4601      	mov	r1, r0
  401458:	4620      	mov	r0, r4
  40145a:	4b02      	ldr	r3, [pc, #8]	; (401464 <hsmci_send_cmd+0x28>)
  40145c:	4798      	blx	r3
}
  40145e:	bd10      	pop	{r4, pc}
  401460:	40080000 	.word	0x40080000
  401464:	00401285 	.word	0x00401285

00401468 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  401468:	4b01      	ldr	r3, [pc, #4]	; (401470 <hsmci_get_response+0x8>)
  40146a:	6a18      	ldr	r0, [r3, #32]
}
  40146c:	4770      	bx	lr
  40146e:	bf00      	nop
  401470:	40080000 	.word	0x40080000

00401474 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  401474:	b410      	push	{r4}
  401476:	1d03      	adds	r3, r0, #4
  401478:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  40147a:	4c09      	ldr	r4, [pc, #36]	; (4014a0 <hsmci_get_response_128+0x2c>)
  40147c:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  40147e:	0e11      	lsrs	r1, r2, #24
  401480:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  401484:	0c11      	lsrs	r1, r2, #16
  401486:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  40148a:	0a11      	lsrs	r1, r2, #8
  40148c:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  401490:	f803 2c01 	strb.w	r2, [r3, #-1]
  401494:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  401496:	4283      	cmp	r3, r0
  401498:	d1f0      	bne.n	40147c <hsmci_get_response_128+0x8>
		response++;
	}
}
  40149a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40149e:	4770      	bx	lr
  4014a0:	40080000 	.word	0x40080000

004014a4 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4014a4:	b570      	push	{r4, r5, r6, lr}
  4014a6:	f89d 4010 	ldrb.w	r4, [sp, #16]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  4014aa:	b374      	cbz	r4, 40150a <hsmci_adtc_start+0x66>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  4014ac:	4d29      	ldr	r5, [pc, #164]	; (401554 <hsmci_adtc_start+0xb0>)
  4014ae:	686c      	ldr	r4, [r5, #4]
  4014b0:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  4014b4:	606c      	str	r4, [r5, #4]
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  4014b6:	4d27      	ldr	r5, [pc, #156]	; (401554 <hsmci_adtc_start+0xb0>)
  4014b8:	686c      	ldr	r4, [r5, #4]
  4014ba:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  4014be:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  4014c0:	f012 0f03 	tst.w	r2, #3
  4014c4:	d027      	beq.n	401516 <hsmci_adtc_start+0x72>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4014c6:	686c      	ldr	r4, [r5, #4]
  4014c8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4014cc:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  4014ce:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  4014d2:	2c00      	cmp	r4, #0
  4014d4:	bf14      	ite	ne
  4014d6:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  4014da:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  4014de:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  4014e2:	d11e      	bne.n	401522 <hsmci_adtc_start+0x7e>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  4014e4:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  4014e8:	4e1a      	ldr	r6, [pc, #104]	; (401554 <hsmci_adtc_start+0xb0>)
  4014ea:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  4014ec:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  4014f0:	d12a      	bne.n	401548 <hsmci_adtc_start+0xa4>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  4014f2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  4014f6:	d12a      	bne.n	40154e <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  4014f8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  4014fc:	d117      	bne.n	40152e <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  4014fe:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  401502:	bf18      	it	ne
  401504:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  401508:	e011      	b.n	40152e <hsmci_adtc_start+0x8a>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  40150a:	4d12      	ldr	r5, [pc, #72]	; (401554 <hsmci_adtc_start+0xb0>)
  40150c:	686c      	ldr	r4, [r5, #4]
  40150e:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
  401512:	606c      	str	r4, [r5, #4]
  401514:	e7cf      	b.n	4014b6 <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401516:	4d0f      	ldr	r5, [pc, #60]	; (401554 <hsmci_adtc_start+0xb0>)
  401518:	686c      	ldr	r4, [r5, #4]
  40151a:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  40151e:	606c      	str	r4, [r5, #4]
  401520:	e7d5      	b.n	4014ce <hsmci_adtc_start+0x2a>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  401522:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  401526:	f3c2 0508 	ubfx	r5, r2, #0, #9
  40152a:	4e0a      	ldr	r6, [pc, #40]	; (401554 <hsmci_adtc_start+0xb0>)
  40152c:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  40152e:	2600      	movs	r6, #0
  401530:	4d09      	ldr	r5, [pc, #36]	; (401558 <hsmci_adtc_start+0xb4>)
  401532:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  401534:	4d09      	ldr	r5, [pc, #36]	; (40155c <hsmci_adtc_start+0xb8>)
  401536:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  401538:	4a09      	ldr	r2, [pc, #36]	; (401560 <hsmci_adtc_start+0xbc>)
  40153a:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  40153c:	460a      	mov	r2, r1
  40153e:	4601      	mov	r1, r0
  401540:	4620      	mov	r0, r4
  401542:	4b08      	ldr	r3, [pc, #32]	; (401564 <hsmci_adtc_start+0xc0>)
  401544:	4798      	blx	r3
}
  401546:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  401548:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  40154c:	e7ef      	b.n	40152e <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  40154e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  401552:	e7ec      	b.n	40152e <hsmci_adtc_start+0x8a>
  401554:	40080000 	.word	0x40080000
  401558:	20000a08 	.word	0x20000a08
  40155c:	20000a02 	.word	0x20000a02
  401560:	20000a04 	.word	0x20000a04
  401564:	00401285 	.word	0x00401285

00401568 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  401568:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  40156a:	4915      	ldr	r1, [pc, #84]	; (4015c0 <hsmci_read_word+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40156c:	4a15      	ldr	r2, [pc, #84]	; (4015c4 <hsmci_read_word+0x5c>)
		sr = HSMCI->HSMCI_SR;
  40156e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401570:	4213      	tst	r3, r2
  401572:	d11b      	bne.n	4015ac <hsmci_read_word+0x44>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  401574:	f013 0f02 	tst.w	r3, #2
  401578:	d0f9      	beq.n	40156e <hsmci_read_word+0x6>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  40157a:	4b11      	ldr	r3, [pc, #68]	; (4015c0 <hsmci_read_word+0x58>)
  40157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40157e:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  401580:	4a11      	ldr	r2, [pc, #68]	; (4015c8 <hsmci_read_word+0x60>)
  401582:	6813      	ldr	r3, [r2, #0]
  401584:	3304      	adds	r3, #4
  401586:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  401588:	4a10      	ldr	r2, [pc, #64]	; (4015cc <hsmci_read_word+0x64>)
  40158a:	8811      	ldrh	r1, [r2, #0]
  40158c:	4a10      	ldr	r2, [pc, #64]	; (4015d0 <hsmci_read_word+0x68>)
  40158e:	8812      	ldrh	r2, [r2, #0]
  401590:	fb02 f201 	mul.w	r2, r2, r1
  401594:	4293      	cmp	r3, r2
  401596:	d311      	bcc.n	4015bc <hsmci_read_word+0x54>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  401598:	4909      	ldr	r1, [pc, #36]	; (4015c0 <hsmci_read_word+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40159a:	4a0a      	ldr	r2, [pc, #40]	; (4015c4 <hsmci_read_word+0x5c>)
		sr = HSMCI->HSMCI_SR;
  40159c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40159e:	4213      	tst	r3, r2
  4015a0:	d108      	bne.n	4015b4 <hsmci_read_word+0x4c>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4015a2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4015a6:	d0f9      	beq.n	40159c <hsmci_read_word+0x34>
	return true;
  4015a8:	2001      	movs	r0, #1
  4015aa:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4015ac:	4b09      	ldr	r3, [pc, #36]	; (4015d4 <hsmci_read_word+0x6c>)
  4015ae:	4798      	blx	r3
			return false;
  4015b0:	2000      	movs	r0, #0
  4015b2:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4015b4:	4b07      	ldr	r3, [pc, #28]	; (4015d4 <hsmci_read_word+0x6c>)
  4015b6:	4798      	blx	r3
			return false;
  4015b8:	2000      	movs	r0, #0
  4015ba:	bd08      	pop	{r3, pc}
		return true;
  4015bc:	2001      	movs	r0, #1
}
  4015be:	bd08      	pop	{r3, pc}
  4015c0:	40080000 	.word	0x40080000
  4015c4:	c0600000 	.word	0xc0600000
  4015c8:	20000a08 	.word	0x20000a08
  4015cc:	20000a02 	.word	0x20000a02
  4015d0:	20000a04 	.word	0x20000a04
  4015d4:	0040125d 	.word	0x0040125d

004015d8 <hsmci_start_read_blocks>:
#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  4015d8:	4b15      	ldr	r3, [pc, #84]	; (401630 <hsmci_start_read_blocks+0x58>)
  4015da:	881b      	ldrh	r3, [r3, #0]
  4015dc:	fb03 f101 	mul.w	r1, r3, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  4015e0:	f010 0f03 	tst.w	r0, #3
  4015e4:	d102      	bne.n	4015ec <hsmci_start_read_blocks+0x14>
  4015e6:	f013 0f03 	tst.w	r3, #3
  4015ea:	d01b      	beq.n	401624 <hsmci_start_read_blocks+0x4c>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4015ec:	4a11      	ldr	r2, [pc, #68]	; (401634 <hsmci_start_read_blocks+0x5c>)
  4015ee:	6853      	ldr	r3, [r2, #4]
  4015f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4015f4:	6053      	str	r3, [r2, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  4015f6:	4b0f      	ldr	r3, [pc, #60]	; (401634 <hsmci_start_read_blocks+0x5c>)
  4015f8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  4015fc:	685b      	ldr	r3, [r3, #4]
			nb_data : nb_data / 4;
  4015fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401602:	bf0c      	ite	eq
  401604:	088b      	lsreq	r3, r1, #2
  401606:	460b      	movne	r3, r1
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  401608:	4a0a      	ldr	r2, [pc, #40]	; (401634 <hsmci_start_read_blocks+0x5c>)
  40160a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	HSMCI->HSMCI_RNCR = 0;
  40160e:	2300      	movs	r3, #0
  401610:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  401614:	2001      	movs	r0, #1
  401616:	f8c2 0120 	str.w	r0, [r2, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  40161a:	4a07      	ldr	r2, [pc, #28]	; (401638 <hsmci_start_read_blocks+0x60>)
  40161c:	6813      	ldr	r3, [r2, #0]
  40161e:	440b      	add	r3, r1
  401620:	6013      	str	r3, [r2, #0]
	return true;
}
  401622:	4770      	bx	lr
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401624:	4a03      	ldr	r2, [pc, #12]	; (401634 <hsmci_start_read_blocks+0x5c>)
  401626:	6853      	ldr	r3, [r2, #4]
  401628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40162c:	6053      	str	r3, [r2, #4]
  40162e:	e7e2      	b.n	4015f6 <hsmci_start_read_blocks+0x1e>
  401630:	20000a02 	.word	0x20000a02
  401634:	40080000 	.word	0x40080000
  401638:	20000a08 	.word	0x20000a08

0040163c <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  40163c:	b508      	push	{r3, lr}
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  40163e:	4915      	ldr	r1, [pc, #84]	; (401694 <hsmci_wait_end_of_read_blocks+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401640:	4a15      	ldr	r2, [pc, #84]	; (401698 <hsmci_wait_end_of_read_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  401642:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401644:	4213      	tst	r3, r2
  401646:	d116      	bne.n	401676 <hsmci_wait_end_of_read_blocks+0x3a>
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			hsmci_reset();
			return false;
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  401648:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40164c:	d0f9      	beq.n	401642 <hsmci_wait_end_of_read_blocks+0x6>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  40164e:	4b13      	ldr	r3, [pc, #76]	; (40169c <hsmci_wait_end_of_read_blocks+0x60>)
  401650:	881a      	ldrh	r2, [r3, #0]
  401652:	4b13      	ldr	r3, [pc, #76]	; (4016a0 <hsmci_wait_end_of_read_blocks+0x64>)
  401654:	881b      	ldrh	r3, [r3, #0]
  401656:	fb03 f302 	mul.w	r3, r3, r2
  40165a:	4a12      	ldr	r2, [pc, #72]	; (4016a4 <hsmci_wait_end_of_read_blocks+0x68>)
  40165c:	6812      	ldr	r2, [r2, #0]
  40165e:	4293      	cmp	r3, r2
  401660:	d816      	bhi.n	401690 <hsmci_wait_end_of_read_blocks+0x54>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401662:	490c      	ldr	r1, [pc, #48]	; (401694 <hsmci_wait_end_of_read_blocks+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401664:	4a0c      	ldr	r2, [pc, #48]	; (401698 <hsmci_wait_end_of_read_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  401666:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401668:	4213      	tst	r3, r2
  40166a:	d10d      	bne.n	401688 <hsmci_wait_end_of_read_blocks+0x4c>
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  40166c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401670:	d0f9      	beq.n	401666 <hsmci_wait_end_of_read_blocks+0x2a>
	return true;
  401672:	2001      	movs	r0, #1
  401674:	bd08      	pop	{r3, pc}
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  401676:	f240 2202 	movw	r2, #514	; 0x202
  40167a:	4b06      	ldr	r3, [pc, #24]	; (401694 <hsmci_wait_end_of_read_blocks+0x58>)
  40167c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			hsmci_reset();
  401680:	4b09      	ldr	r3, [pc, #36]	; (4016a8 <hsmci_wait_end_of_read_blocks+0x6c>)
  401682:	4798      	blx	r3
			return false;
  401684:	2000      	movs	r0, #0
  401686:	bd08      	pop	{r3, pc}
			hsmci_reset();
  401688:	4b07      	ldr	r3, [pc, #28]	; (4016a8 <hsmci_wait_end_of_read_blocks+0x6c>)
  40168a:	4798      	blx	r3
			return false;
  40168c:	2000      	movs	r0, #0
  40168e:	bd08      	pop	{r3, pc}
		return true;
  401690:	2001      	movs	r0, #1
}
  401692:	bd08      	pop	{r3, pc}
  401694:	40080000 	.word	0x40080000
  401698:	c0600000 	.word	0xc0600000
  40169c:	20000a02 	.word	0x20000a02
  4016a0:	20000a04 	.word	0x20000a04
  4016a4:	20000a08 	.word	0x20000a08
  4016a8:	0040125d 	.word	0x0040125d

004016ac <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  4016ac:	4b16      	ldr	r3, [pc, #88]	; (401708 <hsmci_start_write_blocks+0x5c>)
  4016ae:	881b      	ldrh	r3, [r3, #0]
  4016b0:	fb03 f101 	mul.w	r1, r3, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_TCR_TXCTR_Msk >> PERIPH_TCR_TXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
  4016b4:	f010 0f03 	tst.w	r0, #3
  4016b8:	d102      	bne.n	4016c0 <hsmci_start_write_blocks+0x14>
  4016ba:	f013 0f03 	tst.w	r3, #3
  4016be:	d01d      	beq.n	4016fc <hsmci_start_write_blocks+0x50>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4016c0:	4a12      	ldr	r2, [pc, #72]	; (40170c <hsmci_start_write_blocks+0x60>)
  4016c2:	6853      	ldr	r3, [r2, #4]
  4016c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4016c8:	6053      	str	r3, [r2, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
  4016ca:	4b10      	ldr	r3, [pc, #64]	; (40170c <hsmci_start_write_blocks+0x60>)
  4016cc:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  4016d0:	685b      	ldr	r3, [r3, #4]
			nb_data : nb_data / 4;
  4016d2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4016d6:	bf0c      	ite	eq
  4016d8:	088b      	lsreq	r3, r1, #2
  4016da:	460b      	movne	r3, r1
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  4016dc:	4a0b      	ldr	r2, [pc, #44]	; (40170c <hsmci_start_write_blocks+0x60>)
  4016de:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	HSMCI->HSMCI_TNCR = 0;
  4016e2:	2300      	movs	r3, #0
  4016e4:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  4016e8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4016ec:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  4016f0:	4a07      	ldr	r2, [pc, #28]	; (401710 <hsmci_start_write_blocks+0x64>)
  4016f2:	6813      	ldr	r3, [r2, #0]
  4016f4:	440b      	add	r3, r1
  4016f6:	6013      	str	r3, [r2, #0]
	return true;
}
  4016f8:	2001      	movs	r0, #1
  4016fa:	4770      	bx	lr
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4016fc:	4a03      	ldr	r2, [pc, #12]	; (40170c <hsmci_start_write_blocks+0x60>)
  4016fe:	6853      	ldr	r3, [r2, #4]
  401700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401704:	6053      	str	r3, [r2, #4]
  401706:	e7e0      	b.n	4016ca <hsmci_start_write_blocks+0x1e>
  401708:	20000a02 	.word	0x20000a02
  40170c:	40080000 	.word	0x40080000
  401710:	20000a08 	.word	0x20000a08

00401714 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  401714:	b508      	push	{r3, lr}
	uint32_t sr;

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401716:	4915      	ldr	r1, [pc, #84]	; (40176c <hsmci_wait_end_of_write_blocks+0x58>)
		if (sr &
  401718:	4a15      	ldr	r2, [pc, #84]	; (401770 <hsmci_wait_end_of_write_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  40171a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr &
  40171c:	4213      	tst	r3, r2
  40171e:	d116      	bne.n	40174e <hsmci_wait_end_of_write_blocks+0x3a>
					__func__, sr);
			hsmci_reset();
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			return false;
		}
	} while (!(sr & HSMCI_SR_TXBUFE));
  401720:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401724:	d0f9      	beq.n	40171a <hsmci_wait_end_of_write_blocks+0x6>


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  401726:	4b13      	ldr	r3, [pc, #76]	; (401774 <hsmci_wait_end_of_write_blocks+0x60>)
  401728:	881a      	ldrh	r2, [r3, #0]
  40172a:	4b13      	ldr	r3, [pc, #76]	; (401778 <hsmci_wait_end_of_write_blocks+0x64>)
  40172c:	881b      	ldrh	r3, [r3, #0]
  40172e:	fb03 f302 	mul.w	r3, r3, r2
  401732:	4a12      	ldr	r2, [pc, #72]	; (40177c <hsmci_wait_end_of_write_blocks+0x68>)
  401734:	6812      	ldr	r2, [r2, #0]
  401736:	4293      	cmp	r3, r2
  401738:	d816      	bhi.n	401768 <hsmci_wait_end_of_write_blocks+0x54>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  40173a:	490c      	ldr	r1, [pc, #48]	; (40176c <hsmci_wait_end_of_write_blocks+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40173c:	4a0c      	ldr	r2, [pc, #48]	; (401770 <hsmci_wait_end_of_write_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  40173e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401740:	4213      	tst	r3, r2
  401742:	d10d      	bne.n	401760 <hsmci_wait_end_of_write_blocks+0x4c>
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
  401744:	f013 0f20 	tst.w	r3, #32
  401748:	d0f9      	beq.n	40173e <hsmci_wait_end_of_write_blocks+0x2a>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
  40174a:	2001      	movs	r0, #1
  40174c:	bd08      	pop	{r3, pc}
			hsmci_reset();
  40174e:	4b0c      	ldr	r3, [pc, #48]	; (401780 <hsmci_wait_end_of_write_blocks+0x6c>)
  401750:	4798      	blx	r3
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  401752:	f240 2202 	movw	r2, #514	; 0x202
  401756:	4b05      	ldr	r3, [pc, #20]	; (40176c <hsmci_wait_end_of_write_blocks+0x58>)
  401758:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			return false;
  40175c:	2000      	movs	r0, #0
  40175e:	bd08      	pop	{r3, pc}
			hsmci_reset();
  401760:	4b07      	ldr	r3, [pc, #28]	; (401780 <hsmci_wait_end_of_write_blocks+0x6c>)
  401762:	4798      	blx	r3
			return false;
  401764:	2000      	movs	r0, #0
  401766:	bd08      	pop	{r3, pc}
		return true;
  401768:	2001      	movs	r0, #1
}
  40176a:	bd08      	pop	{r3, pc}
  40176c:	40080000 	.word	0x40080000
  401770:	c0600000 	.word	0xc0600000
  401774:	20000a02 	.word	0x20000a02
  401778:	20000a04 	.word	0x20000a04
  40177c:	20000a08 	.word	0x20000a08
  401780:	0040125d 	.word	0x0040125d

00401784 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401784:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401786:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401788:	6884      	ldr	r4, [r0, #8]
  40178a:	42a5      	cmp	r5, r4
  40178c:	d003      	beq.n	401796 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  40178e:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401790:	6884      	ldr	r4, [r0, #8]
  401792:	42ac      	cmp	r4, r5
  401794:	d1fb      	bne.n	40178e <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  401796:	b161      	cbz	r1, 4017b2 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401798:	f3c4 5001 	ubfx	r0, r4, #20, #2
  40179c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4017a0:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4017a4:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4017a8:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4017ac:	bf18      	it	ne
  4017ae:	300c      	addne	r0, #12
  4017b0:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4017b2:	b142      	cbz	r2, 4017c6 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4017b4:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4017b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4017bc:	f3c4 2003 	ubfx	r0, r4, #8, #4
  4017c0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  4017c4:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  4017c6:	b143      	cbz	r3, 4017da <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4017c8:	f3c4 1202 	ubfx	r2, r4, #4, #3
  4017cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4017d0:	f004 040f 	and.w	r4, r4, #15
  4017d4:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  4017d8:	601c      	str	r4, [r3, #0]
	}
}
  4017da:	bc30      	pop	{r4, r5}
  4017dc:	4770      	bx	lr

004017de <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4017de:	b4f0      	push	{r4, r5, r6, r7}
  4017e0:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4017e2:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4017e4:	68c4      	ldr	r4, [r0, #12]
  4017e6:	42a5      	cmp	r5, r4
  4017e8:	d003      	beq.n	4017f2 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  4017ea:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4017ec:	68c4      	ldr	r4, [r0, #12]
  4017ee:	42ac      	cmp	r4, r5
  4017f0:	d1fb      	bne.n	4017ea <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  4017f2:	b199      	cbz	r1, 40181c <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4017f4:	f3c4 3003 	ubfx	r0, r4, #12, #4
  4017f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4017fc:	f3c4 2703 	ubfx	r7, r4, #8, #4
  401800:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401804:	f3c4 1002 	ubfx	r0, r4, #4, #3
  401808:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40180c:	f004 000f 	and.w	r0, r4, #15
  401810:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401814:	2564      	movs	r5, #100	; 0x64
  401816:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  40181a:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  40181c:	b142      	cbz	r2, 401830 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40181e:	f3c4 5000 	ubfx	r0, r4, #20, #1
  401822:	0081      	lsls	r1, r0, #2
  401824:	4408      	add	r0, r1
  401826:	f3c4 4103 	ubfx	r1, r4, #16, #4
  40182a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  40182e:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  401830:	b143      	cbz	r3, 401844 <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401832:	f3c4 7201 	ubfx	r2, r4, #28, #2
  401836:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40183a:	f3c4 6103 	ubfx	r1, r4, #24, #4
  40183e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  401842:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  401844:	b116      	cbz	r6, 40184c <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  401846:	f3c4 5442 	ubfx	r4, r4, #21, #3
  40184a:	6034      	str	r4, [r6, #0]
	}
}
  40184c:	bcf0      	pop	{r4, r5, r6, r7}
  40184e:	4770      	bx	lr

00401850 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401850:	e7fe      	b.n	401850 <Dummy_Handler>
	...

00401854 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401854:	b500      	push	{lr}
  401856:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  401858:	4b25      	ldr	r3, [pc, #148]	; (4018f0 <Reset_Handler+0x9c>)
  40185a:	4a26      	ldr	r2, [pc, #152]	; (4018f4 <Reset_Handler+0xa0>)
  40185c:	429a      	cmp	r2, r3
  40185e:	d010      	beq.n	401882 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  401860:	4b25      	ldr	r3, [pc, #148]	; (4018f8 <Reset_Handler+0xa4>)
  401862:	4a23      	ldr	r2, [pc, #140]	; (4018f0 <Reset_Handler+0x9c>)
  401864:	429a      	cmp	r2, r3
  401866:	d20c      	bcs.n	401882 <Reset_Handler+0x2e>
  401868:	3b01      	subs	r3, #1
  40186a:	1a9b      	subs	r3, r3, r2
  40186c:	f023 0303 	bic.w	r3, r3, #3
  401870:	3304      	adds	r3, #4
  401872:	4413      	add	r3, r2
  401874:	491f      	ldr	r1, [pc, #124]	; (4018f4 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  401876:	f851 0b04 	ldr.w	r0, [r1], #4
  40187a:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  40187e:	429a      	cmp	r2, r3
  401880:	d1f9      	bne.n	401876 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401882:	4b1e      	ldr	r3, [pc, #120]	; (4018fc <Reset_Handler+0xa8>)
  401884:	4a1e      	ldr	r2, [pc, #120]	; (401900 <Reset_Handler+0xac>)
  401886:	429a      	cmp	r2, r3
  401888:	d20a      	bcs.n	4018a0 <Reset_Handler+0x4c>
  40188a:	3b01      	subs	r3, #1
  40188c:	1a9b      	subs	r3, r3, r2
  40188e:	f023 0303 	bic.w	r3, r3, #3
  401892:	3304      	adds	r3, #4
  401894:	4413      	add	r3, r2
		*pDest++ = 0;
  401896:	2100      	movs	r1, #0
  401898:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  40189c:	4293      	cmp	r3, r2
  40189e:	d1fb      	bne.n	401898 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4018a0:	4a18      	ldr	r2, [pc, #96]	; (401904 <Reset_Handler+0xb0>)
  4018a2:	4b19      	ldr	r3, [pc, #100]	; (401908 <Reset_Handler+0xb4>)
  4018a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4018a8:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4018aa:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4018ae:	fab3 f383 	clz	r3, r3
  4018b2:	095b      	lsrs	r3, r3, #5
  4018b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4018b6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4018b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4018bc:	2200      	movs	r2, #0
  4018be:	4b13      	ldr	r3, [pc, #76]	; (40190c <Reset_Handler+0xb8>)
  4018c0:	701a      	strb	r2, [r3, #0]
	return flags;
  4018c2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4018c4:	4a12      	ldr	r2, [pc, #72]	; (401910 <Reset_Handler+0xbc>)
  4018c6:	6813      	ldr	r3, [r2, #0]
  4018c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4018cc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4018ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4018d2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4018d6:	b129      	cbz	r1, 4018e4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4018d8:	2201      	movs	r2, #1
  4018da:	4b0c      	ldr	r3, [pc, #48]	; (40190c <Reset_Handler+0xb8>)
  4018dc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4018de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4018e2:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4018e4:	4b0b      	ldr	r3, [pc, #44]	; (401914 <Reset_Handler+0xc0>)
  4018e6:	4798      	blx	r3

	/* Branch to main function */
	main();
  4018e8:	4b0b      	ldr	r3, [pc, #44]	; (401918 <Reset_Handler+0xc4>)
  4018ea:	4798      	blx	r3
  4018ec:	e7fe      	b.n	4018ec <Reset_Handler+0x98>
  4018ee:	bf00      	nop
  4018f0:	20000000 	.word	0x20000000
  4018f4:	00408a7c 	.word	0x00408a7c
  4018f8:	200009b8 	.word	0x200009b8
  4018fc:	20000aec 	.word	0x20000aec
  401900:	200009b8 	.word	0x200009b8
  401904:	e000ed00 	.word	0xe000ed00
  401908:	00400000 	.word	0x00400000
  40190c:	20000000 	.word	0x20000000
  401910:	e000ed88 	.word	0xe000ed88
  401914:	00403821 	.word	0x00403821
  401918:	004034e9 	.word	0x004034e9

0040191c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  40191c:	4b3b      	ldr	r3, [pc, #236]	; (401a0c <SystemCoreClockUpdate+0xf0>)
  40191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401920:	f003 0303 	and.w	r3, r3, #3
  401924:	2b01      	cmp	r3, #1
  401926:	d01d      	beq.n	401964 <SystemCoreClockUpdate+0x48>
  401928:	b183      	cbz	r3, 40194c <SystemCoreClockUpdate+0x30>
  40192a:	2b02      	cmp	r3, #2
  40192c:	d036      	beq.n	40199c <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40192e:	4b37      	ldr	r3, [pc, #220]	; (401a0c <SystemCoreClockUpdate+0xf0>)
  401930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401932:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401936:	2b70      	cmp	r3, #112	; 0x70
  401938:	d05f      	beq.n	4019fa <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  40193a:	4b34      	ldr	r3, [pc, #208]	; (401a0c <SystemCoreClockUpdate+0xf0>)
  40193c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40193e:	4934      	ldr	r1, [pc, #208]	; (401a10 <SystemCoreClockUpdate+0xf4>)
  401940:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401944:	680b      	ldr	r3, [r1, #0]
  401946:	40d3      	lsrs	r3, r2
  401948:	600b      	str	r3, [r1, #0]
  40194a:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40194c:	4b31      	ldr	r3, [pc, #196]	; (401a14 <SystemCoreClockUpdate+0xf8>)
  40194e:	695b      	ldr	r3, [r3, #20]
  401950:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401954:	bf14      	ite	ne
  401956:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40195a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40195e:	4b2c      	ldr	r3, [pc, #176]	; (401a10 <SystemCoreClockUpdate+0xf4>)
  401960:	601a      	str	r2, [r3, #0]
  401962:	e7e4      	b.n	40192e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401964:	4b29      	ldr	r3, [pc, #164]	; (401a0c <SystemCoreClockUpdate+0xf0>)
  401966:	6a1b      	ldr	r3, [r3, #32]
  401968:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40196c:	d003      	beq.n	401976 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40196e:	4a2a      	ldr	r2, [pc, #168]	; (401a18 <SystemCoreClockUpdate+0xfc>)
  401970:	4b27      	ldr	r3, [pc, #156]	; (401a10 <SystemCoreClockUpdate+0xf4>)
  401972:	601a      	str	r2, [r3, #0]
  401974:	e7db      	b.n	40192e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401976:	4a29      	ldr	r2, [pc, #164]	; (401a1c <SystemCoreClockUpdate+0x100>)
  401978:	4b25      	ldr	r3, [pc, #148]	; (401a10 <SystemCoreClockUpdate+0xf4>)
  40197a:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40197c:	4b23      	ldr	r3, [pc, #140]	; (401a0c <SystemCoreClockUpdate+0xf0>)
  40197e:	6a1b      	ldr	r3, [r3, #32]
  401980:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401984:	2b10      	cmp	r3, #16
  401986:	d005      	beq.n	401994 <SystemCoreClockUpdate+0x78>
  401988:	2b20      	cmp	r3, #32
  40198a:	d1d0      	bne.n	40192e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  40198c:	4a22      	ldr	r2, [pc, #136]	; (401a18 <SystemCoreClockUpdate+0xfc>)
  40198e:	4b20      	ldr	r3, [pc, #128]	; (401a10 <SystemCoreClockUpdate+0xf4>)
  401990:	601a      	str	r2, [r3, #0]
				break;
  401992:	e7cc      	b.n	40192e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  401994:	4a22      	ldr	r2, [pc, #136]	; (401a20 <SystemCoreClockUpdate+0x104>)
  401996:	4b1e      	ldr	r3, [pc, #120]	; (401a10 <SystemCoreClockUpdate+0xf4>)
  401998:	601a      	str	r2, [r3, #0]
				break;
  40199a:	e7c8      	b.n	40192e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40199c:	4b1b      	ldr	r3, [pc, #108]	; (401a0c <SystemCoreClockUpdate+0xf0>)
  40199e:	6a1b      	ldr	r3, [r3, #32]
  4019a0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4019a4:	d016      	beq.n	4019d4 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4019a6:	4a1c      	ldr	r2, [pc, #112]	; (401a18 <SystemCoreClockUpdate+0xfc>)
  4019a8:	4b19      	ldr	r3, [pc, #100]	; (401a10 <SystemCoreClockUpdate+0xf4>)
  4019aa:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4019ac:	4b17      	ldr	r3, [pc, #92]	; (401a0c <SystemCoreClockUpdate+0xf0>)
  4019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4019b0:	f003 0303 	and.w	r3, r3, #3
  4019b4:	2b02      	cmp	r3, #2
  4019b6:	d1ba      	bne.n	40192e <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4019b8:	4a14      	ldr	r2, [pc, #80]	; (401a0c <SystemCoreClockUpdate+0xf0>)
  4019ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4019bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4019be:	4814      	ldr	r0, [pc, #80]	; (401a10 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4019c0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4019c4:	6803      	ldr	r3, [r0, #0]
  4019c6:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4019ca:	b2d2      	uxtb	r2, r2
  4019cc:	fbb3 f3f2 	udiv	r3, r3, r2
  4019d0:	6003      	str	r3, [r0, #0]
  4019d2:	e7ac      	b.n	40192e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4019d4:	4a11      	ldr	r2, [pc, #68]	; (401a1c <SystemCoreClockUpdate+0x100>)
  4019d6:	4b0e      	ldr	r3, [pc, #56]	; (401a10 <SystemCoreClockUpdate+0xf4>)
  4019d8:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4019da:	4b0c      	ldr	r3, [pc, #48]	; (401a0c <SystemCoreClockUpdate+0xf0>)
  4019dc:	6a1b      	ldr	r3, [r3, #32]
  4019de:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4019e2:	2b10      	cmp	r3, #16
  4019e4:	d005      	beq.n	4019f2 <SystemCoreClockUpdate+0xd6>
  4019e6:	2b20      	cmp	r3, #32
  4019e8:	d1e0      	bne.n	4019ac <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4019ea:	4a0b      	ldr	r2, [pc, #44]	; (401a18 <SystemCoreClockUpdate+0xfc>)
  4019ec:	4b08      	ldr	r3, [pc, #32]	; (401a10 <SystemCoreClockUpdate+0xf4>)
  4019ee:	601a      	str	r2, [r3, #0]
				break;
  4019f0:	e7dc      	b.n	4019ac <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4019f2:	4a0b      	ldr	r2, [pc, #44]	; (401a20 <SystemCoreClockUpdate+0x104>)
  4019f4:	4b06      	ldr	r3, [pc, #24]	; (401a10 <SystemCoreClockUpdate+0xf4>)
  4019f6:	601a      	str	r2, [r3, #0]
				break;
  4019f8:	e7d8      	b.n	4019ac <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4019fa:	4a05      	ldr	r2, [pc, #20]	; (401a10 <SystemCoreClockUpdate+0xf4>)
  4019fc:	6813      	ldr	r3, [r2, #0]
  4019fe:	4909      	ldr	r1, [pc, #36]	; (401a24 <SystemCoreClockUpdate+0x108>)
  401a00:	fba1 1303 	umull	r1, r3, r1, r3
  401a04:	085b      	lsrs	r3, r3, #1
  401a06:	6013      	str	r3, [r2, #0]
  401a08:	4770      	bx	lr
  401a0a:	bf00      	nop
  401a0c:	400e0400 	.word	0x400e0400
  401a10:	20000004 	.word	0x20000004
  401a14:	400e1810 	.word	0x400e1810
  401a18:	00b71b00 	.word	0x00b71b00
  401a1c:	003d0900 	.word	0x003d0900
  401a20:	007a1200 	.word	0x007a1200
  401a24:	aaaaaaab 	.word	0xaaaaaaab

00401a28 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401a28:	4b12      	ldr	r3, [pc, #72]	; (401a74 <system_init_flash+0x4c>)
  401a2a:	4298      	cmp	r0, r3
  401a2c:	d911      	bls.n	401a52 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  401a2e:	4b12      	ldr	r3, [pc, #72]	; (401a78 <system_init_flash+0x50>)
  401a30:	4298      	cmp	r0, r3
  401a32:	d913      	bls.n	401a5c <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  401a34:	4b11      	ldr	r3, [pc, #68]	; (401a7c <system_init_flash+0x54>)
  401a36:	4298      	cmp	r0, r3
  401a38:	d914      	bls.n	401a64 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401a3a:	4b11      	ldr	r3, [pc, #68]	; (401a80 <system_init_flash+0x58>)
  401a3c:	4298      	cmp	r0, r3
  401a3e:	d915      	bls.n	401a6c <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401a40:	4b10      	ldr	r3, [pc, #64]	; (401a84 <system_init_flash+0x5c>)
  401a42:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401a44:	bf94      	ite	ls
  401a46:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401a4a:	4a0f      	ldrhi	r2, [pc, #60]	; (401a88 <system_init_flash+0x60>)
  401a4c:	4b0f      	ldr	r3, [pc, #60]	; (401a8c <system_init_flash+0x64>)
  401a4e:	601a      	str	r2, [r3, #0]
  401a50:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401a52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401a56:	4b0d      	ldr	r3, [pc, #52]	; (401a8c <system_init_flash+0x64>)
  401a58:	601a      	str	r2, [r3, #0]
  401a5a:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401a5c:	4a0c      	ldr	r2, [pc, #48]	; (401a90 <system_init_flash+0x68>)
  401a5e:	4b0b      	ldr	r3, [pc, #44]	; (401a8c <system_init_flash+0x64>)
  401a60:	601a      	str	r2, [r3, #0]
  401a62:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401a64:	4a0b      	ldr	r2, [pc, #44]	; (401a94 <system_init_flash+0x6c>)
  401a66:	4b09      	ldr	r3, [pc, #36]	; (401a8c <system_init_flash+0x64>)
  401a68:	601a      	str	r2, [r3, #0]
  401a6a:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401a6c:	4a0a      	ldr	r2, [pc, #40]	; (401a98 <system_init_flash+0x70>)
  401a6e:	4b07      	ldr	r3, [pc, #28]	; (401a8c <system_init_flash+0x64>)
  401a70:	601a      	str	r2, [r3, #0]
  401a72:	4770      	bx	lr
  401a74:	01312cff 	.word	0x01312cff
  401a78:	026259ff 	.word	0x026259ff
  401a7c:	039386ff 	.word	0x039386ff
  401a80:	04c4b3ff 	.word	0x04c4b3ff
  401a84:	05f5e0ff 	.word	0x05f5e0ff
  401a88:	04000500 	.word	0x04000500
  401a8c:	400e0a00 	.word	0x400e0a00
  401a90:	04000100 	.word	0x04000100
  401a94:	04000200 	.word	0x04000200
  401a98:	04000300 	.word	0x04000300

00401a9c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401a9c:	4b0a      	ldr	r3, [pc, #40]	; (401ac8 <_sbrk+0x2c>)
  401a9e:	681b      	ldr	r3, [r3, #0]
  401aa0:	b153      	cbz	r3, 401ab8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401aa2:	4b09      	ldr	r3, [pc, #36]	; (401ac8 <_sbrk+0x2c>)
  401aa4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401aa6:	181a      	adds	r2, r3, r0
  401aa8:	4908      	ldr	r1, [pc, #32]	; (401acc <_sbrk+0x30>)
  401aaa:	4291      	cmp	r1, r2
  401aac:	db08      	blt.n	401ac0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401aae:	4610      	mov	r0, r2
  401ab0:	4a05      	ldr	r2, [pc, #20]	; (401ac8 <_sbrk+0x2c>)
  401ab2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401ab4:	4618      	mov	r0, r3
  401ab6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401ab8:	4a05      	ldr	r2, [pc, #20]	; (401ad0 <_sbrk+0x34>)
  401aba:	4b03      	ldr	r3, [pc, #12]	; (401ac8 <_sbrk+0x2c>)
  401abc:	601a      	str	r2, [r3, #0]
  401abe:	e7f0      	b.n	401aa2 <_sbrk+0x6>
		return (caddr_t) -1;	
  401ac0:	f04f 30ff 	mov.w	r0, #4294967295
}
  401ac4:	4770      	bx	lr
  401ac6:	bf00      	nop
  401ac8:	20000a0c 	.word	0x20000a0c
  401acc:	2001fffc 	.word	0x2001fffc
  401ad0:	20003af0 	.word	0x20003af0

00401ad4 <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  401ad4:	2802      	cmp	r0, #2
  401ad6:	d815      	bhi.n	401b04 <disk_initialize+0x30>
{
  401ad8:	b510      	push	{r4, lr}
  401ada:	4604      	mov	r4, r0
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  401adc:	4b0b      	ldr	r3, [pc, #44]	; (401b0c <disk_initialize+0x38>)
  401ade:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  401ae0:	2803      	cmp	r0, #3
  401ae2:	d106      	bne.n	401af2 <disk_initialize+0x1e>
		mem_status = mem_test_unit_ready(drv);
  401ae4:	4620      	mov	r0, r4
  401ae6:	4b09      	ldr	r3, [pc, #36]	; (401b0c <disk_initialize+0x38>)
  401ae8:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  401aea:	2803      	cmp	r0, #3
  401aec:	d101      	bne.n	401af2 <disk_initialize+0x1e>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  401aee:	2001      	movs	r0, #1
  401af0:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  401af2:	b948      	cbnz	r0, 401b08 <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  401af4:	4620      	mov	r0, r4
  401af6:	4b06      	ldr	r3, [pc, #24]	; (401b10 <disk_initialize+0x3c>)
  401af8:	4798      	blx	r3
  401afa:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  401afc:	bf14      	ite	ne
  401afe:	2004      	movne	r0, #4
  401b00:	2000      	moveq	r0, #0
  401b02:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  401b04:	2001      	movs	r0, #1
  401b06:	4770      	bx	lr
		return STA_NOINIT;
  401b08:	2001      	movs	r0, #1
}
  401b0a:	bd10      	pop	{r4, pc}
  401b0c:	00401075 	.word	0x00401075
  401b10:	004010b9 	.word	0x004010b9

00401b14 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  401b14:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  401b16:	4b05      	ldr	r3, [pc, #20]	; (401b2c <disk_status+0x18>)
  401b18:	4798      	blx	r3
  401b1a:	b120      	cbz	r0, 401b26 <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  401b1c:	2802      	cmp	r0, #2
  401b1e:	bf0c      	ite	eq
  401b20:	2003      	moveq	r0, #3
  401b22:	2001      	movne	r0, #1
  401b24:	bd08      	pop	{r3, pc}
		return 0;
  401b26:	2000      	movs	r0, #0
	}
}
  401b28:	bd08      	pop	{r3, pc}
  401b2a:	bf00      	nop
  401b2c:	00401075 	.word	0x00401075

00401b30 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  401b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b34:	b083      	sub	sp, #12
  401b36:	4680      	mov	r8, r0
  401b38:	460d      	mov	r5, r1
  401b3a:	4614      	mov	r4, r2
  401b3c:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  401b3e:	4b15      	ldr	r3, [pc, #84]	; (401b94 <disk_read+0x64>)
  401b40:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  401b42:	b918      	cbnz	r0, 401b4c <disk_read+0x1c>
		return RES_ERROR;
  401b44:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  401b46:	b003      	add	sp, #12
  401b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b4c:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  401b4e:	a901      	add	r1, sp, #4
  401b50:	4640      	mov	r0, r8
  401b52:	4b11      	ldr	r3, [pc, #68]	; (401b98 <disk_read+0x68>)
  401b54:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  401b56:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  401b58:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  401b5c:	9b01      	ldr	r3, [sp, #4]
  401b5e:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  401b62:	429a      	cmp	r2, r3
  401b64:	d901      	bls.n	401b6a <disk_read+0x3a>
		return RES_PARERR;
  401b66:	2004      	movs	r0, #4
  401b68:	e7ed      	b.n	401b46 <disk_read+0x16>
	for (i = 0; i < count; i++) {
  401b6a:	46ba      	mov	sl, r7
  401b6c:	b177      	cbz	r7, 401b8c <disk_read+0x5c>
  401b6e:	0276      	lsls	r6, r6, #9
  401b70:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  401b72:	f8df b028 	ldr.w	fp, [pc, #40]	; 401b9c <disk_read+0x6c>
  401b76:	462a      	mov	r2, r5
  401b78:	4621      	mov	r1, r4
  401b7a:	4640      	mov	r0, r8
  401b7c:	47d8      	blx	fp
  401b7e:	b938      	cbnz	r0, 401b90 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  401b80:	3701      	adds	r7, #1
  401b82:	444c      	add	r4, r9
  401b84:	4435      	add	r5, r6
  401b86:	4557      	cmp	r7, sl
  401b88:	d1f5      	bne.n	401b76 <disk_read+0x46>
  401b8a:	e7dc      	b.n	401b46 <disk_read+0x16>
	return RES_OK;
  401b8c:	2000      	movs	r0, #0
  401b8e:	e7da      	b.n	401b46 <disk_read+0x16>
			return RES_ERROR;
  401b90:	2001      	movs	r0, #1
  401b92:	e7d8      	b.n	401b46 <disk_read+0x16>
  401b94:	004010ad 	.word	0x004010ad
  401b98:	0040108d 	.word	0x0040108d
  401b9c:	004010d5 	.word	0x004010d5

00401ba0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  401ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ba4:	b083      	sub	sp, #12
  401ba6:	4680      	mov	r8, r0
  401ba8:	460d      	mov	r5, r1
  401baa:	4614      	mov	r4, r2
  401bac:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  401bae:	4b15      	ldr	r3, [pc, #84]	; (401c04 <disk_write+0x64>)
  401bb0:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  401bb2:	b918      	cbnz	r0, 401bbc <disk_write+0x1c>
		return RES_ERROR;
  401bb4:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  401bb6:	b003      	add	sp, #12
  401bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401bbc:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  401bbe:	a901      	add	r1, sp, #4
  401bc0:	4640      	mov	r0, r8
  401bc2:	4b11      	ldr	r3, [pc, #68]	; (401c08 <disk_write+0x68>)
  401bc4:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  401bc6:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  401bc8:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  401bcc:	9b01      	ldr	r3, [sp, #4]
  401bce:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  401bd2:	429a      	cmp	r2, r3
  401bd4:	d901      	bls.n	401bda <disk_write+0x3a>
		return RES_PARERR;
  401bd6:	2004      	movs	r0, #4
  401bd8:	e7ed      	b.n	401bb6 <disk_write+0x16>
	for (i = 0; i < count; i++) {
  401bda:	46ba      	mov	sl, r7
  401bdc:	b177      	cbz	r7, 401bfc <disk_write+0x5c>
  401bde:	0276      	lsls	r6, r6, #9
  401be0:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  401be2:	f8df b028 	ldr.w	fp, [pc, #40]	; 401c0c <disk_write+0x6c>
  401be6:	462a      	mov	r2, r5
  401be8:	4621      	mov	r1, r4
  401bea:	4640      	mov	r0, r8
  401bec:	47d8      	blx	fp
  401bee:	b938      	cbnz	r0, 401c00 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  401bf0:	3701      	adds	r7, #1
  401bf2:	444c      	add	r4, r9
  401bf4:	4435      	add	r5, r6
  401bf6:	4557      	cmp	r7, sl
  401bf8:	d1f5      	bne.n	401be6 <disk_write+0x46>
  401bfa:	e7dc      	b.n	401bb6 <disk_write+0x16>
	return RES_OK;
  401bfc:	2000      	movs	r0, #0
  401bfe:	e7da      	b.n	401bb6 <disk_write+0x16>
			return RES_ERROR;
  401c00:	2001      	movs	r0, #1
  401c02:	e7d8      	b.n	401bb6 <disk_write+0x16>
  401c04:	004010ad 	.word	0x004010ad
  401c08:	0040108d 	.word	0x0040108d
  401c0c:	004010f9 	.word	0x004010f9

00401c10 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  401c10:	b510      	push	{r4, lr}
  401c12:	b082      	sub	sp, #8
  401c14:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  401c16:	2903      	cmp	r1, #3
  401c18:	d827      	bhi.n	401c6a <disk_ioctl+0x5a>
  401c1a:	e8df f001 	tbb	[pc, r1]
  401c1e:	071f      	.short	0x071f
  401c20:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  401c22:	2301      	movs	r3, #1
  401c24:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  401c26:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  401c28:	b002      	add	sp, #8
  401c2a:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  401c2c:	a901      	add	r1, sp, #4
  401c2e:	4b11      	ldr	r3, [pc, #68]	; (401c74 <disk_ioctl+0x64>)
  401c30:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  401c32:	9b01      	ldr	r3, [sp, #4]
  401c34:	3301      	adds	r3, #1
  401c36:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  401c38:	2000      	movs	r0, #0
	break;
  401c3a:	e7f5      	b.n	401c28 <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  401c3c:	4b0e      	ldr	r3, [pc, #56]	; (401c78 <disk_ioctl+0x68>)
  401c3e:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  401c40:	2808      	cmp	r0, #8
  401c42:	d814      	bhi.n	401c6e <disk_ioctl+0x5e>
  401c44:	f44f 738b 	mov.w	r3, #278	; 0x116
  401c48:	fa23 f000 	lsr.w	r0, r3, r0
  401c4c:	f010 0f01 	tst.w	r0, #1
  401c50:	d101      	bne.n	401c56 <disk_ioctl+0x46>
			return RES_ERROR;
  401c52:	2001      	movs	r0, #1
  401c54:	e7e8      	b.n	401c28 <disk_ioctl+0x18>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  401c56:	2000      	movs	r0, #0
  401c58:	7020      	strb	r0, [r4, #0]
	break;
  401c5a:	e7e5      	b.n	401c28 <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  401c5c:	4b07      	ldr	r3, [pc, #28]	; (401c7c <disk_ioctl+0x6c>)
  401c5e:	4798      	blx	r3
  401c60:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  401c62:	bf0c      	ite	eq
  401c64:	2000      	moveq	r0, #0
  401c66:	2003      	movne	r0, #3
  401c68:	e7de      	b.n	401c28 <disk_ioctl+0x18>
		res = RES_PARERR;
  401c6a:	2004      	movs	r0, #4
  401c6c:	e7dc      	b.n	401c28 <disk_ioctl+0x18>
			return RES_ERROR;
  401c6e:	2001      	movs	r0, #1
  401c70:	e7da      	b.n	401c28 <disk_ioctl+0x18>
  401c72:	bf00      	nop
  401c74:	0040108d 	.word	0x0040108d
  401c78:	004010ad 	.word	0x004010ad
  401c7c:	00401075 	.word	0x00401075

00401c80 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  401c80:	b530      	push	{r4, r5, lr}
  401c82:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  401c84:	4c11      	ldr	r4, [pc, #68]	; (401ccc <get_fattime+0x4c>)
  401c86:	ab07      	add	r3, sp, #28
  401c88:	aa08      	add	r2, sp, #32
  401c8a:	a909      	add	r1, sp, #36	; 0x24
  401c8c:	4620      	mov	r0, r4
  401c8e:	4d10      	ldr	r5, [pc, #64]	; (401cd0 <get_fattime+0x50>)
  401c90:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  401c92:	ab03      	add	r3, sp, #12
  401c94:	9300      	str	r3, [sp, #0]
  401c96:	ab04      	add	r3, sp, #16
  401c98:	aa05      	add	r2, sp, #20
  401c9a:	a906      	add	r1, sp, #24
  401c9c:	4620      	mov	r0, r4
  401c9e:	4c0d      	ldr	r4, [pc, #52]	; (401cd4 <get_fattime+0x54>)
  401ca0:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  401ca2:	9b04      	ldr	r3, [sp, #16]
  401ca4:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  401ca6:	9805      	ldr	r0, [sp, #20]
  401ca8:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  401cac:	9809      	ldr	r0, [sp, #36]	; 0x24
  401cae:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  401cb2:	9808      	ldr	r0, [sp, #32]
  401cb4:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  401cb8:	9807      	ldr	r0, [sp, #28]
  401cba:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  401cbe:	9806      	ldr	r0, [sp, #24]
  401cc0:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  401cc4:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  401cc8:	b00b      	add	sp, #44	; 0x2c
  401cca:	bd30      	pop	{r4, r5, pc}
  401ccc:	400e1860 	.word	0x400e1860
  401cd0:	00401785 	.word	0x00401785
  401cd4:	004017df 	.word	0x004017df

00401cd8 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  401cd8:	b13a      	cbz	r2, 401cea <mem_cpy+0x12>
  401cda:	3801      	subs	r0, #1
  401cdc:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  401cde:	f811 3b01 	ldrb.w	r3, [r1], #1
  401ce2:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  401ce6:	4291      	cmp	r1, r2
  401ce8:	d1f9      	bne.n	401cde <mem_cpy+0x6>
  401cea:	4770      	bx	lr

00401cec <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  401cec:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  401cee:	6983      	ldr	r3, [r0, #24]
  401cf0:	3b02      	subs	r3, #2
  401cf2:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
  401cf4:	bf3d      	ittte	cc
  401cf6:	7883      	ldrbcc	r3, [r0, #2]
  401cf8:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
  401cfa:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  401cfe:	2000      	movcs	r0, #0
}
  401d00:	4770      	bx	lr

00401d02 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  401d02:	4602      	mov	r2, r0
  401d04:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  401d08:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  401d0a:	01c3      	lsls	r3, r0, #7
  401d0c:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  401d10:	f812 0b01 	ldrb.w	r0, [r2], #1
  401d14:	fa50 f383 	uxtab	r3, r0, r3
  401d18:	b2d8      	uxtb	r0, r3
  401d1a:	428a      	cmp	r2, r1
  401d1c:	d1f5      	bne.n	401d0a <sum_sfn+0x8>
	return sum;
}
  401d1e:	4770      	bx	lr

00401d20 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  401d20:	b198      	cbz	r0, 401d4a <validate+0x2a>
{
  401d22:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  401d24:	7802      	ldrb	r2, [r0, #0]
  401d26:	b90a      	cbnz	r2, 401d2c <validate+0xc>
		return FR_INVALID_OBJECT;
  401d28:	2009      	movs	r0, #9
  401d2a:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  401d2c:	88c2      	ldrh	r2, [r0, #6]
  401d2e:	428a      	cmp	r2, r1
  401d30:	d001      	beq.n	401d36 <validate+0x16>
		return FR_INVALID_OBJECT;
  401d32:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  401d34:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  401d36:	7840      	ldrb	r0, [r0, #1]
  401d38:	4b05      	ldr	r3, [pc, #20]	; (401d50 <validate+0x30>)
  401d3a:	4798      	blx	r3
  401d3c:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  401d40:	2800      	cmp	r0, #0
  401d42:	bf14      	ite	ne
  401d44:	2003      	movne	r0, #3
  401d46:	2000      	moveq	r0, #0
  401d48:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  401d4a:	2009      	movs	r0, #9
  401d4c:	4770      	bx	lr
  401d4e:	bf00      	nop
  401d50:	00401b15 	.word	0x00401b15

00401d54 <check_fs>:
{
  401d54:	b538      	push	{r3, r4, r5, lr}
  401d56:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  401d58:	2301      	movs	r3, #1
  401d5a:	460a      	mov	r2, r1
  401d5c:	f100 0130 	add.w	r1, r0, #48	; 0x30
  401d60:	7840      	ldrb	r0, [r0, #1]
  401d62:	4d1d      	ldr	r5, [pc, #116]	; (401dd8 <check_fs+0x84>)
  401d64:	47a8      	blx	r5
  401d66:	b108      	cbz	r0, 401d6c <check_fs+0x18>
		return 3;
  401d68:	2003      	movs	r0, #3
  401d6a:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  401d6c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  401d70:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  401d74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401d78:	b21b      	sxth	r3, r3
  401d7a:	4a18      	ldr	r2, [pc, #96]	; (401ddc <check_fs+0x88>)
  401d7c:	4293      	cmp	r3, r2
  401d7e:	d001      	beq.n	401d84 <check_fs+0x30>
		return 2;
  401d80:	2002      	movs	r0, #2
  401d82:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  401d84:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  401d88:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  401d8c:	041b      	lsls	r3, r3, #16
  401d8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401d92:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  401d96:	4313      	orrs	r3, r2
  401d98:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  401d9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401da0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401da4:	4a0e      	ldr	r2, [pc, #56]	; (401de0 <check_fs+0x8c>)
  401da6:	4293      	cmp	r3, r2
  401da8:	d013      	beq.n	401dd2 <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  401daa:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  401dae:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  401db2:	0400      	lsls	r0, r0, #16
  401db4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  401db8:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  401dbc:	4318      	orrs	r0, r3
  401dbe:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  401dc2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401dc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  401dca:	1a80      	subs	r0, r0, r2
  401dcc:	bf18      	it	ne
  401dce:	2001      	movne	r0, #1
  401dd0:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  401dd2:	2000      	movs	r0, #0
}
  401dd4:	bd38      	pop	{r3, r4, r5, pc}
  401dd6:	bf00      	nop
  401dd8:	00401b31 	.word	0x00401b31
  401ddc:	ffffaa55 	.word	0xffffaa55
  401de0:	00544146 	.word	0x00544146

00401de4 <chk_mounted>:
{
  401de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  401de6:	6804      	ldr	r4, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  401de8:	7823      	ldrb	r3, [r4, #0]
  401dea:	3b30      	subs	r3, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  401dec:	2b09      	cmp	r3, #9
  401dee:	d802      	bhi.n	401df6 <chk_mounted+0x12>
  401df0:	7865      	ldrb	r5, [r4, #1]
  401df2:	2d3a      	cmp	r5, #58	; 0x3a
  401df4:	d018      	beq.n	401e28 <chk_mounted+0x44>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  401df6:	4bb0      	ldr	r3, [pc, #704]	; (4020b8 <chk_mounted+0x2d4>)
  401df8:	681c      	ldr	r4, [r3, #0]
  401dfa:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401dfc:	2c00      	cmp	r4, #0
  401dfe:	f000 8142 	beq.w	402086 <chk_mounted+0x2a2>
  401e02:	4615      	mov	r5, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  401e04:	7823      	ldrb	r3, [r4, #0]
  401e06:	b1ab      	cbz	r3, 401e34 <chk_mounted+0x50>
		stat = disk_status(fs->drv);
  401e08:	7860      	ldrb	r0, [r4, #1]
  401e0a:	4bac      	ldr	r3, [pc, #688]	; (4020bc <chk_mounted+0x2d8>)
  401e0c:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  401e0e:	f010 0f01 	tst.w	r0, #1
  401e12:	d10f      	bne.n	401e34 <chk_mounted+0x50>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  401e14:	2d00      	cmp	r5, #0
  401e16:	f000 8138 	beq.w	40208a <chk_mounted+0x2a6>
  401e1a:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  401e1e:	2800      	cmp	r0, #0
  401e20:	bf0c      	ite	eq
  401e22:	2000      	moveq	r0, #0
  401e24:	200a      	movne	r0, #10
  401e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p += 2; *path = p;				/* Return pointer to the path name */
  401e28:	3402      	adds	r4, #2
  401e2a:	6004      	str	r4, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  401e2c:	2b00      	cmp	r3, #0
  401e2e:	d0e2      	beq.n	401df6 <chk_mounted+0x12>
		return FR_INVALID_DRIVE;
  401e30:	200b      	movs	r0, #11
  401e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  401e34:	2000      	movs	r0, #0
  401e36:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  401e38:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  401e3a:	4ba1      	ldr	r3, [pc, #644]	; (4020c0 <chk_mounted+0x2dc>)
  401e3c:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  401e3e:	f010 0f01 	tst.w	r0, #1
  401e42:	d001      	beq.n	401e48 <chk_mounted+0x64>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  401e44:	2003      	movs	r0, #3
  401e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  401e48:	b125      	cbz	r5, 401e54 <chk_mounted+0x70>
  401e4a:	f010 0f04 	tst.w	r0, #4
  401e4e:	d001      	beq.n	401e54 <chk_mounted+0x70>
		return FR_WRITE_PROTECTED;
  401e50:	200a      	movs	r0, #10
  401e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401e54:	2100      	movs	r1, #0
  401e56:	4620      	mov	r0, r4
  401e58:	4b9a      	ldr	r3, [pc, #616]	; (4020c4 <chk_mounted+0x2e0>)
  401e5a:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  401e5c:	2801      	cmp	r0, #1
  401e5e:	d006      	beq.n	401e6e <chk_mounted+0x8a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401e60:	2500      	movs	r5, #0
	if (fmt == 3) return FR_DISK_ERR;
  401e62:	2803      	cmp	r0, #3
  401e64:	f000 8113 	beq.w	40208e <chk_mounted+0x2aa>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401e68:	b1c8      	cbz	r0, 401e9e <chk_mounted+0xba>
  401e6a:	200d      	movs	r0, #13
  401e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  401e6e:	f894 31f2 	ldrb.w	r3, [r4, #498]	; 0x1f2
  401e72:	b90b      	cbnz	r3, 401e78 <chk_mounted+0x94>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401e74:	200d      	movs	r0, #13
  401e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  401e78:	f894 31f9 	ldrb.w	r3, [r4, #505]	; 0x1f9
  401e7c:	f894 51f8 	ldrb.w	r5, [r4, #504]	; 0x1f8
  401e80:	042d      	lsls	r5, r5, #16
  401e82:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  401e86:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
  401e8a:	431d      	orrs	r5, r3
  401e8c:	f894 31f7 	ldrb.w	r3, [r4, #503]	; 0x1f7
  401e90:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  401e94:	4629      	mov	r1, r5
  401e96:	4620      	mov	r0, r4
  401e98:	4b8a      	ldr	r3, [pc, #552]	; (4020c4 <chk_mounted+0x2e0>)
  401e9a:	4798      	blx	r3
  401e9c:	e7e1      	b.n	401e62 <chk_mounted+0x7e>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  401e9e:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  401ea2:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
  401ea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401eaa:	b21b      	sxth	r3, r3
  401eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401eb0:	d001      	beq.n	401eb6 <chk_mounted+0xd2>
		return FR_NO_FILESYSTEM;
  401eb2:	200d      	movs	r0, #13
  401eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  401eb6:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  401eba:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  401ebe:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  401ec2:	d10d      	bne.n	401ee0 <chk_mounted+0xfc>
  401ec4:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
  401ec8:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
  401ecc:	0412      	lsls	r2, r2, #16
  401ece:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  401ed2:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
  401ed6:	431a      	orrs	r2, r3
  401ed8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
  401edc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  401ee0:	61e2      	str	r2, [r4, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  401ee2:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
  401ee6:	f884 e003 	strb.w	lr, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  401eea:	f10e 33ff 	add.w	r3, lr, #4294967295
  401eee:	b2db      	uxtb	r3, r3
  401ef0:	2b01      	cmp	r3, #1
  401ef2:	d901      	bls.n	401ef8 <chk_mounted+0x114>
  401ef4:	200d      	movs	r0, #13
  401ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  401ef8:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
  401efc:	70a6      	strb	r6, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  401efe:	2e00      	cmp	r6, #0
  401f00:	f000 80c7 	beq.w	402092 <chk_mounted+0x2ae>
  401f04:	1e73      	subs	r3, r6, #1
  401f06:	4233      	tst	r3, r6
  401f08:	d001      	beq.n	401f0e <chk_mounted+0x12a>
  401f0a:	200d      	movs	r0, #13
  401f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  401f0e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  401f12:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  401f16:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  401f1a:	8121      	strh	r1, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  401f1c:	f011 0f0f 	tst.w	r1, #15
  401f20:	f040 80b9 	bne.w	402096 <chk_mounted+0x2b2>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  401f24:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  401f28:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  401f2c:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  401f30:	d10d      	bne.n	401f4e <chk_mounted+0x16a>
  401f32:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
  401f36:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
  401f3a:	041b      	lsls	r3, r3, #16
  401f3c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401f40:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
  401f44:	4303      	orrs	r3, r0
  401f46:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  401f4a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  401f4e:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
  401f52:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  401f56:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  401f5a:	f000 809e 	beq.w	40209a <chk_mounted+0x2b6>
	fasize *= b;										/* Number of sectors for FAT area */
  401f5e:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  401f62:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  401f66:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  401f68:	4283      	cmp	r3, r0
  401f6a:	f0c0 8098 	bcc.w	40209e <chk_mounted+0x2ba>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  401f6e:	1a1b      	subs	r3, r3, r0
  401f70:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  401f74:	2b00      	cmp	r3, #0
  401f76:	f000 8094 	beq.w	4020a2 <chk_mounted+0x2be>
	fmt = FS_FAT12;
  401f7a:	f640 76f5 	movw	r6, #4085	; 0xff5
  401f7e:	42b3      	cmp	r3, r6
  401f80:	bf8c      	ite	hi
  401f82:	2602      	movhi	r6, #2
  401f84:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  401f86:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  401f8a:	4563      	cmp	r3, ip
  401f8c:	f200 80a4 	bhi.w	4020d8 <chk_mounted+0x2f4>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  401f90:	3302      	adds	r3, #2
  401f92:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  401f94:	4428      	add	r0, r5
  401f96:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  401f98:	443d      	add	r5, r7
  401f9a:	6225      	str	r5, [r4, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  401f9c:	2900      	cmp	r1, #0
  401f9e:	f000 8088 	beq.w	4020b2 <chk_mounted+0x2ce>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  401fa2:	4475      	add	r5, lr
  401fa4:	6265      	str	r5, [r4, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  401fa6:	2e02      	cmp	r6, #2
  401fa8:	bf0f      	iteee	eq
  401faa:	005b      	lsleq	r3, r3, #1
  401fac:	eb03 0143 	addne.w	r1, r3, r3, lsl #1
  401fb0:	f003 0301 	andne.w	r3, r3, #1
  401fb4:	eb03 0351 	addne.w	r3, r3, r1, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  401fb8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  401fbc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  401fc0:	d375      	bcc.n	4020ae <chk_mounted+0x2ca>
	fs->free_clust = 0xFFFFFFFF;
  401fc2:	f04f 33ff 	mov.w	r3, #4294967295
  401fc6:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  401fc8:	2300      	movs	r3, #0
  401fca:	60e3      	str	r3, [r4, #12]
  401fcc:	e04a      	b.n	402064 <chk_mounted+0x280>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  401fce:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  401fd2:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  401fd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  401fda:	b21b      	sxth	r3, r3
  401fdc:	4a3a      	ldr	r2, [pc, #232]	; (4020c8 <chk_mounted+0x2e4>)
  401fde:	4293      	cmp	r3, r2
  401fe0:	d14b      	bne.n	40207a <chk_mounted+0x296>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  401fe2:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  401fe6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  401fea:	041b      	lsls	r3, r3, #16
  401fec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401ff0:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  401ff4:	4313      	orrs	r3, r2
  401ff6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
  401ffa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  401ffe:	4a33      	ldr	r2, [pc, #204]	; (4020cc <chk_mounted+0x2e8>)
  402000:	4293      	cmp	r3, r2
  402002:	d13c      	bne.n	40207e <chk_mounted+0x29a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  402004:	f894 2217 	ldrb.w	r2, [r4, #535]	; 0x217
  402008:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
  40200c:	041b      	lsls	r3, r3, #16
  40200e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402012:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
  402016:	4313      	orrs	r3, r2
  402018:	f894 2215 	ldrb.w	r2, [r4, #533]	; 0x215
  40201c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  402020:	4a2b      	ldr	r2, [pc, #172]	; (4020d0 <chk_mounted+0x2ec>)
  402022:	4293      	cmp	r3, r2
  402024:	d12d      	bne.n	402082 <chk_mounted+0x29e>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  402026:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
  40202a:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
  40202e:	041b      	lsls	r3, r3, #16
  402030:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402034:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
  402038:	4313      	orrs	r3, r2
  40203a:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
  40203e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402042:	60e3      	str	r3, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  402044:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
  402048:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
  40204c:	041b      	lsls	r3, r3, #16
  40204e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402052:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
  402056:	4313      	orrs	r3, r2
  402058:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
  40205c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  402060:	6123      	str	r3, [r4, #16]
  402062:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  402064:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  402066:	4a1b      	ldr	r2, [pc, #108]	; (4020d4 <chk_mounted+0x2f0>)
  402068:	8813      	ldrh	r3, [r2, #0]
  40206a:	3301      	adds	r3, #1
  40206c:	b29b      	uxth	r3, r3
  40206e:	8013      	strh	r3, [r2, #0]
  402070:	80e3      	strh	r3, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  402072:	2000      	movs	r0, #0
  402074:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->wflag = 0;
  402076:	7120      	strb	r0, [r4, #4]
	return FR_OK;
  402078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40207a:	2603      	movs	r6, #3
  40207c:	e7f2      	b.n	402064 <chk_mounted+0x280>
  40207e:	2603      	movs	r6, #3
  402080:	e7f0      	b.n	402064 <chk_mounted+0x280>
  402082:	2603      	movs	r6, #3
  402084:	e7ee      	b.n	402064 <chk_mounted+0x280>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  402086:	200c      	movs	r0, #12
  402088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  40208a:	2000      	movs	r0, #0
  40208c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  40208e:	2001      	movs	r0, #1
  402090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  402092:	200d      	movs	r0, #13
  402094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  402096:	200d      	movs	r0, #13
  402098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  40209a:	200d      	movs	r0, #13
  40209c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  40209e:	200d      	movs	r0, #13
  4020a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  4020a2:	200d      	movs	r0, #13
  4020a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  4020a6:	200d      	movs	r0, #13
  4020a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  4020aa:	200d      	movs	r0, #13
  4020ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  4020ae:	200d      	movs	r0, #13
  4020b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  4020b2:	200d      	movs	r0, #13
  4020b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4020b6:	bf00      	nop
  4020b8:	20000a10 	.word	0x20000a10
  4020bc:	00401b15 	.word	0x00401b15
  4020c0:	00401ad5 	.word	0x00401ad5
  4020c4:	00401d55 	.word	0x00401d55
  4020c8:	ffffaa55 	.word	0xffffaa55
  4020cc:	41615252 	.word	0x41615252
  4020d0:	61417272 	.word	0x61417272
  4020d4:	20000a14 	.word	0x20000a14
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  4020d8:	3302      	adds	r3, #2
  4020da:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  4020dc:	4428      	add	r0, r5
  4020de:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  4020e0:	442f      	add	r7, r5
  4020e2:	6227      	str	r7, [r4, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  4020e4:	2900      	cmp	r1, #0
  4020e6:	d1e0      	bne.n	4020aa <chk_mounted+0x2c6>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  4020e8:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
  4020ec:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
  4020f0:	0409      	lsls	r1, r1, #16
  4020f2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  4020f6:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  4020fa:	4301      	orrs	r1, r0
  4020fc:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  402100:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  402104:	6261      	str	r1, [r4, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  402106:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402108:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40210c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  402110:	d3c9      	bcc.n	4020a6 <chk_mounted+0x2c2>
	fs->free_clust = 0xFFFFFFFF;
  402112:	f04f 33ff 	mov.w	r3, #4294967295
  402116:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  402118:	2300      	movs	r3, #0
  40211a:	60e3      	str	r3, [r4, #12]
	 	fs->fsi_flag = 0;
  40211c:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  40211e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
  402122:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
  402126:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  40212a:	442a      	add	r2, r5
  40212c:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  40212e:	2301      	movs	r3, #1
  402130:	f104 0130 	add.w	r1, r4, #48	; 0x30
  402134:	7860      	ldrb	r0, [r4, #1]
  402136:	4d03      	ldr	r5, [pc, #12]	; (402144 <chk_mounted+0x360>)
  402138:	47a8      	blx	r5
  40213a:	2800      	cmp	r0, #0
  40213c:	f43f af47 	beq.w	401fce <chk_mounted+0x1ea>
  402140:	2603      	movs	r6, #3
  402142:	e78f      	b.n	402064 <chk_mounted+0x280>
  402144:	00401b31 	.word	0x00401b31

00402148 <move_window>:
{
  402148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  40214c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  40214e:	428f      	cmp	r7, r1
  402150:	d035      	beq.n	4021be <move_window+0x76>
  402152:	460e      	mov	r6, r1
  402154:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  402156:	7903      	ldrb	r3, [r0, #4]
  402158:	b91b      	cbnz	r3, 402162 <move_window+0x1a>
		if (sector) {
  40215a:	bb2e      	cbnz	r6, 4021a8 <move_window+0x60>
	return FR_OK;
  40215c:	2000      	movs	r0, #0
  40215e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  402162:	f100 0830 	add.w	r8, r0, #48	; 0x30
  402166:	2301      	movs	r3, #1
  402168:	463a      	mov	r2, r7
  40216a:	4641      	mov	r1, r8
  40216c:	7840      	ldrb	r0, [r0, #1]
  40216e:	4d18      	ldr	r5, [pc, #96]	; (4021d0 <move_window+0x88>)
  402170:	47a8      	blx	r5
  402172:	bb38      	cbnz	r0, 4021c4 <move_window+0x7c>
			fs->wflag = 0;
  402174:	2300      	movs	r3, #0
  402176:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  402178:	6a23      	ldr	r3, [r4, #32]
  40217a:	69e2      	ldr	r2, [r4, #28]
  40217c:	4413      	add	r3, r2
  40217e:	429f      	cmp	r7, r3
  402180:	d2eb      	bcs.n	40215a <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  402182:	78e5      	ldrb	r5, [r4, #3]
  402184:	2d01      	cmp	r5, #1
  402186:	d9e8      	bls.n	40215a <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  402188:	f04f 0a01 	mov.w	sl, #1
  40218c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 4021d0 <move_window+0x88>
					wsect += fs->fsize;
  402190:	69e3      	ldr	r3, [r4, #28]
  402192:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  402194:	4653      	mov	r3, sl
  402196:	463a      	mov	r2, r7
  402198:	4641      	mov	r1, r8
  40219a:	7860      	ldrb	r0, [r4, #1]
  40219c:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40219e:	3d01      	subs	r5, #1
  4021a0:	b2ed      	uxtb	r5, r5
  4021a2:	2d01      	cmp	r5, #1
  4021a4:	d1f4      	bne.n	402190 <move_window+0x48>
  4021a6:	e7d8      	b.n	40215a <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  4021a8:	2301      	movs	r3, #1
  4021aa:	4632      	mov	r2, r6
  4021ac:	f104 0130 	add.w	r1, r4, #48	; 0x30
  4021b0:	7860      	ldrb	r0, [r4, #1]
  4021b2:	4d08      	ldr	r5, [pc, #32]	; (4021d4 <move_window+0x8c>)
  4021b4:	47a8      	blx	r5
  4021b6:	b940      	cbnz	r0, 4021ca <move_window+0x82>
			fs->winsect = sector;
  4021b8:	62e6      	str	r6, [r4, #44]	; 0x2c
  4021ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  4021be:	2000      	movs	r0, #0
  4021c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  4021c4:	2001      	movs	r0, #1
  4021c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  4021ca:	2001      	movs	r0, #1
}
  4021cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4021d0:	00401ba1 	.word	0x00401ba1
  4021d4:	00401b31 	.word	0x00401b31

004021d8 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4021d8:	2901      	cmp	r1, #1
  4021da:	d96a      	bls.n	4022b2 <get_fat+0xda>
{
  4021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4021de:	6983      	ldr	r3, [r0, #24]
  4021e0:	4299      	cmp	r1, r3
  4021e2:	d268      	bcs.n	4022b6 <get_fat+0xde>
  4021e4:	460c      	mov	r4, r1
  4021e6:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  4021e8:	7803      	ldrb	r3, [r0, #0]
  4021ea:	2b02      	cmp	r3, #2
  4021ec:	d02f      	beq.n	40224e <get_fat+0x76>
  4021ee:	2b03      	cmp	r3, #3
  4021f0:	d041      	beq.n	402276 <get_fat+0x9e>
  4021f2:	2b01      	cmp	r3, #1
  4021f4:	d002      	beq.n	4021fc <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  4021f6:	f04f 30ff 	mov.w	r0, #4294967295
  4021fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  4021fc:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402200:	6a01      	ldr	r1, [r0, #32]
  402202:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402206:	4b2d      	ldr	r3, [pc, #180]	; (4022bc <get_fat+0xe4>)
  402208:	4798      	blx	r3
  40220a:	b110      	cbz	r0, 402212 <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40220c:	f04f 30ff 	mov.w	r0, #4294967295
  402210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  402212:	f3c7 0308 	ubfx	r3, r7, #0, #9
  402216:	4433      	add	r3, r6
  402218:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  40221c:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  40221e:	6a31      	ldr	r1, [r6, #32]
  402220:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  402224:	4630      	mov	r0, r6
  402226:	4b25      	ldr	r3, [pc, #148]	; (4022bc <get_fat+0xe4>)
  402228:	4798      	blx	r3
  40222a:	b110      	cbz	r0, 402232 <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40222c:	f04f 30ff 	mov.w	r0, #4294967295
  402230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  402232:	f3c7 0708 	ubfx	r7, r7, #0, #9
  402236:	19f0      	adds	r0, r6, r7
  402238:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  40223c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  402240:	f014 0f01 	tst.w	r4, #1
  402244:	bf14      	ite	ne
  402246:	0900      	lsrne	r0, r0, #4
  402248:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  40224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  40224e:	6a01      	ldr	r1, [r0, #32]
  402250:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402254:	4b19      	ldr	r3, [pc, #100]	; (4022bc <get_fat+0xe4>)
  402256:	4798      	blx	r3
  402258:	b110      	cbz	r0, 402260 <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40225a:	f04f 30ff 	mov.w	r0, #4294967295
  40225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  402260:	0060      	lsls	r0, r4, #1
  402262:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  402266:	4430      	add	r0, r6
  402268:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  40226c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402270:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  402274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  402276:	6a01      	ldr	r1, [r0, #32]
  402278:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  40227c:	4b0f      	ldr	r3, [pc, #60]	; (4022bc <get_fat+0xe4>)
  40227e:	4798      	blx	r3
  402280:	b110      	cbz	r0, 402288 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402282:	f04f 30ff 	mov.w	r0, #4294967295
}
  402286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  402288:	00a0      	lsls	r0, r4, #2
  40228a:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  40228e:	f100 0230 	add.w	r2, r0, #48	; 0x30
  402292:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  402294:	78d1      	ldrb	r1, [r2, #3]
  402296:	7893      	ldrb	r3, [r2, #2]
  402298:	041b      	lsls	r3, r3, #16
  40229a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  40229e:	4430      	add	r0, r6
  4022a0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4022a4:	4318      	orrs	r0, r3
  4022a6:	7853      	ldrb	r3, [r2, #1]
  4022a8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4022ac:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  4022b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4022b2:	2001      	movs	r0, #1
  4022b4:	4770      	bx	lr
  4022b6:	2001      	movs	r0, #1
  4022b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4022ba:	bf00      	nop
  4022bc:	00402149 	.word	0x00402149

004022c0 <dir_sdi>:
{
  4022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4022c2:	4605      	mov	r5, r0
  4022c4:	460c      	mov	r4, r1
	dj->index = idx;
  4022c6:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  4022c8:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  4022ca:	2901      	cmp	r1, #1
  4022cc:	d03d      	beq.n	40234a <dir_sdi+0x8a>
  4022ce:	6803      	ldr	r3, [r0, #0]
  4022d0:	699a      	ldr	r2, [r3, #24]
  4022d2:	4291      	cmp	r1, r2
  4022d4:	d301      	bcc.n	4022da <dir_sdi+0x1a>
		return FR_INT_ERR;
  4022d6:	2002      	movs	r0, #2
  4022d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  4022da:	b961      	cbnz	r1, 4022f6 <dir_sdi+0x36>
  4022dc:	781a      	ldrb	r2, [r3, #0]
  4022de:	2a03      	cmp	r2, #3
  4022e0:	d006      	beq.n	4022f0 <dir_sdi+0x30>
		dj->clust = clst;
  4022e2:	2200      	movs	r2, #0
  4022e4:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  4022e6:	891a      	ldrh	r2, [r3, #8]
  4022e8:	42a2      	cmp	r2, r4
  4022ea:	d821      	bhi.n	402330 <dir_sdi+0x70>
			return FR_INT_ERR;
  4022ec:	2002      	movs	r0, #2
  4022ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  4022f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  4022f2:	2900      	cmp	r1, #0
  4022f4:	d0f5      	beq.n	4022e2 <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  4022f6:	789e      	ldrb	r6, [r3, #2]
  4022f8:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  4022fa:	42b4      	cmp	r4, r6
  4022fc:	d310      	bcc.n	402320 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  4022fe:	4f17      	ldr	r7, [pc, #92]	; (40235c <dir_sdi+0x9c>)
  402300:	6828      	ldr	r0, [r5, #0]
  402302:	47b8      	blx	r7
  402304:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402306:	f1b0 3fff 	cmp.w	r0, #4294967295
  40230a:	d020      	beq.n	40234e <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  40230c:	2801      	cmp	r0, #1
  40230e:	d920      	bls.n	402352 <dir_sdi+0x92>
  402310:	682b      	ldr	r3, [r5, #0]
  402312:	699b      	ldr	r3, [r3, #24]
  402314:	4298      	cmp	r0, r3
  402316:	d21e      	bcs.n	402356 <dir_sdi+0x96>
			idx -= ic;
  402318:	1ba4      	subs	r4, r4, r6
  40231a:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  40231c:	42a6      	cmp	r6, r4
  40231e:	d9ef      	bls.n	402300 <dir_sdi+0x40>
		dj->clust = clst;
  402320:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402322:	6828      	ldr	r0, [r5, #0]
  402324:	4b0e      	ldr	r3, [pc, #56]	; (402360 <dir_sdi+0xa0>)
  402326:	4798      	blx	r3
  402328:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  40232c:	6128      	str	r0, [r5, #16]
  40232e:	e003      	b.n	402338 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402332:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  402336:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  402338:	682b      	ldr	r3, [r5, #0]
  40233a:	3330      	adds	r3, #48	; 0x30
  40233c:	f004 040f 	and.w	r4, r4, #15
  402340:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  402344:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  402346:	2000      	movs	r0, #0
  402348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  40234a:	2002      	movs	r0, #2
  40234c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40234e:	2001      	movs	r0, #1
  402350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  402352:	2002      	movs	r0, #2
  402354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402356:	2002      	movs	r0, #2
}
  402358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40235a:	bf00      	nop
  40235c:	004021d9 	.word	0x004021d9
  402360:	00401ced 	.word	0x00401ced

00402364 <put_fat>:
{
  402364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402368:	2901      	cmp	r1, #1
  40236a:	f240 808f 	bls.w	40248c <put_fat+0x128>
  40236e:	6983      	ldr	r3, [r0, #24]
  402370:	4299      	cmp	r1, r3
  402372:	d301      	bcc.n	402378 <put_fat+0x14>
		res = FR_INT_ERR;
  402374:	2702      	movs	r7, #2
	return res;
  402376:	e08a      	b.n	40248e <put_fat+0x12a>
  402378:	4615      	mov	r5, r2
  40237a:	460c      	mov	r4, r1
  40237c:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  40237e:	7803      	ldrb	r3, [r0, #0]
  402380:	2b02      	cmp	r3, #2
  402382:	d04e      	beq.n	402422 <put_fat+0xbe>
  402384:	2b03      	cmp	r3, #3
  402386:	d05f      	beq.n	402448 <put_fat+0xe4>
  402388:	2b01      	cmp	r3, #1
  40238a:	d003      	beq.n	402394 <put_fat+0x30>
			res = FR_INT_ERR;
  40238c:	2702      	movs	r7, #2
		fs->wflag = 1;
  40238e:	2301      	movs	r3, #1
  402390:	7133      	strb	r3, [r6, #4]
  402392:	e07c      	b.n	40248e <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  402394:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402398:	6a01      	ldr	r1, [r0, #32]
  40239a:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  40239e:	4b3d      	ldr	r3, [pc, #244]	; (402494 <put_fat+0x130>)
  4023a0:	4798      	blx	r3
			if (res != FR_OK) break;
  4023a2:	4607      	mov	r7, r0
  4023a4:	2800      	cmp	r0, #0
  4023a6:	d1f2      	bne.n	40238e <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  4023a8:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4023ac:	f014 0f01 	tst.w	r4, #1
  4023b0:	d01c      	beq.n	4023ec <put_fat+0x88>
  4023b2:	4433      	add	r3, r6
  4023b4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  4023b8:	f002 020f 	and.w	r2, r2, #15
  4023bc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  4023c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  4023c4:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  4023c8:	2301      	movs	r3, #1
  4023ca:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4023cc:	6a31      	ldr	r1, [r6, #32]
  4023ce:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4023d2:	4630      	mov	r0, r6
  4023d4:	4b2f      	ldr	r3, [pc, #188]	; (402494 <put_fat+0x130>)
  4023d6:	4798      	blx	r3
			if (res != FR_OK) break;
  4023d8:	2800      	cmp	r0, #0
  4023da:	d153      	bne.n	402484 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  4023dc:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4023e0:	f3c5 1207 	ubfx	r2, r5, #4, #8
  4023e4:	44b0      	add	r8, r6
  4023e6:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  4023ea:	e7d0      	b.n	40238e <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4023ec:	4433      	add	r3, r6
  4023ee:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  4023f2:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  4023f6:	2301      	movs	r3, #1
  4023f8:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4023fa:	6a31      	ldr	r1, [r6, #32]
  4023fc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402400:	4630      	mov	r0, r6
  402402:	4b24      	ldr	r3, [pc, #144]	; (402494 <put_fat+0x130>)
  402404:	4798      	blx	r3
			if (res != FR_OK) break;
  402406:	2800      	cmp	r0, #0
  402408:	d13e      	bne.n	402488 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  40240a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  40240e:	eb06 0308 	add.w	r3, r6, r8
  402412:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  402416:	f023 030f 	bic.w	r3, r3, #15
  40241a:	f3c5 2203 	ubfx	r2, r5, #8, #4
  40241e:	431a      	orrs	r2, r3
  402420:	e7e0      	b.n	4023e4 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  402422:	6a01      	ldr	r1, [r0, #32]
  402424:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402428:	4b1a      	ldr	r3, [pc, #104]	; (402494 <put_fat+0x130>)
  40242a:	4798      	blx	r3
			if (res != FR_OK) break;
  40242c:	4607      	mov	r7, r0
  40242e:	2800      	cmp	r0, #0
  402430:	d1ad      	bne.n	40238e <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  402432:	0063      	lsls	r3, r4, #1
  402434:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  402438:	4433      	add	r3, r6
  40243a:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  40243e:	f3c5 2207 	ubfx	r2, r5, #8, #8
  402442:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  402446:	e7a2      	b.n	40238e <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  402448:	6a01      	ldr	r1, [r0, #32]
  40244a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  40244e:	4b11      	ldr	r3, [pc, #68]	; (402494 <put_fat+0x130>)
  402450:	4798      	blx	r3
			if (res != FR_OK) break;
  402452:	4607      	mov	r7, r0
  402454:	2800      	cmp	r0, #0
  402456:	d19a      	bne.n	40238e <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  402458:	00a1      	lsls	r1, r4, #2
  40245a:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  40245e:	f101 0330 	add.w	r3, r1, #48	; 0x30
  402462:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  402464:	78da      	ldrb	r2, [r3, #3]
  402466:	0612      	lsls	r2, r2, #24
  402468:	4431      	add	r1, r6
  40246a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  40246e:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  402470:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  402474:	f3c2 2107 	ubfx	r1, r2, #8, #8
  402478:	7059      	strb	r1, [r3, #1]
  40247a:	0c11      	lsrs	r1, r2, #16
  40247c:	7099      	strb	r1, [r3, #2]
  40247e:	0e12      	lsrs	r2, r2, #24
  402480:	70da      	strb	r2, [r3, #3]
			break;
  402482:	e784      	b.n	40238e <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402484:	4607      	mov	r7, r0
  402486:	e782      	b.n	40238e <put_fat+0x2a>
  402488:	4607      	mov	r7, r0
  40248a:	e780      	b.n	40238e <put_fat+0x2a>
		res = FR_INT_ERR;
  40248c:	2702      	movs	r7, #2
}
  40248e:	4638      	mov	r0, r7
  402490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402494:	00402149 	.word	0x00402149

00402498 <create_chain>:
{
  402498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40249c:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  40249e:	4688      	mov	r8, r1
  4024a0:	b941      	cbnz	r1, 4024b4 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  4024a2:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4024a4:	b186      	cbz	r6, 4024c8 <create_chain+0x30>
  4024a6:	6983      	ldr	r3, [r0, #24]
  4024a8:	429e      	cmp	r6, r3
  4024aa:	bf28      	it	cs
  4024ac:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  4024ae:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4024b0:	4f27      	ldr	r7, [pc, #156]	; (402550 <create_chain+0xb8>)
  4024b2:	e017      	b.n	4024e4 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  4024b4:	4b26      	ldr	r3, [pc, #152]	; (402550 <create_chain+0xb8>)
  4024b6:	4798      	blx	r3
  4024b8:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4024ba:	2801      	cmp	r0, #1
  4024bc:	d93e      	bls.n	40253c <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  4024be:	69aa      	ldr	r2, [r5, #24]
  4024c0:	4290      	cmp	r0, r2
  4024c2:	d340      	bcc.n	402546 <create_chain+0xae>
		scl = clst;
  4024c4:	4646      	mov	r6, r8
  4024c6:	e7f2      	b.n	4024ae <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4024c8:	2601      	movs	r6, #1
  4024ca:	e7f0      	b.n	4024ae <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4024cc:	4621      	mov	r1, r4
  4024ce:	4628      	mov	r0, r5
  4024d0:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  4024d2:	4603      	mov	r3, r0
  4024d4:	b170      	cbz	r0, 4024f4 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  4024d6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4024da:	d034      	beq.n	402546 <create_chain+0xae>
  4024dc:	2801      	cmp	r0, #1
  4024de:	d032      	beq.n	402546 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4024e0:	42b4      	cmp	r4, r6
  4024e2:	d02f      	beq.n	402544 <create_chain+0xac>
		ncl++;							/* Next cluster */
  4024e4:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  4024e6:	69ab      	ldr	r3, [r5, #24]
  4024e8:	429c      	cmp	r4, r3
  4024ea:	d3ef      	bcc.n	4024cc <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  4024ec:	2e01      	cmp	r6, #1
  4024ee:	d927      	bls.n	402540 <create_chain+0xa8>
			ncl = 2;
  4024f0:	2402      	movs	r4, #2
  4024f2:	e7eb      	b.n	4024cc <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  4024f4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  4024f8:	4621      	mov	r1, r4
  4024fa:	4628      	mov	r0, r5
  4024fc:	4b15      	ldr	r3, [pc, #84]	; (402554 <create_chain+0xbc>)
  4024fe:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  402500:	4603      	mov	r3, r0
  402502:	b9a8      	cbnz	r0, 402530 <create_chain+0x98>
  402504:	f1b8 0f00 	cmp.w	r8, #0
  402508:	d10a      	bne.n	402520 <create_chain+0x88>
		fs->last_clust = ncl;			/* Update FSINFO */
  40250a:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  40250c:	692b      	ldr	r3, [r5, #16]
  40250e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402512:	d01b      	beq.n	40254c <create_chain+0xb4>
			fs->free_clust--;
  402514:	3b01      	subs	r3, #1
  402516:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  402518:	2301      	movs	r3, #1
  40251a:	716b      	strb	r3, [r5, #5]
  40251c:	4623      	mov	r3, r4
  40251e:	e012      	b.n	402546 <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  402520:	4622      	mov	r2, r4
  402522:	4641      	mov	r1, r8
  402524:	4628      	mov	r0, r5
  402526:	4b0b      	ldr	r3, [pc, #44]	; (402554 <create_chain+0xbc>)
  402528:	4798      	blx	r3
	if (res == FR_OK) {
  40252a:	4603      	mov	r3, r0
  40252c:	2800      	cmp	r0, #0
  40252e:	d0ec      	beq.n	40250a <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  402530:	2b01      	cmp	r3, #1
  402532:	bf0c      	ite	eq
  402534:	f04f 33ff 	moveq.w	r3, #4294967295
  402538:	2301      	movne	r3, #1
  40253a:	e004      	b.n	402546 <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40253c:	2301      	movs	r3, #1
  40253e:	e002      	b.n	402546 <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  402540:	2300      	movs	r3, #0
  402542:	e000      	b.n	402546 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  402544:	2300      	movs	r3, #0
}
  402546:	4618      	mov	r0, r3
  402548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40254c:	4623      	mov	r3, r4
  40254e:	e7fa      	b.n	402546 <create_chain+0xae>
  402550:	004021d9 	.word	0x004021d9
  402554:	00402365 	.word	0x00402365

00402558 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402558:	2901      	cmp	r1, #1
  40255a:	d92e      	bls.n	4025ba <remove_chain+0x62>
{
  40255c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402560:	4604      	mov	r4, r0
  402562:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402564:	6983      	ldr	r3, [r0, #24]
  402566:	4299      	cmp	r1, r3
  402568:	d303      	bcc.n	402572 <remove_chain+0x1a>
		res = FR_INT_ERR;
  40256a:	2202      	movs	r2, #2
}
  40256c:	4610      	mov	r0, r2
  40256e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402572:	4f16      	ldr	r7, [pc, #88]	; (4025cc <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  402574:	f04f 0900 	mov.w	r9, #0
  402578:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4025d0 <remove_chain+0x78>
  40257c:	e003      	b.n	402586 <remove_chain+0x2e>
  40257e:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  402580:	69a3      	ldr	r3, [r4, #24]
  402582:	42ab      	cmp	r3, r5
  402584:	d9f2      	bls.n	40256c <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  402586:	4631      	mov	r1, r6
  402588:	4620      	mov	r0, r4
  40258a:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  40258c:	4605      	mov	r5, r0
  40258e:	b1b8      	cbz	r0, 4025c0 <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  402590:	2801      	cmp	r0, #1
  402592:	d017      	beq.n	4025c4 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  402594:	f1b0 3fff 	cmp.w	r0, #4294967295
  402598:	d016      	beq.n	4025c8 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40259a:	464a      	mov	r2, r9
  40259c:	4631      	mov	r1, r6
  40259e:	4620      	mov	r0, r4
  4025a0:	47c0      	blx	r8
			if (res != FR_OK) break;
  4025a2:	4602      	mov	r2, r0
  4025a4:	2800      	cmp	r0, #0
  4025a6:	d1e1      	bne.n	40256c <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  4025a8:	6923      	ldr	r3, [r4, #16]
  4025aa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4025ae:	d0e6      	beq.n	40257e <remove_chain+0x26>
				fs->free_clust++;
  4025b0:	3301      	adds	r3, #1
  4025b2:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  4025b4:	2301      	movs	r3, #1
  4025b6:	7163      	strb	r3, [r4, #5]
  4025b8:	e7e1      	b.n	40257e <remove_chain+0x26>
		res = FR_INT_ERR;
  4025ba:	2202      	movs	r2, #2
}
  4025bc:	4610      	mov	r0, r2
  4025be:	4770      	bx	lr
  4025c0:	2200      	movs	r2, #0
  4025c2:	e7d3      	b.n	40256c <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4025c4:	2202      	movs	r2, #2
  4025c6:	e7d1      	b.n	40256c <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4025c8:	2201      	movs	r2, #1
  4025ca:	e7cf      	b.n	40256c <remove_chain+0x14>
  4025cc:	004021d9 	.word	0x004021d9
  4025d0:	00402365 	.word	0x00402365

004025d4 <sync>:
{
  4025d4:	b538      	push	{r3, r4, r5, lr}
  4025d6:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  4025d8:	2100      	movs	r1, #0
  4025da:	4b2e      	ldr	r3, [pc, #184]	; (402694 <sync+0xc0>)
  4025dc:	4798      	blx	r3
	if (res == FR_OK) {
  4025de:	4603      	mov	r3, r0
  4025e0:	b950      	cbnz	r0, 4025f8 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  4025e2:	7823      	ldrb	r3, [r4, #0]
  4025e4:	2b03      	cmp	r3, #3
  4025e6:	d009      	beq.n	4025fc <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  4025e8:	2200      	movs	r2, #0
  4025ea:	4611      	mov	r1, r2
  4025ec:	7860      	ldrb	r0, [r4, #1]
  4025ee:	4b2a      	ldr	r3, [pc, #168]	; (402698 <sync+0xc4>)
  4025f0:	4798      	blx	r3
	res = move_window(fs, 0);
  4025f2:	1c03      	adds	r3, r0, #0
  4025f4:	bf18      	it	ne
  4025f6:	2301      	movne	r3, #1
}
  4025f8:	4618      	mov	r0, r3
  4025fa:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  4025fc:	7963      	ldrb	r3, [r4, #5]
  4025fe:	2b00      	cmp	r3, #0
  402600:	d0f2      	beq.n	4025e8 <sync+0x14>
			fs->winsect = 0;
  402602:	2300      	movs	r3, #0
  402604:	62e3      	str	r3, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  402606:	f104 0130 	add.w	r1, r4, #48	; 0x30
  40260a:	f504 700c 	add.w	r0, r4, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  40260e:	460b      	mov	r3, r1
		*d++ = (BYTE)val;
  402610:	2200      	movs	r2, #0
  402612:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  402616:	4283      	cmp	r3, r0
  402618:	d1fb      	bne.n	402612 <sync+0x3e>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  40261a:	2355      	movs	r3, #85	; 0x55
  40261c:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  402620:	23aa      	movs	r3, #170	; 0xaa
  402622:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  402626:	2352      	movs	r3, #82	; 0x52
  402628:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  40262c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  402630:	2361      	movs	r3, #97	; 0x61
  402632:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  402636:	2241      	movs	r2, #65	; 0x41
  402638:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  40263c:	2072      	movs	r0, #114	; 0x72
  40263e:	f884 0214 	strb.w	r0, [r4, #532]	; 0x214
  402642:	f884 0215 	strb.w	r0, [r4, #533]	; 0x215
  402646:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  40264a:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  40264e:	6923      	ldr	r3, [r4, #16]
  402650:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  402654:	f3c3 2207 	ubfx	r2, r3, #8, #8
  402658:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  40265c:	0c1a      	lsrs	r2, r3, #16
  40265e:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  402662:	0e1b      	lsrs	r3, r3, #24
  402664:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  402668:	68e3      	ldr	r3, [r4, #12]
  40266a:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  40266e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  402672:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  402676:	0c1a      	lsrs	r2, r3, #16
  402678:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  40267c:	0e1b      	lsrs	r3, r3, #24
  40267e:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  402682:	2301      	movs	r3, #1
  402684:	6962      	ldr	r2, [r4, #20]
  402686:	7860      	ldrb	r0, [r4, #1]
  402688:	4d04      	ldr	r5, [pc, #16]	; (40269c <sync+0xc8>)
  40268a:	47a8      	blx	r5
			fs->fsi_flag = 0;
  40268c:	2300      	movs	r3, #0
  40268e:	7163      	strb	r3, [r4, #5]
  402690:	e7aa      	b.n	4025e8 <sync+0x14>
  402692:	bf00      	nop
  402694:	00402149 	.word	0x00402149
  402698:	00401c11 	.word	0x00401c11
  40269c:	00401ba1 	.word	0x00401ba1

004026a0 <dir_next>:
{
  4026a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  4026a4:	88c4      	ldrh	r4, [r0, #6]
  4026a6:	3401      	adds	r4, #1
  4026a8:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4026aa:	b914      	cbnz	r4, 4026b2 <dir_next+0x12>
		return FR_NO_FILE;
  4026ac:	2004      	movs	r0, #4
  4026ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4026b2:	6903      	ldr	r3, [r0, #16]
  4026b4:	b913      	cbnz	r3, 4026bc <dir_next+0x1c>
		return FR_NO_FILE;
  4026b6:	2004      	movs	r0, #4
  4026b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026bc:	460e      	mov	r6, r1
  4026be:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  4026c0:	f014 070f 	ands.w	r7, r4, #15
  4026c4:	d110      	bne.n	4026e8 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  4026c6:	3301      	adds	r3, #1
  4026c8:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  4026ca:	68c1      	ldr	r1, [r0, #12]
  4026cc:	b931      	cbnz	r1, 4026dc <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  4026ce:	6803      	ldr	r3, [r0, #0]
  4026d0:	891b      	ldrh	r3, [r3, #8]
  4026d2:	42a3      	cmp	r3, r4
  4026d4:	d808      	bhi.n	4026e8 <dir_next+0x48>
				return FR_NO_FILE;
  4026d6:	2004      	movs	r0, #4
  4026d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  4026dc:	6800      	ldr	r0, [r0, #0]
  4026de:	7883      	ldrb	r3, [r0, #2]
  4026e0:	3b01      	subs	r3, #1
  4026e2:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  4026e6:	d008      	beq.n	4026fa <dir_next+0x5a>
	dj->index = i;
  4026e8:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  4026ea:	682b      	ldr	r3, [r5, #0]
  4026ec:	3330      	adds	r3, #48	; 0x30
  4026ee:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  4026f2:	616b      	str	r3, [r5, #20]
	return FR_OK;
  4026f4:	2000      	movs	r0, #0
  4026f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  4026fa:	4b33      	ldr	r3, [pc, #204]	; (4027c8 <dir_next+0x128>)
  4026fc:	4798      	blx	r3
  4026fe:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  402700:	2801      	cmp	r0, #1
  402702:	d94f      	bls.n	4027a4 <dir_next+0x104>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402704:	f1b0 3fff 	cmp.w	r0, #4294967295
  402708:	d04f      	beq.n	4027aa <dir_next+0x10a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  40270a:	6828      	ldr	r0, [r5, #0]
  40270c:	6983      	ldr	r3, [r0, #24]
  40270e:	4598      	cmp	r8, r3
  402710:	d340      	bcc.n	402794 <dir_next+0xf4>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  402712:	b916      	cbnz	r6, 40271a <dir_next+0x7a>
  402714:	2004      	movs	r0, #4
  402716:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  40271a:	68e9      	ldr	r1, [r5, #12]
  40271c:	4b2b      	ldr	r3, [pc, #172]	; (4027cc <dir_next+0x12c>)
  40271e:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  402720:	4680      	mov	r8, r0
  402722:	b910      	cbnz	r0, 40272a <dir_next+0x8a>
  402724:	2007      	movs	r0, #7
  402726:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  40272a:	2801      	cmp	r0, #1
  40272c:	d040      	beq.n	4027b0 <dir_next+0x110>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40272e:	f1b0 3fff 	cmp.w	r0, #4294967295
  402732:	d040      	beq.n	4027b6 <dir_next+0x116>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  402734:	2100      	movs	r1, #0
  402736:	6828      	ldr	r0, [r5, #0]
  402738:	4b25      	ldr	r3, [pc, #148]	; (4027d0 <dir_next+0x130>)
  40273a:	4798      	blx	r3
  40273c:	2800      	cmp	r0, #0
  40273e:	d13d      	bne.n	4027bc <dir_next+0x11c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  402740:	682b      	ldr	r3, [r5, #0]
  402742:	f503 710c 	add.w	r1, r3, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  402746:	3330      	adds	r3, #48	; 0x30
		*d++ = (BYTE)val;
  402748:	2200      	movs	r2, #0
  40274a:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  40274e:	428b      	cmp	r3, r1
  402750:	d1fb      	bne.n	40274a <dir_next+0xaa>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  402752:	682e      	ldr	r6, [r5, #0]
  402754:	4641      	mov	r1, r8
  402756:	4630      	mov	r0, r6
  402758:	4b1e      	ldr	r3, [pc, #120]	; (4027d4 <dir_next+0x134>)
  40275a:	4798      	blx	r3
  40275c:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40275e:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  402760:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402764:	46b2      	mov	sl, r6
  402766:	f8df 9068 	ldr.w	r9, [pc, #104]	; 4027d0 <dir_next+0x130>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40276a:	682b      	ldr	r3, [r5, #0]
  40276c:	7899      	ldrb	r1, [r3, #2]
  40276e:	b2f2      	uxtb	r2, r6
  402770:	4291      	cmp	r1, r2
  402772:	d90b      	bls.n	40278c <dir_next+0xec>
						dj->fs->wflag = 1;
  402774:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402778:	4651      	mov	r1, sl
  40277a:	6828      	ldr	r0, [r5, #0]
  40277c:	47c8      	blx	r9
  40277e:	3601      	adds	r6, #1
  402780:	b9f8      	cbnz	r0, 4027c2 <dir_next+0x122>
						dj->fs->winsect++;
  402782:	682a      	ldr	r2, [r5, #0]
  402784:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402786:	3301      	adds	r3, #1
  402788:	62d3      	str	r3, [r2, #44]	; 0x2c
  40278a:	e7ee      	b.n	40276a <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
  40278c:	4616      	mov	r6, r2
  40278e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402790:	1b96      	subs	r6, r2, r6
  402792:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  402794:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  402798:	4641      	mov	r1, r8
  40279a:	6828      	ldr	r0, [r5, #0]
  40279c:	4b0d      	ldr	r3, [pc, #52]	; (4027d4 <dir_next+0x134>)
  40279e:	4798      	blx	r3
  4027a0:	6128      	str	r0, [r5, #16]
  4027a2:	e7a1      	b.n	4026e8 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  4027a4:	2002      	movs	r0, #2
  4027a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4027aa:	2001      	movs	r0, #1
  4027ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4027b0:	2002      	movs	r0, #2
  4027b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4027b6:	2001      	movs	r0, #1
  4027b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4027bc:	2001      	movs	r0, #1
  4027be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4027c2:	2001      	movs	r0, #1
}
  4027c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027c8:	004021d9 	.word	0x004021d9
  4027cc:	00402499 	.word	0x00402499
  4027d0:	00402149 	.word	0x00402149
  4027d4:	00401ced 	.word	0x00401ced

004027d8 <dir_find>:
{
  4027d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027dc:	b085      	sub	sp, #20
  4027de:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  4027e0:	2100      	movs	r1, #0
  4027e2:	4b62      	ldr	r3, [pc, #392]	; (40296c <dir_find+0x194>)
  4027e4:	4798      	blx	r3
	if (res != FR_OK) return res;
  4027e6:	4680      	mov	r8, r0
  4027e8:	bb08      	cbnz	r0, 40282e <dir_find+0x56>
  4027ea:	f04f 0bff 	mov.w	fp, #255	; 0xff
  4027ee:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  4027f0:	4f5f      	ldr	r7, [pc, #380]	; (402970 <dir_find+0x198>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4027f2:	46da      	mov	sl, fp
  4027f4:	e095      	b.n	402922 <dir_find+0x14a>
			if (a == AM_LFN) {			/* An LFN entry is found */
  4027f6:	2a0f      	cmp	r2, #15
  4027f8:	d01d      	beq.n	402836 <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  4027fa:	f1b9 0f00 	cmp.w	r9, #0
  4027fe:	d104      	bne.n	40280a <dir_find+0x32>
  402800:	4620      	mov	r0, r4
  402802:	4b5c      	ldr	r3, [pc, #368]	; (402974 <dir_find+0x19c>)
  402804:	4798      	blx	r3
  402806:	4582      	cmp	sl, r0
  402808:	d011      	beq.n	40282e <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40280a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40280e:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  402810:	69ab      	ldr	r3, [r5, #24]
  402812:	7ada      	ldrb	r2, [r3, #11]
  402814:	f012 0f01 	tst.w	r2, #1
  402818:	d17a      	bne.n	402910 <dir_find+0x138>
  40281a:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  40281e:	f814 1b01 	ldrb.w	r1, [r4], #1
  402822:	f813 2b01 	ldrb.w	r2, [r3], #1
  402826:	4291      	cmp	r1, r2
  402828:	d16c      	bne.n	402904 <dir_find+0x12c>
  40282a:	42a0      	cmp	r0, r4
  40282c:	d1f7      	bne.n	40281e <dir_find+0x46>
}
  40282e:	4640      	mov	r0, r8
  402830:	b005      	add	sp, #20
  402832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  402836:	f8d5 801c 	ldr.w	r8, [r5, #28]
  40283a:	f1b8 0f00 	cmp.w	r8, #0
  40283e:	d069      	beq.n	402914 <dir_find+0x13c>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  402840:	f016 0f40 	tst.w	r6, #64	; 0x40
  402844:	d00c      	beq.n	402860 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  402846:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  40284a:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  40284e:	88eb      	ldrh	r3, [r5, #6]
  402850:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402852:	f894 b00d 	ldrb.w	fp, [r4, #13]
  402856:	45d3      	cmp	fp, sl
  402858:	d008      	beq.n	40286c <dir_find+0x94>
  40285a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40285e:	e059      	b.n	402914 <dir_find+0x13c>
  402860:	45b1      	cmp	r9, r6
  402862:	bf18      	it	ne
  402864:	f04f 09ff 	movne.w	r9, #255	; 0xff
  402868:	d154      	bne.n	402914 <dir_find+0x13c>
  40286a:	e7f2      	b.n	402852 <dir_find+0x7a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  40286c:	f894 a000 	ldrb.w	sl, [r4]
  402870:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  402874:	f10a 3aff 	add.w	sl, sl, #4294967295
  402878:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  40287c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  402880:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 402980 <dir_find+0x1a8>
  402884:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  402888:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  40288a:	9603      	str	r6, [sp, #12]
  40288c:	f8cd b004 	str.w	fp, [sp, #4]
  402890:	461e      	mov	r6, r3
  402892:	9502      	str	r5, [sp, #8]
  402894:	e00f      	b.n	4028b6 <dir_find+0xde>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  402896:	4618      	mov	r0, r3
  402898:	4b37      	ldr	r3, [pc, #220]	; (402978 <dir_find+0x1a0>)
  40289a:	4798      	blx	r3
  40289c:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  40289e:	2efe      	cmp	r6, #254	; 0xfe
  4028a0:	d85b      	bhi.n	40295a <dir_find+0x182>
  4028a2:	1c75      	adds	r5, r6, #1
  4028a4:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  4028a8:	4b33      	ldr	r3, [pc, #204]	; (402978 <dir_find+0x1a0>)
  4028aa:	4798      	blx	r3
  4028ac:	4583      	cmp	fp, r0
  4028ae:	d158      	bne.n	402962 <dir_find+0x18a>
  4028b0:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  4028b2:	45d1      	cmp	r9, sl
  4028b4:	d013      	beq.n	4028de <dir_find+0x106>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4028b6:	f819 2b01 	ldrb.w	r2, [r9], #1
  4028ba:	18a3      	adds	r3, r4, r2
  4028bc:	7859      	ldrb	r1, [r3, #1]
  4028be:	5ca3      	ldrb	r3, [r4, r2]
  4028c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  4028c4:	2800      	cmp	r0, #0
  4028c6:	d1e6      	bne.n	402896 <dir_find+0xbe>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4028c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4028cc:	4293      	cmp	r3, r2
  4028ce:	d0f0      	beq.n	4028b2 <dir_find+0xda>
  4028d0:	f8dd b004 	ldr.w	fp, [sp, #4]
  4028d4:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4028d6:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4028d8:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4028dc:	e01a      	b.n	402914 <dir_find+0x13c>
  4028de:	f8dd b004 	ldr.w	fp, [sp, #4]
  4028e2:	4632      	mov	r2, r6
  4028e4:	9e03      	ldr	r6, [sp, #12]
  4028e6:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  4028e8:	7823      	ldrb	r3, [r4, #0]
  4028ea:	f013 0f40 	tst.w	r3, #64	; 0x40
  4028ee:	d004      	beq.n	4028fa <dir_find+0x122>
  4028f0:	b118      	cbz	r0, 4028fa <dir_find+0x122>
  4028f2:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  4028f6:	2b00      	cmp	r3, #0
  4028f8:	d1ed      	bne.n	4028d6 <dir_find+0xfe>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4028fa:	3e01      	subs	r6, #1
  4028fc:	fa5f f986 	uxtb.w	r9, r6
  402900:	46da      	mov	sl, fp
  402902:	e007      	b.n	402914 <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402904:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402908:	e004      	b.n	402914 <dir_find+0x13c>
			ord = 0xFF;
  40290a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40290e:	e001      	b.n	402914 <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402910:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  402914:	2100      	movs	r1, #0
  402916:	4628      	mov	r0, r5
  402918:	4b18      	ldr	r3, [pc, #96]	; (40297c <dir_find+0x1a4>)
  40291a:	4798      	blx	r3
	} while (res == FR_OK);
  40291c:	4680      	mov	r8, r0
  40291e:	2800      	cmp	r0, #0
  402920:	d185      	bne.n	40282e <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  402922:	6929      	ldr	r1, [r5, #16]
  402924:	6828      	ldr	r0, [r5, #0]
  402926:	47b8      	blx	r7
		if (res != FR_OK) break;
  402928:	4680      	mov	r8, r0
  40292a:	2800      	cmp	r0, #0
  40292c:	f47f af7f 	bne.w	40282e <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  402930:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  402932:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402934:	b176      	cbz	r6, 402954 <dir_find+0x17c>
		a = dir[DIR_Attr] & AM_MASK;
  402936:	7ae3      	ldrb	r3, [r4, #11]
  402938:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  40293c:	2ee5      	cmp	r6, #229	; 0xe5
  40293e:	d0e4      	beq.n	40290a <dir_find+0x132>
  402940:	f013 0f08 	tst.w	r3, #8
  402944:	f43f af57 	beq.w	4027f6 <dir_find+0x1e>
  402948:	2a0f      	cmp	r2, #15
  40294a:	f43f af74 	beq.w	402836 <dir_find+0x5e>
			ord = 0xFF;
  40294e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402952:	e7df      	b.n	402914 <dir_find+0x13c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  402954:	f04f 0804 	mov.w	r8, #4
  402958:	e769      	b.n	40282e <dir_find+0x56>
  40295a:	f8dd b004 	ldr.w	fp, [sp, #4]
  40295e:	9d02      	ldr	r5, [sp, #8]
  402960:	e7b9      	b.n	4028d6 <dir_find+0xfe>
  402962:	f8dd b004 	ldr.w	fp, [sp, #4]
  402966:	9d02      	ldr	r5, [sp, #8]
  402968:	e7b5      	b.n	4028d6 <dir_find+0xfe>
  40296a:	bf00      	nop
  40296c:	004022c1 	.word	0x004022c1
  402970:	00402149 	.word	0x00402149
  402974:	00401d03 	.word	0x00401d03
  402978:	004034b5 	.word	0x004034b5
  40297c:	004026a1 	.word	0x004026a1
  402980:	00408264 	.word	0x00408264

00402984 <follow_path>:
{
  402984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402988:	b083      	sub	sp, #12
  40298a:	4682      	mov	sl, r0
  40298c:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  40298e:	780b      	ldrb	r3, [r1, #0]
  402990:	2b2f      	cmp	r3, #47	; 0x2f
  402992:	d00c      	beq.n	4029ae <follow_path+0x2a>
  402994:	2b5c      	cmp	r3, #92	; 0x5c
  402996:	d00a      	beq.n	4029ae <follow_path+0x2a>
	dj->sclust = 0;						/* Start from the root dir */
  402998:	2300      	movs	r3, #0
  40299a:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  40299e:	f898 3000 	ldrb.w	r3, [r8]
  4029a2:	2b1f      	cmp	r3, #31
  4029a4:	d906      	bls.n	4029b4 <follow_path+0x30>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4029a6:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 402c9c <follow_path+0x318>
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  4029aa:	4644      	mov	r4, r8
  4029ac:	e00c      	b.n	4029c8 <follow_path+0x44>
		path++;
  4029ae:	f108 0801 	add.w	r8, r8, #1
  4029b2:	e7f1      	b.n	402998 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  4029b4:	2100      	movs	r1, #0
  4029b6:	4650      	mov	r0, sl
  4029b8:	4bb3      	ldr	r3, [pc, #716]	; (402c88 <follow_path+0x304>)
  4029ba:	4798      	blx	r3
  4029bc:	4603      	mov	r3, r0
		dj->dir = 0;
  4029be:	2200      	movs	r2, #0
  4029c0:	f8ca 2014 	str.w	r2, [sl, #20]
  4029c4:	e130      	b.n	402c28 <follow_path+0x2a4>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  4029c6:	461c      	mov	r4, r3
  4029c8:	4627      	mov	r7, r4
  4029ca:	4623      	mov	r3, r4
  4029cc:	f813 0b01 	ldrb.w	r0, [r3], #1
  4029d0:	282f      	cmp	r0, #47	; 0x2f
  4029d2:	d0f8      	beq.n	4029c6 <follow_path+0x42>
  4029d4:	285c      	cmp	r0, #92	; 0x5c
  4029d6:	bf08      	it	eq
  4029d8:	461c      	moveq	r4, r3
  4029da:	d0f5      	beq.n	4029c8 <follow_path+0x44>
	lfn = dj->lfn;
  4029dc:	f8da b01c 	ldr.w	fp, [sl, #28]
		w = p[si++];					/* Get a character */
  4029e0:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4029e2:	281f      	cmp	r0, #31
  4029e4:	f240 812f 	bls.w	402c46 <follow_path+0x2c2>
  4029e8:	282f      	cmp	r0, #47	; 0x2f
  4029ea:	f000 8131 	beq.w	402c50 <follow_path+0x2cc>
  4029ee:	285c      	cmp	r0, #92	; 0x5c
  4029f0:	f000 8137 	beq.w	402c62 <follow_path+0x2de>
  4029f4:	f1ab 0602 	sub.w	r6, fp, #2
  4029f8:	2501      	movs	r5, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4029fa:	46a8      	mov	r8, r5
  4029fc:	e012      	b.n	402a24 <follow_path+0xa0>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  4029fe:	bb73      	cbnz	r3, 402a5e <follow_path+0xda>
		lfn[di++] = w;					/* Store the Unicode char */
  402a00:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
  402a04:	1c6b      	adds	r3, r5, #1
  402a06:	f814 0f01 	ldrb.w	r0, [r4, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  402a0a:	281f      	cmp	r0, #31
  402a0c:	f240 811d 	bls.w	402c4a <follow_path+0x2c6>
  402a10:	282f      	cmp	r0, #47	; 0x2f
  402a12:	f000 811f 	beq.w	402c54 <follow_path+0x2d0>
  402a16:	285c      	cmp	r0, #92	; 0x5c
  402a18:	f000 811c 	beq.w	402c54 <follow_path+0x2d0>
		if (di >= _MAX_LFN)				/* Reject too long name */
  402a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402a20:	d01d      	beq.n	402a5e <follow_path+0xda>
		w = p[si++];					/* Get a character */
  402a22:	461d      	mov	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402a24:	4641      	mov	r1, r8
  402a26:	47c8      	blx	r9
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  402a28:	4602      	mov	r2, r0
  402a2a:	b1c0      	cbz	r0, 402a5e <follow_path+0xda>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  402a2c:	287f      	cmp	r0, #127	; 0x7f
  402a2e:	d8e7      	bhi.n	402a00 <follow_path+0x7c>
	while (*str && *str != chr) str++;
  402a30:	2822      	cmp	r0, #34	; 0x22
  402a32:	f000 80f8 	beq.w	402c26 <follow_path+0x2a2>
  402a36:	232a      	movs	r3, #42	; 0x2a
  402a38:	4994      	ldr	r1, [pc, #592]	; (402c8c <follow_path+0x308>)
  402a3a:	b298      	uxth	r0, r3
  402a3c:	4290      	cmp	r0, r2
  402a3e:	d0de      	beq.n	4029fe <follow_path+0x7a>
  402a40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402a44:	2b00      	cmp	r3, #0
  402a46:	d1f8      	bne.n	402a3a <follow_path+0xb6>
  402a48:	e7da      	b.n	402a00 <follow_path+0x7c>
	while (di) {						/* Strip trailing spaces and dots */
  402a4a:	3d01      	subs	r5, #1
  402a4c:	f000 80eb 	beq.w	402c26 <follow_path+0x2a2>
		w = lfn[di-1];
  402a50:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  402a54:	2b20      	cmp	r3, #32
  402a56:	d0f8      	beq.n	402a4a <follow_path+0xc6>
  402a58:	2b2e      	cmp	r3, #46	; 0x2e
  402a5a:	d0f6      	beq.n	402a4a <follow_path+0xc6>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  402a5c:	b90d      	cbnz	r5, 402a62 <follow_path+0xde>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402a5e:	2306      	movs	r3, #6
	return res;
  402a60:	e0e2      	b.n	402c28 <follow_path+0x2a4>
	lfn[di] = 0;						/* LFN is created */
  402a62:	0068      	lsls	r0, r5, #1
  402a64:	2300      	movs	r3, #0
  402a66:	f82b 3015 	strh.w	r3, [fp, r5, lsl #1]
	mem_set(dj->fn, ' ', 11);
  402a6a:	f8da 3018 	ldr.w	r3, [sl, #24]
  402a6e:	f103 010b 	add.w	r1, r3, #11
		*d++ = (BYTE)val;
  402a72:	2220      	movs	r2, #32
  402a74:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  402a78:	428b      	cmp	r3, r1
  402a7a:	d1fb      	bne.n	402a74 <follow_path+0xf0>
  402a7c:	f1ab 0102 	sub.w	r1, fp, #2
  402a80:	2300      	movs	r3, #0
  402a82:	e000      	b.n	402a86 <follow_path+0x102>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  402a84:	3301      	adds	r3, #1
  402a86:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  402a8a:	2a20      	cmp	r2, #32
  402a8c:	d0fa      	beq.n	402a84 <follow_path+0x100>
  402a8e:	2a2e      	cmp	r2, #46	; 0x2e
  402a90:	d0f8      	beq.n	402a84 <follow_path+0x100>
	if (si) cf |= NS_LOSS | NS_LFN;
  402a92:	b10b      	cbz	r3, 402a98 <follow_path+0x114>
  402a94:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  402a98:	1e81      	subs	r1, r0, #2
  402a9a:	eb0b 0201 	add.w	r2, fp, r1
  402a9e:	f83b 1001 	ldrh.w	r1, [fp, r1]
  402aa2:	292e      	cmp	r1, #46	; 0x2e
  402aa4:	d005      	beq.n	402ab2 <follow_path+0x12e>
  402aa6:	3d01      	subs	r5, #1
  402aa8:	d003      	beq.n	402ab2 <follow_path+0x12e>
  402aaa:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  402aae:	292e      	cmp	r1, #46	; 0x2e
  402ab0:	d1f9      	bne.n	402aa6 <follow_path+0x122>
		dj->fn[i++] = (BYTE)w;
  402ab2:	2208      	movs	r2, #8
  402ab4:	9200      	str	r2, [sp, #0]
  402ab6:	f04f 0800 	mov.w	r8, #0
  402aba:	f8cd 8004 	str.w	r8, [sp, #4]
  402abe:	e005      	b.n	402acc <follow_path+0x148>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  402ac0:	42af      	cmp	r7, r5
  402ac2:	f000 80d1 	beq.w	402c68 <follow_path+0x2e4>
			cf |= NS_LOSS | NS_LFN; continue;
  402ac6:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  402aca:	463b      	mov	r3, r7
  402acc:	1c5f      	adds	r7, r3, #1
  402ace:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  402ad2:	b350      	cbz	r0, 402b2a <follow_path+0x1a6>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  402ad4:	2820      	cmp	r0, #32
  402ad6:	d0f6      	beq.n	402ac6 <follow_path+0x142>
  402ad8:	282e      	cmp	r0, #46	; 0x2e
  402ada:	d0f1      	beq.n	402ac0 <follow_path+0x13c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  402adc:	9b00      	ldr	r3, [sp, #0]
  402ade:	4598      	cmp	r8, r3
  402ae0:	d219      	bcs.n	402b16 <follow_path+0x192>
  402ae2:	42af      	cmp	r7, r5
  402ae4:	f000 80c0 	beq.w	402c68 <follow_path+0x2e4>
		if (w >= 0x80) {				/* Non ASCII char */
  402ae8:	287f      	cmp	r0, #127	; 0x7f
  402aea:	d86c      	bhi.n	402bc6 <follow_path+0x242>
	while (*str && *str != chr) str++;
  402aec:	282b      	cmp	r0, #43	; 0x2b
  402aee:	d079      	beq.n	402be4 <follow_path+0x260>
  402af0:	232c      	movs	r3, #44	; 0x2c
  402af2:	4a67      	ldr	r2, [pc, #412]	; (402c90 <follow_path+0x30c>)
  402af4:	b299      	uxth	r1, r3
  402af6:	4281      	cmp	r1, r0
  402af8:	d072      	beq.n	402be0 <follow_path+0x25c>
  402afa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  402afe:	2b00      	cmp	r3, #0
  402b00:	d1f8      	bne.n	402af4 <follow_path+0x170>
				if (IsUpper(w)) {		/* ASCII large capital */
  402b02:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  402b06:	b29b      	uxth	r3, r3
  402b08:	2b19      	cmp	r3, #25
  402b0a:	d876      	bhi.n	402bfa <follow_path+0x276>
					b |= 2;
  402b0c:	9b01      	ldr	r3, [sp, #4]
  402b0e:	f043 0302 	orr.w	r3, r3, #2
  402b12:	9301      	str	r3, [sp, #4]
  402b14:	e069      	b.n	402bea <follow_path+0x266>
			if (ni == 11) {				/* Long extension */
  402b16:	9b00      	ldr	r3, [sp, #0]
  402b18:	2b0b      	cmp	r3, #11
  402b1a:	d048      	beq.n	402bae <follow_path+0x22a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  402b1c:	42af      	cmp	r7, r5
  402b1e:	f000 80a6 	beq.w	402c6e <follow_path+0x2ea>
  402b22:	f046 0603 	orr.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  402b26:	f240 80a2 	bls.w	402c6e <follow_path+0x2ea>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402b2a:	f8da 3018 	ldr.w	r3, [sl, #24]
  402b2e:	781a      	ldrb	r2, [r3, #0]
  402b30:	2ae5      	cmp	r2, #229	; 0xe5
  402b32:	d045      	beq.n	402bc0 <follow_path+0x23c>
	if (ni == 8) b <<= 2;
  402b34:	9b00      	ldr	r3, [sp, #0]
  402b36:	2b08      	cmp	r3, #8
  402b38:	d06b      	beq.n	402c12 <follow_path+0x28e>
  402b3a:	9a01      	ldr	r2, [sp, #4]
  402b3c:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  402b40:	2b0c      	cmp	r3, #12
  402b42:	d06d      	beq.n	402c20 <follow_path+0x29c>
  402b44:	f002 0203 	and.w	r2, r2, #3
  402b48:	2a03      	cmp	r2, #3
  402b4a:	d069      	beq.n	402c20 <follow_path+0x29c>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  402b4c:	f016 0f02 	tst.w	r6, #2
  402b50:	d10b      	bne.n	402b6a <follow_path+0x1e6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  402b52:	9a01      	ldr	r2, [sp, #4]
  402b54:	f002 0b03 	and.w	fp, r2, #3
  402b58:	f1bb 0f01 	cmp.w	fp, #1
  402b5c:	bf08      	it	eq
  402b5e:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  402b62:	2b04      	cmp	r3, #4
  402b64:	bf08      	it	eq
  402b66:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  402b6a:	f8da 3018 	ldr.w	r3, [sl, #24]
  402b6e:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  402b70:	4650      	mov	r0, sl
  402b72:	4b48      	ldr	r3, [pc, #288]	; (402c94 <follow_path+0x310>)
  402b74:	4798      	blx	r3
			ns = *(dj->fn+NS);
  402b76:	f8da 3018 	ldr.w	r3, [sl, #24]
  402b7a:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  402b7c:	4603      	mov	r3, r0
  402b7e:	2800      	cmp	r0, #0
  402b80:	d156      	bne.n	402c30 <follow_path+0x2ac>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  402b82:	f012 0f04 	tst.w	r2, #4
  402b86:	d14f      	bne.n	402c28 <follow_path+0x2a4>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  402b88:	f8da 2014 	ldr.w	r2, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  402b8c:	7ad3      	ldrb	r3, [r2, #11]
  402b8e:	f013 0f10 	tst.w	r3, #16
  402b92:	d056      	beq.n	402c42 <follow_path+0x2be>
			dj->sclust = LD_CLUST(dir);
  402b94:	7d51      	ldrb	r1, [r2, #21]
  402b96:	7d13      	ldrb	r3, [r2, #20]
  402b98:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  402b9c:	7ed0      	ldrb	r0, [r2, #27]
  402b9e:	7e93      	ldrb	r3, [r2, #26]
  402ba0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  402ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  402ba8:	f8ca 3008 	str.w	r3, [sl, #8]
			res = create_name(dj, &path);	/* Get a segment */
  402bac:	e70c      	b.n	4029c8 <follow_path+0x44>
				cf |= NS_LOSS | NS_LFN; break;
  402bae:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402bb2:	f8da 3018 	ldr.w	r3, [sl, #24]
  402bb6:	781a      	ldrb	r2, [r3, #0]
  402bb8:	2ae5      	cmp	r2, #229	; 0xe5
  402bba:	d1be      	bne.n	402b3a <follow_path+0x1b6>
  402bbc:	220b      	movs	r2, #11
  402bbe:	9200      	str	r2, [sp, #0]
  402bc0:	2205      	movs	r2, #5
  402bc2:	701a      	strb	r2, [r3, #0]
  402bc4:	e7b6      	b.n	402b34 <follow_path+0x1b0>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  402bc6:	2100      	movs	r1, #0
  402bc8:	47c8      	blx	r9
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  402bca:	4603      	mov	r3, r0
  402bcc:	2800      	cmp	r0, #0
  402bce:	d058      	beq.n	402c82 <follow_path+0x2fe>
  402bd0:	4a31      	ldr	r2, [pc, #196]	; (402c98 <follow_path+0x314>)
  402bd2:	4413      	add	r3, r2
  402bd4:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  402bd8:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  402bdc:	b110      	cbz	r0, 402be4 <follow_path+0x260>
  402bde:	e785      	b.n	402aec <follow_path+0x168>
  402be0:	2b00      	cmp	r3, #0
  402be2:	d08e      	beq.n	402b02 <follow_path+0x17e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  402be4:	f046 0603 	orr.w	r6, r6, #3
  402be8:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  402bea:	f8da 3018 	ldr.w	r3, [sl, #24]
  402bee:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  402bf2:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  402bf4:	f108 0801 	add.w	r8, r8, #1
  402bf8:	e768      	b.n	402acc <follow_path+0x148>
					if (IsLower(w)) {	/* ASCII small capital */
  402bfa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  402bfe:	b29b      	uxth	r3, r3
  402c00:	2b19      	cmp	r3, #25
  402c02:	d8f2      	bhi.n	402bea <follow_path+0x266>
						b |= 1; w -= 0x20;
  402c04:	9b01      	ldr	r3, [sp, #4]
  402c06:	f043 0301 	orr.w	r3, r3, #1
  402c0a:	9301      	str	r3, [sp, #4]
  402c0c:	3820      	subs	r0, #32
  402c0e:	b280      	uxth	r0, r0
  402c10:	e7eb      	b.n	402bea <follow_path+0x266>
	if (ni == 8) b <<= 2;
  402c12:	9b01      	ldr	r3, [sp, #4]
  402c14:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  402c18:	fa5f f38b 	uxtb.w	r3, fp
  402c1c:	9301      	str	r3, [sp, #4]
  402c1e:	e78c      	b.n	402b3a <follow_path+0x1b6>
		cf |= NS_LFN;
  402c20:	f046 0602 	orr.w	r6, r6, #2
  402c24:	e792      	b.n	402b4c <follow_path+0x1c8>
  402c26:	2306      	movs	r3, #6
}
  402c28:	4618      	mov	r0, r3
  402c2a:	b003      	add	sp, #12
  402c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  402c30:	2804      	cmp	r0, #4
  402c32:	d1f9      	bne.n	402c28 <follow_path+0x2a4>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402c34:	f002 0204 	and.w	r2, r2, #4
  402c38:	2a00      	cmp	r2, #0
  402c3a:	bf14      	ite	ne
  402c3c:	4603      	movne	r3, r0
  402c3e:	2305      	moveq	r3, #5
  402c40:	e7f2      	b.n	402c28 <follow_path+0x2a4>
				res = FR_NO_PATH; break;
  402c42:	2305      	movs	r3, #5
  402c44:	e7f0      	b.n	402c28 <follow_path+0x2a4>
		w = p[si++];					/* Get a character */
  402c46:	2301      	movs	r3, #1
	si = di = 0;
  402c48:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  402c4a:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402c4c:	2604      	movs	r6, #4
  402c4e:	e003      	b.n	402c58 <follow_path+0x2d4>
		w = p[si++];					/* Get a character */
  402c50:	2301      	movs	r3, #1
	si = di = 0;
  402c52:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  402c54:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402c56:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  402c58:	2d00      	cmp	r5, #0
  402c5a:	d0e4      	beq.n	402c26 <follow_path+0x2a2>
  402c5c:	eb0b 0245 	add.w	r2, fp, r5, lsl #1
  402c60:	e6f6      	b.n	402a50 <follow_path+0xcc>
		w = p[si++];					/* Get a character */
  402c62:	2301      	movs	r3, #1
	si = di = 0;
  402c64:	2500      	movs	r5, #0
  402c66:	e7f5      	b.n	402c54 <follow_path+0x2d0>
			if (ni == 11) {				/* Long extension */
  402c68:	9b00      	ldr	r3, [sp, #0]
  402c6a:	2b0b      	cmp	r3, #11
  402c6c:	d09f      	beq.n	402bae <follow_path+0x22a>
			b <<= 2; continue;
  402c6e:	9b01      	ldr	r3, [sp, #4]
  402c70:	009b      	lsls	r3, r3, #2
  402c72:	b2db      	uxtb	r3, r3
  402c74:	9301      	str	r3, [sp, #4]
  402c76:	462b      	mov	r3, r5
			si = di; i = 8; ni = 11;	/* Enter extension section */
  402c78:	220b      	movs	r2, #11
  402c7a:	9200      	str	r2, [sp, #0]
  402c7c:	f04f 0808 	mov.w	r8, #8
  402c80:	e724      	b.n	402acc <follow_path+0x148>
			cf |= NS_LFN;				/* Force create LFN entry */
  402c82:	f046 0602 	orr.w	r6, r6, #2
  402c86:	e7ad      	b.n	402be4 <follow_path+0x260>
  402c88:	004022c1 	.word	0x004022c1
  402c8c:	004082f5 	.word	0x004082f5
  402c90:	00408301 	.word	0x00408301
  402c94:	004027d9 	.word	0x004027d9
  402c98:	00408274 	.word	0x00408274
  402c9c:	00403475 	.word	0x00403475

00402ca0 <dir_register>:
{
  402ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ca4:	b089      	sub	sp, #36	; 0x24
  402ca6:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  402ca8:	6985      	ldr	r5, [r0, #24]
  402caa:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  402cae:	220c      	movs	r2, #12
  402cb0:	4629      	mov	r1, r5
  402cb2:	a805      	add	r0, sp, #20
  402cb4:	4ba9      	ldr	r3, [pc, #676]	; (402f5c <dir_register+0x2bc>)
  402cb6:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  402cb8:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402cbc:	f013 0f01 	tst.w	r3, #1
  402cc0:	d079      	beq.n	402db6 <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  402cc2:	2300      	movs	r3, #0
  402cc4:	72eb      	strb	r3, [r5, #11]
  402cc6:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  402cc8:	220b      	movs	r2, #11
  402cca:	a905      	add	r1, sp, #20
  402ccc:	4628      	mov	r0, r5
  402cce:	4ba3      	ldr	r3, [pc, #652]	; (402f5c <dir_register+0x2bc>)
  402cd0:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  402cd2:	2701      	movs	r7, #1
  402cd4:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402cd6:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402cda:	f8df 929c 	ldr.w	r9, [pc, #668]	; 402f78 <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  402cde:	f8df a27c 	ldr.w	sl, [pc, #636]	; 402f5c <dir_register+0x2bc>
  402ce2:	e032      	b.n	402d4a <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  402ce4:	463b      	mov	r3, r7
  402ce6:	e030      	b.n	402d4a <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  402ce8:	4613      	mov	r3, r2
  402cea:	e002      	b.n	402cf2 <dir_register+0x52>
  402cec:	2300      	movs	r3, #0
  402cee:	e000      	b.n	402cf2 <dir_register+0x52>
  402cf0:	4613      	mov	r3, r2
  402cf2:	442b      	add	r3, r5
  402cf4:	e005      	b.n	402d02 <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402cf6:	4641      	mov	r1, r8
  402cf8:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  402cfc:	1b59      	subs	r1, r3, r5
  402cfe:	2907      	cmp	r1, #7
  402d00:	d807      	bhi.n	402d12 <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402d02:	2a07      	cmp	r2, #7
  402d04:	d8f7      	bhi.n	402cf6 <dir_register+0x56>
  402d06:	a908      	add	r1, sp, #32
  402d08:	4411      	add	r1, r2
  402d0a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  402d0e:	3201      	adds	r2, #1
  402d10:	e7f2      	b.n	402cf8 <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402d12:	4620      	mov	r0, r4
  402d14:	47c8      	blx	r9
			if (res != FR_OK) break;
  402d16:	4606      	mov	r6, r0
  402d18:	2800      	cmp	r0, #0
  402d1a:	d13e      	bne.n	402d9a <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  402d1c:	3701      	adds	r7, #1
  402d1e:	b2bf      	uxth	r7, r7
  402d20:	2f64      	cmp	r7, #100	; 0x64
  402d22:	d038      	beq.n	402d96 <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  402d24:	220b      	movs	r2, #11
  402d26:	a905      	add	r1, sp, #20
  402d28:	4628      	mov	r0, r5
  402d2a:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  402d2c:	2f05      	cmp	r7, #5
  402d2e:	d9d9      	bls.n	402ce4 <dir_register+0x44>
  402d30:	463b      	mov	r3, r7
  402d32:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  402d34:	03da      	lsls	r2, r3, #15
  402d36:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  402d3a:	f831 2b02 	ldrh.w	r2, [r1], #2
  402d3e:	fa12 f383 	uxtah	r3, r2, r3
  402d42:	b29b      	uxth	r3, r3
  402d44:	880a      	ldrh	r2, [r1, #0]
  402d46:	2a00      	cmp	r2, #0
  402d48:	d1f4      	bne.n	402d34 <dir_register+0x94>
  402d4a:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  402d4e:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  402d50:	f003 000f 	and.w	r0, r3, #15
  402d54:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  402d58:	2939      	cmp	r1, #57	; 0x39
  402d5a:	bf88      	it	hi
  402d5c:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  402d60:	3a01      	subs	r2, #1
  402d62:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  402d66:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  402d6a:	2b00      	cmp	r3, #0
  402d6c:	d1f0      	bne.n	402d50 <dir_register+0xb0>
	ns[i] = '~';
  402d6e:	217e      	movs	r1, #126	; 0x7e
  402d70:	ab08      	add	r3, sp, #32
  402d72:	4413      	add	r3, r2
  402d74:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  402d78:	2a00      	cmp	r2, #0
  402d7a:	d0b5      	beq.n	402ce8 <dir_register+0x48>
  402d7c:	782b      	ldrb	r3, [r5, #0]
  402d7e:	2b20      	cmp	r3, #32
  402d80:	d0b4      	beq.n	402cec <dir_register+0x4c>
  402d82:	4629      	mov	r1, r5
  402d84:	2300      	movs	r3, #0
  402d86:	3301      	adds	r3, #1
  402d88:	429a      	cmp	r2, r3
  402d8a:	d0b1      	beq.n	402cf0 <dir_register+0x50>
  402d8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  402d90:	2820      	cmp	r0, #32
  402d92:	d1f8      	bne.n	402d86 <dir_register+0xe6>
  402d94:	e7ad      	b.n	402cf2 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  402d96:	2607      	movs	r6, #7
  402d98:	e004      	b.n	402da4 <dir_register+0x104>
  402d9a:	2f64      	cmp	r7, #100	; 0x64
  402d9c:	f000 809f 	beq.w	402ede <dir_register+0x23e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  402da0:	2804      	cmp	r0, #4
  402da2:	d003      	beq.n	402dac <dir_register+0x10c>
}
  402da4:	4630      	mov	r0, r6
  402da6:	b009      	add	sp, #36	; 0x24
  402da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  402dac:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402db0:	72eb      	strb	r3, [r5, #11]
  402db2:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  402db6:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402dba:	f013 0f02 	tst.w	r3, #2
  402dbe:	d014      	beq.n	402dea <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  402dc0:	f8bb 3000 	ldrh.w	r3, [fp]
  402dc4:	b17b      	cbz	r3, 402de6 <dir_register+0x146>
  402dc6:	2300      	movs	r3, #0
  402dc8:	3301      	adds	r3, #1
  402dca:	b29b      	uxth	r3, r3
  402dcc:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  402dd0:	2a00      	cmp	r2, #0
  402dd2:	d1f9      	bne.n	402dc8 <dir_register+0x128>
		ne = (ne + 25) / 13;
  402dd4:	3319      	adds	r3, #25
  402dd6:	4f62      	ldr	r7, [pc, #392]	; (402f60 <dir_register+0x2c0>)
  402dd8:	fb87 2703 	smull	r2, r7, r7, r3
  402ddc:	17db      	asrs	r3, r3, #31
  402dde:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  402de2:	b2bf      	uxth	r7, r7
  402de4:	e002      	b.n	402dec <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  402de6:	2300      	movs	r3, #0
  402de8:	e7f4      	b.n	402dd4 <dir_register+0x134>
		ne = 1;
  402dea:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  402dec:	2100      	movs	r1, #0
  402dee:	4620      	mov	r0, r4
  402df0:	4b5c      	ldr	r3, [pc, #368]	; (402f64 <dir_register+0x2c4>)
  402df2:	4798      	blx	r3
	if (res != FR_OK) return res;
  402df4:	4606      	mov	r6, r0
  402df6:	2800      	cmp	r0, #0
  402df8:	d1d4      	bne.n	402da4 <dir_register+0x104>
  402dfa:	f04f 0a00 	mov.w	sl, #0
  402dfe:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  402e00:	f8df 816c 	ldr.w	r8, [pc, #364]	; 402f70 <dir_register+0x2d0>
			n = 0;					/* Not a blank entry. Restart to search */
  402e04:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402e06:	f8df 9164 	ldr.w	r9, [pc, #356]	; 402f6c <dir_register+0x2cc>
  402e0a:	e00a      	b.n	402e22 <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  402e0c:	1c6b      	adds	r3, r5, #1
  402e0e:	b29b      	uxth	r3, r3
  402e10:	429f      	cmp	r7, r3
  402e12:	d066      	beq.n	402ee2 <dir_register+0x242>
  402e14:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402e16:	2101      	movs	r1, #1
  402e18:	4620      	mov	r0, r4
  402e1a:	47c8      	blx	r9
	} while (res == FR_OK);
  402e1c:	4606      	mov	r6, r0
  402e1e:	2800      	cmp	r0, #0
  402e20:	d1c0      	bne.n	402da4 <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  402e22:	6921      	ldr	r1, [r4, #16]
  402e24:	6820      	ldr	r0, [r4, #0]
  402e26:	47c0      	blx	r8
		if (res != FR_OK) break;
  402e28:	4606      	mov	r6, r0
  402e2a:	2800      	cmp	r0, #0
  402e2c:	d1ba      	bne.n	402da4 <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  402e2e:	6963      	ldr	r3, [r4, #20]
  402e30:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  402e32:	2be5      	cmp	r3, #229	; 0xe5
  402e34:	d000      	beq.n	402e38 <dir_register+0x198>
  402e36:	b923      	cbnz	r3, 402e42 <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  402e38:	2d00      	cmp	r5, #0
  402e3a:	d1e7      	bne.n	402e0c <dir_register+0x16c>
  402e3c:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  402e40:	e7e4      	b.n	402e0c <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  402e42:	465d      	mov	r5, fp
  402e44:	e7e7      	b.n	402e16 <dir_register+0x176>
		res = dir_sdi(dj, is);
  402e46:	4651      	mov	r1, sl
  402e48:	4620      	mov	r0, r4
  402e4a:	4b46      	ldr	r3, [pc, #280]	; (402f64 <dir_register+0x2c4>)
  402e4c:	4798      	blx	r3
		if (res == FR_OK) {
  402e4e:	4606      	mov	r6, r0
  402e50:	2800      	cmp	r0, #0
  402e52:	d1a7      	bne.n	402da4 <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  402e54:	69a0      	ldr	r0, [r4, #24]
  402e56:	4b44      	ldr	r3, [pc, #272]	; (402f68 <dir_register+0x2c8>)
  402e58:	4798      	blx	r3
  402e5a:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  402e5c:	2700      	movs	r7, #0
	s = wc = 0;
  402e5e:	9701      	str	r7, [sp, #4]
  402e60:	e019      	b.n	402e96 <dir_register+0x1f6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402e62:	4671      	mov	r1, lr
  402e64:	e065      	b.n	402f32 <dir_register+0x292>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  402e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402e6a:	4293      	cmp	r3, r2
  402e6c:	d002      	beq.n	402e74 <dir_register+0x1d4>
  402e6e:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  402e72:	b90b      	cbnz	r3, 402e78 <dir_register+0x1d8>
  402e74:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  402e78:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  402e7c:	6823      	ldr	r3, [r4, #0]
  402e7e:	2201      	movs	r2, #1
  402e80:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  402e82:	4639      	mov	r1, r7
  402e84:	4620      	mov	r0, r4
  402e86:	4b39      	ldr	r3, [pc, #228]	; (402f6c <dir_register+0x2cc>)
  402e88:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  402e8a:	4606      	mov	r6, r0
  402e8c:	2800      	cmp	r0, #0
  402e8e:	d189      	bne.n	402da4 <dir_register+0x104>
  402e90:	3d01      	subs	r5, #1
  402e92:	b2ad      	uxth	r5, r5
  402e94:	b33d      	cbz	r5, 402ee6 <dir_register+0x246>
				res = move_window(dj->fs, dj->sect);
  402e96:	6921      	ldr	r1, [r4, #16]
  402e98:	6820      	ldr	r0, [r4, #0]
  402e9a:	4b35      	ldr	r3, [pc, #212]	; (402f70 <dir_register+0x2d0>)
  402e9c:	4798      	blx	r3
				if (res != FR_OK) break;
  402e9e:	4606      	mov	r6, r0
  402ea0:	2800      	cmp	r0, #0
  402ea2:	f47f af7f 	bne.w	402da4 <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  402ea6:	f8d4 901c 	ldr.w	r9, [r4, #28]
  402eaa:	6960      	ldr	r0, [r4, #20]
  402eac:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  402eb0:	f89d 3000 	ldrb.w	r3, [sp]
  402eb4:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  402eb6:	230f      	movs	r3, #15
  402eb8:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  402eba:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  402ebc:	7687      	strb	r7, [r0, #26]
  402ebe:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  402ec0:	f10b 31ff 	add.w	r1, fp, #4294967295
  402ec4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  402ec8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  402ecc:	4a29      	ldr	r2, [pc, #164]	; (402f74 <dir_register+0x2d4>)
  402ece:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  402ed2:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402ed4:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  402ed8:	f04f 0aff 	mov.w	sl, #255	; 0xff
  402edc:	e02c      	b.n	402f38 <dir_register+0x298>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  402ede:	2607      	movs	r6, #7
  402ee0:	e760      	b.n	402da4 <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  402ee2:	2b01      	cmp	r3, #1
  402ee4:	d8af      	bhi.n	402e46 <dir_register+0x1a6>
		res = move_window(dj->fs, dj->sect);
  402ee6:	6921      	ldr	r1, [r4, #16]
  402ee8:	6820      	ldr	r0, [r4, #0]
  402eea:	4b21      	ldr	r3, [pc, #132]	; (402f70 <dir_register+0x2d0>)
  402eec:	4798      	blx	r3
		if (res == FR_OK) {
  402eee:	4606      	mov	r6, r0
  402ef0:	2800      	cmp	r0, #0
  402ef2:	f47f af57 	bne.w	402da4 <dir_register+0x104>
			dir = dj->dir;
  402ef6:	6965      	ldr	r5, [r4, #20]
  402ef8:	f105 0120 	add.w	r1, r5, #32
	BYTE *d = (BYTE*)dst;
  402efc:	462b      	mov	r3, r5
		*d++ = (BYTE)val;
  402efe:	2200      	movs	r2, #0
  402f00:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  402f04:	4299      	cmp	r1, r3
  402f06:	d1fb      	bne.n	402f00 <dir_register+0x260>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  402f08:	220b      	movs	r2, #11
  402f0a:	69a1      	ldr	r1, [r4, #24]
  402f0c:	4628      	mov	r0, r5
  402f0e:	4b13      	ldr	r3, [pc, #76]	; (402f5c <dir_register+0x2bc>)
  402f10:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  402f12:	69a3      	ldr	r3, [r4, #24]
  402f14:	7adb      	ldrb	r3, [r3, #11]
  402f16:	f003 0318 	and.w	r3, r3, #24
  402f1a:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  402f1c:	6823      	ldr	r3, [r4, #0]
  402f1e:	2201      	movs	r2, #1
  402f20:	711a      	strb	r2, [r3, #4]
  402f22:	e73f      	b.n	402da4 <dir_register+0x104>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  402f24:	f892 e000 	ldrb.w	lr, [r2]
  402f28:	f800 a00e 	strb.w	sl, [r0, lr]
  402f2c:	4486      	add	lr, r0
  402f2e:	f88e a001 	strb.w	sl, [lr, #1]
  402f32:	3201      	adds	r2, #1
	} while (++s < 13);
  402f34:	4590      	cmp	r8, r2
  402f36:	d096      	beq.n	402e66 <dir_register+0x1c6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402f38:	42b3      	cmp	r3, r6
  402f3a:	d0f3      	beq.n	402f24 <dir_register+0x284>
  402f3c:	f101 0e01 	add.w	lr, r1, #1
  402f40:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  402f44:	7811      	ldrb	r1, [r2, #0]
  402f46:	5443      	strb	r3, [r0, r1]
  402f48:	4401      	add	r1, r0
  402f4a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  402f4e:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  402f52:	2b00      	cmp	r3, #0
  402f54:	d185      	bne.n	402e62 <dir_register+0x1c2>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402f56:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  402f58:	4633      	mov	r3, r6
  402f5a:	e7ea      	b.n	402f32 <dir_register+0x292>
  402f5c:	00401cd9 	.word	0x00401cd9
  402f60:	4ec4ec4f 	.word	0x4ec4ec4f
  402f64:	004022c1 	.word	0x004022c1
  402f68:	00401d03 	.word	0x00401d03
  402f6c:	004026a1 	.word	0x004026a1
  402f70:	00402149 	.word	0x00402149
  402f74:	00408264 	.word	0x00408264
  402f78:	004027d9 	.word	0x004027d9

00402f7c <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  402f7c:	b108      	cbz	r0, 402f82 <f_mount+0x6>
		return FR_INVALID_DRIVE;
  402f7e:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  402f80:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  402f82:	4b06      	ldr	r3, [pc, #24]	; (402f9c <f_mount+0x20>)
  402f84:	681b      	ldr	r3, [r3, #0]
	if (rfs) {
  402f86:	b10b      	cbz	r3, 402f8c <f_mount+0x10>
		rfs->fs_type = 0;		/* Clear old fs object */
  402f88:	2200      	movs	r2, #0
  402f8a:	701a      	strb	r2, [r3, #0]
	if (fs) {
  402f8c:	b109      	cbz	r1, 402f92 <f_mount+0x16>
		fs->fs_type = 0;		/* Clear new fs object */
  402f8e:	2300      	movs	r3, #0
  402f90:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  402f92:	4b02      	ldr	r3, [pc, #8]	; (402f9c <f_mount+0x20>)
  402f94:	6019      	str	r1, [r3, #0]
	return FR_OK;
  402f96:	2000      	movs	r0, #0
  402f98:	4770      	bx	lr
  402f9a:	bf00      	nop
  402f9c:	20000a10 	.word	0x20000a10

00402fa0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  402fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402fa4:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  402fa8:	4605      	mov	r5, r0
  402faa:	9101      	str	r1, [sp, #4]
  402fac:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  402fae:	2300      	movs	r3, #0
  402fb0:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  402fb2:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  402fb6:	f002 021e 	and.w	r2, r2, #30
  402fba:	a985      	add	r1, sp, #532	; 0x214
  402fbc:	a801      	add	r0, sp, #4
  402fbe:	4b58      	ldr	r3, [pc, #352]	; (403120 <f_open+0x180>)
  402fc0:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  402fc2:	ab82      	add	r3, sp, #520	; 0x208
  402fc4:	938b      	str	r3, [sp, #556]	; 0x22c
  402fc6:	ab02      	add	r3, sp, #8
  402fc8:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  402fca:	b140      	cbz	r0, 402fde <f_open+0x3e>
  402fcc:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  402fce:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402fd0:	f016 0f1c 	tst.w	r6, #28
  402fd4:	d117      	bne.n	403006 <f_open+0x66>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  402fd6:	2b00      	cmp	r3, #0
  402fd8:	f040 8092 	bne.w	403100 <f_open+0x160>
  402fdc:	e00d      	b.n	402ffa <f_open+0x5a>
		res = follow_path(&dj, path);	/* Follow the file path */
  402fde:	9901      	ldr	r1, [sp, #4]
  402fe0:	a885      	add	r0, sp, #532	; 0x214
  402fe2:	4b50      	ldr	r3, [pc, #320]	; (403124 <f_open+0x184>)
  402fe4:	4798      	blx	r3
	dir = dj.dir;
  402fe6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
  402fe8:	4603      	mov	r3, r0
  402fea:	2800      	cmp	r0, #0
  402fec:	d1f0      	bne.n	402fd0 <f_open+0x30>
		if (!dir)	/* Current dir itself */
  402fee:	2c00      	cmp	r4, #0
  402ff0:	f000 808b 	beq.w	40310a <f_open+0x16a>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402ff4:	f016 0f1c 	tst.w	r6, #28
  402ff8:	d116      	bne.n	403028 <f_open+0x88>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  402ffa:	7ae3      	ldrb	r3, [r4, #11]
  402ffc:	f013 0f10 	tst.w	r3, #16
  403000:	d04f      	beq.n	4030a2 <f_open+0x102>
				res = FR_NO_FILE;
  403002:	2304      	movs	r3, #4
  403004:	e07c      	b.n	403100 <f_open+0x160>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  403006:	2b04      	cmp	r3, #4
  403008:	d005      	beq.n	403016 <f_open+0x76>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  40300a:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  40300e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  403010:	2b00      	cmp	r3, #0
  403012:	d057      	beq.n	4030c4 <f_open+0x124>
  403014:	e074      	b.n	403100 <f_open+0x160>
				res = dir_register(&dj);
  403016:	a885      	add	r0, sp, #532	; 0x214
  403018:	4b43      	ldr	r3, [pc, #268]	; (403128 <f_open+0x188>)
  40301a:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  40301c:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  403020:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  403022:	4603      	mov	r3, r0
  403024:	b138      	cbz	r0, 403036 <f_open+0x96>
  403026:	e06b      	b.n	403100 <f_open+0x160>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  403028:	7ae3      	ldrb	r3, [r4, #11]
  40302a:	f013 0f11 	tst.w	r3, #17
  40302e:	d173      	bne.n	403118 <f_open+0x178>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  403030:	f016 0f04 	tst.w	r6, #4
  403034:	d172      	bne.n	40311c <f_open+0x17c>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  403036:	f017 0f08 	tst.w	r7, #8
  40303a:	d03f      	beq.n	4030bc <f_open+0x11c>
			dw = get_fattime();					/* Created time */
  40303c:	4b3b      	ldr	r3, [pc, #236]	; (40312c <f_open+0x18c>)
  40303e:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  403040:	73a0      	strb	r0, [r4, #14]
  403042:	f3c0 2307 	ubfx	r3, r0, #8, #8
  403046:	73e3      	strb	r3, [r4, #15]
  403048:	0c03      	lsrs	r3, r0, #16
  40304a:	7423      	strb	r3, [r4, #16]
  40304c:	0e00      	lsrs	r0, r0, #24
  40304e:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  403050:	2300      	movs	r3, #0
  403052:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  403054:	7723      	strb	r3, [r4, #28]
  403056:	7763      	strb	r3, [r4, #29]
  403058:	77a3      	strb	r3, [r4, #30]
  40305a:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  40305c:	7d62      	ldrb	r2, [r4, #21]
  40305e:	7d26      	ldrb	r6, [r4, #20]
  403060:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  403064:	7ee1      	ldrb	r1, [r4, #27]
  403066:	7ea2      	ldrb	r2, [r4, #26]
  403068:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  40306c:	76a3      	strb	r3, [r4, #26]
  40306e:	76e3      	strb	r3, [r4, #27]
  403070:	7523      	strb	r3, [r4, #20]
  403072:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  403074:	9885      	ldr	r0, [sp, #532]	; 0x214
  403076:	2301      	movs	r3, #1
  403078:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  40307a:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  40307e:	d01b      	beq.n	4030b8 <f_open+0x118>
				dw = dj.fs->winsect;
  403080:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  403084:	4631      	mov	r1, r6
  403086:	4b2a      	ldr	r3, [pc, #168]	; (403130 <f_open+0x190>)
  403088:	4798      	blx	r3
				if (res == FR_OK) {
  40308a:	4603      	mov	r3, r0
  40308c:	2800      	cmp	r0, #0
  40308e:	d137      	bne.n	403100 <f_open+0x160>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  403090:	9885      	ldr	r0, [sp, #532]	; 0x214
  403092:	3e01      	subs	r6, #1
  403094:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  403096:	4641      	mov	r1, r8
  403098:	4b26      	ldr	r3, [pc, #152]	; (403134 <f_open+0x194>)
  40309a:	4798      	blx	r3
	if (res == FR_OK) {
  40309c:	4603      	mov	r3, r0
  40309e:	b158      	cbz	r0, 4030b8 <f_open+0x118>
  4030a0:	e02e      	b.n	403100 <f_open+0x160>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  4030a2:	f016 0f02 	tst.w	r6, #2
  4030a6:	d004      	beq.n	4030b2 <f_open+0x112>
  4030a8:	f013 0f01 	tst.w	r3, #1
  4030ac:	d001      	beq.n	4030b2 <f_open+0x112>
					res = FR_DENIED;
  4030ae:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  4030b0:	e026      	b.n	403100 <f_open+0x160>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  4030b2:	f016 0f08 	tst.w	r6, #8
  4030b6:	d001      	beq.n	4030bc <f_open+0x11c>
			mode |= FA__WRITTEN;
  4030b8:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  4030bc:	9b85      	ldr	r3, [sp, #532]	; 0x214
  4030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4030c0:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  4030c2:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  4030c4:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  4030c6:	7d62      	ldrb	r2, [r4, #21]
  4030c8:	7d23      	ldrb	r3, [r4, #20]
  4030ca:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4030ce:	7ee1      	ldrb	r1, [r4, #27]
  4030d0:	7ea3      	ldrb	r3, [r4, #26]
  4030d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  4030d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4030da:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  4030dc:	7fe2      	ldrb	r2, [r4, #31]
  4030de:	7fa3      	ldrb	r3, [r4, #30]
  4030e0:	041b      	lsls	r3, r3, #16
  4030e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4030e6:	7f22      	ldrb	r2, [r4, #28]
  4030e8:	4313      	orrs	r3, r2
  4030ea:	7f62      	ldrb	r2, [r4, #29]
  4030ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4030f0:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  4030f2:	2300      	movs	r3, #0
  4030f4:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  4030f6:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  4030f8:	9a85      	ldr	r2, [sp, #532]	; 0x214
  4030fa:	602a      	str	r2, [r5, #0]
  4030fc:	88d2      	ldrh	r2, [r2, #6]
  4030fe:	80aa      	strh	r2, [r5, #4]
}
  403100:	4618      	mov	r0, r3
  403102:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  403106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  40310a:	f016 0f1c 	tst.w	r6, #28
  40310e:	d101      	bne.n	403114 <f_open+0x174>
			res = FR_INVALID_NAME;
  403110:	2306      	movs	r3, #6
  403112:	e77d      	b.n	403010 <f_open+0x70>
  403114:	2306      	movs	r3, #6
  403116:	e778      	b.n	40300a <f_open+0x6a>
				res = FR_DENIED;
  403118:	2307      	movs	r3, #7
  40311a:	e7f1      	b.n	403100 <f_open+0x160>
					res = FR_EXIST;
  40311c:	2308      	movs	r3, #8
  40311e:	e7ef      	b.n	403100 <f_open+0x160>
  403120:	00401de5 	.word	0x00401de5
  403124:	00402985 	.word	0x00402985
  403128:	00402ca1 	.word	0x00402ca1
  40312c:	00401c81 	.word	0x00401c81
  403130:	00402559 	.word	0x00402559
  403134:	00402149 	.word	0x00402149

00403138 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  403138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40313c:	b083      	sub	sp, #12
  40313e:	4604      	mov	r4, r0
  403140:	4689      	mov	r9, r1
  403142:	4616      	mov	r6, r2
  403144:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  403146:	2300      	movs	r3, #0
  403148:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  40314c:	8881      	ldrh	r1, [r0, #4]
  40314e:	6800      	ldr	r0, [r0, #0]
  403150:	4b75      	ldr	r3, [pc, #468]	; (403328 <f_write+0x1f0>)
  403152:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  403154:	9001      	str	r0, [sp, #4]
  403156:	2800      	cmp	r0, #0
  403158:	f040 80e2 	bne.w	403320 <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  40315c:	79a3      	ldrb	r3, [r4, #6]
  40315e:	f013 0f80 	tst.w	r3, #128	; 0x80
  403162:	f040 80db 	bne.w	40331c <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  403166:	f013 0f02 	tst.w	r3, #2
  40316a:	d102      	bne.n	403172 <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  40316c:	2307      	movs	r3, #7
  40316e:	9301      	str	r3, [sp, #4]
  403170:	e0d6      	b.n	403320 <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  403172:	68e3      	ldr	r3, [r4, #12]
  403174:	42f3      	cmn	r3, r6
  403176:	d20f      	bcs.n	403198 <f_write+0x60>

	for ( ;  btw;							/* Repeat until all data written */
  403178:	2e00      	cmp	r6, #0
  40317a:	d17a      	bne.n	403272 <f_write+0x13a>
  40317c:	e00c      	b.n	403198 <f_write+0x60>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  40317e:	2100      	movs	r1, #0
  403180:	4b6a      	ldr	r3, [pc, #424]	; (40332c <f_write+0x1f4>)
  403182:	4798      	blx	r3
  403184:	4603      	mov	r3, r0
  403186:	6120      	str	r0, [r4, #16]
  403188:	e003      	b.n	403192 <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  40318a:	6961      	ldr	r1, [r4, #20]
  40318c:	4b67      	ldr	r3, [pc, #412]	; (40332c <f_write+0x1f4>)
  40318e:	4798      	blx	r3
  403190:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  403192:	2b00      	cmp	r3, #0
  403194:	f040 8081 	bne.w	40329a <f_write+0x162>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  403198:	68a3      	ldr	r3, [r4, #8]
  40319a:	68e2      	ldr	r2, [r4, #12]
  40319c:	4293      	cmp	r3, r2
  40319e:	bf88      	it	hi
  4031a0:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  4031a2:	79a3      	ldrb	r3, [r4, #6]
  4031a4:	f043 0320 	orr.w	r3, r3, #32
  4031a8:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  4031aa:	e0b9      	b.n	403320 <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4031ac:	79a3      	ldrb	r3, [r4, #6]
  4031ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4031b2:	71a3      	strb	r3, [r4, #6]
  4031b4:	2302      	movs	r3, #2
  4031b6:	9301      	str	r3, [sp, #4]
  4031b8:	e0b2      	b.n	403320 <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4031ba:	79a3      	ldrb	r3, [r4, #6]
  4031bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4031c0:	71a3      	strb	r3, [r4, #6]
  4031c2:	2301      	movs	r3, #1
  4031c4:	9301      	str	r3, [sp, #4]
  4031c6:	e0ab      	b.n	403320 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4031c8:	6820      	ldr	r0, [r4, #0]
  4031ca:	2301      	movs	r3, #1
  4031cc:	69a2      	ldr	r2, [r4, #24]
  4031ce:	f104 0124 	add.w	r1, r4, #36	; 0x24
  4031d2:	7840      	ldrb	r0, [r0, #1]
  4031d4:	4d56      	ldr	r5, [pc, #344]	; (403330 <f_write+0x1f8>)
  4031d6:	47a8      	blx	r5
  4031d8:	b920      	cbnz	r0, 4031e4 <f_write+0xac>
				fp->flag &= ~FA__DIRTY;
  4031da:	79a3      	ldrb	r3, [r4, #6]
  4031dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4031e0:	71a3      	strb	r3, [r4, #6]
  4031e2:	e064      	b.n	4032ae <f_write+0x176>
					ABORT(fp->fs, FR_DISK_ERR);
  4031e4:	79a3      	ldrb	r3, [r4, #6]
  4031e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4031ea:	71a3      	strb	r3, [r4, #6]
  4031ec:	2301      	movs	r3, #1
  4031ee:	9301      	str	r3, [sp, #4]
  4031f0:	e096      	b.n	403320 <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  4031f2:	79a3      	ldrb	r3, [r4, #6]
  4031f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4031f8:	71a3      	strb	r3, [r4, #6]
  4031fa:	2302      	movs	r3, #2
  4031fc:	9301      	str	r3, [sp, #4]
  4031fe:	e08f      	b.n	403320 <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  403200:	79a3      	ldrb	r3, [r4, #6]
  403202:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403206:	71a3      	strb	r3, [r4, #6]
  403208:	2301      	movs	r3, #1
  40320a:	9301      	str	r3, [sp, #4]
  40320c:	e088      	b.n	403320 <f_write+0x1e8>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  40320e:	f44f 7200 	mov.w	r2, #512	; 0x200
  403212:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  403216:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40321a:	4b46      	ldr	r3, [pc, #280]	; (403334 <f_write+0x1fc>)
  40321c:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
  40321e:	79a3      	ldrb	r3, [r4, #6]
  403220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  403224:	71a3      	strb	r3, [r4, #6]
  403226:	e065      	b.n	4032f4 <f_write+0x1bc>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
  403228:	69a3      	ldr	r3, [r4, #24]
  40322a:	429d      	cmp	r5, r3
  40322c:	d003      	beq.n	403236 <f_write+0xfe>
				if (fp->fptr < fp->fsize &&
  40322e:	68a2      	ldr	r2, [r4, #8]
  403230:	68e3      	ldr	r3, [r4, #12]
  403232:	429a      	cmp	r2, r3
  403234:	d361      	bcc.n	4032fa <f_write+0x1c2>
			fp->dsect = sect;
  403236:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  403238:	68a0      	ldr	r0, [r4, #8]
  40323a:	f3c0 0008 	ubfx	r0, r0, #0, #9
  40323e:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
  403242:	42b5      	cmp	r5, r6
  403244:	bf28      	it	cs
  403246:	4635      	movcs	r5, r6
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  403248:	3024      	adds	r0, #36	; 0x24
  40324a:	462a      	mov	r2, r5
  40324c:	4649      	mov	r1, r9
  40324e:	4420      	add	r0, r4
  403250:	4b38      	ldr	r3, [pc, #224]	; (403334 <f_write+0x1fc>)
  403252:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
  403254:	79a3      	ldrb	r3, [r4, #6]
  403256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40325a:	71a3      	strb	r3, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  40325c:	44a9      	add	r9, r5
  40325e:	68a3      	ldr	r3, [r4, #8]
  403260:	442b      	add	r3, r5
  403262:	60a3      	str	r3, [r4, #8]
  403264:	f8d8 3000 	ldr.w	r3, [r8]
  403268:	442b      	add	r3, r5
  40326a:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  40326e:	1b76      	subs	r6, r6, r5
  403270:	d092      	beq.n	403198 <f_write+0x60>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  403272:	68a2      	ldr	r2, [r4, #8]
  403274:	f3c2 0308 	ubfx	r3, r2, #0, #9
  403278:	2b00      	cmp	r3, #0
  40327a:	d1dd      	bne.n	403238 <f_write+0x100>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  40327c:	6820      	ldr	r0, [r4, #0]
  40327e:	7883      	ldrb	r3, [r0, #2]
  403280:	3b01      	subs	r3, #1
  403282:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  403286:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  40328a:	d10c      	bne.n	4032a6 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
  40328c:	2a00      	cmp	r2, #0
  40328e:	f47f af7c 	bne.w	40318a <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  403292:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  403294:	2b00      	cmp	r3, #0
  403296:	f43f af72 	beq.w	40317e <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  40329a:	2b01      	cmp	r3, #1
  40329c:	d086      	beq.n	4031ac <f_write+0x74>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  40329e:	f1b3 3fff 	cmp.w	r3, #4294967295
  4032a2:	d08a      	beq.n	4031ba <f_write+0x82>
				fp->clust = clst;			/* Update current cluster */
  4032a4:	6163      	str	r3, [r4, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
  4032a6:	79a3      	ldrb	r3, [r4, #6]
  4032a8:	f013 0f40 	tst.w	r3, #64	; 0x40
  4032ac:	d18c      	bne.n	4031c8 <f_write+0x90>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  4032ae:	f8d4 a000 	ldr.w	sl, [r4]
  4032b2:	6961      	ldr	r1, [r4, #20]
  4032b4:	4650      	mov	r0, sl
  4032b6:	4b20      	ldr	r3, [pc, #128]	; (403338 <f_write+0x200>)
  4032b8:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  4032ba:	4605      	mov	r5, r0
  4032bc:	2800      	cmp	r0, #0
  4032be:	d098      	beq.n	4031f2 <f_write+0xba>
			sect += csect;
  4032c0:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  4032c2:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  4032c6:	d0af      	beq.n	403228 <f_write+0xf0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  4032c8:	f89a 3002 	ldrb.w	r3, [sl, #2]
  4032cc:	eb07 020b 	add.w	r2, r7, fp
  4032d0:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  4032d2:	bf88      	it	hi
  4032d4:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  4032d8:	fa5f f38b 	uxtb.w	r3, fp
  4032dc:	462a      	mov	r2, r5
  4032de:	4649      	mov	r1, r9
  4032e0:	f89a 0001 	ldrb.w	r0, [sl, #1]
  4032e4:	4f12      	ldr	r7, [pc, #72]	; (403330 <f_write+0x1f8>)
  4032e6:	47b8      	blx	r7
  4032e8:	2800      	cmp	r0, #0
  4032ea:	d189      	bne.n	403200 <f_write+0xc8>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  4032ec:	69a1      	ldr	r1, [r4, #24]
  4032ee:	1b49      	subs	r1, r1, r5
  4032f0:	458b      	cmp	fp, r1
  4032f2:	d88c      	bhi.n	40320e <f_write+0xd6>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  4032f4:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  4032f8:	e7b0      	b.n	40325c <f_write+0x124>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  4032fa:	2301      	movs	r3, #1
  4032fc:	462a      	mov	r2, r5
  4032fe:	f104 0124 	add.w	r1, r4, #36	; 0x24
  403302:	f89a 0001 	ldrb.w	r0, [sl, #1]
  403306:	4f0d      	ldr	r7, [pc, #52]	; (40333c <f_write+0x204>)
  403308:	47b8      	blx	r7
				if (fp->fptr < fp->fsize &&
  40330a:	2800      	cmp	r0, #0
  40330c:	d093      	beq.n	403236 <f_write+0xfe>
						ABORT(fp->fs, FR_DISK_ERR);
  40330e:	79a3      	ldrb	r3, [r4, #6]
  403310:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403314:	71a3      	strb	r3, [r4, #6]
  403316:	2301      	movs	r3, #1
  403318:	9301      	str	r3, [sp, #4]
  40331a:	e001      	b.n	403320 <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  40331c:	2302      	movs	r3, #2
  40331e:	9301      	str	r3, [sp, #4]
}
  403320:	9801      	ldr	r0, [sp, #4]
  403322:	b003      	add	sp, #12
  403324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403328:	00401d21 	.word	0x00401d21
  40332c:	00402499 	.word	0x00402499
  403330:	00401ba1 	.word	0x00401ba1
  403334:	00401cd9 	.word	0x00401cd9
  403338:	00401ced 	.word	0x00401ced
  40333c:	00401b31 	.word	0x00401b31

00403340 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  403340:	b538      	push	{r3, r4, r5, lr}
  403342:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  403344:	8881      	ldrh	r1, [r0, #4]
  403346:	6800      	ldr	r0, [r0, #0]
  403348:	4b28      	ldr	r3, [pc, #160]	; (4033ec <f_sync+0xac>)
  40334a:	4798      	blx	r3
	if (res == FR_OK) {
  40334c:	4603      	mov	r3, r0
  40334e:	b9d0      	cbnz	r0, 403386 <f_sync+0x46>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  403350:	79a2      	ldrb	r2, [r4, #6]
  403352:	f012 0f20 	tst.w	r2, #32
  403356:	d016      	beq.n	403386 <f_sync+0x46>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  403358:	f012 0f40 	tst.w	r2, #64	; 0x40
  40335c:	d00d      	beq.n	40337a <f_sync+0x3a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  40335e:	6820      	ldr	r0, [r4, #0]
  403360:	2301      	movs	r3, #1
  403362:	69a2      	ldr	r2, [r4, #24]
  403364:	f104 0124 	add.w	r1, r4, #36	; 0x24
  403368:	7840      	ldrb	r0, [r0, #1]
  40336a:	4d21      	ldr	r5, [pc, #132]	; (4033f0 <f_sync+0xb0>)
  40336c:	47a8      	blx	r5
  40336e:	2800      	cmp	r0, #0
  403370:	d139      	bne.n	4033e6 <f_sync+0xa6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
  403372:	79a3      	ldrb	r3, [r4, #6]
  403374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  403378:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  40337a:	69e1      	ldr	r1, [r4, #28]
  40337c:	6820      	ldr	r0, [r4, #0]
  40337e:	4b1d      	ldr	r3, [pc, #116]	; (4033f4 <f_sync+0xb4>)
  403380:	4798      	blx	r3
			if (res == FR_OK) {
  403382:	4603      	mov	r3, r0
  403384:	b108      	cbz	r0, 40338a <f_sync+0x4a>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  403386:	4618      	mov	r0, r3
  403388:	bd38      	pop	{r3, r4, r5, pc}
				dir = fp->dir_ptr;
  40338a:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  40338c:	7aeb      	ldrb	r3, [r5, #11]
  40338e:	f043 0320 	orr.w	r3, r3, #32
  403392:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  403394:	68e3      	ldr	r3, [r4, #12]
  403396:	772b      	strb	r3, [r5, #28]
  403398:	89a3      	ldrh	r3, [r4, #12]
  40339a:	0a1b      	lsrs	r3, r3, #8
  40339c:	776b      	strb	r3, [r5, #29]
  40339e:	89e3      	ldrh	r3, [r4, #14]
  4033a0:	77ab      	strb	r3, [r5, #30]
  4033a2:	7be3      	ldrb	r3, [r4, #15]
  4033a4:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  4033a6:	6923      	ldr	r3, [r4, #16]
  4033a8:	76ab      	strb	r3, [r5, #26]
  4033aa:	8a23      	ldrh	r3, [r4, #16]
  4033ac:	0a1b      	lsrs	r3, r3, #8
  4033ae:	76eb      	strb	r3, [r5, #27]
  4033b0:	8a63      	ldrh	r3, [r4, #18]
  4033b2:	752b      	strb	r3, [r5, #20]
  4033b4:	8a63      	ldrh	r3, [r4, #18]
  4033b6:	0a1b      	lsrs	r3, r3, #8
  4033b8:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  4033ba:	4b0f      	ldr	r3, [pc, #60]	; (4033f8 <f_sync+0xb8>)
  4033bc:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  4033be:	75a8      	strb	r0, [r5, #22]
  4033c0:	f3c0 2307 	ubfx	r3, r0, #8, #8
  4033c4:	75eb      	strb	r3, [r5, #23]
  4033c6:	0c03      	lsrs	r3, r0, #16
  4033c8:	762b      	strb	r3, [r5, #24]
  4033ca:	0e00      	lsrs	r0, r0, #24
  4033cc:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  4033ce:	79a3      	ldrb	r3, [r4, #6]
  4033d0:	f023 0320 	bic.w	r3, r3, #32
  4033d4:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  4033d6:	6823      	ldr	r3, [r4, #0]
  4033d8:	2201      	movs	r2, #1
  4033da:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  4033dc:	6820      	ldr	r0, [r4, #0]
  4033de:	4b07      	ldr	r3, [pc, #28]	; (4033fc <f_sync+0xbc>)
  4033e0:	4798      	blx	r3
  4033e2:	4603      	mov	r3, r0
  4033e4:	e7cf      	b.n	403386 <f_sync+0x46>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  4033e6:	2301      	movs	r3, #1
  4033e8:	e7cd      	b.n	403386 <f_sync+0x46>
  4033ea:	bf00      	nop
  4033ec:	00401d21 	.word	0x00401d21
  4033f0:	00401ba1 	.word	0x00401ba1
  4033f4:	00402149 	.word	0x00402149
  4033f8:	00401c81 	.word	0x00401c81
  4033fc:	004025d5 	.word	0x004025d5

00403400 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  403400:	b510      	push	{r4, lr}
  403402:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  403404:	4b03      	ldr	r3, [pc, #12]	; (403414 <f_close+0x14>)
  403406:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  403408:	4603      	mov	r3, r0
  40340a:	b908      	cbnz	r0, 403410 <f_close+0x10>
  40340c:	2200      	movs	r2, #0
  40340e:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  403410:	4618      	mov	r0, r3
  403412:	bd10      	pop	{r4, pc}
  403414:	00403341 	.word	0x00403341

00403418 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  403418:	b510      	push	{r4, lr}
  40341a:	b082      	sub	sp, #8
  40341c:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  40341e:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  403422:	ab01      	add	r3, sp, #4
  403424:	2201      	movs	r2, #1
  403426:	4669      	mov	r1, sp
  403428:	4620      	mov	r0, r4
  40342a:	4c05      	ldr	r4, [pc, #20]	; (403440 <f_putc+0x28>)
  40342c:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  40342e:	9b01      	ldr	r3, [sp, #4]
  403430:	2b01      	cmp	r3, #1
}
  403432:	bf0c      	ite	eq
  403434:	2001      	moveq	r0, #1
  403436:	f04f 30ff 	movne.w	r0, #4294967295
  40343a:	b002      	add	sp, #8
  40343c:	bd10      	pop	{r4, pc}
  40343e:	bf00      	nop
  403440:	00403139 	.word	0x00403139

00403444 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  403444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  403446:	7803      	ldrb	r3, [r0, #0]
  403448:	b17b      	cbz	r3, 40346a <f_puts+0x26>
  40344a:	460e      	mov	r6, r1
  40344c:	4605      	mov	r5, r0
  40344e:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  403450:	4f07      	ldr	r7, [pc, #28]	; (403470 <f_puts+0x2c>)
  403452:	4631      	mov	r1, r6
  403454:	4618      	mov	r0, r3
  403456:	47b8      	blx	r7
  403458:	f1b0 3fff 	cmp.w	r0, #4294967295
  40345c:	d006      	beq.n	40346c <f_puts+0x28>
  40345e:	1b60      	subs	r0, r4, r5
	for (n = 0; *str; str++, n++) {
  403460:	f814 3b01 	ldrb.w	r3, [r4], #1
  403464:	2b00      	cmp	r3, #0
  403466:	d1f4      	bne.n	403452 <f_puts+0xe>
  403468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40346a:	2000      	movs	r0, #0
	}
	return n;
}
  40346c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40346e:	bf00      	nop
  403470:	00403419 	.word	0x00403419

00403474 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  403474:	287f      	cmp	r0, #127	; 0x7f
  403476:	d919      	bls.n	4034ac <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  403478:	b971      	cbnz	r1, 403498 <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  40347a:	28c7      	cmp	r0, #199	; 0xc7
  40347c:	d013      	beq.n	4034a6 <ff_convert+0x32>
  40347e:	4a0c      	ldr	r2, [pc, #48]	; (4034b0 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  403480:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  403482:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  403486:	4281      	cmp	r1, r0
  403488:	d003      	beq.n	403492 <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  40348a:	3301      	adds	r3, #1
  40348c:	b29b      	uxth	r3, r3
  40348e:	2b80      	cmp	r3, #128	; 0x80
  403490:	d1f7      	bne.n	403482 <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  403492:	3380      	adds	r3, #128	; 0x80
  403494:	b2d8      	uxtb	r0, r3
  403496:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  403498:	28ff      	cmp	r0, #255	; 0xff
  40349a:	d806      	bhi.n	4034aa <ff_convert+0x36>
  40349c:	3880      	subs	r0, #128	; 0x80
  40349e:	4b04      	ldr	r3, [pc, #16]	; (4034b0 <ff_convert+0x3c>)
  4034a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  4034a4:	4770      	bx	lr
				if (src == Tbl[c]) break;
  4034a6:	2300      	movs	r3, #0
  4034a8:	e7f3      	b.n	403492 <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4034aa:	2000      	movs	r0, #0
		}
	}

	return c;
}
  4034ac:	4770      	bx	lr
  4034ae:	bf00      	nop
  4034b0:	00408308 	.word	0x00408308

004034b4 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  4034b4:	2861      	cmp	r0, #97	; 0x61
  4034b6:	d010      	beq.n	4034da <ff_wtoupper+0x26>
  4034b8:	4909      	ldr	r1, [pc, #36]	; (4034e0 <ff_wtoupper+0x2c>)
  4034ba:	2201      	movs	r2, #1
  4034bc:	2362      	movs	r3, #98	; 0x62
  4034be:	4298      	cmp	r0, r3
  4034c0:	d005      	beq.n	4034ce <ff_wtoupper+0x1a>
  4034c2:	3201      	adds	r2, #1
  4034c4:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  4034c8:	2b00      	cmp	r3, #0
  4034ca:	d1f8      	bne.n	4034be <ff_wtoupper+0xa>
  4034cc:	e003      	b.n	4034d6 <ff_wtoupper+0x22>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  4034ce:	b118      	cbz	r0, 4034d8 <ff_wtoupper+0x24>
  4034d0:	4b04      	ldr	r3, [pc, #16]	; (4034e4 <ff_wtoupper+0x30>)
  4034d2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  4034d6:	4770      	bx	lr
  4034d8:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  4034da:	2200      	movs	r2, #0
  4034dc:	e7f8      	b.n	4034d0 <ff_wtoupper+0x1c>
  4034de:	bf00      	nop
  4034e0:	0040840a 	.word	0x0040840a
  4034e4:	004085e8 	.word	0x004085e8

004034e8 <main>:
/* Function definitions ----------------------------------------------- */
/**
 * @brief Entry
 */
int main(void)
{
  4034e8:	b508      	push	{r3, lr}
  sys_init();
  4034ea:	4b02      	ldr	r3, [pc, #8]	; (4034f4 <main+0xc>)
  4034ec:	4798      	blx	r3

  while (1)
  {
    sys_run();
  4034ee:	4c02      	ldr	r4, [pc, #8]	; (4034f8 <main+0x10>)
  4034f0:	47a0      	blx	r4
  4034f2:	e7fd      	b.n	4034f0 <main+0x8>
  4034f4:	004001b5 	.word	0x004001b5
  4034f8:	004001d1 	.word	0x004001d1

004034fc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4034fc:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4034fe:	480e      	ldr	r0, [pc, #56]	; (403538 <sysclk_init+0x3c>)
  403500:	4b0e      	ldr	r3, [pc, #56]	; (40353c <sysclk_init+0x40>)
  403502:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403504:	213e      	movs	r1, #62	; 0x3e
  403506:	2000      	movs	r0, #0
  403508:	4b0d      	ldr	r3, [pc, #52]	; (403540 <sysclk_init+0x44>)
  40350a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40350c:	4c0d      	ldr	r4, [pc, #52]	; (403544 <sysclk_init+0x48>)
  40350e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  403510:	2800      	cmp	r0, #0
  403512:	d0fc      	beq.n	40350e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  403514:	4b0c      	ldr	r3, [pc, #48]	; (403548 <sysclk_init+0x4c>)
  403516:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403518:	4a0c      	ldr	r2, [pc, #48]	; (40354c <sysclk_init+0x50>)
  40351a:	4b0d      	ldr	r3, [pc, #52]	; (403550 <sysclk_init+0x54>)
  40351c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40351e:	4c0d      	ldr	r4, [pc, #52]	; (403554 <sysclk_init+0x58>)
  403520:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403522:	2800      	cmp	r0, #0
  403524:	d0fc      	beq.n	403520 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403526:	2010      	movs	r0, #16
  403528:	4b0b      	ldr	r3, [pc, #44]	; (403558 <sysclk_init+0x5c>)
  40352a:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40352c:	4b0b      	ldr	r3, [pc, #44]	; (40355c <sysclk_init+0x60>)
  40352e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403530:	480b      	ldr	r0, [pc, #44]	; (403560 <sysclk_init+0x64>)
  403532:	4b02      	ldr	r3, [pc, #8]	; (40353c <sysclk_init+0x40>)
  403534:	4798      	blx	r3
  403536:	bd10      	pop	{r4, pc}
  403538:	07270e00 	.word	0x07270e00
  40353c:	00401a29 	.word	0x00401a29
  403540:	00403749 	.word	0x00403749
  403544:	0040379d 	.word	0x0040379d
  403548:	004037ad 	.word	0x004037ad
  40354c:	200f3f01 	.word	0x200f3f01
  403550:	400e0400 	.word	0x400e0400
  403554:	004037bd 	.word	0x004037bd
  403558:	004036e5 	.word	0x004036e5
  40355c:	0040191d 	.word	0x0040191d
  403560:	05b8d800 	.word	0x05b8d800

00403564 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  403564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403568:	4681      	mov	r9, r0
  40356a:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40356c:	4b12      	ldr	r3, [pc, #72]	; (4035b8 <pio_handler_process+0x54>)
  40356e:	4798      	blx	r3
  403570:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  403572:	4648      	mov	r0, r9
  403574:	4b11      	ldr	r3, [pc, #68]	; (4035bc <pio_handler_process+0x58>)
  403576:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  403578:	4005      	ands	r5, r0
  40357a:	d013      	beq.n	4035a4 <pio_handler_process+0x40>
  40357c:	4c10      	ldr	r4, [pc, #64]	; (4035c0 <pio_handler_process+0x5c>)
  40357e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  403582:	e003      	b.n	40358c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  403584:	42b4      	cmp	r4, r6
  403586:	d00d      	beq.n	4035a4 <pio_handler_process+0x40>
  403588:	3410      	adds	r4, #16
		while (status != 0) {
  40358a:	b15d      	cbz	r5, 4035a4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40358c:	6820      	ldr	r0, [r4, #0]
  40358e:	42b8      	cmp	r0, r7
  403590:	d1f8      	bne.n	403584 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  403592:	6861      	ldr	r1, [r4, #4]
  403594:	4229      	tst	r1, r5
  403596:	d0f5      	beq.n	403584 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403598:	68e3      	ldr	r3, [r4, #12]
  40359a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40359c:	6863      	ldr	r3, [r4, #4]
  40359e:	ea25 0503 	bic.w	r5, r5, r3
  4035a2:	e7ef      	b.n	403584 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4035a4:	4b07      	ldr	r3, [pc, #28]	; (4035c4 <pio_handler_process+0x60>)
  4035a6:	681b      	ldr	r3, [r3, #0]
  4035a8:	b123      	cbz	r3, 4035b4 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4035aa:	4b07      	ldr	r3, [pc, #28]	; (4035c8 <pio_handler_process+0x64>)
  4035ac:	681b      	ldr	r3, [r3, #0]
  4035ae:	b10b      	cbz	r3, 4035b4 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4035b0:	4648      	mov	r0, r9
  4035b2:	4798      	blx	r3
  4035b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4035b8:	004036c3 	.word	0x004036c3
  4035bc:	004036c7 	.word	0x004036c7
  4035c0:	20000a18 	.word	0x20000a18
  4035c4:	20000ac0 	.word	0x20000ac0
  4035c8:	20000a88 	.word	0x20000a88

004035cc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4035cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4035ce:	2109      	movs	r1, #9
  4035d0:	4801      	ldr	r0, [pc, #4]	; (4035d8 <PIOA_Handler+0xc>)
  4035d2:	4b02      	ldr	r3, [pc, #8]	; (4035dc <PIOA_Handler+0x10>)
  4035d4:	4798      	blx	r3
  4035d6:	bd08      	pop	{r3, pc}
  4035d8:	400e0e00 	.word	0x400e0e00
  4035dc:	00403565 	.word	0x00403565

004035e0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4035e0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4035e2:	210a      	movs	r1, #10
  4035e4:	4801      	ldr	r0, [pc, #4]	; (4035ec <PIOB_Handler+0xc>)
  4035e6:	4b02      	ldr	r3, [pc, #8]	; (4035f0 <PIOB_Handler+0x10>)
  4035e8:	4798      	blx	r3
  4035ea:	bd08      	pop	{r3, pc}
  4035ec:	400e1000 	.word	0x400e1000
  4035f0:	00403565 	.word	0x00403565

004035f4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4035f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4035f6:	210b      	movs	r1, #11
  4035f8:	4801      	ldr	r0, [pc, #4]	; (403600 <PIOC_Handler+0xc>)
  4035fa:	4b02      	ldr	r3, [pc, #8]	; (403604 <PIOC_Handler+0x10>)
  4035fc:	4798      	blx	r3
  4035fe:	bd08      	pop	{r3, pc}
  403600:	400e1200 	.word	0x400e1200
  403604:	00403565 	.word	0x00403565

00403608 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  403608:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40360a:	210c      	movs	r1, #12
  40360c:	4801      	ldr	r0, [pc, #4]	; (403614 <PIOD_Handler+0xc>)
  40360e:	4b02      	ldr	r3, [pc, #8]	; (403618 <PIOD_Handler+0x10>)
  403610:	4798      	blx	r3
  403612:	bd08      	pop	{r3, pc}
  403614:	400e1400 	.word	0x400e1400
  403618:	00403565 	.word	0x00403565

0040361c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40361c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40361e:	210d      	movs	r1, #13
  403620:	4801      	ldr	r0, [pc, #4]	; (403628 <PIOE_Handler+0xc>)
  403622:	4b02      	ldr	r3, [pc, #8]	; (40362c <PIOE_Handler+0x10>)
  403624:	4798      	blx	r3
  403626:	bd08      	pop	{r3, pc}
  403628:	400e1600 	.word	0x400e1600
  40362c:	00403565 	.word	0x00403565

00403630 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  403630:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  403632:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  403636:	d03a      	beq.n	4036ae <pio_set_peripheral+0x7e>
  403638:	d813      	bhi.n	403662 <pio_set_peripheral+0x32>
  40363a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40363e:	d025      	beq.n	40368c <pio_set_peripheral+0x5c>
  403640:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  403644:	d10a      	bne.n	40365c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403646:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403648:	4313      	orrs	r3, r2
  40364a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40364c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40364e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  403650:	400b      	ands	r3, r1
  403652:	ea23 0302 	bic.w	r3, r3, r2
  403656:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403658:	6042      	str	r2, [r0, #4]
  40365a:	4770      	bx	lr
	switch (ul_type) {
  40365c:	2900      	cmp	r1, #0
  40365e:	d1fb      	bne.n	403658 <pio_set_peripheral+0x28>
  403660:	4770      	bx	lr
  403662:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  403666:	d021      	beq.n	4036ac <pio_set_peripheral+0x7c>
  403668:	d809      	bhi.n	40367e <pio_set_peripheral+0x4e>
  40366a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40366e:	d1f3      	bne.n	403658 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  403670:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403672:	4313      	orrs	r3, r2
  403674:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403676:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403678:	4313      	orrs	r3, r2
  40367a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40367c:	e7ec      	b.n	403658 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40367e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  403682:	d013      	beq.n	4036ac <pio_set_peripheral+0x7c>
  403684:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  403688:	d010      	beq.n	4036ac <pio_set_peripheral+0x7c>
  40368a:	e7e5      	b.n	403658 <pio_set_peripheral+0x28>
{
  40368c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40368e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403690:	6f04      	ldr	r4, [r0, #112]	; 0x70
  403692:	43d3      	mvns	r3, r2
  403694:	4021      	ands	r1, r4
  403696:	461c      	mov	r4, r3
  403698:	4019      	ands	r1, r3
  40369a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40369c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40369e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4036a0:	400b      	ands	r3, r1
  4036a2:	4023      	ands	r3, r4
  4036a4:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4036a6:	6042      	str	r2, [r0, #4]
}
  4036a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4036ac:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4036ae:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4036b0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4036b2:	400b      	ands	r3, r1
  4036b4:	ea23 0302 	bic.w	r3, r3, r2
  4036b8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4036ba:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4036bc:	4313      	orrs	r3, r2
  4036be:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4036c0:	e7ca      	b.n	403658 <pio_set_peripheral+0x28>

004036c2 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4036c2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4036c4:	4770      	bx	lr

004036c6 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4036c6:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4036c8:	4770      	bx	lr

004036ca <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4036ca:	0943      	lsrs	r3, r0, #5
  4036cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4036d0:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4036d4:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4036d6:	f000 001f 	and.w	r0, r0, #31
  4036da:	2201      	movs	r2, #1
  4036dc:	fa02 f000 	lsl.w	r0, r2, r0
  4036e0:	6318      	str	r0, [r3, #48]	; 0x30
  4036e2:	4770      	bx	lr

004036e4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4036e4:	4a17      	ldr	r2, [pc, #92]	; (403744 <pmc_switch_mck_to_pllack+0x60>)
  4036e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4036e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4036ec:	4318      	orrs	r0, r3
  4036ee:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4036f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4036f2:	f013 0f08 	tst.w	r3, #8
  4036f6:	d10a      	bne.n	40370e <pmc_switch_mck_to_pllack+0x2a>
  4036f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4036fc:	4911      	ldr	r1, [pc, #68]	; (403744 <pmc_switch_mck_to_pllack+0x60>)
  4036fe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403700:	f012 0f08 	tst.w	r2, #8
  403704:	d103      	bne.n	40370e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403706:	3b01      	subs	r3, #1
  403708:	d1f9      	bne.n	4036fe <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40370a:	2001      	movs	r0, #1
  40370c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40370e:	4a0d      	ldr	r2, [pc, #52]	; (403744 <pmc_switch_mck_to_pllack+0x60>)
  403710:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403712:	f023 0303 	bic.w	r3, r3, #3
  403716:	f043 0302 	orr.w	r3, r3, #2
  40371a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40371c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40371e:	f013 0f08 	tst.w	r3, #8
  403722:	d10a      	bne.n	40373a <pmc_switch_mck_to_pllack+0x56>
  403724:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403728:	4906      	ldr	r1, [pc, #24]	; (403744 <pmc_switch_mck_to_pllack+0x60>)
  40372a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40372c:	f012 0f08 	tst.w	r2, #8
  403730:	d105      	bne.n	40373e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403732:	3b01      	subs	r3, #1
  403734:	d1f9      	bne.n	40372a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  403736:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403738:	4770      	bx	lr
	return 0;
  40373a:	2000      	movs	r0, #0
  40373c:	4770      	bx	lr
  40373e:	2000      	movs	r0, #0
  403740:	4770      	bx	lr
  403742:	bf00      	nop
  403744:	400e0400 	.word	0x400e0400

00403748 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  403748:	b9c8      	cbnz	r0, 40377e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40374a:	4a11      	ldr	r2, [pc, #68]	; (403790 <pmc_switch_mainck_to_xtal+0x48>)
  40374c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40374e:	0209      	lsls	r1, r1, #8
  403750:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  403752:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  403756:	f023 0303 	bic.w	r3, r3, #3
  40375a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40375e:	f043 0301 	orr.w	r3, r3, #1
  403762:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  403764:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  403766:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403768:	f013 0f01 	tst.w	r3, #1
  40376c:	d0fb      	beq.n	403766 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40376e:	4a08      	ldr	r2, [pc, #32]	; (403790 <pmc_switch_mainck_to_xtal+0x48>)
  403770:	6a13      	ldr	r3, [r2, #32]
  403772:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  403776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40377a:	6213      	str	r3, [r2, #32]
  40377c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40377e:	4904      	ldr	r1, [pc, #16]	; (403790 <pmc_switch_mainck_to_xtal+0x48>)
  403780:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  403782:	4a04      	ldr	r2, [pc, #16]	; (403794 <pmc_switch_mainck_to_xtal+0x4c>)
  403784:	401a      	ands	r2, r3
  403786:	4b04      	ldr	r3, [pc, #16]	; (403798 <pmc_switch_mainck_to_xtal+0x50>)
  403788:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40378a:	620b      	str	r3, [r1, #32]
  40378c:	4770      	bx	lr
  40378e:	bf00      	nop
  403790:	400e0400 	.word	0x400e0400
  403794:	fec8fffc 	.word	0xfec8fffc
  403798:	01370002 	.word	0x01370002

0040379c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40379c:	4b02      	ldr	r3, [pc, #8]	; (4037a8 <pmc_osc_is_ready_mainck+0xc>)
  40379e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4037a0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4037a4:	4770      	bx	lr
  4037a6:	bf00      	nop
  4037a8:	400e0400 	.word	0x400e0400

004037ac <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4037ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4037b0:	4b01      	ldr	r3, [pc, #4]	; (4037b8 <pmc_disable_pllack+0xc>)
  4037b2:	629a      	str	r2, [r3, #40]	; 0x28
  4037b4:	4770      	bx	lr
  4037b6:	bf00      	nop
  4037b8:	400e0400 	.word	0x400e0400

004037bc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4037bc:	4b02      	ldr	r3, [pc, #8]	; (4037c8 <pmc_is_locked_pllack+0xc>)
  4037be:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4037c0:	f000 0002 	and.w	r0, r0, #2
  4037c4:	4770      	bx	lr
  4037c6:	bf00      	nop
  4037c8:	400e0400 	.word	0x400e0400

004037cc <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4037cc:	282f      	cmp	r0, #47	; 0x2f
  4037ce:	d81e      	bhi.n	40380e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4037d0:	281f      	cmp	r0, #31
  4037d2:	d80c      	bhi.n	4037ee <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4037d4:	4b11      	ldr	r3, [pc, #68]	; (40381c <pmc_enable_periph_clk+0x50>)
  4037d6:	699a      	ldr	r2, [r3, #24]
  4037d8:	2301      	movs	r3, #1
  4037da:	4083      	lsls	r3, r0
  4037dc:	4393      	bics	r3, r2
  4037de:	d018      	beq.n	403812 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4037e0:	2301      	movs	r3, #1
  4037e2:	fa03 f000 	lsl.w	r0, r3, r0
  4037e6:	4b0d      	ldr	r3, [pc, #52]	; (40381c <pmc_enable_periph_clk+0x50>)
  4037e8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4037ea:	2000      	movs	r0, #0
  4037ec:	4770      	bx	lr
		ul_id -= 32;
  4037ee:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4037f0:	4b0a      	ldr	r3, [pc, #40]	; (40381c <pmc_enable_periph_clk+0x50>)
  4037f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4037f6:	2301      	movs	r3, #1
  4037f8:	4083      	lsls	r3, r0
  4037fa:	4393      	bics	r3, r2
  4037fc:	d00b      	beq.n	403816 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4037fe:	2301      	movs	r3, #1
  403800:	fa03 f000 	lsl.w	r0, r3, r0
  403804:	4b05      	ldr	r3, [pc, #20]	; (40381c <pmc_enable_periph_clk+0x50>)
  403806:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40380a:	2000      	movs	r0, #0
  40380c:	4770      	bx	lr
		return 1;
  40380e:	2001      	movs	r0, #1
  403810:	4770      	bx	lr
	return 0;
  403812:	2000      	movs	r0, #0
  403814:	4770      	bx	lr
  403816:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403818:	4770      	bx	lr
  40381a:	bf00      	nop
  40381c:	400e0400 	.word	0x400e0400

00403820 <__libc_init_array>:
  403820:	b570      	push	{r4, r5, r6, lr}
  403822:	4e0f      	ldr	r6, [pc, #60]	; (403860 <__libc_init_array+0x40>)
  403824:	4d0f      	ldr	r5, [pc, #60]	; (403864 <__libc_init_array+0x44>)
  403826:	1b76      	subs	r6, r6, r5
  403828:	10b6      	asrs	r6, r6, #2
  40382a:	bf18      	it	ne
  40382c:	2400      	movne	r4, #0
  40382e:	d005      	beq.n	40383c <__libc_init_array+0x1c>
  403830:	3401      	adds	r4, #1
  403832:	f855 3b04 	ldr.w	r3, [r5], #4
  403836:	4798      	blx	r3
  403838:	42a6      	cmp	r6, r4
  40383a:	d1f9      	bne.n	403830 <__libc_init_array+0x10>
  40383c:	4e0a      	ldr	r6, [pc, #40]	; (403868 <__libc_init_array+0x48>)
  40383e:	4d0b      	ldr	r5, [pc, #44]	; (40386c <__libc_init_array+0x4c>)
  403840:	1b76      	subs	r6, r6, r5
  403842:	f005 f905 	bl	408a50 <_init>
  403846:	10b6      	asrs	r6, r6, #2
  403848:	bf18      	it	ne
  40384a:	2400      	movne	r4, #0
  40384c:	d006      	beq.n	40385c <__libc_init_array+0x3c>
  40384e:	3401      	adds	r4, #1
  403850:	f855 3b04 	ldr.w	r3, [r5], #4
  403854:	4798      	blx	r3
  403856:	42a6      	cmp	r6, r4
  403858:	d1f9      	bne.n	40384e <__libc_init_array+0x2e>
  40385a:	bd70      	pop	{r4, r5, r6, pc}
  40385c:	bd70      	pop	{r4, r5, r6, pc}
  40385e:	bf00      	nop
  403860:	00408a5c 	.word	0x00408a5c
  403864:	00408a5c 	.word	0x00408a5c
  403868:	00408a64 	.word	0x00408a64
  40386c:	00408a5c 	.word	0x00408a5c

00403870 <memset>:
  403870:	b470      	push	{r4, r5, r6}
  403872:	0786      	lsls	r6, r0, #30
  403874:	d046      	beq.n	403904 <memset+0x94>
  403876:	1e54      	subs	r4, r2, #1
  403878:	2a00      	cmp	r2, #0
  40387a:	d041      	beq.n	403900 <memset+0x90>
  40387c:	b2ca      	uxtb	r2, r1
  40387e:	4603      	mov	r3, r0
  403880:	e002      	b.n	403888 <memset+0x18>
  403882:	f114 34ff 	adds.w	r4, r4, #4294967295
  403886:	d33b      	bcc.n	403900 <memset+0x90>
  403888:	f803 2b01 	strb.w	r2, [r3], #1
  40388c:	079d      	lsls	r5, r3, #30
  40388e:	d1f8      	bne.n	403882 <memset+0x12>
  403890:	2c03      	cmp	r4, #3
  403892:	d92e      	bls.n	4038f2 <memset+0x82>
  403894:	b2cd      	uxtb	r5, r1
  403896:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40389a:	2c0f      	cmp	r4, #15
  40389c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4038a0:	d919      	bls.n	4038d6 <memset+0x66>
  4038a2:	f103 0210 	add.w	r2, r3, #16
  4038a6:	4626      	mov	r6, r4
  4038a8:	3e10      	subs	r6, #16
  4038aa:	2e0f      	cmp	r6, #15
  4038ac:	f842 5c10 	str.w	r5, [r2, #-16]
  4038b0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4038b4:	f842 5c08 	str.w	r5, [r2, #-8]
  4038b8:	f842 5c04 	str.w	r5, [r2, #-4]
  4038bc:	f102 0210 	add.w	r2, r2, #16
  4038c0:	d8f2      	bhi.n	4038a8 <memset+0x38>
  4038c2:	f1a4 0210 	sub.w	r2, r4, #16
  4038c6:	f022 020f 	bic.w	r2, r2, #15
  4038ca:	f004 040f 	and.w	r4, r4, #15
  4038ce:	3210      	adds	r2, #16
  4038d0:	2c03      	cmp	r4, #3
  4038d2:	4413      	add	r3, r2
  4038d4:	d90d      	bls.n	4038f2 <memset+0x82>
  4038d6:	461e      	mov	r6, r3
  4038d8:	4622      	mov	r2, r4
  4038da:	3a04      	subs	r2, #4
  4038dc:	2a03      	cmp	r2, #3
  4038de:	f846 5b04 	str.w	r5, [r6], #4
  4038e2:	d8fa      	bhi.n	4038da <memset+0x6a>
  4038e4:	1f22      	subs	r2, r4, #4
  4038e6:	f022 0203 	bic.w	r2, r2, #3
  4038ea:	3204      	adds	r2, #4
  4038ec:	4413      	add	r3, r2
  4038ee:	f004 0403 	and.w	r4, r4, #3
  4038f2:	b12c      	cbz	r4, 403900 <memset+0x90>
  4038f4:	b2c9      	uxtb	r1, r1
  4038f6:	441c      	add	r4, r3
  4038f8:	f803 1b01 	strb.w	r1, [r3], #1
  4038fc:	429c      	cmp	r4, r3
  4038fe:	d1fb      	bne.n	4038f8 <memset+0x88>
  403900:	bc70      	pop	{r4, r5, r6}
  403902:	4770      	bx	lr
  403904:	4614      	mov	r4, r2
  403906:	4603      	mov	r3, r0
  403908:	e7c2      	b.n	403890 <memset+0x20>
  40390a:	bf00      	nop

0040390c <sprintf>:
  40390c:	b40e      	push	{r1, r2, r3}
  40390e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403910:	b09c      	sub	sp, #112	; 0x70
  403912:	ab21      	add	r3, sp, #132	; 0x84
  403914:	490f      	ldr	r1, [pc, #60]	; (403954 <sprintf+0x48>)
  403916:	f853 2b04 	ldr.w	r2, [r3], #4
  40391a:	9301      	str	r3, [sp, #4]
  40391c:	4605      	mov	r5, r0
  40391e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403922:	6808      	ldr	r0, [r1, #0]
  403924:	9502      	str	r5, [sp, #8]
  403926:	f44f 7702 	mov.w	r7, #520	; 0x208
  40392a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40392e:	a902      	add	r1, sp, #8
  403930:	9506      	str	r5, [sp, #24]
  403932:	f8ad 7014 	strh.w	r7, [sp, #20]
  403936:	9404      	str	r4, [sp, #16]
  403938:	9407      	str	r4, [sp, #28]
  40393a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40393e:	f000 f80b 	bl	403958 <_svfprintf_r>
  403942:	9b02      	ldr	r3, [sp, #8]
  403944:	2200      	movs	r2, #0
  403946:	701a      	strb	r2, [r3, #0]
  403948:	b01c      	add	sp, #112	; 0x70
  40394a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40394e:	b003      	add	sp, #12
  403950:	4770      	bx	lr
  403952:	bf00      	nop
  403954:	20000008 	.word	0x20000008

00403958 <_svfprintf_r>:
  403958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40395c:	b0c3      	sub	sp, #268	; 0x10c
  40395e:	460c      	mov	r4, r1
  403960:	910b      	str	r1, [sp, #44]	; 0x2c
  403962:	4692      	mov	sl, r2
  403964:	930f      	str	r3, [sp, #60]	; 0x3c
  403966:	900c      	str	r0, [sp, #48]	; 0x30
  403968:	f002 fa0e 	bl	405d88 <_localeconv_r>
  40396c:	6803      	ldr	r3, [r0, #0]
  40396e:	931a      	str	r3, [sp, #104]	; 0x68
  403970:	4618      	mov	r0, r3
  403972:	f003 f8e5 	bl	406b40 <strlen>
  403976:	89a3      	ldrh	r3, [r4, #12]
  403978:	9019      	str	r0, [sp, #100]	; 0x64
  40397a:	0619      	lsls	r1, r3, #24
  40397c:	d503      	bpl.n	403986 <_svfprintf_r+0x2e>
  40397e:	6923      	ldr	r3, [r4, #16]
  403980:	2b00      	cmp	r3, #0
  403982:	f001 8003 	beq.w	40498c <_svfprintf_r+0x1034>
  403986:	2300      	movs	r3, #0
  403988:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40398c:	9313      	str	r3, [sp, #76]	; 0x4c
  40398e:	9315      	str	r3, [sp, #84]	; 0x54
  403990:	9314      	str	r3, [sp, #80]	; 0x50
  403992:	9327      	str	r3, [sp, #156]	; 0x9c
  403994:	9326      	str	r3, [sp, #152]	; 0x98
  403996:	9318      	str	r3, [sp, #96]	; 0x60
  403998:	931b      	str	r3, [sp, #108]	; 0x6c
  40399a:	9309      	str	r3, [sp, #36]	; 0x24
  40399c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4039a0:	46c8      	mov	r8, r9
  4039a2:	9316      	str	r3, [sp, #88]	; 0x58
  4039a4:	9317      	str	r3, [sp, #92]	; 0x5c
  4039a6:	f89a 3000 	ldrb.w	r3, [sl]
  4039aa:	4654      	mov	r4, sl
  4039ac:	b1e3      	cbz	r3, 4039e8 <_svfprintf_r+0x90>
  4039ae:	2b25      	cmp	r3, #37	; 0x25
  4039b0:	d102      	bne.n	4039b8 <_svfprintf_r+0x60>
  4039b2:	e019      	b.n	4039e8 <_svfprintf_r+0x90>
  4039b4:	2b25      	cmp	r3, #37	; 0x25
  4039b6:	d003      	beq.n	4039c0 <_svfprintf_r+0x68>
  4039b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4039bc:	2b00      	cmp	r3, #0
  4039be:	d1f9      	bne.n	4039b4 <_svfprintf_r+0x5c>
  4039c0:	eba4 050a 	sub.w	r5, r4, sl
  4039c4:	b185      	cbz	r5, 4039e8 <_svfprintf_r+0x90>
  4039c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039c8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4039ca:	f8c8 a000 	str.w	sl, [r8]
  4039ce:	3301      	adds	r3, #1
  4039d0:	442a      	add	r2, r5
  4039d2:	2b07      	cmp	r3, #7
  4039d4:	f8c8 5004 	str.w	r5, [r8, #4]
  4039d8:	9227      	str	r2, [sp, #156]	; 0x9c
  4039da:	9326      	str	r3, [sp, #152]	; 0x98
  4039dc:	dc7f      	bgt.n	403ade <_svfprintf_r+0x186>
  4039de:	f108 0808 	add.w	r8, r8, #8
  4039e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4039e4:	442b      	add	r3, r5
  4039e6:	9309      	str	r3, [sp, #36]	; 0x24
  4039e8:	7823      	ldrb	r3, [r4, #0]
  4039ea:	2b00      	cmp	r3, #0
  4039ec:	d07f      	beq.n	403aee <_svfprintf_r+0x196>
  4039ee:	2300      	movs	r3, #0
  4039f0:	461a      	mov	r2, r3
  4039f2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4039f6:	4619      	mov	r1, r3
  4039f8:	930d      	str	r3, [sp, #52]	; 0x34
  4039fa:	469b      	mov	fp, r3
  4039fc:	f04f 30ff 	mov.w	r0, #4294967295
  403a00:	7863      	ldrb	r3, [r4, #1]
  403a02:	900a      	str	r0, [sp, #40]	; 0x28
  403a04:	f104 0a01 	add.w	sl, r4, #1
  403a08:	f10a 0a01 	add.w	sl, sl, #1
  403a0c:	f1a3 0020 	sub.w	r0, r3, #32
  403a10:	2858      	cmp	r0, #88	; 0x58
  403a12:	f200 83c1 	bhi.w	404198 <_svfprintf_r+0x840>
  403a16:	e8df f010 	tbh	[pc, r0, lsl #1]
  403a1a:	0238      	.short	0x0238
  403a1c:	03bf03bf 	.word	0x03bf03bf
  403a20:	03bf0240 	.word	0x03bf0240
  403a24:	03bf03bf 	.word	0x03bf03bf
  403a28:	03bf03bf 	.word	0x03bf03bf
  403a2c:	024503bf 	.word	0x024503bf
  403a30:	03bf0203 	.word	0x03bf0203
  403a34:	026b005d 	.word	0x026b005d
  403a38:	028603bf 	.word	0x028603bf
  403a3c:	039d039d 	.word	0x039d039d
  403a40:	039d039d 	.word	0x039d039d
  403a44:	039d039d 	.word	0x039d039d
  403a48:	039d039d 	.word	0x039d039d
  403a4c:	03bf039d 	.word	0x03bf039d
  403a50:	03bf03bf 	.word	0x03bf03bf
  403a54:	03bf03bf 	.word	0x03bf03bf
  403a58:	03bf03bf 	.word	0x03bf03bf
  403a5c:	03bf03bf 	.word	0x03bf03bf
  403a60:	033703bf 	.word	0x033703bf
  403a64:	03bf0357 	.word	0x03bf0357
  403a68:	03bf0357 	.word	0x03bf0357
  403a6c:	03bf03bf 	.word	0x03bf03bf
  403a70:	039803bf 	.word	0x039803bf
  403a74:	03bf03bf 	.word	0x03bf03bf
  403a78:	03bf03ad 	.word	0x03bf03ad
  403a7c:	03bf03bf 	.word	0x03bf03bf
  403a80:	03bf03bf 	.word	0x03bf03bf
  403a84:	03bf0259 	.word	0x03bf0259
  403a88:	031e03bf 	.word	0x031e03bf
  403a8c:	03bf03bf 	.word	0x03bf03bf
  403a90:	03bf03bf 	.word	0x03bf03bf
  403a94:	03bf03bf 	.word	0x03bf03bf
  403a98:	03bf03bf 	.word	0x03bf03bf
  403a9c:	03bf03bf 	.word	0x03bf03bf
  403aa0:	02db02c6 	.word	0x02db02c6
  403aa4:	03570357 	.word	0x03570357
  403aa8:	028b0357 	.word	0x028b0357
  403aac:	03bf02db 	.word	0x03bf02db
  403ab0:	029003bf 	.word	0x029003bf
  403ab4:	029d03bf 	.word	0x029d03bf
  403ab8:	02b401cc 	.word	0x02b401cc
  403abc:	03bf0208 	.word	0x03bf0208
  403ac0:	03bf01e1 	.word	0x03bf01e1
  403ac4:	03bf007e 	.word	0x03bf007e
  403ac8:	020d03bf 	.word	0x020d03bf
  403acc:	980d      	ldr	r0, [sp, #52]	; 0x34
  403ace:	930f      	str	r3, [sp, #60]	; 0x3c
  403ad0:	4240      	negs	r0, r0
  403ad2:	900d      	str	r0, [sp, #52]	; 0x34
  403ad4:	f04b 0b04 	orr.w	fp, fp, #4
  403ad8:	f89a 3000 	ldrb.w	r3, [sl]
  403adc:	e794      	b.n	403a08 <_svfprintf_r+0xb0>
  403ade:	aa25      	add	r2, sp, #148	; 0x94
  403ae0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403ae2:	980c      	ldr	r0, [sp, #48]	; 0x30
  403ae4:	f003 f89a 	bl	406c1c <__ssprint_r>
  403ae8:	b940      	cbnz	r0, 403afc <_svfprintf_r+0x1a4>
  403aea:	46c8      	mov	r8, r9
  403aec:	e779      	b.n	4039e2 <_svfprintf_r+0x8a>
  403aee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403af0:	b123      	cbz	r3, 403afc <_svfprintf_r+0x1a4>
  403af2:	980c      	ldr	r0, [sp, #48]	; 0x30
  403af4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403af6:	aa25      	add	r2, sp, #148	; 0x94
  403af8:	f003 f890 	bl	406c1c <__ssprint_r>
  403afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403afe:	899b      	ldrh	r3, [r3, #12]
  403b00:	f013 0f40 	tst.w	r3, #64	; 0x40
  403b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403b06:	bf18      	it	ne
  403b08:	f04f 33ff 	movne.w	r3, #4294967295
  403b0c:	9309      	str	r3, [sp, #36]	; 0x24
  403b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
  403b10:	b043      	add	sp, #268	; 0x10c
  403b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b16:	f01b 0f20 	tst.w	fp, #32
  403b1a:	9311      	str	r3, [sp, #68]	; 0x44
  403b1c:	f040 81dd 	bne.w	403eda <_svfprintf_r+0x582>
  403b20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403b22:	f01b 0f10 	tst.w	fp, #16
  403b26:	4613      	mov	r3, r2
  403b28:	f040 856e 	bne.w	404608 <_svfprintf_r+0xcb0>
  403b2c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403b30:	f000 856a 	beq.w	404608 <_svfprintf_r+0xcb0>
  403b34:	8814      	ldrh	r4, [r2, #0]
  403b36:	3204      	adds	r2, #4
  403b38:	2500      	movs	r5, #0
  403b3a:	2301      	movs	r3, #1
  403b3c:	920f      	str	r2, [sp, #60]	; 0x3c
  403b3e:	2700      	movs	r7, #0
  403b40:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403b44:	990a      	ldr	r1, [sp, #40]	; 0x28
  403b46:	1c4a      	adds	r2, r1, #1
  403b48:	f000 8265 	beq.w	404016 <_svfprintf_r+0x6be>
  403b4c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403b50:	9207      	str	r2, [sp, #28]
  403b52:	ea54 0205 	orrs.w	r2, r4, r5
  403b56:	f040 8264 	bne.w	404022 <_svfprintf_r+0x6ca>
  403b5a:	2900      	cmp	r1, #0
  403b5c:	f040 843c 	bne.w	4043d8 <_svfprintf_r+0xa80>
  403b60:	2b00      	cmp	r3, #0
  403b62:	f040 84d7 	bne.w	404514 <_svfprintf_r+0xbbc>
  403b66:	f01b 0301 	ands.w	r3, fp, #1
  403b6a:	930e      	str	r3, [sp, #56]	; 0x38
  403b6c:	f000 8604 	beq.w	404778 <_svfprintf_r+0xe20>
  403b70:	ae42      	add	r6, sp, #264	; 0x108
  403b72:	2330      	movs	r3, #48	; 0x30
  403b74:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403b7c:	4293      	cmp	r3, r2
  403b7e:	bfb8      	it	lt
  403b80:	4613      	movlt	r3, r2
  403b82:	9308      	str	r3, [sp, #32]
  403b84:	2300      	movs	r3, #0
  403b86:	9312      	str	r3, [sp, #72]	; 0x48
  403b88:	b117      	cbz	r7, 403b90 <_svfprintf_r+0x238>
  403b8a:	9b08      	ldr	r3, [sp, #32]
  403b8c:	3301      	adds	r3, #1
  403b8e:	9308      	str	r3, [sp, #32]
  403b90:	9b07      	ldr	r3, [sp, #28]
  403b92:	f013 0302 	ands.w	r3, r3, #2
  403b96:	9310      	str	r3, [sp, #64]	; 0x40
  403b98:	d002      	beq.n	403ba0 <_svfprintf_r+0x248>
  403b9a:	9b08      	ldr	r3, [sp, #32]
  403b9c:	3302      	adds	r3, #2
  403b9e:	9308      	str	r3, [sp, #32]
  403ba0:	9b07      	ldr	r3, [sp, #28]
  403ba2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403ba6:	f040 830e 	bne.w	4041c6 <_svfprintf_r+0x86e>
  403baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403bac:	9a08      	ldr	r2, [sp, #32]
  403bae:	eba3 0b02 	sub.w	fp, r3, r2
  403bb2:	f1bb 0f00 	cmp.w	fp, #0
  403bb6:	f340 8306 	ble.w	4041c6 <_svfprintf_r+0x86e>
  403bba:	f1bb 0f10 	cmp.w	fp, #16
  403bbe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403bc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403bc2:	dd29      	ble.n	403c18 <_svfprintf_r+0x2c0>
  403bc4:	4643      	mov	r3, r8
  403bc6:	4621      	mov	r1, r4
  403bc8:	46a8      	mov	r8, r5
  403bca:	2710      	movs	r7, #16
  403bcc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403bce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403bd0:	e006      	b.n	403be0 <_svfprintf_r+0x288>
  403bd2:	f1ab 0b10 	sub.w	fp, fp, #16
  403bd6:	f1bb 0f10 	cmp.w	fp, #16
  403bda:	f103 0308 	add.w	r3, r3, #8
  403bde:	dd18      	ble.n	403c12 <_svfprintf_r+0x2ba>
  403be0:	3201      	adds	r2, #1
  403be2:	48b7      	ldr	r0, [pc, #732]	; (403ec0 <_svfprintf_r+0x568>)
  403be4:	9226      	str	r2, [sp, #152]	; 0x98
  403be6:	3110      	adds	r1, #16
  403be8:	2a07      	cmp	r2, #7
  403bea:	9127      	str	r1, [sp, #156]	; 0x9c
  403bec:	e883 0081 	stmia.w	r3, {r0, r7}
  403bf0:	ddef      	ble.n	403bd2 <_svfprintf_r+0x27a>
  403bf2:	aa25      	add	r2, sp, #148	; 0x94
  403bf4:	4629      	mov	r1, r5
  403bf6:	4620      	mov	r0, r4
  403bf8:	f003 f810 	bl	406c1c <__ssprint_r>
  403bfc:	2800      	cmp	r0, #0
  403bfe:	f47f af7d 	bne.w	403afc <_svfprintf_r+0x1a4>
  403c02:	f1ab 0b10 	sub.w	fp, fp, #16
  403c06:	f1bb 0f10 	cmp.w	fp, #16
  403c0a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403c0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403c0e:	464b      	mov	r3, r9
  403c10:	dce6      	bgt.n	403be0 <_svfprintf_r+0x288>
  403c12:	4645      	mov	r5, r8
  403c14:	460c      	mov	r4, r1
  403c16:	4698      	mov	r8, r3
  403c18:	3201      	adds	r2, #1
  403c1a:	4ba9      	ldr	r3, [pc, #676]	; (403ec0 <_svfprintf_r+0x568>)
  403c1c:	9226      	str	r2, [sp, #152]	; 0x98
  403c1e:	445c      	add	r4, fp
  403c20:	2a07      	cmp	r2, #7
  403c22:	9427      	str	r4, [sp, #156]	; 0x9c
  403c24:	e888 0808 	stmia.w	r8, {r3, fp}
  403c28:	f300 8498 	bgt.w	40455c <_svfprintf_r+0xc04>
  403c2c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403c30:	f108 0808 	add.w	r8, r8, #8
  403c34:	b177      	cbz	r7, 403c54 <_svfprintf_r+0x2fc>
  403c36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403c38:	3301      	adds	r3, #1
  403c3a:	3401      	adds	r4, #1
  403c3c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403c40:	2201      	movs	r2, #1
  403c42:	2b07      	cmp	r3, #7
  403c44:	9427      	str	r4, [sp, #156]	; 0x9c
  403c46:	9326      	str	r3, [sp, #152]	; 0x98
  403c48:	e888 0006 	stmia.w	r8, {r1, r2}
  403c4c:	f300 83db 	bgt.w	404406 <_svfprintf_r+0xaae>
  403c50:	f108 0808 	add.w	r8, r8, #8
  403c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403c56:	b16b      	cbz	r3, 403c74 <_svfprintf_r+0x31c>
  403c58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403c5a:	3301      	adds	r3, #1
  403c5c:	3402      	adds	r4, #2
  403c5e:	a91e      	add	r1, sp, #120	; 0x78
  403c60:	2202      	movs	r2, #2
  403c62:	2b07      	cmp	r3, #7
  403c64:	9427      	str	r4, [sp, #156]	; 0x9c
  403c66:	9326      	str	r3, [sp, #152]	; 0x98
  403c68:	e888 0006 	stmia.w	r8, {r1, r2}
  403c6c:	f300 83d6 	bgt.w	40441c <_svfprintf_r+0xac4>
  403c70:	f108 0808 	add.w	r8, r8, #8
  403c74:	2d80      	cmp	r5, #128	; 0x80
  403c76:	f000 8315 	beq.w	4042a4 <_svfprintf_r+0x94c>
  403c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403c7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403c7e:	1a9f      	subs	r7, r3, r2
  403c80:	2f00      	cmp	r7, #0
  403c82:	dd36      	ble.n	403cf2 <_svfprintf_r+0x39a>
  403c84:	2f10      	cmp	r7, #16
  403c86:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403c88:	4d8e      	ldr	r5, [pc, #568]	; (403ec4 <_svfprintf_r+0x56c>)
  403c8a:	dd27      	ble.n	403cdc <_svfprintf_r+0x384>
  403c8c:	4642      	mov	r2, r8
  403c8e:	4621      	mov	r1, r4
  403c90:	46b0      	mov	r8, r6
  403c92:	f04f 0b10 	mov.w	fp, #16
  403c96:	462e      	mov	r6, r5
  403c98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403c9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403c9c:	e004      	b.n	403ca8 <_svfprintf_r+0x350>
  403c9e:	3f10      	subs	r7, #16
  403ca0:	2f10      	cmp	r7, #16
  403ca2:	f102 0208 	add.w	r2, r2, #8
  403ca6:	dd15      	ble.n	403cd4 <_svfprintf_r+0x37c>
  403ca8:	3301      	adds	r3, #1
  403caa:	3110      	adds	r1, #16
  403cac:	2b07      	cmp	r3, #7
  403cae:	9127      	str	r1, [sp, #156]	; 0x9c
  403cb0:	9326      	str	r3, [sp, #152]	; 0x98
  403cb2:	e882 0840 	stmia.w	r2, {r6, fp}
  403cb6:	ddf2      	ble.n	403c9e <_svfprintf_r+0x346>
  403cb8:	aa25      	add	r2, sp, #148	; 0x94
  403cba:	4629      	mov	r1, r5
  403cbc:	4620      	mov	r0, r4
  403cbe:	f002 ffad 	bl	406c1c <__ssprint_r>
  403cc2:	2800      	cmp	r0, #0
  403cc4:	f47f af1a 	bne.w	403afc <_svfprintf_r+0x1a4>
  403cc8:	3f10      	subs	r7, #16
  403cca:	2f10      	cmp	r7, #16
  403ccc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403cce:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403cd0:	464a      	mov	r2, r9
  403cd2:	dce9      	bgt.n	403ca8 <_svfprintf_r+0x350>
  403cd4:	4635      	mov	r5, r6
  403cd6:	460c      	mov	r4, r1
  403cd8:	4646      	mov	r6, r8
  403cda:	4690      	mov	r8, r2
  403cdc:	3301      	adds	r3, #1
  403cde:	443c      	add	r4, r7
  403ce0:	2b07      	cmp	r3, #7
  403ce2:	9427      	str	r4, [sp, #156]	; 0x9c
  403ce4:	9326      	str	r3, [sp, #152]	; 0x98
  403ce6:	e888 00a0 	stmia.w	r8, {r5, r7}
  403cea:	f300 8381 	bgt.w	4043f0 <_svfprintf_r+0xa98>
  403cee:	f108 0808 	add.w	r8, r8, #8
  403cf2:	9b07      	ldr	r3, [sp, #28]
  403cf4:	05df      	lsls	r7, r3, #23
  403cf6:	f100 8268 	bmi.w	4041ca <_svfprintf_r+0x872>
  403cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403cfc:	990e      	ldr	r1, [sp, #56]	; 0x38
  403cfe:	f8c8 6000 	str.w	r6, [r8]
  403d02:	3301      	adds	r3, #1
  403d04:	440c      	add	r4, r1
  403d06:	2b07      	cmp	r3, #7
  403d08:	9427      	str	r4, [sp, #156]	; 0x9c
  403d0a:	f8c8 1004 	str.w	r1, [r8, #4]
  403d0e:	9326      	str	r3, [sp, #152]	; 0x98
  403d10:	f300 834d 	bgt.w	4043ae <_svfprintf_r+0xa56>
  403d14:	f108 0808 	add.w	r8, r8, #8
  403d18:	9b07      	ldr	r3, [sp, #28]
  403d1a:	075b      	lsls	r3, r3, #29
  403d1c:	d53a      	bpl.n	403d94 <_svfprintf_r+0x43c>
  403d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403d20:	9a08      	ldr	r2, [sp, #32]
  403d22:	1a9d      	subs	r5, r3, r2
  403d24:	2d00      	cmp	r5, #0
  403d26:	dd35      	ble.n	403d94 <_svfprintf_r+0x43c>
  403d28:	2d10      	cmp	r5, #16
  403d2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d2c:	dd20      	ble.n	403d70 <_svfprintf_r+0x418>
  403d2e:	2610      	movs	r6, #16
  403d30:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403d32:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403d36:	e004      	b.n	403d42 <_svfprintf_r+0x3ea>
  403d38:	3d10      	subs	r5, #16
  403d3a:	2d10      	cmp	r5, #16
  403d3c:	f108 0808 	add.w	r8, r8, #8
  403d40:	dd16      	ble.n	403d70 <_svfprintf_r+0x418>
  403d42:	3301      	adds	r3, #1
  403d44:	4a5e      	ldr	r2, [pc, #376]	; (403ec0 <_svfprintf_r+0x568>)
  403d46:	9326      	str	r3, [sp, #152]	; 0x98
  403d48:	3410      	adds	r4, #16
  403d4a:	2b07      	cmp	r3, #7
  403d4c:	9427      	str	r4, [sp, #156]	; 0x9c
  403d4e:	e888 0044 	stmia.w	r8, {r2, r6}
  403d52:	ddf1      	ble.n	403d38 <_svfprintf_r+0x3e0>
  403d54:	aa25      	add	r2, sp, #148	; 0x94
  403d56:	4659      	mov	r1, fp
  403d58:	4638      	mov	r0, r7
  403d5a:	f002 ff5f 	bl	406c1c <__ssprint_r>
  403d5e:	2800      	cmp	r0, #0
  403d60:	f47f aecc 	bne.w	403afc <_svfprintf_r+0x1a4>
  403d64:	3d10      	subs	r5, #16
  403d66:	2d10      	cmp	r5, #16
  403d68:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403d6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d6c:	46c8      	mov	r8, r9
  403d6e:	dce8      	bgt.n	403d42 <_svfprintf_r+0x3ea>
  403d70:	3301      	adds	r3, #1
  403d72:	4a53      	ldr	r2, [pc, #332]	; (403ec0 <_svfprintf_r+0x568>)
  403d74:	9326      	str	r3, [sp, #152]	; 0x98
  403d76:	442c      	add	r4, r5
  403d78:	2b07      	cmp	r3, #7
  403d7a:	9427      	str	r4, [sp, #156]	; 0x9c
  403d7c:	e888 0024 	stmia.w	r8, {r2, r5}
  403d80:	dd08      	ble.n	403d94 <_svfprintf_r+0x43c>
  403d82:	aa25      	add	r2, sp, #148	; 0x94
  403d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403d86:	980c      	ldr	r0, [sp, #48]	; 0x30
  403d88:	f002 ff48 	bl	406c1c <__ssprint_r>
  403d8c:	2800      	cmp	r0, #0
  403d8e:	f47f aeb5 	bne.w	403afc <_svfprintf_r+0x1a4>
  403d92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403d96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403d98:	9908      	ldr	r1, [sp, #32]
  403d9a:	428a      	cmp	r2, r1
  403d9c:	bfac      	ite	ge
  403d9e:	189b      	addge	r3, r3, r2
  403da0:	185b      	addlt	r3, r3, r1
  403da2:	9309      	str	r3, [sp, #36]	; 0x24
  403da4:	2c00      	cmp	r4, #0
  403da6:	f040 830d 	bne.w	4043c4 <_svfprintf_r+0xa6c>
  403daa:	2300      	movs	r3, #0
  403dac:	9326      	str	r3, [sp, #152]	; 0x98
  403dae:	46c8      	mov	r8, r9
  403db0:	e5f9      	b.n	4039a6 <_svfprintf_r+0x4e>
  403db2:	9311      	str	r3, [sp, #68]	; 0x44
  403db4:	f01b 0320 	ands.w	r3, fp, #32
  403db8:	f040 81e3 	bne.w	404182 <_svfprintf_r+0x82a>
  403dbc:	f01b 0210 	ands.w	r2, fp, #16
  403dc0:	f040 842e 	bne.w	404620 <_svfprintf_r+0xcc8>
  403dc4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403dc8:	f000 842a 	beq.w	404620 <_svfprintf_r+0xcc8>
  403dcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403dce:	4613      	mov	r3, r2
  403dd0:	460a      	mov	r2, r1
  403dd2:	3204      	adds	r2, #4
  403dd4:	880c      	ldrh	r4, [r1, #0]
  403dd6:	920f      	str	r2, [sp, #60]	; 0x3c
  403dd8:	2500      	movs	r5, #0
  403dda:	e6b0      	b.n	403b3e <_svfprintf_r+0x1e6>
  403ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403dde:	9311      	str	r3, [sp, #68]	; 0x44
  403de0:	6816      	ldr	r6, [r2, #0]
  403de2:	2400      	movs	r4, #0
  403de4:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403de8:	1d15      	adds	r5, r2, #4
  403dea:	2e00      	cmp	r6, #0
  403dec:	f000 86a7 	beq.w	404b3e <_svfprintf_r+0x11e6>
  403df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403df2:	1c53      	adds	r3, r2, #1
  403df4:	f000 8609 	beq.w	404a0a <_svfprintf_r+0x10b2>
  403df8:	4621      	mov	r1, r4
  403dfa:	4630      	mov	r0, r6
  403dfc:	f002 fa88 	bl	406310 <memchr>
  403e00:	2800      	cmp	r0, #0
  403e02:	f000 86e1 	beq.w	404bc8 <_svfprintf_r+0x1270>
  403e06:	1b83      	subs	r3, r0, r6
  403e08:	930e      	str	r3, [sp, #56]	; 0x38
  403e0a:	940a      	str	r4, [sp, #40]	; 0x28
  403e0c:	950f      	str	r5, [sp, #60]	; 0x3c
  403e0e:	f8cd b01c 	str.w	fp, [sp, #28]
  403e12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403e16:	9308      	str	r3, [sp, #32]
  403e18:	9412      	str	r4, [sp, #72]	; 0x48
  403e1a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403e1e:	e6b3      	b.n	403b88 <_svfprintf_r+0x230>
  403e20:	f89a 3000 	ldrb.w	r3, [sl]
  403e24:	2201      	movs	r2, #1
  403e26:	212b      	movs	r1, #43	; 0x2b
  403e28:	e5ee      	b.n	403a08 <_svfprintf_r+0xb0>
  403e2a:	f04b 0b20 	orr.w	fp, fp, #32
  403e2e:	f89a 3000 	ldrb.w	r3, [sl]
  403e32:	e5e9      	b.n	403a08 <_svfprintf_r+0xb0>
  403e34:	9311      	str	r3, [sp, #68]	; 0x44
  403e36:	2a00      	cmp	r2, #0
  403e38:	f040 8795 	bne.w	404d66 <_svfprintf_r+0x140e>
  403e3c:	4b22      	ldr	r3, [pc, #136]	; (403ec8 <_svfprintf_r+0x570>)
  403e3e:	9318      	str	r3, [sp, #96]	; 0x60
  403e40:	f01b 0f20 	tst.w	fp, #32
  403e44:	f040 8111 	bne.w	40406a <_svfprintf_r+0x712>
  403e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403e4a:	f01b 0f10 	tst.w	fp, #16
  403e4e:	4613      	mov	r3, r2
  403e50:	f040 83e1 	bne.w	404616 <_svfprintf_r+0xcbe>
  403e54:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403e58:	f000 83dd 	beq.w	404616 <_svfprintf_r+0xcbe>
  403e5c:	3304      	adds	r3, #4
  403e5e:	8814      	ldrh	r4, [r2, #0]
  403e60:	930f      	str	r3, [sp, #60]	; 0x3c
  403e62:	2500      	movs	r5, #0
  403e64:	f01b 0f01 	tst.w	fp, #1
  403e68:	f000 810c 	beq.w	404084 <_svfprintf_r+0x72c>
  403e6c:	ea54 0305 	orrs.w	r3, r4, r5
  403e70:	f000 8108 	beq.w	404084 <_svfprintf_r+0x72c>
  403e74:	2330      	movs	r3, #48	; 0x30
  403e76:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403e7a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403e7e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403e82:	f04b 0b02 	orr.w	fp, fp, #2
  403e86:	2302      	movs	r3, #2
  403e88:	e659      	b.n	403b3e <_svfprintf_r+0x1e6>
  403e8a:	f89a 3000 	ldrb.w	r3, [sl]
  403e8e:	2900      	cmp	r1, #0
  403e90:	f47f adba 	bne.w	403a08 <_svfprintf_r+0xb0>
  403e94:	2201      	movs	r2, #1
  403e96:	2120      	movs	r1, #32
  403e98:	e5b6      	b.n	403a08 <_svfprintf_r+0xb0>
  403e9a:	f04b 0b01 	orr.w	fp, fp, #1
  403e9e:	f89a 3000 	ldrb.w	r3, [sl]
  403ea2:	e5b1      	b.n	403a08 <_svfprintf_r+0xb0>
  403ea4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403ea6:	6823      	ldr	r3, [r4, #0]
  403ea8:	930d      	str	r3, [sp, #52]	; 0x34
  403eaa:	4618      	mov	r0, r3
  403eac:	2800      	cmp	r0, #0
  403eae:	4623      	mov	r3, r4
  403eb0:	f103 0304 	add.w	r3, r3, #4
  403eb4:	f6ff ae0a 	blt.w	403acc <_svfprintf_r+0x174>
  403eb8:	930f      	str	r3, [sp, #60]	; 0x3c
  403eba:	f89a 3000 	ldrb.w	r3, [sl]
  403ebe:	e5a3      	b.n	403a08 <_svfprintf_r+0xb0>
  403ec0:	00408810 	.word	0x00408810
  403ec4:	00408820 	.word	0x00408820
  403ec8:	004087f0 	.word	0x004087f0
  403ecc:	f04b 0b10 	orr.w	fp, fp, #16
  403ed0:	f01b 0f20 	tst.w	fp, #32
  403ed4:	9311      	str	r3, [sp, #68]	; 0x44
  403ed6:	f43f ae23 	beq.w	403b20 <_svfprintf_r+0x1c8>
  403eda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403edc:	3507      	adds	r5, #7
  403ede:	f025 0307 	bic.w	r3, r5, #7
  403ee2:	f103 0208 	add.w	r2, r3, #8
  403ee6:	e9d3 4500 	ldrd	r4, r5, [r3]
  403eea:	920f      	str	r2, [sp, #60]	; 0x3c
  403eec:	2301      	movs	r3, #1
  403eee:	e626      	b.n	403b3e <_svfprintf_r+0x1e6>
  403ef0:	f89a 3000 	ldrb.w	r3, [sl]
  403ef4:	2b2a      	cmp	r3, #42	; 0x2a
  403ef6:	f10a 0401 	add.w	r4, sl, #1
  403efa:	f000 8727 	beq.w	404d4c <_svfprintf_r+0x13f4>
  403efe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403f02:	2809      	cmp	r0, #9
  403f04:	46a2      	mov	sl, r4
  403f06:	f200 86ad 	bhi.w	404c64 <_svfprintf_r+0x130c>
  403f0a:	2300      	movs	r3, #0
  403f0c:	461c      	mov	r4, r3
  403f0e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403f12:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403f16:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403f1a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403f1e:	2809      	cmp	r0, #9
  403f20:	d9f5      	bls.n	403f0e <_svfprintf_r+0x5b6>
  403f22:	940a      	str	r4, [sp, #40]	; 0x28
  403f24:	e572      	b.n	403a0c <_svfprintf_r+0xb4>
  403f26:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403f2a:	f89a 3000 	ldrb.w	r3, [sl]
  403f2e:	e56b      	b.n	403a08 <_svfprintf_r+0xb0>
  403f30:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403f34:	f89a 3000 	ldrb.w	r3, [sl]
  403f38:	e566      	b.n	403a08 <_svfprintf_r+0xb0>
  403f3a:	f89a 3000 	ldrb.w	r3, [sl]
  403f3e:	2b6c      	cmp	r3, #108	; 0x6c
  403f40:	bf03      	ittte	eq
  403f42:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403f46:	f04b 0b20 	orreq.w	fp, fp, #32
  403f4a:	f10a 0a01 	addeq.w	sl, sl, #1
  403f4e:	f04b 0b10 	orrne.w	fp, fp, #16
  403f52:	e559      	b.n	403a08 <_svfprintf_r+0xb0>
  403f54:	2a00      	cmp	r2, #0
  403f56:	f040 8711 	bne.w	404d7c <_svfprintf_r+0x1424>
  403f5a:	f01b 0f20 	tst.w	fp, #32
  403f5e:	f040 84f9 	bne.w	404954 <_svfprintf_r+0xffc>
  403f62:	f01b 0f10 	tst.w	fp, #16
  403f66:	f040 84ac 	bne.w	4048c2 <_svfprintf_r+0xf6a>
  403f6a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403f6e:	f000 84a8 	beq.w	4048c2 <_svfprintf_r+0xf6a>
  403f72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403f74:	6813      	ldr	r3, [r2, #0]
  403f76:	3204      	adds	r2, #4
  403f78:	920f      	str	r2, [sp, #60]	; 0x3c
  403f7a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403f7e:	801a      	strh	r2, [r3, #0]
  403f80:	e511      	b.n	4039a6 <_svfprintf_r+0x4e>
  403f82:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403f84:	4bb3      	ldr	r3, [pc, #716]	; (404254 <_svfprintf_r+0x8fc>)
  403f86:	680c      	ldr	r4, [r1, #0]
  403f88:	9318      	str	r3, [sp, #96]	; 0x60
  403f8a:	2230      	movs	r2, #48	; 0x30
  403f8c:	2378      	movs	r3, #120	; 0x78
  403f8e:	3104      	adds	r1, #4
  403f90:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403f94:	9311      	str	r3, [sp, #68]	; 0x44
  403f96:	f04b 0b02 	orr.w	fp, fp, #2
  403f9a:	910f      	str	r1, [sp, #60]	; 0x3c
  403f9c:	2500      	movs	r5, #0
  403f9e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403fa2:	2302      	movs	r3, #2
  403fa4:	e5cb      	b.n	403b3e <_svfprintf_r+0x1e6>
  403fa6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403fa8:	9311      	str	r3, [sp, #68]	; 0x44
  403faa:	680a      	ldr	r2, [r1, #0]
  403fac:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403fb0:	2300      	movs	r3, #0
  403fb2:	460a      	mov	r2, r1
  403fb4:	461f      	mov	r7, r3
  403fb6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403fba:	3204      	adds	r2, #4
  403fbc:	2301      	movs	r3, #1
  403fbe:	9308      	str	r3, [sp, #32]
  403fc0:	f8cd b01c 	str.w	fp, [sp, #28]
  403fc4:	970a      	str	r7, [sp, #40]	; 0x28
  403fc6:	9712      	str	r7, [sp, #72]	; 0x48
  403fc8:	920f      	str	r2, [sp, #60]	; 0x3c
  403fca:	930e      	str	r3, [sp, #56]	; 0x38
  403fcc:	ae28      	add	r6, sp, #160	; 0xa0
  403fce:	e5df      	b.n	403b90 <_svfprintf_r+0x238>
  403fd0:	9311      	str	r3, [sp, #68]	; 0x44
  403fd2:	2a00      	cmp	r2, #0
  403fd4:	f040 86ea 	bne.w	404dac <_svfprintf_r+0x1454>
  403fd8:	f01b 0f20 	tst.w	fp, #32
  403fdc:	d15d      	bne.n	40409a <_svfprintf_r+0x742>
  403fde:	f01b 0f10 	tst.w	fp, #16
  403fe2:	f040 8308 	bne.w	4045f6 <_svfprintf_r+0xc9e>
  403fe6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403fea:	f000 8304 	beq.w	4045f6 <_svfprintf_r+0xc9e>
  403fee:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403ff0:	f9b1 4000 	ldrsh.w	r4, [r1]
  403ff4:	3104      	adds	r1, #4
  403ff6:	17e5      	asrs	r5, r4, #31
  403ff8:	4622      	mov	r2, r4
  403ffa:	462b      	mov	r3, r5
  403ffc:	910f      	str	r1, [sp, #60]	; 0x3c
  403ffe:	2a00      	cmp	r2, #0
  404000:	f173 0300 	sbcs.w	r3, r3, #0
  404004:	db58      	blt.n	4040b8 <_svfprintf_r+0x760>
  404006:	990a      	ldr	r1, [sp, #40]	; 0x28
  404008:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40400c:	1c4a      	adds	r2, r1, #1
  40400e:	f04f 0301 	mov.w	r3, #1
  404012:	f47f ad9b 	bne.w	403b4c <_svfprintf_r+0x1f4>
  404016:	ea54 0205 	orrs.w	r2, r4, r5
  40401a:	f000 81df 	beq.w	4043dc <_svfprintf_r+0xa84>
  40401e:	f8cd b01c 	str.w	fp, [sp, #28]
  404022:	2b01      	cmp	r3, #1
  404024:	f000 827b 	beq.w	40451e <_svfprintf_r+0xbc6>
  404028:	2b02      	cmp	r3, #2
  40402a:	f040 8206 	bne.w	40443a <_svfprintf_r+0xae2>
  40402e:	9818      	ldr	r0, [sp, #96]	; 0x60
  404030:	464e      	mov	r6, r9
  404032:	0923      	lsrs	r3, r4, #4
  404034:	f004 010f 	and.w	r1, r4, #15
  404038:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40403c:	092a      	lsrs	r2, r5, #4
  40403e:	461c      	mov	r4, r3
  404040:	4615      	mov	r5, r2
  404042:	5c43      	ldrb	r3, [r0, r1]
  404044:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404048:	ea54 0305 	orrs.w	r3, r4, r5
  40404c:	d1f1      	bne.n	404032 <_svfprintf_r+0x6da>
  40404e:	eba9 0306 	sub.w	r3, r9, r6
  404052:	930e      	str	r3, [sp, #56]	; 0x38
  404054:	e590      	b.n	403b78 <_svfprintf_r+0x220>
  404056:	9311      	str	r3, [sp, #68]	; 0x44
  404058:	2a00      	cmp	r2, #0
  40405a:	f040 86a3 	bne.w	404da4 <_svfprintf_r+0x144c>
  40405e:	4b7e      	ldr	r3, [pc, #504]	; (404258 <_svfprintf_r+0x900>)
  404060:	9318      	str	r3, [sp, #96]	; 0x60
  404062:	f01b 0f20 	tst.w	fp, #32
  404066:	f43f aeef 	beq.w	403e48 <_svfprintf_r+0x4f0>
  40406a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40406c:	3507      	adds	r5, #7
  40406e:	f025 0307 	bic.w	r3, r5, #7
  404072:	f103 0208 	add.w	r2, r3, #8
  404076:	f01b 0f01 	tst.w	fp, #1
  40407a:	920f      	str	r2, [sp, #60]	; 0x3c
  40407c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404080:	f47f aef4 	bne.w	403e6c <_svfprintf_r+0x514>
  404084:	2302      	movs	r3, #2
  404086:	e55a      	b.n	403b3e <_svfprintf_r+0x1e6>
  404088:	9311      	str	r3, [sp, #68]	; 0x44
  40408a:	2a00      	cmp	r2, #0
  40408c:	f040 8686 	bne.w	404d9c <_svfprintf_r+0x1444>
  404090:	f04b 0b10 	orr.w	fp, fp, #16
  404094:	f01b 0f20 	tst.w	fp, #32
  404098:	d0a1      	beq.n	403fde <_svfprintf_r+0x686>
  40409a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40409c:	3507      	adds	r5, #7
  40409e:	f025 0507 	bic.w	r5, r5, #7
  4040a2:	e9d5 2300 	ldrd	r2, r3, [r5]
  4040a6:	2a00      	cmp	r2, #0
  4040a8:	f105 0108 	add.w	r1, r5, #8
  4040ac:	461d      	mov	r5, r3
  4040ae:	f173 0300 	sbcs.w	r3, r3, #0
  4040b2:	910f      	str	r1, [sp, #60]	; 0x3c
  4040b4:	4614      	mov	r4, r2
  4040b6:	daa6      	bge.n	404006 <_svfprintf_r+0x6ae>
  4040b8:	272d      	movs	r7, #45	; 0x2d
  4040ba:	4264      	negs	r4, r4
  4040bc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4040c0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4040c4:	2301      	movs	r3, #1
  4040c6:	e53d      	b.n	403b44 <_svfprintf_r+0x1ec>
  4040c8:	9311      	str	r3, [sp, #68]	; 0x44
  4040ca:	2a00      	cmp	r2, #0
  4040cc:	f040 8662 	bne.w	404d94 <_svfprintf_r+0x143c>
  4040d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4040d2:	3507      	adds	r5, #7
  4040d4:	f025 0307 	bic.w	r3, r5, #7
  4040d8:	f103 0208 	add.w	r2, r3, #8
  4040dc:	920f      	str	r2, [sp, #60]	; 0x3c
  4040de:	681a      	ldr	r2, [r3, #0]
  4040e0:	9215      	str	r2, [sp, #84]	; 0x54
  4040e2:	685b      	ldr	r3, [r3, #4]
  4040e4:	9314      	str	r3, [sp, #80]	; 0x50
  4040e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4040e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4040ea:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4040ee:	4628      	mov	r0, r5
  4040f0:	4621      	mov	r1, r4
  4040f2:	f04f 32ff 	mov.w	r2, #4294967295
  4040f6:	4b59      	ldr	r3, [pc, #356]	; (40425c <_svfprintf_r+0x904>)
  4040f8:	f003 fe56 	bl	407da8 <__aeabi_dcmpun>
  4040fc:	2800      	cmp	r0, #0
  4040fe:	f040 834a 	bne.w	404796 <_svfprintf_r+0xe3e>
  404102:	4628      	mov	r0, r5
  404104:	4621      	mov	r1, r4
  404106:	f04f 32ff 	mov.w	r2, #4294967295
  40410a:	4b54      	ldr	r3, [pc, #336]	; (40425c <_svfprintf_r+0x904>)
  40410c:	f003 fe2e 	bl	407d6c <__aeabi_dcmple>
  404110:	2800      	cmp	r0, #0
  404112:	f040 8340 	bne.w	404796 <_svfprintf_r+0xe3e>
  404116:	a815      	add	r0, sp, #84	; 0x54
  404118:	c80d      	ldmia	r0, {r0, r2, r3}
  40411a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40411c:	f003 fe1c 	bl	407d58 <__aeabi_dcmplt>
  404120:	2800      	cmp	r0, #0
  404122:	f040 8530 	bne.w	404b86 <_svfprintf_r+0x122e>
  404126:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40412a:	4e4d      	ldr	r6, [pc, #308]	; (404260 <_svfprintf_r+0x908>)
  40412c:	4b4d      	ldr	r3, [pc, #308]	; (404264 <_svfprintf_r+0x90c>)
  40412e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404132:	9007      	str	r0, [sp, #28]
  404134:	9811      	ldr	r0, [sp, #68]	; 0x44
  404136:	2203      	movs	r2, #3
  404138:	2100      	movs	r1, #0
  40413a:	9208      	str	r2, [sp, #32]
  40413c:	910a      	str	r1, [sp, #40]	; 0x28
  40413e:	2847      	cmp	r0, #71	; 0x47
  404140:	bfd8      	it	le
  404142:	461e      	movle	r6, r3
  404144:	920e      	str	r2, [sp, #56]	; 0x38
  404146:	9112      	str	r1, [sp, #72]	; 0x48
  404148:	e51e      	b.n	403b88 <_svfprintf_r+0x230>
  40414a:	f04b 0b08 	orr.w	fp, fp, #8
  40414e:	f89a 3000 	ldrb.w	r3, [sl]
  404152:	e459      	b.n	403a08 <_svfprintf_r+0xb0>
  404154:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404158:	2300      	movs	r3, #0
  40415a:	461c      	mov	r4, r3
  40415c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404160:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404164:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404168:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40416c:	2809      	cmp	r0, #9
  40416e:	d9f5      	bls.n	40415c <_svfprintf_r+0x804>
  404170:	940d      	str	r4, [sp, #52]	; 0x34
  404172:	e44b      	b.n	403a0c <_svfprintf_r+0xb4>
  404174:	f04b 0b10 	orr.w	fp, fp, #16
  404178:	9311      	str	r3, [sp, #68]	; 0x44
  40417a:	f01b 0320 	ands.w	r3, fp, #32
  40417e:	f43f ae1d 	beq.w	403dbc <_svfprintf_r+0x464>
  404182:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404184:	3507      	adds	r5, #7
  404186:	f025 0307 	bic.w	r3, r5, #7
  40418a:	f103 0208 	add.w	r2, r3, #8
  40418e:	e9d3 4500 	ldrd	r4, r5, [r3]
  404192:	920f      	str	r2, [sp, #60]	; 0x3c
  404194:	2300      	movs	r3, #0
  404196:	e4d2      	b.n	403b3e <_svfprintf_r+0x1e6>
  404198:	9311      	str	r3, [sp, #68]	; 0x44
  40419a:	2a00      	cmp	r2, #0
  40419c:	f040 85e7 	bne.w	404d6e <_svfprintf_r+0x1416>
  4041a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4041a2:	2a00      	cmp	r2, #0
  4041a4:	f43f aca3 	beq.w	403aee <_svfprintf_r+0x196>
  4041a8:	2300      	movs	r3, #0
  4041aa:	2101      	movs	r1, #1
  4041ac:	461f      	mov	r7, r3
  4041ae:	9108      	str	r1, [sp, #32]
  4041b0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4041b4:	f8cd b01c 	str.w	fp, [sp, #28]
  4041b8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4041bc:	930a      	str	r3, [sp, #40]	; 0x28
  4041be:	9312      	str	r3, [sp, #72]	; 0x48
  4041c0:	910e      	str	r1, [sp, #56]	; 0x38
  4041c2:	ae28      	add	r6, sp, #160	; 0xa0
  4041c4:	e4e4      	b.n	403b90 <_svfprintf_r+0x238>
  4041c6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041c8:	e534      	b.n	403c34 <_svfprintf_r+0x2dc>
  4041ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4041cc:	2b65      	cmp	r3, #101	; 0x65
  4041ce:	f340 80a7 	ble.w	404320 <_svfprintf_r+0x9c8>
  4041d2:	a815      	add	r0, sp, #84	; 0x54
  4041d4:	c80d      	ldmia	r0, {r0, r2, r3}
  4041d6:	9914      	ldr	r1, [sp, #80]	; 0x50
  4041d8:	f003 fdb4 	bl	407d44 <__aeabi_dcmpeq>
  4041dc:	2800      	cmp	r0, #0
  4041de:	f000 8150 	beq.w	404482 <_svfprintf_r+0xb2a>
  4041e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041e4:	4a20      	ldr	r2, [pc, #128]	; (404268 <_svfprintf_r+0x910>)
  4041e6:	f8c8 2000 	str.w	r2, [r8]
  4041ea:	3301      	adds	r3, #1
  4041ec:	3401      	adds	r4, #1
  4041ee:	2201      	movs	r2, #1
  4041f0:	2b07      	cmp	r3, #7
  4041f2:	9427      	str	r4, [sp, #156]	; 0x9c
  4041f4:	9326      	str	r3, [sp, #152]	; 0x98
  4041f6:	f8c8 2004 	str.w	r2, [r8, #4]
  4041fa:	f300 836a 	bgt.w	4048d2 <_svfprintf_r+0xf7a>
  4041fe:	f108 0808 	add.w	r8, r8, #8
  404202:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404204:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404206:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404208:	4293      	cmp	r3, r2
  40420a:	db03      	blt.n	404214 <_svfprintf_r+0x8bc>
  40420c:	9b07      	ldr	r3, [sp, #28]
  40420e:	07dd      	lsls	r5, r3, #31
  404210:	f57f ad82 	bpl.w	403d18 <_svfprintf_r+0x3c0>
  404214:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404216:	9919      	ldr	r1, [sp, #100]	; 0x64
  404218:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40421a:	f8c8 2000 	str.w	r2, [r8]
  40421e:	3301      	adds	r3, #1
  404220:	440c      	add	r4, r1
  404222:	2b07      	cmp	r3, #7
  404224:	f8c8 1004 	str.w	r1, [r8, #4]
  404228:	9427      	str	r4, [sp, #156]	; 0x9c
  40422a:	9326      	str	r3, [sp, #152]	; 0x98
  40422c:	f300 839e 	bgt.w	40496c <_svfprintf_r+0x1014>
  404230:	f108 0808 	add.w	r8, r8, #8
  404234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404236:	1e5e      	subs	r6, r3, #1
  404238:	2e00      	cmp	r6, #0
  40423a:	f77f ad6d 	ble.w	403d18 <_svfprintf_r+0x3c0>
  40423e:	2e10      	cmp	r6, #16
  404240:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404242:	4d0a      	ldr	r5, [pc, #40]	; (40426c <_svfprintf_r+0x914>)
  404244:	f340 81f5 	ble.w	404632 <_svfprintf_r+0xcda>
  404248:	4622      	mov	r2, r4
  40424a:	2710      	movs	r7, #16
  40424c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404250:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404252:	e013      	b.n	40427c <_svfprintf_r+0x924>
  404254:	004087f0 	.word	0x004087f0
  404258:	004087dc 	.word	0x004087dc
  40425c:	7fefffff 	.word	0x7fefffff
  404260:	004087d0 	.word	0x004087d0
  404264:	004087cc 	.word	0x004087cc
  404268:	0040880c 	.word	0x0040880c
  40426c:	00408820 	.word	0x00408820
  404270:	f108 0808 	add.w	r8, r8, #8
  404274:	3e10      	subs	r6, #16
  404276:	2e10      	cmp	r6, #16
  404278:	f340 81da 	ble.w	404630 <_svfprintf_r+0xcd8>
  40427c:	3301      	adds	r3, #1
  40427e:	3210      	adds	r2, #16
  404280:	2b07      	cmp	r3, #7
  404282:	9227      	str	r2, [sp, #156]	; 0x9c
  404284:	9326      	str	r3, [sp, #152]	; 0x98
  404286:	e888 00a0 	stmia.w	r8, {r5, r7}
  40428a:	ddf1      	ble.n	404270 <_svfprintf_r+0x918>
  40428c:	aa25      	add	r2, sp, #148	; 0x94
  40428e:	4621      	mov	r1, r4
  404290:	4658      	mov	r0, fp
  404292:	f002 fcc3 	bl	406c1c <__ssprint_r>
  404296:	2800      	cmp	r0, #0
  404298:	f47f ac30 	bne.w	403afc <_svfprintf_r+0x1a4>
  40429c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40429e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042a0:	46c8      	mov	r8, r9
  4042a2:	e7e7      	b.n	404274 <_svfprintf_r+0x91c>
  4042a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4042a6:	9a08      	ldr	r2, [sp, #32]
  4042a8:	1a9f      	subs	r7, r3, r2
  4042aa:	2f00      	cmp	r7, #0
  4042ac:	f77f ace5 	ble.w	403c7a <_svfprintf_r+0x322>
  4042b0:	2f10      	cmp	r7, #16
  4042b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042b4:	4db6      	ldr	r5, [pc, #728]	; (404590 <_svfprintf_r+0xc38>)
  4042b6:	dd27      	ble.n	404308 <_svfprintf_r+0x9b0>
  4042b8:	4642      	mov	r2, r8
  4042ba:	4621      	mov	r1, r4
  4042bc:	46b0      	mov	r8, r6
  4042be:	f04f 0b10 	mov.w	fp, #16
  4042c2:	462e      	mov	r6, r5
  4042c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4042c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4042c8:	e004      	b.n	4042d4 <_svfprintf_r+0x97c>
  4042ca:	3f10      	subs	r7, #16
  4042cc:	2f10      	cmp	r7, #16
  4042ce:	f102 0208 	add.w	r2, r2, #8
  4042d2:	dd15      	ble.n	404300 <_svfprintf_r+0x9a8>
  4042d4:	3301      	adds	r3, #1
  4042d6:	3110      	adds	r1, #16
  4042d8:	2b07      	cmp	r3, #7
  4042da:	9127      	str	r1, [sp, #156]	; 0x9c
  4042dc:	9326      	str	r3, [sp, #152]	; 0x98
  4042de:	e882 0840 	stmia.w	r2, {r6, fp}
  4042e2:	ddf2      	ble.n	4042ca <_svfprintf_r+0x972>
  4042e4:	aa25      	add	r2, sp, #148	; 0x94
  4042e6:	4629      	mov	r1, r5
  4042e8:	4620      	mov	r0, r4
  4042ea:	f002 fc97 	bl	406c1c <__ssprint_r>
  4042ee:	2800      	cmp	r0, #0
  4042f0:	f47f ac04 	bne.w	403afc <_svfprintf_r+0x1a4>
  4042f4:	3f10      	subs	r7, #16
  4042f6:	2f10      	cmp	r7, #16
  4042f8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4042fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042fc:	464a      	mov	r2, r9
  4042fe:	dce9      	bgt.n	4042d4 <_svfprintf_r+0x97c>
  404300:	4635      	mov	r5, r6
  404302:	460c      	mov	r4, r1
  404304:	4646      	mov	r6, r8
  404306:	4690      	mov	r8, r2
  404308:	3301      	adds	r3, #1
  40430a:	443c      	add	r4, r7
  40430c:	2b07      	cmp	r3, #7
  40430e:	9427      	str	r4, [sp, #156]	; 0x9c
  404310:	9326      	str	r3, [sp, #152]	; 0x98
  404312:	e888 00a0 	stmia.w	r8, {r5, r7}
  404316:	f300 8232 	bgt.w	40477e <_svfprintf_r+0xe26>
  40431a:	f108 0808 	add.w	r8, r8, #8
  40431e:	e4ac      	b.n	403c7a <_svfprintf_r+0x322>
  404320:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404322:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404324:	2b01      	cmp	r3, #1
  404326:	f340 81fe 	ble.w	404726 <_svfprintf_r+0xdce>
  40432a:	3701      	adds	r7, #1
  40432c:	3401      	adds	r4, #1
  40432e:	2301      	movs	r3, #1
  404330:	2f07      	cmp	r7, #7
  404332:	9427      	str	r4, [sp, #156]	; 0x9c
  404334:	9726      	str	r7, [sp, #152]	; 0x98
  404336:	f8c8 6000 	str.w	r6, [r8]
  40433a:	f8c8 3004 	str.w	r3, [r8, #4]
  40433e:	f300 8203 	bgt.w	404748 <_svfprintf_r+0xdf0>
  404342:	f108 0808 	add.w	r8, r8, #8
  404346:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404348:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40434a:	f8c8 3000 	str.w	r3, [r8]
  40434e:	3701      	adds	r7, #1
  404350:	4414      	add	r4, r2
  404352:	2f07      	cmp	r7, #7
  404354:	9427      	str	r4, [sp, #156]	; 0x9c
  404356:	9726      	str	r7, [sp, #152]	; 0x98
  404358:	f8c8 2004 	str.w	r2, [r8, #4]
  40435c:	f300 8200 	bgt.w	404760 <_svfprintf_r+0xe08>
  404360:	f108 0808 	add.w	r8, r8, #8
  404364:	a815      	add	r0, sp, #84	; 0x54
  404366:	c80d      	ldmia	r0, {r0, r2, r3}
  404368:	9914      	ldr	r1, [sp, #80]	; 0x50
  40436a:	f003 fceb 	bl	407d44 <__aeabi_dcmpeq>
  40436e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404370:	2800      	cmp	r0, #0
  404372:	f040 8101 	bne.w	404578 <_svfprintf_r+0xc20>
  404376:	3b01      	subs	r3, #1
  404378:	3701      	adds	r7, #1
  40437a:	3601      	adds	r6, #1
  40437c:	441c      	add	r4, r3
  40437e:	2f07      	cmp	r7, #7
  404380:	9726      	str	r7, [sp, #152]	; 0x98
  404382:	9427      	str	r4, [sp, #156]	; 0x9c
  404384:	f8c8 6000 	str.w	r6, [r8]
  404388:	f8c8 3004 	str.w	r3, [r8, #4]
  40438c:	f300 8127 	bgt.w	4045de <_svfprintf_r+0xc86>
  404390:	f108 0808 	add.w	r8, r8, #8
  404394:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404396:	f8c8 2004 	str.w	r2, [r8, #4]
  40439a:	3701      	adds	r7, #1
  40439c:	4414      	add	r4, r2
  40439e:	ab21      	add	r3, sp, #132	; 0x84
  4043a0:	2f07      	cmp	r7, #7
  4043a2:	9427      	str	r4, [sp, #156]	; 0x9c
  4043a4:	9726      	str	r7, [sp, #152]	; 0x98
  4043a6:	f8c8 3000 	str.w	r3, [r8]
  4043aa:	f77f acb3 	ble.w	403d14 <_svfprintf_r+0x3bc>
  4043ae:	aa25      	add	r2, sp, #148	; 0x94
  4043b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043b2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043b4:	f002 fc32 	bl	406c1c <__ssprint_r>
  4043b8:	2800      	cmp	r0, #0
  4043ba:	f47f ab9f 	bne.w	403afc <_svfprintf_r+0x1a4>
  4043be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043c0:	46c8      	mov	r8, r9
  4043c2:	e4a9      	b.n	403d18 <_svfprintf_r+0x3c0>
  4043c4:	aa25      	add	r2, sp, #148	; 0x94
  4043c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043c8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043ca:	f002 fc27 	bl	406c1c <__ssprint_r>
  4043ce:	2800      	cmp	r0, #0
  4043d0:	f43f aceb 	beq.w	403daa <_svfprintf_r+0x452>
  4043d4:	f7ff bb92 	b.w	403afc <_svfprintf_r+0x1a4>
  4043d8:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4043dc:	2b01      	cmp	r3, #1
  4043de:	f000 8134 	beq.w	40464a <_svfprintf_r+0xcf2>
  4043e2:	2b02      	cmp	r3, #2
  4043e4:	d125      	bne.n	404432 <_svfprintf_r+0xada>
  4043e6:	f8cd b01c 	str.w	fp, [sp, #28]
  4043ea:	2400      	movs	r4, #0
  4043ec:	2500      	movs	r5, #0
  4043ee:	e61e      	b.n	40402e <_svfprintf_r+0x6d6>
  4043f0:	aa25      	add	r2, sp, #148	; 0x94
  4043f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043f4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043f6:	f002 fc11 	bl	406c1c <__ssprint_r>
  4043fa:	2800      	cmp	r0, #0
  4043fc:	f47f ab7e 	bne.w	403afc <_svfprintf_r+0x1a4>
  404400:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404402:	46c8      	mov	r8, r9
  404404:	e475      	b.n	403cf2 <_svfprintf_r+0x39a>
  404406:	aa25      	add	r2, sp, #148	; 0x94
  404408:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40440a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40440c:	f002 fc06 	bl	406c1c <__ssprint_r>
  404410:	2800      	cmp	r0, #0
  404412:	f47f ab73 	bne.w	403afc <_svfprintf_r+0x1a4>
  404416:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404418:	46c8      	mov	r8, r9
  40441a:	e41b      	b.n	403c54 <_svfprintf_r+0x2fc>
  40441c:	aa25      	add	r2, sp, #148	; 0x94
  40441e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404420:	980c      	ldr	r0, [sp, #48]	; 0x30
  404422:	f002 fbfb 	bl	406c1c <__ssprint_r>
  404426:	2800      	cmp	r0, #0
  404428:	f47f ab68 	bne.w	403afc <_svfprintf_r+0x1a4>
  40442c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40442e:	46c8      	mov	r8, r9
  404430:	e420      	b.n	403c74 <_svfprintf_r+0x31c>
  404432:	f8cd b01c 	str.w	fp, [sp, #28]
  404436:	2400      	movs	r4, #0
  404438:	2500      	movs	r5, #0
  40443a:	4649      	mov	r1, r9
  40443c:	e000      	b.n	404440 <_svfprintf_r+0xae8>
  40443e:	4631      	mov	r1, r6
  404440:	08e2      	lsrs	r2, r4, #3
  404442:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404446:	08e8      	lsrs	r0, r5, #3
  404448:	f004 0307 	and.w	r3, r4, #7
  40444c:	4605      	mov	r5, r0
  40444e:	4614      	mov	r4, r2
  404450:	3330      	adds	r3, #48	; 0x30
  404452:	ea54 0205 	orrs.w	r2, r4, r5
  404456:	f801 3c01 	strb.w	r3, [r1, #-1]
  40445a:	f101 36ff 	add.w	r6, r1, #4294967295
  40445e:	d1ee      	bne.n	40443e <_svfprintf_r+0xae6>
  404460:	9a07      	ldr	r2, [sp, #28]
  404462:	07d2      	lsls	r2, r2, #31
  404464:	f57f adf3 	bpl.w	40404e <_svfprintf_r+0x6f6>
  404468:	2b30      	cmp	r3, #48	; 0x30
  40446a:	f43f adf0 	beq.w	40404e <_svfprintf_r+0x6f6>
  40446e:	3902      	subs	r1, #2
  404470:	2330      	movs	r3, #48	; 0x30
  404472:	f806 3c01 	strb.w	r3, [r6, #-1]
  404476:	eba9 0301 	sub.w	r3, r9, r1
  40447a:	930e      	str	r3, [sp, #56]	; 0x38
  40447c:	460e      	mov	r6, r1
  40447e:	f7ff bb7b 	b.w	403b78 <_svfprintf_r+0x220>
  404482:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404484:	2900      	cmp	r1, #0
  404486:	f340 822e 	ble.w	4048e6 <_svfprintf_r+0xf8e>
  40448a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40448c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40448e:	4293      	cmp	r3, r2
  404490:	bfa8      	it	ge
  404492:	4613      	movge	r3, r2
  404494:	2b00      	cmp	r3, #0
  404496:	461f      	mov	r7, r3
  404498:	dd0d      	ble.n	4044b6 <_svfprintf_r+0xb5e>
  40449a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40449c:	f8c8 6000 	str.w	r6, [r8]
  4044a0:	3301      	adds	r3, #1
  4044a2:	443c      	add	r4, r7
  4044a4:	2b07      	cmp	r3, #7
  4044a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4044a8:	f8c8 7004 	str.w	r7, [r8, #4]
  4044ac:	9326      	str	r3, [sp, #152]	; 0x98
  4044ae:	f300 831f 	bgt.w	404af0 <_svfprintf_r+0x1198>
  4044b2:	f108 0808 	add.w	r8, r8, #8
  4044b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4044b8:	2f00      	cmp	r7, #0
  4044ba:	bfa8      	it	ge
  4044bc:	1bdb      	subge	r3, r3, r7
  4044be:	2b00      	cmp	r3, #0
  4044c0:	461f      	mov	r7, r3
  4044c2:	f340 80d6 	ble.w	404672 <_svfprintf_r+0xd1a>
  4044c6:	2f10      	cmp	r7, #16
  4044c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4044ca:	4d31      	ldr	r5, [pc, #196]	; (404590 <_svfprintf_r+0xc38>)
  4044cc:	f340 81ed 	ble.w	4048aa <_svfprintf_r+0xf52>
  4044d0:	4642      	mov	r2, r8
  4044d2:	4621      	mov	r1, r4
  4044d4:	46b0      	mov	r8, r6
  4044d6:	f04f 0b10 	mov.w	fp, #16
  4044da:	462e      	mov	r6, r5
  4044dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4044de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4044e0:	e004      	b.n	4044ec <_svfprintf_r+0xb94>
  4044e2:	3208      	adds	r2, #8
  4044e4:	3f10      	subs	r7, #16
  4044e6:	2f10      	cmp	r7, #16
  4044e8:	f340 81db 	ble.w	4048a2 <_svfprintf_r+0xf4a>
  4044ec:	3301      	adds	r3, #1
  4044ee:	3110      	adds	r1, #16
  4044f0:	2b07      	cmp	r3, #7
  4044f2:	9127      	str	r1, [sp, #156]	; 0x9c
  4044f4:	9326      	str	r3, [sp, #152]	; 0x98
  4044f6:	e882 0840 	stmia.w	r2, {r6, fp}
  4044fa:	ddf2      	ble.n	4044e2 <_svfprintf_r+0xb8a>
  4044fc:	aa25      	add	r2, sp, #148	; 0x94
  4044fe:	4629      	mov	r1, r5
  404500:	4620      	mov	r0, r4
  404502:	f002 fb8b 	bl	406c1c <__ssprint_r>
  404506:	2800      	cmp	r0, #0
  404508:	f47f aaf8 	bne.w	403afc <_svfprintf_r+0x1a4>
  40450c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40450e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404510:	464a      	mov	r2, r9
  404512:	e7e7      	b.n	4044e4 <_svfprintf_r+0xb8c>
  404514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404516:	930e      	str	r3, [sp, #56]	; 0x38
  404518:	464e      	mov	r6, r9
  40451a:	f7ff bb2d 	b.w	403b78 <_svfprintf_r+0x220>
  40451e:	2d00      	cmp	r5, #0
  404520:	bf08      	it	eq
  404522:	2c0a      	cmpeq	r4, #10
  404524:	f0c0 808f 	bcc.w	404646 <_svfprintf_r+0xcee>
  404528:	464e      	mov	r6, r9
  40452a:	4620      	mov	r0, r4
  40452c:	4629      	mov	r1, r5
  40452e:	220a      	movs	r2, #10
  404530:	2300      	movs	r3, #0
  404532:	f003 fc77 	bl	407e24 <__aeabi_uldivmod>
  404536:	3230      	adds	r2, #48	; 0x30
  404538:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40453c:	4620      	mov	r0, r4
  40453e:	4629      	mov	r1, r5
  404540:	2300      	movs	r3, #0
  404542:	220a      	movs	r2, #10
  404544:	f003 fc6e 	bl	407e24 <__aeabi_uldivmod>
  404548:	4604      	mov	r4, r0
  40454a:	460d      	mov	r5, r1
  40454c:	ea54 0305 	orrs.w	r3, r4, r5
  404550:	d1eb      	bne.n	40452a <_svfprintf_r+0xbd2>
  404552:	eba9 0306 	sub.w	r3, r9, r6
  404556:	930e      	str	r3, [sp, #56]	; 0x38
  404558:	f7ff bb0e 	b.w	403b78 <_svfprintf_r+0x220>
  40455c:	aa25      	add	r2, sp, #148	; 0x94
  40455e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404560:	980c      	ldr	r0, [sp, #48]	; 0x30
  404562:	f002 fb5b 	bl	406c1c <__ssprint_r>
  404566:	2800      	cmp	r0, #0
  404568:	f47f aac8 	bne.w	403afc <_svfprintf_r+0x1a4>
  40456c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404570:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404572:	46c8      	mov	r8, r9
  404574:	f7ff bb5e 	b.w	403c34 <_svfprintf_r+0x2dc>
  404578:	1e5e      	subs	r6, r3, #1
  40457a:	2e00      	cmp	r6, #0
  40457c:	f77f af0a 	ble.w	404394 <_svfprintf_r+0xa3c>
  404580:	2e10      	cmp	r6, #16
  404582:	4d03      	ldr	r5, [pc, #12]	; (404590 <_svfprintf_r+0xc38>)
  404584:	dd22      	ble.n	4045cc <_svfprintf_r+0xc74>
  404586:	4622      	mov	r2, r4
  404588:	f04f 0b10 	mov.w	fp, #16
  40458c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40458e:	e006      	b.n	40459e <_svfprintf_r+0xc46>
  404590:	00408820 	.word	0x00408820
  404594:	3e10      	subs	r6, #16
  404596:	2e10      	cmp	r6, #16
  404598:	f108 0808 	add.w	r8, r8, #8
  40459c:	dd15      	ble.n	4045ca <_svfprintf_r+0xc72>
  40459e:	3701      	adds	r7, #1
  4045a0:	3210      	adds	r2, #16
  4045a2:	2f07      	cmp	r7, #7
  4045a4:	9227      	str	r2, [sp, #156]	; 0x9c
  4045a6:	9726      	str	r7, [sp, #152]	; 0x98
  4045a8:	e888 0820 	stmia.w	r8, {r5, fp}
  4045ac:	ddf2      	ble.n	404594 <_svfprintf_r+0xc3c>
  4045ae:	aa25      	add	r2, sp, #148	; 0x94
  4045b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045b2:	4620      	mov	r0, r4
  4045b4:	f002 fb32 	bl	406c1c <__ssprint_r>
  4045b8:	2800      	cmp	r0, #0
  4045ba:	f47f aa9f 	bne.w	403afc <_svfprintf_r+0x1a4>
  4045be:	3e10      	subs	r6, #16
  4045c0:	2e10      	cmp	r6, #16
  4045c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4045c4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4045c6:	46c8      	mov	r8, r9
  4045c8:	dce9      	bgt.n	40459e <_svfprintf_r+0xc46>
  4045ca:	4614      	mov	r4, r2
  4045cc:	3701      	adds	r7, #1
  4045ce:	4434      	add	r4, r6
  4045d0:	2f07      	cmp	r7, #7
  4045d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4045d4:	9726      	str	r7, [sp, #152]	; 0x98
  4045d6:	e888 0060 	stmia.w	r8, {r5, r6}
  4045da:	f77f aed9 	ble.w	404390 <_svfprintf_r+0xa38>
  4045de:	aa25      	add	r2, sp, #148	; 0x94
  4045e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045e4:	f002 fb1a 	bl	406c1c <__ssprint_r>
  4045e8:	2800      	cmp	r0, #0
  4045ea:	f47f aa87 	bne.w	403afc <_svfprintf_r+0x1a4>
  4045ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045f0:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4045f2:	46c8      	mov	r8, r9
  4045f4:	e6ce      	b.n	404394 <_svfprintf_r+0xa3c>
  4045f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4045f8:	6814      	ldr	r4, [r2, #0]
  4045fa:	4613      	mov	r3, r2
  4045fc:	3304      	adds	r3, #4
  4045fe:	17e5      	asrs	r5, r4, #31
  404600:	930f      	str	r3, [sp, #60]	; 0x3c
  404602:	4622      	mov	r2, r4
  404604:	462b      	mov	r3, r5
  404606:	e4fa      	b.n	403ffe <_svfprintf_r+0x6a6>
  404608:	3204      	adds	r2, #4
  40460a:	681c      	ldr	r4, [r3, #0]
  40460c:	920f      	str	r2, [sp, #60]	; 0x3c
  40460e:	2301      	movs	r3, #1
  404610:	2500      	movs	r5, #0
  404612:	f7ff ba94 	b.w	403b3e <_svfprintf_r+0x1e6>
  404616:	681c      	ldr	r4, [r3, #0]
  404618:	3304      	adds	r3, #4
  40461a:	930f      	str	r3, [sp, #60]	; 0x3c
  40461c:	2500      	movs	r5, #0
  40461e:	e421      	b.n	403e64 <_svfprintf_r+0x50c>
  404620:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404622:	460a      	mov	r2, r1
  404624:	3204      	adds	r2, #4
  404626:	680c      	ldr	r4, [r1, #0]
  404628:	920f      	str	r2, [sp, #60]	; 0x3c
  40462a:	2500      	movs	r5, #0
  40462c:	f7ff ba87 	b.w	403b3e <_svfprintf_r+0x1e6>
  404630:	4614      	mov	r4, r2
  404632:	3301      	adds	r3, #1
  404634:	4434      	add	r4, r6
  404636:	2b07      	cmp	r3, #7
  404638:	9427      	str	r4, [sp, #156]	; 0x9c
  40463a:	9326      	str	r3, [sp, #152]	; 0x98
  40463c:	e888 0060 	stmia.w	r8, {r5, r6}
  404640:	f77f ab68 	ble.w	403d14 <_svfprintf_r+0x3bc>
  404644:	e6b3      	b.n	4043ae <_svfprintf_r+0xa56>
  404646:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40464a:	f8cd b01c 	str.w	fp, [sp, #28]
  40464e:	ae42      	add	r6, sp, #264	; 0x108
  404650:	3430      	adds	r4, #48	; 0x30
  404652:	2301      	movs	r3, #1
  404654:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404658:	930e      	str	r3, [sp, #56]	; 0x38
  40465a:	f7ff ba8d 	b.w	403b78 <_svfprintf_r+0x220>
  40465e:	aa25      	add	r2, sp, #148	; 0x94
  404660:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404662:	980c      	ldr	r0, [sp, #48]	; 0x30
  404664:	f002 fada 	bl	406c1c <__ssprint_r>
  404668:	2800      	cmp	r0, #0
  40466a:	f47f aa47 	bne.w	403afc <_svfprintf_r+0x1a4>
  40466e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404670:	46c8      	mov	r8, r9
  404672:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404676:	429a      	cmp	r2, r3
  404678:	db44      	blt.n	404704 <_svfprintf_r+0xdac>
  40467a:	9b07      	ldr	r3, [sp, #28]
  40467c:	07d9      	lsls	r1, r3, #31
  40467e:	d441      	bmi.n	404704 <_svfprintf_r+0xdac>
  404680:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404682:	9812      	ldr	r0, [sp, #72]	; 0x48
  404684:	1a9a      	subs	r2, r3, r2
  404686:	1a1d      	subs	r5, r3, r0
  404688:	4295      	cmp	r5, r2
  40468a:	bfa8      	it	ge
  40468c:	4615      	movge	r5, r2
  40468e:	2d00      	cmp	r5, #0
  404690:	dd0e      	ble.n	4046b0 <_svfprintf_r+0xd58>
  404692:	9926      	ldr	r1, [sp, #152]	; 0x98
  404694:	f8c8 5004 	str.w	r5, [r8, #4]
  404698:	3101      	adds	r1, #1
  40469a:	4406      	add	r6, r0
  40469c:	442c      	add	r4, r5
  40469e:	2907      	cmp	r1, #7
  4046a0:	f8c8 6000 	str.w	r6, [r8]
  4046a4:	9427      	str	r4, [sp, #156]	; 0x9c
  4046a6:	9126      	str	r1, [sp, #152]	; 0x98
  4046a8:	f300 823b 	bgt.w	404b22 <_svfprintf_r+0x11ca>
  4046ac:	f108 0808 	add.w	r8, r8, #8
  4046b0:	2d00      	cmp	r5, #0
  4046b2:	bfac      	ite	ge
  4046b4:	1b56      	subge	r6, r2, r5
  4046b6:	4616      	movlt	r6, r2
  4046b8:	2e00      	cmp	r6, #0
  4046ba:	f77f ab2d 	ble.w	403d18 <_svfprintf_r+0x3c0>
  4046be:	2e10      	cmp	r6, #16
  4046c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046c2:	4db0      	ldr	r5, [pc, #704]	; (404984 <_svfprintf_r+0x102c>)
  4046c4:	ddb5      	ble.n	404632 <_svfprintf_r+0xcda>
  4046c6:	4622      	mov	r2, r4
  4046c8:	2710      	movs	r7, #16
  4046ca:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4046ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4046d0:	e004      	b.n	4046dc <_svfprintf_r+0xd84>
  4046d2:	f108 0808 	add.w	r8, r8, #8
  4046d6:	3e10      	subs	r6, #16
  4046d8:	2e10      	cmp	r6, #16
  4046da:	dda9      	ble.n	404630 <_svfprintf_r+0xcd8>
  4046dc:	3301      	adds	r3, #1
  4046de:	3210      	adds	r2, #16
  4046e0:	2b07      	cmp	r3, #7
  4046e2:	9227      	str	r2, [sp, #156]	; 0x9c
  4046e4:	9326      	str	r3, [sp, #152]	; 0x98
  4046e6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4046ea:	ddf2      	ble.n	4046d2 <_svfprintf_r+0xd7a>
  4046ec:	aa25      	add	r2, sp, #148	; 0x94
  4046ee:	4621      	mov	r1, r4
  4046f0:	4658      	mov	r0, fp
  4046f2:	f002 fa93 	bl	406c1c <__ssprint_r>
  4046f6:	2800      	cmp	r0, #0
  4046f8:	f47f aa00 	bne.w	403afc <_svfprintf_r+0x1a4>
  4046fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4046fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404700:	46c8      	mov	r8, r9
  404702:	e7e8      	b.n	4046d6 <_svfprintf_r+0xd7e>
  404704:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404706:	9819      	ldr	r0, [sp, #100]	; 0x64
  404708:	991a      	ldr	r1, [sp, #104]	; 0x68
  40470a:	f8c8 1000 	str.w	r1, [r8]
  40470e:	3301      	adds	r3, #1
  404710:	4404      	add	r4, r0
  404712:	2b07      	cmp	r3, #7
  404714:	9427      	str	r4, [sp, #156]	; 0x9c
  404716:	f8c8 0004 	str.w	r0, [r8, #4]
  40471a:	9326      	str	r3, [sp, #152]	; 0x98
  40471c:	f300 81f5 	bgt.w	404b0a <_svfprintf_r+0x11b2>
  404720:	f108 0808 	add.w	r8, r8, #8
  404724:	e7ac      	b.n	404680 <_svfprintf_r+0xd28>
  404726:	9b07      	ldr	r3, [sp, #28]
  404728:	07da      	lsls	r2, r3, #31
  40472a:	f53f adfe 	bmi.w	40432a <_svfprintf_r+0x9d2>
  40472e:	3701      	adds	r7, #1
  404730:	3401      	adds	r4, #1
  404732:	2301      	movs	r3, #1
  404734:	2f07      	cmp	r7, #7
  404736:	9427      	str	r4, [sp, #156]	; 0x9c
  404738:	9726      	str	r7, [sp, #152]	; 0x98
  40473a:	f8c8 6000 	str.w	r6, [r8]
  40473e:	f8c8 3004 	str.w	r3, [r8, #4]
  404742:	f77f ae25 	ble.w	404390 <_svfprintf_r+0xa38>
  404746:	e74a      	b.n	4045de <_svfprintf_r+0xc86>
  404748:	aa25      	add	r2, sp, #148	; 0x94
  40474a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40474c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40474e:	f002 fa65 	bl	406c1c <__ssprint_r>
  404752:	2800      	cmp	r0, #0
  404754:	f47f a9d2 	bne.w	403afc <_svfprintf_r+0x1a4>
  404758:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40475a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40475c:	46c8      	mov	r8, r9
  40475e:	e5f2      	b.n	404346 <_svfprintf_r+0x9ee>
  404760:	aa25      	add	r2, sp, #148	; 0x94
  404762:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404764:	980c      	ldr	r0, [sp, #48]	; 0x30
  404766:	f002 fa59 	bl	406c1c <__ssprint_r>
  40476a:	2800      	cmp	r0, #0
  40476c:	f47f a9c6 	bne.w	403afc <_svfprintf_r+0x1a4>
  404770:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404772:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404774:	46c8      	mov	r8, r9
  404776:	e5f5      	b.n	404364 <_svfprintf_r+0xa0c>
  404778:	464e      	mov	r6, r9
  40477a:	f7ff b9fd 	b.w	403b78 <_svfprintf_r+0x220>
  40477e:	aa25      	add	r2, sp, #148	; 0x94
  404780:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404782:	980c      	ldr	r0, [sp, #48]	; 0x30
  404784:	f002 fa4a 	bl	406c1c <__ssprint_r>
  404788:	2800      	cmp	r0, #0
  40478a:	f47f a9b7 	bne.w	403afc <_svfprintf_r+0x1a4>
  40478e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404790:	46c8      	mov	r8, r9
  404792:	f7ff ba72 	b.w	403c7a <_svfprintf_r+0x322>
  404796:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404798:	4622      	mov	r2, r4
  40479a:	4620      	mov	r0, r4
  40479c:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40479e:	4623      	mov	r3, r4
  4047a0:	4621      	mov	r1, r4
  4047a2:	f003 fb01 	bl	407da8 <__aeabi_dcmpun>
  4047a6:	2800      	cmp	r0, #0
  4047a8:	f040 8286 	bne.w	404cb8 <_svfprintf_r+0x1360>
  4047ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047ae:	3301      	adds	r3, #1
  4047b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4047b2:	f023 0320 	bic.w	r3, r3, #32
  4047b6:	930e      	str	r3, [sp, #56]	; 0x38
  4047b8:	f000 81e2 	beq.w	404b80 <_svfprintf_r+0x1228>
  4047bc:	2b47      	cmp	r3, #71	; 0x47
  4047be:	f000 811e 	beq.w	4049fe <_svfprintf_r+0x10a6>
  4047c2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4047c6:	9307      	str	r3, [sp, #28]
  4047c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4047ca:	1e1f      	subs	r7, r3, #0
  4047cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4047ce:	9308      	str	r3, [sp, #32]
  4047d0:	bfbb      	ittet	lt
  4047d2:	463b      	movlt	r3, r7
  4047d4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4047d8:	2300      	movge	r3, #0
  4047da:	232d      	movlt	r3, #45	; 0x2d
  4047dc:	9310      	str	r3, [sp, #64]	; 0x40
  4047de:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4047e0:	2b66      	cmp	r3, #102	; 0x66
  4047e2:	f000 81bb 	beq.w	404b5c <_svfprintf_r+0x1204>
  4047e6:	2b46      	cmp	r3, #70	; 0x46
  4047e8:	f000 80df 	beq.w	4049aa <_svfprintf_r+0x1052>
  4047ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4047ee:	9a08      	ldr	r2, [sp, #32]
  4047f0:	2b45      	cmp	r3, #69	; 0x45
  4047f2:	bf0c      	ite	eq
  4047f4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4047f6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4047f8:	a823      	add	r0, sp, #140	; 0x8c
  4047fa:	a920      	add	r1, sp, #128	; 0x80
  4047fc:	bf08      	it	eq
  4047fe:	1c5d      	addeq	r5, r3, #1
  404800:	9004      	str	r0, [sp, #16]
  404802:	9103      	str	r1, [sp, #12]
  404804:	a81f      	add	r0, sp, #124	; 0x7c
  404806:	2102      	movs	r1, #2
  404808:	463b      	mov	r3, r7
  40480a:	9002      	str	r0, [sp, #8]
  40480c:	9501      	str	r5, [sp, #4]
  40480e:	9100      	str	r1, [sp, #0]
  404810:	980c      	ldr	r0, [sp, #48]	; 0x30
  404812:	f000 fb75 	bl	404f00 <_dtoa_r>
  404816:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404818:	2b67      	cmp	r3, #103	; 0x67
  40481a:	4606      	mov	r6, r0
  40481c:	f040 81e0 	bne.w	404be0 <_svfprintf_r+0x1288>
  404820:	f01b 0f01 	tst.w	fp, #1
  404824:	f000 8246 	beq.w	404cb4 <_svfprintf_r+0x135c>
  404828:	1974      	adds	r4, r6, r5
  40482a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40482c:	9808      	ldr	r0, [sp, #32]
  40482e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404830:	4639      	mov	r1, r7
  404832:	f003 fa87 	bl	407d44 <__aeabi_dcmpeq>
  404836:	2800      	cmp	r0, #0
  404838:	f040 8165 	bne.w	404b06 <_svfprintf_r+0x11ae>
  40483c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40483e:	42a3      	cmp	r3, r4
  404840:	d206      	bcs.n	404850 <_svfprintf_r+0xef8>
  404842:	2130      	movs	r1, #48	; 0x30
  404844:	1c5a      	adds	r2, r3, #1
  404846:	9223      	str	r2, [sp, #140]	; 0x8c
  404848:	7019      	strb	r1, [r3, #0]
  40484a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40484c:	429c      	cmp	r4, r3
  40484e:	d8f9      	bhi.n	404844 <_svfprintf_r+0xeec>
  404850:	1b9b      	subs	r3, r3, r6
  404852:	9313      	str	r3, [sp, #76]	; 0x4c
  404854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404856:	2b47      	cmp	r3, #71	; 0x47
  404858:	f000 80e9 	beq.w	404a2e <_svfprintf_r+0x10d6>
  40485c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40485e:	2b65      	cmp	r3, #101	; 0x65
  404860:	f340 81cd 	ble.w	404bfe <_svfprintf_r+0x12a6>
  404864:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404866:	2b66      	cmp	r3, #102	; 0x66
  404868:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40486a:	9312      	str	r3, [sp, #72]	; 0x48
  40486c:	f000 819e 	beq.w	404bac <_svfprintf_r+0x1254>
  404870:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404872:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404874:	4619      	mov	r1, r3
  404876:	4291      	cmp	r1, r2
  404878:	f300 818a 	bgt.w	404b90 <_svfprintf_r+0x1238>
  40487c:	f01b 0f01 	tst.w	fp, #1
  404880:	f040 8213 	bne.w	404caa <_svfprintf_r+0x1352>
  404884:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404888:	9308      	str	r3, [sp, #32]
  40488a:	2367      	movs	r3, #103	; 0x67
  40488c:	920e      	str	r2, [sp, #56]	; 0x38
  40488e:	9311      	str	r3, [sp, #68]	; 0x44
  404890:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404892:	2b00      	cmp	r3, #0
  404894:	f040 80c4 	bne.w	404a20 <_svfprintf_r+0x10c8>
  404898:	930a      	str	r3, [sp, #40]	; 0x28
  40489a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40489e:	f7ff b973 	b.w	403b88 <_svfprintf_r+0x230>
  4048a2:	4635      	mov	r5, r6
  4048a4:	460c      	mov	r4, r1
  4048a6:	4646      	mov	r6, r8
  4048a8:	4690      	mov	r8, r2
  4048aa:	3301      	adds	r3, #1
  4048ac:	443c      	add	r4, r7
  4048ae:	2b07      	cmp	r3, #7
  4048b0:	9427      	str	r4, [sp, #156]	; 0x9c
  4048b2:	9326      	str	r3, [sp, #152]	; 0x98
  4048b4:	e888 00a0 	stmia.w	r8, {r5, r7}
  4048b8:	f73f aed1 	bgt.w	40465e <_svfprintf_r+0xd06>
  4048bc:	f108 0808 	add.w	r8, r8, #8
  4048c0:	e6d7      	b.n	404672 <_svfprintf_r+0xd1a>
  4048c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4048c4:	6813      	ldr	r3, [r2, #0]
  4048c6:	3204      	adds	r2, #4
  4048c8:	920f      	str	r2, [sp, #60]	; 0x3c
  4048ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4048cc:	601a      	str	r2, [r3, #0]
  4048ce:	f7ff b86a 	b.w	4039a6 <_svfprintf_r+0x4e>
  4048d2:	aa25      	add	r2, sp, #148	; 0x94
  4048d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048d8:	f002 f9a0 	bl	406c1c <__ssprint_r>
  4048dc:	2800      	cmp	r0, #0
  4048de:	f47f a90d 	bne.w	403afc <_svfprintf_r+0x1a4>
  4048e2:	46c8      	mov	r8, r9
  4048e4:	e48d      	b.n	404202 <_svfprintf_r+0x8aa>
  4048e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048e8:	4a27      	ldr	r2, [pc, #156]	; (404988 <_svfprintf_r+0x1030>)
  4048ea:	f8c8 2000 	str.w	r2, [r8]
  4048ee:	3301      	adds	r3, #1
  4048f0:	3401      	adds	r4, #1
  4048f2:	2201      	movs	r2, #1
  4048f4:	2b07      	cmp	r3, #7
  4048f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4048f8:	9326      	str	r3, [sp, #152]	; 0x98
  4048fa:	f8c8 2004 	str.w	r2, [r8, #4]
  4048fe:	dc72      	bgt.n	4049e6 <_svfprintf_r+0x108e>
  404900:	f108 0808 	add.w	r8, r8, #8
  404904:	b929      	cbnz	r1, 404912 <_svfprintf_r+0xfba>
  404906:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404908:	b91b      	cbnz	r3, 404912 <_svfprintf_r+0xfba>
  40490a:	9b07      	ldr	r3, [sp, #28]
  40490c:	07d8      	lsls	r0, r3, #31
  40490e:	f57f aa03 	bpl.w	403d18 <_svfprintf_r+0x3c0>
  404912:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404914:	9819      	ldr	r0, [sp, #100]	; 0x64
  404916:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404918:	f8c8 2000 	str.w	r2, [r8]
  40491c:	3301      	adds	r3, #1
  40491e:	4602      	mov	r2, r0
  404920:	4422      	add	r2, r4
  404922:	2b07      	cmp	r3, #7
  404924:	9227      	str	r2, [sp, #156]	; 0x9c
  404926:	f8c8 0004 	str.w	r0, [r8, #4]
  40492a:	9326      	str	r3, [sp, #152]	; 0x98
  40492c:	f300 818d 	bgt.w	404c4a <_svfprintf_r+0x12f2>
  404930:	f108 0808 	add.w	r8, r8, #8
  404934:	2900      	cmp	r1, #0
  404936:	f2c0 8165 	blt.w	404c04 <_svfprintf_r+0x12ac>
  40493a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40493c:	f8c8 6000 	str.w	r6, [r8]
  404940:	3301      	adds	r3, #1
  404942:	188c      	adds	r4, r1, r2
  404944:	2b07      	cmp	r3, #7
  404946:	9427      	str	r4, [sp, #156]	; 0x9c
  404948:	9326      	str	r3, [sp, #152]	; 0x98
  40494a:	f8c8 1004 	str.w	r1, [r8, #4]
  40494e:	f77f a9e1 	ble.w	403d14 <_svfprintf_r+0x3bc>
  404952:	e52c      	b.n	4043ae <_svfprintf_r+0xa56>
  404954:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404956:	9909      	ldr	r1, [sp, #36]	; 0x24
  404958:	6813      	ldr	r3, [r2, #0]
  40495a:	17cd      	asrs	r5, r1, #31
  40495c:	4608      	mov	r0, r1
  40495e:	3204      	adds	r2, #4
  404960:	4629      	mov	r1, r5
  404962:	920f      	str	r2, [sp, #60]	; 0x3c
  404964:	e9c3 0100 	strd	r0, r1, [r3]
  404968:	f7ff b81d 	b.w	4039a6 <_svfprintf_r+0x4e>
  40496c:	aa25      	add	r2, sp, #148	; 0x94
  40496e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404970:	980c      	ldr	r0, [sp, #48]	; 0x30
  404972:	f002 f953 	bl	406c1c <__ssprint_r>
  404976:	2800      	cmp	r0, #0
  404978:	f47f a8c0 	bne.w	403afc <_svfprintf_r+0x1a4>
  40497c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40497e:	46c8      	mov	r8, r9
  404980:	e458      	b.n	404234 <_svfprintf_r+0x8dc>
  404982:	bf00      	nop
  404984:	00408820 	.word	0x00408820
  404988:	0040880c 	.word	0x0040880c
  40498c:	2140      	movs	r1, #64	; 0x40
  40498e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404990:	f001 fa0c 	bl	405dac <_malloc_r>
  404994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404996:	6010      	str	r0, [r2, #0]
  404998:	6110      	str	r0, [r2, #16]
  40499a:	2800      	cmp	r0, #0
  40499c:	f000 81f2 	beq.w	404d84 <_svfprintf_r+0x142c>
  4049a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4049a2:	2340      	movs	r3, #64	; 0x40
  4049a4:	6153      	str	r3, [r2, #20]
  4049a6:	f7fe bfee 	b.w	403986 <_svfprintf_r+0x2e>
  4049aa:	a823      	add	r0, sp, #140	; 0x8c
  4049ac:	a920      	add	r1, sp, #128	; 0x80
  4049ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4049b0:	9004      	str	r0, [sp, #16]
  4049b2:	9103      	str	r1, [sp, #12]
  4049b4:	a81f      	add	r0, sp, #124	; 0x7c
  4049b6:	2103      	movs	r1, #3
  4049b8:	9002      	str	r0, [sp, #8]
  4049ba:	9a08      	ldr	r2, [sp, #32]
  4049bc:	9401      	str	r4, [sp, #4]
  4049be:	463b      	mov	r3, r7
  4049c0:	9100      	str	r1, [sp, #0]
  4049c2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049c4:	f000 fa9c 	bl	404f00 <_dtoa_r>
  4049c8:	4625      	mov	r5, r4
  4049ca:	4606      	mov	r6, r0
  4049cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4049ce:	2b46      	cmp	r3, #70	; 0x46
  4049d0:	eb06 0405 	add.w	r4, r6, r5
  4049d4:	f47f af29 	bne.w	40482a <_svfprintf_r+0xed2>
  4049d8:	7833      	ldrb	r3, [r6, #0]
  4049da:	2b30      	cmp	r3, #48	; 0x30
  4049dc:	f000 8178 	beq.w	404cd0 <_svfprintf_r+0x1378>
  4049e0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4049e2:	442c      	add	r4, r5
  4049e4:	e721      	b.n	40482a <_svfprintf_r+0xed2>
  4049e6:	aa25      	add	r2, sp, #148	; 0x94
  4049e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049ec:	f002 f916 	bl	406c1c <__ssprint_r>
  4049f0:	2800      	cmp	r0, #0
  4049f2:	f47f a883 	bne.w	403afc <_svfprintf_r+0x1a4>
  4049f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4049f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4049fa:	46c8      	mov	r8, r9
  4049fc:	e782      	b.n	404904 <_svfprintf_r+0xfac>
  4049fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a00:	2b00      	cmp	r3, #0
  404a02:	bf08      	it	eq
  404a04:	2301      	moveq	r3, #1
  404a06:	930a      	str	r3, [sp, #40]	; 0x28
  404a08:	e6db      	b.n	4047c2 <_svfprintf_r+0xe6a>
  404a0a:	4630      	mov	r0, r6
  404a0c:	940a      	str	r4, [sp, #40]	; 0x28
  404a0e:	f002 f897 	bl	406b40 <strlen>
  404a12:	950f      	str	r5, [sp, #60]	; 0x3c
  404a14:	900e      	str	r0, [sp, #56]	; 0x38
  404a16:	f8cd b01c 	str.w	fp, [sp, #28]
  404a1a:	4603      	mov	r3, r0
  404a1c:	f7ff b9f9 	b.w	403e12 <_svfprintf_r+0x4ba>
  404a20:	272d      	movs	r7, #45	; 0x2d
  404a22:	2300      	movs	r3, #0
  404a24:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404a28:	930a      	str	r3, [sp, #40]	; 0x28
  404a2a:	f7ff b8ae 	b.w	403b8a <_svfprintf_r+0x232>
  404a2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404a30:	9312      	str	r3, [sp, #72]	; 0x48
  404a32:	461a      	mov	r2, r3
  404a34:	3303      	adds	r3, #3
  404a36:	db04      	blt.n	404a42 <_svfprintf_r+0x10ea>
  404a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a3a:	4619      	mov	r1, r3
  404a3c:	4291      	cmp	r1, r2
  404a3e:	f6bf af17 	bge.w	404870 <_svfprintf_r+0xf18>
  404a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a44:	3b02      	subs	r3, #2
  404a46:	9311      	str	r3, [sp, #68]	; 0x44
  404a48:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404a4c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a52:	3b01      	subs	r3, #1
  404a54:	2b00      	cmp	r3, #0
  404a56:	931f      	str	r3, [sp, #124]	; 0x7c
  404a58:	bfbd      	ittte	lt
  404a5a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404a5c:	f1c3 0301 	rsblt	r3, r3, #1
  404a60:	222d      	movlt	r2, #45	; 0x2d
  404a62:	222b      	movge	r2, #43	; 0x2b
  404a64:	2b09      	cmp	r3, #9
  404a66:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404a6a:	f340 8116 	ble.w	404c9a <_svfprintf_r+0x1342>
  404a6e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404a72:	4620      	mov	r0, r4
  404a74:	4dab      	ldr	r5, [pc, #684]	; (404d24 <_svfprintf_r+0x13cc>)
  404a76:	e000      	b.n	404a7a <_svfprintf_r+0x1122>
  404a78:	4610      	mov	r0, r2
  404a7a:	fb85 1203 	smull	r1, r2, r5, r3
  404a7e:	17d9      	asrs	r1, r3, #31
  404a80:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404a84:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404a88:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404a8c:	3230      	adds	r2, #48	; 0x30
  404a8e:	2909      	cmp	r1, #9
  404a90:	f800 2c01 	strb.w	r2, [r0, #-1]
  404a94:	460b      	mov	r3, r1
  404a96:	f100 32ff 	add.w	r2, r0, #4294967295
  404a9a:	dced      	bgt.n	404a78 <_svfprintf_r+0x1120>
  404a9c:	3330      	adds	r3, #48	; 0x30
  404a9e:	3802      	subs	r0, #2
  404aa0:	b2d9      	uxtb	r1, r3
  404aa2:	4284      	cmp	r4, r0
  404aa4:	f802 1c01 	strb.w	r1, [r2, #-1]
  404aa8:	f240 8165 	bls.w	404d76 <_svfprintf_r+0x141e>
  404aac:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404ab0:	4613      	mov	r3, r2
  404ab2:	e001      	b.n	404ab8 <_svfprintf_r+0x1160>
  404ab4:	f813 1b01 	ldrb.w	r1, [r3], #1
  404ab8:	f800 1b01 	strb.w	r1, [r0], #1
  404abc:	42a3      	cmp	r3, r4
  404abe:	d1f9      	bne.n	404ab4 <_svfprintf_r+0x115c>
  404ac0:	3301      	adds	r3, #1
  404ac2:	1a9b      	subs	r3, r3, r2
  404ac4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404ac8:	4413      	add	r3, r2
  404aca:	aa21      	add	r2, sp, #132	; 0x84
  404acc:	1a9b      	subs	r3, r3, r2
  404ace:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404ad0:	931b      	str	r3, [sp, #108]	; 0x6c
  404ad2:	2a01      	cmp	r2, #1
  404ad4:	4413      	add	r3, r2
  404ad6:	930e      	str	r3, [sp, #56]	; 0x38
  404ad8:	f340 8119 	ble.w	404d0e <_svfprintf_r+0x13b6>
  404adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404ade:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404ae0:	4413      	add	r3, r2
  404ae2:	930e      	str	r3, [sp, #56]	; 0x38
  404ae4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ae8:	9308      	str	r3, [sp, #32]
  404aea:	2300      	movs	r3, #0
  404aec:	9312      	str	r3, [sp, #72]	; 0x48
  404aee:	e6cf      	b.n	404890 <_svfprintf_r+0xf38>
  404af0:	aa25      	add	r2, sp, #148	; 0x94
  404af2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404af4:	980c      	ldr	r0, [sp, #48]	; 0x30
  404af6:	f002 f891 	bl	406c1c <__ssprint_r>
  404afa:	2800      	cmp	r0, #0
  404afc:	f47e affe 	bne.w	403afc <_svfprintf_r+0x1a4>
  404b00:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b02:	46c8      	mov	r8, r9
  404b04:	e4d7      	b.n	4044b6 <_svfprintf_r+0xb5e>
  404b06:	4623      	mov	r3, r4
  404b08:	e6a2      	b.n	404850 <_svfprintf_r+0xef8>
  404b0a:	aa25      	add	r2, sp, #148	; 0x94
  404b0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b0e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b10:	f002 f884 	bl	406c1c <__ssprint_r>
  404b14:	2800      	cmp	r0, #0
  404b16:	f47e aff1 	bne.w	403afc <_svfprintf_r+0x1a4>
  404b1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404b1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b1e:	46c8      	mov	r8, r9
  404b20:	e5ae      	b.n	404680 <_svfprintf_r+0xd28>
  404b22:	aa25      	add	r2, sp, #148	; 0x94
  404b24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b26:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b28:	f002 f878 	bl	406c1c <__ssprint_r>
  404b2c:	2800      	cmp	r0, #0
  404b2e:	f47e afe5 	bne.w	403afc <_svfprintf_r+0x1a4>
  404b32:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404b34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404b36:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b38:	1a9a      	subs	r2, r3, r2
  404b3a:	46c8      	mov	r8, r9
  404b3c:	e5b8      	b.n	4046b0 <_svfprintf_r+0xd58>
  404b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404b40:	9612      	str	r6, [sp, #72]	; 0x48
  404b42:	2b06      	cmp	r3, #6
  404b44:	bf28      	it	cs
  404b46:	2306      	movcs	r3, #6
  404b48:	960a      	str	r6, [sp, #40]	; 0x28
  404b4a:	4637      	mov	r7, r6
  404b4c:	9308      	str	r3, [sp, #32]
  404b4e:	950f      	str	r5, [sp, #60]	; 0x3c
  404b50:	f8cd b01c 	str.w	fp, [sp, #28]
  404b54:	930e      	str	r3, [sp, #56]	; 0x38
  404b56:	4e74      	ldr	r6, [pc, #464]	; (404d28 <_svfprintf_r+0x13d0>)
  404b58:	f7ff b816 	b.w	403b88 <_svfprintf_r+0x230>
  404b5c:	a823      	add	r0, sp, #140	; 0x8c
  404b5e:	a920      	add	r1, sp, #128	; 0x80
  404b60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404b62:	9004      	str	r0, [sp, #16]
  404b64:	9103      	str	r1, [sp, #12]
  404b66:	a81f      	add	r0, sp, #124	; 0x7c
  404b68:	2103      	movs	r1, #3
  404b6a:	9002      	str	r0, [sp, #8]
  404b6c:	9a08      	ldr	r2, [sp, #32]
  404b6e:	9501      	str	r5, [sp, #4]
  404b70:	463b      	mov	r3, r7
  404b72:	9100      	str	r1, [sp, #0]
  404b74:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b76:	f000 f9c3 	bl	404f00 <_dtoa_r>
  404b7a:	4606      	mov	r6, r0
  404b7c:	1944      	adds	r4, r0, r5
  404b7e:	e72b      	b.n	4049d8 <_svfprintf_r+0x1080>
  404b80:	2306      	movs	r3, #6
  404b82:	930a      	str	r3, [sp, #40]	; 0x28
  404b84:	e61d      	b.n	4047c2 <_svfprintf_r+0xe6a>
  404b86:	272d      	movs	r7, #45	; 0x2d
  404b88:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404b8c:	f7ff bacd 	b.w	40412a <_svfprintf_r+0x7d2>
  404b90:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404b92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404b94:	4413      	add	r3, r2
  404b96:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404b98:	930e      	str	r3, [sp, #56]	; 0x38
  404b9a:	2a00      	cmp	r2, #0
  404b9c:	f340 80b0 	ble.w	404d00 <_svfprintf_r+0x13a8>
  404ba0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ba4:	9308      	str	r3, [sp, #32]
  404ba6:	2367      	movs	r3, #103	; 0x67
  404ba8:	9311      	str	r3, [sp, #68]	; 0x44
  404baa:	e671      	b.n	404890 <_svfprintf_r+0xf38>
  404bac:	2b00      	cmp	r3, #0
  404bae:	f340 80c3 	ble.w	404d38 <_svfprintf_r+0x13e0>
  404bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404bb4:	2a00      	cmp	r2, #0
  404bb6:	f040 8099 	bne.w	404cec <_svfprintf_r+0x1394>
  404bba:	f01b 0f01 	tst.w	fp, #1
  404bbe:	f040 8095 	bne.w	404cec <_svfprintf_r+0x1394>
  404bc2:	9308      	str	r3, [sp, #32]
  404bc4:	930e      	str	r3, [sp, #56]	; 0x38
  404bc6:	e663      	b.n	404890 <_svfprintf_r+0xf38>
  404bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404bca:	9308      	str	r3, [sp, #32]
  404bcc:	930e      	str	r3, [sp, #56]	; 0x38
  404bce:	900a      	str	r0, [sp, #40]	; 0x28
  404bd0:	950f      	str	r5, [sp, #60]	; 0x3c
  404bd2:	f8cd b01c 	str.w	fp, [sp, #28]
  404bd6:	9012      	str	r0, [sp, #72]	; 0x48
  404bd8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404bdc:	f7fe bfd4 	b.w	403b88 <_svfprintf_r+0x230>
  404be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404be2:	2b47      	cmp	r3, #71	; 0x47
  404be4:	f47f ae20 	bne.w	404828 <_svfprintf_r+0xed0>
  404be8:	f01b 0f01 	tst.w	fp, #1
  404bec:	f47f aeee 	bne.w	4049cc <_svfprintf_r+0x1074>
  404bf0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404bf2:	1b9b      	subs	r3, r3, r6
  404bf4:	9313      	str	r3, [sp, #76]	; 0x4c
  404bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404bf8:	2b47      	cmp	r3, #71	; 0x47
  404bfa:	f43f af18 	beq.w	404a2e <_svfprintf_r+0x10d6>
  404bfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404c00:	9312      	str	r3, [sp, #72]	; 0x48
  404c02:	e721      	b.n	404a48 <_svfprintf_r+0x10f0>
  404c04:	424f      	negs	r7, r1
  404c06:	3110      	adds	r1, #16
  404c08:	4d48      	ldr	r5, [pc, #288]	; (404d2c <_svfprintf_r+0x13d4>)
  404c0a:	da2f      	bge.n	404c6c <_svfprintf_r+0x1314>
  404c0c:	2410      	movs	r4, #16
  404c0e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404c12:	e004      	b.n	404c1e <_svfprintf_r+0x12c6>
  404c14:	f108 0808 	add.w	r8, r8, #8
  404c18:	3f10      	subs	r7, #16
  404c1a:	2f10      	cmp	r7, #16
  404c1c:	dd26      	ble.n	404c6c <_svfprintf_r+0x1314>
  404c1e:	3301      	adds	r3, #1
  404c20:	3210      	adds	r2, #16
  404c22:	2b07      	cmp	r3, #7
  404c24:	9227      	str	r2, [sp, #156]	; 0x9c
  404c26:	9326      	str	r3, [sp, #152]	; 0x98
  404c28:	f8c8 5000 	str.w	r5, [r8]
  404c2c:	f8c8 4004 	str.w	r4, [r8, #4]
  404c30:	ddf0      	ble.n	404c14 <_svfprintf_r+0x12bc>
  404c32:	aa25      	add	r2, sp, #148	; 0x94
  404c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c36:	4658      	mov	r0, fp
  404c38:	f001 fff0 	bl	406c1c <__ssprint_r>
  404c3c:	2800      	cmp	r0, #0
  404c3e:	f47e af5d 	bne.w	403afc <_svfprintf_r+0x1a4>
  404c42:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404c44:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c46:	46c8      	mov	r8, r9
  404c48:	e7e6      	b.n	404c18 <_svfprintf_r+0x12c0>
  404c4a:	aa25      	add	r2, sp, #148	; 0x94
  404c4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c50:	f001 ffe4 	bl	406c1c <__ssprint_r>
  404c54:	2800      	cmp	r0, #0
  404c56:	f47e af51 	bne.w	403afc <_svfprintf_r+0x1a4>
  404c5a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404c5c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404c5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c60:	46c8      	mov	r8, r9
  404c62:	e667      	b.n	404934 <_svfprintf_r+0xfdc>
  404c64:	2000      	movs	r0, #0
  404c66:	900a      	str	r0, [sp, #40]	; 0x28
  404c68:	f7fe bed0 	b.w	403a0c <_svfprintf_r+0xb4>
  404c6c:	3301      	adds	r3, #1
  404c6e:	443a      	add	r2, r7
  404c70:	2b07      	cmp	r3, #7
  404c72:	e888 00a0 	stmia.w	r8, {r5, r7}
  404c76:	9227      	str	r2, [sp, #156]	; 0x9c
  404c78:	9326      	str	r3, [sp, #152]	; 0x98
  404c7a:	f108 0808 	add.w	r8, r8, #8
  404c7e:	f77f ae5c 	ble.w	40493a <_svfprintf_r+0xfe2>
  404c82:	aa25      	add	r2, sp, #148	; 0x94
  404c84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404c86:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c88:	f001 ffc8 	bl	406c1c <__ssprint_r>
  404c8c:	2800      	cmp	r0, #0
  404c8e:	f47e af35 	bne.w	403afc <_svfprintf_r+0x1a4>
  404c92:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404c94:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c96:	46c8      	mov	r8, r9
  404c98:	e64f      	b.n	40493a <_svfprintf_r+0xfe2>
  404c9a:	3330      	adds	r3, #48	; 0x30
  404c9c:	2230      	movs	r2, #48	; 0x30
  404c9e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404ca2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404ca6:	ab22      	add	r3, sp, #136	; 0x88
  404ca8:	e70f      	b.n	404aca <_svfprintf_r+0x1172>
  404caa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404cac:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404cae:	4413      	add	r3, r2
  404cb0:	930e      	str	r3, [sp, #56]	; 0x38
  404cb2:	e775      	b.n	404ba0 <_svfprintf_r+0x1248>
  404cb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404cb6:	e5cb      	b.n	404850 <_svfprintf_r+0xef8>
  404cb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404cba:	4e1d      	ldr	r6, [pc, #116]	; (404d30 <_svfprintf_r+0x13d8>)
  404cbc:	2b00      	cmp	r3, #0
  404cbe:	bfb6      	itet	lt
  404cc0:	272d      	movlt	r7, #45	; 0x2d
  404cc2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  404cc6:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  404cca:	4b1a      	ldr	r3, [pc, #104]	; (404d34 <_svfprintf_r+0x13dc>)
  404ccc:	f7ff ba2f 	b.w	40412e <_svfprintf_r+0x7d6>
  404cd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404cd2:	9808      	ldr	r0, [sp, #32]
  404cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404cd6:	4639      	mov	r1, r7
  404cd8:	f003 f834 	bl	407d44 <__aeabi_dcmpeq>
  404cdc:	2800      	cmp	r0, #0
  404cde:	f47f ae7f 	bne.w	4049e0 <_svfprintf_r+0x1088>
  404ce2:	f1c5 0501 	rsb	r5, r5, #1
  404ce6:	951f      	str	r5, [sp, #124]	; 0x7c
  404ce8:	442c      	add	r4, r5
  404cea:	e59e      	b.n	40482a <_svfprintf_r+0xed2>
  404cec:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404cee:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404cf0:	4413      	add	r3, r2
  404cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404cf4:	441a      	add	r2, r3
  404cf6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404cfa:	920e      	str	r2, [sp, #56]	; 0x38
  404cfc:	9308      	str	r3, [sp, #32]
  404cfe:	e5c7      	b.n	404890 <_svfprintf_r+0xf38>
  404d00:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404d02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404d04:	f1c3 0301 	rsb	r3, r3, #1
  404d08:	441a      	add	r2, r3
  404d0a:	4613      	mov	r3, r2
  404d0c:	e7d0      	b.n	404cb0 <_svfprintf_r+0x1358>
  404d0e:	f01b 0301 	ands.w	r3, fp, #1
  404d12:	9312      	str	r3, [sp, #72]	; 0x48
  404d14:	f47f aee2 	bne.w	404adc <_svfprintf_r+0x1184>
  404d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404d1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404d1e:	9308      	str	r3, [sp, #32]
  404d20:	e5b6      	b.n	404890 <_svfprintf_r+0xf38>
  404d22:	bf00      	nop
  404d24:	66666667 	.word	0x66666667
  404d28:	00408804 	.word	0x00408804
  404d2c:	00408820 	.word	0x00408820
  404d30:	004087d8 	.word	0x004087d8
  404d34:	004087d4 	.word	0x004087d4
  404d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d3a:	b913      	cbnz	r3, 404d42 <_svfprintf_r+0x13ea>
  404d3c:	f01b 0f01 	tst.w	fp, #1
  404d40:	d002      	beq.n	404d48 <_svfprintf_r+0x13f0>
  404d42:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404d44:	3301      	adds	r3, #1
  404d46:	e7d4      	b.n	404cf2 <_svfprintf_r+0x139a>
  404d48:	2301      	movs	r3, #1
  404d4a:	e73a      	b.n	404bc2 <_svfprintf_r+0x126a>
  404d4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404d4e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404d52:	6828      	ldr	r0, [r5, #0]
  404d54:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404d58:	900a      	str	r0, [sp, #40]	; 0x28
  404d5a:	4628      	mov	r0, r5
  404d5c:	3004      	adds	r0, #4
  404d5e:	46a2      	mov	sl, r4
  404d60:	900f      	str	r0, [sp, #60]	; 0x3c
  404d62:	f7fe be51 	b.w	403a08 <_svfprintf_r+0xb0>
  404d66:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404d6a:	f7ff b867 	b.w	403e3c <_svfprintf_r+0x4e4>
  404d6e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404d72:	f7ff ba15 	b.w	4041a0 <_svfprintf_r+0x848>
  404d76:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  404d7a:	e6a6      	b.n	404aca <_svfprintf_r+0x1172>
  404d7c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404d80:	f7ff b8eb 	b.w	403f5a <_svfprintf_r+0x602>
  404d84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404d86:	230c      	movs	r3, #12
  404d88:	6013      	str	r3, [r2, #0]
  404d8a:	f04f 33ff 	mov.w	r3, #4294967295
  404d8e:	9309      	str	r3, [sp, #36]	; 0x24
  404d90:	f7fe bebd 	b.w	403b0e <_svfprintf_r+0x1b6>
  404d94:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404d98:	f7ff b99a 	b.w	4040d0 <_svfprintf_r+0x778>
  404d9c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404da0:	f7ff b976 	b.w	404090 <_svfprintf_r+0x738>
  404da4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404da8:	f7ff b959 	b.w	40405e <_svfprintf_r+0x706>
  404dac:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404db0:	f7ff b912 	b.w	403fd8 <_svfprintf_r+0x680>

00404db4 <register_fini>:
  404db4:	4b02      	ldr	r3, [pc, #8]	; (404dc0 <register_fini+0xc>)
  404db6:	b113      	cbz	r3, 404dbe <register_fini+0xa>
  404db8:	4802      	ldr	r0, [pc, #8]	; (404dc4 <register_fini+0x10>)
  404dba:	f000 b805 	b.w	404dc8 <atexit>
  404dbe:	4770      	bx	lr
  404dc0:	00000000 	.word	0x00000000
  404dc4:	00405d55 	.word	0x00405d55

00404dc8 <atexit>:
  404dc8:	2300      	movs	r3, #0
  404dca:	4601      	mov	r1, r0
  404dcc:	461a      	mov	r2, r3
  404dce:	4618      	mov	r0, r3
  404dd0:	f001 bfa2 	b.w	406d18 <__register_exitproc>

00404dd4 <quorem>:
  404dd4:	6902      	ldr	r2, [r0, #16]
  404dd6:	690b      	ldr	r3, [r1, #16]
  404dd8:	4293      	cmp	r3, r2
  404dda:	f300 808d 	bgt.w	404ef8 <quorem+0x124>
  404dde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404de2:	f103 38ff 	add.w	r8, r3, #4294967295
  404de6:	f101 0714 	add.w	r7, r1, #20
  404dea:	f100 0b14 	add.w	fp, r0, #20
  404dee:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  404df2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  404df6:	ea4f 0488 	mov.w	r4, r8, lsl #2
  404dfa:	b083      	sub	sp, #12
  404dfc:	3201      	adds	r2, #1
  404dfe:	fbb3 f9f2 	udiv	r9, r3, r2
  404e02:	eb0b 0304 	add.w	r3, fp, r4
  404e06:	9400      	str	r4, [sp, #0]
  404e08:	eb07 0a04 	add.w	sl, r7, r4
  404e0c:	9301      	str	r3, [sp, #4]
  404e0e:	f1b9 0f00 	cmp.w	r9, #0
  404e12:	d039      	beq.n	404e88 <quorem+0xb4>
  404e14:	2500      	movs	r5, #0
  404e16:	462e      	mov	r6, r5
  404e18:	46bc      	mov	ip, r7
  404e1a:	46de      	mov	lr, fp
  404e1c:	f85c 4b04 	ldr.w	r4, [ip], #4
  404e20:	f8de 3000 	ldr.w	r3, [lr]
  404e24:	b2a2      	uxth	r2, r4
  404e26:	fb09 5502 	mla	r5, r9, r2, r5
  404e2a:	0c22      	lsrs	r2, r4, #16
  404e2c:	0c2c      	lsrs	r4, r5, #16
  404e2e:	fb09 4202 	mla	r2, r9, r2, r4
  404e32:	b2ad      	uxth	r5, r5
  404e34:	1b75      	subs	r5, r6, r5
  404e36:	b296      	uxth	r6, r2
  404e38:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  404e3c:	fa15 f383 	uxtah	r3, r5, r3
  404e40:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404e44:	b29b      	uxth	r3, r3
  404e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  404e4a:	45e2      	cmp	sl, ip
  404e4c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404e50:	f84e 3b04 	str.w	r3, [lr], #4
  404e54:	ea4f 4626 	mov.w	r6, r6, asr #16
  404e58:	d2e0      	bcs.n	404e1c <quorem+0x48>
  404e5a:	9b00      	ldr	r3, [sp, #0]
  404e5c:	f85b 3003 	ldr.w	r3, [fp, r3]
  404e60:	b993      	cbnz	r3, 404e88 <quorem+0xb4>
  404e62:	9c01      	ldr	r4, [sp, #4]
  404e64:	1f23      	subs	r3, r4, #4
  404e66:	459b      	cmp	fp, r3
  404e68:	d20c      	bcs.n	404e84 <quorem+0xb0>
  404e6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404e6e:	b94b      	cbnz	r3, 404e84 <quorem+0xb0>
  404e70:	f1a4 0308 	sub.w	r3, r4, #8
  404e74:	e002      	b.n	404e7c <quorem+0xa8>
  404e76:	681a      	ldr	r2, [r3, #0]
  404e78:	3b04      	subs	r3, #4
  404e7a:	b91a      	cbnz	r2, 404e84 <quorem+0xb0>
  404e7c:	459b      	cmp	fp, r3
  404e7e:	f108 38ff 	add.w	r8, r8, #4294967295
  404e82:	d3f8      	bcc.n	404e76 <quorem+0xa2>
  404e84:	f8c0 8010 	str.w	r8, [r0, #16]
  404e88:	4604      	mov	r4, r0
  404e8a:	f001 fd35 	bl	4068f8 <__mcmp>
  404e8e:	2800      	cmp	r0, #0
  404e90:	db2e      	blt.n	404ef0 <quorem+0x11c>
  404e92:	f109 0901 	add.w	r9, r9, #1
  404e96:	465d      	mov	r5, fp
  404e98:	2300      	movs	r3, #0
  404e9a:	f857 1b04 	ldr.w	r1, [r7], #4
  404e9e:	6828      	ldr	r0, [r5, #0]
  404ea0:	b28a      	uxth	r2, r1
  404ea2:	1a9a      	subs	r2, r3, r2
  404ea4:	0c0b      	lsrs	r3, r1, #16
  404ea6:	fa12 f280 	uxtah	r2, r2, r0
  404eaa:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  404eae:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404eb2:	b292      	uxth	r2, r2
  404eb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404eb8:	45ba      	cmp	sl, r7
  404eba:	f845 2b04 	str.w	r2, [r5], #4
  404ebe:	ea4f 4323 	mov.w	r3, r3, asr #16
  404ec2:	d2ea      	bcs.n	404e9a <quorem+0xc6>
  404ec4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  404ec8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404ecc:	b982      	cbnz	r2, 404ef0 <quorem+0x11c>
  404ece:	1f1a      	subs	r2, r3, #4
  404ed0:	4593      	cmp	fp, r2
  404ed2:	d20b      	bcs.n	404eec <quorem+0x118>
  404ed4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404ed8:	b942      	cbnz	r2, 404eec <quorem+0x118>
  404eda:	3b08      	subs	r3, #8
  404edc:	e002      	b.n	404ee4 <quorem+0x110>
  404ede:	681a      	ldr	r2, [r3, #0]
  404ee0:	3b04      	subs	r3, #4
  404ee2:	b91a      	cbnz	r2, 404eec <quorem+0x118>
  404ee4:	459b      	cmp	fp, r3
  404ee6:	f108 38ff 	add.w	r8, r8, #4294967295
  404eea:	d3f8      	bcc.n	404ede <quorem+0x10a>
  404eec:	f8c4 8010 	str.w	r8, [r4, #16]
  404ef0:	4648      	mov	r0, r9
  404ef2:	b003      	add	sp, #12
  404ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ef8:	2000      	movs	r0, #0
  404efa:	4770      	bx	lr
  404efc:	0000      	movs	r0, r0
	...

00404f00 <_dtoa_r>:
  404f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f04:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404f06:	b09b      	sub	sp, #108	; 0x6c
  404f08:	4604      	mov	r4, r0
  404f0a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  404f0c:	4692      	mov	sl, r2
  404f0e:	469b      	mov	fp, r3
  404f10:	b141      	cbz	r1, 404f24 <_dtoa_r+0x24>
  404f12:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404f14:	604a      	str	r2, [r1, #4]
  404f16:	2301      	movs	r3, #1
  404f18:	4093      	lsls	r3, r2
  404f1a:	608b      	str	r3, [r1, #8]
  404f1c:	f001 fb14 	bl	406548 <_Bfree>
  404f20:	2300      	movs	r3, #0
  404f22:	6423      	str	r3, [r4, #64]	; 0x40
  404f24:	f1bb 0f00 	cmp.w	fp, #0
  404f28:	465d      	mov	r5, fp
  404f2a:	db35      	blt.n	404f98 <_dtoa_r+0x98>
  404f2c:	2300      	movs	r3, #0
  404f2e:	6033      	str	r3, [r6, #0]
  404f30:	4b9d      	ldr	r3, [pc, #628]	; (4051a8 <_dtoa_r+0x2a8>)
  404f32:	43ab      	bics	r3, r5
  404f34:	d015      	beq.n	404f62 <_dtoa_r+0x62>
  404f36:	4650      	mov	r0, sl
  404f38:	4659      	mov	r1, fp
  404f3a:	2200      	movs	r2, #0
  404f3c:	2300      	movs	r3, #0
  404f3e:	f002 ff01 	bl	407d44 <__aeabi_dcmpeq>
  404f42:	4680      	mov	r8, r0
  404f44:	2800      	cmp	r0, #0
  404f46:	d02d      	beq.n	404fa4 <_dtoa_r+0xa4>
  404f48:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404f4a:	2301      	movs	r3, #1
  404f4c:	6013      	str	r3, [r2, #0]
  404f4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404f50:	2b00      	cmp	r3, #0
  404f52:	f000 80bd 	beq.w	4050d0 <_dtoa_r+0x1d0>
  404f56:	4895      	ldr	r0, [pc, #596]	; (4051ac <_dtoa_r+0x2ac>)
  404f58:	6018      	str	r0, [r3, #0]
  404f5a:	3801      	subs	r0, #1
  404f5c:	b01b      	add	sp, #108	; 0x6c
  404f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f62:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404f64:	f242 730f 	movw	r3, #9999	; 0x270f
  404f68:	6013      	str	r3, [r2, #0]
  404f6a:	f1ba 0f00 	cmp.w	sl, #0
  404f6e:	d10d      	bne.n	404f8c <_dtoa_r+0x8c>
  404f70:	f3c5 0513 	ubfx	r5, r5, #0, #20
  404f74:	b955      	cbnz	r5, 404f8c <_dtoa_r+0x8c>
  404f76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404f78:	488d      	ldr	r0, [pc, #564]	; (4051b0 <_dtoa_r+0x2b0>)
  404f7a:	2b00      	cmp	r3, #0
  404f7c:	d0ee      	beq.n	404f5c <_dtoa_r+0x5c>
  404f7e:	f100 0308 	add.w	r3, r0, #8
  404f82:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  404f84:	6013      	str	r3, [r2, #0]
  404f86:	b01b      	add	sp, #108	; 0x6c
  404f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404f8e:	4889      	ldr	r0, [pc, #548]	; (4051b4 <_dtoa_r+0x2b4>)
  404f90:	2b00      	cmp	r3, #0
  404f92:	d0e3      	beq.n	404f5c <_dtoa_r+0x5c>
  404f94:	1cc3      	adds	r3, r0, #3
  404f96:	e7f4      	b.n	404f82 <_dtoa_r+0x82>
  404f98:	2301      	movs	r3, #1
  404f9a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  404f9e:	6033      	str	r3, [r6, #0]
  404fa0:	46ab      	mov	fp, r5
  404fa2:	e7c5      	b.n	404f30 <_dtoa_r+0x30>
  404fa4:	aa18      	add	r2, sp, #96	; 0x60
  404fa6:	ab19      	add	r3, sp, #100	; 0x64
  404fa8:	9201      	str	r2, [sp, #4]
  404faa:	9300      	str	r3, [sp, #0]
  404fac:	4652      	mov	r2, sl
  404fae:	465b      	mov	r3, fp
  404fb0:	4620      	mov	r0, r4
  404fb2:	f001 fd41 	bl	406a38 <__d2b>
  404fb6:	0d2b      	lsrs	r3, r5, #20
  404fb8:	4681      	mov	r9, r0
  404fba:	d071      	beq.n	4050a0 <_dtoa_r+0x1a0>
  404fbc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  404fc0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  404fc4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404fc6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  404fca:	4650      	mov	r0, sl
  404fcc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  404fd0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404fd4:	2200      	movs	r2, #0
  404fd6:	4b78      	ldr	r3, [pc, #480]	; (4051b8 <_dtoa_r+0x2b8>)
  404fd8:	f002 fa98 	bl	40750c <__aeabi_dsub>
  404fdc:	a36c      	add	r3, pc, #432	; (adr r3, 405190 <_dtoa_r+0x290>)
  404fde:	e9d3 2300 	ldrd	r2, r3, [r3]
  404fe2:	f002 fc47 	bl	407874 <__aeabi_dmul>
  404fe6:	a36c      	add	r3, pc, #432	; (adr r3, 405198 <_dtoa_r+0x298>)
  404fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
  404fec:	f002 fa90 	bl	407510 <__adddf3>
  404ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404ff4:	4630      	mov	r0, r6
  404ff6:	f002 fbd7 	bl	4077a8 <__aeabi_i2d>
  404ffa:	a369      	add	r3, pc, #420	; (adr r3, 4051a0 <_dtoa_r+0x2a0>)
  404ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
  405000:	f002 fc38 	bl	407874 <__aeabi_dmul>
  405004:	4602      	mov	r2, r0
  405006:	460b      	mov	r3, r1
  405008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40500c:	f002 fa80 	bl	407510 <__adddf3>
  405010:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405014:	f002 fede 	bl	407dd4 <__aeabi_d2iz>
  405018:	2200      	movs	r2, #0
  40501a:	9002      	str	r0, [sp, #8]
  40501c:	2300      	movs	r3, #0
  40501e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405022:	f002 fe99 	bl	407d58 <__aeabi_dcmplt>
  405026:	2800      	cmp	r0, #0
  405028:	f040 8173 	bne.w	405312 <_dtoa_r+0x412>
  40502c:	9d02      	ldr	r5, [sp, #8]
  40502e:	2d16      	cmp	r5, #22
  405030:	f200 815d 	bhi.w	4052ee <_dtoa_r+0x3ee>
  405034:	4b61      	ldr	r3, [pc, #388]	; (4051bc <_dtoa_r+0x2bc>)
  405036:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40503a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40503e:	4652      	mov	r2, sl
  405040:	465b      	mov	r3, fp
  405042:	f002 fea7 	bl	407d94 <__aeabi_dcmpgt>
  405046:	2800      	cmp	r0, #0
  405048:	f000 81c5 	beq.w	4053d6 <_dtoa_r+0x4d6>
  40504c:	1e6b      	subs	r3, r5, #1
  40504e:	9302      	str	r3, [sp, #8]
  405050:	2300      	movs	r3, #0
  405052:	930e      	str	r3, [sp, #56]	; 0x38
  405054:	1bbf      	subs	r7, r7, r6
  405056:	1e7b      	subs	r3, r7, #1
  405058:	9306      	str	r3, [sp, #24]
  40505a:	f100 8154 	bmi.w	405306 <_dtoa_r+0x406>
  40505e:	2300      	movs	r3, #0
  405060:	9308      	str	r3, [sp, #32]
  405062:	9b02      	ldr	r3, [sp, #8]
  405064:	2b00      	cmp	r3, #0
  405066:	f2c0 8145 	blt.w	4052f4 <_dtoa_r+0x3f4>
  40506a:	9a06      	ldr	r2, [sp, #24]
  40506c:	930d      	str	r3, [sp, #52]	; 0x34
  40506e:	4611      	mov	r1, r2
  405070:	4419      	add	r1, r3
  405072:	2300      	movs	r3, #0
  405074:	9106      	str	r1, [sp, #24]
  405076:	930c      	str	r3, [sp, #48]	; 0x30
  405078:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40507a:	2b09      	cmp	r3, #9
  40507c:	d82a      	bhi.n	4050d4 <_dtoa_r+0x1d4>
  40507e:	2b05      	cmp	r3, #5
  405080:	f340 865b 	ble.w	405d3a <_dtoa_r+0xe3a>
  405084:	3b04      	subs	r3, #4
  405086:	9324      	str	r3, [sp, #144]	; 0x90
  405088:	2500      	movs	r5, #0
  40508a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40508c:	3b02      	subs	r3, #2
  40508e:	2b03      	cmp	r3, #3
  405090:	f200 8642 	bhi.w	405d18 <_dtoa_r+0xe18>
  405094:	e8df f013 	tbh	[pc, r3, lsl #1]
  405098:	02c903d4 	.word	0x02c903d4
  40509c:	046103df 	.word	0x046103df
  4050a0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4050a2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4050a4:	443e      	add	r6, r7
  4050a6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4050aa:	2b20      	cmp	r3, #32
  4050ac:	f340 818e 	ble.w	4053cc <_dtoa_r+0x4cc>
  4050b0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4050b4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4050b8:	409d      	lsls	r5, r3
  4050ba:	fa2a f000 	lsr.w	r0, sl, r0
  4050be:	4328      	orrs	r0, r5
  4050c0:	f002 fb62 	bl	407788 <__aeabi_ui2d>
  4050c4:	2301      	movs	r3, #1
  4050c6:	3e01      	subs	r6, #1
  4050c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4050cc:	9314      	str	r3, [sp, #80]	; 0x50
  4050ce:	e781      	b.n	404fd4 <_dtoa_r+0xd4>
  4050d0:	483b      	ldr	r0, [pc, #236]	; (4051c0 <_dtoa_r+0x2c0>)
  4050d2:	e743      	b.n	404f5c <_dtoa_r+0x5c>
  4050d4:	2100      	movs	r1, #0
  4050d6:	6461      	str	r1, [r4, #68]	; 0x44
  4050d8:	4620      	mov	r0, r4
  4050da:	9125      	str	r1, [sp, #148]	; 0x94
  4050dc:	f001 fa0e 	bl	4064fc <_Balloc>
  4050e0:	f04f 33ff 	mov.w	r3, #4294967295
  4050e4:	930a      	str	r3, [sp, #40]	; 0x28
  4050e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4050e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4050ea:	2301      	movs	r3, #1
  4050ec:	9004      	str	r0, [sp, #16]
  4050ee:	6420      	str	r0, [r4, #64]	; 0x40
  4050f0:	9224      	str	r2, [sp, #144]	; 0x90
  4050f2:	930b      	str	r3, [sp, #44]	; 0x2c
  4050f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4050f6:	2b00      	cmp	r3, #0
  4050f8:	f2c0 80d9 	blt.w	4052ae <_dtoa_r+0x3ae>
  4050fc:	9a02      	ldr	r2, [sp, #8]
  4050fe:	2a0e      	cmp	r2, #14
  405100:	f300 80d5 	bgt.w	4052ae <_dtoa_r+0x3ae>
  405104:	4b2d      	ldr	r3, [pc, #180]	; (4051bc <_dtoa_r+0x2bc>)
  405106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40510a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40510e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405112:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405114:	2b00      	cmp	r3, #0
  405116:	f2c0 83ba 	blt.w	40588e <_dtoa_r+0x98e>
  40511a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40511e:	4650      	mov	r0, sl
  405120:	462a      	mov	r2, r5
  405122:	4633      	mov	r3, r6
  405124:	4659      	mov	r1, fp
  405126:	f002 fccf 	bl	407ac8 <__aeabi_ddiv>
  40512a:	f002 fe53 	bl	407dd4 <__aeabi_d2iz>
  40512e:	4680      	mov	r8, r0
  405130:	f002 fb3a 	bl	4077a8 <__aeabi_i2d>
  405134:	462a      	mov	r2, r5
  405136:	4633      	mov	r3, r6
  405138:	f002 fb9c 	bl	407874 <__aeabi_dmul>
  40513c:	460b      	mov	r3, r1
  40513e:	4602      	mov	r2, r0
  405140:	4659      	mov	r1, fp
  405142:	4650      	mov	r0, sl
  405144:	f002 f9e2 	bl	40750c <__aeabi_dsub>
  405148:	9d04      	ldr	r5, [sp, #16]
  40514a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40514e:	702b      	strb	r3, [r5, #0]
  405150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405152:	2b01      	cmp	r3, #1
  405154:	4606      	mov	r6, r0
  405156:	460f      	mov	r7, r1
  405158:	f105 0501 	add.w	r5, r5, #1
  40515c:	d068      	beq.n	405230 <_dtoa_r+0x330>
  40515e:	2200      	movs	r2, #0
  405160:	4b18      	ldr	r3, [pc, #96]	; (4051c4 <_dtoa_r+0x2c4>)
  405162:	f002 fb87 	bl	407874 <__aeabi_dmul>
  405166:	2200      	movs	r2, #0
  405168:	2300      	movs	r3, #0
  40516a:	4606      	mov	r6, r0
  40516c:	460f      	mov	r7, r1
  40516e:	f002 fde9 	bl	407d44 <__aeabi_dcmpeq>
  405172:	2800      	cmp	r0, #0
  405174:	f040 8088 	bne.w	405288 <_dtoa_r+0x388>
  405178:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40517c:	f04f 0a00 	mov.w	sl, #0
  405180:	f8df b040 	ldr.w	fp, [pc, #64]	; 4051c4 <_dtoa_r+0x2c4>
  405184:	940c      	str	r4, [sp, #48]	; 0x30
  405186:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40518a:	e028      	b.n	4051de <_dtoa_r+0x2de>
  40518c:	f3af 8000 	nop.w
  405190:	636f4361 	.word	0x636f4361
  405194:	3fd287a7 	.word	0x3fd287a7
  405198:	8b60c8b3 	.word	0x8b60c8b3
  40519c:	3fc68a28 	.word	0x3fc68a28
  4051a0:	509f79fb 	.word	0x509f79fb
  4051a4:	3fd34413 	.word	0x3fd34413
  4051a8:	7ff00000 	.word	0x7ff00000
  4051ac:	0040880d 	.word	0x0040880d
  4051b0:	00408830 	.word	0x00408830
  4051b4:	0040883c 	.word	0x0040883c
  4051b8:	3ff80000 	.word	0x3ff80000
  4051bc:	00408868 	.word	0x00408868
  4051c0:	0040880c 	.word	0x0040880c
  4051c4:	40240000 	.word	0x40240000
  4051c8:	f002 fb54 	bl	407874 <__aeabi_dmul>
  4051cc:	2200      	movs	r2, #0
  4051ce:	2300      	movs	r3, #0
  4051d0:	4606      	mov	r6, r0
  4051d2:	460f      	mov	r7, r1
  4051d4:	f002 fdb6 	bl	407d44 <__aeabi_dcmpeq>
  4051d8:	2800      	cmp	r0, #0
  4051da:	f040 83c1 	bne.w	405960 <_dtoa_r+0xa60>
  4051de:	4642      	mov	r2, r8
  4051e0:	464b      	mov	r3, r9
  4051e2:	4630      	mov	r0, r6
  4051e4:	4639      	mov	r1, r7
  4051e6:	f002 fc6f 	bl	407ac8 <__aeabi_ddiv>
  4051ea:	f002 fdf3 	bl	407dd4 <__aeabi_d2iz>
  4051ee:	4604      	mov	r4, r0
  4051f0:	f002 fada 	bl	4077a8 <__aeabi_i2d>
  4051f4:	4642      	mov	r2, r8
  4051f6:	464b      	mov	r3, r9
  4051f8:	f002 fb3c 	bl	407874 <__aeabi_dmul>
  4051fc:	4602      	mov	r2, r0
  4051fe:	460b      	mov	r3, r1
  405200:	4630      	mov	r0, r6
  405202:	4639      	mov	r1, r7
  405204:	f002 f982 	bl	40750c <__aeabi_dsub>
  405208:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40520c:	9e04      	ldr	r6, [sp, #16]
  40520e:	f805 eb01 	strb.w	lr, [r5], #1
  405212:	eba5 0e06 	sub.w	lr, r5, r6
  405216:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405218:	45b6      	cmp	lr, r6
  40521a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40521e:	4652      	mov	r2, sl
  405220:	465b      	mov	r3, fp
  405222:	d1d1      	bne.n	4051c8 <_dtoa_r+0x2c8>
  405224:	46a0      	mov	r8, r4
  405226:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40522a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40522c:	4606      	mov	r6, r0
  40522e:	460f      	mov	r7, r1
  405230:	4632      	mov	r2, r6
  405232:	463b      	mov	r3, r7
  405234:	4630      	mov	r0, r6
  405236:	4639      	mov	r1, r7
  405238:	f002 f96a 	bl	407510 <__adddf3>
  40523c:	4606      	mov	r6, r0
  40523e:	460f      	mov	r7, r1
  405240:	4602      	mov	r2, r0
  405242:	460b      	mov	r3, r1
  405244:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405248:	f002 fd86 	bl	407d58 <__aeabi_dcmplt>
  40524c:	b948      	cbnz	r0, 405262 <_dtoa_r+0x362>
  40524e:	4632      	mov	r2, r6
  405250:	463b      	mov	r3, r7
  405252:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405256:	f002 fd75 	bl	407d44 <__aeabi_dcmpeq>
  40525a:	b1a8      	cbz	r0, 405288 <_dtoa_r+0x388>
  40525c:	f018 0f01 	tst.w	r8, #1
  405260:	d012      	beq.n	405288 <_dtoa_r+0x388>
  405262:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405266:	9a04      	ldr	r2, [sp, #16]
  405268:	1e6b      	subs	r3, r5, #1
  40526a:	e004      	b.n	405276 <_dtoa_r+0x376>
  40526c:	429a      	cmp	r2, r3
  40526e:	f000 8401 	beq.w	405a74 <_dtoa_r+0xb74>
  405272:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405276:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40527a:	f103 0501 	add.w	r5, r3, #1
  40527e:	d0f5      	beq.n	40526c <_dtoa_r+0x36c>
  405280:	f108 0801 	add.w	r8, r8, #1
  405284:	f883 8000 	strb.w	r8, [r3]
  405288:	4649      	mov	r1, r9
  40528a:	4620      	mov	r0, r4
  40528c:	f001 f95c 	bl	406548 <_Bfree>
  405290:	2200      	movs	r2, #0
  405292:	9b02      	ldr	r3, [sp, #8]
  405294:	702a      	strb	r2, [r5, #0]
  405296:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405298:	3301      	adds	r3, #1
  40529a:	6013      	str	r3, [r2, #0]
  40529c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40529e:	2b00      	cmp	r3, #0
  4052a0:	f000 839e 	beq.w	4059e0 <_dtoa_r+0xae0>
  4052a4:	9804      	ldr	r0, [sp, #16]
  4052a6:	601d      	str	r5, [r3, #0]
  4052a8:	b01b      	add	sp, #108	; 0x6c
  4052aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4052b0:	2a00      	cmp	r2, #0
  4052b2:	d03e      	beq.n	405332 <_dtoa_r+0x432>
  4052b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4052b6:	2a01      	cmp	r2, #1
  4052b8:	f340 8311 	ble.w	4058de <_dtoa_r+0x9de>
  4052bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4052c0:	1e5f      	subs	r7, r3, #1
  4052c2:	42ba      	cmp	r2, r7
  4052c4:	f2c0 838f 	blt.w	4059e6 <_dtoa_r+0xae6>
  4052c8:	1bd7      	subs	r7, r2, r7
  4052ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052cc:	2b00      	cmp	r3, #0
  4052ce:	f2c0 848b 	blt.w	405be8 <_dtoa_r+0xce8>
  4052d2:	9d08      	ldr	r5, [sp, #32]
  4052d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052d6:	9a08      	ldr	r2, [sp, #32]
  4052d8:	441a      	add	r2, r3
  4052da:	9208      	str	r2, [sp, #32]
  4052dc:	9a06      	ldr	r2, [sp, #24]
  4052de:	2101      	movs	r1, #1
  4052e0:	441a      	add	r2, r3
  4052e2:	4620      	mov	r0, r4
  4052e4:	9206      	str	r2, [sp, #24]
  4052e6:	f001 f9c9 	bl	40667c <__i2b>
  4052ea:	4606      	mov	r6, r0
  4052ec:	e024      	b.n	405338 <_dtoa_r+0x438>
  4052ee:	2301      	movs	r3, #1
  4052f0:	930e      	str	r3, [sp, #56]	; 0x38
  4052f2:	e6af      	b.n	405054 <_dtoa_r+0x154>
  4052f4:	9a08      	ldr	r2, [sp, #32]
  4052f6:	9b02      	ldr	r3, [sp, #8]
  4052f8:	1ad2      	subs	r2, r2, r3
  4052fa:	425b      	negs	r3, r3
  4052fc:	930c      	str	r3, [sp, #48]	; 0x30
  4052fe:	2300      	movs	r3, #0
  405300:	9208      	str	r2, [sp, #32]
  405302:	930d      	str	r3, [sp, #52]	; 0x34
  405304:	e6b8      	b.n	405078 <_dtoa_r+0x178>
  405306:	f1c7 0301 	rsb	r3, r7, #1
  40530a:	9308      	str	r3, [sp, #32]
  40530c:	2300      	movs	r3, #0
  40530e:	9306      	str	r3, [sp, #24]
  405310:	e6a7      	b.n	405062 <_dtoa_r+0x162>
  405312:	9d02      	ldr	r5, [sp, #8]
  405314:	4628      	mov	r0, r5
  405316:	f002 fa47 	bl	4077a8 <__aeabi_i2d>
  40531a:	4602      	mov	r2, r0
  40531c:	460b      	mov	r3, r1
  40531e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405322:	f002 fd0f 	bl	407d44 <__aeabi_dcmpeq>
  405326:	2800      	cmp	r0, #0
  405328:	f47f ae80 	bne.w	40502c <_dtoa_r+0x12c>
  40532c:	1e6b      	subs	r3, r5, #1
  40532e:	9302      	str	r3, [sp, #8]
  405330:	e67c      	b.n	40502c <_dtoa_r+0x12c>
  405332:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405334:	9d08      	ldr	r5, [sp, #32]
  405336:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405338:	2d00      	cmp	r5, #0
  40533a:	dd0c      	ble.n	405356 <_dtoa_r+0x456>
  40533c:	9906      	ldr	r1, [sp, #24]
  40533e:	2900      	cmp	r1, #0
  405340:	460b      	mov	r3, r1
  405342:	dd08      	ble.n	405356 <_dtoa_r+0x456>
  405344:	42a9      	cmp	r1, r5
  405346:	9a08      	ldr	r2, [sp, #32]
  405348:	bfa8      	it	ge
  40534a:	462b      	movge	r3, r5
  40534c:	1ad2      	subs	r2, r2, r3
  40534e:	1aed      	subs	r5, r5, r3
  405350:	1acb      	subs	r3, r1, r3
  405352:	9208      	str	r2, [sp, #32]
  405354:	9306      	str	r3, [sp, #24]
  405356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405358:	b1d3      	cbz	r3, 405390 <_dtoa_r+0x490>
  40535a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40535c:	2b00      	cmp	r3, #0
  40535e:	f000 82b7 	beq.w	4058d0 <_dtoa_r+0x9d0>
  405362:	2f00      	cmp	r7, #0
  405364:	dd10      	ble.n	405388 <_dtoa_r+0x488>
  405366:	4631      	mov	r1, r6
  405368:	463a      	mov	r2, r7
  40536a:	4620      	mov	r0, r4
  40536c:	f001 fa22 	bl	4067b4 <__pow5mult>
  405370:	464a      	mov	r2, r9
  405372:	4601      	mov	r1, r0
  405374:	4606      	mov	r6, r0
  405376:	4620      	mov	r0, r4
  405378:	f001 f98a 	bl	406690 <__multiply>
  40537c:	4649      	mov	r1, r9
  40537e:	4680      	mov	r8, r0
  405380:	4620      	mov	r0, r4
  405382:	f001 f8e1 	bl	406548 <_Bfree>
  405386:	46c1      	mov	r9, r8
  405388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40538a:	1bda      	subs	r2, r3, r7
  40538c:	f040 82a1 	bne.w	4058d2 <_dtoa_r+0x9d2>
  405390:	2101      	movs	r1, #1
  405392:	4620      	mov	r0, r4
  405394:	f001 f972 	bl	40667c <__i2b>
  405398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40539a:	2b00      	cmp	r3, #0
  40539c:	4680      	mov	r8, r0
  40539e:	dd1c      	ble.n	4053da <_dtoa_r+0x4da>
  4053a0:	4601      	mov	r1, r0
  4053a2:	461a      	mov	r2, r3
  4053a4:	4620      	mov	r0, r4
  4053a6:	f001 fa05 	bl	4067b4 <__pow5mult>
  4053aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4053ac:	2b01      	cmp	r3, #1
  4053ae:	4680      	mov	r8, r0
  4053b0:	f340 8254 	ble.w	40585c <_dtoa_r+0x95c>
  4053b4:	2300      	movs	r3, #0
  4053b6:	930c      	str	r3, [sp, #48]	; 0x30
  4053b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4053bc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4053c0:	6918      	ldr	r0, [r3, #16]
  4053c2:	f001 f90b 	bl	4065dc <__hi0bits>
  4053c6:	f1c0 0020 	rsb	r0, r0, #32
  4053ca:	e010      	b.n	4053ee <_dtoa_r+0x4ee>
  4053cc:	f1c3 0520 	rsb	r5, r3, #32
  4053d0:	fa0a f005 	lsl.w	r0, sl, r5
  4053d4:	e674      	b.n	4050c0 <_dtoa_r+0x1c0>
  4053d6:	900e      	str	r0, [sp, #56]	; 0x38
  4053d8:	e63c      	b.n	405054 <_dtoa_r+0x154>
  4053da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4053dc:	2b01      	cmp	r3, #1
  4053de:	f340 8287 	ble.w	4058f0 <_dtoa_r+0x9f0>
  4053e2:	2300      	movs	r3, #0
  4053e4:	930c      	str	r3, [sp, #48]	; 0x30
  4053e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4053e8:	2001      	movs	r0, #1
  4053ea:	2b00      	cmp	r3, #0
  4053ec:	d1e4      	bne.n	4053b8 <_dtoa_r+0x4b8>
  4053ee:	9a06      	ldr	r2, [sp, #24]
  4053f0:	4410      	add	r0, r2
  4053f2:	f010 001f 	ands.w	r0, r0, #31
  4053f6:	f000 80a1 	beq.w	40553c <_dtoa_r+0x63c>
  4053fa:	f1c0 0320 	rsb	r3, r0, #32
  4053fe:	2b04      	cmp	r3, #4
  405400:	f340 849e 	ble.w	405d40 <_dtoa_r+0xe40>
  405404:	9b08      	ldr	r3, [sp, #32]
  405406:	f1c0 001c 	rsb	r0, r0, #28
  40540a:	4403      	add	r3, r0
  40540c:	9308      	str	r3, [sp, #32]
  40540e:	4613      	mov	r3, r2
  405410:	4403      	add	r3, r0
  405412:	4405      	add	r5, r0
  405414:	9306      	str	r3, [sp, #24]
  405416:	9b08      	ldr	r3, [sp, #32]
  405418:	2b00      	cmp	r3, #0
  40541a:	dd05      	ble.n	405428 <_dtoa_r+0x528>
  40541c:	4649      	mov	r1, r9
  40541e:	461a      	mov	r2, r3
  405420:	4620      	mov	r0, r4
  405422:	f001 fa17 	bl	406854 <__lshift>
  405426:	4681      	mov	r9, r0
  405428:	9b06      	ldr	r3, [sp, #24]
  40542a:	2b00      	cmp	r3, #0
  40542c:	dd05      	ble.n	40543a <_dtoa_r+0x53a>
  40542e:	4641      	mov	r1, r8
  405430:	461a      	mov	r2, r3
  405432:	4620      	mov	r0, r4
  405434:	f001 fa0e 	bl	406854 <__lshift>
  405438:	4680      	mov	r8, r0
  40543a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40543c:	2b00      	cmp	r3, #0
  40543e:	f040 8086 	bne.w	40554e <_dtoa_r+0x64e>
  405442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405444:	2b00      	cmp	r3, #0
  405446:	f340 8266 	ble.w	405916 <_dtoa_r+0xa16>
  40544a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40544c:	2b00      	cmp	r3, #0
  40544e:	f000 8098 	beq.w	405582 <_dtoa_r+0x682>
  405452:	2d00      	cmp	r5, #0
  405454:	dd05      	ble.n	405462 <_dtoa_r+0x562>
  405456:	4631      	mov	r1, r6
  405458:	462a      	mov	r2, r5
  40545a:	4620      	mov	r0, r4
  40545c:	f001 f9fa 	bl	406854 <__lshift>
  405460:	4606      	mov	r6, r0
  405462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405464:	2b00      	cmp	r3, #0
  405466:	f040 8337 	bne.w	405ad8 <_dtoa_r+0xbd8>
  40546a:	9606      	str	r6, [sp, #24]
  40546c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40546e:	9a04      	ldr	r2, [sp, #16]
  405470:	f8dd b018 	ldr.w	fp, [sp, #24]
  405474:	3b01      	subs	r3, #1
  405476:	18d3      	adds	r3, r2, r3
  405478:	930b      	str	r3, [sp, #44]	; 0x2c
  40547a:	f00a 0301 	and.w	r3, sl, #1
  40547e:	930c      	str	r3, [sp, #48]	; 0x30
  405480:	4617      	mov	r7, r2
  405482:	46c2      	mov	sl, r8
  405484:	4651      	mov	r1, sl
  405486:	4648      	mov	r0, r9
  405488:	f7ff fca4 	bl	404dd4 <quorem>
  40548c:	4631      	mov	r1, r6
  40548e:	4605      	mov	r5, r0
  405490:	4648      	mov	r0, r9
  405492:	f001 fa31 	bl	4068f8 <__mcmp>
  405496:	465a      	mov	r2, fp
  405498:	900a      	str	r0, [sp, #40]	; 0x28
  40549a:	4651      	mov	r1, sl
  40549c:	4620      	mov	r0, r4
  40549e:	f001 fa47 	bl	406930 <__mdiff>
  4054a2:	68c2      	ldr	r2, [r0, #12]
  4054a4:	4680      	mov	r8, r0
  4054a6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4054aa:	2a00      	cmp	r2, #0
  4054ac:	f040 822b 	bne.w	405906 <_dtoa_r+0xa06>
  4054b0:	4601      	mov	r1, r0
  4054b2:	4648      	mov	r0, r9
  4054b4:	9308      	str	r3, [sp, #32]
  4054b6:	f001 fa1f 	bl	4068f8 <__mcmp>
  4054ba:	4641      	mov	r1, r8
  4054bc:	9006      	str	r0, [sp, #24]
  4054be:	4620      	mov	r0, r4
  4054c0:	f001 f842 	bl	406548 <_Bfree>
  4054c4:	9a06      	ldr	r2, [sp, #24]
  4054c6:	9b08      	ldr	r3, [sp, #32]
  4054c8:	b932      	cbnz	r2, 4054d8 <_dtoa_r+0x5d8>
  4054ca:	9924      	ldr	r1, [sp, #144]	; 0x90
  4054cc:	b921      	cbnz	r1, 4054d8 <_dtoa_r+0x5d8>
  4054ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4054d0:	2a00      	cmp	r2, #0
  4054d2:	f000 83ef 	beq.w	405cb4 <_dtoa_r+0xdb4>
  4054d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4054d8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4054da:	2900      	cmp	r1, #0
  4054dc:	f2c0 829f 	blt.w	405a1e <_dtoa_r+0xb1e>
  4054e0:	d105      	bne.n	4054ee <_dtoa_r+0x5ee>
  4054e2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4054e4:	b919      	cbnz	r1, 4054ee <_dtoa_r+0x5ee>
  4054e6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4054e8:	2900      	cmp	r1, #0
  4054ea:	f000 8298 	beq.w	405a1e <_dtoa_r+0xb1e>
  4054ee:	2a00      	cmp	r2, #0
  4054f0:	f300 8306 	bgt.w	405b00 <_dtoa_r+0xc00>
  4054f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4054f6:	703b      	strb	r3, [r7, #0]
  4054f8:	f107 0801 	add.w	r8, r7, #1
  4054fc:	4297      	cmp	r7, r2
  4054fe:	4645      	mov	r5, r8
  405500:	f000 830c 	beq.w	405b1c <_dtoa_r+0xc1c>
  405504:	4649      	mov	r1, r9
  405506:	2300      	movs	r3, #0
  405508:	220a      	movs	r2, #10
  40550a:	4620      	mov	r0, r4
  40550c:	f001 f826 	bl	40655c <__multadd>
  405510:	455e      	cmp	r6, fp
  405512:	4681      	mov	r9, r0
  405514:	4631      	mov	r1, r6
  405516:	f04f 0300 	mov.w	r3, #0
  40551a:	f04f 020a 	mov.w	r2, #10
  40551e:	4620      	mov	r0, r4
  405520:	f000 81eb 	beq.w	4058fa <_dtoa_r+0x9fa>
  405524:	f001 f81a 	bl	40655c <__multadd>
  405528:	4659      	mov	r1, fp
  40552a:	4606      	mov	r6, r0
  40552c:	2300      	movs	r3, #0
  40552e:	220a      	movs	r2, #10
  405530:	4620      	mov	r0, r4
  405532:	f001 f813 	bl	40655c <__multadd>
  405536:	4647      	mov	r7, r8
  405538:	4683      	mov	fp, r0
  40553a:	e7a3      	b.n	405484 <_dtoa_r+0x584>
  40553c:	201c      	movs	r0, #28
  40553e:	9b08      	ldr	r3, [sp, #32]
  405540:	4403      	add	r3, r0
  405542:	9308      	str	r3, [sp, #32]
  405544:	9b06      	ldr	r3, [sp, #24]
  405546:	4403      	add	r3, r0
  405548:	4405      	add	r5, r0
  40554a:	9306      	str	r3, [sp, #24]
  40554c:	e763      	b.n	405416 <_dtoa_r+0x516>
  40554e:	4641      	mov	r1, r8
  405550:	4648      	mov	r0, r9
  405552:	f001 f9d1 	bl	4068f8 <__mcmp>
  405556:	2800      	cmp	r0, #0
  405558:	f6bf af73 	bge.w	405442 <_dtoa_r+0x542>
  40555c:	9f02      	ldr	r7, [sp, #8]
  40555e:	4649      	mov	r1, r9
  405560:	2300      	movs	r3, #0
  405562:	220a      	movs	r2, #10
  405564:	4620      	mov	r0, r4
  405566:	3f01      	subs	r7, #1
  405568:	9702      	str	r7, [sp, #8]
  40556a:	f000 fff7 	bl	40655c <__multadd>
  40556e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405570:	4681      	mov	r9, r0
  405572:	2b00      	cmp	r3, #0
  405574:	f040 83b6 	bne.w	405ce4 <_dtoa_r+0xde4>
  405578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40557a:	2b00      	cmp	r3, #0
  40557c:	f340 83bf 	ble.w	405cfe <_dtoa_r+0xdfe>
  405580:	930a      	str	r3, [sp, #40]	; 0x28
  405582:	f8dd b010 	ldr.w	fp, [sp, #16]
  405586:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405588:	465d      	mov	r5, fp
  40558a:	e002      	b.n	405592 <_dtoa_r+0x692>
  40558c:	f000 ffe6 	bl	40655c <__multadd>
  405590:	4681      	mov	r9, r0
  405592:	4641      	mov	r1, r8
  405594:	4648      	mov	r0, r9
  405596:	f7ff fc1d 	bl	404dd4 <quorem>
  40559a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40559e:	f805 ab01 	strb.w	sl, [r5], #1
  4055a2:	eba5 030b 	sub.w	r3, r5, fp
  4055a6:	42bb      	cmp	r3, r7
  4055a8:	f04f 020a 	mov.w	r2, #10
  4055ac:	f04f 0300 	mov.w	r3, #0
  4055b0:	4649      	mov	r1, r9
  4055b2:	4620      	mov	r0, r4
  4055b4:	dbea      	blt.n	40558c <_dtoa_r+0x68c>
  4055b6:	9b04      	ldr	r3, [sp, #16]
  4055b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4055ba:	2a01      	cmp	r2, #1
  4055bc:	bfac      	ite	ge
  4055be:	189b      	addge	r3, r3, r2
  4055c0:	3301      	addlt	r3, #1
  4055c2:	461d      	mov	r5, r3
  4055c4:	f04f 0b00 	mov.w	fp, #0
  4055c8:	4649      	mov	r1, r9
  4055ca:	2201      	movs	r2, #1
  4055cc:	4620      	mov	r0, r4
  4055ce:	f001 f941 	bl	406854 <__lshift>
  4055d2:	4641      	mov	r1, r8
  4055d4:	4681      	mov	r9, r0
  4055d6:	f001 f98f 	bl	4068f8 <__mcmp>
  4055da:	2800      	cmp	r0, #0
  4055dc:	f340 823d 	ble.w	405a5a <_dtoa_r+0xb5a>
  4055e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4055e4:	9904      	ldr	r1, [sp, #16]
  4055e6:	1e6b      	subs	r3, r5, #1
  4055e8:	e004      	b.n	4055f4 <_dtoa_r+0x6f4>
  4055ea:	428b      	cmp	r3, r1
  4055ec:	f000 81ae 	beq.w	40594c <_dtoa_r+0xa4c>
  4055f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4055f4:	2a39      	cmp	r2, #57	; 0x39
  4055f6:	f103 0501 	add.w	r5, r3, #1
  4055fa:	d0f6      	beq.n	4055ea <_dtoa_r+0x6ea>
  4055fc:	3201      	adds	r2, #1
  4055fe:	701a      	strb	r2, [r3, #0]
  405600:	4641      	mov	r1, r8
  405602:	4620      	mov	r0, r4
  405604:	f000 ffa0 	bl	406548 <_Bfree>
  405608:	2e00      	cmp	r6, #0
  40560a:	f43f ae3d 	beq.w	405288 <_dtoa_r+0x388>
  40560e:	f1bb 0f00 	cmp.w	fp, #0
  405612:	d005      	beq.n	405620 <_dtoa_r+0x720>
  405614:	45b3      	cmp	fp, r6
  405616:	d003      	beq.n	405620 <_dtoa_r+0x720>
  405618:	4659      	mov	r1, fp
  40561a:	4620      	mov	r0, r4
  40561c:	f000 ff94 	bl	406548 <_Bfree>
  405620:	4631      	mov	r1, r6
  405622:	4620      	mov	r0, r4
  405624:	f000 ff90 	bl	406548 <_Bfree>
  405628:	e62e      	b.n	405288 <_dtoa_r+0x388>
  40562a:	2300      	movs	r3, #0
  40562c:	930b      	str	r3, [sp, #44]	; 0x2c
  40562e:	9b02      	ldr	r3, [sp, #8]
  405630:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405632:	4413      	add	r3, r2
  405634:	930f      	str	r3, [sp, #60]	; 0x3c
  405636:	3301      	adds	r3, #1
  405638:	2b01      	cmp	r3, #1
  40563a:	461f      	mov	r7, r3
  40563c:	461e      	mov	r6, r3
  40563e:	930a      	str	r3, [sp, #40]	; 0x28
  405640:	bfb8      	it	lt
  405642:	2701      	movlt	r7, #1
  405644:	2100      	movs	r1, #0
  405646:	2f17      	cmp	r7, #23
  405648:	6461      	str	r1, [r4, #68]	; 0x44
  40564a:	d90a      	bls.n	405662 <_dtoa_r+0x762>
  40564c:	2201      	movs	r2, #1
  40564e:	2304      	movs	r3, #4
  405650:	005b      	lsls	r3, r3, #1
  405652:	f103 0014 	add.w	r0, r3, #20
  405656:	4287      	cmp	r7, r0
  405658:	4611      	mov	r1, r2
  40565a:	f102 0201 	add.w	r2, r2, #1
  40565e:	d2f7      	bcs.n	405650 <_dtoa_r+0x750>
  405660:	6461      	str	r1, [r4, #68]	; 0x44
  405662:	4620      	mov	r0, r4
  405664:	f000 ff4a 	bl	4064fc <_Balloc>
  405668:	2e0e      	cmp	r6, #14
  40566a:	9004      	str	r0, [sp, #16]
  40566c:	6420      	str	r0, [r4, #64]	; 0x40
  40566e:	f63f ad41 	bhi.w	4050f4 <_dtoa_r+0x1f4>
  405672:	2d00      	cmp	r5, #0
  405674:	f43f ad3e 	beq.w	4050f4 <_dtoa_r+0x1f4>
  405678:	9902      	ldr	r1, [sp, #8]
  40567a:	2900      	cmp	r1, #0
  40567c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405680:	f340 8202 	ble.w	405a88 <_dtoa_r+0xb88>
  405684:	4bb8      	ldr	r3, [pc, #736]	; (405968 <_dtoa_r+0xa68>)
  405686:	f001 020f 	and.w	r2, r1, #15
  40568a:	110d      	asrs	r5, r1, #4
  40568c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405690:	06e9      	lsls	r1, r5, #27
  405692:	e9d3 6700 	ldrd	r6, r7, [r3]
  405696:	f140 81ae 	bpl.w	4059f6 <_dtoa_r+0xaf6>
  40569a:	4bb4      	ldr	r3, [pc, #720]	; (40596c <_dtoa_r+0xa6c>)
  40569c:	4650      	mov	r0, sl
  40569e:	4659      	mov	r1, fp
  4056a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4056a4:	f002 fa10 	bl	407ac8 <__aeabi_ddiv>
  4056a8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4056ac:	f005 050f 	and.w	r5, r5, #15
  4056b0:	f04f 0a03 	mov.w	sl, #3
  4056b4:	b18d      	cbz	r5, 4056da <_dtoa_r+0x7da>
  4056b6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40596c <_dtoa_r+0xa6c>
  4056ba:	07ea      	lsls	r2, r5, #31
  4056bc:	d509      	bpl.n	4056d2 <_dtoa_r+0x7d2>
  4056be:	4630      	mov	r0, r6
  4056c0:	4639      	mov	r1, r7
  4056c2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4056c6:	f002 f8d5 	bl	407874 <__aeabi_dmul>
  4056ca:	f10a 0a01 	add.w	sl, sl, #1
  4056ce:	4606      	mov	r6, r0
  4056d0:	460f      	mov	r7, r1
  4056d2:	106d      	asrs	r5, r5, #1
  4056d4:	f108 0808 	add.w	r8, r8, #8
  4056d8:	d1ef      	bne.n	4056ba <_dtoa_r+0x7ba>
  4056da:	463b      	mov	r3, r7
  4056dc:	4632      	mov	r2, r6
  4056de:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4056e2:	f002 f9f1 	bl	407ac8 <__aeabi_ddiv>
  4056e6:	4607      	mov	r7, r0
  4056e8:	4688      	mov	r8, r1
  4056ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4056ec:	b143      	cbz	r3, 405700 <_dtoa_r+0x800>
  4056ee:	2200      	movs	r2, #0
  4056f0:	4b9f      	ldr	r3, [pc, #636]	; (405970 <_dtoa_r+0xa70>)
  4056f2:	4638      	mov	r0, r7
  4056f4:	4641      	mov	r1, r8
  4056f6:	f002 fb2f 	bl	407d58 <__aeabi_dcmplt>
  4056fa:	2800      	cmp	r0, #0
  4056fc:	f040 8286 	bne.w	405c0c <_dtoa_r+0xd0c>
  405700:	4650      	mov	r0, sl
  405702:	f002 f851 	bl	4077a8 <__aeabi_i2d>
  405706:	463a      	mov	r2, r7
  405708:	4643      	mov	r3, r8
  40570a:	f002 f8b3 	bl	407874 <__aeabi_dmul>
  40570e:	4b99      	ldr	r3, [pc, #612]	; (405974 <_dtoa_r+0xa74>)
  405710:	2200      	movs	r2, #0
  405712:	f001 fefd 	bl	407510 <__adddf3>
  405716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405718:	4605      	mov	r5, r0
  40571a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40571e:	2b00      	cmp	r3, #0
  405720:	f000 813e 	beq.w	4059a0 <_dtoa_r+0xaa0>
  405724:	9b02      	ldr	r3, [sp, #8]
  405726:	9315      	str	r3, [sp, #84]	; 0x54
  405728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40572a:	9312      	str	r3, [sp, #72]	; 0x48
  40572c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40572e:	2b00      	cmp	r3, #0
  405730:	f000 81fa 	beq.w	405b28 <_dtoa_r+0xc28>
  405734:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405736:	4b8c      	ldr	r3, [pc, #560]	; (405968 <_dtoa_r+0xa68>)
  405738:	498f      	ldr	r1, [pc, #572]	; (405978 <_dtoa_r+0xa78>)
  40573a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40573e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405742:	2000      	movs	r0, #0
  405744:	f002 f9c0 	bl	407ac8 <__aeabi_ddiv>
  405748:	462a      	mov	r2, r5
  40574a:	4633      	mov	r3, r6
  40574c:	f001 fede 	bl	40750c <__aeabi_dsub>
  405750:	4682      	mov	sl, r0
  405752:	468b      	mov	fp, r1
  405754:	4638      	mov	r0, r7
  405756:	4641      	mov	r1, r8
  405758:	f002 fb3c 	bl	407dd4 <__aeabi_d2iz>
  40575c:	4605      	mov	r5, r0
  40575e:	f002 f823 	bl	4077a8 <__aeabi_i2d>
  405762:	4602      	mov	r2, r0
  405764:	460b      	mov	r3, r1
  405766:	4638      	mov	r0, r7
  405768:	4641      	mov	r1, r8
  40576a:	f001 fecf 	bl	40750c <__aeabi_dsub>
  40576e:	3530      	adds	r5, #48	; 0x30
  405770:	fa5f f885 	uxtb.w	r8, r5
  405774:	9d04      	ldr	r5, [sp, #16]
  405776:	4606      	mov	r6, r0
  405778:	460f      	mov	r7, r1
  40577a:	f885 8000 	strb.w	r8, [r5]
  40577e:	4602      	mov	r2, r0
  405780:	460b      	mov	r3, r1
  405782:	4650      	mov	r0, sl
  405784:	4659      	mov	r1, fp
  405786:	3501      	adds	r5, #1
  405788:	f002 fb04 	bl	407d94 <__aeabi_dcmpgt>
  40578c:	2800      	cmp	r0, #0
  40578e:	d154      	bne.n	40583a <_dtoa_r+0x93a>
  405790:	4632      	mov	r2, r6
  405792:	463b      	mov	r3, r7
  405794:	2000      	movs	r0, #0
  405796:	4976      	ldr	r1, [pc, #472]	; (405970 <_dtoa_r+0xa70>)
  405798:	f001 feb8 	bl	40750c <__aeabi_dsub>
  40579c:	4602      	mov	r2, r0
  40579e:	460b      	mov	r3, r1
  4057a0:	4650      	mov	r0, sl
  4057a2:	4659      	mov	r1, fp
  4057a4:	f002 faf6 	bl	407d94 <__aeabi_dcmpgt>
  4057a8:	2800      	cmp	r0, #0
  4057aa:	f040 8270 	bne.w	405c8e <_dtoa_r+0xd8e>
  4057ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4057b0:	2a01      	cmp	r2, #1
  4057b2:	f000 8111 	beq.w	4059d8 <_dtoa_r+0xad8>
  4057b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057b8:	9a04      	ldr	r2, [sp, #16]
  4057ba:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4057be:	4413      	add	r3, r2
  4057c0:	4699      	mov	r9, r3
  4057c2:	e00d      	b.n	4057e0 <_dtoa_r+0x8e0>
  4057c4:	2000      	movs	r0, #0
  4057c6:	496a      	ldr	r1, [pc, #424]	; (405970 <_dtoa_r+0xa70>)
  4057c8:	f001 fea0 	bl	40750c <__aeabi_dsub>
  4057cc:	4652      	mov	r2, sl
  4057ce:	465b      	mov	r3, fp
  4057d0:	f002 fac2 	bl	407d58 <__aeabi_dcmplt>
  4057d4:	2800      	cmp	r0, #0
  4057d6:	f040 8258 	bne.w	405c8a <_dtoa_r+0xd8a>
  4057da:	454d      	cmp	r5, r9
  4057dc:	f000 80fa 	beq.w	4059d4 <_dtoa_r+0xad4>
  4057e0:	4650      	mov	r0, sl
  4057e2:	4659      	mov	r1, fp
  4057e4:	2200      	movs	r2, #0
  4057e6:	4b65      	ldr	r3, [pc, #404]	; (40597c <_dtoa_r+0xa7c>)
  4057e8:	f002 f844 	bl	407874 <__aeabi_dmul>
  4057ec:	2200      	movs	r2, #0
  4057ee:	4b63      	ldr	r3, [pc, #396]	; (40597c <_dtoa_r+0xa7c>)
  4057f0:	4682      	mov	sl, r0
  4057f2:	468b      	mov	fp, r1
  4057f4:	4630      	mov	r0, r6
  4057f6:	4639      	mov	r1, r7
  4057f8:	f002 f83c 	bl	407874 <__aeabi_dmul>
  4057fc:	460f      	mov	r7, r1
  4057fe:	4606      	mov	r6, r0
  405800:	f002 fae8 	bl	407dd4 <__aeabi_d2iz>
  405804:	4680      	mov	r8, r0
  405806:	f001 ffcf 	bl	4077a8 <__aeabi_i2d>
  40580a:	4602      	mov	r2, r0
  40580c:	460b      	mov	r3, r1
  40580e:	4630      	mov	r0, r6
  405810:	4639      	mov	r1, r7
  405812:	f001 fe7b 	bl	40750c <__aeabi_dsub>
  405816:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40581a:	fa5f f888 	uxtb.w	r8, r8
  40581e:	4652      	mov	r2, sl
  405820:	465b      	mov	r3, fp
  405822:	f805 8b01 	strb.w	r8, [r5], #1
  405826:	4606      	mov	r6, r0
  405828:	460f      	mov	r7, r1
  40582a:	f002 fa95 	bl	407d58 <__aeabi_dcmplt>
  40582e:	4632      	mov	r2, r6
  405830:	463b      	mov	r3, r7
  405832:	2800      	cmp	r0, #0
  405834:	d0c6      	beq.n	4057c4 <_dtoa_r+0x8c4>
  405836:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40583a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40583c:	9302      	str	r3, [sp, #8]
  40583e:	e523      	b.n	405288 <_dtoa_r+0x388>
  405840:	2300      	movs	r3, #0
  405842:	930b      	str	r3, [sp, #44]	; 0x2c
  405844:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405846:	2b00      	cmp	r3, #0
  405848:	f340 80dc 	ble.w	405a04 <_dtoa_r+0xb04>
  40584c:	461f      	mov	r7, r3
  40584e:	461e      	mov	r6, r3
  405850:	930f      	str	r3, [sp, #60]	; 0x3c
  405852:	930a      	str	r3, [sp, #40]	; 0x28
  405854:	e6f6      	b.n	405644 <_dtoa_r+0x744>
  405856:	2301      	movs	r3, #1
  405858:	930b      	str	r3, [sp, #44]	; 0x2c
  40585a:	e7f3      	b.n	405844 <_dtoa_r+0x944>
  40585c:	f1ba 0f00 	cmp.w	sl, #0
  405860:	f47f ada8 	bne.w	4053b4 <_dtoa_r+0x4b4>
  405864:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405868:	2b00      	cmp	r3, #0
  40586a:	f47f adba 	bne.w	4053e2 <_dtoa_r+0x4e2>
  40586e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405872:	0d3f      	lsrs	r7, r7, #20
  405874:	053f      	lsls	r7, r7, #20
  405876:	2f00      	cmp	r7, #0
  405878:	f000 820d 	beq.w	405c96 <_dtoa_r+0xd96>
  40587c:	9b08      	ldr	r3, [sp, #32]
  40587e:	3301      	adds	r3, #1
  405880:	9308      	str	r3, [sp, #32]
  405882:	9b06      	ldr	r3, [sp, #24]
  405884:	3301      	adds	r3, #1
  405886:	9306      	str	r3, [sp, #24]
  405888:	2301      	movs	r3, #1
  40588a:	930c      	str	r3, [sp, #48]	; 0x30
  40588c:	e5ab      	b.n	4053e6 <_dtoa_r+0x4e6>
  40588e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405890:	2b00      	cmp	r3, #0
  405892:	f73f ac42 	bgt.w	40511a <_dtoa_r+0x21a>
  405896:	f040 8221 	bne.w	405cdc <_dtoa_r+0xddc>
  40589a:	2200      	movs	r2, #0
  40589c:	4b38      	ldr	r3, [pc, #224]	; (405980 <_dtoa_r+0xa80>)
  40589e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4058a2:	f001 ffe7 	bl	407874 <__aeabi_dmul>
  4058a6:	4652      	mov	r2, sl
  4058a8:	465b      	mov	r3, fp
  4058aa:	f002 fa69 	bl	407d80 <__aeabi_dcmpge>
  4058ae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4058b2:	4646      	mov	r6, r8
  4058b4:	2800      	cmp	r0, #0
  4058b6:	d041      	beq.n	40593c <_dtoa_r+0xa3c>
  4058b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4058ba:	9d04      	ldr	r5, [sp, #16]
  4058bc:	43db      	mvns	r3, r3
  4058be:	9302      	str	r3, [sp, #8]
  4058c0:	4641      	mov	r1, r8
  4058c2:	4620      	mov	r0, r4
  4058c4:	f000 fe40 	bl	406548 <_Bfree>
  4058c8:	2e00      	cmp	r6, #0
  4058ca:	f43f acdd 	beq.w	405288 <_dtoa_r+0x388>
  4058ce:	e6a7      	b.n	405620 <_dtoa_r+0x720>
  4058d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4058d2:	4649      	mov	r1, r9
  4058d4:	4620      	mov	r0, r4
  4058d6:	f000 ff6d 	bl	4067b4 <__pow5mult>
  4058da:	4681      	mov	r9, r0
  4058dc:	e558      	b.n	405390 <_dtoa_r+0x490>
  4058de:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4058e0:	2a00      	cmp	r2, #0
  4058e2:	f000 8187 	beq.w	405bf4 <_dtoa_r+0xcf4>
  4058e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4058ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4058ec:	9d08      	ldr	r5, [sp, #32]
  4058ee:	e4f2      	b.n	4052d6 <_dtoa_r+0x3d6>
  4058f0:	f1ba 0f00 	cmp.w	sl, #0
  4058f4:	f47f ad75 	bne.w	4053e2 <_dtoa_r+0x4e2>
  4058f8:	e7b4      	b.n	405864 <_dtoa_r+0x964>
  4058fa:	f000 fe2f 	bl	40655c <__multadd>
  4058fe:	4647      	mov	r7, r8
  405900:	4606      	mov	r6, r0
  405902:	4683      	mov	fp, r0
  405904:	e5be      	b.n	405484 <_dtoa_r+0x584>
  405906:	4601      	mov	r1, r0
  405908:	4620      	mov	r0, r4
  40590a:	9306      	str	r3, [sp, #24]
  40590c:	f000 fe1c 	bl	406548 <_Bfree>
  405910:	2201      	movs	r2, #1
  405912:	9b06      	ldr	r3, [sp, #24]
  405914:	e5e0      	b.n	4054d8 <_dtoa_r+0x5d8>
  405916:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405918:	2b02      	cmp	r3, #2
  40591a:	f77f ad96 	ble.w	40544a <_dtoa_r+0x54a>
  40591e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405920:	2b00      	cmp	r3, #0
  405922:	d1c9      	bne.n	4058b8 <_dtoa_r+0x9b8>
  405924:	4641      	mov	r1, r8
  405926:	2205      	movs	r2, #5
  405928:	4620      	mov	r0, r4
  40592a:	f000 fe17 	bl	40655c <__multadd>
  40592e:	4601      	mov	r1, r0
  405930:	4680      	mov	r8, r0
  405932:	4648      	mov	r0, r9
  405934:	f000 ffe0 	bl	4068f8 <__mcmp>
  405938:	2800      	cmp	r0, #0
  40593a:	ddbd      	ble.n	4058b8 <_dtoa_r+0x9b8>
  40593c:	9a02      	ldr	r2, [sp, #8]
  40593e:	9904      	ldr	r1, [sp, #16]
  405940:	2331      	movs	r3, #49	; 0x31
  405942:	3201      	adds	r2, #1
  405944:	9202      	str	r2, [sp, #8]
  405946:	700b      	strb	r3, [r1, #0]
  405948:	1c4d      	adds	r5, r1, #1
  40594a:	e7b9      	b.n	4058c0 <_dtoa_r+0x9c0>
  40594c:	9a02      	ldr	r2, [sp, #8]
  40594e:	3201      	adds	r2, #1
  405950:	9202      	str	r2, [sp, #8]
  405952:	9a04      	ldr	r2, [sp, #16]
  405954:	2331      	movs	r3, #49	; 0x31
  405956:	7013      	strb	r3, [r2, #0]
  405958:	e652      	b.n	405600 <_dtoa_r+0x700>
  40595a:	2301      	movs	r3, #1
  40595c:	930b      	str	r3, [sp, #44]	; 0x2c
  40595e:	e666      	b.n	40562e <_dtoa_r+0x72e>
  405960:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405964:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405966:	e48f      	b.n	405288 <_dtoa_r+0x388>
  405968:	00408868 	.word	0x00408868
  40596c:	00408840 	.word	0x00408840
  405970:	3ff00000 	.word	0x3ff00000
  405974:	401c0000 	.word	0x401c0000
  405978:	3fe00000 	.word	0x3fe00000
  40597c:	40240000 	.word	0x40240000
  405980:	40140000 	.word	0x40140000
  405984:	4650      	mov	r0, sl
  405986:	f001 ff0f 	bl	4077a8 <__aeabi_i2d>
  40598a:	463a      	mov	r2, r7
  40598c:	4643      	mov	r3, r8
  40598e:	f001 ff71 	bl	407874 <__aeabi_dmul>
  405992:	2200      	movs	r2, #0
  405994:	4bc1      	ldr	r3, [pc, #772]	; (405c9c <_dtoa_r+0xd9c>)
  405996:	f001 fdbb 	bl	407510 <__adddf3>
  40599a:	4605      	mov	r5, r0
  40599c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4059a0:	4641      	mov	r1, r8
  4059a2:	2200      	movs	r2, #0
  4059a4:	4bbe      	ldr	r3, [pc, #760]	; (405ca0 <_dtoa_r+0xda0>)
  4059a6:	4638      	mov	r0, r7
  4059a8:	f001 fdb0 	bl	40750c <__aeabi_dsub>
  4059ac:	462a      	mov	r2, r5
  4059ae:	4633      	mov	r3, r6
  4059b0:	4682      	mov	sl, r0
  4059b2:	468b      	mov	fp, r1
  4059b4:	f002 f9ee 	bl	407d94 <__aeabi_dcmpgt>
  4059b8:	4680      	mov	r8, r0
  4059ba:	2800      	cmp	r0, #0
  4059bc:	f040 8110 	bne.w	405be0 <_dtoa_r+0xce0>
  4059c0:	462a      	mov	r2, r5
  4059c2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4059c6:	4650      	mov	r0, sl
  4059c8:	4659      	mov	r1, fp
  4059ca:	f002 f9c5 	bl	407d58 <__aeabi_dcmplt>
  4059ce:	b118      	cbz	r0, 4059d8 <_dtoa_r+0xad8>
  4059d0:	4646      	mov	r6, r8
  4059d2:	e771      	b.n	4058b8 <_dtoa_r+0x9b8>
  4059d4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4059d8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4059dc:	f7ff bb8a 	b.w	4050f4 <_dtoa_r+0x1f4>
  4059e0:	9804      	ldr	r0, [sp, #16]
  4059e2:	f7ff babb 	b.w	404f5c <_dtoa_r+0x5c>
  4059e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4059e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4059ea:	970c      	str	r7, [sp, #48]	; 0x30
  4059ec:	1afb      	subs	r3, r7, r3
  4059ee:	441a      	add	r2, r3
  4059f0:	920d      	str	r2, [sp, #52]	; 0x34
  4059f2:	2700      	movs	r7, #0
  4059f4:	e469      	b.n	4052ca <_dtoa_r+0x3ca>
  4059f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4059fa:	f04f 0a02 	mov.w	sl, #2
  4059fe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405a02:	e657      	b.n	4056b4 <_dtoa_r+0x7b4>
  405a04:	2100      	movs	r1, #0
  405a06:	2301      	movs	r3, #1
  405a08:	6461      	str	r1, [r4, #68]	; 0x44
  405a0a:	4620      	mov	r0, r4
  405a0c:	9325      	str	r3, [sp, #148]	; 0x94
  405a0e:	f000 fd75 	bl	4064fc <_Balloc>
  405a12:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405a14:	9004      	str	r0, [sp, #16]
  405a16:	6420      	str	r0, [r4, #64]	; 0x40
  405a18:	930a      	str	r3, [sp, #40]	; 0x28
  405a1a:	930f      	str	r3, [sp, #60]	; 0x3c
  405a1c:	e629      	b.n	405672 <_dtoa_r+0x772>
  405a1e:	2a00      	cmp	r2, #0
  405a20:	46d0      	mov	r8, sl
  405a22:	f8cd b018 	str.w	fp, [sp, #24]
  405a26:	469a      	mov	sl, r3
  405a28:	dd11      	ble.n	405a4e <_dtoa_r+0xb4e>
  405a2a:	4649      	mov	r1, r9
  405a2c:	2201      	movs	r2, #1
  405a2e:	4620      	mov	r0, r4
  405a30:	f000 ff10 	bl	406854 <__lshift>
  405a34:	4641      	mov	r1, r8
  405a36:	4681      	mov	r9, r0
  405a38:	f000 ff5e 	bl	4068f8 <__mcmp>
  405a3c:	2800      	cmp	r0, #0
  405a3e:	f340 8146 	ble.w	405cce <_dtoa_r+0xdce>
  405a42:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405a46:	f000 8106 	beq.w	405c56 <_dtoa_r+0xd56>
  405a4a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405a4e:	46b3      	mov	fp, r6
  405a50:	f887 a000 	strb.w	sl, [r7]
  405a54:	1c7d      	adds	r5, r7, #1
  405a56:	9e06      	ldr	r6, [sp, #24]
  405a58:	e5d2      	b.n	405600 <_dtoa_r+0x700>
  405a5a:	d104      	bne.n	405a66 <_dtoa_r+0xb66>
  405a5c:	f01a 0f01 	tst.w	sl, #1
  405a60:	d001      	beq.n	405a66 <_dtoa_r+0xb66>
  405a62:	e5bd      	b.n	4055e0 <_dtoa_r+0x6e0>
  405a64:	4615      	mov	r5, r2
  405a66:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405a6a:	2b30      	cmp	r3, #48	; 0x30
  405a6c:	f105 32ff 	add.w	r2, r5, #4294967295
  405a70:	d0f8      	beq.n	405a64 <_dtoa_r+0xb64>
  405a72:	e5c5      	b.n	405600 <_dtoa_r+0x700>
  405a74:	9904      	ldr	r1, [sp, #16]
  405a76:	2230      	movs	r2, #48	; 0x30
  405a78:	700a      	strb	r2, [r1, #0]
  405a7a:	9a02      	ldr	r2, [sp, #8]
  405a7c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405a80:	3201      	adds	r2, #1
  405a82:	9202      	str	r2, [sp, #8]
  405a84:	f7ff bbfc 	b.w	405280 <_dtoa_r+0x380>
  405a88:	f000 80bb 	beq.w	405c02 <_dtoa_r+0xd02>
  405a8c:	9b02      	ldr	r3, [sp, #8]
  405a8e:	425d      	negs	r5, r3
  405a90:	4b84      	ldr	r3, [pc, #528]	; (405ca4 <_dtoa_r+0xda4>)
  405a92:	f005 020f 	and.w	r2, r5, #15
  405a96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405aa2:	f001 fee7 	bl	407874 <__aeabi_dmul>
  405aa6:	112d      	asrs	r5, r5, #4
  405aa8:	4607      	mov	r7, r0
  405aaa:	4688      	mov	r8, r1
  405aac:	f000 812c 	beq.w	405d08 <_dtoa_r+0xe08>
  405ab0:	4e7d      	ldr	r6, [pc, #500]	; (405ca8 <_dtoa_r+0xda8>)
  405ab2:	f04f 0a02 	mov.w	sl, #2
  405ab6:	07eb      	lsls	r3, r5, #31
  405ab8:	d509      	bpl.n	405ace <_dtoa_r+0xbce>
  405aba:	4638      	mov	r0, r7
  405abc:	4641      	mov	r1, r8
  405abe:	e9d6 2300 	ldrd	r2, r3, [r6]
  405ac2:	f001 fed7 	bl	407874 <__aeabi_dmul>
  405ac6:	f10a 0a01 	add.w	sl, sl, #1
  405aca:	4607      	mov	r7, r0
  405acc:	4688      	mov	r8, r1
  405ace:	106d      	asrs	r5, r5, #1
  405ad0:	f106 0608 	add.w	r6, r6, #8
  405ad4:	d1ef      	bne.n	405ab6 <_dtoa_r+0xbb6>
  405ad6:	e608      	b.n	4056ea <_dtoa_r+0x7ea>
  405ad8:	6871      	ldr	r1, [r6, #4]
  405ada:	4620      	mov	r0, r4
  405adc:	f000 fd0e 	bl	4064fc <_Balloc>
  405ae0:	6933      	ldr	r3, [r6, #16]
  405ae2:	3302      	adds	r3, #2
  405ae4:	009a      	lsls	r2, r3, #2
  405ae6:	4605      	mov	r5, r0
  405ae8:	f106 010c 	add.w	r1, r6, #12
  405aec:	300c      	adds	r0, #12
  405aee:	f000 fc5f 	bl	4063b0 <memcpy>
  405af2:	4629      	mov	r1, r5
  405af4:	2201      	movs	r2, #1
  405af6:	4620      	mov	r0, r4
  405af8:	f000 feac 	bl	406854 <__lshift>
  405afc:	9006      	str	r0, [sp, #24]
  405afe:	e4b5      	b.n	40546c <_dtoa_r+0x56c>
  405b00:	2b39      	cmp	r3, #57	; 0x39
  405b02:	f8cd b018 	str.w	fp, [sp, #24]
  405b06:	46d0      	mov	r8, sl
  405b08:	f000 80a5 	beq.w	405c56 <_dtoa_r+0xd56>
  405b0c:	f103 0a01 	add.w	sl, r3, #1
  405b10:	46b3      	mov	fp, r6
  405b12:	f887 a000 	strb.w	sl, [r7]
  405b16:	1c7d      	adds	r5, r7, #1
  405b18:	9e06      	ldr	r6, [sp, #24]
  405b1a:	e571      	b.n	405600 <_dtoa_r+0x700>
  405b1c:	465a      	mov	r2, fp
  405b1e:	46d0      	mov	r8, sl
  405b20:	46b3      	mov	fp, r6
  405b22:	469a      	mov	sl, r3
  405b24:	4616      	mov	r6, r2
  405b26:	e54f      	b.n	4055c8 <_dtoa_r+0x6c8>
  405b28:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b2a:	495e      	ldr	r1, [pc, #376]	; (405ca4 <_dtoa_r+0xda4>)
  405b2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405b30:	462a      	mov	r2, r5
  405b32:	4633      	mov	r3, r6
  405b34:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405b38:	f001 fe9c 	bl	407874 <__aeabi_dmul>
  405b3c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405b40:	4638      	mov	r0, r7
  405b42:	4641      	mov	r1, r8
  405b44:	f002 f946 	bl	407dd4 <__aeabi_d2iz>
  405b48:	4605      	mov	r5, r0
  405b4a:	f001 fe2d 	bl	4077a8 <__aeabi_i2d>
  405b4e:	460b      	mov	r3, r1
  405b50:	4602      	mov	r2, r0
  405b52:	4641      	mov	r1, r8
  405b54:	4638      	mov	r0, r7
  405b56:	f001 fcd9 	bl	40750c <__aeabi_dsub>
  405b5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b5c:	460f      	mov	r7, r1
  405b5e:	9904      	ldr	r1, [sp, #16]
  405b60:	3530      	adds	r5, #48	; 0x30
  405b62:	2b01      	cmp	r3, #1
  405b64:	700d      	strb	r5, [r1, #0]
  405b66:	4606      	mov	r6, r0
  405b68:	f101 0501 	add.w	r5, r1, #1
  405b6c:	d026      	beq.n	405bbc <_dtoa_r+0xcbc>
  405b6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405b70:	9a04      	ldr	r2, [sp, #16]
  405b72:	f8df b13c 	ldr.w	fp, [pc, #316]	; 405cb0 <_dtoa_r+0xdb0>
  405b76:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405b7a:	4413      	add	r3, r2
  405b7c:	f04f 0a00 	mov.w	sl, #0
  405b80:	4699      	mov	r9, r3
  405b82:	4652      	mov	r2, sl
  405b84:	465b      	mov	r3, fp
  405b86:	4630      	mov	r0, r6
  405b88:	4639      	mov	r1, r7
  405b8a:	f001 fe73 	bl	407874 <__aeabi_dmul>
  405b8e:	460f      	mov	r7, r1
  405b90:	4606      	mov	r6, r0
  405b92:	f002 f91f 	bl	407dd4 <__aeabi_d2iz>
  405b96:	4680      	mov	r8, r0
  405b98:	f001 fe06 	bl	4077a8 <__aeabi_i2d>
  405b9c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405ba0:	4602      	mov	r2, r0
  405ba2:	460b      	mov	r3, r1
  405ba4:	4630      	mov	r0, r6
  405ba6:	4639      	mov	r1, r7
  405ba8:	f001 fcb0 	bl	40750c <__aeabi_dsub>
  405bac:	f805 8b01 	strb.w	r8, [r5], #1
  405bb0:	454d      	cmp	r5, r9
  405bb2:	4606      	mov	r6, r0
  405bb4:	460f      	mov	r7, r1
  405bb6:	d1e4      	bne.n	405b82 <_dtoa_r+0xc82>
  405bb8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405bbc:	4b3b      	ldr	r3, [pc, #236]	; (405cac <_dtoa_r+0xdac>)
  405bbe:	2200      	movs	r2, #0
  405bc0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405bc4:	f001 fca4 	bl	407510 <__adddf3>
  405bc8:	4632      	mov	r2, r6
  405bca:	463b      	mov	r3, r7
  405bcc:	f002 f8c4 	bl	407d58 <__aeabi_dcmplt>
  405bd0:	2800      	cmp	r0, #0
  405bd2:	d046      	beq.n	405c62 <_dtoa_r+0xd62>
  405bd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405bd6:	9302      	str	r3, [sp, #8]
  405bd8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405bdc:	f7ff bb43 	b.w	405266 <_dtoa_r+0x366>
  405be0:	f04f 0800 	mov.w	r8, #0
  405be4:	4646      	mov	r6, r8
  405be6:	e6a9      	b.n	40593c <_dtoa_r+0xa3c>
  405be8:	9b08      	ldr	r3, [sp, #32]
  405bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405bec:	1a9d      	subs	r5, r3, r2
  405bee:	2300      	movs	r3, #0
  405bf0:	f7ff bb71 	b.w	4052d6 <_dtoa_r+0x3d6>
  405bf4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  405bf6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405bf8:	9d08      	ldr	r5, [sp, #32]
  405bfa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405bfe:	f7ff bb6a 	b.w	4052d6 <_dtoa_r+0x3d6>
  405c02:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  405c06:	f04f 0a02 	mov.w	sl, #2
  405c0a:	e56e      	b.n	4056ea <_dtoa_r+0x7ea>
  405c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c0e:	2b00      	cmp	r3, #0
  405c10:	f43f aeb8 	beq.w	405984 <_dtoa_r+0xa84>
  405c14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405c16:	2b00      	cmp	r3, #0
  405c18:	f77f aede 	ble.w	4059d8 <_dtoa_r+0xad8>
  405c1c:	2200      	movs	r2, #0
  405c1e:	4b24      	ldr	r3, [pc, #144]	; (405cb0 <_dtoa_r+0xdb0>)
  405c20:	4638      	mov	r0, r7
  405c22:	4641      	mov	r1, r8
  405c24:	f001 fe26 	bl	407874 <__aeabi_dmul>
  405c28:	4607      	mov	r7, r0
  405c2a:	4688      	mov	r8, r1
  405c2c:	f10a 0001 	add.w	r0, sl, #1
  405c30:	f001 fdba 	bl	4077a8 <__aeabi_i2d>
  405c34:	463a      	mov	r2, r7
  405c36:	4643      	mov	r3, r8
  405c38:	f001 fe1c 	bl	407874 <__aeabi_dmul>
  405c3c:	2200      	movs	r2, #0
  405c3e:	4b17      	ldr	r3, [pc, #92]	; (405c9c <_dtoa_r+0xd9c>)
  405c40:	f001 fc66 	bl	407510 <__adddf3>
  405c44:	9a02      	ldr	r2, [sp, #8]
  405c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405c48:	9312      	str	r3, [sp, #72]	; 0x48
  405c4a:	3a01      	subs	r2, #1
  405c4c:	4605      	mov	r5, r0
  405c4e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405c52:	9215      	str	r2, [sp, #84]	; 0x54
  405c54:	e56a      	b.n	40572c <_dtoa_r+0x82c>
  405c56:	2239      	movs	r2, #57	; 0x39
  405c58:	46b3      	mov	fp, r6
  405c5a:	703a      	strb	r2, [r7, #0]
  405c5c:	9e06      	ldr	r6, [sp, #24]
  405c5e:	1c7d      	adds	r5, r7, #1
  405c60:	e4c0      	b.n	4055e4 <_dtoa_r+0x6e4>
  405c62:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  405c66:	2000      	movs	r0, #0
  405c68:	4910      	ldr	r1, [pc, #64]	; (405cac <_dtoa_r+0xdac>)
  405c6a:	f001 fc4f 	bl	40750c <__aeabi_dsub>
  405c6e:	4632      	mov	r2, r6
  405c70:	463b      	mov	r3, r7
  405c72:	f002 f88f 	bl	407d94 <__aeabi_dcmpgt>
  405c76:	b908      	cbnz	r0, 405c7c <_dtoa_r+0xd7c>
  405c78:	e6ae      	b.n	4059d8 <_dtoa_r+0xad8>
  405c7a:	4615      	mov	r5, r2
  405c7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405c80:	2b30      	cmp	r3, #48	; 0x30
  405c82:	f105 32ff 	add.w	r2, r5, #4294967295
  405c86:	d0f8      	beq.n	405c7a <_dtoa_r+0xd7a>
  405c88:	e5d7      	b.n	40583a <_dtoa_r+0x93a>
  405c8a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405c90:	9302      	str	r3, [sp, #8]
  405c92:	f7ff bae8 	b.w	405266 <_dtoa_r+0x366>
  405c96:	970c      	str	r7, [sp, #48]	; 0x30
  405c98:	f7ff bba5 	b.w	4053e6 <_dtoa_r+0x4e6>
  405c9c:	401c0000 	.word	0x401c0000
  405ca0:	40140000 	.word	0x40140000
  405ca4:	00408868 	.word	0x00408868
  405ca8:	00408840 	.word	0x00408840
  405cac:	3fe00000 	.word	0x3fe00000
  405cb0:	40240000 	.word	0x40240000
  405cb4:	2b39      	cmp	r3, #57	; 0x39
  405cb6:	f8cd b018 	str.w	fp, [sp, #24]
  405cba:	46d0      	mov	r8, sl
  405cbc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405cc0:	469a      	mov	sl, r3
  405cc2:	d0c8      	beq.n	405c56 <_dtoa_r+0xd56>
  405cc4:	f1bb 0f00 	cmp.w	fp, #0
  405cc8:	f73f aebf 	bgt.w	405a4a <_dtoa_r+0xb4a>
  405ccc:	e6bf      	b.n	405a4e <_dtoa_r+0xb4e>
  405cce:	f47f aebe 	bne.w	405a4e <_dtoa_r+0xb4e>
  405cd2:	f01a 0f01 	tst.w	sl, #1
  405cd6:	f43f aeba 	beq.w	405a4e <_dtoa_r+0xb4e>
  405cda:	e6b2      	b.n	405a42 <_dtoa_r+0xb42>
  405cdc:	f04f 0800 	mov.w	r8, #0
  405ce0:	4646      	mov	r6, r8
  405ce2:	e5e9      	b.n	4058b8 <_dtoa_r+0x9b8>
  405ce4:	4631      	mov	r1, r6
  405ce6:	2300      	movs	r3, #0
  405ce8:	220a      	movs	r2, #10
  405cea:	4620      	mov	r0, r4
  405cec:	f000 fc36 	bl	40655c <__multadd>
  405cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405cf2:	2b00      	cmp	r3, #0
  405cf4:	4606      	mov	r6, r0
  405cf6:	dd0a      	ble.n	405d0e <_dtoa_r+0xe0e>
  405cf8:	930a      	str	r3, [sp, #40]	; 0x28
  405cfa:	f7ff bbaa 	b.w	405452 <_dtoa_r+0x552>
  405cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405d00:	2b02      	cmp	r3, #2
  405d02:	dc23      	bgt.n	405d4c <_dtoa_r+0xe4c>
  405d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405d06:	e43b      	b.n	405580 <_dtoa_r+0x680>
  405d08:	f04f 0a02 	mov.w	sl, #2
  405d0c:	e4ed      	b.n	4056ea <_dtoa_r+0x7ea>
  405d0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405d10:	2b02      	cmp	r3, #2
  405d12:	dc1b      	bgt.n	405d4c <_dtoa_r+0xe4c>
  405d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405d16:	e7ef      	b.n	405cf8 <_dtoa_r+0xdf8>
  405d18:	2500      	movs	r5, #0
  405d1a:	6465      	str	r5, [r4, #68]	; 0x44
  405d1c:	4629      	mov	r1, r5
  405d1e:	4620      	mov	r0, r4
  405d20:	f000 fbec 	bl	4064fc <_Balloc>
  405d24:	f04f 33ff 	mov.w	r3, #4294967295
  405d28:	930a      	str	r3, [sp, #40]	; 0x28
  405d2a:	930f      	str	r3, [sp, #60]	; 0x3c
  405d2c:	2301      	movs	r3, #1
  405d2e:	9004      	str	r0, [sp, #16]
  405d30:	9525      	str	r5, [sp, #148]	; 0x94
  405d32:	6420      	str	r0, [r4, #64]	; 0x40
  405d34:	930b      	str	r3, [sp, #44]	; 0x2c
  405d36:	f7ff b9dd 	b.w	4050f4 <_dtoa_r+0x1f4>
  405d3a:	2501      	movs	r5, #1
  405d3c:	f7ff b9a5 	b.w	40508a <_dtoa_r+0x18a>
  405d40:	f43f ab69 	beq.w	405416 <_dtoa_r+0x516>
  405d44:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405d48:	f7ff bbf9 	b.w	40553e <_dtoa_r+0x63e>
  405d4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405d4e:	930a      	str	r3, [sp, #40]	; 0x28
  405d50:	e5e5      	b.n	40591e <_dtoa_r+0xa1e>
  405d52:	bf00      	nop

00405d54 <__libc_fini_array>:
  405d54:	b538      	push	{r3, r4, r5, lr}
  405d56:	4c0a      	ldr	r4, [pc, #40]	; (405d80 <__libc_fini_array+0x2c>)
  405d58:	4d0a      	ldr	r5, [pc, #40]	; (405d84 <__libc_fini_array+0x30>)
  405d5a:	1b64      	subs	r4, r4, r5
  405d5c:	10a4      	asrs	r4, r4, #2
  405d5e:	d00a      	beq.n	405d76 <__libc_fini_array+0x22>
  405d60:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405d64:	3b01      	subs	r3, #1
  405d66:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405d6a:	3c01      	subs	r4, #1
  405d6c:	f855 3904 	ldr.w	r3, [r5], #-4
  405d70:	4798      	blx	r3
  405d72:	2c00      	cmp	r4, #0
  405d74:	d1f9      	bne.n	405d6a <__libc_fini_array+0x16>
  405d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405d7a:	f002 be73 	b.w	408a64 <_fini>
  405d7e:	bf00      	nop
  405d80:	00408a74 	.word	0x00408a74
  405d84:	00408a70 	.word	0x00408a70

00405d88 <_localeconv_r>:
  405d88:	4a04      	ldr	r2, [pc, #16]	; (405d9c <_localeconv_r+0x14>)
  405d8a:	4b05      	ldr	r3, [pc, #20]	; (405da0 <_localeconv_r+0x18>)
  405d8c:	6812      	ldr	r2, [r2, #0]
  405d8e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  405d90:	2800      	cmp	r0, #0
  405d92:	bf08      	it	eq
  405d94:	4618      	moveq	r0, r3
  405d96:	30f0      	adds	r0, #240	; 0xf0
  405d98:	4770      	bx	lr
  405d9a:	bf00      	nop
  405d9c:	20000008 	.word	0x20000008
  405da0:	2000084c 	.word	0x2000084c

00405da4 <__retarget_lock_acquire_recursive>:
  405da4:	4770      	bx	lr
  405da6:	bf00      	nop

00405da8 <__retarget_lock_release_recursive>:
  405da8:	4770      	bx	lr
  405daa:	bf00      	nop

00405dac <_malloc_r>:
  405dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405db0:	f101 060b 	add.w	r6, r1, #11
  405db4:	2e16      	cmp	r6, #22
  405db6:	b083      	sub	sp, #12
  405db8:	4605      	mov	r5, r0
  405dba:	f240 809e 	bls.w	405efa <_malloc_r+0x14e>
  405dbe:	f036 0607 	bics.w	r6, r6, #7
  405dc2:	f100 80bd 	bmi.w	405f40 <_malloc_r+0x194>
  405dc6:	42b1      	cmp	r1, r6
  405dc8:	f200 80ba 	bhi.w	405f40 <_malloc_r+0x194>
  405dcc:	f000 fb8a 	bl	4064e4 <__malloc_lock>
  405dd0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405dd4:	f0c0 8293 	bcc.w	4062fe <_malloc_r+0x552>
  405dd8:	0a73      	lsrs	r3, r6, #9
  405dda:	f000 80b8 	beq.w	405f4e <_malloc_r+0x1a2>
  405dde:	2b04      	cmp	r3, #4
  405de0:	f200 8179 	bhi.w	4060d6 <_malloc_r+0x32a>
  405de4:	09b3      	lsrs	r3, r6, #6
  405de6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405dea:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405dee:	00c3      	lsls	r3, r0, #3
  405df0:	4fbf      	ldr	r7, [pc, #764]	; (4060f0 <_malloc_r+0x344>)
  405df2:	443b      	add	r3, r7
  405df4:	f1a3 0108 	sub.w	r1, r3, #8
  405df8:	685c      	ldr	r4, [r3, #4]
  405dfa:	42a1      	cmp	r1, r4
  405dfc:	d106      	bne.n	405e0c <_malloc_r+0x60>
  405dfe:	e00c      	b.n	405e1a <_malloc_r+0x6e>
  405e00:	2a00      	cmp	r2, #0
  405e02:	f280 80aa 	bge.w	405f5a <_malloc_r+0x1ae>
  405e06:	68e4      	ldr	r4, [r4, #12]
  405e08:	42a1      	cmp	r1, r4
  405e0a:	d006      	beq.n	405e1a <_malloc_r+0x6e>
  405e0c:	6863      	ldr	r3, [r4, #4]
  405e0e:	f023 0303 	bic.w	r3, r3, #3
  405e12:	1b9a      	subs	r2, r3, r6
  405e14:	2a0f      	cmp	r2, #15
  405e16:	ddf3      	ble.n	405e00 <_malloc_r+0x54>
  405e18:	4670      	mov	r0, lr
  405e1a:	693c      	ldr	r4, [r7, #16]
  405e1c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406104 <_malloc_r+0x358>
  405e20:	4574      	cmp	r4, lr
  405e22:	f000 81ab 	beq.w	40617c <_malloc_r+0x3d0>
  405e26:	6863      	ldr	r3, [r4, #4]
  405e28:	f023 0303 	bic.w	r3, r3, #3
  405e2c:	1b9a      	subs	r2, r3, r6
  405e2e:	2a0f      	cmp	r2, #15
  405e30:	f300 8190 	bgt.w	406154 <_malloc_r+0x3a8>
  405e34:	2a00      	cmp	r2, #0
  405e36:	f8c7 e014 	str.w	lr, [r7, #20]
  405e3a:	f8c7 e010 	str.w	lr, [r7, #16]
  405e3e:	f280 809d 	bge.w	405f7c <_malloc_r+0x1d0>
  405e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405e46:	f080 8161 	bcs.w	40610c <_malloc_r+0x360>
  405e4a:	08db      	lsrs	r3, r3, #3
  405e4c:	f103 0c01 	add.w	ip, r3, #1
  405e50:	1099      	asrs	r1, r3, #2
  405e52:	687a      	ldr	r2, [r7, #4]
  405e54:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405e58:	f8c4 8008 	str.w	r8, [r4, #8]
  405e5c:	2301      	movs	r3, #1
  405e5e:	408b      	lsls	r3, r1
  405e60:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405e64:	4313      	orrs	r3, r2
  405e66:	3908      	subs	r1, #8
  405e68:	60e1      	str	r1, [r4, #12]
  405e6a:	607b      	str	r3, [r7, #4]
  405e6c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405e70:	f8c8 400c 	str.w	r4, [r8, #12]
  405e74:	1082      	asrs	r2, r0, #2
  405e76:	2401      	movs	r4, #1
  405e78:	4094      	lsls	r4, r2
  405e7a:	429c      	cmp	r4, r3
  405e7c:	f200 808b 	bhi.w	405f96 <_malloc_r+0x1ea>
  405e80:	421c      	tst	r4, r3
  405e82:	d106      	bne.n	405e92 <_malloc_r+0xe6>
  405e84:	f020 0003 	bic.w	r0, r0, #3
  405e88:	0064      	lsls	r4, r4, #1
  405e8a:	421c      	tst	r4, r3
  405e8c:	f100 0004 	add.w	r0, r0, #4
  405e90:	d0fa      	beq.n	405e88 <_malloc_r+0xdc>
  405e92:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405e96:	46cc      	mov	ip, r9
  405e98:	4680      	mov	r8, r0
  405e9a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405e9e:	459c      	cmp	ip, r3
  405ea0:	d107      	bne.n	405eb2 <_malloc_r+0x106>
  405ea2:	e16d      	b.n	406180 <_malloc_r+0x3d4>
  405ea4:	2a00      	cmp	r2, #0
  405ea6:	f280 817b 	bge.w	4061a0 <_malloc_r+0x3f4>
  405eaa:	68db      	ldr	r3, [r3, #12]
  405eac:	459c      	cmp	ip, r3
  405eae:	f000 8167 	beq.w	406180 <_malloc_r+0x3d4>
  405eb2:	6859      	ldr	r1, [r3, #4]
  405eb4:	f021 0103 	bic.w	r1, r1, #3
  405eb8:	1b8a      	subs	r2, r1, r6
  405eba:	2a0f      	cmp	r2, #15
  405ebc:	ddf2      	ble.n	405ea4 <_malloc_r+0xf8>
  405ebe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405ec2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405ec6:	9300      	str	r3, [sp, #0]
  405ec8:	199c      	adds	r4, r3, r6
  405eca:	4628      	mov	r0, r5
  405ecc:	f046 0601 	orr.w	r6, r6, #1
  405ed0:	f042 0501 	orr.w	r5, r2, #1
  405ed4:	605e      	str	r6, [r3, #4]
  405ed6:	f8c8 c00c 	str.w	ip, [r8, #12]
  405eda:	f8cc 8008 	str.w	r8, [ip, #8]
  405ede:	617c      	str	r4, [r7, #20]
  405ee0:	613c      	str	r4, [r7, #16]
  405ee2:	f8c4 e00c 	str.w	lr, [r4, #12]
  405ee6:	f8c4 e008 	str.w	lr, [r4, #8]
  405eea:	6065      	str	r5, [r4, #4]
  405eec:	505a      	str	r2, [r3, r1]
  405eee:	f000 faff 	bl	4064f0 <__malloc_unlock>
  405ef2:	9b00      	ldr	r3, [sp, #0]
  405ef4:	f103 0408 	add.w	r4, r3, #8
  405ef8:	e01e      	b.n	405f38 <_malloc_r+0x18c>
  405efa:	2910      	cmp	r1, #16
  405efc:	d820      	bhi.n	405f40 <_malloc_r+0x194>
  405efe:	f000 faf1 	bl	4064e4 <__malloc_lock>
  405f02:	2610      	movs	r6, #16
  405f04:	2318      	movs	r3, #24
  405f06:	2002      	movs	r0, #2
  405f08:	4f79      	ldr	r7, [pc, #484]	; (4060f0 <_malloc_r+0x344>)
  405f0a:	443b      	add	r3, r7
  405f0c:	f1a3 0208 	sub.w	r2, r3, #8
  405f10:	685c      	ldr	r4, [r3, #4]
  405f12:	4294      	cmp	r4, r2
  405f14:	f000 813d 	beq.w	406192 <_malloc_r+0x3e6>
  405f18:	6863      	ldr	r3, [r4, #4]
  405f1a:	68e1      	ldr	r1, [r4, #12]
  405f1c:	68a6      	ldr	r6, [r4, #8]
  405f1e:	f023 0303 	bic.w	r3, r3, #3
  405f22:	4423      	add	r3, r4
  405f24:	4628      	mov	r0, r5
  405f26:	685a      	ldr	r2, [r3, #4]
  405f28:	60f1      	str	r1, [r6, #12]
  405f2a:	f042 0201 	orr.w	r2, r2, #1
  405f2e:	608e      	str	r6, [r1, #8]
  405f30:	605a      	str	r2, [r3, #4]
  405f32:	f000 fadd 	bl	4064f0 <__malloc_unlock>
  405f36:	3408      	adds	r4, #8
  405f38:	4620      	mov	r0, r4
  405f3a:	b003      	add	sp, #12
  405f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f40:	2400      	movs	r4, #0
  405f42:	230c      	movs	r3, #12
  405f44:	4620      	mov	r0, r4
  405f46:	602b      	str	r3, [r5, #0]
  405f48:	b003      	add	sp, #12
  405f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f4e:	2040      	movs	r0, #64	; 0x40
  405f50:	f44f 7300 	mov.w	r3, #512	; 0x200
  405f54:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405f58:	e74a      	b.n	405df0 <_malloc_r+0x44>
  405f5a:	4423      	add	r3, r4
  405f5c:	68e1      	ldr	r1, [r4, #12]
  405f5e:	685a      	ldr	r2, [r3, #4]
  405f60:	68a6      	ldr	r6, [r4, #8]
  405f62:	f042 0201 	orr.w	r2, r2, #1
  405f66:	60f1      	str	r1, [r6, #12]
  405f68:	4628      	mov	r0, r5
  405f6a:	608e      	str	r6, [r1, #8]
  405f6c:	605a      	str	r2, [r3, #4]
  405f6e:	f000 fabf 	bl	4064f0 <__malloc_unlock>
  405f72:	3408      	adds	r4, #8
  405f74:	4620      	mov	r0, r4
  405f76:	b003      	add	sp, #12
  405f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f7c:	4423      	add	r3, r4
  405f7e:	4628      	mov	r0, r5
  405f80:	685a      	ldr	r2, [r3, #4]
  405f82:	f042 0201 	orr.w	r2, r2, #1
  405f86:	605a      	str	r2, [r3, #4]
  405f88:	f000 fab2 	bl	4064f0 <__malloc_unlock>
  405f8c:	3408      	adds	r4, #8
  405f8e:	4620      	mov	r0, r4
  405f90:	b003      	add	sp, #12
  405f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f96:	68bc      	ldr	r4, [r7, #8]
  405f98:	6863      	ldr	r3, [r4, #4]
  405f9a:	f023 0803 	bic.w	r8, r3, #3
  405f9e:	45b0      	cmp	r8, r6
  405fa0:	d304      	bcc.n	405fac <_malloc_r+0x200>
  405fa2:	eba8 0306 	sub.w	r3, r8, r6
  405fa6:	2b0f      	cmp	r3, #15
  405fa8:	f300 8085 	bgt.w	4060b6 <_malloc_r+0x30a>
  405fac:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406108 <_malloc_r+0x35c>
  405fb0:	4b50      	ldr	r3, [pc, #320]	; (4060f4 <_malloc_r+0x348>)
  405fb2:	f8d9 2000 	ldr.w	r2, [r9]
  405fb6:	681b      	ldr	r3, [r3, #0]
  405fb8:	3201      	adds	r2, #1
  405fba:	4433      	add	r3, r6
  405fbc:	eb04 0a08 	add.w	sl, r4, r8
  405fc0:	f000 8155 	beq.w	40626e <_malloc_r+0x4c2>
  405fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405fc8:	330f      	adds	r3, #15
  405fca:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405fce:	f02b 0b0f 	bic.w	fp, fp, #15
  405fd2:	4659      	mov	r1, fp
  405fd4:	4628      	mov	r0, r5
  405fd6:	f000 fd8b 	bl	406af0 <_sbrk_r>
  405fda:	1c41      	adds	r1, r0, #1
  405fdc:	4602      	mov	r2, r0
  405fde:	f000 80fc 	beq.w	4061da <_malloc_r+0x42e>
  405fe2:	4582      	cmp	sl, r0
  405fe4:	f200 80f7 	bhi.w	4061d6 <_malloc_r+0x42a>
  405fe8:	4b43      	ldr	r3, [pc, #268]	; (4060f8 <_malloc_r+0x34c>)
  405fea:	6819      	ldr	r1, [r3, #0]
  405fec:	4459      	add	r1, fp
  405fee:	6019      	str	r1, [r3, #0]
  405ff0:	f000 814d 	beq.w	40628e <_malloc_r+0x4e2>
  405ff4:	f8d9 0000 	ldr.w	r0, [r9]
  405ff8:	3001      	adds	r0, #1
  405ffa:	bf1b      	ittet	ne
  405ffc:	eba2 0a0a 	subne.w	sl, r2, sl
  406000:	4451      	addne	r1, sl
  406002:	f8c9 2000 	streq.w	r2, [r9]
  406006:	6019      	strne	r1, [r3, #0]
  406008:	f012 0107 	ands.w	r1, r2, #7
  40600c:	f000 8115 	beq.w	40623a <_malloc_r+0x48e>
  406010:	f1c1 0008 	rsb	r0, r1, #8
  406014:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406018:	4402      	add	r2, r0
  40601a:	3108      	adds	r1, #8
  40601c:	eb02 090b 	add.w	r9, r2, fp
  406020:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406024:	eba1 0909 	sub.w	r9, r1, r9
  406028:	4649      	mov	r1, r9
  40602a:	4628      	mov	r0, r5
  40602c:	9301      	str	r3, [sp, #4]
  40602e:	9200      	str	r2, [sp, #0]
  406030:	f000 fd5e 	bl	406af0 <_sbrk_r>
  406034:	1c43      	adds	r3, r0, #1
  406036:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40603a:	f000 8143 	beq.w	4062c4 <_malloc_r+0x518>
  40603e:	1a80      	subs	r0, r0, r2
  406040:	4448      	add	r0, r9
  406042:	f040 0001 	orr.w	r0, r0, #1
  406046:	6819      	ldr	r1, [r3, #0]
  406048:	60ba      	str	r2, [r7, #8]
  40604a:	4449      	add	r1, r9
  40604c:	42bc      	cmp	r4, r7
  40604e:	6050      	str	r0, [r2, #4]
  406050:	6019      	str	r1, [r3, #0]
  406052:	d017      	beq.n	406084 <_malloc_r+0x2d8>
  406054:	f1b8 0f0f 	cmp.w	r8, #15
  406058:	f240 80fb 	bls.w	406252 <_malloc_r+0x4a6>
  40605c:	6860      	ldr	r0, [r4, #4]
  40605e:	f1a8 020c 	sub.w	r2, r8, #12
  406062:	f022 0207 	bic.w	r2, r2, #7
  406066:	eb04 0e02 	add.w	lr, r4, r2
  40606a:	f000 0001 	and.w	r0, r0, #1
  40606e:	f04f 0c05 	mov.w	ip, #5
  406072:	4310      	orrs	r0, r2
  406074:	2a0f      	cmp	r2, #15
  406076:	6060      	str	r0, [r4, #4]
  406078:	f8ce c004 	str.w	ip, [lr, #4]
  40607c:	f8ce c008 	str.w	ip, [lr, #8]
  406080:	f200 8117 	bhi.w	4062b2 <_malloc_r+0x506>
  406084:	4b1d      	ldr	r3, [pc, #116]	; (4060fc <_malloc_r+0x350>)
  406086:	68bc      	ldr	r4, [r7, #8]
  406088:	681a      	ldr	r2, [r3, #0]
  40608a:	4291      	cmp	r1, r2
  40608c:	bf88      	it	hi
  40608e:	6019      	strhi	r1, [r3, #0]
  406090:	4b1b      	ldr	r3, [pc, #108]	; (406100 <_malloc_r+0x354>)
  406092:	681a      	ldr	r2, [r3, #0]
  406094:	4291      	cmp	r1, r2
  406096:	6862      	ldr	r2, [r4, #4]
  406098:	bf88      	it	hi
  40609a:	6019      	strhi	r1, [r3, #0]
  40609c:	f022 0203 	bic.w	r2, r2, #3
  4060a0:	4296      	cmp	r6, r2
  4060a2:	eba2 0306 	sub.w	r3, r2, r6
  4060a6:	d801      	bhi.n	4060ac <_malloc_r+0x300>
  4060a8:	2b0f      	cmp	r3, #15
  4060aa:	dc04      	bgt.n	4060b6 <_malloc_r+0x30a>
  4060ac:	4628      	mov	r0, r5
  4060ae:	f000 fa1f 	bl	4064f0 <__malloc_unlock>
  4060b2:	2400      	movs	r4, #0
  4060b4:	e740      	b.n	405f38 <_malloc_r+0x18c>
  4060b6:	19a2      	adds	r2, r4, r6
  4060b8:	f043 0301 	orr.w	r3, r3, #1
  4060bc:	f046 0601 	orr.w	r6, r6, #1
  4060c0:	6066      	str	r6, [r4, #4]
  4060c2:	4628      	mov	r0, r5
  4060c4:	60ba      	str	r2, [r7, #8]
  4060c6:	6053      	str	r3, [r2, #4]
  4060c8:	f000 fa12 	bl	4064f0 <__malloc_unlock>
  4060cc:	3408      	adds	r4, #8
  4060ce:	4620      	mov	r0, r4
  4060d0:	b003      	add	sp, #12
  4060d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4060d6:	2b14      	cmp	r3, #20
  4060d8:	d971      	bls.n	4061be <_malloc_r+0x412>
  4060da:	2b54      	cmp	r3, #84	; 0x54
  4060dc:	f200 80a3 	bhi.w	406226 <_malloc_r+0x47a>
  4060e0:	0b33      	lsrs	r3, r6, #12
  4060e2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4060e6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4060ea:	00c3      	lsls	r3, r0, #3
  4060ec:	e680      	b.n	405df0 <_malloc_r+0x44>
  4060ee:	bf00      	nop
  4060f0:	2000043c 	.word	0x2000043c
  4060f4:	20000abc 	.word	0x20000abc
  4060f8:	20000a8c 	.word	0x20000a8c
  4060fc:	20000ab4 	.word	0x20000ab4
  406100:	20000ab8 	.word	0x20000ab8
  406104:	20000444 	.word	0x20000444
  406108:	20000844 	.word	0x20000844
  40610c:	0a5a      	lsrs	r2, r3, #9
  40610e:	2a04      	cmp	r2, #4
  406110:	d95b      	bls.n	4061ca <_malloc_r+0x41e>
  406112:	2a14      	cmp	r2, #20
  406114:	f200 80ae 	bhi.w	406274 <_malloc_r+0x4c8>
  406118:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40611c:	00c9      	lsls	r1, r1, #3
  40611e:	325b      	adds	r2, #91	; 0x5b
  406120:	eb07 0c01 	add.w	ip, r7, r1
  406124:	5879      	ldr	r1, [r7, r1]
  406126:	f1ac 0c08 	sub.w	ip, ip, #8
  40612a:	458c      	cmp	ip, r1
  40612c:	f000 8088 	beq.w	406240 <_malloc_r+0x494>
  406130:	684a      	ldr	r2, [r1, #4]
  406132:	f022 0203 	bic.w	r2, r2, #3
  406136:	4293      	cmp	r3, r2
  406138:	d273      	bcs.n	406222 <_malloc_r+0x476>
  40613a:	6889      	ldr	r1, [r1, #8]
  40613c:	458c      	cmp	ip, r1
  40613e:	d1f7      	bne.n	406130 <_malloc_r+0x384>
  406140:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406144:	687b      	ldr	r3, [r7, #4]
  406146:	60e2      	str	r2, [r4, #12]
  406148:	f8c4 c008 	str.w	ip, [r4, #8]
  40614c:	6094      	str	r4, [r2, #8]
  40614e:	f8cc 400c 	str.w	r4, [ip, #12]
  406152:	e68f      	b.n	405e74 <_malloc_r+0xc8>
  406154:	19a1      	adds	r1, r4, r6
  406156:	f046 0c01 	orr.w	ip, r6, #1
  40615a:	f042 0601 	orr.w	r6, r2, #1
  40615e:	f8c4 c004 	str.w	ip, [r4, #4]
  406162:	4628      	mov	r0, r5
  406164:	6179      	str	r1, [r7, #20]
  406166:	6139      	str	r1, [r7, #16]
  406168:	f8c1 e00c 	str.w	lr, [r1, #12]
  40616c:	f8c1 e008 	str.w	lr, [r1, #8]
  406170:	604e      	str	r6, [r1, #4]
  406172:	50e2      	str	r2, [r4, r3]
  406174:	f000 f9bc 	bl	4064f0 <__malloc_unlock>
  406178:	3408      	adds	r4, #8
  40617a:	e6dd      	b.n	405f38 <_malloc_r+0x18c>
  40617c:	687b      	ldr	r3, [r7, #4]
  40617e:	e679      	b.n	405e74 <_malloc_r+0xc8>
  406180:	f108 0801 	add.w	r8, r8, #1
  406184:	f018 0f03 	tst.w	r8, #3
  406188:	f10c 0c08 	add.w	ip, ip, #8
  40618c:	f47f ae85 	bne.w	405e9a <_malloc_r+0xee>
  406190:	e02d      	b.n	4061ee <_malloc_r+0x442>
  406192:	68dc      	ldr	r4, [r3, #12]
  406194:	42a3      	cmp	r3, r4
  406196:	bf08      	it	eq
  406198:	3002      	addeq	r0, #2
  40619a:	f43f ae3e 	beq.w	405e1a <_malloc_r+0x6e>
  40619e:	e6bb      	b.n	405f18 <_malloc_r+0x16c>
  4061a0:	4419      	add	r1, r3
  4061a2:	461c      	mov	r4, r3
  4061a4:	684a      	ldr	r2, [r1, #4]
  4061a6:	68db      	ldr	r3, [r3, #12]
  4061a8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4061ac:	f042 0201 	orr.w	r2, r2, #1
  4061b0:	604a      	str	r2, [r1, #4]
  4061b2:	4628      	mov	r0, r5
  4061b4:	60f3      	str	r3, [r6, #12]
  4061b6:	609e      	str	r6, [r3, #8]
  4061b8:	f000 f99a 	bl	4064f0 <__malloc_unlock>
  4061bc:	e6bc      	b.n	405f38 <_malloc_r+0x18c>
  4061be:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4061c2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4061c6:	00c3      	lsls	r3, r0, #3
  4061c8:	e612      	b.n	405df0 <_malloc_r+0x44>
  4061ca:	099a      	lsrs	r2, r3, #6
  4061cc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4061d0:	00c9      	lsls	r1, r1, #3
  4061d2:	3238      	adds	r2, #56	; 0x38
  4061d4:	e7a4      	b.n	406120 <_malloc_r+0x374>
  4061d6:	42bc      	cmp	r4, r7
  4061d8:	d054      	beq.n	406284 <_malloc_r+0x4d8>
  4061da:	68bc      	ldr	r4, [r7, #8]
  4061dc:	6862      	ldr	r2, [r4, #4]
  4061de:	f022 0203 	bic.w	r2, r2, #3
  4061e2:	e75d      	b.n	4060a0 <_malloc_r+0x2f4>
  4061e4:	f859 3908 	ldr.w	r3, [r9], #-8
  4061e8:	4599      	cmp	r9, r3
  4061ea:	f040 8086 	bne.w	4062fa <_malloc_r+0x54e>
  4061ee:	f010 0f03 	tst.w	r0, #3
  4061f2:	f100 30ff 	add.w	r0, r0, #4294967295
  4061f6:	d1f5      	bne.n	4061e4 <_malloc_r+0x438>
  4061f8:	687b      	ldr	r3, [r7, #4]
  4061fa:	ea23 0304 	bic.w	r3, r3, r4
  4061fe:	607b      	str	r3, [r7, #4]
  406200:	0064      	lsls	r4, r4, #1
  406202:	429c      	cmp	r4, r3
  406204:	f63f aec7 	bhi.w	405f96 <_malloc_r+0x1ea>
  406208:	2c00      	cmp	r4, #0
  40620a:	f43f aec4 	beq.w	405f96 <_malloc_r+0x1ea>
  40620e:	421c      	tst	r4, r3
  406210:	4640      	mov	r0, r8
  406212:	f47f ae3e 	bne.w	405e92 <_malloc_r+0xe6>
  406216:	0064      	lsls	r4, r4, #1
  406218:	421c      	tst	r4, r3
  40621a:	f100 0004 	add.w	r0, r0, #4
  40621e:	d0fa      	beq.n	406216 <_malloc_r+0x46a>
  406220:	e637      	b.n	405e92 <_malloc_r+0xe6>
  406222:	468c      	mov	ip, r1
  406224:	e78c      	b.n	406140 <_malloc_r+0x394>
  406226:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40622a:	d815      	bhi.n	406258 <_malloc_r+0x4ac>
  40622c:	0bf3      	lsrs	r3, r6, #15
  40622e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406232:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406236:	00c3      	lsls	r3, r0, #3
  406238:	e5da      	b.n	405df0 <_malloc_r+0x44>
  40623a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40623e:	e6ed      	b.n	40601c <_malloc_r+0x270>
  406240:	687b      	ldr	r3, [r7, #4]
  406242:	1092      	asrs	r2, r2, #2
  406244:	2101      	movs	r1, #1
  406246:	fa01 f202 	lsl.w	r2, r1, r2
  40624a:	4313      	orrs	r3, r2
  40624c:	607b      	str	r3, [r7, #4]
  40624e:	4662      	mov	r2, ip
  406250:	e779      	b.n	406146 <_malloc_r+0x39a>
  406252:	2301      	movs	r3, #1
  406254:	6053      	str	r3, [r2, #4]
  406256:	e729      	b.n	4060ac <_malloc_r+0x300>
  406258:	f240 5254 	movw	r2, #1364	; 0x554
  40625c:	4293      	cmp	r3, r2
  40625e:	d822      	bhi.n	4062a6 <_malloc_r+0x4fa>
  406260:	0cb3      	lsrs	r3, r6, #18
  406262:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406266:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40626a:	00c3      	lsls	r3, r0, #3
  40626c:	e5c0      	b.n	405df0 <_malloc_r+0x44>
  40626e:	f103 0b10 	add.w	fp, r3, #16
  406272:	e6ae      	b.n	405fd2 <_malloc_r+0x226>
  406274:	2a54      	cmp	r2, #84	; 0x54
  406276:	d829      	bhi.n	4062cc <_malloc_r+0x520>
  406278:	0b1a      	lsrs	r2, r3, #12
  40627a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40627e:	00c9      	lsls	r1, r1, #3
  406280:	326e      	adds	r2, #110	; 0x6e
  406282:	e74d      	b.n	406120 <_malloc_r+0x374>
  406284:	4b20      	ldr	r3, [pc, #128]	; (406308 <_malloc_r+0x55c>)
  406286:	6819      	ldr	r1, [r3, #0]
  406288:	4459      	add	r1, fp
  40628a:	6019      	str	r1, [r3, #0]
  40628c:	e6b2      	b.n	405ff4 <_malloc_r+0x248>
  40628e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406292:	2800      	cmp	r0, #0
  406294:	f47f aeae 	bne.w	405ff4 <_malloc_r+0x248>
  406298:	eb08 030b 	add.w	r3, r8, fp
  40629c:	68ba      	ldr	r2, [r7, #8]
  40629e:	f043 0301 	orr.w	r3, r3, #1
  4062a2:	6053      	str	r3, [r2, #4]
  4062a4:	e6ee      	b.n	406084 <_malloc_r+0x2d8>
  4062a6:	207f      	movs	r0, #127	; 0x7f
  4062a8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4062ac:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4062b0:	e59e      	b.n	405df0 <_malloc_r+0x44>
  4062b2:	f104 0108 	add.w	r1, r4, #8
  4062b6:	4628      	mov	r0, r5
  4062b8:	9300      	str	r3, [sp, #0]
  4062ba:	f000 fe0f 	bl	406edc <_free_r>
  4062be:	9b00      	ldr	r3, [sp, #0]
  4062c0:	6819      	ldr	r1, [r3, #0]
  4062c2:	e6df      	b.n	406084 <_malloc_r+0x2d8>
  4062c4:	2001      	movs	r0, #1
  4062c6:	f04f 0900 	mov.w	r9, #0
  4062ca:	e6bc      	b.n	406046 <_malloc_r+0x29a>
  4062cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4062d0:	d805      	bhi.n	4062de <_malloc_r+0x532>
  4062d2:	0bda      	lsrs	r2, r3, #15
  4062d4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4062d8:	00c9      	lsls	r1, r1, #3
  4062da:	3277      	adds	r2, #119	; 0x77
  4062dc:	e720      	b.n	406120 <_malloc_r+0x374>
  4062de:	f240 5154 	movw	r1, #1364	; 0x554
  4062e2:	428a      	cmp	r2, r1
  4062e4:	d805      	bhi.n	4062f2 <_malloc_r+0x546>
  4062e6:	0c9a      	lsrs	r2, r3, #18
  4062e8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4062ec:	00c9      	lsls	r1, r1, #3
  4062ee:	327c      	adds	r2, #124	; 0x7c
  4062f0:	e716      	b.n	406120 <_malloc_r+0x374>
  4062f2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4062f6:	227e      	movs	r2, #126	; 0x7e
  4062f8:	e712      	b.n	406120 <_malloc_r+0x374>
  4062fa:	687b      	ldr	r3, [r7, #4]
  4062fc:	e780      	b.n	406200 <_malloc_r+0x454>
  4062fe:	08f0      	lsrs	r0, r6, #3
  406300:	f106 0308 	add.w	r3, r6, #8
  406304:	e600      	b.n	405f08 <_malloc_r+0x15c>
  406306:	bf00      	nop
  406308:	20000a8c 	.word	0x20000a8c
  40630c:	00000000 	.word	0x00000000

00406310 <memchr>:
  406310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406314:	2a10      	cmp	r2, #16
  406316:	db2b      	blt.n	406370 <memchr+0x60>
  406318:	f010 0f07 	tst.w	r0, #7
  40631c:	d008      	beq.n	406330 <memchr+0x20>
  40631e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406322:	3a01      	subs	r2, #1
  406324:	428b      	cmp	r3, r1
  406326:	d02d      	beq.n	406384 <memchr+0x74>
  406328:	f010 0f07 	tst.w	r0, #7
  40632c:	b342      	cbz	r2, 406380 <memchr+0x70>
  40632e:	d1f6      	bne.n	40631e <memchr+0xe>
  406330:	b4f0      	push	{r4, r5, r6, r7}
  406332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40633a:	f022 0407 	bic.w	r4, r2, #7
  40633e:	f07f 0700 	mvns.w	r7, #0
  406342:	2300      	movs	r3, #0
  406344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406348:	3c08      	subs	r4, #8
  40634a:	ea85 0501 	eor.w	r5, r5, r1
  40634e:	ea86 0601 	eor.w	r6, r6, r1
  406352:	fa85 f547 	uadd8	r5, r5, r7
  406356:	faa3 f587 	sel	r5, r3, r7
  40635a:	fa86 f647 	uadd8	r6, r6, r7
  40635e:	faa5 f687 	sel	r6, r5, r7
  406362:	b98e      	cbnz	r6, 406388 <memchr+0x78>
  406364:	d1ee      	bne.n	406344 <memchr+0x34>
  406366:	bcf0      	pop	{r4, r5, r6, r7}
  406368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40636c:	f002 0207 	and.w	r2, r2, #7
  406370:	b132      	cbz	r2, 406380 <memchr+0x70>
  406372:	f810 3b01 	ldrb.w	r3, [r0], #1
  406376:	3a01      	subs	r2, #1
  406378:	ea83 0301 	eor.w	r3, r3, r1
  40637c:	b113      	cbz	r3, 406384 <memchr+0x74>
  40637e:	d1f8      	bne.n	406372 <memchr+0x62>
  406380:	2000      	movs	r0, #0
  406382:	4770      	bx	lr
  406384:	3801      	subs	r0, #1
  406386:	4770      	bx	lr
  406388:	2d00      	cmp	r5, #0
  40638a:	bf06      	itte	eq
  40638c:	4635      	moveq	r5, r6
  40638e:	3803      	subeq	r0, #3
  406390:	3807      	subne	r0, #7
  406392:	f015 0f01 	tst.w	r5, #1
  406396:	d107      	bne.n	4063a8 <memchr+0x98>
  406398:	3001      	adds	r0, #1
  40639a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40639e:	bf02      	ittt	eq
  4063a0:	3001      	addeq	r0, #1
  4063a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4063a6:	3001      	addeq	r0, #1
  4063a8:	bcf0      	pop	{r4, r5, r6, r7}
  4063aa:	3801      	subs	r0, #1
  4063ac:	4770      	bx	lr
  4063ae:	bf00      	nop

004063b0 <memcpy>:
  4063b0:	4684      	mov	ip, r0
  4063b2:	ea41 0300 	orr.w	r3, r1, r0
  4063b6:	f013 0303 	ands.w	r3, r3, #3
  4063ba:	d16d      	bne.n	406498 <memcpy+0xe8>
  4063bc:	3a40      	subs	r2, #64	; 0x40
  4063be:	d341      	bcc.n	406444 <memcpy+0x94>
  4063c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063c4:	f840 3b04 	str.w	r3, [r0], #4
  4063c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063cc:	f840 3b04 	str.w	r3, [r0], #4
  4063d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063d4:	f840 3b04 	str.w	r3, [r0], #4
  4063d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063dc:	f840 3b04 	str.w	r3, [r0], #4
  4063e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063e4:	f840 3b04 	str.w	r3, [r0], #4
  4063e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063ec:	f840 3b04 	str.w	r3, [r0], #4
  4063f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4063f4:	f840 3b04 	str.w	r3, [r0], #4
  4063f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4063fc:	f840 3b04 	str.w	r3, [r0], #4
  406400:	f851 3b04 	ldr.w	r3, [r1], #4
  406404:	f840 3b04 	str.w	r3, [r0], #4
  406408:	f851 3b04 	ldr.w	r3, [r1], #4
  40640c:	f840 3b04 	str.w	r3, [r0], #4
  406410:	f851 3b04 	ldr.w	r3, [r1], #4
  406414:	f840 3b04 	str.w	r3, [r0], #4
  406418:	f851 3b04 	ldr.w	r3, [r1], #4
  40641c:	f840 3b04 	str.w	r3, [r0], #4
  406420:	f851 3b04 	ldr.w	r3, [r1], #4
  406424:	f840 3b04 	str.w	r3, [r0], #4
  406428:	f851 3b04 	ldr.w	r3, [r1], #4
  40642c:	f840 3b04 	str.w	r3, [r0], #4
  406430:	f851 3b04 	ldr.w	r3, [r1], #4
  406434:	f840 3b04 	str.w	r3, [r0], #4
  406438:	f851 3b04 	ldr.w	r3, [r1], #4
  40643c:	f840 3b04 	str.w	r3, [r0], #4
  406440:	3a40      	subs	r2, #64	; 0x40
  406442:	d2bd      	bcs.n	4063c0 <memcpy+0x10>
  406444:	3230      	adds	r2, #48	; 0x30
  406446:	d311      	bcc.n	40646c <memcpy+0xbc>
  406448:	f851 3b04 	ldr.w	r3, [r1], #4
  40644c:	f840 3b04 	str.w	r3, [r0], #4
  406450:	f851 3b04 	ldr.w	r3, [r1], #4
  406454:	f840 3b04 	str.w	r3, [r0], #4
  406458:	f851 3b04 	ldr.w	r3, [r1], #4
  40645c:	f840 3b04 	str.w	r3, [r0], #4
  406460:	f851 3b04 	ldr.w	r3, [r1], #4
  406464:	f840 3b04 	str.w	r3, [r0], #4
  406468:	3a10      	subs	r2, #16
  40646a:	d2ed      	bcs.n	406448 <memcpy+0x98>
  40646c:	320c      	adds	r2, #12
  40646e:	d305      	bcc.n	40647c <memcpy+0xcc>
  406470:	f851 3b04 	ldr.w	r3, [r1], #4
  406474:	f840 3b04 	str.w	r3, [r0], #4
  406478:	3a04      	subs	r2, #4
  40647a:	d2f9      	bcs.n	406470 <memcpy+0xc0>
  40647c:	3204      	adds	r2, #4
  40647e:	d008      	beq.n	406492 <memcpy+0xe2>
  406480:	07d2      	lsls	r2, r2, #31
  406482:	bf1c      	itt	ne
  406484:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406488:	f800 3b01 	strbne.w	r3, [r0], #1
  40648c:	d301      	bcc.n	406492 <memcpy+0xe2>
  40648e:	880b      	ldrh	r3, [r1, #0]
  406490:	8003      	strh	r3, [r0, #0]
  406492:	4660      	mov	r0, ip
  406494:	4770      	bx	lr
  406496:	bf00      	nop
  406498:	2a08      	cmp	r2, #8
  40649a:	d313      	bcc.n	4064c4 <memcpy+0x114>
  40649c:	078b      	lsls	r3, r1, #30
  40649e:	d08d      	beq.n	4063bc <memcpy+0xc>
  4064a0:	f010 0303 	ands.w	r3, r0, #3
  4064a4:	d08a      	beq.n	4063bc <memcpy+0xc>
  4064a6:	f1c3 0304 	rsb	r3, r3, #4
  4064aa:	1ad2      	subs	r2, r2, r3
  4064ac:	07db      	lsls	r3, r3, #31
  4064ae:	bf1c      	itt	ne
  4064b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4064b4:	f800 3b01 	strbne.w	r3, [r0], #1
  4064b8:	d380      	bcc.n	4063bc <memcpy+0xc>
  4064ba:	f831 3b02 	ldrh.w	r3, [r1], #2
  4064be:	f820 3b02 	strh.w	r3, [r0], #2
  4064c2:	e77b      	b.n	4063bc <memcpy+0xc>
  4064c4:	3a04      	subs	r2, #4
  4064c6:	d3d9      	bcc.n	40647c <memcpy+0xcc>
  4064c8:	3a01      	subs	r2, #1
  4064ca:	f811 3b01 	ldrb.w	r3, [r1], #1
  4064ce:	f800 3b01 	strb.w	r3, [r0], #1
  4064d2:	d2f9      	bcs.n	4064c8 <memcpy+0x118>
  4064d4:	780b      	ldrb	r3, [r1, #0]
  4064d6:	7003      	strb	r3, [r0, #0]
  4064d8:	784b      	ldrb	r3, [r1, #1]
  4064da:	7043      	strb	r3, [r0, #1]
  4064dc:	788b      	ldrb	r3, [r1, #2]
  4064de:	7083      	strb	r3, [r0, #2]
  4064e0:	4660      	mov	r0, ip
  4064e2:	4770      	bx	lr

004064e4 <__malloc_lock>:
  4064e4:	4801      	ldr	r0, [pc, #4]	; (4064ec <__malloc_lock+0x8>)
  4064e6:	f7ff bc5d 	b.w	405da4 <__retarget_lock_acquire_recursive>
  4064ea:	bf00      	nop
  4064ec:	20000ad4 	.word	0x20000ad4

004064f0 <__malloc_unlock>:
  4064f0:	4801      	ldr	r0, [pc, #4]	; (4064f8 <__malloc_unlock+0x8>)
  4064f2:	f7ff bc59 	b.w	405da8 <__retarget_lock_release_recursive>
  4064f6:	bf00      	nop
  4064f8:	20000ad4 	.word	0x20000ad4

004064fc <_Balloc>:
  4064fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4064fe:	b570      	push	{r4, r5, r6, lr}
  406500:	4605      	mov	r5, r0
  406502:	460c      	mov	r4, r1
  406504:	b14b      	cbz	r3, 40651a <_Balloc+0x1e>
  406506:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40650a:	b180      	cbz	r0, 40652e <_Balloc+0x32>
  40650c:	6802      	ldr	r2, [r0, #0]
  40650e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406512:	2300      	movs	r3, #0
  406514:	6103      	str	r3, [r0, #16]
  406516:	60c3      	str	r3, [r0, #12]
  406518:	bd70      	pop	{r4, r5, r6, pc}
  40651a:	2221      	movs	r2, #33	; 0x21
  40651c:	2104      	movs	r1, #4
  40651e:	f000 fc5d 	bl	406ddc <_calloc_r>
  406522:	64e8      	str	r0, [r5, #76]	; 0x4c
  406524:	4603      	mov	r3, r0
  406526:	2800      	cmp	r0, #0
  406528:	d1ed      	bne.n	406506 <_Balloc+0xa>
  40652a:	2000      	movs	r0, #0
  40652c:	bd70      	pop	{r4, r5, r6, pc}
  40652e:	2101      	movs	r1, #1
  406530:	fa01 f604 	lsl.w	r6, r1, r4
  406534:	1d72      	adds	r2, r6, #5
  406536:	4628      	mov	r0, r5
  406538:	0092      	lsls	r2, r2, #2
  40653a:	f000 fc4f 	bl	406ddc <_calloc_r>
  40653e:	2800      	cmp	r0, #0
  406540:	d0f3      	beq.n	40652a <_Balloc+0x2e>
  406542:	6044      	str	r4, [r0, #4]
  406544:	6086      	str	r6, [r0, #8]
  406546:	e7e4      	b.n	406512 <_Balloc+0x16>

00406548 <_Bfree>:
  406548:	b131      	cbz	r1, 406558 <_Bfree+0x10>
  40654a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40654c:	684a      	ldr	r2, [r1, #4]
  40654e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406552:	6008      	str	r0, [r1, #0]
  406554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406558:	4770      	bx	lr
  40655a:	bf00      	nop

0040655c <__multadd>:
  40655c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40655e:	690c      	ldr	r4, [r1, #16]
  406560:	b083      	sub	sp, #12
  406562:	460d      	mov	r5, r1
  406564:	4606      	mov	r6, r0
  406566:	f101 0e14 	add.w	lr, r1, #20
  40656a:	2700      	movs	r7, #0
  40656c:	f8de 0000 	ldr.w	r0, [lr]
  406570:	b281      	uxth	r1, r0
  406572:	fb02 3301 	mla	r3, r2, r1, r3
  406576:	0c01      	lsrs	r1, r0, #16
  406578:	0c18      	lsrs	r0, r3, #16
  40657a:	fb02 0101 	mla	r1, r2, r1, r0
  40657e:	b29b      	uxth	r3, r3
  406580:	3701      	adds	r7, #1
  406582:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406586:	42bc      	cmp	r4, r7
  406588:	f84e 3b04 	str.w	r3, [lr], #4
  40658c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406590:	dcec      	bgt.n	40656c <__multadd+0x10>
  406592:	b13b      	cbz	r3, 4065a4 <__multadd+0x48>
  406594:	68aa      	ldr	r2, [r5, #8]
  406596:	4294      	cmp	r4, r2
  406598:	da07      	bge.n	4065aa <__multadd+0x4e>
  40659a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40659e:	3401      	adds	r4, #1
  4065a0:	6153      	str	r3, [r2, #20]
  4065a2:	612c      	str	r4, [r5, #16]
  4065a4:	4628      	mov	r0, r5
  4065a6:	b003      	add	sp, #12
  4065a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4065aa:	6869      	ldr	r1, [r5, #4]
  4065ac:	9301      	str	r3, [sp, #4]
  4065ae:	3101      	adds	r1, #1
  4065b0:	4630      	mov	r0, r6
  4065b2:	f7ff ffa3 	bl	4064fc <_Balloc>
  4065b6:	692a      	ldr	r2, [r5, #16]
  4065b8:	3202      	adds	r2, #2
  4065ba:	f105 010c 	add.w	r1, r5, #12
  4065be:	4607      	mov	r7, r0
  4065c0:	0092      	lsls	r2, r2, #2
  4065c2:	300c      	adds	r0, #12
  4065c4:	f7ff fef4 	bl	4063b0 <memcpy>
  4065c8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4065ca:	6869      	ldr	r1, [r5, #4]
  4065cc:	9b01      	ldr	r3, [sp, #4]
  4065ce:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4065d2:	6028      	str	r0, [r5, #0]
  4065d4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4065d8:	463d      	mov	r5, r7
  4065da:	e7de      	b.n	40659a <__multadd+0x3e>

004065dc <__hi0bits>:
  4065dc:	0c02      	lsrs	r2, r0, #16
  4065de:	0412      	lsls	r2, r2, #16
  4065e0:	4603      	mov	r3, r0
  4065e2:	b9b2      	cbnz	r2, 406612 <__hi0bits+0x36>
  4065e4:	0403      	lsls	r3, r0, #16
  4065e6:	2010      	movs	r0, #16
  4065e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4065ec:	bf04      	itt	eq
  4065ee:	021b      	lsleq	r3, r3, #8
  4065f0:	3008      	addeq	r0, #8
  4065f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4065f6:	bf04      	itt	eq
  4065f8:	011b      	lsleq	r3, r3, #4
  4065fa:	3004      	addeq	r0, #4
  4065fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  406600:	bf04      	itt	eq
  406602:	009b      	lsleq	r3, r3, #2
  406604:	3002      	addeq	r0, #2
  406606:	2b00      	cmp	r3, #0
  406608:	db02      	blt.n	406610 <__hi0bits+0x34>
  40660a:	005b      	lsls	r3, r3, #1
  40660c:	d403      	bmi.n	406616 <__hi0bits+0x3a>
  40660e:	2020      	movs	r0, #32
  406610:	4770      	bx	lr
  406612:	2000      	movs	r0, #0
  406614:	e7e8      	b.n	4065e8 <__hi0bits+0xc>
  406616:	3001      	adds	r0, #1
  406618:	4770      	bx	lr
  40661a:	bf00      	nop

0040661c <__lo0bits>:
  40661c:	6803      	ldr	r3, [r0, #0]
  40661e:	f013 0207 	ands.w	r2, r3, #7
  406622:	4601      	mov	r1, r0
  406624:	d007      	beq.n	406636 <__lo0bits+0x1a>
  406626:	07da      	lsls	r2, r3, #31
  406628:	d421      	bmi.n	40666e <__lo0bits+0x52>
  40662a:	0798      	lsls	r0, r3, #30
  40662c:	d421      	bmi.n	406672 <__lo0bits+0x56>
  40662e:	089b      	lsrs	r3, r3, #2
  406630:	600b      	str	r3, [r1, #0]
  406632:	2002      	movs	r0, #2
  406634:	4770      	bx	lr
  406636:	b298      	uxth	r0, r3
  406638:	b198      	cbz	r0, 406662 <__lo0bits+0x46>
  40663a:	4610      	mov	r0, r2
  40663c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406640:	bf04      	itt	eq
  406642:	0a1b      	lsreq	r3, r3, #8
  406644:	3008      	addeq	r0, #8
  406646:	071a      	lsls	r2, r3, #28
  406648:	bf04      	itt	eq
  40664a:	091b      	lsreq	r3, r3, #4
  40664c:	3004      	addeq	r0, #4
  40664e:	079a      	lsls	r2, r3, #30
  406650:	bf04      	itt	eq
  406652:	089b      	lsreq	r3, r3, #2
  406654:	3002      	addeq	r0, #2
  406656:	07da      	lsls	r2, r3, #31
  406658:	d407      	bmi.n	40666a <__lo0bits+0x4e>
  40665a:	085b      	lsrs	r3, r3, #1
  40665c:	d104      	bne.n	406668 <__lo0bits+0x4c>
  40665e:	2020      	movs	r0, #32
  406660:	4770      	bx	lr
  406662:	0c1b      	lsrs	r3, r3, #16
  406664:	2010      	movs	r0, #16
  406666:	e7e9      	b.n	40663c <__lo0bits+0x20>
  406668:	3001      	adds	r0, #1
  40666a:	600b      	str	r3, [r1, #0]
  40666c:	4770      	bx	lr
  40666e:	2000      	movs	r0, #0
  406670:	4770      	bx	lr
  406672:	085b      	lsrs	r3, r3, #1
  406674:	600b      	str	r3, [r1, #0]
  406676:	2001      	movs	r0, #1
  406678:	4770      	bx	lr
  40667a:	bf00      	nop

0040667c <__i2b>:
  40667c:	b510      	push	{r4, lr}
  40667e:	460c      	mov	r4, r1
  406680:	2101      	movs	r1, #1
  406682:	f7ff ff3b 	bl	4064fc <_Balloc>
  406686:	2201      	movs	r2, #1
  406688:	6144      	str	r4, [r0, #20]
  40668a:	6102      	str	r2, [r0, #16]
  40668c:	bd10      	pop	{r4, pc}
  40668e:	bf00      	nop

00406690 <__multiply>:
  406690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406694:	690c      	ldr	r4, [r1, #16]
  406696:	6915      	ldr	r5, [r2, #16]
  406698:	42ac      	cmp	r4, r5
  40669a:	b083      	sub	sp, #12
  40669c:	468b      	mov	fp, r1
  40669e:	4616      	mov	r6, r2
  4066a0:	da04      	bge.n	4066ac <__multiply+0x1c>
  4066a2:	4622      	mov	r2, r4
  4066a4:	46b3      	mov	fp, r6
  4066a6:	462c      	mov	r4, r5
  4066a8:	460e      	mov	r6, r1
  4066aa:	4615      	mov	r5, r2
  4066ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4066b0:	f8db 1004 	ldr.w	r1, [fp, #4]
  4066b4:	eb04 0805 	add.w	r8, r4, r5
  4066b8:	4598      	cmp	r8, r3
  4066ba:	bfc8      	it	gt
  4066bc:	3101      	addgt	r1, #1
  4066be:	f7ff ff1d 	bl	4064fc <_Balloc>
  4066c2:	f100 0914 	add.w	r9, r0, #20
  4066c6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4066ca:	45d1      	cmp	r9, sl
  4066cc:	9000      	str	r0, [sp, #0]
  4066ce:	d205      	bcs.n	4066dc <__multiply+0x4c>
  4066d0:	464b      	mov	r3, r9
  4066d2:	2100      	movs	r1, #0
  4066d4:	f843 1b04 	str.w	r1, [r3], #4
  4066d8:	459a      	cmp	sl, r3
  4066da:	d8fb      	bhi.n	4066d4 <__multiply+0x44>
  4066dc:	f106 0c14 	add.w	ip, r6, #20
  4066e0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  4066e4:	f10b 0b14 	add.w	fp, fp, #20
  4066e8:	459c      	cmp	ip, r3
  4066ea:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4066ee:	d24c      	bcs.n	40678a <__multiply+0xfa>
  4066f0:	f8cd a004 	str.w	sl, [sp, #4]
  4066f4:	469a      	mov	sl, r3
  4066f6:	f8dc 5000 	ldr.w	r5, [ip]
  4066fa:	b2af      	uxth	r7, r5
  4066fc:	b1ef      	cbz	r7, 40673a <__multiply+0xaa>
  4066fe:	2100      	movs	r1, #0
  406700:	464d      	mov	r5, r9
  406702:	465e      	mov	r6, fp
  406704:	460c      	mov	r4, r1
  406706:	f856 2b04 	ldr.w	r2, [r6], #4
  40670a:	6828      	ldr	r0, [r5, #0]
  40670c:	b293      	uxth	r3, r2
  40670e:	b281      	uxth	r1, r0
  406710:	fb07 1303 	mla	r3, r7, r3, r1
  406714:	0c12      	lsrs	r2, r2, #16
  406716:	0c01      	lsrs	r1, r0, #16
  406718:	4423      	add	r3, r4
  40671a:	fb07 1102 	mla	r1, r7, r2, r1
  40671e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406722:	b29b      	uxth	r3, r3
  406724:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406728:	45b6      	cmp	lr, r6
  40672a:	f845 3b04 	str.w	r3, [r5], #4
  40672e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406732:	d8e8      	bhi.n	406706 <__multiply+0x76>
  406734:	602c      	str	r4, [r5, #0]
  406736:	f8dc 5000 	ldr.w	r5, [ip]
  40673a:	0c2d      	lsrs	r5, r5, #16
  40673c:	d01d      	beq.n	40677a <__multiply+0xea>
  40673e:	f8d9 3000 	ldr.w	r3, [r9]
  406742:	4648      	mov	r0, r9
  406744:	461c      	mov	r4, r3
  406746:	4659      	mov	r1, fp
  406748:	2200      	movs	r2, #0
  40674a:	880e      	ldrh	r6, [r1, #0]
  40674c:	0c24      	lsrs	r4, r4, #16
  40674e:	fb05 4406 	mla	r4, r5, r6, r4
  406752:	4422      	add	r2, r4
  406754:	b29b      	uxth	r3, r3
  406756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40675a:	f840 3b04 	str.w	r3, [r0], #4
  40675e:	f851 3b04 	ldr.w	r3, [r1], #4
  406762:	6804      	ldr	r4, [r0, #0]
  406764:	0c1b      	lsrs	r3, r3, #16
  406766:	b2a6      	uxth	r6, r4
  406768:	fb05 6303 	mla	r3, r5, r3, r6
  40676c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406770:	458e      	cmp	lr, r1
  406772:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406776:	d8e8      	bhi.n	40674a <__multiply+0xba>
  406778:	6003      	str	r3, [r0, #0]
  40677a:	f10c 0c04 	add.w	ip, ip, #4
  40677e:	45e2      	cmp	sl, ip
  406780:	f109 0904 	add.w	r9, r9, #4
  406784:	d8b7      	bhi.n	4066f6 <__multiply+0x66>
  406786:	f8dd a004 	ldr.w	sl, [sp, #4]
  40678a:	f1b8 0f00 	cmp.w	r8, #0
  40678e:	dd0b      	ble.n	4067a8 <__multiply+0x118>
  406790:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406794:	f1aa 0a04 	sub.w	sl, sl, #4
  406798:	b11b      	cbz	r3, 4067a2 <__multiply+0x112>
  40679a:	e005      	b.n	4067a8 <__multiply+0x118>
  40679c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4067a0:	b913      	cbnz	r3, 4067a8 <__multiply+0x118>
  4067a2:	f1b8 0801 	subs.w	r8, r8, #1
  4067a6:	d1f9      	bne.n	40679c <__multiply+0x10c>
  4067a8:	9800      	ldr	r0, [sp, #0]
  4067aa:	f8c0 8010 	str.w	r8, [r0, #16]
  4067ae:	b003      	add	sp, #12
  4067b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004067b4 <__pow5mult>:
  4067b4:	f012 0303 	ands.w	r3, r2, #3
  4067b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4067bc:	4614      	mov	r4, r2
  4067be:	4607      	mov	r7, r0
  4067c0:	d12e      	bne.n	406820 <__pow5mult+0x6c>
  4067c2:	460d      	mov	r5, r1
  4067c4:	10a4      	asrs	r4, r4, #2
  4067c6:	d01c      	beq.n	406802 <__pow5mult+0x4e>
  4067c8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4067ca:	b396      	cbz	r6, 406832 <__pow5mult+0x7e>
  4067cc:	07e3      	lsls	r3, r4, #31
  4067ce:	f04f 0800 	mov.w	r8, #0
  4067d2:	d406      	bmi.n	4067e2 <__pow5mult+0x2e>
  4067d4:	1064      	asrs	r4, r4, #1
  4067d6:	d014      	beq.n	406802 <__pow5mult+0x4e>
  4067d8:	6830      	ldr	r0, [r6, #0]
  4067da:	b1a8      	cbz	r0, 406808 <__pow5mult+0x54>
  4067dc:	4606      	mov	r6, r0
  4067de:	07e3      	lsls	r3, r4, #31
  4067e0:	d5f8      	bpl.n	4067d4 <__pow5mult+0x20>
  4067e2:	4632      	mov	r2, r6
  4067e4:	4629      	mov	r1, r5
  4067e6:	4638      	mov	r0, r7
  4067e8:	f7ff ff52 	bl	406690 <__multiply>
  4067ec:	b1b5      	cbz	r5, 40681c <__pow5mult+0x68>
  4067ee:	686a      	ldr	r2, [r5, #4]
  4067f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4067f2:	1064      	asrs	r4, r4, #1
  4067f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4067f8:	6029      	str	r1, [r5, #0]
  4067fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4067fe:	4605      	mov	r5, r0
  406800:	d1ea      	bne.n	4067d8 <__pow5mult+0x24>
  406802:	4628      	mov	r0, r5
  406804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406808:	4632      	mov	r2, r6
  40680a:	4631      	mov	r1, r6
  40680c:	4638      	mov	r0, r7
  40680e:	f7ff ff3f 	bl	406690 <__multiply>
  406812:	6030      	str	r0, [r6, #0]
  406814:	f8c0 8000 	str.w	r8, [r0]
  406818:	4606      	mov	r6, r0
  40681a:	e7e0      	b.n	4067de <__pow5mult+0x2a>
  40681c:	4605      	mov	r5, r0
  40681e:	e7d9      	b.n	4067d4 <__pow5mult+0x20>
  406820:	1e5a      	subs	r2, r3, #1
  406822:	4d0b      	ldr	r5, [pc, #44]	; (406850 <__pow5mult+0x9c>)
  406824:	2300      	movs	r3, #0
  406826:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40682a:	f7ff fe97 	bl	40655c <__multadd>
  40682e:	4605      	mov	r5, r0
  406830:	e7c8      	b.n	4067c4 <__pow5mult+0x10>
  406832:	2101      	movs	r1, #1
  406834:	4638      	mov	r0, r7
  406836:	f7ff fe61 	bl	4064fc <_Balloc>
  40683a:	f240 2171 	movw	r1, #625	; 0x271
  40683e:	2201      	movs	r2, #1
  406840:	2300      	movs	r3, #0
  406842:	6141      	str	r1, [r0, #20]
  406844:	6102      	str	r2, [r0, #16]
  406846:	4606      	mov	r6, r0
  406848:	64b8      	str	r0, [r7, #72]	; 0x48
  40684a:	6003      	str	r3, [r0, #0]
  40684c:	e7be      	b.n	4067cc <__pow5mult+0x18>
  40684e:	bf00      	nop
  406850:	00408930 	.word	0x00408930

00406854 <__lshift>:
  406854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406858:	4691      	mov	r9, r2
  40685a:	690a      	ldr	r2, [r1, #16]
  40685c:	688b      	ldr	r3, [r1, #8]
  40685e:	ea4f 1469 	mov.w	r4, r9, asr #5
  406862:	eb04 0802 	add.w	r8, r4, r2
  406866:	f108 0501 	add.w	r5, r8, #1
  40686a:	429d      	cmp	r5, r3
  40686c:	460e      	mov	r6, r1
  40686e:	4607      	mov	r7, r0
  406870:	6849      	ldr	r1, [r1, #4]
  406872:	dd04      	ble.n	40687e <__lshift+0x2a>
  406874:	005b      	lsls	r3, r3, #1
  406876:	429d      	cmp	r5, r3
  406878:	f101 0101 	add.w	r1, r1, #1
  40687c:	dcfa      	bgt.n	406874 <__lshift+0x20>
  40687e:	4638      	mov	r0, r7
  406880:	f7ff fe3c 	bl	4064fc <_Balloc>
  406884:	2c00      	cmp	r4, #0
  406886:	f100 0314 	add.w	r3, r0, #20
  40688a:	dd06      	ble.n	40689a <__lshift+0x46>
  40688c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406890:	2100      	movs	r1, #0
  406892:	f843 1b04 	str.w	r1, [r3], #4
  406896:	429a      	cmp	r2, r3
  406898:	d1fb      	bne.n	406892 <__lshift+0x3e>
  40689a:	6934      	ldr	r4, [r6, #16]
  40689c:	f106 0114 	add.w	r1, r6, #20
  4068a0:	f019 091f 	ands.w	r9, r9, #31
  4068a4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4068a8:	d01d      	beq.n	4068e6 <__lshift+0x92>
  4068aa:	f1c9 0c20 	rsb	ip, r9, #32
  4068ae:	2200      	movs	r2, #0
  4068b0:	680c      	ldr	r4, [r1, #0]
  4068b2:	fa04 f409 	lsl.w	r4, r4, r9
  4068b6:	4314      	orrs	r4, r2
  4068b8:	f843 4b04 	str.w	r4, [r3], #4
  4068bc:	f851 2b04 	ldr.w	r2, [r1], #4
  4068c0:	458e      	cmp	lr, r1
  4068c2:	fa22 f20c 	lsr.w	r2, r2, ip
  4068c6:	d8f3      	bhi.n	4068b0 <__lshift+0x5c>
  4068c8:	601a      	str	r2, [r3, #0]
  4068ca:	b10a      	cbz	r2, 4068d0 <__lshift+0x7c>
  4068cc:	f108 0502 	add.w	r5, r8, #2
  4068d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4068d2:	6872      	ldr	r2, [r6, #4]
  4068d4:	3d01      	subs	r5, #1
  4068d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4068da:	6105      	str	r5, [r0, #16]
  4068dc:	6031      	str	r1, [r6, #0]
  4068de:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4068e6:	3b04      	subs	r3, #4
  4068e8:	f851 2b04 	ldr.w	r2, [r1], #4
  4068ec:	f843 2f04 	str.w	r2, [r3, #4]!
  4068f0:	458e      	cmp	lr, r1
  4068f2:	d8f9      	bhi.n	4068e8 <__lshift+0x94>
  4068f4:	e7ec      	b.n	4068d0 <__lshift+0x7c>
  4068f6:	bf00      	nop

004068f8 <__mcmp>:
  4068f8:	b430      	push	{r4, r5}
  4068fa:	690b      	ldr	r3, [r1, #16]
  4068fc:	4605      	mov	r5, r0
  4068fe:	6900      	ldr	r0, [r0, #16]
  406900:	1ac0      	subs	r0, r0, r3
  406902:	d10f      	bne.n	406924 <__mcmp+0x2c>
  406904:	009b      	lsls	r3, r3, #2
  406906:	3514      	adds	r5, #20
  406908:	3114      	adds	r1, #20
  40690a:	4419      	add	r1, r3
  40690c:	442b      	add	r3, r5
  40690e:	e001      	b.n	406914 <__mcmp+0x1c>
  406910:	429d      	cmp	r5, r3
  406912:	d207      	bcs.n	406924 <__mcmp+0x2c>
  406914:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406918:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40691c:	4294      	cmp	r4, r2
  40691e:	d0f7      	beq.n	406910 <__mcmp+0x18>
  406920:	d302      	bcc.n	406928 <__mcmp+0x30>
  406922:	2001      	movs	r0, #1
  406924:	bc30      	pop	{r4, r5}
  406926:	4770      	bx	lr
  406928:	f04f 30ff 	mov.w	r0, #4294967295
  40692c:	e7fa      	b.n	406924 <__mcmp+0x2c>
  40692e:	bf00      	nop

00406930 <__mdiff>:
  406930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406934:	690f      	ldr	r7, [r1, #16]
  406936:	460e      	mov	r6, r1
  406938:	6911      	ldr	r1, [r2, #16]
  40693a:	1a7f      	subs	r7, r7, r1
  40693c:	2f00      	cmp	r7, #0
  40693e:	4690      	mov	r8, r2
  406940:	d117      	bne.n	406972 <__mdiff+0x42>
  406942:	0089      	lsls	r1, r1, #2
  406944:	f106 0514 	add.w	r5, r6, #20
  406948:	f102 0e14 	add.w	lr, r2, #20
  40694c:	186b      	adds	r3, r5, r1
  40694e:	4471      	add	r1, lr
  406950:	e001      	b.n	406956 <__mdiff+0x26>
  406952:	429d      	cmp	r5, r3
  406954:	d25c      	bcs.n	406a10 <__mdiff+0xe0>
  406956:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40695a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40695e:	42a2      	cmp	r2, r4
  406960:	d0f7      	beq.n	406952 <__mdiff+0x22>
  406962:	d25e      	bcs.n	406a22 <__mdiff+0xf2>
  406964:	4633      	mov	r3, r6
  406966:	462c      	mov	r4, r5
  406968:	4646      	mov	r6, r8
  40696a:	4675      	mov	r5, lr
  40696c:	4698      	mov	r8, r3
  40696e:	2701      	movs	r7, #1
  406970:	e005      	b.n	40697e <__mdiff+0x4e>
  406972:	db58      	blt.n	406a26 <__mdiff+0xf6>
  406974:	f106 0514 	add.w	r5, r6, #20
  406978:	f108 0414 	add.w	r4, r8, #20
  40697c:	2700      	movs	r7, #0
  40697e:	6871      	ldr	r1, [r6, #4]
  406980:	f7ff fdbc 	bl	4064fc <_Balloc>
  406984:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406988:	6936      	ldr	r6, [r6, #16]
  40698a:	60c7      	str	r7, [r0, #12]
  40698c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406990:	46a6      	mov	lr, r4
  406992:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406996:	f100 0414 	add.w	r4, r0, #20
  40699a:	2300      	movs	r3, #0
  40699c:	f85e 1b04 	ldr.w	r1, [lr], #4
  4069a0:	f855 8b04 	ldr.w	r8, [r5], #4
  4069a4:	b28a      	uxth	r2, r1
  4069a6:	fa13 f388 	uxtah	r3, r3, r8
  4069aa:	0c09      	lsrs	r1, r1, #16
  4069ac:	1a9a      	subs	r2, r3, r2
  4069ae:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4069b2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4069b6:	b292      	uxth	r2, r2
  4069b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4069bc:	45f4      	cmp	ip, lr
  4069be:	f844 2b04 	str.w	r2, [r4], #4
  4069c2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4069c6:	d8e9      	bhi.n	40699c <__mdiff+0x6c>
  4069c8:	42af      	cmp	r7, r5
  4069ca:	d917      	bls.n	4069fc <__mdiff+0xcc>
  4069cc:	46a4      	mov	ip, r4
  4069ce:	46ae      	mov	lr, r5
  4069d0:	f85e 2b04 	ldr.w	r2, [lr], #4
  4069d4:	fa13 f382 	uxtah	r3, r3, r2
  4069d8:	1419      	asrs	r1, r3, #16
  4069da:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4069de:	b29b      	uxth	r3, r3
  4069e0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4069e4:	4577      	cmp	r7, lr
  4069e6:	f84c 2b04 	str.w	r2, [ip], #4
  4069ea:	ea4f 4321 	mov.w	r3, r1, asr #16
  4069ee:	d8ef      	bhi.n	4069d0 <__mdiff+0xa0>
  4069f0:	43ed      	mvns	r5, r5
  4069f2:	442f      	add	r7, r5
  4069f4:	f027 0703 	bic.w	r7, r7, #3
  4069f8:	3704      	adds	r7, #4
  4069fa:	443c      	add	r4, r7
  4069fc:	3c04      	subs	r4, #4
  4069fe:	b922      	cbnz	r2, 406a0a <__mdiff+0xda>
  406a00:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406a04:	3e01      	subs	r6, #1
  406a06:	2b00      	cmp	r3, #0
  406a08:	d0fa      	beq.n	406a00 <__mdiff+0xd0>
  406a0a:	6106      	str	r6, [r0, #16]
  406a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a10:	2100      	movs	r1, #0
  406a12:	f7ff fd73 	bl	4064fc <_Balloc>
  406a16:	2201      	movs	r2, #1
  406a18:	2300      	movs	r3, #0
  406a1a:	6102      	str	r2, [r0, #16]
  406a1c:	6143      	str	r3, [r0, #20]
  406a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a22:	4674      	mov	r4, lr
  406a24:	e7ab      	b.n	40697e <__mdiff+0x4e>
  406a26:	4633      	mov	r3, r6
  406a28:	f106 0414 	add.w	r4, r6, #20
  406a2c:	f102 0514 	add.w	r5, r2, #20
  406a30:	4616      	mov	r6, r2
  406a32:	2701      	movs	r7, #1
  406a34:	4698      	mov	r8, r3
  406a36:	e7a2      	b.n	40697e <__mdiff+0x4e>

00406a38 <__d2b>:
  406a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a3c:	b082      	sub	sp, #8
  406a3e:	2101      	movs	r1, #1
  406a40:	461c      	mov	r4, r3
  406a42:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406a46:	4615      	mov	r5, r2
  406a48:	9e08      	ldr	r6, [sp, #32]
  406a4a:	f7ff fd57 	bl	4064fc <_Balloc>
  406a4e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406a52:	4680      	mov	r8, r0
  406a54:	b10f      	cbz	r7, 406a5a <__d2b+0x22>
  406a56:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406a5a:	9401      	str	r4, [sp, #4]
  406a5c:	b31d      	cbz	r5, 406aa6 <__d2b+0x6e>
  406a5e:	a802      	add	r0, sp, #8
  406a60:	f840 5d08 	str.w	r5, [r0, #-8]!
  406a64:	f7ff fdda 	bl	40661c <__lo0bits>
  406a68:	2800      	cmp	r0, #0
  406a6a:	d134      	bne.n	406ad6 <__d2b+0x9e>
  406a6c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406a70:	f8c8 2014 	str.w	r2, [r8, #20]
  406a74:	2b00      	cmp	r3, #0
  406a76:	bf0c      	ite	eq
  406a78:	2101      	moveq	r1, #1
  406a7a:	2102      	movne	r1, #2
  406a7c:	f8c8 3018 	str.w	r3, [r8, #24]
  406a80:	f8c8 1010 	str.w	r1, [r8, #16]
  406a84:	b9df      	cbnz	r7, 406abe <__d2b+0x86>
  406a86:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406a8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406a8e:	6030      	str	r0, [r6, #0]
  406a90:	6918      	ldr	r0, [r3, #16]
  406a92:	f7ff fda3 	bl	4065dc <__hi0bits>
  406a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406a9c:	6018      	str	r0, [r3, #0]
  406a9e:	4640      	mov	r0, r8
  406aa0:	b002      	add	sp, #8
  406aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406aa6:	a801      	add	r0, sp, #4
  406aa8:	f7ff fdb8 	bl	40661c <__lo0bits>
  406aac:	9b01      	ldr	r3, [sp, #4]
  406aae:	f8c8 3014 	str.w	r3, [r8, #20]
  406ab2:	2101      	movs	r1, #1
  406ab4:	3020      	adds	r0, #32
  406ab6:	f8c8 1010 	str.w	r1, [r8, #16]
  406aba:	2f00      	cmp	r7, #0
  406abc:	d0e3      	beq.n	406a86 <__d2b+0x4e>
  406abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406ac0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406ac4:	4407      	add	r7, r0
  406ac6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406aca:	6037      	str	r7, [r6, #0]
  406acc:	6018      	str	r0, [r3, #0]
  406ace:	4640      	mov	r0, r8
  406ad0:	b002      	add	sp, #8
  406ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ad6:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406ada:	f1c0 0220 	rsb	r2, r0, #32
  406ade:	fa03 f202 	lsl.w	r2, r3, r2
  406ae2:	430a      	orrs	r2, r1
  406ae4:	40c3      	lsrs	r3, r0
  406ae6:	9301      	str	r3, [sp, #4]
  406ae8:	f8c8 2014 	str.w	r2, [r8, #20]
  406aec:	e7c2      	b.n	406a74 <__d2b+0x3c>
  406aee:	bf00      	nop

00406af0 <_sbrk_r>:
  406af0:	b538      	push	{r3, r4, r5, lr}
  406af2:	4c07      	ldr	r4, [pc, #28]	; (406b10 <_sbrk_r+0x20>)
  406af4:	2300      	movs	r3, #0
  406af6:	4605      	mov	r5, r0
  406af8:	4608      	mov	r0, r1
  406afa:	6023      	str	r3, [r4, #0]
  406afc:	f7fa ffce 	bl	401a9c <_sbrk>
  406b00:	1c43      	adds	r3, r0, #1
  406b02:	d000      	beq.n	406b06 <_sbrk_r+0x16>
  406b04:	bd38      	pop	{r3, r4, r5, pc}
  406b06:	6823      	ldr	r3, [r4, #0]
  406b08:	2b00      	cmp	r3, #0
  406b0a:	d0fb      	beq.n	406b04 <_sbrk_r+0x14>
  406b0c:	602b      	str	r3, [r5, #0]
  406b0e:	bd38      	pop	{r3, r4, r5, pc}
  406b10:	20000ae8 	.word	0x20000ae8
	...

00406b40 <strlen>:
  406b40:	f890 f000 	pld	[r0]
  406b44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406b48:	f020 0107 	bic.w	r1, r0, #7
  406b4c:	f06f 0c00 	mvn.w	ip, #0
  406b50:	f010 0407 	ands.w	r4, r0, #7
  406b54:	f891 f020 	pld	[r1, #32]
  406b58:	f040 8049 	bne.w	406bee <strlen+0xae>
  406b5c:	f04f 0400 	mov.w	r4, #0
  406b60:	f06f 0007 	mvn.w	r0, #7
  406b64:	e9d1 2300 	ldrd	r2, r3, [r1]
  406b68:	f891 f040 	pld	[r1, #64]	; 0x40
  406b6c:	f100 0008 	add.w	r0, r0, #8
  406b70:	fa82 f24c 	uadd8	r2, r2, ip
  406b74:	faa4 f28c 	sel	r2, r4, ip
  406b78:	fa83 f34c 	uadd8	r3, r3, ip
  406b7c:	faa2 f38c 	sel	r3, r2, ip
  406b80:	bb4b      	cbnz	r3, 406bd6 <strlen+0x96>
  406b82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406b86:	fa82 f24c 	uadd8	r2, r2, ip
  406b8a:	f100 0008 	add.w	r0, r0, #8
  406b8e:	faa4 f28c 	sel	r2, r4, ip
  406b92:	fa83 f34c 	uadd8	r3, r3, ip
  406b96:	faa2 f38c 	sel	r3, r2, ip
  406b9a:	b9e3      	cbnz	r3, 406bd6 <strlen+0x96>
  406b9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406ba0:	fa82 f24c 	uadd8	r2, r2, ip
  406ba4:	f100 0008 	add.w	r0, r0, #8
  406ba8:	faa4 f28c 	sel	r2, r4, ip
  406bac:	fa83 f34c 	uadd8	r3, r3, ip
  406bb0:	faa2 f38c 	sel	r3, r2, ip
  406bb4:	b97b      	cbnz	r3, 406bd6 <strlen+0x96>
  406bb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406bba:	f101 0120 	add.w	r1, r1, #32
  406bbe:	fa82 f24c 	uadd8	r2, r2, ip
  406bc2:	f100 0008 	add.w	r0, r0, #8
  406bc6:	faa4 f28c 	sel	r2, r4, ip
  406bca:	fa83 f34c 	uadd8	r3, r3, ip
  406bce:	faa2 f38c 	sel	r3, r2, ip
  406bd2:	2b00      	cmp	r3, #0
  406bd4:	d0c6      	beq.n	406b64 <strlen+0x24>
  406bd6:	2a00      	cmp	r2, #0
  406bd8:	bf04      	itt	eq
  406bda:	3004      	addeq	r0, #4
  406bdc:	461a      	moveq	r2, r3
  406bde:	ba12      	rev	r2, r2
  406be0:	fab2 f282 	clz	r2, r2
  406be4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406be8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406bec:	4770      	bx	lr
  406bee:	e9d1 2300 	ldrd	r2, r3, [r1]
  406bf2:	f004 0503 	and.w	r5, r4, #3
  406bf6:	f1c4 0000 	rsb	r0, r4, #0
  406bfa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406bfe:	f014 0f04 	tst.w	r4, #4
  406c02:	f891 f040 	pld	[r1, #64]	; 0x40
  406c06:	fa0c f505 	lsl.w	r5, ip, r5
  406c0a:	ea62 0205 	orn	r2, r2, r5
  406c0e:	bf1c      	itt	ne
  406c10:	ea63 0305 	ornne	r3, r3, r5
  406c14:	4662      	movne	r2, ip
  406c16:	f04f 0400 	mov.w	r4, #0
  406c1a:	e7a9      	b.n	406b70 <strlen+0x30>

00406c1c <__ssprint_r>:
  406c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c20:	6893      	ldr	r3, [r2, #8]
  406c22:	b083      	sub	sp, #12
  406c24:	4690      	mov	r8, r2
  406c26:	2b00      	cmp	r3, #0
  406c28:	d070      	beq.n	406d0c <__ssprint_r+0xf0>
  406c2a:	4682      	mov	sl, r0
  406c2c:	460c      	mov	r4, r1
  406c2e:	6817      	ldr	r7, [r2, #0]
  406c30:	688d      	ldr	r5, [r1, #8]
  406c32:	6808      	ldr	r0, [r1, #0]
  406c34:	e042      	b.n	406cbc <__ssprint_r+0xa0>
  406c36:	89a3      	ldrh	r3, [r4, #12]
  406c38:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406c3c:	d02e      	beq.n	406c9c <__ssprint_r+0x80>
  406c3e:	6965      	ldr	r5, [r4, #20]
  406c40:	6921      	ldr	r1, [r4, #16]
  406c42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  406c46:	eba0 0b01 	sub.w	fp, r0, r1
  406c4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  406c4e:	f10b 0001 	add.w	r0, fp, #1
  406c52:	106d      	asrs	r5, r5, #1
  406c54:	4430      	add	r0, r6
  406c56:	42a8      	cmp	r0, r5
  406c58:	462a      	mov	r2, r5
  406c5a:	bf84      	itt	hi
  406c5c:	4605      	movhi	r5, r0
  406c5e:	462a      	movhi	r2, r5
  406c60:	055b      	lsls	r3, r3, #21
  406c62:	d538      	bpl.n	406cd6 <__ssprint_r+0xba>
  406c64:	4611      	mov	r1, r2
  406c66:	4650      	mov	r0, sl
  406c68:	f7ff f8a0 	bl	405dac <_malloc_r>
  406c6c:	2800      	cmp	r0, #0
  406c6e:	d03c      	beq.n	406cea <__ssprint_r+0xce>
  406c70:	465a      	mov	r2, fp
  406c72:	6921      	ldr	r1, [r4, #16]
  406c74:	9001      	str	r0, [sp, #4]
  406c76:	f7ff fb9b 	bl	4063b0 <memcpy>
  406c7a:	89a2      	ldrh	r2, [r4, #12]
  406c7c:	9b01      	ldr	r3, [sp, #4]
  406c7e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406c82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406c86:	81a2      	strh	r2, [r4, #12]
  406c88:	eba5 020b 	sub.w	r2, r5, fp
  406c8c:	eb03 000b 	add.w	r0, r3, fp
  406c90:	6165      	str	r5, [r4, #20]
  406c92:	6123      	str	r3, [r4, #16]
  406c94:	6020      	str	r0, [r4, #0]
  406c96:	60a2      	str	r2, [r4, #8]
  406c98:	4635      	mov	r5, r6
  406c9a:	46b3      	mov	fp, r6
  406c9c:	465a      	mov	r2, fp
  406c9e:	4649      	mov	r1, r9
  406ca0:	f000 fa18 	bl	4070d4 <memmove>
  406ca4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  406ca8:	68a2      	ldr	r2, [r4, #8]
  406caa:	6820      	ldr	r0, [r4, #0]
  406cac:	1b55      	subs	r5, r2, r5
  406cae:	4458      	add	r0, fp
  406cb0:	1b9e      	subs	r6, r3, r6
  406cb2:	60a5      	str	r5, [r4, #8]
  406cb4:	6020      	str	r0, [r4, #0]
  406cb6:	f8c8 6008 	str.w	r6, [r8, #8]
  406cba:	b33e      	cbz	r6, 406d0c <__ssprint_r+0xf0>
  406cbc:	687e      	ldr	r6, [r7, #4]
  406cbe:	463b      	mov	r3, r7
  406cc0:	3708      	adds	r7, #8
  406cc2:	2e00      	cmp	r6, #0
  406cc4:	d0fa      	beq.n	406cbc <__ssprint_r+0xa0>
  406cc6:	42ae      	cmp	r6, r5
  406cc8:	f8d3 9000 	ldr.w	r9, [r3]
  406ccc:	46ab      	mov	fp, r5
  406cce:	d2b2      	bcs.n	406c36 <__ssprint_r+0x1a>
  406cd0:	4635      	mov	r5, r6
  406cd2:	46b3      	mov	fp, r6
  406cd4:	e7e2      	b.n	406c9c <__ssprint_r+0x80>
  406cd6:	4650      	mov	r0, sl
  406cd8:	f000 fa60 	bl	40719c <_realloc_r>
  406cdc:	4603      	mov	r3, r0
  406cde:	2800      	cmp	r0, #0
  406ce0:	d1d2      	bne.n	406c88 <__ssprint_r+0x6c>
  406ce2:	6921      	ldr	r1, [r4, #16]
  406ce4:	4650      	mov	r0, sl
  406ce6:	f000 f8f9 	bl	406edc <_free_r>
  406cea:	230c      	movs	r3, #12
  406cec:	f8ca 3000 	str.w	r3, [sl]
  406cf0:	89a3      	ldrh	r3, [r4, #12]
  406cf2:	2200      	movs	r2, #0
  406cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406cf8:	f04f 30ff 	mov.w	r0, #4294967295
  406cfc:	81a3      	strh	r3, [r4, #12]
  406cfe:	f8c8 2008 	str.w	r2, [r8, #8]
  406d02:	f8c8 2004 	str.w	r2, [r8, #4]
  406d06:	b003      	add	sp, #12
  406d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d0c:	2000      	movs	r0, #0
  406d0e:	f8c8 0004 	str.w	r0, [r8, #4]
  406d12:	b003      	add	sp, #12
  406d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406d18 <__register_exitproc>:
  406d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406d1c:	4d2c      	ldr	r5, [pc, #176]	; (406dd0 <__register_exitproc+0xb8>)
  406d1e:	4606      	mov	r6, r0
  406d20:	6828      	ldr	r0, [r5, #0]
  406d22:	4698      	mov	r8, r3
  406d24:	460f      	mov	r7, r1
  406d26:	4691      	mov	r9, r2
  406d28:	f7ff f83c 	bl	405da4 <__retarget_lock_acquire_recursive>
  406d2c:	4b29      	ldr	r3, [pc, #164]	; (406dd4 <__register_exitproc+0xbc>)
  406d2e:	681c      	ldr	r4, [r3, #0]
  406d30:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406d34:	2b00      	cmp	r3, #0
  406d36:	d03e      	beq.n	406db6 <__register_exitproc+0x9e>
  406d38:	685a      	ldr	r2, [r3, #4]
  406d3a:	2a1f      	cmp	r2, #31
  406d3c:	dc1c      	bgt.n	406d78 <__register_exitproc+0x60>
  406d3e:	f102 0e01 	add.w	lr, r2, #1
  406d42:	b176      	cbz	r6, 406d62 <__register_exitproc+0x4a>
  406d44:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406d48:	2401      	movs	r4, #1
  406d4a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406d4e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406d52:	4094      	lsls	r4, r2
  406d54:	4320      	orrs	r0, r4
  406d56:	2e02      	cmp	r6, #2
  406d58:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406d5c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406d60:	d023      	beq.n	406daa <__register_exitproc+0x92>
  406d62:	3202      	adds	r2, #2
  406d64:	f8c3 e004 	str.w	lr, [r3, #4]
  406d68:	6828      	ldr	r0, [r5, #0]
  406d6a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  406d6e:	f7ff f81b 	bl	405da8 <__retarget_lock_release_recursive>
  406d72:	2000      	movs	r0, #0
  406d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406d78:	4b17      	ldr	r3, [pc, #92]	; (406dd8 <__register_exitproc+0xc0>)
  406d7a:	b30b      	cbz	r3, 406dc0 <__register_exitproc+0xa8>
  406d7c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406d80:	f3af 8000 	nop.w
  406d84:	4603      	mov	r3, r0
  406d86:	b1d8      	cbz	r0, 406dc0 <__register_exitproc+0xa8>
  406d88:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406d8c:	6002      	str	r2, [r0, #0]
  406d8e:	2100      	movs	r1, #0
  406d90:	6041      	str	r1, [r0, #4]
  406d92:	460a      	mov	r2, r1
  406d94:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406d98:	f04f 0e01 	mov.w	lr, #1
  406d9c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406da0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406da4:	2e00      	cmp	r6, #0
  406da6:	d0dc      	beq.n	406d62 <__register_exitproc+0x4a>
  406da8:	e7cc      	b.n	406d44 <__register_exitproc+0x2c>
  406daa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406dae:	430c      	orrs	r4, r1
  406db0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406db4:	e7d5      	b.n	406d62 <__register_exitproc+0x4a>
  406db6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406dba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406dbe:	e7bb      	b.n	406d38 <__register_exitproc+0x20>
  406dc0:	6828      	ldr	r0, [r5, #0]
  406dc2:	f7fe fff1 	bl	405da8 <__retarget_lock_release_recursive>
  406dc6:	f04f 30ff 	mov.w	r0, #4294967295
  406dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406dce:	bf00      	nop
  406dd0:	20000438 	.word	0x20000438
  406dd4:	004087c8 	.word	0x004087c8
  406dd8:	00000000 	.word	0x00000000

00406ddc <_calloc_r>:
  406ddc:	b510      	push	{r4, lr}
  406dde:	fb02 f101 	mul.w	r1, r2, r1
  406de2:	f7fe ffe3 	bl	405dac <_malloc_r>
  406de6:	4604      	mov	r4, r0
  406de8:	b1d8      	cbz	r0, 406e22 <_calloc_r+0x46>
  406dea:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406dee:	f022 0203 	bic.w	r2, r2, #3
  406df2:	3a04      	subs	r2, #4
  406df4:	2a24      	cmp	r2, #36	; 0x24
  406df6:	d818      	bhi.n	406e2a <_calloc_r+0x4e>
  406df8:	2a13      	cmp	r2, #19
  406dfa:	d914      	bls.n	406e26 <_calloc_r+0x4a>
  406dfc:	2300      	movs	r3, #0
  406dfe:	2a1b      	cmp	r2, #27
  406e00:	6003      	str	r3, [r0, #0]
  406e02:	6043      	str	r3, [r0, #4]
  406e04:	d916      	bls.n	406e34 <_calloc_r+0x58>
  406e06:	2a24      	cmp	r2, #36	; 0x24
  406e08:	6083      	str	r3, [r0, #8]
  406e0a:	60c3      	str	r3, [r0, #12]
  406e0c:	bf11      	iteee	ne
  406e0e:	f100 0210 	addne.w	r2, r0, #16
  406e12:	6103      	streq	r3, [r0, #16]
  406e14:	6143      	streq	r3, [r0, #20]
  406e16:	f100 0218 	addeq.w	r2, r0, #24
  406e1a:	2300      	movs	r3, #0
  406e1c:	6013      	str	r3, [r2, #0]
  406e1e:	6053      	str	r3, [r2, #4]
  406e20:	6093      	str	r3, [r2, #8]
  406e22:	4620      	mov	r0, r4
  406e24:	bd10      	pop	{r4, pc}
  406e26:	4602      	mov	r2, r0
  406e28:	e7f7      	b.n	406e1a <_calloc_r+0x3e>
  406e2a:	2100      	movs	r1, #0
  406e2c:	f7fc fd20 	bl	403870 <memset>
  406e30:	4620      	mov	r0, r4
  406e32:	bd10      	pop	{r4, pc}
  406e34:	f100 0208 	add.w	r2, r0, #8
  406e38:	e7ef      	b.n	406e1a <_calloc_r+0x3e>
  406e3a:	bf00      	nop

00406e3c <_malloc_trim_r>:
  406e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406e3e:	4f24      	ldr	r7, [pc, #144]	; (406ed0 <_malloc_trim_r+0x94>)
  406e40:	460c      	mov	r4, r1
  406e42:	4606      	mov	r6, r0
  406e44:	f7ff fb4e 	bl	4064e4 <__malloc_lock>
  406e48:	68bb      	ldr	r3, [r7, #8]
  406e4a:	685d      	ldr	r5, [r3, #4]
  406e4c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406e50:	310f      	adds	r1, #15
  406e52:	f025 0503 	bic.w	r5, r5, #3
  406e56:	4429      	add	r1, r5
  406e58:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406e5c:	f021 010f 	bic.w	r1, r1, #15
  406e60:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406e64:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406e68:	db07      	blt.n	406e7a <_malloc_trim_r+0x3e>
  406e6a:	2100      	movs	r1, #0
  406e6c:	4630      	mov	r0, r6
  406e6e:	f7ff fe3f 	bl	406af0 <_sbrk_r>
  406e72:	68bb      	ldr	r3, [r7, #8]
  406e74:	442b      	add	r3, r5
  406e76:	4298      	cmp	r0, r3
  406e78:	d004      	beq.n	406e84 <_malloc_trim_r+0x48>
  406e7a:	4630      	mov	r0, r6
  406e7c:	f7ff fb38 	bl	4064f0 <__malloc_unlock>
  406e80:	2000      	movs	r0, #0
  406e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406e84:	4261      	negs	r1, r4
  406e86:	4630      	mov	r0, r6
  406e88:	f7ff fe32 	bl	406af0 <_sbrk_r>
  406e8c:	3001      	adds	r0, #1
  406e8e:	d00d      	beq.n	406eac <_malloc_trim_r+0x70>
  406e90:	4b10      	ldr	r3, [pc, #64]	; (406ed4 <_malloc_trim_r+0x98>)
  406e92:	68ba      	ldr	r2, [r7, #8]
  406e94:	6819      	ldr	r1, [r3, #0]
  406e96:	1b2d      	subs	r5, r5, r4
  406e98:	f045 0501 	orr.w	r5, r5, #1
  406e9c:	4630      	mov	r0, r6
  406e9e:	1b09      	subs	r1, r1, r4
  406ea0:	6055      	str	r5, [r2, #4]
  406ea2:	6019      	str	r1, [r3, #0]
  406ea4:	f7ff fb24 	bl	4064f0 <__malloc_unlock>
  406ea8:	2001      	movs	r0, #1
  406eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406eac:	2100      	movs	r1, #0
  406eae:	4630      	mov	r0, r6
  406eb0:	f7ff fe1e 	bl	406af0 <_sbrk_r>
  406eb4:	68ba      	ldr	r2, [r7, #8]
  406eb6:	1a83      	subs	r3, r0, r2
  406eb8:	2b0f      	cmp	r3, #15
  406eba:	ddde      	ble.n	406e7a <_malloc_trim_r+0x3e>
  406ebc:	4c06      	ldr	r4, [pc, #24]	; (406ed8 <_malloc_trim_r+0x9c>)
  406ebe:	4905      	ldr	r1, [pc, #20]	; (406ed4 <_malloc_trim_r+0x98>)
  406ec0:	6824      	ldr	r4, [r4, #0]
  406ec2:	f043 0301 	orr.w	r3, r3, #1
  406ec6:	1b00      	subs	r0, r0, r4
  406ec8:	6053      	str	r3, [r2, #4]
  406eca:	6008      	str	r0, [r1, #0]
  406ecc:	e7d5      	b.n	406e7a <_malloc_trim_r+0x3e>
  406ece:	bf00      	nop
  406ed0:	2000043c 	.word	0x2000043c
  406ed4:	20000a8c 	.word	0x20000a8c
  406ed8:	20000844 	.word	0x20000844

00406edc <_free_r>:
  406edc:	2900      	cmp	r1, #0
  406ede:	d044      	beq.n	406f6a <_free_r+0x8e>
  406ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406ee4:	460d      	mov	r5, r1
  406ee6:	4680      	mov	r8, r0
  406ee8:	f7ff fafc 	bl	4064e4 <__malloc_lock>
  406eec:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406ef0:	4969      	ldr	r1, [pc, #420]	; (407098 <_free_r+0x1bc>)
  406ef2:	f027 0301 	bic.w	r3, r7, #1
  406ef6:	f1a5 0408 	sub.w	r4, r5, #8
  406efa:	18e2      	adds	r2, r4, r3
  406efc:	688e      	ldr	r6, [r1, #8]
  406efe:	6850      	ldr	r0, [r2, #4]
  406f00:	42b2      	cmp	r2, r6
  406f02:	f020 0003 	bic.w	r0, r0, #3
  406f06:	d05e      	beq.n	406fc6 <_free_r+0xea>
  406f08:	07fe      	lsls	r6, r7, #31
  406f0a:	6050      	str	r0, [r2, #4]
  406f0c:	d40b      	bmi.n	406f26 <_free_r+0x4a>
  406f0e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406f12:	1be4      	subs	r4, r4, r7
  406f14:	f101 0e08 	add.w	lr, r1, #8
  406f18:	68a5      	ldr	r5, [r4, #8]
  406f1a:	4575      	cmp	r5, lr
  406f1c:	443b      	add	r3, r7
  406f1e:	d06d      	beq.n	406ffc <_free_r+0x120>
  406f20:	68e7      	ldr	r7, [r4, #12]
  406f22:	60ef      	str	r7, [r5, #12]
  406f24:	60bd      	str	r5, [r7, #8]
  406f26:	1815      	adds	r5, r2, r0
  406f28:	686d      	ldr	r5, [r5, #4]
  406f2a:	07ed      	lsls	r5, r5, #31
  406f2c:	d53e      	bpl.n	406fac <_free_r+0xd0>
  406f2e:	f043 0201 	orr.w	r2, r3, #1
  406f32:	6062      	str	r2, [r4, #4]
  406f34:	50e3      	str	r3, [r4, r3]
  406f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406f3a:	d217      	bcs.n	406f6c <_free_r+0x90>
  406f3c:	08db      	lsrs	r3, r3, #3
  406f3e:	1c58      	adds	r0, r3, #1
  406f40:	109a      	asrs	r2, r3, #2
  406f42:	684d      	ldr	r5, [r1, #4]
  406f44:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406f48:	60a7      	str	r7, [r4, #8]
  406f4a:	2301      	movs	r3, #1
  406f4c:	4093      	lsls	r3, r2
  406f4e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406f52:	432b      	orrs	r3, r5
  406f54:	3a08      	subs	r2, #8
  406f56:	60e2      	str	r2, [r4, #12]
  406f58:	604b      	str	r3, [r1, #4]
  406f5a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406f5e:	60fc      	str	r4, [r7, #12]
  406f60:	4640      	mov	r0, r8
  406f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406f66:	f7ff bac3 	b.w	4064f0 <__malloc_unlock>
  406f6a:	4770      	bx	lr
  406f6c:	0a5a      	lsrs	r2, r3, #9
  406f6e:	2a04      	cmp	r2, #4
  406f70:	d852      	bhi.n	407018 <_free_r+0x13c>
  406f72:	099a      	lsrs	r2, r3, #6
  406f74:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406f78:	00ff      	lsls	r7, r7, #3
  406f7a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406f7e:	19c8      	adds	r0, r1, r7
  406f80:	59ca      	ldr	r2, [r1, r7]
  406f82:	3808      	subs	r0, #8
  406f84:	4290      	cmp	r0, r2
  406f86:	d04f      	beq.n	407028 <_free_r+0x14c>
  406f88:	6851      	ldr	r1, [r2, #4]
  406f8a:	f021 0103 	bic.w	r1, r1, #3
  406f8e:	428b      	cmp	r3, r1
  406f90:	d232      	bcs.n	406ff8 <_free_r+0x11c>
  406f92:	6892      	ldr	r2, [r2, #8]
  406f94:	4290      	cmp	r0, r2
  406f96:	d1f7      	bne.n	406f88 <_free_r+0xac>
  406f98:	68c3      	ldr	r3, [r0, #12]
  406f9a:	60a0      	str	r0, [r4, #8]
  406f9c:	60e3      	str	r3, [r4, #12]
  406f9e:	609c      	str	r4, [r3, #8]
  406fa0:	60c4      	str	r4, [r0, #12]
  406fa2:	4640      	mov	r0, r8
  406fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406fa8:	f7ff baa2 	b.w	4064f0 <__malloc_unlock>
  406fac:	6895      	ldr	r5, [r2, #8]
  406fae:	4f3b      	ldr	r7, [pc, #236]	; (40709c <_free_r+0x1c0>)
  406fb0:	42bd      	cmp	r5, r7
  406fb2:	4403      	add	r3, r0
  406fb4:	d040      	beq.n	407038 <_free_r+0x15c>
  406fb6:	68d0      	ldr	r0, [r2, #12]
  406fb8:	60e8      	str	r0, [r5, #12]
  406fba:	f043 0201 	orr.w	r2, r3, #1
  406fbe:	6085      	str	r5, [r0, #8]
  406fc0:	6062      	str	r2, [r4, #4]
  406fc2:	50e3      	str	r3, [r4, r3]
  406fc4:	e7b7      	b.n	406f36 <_free_r+0x5a>
  406fc6:	07ff      	lsls	r7, r7, #31
  406fc8:	4403      	add	r3, r0
  406fca:	d407      	bmi.n	406fdc <_free_r+0x100>
  406fcc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406fd0:	1aa4      	subs	r4, r4, r2
  406fd2:	4413      	add	r3, r2
  406fd4:	68a0      	ldr	r0, [r4, #8]
  406fd6:	68e2      	ldr	r2, [r4, #12]
  406fd8:	60c2      	str	r2, [r0, #12]
  406fda:	6090      	str	r0, [r2, #8]
  406fdc:	4a30      	ldr	r2, [pc, #192]	; (4070a0 <_free_r+0x1c4>)
  406fde:	6812      	ldr	r2, [r2, #0]
  406fe0:	f043 0001 	orr.w	r0, r3, #1
  406fe4:	4293      	cmp	r3, r2
  406fe6:	6060      	str	r0, [r4, #4]
  406fe8:	608c      	str	r4, [r1, #8]
  406fea:	d3b9      	bcc.n	406f60 <_free_r+0x84>
  406fec:	4b2d      	ldr	r3, [pc, #180]	; (4070a4 <_free_r+0x1c8>)
  406fee:	4640      	mov	r0, r8
  406ff0:	6819      	ldr	r1, [r3, #0]
  406ff2:	f7ff ff23 	bl	406e3c <_malloc_trim_r>
  406ff6:	e7b3      	b.n	406f60 <_free_r+0x84>
  406ff8:	4610      	mov	r0, r2
  406ffa:	e7cd      	b.n	406f98 <_free_r+0xbc>
  406ffc:	1811      	adds	r1, r2, r0
  406ffe:	6849      	ldr	r1, [r1, #4]
  407000:	07c9      	lsls	r1, r1, #31
  407002:	d444      	bmi.n	40708e <_free_r+0x1b2>
  407004:	6891      	ldr	r1, [r2, #8]
  407006:	68d2      	ldr	r2, [r2, #12]
  407008:	60ca      	str	r2, [r1, #12]
  40700a:	4403      	add	r3, r0
  40700c:	f043 0001 	orr.w	r0, r3, #1
  407010:	6091      	str	r1, [r2, #8]
  407012:	6060      	str	r0, [r4, #4]
  407014:	50e3      	str	r3, [r4, r3]
  407016:	e7a3      	b.n	406f60 <_free_r+0x84>
  407018:	2a14      	cmp	r2, #20
  40701a:	d816      	bhi.n	40704a <_free_r+0x16e>
  40701c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407020:	00ff      	lsls	r7, r7, #3
  407022:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407026:	e7aa      	b.n	406f7e <_free_r+0xa2>
  407028:	10aa      	asrs	r2, r5, #2
  40702a:	2301      	movs	r3, #1
  40702c:	684d      	ldr	r5, [r1, #4]
  40702e:	4093      	lsls	r3, r2
  407030:	432b      	orrs	r3, r5
  407032:	604b      	str	r3, [r1, #4]
  407034:	4603      	mov	r3, r0
  407036:	e7b0      	b.n	406f9a <_free_r+0xbe>
  407038:	f043 0201 	orr.w	r2, r3, #1
  40703c:	614c      	str	r4, [r1, #20]
  40703e:	610c      	str	r4, [r1, #16]
  407040:	60e5      	str	r5, [r4, #12]
  407042:	60a5      	str	r5, [r4, #8]
  407044:	6062      	str	r2, [r4, #4]
  407046:	50e3      	str	r3, [r4, r3]
  407048:	e78a      	b.n	406f60 <_free_r+0x84>
  40704a:	2a54      	cmp	r2, #84	; 0x54
  40704c:	d806      	bhi.n	40705c <_free_r+0x180>
  40704e:	0b1a      	lsrs	r2, r3, #12
  407050:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407054:	00ff      	lsls	r7, r7, #3
  407056:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40705a:	e790      	b.n	406f7e <_free_r+0xa2>
  40705c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407060:	d806      	bhi.n	407070 <_free_r+0x194>
  407062:	0bda      	lsrs	r2, r3, #15
  407064:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407068:	00ff      	lsls	r7, r7, #3
  40706a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40706e:	e786      	b.n	406f7e <_free_r+0xa2>
  407070:	f240 5054 	movw	r0, #1364	; 0x554
  407074:	4282      	cmp	r2, r0
  407076:	d806      	bhi.n	407086 <_free_r+0x1aa>
  407078:	0c9a      	lsrs	r2, r3, #18
  40707a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40707e:	00ff      	lsls	r7, r7, #3
  407080:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407084:	e77b      	b.n	406f7e <_free_r+0xa2>
  407086:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40708a:	257e      	movs	r5, #126	; 0x7e
  40708c:	e777      	b.n	406f7e <_free_r+0xa2>
  40708e:	f043 0101 	orr.w	r1, r3, #1
  407092:	6061      	str	r1, [r4, #4]
  407094:	6013      	str	r3, [r2, #0]
  407096:	e763      	b.n	406f60 <_free_r+0x84>
  407098:	2000043c 	.word	0x2000043c
  40709c:	20000444 	.word	0x20000444
  4070a0:	20000848 	.word	0x20000848
  4070a4:	20000abc 	.word	0x20000abc

004070a8 <__ascii_mbtowc>:
  4070a8:	b082      	sub	sp, #8
  4070aa:	b149      	cbz	r1, 4070c0 <__ascii_mbtowc+0x18>
  4070ac:	b15a      	cbz	r2, 4070c6 <__ascii_mbtowc+0x1e>
  4070ae:	b16b      	cbz	r3, 4070cc <__ascii_mbtowc+0x24>
  4070b0:	7813      	ldrb	r3, [r2, #0]
  4070b2:	600b      	str	r3, [r1, #0]
  4070b4:	7812      	ldrb	r2, [r2, #0]
  4070b6:	1c10      	adds	r0, r2, #0
  4070b8:	bf18      	it	ne
  4070ba:	2001      	movne	r0, #1
  4070bc:	b002      	add	sp, #8
  4070be:	4770      	bx	lr
  4070c0:	a901      	add	r1, sp, #4
  4070c2:	2a00      	cmp	r2, #0
  4070c4:	d1f3      	bne.n	4070ae <__ascii_mbtowc+0x6>
  4070c6:	4610      	mov	r0, r2
  4070c8:	b002      	add	sp, #8
  4070ca:	4770      	bx	lr
  4070cc:	f06f 0001 	mvn.w	r0, #1
  4070d0:	e7f4      	b.n	4070bc <__ascii_mbtowc+0x14>
  4070d2:	bf00      	nop

004070d4 <memmove>:
  4070d4:	4288      	cmp	r0, r1
  4070d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4070d8:	d90d      	bls.n	4070f6 <memmove+0x22>
  4070da:	188b      	adds	r3, r1, r2
  4070dc:	4298      	cmp	r0, r3
  4070de:	d20a      	bcs.n	4070f6 <memmove+0x22>
  4070e0:	1884      	adds	r4, r0, r2
  4070e2:	2a00      	cmp	r2, #0
  4070e4:	d051      	beq.n	40718a <memmove+0xb6>
  4070e6:	4622      	mov	r2, r4
  4070e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4070ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4070f0:	4299      	cmp	r1, r3
  4070f2:	d1f9      	bne.n	4070e8 <memmove+0x14>
  4070f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4070f6:	2a0f      	cmp	r2, #15
  4070f8:	d948      	bls.n	40718c <memmove+0xb8>
  4070fa:	ea41 0300 	orr.w	r3, r1, r0
  4070fe:	079b      	lsls	r3, r3, #30
  407100:	d146      	bne.n	407190 <memmove+0xbc>
  407102:	f100 0410 	add.w	r4, r0, #16
  407106:	f101 0310 	add.w	r3, r1, #16
  40710a:	4615      	mov	r5, r2
  40710c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407110:	f844 6c10 	str.w	r6, [r4, #-16]
  407114:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407118:	f844 6c0c 	str.w	r6, [r4, #-12]
  40711c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407120:	f844 6c08 	str.w	r6, [r4, #-8]
  407124:	3d10      	subs	r5, #16
  407126:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40712a:	f844 6c04 	str.w	r6, [r4, #-4]
  40712e:	2d0f      	cmp	r5, #15
  407130:	f103 0310 	add.w	r3, r3, #16
  407134:	f104 0410 	add.w	r4, r4, #16
  407138:	d8e8      	bhi.n	40710c <memmove+0x38>
  40713a:	f1a2 0310 	sub.w	r3, r2, #16
  40713e:	f023 030f 	bic.w	r3, r3, #15
  407142:	f002 0e0f 	and.w	lr, r2, #15
  407146:	3310      	adds	r3, #16
  407148:	f1be 0f03 	cmp.w	lr, #3
  40714c:	4419      	add	r1, r3
  40714e:	4403      	add	r3, r0
  407150:	d921      	bls.n	407196 <memmove+0xc2>
  407152:	1f1e      	subs	r6, r3, #4
  407154:	460d      	mov	r5, r1
  407156:	4674      	mov	r4, lr
  407158:	3c04      	subs	r4, #4
  40715a:	f855 7b04 	ldr.w	r7, [r5], #4
  40715e:	f846 7f04 	str.w	r7, [r6, #4]!
  407162:	2c03      	cmp	r4, #3
  407164:	d8f8      	bhi.n	407158 <memmove+0x84>
  407166:	f1ae 0404 	sub.w	r4, lr, #4
  40716a:	f024 0403 	bic.w	r4, r4, #3
  40716e:	3404      	adds	r4, #4
  407170:	4421      	add	r1, r4
  407172:	4423      	add	r3, r4
  407174:	f002 0203 	and.w	r2, r2, #3
  407178:	b162      	cbz	r2, 407194 <memmove+0xc0>
  40717a:	3b01      	subs	r3, #1
  40717c:	440a      	add	r2, r1
  40717e:	f811 4b01 	ldrb.w	r4, [r1], #1
  407182:	f803 4f01 	strb.w	r4, [r3, #1]!
  407186:	428a      	cmp	r2, r1
  407188:	d1f9      	bne.n	40717e <memmove+0xaa>
  40718a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40718c:	4603      	mov	r3, r0
  40718e:	e7f3      	b.n	407178 <memmove+0xa4>
  407190:	4603      	mov	r3, r0
  407192:	e7f2      	b.n	40717a <memmove+0xa6>
  407194:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407196:	4672      	mov	r2, lr
  407198:	e7ee      	b.n	407178 <memmove+0xa4>
  40719a:	bf00      	nop

0040719c <_realloc_r>:
  40719c:	2900      	cmp	r1, #0
  40719e:	f000 8095 	beq.w	4072cc <_realloc_r+0x130>
  4071a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4071a6:	460d      	mov	r5, r1
  4071a8:	4616      	mov	r6, r2
  4071aa:	b083      	sub	sp, #12
  4071ac:	4680      	mov	r8, r0
  4071ae:	f106 070b 	add.w	r7, r6, #11
  4071b2:	f7ff f997 	bl	4064e4 <__malloc_lock>
  4071b6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4071ba:	2f16      	cmp	r7, #22
  4071bc:	f02e 0403 	bic.w	r4, lr, #3
  4071c0:	f1a5 0908 	sub.w	r9, r5, #8
  4071c4:	d83c      	bhi.n	407240 <_realloc_r+0xa4>
  4071c6:	2210      	movs	r2, #16
  4071c8:	4617      	mov	r7, r2
  4071ca:	42be      	cmp	r6, r7
  4071cc:	d83d      	bhi.n	40724a <_realloc_r+0xae>
  4071ce:	4294      	cmp	r4, r2
  4071d0:	da43      	bge.n	40725a <_realloc_r+0xbe>
  4071d2:	4bc4      	ldr	r3, [pc, #784]	; (4074e4 <_realloc_r+0x348>)
  4071d4:	6899      	ldr	r1, [r3, #8]
  4071d6:	eb09 0004 	add.w	r0, r9, r4
  4071da:	4288      	cmp	r0, r1
  4071dc:	f000 80b4 	beq.w	407348 <_realloc_r+0x1ac>
  4071e0:	6843      	ldr	r3, [r0, #4]
  4071e2:	f023 0101 	bic.w	r1, r3, #1
  4071e6:	4401      	add	r1, r0
  4071e8:	6849      	ldr	r1, [r1, #4]
  4071ea:	07c9      	lsls	r1, r1, #31
  4071ec:	d54c      	bpl.n	407288 <_realloc_r+0xec>
  4071ee:	f01e 0f01 	tst.w	lr, #1
  4071f2:	f000 809b 	beq.w	40732c <_realloc_r+0x190>
  4071f6:	4631      	mov	r1, r6
  4071f8:	4640      	mov	r0, r8
  4071fa:	f7fe fdd7 	bl	405dac <_malloc_r>
  4071fe:	4606      	mov	r6, r0
  407200:	2800      	cmp	r0, #0
  407202:	d03a      	beq.n	40727a <_realloc_r+0xde>
  407204:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407208:	f023 0301 	bic.w	r3, r3, #1
  40720c:	444b      	add	r3, r9
  40720e:	f1a0 0208 	sub.w	r2, r0, #8
  407212:	429a      	cmp	r2, r3
  407214:	f000 8121 	beq.w	40745a <_realloc_r+0x2be>
  407218:	1f22      	subs	r2, r4, #4
  40721a:	2a24      	cmp	r2, #36	; 0x24
  40721c:	f200 8107 	bhi.w	40742e <_realloc_r+0x292>
  407220:	2a13      	cmp	r2, #19
  407222:	f200 80db 	bhi.w	4073dc <_realloc_r+0x240>
  407226:	4603      	mov	r3, r0
  407228:	462a      	mov	r2, r5
  40722a:	6811      	ldr	r1, [r2, #0]
  40722c:	6019      	str	r1, [r3, #0]
  40722e:	6851      	ldr	r1, [r2, #4]
  407230:	6059      	str	r1, [r3, #4]
  407232:	6892      	ldr	r2, [r2, #8]
  407234:	609a      	str	r2, [r3, #8]
  407236:	4629      	mov	r1, r5
  407238:	4640      	mov	r0, r8
  40723a:	f7ff fe4f 	bl	406edc <_free_r>
  40723e:	e01c      	b.n	40727a <_realloc_r+0xde>
  407240:	f027 0707 	bic.w	r7, r7, #7
  407244:	2f00      	cmp	r7, #0
  407246:	463a      	mov	r2, r7
  407248:	dabf      	bge.n	4071ca <_realloc_r+0x2e>
  40724a:	2600      	movs	r6, #0
  40724c:	230c      	movs	r3, #12
  40724e:	4630      	mov	r0, r6
  407250:	f8c8 3000 	str.w	r3, [r8]
  407254:	b003      	add	sp, #12
  407256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40725a:	462e      	mov	r6, r5
  40725c:	1be3      	subs	r3, r4, r7
  40725e:	2b0f      	cmp	r3, #15
  407260:	d81e      	bhi.n	4072a0 <_realloc_r+0x104>
  407262:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407266:	f003 0301 	and.w	r3, r3, #1
  40726a:	4323      	orrs	r3, r4
  40726c:	444c      	add	r4, r9
  40726e:	f8c9 3004 	str.w	r3, [r9, #4]
  407272:	6863      	ldr	r3, [r4, #4]
  407274:	f043 0301 	orr.w	r3, r3, #1
  407278:	6063      	str	r3, [r4, #4]
  40727a:	4640      	mov	r0, r8
  40727c:	f7ff f938 	bl	4064f0 <__malloc_unlock>
  407280:	4630      	mov	r0, r6
  407282:	b003      	add	sp, #12
  407284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407288:	f023 0303 	bic.w	r3, r3, #3
  40728c:	18e1      	adds	r1, r4, r3
  40728e:	4291      	cmp	r1, r2
  407290:	db1f      	blt.n	4072d2 <_realloc_r+0x136>
  407292:	68c3      	ldr	r3, [r0, #12]
  407294:	6882      	ldr	r2, [r0, #8]
  407296:	462e      	mov	r6, r5
  407298:	60d3      	str	r3, [r2, #12]
  40729a:	460c      	mov	r4, r1
  40729c:	609a      	str	r2, [r3, #8]
  40729e:	e7dd      	b.n	40725c <_realloc_r+0xc0>
  4072a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4072a4:	eb09 0107 	add.w	r1, r9, r7
  4072a8:	f002 0201 	and.w	r2, r2, #1
  4072ac:	444c      	add	r4, r9
  4072ae:	f043 0301 	orr.w	r3, r3, #1
  4072b2:	4317      	orrs	r7, r2
  4072b4:	f8c9 7004 	str.w	r7, [r9, #4]
  4072b8:	604b      	str	r3, [r1, #4]
  4072ba:	6863      	ldr	r3, [r4, #4]
  4072bc:	f043 0301 	orr.w	r3, r3, #1
  4072c0:	3108      	adds	r1, #8
  4072c2:	6063      	str	r3, [r4, #4]
  4072c4:	4640      	mov	r0, r8
  4072c6:	f7ff fe09 	bl	406edc <_free_r>
  4072ca:	e7d6      	b.n	40727a <_realloc_r+0xde>
  4072cc:	4611      	mov	r1, r2
  4072ce:	f7fe bd6d 	b.w	405dac <_malloc_r>
  4072d2:	f01e 0f01 	tst.w	lr, #1
  4072d6:	d18e      	bne.n	4071f6 <_realloc_r+0x5a>
  4072d8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4072dc:	eba9 0a01 	sub.w	sl, r9, r1
  4072e0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4072e4:	f021 0103 	bic.w	r1, r1, #3
  4072e8:	440b      	add	r3, r1
  4072ea:	4423      	add	r3, r4
  4072ec:	4293      	cmp	r3, r2
  4072ee:	db25      	blt.n	40733c <_realloc_r+0x1a0>
  4072f0:	68c2      	ldr	r2, [r0, #12]
  4072f2:	6881      	ldr	r1, [r0, #8]
  4072f4:	4656      	mov	r6, sl
  4072f6:	60ca      	str	r2, [r1, #12]
  4072f8:	6091      	str	r1, [r2, #8]
  4072fa:	f8da 100c 	ldr.w	r1, [sl, #12]
  4072fe:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407302:	1f22      	subs	r2, r4, #4
  407304:	2a24      	cmp	r2, #36	; 0x24
  407306:	60c1      	str	r1, [r0, #12]
  407308:	6088      	str	r0, [r1, #8]
  40730a:	f200 8094 	bhi.w	407436 <_realloc_r+0x29a>
  40730e:	2a13      	cmp	r2, #19
  407310:	d96f      	bls.n	4073f2 <_realloc_r+0x256>
  407312:	6829      	ldr	r1, [r5, #0]
  407314:	f8ca 1008 	str.w	r1, [sl, #8]
  407318:	6869      	ldr	r1, [r5, #4]
  40731a:	f8ca 100c 	str.w	r1, [sl, #12]
  40731e:	2a1b      	cmp	r2, #27
  407320:	f200 80a2 	bhi.w	407468 <_realloc_r+0x2cc>
  407324:	3508      	adds	r5, #8
  407326:	f10a 0210 	add.w	r2, sl, #16
  40732a:	e063      	b.n	4073f4 <_realloc_r+0x258>
  40732c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407330:	eba9 0a03 	sub.w	sl, r9, r3
  407334:	f8da 1004 	ldr.w	r1, [sl, #4]
  407338:	f021 0103 	bic.w	r1, r1, #3
  40733c:	1863      	adds	r3, r4, r1
  40733e:	4293      	cmp	r3, r2
  407340:	f6ff af59 	blt.w	4071f6 <_realloc_r+0x5a>
  407344:	4656      	mov	r6, sl
  407346:	e7d8      	b.n	4072fa <_realloc_r+0x15e>
  407348:	6841      	ldr	r1, [r0, #4]
  40734a:	f021 0b03 	bic.w	fp, r1, #3
  40734e:	44a3      	add	fp, r4
  407350:	f107 0010 	add.w	r0, r7, #16
  407354:	4583      	cmp	fp, r0
  407356:	da56      	bge.n	407406 <_realloc_r+0x26a>
  407358:	f01e 0f01 	tst.w	lr, #1
  40735c:	f47f af4b 	bne.w	4071f6 <_realloc_r+0x5a>
  407360:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407364:	eba9 0a01 	sub.w	sl, r9, r1
  407368:	f8da 1004 	ldr.w	r1, [sl, #4]
  40736c:	f021 0103 	bic.w	r1, r1, #3
  407370:	448b      	add	fp, r1
  407372:	4558      	cmp	r0, fp
  407374:	dce2      	bgt.n	40733c <_realloc_r+0x1a0>
  407376:	4656      	mov	r6, sl
  407378:	f8da 100c 	ldr.w	r1, [sl, #12]
  40737c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407380:	1f22      	subs	r2, r4, #4
  407382:	2a24      	cmp	r2, #36	; 0x24
  407384:	60c1      	str	r1, [r0, #12]
  407386:	6088      	str	r0, [r1, #8]
  407388:	f200 808f 	bhi.w	4074aa <_realloc_r+0x30e>
  40738c:	2a13      	cmp	r2, #19
  40738e:	f240 808a 	bls.w	4074a6 <_realloc_r+0x30a>
  407392:	6829      	ldr	r1, [r5, #0]
  407394:	f8ca 1008 	str.w	r1, [sl, #8]
  407398:	6869      	ldr	r1, [r5, #4]
  40739a:	f8ca 100c 	str.w	r1, [sl, #12]
  40739e:	2a1b      	cmp	r2, #27
  4073a0:	f200 808a 	bhi.w	4074b8 <_realloc_r+0x31c>
  4073a4:	3508      	adds	r5, #8
  4073a6:	f10a 0210 	add.w	r2, sl, #16
  4073aa:	6829      	ldr	r1, [r5, #0]
  4073ac:	6011      	str	r1, [r2, #0]
  4073ae:	6869      	ldr	r1, [r5, #4]
  4073b0:	6051      	str	r1, [r2, #4]
  4073b2:	68a9      	ldr	r1, [r5, #8]
  4073b4:	6091      	str	r1, [r2, #8]
  4073b6:	eb0a 0107 	add.w	r1, sl, r7
  4073ba:	ebab 0207 	sub.w	r2, fp, r7
  4073be:	f042 0201 	orr.w	r2, r2, #1
  4073c2:	6099      	str	r1, [r3, #8]
  4073c4:	604a      	str	r2, [r1, #4]
  4073c6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4073ca:	f003 0301 	and.w	r3, r3, #1
  4073ce:	431f      	orrs	r7, r3
  4073d0:	4640      	mov	r0, r8
  4073d2:	f8ca 7004 	str.w	r7, [sl, #4]
  4073d6:	f7ff f88b 	bl	4064f0 <__malloc_unlock>
  4073da:	e751      	b.n	407280 <_realloc_r+0xe4>
  4073dc:	682b      	ldr	r3, [r5, #0]
  4073de:	6003      	str	r3, [r0, #0]
  4073e0:	686b      	ldr	r3, [r5, #4]
  4073e2:	6043      	str	r3, [r0, #4]
  4073e4:	2a1b      	cmp	r2, #27
  4073e6:	d82d      	bhi.n	407444 <_realloc_r+0x2a8>
  4073e8:	f100 0308 	add.w	r3, r0, #8
  4073ec:	f105 0208 	add.w	r2, r5, #8
  4073f0:	e71b      	b.n	40722a <_realloc_r+0x8e>
  4073f2:	4632      	mov	r2, r6
  4073f4:	6829      	ldr	r1, [r5, #0]
  4073f6:	6011      	str	r1, [r2, #0]
  4073f8:	6869      	ldr	r1, [r5, #4]
  4073fa:	6051      	str	r1, [r2, #4]
  4073fc:	68a9      	ldr	r1, [r5, #8]
  4073fe:	6091      	str	r1, [r2, #8]
  407400:	461c      	mov	r4, r3
  407402:	46d1      	mov	r9, sl
  407404:	e72a      	b.n	40725c <_realloc_r+0xc0>
  407406:	eb09 0107 	add.w	r1, r9, r7
  40740a:	ebab 0b07 	sub.w	fp, fp, r7
  40740e:	f04b 0201 	orr.w	r2, fp, #1
  407412:	6099      	str	r1, [r3, #8]
  407414:	604a      	str	r2, [r1, #4]
  407416:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40741a:	f003 0301 	and.w	r3, r3, #1
  40741e:	431f      	orrs	r7, r3
  407420:	4640      	mov	r0, r8
  407422:	f845 7c04 	str.w	r7, [r5, #-4]
  407426:	f7ff f863 	bl	4064f0 <__malloc_unlock>
  40742a:	462e      	mov	r6, r5
  40742c:	e728      	b.n	407280 <_realloc_r+0xe4>
  40742e:	4629      	mov	r1, r5
  407430:	f7ff fe50 	bl	4070d4 <memmove>
  407434:	e6ff      	b.n	407236 <_realloc_r+0x9a>
  407436:	4629      	mov	r1, r5
  407438:	4630      	mov	r0, r6
  40743a:	461c      	mov	r4, r3
  40743c:	46d1      	mov	r9, sl
  40743e:	f7ff fe49 	bl	4070d4 <memmove>
  407442:	e70b      	b.n	40725c <_realloc_r+0xc0>
  407444:	68ab      	ldr	r3, [r5, #8]
  407446:	6083      	str	r3, [r0, #8]
  407448:	68eb      	ldr	r3, [r5, #12]
  40744a:	60c3      	str	r3, [r0, #12]
  40744c:	2a24      	cmp	r2, #36	; 0x24
  40744e:	d017      	beq.n	407480 <_realloc_r+0x2e4>
  407450:	f100 0310 	add.w	r3, r0, #16
  407454:	f105 0210 	add.w	r2, r5, #16
  407458:	e6e7      	b.n	40722a <_realloc_r+0x8e>
  40745a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40745e:	f023 0303 	bic.w	r3, r3, #3
  407462:	441c      	add	r4, r3
  407464:	462e      	mov	r6, r5
  407466:	e6f9      	b.n	40725c <_realloc_r+0xc0>
  407468:	68a9      	ldr	r1, [r5, #8]
  40746a:	f8ca 1010 	str.w	r1, [sl, #16]
  40746e:	68e9      	ldr	r1, [r5, #12]
  407470:	f8ca 1014 	str.w	r1, [sl, #20]
  407474:	2a24      	cmp	r2, #36	; 0x24
  407476:	d00c      	beq.n	407492 <_realloc_r+0x2f6>
  407478:	3510      	adds	r5, #16
  40747a:	f10a 0218 	add.w	r2, sl, #24
  40747e:	e7b9      	b.n	4073f4 <_realloc_r+0x258>
  407480:	692b      	ldr	r3, [r5, #16]
  407482:	6103      	str	r3, [r0, #16]
  407484:	696b      	ldr	r3, [r5, #20]
  407486:	6143      	str	r3, [r0, #20]
  407488:	f105 0218 	add.w	r2, r5, #24
  40748c:	f100 0318 	add.w	r3, r0, #24
  407490:	e6cb      	b.n	40722a <_realloc_r+0x8e>
  407492:	692a      	ldr	r2, [r5, #16]
  407494:	f8ca 2018 	str.w	r2, [sl, #24]
  407498:	696a      	ldr	r2, [r5, #20]
  40749a:	f8ca 201c 	str.w	r2, [sl, #28]
  40749e:	3518      	adds	r5, #24
  4074a0:	f10a 0220 	add.w	r2, sl, #32
  4074a4:	e7a6      	b.n	4073f4 <_realloc_r+0x258>
  4074a6:	4632      	mov	r2, r6
  4074a8:	e77f      	b.n	4073aa <_realloc_r+0x20e>
  4074aa:	4629      	mov	r1, r5
  4074ac:	4630      	mov	r0, r6
  4074ae:	9301      	str	r3, [sp, #4]
  4074b0:	f7ff fe10 	bl	4070d4 <memmove>
  4074b4:	9b01      	ldr	r3, [sp, #4]
  4074b6:	e77e      	b.n	4073b6 <_realloc_r+0x21a>
  4074b8:	68a9      	ldr	r1, [r5, #8]
  4074ba:	f8ca 1010 	str.w	r1, [sl, #16]
  4074be:	68e9      	ldr	r1, [r5, #12]
  4074c0:	f8ca 1014 	str.w	r1, [sl, #20]
  4074c4:	2a24      	cmp	r2, #36	; 0x24
  4074c6:	d003      	beq.n	4074d0 <_realloc_r+0x334>
  4074c8:	3510      	adds	r5, #16
  4074ca:	f10a 0218 	add.w	r2, sl, #24
  4074ce:	e76c      	b.n	4073aa <_realloc_r+0x20e>
  4074d0:	692a      	ldr	r2, [r5, #16]
  4074d2:	f8ca 2018 	str.w	r2, [sl, #24]
  4074d6:	696a      	ldr	r2, [r5, #20]
  4074d8:	f8ca 201c 	str.w	r2, [sl, #28]
  4074dc:	3518      	adds	r5, #24
  4074de:	f10a 0220 	add.w	r2, sl, #32
  4074e2:	e762      	b.n	4073aa <_realloc_r+0x20e>
  4074e4:	2000043c 	.word	0x2000043c

004074e8 <__ascii_wctomb>:
  4074e8:	b121      	cbz	r1, 4074f4 <__ascii_wctomb+0xc>
  4074ea:	2aff      	cmp	r2, #255	; 0xff
  4074ec:	d804      	bhi.n	4074f8 <__ascii_wctomb+0x10>
  4074ee:	700a      	strb	r2, [r1, #0]
  4074f0:	2001      	movs	r0, #1
  4074f2:	4770      	bx	lr
  4074f4:	4608      	mov	r0, r1
  4074f6:	4770      	bx	lr
  4074f8:	238a      	movs	r3, #138	; 0x8a
  4074fa:	6003      	str	r3, [r0, #0]
  4074fc:	f04f 30ff 	mov.w	r0, #4294967295
  407500:	4770      	bx	lr
  407502:	bf00      	nop

00407504 <__aeabi_drsub>:
  407504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407508:	e002      	b.n	407510 <__adddf3>
  40750a:	bf00      	nop

0040750c <__aeabi_dsub>:
  40750c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407510 <__adddf3>:
  407510:	b530      	push	{r4, r5, lr}
  407512:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407516:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40751a:	ea94 0f05 	teq	r4, r5
  40751e:	bf08      	it	eq
  407520:	ea90 0f02 	teqeq	r0, r2
  407524:	bf1f      	itttt	ne
  407526:	ea54 0c00 	orrsne.w	ip, r4, r0
  40752a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40752e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407536:	f000 80e2 	beq.w	4076fe <__adddf3+0x1ee>
  40753a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40753e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407542:	bfb8      	it	lt
  407544:	426d      	neglt	r5, r5
  407546:	dd0c      	ble.n	407562 <__adddf3+0x52>
  407548:	442c      	add	r4, r5
  40754a:	ea80 0202 	eor.w	r2, r0, r2
  40754e:	ea81 0303 	eor.w	r3, r1, r3
  407552:	ea82 0000 	eor.w	r0, r2, r0
  407556:	ea83 0101 	eor.w	r1, r3, r1
  40755a:	ea80 0202 	eor.w	r2, r0, r2
  40755e:	ea81 0303 	eor.w	r3, r1, r3
  407562:	2d36      	cmp	r5, #54	; 0x36
  407564:	bf88      	it	hi
  407566:	bd30      	pophi	{r4, r5, pc}
  407568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40756c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407578:	d002      	beq.n	407580 <__adddf3+0x70>
  40757a:	4240      	negs	r0, r0
  40757c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407584:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40758c:	d002      	beq.n	407594 <__adddf3+0x84>
  40758e:	4252      	negs	r2, r2
  407590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407594:	ea94 0f05 	teq	r4, r5
  407598:	f000 80a7 	beq.w	4076ea <__adddf3+0x1da>
  40759c:	f1a4 0401 	sub.w	r4, r4, #1
  4075a0:	f1d5 0e20 	rsbs	lr, r5, #32
  4075a4:	db0d      	blt.n	4075c2 <__adddf3+0xb2>
  4075a6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4075aa:	fa22 f205 	lsr.w	r2, r2, r5
  4075ae:	1880      	adds	r0, r0, r2
  4075b0:	f141 0100 	adc.w	r1, r1, #0
  4075b4:	fa03 f20e 	lsl.w	r2, r3, lr
  4075b8:	1880      	adds	r0, r0, r2
  4075ba:	fa43 f305 	asr.w	r3, r3, r5
  4075be:	4159      	adcs	r1, r3
  4075c0:	e00e      	b.n	4075e0 <__adddf3+0xd0>
  4075c2:	f1a5 0520 	sub.w	r5, r5, #32
  4075c6:	f10e 0e20 	add.w	lr, lr, #32
  4075ca:	2a01      	cmp	r2, #1
  4075cc:	fa03 fc0e 	lsl.w	ip, r3, lr
  4075d0:	bf28      	it	cs
  4075d2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4075d6:	fa43 f305 	asr.w	r3, r3, r5
  4075da:	18c0      	adds	r0, r0, r3
  4075dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4075e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4075e4:	d507      	bpl.n	4075f6 <__adddf3+0xe6>
  4075e6:	f04f 0e00 	mov.w	lr, #0
  4075ea:	f1dc 0c00 	rsbs	ip, ip, #0
  4075ee:	eb7e 0000 	sbcs.w	r0, lr, r0
  4075f2:	eb6e 0101 	sbc.w	r1, lr, r1
  4075f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4075fa:	d31b      	bcc.n	407634 <__adddf3+0x124>
  4075fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407600:	d30c      	bcc.n	40761c <__adddf3+0x10c>
  407602:	0849      	lsrs	r1, r1, #1
  407604:	ea5f 0030 	movs.w	r0, r0, rrx
  407608:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40760c:	f104 0401 	add.w	r4, r4, #1
  407610:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407618:	f080 809a 	bcs.w	407750 <__adddf3+0x240>
  40761c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407620:	bf08      	it	eq
  407622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407626:	f150 0000 	adcs.w	r0, r0, #0
  40762a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40762e:	ea41 0105 	orr.w	r1, r1, r5
  407632:	bd30      	pop	{r4, r5, pc}
  407634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407638:	4140      	adcs	r0, r0
  40763a:	eb41 0101 	adc.w	r1, r1, r1
  40763e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407642:	f1a4 0401 	sub.w	r4, r4, #1
  407646:	d1e9      	bne.n	40761c <__adddf3+0x10c>
  407648:	f091 0f00 	teq	r1, #0
  40764c:	bf04      	itt	eq
  40764e:	4601      	moveq	r1, r0
  407650:	2000      	moveq	r0, #0
  407652:	fab1 f381 	clz	r3, r1
  407656:	bf08      	it	eq
  407658:	3320      	addeq	r3, #32
  40765a:	f1a3 030b 	sub.w	r3, r3, #11
  40765e:	f1b3 0220 	subs.w	r2, r3, #32
  407662:	da0c      	bge.n	40767e <__adddf3+0x16e>
  407664:	320c      	adds	r2, #12
  407666:	dd08      	ble.n	40767a <__adddf3+0x16a>
  407668:	f102 0c14 	add.w	ip, r2, #20
  40766c:	f1c2 020c 	rsb	r2, r2, #12
  407670:	fa01 f00c 	lsl.w	r0, r1, ip
  407674:	fa21 f102 	lsr.w	r1, r1, r2
  407678:	e00c      	b.n	407694 <__adddf3+0x184>
  40767a:	f102 0214 	add.w	r2, r2, #20
  40767e:	bfd8      	it	le
  407680:	f1c2 0c20 	rsble	ip, r2, #32
  407684:	fa01 f102 	lsl.w	r1, r1, r2
  407688:	fa20 fc0c 	lsr.w	ip, r0, ip
  40768c:	bfdc      	itt	le
  40768e:	ea41 010c 	orrle.w	r1, r1, ip
  407692:	4090      	lslle	r0, r2
  407694:	1ae4      	subs	r4, r4, r3
  407696:	bfa2      	ittt	ge
  407698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40769c:	4329      	orrge	r1, r5
  40769e:	bd30      	popge	{r4, r5, pc}
  4076a0:	ea6f 0404 	mvn.w	r4, r4
  4076a4:	3c1f      	subs	r4, #31
  4076a6:	da1c      	bge.n	4076e2 <__adddf3+0x1d2>
  4076a8:	340c      	adds	r4, #12
  4076aa:	dc0e      	bgt.n	4076ca <__adddf3+0x1ba>
  4076ac:	f104 0414 	add.w	r4, r4, #20
  4076b0:	f1c4 0220 	rsb	r2, r4, #32
  4076b4:	fa20 f004 	lsr.w	r0, r0, r4
  4076b8:	fa01 f302 	lsl.w	r3, r1, r2
  4076bc:	ea40 0003 	orr.w	r0, r0, r3
  4076c0:	fa21 f304 	lsr.w	r3, r1, r4
  4076c4:	ea45 0103 	orr.w	r1, r5, r3
  4076c8:	bd30      	pop	{r4, r5, pc}
  4076ca:	f1c4 040c 	rsb	r4, r4, #12
  4076ce:	f1c4 0220 	rsb	r2, r4, #32
  4076d2:	fa20 f002 	lsr.w	r0, r0, r2
  4076d6:	fa01 f304 	lsl.w	r3, r1, r4
  4076da:	ea40 0003 	orr.w	r0, r0, r3
  4076de:	4629      	mov	r1, r5
  4076e0:	bd30      	pop	{r4, r5, pc}
  4076e2:	fa21 f004 	lsr.w	r0, r1, r4
  4076e6:	4629      	mov	r1, r5
  4076e8:	bd30      	pop	{r4, r5, pc}
  4076ea:	f094 0f00 	teq	r4, #0
  4076ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4076f2:	bf06      	itte	eq
  4076f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4076f8:	3401      	addeq	r4, #1
  4076fa:	3d01      	subne	r5, #1
  4076fc:	e74e      	b.n	40759c <__adddf3+0x8c>
  4076fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407702:	bf18      	it	ne
  407704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407708:	d029      	beq.n	40775e <__adddf3+0x24e>
  40770a:	ea94 0f05 	teq	r4, r5
  40770e:	bf08      	it	eq
  407710:	ea90 0f02 	teqeq	r0, r2
  407714:	d005      	beq.n	407722 <__adddf3+0x212>
  407716:	ea54 0c00 	orrs.w	ip, r4, r0
  40771a:	bf04      	itt	eq
  40771c:	4619      	moveq	r1, r3
  40771e:	4610      	moveq	r0, r2
  407720:	bd30      	pop	{r4, r5, pc}
  407722:	ea91 0f03 	teq	r1, r3
  407726:	bf1e      	ittt	ne
  407728:	2100      	movne	r1, #0
  40772a:	2000      	movne	r0, #0
  40772c:	bd30      	popne	{r4, r5, pc}
  40772e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407732:	d105      	bne.n	407740 <__adddf3+0x230>
  407734:	0040      	lsls	r0, r0, #1
  407736:	4149      	adcs	r1, r1
  407738:	bf28      	it	cs
  40773a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40773e:	bd30      	pop	{r4, r5, pc}
  407740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407744:	bf3c      	itt	cc
  407746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40774a:	bd30      	popcc	{r4, r5, pc}
  40774c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407758:	f04f 0000 	mov.w	r0, #0
  40775c:	bd30      	pop	{r4, r5, pc}
  40775e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407762:	bf1a      	itte	ne
  407764:	4619      	movne	r1, r3
  407766:	4610      	movne	r0, r2
  407768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40776c:	bf1c      	itt	ne
  40776e:	460b      	movne	r3, r1
  407770:	4602      	movne	r2, r0
  407772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407776:	bf06      	itte	eq
  407778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40777c:	ea91 0f03 	teqeq	r1, r3
  407780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407784:	bd30      	pop	{r4, r5, pc}
  407786:	bf00      	nop

00407788 <__aeabi_ui2d>:
  407788:	f090 0f00 	teq	r0, #0
  40778c:	bf04      	itt	eq
  40778e:	2100      	moveq	r1, #0
  407790:	4770      	bxeq	lr
  407792:	b530      	push	{r4, r5, lr}
  407794:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407798:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40779c:	f04f 0500 	mov.w	r5, #0
  4077a0:	f04f 0100 	mov.w	r1, #0
  4077a4:	e750      	b.n	407648 <__adddf3+0x138>
  4077a6:	bf00      	nop

004077a8 <__aeabi_i2d>:
  4077a8:	f090 0f00 	teq	r0, #0
  4077ac:	bf04      	itt	eq
  4077ae:	2100      	moveq	r1, #0
  4077b0:	4770      	bxeq	lr
  4077b2:	b530      	push	{r4, r5, lr}
  4077b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4077b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4077bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4077c0:	bf48      	it	mi
  4077c2:	4240      	negmi	r0, r0
  4077c4:	f04f 0100 	mov.w	r1, #0
  4077c8:	e73e      	b.n	407648 <__adddf3+0x138>
  4077ca:	bf00      	nop

004077cc <__aeabi_f2d>:
  4077cc:	0042      	lsls	r2, r0, #1
  4077ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4077d2:	ea4f 0131 	mov.w	r1, r1, rrx
  4077d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4077da:	bf1f      	itttt	ne
  4077dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4077e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4077e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4077e8:	4770      	bxne	lr
  4077ea:	f092 0f00 	teq	r2, #0
  4077ee:	bf14      	ite	ne
  4077f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4077f4:	4770      	bxeq	lr
  4077f6:	b530      	push	{r4, r5, lr}
  4077f8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4077fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407804:	e720      	b.n	407648 <__adddf3+0x138>
  407806:	bf00      	nop

00407808 <__aeabi_ul2d>:
  407808:	ea50 0201 	orrs.w	r2, r0, r1
  40780c:	bf08      	it	eq
  40780e:	4770      	bxeq	lr
  407810:	b530      	push	{r4, r5, lr}
  407812:	f04f 0500 	mov.w	r5, #0
  407816:	e00a      	b.n	40782e <__aeabi_l2d+0x16>

00407818 <__aeabi_l2d>:
  407818:	ea50 0201 	orrs.w	r2, r0, r1
  40781c:	bf08      	it	eq
  40781e:	4770      	bxeq	lr
  407820:	b530      	push	{r4, r5, lr}
  407822:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407826:	d502      	bpl.n	40782e <__aeabi_l2d+0x16>
  407828:	4240      	negs	r0, r0
  40782a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40782e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407832:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407836:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40783a:	f43f aedc 	beq.w	4075f6 <__adddf3+0xe6>
  40783e:	f04f 0203 	mov.w	r2, #3
  407842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407846:	bf18      	it	ne
  407848:	3203      	addne	r2, #3
  40784a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40784e:	bf18      	it	ne
  407850:	3203      	addne	r2, #3
  407852:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407856:	f1c2 0320 	rsb	r3, r2, #32
  40785a:	fa00 fc03 	lsl.w	ip, r0, r3
  40785e:	fa20 f002 	lsr.w	r0, r0, r2
  407862:	fa01 fe03 	lsl.w	lr, r1, r3
  407866:	ea40 000e 	orr.w	r0, r0, lr
  40786a:	fa21 f102 	lsr.w	r1, r1, r2
  40786e:	4414      	add	r4, r2
  407870:	e6c1      	b.n	4075f6 <__adddf3+0xe6>
  407872:	bf00      	nop

00407874 <__aeabi_dmul>:
  407874:	b570      	push	{r4, r5, r6, lr}
  407876:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40787a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40787e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407882:	bf1d      	ittte	ne
  407884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407888:	ea94 0f0c 	teqne	r4, ip
  40788c:	ea95 0f0c 	teqne	r5, ip
  407890:	f000 f8de 	bleq	407a50 <__aeabi_dmul+0x1dc>
  407894:	442c      	add	r4, r5
  407896:	ea81 0603 	eor.w	r6, r1, r3
  40789a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40789e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4078a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4078a6:	bf18      	it	ne
  4078a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4078ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4078b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4078b4:	d038      	beq.n	407928 <__aeabi_dmul+0xb4>
  4078b6:	fba0 ce02 	umull	ip, lr, r0, r2
  4078ba:	f04f 0500 	mov.w	r5, #0
  4078be:	fbe1 e502 	umlal	lr, r5, r1, r2
  4078c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4078c6:	fbe0 e503 	umlal	lr, r5, r0, r3
  4078ca:	f04f 0600 	mov.w	r6, #0
  4078ce:	fbe1 5603 	umlal	r5, r6, r1, r3
  4078d2:	f09c 0f00 	teq	ip, #0
  4078d6:	bf18      	it	ne
  4078d8:	f04e 0e01 	orrne.w	lr, lr, #1
  4078dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4078e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4078e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4078e8:	d204      	bcs.n	4078f4 <__aeabi_dmul+0x80>
  4078ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4078ee:	416d      	adcs	r5, r5
  4078f0:	eb46 0606 	adc.w	r6, r6, r6
  4078f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4078f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4078fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407900:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407904:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407908:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40790c:	bf88      	it	hi
  40790e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407912:	d81e      	bhi.n	407952 <__aeabi_dmul+0xde>
  407914:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407918:	bf08      	it	eq
  40791a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40791e:	f150 0000 	adcs.w	r0, r0, #0
  407922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407926:	bd70      	pop	{r4, r5, r6, pc}
  407928:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40792c:	ea46 0101 	orr.w	r1, r6, r1
  407930:	ea40 0002 	orr.w	r0, r0, r2
  407934:	ea81 0103 	eor.w	r1, r1, r3
  407938:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40793c:	bfc2      	ittt	gt
  40793e:	ebd4 050c 	rsbsgt	r5, r4, ip
  407942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407946:	bd70      	popgt	{r4, r5, r6, pc}
  407948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40794c:	f04f 0e00 	mov.w	lr, #0
  407950:	3c01      	subs	r4, #1
  407952:	f300 80ab 	bgt.w	407aac <__aeabi_dmul+0x238>
  407956:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40795a:	bfde      	ittt	le
  40795c:	2000      	movle	r0, #0
  40795e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407962:	bd70      	pople	{r4, r5, r6, pc}
  407964:	f1c4 0400 	rsb	r4, r4, #0
  407968:	3c20      	subs	r4, #32
  40796a:	da35      	bge.n	4079d8 <__aeabi_dmul+0x164>
  40796c:	340c      	adds	r4, #12
  40796e:	dc1b      	bgt.n	4079a8 <__aeabi_dmul+0x134>
  407970:	f104 0414 	add.w	r4, r4, #20
  407974:	f1c4 0520 	rsb	r5, r4, #32
  407978:	fa00 f305 	lsl.w	r3, r0, r5
  40797c:	fa20 f004 	lsr.w	r0, r0, r4
  407980:	fa01 f205 	lsl.w	r2, r1, r5
  407984:	ea40 0002 	orr.w	r0, r0, r2
  407988:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40798c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407990:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407994:	fa21 f604 	lsr.w	r6, r1, r4
  407998:	eb42 0106 	adc.w	r1, r2, r6
  40799c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4079a0:	bf08      	it	eq
  4079a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4079a6:	bd70      	pop	{r4, r5, r6, pc}
  4079a8:	f1c4 040c 	rsb	r4, r4, #12
  4079ac:	f1c4 0520 	rsb	r5, r4, #32
  4079b0:	fa00 f304 	lsl.w	r3, r0, r4
  4079b4:	fa20 f005 	lsr.w	r0, r0, r5
  4079b8:	fa01 f204 	lsl.w	r2, r1, r4
  4079bc:	ea40 0002 	orr.w	r0, r0, r2
  4079c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4079c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4079c8:	f141 0100 	adc.w	r1, r1, #0
  4079cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4079d0:	bf08      	it	eq
  4079d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4079d6:	bd70      	pop	{r4, r5, r6, pc}
  4079d8:	f1c4 0520 	rsb	r5, r4, #32
  4079dc:	fa00 f205 	lsl.w	r2, r0, r5
  4079e0:	ea4e 0e02 	orr.w	lr, lr, r2
  4079e4:	fa20 f304 	lsr.w	r3, r0, r4
  4079e8:	fa01 f205 	lsl.w	r2, r1, r5
  4079ec:	ea43 0302 	orr.w	r3, r3, r2
  4079f0:	fa21 f004 	lsr.w	r0, r1, r4
  4079f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4079f8:	fa21 f204 	lsr.w	r2, r1, r4
  4079fc:	ea20 0002 	bic.w	r0, r0, r2
  407a00:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407a04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407a08:	bf08      	it	eq
  407a0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407a0e:	bd70      	pop	{r4, r5, r6, pc}
  407a10:	f094 0f00 	teq	r4, #0
  407a14:	d10f      	bne.n	407a36 <__aeabi_dmul+0x1c2>
  407a16:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407a1a:	0040      	lsls	r0, r0, #1
  407a1c:	eb41 0101 	adc.w	r1, r1, r1
  407a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407a24:	bf08      	it	eq
  407a26:	3c01      	subeq	r4, #1
  407a28:	d0f7      	beq.n	407a1a <__aeabi_dmul+0x1a6>
  407a2a:	ea41 0106 	orr.w	r1, r1, r6
  407a2e:	f095 0f00 	teq	r5, #0
  407a32:	bf18      	it	ne
  407a34:	4770      	bxne	lr
  407a36:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407a3a:	0052      	lsls	r2, r2, #1
  407a3c:	eb43 0303 	adc.w	r3, r3, r3
  407a40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407a44:	bf08      	it	eq
  407a46:	3d01      	subeq	r5, #1
  407a48:	d0f7      	beq.n	407a3a <__aeabi_dmul+0x1c6>
  407a4a:	ea43 0306 	orr.w	r3, r3, r6
  407a4e:	4770      	bx	lr
  407a50:	ea94 0f0c 	teq	r4, ip
  407a54:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407a58:	bf18      	it	ne
  407a5a:	ea95 0f0c 	teqne	r5, ip
  407a5e:	d00c      	beq.n	407a7a <__aeabi_dmul+0x206>
  407a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407a64:	bf18      	it	ne
  407a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407a6a:	d1d1      	bne.n	407a10 <__aeabi_dmul+0x19c>
  407a6c:	ea81 0103 	eor.w	r1, r1, r3
  407a70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407a74:	f04f 0000 	mov.w	r0, #0
  407a78:	bd70      	pop	{r4, r5, r6, pc}
  407a7a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407a7e:	bf06      	itte	eq
  407a80:	4610      	moveq	r0, r2
  407a82:	4619      	moveq	r1, r3
  407a84:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407a88:	d019      	beq.n	407abe <__aeabi_dmul+0x24a>
  407a8a:	ea94 0f0c 	teq	r4, ip
  407a8e:	d102      	bne.n	407a96 <__aeabi_dmul+0x222>
  407a90:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407a94:	d113      	bne.n	407abe <__aeabi_dmul+0x24a>
  407a96:	ea95 0f0c 	teq	r5, ip
  407a9a:	d105      	bne.n	407aa8 <__aeabi_dmul+0x234>
  407a9c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407aa0:	bf1c      	itt	ne
  407aa2:	4610      	movne	r0, r2
  407aa4:	4619      	movne	r1, r3
  407aa6:	d10a      	bne.n	407abe <__aeabi_dmul+0x24a>
  407aa8:	ea81 0103 	eor.w	r1, r1, r3
  407aac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407ab0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407ab4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407ab8:	f04f 0000 	mov.w	r0, #0
  407abc:	bd70      	pop	{r4, r5, r6, pc}
  407abe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407ac2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407ac6:	bd70      	pop	{r4, r5, r6, pc}

00407ac8 <__aeabi_ddiv>:
  407ac8:	b570      	push	{r4, r5, r6, lr}
  407aca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407ace:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407ad2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407ad6:	bf1d      	ittte	ne
  407ad8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407adc:	ea94 0f0c 	teqne	r4, ip
  407ae0:	ea95 0f0c 	teqne	r5, ip
  407ae4:	f000 f8a7 	bleq	407c36 <__aeabi_ddiv+0x16e>
  407ae8:	eba4 0405 	sub.w	r4, r4, r5
  407aec:	ea81 0e03 	eor.w	lr, r1, r3
  407af0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407af4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407af8:	f000 8088 	beq.w	407c0c <__aeabi_ddiv+0x144>
  407afc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407b00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407b04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407b08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407b0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407b10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407b14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407b18:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407b1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407b20:	429d      	cmp	r5, r3
  407b22:	bf08      	it	eq
  407b24:	4296      	cmpeq	r6, r2
  407b26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407b2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407b2e:	d202      	bcs.n	407b36 <__aeabi_ddiv+0x6e>
  407b30:	085b      	lsrs	r3, r3, #1
  407b32:	ea4f 0232 	mov.w	r2, r2, rrx
  407b36:	1ab6      	subs	r6, r6, r2
  407b38:	eb65 0503 	sbc.w	r5, r5, r3
  407b3c:	085b      	lsrs	r3, r3, #1
  407b3e:	ea4f 0232 	mov.w	r2, r2, rrx
  407b42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407b46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407b4a:	ebb6 0e02 	subs.w	lr, r6, r2
  407b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407b52:	bf22      	ittt	cs
  407b54:	1ab6      	subcs	r6, r6, r2
  407b56:	4675      	movcs	r5, lr
  407b58:	ea40 000c 	orrcs.w	r0, r0, ip
  407b5c:	085b      	lsrs	r3, r3, #1
  407b5e:	ea4f 0232 	mov.w	r2, r2, rrx
  407b62:	ebb6 0e02 	subs.w	lr, r6, r2
  407b66:	eb75 0e03 	sbcs.w	lr, r5, r3
  407b6a:	bf22      	ittt	cs
  407b6c:	1ab6      	subcs	r6, r6, r2
  407b6e:	4675      	movcs	r5, lr
  407b70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407b74:	085b      	lsrs	r3, r3, #1
  407b76:	ea4f 0232 	mov.w	r2, r2, rrx
  407b7a:	ebb6 0e02 	subs.w	lr, r6, r2
  407b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407b82:	bf22      	ittt	cs
  407b84:	1ab6      	subcs	r6, r6, r2
  407b86:	4675      	movcs	r5, lr
  407b88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407b8c:	085b      	lsrs	r3, r3, #1
  407b8e:	ea4f 0232 	mov.w	r2, r2, rrx
  407b92:	ebb6 0e02 	subs.w	lr, r6, r2
  407b96:	eb75 0e03 	sbcs.w	lr, r5, r3
  407b9a:	bf22      	ittt	cs
  407b9c:	1ab6      	subcs	r6, r6, r2
  407b9e:	4675      	movcs	r5, lr
  407ba0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407ba4:	ea55 0e06 	orrs.w	lr, r5, r6
  407ba8:	d018      	beq.n	407bdc <__aeabi_ddiv+0x114>
  407baa:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407bae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407bb2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407bb6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407bba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407bbe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407bc2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407bc6:	d1c0      	bne.n	407b4a <__aeabi_ddiv+0x82>
  407bc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407bcc:	d10b      	bne.n	407be6 <__aeabi_ddiv+0x11e>
  407bce:	ea41 0100 	orr.w	r1, r1, r0
  407bd2:	f04f 0000 	mov.w	r0, #0
  407bd6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407bda:	e7b6      	b.n	407b4a <__aeabi_ddiv+0x82>
  407bdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407be0:	bf04      	itt	eq
  407be2:	4301      	orreq	r1, r0
  407be4:	2000      	moveq	r0, #0
  407be6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407bea:	bf88      	it	hi
  407bec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407bf0:	f63f aeaf 	bhi.w	407952 <__aeabi_dmul+0xde>
  407bf4:	ebb5 0c03 	subs.w	ip, r5, r3
  407bf8:	bf04      	itt	eq
  407bfa:	ebb6 0c02 	subseq.w	ip, r6, r2
  407bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407c02:	f150 0000 	adcs.w	r0, r0, #0
  407c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407c0a:	bd70      	pop	{r4, r5, r6, pc}
  407c0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407c10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407c14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407c18:	bfc2      	ittt	gt
  407c1a:	ebd4 050c 	rsbsgt	r5, r4, ip
  407c1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407c22:	bd70      	popgt	{r4, r5, r6, pc}
  407c24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407c28:	f04f 0e00 	mov.w	lr, #0
  407c2c:	3c01      	subs	r4, #1
  407c2e:	e690      	b.n	407952 <__aeabi_dmul+0xde>
  407c30:	ea45 0e06 	orr.w	lr, r5, r6
  407c34:	e68d      	b.n	407952 <__aeabi_dmul+0xde>
  407c36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407c3a:	ea94 0f0c 	teq	r4, ip
  407c3e:	bf08      	it	eq
  407c40:	ea95 0f0c 	teqeq	r5, ip
  407c44:	f43f af3b 	beq.w	407abe <__aeabi_dmul+0x24a>
  407c48:	ea94 0f0c 	teq	r4, ip
  407c4c:	d10a      	bne.n	407c64 <__aeabi_ddiv+0x19c>
  407c4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407c52:	f47f af34 	bne.w	407abe <__aeabi_dmul+0x24a>
  407c56:	ea95 0f0c 	teq	r5, ip
  407c5a:	f47f af25 	bne.w	407aa8 <__aeabi_dmul+0x234>
  407c5e:	4610      	mov	r0, r2
  407c60:	4619      	mov	r1, r3
  407c62:	e72c      	b.n	407abe <__aeabi_dmul+0x24a>
  407c64:	ea95 0f0c 	teq	r5, ip
  407c68:	d106      	bne.n	407c78 <__aeabi_ddiv+0x1b0>
  407c6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407c6e:	f43f aefd 	beq.w	407a6c <__aeabi_dmul+0x1f8>
  407c72:	4610      	mov	r0, r2
  407c74:	4619      	mov	r1, r3
  407c76:	e722      	b.n	407abe <__aeabi_dmul+0x24a>
  407c78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407c7c:	bf18      	it	ne
  407c7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407c82:	f47f aec5 	bne.w	407a10 <__aeabi_dmul+0x19c>
  407c86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  407c8a:	f47f af0d 	bne.w	407aa8 <__aeabi_dmul+0x234>
  407c8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407c92:	f47f aeeb 	bne.w	407a6c <__aeabi_dmul+0x1f8>
  407c96:	e712      	b.n	407abe <__aeabi_dmul+0x24a>

00407c98 <__gedf2>:
  407c98:	f04f 3cff 	mov.w	ip, #4294967295
  407c9c:	e006      	b.n	407cac <__cmpdf2+0x4>
  407c9e:	bf00      	nop

00407ca0 <__ledf2>:
  407ca0:	f04f 0c01 	mov.w	ip, #1
  407ca4:	e002      	b.n	407cac <__cmpdf2+0x4>
  407ca6:	bf00      	nop

00407ca8 <__cmpdf2>:
  407ca8:	f04f 0c01 	mov.w	ip, #1
  407cac:	f84d cd04 	str.w	ip, [sp, #-4]!
  407cb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407cb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407cb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407cbc:	bf18      	it	ne
  407cbe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407cc2:	d01b      	beq.n	407cfc <__cmpdf2+0x54>
  407cc4:	b001      	add	sp, #4
  407cc6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407cca:	bf0c      	ite	eq
  407ccc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407cd0:	ea91 0f03 	teqne	r1, r3
  407cd4:	bf02      	ittt	eq
  407cd6:	ea90 0f02 	teqeq	r0, r2
  407cda:	2000      	moveq	r0, #0
  407cdc:	4770      	bxeq	lr
  407cde:	f110 0f00 	cmn.w	r0, #0
  407ce2:	ea91 0f03 	teq	r1, r3
  407ce6:	bf58      	it	pl
  407ce8:	4299      	cmppl	r1, r3
  407cea:	bf08      	it	eq
  407cec:	4290      	cmpeq	r0, r2
  407cee:	bf2c      	ite	cs
  407cf0:	17d8      	asrcs	r0, r3, #31
  407cf2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407cf6:	f040 0001 	orr.w	r0, r0, #1
  407cfa:	4770      	bx	lr
  407cfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407d00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407d04:	d102      	bne.n	407d0c <__cmpdf2+0x64>
  407d06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407d0a:	d107      	bne.n	407d1c <__cmpdf2+0x74>
  407d0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407d10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407d14:	d1d6      	bne.n	407cc4 <__cmpdf2+0x1c>
  407d16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407d1a:	d0d3      	beq.n	407cc4 <__cmpdf2+0x1c>
  407d1c:	f85d 0b04 	ldr.w	r0, [sp], #4
  407d20:	4770      	bx	lr
  407d22:	bf00      	nop

00407d24 <__aeabi_cdrcmple>:
  407d24:	4684      	mov	ip, r0
  407d26:	4610      	mov	r0, r2
  407d28:	4662      	mov	r2, ip
  407d2a:	468c      	mov	ip, r1
  407d2c:	4619      	mov	r1, r3
  407d2e:	4663      	mov	r3, ip
  407d30:	e000      	b.n	407d34 <__aeabi_cdcmpeq>
  407d32:	bf00      	nop

00407d34 <__aeabi_cdcmpeq>:
  407d34:	b501      	push	{r0, lr}
  407d36:	f7ff ffb7 	bl	407ca8 <__cmpdf2>
  407d3a:	2800      	cmp	r0, #0
  407d3c:	bf48      	it	mi
  407d3e:	f110 0f00 	cmnmi.w	r0, #0
  407d42:	bd01      	pop	{r0, pc}

00407d44 <__aeabi_dcmpeq>:
  407d44:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d48:	f7ff fff4 	bl	407d34 <__aeabi_cdcmpeq>
  407d4c:	bf0c      	ite	eq
  407d4e:	2001      	moveq	r0, #1
  407d50:	2000      	movne	r0, #0
  407d52:	f85d fb08 	ldr.w	pc, [sp], #8
  407d56:	bf00      	nop

00407d58 <__aeabi_dcmplt>:
  407d58:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d5c:	f7ff ffea 	bl	407d34 <__aeabi_cdcmpeq>
  407d60:	bf34      	ite	cc
  407d62:	2001      	movcc	r0, #1
  407d64:	2000      	movcs	r0, #0
  407d66:	f85d fb08 	ldr.w	pc, [sp], #8
  407d6a:	bf00      	nop

00407d6c <__aeabi_dcmple>:
  407d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d70:	f7ff ffe0 	bl	407d34 <__aeabi_cdcmpeq>
  407d74:	bf94      	ite	ls
  407d76:	2001      	movls	r0, #1
  407d78:	2000      	movhi	r0, #0
  407d7a:	f85d fb08 	ldr.w	pc, [sp], #8
  407d7e:	bf00      	nop

00407d80 <__aeabi_dcmpge>:
  407d80:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d84:	f7ff ffce 	bl	407d24 <__aeabi_cdrcmple>
  407d88:	bf94      	ite	ls
  407d8a:	2001      	movls	r0, #1
  407d8c:	2000      	movhi	r0, #0
  407d8e:	f85d fb08 	ldr.w	pc, [sp], #8
  407d92:	bf00      	nop

00407d94 <__aeabi_dcmpgt>:
  407d94:	f84d ed08 	str.w	lr, [sp, #-8]!
  407d98:	f7ff ffc4 	bl	407d24 <__aeabi_cdrcmple>
  407d9c:	bf34      	ite	cc
  407d9e:	2001      	movcc	r0, #1
  407da0:	2000      	movcs	r0, #0
  407da2:	f85d fb08 	ldr.w	pc, [sp], #8
  407da6:	bf00      	nop

00407da8 <__aeabi_dcmpun>:
  407da8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407dac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407db0:	d102      	bne.n	407db8 <__aeabi_dcmpun+0x10>
  407db2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407db6:	d10a      	bne.n	407dce <__aeabi_dcmpun+0x26>
  407db8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407dbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407dc0:	d102      	bne.n	407dc8 <__aeabi_dcmpun+0x20>
  407dc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407dc6:	d102      	bne.n	407dce <__aeabi_dcmpun+0x26>
  407dc8:	f04f 0000 	mov.w	r0, #0
  407dcc:	4770      	bx	lr
  407dce:	f04f 0001 	mov.w	r0, #1
  407dd2:	4770      	bx	lr

00407dd4 <__aeabi_d2iz>:
  407dd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407dd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407ddc:	d215      	bcs.n	407e0a <__aeabi_d2iz+0x36>
  407dde:	d511      	bpl.n	407e04 <__aeabi_d2iz+0x30>
  407de0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407de4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407de8:	d912      	bls.n	407e10 <__aeabi_d2iz+0x3c>
  407dea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407dee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407df2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407df6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407dfa:	fa23 f002 	lsr.w	r0, r3, r2
  407dfe:	bf18      	it	ne
  407e00:	4240      	negne	r0, r0
  407e02:	4770      	bx	lr
  407e04:	f04f 0000 	mov.w	r0, #0
  407e08:	4770      	bx	lr
  407e0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407e0e:	d105      	bne.n	407e1c <__aeabi_d2iz+0x48>
  407e10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407e14:	bf08      	it	eq
  407e16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407e1a:	4770      	bx	lr
  407e1c:	f04f 0000 	mov.w	r0, #0
  407e20:	4770      	bx	lr
  407e22:	bf00      	nop

00407e24 <__aeabi_uldivmod>:
  407e24:	b953      	cbnz	r3, 407e3c <__aeabi_uldivmod+0x18>
  407e26:	b94a      	cbnz	r2, 407e3c <__aeabi_uldivmod+0x18>
  407e28:	2900      	cmp	r1, #0
  407e2a:	bf08      	it	eq
  407e2c:	2800      	cmpeq	r0, #0
  407e2e:	bf1c      	itt	ne
  407e30:	f04f 31ff 	movne.w	r1, #4294967295
  407e34:	f04f 30ff 	movne.w	r0, #4294967295
  407e38:	f000 b97a 	b.w	408130 <__aeabi_idiv0>
  407e3c:	f1ad 0c08 	sub.w	ip, sp, #8
  407e40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407e44:	f000 f806 	bl	407e54 <__udivmoddi4>
  407e48:	f8dd e004 	ldr.w	lr, [sp, #4]
  407e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407e50:	b004      	add	sp, #16
  407e52:	4770      	bx	lr

00407e54 <__udivmoddi4>:
  407e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407e58:	468c      	mov	ip, r1
  407e5a:	460d      	mov	r5, r1
  407e5c:	4604      	mov	r4, r0
  407e5e:	9e08      	ldr	r6, [sp, #32]
  407e60:	2b00      	cmp	r3, #0
  407e62:	d151      	bne.n	407f08 <__udivmoddi4+0xb4>
  407e64:	428a      	cmp	r2, r1
  407e66:	4617      	mov	r7, r2
  407e68:	d96d      	bls.n	407f46 <__udivmoddi4+0xf2>
  407e6a:	fab2 fe82 	clz	lr, r2
  407e6e:	f1be 0f00 	cmp.w	lr, #0
  407e72:	d00b      	beq.n	407e8c <__udivmoddi4+0x38>
  407e74:	f1ce 0c20 	rsb	ip, lr, #32
  407e78:	fa01 f50e 	lsl.w	r5, r1, lr
  407e7c:	fa20 fc0c 	lsr.w	ip, r0, ip
  407e80:	fa02 f70e 	lsl.w	r7, r2, lr
  407e84:	ea4c 0c05 	orr.w	ip, ip, r5
  407e88:	fa00 f40e 	lsl.w	r4, r0, lr
  407e8c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407e90:	0c25      	lsrs	r5, r4, #16
  407e92:	fbbc f8fa 	udiv	r8, ip, sl
  407e96:	fa1f f987 	uxth.w	r9, r7
  407e9a:	fb0a cc18 	mls	ip, sl, r8, ip
  407e9e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407ea2:	fb08 f309 	mul.w	r3, r8, r9
  407ea6:	42ab      	cmp	r3, r5
  407ea8:	d90a      	bls.n	407ec0 <__udivmoddi4+0x6c>
  407eaa:	19ed      	adds	r5, r5, r7
  407eac:	f108 32ff 	add.w	r2, r8, #4294967295
  407eb0:	f080 8123 	bcs.w	4080fa <__udivmoddi4+0x2a6>
  407eb4:	42ab      	cmp	r3, r5
  407eb6:	f240 8120 	bls.w	4080fa <__udivmoddi4+0x2a6>
  407eba:	f1a8 0802 	sub.w	r8, r8, #2
  407ebe:	443d      	add	r5, r7
  407ec0:	1aed      	subs	r5, r5, r3
  407ec2:	b2a4      	uxth	r4, r4
  407ec4:	fbb5 f0fa 	udiv	r0, r5, sl
  407ec8:	fb0a 5510 	mls	r5, sl, r0, r5
  407ecc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  407ed0:	fb00 f909 	mul.w	r9, r0, r9
  407ed4:	45a1      	cmp	r9, r4
  407ed6:	d909      	bls.n	407eec <__udivmoddi4+0x98>
  407ed8:	19e4      	adds	r4, r4, r7
  407eda:	f100 33ff 	add.w	r3, r0, #4294967295
  407ede:	f080 810a 	bcs.w	4080f6 <__udivmoddi4+0x2a2>
  407ee2:	45a1      	cmp	r9, r4
  407ee4:	f240 8107 	bls.w	4080f6 <__udivmoddi4+0x2a2>
  407ee8:	3802      	subs	r0, #2
  407eea:	443c      	add	r4, r7
  407eec:	eba4 0409 	sub.w	r4, r4, r9
  407ef0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407ef4:	2100      	movs	r1, #0
  407ef6:	2e00      	cmp	r6, #0
  407ef8:	d061      	beq.n	407fbe <__udivmoddi4+0x16a>
  407efa:	fa24 f40e 	lsr.w	r4, r4, lr
  407efe:	2300      	movs	r3, #0
  407f00:	6034      	str	r4, [r6, #0]
  407f02:	6073      	str	r3, [r6, #4]
  407f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f08:	428b      	cmp	r3, r1
  407f0a:	d907      	bls.n	407f1c <__udivmoddi4+0xc8>
  407f0c:	2e00      	cmp	r6, #0
  407f0e:	d054      	beq.n	407fba <__udivmoddi4+0x166>
  407f10:	2100      	movs	r1, #0
  407f12:	e886 0021 	stmia.w	r6, {r0, r5}
  407f16:	4608      	mov	r0, r1
  407f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f1c:	fab3 f183 	clz	r1, r3
  407f20:	2900      	cmp	r1, #0
  407f22:	f040 808e 	bne.w	408042 <__udivmoddi4+0x1ee>
  407f26:	42ab      	cmp	r3, r5
  407f28:	d302      	bcc.n	407f30 <__udivmoddi4+0xdc>
  407f2a:	4282      	cmp	r2, r0
  407f2c:	f200 80fa 	bhi.w	408124 <__udivmoddi4+0x2d0>
  407f30:	1a84      	subs	r4, r0, r2
  407f32:	eb65 0503 	sbc.w	r5, r5, r3
  407f36:	2001      	movs	r0, #1
  407f38:	46ac      	mov	ip, r5
  407f3a:	2e00      	cmp	r6, #0
  407f3c:	d03f      	beq.n	407fbe <__udivmoddi4+0x16a>
  407f3e:	e886 1010 	stmia.w	r6, {r4, ip}
  407f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407f46:	b912      	cbnz	r2, 407f4e <__udivmoddi4+0xfa>
  407f48:	2701      	movs	r7, #1
  407f4a:	fbb7 f7f2 	udiv	r7, r7, r2
  407f4e:	fab7 fe87 	clz	lr, r7
  407f52:	f1be 0f00 	cmp.w	lr, #0
  407f56:	d134      	bne.n	407fc2 <__udivmoddi4+0x16e>
  407f58:	1beb      	subs	r3, r5, r7
  407f5a:	0c3a      	lsrs	r2, r7, #16
  407f5c:	fa1f fc87 	uxth.w	ip, r7
  407f60:	2101      	movs	r1, #1
  407f62:	fbb3 f8f2 	udiv	r8, r3, r2
  407f66:	0c25      	lsrs	r5, r4, #16
  407f68:	fb02 3318 	mls	r3, r2, r8, r3
  407f6c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  407f70:	fb0c f308 	mul.w	r3, ip, r8
  407f74:	42ab      	cmp	r3, r5
  407f76:	d907      	bls.n	407f88 <__udivmoddi4+0x134>
  407f78:	19ed      	adds	r5, r5, r7
  407f7a:	f108 30ff 	add.w	r0, r8, #4294967295
  407f7e:	d202      	bcs.n	407f86 <__udivmoddi4+0x132>
  407f80:	42ab      	cmp	r3, r5
  407f82:	f200 80d1 	bhi.w	408128 <__udivmoddi4+0x2d4>
  407f86:	4680      	mov	r8, r0
  407f88:	1aed      	subs	r5, r5, r3
  407f8a:	b2a3      	uxth	r3, r4
  407f8c:	fbb5 f0f2 	udiv	r0, r5, r2
  407f90:	fb02 5510 	mls	r5, r2, r0, r5
  407f94:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  407f98:	fb0c fc00 	mul.w	ip, ip, r0
  407f9c:	45a4      	cmp	ip, r4
  407f9e:	d907      	bls.n	407fb0 <__udivmoddi4+0x15c>
  407fa0:	19e4      	adds	r4, r4, r7
  407fa2:	f100 33ff 	add.w	r3, r0, #4294967295
  407fa6:	d202      	bcs.n	407fae <__udivmoddi4+0x15a>
  407fa8:	45a4      	cmp	ip, r4
  407faa:	f200 80b8 	bhi.w	40811e <__udivmoddi4+0x2ca>
  407fae:	4618      	mov	r0, r3
  407fb0:	eba4 040c 	sub.w	r4, r4, ip
  407fb4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407fb8:	e79d      	b.n	407ef6 <__udivmoddi4+0xa2>
  407fba:	4631      	mov	r1, r6
  407fbc:	4630      	mov	r0, r6
  407fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407fc2:	f1ce 0420 	rsb	r4, lr, #32
  407fc6:	fa05 f30e 	lsl.w	r3, r5, lr
  407fca:	fa07 f70e 	lsl.w	r7, r7, lr
  407fce:	fa20 f804 	lsr.w	r8, r0, r4
  407fd2:	0c3a      	lsrs	r2, r7, #16
  407fd4:	fa25 f404 	lsr.w	r4, r5, r4
  407fd8:	ea48 0803 	orr.w	r8, r8, r3
  407fdc:	fbb4 f1f2 	udiv	r1, r4, r2
  407fe0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  407fe4:	fb02 4411 	mls	r4, r2, r1, r4
  407fe8:	fa1f fc87 	uxth.w	ip, r7
  407fec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  407ff0:	fb01 f30c 	mul.w	r3, r1, ip
  407ff4:	42ab      	cmp	r3, r5
  407ff6:	fa00 f40e 	lsl.w	r4, r0, lr
  407ffa:	d909      	bls.n	408010 <__udivmoddi4+0x1bc>
  407ffc:	19ed      	adds	r5, r5, r7
  407ffe:	f101 30ff 	add.w	r0, r1, #4294967295
  408002:	f080 808a 	bcs.w	40811a <__udivmoddi4+0x2c6>
  408006:	42ab      	cmp	r3, r5
  408008:	f240 8087 	bls.w	40811a <__udivmoddi4+0x2c6>
  40800c:	3902      	subs	r1, #2
  40800e:	443d      	add	r5, r7
  408010:	1aeb      	subs	r3, r5, r3
  408012:	fa1f f588 	uxth.w	r5, r8
  408016:	fbb3 f0f2 	udiv	r0, r3, r2
  40801a:	fb02 3310 	mls	r3, r2, r0, r3
  40801e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408022:	fb00 f30c 	mul.w	r3, r0, ip
  408026:	42ab      	cmp	r3, r5
  408028:	d907      	bls.n	40803a <__udivmoddi4+0x1e6>
  40802a:	19ed      	adds	r5, r5, r7
  40802c:	f100 38ff 	add.w	r8, r0, #4294967295
  408030:	d26f      	bcs.n	408112 <__udivmoddi4+0x2be>
  408032:	42ab      	cmp	r3, r5
  408034:	d96d      	bls.n	408112 <__udivmoddi4+0x2be>
  408036:	3802      	subs	r0, #2
  408038:	443d      	add	r5, r7
  40803a:	1aeb      	subs	r3, r5, r3
  40803c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408040:	e78f      	b.n	407f62 <__udivmoddi4+0x10e>
  408042:	f1c1 0720 	rsb	r7, r1, #32
  408046:	fa22 f807 	lsr.w	r8, r2, r7
  40804a:	408b      	lsls	r3, r1
  40804c:	fa05 f401 	lsl.w	r4, r5, r1
  408050:	ea48 0303 	orr.w	r3, r8, r3
  408054:	fa20 fe07 	lsr.w	lr, r0, r7
  408058:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40805c:	40fd      	lsrs	r5, r7
  40805e:	ea4e 0e04 	orr.w	lr, lr, r4
  408062:	fbb5 f9fc 	udiv	r9, r5, ip
  408066:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40806a:	fb0c 5519 	mls	r5, ip, r9, r5
  40806e:	fa1f f883 	uxth.w	r8, r3
  408072:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408076:	fb09 f408 	mul.w	r4, r9, r8
  40807a:	42ac      	cmp	r4, r5
  40807c:	fa02 f201 	lsl.w	r2, r2, r1
  408080:	fa00 fa01 	lsl.w	sl, r0, r1
  408084:	d908      	bls.n	408098 <__udivmoddi4+0x244>
  408086:	18ed      	adds	r5, r5, r3
  408088:	f109 30ff 	add.w	r0, r9, #4294967295
  40808c:	d243      	bcs.n	408116 <__udivmoddi4+0x2c2>
  40808e:	42ac      	cmp	r4, r5
  408090:	d941      	bls.n	408116 <__udivmoddi4+0x2c2>
  408092:	f1a9 0902 	sub.w	r9, r9, #2
  408096:	441d      	add	r5, r3
  408098:	1b2d      	subs	r5, r5, r4
  40809a:	fa1f fe8e 	uxth.w	lr, lr
  40809e:	fbb5 f0fc 	udiv	r0, r5, ip
  4080a2:	fb0c 5510 	mls	r5, ip, r0, r5
  4080a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4080aa:	fb00 f808 	mul.w	r8, r0, r8
  4080ae:	45a0      	cmp	r8, r4
  4080b0:	d907      	bls.n	4080c2 <__udivmoddi4+0x26e>
  4080b2:	18e4      	adds	r4, r4, r3
  4080b4:	f100 35ff 	add.w	r5, r0, #4294967295
  4080b8:	d229      	bcs.n	40810e <__udivmoddi4+0x2ba>
  4080ba:	45a0      	cmp	r8, r4
  4080bc:	d927      	bls.n	40810e <__udivmoddi4+0x2ba>
  4080be:	3802      	subs	r0, #2
  4080c0:	441c      	add	r4, r3
  4080c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4080c6:	eba4 0408 	sub.w	r4, r4, r8
  4080ca:	fba0 8902 	umull	r8, r9, r0, r2
  4080ce:	454c      	cmp	r4, r9
  4080d0:	46c6      	mov	lr, r8
  4080d2:	464d      	mov	r5, r9
  4080d4:	d315      	bcc.n	408102 <__udivmoddi4+0x2ae>
  4080d6:	d012      	beq.n	4080fe <__udivmoddi4+0x2aa>
  4080d8:	b156      	cbz	r6, 4080f0 <__udivmoddi4+0x29c>
  4080da:	ebba 030e 	subs.w	r3, sl, lr
  4080de:	eb64 0405 	sbc.w	r4, r4, r5
  4080e2:	fa04 f707 	lsl.w	r7, r4, r7
  4080e6:	40cb      	lsrs	r3, r1
  4080e8:	431f      	orrs	r7, r3
  4080ea:	40cc      	lsrs	r4, r1
  4080ec:	6037      	str	r7, [r6, #0]
  4080ee:	6074      	str	r4, [r6, #4]
  4080f0:	2100      	movs	r1, #0
  4080f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4080f6:	4618      	mov	r0, r3
  4080f8:	e6f8      	b.n	407eec <__udivmoddi4+0x98>
  4080fa:	4690      	mov	r8, r2
  4080fc:	e6e0      	b.n	407ec0 <__udivmoddi4+0x6c>
  4080fe:	45c2      	cmp	sl, r8
  408100:	d2ea      	bcs.n	4080d8 <__udivmoddi4+0x284>
  408102:	ebb8 0e02 	subs.w	lr, r8, r2
  408106:	eb69 0503 	sbc.w	r5, r9, r3
  40810a:	3801      	subs	r0, #1
  40810c:	e7e4      	b.n	4080d8 <__udivmoddi4+0x284>
  40810e:	4628      	mov	r0, r5
  408110:	e7d7      	b.n	4080c2 <__udivmoddi4+0x26e>
  408112:	4640      	mov	r0, r8
  408114:	e791      	b.n	40803a <__udivmoddi4+0x1e6>
  408116:	4681      	mov	r9, r0
  408118:	e7be      	b.n	408098 <__udivmoddi4+0x244>
  40811a:	4601      	mov	r1, r0
  40811c:	e778      	b.n	408010 <__udivmoddi4+0x1bc>
  40811e:	3802      	subs	r0, #2
  408120:	443c      	add	r4, r7
  408122:	e745      	b.n	407fb0 <__udivmoddi4+0x15c>
  408124:	4608      	mov	r0, r1
  408126:	e708      	b.n	407f3a <__udivmoddi4+0xe6>
  408128:	f1a8 0802 	sub.w	r8, r8, #2
  40812c:	443d      	add	r5, r7
  40812e:	e72b      	b.n	407f88 <__udivmoddi4+0x134>

00408130 <__aeabi_idiv0>:
  408130:	4770      	bx	lr
  408132:	bf00      	nop
  408134:	61706143 	.word	0x61706143
  408138:	79746963 	.word	0x79746963
  40813c:	6c25203a 	.word	0x6c25203a
  408140:	00000a75 	.word	0x00000a75
  408144:	61733a30 	.word	0x61733a30
  408148:	72615f6d 	.word	0x72615f6d
  40814c:	64735f6d 	.word	0x64735f6d
  408150:	7478742e 	.word	0x7478742e
  408154:	00000000 	.word	0x00000000

00408158 <mmc_trans_multipliers>:
  408158:	00000000 0000000a 0000000c 0000000d     ................
  408168:	0000000f 00000014 0000001a 0000001e     ................
  408178:	00000023 00000028 0000002d 00000034     #...(...-...4...
  408188:	00000037 0000003c 00000046 00000050     7...<...F...P...

00408198 <sd_mmc_trans_units>:
  408198:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

004081b4 <sd_trans_multipliers>:
  4081b4:	00000000 0000000a 0000000c 0000000d     ................
  4081c4:	0000000f 00000014 00000019 0000001e     ................
  4081d4:	00000023 00000028 0000002d 00000032     #...(...-...2...
  4081e4:	00000037 0000003c 00000046 00000050     7...<...F...P...

004081f4 <lun_desc>:
  4081f4:	00400f0d 00400f4d 00400f6d 00400f85     ..@.M.@.m.@...@.
  408204:	00400fa5 00400fe9 0040104d 00408234     ..@...@.M.@.4.@.
  408214:	00400f1d 00400f5d 00400f79 00400f95     ..@.].@.y.@...@.
  408224:	00400fa9 00400ffd 00401061 0040824c     ..@...@.a.@.L.@.
  408234:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
  408244:	22302074 00000000 2f445322 20434d4d     t 0"...."SD/MMC 
  408254:	64726143 6f6c5320 22312074 00000000     Card Slot 1"....

00408264 <LfnOfs>:
  408264:	07050301 12100e09 1c181614 0000001e     ................

00408274 <excvt.5682>:
  408274:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  408284:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  408294:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  4082a4:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  4082b4:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  4082c4:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  4082d4:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  4082e4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
  4082f4:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  408304:	00005d5b                                []..

00408308 <Tbl>:
  408308:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  408318:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  408328:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  408338:	00d600ff 00f800dc 00d800a3 019200d7     ................
  408348:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  408358:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  408368:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  408378:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  408388:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  408398:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  4083a8:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  4083b8:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  4083c8:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  4083d8:	00da00de 00d900db 00dd00fd 00b400af     ................
  4083e8:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  4083f8:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00408408 <tbl_lower.5432>:
  408408:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  408418:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  408428:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  408438:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  408448:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  408458:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  408468:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  408478:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  408488:	01050103 01090107 010d010b 0111010f     ................
  408498:	01150113 01190117 011d011b 0121011f     ..............!.
  4084a8:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  4084b8:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  4084c8:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  4084d8:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  4084e8:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  4084f8:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  408508:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  408518:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  408528:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  408538:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  408548:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  408558:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  408568:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  408578:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  408588:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  408598:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  4085a8:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  4085b8:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  4085c8:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  4085d8:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

004085e8 <tbl_upper.5433>:
  4085e8:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  4085f8:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  408608:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  408618:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  408628:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  408638:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  408648:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  408658:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  408668:	01040102 01080106 010c010a 0110010e     ................
  408678:	01140112 01180116 011c011a 0120011e     .............. .
  408688:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  408698:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  4086a8:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  4086b8:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  4086c8:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  4086d8:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  4086e8:	03940393 03960395 03980397 039a0399     ................
  4086f8:	039c039b 039e039d 03a0039f 03a303a1     ................
  408708:	03a503a4 03a703a6 03a903a8 041003aa     ................
  408718:	04120411 04140413 04160415 04180417     ................
  408728:	041a0419 041c041b 041e041d 0420041f     .............. .
  408738:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  408748:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  408758:	04030402 04050404 04070406 04090408     ................
  408768:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  408778:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  408788:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  408798:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  4087a8:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  4087b8:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...

004087c8 <_global_impure_ptr>:
  4087c8:	20000010 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  4087d8:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  4087e8:	46454443 00000000 33323130 37363534     CDEF....01234567
  4087f8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  408808:	0000296c 00000030                       l)..0...

00408810 <blanks.7223>:
  408810:	20202020 20202020 20202020 20202020                     

00408820 <zeroes.7224>:
  408820:	30303030 30303030 30303030 30303030     0000000000000000
  408830:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

00408840 <__mprec_bigtens>:
  408840:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408850:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408860:	7f73bf3c 75154fdd                       <.s..O.u

00408868 <__mprec_tens>:
  408868:	00000000 3ff00000 00000000 40240000     .......?......$@
  408878:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408888:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408898:	00000000 412e8480 00000000 416312d0     .......A......cA
  4088a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4088b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4088c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4088d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4088e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4088f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408908:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408918:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408928:	79d99db4 44ea7843                       ...yCx.D

00408930 <p05.6055>:
  408930:	00000005 00000019 0000007d 00000043     ........}...C...
  408940:	49534f50 00000058 0000002e              POSIX.......

0040894c <_ctype_>:
  40894c:	20202000 20202020 28282020 20282828     .         ((((( 
  40895c:	20202020 20202020 20202020 20202020                     
  40896c:	10108820 10101010 10101010 10101010      ...............
  40897c:	04040410 04040404 10040404 10101010     ................
  40898c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40899c:	01010101 01010101 01010101 10101010     ................
  4089ac:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4089bc:	02020202 02020202 02020202 10101010     ................
  4089cc:	00000020 00000000 00000000 00000000      ...............
	...

00408a50 <_init>:
  408a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408a52:	bf00      	nop
  408a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408a56:	bc08      	pop	{r3}
  408a58:	469e      	mov	lr, r3
  408a5a:	4770      	bx	lr

00408a5c <__init_array_start>:
  408a5c:	00404db5 	.word	0x00404db5

00408a60 <__frame_dummy_init_array_entry>:
  408a60:	0040011d                                ..@.

00408a64 <_fini>:
  408a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408a66:	bf00      	nop
  408a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408a6a:	bc08      	pop	{r3}
  408a6c:	469e      	mov	lr, r3
  408a6e:	4770      	bx	lr

00408a70 <__fini_array_start>:
  408a70:	004000f9 	.word	0x004000f9
