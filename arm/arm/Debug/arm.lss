
arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008b34  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408b34  00408b34  00018b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20000000  00408b3c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000134  200009b8  004094f4  000209b8  2**2
                  ALLOC
  4 .stack        00003004  20000aec  00409628  000209b8  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  7 .debug_info   000181d4  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003544  00000000  00000000  00038c13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000bd3c  00000000  00000000  0003c157  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000aa8  00000000  00000000  00047e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c48  00000000  00000000  0004893b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001addf  00000000  00000000  00049583  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d554  00000000  00000000  00064362  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b938  00000000  00000000  000718b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002670  00000000  00000000  000dd1f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 3a 00 20 6d 17 40 00 69 17 40 00 69 17 40 00     .:. m.@.i.@.i.@.
  400010:	69 17 40 00 69 17 40 00 69 17 40 00 00 00 00 00     i.@.i.@.i.@.....
	...
  40002c:	69 17 40 00 69 17 40 00 00 00 00 00 69 17 40 00     i.@.i.@.....i.@.
  40003c:	69 17 40 00 69 17 40 00 69 17 40 00 69 17 40 00     i.@.i.@.i.@.i.@.
  40004c:	69 17 40 00 69 17 40 00 69 17 40 00 69 17 40 00     i.@.i.@.i.@.i.@.
  40005c:	69 17 40 00 69 17 40 00 19 36 40 00 2d 36 40 00     i.@.i.@..6@.-6@.
  40006c:	41 36 40 00 55 36 40 00 69 36 40 00 69 17 40 00     A6@.U6@.i6@.i.@.
  40007c:	69 17 40 00 69 17 40 00 69 17 40 00 69 17 40 00     i.@.i.@.i.@.i.@.
  40008c:	69 17 40 00 69 17 40 00 69 17 40 00 69 17 40 00     i.@.i.@.i.@.i.@.
  40009c:	69 17 40 00 69 17 40 00 69 17 40 00 69 17 40 00     i.@.i.@.i.@.i.@.
  4000ac:	69 17 40 00 69 17 40 00 69 17 40 00 69 17 40 00     i.@.i.@.i.@.i.@.
  4000bc:	69 17 40 00 69 17 40 00 69 17 40 00 69 17 40 00     i.@.i.@.i.@.i.@.
  4000cc:	69 17 40 00 69 17 40 00 69 17 40 00 69 17 40 00     i.@.i.@.i.@.i.@.
  4000dc:	69 17 40 00 69 17 40 00 69 17 40 00 69 17 40 00     i.@.i.@.i.@.i.@.
  4000ec:	69 17 40 00 69 17 40 00 69 17 40 00                 i.@.i.@.i.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009b8 	.word	0x200009b8
  400114:	00000000 	.word	0x00000000
  400118:	00408b3c 	.word	0x00408b3c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00408b3c 	.word	0x00408b3c
  400158:	200009bc 	.word	0x200009bc
  40015c:	00408b3c 	.word	0x00408b3c
  400160:	00000000 	.word	0x00000000

00400164 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  400164:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  400166:	4b06      	ldr	r3, [pc, #24]	; (400180 <sd_mmc_configure_slot+0x1c>)
  400168:	6819      	ldr	r1, [r3, #0]
  40016a:	7f8b      	ldrb	r3, [r1, #30]
  40016c:	3300      	adds	r3, #0
  40016e:	bf18      	it	ne
  400170:	2301      	movne	r3, #1
  400172:	7b4a      	ldrb	r2, [r1, #13]
  400174:	6809      	ldr	r1, [r1, #0]
  400176:	4803      	ldr	r0, [pc, #12]	; (400184 <sd_mmc_configure_slot+0x20>)
  400178:	7800      	ldrb	r0, [r0, #0]
  40017a:	4c03      	ldr	r4, [pc, #12]	; (400188 <sd_mmc_configure_slot+0x24>)
  40017c:	47a0      	blx	r4
  40017e:	bd10      	pop	{r4, pc}
  400180:	200009d4 	.word	0x200009d4
  400184:	200009fc 	.word	0x200009fc
  400188:	00401275 	.word	0x00401275

0040018c <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  40018c:	b108      	cbz	r0, 400192 <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  40018e:	2004      	movs	r0, #4
  400190:	4770      	bx	lr
{
  400192:	b510      	push	{r4, lr}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  400194:	4b0e      	ldr	r3, [pc, #56]	; (4001d0 <sd_mmc_select_slot+0x44>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  400196:	7a9b      	ldrb	r3, [r3, #10]
  400198:	3b03      	subs	r3, #3
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  40019a:	b2db      	uxtb	r3, r3
  40019c:	2b01      	cmp	r3, #1
  40019e:	d90d      	bls.n	4001bc <sd_mmc_select_slot+0x30>
	sd_mmc_slot_sel = slot;
  4001a0:	2200      	movs	r2, #0
  4001a2:	4b0c      	ldr	r3, [pc, #48]	; (4001d4 <sd_mmc_select_slot+0x48>)
  4001a4:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  4001a6:	4c0a      	ldr	r4, [pc, #40]	; (4001d0 <sd_mmc_select_slot+0x44>)
  4001a8:	4b0b      	ldr	r3, [pc, #44]	; (4001d8 <sd_mmc_select_slot+0x4c>)
  4001aa:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  4001ac:	4b0b      	ldr	r3, [pc, #44]	; (4001dc <sd_mmc_select_slot+0x50>)
  4001ae:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  4001b0:	7aa0      	ldrb	r0, [r4, #10]
  4001b2:	2802      	cmp	r0, #2
  4001b4:	bf14      	ite	ne
  4001b6:	2000      	movne	r0, #0
  4001b8:	2001      	moveq	r0, #1
  4001ba:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  4001bc:	4b04      	ldr	r3, [pc, #16]	; (4001d0 <sd_mmc_select_slot+0x44>)
  4001be:	2202      	movs	r2, #2
  4001c0:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  4001c2:	4a07      	ldr	r2, [pc, #28]	; (4001e0 <sd_mmc_select_slot+0x54>)
  4001c4:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  4001c6:	2201      	movs	r2, #1
  4001c8:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
  4001ca:	2200      	movs	r2, #0
  4001cc:	779a      	strb	r2, [r3, #30]
  4001ce:	e7e7      	b.n	4001a0 <sd_mmc_select_slot+0x14>
  4001d0:	200009d8 	.word	0x200009d8
  4001d4:	200009fc 	.word	0x200009fc
  4001d8:	200009d4 	.word	0x200009d4
  4001dc:	00400165 	.word	0x00400165
  4001e0:	00061a80 	.word	0x00061a80

004001e4 <sdio_cmd52>:
{
  4001e4:	b538      	push	{r3, r4, r5, lr}
  4001e6:	9c04      	ldr	r4, [sp, #16]
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  4001e8:	0252      	lsls	r2, r2, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4001ea:	ea42 62c3 	orr.w	r2, r2, r3, lsl #27
  4001ee:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
  4001f2:	ea42 72c0 	orr.w	r2, r2, r0, lsl #31
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  4001f6:	7821      	ldrb	r1, [r4, #0]
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  4001f8:	4311      	orrs	r1, r2
  4001fa:	f241 3034 	movw	r0, #4916	; 0x1334
  4001fe:	4b05      	ldr	r3, [pc, #20]	; (400214 <sdio_cmd52+0x30>)
  400200:	4798      	blx	r3
  400202:	4605      	mov	r5, r0
  400204:	b908      	cbnz	r0, 40020a <sdio_cmd52+0x26>
}
  400206:	4628      	mov	r0, r5
  400208:	bd38      	pop	{r3, r4, r5, pc}
	*io_data = driver_get_response() & 0xFF;
  40020a:	4b03      	ldr	r3, [pc, #12]	; (400218 <sdio_cmd52+0x34>)
  40020c:	4798      	blx	r3
  40020e:	7020      	strb	r0, [r4, #0]
	return true;
  400210:	e7f9      	b.n	400206 <sdio_cmd52+0x22>
  400212:	bf00      	nop
  400214:	00401355 	.word	0x00401355
  400218:	00401381 	.word	0x00401381

0040021c <sd_mmc_cmd9_mci>:
{
  40021c:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  40021e:	4b09      	ldr	r3, [pc, #36]	; (400244 <sd_mmc_cmd9_mci+0x28>)
  400220:	681b      	ldr	r3, [r3, #0]
  400222:	8919      	ldrh	r1, [r3, #8]
  400224:	0409      	lsls	r1, r1, #16
  400226:	f641 3009 	movw	r0, #6921	; 0x1b09
  40022a:	4b07      	ldr	r3, [pc, #28]	; (400248 <sd_mmc_cmd9_mci+0x2c>)
  40022c:	4798      	blx	r3
  40022e:	4604      	mov	r4, r0
  400230:	b908      	cbnz	r0, 400236 <sd_mmc_cmd9_mci+0x1a>
}
  400232:	4620      	mov	r0, r4
  400234:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  400236:	4b03      	ldr	r3, [pc, #12]	; (400244 <sd_mmc_cmd9_mci+0x28>)
  400238:	6818      	ldr	r0, [r3, #0]
  40023a:	300e      	adds	r0, #14
  40023c:	4b03      	ldr	r3, [pc, #12]	; (40024c <sd_mmc_cmd9_mci+0x30>)
  40023e:	4798      	blx	r3
	return true;
  400240:	e7f7      	b.n	400232 <sd_mmc_cmd9_mci+0x16>
  400242:	bf00      	nop
  400244:	200009d4 	.word	0x200009d4
  400248:	00401355 	.word	0x00401355
  40024c:	0040138d 	.word	0x0040138d

00400250 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  400250:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  400252:	4b04      	ldr	r3, [pc, #16]	; (400264 <sd_mmc_deselect_slot+0x14>)
  400254:	781b      	ldrb	r3, [r3, #0]
  400256:	b103      	cbz	r3, 40025a <sd_mmc_deselect_slot+0xa>
  400258:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  40025a:	2000      	movs	r0, #0
  40025c:	4b02      	ldr	r3, [pc, #8]	; (400268 <sd_mmc_deselect_slot+0x18>)
  40025e:	4798      	blx	r3
	}
}
  400260:	e7fa      	b.n	400258 <sd_mmc_deselect_slot+0x8>
  400262:	bf00      	nop
  400264:	200009fc 	.word	0x200009fc
  400268:	0040132d 	.word	0x0040132d

0040026c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  40026c:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  40026e:	2204      	movs	r2, #4
  400270:	4b03      	ldr	r3, [pc, #12]	; (400280 <sd_mmc_init+0x14>)
  400272:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  400274:	22ff      	movs	r2, #255	; 0xff
  400276:	4b03      	ldr	r3, [pc, #12]	; (400284 <sd_mmc_init+0x18>)
  400278:	701a      	strb	r2, [r3, #0]
	driver_init();
  40027a:	4b03      	ldr	r3, [pc, #12]	; (400288 <sd_mmc_init+0x1c>)
  40027c:	4798      	blx	r3
  40027e:	bd08      	pop	{r3, pc}
  400280:	200009d8 	.word	0x200009d8
  400284:	200009fc 	.word	0x200009fc
  400288:	0040123d 	.word	0x0040123d

0040028c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  40028c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400290:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400292:	4ba7      	ldr	r3, [pc, #668]	; (400530 <sd_mmc_check+0x2a4>)
  400294:	4798      	blx	r3
  400296:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  400298:	2801      	cmp	r0, #1
  40029a:	d005      	beq.n	4002a8 <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  40029c:	4ba5      	ldr	r3, [pc, #660]	; (400534 <sd_mmc_check+0x2a8>)
  40029e:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  4002a0:	4620      	mov	r0, r4
  4002a2:	b015      	add	sp, #84	; 0x54
  4002a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t data = 0x08;
  4002a8:	ae14      	add	r6, sp, #80	; 0x50
  4002aa:	2308      	movs	r3, #8
  4002ac:	f806 3d45 	strb.w	r3, [r6, #-69]!
	sd_mmc_card->type = CARD_TYPE_SD;
  4002b0:	4ba1      	ldr	r3, [pc, #644]	; (400538 <sd_mmc_check+0x2ac>)
  4002b2:	681b      	ldr	r3, [r3, #0]
  4002b4:	2701      	movs	r7, #1
  4002b6:	72df      	strb	r7, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  4002b8:	2500      	movs	r5, #0
  4002ba:	731d      	strb	r5, [r3, #12]
	sd_mmc_card->rca = 0;
  4002bc:	811d      	strh	r5, [r3, #8]
	driver_send_clock();
  4002be:	4b9f      	ldr	r3, [pc, #636]	; (40053c <sd_mmc_check+0x2b0>)
  4002c0:	4798      	blx	r3
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  4002c2:	9600      	str	r6, [sp, #0]
  4002c4:	462b      	mov	r3, r5
  4002c6:	2206      	movs	r2, #6
  4002c8:	4629      	mov	r1, r5
  4002ca:	4638      	mov	r0, r7
  4002cc:	4e9c      	ldr	r6, [pc, #624]	; (400540 <sd_mmc_check+0x2b4>)
  4002ce:	47b0      	blx	r6
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4002d0:	4629      	mov	r1, r5
  4002d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4002d6:	4b9b      	ldr	r3, [pc, #620]	; (400544 <sd_mmc_check+0x2b8>)
  4002d8:	4798      	blx	r3
  4002da:	b930      	cbnz	r0, 4002ea <sd_mmc_check+0x5e>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  4002dc:	4b96      	ldr	r3, [pc, #600]	; (400538 <sd_mmc_check+0x2ac>)
  4002de:	681b      	ldr	r3, [r3, #0]
  4002e0:	2403      	movs	r4, #3
  4002e2:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
  4002e4:	4b93      	ldr	r3, [pc, #588]	; (400534 <sd_mmc_check+0x2a8>)
  4002e6:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  4002e8:	e7da      	b.n	4002a0 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  4002ea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  4002ee:	f245 5008 	movw	r0, #21768	; 0x5508
  4002f2:	4b94      	ldr	r3, [pc, #592]	; (400544 <sd_mmc_check+0x2b8>)
  4002f4:	4798      	blx	r3
  4002f6:	2800      	cmp	r0, #0
  4002f8:	f040 8093 	bne.w	400422 <sd_mmc_check+0x196>
	*v2 = 0;
  4002fc:	f04f 0900 	mov.w	r9, #0
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  400300:	2100      	movs	r1, #0
  400302:	f244 5005 	movw	r0, #17669	; 0x4505
  400306:	4b8f      	ldr	r3, [pc, #572]	; (400544 <sd_mmc_check+0x2b8>)
  400308:	4798      	blx	r3
  40030a:	2800      	cmp	r0, #0
  40030c:	f040 8097 	bne.w	40043e <sd_mmc_check+0x1b2>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400310:	4b89      	ldr	r3, [pc, #548]	; (400538 <sd_mmc_check+0x2ac>)
  400312:	681b      	ldr	r3, [r3, #0]
  400314:	7adb      	ldrb	r3, [r3, #11]
  400316:	f013 0f01 	tst.w	r3, #1
  40031a:	f040 80b5 	bne.w	400488 <sd_mmc_check+0x1fc>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40031e:	2100      	movs	r1, #0
  400320:	f245 1003 	movw	r0, #20739	; 0x5103
  400324:	4b87      	ldr	r3, [pc, #540]	; (400544 <sd_mmc_check+0x2b8>)
  400326:	4798      	blx	r3
  400328:	2800      	cmp	r0, #0
  40032a:	d0d7      	beq.n	4002dc <sd_mmc_check+0x50>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  40032c:	4d82      	ldr	r5, [pc, #520]	; (400538 <sd_mmc_check+0x2ac>)
  40032e:	682e      	ldr	r6, [r5, #0]
  400330:	4b85      	ldr	r3, [pc, #532]	; (400548 <sd_mmc_check+0x2bc>)
  400332:	4798      	blx	r3
  400334:	0c00      	lsrs	r0, r0, #16
  400336:	8130      	strh	r0, [r6, #8]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400338:	682b      	ldr	r3, [r5, #0]
  40033a:	7adb      	ldrb	r3, [r3, #11]
  40033c:	f013 0f01 	tst.w	r3, #1
  400340:	d034      	beq.n	4003ac <sd_mmc_check+0x120>
		if (!sd_mmc_cmd9_mci()) {
  400342:	4b82      	ldr	r3, [pc, #520]	; (40054c <sd_mmc_check+0x2c0>)
  400344:	4798      	blx	r3
  400346:	2800      	cmp	r0, #0
  400348:	d0c8      	beq.n	4002dc <sd_mmc_check+0x50>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  40034a:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40034c:	7c5a      	ldrb	r2, [r3, #17]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40034e:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400352:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  400356:	497e      	ldr	r1, [pc, #504]	; (400550 <sd_mmc_check+0x2c4>)
  400358:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  40035c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400360:	fb02 f201 	mul.w	r2, r2, r1
  400364:	497b      	ldr	r1, [pc, #492]	; (400554 <sd_mmc_check+0x2c8>)
  400366:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40036a:	fb02 f201 	mul.w	r2, r2, r1
  40036e:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400370:	7b9a      	ldrb	r2, [r3, #14]
  400372:	0992      	lsrs	r2, r2, #6
  400374:	f040 820b 	bne.w	40078e <sd_mmc_check+0x502>
  400378:	7d99      	ldrb	r1, [r3, #22]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40037a:	7d58      	ldrb	r0, [r3, #21]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  40037c:	7d1a      	ldrb	r2, [r3, #20]
  40037e:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400380:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  400384:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400388:	7e18      	ldrb	r0, [r3, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40038a:	7dd9      	ldrb	r1, [r3, #23]
  40038c:	0049      	lsls	r1, r1, #1
  40038e:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  400392:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  400396:	3201      	adds	r2, #1
  400398:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  40039c:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  40039e:	408a      	lsls	r2, r1
  4003a0:	7cd9      	ldrb	r1, [r3, #19]
  4003a2:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4003a6:	408a      	lsls	r2, r1
				/ 1024;
  4003a8:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4003aa:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4003ac:	4b62      	ldr	r3, [pc, #392]	; (400538 <sd_mmc_check+0x2ac>)
  4003ae:	681b      	ldr	r3, [r3, #0]
  4003b0:	8919      	ldrh	r1, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4003b2:	0409      	lsls	r1, r1, #16
  4003b4:	f243 1007 	movw	r0, #12551	; 0x3107
  4003b8:	4b62      	ldr	r3, [pc, #392]	; (400544 <sd_mmc_check+0x2b8>)
  4003ba:	4798      	blx	r3
  4003bc:	2800      	cmp	r0, #0
  4003be:	d08d      	beq.n	4002dc <sd_mmc_check+0x50>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4003c0:	4b5d      	ldr	r3, [pc, #372]	; (400538 <sd_mmc_check+0x2ac>)
  4003c2:	681b      	ldr	r3, [r3, #0]
  4003c4:	7ada      	ldrb	r2, [r3, #11]
  4003c6:	f012 0f01 	tst.w	r2, #1
  4003ca:	f040 81ed 	bne.w	4007a8 <sd_mmc_check+0x51c>
	if (IS_SDIO()) {
  4003ce:	4b5a      	ldr	r3, [pc, #360]	; (400538 <sd_mmc_check+0x2ac>)
  4003d0:	681b      	ldr	r3, [r3, #0]
  4003d2:	7adb      	ldrb	r3, [r3, #11]
  4003d4:	f013 0f04 	tst.w	r3, #4
  4003d8:	f000 829c 	beq.w	400914 <sd_mmc_check+0x688>
  4003dc:	2509      	movs	r5, #9
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  4003de:	2700      	movs	r7, #0
  4003e0:	4e57      	ldr	r6, [pc, #348]	; (400540 <sd_mmc_check+0x2b4>)
  4003e2:	f1a5 0309 	sub.w	r3, r5, #9
  4003e6:	aa03      	add	r2, sp, #12
  4003e8:	4413      	add	r3, r2
  4003ea:	9300      	str	r3, [sp, #0]
  4003ec:	463b      	mov	r3, r7
  4003ee:	462a      	mov	r2, r5
  4003f0:	4639      	mov	r1, r7
  4003f2:	4638      	mov	r0, r7
  4003f4:	47b0      	blx	r6
		addr_old++;
  4003f6:	3501      	adds	r5, #1
	for(i = 0; i < 4; i++) {
  4003f8:	2d0d      	cmp	r5, #13
  4003fa:	d1f2      	bne.n	4003e2 <sd_mmc_check+0x156>
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  4003fc:	f89d 300d 	ldrb.w	r3, [sp, #13]
  400400:	f89d 900c 	ldrb.w	r9, [sp, #12]
  400404:	eb09 2903 	add.w	r9, r9, r3, lsl #8
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400408:	f89d 300e 	ldrb.w	r3, [sp, #14]
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  40040c:	eb09 4903 	add.w	r9, r9, r3, lsl #16
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  400410:	f89d 300f 	ldrb.w	r3, [sp, #15]
  400414:	eb09 6903 	add.w	r9, r9, r3, lsl #24
	addr_new = addr_old;
  400418:	464e      	mov	r6, r9
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  40041a:	f04f 0800 	mov.w	r8, #0
  40041e:	4f48      	ldr	r7, [pc, #288]	; (400540 <sd_mmc_check+0x2b4>)
  400420:	e239      	b.n	400896 <sd_mmc_check+0x60a>
	resp = driver_get_response();
  400422:	4b49      	ldr	r3, [pc, #292]	; (400548 <sd_mmc_check+0x2bc>)
  400424:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  400426:	f1b0 3fff 	cmp.w	r0, #4294967295
  40042a:	f000 8347 	beq.w	400abc <sd_mmc_check+0x830>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  40042e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  400432:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  400436:	f47f af51 	bne.w	4002dc <sd_mmc_check+0x50>
	*v2 = 1;
  40043a:	46b9      	mov	r9, r7
  40043c:	e760      	b.n	400300 <sd_mmc_check+0x74>
	resp = driver_get_response();
  40043e:	4b42      	ldr	r3, [pc, #264]	; (400548 <sd_mmc_check+0x2bc>)
  400440:	4798      	blx	r3
	if ((resp & OCR_SDIO_NF) == 0) {
  400442:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
  400446:	f43f af63 	beq.w	400310 <sd_mmc_check+0x84>
  40044a:	f241 3589 	movw	r5, #5001	; 0x1389
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  40044e:	f244 5805 	movw	r8, #17669	; 0x4505
  400452:	4e3c      	ldr	r6, [pc, #240]	; (400544 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  400454:	4f3c      	ldr	r7, [pc, #240]	; (400548 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  400456:	f400 11fc 	and.w	r1, r0, #2064384	; 0x1f8000
  40045a:	4640      	mov	r0, r8
  40045c:	47b0      	blx	r6
  40045e:	2800      	cmp	r0, #0
  400460:	f43f af3c 	beq.w	4002dc <sd_mmc_check+0x50>
		resp = driver_get_response();
  400464:	47b8      	blx	r7
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  400466:	2800      	cmp	r0, #0
  400468:	db02      	blt.n	400470 <sd_mmc_check+0x1e4>
		if (cmd5_retry-- == 0) {
  40046a:	3d01      	subs	r5, #1
  40046c:	d1f3      	bne.n	400456 <sd_mmc_check+0x1ca>
  40046e:	e735      	b.n	4002dc <sd_mmc_check+0x50>
	if ((resp & OCR_SDIO_MP) > 0) {
  400470:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
  400474:	d104      	bne.n	400480 <sd_mmc_check+0x1f4>
		sd_mmc_card->type = CARD_TYPE_SDIO;
  400476:	4b30      	ldr	r3, [pc, #192]	; (400538 <sd_mmc_check+0x2ac>)
  400478:	681b      	ldr	r3, [r3, #0]
  40047a:	2204      	movs	r2, #4
  40047c:	72da      	strb	r2, [r3, #11]
  40047e:	e74e      	b.n	40031e <sd_mmc_check+0x92>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  400480:	4b2d      	ldr	r3, [pc, #180]	; (400538 <sd_mmc_check+0x2ac>)
  400482:	681b      	ldr	r3, [r3, #0]
  400484:	2205      	movs	r2, #5
  400486:	72da      	strb	r2, [r3, #11]
  400488:	f1b9 0f00 	cmp.w	r9, #0
  40048c:	4f32      	ldr	r7, [pc, #200]	; (400558 <sd_mmc_check+0x2cc>)
  40048e:	bf14      	ite	ne
  400490:	46b9      	movne	r9, r7
  400492:	f44f 19fc 	moveq.w	r9, #2064384	; 0x1f8000
	if ((resp & OCR_SDIO_NF) == 0) {
  400496:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40049a:	f04f 0800 	mov.w	r8, #0
  40049e:	4e29      	ldr	r6, [pc, #164]	; (400544 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4004a0:	4f29      	ldr	r7, [pc, #164]	; (400548 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4004a2:	4641      	mov	r1, r8
  4004a4:	f241 1037 	movw	r0, #4407	; 0x1137
  4004a8:	47b0      	blx	r6
  4004aa:	b148      	cbz	r0, 4004c0 <sd_mmc_check+0x234>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4004ac:	4649      	mov	r1, r9
  4004ae:	f244 5029 	movw	r0, #17705	; 0x4529
  4004b2:	47b0      	blx	r6
  4004b4:	b120      	cbz	r0, 4004c0 <sd_mmc_check+0x234>
		resp = driver_get_response();
  4004b6:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4004b8:	2800      	cmp	r0, #0
  4004ba:	db20      	blt.n	4004fe <sd_mmc_check+0x272>
		if (retry-- == 0) {
  4004bc:	3d01      	subs	r5, #1
  4004be:	d1f0      	bne.n	4004a2 <sd_mmc_check+0x216>
			sd_mmc_card->type = CARD_TYPE_MMC;
  4004c0:	4b1d      	ldr	r3, [pc, #116]	; (400538 <sd_mmc_check+0x2ac>)
  4004c2:	681b      	ldr	r3, [r3, #0]
  4004c4:	2202      	movs	r2, #2
  4004c6:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  4004c8:	2100      	movs	r1, #0
  4004ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4004ce:	4b1d      	ldr	r3, [pc, #116]	; (400544 <sd_mmc_check+0x2b8>)
  4004d0:	4798      	blx	r3
  4004d2:	2800      	cmp	r0, #0
  4004d4:	f43f af02 	beq.w	4002dc <sd_mmc_check+0x50>
  4004d8:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4004dc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400558 <sd_mmc_check+0x2cc>
  4004e0:	4e18      	ldr	r6, [pc, #96]	; (400544 <sd_mmc_check+0x2b8>)
		resp = driver_get_response();
  4004e2:	4f19      	ldr	r7, [pc, #100]	; (400548 <sd_mmc_check+0x2bc>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4004e4:	4641      	mov	r1, r8
  4004e6:	f244 5001 	movw	r0, #17665	; 0x4501
  4004ea:	47b0      	blx	r6
  4004ec:	2800      	cmp	r0, #0
  4004ee:	f43f aef5 	beq.w	4002dc <sd_mmc_check+0x50>
		resp = driver_get_response();
  4004f2:	47b8      	blx	r7
		if (resp & OCR_POWER_UP_BUSY) {
  4004f4:	2800      	cmp	r0, #0
  4004f6:	db31      	blt.n	40055c <sd_mmc_check+0x2d0>
		if (retry-- == 0) {
  4004f8:	3d01      	subs	r5, #1
  4004fa:	d1f3      	bne.n	4004e4 <sd_mmc_check+0x258>
  4004fc:	e6ee      	b.n	4002dc <sd_mmc_check+0x50>
			if ((resp & OCR_CCS) != 0) {
  4004fe:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  400502:	d005      	beq.n	400510 <sd_mmc_check+0x284>
				sd_mmc_card->type |= CARD_TYPE_HC;
  400504:	4b0c      	ldr	r3, [pc, #48]	; (400538 <sd_mmc_check+0x2ac>)
  400506:	681a      	ldr	r2, [r3, #0]
  400508:	7ad3      	ldrb	r3, [r2, #11]
  40050a:	f043 0308 	orr.w	r3, r3, #8
  40050e:	72d3      	strb	r3, [r2, #11]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400510:	4b09      	ldr	r3, [pc, #36]	; (400538 <sd_mmc_check+0x2ac>)
  400512:	681b      	ldr	r3, [r3, #0]
  400514:	7adb      	ldrb	r3, [r3, #11]
  400516:	f013 0f01 	tst.w	r3, #1
  40051a:	f43f af00 	beq.w	40031e <sd_mmc_check+0x92>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  40051e:	2100      	movs	r1, #0
  400520:	f645 3002 	movw	r0, #23298	; 0x5b02
  400524:	4b07      	ldr	r3, [pc, #28]	; (400544 <sd_mmc_check+0x2b8>)
  400526:	4798      	blx	r3
  400528:	2800      	cmp	r0, #0
  40052a:	f47f aef8 	bne.w	40031e <sd_mmc_check+0x92>
  40052e:	e6d5      	b.n	4002dc <sd_mmc_check+0x50>
  400530:	0040018d 	.word	0x0040018d
  400534:	00400251 	.word	0x00400251
  400538:	200009d4 	.word	0x200009d4
  40053c:	00401331 	.word	0x00401331
  400540:	004001e5 	.word	0x004001e5
  400544:	00401355 	.word	0x00401355
  400548:	00401381 	.word	0x00401381
  40054c:	0040021d 	.word	0x0040021d
  400550:	00408234 	.word	0x00408234
  400554:	00408250 	.word	0x00408250
  400558:	401f8000 	.word	0x401f8000
			if ((resp & OCR_ACCESS_MODE_MASK)
  40055c:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  400560:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  400564:	d027      	beq.n	4005b6 <sd_mmc_check+0x32a>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400566:	2100      	movs	r1, #0
  400568:	f645 3002 	movw	r0, #23298	; 0x5b02
  40056c:	4ba7      	ldr	r3, [pc, #668]	; (40080c <sd_mmc_check+0x580>)
  40056e:	4798      	blx	r3
  400570:	2800      	cmp	r0, #0
  400572:	f43f aeb3 	beq.w	4002dc <sd_mmc_check+0x50>
	sd_mmc_card->rca = 1;
  400576:	4ba6      	ldr	r3, [pc, #664]	; (400810 <sd_mmc_check+0x584>)
  400578:	681b      	ldr	r3, [r3, #0]
  40057a:	2201      	movs	r2, #1
  40057c:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  40057e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400582:	f241 1003 	movw	r0, #4355	; 0x1103
  400586:	4ba1      	ldr	r3, [pc, #644]	; (40080c <sd_mmc_check+0x580>)
  400588:	4798      	blx	r3
  40058a:	2800      	cmp	r0, #0
  40058c:	f43f aea6 	beq.w	4002dc <sd_mmc_check+0x50>
	if (!sd_mmc_cmd9_mci()) {
  400590:	4ba0      	ldr	r3, [pc, #640]	; (400814 <sd_mmc_check+0x588>)
  400592:	4798      	blx	r3
  400594:	2800      	cmp	r0, #0
  400596:	f43f aea1 	beq.w	4002dc <sd_mmc_check+0x50>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  40059a:	4b9d      	ldr	r3, [pc, #628]	; (400810 <sd_mmc_check+0x584>)
  40059c:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40059e:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
  4005a0:	f3c3 0383 	ubfx	r3, r3, #2, #4
  4005a4:	3b01      	subs	r3, #1
  4005a6:	2b03      	cmp	r3, #3
  4005a8:	d80c      	bhi.n	4005c4 <sd_mmc_check+0x338>
  4005aa:	e8df f013 	tbh	[pc, r3, lsl #1]
  4005ae:	00cc      	.short	0x00cc
  4005b0:	00d200cf 	.word	0x00d200cf
  4005b4:	00d5      	.short	0x00d5
				sd_mmc_card->type |= CARD_TYPE_HC;
  4005b6:	4b96      	ldr	r3, [pc, #600]	; (400810 <sd_mmc_check+0x584>)
  4005b8:	681a      	ldr	r2, [r3, #0]
  4005ba:	7ad3      	ldrb	r3, [r2, #11]
  4005bc:	f043 0308 	orr.w	r3, r3, #8
  4005c0:	72d3      	strb	r3, [r2, #11]
  4005c2:	e7d0      	b.n	400566 <sd_mmc_check+0x2da>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  4005c4:	2312      	movs	r3, #18
  4005c6:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005c8:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4005ca:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4005ce:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4005d2:	4991      	ldr	r1, [pc, #580]	; (400818 <sd_mmc_check+0x58c>)
  4005d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  4005d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4005dc:	fb03 f301 	mul.w	r3, r3, r1
  4005e0:	498e      	ldr	r1, [pc, #568]	; (40081c <sd_mmc_check+0x590>)
  4005e2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4005e6:	fb03 f301 	mul.w	r3, r3, r1
  4005ea:	6013      	str	r3, [r2, #0]
  4005ec:	7d91      	ldrb	r1, [r2, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005ee:	7d50      	ldrb	r0, [r2, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005f0:	7d13      	ldrb	r3, [r2, #20]
  4005f2:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005f4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  4005f8:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  4005fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  400600:	f640 71ff 	movw	r1, #4095	; 0xfff
  400604:	428b      	cmp	r3, r1
  400606:	d00f      	beq.n	400628 <sd_mmc_check+0x39c>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400608:	7e10      	ldrb	r0, [r2, #24]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40060a:	7dd1      	ldrb	r1, [r2, #23]
  40060c:	0049      	lsls	r1, r1, #1
  40060e:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400612:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  400614:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400618:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40061a:	408b      	lsls	r3, r1
  40061c:	7cd1      	ldrb	r1, [r2, #19]
  40061e:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  400622:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  400624:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  400626:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  400628:	8911      	ldrh	r1, [r2, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40062a:	0409      	lsls	r1, r1, #16
  40062c:	f243 1007 	movw	r0, #12551	; 0x3107
  400630:	4b76      	ldr	r3, [pc, #472]	; (40080c <sd_mmc_check+0x580>)
  400632:	4798      	blx	r3
  400634:	2800      	cmp	r0, #0
  400636:	f43f ae51 	beq.w	4002dc <sd_mmc_check+0x50>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  40063a:	4b75      	ldr	r3, [pc, #468]	; (400810 <sd_mmc_check+0x584>)
  40063c:	681b      	ldr	r3, [r3, #0]
  40063e:	7b1b      	ldrb	r3, [r3, #12]
  400640:	2b3f      	cmp	r3, #63	; 0x3f
  400642:	f240 8096 	bls.w	400772 <sd_mmc_check+0x4e6>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400646:	2100      	movs	r1, #0
  400648:	9100      	str	r1, [sp, #0]
  40064a:	2301      	movs	r3, #1
  40064c:	f44f 7200 	mov.w	r2, #512	; 0x200
  400650:	4873      	ldr	r0, [pc, #460]	; (400820 <sd_mmc_check+0x594>)
  400652:	4d74      	ldr	r5, [pc, #464]	; (400824 <sd_mmc_check+0x598>)
  400654:	47a8      	blx	r5
  400656:	2800      	cmp	r0, #0
  400658:	f43f ae40 	beq.w	4002dc <sd_mmc_check+0x50>
  40065c:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  40065e:	4e72      	ldr	r6, [pc, #456]	; (400828 <sd_mmc_check+0x59c>)
  400660:	a803      	add	r0, sp, #12
  400662:	47b0      	blx	r6
  400664:	2800      	cmp	r0, #0
  400666:	f43f ae39 	beq.w	4002dc <sd_mmc_check+0x50>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  40066a:	3501      	adds	r5, #1
  40066c:	b2ad      	uxth	r5, r5
  40066e:	2d32      	cmp	r5, #50	; 0x32
  400670:	d1f6      	bne.n	400660 <sd_mmc_check+0x3d4>
			& MMC_CTYPE_52MHZ;
  400672:	9e03      	ldr	r6, [sp, #12]
  400674:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400678:	4b65      	ldr	r3, [pc, #404]	; (400810 <sd_mmc_check+0x584>)
  40067a:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40067c:	7d9a      	ldrb	r2, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40067e:	7d59      	ldrb	r1, [r3, #21]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400680:	7d1b      	ldrb	r3, [r3, #20]
  400682:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400684:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  400688:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  40068c:	f3c3 030b 	ubfx	r3, r3, #0, #12
  400690:	f640 72ff 	movw	r2, #4095	; 0xfff
  400694:	4293      	cmp	r3, r2
  400696:	d10e      	bne.n	4006b6 <sd_mmc_check+0x42a>
			if (!driver_read_word(&sec_count)) {
  400698:	4f63      	ldr	r7, [pc, #396]	; (400828 <sd_mmc_check+0x59c>)
  40069a:	a804      	add	r0, sp, #16
  40069c:	47b8      	blx	r7
  40069e:	2800      	cmp	r0, #0
  4006a0:	f43f ae1c 	beq.w	4002dc <sd_mmc_check+0x50>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4006a4:	3501      	adds	r5, #1
  4006a6:	b2ad      	uxth	r5, r5
  4006a8:	2d35      	cmp	r5, #53	; 0x35
  4006aa:	d9f6      	bls.n	40069a <sd_mmc_check+0x40e>
		sd_mmc_card->capacity = sec_count / 2;
  4006ac:	4b58      	ldr	r3, [pc, #352]	; (400810 <sd_mmc_check+0x584>)
  4006ae:	681a      	ldr	r2, [r3, #0]
  4006b0:	9b04      	ldr	r3, [sp, #16]
  4006b2:	085b      	lsrs	r3, r3, #1
  4006b4:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  4006b6:	4f5c      	ldr	r7, [pc, #368]	; (400828 <sd_mmc_check+0x59c>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4006b8:	2d7f      	cmp	r5, #127	; 0x7f
  4006ba:	d950      	bls.n	40075e <sd_mmc_check+0x4d2>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  4006bc:	4b5b      	ldr	r3, [pc, #364]	; (40082c <sd_mmc_check+0x5a0>)
  4006be:	7818      	ldrb	r0, [r3, #0]
  4006c0:	4b5b      	ldr	r3, [pc, #364]	; (400830 <sd_mmc_check+0x5a4>)
  4006c2:	4798      	blx	r3
  4006c4:	2803      	cmp	r0, #3
  4006c6:	d91d      	bls.n	400704 <sd_mmc_check+0x478>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4006c8:	4b58      	ldr	r3, [pc, #352]	; (40082c <sd_mmc_check+0x5a0>)
  4006ca:	7818      	ldrb	r0, [r3, #0]
  4006cc:	4b58      	ldr	r3, [pc, #352]	; (400830 <sd_mmc_check+0x5a4>)
  4006ce:	4798      	blx	r3
  4006d0:	4605      	mov	r5, r0
	switch (bus_width) {
  4006d2:	2804      	cmp	r0, #4
  4006d4:	d04b      	beq.n	40076e <sd_mmc_check+0x4e2>
		arg = MMC_CMD6_ACCESS_SET_BITS
  4006d6:	4b57      	ldr	r3, [pc, #348]	; (400834 <sd_mmc_check+0x5a8>)
  4006d8:	4957      	ldr	r1, [pc, #348]	; (400838 <sd_mmc_check+0x5ac>)
  4006da:	2808      	cmp	r0, #8
  4006dc:	bf18      	it	ne
  4006de:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4006e0:	f243 1006 	movw	r0, #12550	; 0x3106
  4006e4:	4b49      	ldr	r3, [pc, #292]	; (40080c <sd_mmc_check+0x580>)
  4006e6:	4798      	blx	r3
  4006e8:	2800      	cmp	r0, #0
  4006ea:	f43f adf7 	beq.w	4002dc <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4006ee:	4b53      	ldr	r3, [pc, #332]	; (40083c <sd_mmc_check+0x5b0>)
  4006f0:	4798      	blx	r3
  4006f2:	f010 0f80 	tst.w	r0, #128	; 0x80
  4006f6:	f47f adf1 	bne.w	4002dc <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = bus_width;
  4006fa:	4b45      	ldr	r3, [pc, #276]	; (400810 <sd_mmc_check+0x584>)
  4006fc:	681b      	ldr	r3, [r3, #0]
  4006fe:	735d      	strb	r5, [r3, #13]
			sd_mmc_configure_slot();
  400700:	4b4f      	ldr	r3, [pc, #316]	; (400840 <sd_mmc_check+0x5b4>)
  400702:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400704:	4b4f      	ldr	r3, [pc, #316]	; (400844 <sd_mmc_check+0x5b8>)
  400706:	4798      	blx	r3
  400708:	b1b0      	cbz	r0, 400738 <sd_mmc_check+0x4ac>
  40070a:	b1ae      	cbz	r6, 400738 <sd_mmc_check+0x4ac>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  40070c:	494e      	ldr	r1, [pc, #312]	; (400848 <sd_mmc_check+0x5bc>)
  40070e:	f243 1006 	movw	r0, #12550	; 0x3106
  400712:	4b3e      	ldr	r3, [pc, #248]	; (40080c <sd_mmc_check+0x580>)
  400714:	4798      	blx	r3
  400716:	2800      	cmp	r0, #0
  400718:	f43f ade0 	beq.w	4002dc <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40071c:	4b47      	ldr	r3, [pc, #284]	; (40083c <sd_mmc_check+0x5b0>)
  40071e:	4798      	blx	r3
  400720:	f010 0f80 	tst.w	r0, #128	; 0x80
  400724:	f47f adda 	bne.w	4002dc <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400728:	4b39      	ldr	r3, [pc, #228]	; (400810 <sd_mmc_check+0x584>)
  40072a:	681b      	ldr	r3, [r3, #0]
  40072c:	2201      	movs	r2, #1
  40072e:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  400730:	4a46      	ldr	r2, [pc, #280]	; (40084c <sd_mmc_check+0x5c0>)
  400732:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  400734:	4b42      	ldr	r3, [pc, #264]	; (400840 <sd_mmc_check+0x5b4>)
  400736:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  400738:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40073a:	f44f 7800 	mov.w	r8, #512	; 0x200
  40073e:	f241 1710 	movw	r7, #4368	; 0x1110
  400742:	4e32      	ldr	r6, [pc, #200]	; (40080c <sd_mmc_check+0x580>)
  400744:	e01d      	b.n	400782 <sd_mmc_check+0x4f6>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  400746:	2314      	movs	r3, #20
  400748:	7313      	strb	r3, [r2, #12]
  40074a:	e73d      	b.n	4005c8 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  40074c:	2322      	movs	r3, #34	; 0x22
  40074e:	7313      	strb	r3, [r2, #12]
  400750:	e73a      	b.n	4005c8 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_3;
  400752:	2330      	movs	r3, #48	; 0x30
  400754:	7313      	strb	r3, [r2, #12]
  400756:	e737      	b.n	4005c8 <sd_mmc_check+0x33c>
		sd_mmc_card->version = CARD_VER_MMC_4;
  400758:	2340      	movs	r3, #64	; 0x40
  40075a:	7313      	strb	r3, [r2, #12]
  40075c:	e734      	b.n	4005c8 <sd_mmc_check+0x33c>
		if (!driver_read_word(&sec_count)) {
  40075e:	a804      	add	r0, sp, #16
  400760:	47b8      	blx	r7
  400762:	2800      	cmp	r0, #0
  400764:	f43f adba 	beq.w	4002dc <sd_mmc_check+0x50>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  400768:	3501      	adds	r5, #1
  40076a:	b2ad      	uxth	r5, r5
  40076c:	e7a4      	b.n	4006b8 <sd_mmc_check+0x42c>
		arg = MMC_CMD6_ACCESS_SET_BITS
  40076e:	4938      	ldr	r1, [pc, #224]	; (400850 <sd_mmc_check+0x5c4>)
  400770:	e7b6      	b.n	4006e0 <sd_mmc_check+0x454>
		sd_mmc_configure_slot();
  400772:	4b33      	ldr	r3, [pc, #204]	; (400840 <sd_mmc_check+0x5b4>)
  400774:	4798      	blx	r3
  400776:	e7df      	b.n	400738 <sd_mmc_check+0x4ac>
  400778:	3d01      	subs	r5, #1
	while (retry--) {
  40077a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  40077e:	f43f adad 	beq.w	4002dc <sd_mmc_check+0x50>
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400782:	4641      	mov	r1, r8
  400784:	4638      	mov	r0, r7
  400786:	47b0      	blx	r6
  400788:	2800      	cmp	r0, #0
  40078a:	d0f5      	beq.n	400778 <sd_mmc_check+0x4ec>
  40078c:	e10e      	b.n	4009ac <sd_mmc_check+0x720>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  40078e:	7dd9      	ldrb	r1, [r3, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400790:	7d98      	ldrb	r0, [r3, #22]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400792:	7d5a      	ldrb	r2, [r3, #21]
  400794:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400796:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  40079a:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  40079c:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  4007a0:	3201      	adds	r2, #1
  4007a2:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  4007a4:	605a      	str	r2, [r3, #4]
  4007a6:	e601      	b.n	4003ac <sd_mmc_check+0x120>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4007a8:	8919      	ldrh	r1, [r3, #8]
  4007aa:	0409      	lsls	r1, r1, #16
  4007ac:	f241 1037 	movw	r0, #4407	; 0x1137
  4007b0:	4b16      	ldr	r3, [pc, #88]	; (40080c <sd_mmc_check+0x580>)
  4007b2:	4798      	blx	r3
  4007b4:	2800      	cmp	r0, #0
  4007b6:	f43f ad91 	beq.w	4002dc <sd_mmc_check+0x50>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  4007ba:	2301      	movs	r3, #1
  4007bc:	9300      	str	r3, [sp, #0]
  4007be:	2208      	movs	r2, #8
  4007c0:	2100      	movs	r1, #0
  4007c2:	4824      	ldr	r0, [pc, #144]	; (400854 <sd_mmc_check+0x5c8>)
  4007c4:	4d17      	ldr	r5, [pc, #92]	; (400824 <sd_mmc_check+0x598>)
  4007c6:	47a8      	blx	r5
  4007c8:	2800      	cmp	r0, #0
  4007ca:	f43f ad87 	beq.w	4002dc <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(scr, 1)) {
  4007ce:	2101      	movs	r1, #1
  4007d0:	a804      	add	r0, sp, #16
  4007d2:	4b21      	ldr	r3, [pc, #132]	; (400858 <sd_mmc_check+0x5cc>)
  4007d4:	4798      	blx	r3
  4007d6:	2800      	cmp	r0, #0
  4007d8:	f43f ad80 	beq.w	4002dc <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  4007dc:	4b1f      	ldr	r3, [pc, #124]	; (40085c <sd_mmc_check+0x5d0>)
  4007de:	4798      	blx	r3
  4007e0:	2800      	cmp	r0, #0
  4007e2:	f43f ad7b 	beq.w	4002dc <sd_mmc_check+0x50>
	switch (SD_SCR_SD_SPEC(scr)) {
  4007e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4007ea:	f003 030f 	and.w	r3, r3, #15
  4007ee:	2b01      	cmp	r3, #1
  4007f0:	d036      	beq.n	400860 <sd_mmc_check+0x5d4>
  4007f2:	b133      	cbz	r3, 400802 <sd_mmc_check+0x576>
  4007f4:	2b02      	cmp	r3, #2
  4007f6:	d038      	beq.n	40086a <sd_mmc_check+0x5de>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4007f8:	4b05      	ldr	r3, [pc, #20]	; (400810 <sd_mmc_check+0x584>)
  4007fa:	681b      	ldr	r3, [r3, #0]
  4007fc:	2210      	movs	r2, #16
  4007fe:	731a      	strb	r2, [r3, #12]
  400800:	e5e5      	b.n	4003ce <sd_mmc_check+0x142>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  400802:	4b03      	ldr	r3, [pc, #12]	; (400810 <sd_mmc_check+0x584>)
  400804:	681b      	ldr	r3, [r3, #0]
  400806:	2210      	movs	r2, #16
  400808:	731a      	strb	r2, [r3, #12]
  40080a:	e5e0      	b.n	4003ce <sd_mmc_check+0x142>
  40080c:	00401355 	.word	0x00401355
  400810:	200009d4 	.word	0x200009d4
  400814:	0040021d 	.word	0x0040021d
  400818:	00408234 	.word	0x00408234
  40081c:	004081f4 	.word	0x004081f4
  400820:	00081108 	.word	0x00081108
  400824:	004013bd 	.word	0x004013bd
  400828:	00401481 	.word	0x00401481
  40082c:	200009fc 	.word	0x200009fc
  400830:	00401265 	.word	0x00401265
  400834:	01b70000 	.word	0x01b70000
  400838:	01b70200 	.word	0x01b70200
  40083c:	00401381 	.word	0x00401381
  400840:	00400165 	.word	0x00400165
  400844:	0040126f 	.word	0x0040126f
  400848:	03b90100 	.word	0x03b90100
  40084c:	03197500 	.word	0x03197500
  400850:	01b70100 	.word	0x01b70100
  400854:	00081133 	.word	0x00081133
  400858:	004014f1 	.word	0x004014f1
  40085c:	00401555 	.word	0x00401555
		sd_mmc_card->version = CARD_VER_SD_1_10;
  400860:	4b98      	ldr	r3, [pc, #608]	; (400ac4 <sd_mmc_check+0x838>)
  400862:	681b      	ldr	r3, [r3, #0]
  400864:	221a      	movs	r2, #26
  400866:	731a      	strb	r2, [r3, #12]
  400868:	e5b1      	b.n	4003ce <sd_mmc_check+0x142>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  40086a:	f89d 3012 	ldrb.w	r3, [sp, #18]
  40086e:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  400870:	4b94      	ldr	r3, [pc, #592]	; (400ac4 <sd_mmc_check+0x838>)
  400872:	681b      	ldr	r3, [r3, #0]
  400874:	bf14      	ite	ne
  400876:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  400878:	2220      	moveq	r2, #32
  40087a:	731a      	strb	r2, [r3, #12]
  40087c:	e5a7      	b.n	4003ce <sd_mmc_check+0x142>
		if (buf[1] == 0) {
  40087e:	f89d 3011 	ldrb.w	r3, [sp, #17]
  400882:	2b00      	cmp	r3, #0
  400884:	f43f ad2a 	beq.w	4002dc <sd_mmc_check+0x50>
		addr_new += buf[1]-1;
  400888:	3302      	adds	r3, #2
  40088a:	441e      	add	r6, r3
		if (addr_new > (addr_old + 256)) {
  40088c:	f509 7380 	add.w	r3, r9, #256	; 0x100
  400890:	429e      	cmp	r6, r3
  400892:	f63f ad23 	bhi.w	4002dc <sd_mmc_check+0x50>
	addr_new = addr_old;
  400896:	2500      	movs	r5, #0
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  400898:	ab04      	add	r3, sp, #16
  40089a:	442b      	add	r3, r5
  40089c:	9300      	str	r3, [sp, #0]
  40089e:	4643      	mov	r3, r8
  4008a0:	1972      	adds	r2, r6, r5
  4008a2:	4641      	mov	r1, r8
  4008a4:	4640      	mov	r0, r8
  4008a6:	47b8      	blx	r7
  4008a8:	3501      	adds	r5, #1
		for(i=0; i<3; i++) {
  4008aa:	2d03      	cmp	r5, #3
  4008ac:	d1f4      	bne.n	400898 <sd_mmc_check+0x60c>
		if (buf[0] == SDIO_CISTPL_END) {
  4008ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4008b2:	2bff      	cmp	r3, #255	; 0xff
  4008b4:	f43f ad12 	beq.w	4002dc <sd_mmc_check+0x50>
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4008b8:	2b22      	cmp	r3, #34	; 0x22
  4008ba:	d1e0      	bne.n	40087e <sd_mmc_check+0x5f2>
  4008bc:	f89d 3012 	ldrb.w	r3, [sp, #18]
  4008c0:	2b00      	cmp	r3, #0
  4008c2:	d1dc      	bne.n	40087e <sd_mmc_check+0x5f2>
  4008c4:	ad04      	add	r5, sp, #16
  4008c6:	f106 0906 	add.w	r9, r6, #6
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4008ca:	f04f 0800 	mov.w	r8, #0
  4008ce:	4f7e      	ldr	r7, [pc, #504]	; (400ac8 <sd_mmc_check+0x83c>)
  4008d0:	9500      	str	r5, [sp, #0]
  4008d2:	4643      	mov	r3, r8
  4008d4:	4632      	mov	r2, r6
  4008d6:	4641      	mov	r1, r8
  4008d8:	4640      	mov	r0, r8
  4008da:	47b8      	blx	r7
		addr_new++;
  4008dc:	3601      	adds	r6, #1
  4008de:	3501      	adds	r5, #1
	for(i = 0; i < 6; i++) {
  4008e0:	454e      	cmp	r6, r9
  4008e2:	d1f5      	bne.n	4008d0 <sd_mmc_check+0x644>
	tplfe_max_tran_speed = buf[5];
  4008e4:	f89d 3015 	ldrb.w	r3, [sp, #21]
  4008e8:	2b32      	cmp	r3, #50	; 0x32
  4008ea:	bf28      	it	cs
  4008ec:	2332      	movcs	r3, #50	; 0x32
	sd_mmc_card->clock = unit * mul * 1000;
  4008ee:	4a75      	ldr	r2, [pc, #468]	; (400ac4 <sd_mmc_check+0x838>)
  4008f0:	6812      	ldr	r2, [r2, #0]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  4008f2:	f3c3 00c3 	ubfx	r0, r3, #3, #4
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  4008f6:	f003 0307 	and.w	r3, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4008fa:	4974      	ldr	r1, [pc, #464]	; (400acc <sd_mmc_check+0x840>)
  4008fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  400900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  400904:	fb03 f301 	mul.w	r3, r3, r1
  400908:	4971      	ldr	r1, [pc, #452]	; (400ad0 <sd_mmc_check+0x844>)
  40090a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  40090e:	fb03 f301 	mul.w	r3, r3, r1
  400912:	6013      	str	r3, [r2, #0]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  400914:	4b6f      	ldr	r3, [pc, #444]	; (400ad4 <sd_mmc_check+0x848>)
  400916:	7818      	ldrb	r0, [r3, #0]
  400918:	4b6f      	ldr	r3, [pc, #444]	; (400ad8 <sd_mmc_check+0x84c>)
  40091a:	4798      	blx	r3
  40091c:	2803      	cmp	r0, #3
  40091e:	d922      	bls.n	400966 <sd_mmc_check+0x6da>
		if (IS_SDIO()) {
  400920:	4b68      	ldr	r3, [pc, #416]	; (400ac4 <sd_mmc_check+0x838>)
  400922:	681b      	ldr	r3, [r3, #0]
  400924:	7adb      	ldrb	r3, [r3, #11]
  400926:	f013 0f04 	tst.w	r3, #4
  40092a:	d146      	bne.n	4009ba <sd_mmc_check+0x72e>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  40092c:	4b65      	ldr	r3, [pc, #404]	; (400ac4 <sd_mmc_check+0x838>)
  40092e:	681b      	ldr	r3, [r3, #0]
  400930:	7ada      	ldrb	r2, [r3, #11]
  400932:	f012 0f01 	tst.w	r2, #1
  400936:	d014      	beq.n	400962 <sd_mmc_check+0x6d6>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400938:	8919      	ldrh	r1, [r3, #8]
  40093a:	0409      	lsls	r1, r1, #16
  40093c:	f241 1037 	movw	r0, #4407	; 0x1137
  400940:	4b66      	ldr	r3, [pc, #408]	; (400adc <sd_mmc_check+0x850>)
  400942:	4798      	blx	r3
  400944:	2800      	cmp	r0, #0
  400946:	f43f acc9 	beq.w	4002dc <sd_mmc_check+0x50>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  40094a:	2102      	movs	r1, #2
  40094c:	f241 1006 	movw	r0, #4358	; 0x1106
  400950:	4b62      	ldr	r3, [pc, #392]	; (400adc <sd_mmc_check+0x850>)
  400952:	4798      	blx	r3
  400954:	2800      	cmp	r0, #0
  400956:	f43f acc1 	beq.w	4002dc <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  40095a:	4b5a      	ldr	r3, [pc, #360]	; (400ac4 <sd_mmc_check+0x838>)
  40095c:	681b      	ldr	r3, [r3, #0]
  40095e:	2204      	movs	r2, #4
  400960:	735a      	strb	r2, [r3, #13]
		sd_mmc_configure_slot();
  400962:	4b5f      	ldr	r3, [pc, #380]	; (400ae0 <sd_mmc_check+0x854>)
  400964:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  400966:	4b5f      	ldr	r3, [pc, #380]	; (400ae4 <sd_mmc_check+0x858>)
  400968:	4798      	blx	r3
  40096a:	b180      	cbz	r0, 40098e <sd_mmc_check+0x702>
		if (IS_SDIO()) {
  40096c:	4b55      	ldr	r3, [pc, #340]	; (400ac4 <sd_mmc_check+0x838>)
  40096e:	681b      	ldr	r3, [r3, #0]
  400970:	7adb      	ldrb	r3, [r3, #11]
  400972:	f013 0f04 	tst.w	r3, #4
  400976:	d141      	bne.n	4009fc <sd_mmc_check+0x770>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400978:	4b52      	ldr	r3, [pc, #328]	; (400ac4 <sd_mmc_check+0x838>)
  40097a:	681b      	ldr	r3, [r3, #0]
  40097c:	7ada      	ldrb	r2, [r3, #11]
  40097e:	f012 0f01 	tst.w	r2, #1
  400982:	d002      	beq.n	40098a <sd_mmc_check+0x6fe>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400984:	7b1b      	ldrb	r3, [r3, #12]
  400986:	2b10      	cmp	r3, #16
  400988:	d85d      	bhi.n	400a46 <sd_mmc_check+0x7ba>
		sd_mmc_configure_slot();
  40098a:	4b55      	ldr	r3, [pc, #340]	; (400ae0 <sd_mmc_check+0x854>)
  40098c:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40098e:	4b4d      	ldr	r3, [pc, #308]	; (400ac4 <sd_mmc_check+0x838>)
  400990:	681b      	ldr	r3, [r3, #0]
  400992:	7adb      	ldrb	r3, [r3, #11]
  400994:	f013 0f01 	tst.w	r3, #1
  400998:	d008      	beq.n	4009ac <sd_mmc_check+0x720>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40099a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40099e:	f241 1010 	movw	r0, #4368	; 0x1110
  4009a2:	4b4e      	ldr	r3, [pc, #312]	; (400adc <sd_mmc_check+0x850>)
  4009a4:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  4009a6:	2800      	cmp	r0, #0
  4009a8:	f43f ac98 	beq.w	4002dc <sd_mmc_check+0x50>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  4009ac:	4b45      	ldr	r3, [pc, #276]	; (400ac4 <sd_mmc_check+0x838>)
  4009ae:	681b      	ldr	r3, [r3, #0]
  4009b0:	2200      	movs	r2, #0
  4009b2:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  4009b4:	4b4c      	ldr	r3, [pc, #304]	; (400ae8 <sd_mmc_check+0x85c>)
  4009b6:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  4009b8:	e472      	b.n	4002a0 <sd_mmc_check+0x14>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  4009ba:	ab04      	add	r3, sp, #16
  4009bc:	9300      	str	r3, [sp, #0]
  4009be:	2300      	movs	r3, #0
  4009c0:	2208      	movs	r2, #8
  4009c2:	4619      	mov	r1, r3
  4009c4:	4618      	mov	r0, r3
  4009c6:	4d40      	ldr	r5, [pc, #256]	; (400ac8 <sd_mmc_check+0x83c>)
  4009c8:	47a8      	blx	r5
  4009ca:	2800      	cmp	r0, #0
  4009cc:	f43f ac86 	beq.w	4002dc <sd_mmc_check+0x50>
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  4009d0:	f99d 3010 	ldrsb.w	r3, [sp, #16]
  4009d4:	2b00      	cmp	r3, #0
  4009d6:	daa9      	bge.n	40092c <sd_mmc_check+0x6a0>
	u8_value = SDIO_BUSWIDTH_4B;
  4009d8:	ab14      	add	r3, sp, #80	; 0x50
  4009da:	2202      	movs	r2, #2
  4009dc:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  4009e0:	9300      	str	r3, [sp, #0]
  4009e2:	2301      	movs	r3, #1
  4009e4:	2207      	movs	r2, #7
  4009e6:	2100      	movs	r1, #0
  4009e8:	4618      	mov	r0, r3
  4009ea:	47a8      	blx	r5
  4009ec:	2800      	cmp	r0, #0
  4009ee:	f43f ac75 	beq.w	4002dc <sd_mmc_check+0x50>
	sd_mmc_card->bus_width = 4;
  4009f2:	4b34      	ldr	r3, [pc, #208]	; (400ac4 <sd_mmc_check+0x838>)
  4009f4:	681b      	ldr	r3, [r3, #0]
  4009f6:	2204      	movs	r2, #4
  4009f8:	735a      	strb	r2, [r3, #13]
  4009fa:	e797      	b.n	40092c <sd_mmc_check+0x6a0>
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  4009fc:	ab04      	add	r3, sp, #16
  4009fe:	9300      	str	r3, [sp, #0]
  400a00:	2300      	movs	r3, #0
  400a02:	2213      	movs	r2, #19
  400a04:	4619      	mov	r1, r3
  400a06:	4618      	mov	r0, r3
  400a08:	4d2f      	ldr	r5, [pc, #188]	; (400ac8 <sd_mmc_check+0x83c>)
  400a0a:	47a8      	blx	r5
  400a0c:	2800      	cmp	r0, #0
  400a0e:	f43f ac65 	beq.w	4002dc <sd_mmc_check+0x50>
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  400a12:	f89d 3010 	ldrb.w	r3, [sp, #16]
  400a16:	f013 0f01 	tst.w	r3, #1
  400a1a:	d0ad      	beq.n	400978 <sd_mmc_check+0x6ec>
	u8_value = SDIO_EHS;
  400a1c:	ab14      	add	r3, sp, #80	; 0x50
  400a1e:	2202      	movs	r2, #2
  400a20:	f803 2d40 	strb.w	r2, [r3, #-64]!
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  400a24:	9300      	str	r3, [sp, #0]
  400a26:	2301      	movs	r3, #1
  400a28:	2213      	movs	r2, #19
  400a2a:	2100      	movs	r1, #0
  400a2c:	4618      	mov	r0, r3
  400a2e:	47a8      	blx	r5
  400a30:	2800      	cmp	r0, #0
  400a32:	f43f ac53 	beq.w	4002dc <sd_mmc_check+0x50>
	sd_mmc_card->high_speed = 1;
  400a36:	4b23      	ldr	r3, [pc, #140]	; (400ac4 <sd_mmc_check+0x838>)
  400a38:	681b      	ldr	r3, [r3, #0]
  400a3a:	2201      	movs	r2, #1
  400a3c:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400a3e:	681a      	ldr	r2, [r3, #0]
  400a40:	0052      	lsls	r2, r2, #1
  400a42:	601a      	str	r2, [r3, #0]
  400a44:	e798      	b.n	400978 <sd_mmc_check+0x6ec>
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  400a46:	2540      	movs	r5, #64	; 0x40
  400a48:	462a      	mov	r2, r5
  400a4a:	2100      	movs	r1, #0
  400a4c:	a804      	add	r0, sp, #16
  400a4e:	4b27      	ldr	r3, [pc, #156]	; (400aec <sd_mmc_check+0x860>)
  400a50:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400a52:	2301      	movs	r3, #1
  400a54:	9300      	str	r3, [sp, #0]
  400a56:	462a      	mov	r2, r5
  400a58:	4925      	ldr	r1, [pc, #148]	; (400af0 <sd_mmc_check+0x864>)
  400a5a:	4826      	ldr	r0, [pc, #152]	; (400af4 <sd_mmc_check+0x868>)
  400a5c:	4d26      	ldr	r5, [pc, #152]	; (400af8 <sd_mmc_check+0x86c>)
  400a5e:	47a8      	blx	r5
  400a60:	2800      	cmp	r0, #0
  400a62:	f43f ac3b 	beq.w	4002dc <sd_mmc_check+0x50>
	if (!driver_start_read_blocks(switch_status, 1)) {
  400a66:	2101      	movs	r1, #1
  400a68:	a804      	add	r0, sp, #16
  400a6a:	4b24      	ldr	r3, [pc, #144]	; (400afc <sd_mmc_check+0x870>)
  400a6c:	4798      	blx	r3
  400a6e:	2800      	cmp	r0, #0
  400a70:	f43f ac34 	beq.w	4002dc <sd_mmc_check+0x50>
	if (!driver_wait_end_of_read_blocks()) {
  400a74:	4b22      	ldr	r3, [pc, #136]	; (400b00 <sd_mmc_check+0x874>)
  400a76:	4798      	blx	r3
  400a78:	2800      	cmp	r0, #0
  400a7a:	f43f ac2f 	beq.w	4002dc <sd_mmc_check+0x50>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400a7e:	4b21      	ldr	r3, [pc, #132]	; (400b04 <sd_mmc_check+0x878>)
  400a80:	4798      	blx	r3
  400a82:	f010 0f80 	tst.w	r0, #128	; 0x80
  400a86:	f47f ac29 	bne.w	4002dc <sd_mmc_check+0x50>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400a8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  400a8e:	f003 030f 	and.w	r3, r3, #15
  400a92:	2b0f      	cmp	r3, #15
  400a94:	f43f af79 	beq.w	40098a <sd_mmc_check+0x6fe>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400a98:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400a9c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400aa0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  400aa4:	f47f ac1a 	bne.w	4002dc <sd_mmc_check+0x50>
	driver_send_clock();
  400aa8:	4b17      	ldr	r3, [pc, #92]	; (400b08 <sd_mmc_check+0x87c>)
  400aaa:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  400aac:	4b05      	ldr	r3, [pc, #20]	; (400ac4 <sd_mmc_check+0x838>)
  400aae:	681b      	ldr	r3, [r3, #0]
  400ab0:	2201      	movs	r2, #1
  400ab2:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  400ab4:	681a      	ldr	r2, [r3, #0]
  400ab6:	0052      	lsls	r2, r2, #1
  400ab8:	601a      	str	r2, [r3, #0]
  400aba:	e766      	b.n	40098a <sd_mmc_check+0x6fe>
	*v2 = 0;
  400abc:	f04f 0900 	mov.w	r9, #0
  400ac0:	e41e      	b.n	400300 <sd_mmc_check+0x74>
  400ac2:	bf00      	nop
  400ac4:	200009d4 	.word	0x200009d4
  400ac8:	004001e5 	.word	0x004001e5
  400acc:	00408234 	.word	0x00408234
  400ad0:	00408250 	.word	0x00408250
  400ad4:	200009fc 	.word	0x200009fc
  400ad8:	00401265 	.word	0x00401265
  400adc:	00401355 	.word	0x00401355
  400ae0:	00400165 	.word	0x00400165
  400ae4:	0040126f 	.word	0x0040126f
  400ae8:	00400251 	.word	0x00400251
  400aec:	00403919 	.word	0x00403919
  400af0:	80ffff01 	.word	0x80ffff01
  400af4:	00081106 	.word	0x00081106
  400af8:	004013bd 	.word	0x004013bd
  400afc:	004014f1 	.word	0x004014f1
  400b00:	00401555 	.word	0x00401555
  400b04:	00401381 	.word	0x00401381
  400b08:	00401331 	.word	0x00401331

00400b0c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400b0c:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400b0e:	4b05      	ldr	r3, [pc, #20]	; (400b24 <sd_mmc_get_type+0x18>)
  400b10:	4798      	blx	r3
  400b12:	b108      	cbz	r0, 400b18 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  400b14:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400b16:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400b18:	4b03      	ldr	r3, [pc, #12]	; (400b28 <sd_mmc_get_type+0x1c>)
  400b1a:	4798      	blx	r3
	return sd_mmc_card->type;
  400b1c:	4b03      	ldr	r3, [pc, #12]	; (400b2c <sd_mmc_get_type+0x20>)
  400b1e:	681b      	ldr	r3, [r3, #0]
  400b20:	7ad8      	ldrb	r0, [r3, #11]
  400b22:	bd08      	pop	{r3, pc}
  400b24:	0040018d 	.word	0x0040018d
  400b28:	00400251 	.word	0x00400251
  400b2c:	200009d4 	.word	0x200009d4

00400b30 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400b30:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400b32:	4b05      	ldr	r3, [pc, #20]	; (400b48 <sd_mmc_get_capacity+0x18>)
  400b34:	4798      	blx	r3
  400b36:	b108      	cbz	r0, 400b3c <sd_mmc_get_capacity+0xc>
		return 0;
  400b38:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400b3a:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  400b3c:	4b03      	ldr	r3, [pc, #12]	; (400b4c <sd_mmc_get_capacity+0x1c>)
  400b3e:	4798      	blx	r3
	return sd_mmc_card->capacity;
  400b40:	4b03      	ldr	r3, [pc, #12]	; (400b50 <sd_mmc_get_capacity+0x20>)
  400b42:	681b      	ldr	r3, [r3, #0]
  400b44:	6858      	ldr	r0, [r3, #4]
  400b46:	bd08      	pop	{r3, pc}
  400b48:	0040018d 	.word	0x0040018d
  400b4c:	00400251 	.word	0x00400251
  400b50:	200009d4 	.word	0x200009d4

00400b54 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400b54:	2000      	movs	r0, #0
  400b56:	4770      	bx	lr

00400b58 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400b5c:	b082      	sub	sp, #8
  400b5e:	468a      	mov	sl, r1
  400b60:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400b62:	4b26      	ldr	r3, [pc, #152]	; (400bfc <sd_mmc_init_read_blocks+0xa4>)
  400b64:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400b66:	4680      	mov	r8, r0
  400b68:	b118      	cbz	r0, 400b72 <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400b6a:	4640      	mov	r0, r8
  400b6c:	b002      	add	sp, #8
  400b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b72:	4c23      	ldr	r4, [pc, #140]	; (400c00 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400b74:	4e23      	ldr	r6, [pc, #140]	; (400c04 <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400b76:	4d24      	ldr	r5, [pc, #144]	; (400c08 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400b78:	4f24      	ldr	r7, [pc, #144]	; (400c0c <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  400b7a:	6833      	ldr	r3, [r6, #0]
  400b7c:	8919      	ldrh	r1, [r3, #8]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400b7e:	0409      	lsls	r1, r1, #16
  400b80:	f241 100d 	movw	r0, #4365	; 0x110d
  400b84:	47a8      	blx	r5
  400b86:	b128      	cbz	r0, 400b94 <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400b88:	47b8      	blx	r7
  400b8a:	f410 7f80 	tst.w	r0, #256	; 0x100
  400b8e:	d117      	bne.n	400bc0 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  400b90:	3c01      	subs	r4, #1
  400b92:	d1f2      	bne.n	400b7a <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  400b94:	4b1e      	ldr	r3, [pc, #120]	; (400c10 <sd_mmc_init_read_blocks+0xb8>)
  400b96:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400b98:	f04f 0805 	mov.w	r8, #5
  400b9c:	e7e5      	b.n	400b6a <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  400b9e:	4b1b      	ldr	r3, [pc, #108]	; (400c0c <sd_mmc_init_read_blocks+0xb4>)
  400ba0:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400ba2:	4b1c      	ldr	r3, [pc, #112]	; (400c14 <sd_mmc_init_read_blocks+0xbc>)
  400ba4:	4003      	ands	r3, r0
  400ba6:	b933      	cbnz	r3, 400bb6 <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  400ba8:	4b1b      	ldr	r3, [pc, #108]	; (400c18 <sd_mmc_init_read_blocks+0xc0>)
  400baa:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400bae:	4b1b      	ldr	r3, [pc, #108]	; (400c1c <sd_mmc_init_read_blocks+0xc4>)
  400bb0:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  400bb4:	e7d9      	b.n	400b6a <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  400bb6:	4b16      	ldr	r3, [pc, #88]	; (400c10 <sd_mmc_init_read_blocks+0xb8>)
  400bb8:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400bba:	f04f 0805 	mov.w	r8, #5
  400bbe:	e7d4      	b.n	400b6a <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  400bc0:	4b17      	ldr	r3, [pc, #92]	; (400c20 <sd_mmc_init_read_blocks+0xc8>)
  400bc2:	4818      	ldr	r0, [pc, #96]	; (400c24 <sd_mmc_init_read_blocks+0xcc>)
  400bc4:	f1b9 0f01 	cmp.w	r9, #1
  400bc8:	bf98      	it	ls
  400bca:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400bcc:	4b0d      	ldr	r3, [pc, #52]	; (400c04 <sd_mmc_init_read_blocks+0xac>)
  400bce:	681b      	ldr	r3, [r3, #0]
  400bd0:	7adb      	ldrb	r3, [r3, #11]
  400bd2:	f013 0f08 	tst.w	r3, #8
  400bd6:	d101      	bne.n	400bdc <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  400bd8:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400bdc:	2301      	movs	r3, #1
  400bde:	9300      	str	r3, [sp, #0]
  400be0:	464b      	mov	r3, r9
  400be2:	f44f 7200 	mov.w	r2, #512	; 0x200
  400be6:	4651      	mov	r1, sl
  400be8:	4c0f      	ldr	r4, [pc, #60]	; (400c28 <sd_mmc_init_read_blocks+0xd0>)
  400bea:	47a0      	blx	r4
  400bec:	2800      	cmp	r0, #0
  400bee:	d1d6      	bne.n	400b9e <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  400bf0:	4b07      	ldr	r3, [pc, #28]	; (400c10 <sd_mmc_init_read_blocks+0xb8>)
  400bf2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400bf4:	f04f 0805 	mov.w	r8, #5
  400bf8:	e7b7      	b.n	400b6a <sd_mmc_init_read_blocks+0x12>
  400bfa:	bf00      	nop
  400bfc:	0040018d 	.word	0x0040018d
  400c00:	00030d41 	.word	0x00030d41
  400c04:	200009d4 	.word	0x200009d4
  400c08:	00401355 	.word	0x00401355
  400c0c:	00401381 	.word	0x00401381
  400c10:	00400251 	.word	0x00400251
  400c14:	e4580000 	.word	0xe4580000
  400c18:	200009f8 	.word	0x200009f8
  400c1c:	200009fa 	.word	0x200009fa
  400c20:	00081111 	.word	0x00081111
  400c24:	00101112 	.word	0x00101112
  400c28:	004013bd 	.word	0x004013bd

00400c2c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400c2c:	b510      	push	{r4, lr}
  400c2e:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400c30:	4b06      	ldr	r3, [pc, #24]	; (400c4c <sd_mmc_start_read_blocks+0x20>)
  400c32:	4798      	blx	r3
  400c34:	b920      	cbnz	r0, 400c40 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400c36:	2200      	movs	r2, #0
  400c38:	4b05      	ldr	r3, [pc, #20]	; (400c50 <sd_mmc_start_read_blocks+0x24>)
  400c3a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400c3c:	2005      	movs	r0, #5
  400c3e:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400c40:	4a03      	ldr	r2, [pc, #12]	; (400c50 <sd_mmc_start_read_blocks+0x24>)
  400c42:	8813      	ldrh	r3, [r2, #0]
  400c44:	1b1c      	subs	r4, r3, r4
  400c46:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400c48:	2000      	movs	r0, #0
}
  400c4a:	bd10      	pop	{r4, pc}
  400c4c:	004014f1 	.word	0x004014f1
  400c50:	200009f8 	.word	0x200009f8

00400c54 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  400c54:	b510      	push	{r4, lr}
  400c56:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  400c58:	4b13      	ldr	r3, [pc, #76]	; (400ca8 <sd_mmc_wait_end_of_read_blocks+0x54>)
  400c5a:	4798      	blx	r3
  400c5c:	b908      	cbnz	r0, 400c62 <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400c5e:	2005      	movs	r0, #5
  400c60:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400c62:	b184      	cbz	r4, 400c86 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400c64:	2200      	movs	r2, #0
  400c66:	4b11      	ldr	r3, [pc, #68]	; (400cac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400c68:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400c6a:	4b11      	ldr	r3, [pc, #68]	; (400cb0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  400c6c:	881b      	ldrh	r3, [r3, #0]
  400c6e:	2b01      	cmp	r3, #1
  400c70:	d00f      	beq.n	400c92 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400c72:	2100      	movs	r1, #0
  400c74:	f243 100c 	movw	r0, #12556	; 0x310c
  400c78:	4b0e      	ldr	r3, [pc, #56]	; (400cb4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400c7a:	4798      	blx	r3
  400c7c:	b168      	cbz	r0, 400c9a <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  400c7e:	4b0e      	ldr	r3, [pc, #56]	; (400cb8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400c80:	4798      	blx	r3
	return SD_MMC_OK;
  400c82:	2000      	movs	r0, #0
  400c84:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400c86:	4b09      	ldr	r3, [pc, #36]	; (400cac <sd_mmc_wait_end_of_read_blocks+0x58>)
  400c88:	881b      	ldrh	r3, [r3, #0]
  400c8a:	2b00      	cmp	r3, #0
  400c8c:	d0ed      	beq.n	400c6a <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  400c8e:	2000      	movs	r0, #0
}
  400c90:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400c92:	4b09      	ldr	r3, [pc, #36]	; (400cb8 <sd_mmc_wait_end_of_read_blocks+0x64>)
  400c94:	4798      	blx	r3
		return SD_MMC_OK;
  400c96:	2000      	movs	r0, #0
  400c98:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400c9a:	2100      	movs	r1, #0
  400c9c:	f243 100c 	movw	r0, #12556	; 0x310c
  400ca0:	4b04      	ldr	r3, [pc, #16]	; (400cb4 <sd_mmc_wait_end_of_read_blocks+0x60>)
  400ca2:	4798      	blx	r3
  400ca4:	e7eb      	b.n	400c7e <sd_mmc_wait_end_of_read_blocks+0x2a>
  400ca6:	bf00      	nop
  400ca8:	00401555 	.word	0x00401555
  400cac:	200009f8 	.word	0x200009f8
  400cb0:	200009fa 	.word	0x200009fa
  400cb4:	00401355 	.word	0x00401355
  400cb8:	00400251 	.word	0x00400251

00400cbc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400cbc:	b570      	push	{r4, r5, r6, lr}
  400cbe:	b082      	sub	sp, #8
  400cc0:	460e      	mov	r6, r1
  400cc2:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400cc4:	4b16      	ldr	r3, [pc, #88]	; (400d20 <sd_mmc_init_write_blocks+0x64>)
  400cc6:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400cc8:	4604      	mov	r4, r0
  400cca:	b9b8      	cbnz	r0, 400cfc <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  400ccc:	4b15      	ldr	r3, [pc, #84]	; (400d24 <sd_mmc_init_write_blocks+0x68>)
  400cce:	4816      	ldr	r0, [pc, #88]	; (400d28 <sd_mmc_init_write_blocks+0x6c>)
  400cd0:	2d01      	cmp	r5, #1
  400cd2:	bf98      	it	ls
  400cd4:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400cd6:	4b15      	ldr	r3, [pc, #84]	; (400d2c <sd_mmc_init_write_blocks+0x70>)
  400cd8:	681b      	ldr	r3, [r3, #0]
  400cda:	7adb      	ldrb	r3, [r3, #11]
  400cdc:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400ce0:	bf08      	it	eq
  400ce2:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400ce4:	2301      	movs	r3, #1
  400ce6:	9300      	str	r3, [sp, #0]
  400ce8:	462b      	mov	r3, r5
  400cea:	f44f 7200 	mov.w	r2, #512	; 0x200
  400cee:	4631      	mov	r1, r6
  400cf0:	4e0f      	ldr	r6, [pc, #60]	; (400d30 <sd_mmc_init_write_blocks+0x74>)
  400cf2:	47b0      	blx	r6
  400cf4:	b928      	cbnz	r0, 400d02 <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  400cf6:	4b0f      	ldr	r3, [pc, #60]	; (400d34 <sd_mmc_init_write_blocks+0x78>)
  400cf8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  400cfa:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400cfc:	4620      	mov	r0, r4
  400cfe:	b002      	add	sp, #8
  400d00:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  400d02:	4b0d      	ldr	r3, [pc, #52]	; (400d38 <sd_mmc_init_write_blocks+0x7c>)
  400d04:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400d06:	4b0d      	ldr	r3, [pc, #52]	; (400d3c <sd_mmc_init_write_blocks+0x80>)
  400d08:	4003      	ands	r3, r0
  400d0a:	b923      	cbnz	r3, 400d16 <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  400d0c:	4b0c      	ldr	r3, [pc, #48]	; (400d40 <sd_mmc_init_write_blocks+0x84>)
  400d0e:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400d10:	4b0c      	ldr	r3, [pc, #48]	; (400d44 <sd_mmc_init_write_blocks+0x88>)
  400d12:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  400d14:	e7f2      	b.n	400cfc <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  400d16:	4b07      	ldr	r3, [pc, #28]	; (400d34 <sd_mmc_init_write_blocks+0x78>)
  400d18:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400d1a:	2405      	movs	r4, #5
  400d1c:	e7ee      	b.n	400cfc <sd_mmc_init_write_blocks+0x40>
  400d1e:	bf00      	nop
  400d20:	0040018d 	.word	0x0040018d
  400d24:	00089118 	.word	0x00089118
  400d28:	00109119 	.word	0x00109119
  400d2c:	200009d4 	.word	0x200009d4
  400d30:	004013bd 	.word	0x004013bd
  400d34:	00400251 	.word	0x00400251
  400d38:	00401381 	.word	0x00401381
  400d3c:	e4580000 	.word	0xe4580000
  400d40:	200009f8 	.word	0x200009f8
  400d44:	200009fa 	.word	0x200009fa

00400d48 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400d48:	b510      	push	{r4, lr}
  400d4a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400d4c:	4b06      	ldr	r3, [pc, #24]	; (400d68 <sd_mmc_start_write_blocks+0x20>)
  400d4e:	4798      	blx	r3
  400d50:	b920      	cbnz	r0, 400d5c <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  400d52:	2200      	movs	r2, #0
  400d54:	4b05      	ldr	r3, [pc, #20]	; (400d6c <sd_mmc_start_write_blocks+0x24>)
  400d56:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  400d58:	2005      	movs	r0, #5
  400d5a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400d5c:	4a03      	ldr	r2, [pc, #12]	; (400d6c <sd_mmc_start_write_blocks+0x24>)
  400d5e:	8813      	ldrh	r3, [r2, #0]
  400d60:	1b1c      	subs	r4, r3, r4
  400d62:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  400d64:	2000      	movs	r0, #0
}
  400d66:	bd10      	pop	{r4, pc}
  400d68:	004015c5 	.word	0x004015c5
  400d6c:	200009f8 	.word	0x200009f8

00400d70 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  400d70:	b510      	push	{r4, lr}
  400d72:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  400d74:	4b12      	ldr	r3, [pc, #72]	; (400dc0 <sd_mmc_wait_end_of_write_blocks+0x50>)
  400d76:	4798      	blx	r3
  400d78:	b908      	cbnz	r0, 400d7e <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  400d7a:	2005      	movs	r0, #5
  400d7c:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  400d7e:	b184      	cbz	r4, 400da2 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  400d80:	2200      	movs	r2, #0
  400d82:	4b10      	ldr	r3, [pc, #64]	; (400dc4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400d84:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400d86:	4b10      	ldr	r3, [pc, #64]	; (400dc8 <sd_mmc_wait_end_of_write_blocks+0x58>)
  400d88:	881b      	ldrh	r3, [r3, #0]
  400d8a:	2b01      	cmp	r3, #1
  400d8c:	d00f      	beq.n	400dae <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400d8e:	2100      	movs	r1, #0
  400d90:	f243 100c 	movw	r0, #12556	; 0x310c
  400d94:	4b0d      	ldr	r3, [pc, #52]	; (400dcc <sd_mmc_wait_end_of_write_blocks+0x5c>)
  400d96:	4798      	blx	r3
  400d98:	b968      	cbnz	r0, 400db6 <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  400d9a:	4b0d      	ldr	r3, [pc, #52]	; (400dd0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400d9c:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  400d9e:	2005      	movs	r0, #5
  400da0:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  400da2:	4b08      	ldr	r3, [pc, #32]	; (400dc4 <sd_mmc_wait_end_of_write_blocks+0x54>)
  400da4:	881b      	ldrh	r3, [r3, #0]
  400da6:	2b00      	cmp	r3, #0
  400da8:	d0ed      	beq.n	400d86 <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  400daa:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400dac:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  400dae:	4b08      	ldr	r3, [pc, #32]	; (400dd0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400db0:	4798      	blx	r3
		return SD_MMC_OK;
  400db2:	2000      	movs	r0, #0
  400db4:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  400db6:	4b06      	ldr	r3, [pc, #24]	; (400dd0 <sd_mmc_wait_end_of_write_blocks+0x60>)
  400db8:	4798      	blx	r3
	return SD_MMC_OK;
  400dba:	2000      	movs	r0, #0
  400dbc:	bd10      	pop	{r4, pc}
  400dbe:	bf00      	nop
  400dc0:	0040162d 	.word	0x0040162d
  400dc4:	200009f8 	.word	0x200009f8
  400dc8:	200009fa 	.word	0x200009fa
  400dcc:	00401355 	.word	0x00401355
  400dd0:	00400251 	.word	0x00400251

00400dd4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  400dd4:	b510      	push	{r4, lr}
  400dd6:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  400dd8:	4b0f      	ldr	r3, [pc, #60]	; (400e18 <sd_mmc_test_unit_ready+0x44>)
  400dda:	4798      	blx	r3
  400ddc:	2801      	cmp	r0, #1
  400dde:	d018      	beq.n	400e12 <sd_mmc_test_unit_ready+0x3e>
  400de0:	b118      	cbz	r0, 400dea <sd_mmc_test_unit_ready+0x16>
  400de2:	2802      	cmp	r0, #2
  400de4:	d010      	beq.n	400e08 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  400de6:	2001      	movs	r0, #1
  400de8:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  400dea:	4b0c      	ldr	r3, [pc, #48]	; (400e1c <sd_mmc_test_unit_ready+0x48>)
  400dec:	5d1b      	ldrb	r3, [r3, r4]
  400dee:	b10b      	cbz	r3, 400df4 <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  400df0:	2002      	movs	r0, #2
	}
}
  400df2:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  400df4:	4620      	mov	r0, r4
  400df6:	4b0a      	ldr	r3, [pc, #40]	; (400e20 <sd_mmc_test_unit_ready+0x4c>)
  400df8:	4798      	blx	r3
  400dfa:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  400dfe:	2800      	cmp	r0, #0
  400e00:	bf14      	ite	ne
  400e02:	2000      	movne	r0, #0
  400e04:	2002      	moveq	r0, #2
  400e06:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  400e08:	2200      	movs	r2, #0
  400e0a:	4b04      	ldr	r3, [pc, #16]	; (400e1c <sd_mmc_test_unit_ready+0x48>)
  400e0c:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  400e0e:	2002      	movs	r0, #2
  400e10:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  400e12:	2003      	movs	r0, #3
  400e14:	bd10      	pop	{r4, pc}
  400e16:	bf00      	nop
  400e18:	0040028d 	.word	0x0040028d
  400e1c:	20000a00 	.word	0x20000a00
  400e20:	00400b0d 	.word	0x00400b0d

00400e24 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  400e24:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  400e26:	2000      	movs	r0, #0
  400e28:	4b01      	ldr	r3, [pc, #4]	; (400e30 <sd_mmc_test_unit_ready_0+0xc>)
  400e2a:	4798      	blx	r3
}
  400e2c:	bd08      	pop	{r3, pc}
  400e2e:	bf00      	nop
  400e30:	00400dd5 	.word	0x00400dd5

00400e34 <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
  400e34:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(1);
  400e36:	2001      	movs	r0, #1
  400e38:	4b01      	ldr	r3, [pc, #4]	; (400e40 <sd_mmc_test_unit_ready_1+0xc>)
  400e3a:	4798      	blx	r3
}
  400e3c:	bd08      	pop	{r3, pc}
  400e3e:	bf00      	nop
  400e40:	00400dd5 	.word	0x00400dd5

00400e44 <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  400e44:	b538      	push	{r3, r4, r5, lr}
  400e46:	4604      	mov	r4, r0
  400e48:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  400e4a:	4b04      	ldr	r3, [pc, #16]	; (400e5c <sd_mmc_read_capacity+0x18>)
  400e4c:	4798      	blx	r3
  400e4e:	0040      	lsls	r0, r0, #1
  400e50:	3801      	subs	r0, #1
  400e52:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  400e54:	4620      	mov	r0, r4
  400e56:	4b02      	ldr	r3, [pc, #8]	; (400e60 <sd_mmc_read_capacity+0x1c>)
  400e58:	4798      	blx	r3
}
  400e5a:	bd38      	pop	{r3, r4, r5, pc}
  400e5c:	00400b31 	.word	0x00400b31
  400e60:	00400dd5 	.word	0x00400dd5

00400e64 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  400e64:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  400e66:	4601      	mov	r1, r0
  400e68:	2000      	movs	r0, #0
  400e6a:	4b01      	ldr	r3, [pc, #4]	; (400e70 <sd_mmc_read_capacity_0+0xc>)
  400e6c:	4798      	blx	r3
}
  400e6e:	bd08      	pop	{r3, pc}
  400e70:	00400e45 	.word	0x00400e45

00400e74 <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
  400e74:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(1, nb_sector);
  400e76:	4601      	mov	r1, r0
  400e78:	2001      	movs	r0, #1
  400e7a:	4b01      	ldr	r3, [pc, #4]	; (400e80 <sd_mmc_read_capacity_1+0xc>)
  400e7c:	4798      	blx	r3
}
  400e7e:	bd08      	pop	{r3, pc}
  400e80:	00400e45 	.word	0x00400e45

00400e84 <sd_mmc_unload_0>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
  400e84:	4b01      	ldr	r3, [pc, #4]	; (400e8c <sd_mmc_unload_0+0x8>)
  400e86:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
  400e88:	2001      	movs	r0, #1
  400e8a:	4770      	bx	lr
  400e8c:	20000a00 	.word	0x20000a00

00400e90 <sd_mmc_unload_1>:
	sd_mmc_ejected[slot] = unload;
  400e90:	4b01      	ldr	r3, [pc, #4]	; (400e98 <sd_mmc_unload_1+0x8>)
  400e92:	7058      	strb	r0, [r3, #1]

bool sd_mmc_unload_1(bool unload)
{
	return sd_mmc_unload(1, unload);
}
  400e94:	2001      	movs	r0, #1
  400e96:	4770      	bx	lr
  400e98:	20000a00 	.word	0x20000a00

00400e9c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  400e9c:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  400e9e:	2000      	movs	r0, #0
  400ea0:	4b01      	ldr	r3, [pc, #4]	; (400ea8 <sd_mmc_wr_protect_0+0xc>)
  400ea2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  400ea4:	bd08      	pop	{r3, pc}
  400ea6:	bf00      	nop
  400ea8:	00400b55 	.word	0x00400b55

00400eac <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
  400eac:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  400eae:	2001      	movs	r0, #1
  400eb0:	4b01      	ldr	r3, [pc, #4]	; (400eb8 <sd_mmc_wr_protect_1+0xc>)
  400eb2:	4798      	blx	r3
	return sd_mmc_wr_protect(1);
}
  400eb4:	bd08      	pop	{r3, pc}
  400eb6:	bf00      	nop
  400eb8:	00400b55 	.word	0x00400b55

00400ebc <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
  400ebc:	2001      	movs	r0, #1
  400ebe:	4770      	bx	lr

00400ec0 <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
	return sd_mmc_removal(1);
}
  400ec0:	2001      	movs	r0, #1
  400ec2:	4770      	bx	lr

00400ec4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  400ec4:	b510      	push	{r4, lr}
  400ec6:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  400ec8:	2201      	movs	r2, #1
  400eca:	4b0a      	ldr	r3, [pc, #40]	; (400ef4 <sd_mmc_mem_2_ram+0x30>)
  400ecc:	4798      	blx	r3
  400ece:	b120      	cbz	r0, 400eda <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400ed0:	2802      	cmp	r0, #2
  400ed2:	bf0c      	ite	eq
  400ed4:	2002      	moveq	r0, #2
  400ed6:	2001      	movne	r0, #1
  400ed8:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  400eda:	2101      	movs	r1, #1
  400edc:	4620      	mov	r0, r4
  400ede:	4b06      	ldr	r3, [pc, #24]	; (400ef8 <sd_mmc_mem_2_ram+0x34>)
  400ee0:	4798      	blx	r3
  400ee2:	b108      	cbz	r0, 400ee8 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  400ee4:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400ee6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  400ee8:	4b04      	ldr	r3, [pc, #16]	; (400efc <sd_mmc_mem_2_ram+0x38>)
  400eea:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400eec:	3000      	adds	r0, #0
  400eee:	bf18      	it	ne
  400ef0:	2001      	movne	r0, #1
  400ef2:	bd10      	pop	{r4, pc}
  400ef4:	00400b59 	.word	0x00400b59
  400ef8:	00400c2d 	.word	0x00400c2d
  400efc:	00400c55 	.word	0x00400c55

00400f00 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  400f00:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  400f02:	460a      	mov	r2, r1
  400f04:	4601      	mov	r1, r0
  400f06:	2000      	movs	r0, #0
  400f08:	4b01      	ldr	r3, [pc, #4]	; (400f10 <sd_mmc_mem_2_ram_0+0x10>)
  400f0a:	4798      	blx	r3
}
  400f0c:	bd08      	pop	{r3, pc}
  400f0e:	bf00      	nop
  400f10:	00400ec5 	.word	0x00400ec5

00400f14 <sd_mmc_mem_2_ram_1>:

Ctrl_status sd_mmc_mem_2_ram_1(uint32_t addr, void *ram)
{
  400f14:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(1, addr, ram);
  400f16:	460a      	mov	r2, r1
  400f18:	4601      	mov	r1, r0
  400f1a:	2001      	movs	r0, #1
  400f1c:	4b01      	ldr	r3, [pc, #4]	; (400f24 <sd_mmc_mem_2_ram_1+0x10>)
  400f1e:	4798      	blx	r3
}
  400f20:	bd08      	pop	{r3, pc}
  400f22:	bf00      	nop
  400f24:	00400ec5 	.word	0x00400ec5

00400f28 <sd_mmc_ram_2_mem>:

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  400f28:	b510      	push	{r4, lr}
  400f2a:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  400f2c:	2201      	movs	r2, #1
  400f2e:	4b0a      	ldr	r3, [pc, #40]	; (400f58 <sd_mmc_ram_2_mem+0x30>)
  400f30:	4798      	blx	r3
  400f32:	b120      	cbz	r0, 400f3e <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  400f34:	2802      	cmp	r0, #2
  400f36:	bf0c      	ite	eq
  400f38:	2002      	moveq	r0, #2
  400f3a:	2001      	movne	r0, #1
  400f3c:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  400f3e:	2101      	movs	r1, #1
  400f40:	4620      	mov	r0, r4
  400f42:	4b06      	ldr	r3, [pc, #24]	; (400f5c <sd_mmc_ram_2_mem+0x34>)
  400f44:	4798      	blx	r3
  400f46:	b108      	cbz	r0, 400f4c <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  400f48:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  400f4a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  400f4c:	4b04      	ldr	r3, [pc, #16]	; (400f60 <sd_mmc_ram_2_mem+0x38>)
  400f4e:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  400f50:	3000      	adds	r0, #0
  400f52:	bf18      	it	ne
  400f54:	2001      	movne	r0, #1
  400f56:	bd10      	pop	{r4, pc}
  400f58:	00400cbd 	.word	0x00400cbd
  400f5c:	00400d49 	.word	0x00400d49
  400f60:	00400d71 	.word	0x00400d71

00400f64 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  400f64:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  400f66:	460a      	mov	r2, r1
  400f68:	4601      	mov	r1, r0
  400f6a:	2000      	movs	r0, #0
  400f6c:	4b01      	ldr	r3, [pc, #4]	; (400f74 <sd_mmc_ram_2_mem_0+0x10>)
  400f6e:	4798      	blx	r3
}
  400f70:	bd08      	pop	{r3, pc}
  400f72:	bf00      	nop
  400f74:	00400f29 	.word	0x00400f29

00400f78 <sd_mmc_ram_2_mem_1>:

Ctrl_status sd_mmc_ram_2_mem_1(uint32_t addr, const void *ram)
{
  400f78:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(1, addr, ram);
  400f7a:	460a      	mov	r2, r1
  400f7c:	4601      	mov	r1, r0
  400f7e:	2001      	movs	r0, #1
  400f80:	4b01      	ldr	r3, [pc, #4]	; (400f88 <sd_mmc_ram_2_mem_1+0x10>)
  400f82:	4798      	blx	r3
}
  400f84:	bd08      	pop	{r3, pc}
  400f86:	bf00      	nop
  400f88:	00400f29 	.word	0x00400f29

00400f8c <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  400f8c:	2801      	cmp	r0, #1
  400f8e:	d901      	bls.n	400f94 <mem_test_unit_ready+0x8>
  400f90:	2001      	movs	r0, #1
  400f92:	4770      	bx	lr
{
  400f94:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  400f96:	0140      	lsls	r0, r0, #5
  400f98:	4b01      	ldr	r3, [pc, #4]	; (400fa0 <mem_test_unit_ready+0x14>)
  400f9a:	581b      	ldr	r3, [r3, r0]
  400f9c:	4798      	blx	r3
  400f9e:	bd08      	pop	{r3, pc}
  400fa0:	00408290 	.word	0x00408290

00400fa4 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  400fa4:	2801      	cmp	r0, #1
  400fa6:	d901      	bls.n	400fac <mem_read_capacity+0x8>
  400fa8:	2001      	movs	r0, #1
  400faa:	4770      	bx	lr
{
  400fac:	b508      	push	{r3, lr}
  400fae:	4603      	mov	r3, r0
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  400fb0:	4803      	ldr	r0, [pc, #12]	; (400fc0 <mem_read_capacity+0x1c>)
  400fb2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  400fb6:	6843      	ldr	r3, [r0, #4]
  400fb8:	4608      	mov	r0, r1
  400fba:	4798      	blx	r3
  400fbc:	bd08      	pop	{r3, pc}
  400fbe:	bf00      	nop
  400fc0:	00408290 	.word	0x00408290

00400fc4 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  400fc4:	2801      	cmp	r0, #1
  400fc6:	bf8c      	ite	hi
  400fc8:	2000      	movhi	r0, #0
  400fca:	2001      	movls	r0, #1
  400fcc:	4770      	bx	lr
	...

00400fd0 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  400fd0:	2801      	cmp	r0, #1
  400fd2:	d901      	bls.n	400fd8 <mem_wr_protect+0x8>
  400fd4:	2001      	movs	r0, #1
  400fd6:	4770      	bx	lr
{
  400fd8:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  400fda:	4b03      	ldr	r3, [pc, #12]	; (400fe8 <mem_wr_protect+0x18>)
  400fdc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  400fe0:	68c3      	ldr	r3, [r0, #12]
  400fe2:	4798      	blx	r3
  400fe4:	bd08      	pop	{r3, pc}
  400fe6:	bf00      	nop
  400fe8:	00408290 	.word	0x00408290

00400fec <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  400fec:	2801      	cmp	r0, #1
  400fee:	d901      	bls.n	400ff4 <memory_2_ram+0x8>
  400ff0:	2001      	movs	r0, #1
  400ff2:	4770      	bx	lr
{
  400ff4:	b510      	push	{r4, lr}
  400ff6:	460c      	mov	r4, r1
  400ff8:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  400ffa:	4804      	ldr	r0, [pc, #16]	; (40100c <memory_2_ram+0x20>)
  400ffc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401000:	6943      	ldr	r3, [r0, #20]
  401002:	4611      	mov	r1, r2
  401004:	4620      	mov	r0, r4
  401006:	4798      	blx	r3
  401008:	bd10      	pop	{r4, pc}
  40100a:	bf00      	nop
  40100c:	00408290 	.word	0x00408290

00401010 <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  401010:	2801      	cmp	r0, #1
  401012:	d901      	bls.n	401018 <ram_2_memory+0x8>
  401014:	2001      	movs	r0, #1
  401016:	4770      	bx	lr
{
  401018:	b510      	push	{r4, lr}
  40101a:	460c      	mov	r4, r1
  40101c:	4603      	mov	r3, r0
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  40101e:	4804      	ldr	r0, [pc, #16]	; (401030 <ram_2_memory+0x20>)
  401020:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  401024:	6983      	ldr	r3, [r0, #24]
  401026:	4611      	mov	r1, r2
  401028:	4620      	mov	r0, r4
  40102a:	4798      	blx	r3
  40102c:	bd10      	pop	{r4, pc}
  40102e:	bf00      	nop
  401030:	00408290 	.word	0x00408290

00401034 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  401034:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401036:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40103a:	4b4b      	ldr	r3, [pc, #300]	; (401168 <board_init+0x134>)
  40103c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40103e:	2009      	movs	r0, #9
  401040:	4c4a      	ldr	r4, [pc, #296]	; (40116c <board_init+0x138>)
  401042:	47a0      	blx	r4
  401044:	200a      	movs	r0, #10
  401046:	47a0      	blx	r4
  401048:	200b      	movs	r0, #11
  40104a:	47a0      	blx	r4
  40104c:	200c      	movs	r0, #12
  40104e:	47a0      	blx	r4
  401050:	200d      	movs	r0, #13
  401052:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401054:	4b46      	ldr	r3, [pc, #280]	; (401170 <board_init+0x13c>)
  401056:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40105a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40105c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401060:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401062:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401066:	2204      	movs	r2, #4
  401068:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40106a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40106e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401070:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401074:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401076:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40107c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40107e:	f021 0104 	bic.w	r1, r1, #4
  401082:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401084:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401086:	f021 0104 	bic.w	r1, r1, #4
  40108a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40108c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401090:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401094:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  401098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40109c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40109e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4010a2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4010a4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4010a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4010aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4010ac:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
  4010b0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4010b2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4010b4:	4311      	orrs	r1, r2
  4010b6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4010b8:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4010ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4010be:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4010c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4010c4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4010c6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4010c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4010cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4010ce:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  4010d2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4010d4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4010d6:	4311      	orrs	r1, r2
  4010d8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4010da:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4010dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4010e0:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4010e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4010e6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4010e8:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4010ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4010ee:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4010f0:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
  4010f4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4010f6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4010f8:	4311      	orrs	r1, r2
  4010fa:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4010fc:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4010fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  401102:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401104:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401108:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40110a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40110c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401110:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401112:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401116:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  401118:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40111a:	4311      	orrs	r1, r2
  40111c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40111e:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401120:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401124:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40112a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40112c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40112e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401132:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401134:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
  401138:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40113a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40113c:	4311      	orrs	r1, r2
  40113e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401140:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  401142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401146:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401148:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40114c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40114e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401154:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401156:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40115a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40115c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40115e:	4311      	orrs	r1, r2
  401160:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401162:	605a      	str	r2, [r3, #4]
  401164:	bd10      	pop	{r4, pc}
  401166:	bf00      	nop
  401168:	400e1850 	.word	0x400e1850
  40116c:	00403875 	.word	0x00403875
  401170:	400e1400 	.word	0x400e1400

00401174 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  401174:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  401176:	4b08      	ldr	r3, [pc, #32]	; (401198 <hsmci_reset+0x24>)
  401178:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  40117a:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  40117c:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  40117e:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  401180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  401182:	2680      	movs	r6, #128	; 0x80
  401184:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  401186:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  401188:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  40118a:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  40118c:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  40118e:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  401190:	2205      	movs	r2, #5
  401192:	601a      	str	r2, [r3, #0]
}
  401194:	bc70      	pop	{r4, r5, r6}
  401196:	4770      	bx	lr
  401198:	40080000 	.word	0x40080000

0040119c <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  40119c:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  40119e:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  4011a2:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  4011a4:	f411 7f80 	tst.w	r1, #256	; 0x100
  4011a8:	d004      	beq.n	4011b4 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  4011aa:	f411 6f00 	tst.w	r1, #2048	; 0x800
  4011ae:	d00d      	beq.n	4011cc <hsmci_send_cmd_execute+0x30>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  4011b0:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  4011b4:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  4011b8:	bf18      	it	ne
  4011ba:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  4011be:	4b1d      	ldr	r3, [pc, #116]	; (401234 <hsmci_send_cmd_execute+0x98>)
  4011c0:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  4011c2:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  4011c4:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  4011c6:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  4011ca:	e00d      	b.n	4011e8 <hsmci_send_cmd_execute+0x4c>
		} else if (cmd & SDMMC_RESP_BUSY) {
  4011cc:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  4011d0:	bf14      	ite	ne
  4011d2:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  4011d6:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  4011da:	e7eb      	b.n	4011b4 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4011dc:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  4011e0:	d10c      	bne.n	4011fc <hsmci_send_cmd_execute+0x60>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4011e2:	f013 0f01 	tst.w	r3, #1
  4011e6:	d10d      	bne.n	401204 <hsmci_send_cmd_execute+0x68>
		sr = HSMCI->HSMCI_SR;
  4011e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  4011ea:	2a00      	cmp	r2, #0
  4011ec:	d0f6      	beq.n	4011dc <hsmci_send_cmd_execute+0x40>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4011ee:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  4011f2:	d0f6      	beq.n	4011e2 <hsmci_send_cmd_execute+0x46>
				hsmci_reset();
  4011f4:	4b10      	ldr	r3, [pc, #64]	; (401238 <hsmci_send_cmd_execute+0x9c>)
  4011f6:	4798      	blx	r3
				return false;
  4011f8:	2000      	movs	r0, #0
  4011fa:	bd08      	pop	{r3, pc}
				hsmci_reset();
  4011fc:	4b0e      	ldr	r3, [pc, #56]	; (401238 <hsmci_send_cmd_execute+0x9c>)
  4011fe:	4798      	blx	r3
				return false;
  401200:	2000      	movs	r0, #0
  401202:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  401204:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  401208:	d103      	bne.n	401212 <hsmci_send_cmd_execute+0x76>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  40120a:	2001      	movs	r0, #1
  40120c:	bd08      	pop	{r3, pc}
	return true;
  40120e:	2001      	movs	r0, #1
  401210:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  401212:	4b08      	ldr	r3, [pc, #32]	; (401234 <hsmci_send_cmd_execute+0x98>)
  401214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401216:	f04f 32ff 	mov.w	r2, #4294967295
  40121a:	4906      	ldr	r1, [pc, #24]	; (401234 <hsmci_send_cmd_execute+0x98>)
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  40121c:	f003 0330 	and.w	r3, r3, #48	; 0x30
  401220:	2b20      	cmp	r3, #32
  401222:	d0f4      	beq.n	40120e <hsmci_send_cmd_execute+0x72>
		sr = HSMCI->HSMCI_SR;
  401224:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  401226:	3a01      	subs	r2, #1
  401228:	d1f8      	bne.n	40121c <hsmci_send_cmd_execute+0x80>
			hsmci_reset();
  40122a:	4b03      	ldr	r3, [pc, #12]	; (401238 <hsmci_send_cmd_execute+0x9c>)
  40122c:	4798      	blx	r3
			return false;
  40122e:	2000      	movs	r0, #0
  401230:	bd08      	pop	{r3, pc}
  401232:	bf00      	nop
  401234:	40080000 	.word	0x40080000
  401238:	00401175 	.word	0x00401175

0040123c <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  40123c:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  40123e:	2010      	movs	r0, #16
  401240:	4b06      	ldr	r3, [pc, #24]	; (40125c <hsmci_init+0x20>)
  401242:	4798      	blx	r3
	pmc_enable_periph_clk(ID_XDMAC);
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  401244:	4b06      	ldr	r3, [pc, #24]	; (401260 <hsmci_init+0x24>)
  401246:	2272      	movs	r2, #114	; 0x72
  401248:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  40124a:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  40124c:	2211      	movs	r2, #17
  40124e:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  401250:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  401254:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  401256:	2205      	movs	r2, #5
  401258:	601a      	str	r2, [r3, #0]
  40125a:	bd08      	pop	{r3, pc}
  40125c:	00403875 	.word	0x00403875
  401260:	40080000 	.word	0x40080000

00401264 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  401264:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  401266:	bf0c      	ite	eq
  401268:	2004      	moveq	r0, #4
  40126a:	2000      	movne	r0, #0
  40126c:	4770      	bx	lr

0040126e <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  40126e:	2001      	movs	r0, #1
  401270:	4770      	bx	lr
	...

00401274 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  401274:	b363      	cbz	r3, 4012d0 <hsmci_select_device+0x5c>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  401276:	482a      	ldr	r0, [pc, #168]	; (401320 <hsmci_select_device+0xac>)
  401278:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40127e:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  401280:	4b28      	ldr	r3, [pc, #160]	; (401324 <hsmci_select_device+0xb0>)
  401282:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
  401286:	d333      	bcc.n	4012f0 <hsmci_select_device+0x7c>
{
  401288:	b410      	push	{r4}
		div = (mck / speed) - 2;
  40128a:	4827      	ldr	r0, [pc, #156]	; (401328 <hsmci_select_device+0xb4>)
  40128c:	fbb0 f3f1 	udiv	r3, r0, r1
		if (mck % speed) {
  401290:	fb01 0113 	mls	r1, r1, r3, r0
  401294:	bb11      	cbnz	r1, 4012dc <hsmci_select_device+0x68>
		div = (mck / speed) - 2;
  401296:	3b02      	subs	r3, #2
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  401298:	4921      	ldr	r1, [pc, #132]	; (401320 <hsmci_select_device+0xac>)
  40129a:	6848      	ldr	r0, [r1, #4]
  40129c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  4012a0:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4012a2:	684c      	ldr	r4, [r1, #4]
  4012a4:	f3c3 0047 	ubfx	r0, r3, #1, #8
  4012a8:	4320      	orrs	r0, r4
  4012aa:	6048      	str	r0, [r1, #4]
	if (clkodd) {
  4012ac:	f013 0f01 	tst.w	r3, #1
  4012b0:	d016      	beq.n	4012e0 <hsmci_select_device+0x6c>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  4012b2:	684b      	ldr	r3, [r1, #4]
  4012b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4012b8:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4012ba:	2a04      	cmp	r2, #4
  4012bc:	d016      	beq.n	4012ec <hsmci_select_device+0x78>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4012be:	2a08      	cmp	r2, #8
  4012c0:	bf0c      	ite	eq
  4012c2:	22c0      	moveq	r2, #192	; 0xc0
  4012c4:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4012c6:	4b16      	ldr	r3, [pc, #88]	; (401320 <hsmci_select_device+0xac>)
  4012c8:	60da      	str	r2, [r3, #12]
}
  4012ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012ce:	4770      	bx	lr
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  4012d0:	4813      	ldr	r0, [pc, #76]	; (401320 <hsmci_select_device+0xac>)
  4012d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  4012d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4012d8:	6543      	str	r3, [r0, #84]	; 0x54
  4012da:	e7d1      	b.n	401280 <hsmci_select_device+0xc>
			div++;
  4012dc:	3b01      	subs	r3, #1
  4012de:	e7db      	b.n	401298 <hsmci_select_device+0x24>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  4012e0:	490f      	ldr	r1, [pc, #60]	; (401320 <hsmci_select_device+0xac>)
  4012e2:	684b      	ldr	r3, [r1, #4]
  4012e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4012e8:	604b      	str	r3, [r1, #4]
  4012ea:	e7e6      	b.n	4012ba <hsmci_select_device+0x46>
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4012ec:	2280      	movs	r2, #128	; 0x80
  4012ee:	e7ea      	b.n	4012c6 <hsmci_select_device+0x52>
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4012f0:	4b0b      	ldr	r3, [pc, #44]	; (401320 <hsmci_select_device+0xac>)
  4012f2:	6859      	ldr	r1, [r3, #4]
  4012f4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  4012f8:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4012fa:	6859      	ldr	r1, [r3, #4]
  4012fc:	6059      	str	r1, [r3, #4]
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  4012fe:	4908      	ldr	r1, [pc, #32]	; (401320 <hsmci_select_device+0xac>)
  401300:	684b      	ldr	r3, [r1, #4]
  401302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401306:	604b      	str	r3, [r1, #4]
	switch (bus_width) {
  401308:	2a04      	cmp	r2, #4
  40130a:	d006      	beq.n	40131a <hsmci_select_device+0xa6>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  40130c:	2a08      	cmp	r2, #8
  40130e:	bf0c      	ite	eq
  401310:	22c0      	moveq	r2, #192	; 0xc0
  401312:	2200      	movne	r2, #0
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  401314:	4b02      	ldr	r3, [pc, #8]	; (401320 <hsmci_select_device+0xac>)
  401316:	60da      	str	r2, [r3, #12]
  401318:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  40131a:	2280      	movs	r2, #128	; 0x80
  40131c:	e7fa      	b.n	401314 <hsmci_select_device+0xa0>
  40131e:	bf00      	nop
  401320:	40080000 	.word	0x40080000
  401324:	05b8d7ff 	.word	0x05b8d7ff
  401328:	05b8d800 	.word	0x05b8d800

0040132c <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  40132c:	4770      	bx	lr
	...

00401330 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401330:	4b07      	ldr	r3, [pc, #28]	; (401350 <hsmci_send_clock+0x20>)
  401332:	685a      	ldr	r2, [r3, #4]
  401334:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  401338:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  40133a:	2200      	movs	r2, #0
  40133c:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  40133e:	f44f 6210 	mov.w	r2, #2304	; 0x900
  401342:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  401344:	461a      	mov	r2, r3
  401346:	6c13      	ldr	r3, [r2, #64]	; 0x40
  401348:	f013 0f01 	tst.w	r3, #1
  40134c:	d0fb      	beq.n	401346 <hsmci_send_clock+0x16>
}
  40134e:	4770      	bx	lr
  401350:	40080000 	.word	0x40080000

00401354 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  401354:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  401356:	4b08      	ldr	r3, [pc, #32]	; (401378 <hsmci_send_cmd+0x24>)
  401358:	685a      	ldr	r2, [r3, #4]
  40135a:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  40135e:	605a      	str	r2, [r3, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  401360:	685a      	ldr	r2, [r3, #4]
  401362:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  401366:	605a      	str	r2, [r3, #4]
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  401368:	2400      	movs	r4, #0
  40136a:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  40136c:	460a      	mov	r2, r1
  40136e:	4601      	mov	r1, r0
  401370:	4620      	mov	r0, r4
  401372:	4b02      	ldr	r3, [pc, #8]	; (40137c <hsmci_send_cmd+0x28>)
  401374:	4798      	blx	r3
}
  401376:	bd10      	pop	{r4, pc}
  401378:	40080000 	.word	0x40080000
  40137c:	0040119d 	.word	0x0040119d

00401380 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  401380:	4b01      	ldr	r3, [pc, #4]	; (401388 <hsmci_get_response+0x8>)
  401382:	6a18      	ldr	r0, [r3, #32]
}
  401384:	4770      	bx	lr
  401386:	bf00      	nop
  401388:	40080000 	.word	0x40080000

0040138c <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  40138c:	b410      	push	{r4}
  40138e:	1d03      	adds	r3, r0, #4
  401390:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  401392:	4c09      	ldr	r4, [pc, #36]	; (4013b8 <hsmci_get_response_128+0x2c>)
  401394:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  401396:	0e11      	lsrs	r1, r2, #24
  401398:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  40139c:	0c11      	lsrs	r1, r2, #16
  40139e:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  4013a2:	0a11      	lsrs	r1, r2, #8
  4013a4:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  4013a8:	f803 2c01 	strb.w	r2, [r3, #-1]
  4013ac:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  4013ae:	4283      	cmp	r3, r0
  4013b0:	d1f0      	bne.n	401394 <hsmci_get_response_128+0x8>
		response++;
	}
}
  4013b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013b6:	4770      	bx	lr
  4013b8:	40080000 	.word	0x40080000

004013bc <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  4013bc:	b570      	push	{r4, r5, r6, lr}
  4013be:	f89d 4010 	ldrb.w	r4, [sp, #16]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  4013c2:	b374      	cbz	r4, 401422 <hsmci_adtc_start+0x66>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  4013c4:	4d29      	ldr	r5, [pc, #164]	; (40146c <hsmci_adtc_start+0xb0>)
  4013c6:	686c      	ldr	r4, [r5, #4]
  4013c8:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  4013cc:	606c      	str	r4, [r5, #4]
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  4013ce:	4d27      	ldr	r5, [pc, #156]	; (40146c <hsmci_adtc_start+0xb0>)
  4013d0:	686c      	ldr	r4, [r5, #4]
  4013d2:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  4013d6:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  4013d8:	f012 0f03 	tst.w	r2, #3
  4013dc:	d027      	beq.n	40142e <hsmci_adtc_start+0x72>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4013de:	686c      	ldr	r4, [r5, #4]
  4013e0:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4013e4:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  4013e6:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  4013ea:	2c00      	cmp	r4, #0
  4013ec:	bf14      	ite	ne
  4013ee:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  4013f2:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  4013f6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  4013fa:	d11e      	bne.n	40143a <hsmci_adtc_start+0x7e>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  4013fc:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  401400:	4e1a      	ldr	r6, [pc, #104]	; (40146c <hsmci_adtc_start+0xb0>)
  401402:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  401404:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  401408:	d12a      	bne.n	401460 <hsmci_adtc_start+0xa4>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  40140a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  40140e:	d12a      	bne.n	401466 <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  401410:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  401414:	d117      	bne.n	401446 <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  401416:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  40141a:	bf18      	it	ne
  40141c:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  401420:	e011      	b.n	401446 <hsmci_adtc_start+0x8a>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  401422:	4d12      	ldr	r5, [pc, #72]	; (40146c <hsmci_adtc_start+0xb0>)
  401424:	686c      	ldr	r4, [r5, #4]
  401426:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
  40142a:	606c      	str	r4, [r5, #4]
  40142c:	e7cf      	b.n	4013ce <hsmci_adtc_start+0x12>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40142e:	4d0f      	ldr	r5, [pc, #60]	; (40146c <hsmci_adtc_start+0xb0>)
  401430:	686c      	ldr	r4, [r5, #4]
  401432:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  401436:	606c      	str	r4, [r5, #4]
  401438:	e7d5      	b.n	4013e6 <hsmci_adtc_start+0x2a>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  40143a:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  40143e:	f3c2 0508 	ubfx	r5, r2, #0, #9
  401442:	4e0a      	ldr	r6, [pc, #40]	; (40146c <hsmci_adtc_start+0xb0>)
  401444:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  401446:	2600      	movs	r6, #0
  401448:	4d09      	ldr	r5, [pc, #36]	; (401470 <hsmci_adtc_start+0xb4>)
  40144a:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  40144c:	4d09      	ldr	r5, [pc, #36]	; (401474 <hsmci_adtc_start+0xb8>)
  40144e:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  401450:	4a09      	ldr	r2, [pc, #36]	; (401478 <hsmci_adtc_start+0xbc>)
  401452:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  401454:	460a      	mov	r2, r1
  401456:	4601      	mov	r1, r0
  401458:	4620      	mov	r0, r4
  40145a:	4b08      	ldr	r3, [pc, #32]	; (40147c <hsmci_adtc_start+0xc0>)
  40145c:	4798      	blx	r3
}
  40145e:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  401460:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  401464:	e7ef      	b.n	401446 <hsmci_adtc_start+0x8a>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  401466:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40146a:	e7ec      	b.n	401446 <hsmci_adtc_start+0x8a>
  40146c:	40080000 	.word	0x40080000
  401470:	20000a08 	.word	0x20000a08
  401474:	20000a02 	.word	0x20000a02
  401478:	20000a04 	.word	0x20000a04
  40147c:	0040119d 	.word	0x0040119d

00401480 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  401480:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  401482:	4915      	ldr	r1, [pc, #84]	; (4014d8 <hsmci_read_word+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401484:	4a15      	ldr	r2, [pc, #84]	; (4014dc <hsmci_read_word+0x5c>)
		sr = HSMCI->HSMCI_SR;
  401486:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401488:	4213      	tst	r3, r2
  40148a:	d11b      	bne.n	4014c4 <hsmci_read_word+0x44>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  40148c:	f013 0f02 	tst.w	r3, #2
  401490:	d0f9      	beq.n	401486 <hsmci_read_word+0x6>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  401492:	4b11      	ldr	r3, [pc, #68]	; (4014d8 <hsmci_read_word+0x58>)
  401494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401496:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  401498:	4a11      	ldr	r2, [pc, #68]	; (4014e0 <hsmci_read_word+0x60>)
  40149a:	6813      	ldr	r3, [r2, #0]
  40149c:	3304      	adds	r3, #4
  40149e:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4014a0:	4a10      	ldr	r2, [pc, #64]	; (4014e4 <hsmci_read_word+0x64>)
  4014a2:	8811      	ldrh	r1, [r2, #0]
  4014a4:	4a10      	ldr	r2, [pc, #64]	; (4014e8 <hsmci_read_word+0x68>)
  4014a6:	8812      	ldrh	r2, [r2, #0]
  4014a8:	fb02 f201 	mul.w	r2, r2, r1
  4014ac:	4293      	cmp	r3, r2
  4014ae:	d311      	bcc.n	4014d4 <hsmci_read_word+0x54>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4014b0:	4909      	ldr	r1, [pc, #36]	; (4014d8 <hsmci_read_word+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4014b2:	4a0a      	ldr	r2, [pc, #40]	; (4014dc <hsmci_read_word+0x5c>)
		sr = HSMCI->HSMCI_SR;
  4014b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4014b6:	4213      	tst	r3, r2
  4014b8:	d108      	bne.n	4014cc <hsmci_read_word+0x4c>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4014ba:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4014be:	d0f9      	beq.n	4014b4 <hsmci_read_word+0x34>
	return true;
  4014c0:	2001      	movs	r0, #1
  4014c2:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4014c4:	4b09      	ldr	r3, [pc, #36]	; (4014ec <hsmci_read_word+0x6c>)
  4014c6:	4798      	blx	r3
			return false;
  4014c8:	2000      	movs	r0, #0
  4014ca:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4014cc:	4b07      	ldr	r3, [pc, #28]	; (4014ec <hsmci_read_word+0x6c>)
  4014ce:	4798      	blx	r3
			return false;
  4014d0:	2000      	movs	r0, #0
  4014d2:	bd08      	pop	{r3, pc}
		return true;
  4014d4:	2001      	movs	r0, #1
}
  4014d6:	bd08      	pop	{r3, pc}
  4014d8:	40080000 	.word	0x40080000
  4014dc:	c0600000 	.word	0xc0600000
  4014e0:	20000a08 	.word	0x20000a08
  4014e4:	20000a02 	.word	0x20000a02
  4014e8:	20000a04 	.word	0x20000a04
  4014ec:	00401175 	.word	0x00401175

004014f0 <hsmci_start_read_blocks>:
#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  4014f0:	4b15      	ldr	r3, [pc, #84]	; (401548 <hsmci_start_read_blocks+0x58>)
  4014f2:	881b      	ldrh	r3, [r3, #0]
  4014f4:	fb03 f101 	mul.w	r1, r3, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  4014f8:	f010 0f03 	tst.w	r0, #3
  4014fc:	d102      	bne.n	401504 <hsmci_start_read_blocks+0x14>
  4014fe:	f013 0f03 	tst.w	r3, #3
  401502:	d01b      	beq.n	40153c <hsmci_start_read_blocks+0x4c>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  401504:	4a11      	ldr	r2, [pc, #68]	; (40154c <hsmci_start_read_blocks+0x5c>)
  401506:	6853      	ldr	r3, [r2, #4]
  401508:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40150c:	6053      	str	r3, [r2, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  40150e:	4b0f      	ldr	r3, [pc, #60]	; (40154c <hsmci_start_read_blocks+0x5c>)
  401510:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  401514:	685b      	ldr	r3, [r3, #4]
			nb_data : nb_data / 4;
  401516:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40151a:	bf0c      	ite	eq
  40151c:	088b      	lsreq	r3, r1, #2
  40151e:	460b      	movne	r3, r1
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  401520:	4a0a      	ldr	r2, [pc, #40]	; (40154c <hsmci_start_read_blocks+0x5c>)
  401522:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	HSMCI->HSMCI_RNCR = 0;
  401526:	2300      	movs	r3, #0
  401528:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  40152c:	2001      	movs	r0, #1
  40152e:	f8c2 0120 	str.w	r0, [r2, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  401532:	4a07      	ldr	r2, [pc, #28]	; (401550 <hsmci_start_read_blocks+0x60>)
  401534:	6813      	ldr	r3, [r2, #0]
  401536:	440b      	add	r3, r1
  401538:	6013      	str	r3, [r2, #0]
	return true;
}
  40153a:	4770      	bx	lr
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  40153c:	4a03      	ldr	r2, [pc, #12]	; (40154c <hsmci_start_read_blocks+0x5c>)
  40153e:	6853      	ldr	r3, [r2, #4]
  401540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  401544:	6053      	str	r3, [r2, #4]
  401546:	e7e2      	b.n	40150e <hsmci_start_read_blocks+0x1e>
  401548:	20000a02 	.word	0x20000a02
  40154c:	40080000 	.word	0x40080000
  401550:	20000a08 	.word	0x20000a08

00401554 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  401554:	b508      	push	{r3, lr}
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401556:	4915      	ldr	r1, [pc, #84]	; (4015ac <hsmci_wait_end_of_read_blocks+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401558:	4a15      	ldr	r2, [pc, #84]	; (4015b0 <hsmci_wait_end_of_read_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  40155a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40155c:	4213      	tst	r3, r2
  40155e:	d116      	bne.n	40158e <hsmci_wait_end_of_read_blocks+0x3a>
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			hsmci_reset();
			return false;
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  401560:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  401564:	d0f9      	beq.n	40155a <hsmci_wait_end_of_read_blocks+0x6>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  401566:	4b13      	ldr	r3, [pc, #76]	; (4015b4 <hsmci_wait_end_of_read_blocks+0x60>)
  401568:	881a      	ldrh	r2, [r3, #0]
  40156a:	4b13      	ldr	r3, [pc, #76]	; (4015b8 <hsmci_wait_end_of_read_blocks+0x64>)
  40156c:	881b      	ldrh	r3, [r3, #0]
  40156e:	fb03 f302 	mul.w	r3, r3, r2
  401572:	4a12      	ldr	r2, [pc, #72]	; (4015bc <hsmci_wait_end_of_read_blocks+0x68>)
  401574:	6812      	ldr	r2, [r2, #0]
  401576:	4293      	cmp	r3, r2
  401578:	d816      	bhi.n	4015a8 <hsmci_wait_end_of_read_blocks+0x54>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  40157a:	490c      	ldr	r1, [pc, #48]	; (4015ac <hsmci_wait_end_of_read_blocks+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40157c:	4a0c      	ldr	r2, [pc, #48]	; (4015b0 <hsmci_wait_end_of_read_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  40157e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401580:	4213      	tst	r3, r2
  401582:	d10d      	bne.n	4015a0 <hsmci_wait_end_of_read_blocks+0x4c>
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  401584:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  401588:	d0f9      	beq.n	40157e <hsmci_wait_end_of_read_blocks+0x2a>
	return true;
  40158a:	2001      	movs	r0, #1
  40158c:	bd08      	pop	{r3, pc}
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  40158e:	f240 2202 	movw	r2, #514	; 0x202
  401592:	4b06      	ldr	r3, [pc, #24]	; (4015ac <hsmci_wait_end_of_read_blocks+0x58>)
  401594:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			hsmci_reset();
  401598:	4b09      	ldr	r3, [pc, #36]	; (4015c0 <hsmci_wait_end_of_read_blocks+0x6c>)
  40159a:	4798      	blx	r3
			return false;
  40159c:	2000      	movs	r0, #0
  40159e:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4015a0:	4b07      	ldr	r3, [pc, #28]	; (4015c0 <hsmci_wait_end_of_read_blocks+0x6c>)
  4015a2:	4798      	blx	r3
			return false;
  4015a4:	2000      	movs	r0, #0
  4015a6:	bd08      	pop	{r3, pc}
		return true;
  4015a8:	2001      	movs	r0, #1
}
  4015aa:	bd08      	pop	{r3, pc}
  4015ac:	40080000 	.word	0x40080000
  4015b0:	c0600000 	.word	0xc0600000
  4015b4:	20000a02 	.word	0x20000a02
  4015b8:	20000a04 	.word	0x20000a04
  4015bc:	20000a08 	.word	0x20000a08
  4015c0:	00401175 	.word	0x00401175

004015c4 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  4015c4:	4b16      	ldr	r3, [pc, #88]	; (401620 <hsmci_start_write_blocks+0x5c>)
  4015c6:	881b      	ldrh	r3, [r3, #0]
  4015c8:	fb03 f101 	mul.w	r1, r3, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_TCR_TXCTR_Msk >> PERIPH_TCR_TXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
  4015cc:	f010 0f03 	tst.w	r0, #3
  4015d0:	d102      	bne.n	4015d8 <hsmci_start_write_blocks+0x14>
  4015d2:	f013 0f03 	tst.w	r3, #3
  4015d6:	d01d      	beq.n	401614 <hsmci_start_write_blocks+0x50>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4015d8:	4a12      	ldr	r2, [pc, #72]	; (401624 <hsmci_start_write_blocks+0x60>)
  4015da:	6853      	ldr	r3, [r2, #4]
  4015dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4015e0:	6053      	str	r3, [r2, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
  4015e2:	4b10      	ldr	r3, [pc, #64]	; (401624 <hsmci_start_write_blocks+0x60>)
  4015e4:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  4015e8:	685b      	ldr	r3, [r3, #4]
			nb_data : nb_data / 4;
  4015ea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4015ee:	bf0c      	ite	eq
  4015f0:	088b      	lsreq	r3, r1, #2
  4015f2:	460b      	movne	r3, r1
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  4015f4:	4a0b      	ldr	r2, [pc, #44]	; (401624 <hsmci_start_write_blocks+0x60>)
  4015f6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	HSMCI->HSMCI_TNCR = 0;
  4015fa:	2300      	movs	r3, #0
  4015fc:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  401600:	f44f 7380 	mov.w	r3, #256	; 0x100
  401604:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  401608:	4a07      	ldr	r2, [pc, #28]	; (401628 <hsmci_start_write_blocks+0x64>)
  40160a:	6813      	ldr	r3, [r2, #0]
  40160c:	440b      	add	r3, r1
  40160e:	6013      	str	r3, [r2, #0]
	return true;
}
  401610:	2001      	movs	r0, #1
  401612:	4770      	bx	lr
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  401614:	4a03      	ldr	r2, [pc, #12]	; (401624 <hsmci_start_write_blocks+0x60>)
  401616:	6853      	ldr	r3, [r2, #4]
  401618:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40161c:	6053      	str	r3, [r2, #4]
  40161e:	e7e0      	b.n	4015e2 <hsmci_start_write_blocks+0x1e>
  401620:	20000a02 	.word	0x20000a02
  401624:	40080000 	.word	0x40080000
  401628:	20000a08 	.word	0x20000a08

0040162c <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  40162c:	b508      	push	{r3, lr}
	uint32_t sr;

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  40162e:	4915      	ldr	r1, [pc, #84]	; (401684 <hsmci_wait_end_of_write_blocks+0x58>)
		if (sr &
  401630:	4a15      	ldr	r2, [pc, #84]	; (401688 <hsmci_wait_end_of_write_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  401632:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr &
  401634:	4213      	tst	r3, r2
  401636:	d116      	bne.n	401666 <hsmci_wait_end_of_write_blocks+0x3a>
					__func__, sr);
			hsmci_reset();
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			return false;
		}
	} while (!(sr & HSMCI_SR_TXBUFE));
  401638:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  40163c:	d0f9      	beq.n	401632 <hsmci_wait_end_of_write_blocks+0x6>


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  40163e:	4b13      	ldr	r3, [pc, #76]	; (40168c <hsmci_wait_end_of_write_blocks+0x60>)
  401640:	881a      	ldrh	r2, [r3, #0]
  401642:	4b13      	ldr	r3, [pc, #76]	; (401690 <hsmci_wait_end_of_write_blocks+0x64>)
  401644:	881b      	ldrh	r3, [r3, #0]
  401646:	fb03 f302 	mul.w	r3, r3, r2
  40164a:	4a12      	ldr	r2, [pc, #72]	; (401694 <hsmci_wait_end_of_write_blocks+0x68>)
  40164c:	6812      	ldr	r2, [r2, #0]
  40164e:	4293      	cmp	r3, r2
  401650:	d816      	bhi.n	401680 <hsmci_wait_end_of_write_blocks+0x54>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  401652:	490c      	ldr	r1, [pc, #48]	; (401684 <hsmci_wait_end_of_write_blocks+0x58>)
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401654:	4a0c      	ldr	r2, [pc, #48]	; (401688 <hsmci_wait_end_of_write_blocks+0x5c>)
		sr = HSMCI->HSMCI_SR;
  401656:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  401658:	4213      	tst	r3, r2
  40165a:	d10d      	bne.n	401678 <hsmci_wait_end_of_write_blocks+0x4c>
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
  40165c:	f013 0f20 	tst.w	r3, #32
  401660:	d0f9      	beq.n	401656 <hsmci_wait_end_of_write_blocks+0x2a>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
  401662:	2001      	movs	r0, #1
  401664:	bd08      	pop	{r3, pc}
			hsmci_reset();
  401666:	4b0c      	ldr	r3, [pc, #48]	; (401698 <hsmci_wait_end_of_write_blocks+0x6c>)
  401668:	4798      	blx	r3
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  40166a:	f240 2202 	movw	r2, #514	; 0x202
  40166e:	4b05      	ldr	r3, [pc, #20]	; (401684 <hsmci_wait_end_of_write_blocks+0x58>)
  401670:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			return false;
  401674:	2000      	movs	r0, #0
  401676:	bd08      	pop	{r3, pc}
			hsmci_reset();
  401678:	4b07      	ldr	r3, [pc, #28]	; (401698 <hsmci_wait_end_of_write_blocks+0x6c>)
  40167a:	4798      	blx	r3
			return false;
  40167c:	2000      	movs	r0, #0
  40167e:	bd08      	pop	{r3, pc}
		return true;
  401680:	2001      	movs	r0, #1
}
  401682:	bd08      	pop	{r3, pc}
  401684:	40080000 	.word	0x40080000
  401688:	c0600000 	.word	0xc0600000
  40168c:	20000a02 	.word	0x20000a02
  401690:	20000a04 	.word	0x20000a04
  401694:	20000a08 	.word	0x20000a08
  401698:	00401175 	.word	0x00401175

0040169c <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  40169c:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  40169e:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4016a0:	6884      	ldr	r4, [r0, #8]
  4016a2:	42a5      	cmp	r5, r4
  4016a4:	d003      	beq.n	4016ae <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4016a6:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4016a8:	6884      	ldr	r4, [r0, #8]
  4016aa:	42ac      	cmp	r4, r5
  4016ac:	d1fb      	bne.n	4016a6 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4016ae:	b161      	cbz	r1, 4016ca <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4016b0:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4016b4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4016b8:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4016bc:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4016c0:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4016c4:	bf18      	it	ne
  4016c6:	300c      	addne	r0, #12
  4016c8:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4016ca:	b142      	cbz	r2, 4016de <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4016cc:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4016d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4016d4:	f3c4 2003 	ubfx	r0, r4, #8, #4
  4016d8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  4016dc:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  4016de:	b143      	cbz	r3, 4016f2 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4016e0:	f3c4 1202 	ubfx	r2, r4, #4, #3
  4016e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4016e8:	f004 040f 	and.w	r4, r4, #15
  4016ec:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  4016f0:	601c      	str	r4, [r3, #0]
	}
}
  4016f2:	bc30      	pop	{r4, r5}
  4016f4:	4770      	bx	lr

004016f6 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  4016f6:	b4f0      	push	{r4, r5, r6, r7}
  4016f8:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  4016fa:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  4016fc:	68c4      	ldr	r4, [r0, #12]
  4016fe:	42a5      	cmp	r5, r4
  401700:	d003      	beq.n	40170a <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  401702:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  401704:	68c4      	ldr	r4, [r0, #12]
  401706:	42ac      	cmp	r4, r5
  401708:	d1fb      	bne.n	401702 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  40170a:	b199      	cbz	r1, 401734 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40170c:	f3c4 3003 	ubfx	r0, r4, #12, #4
  401710:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401714:	f3c4 2703 	ubfx	r7, r4, #8, #4
  401718:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40171c:	f3c4 1002 	ubfx	r0, r4, #4, #3
  401720:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  401724:	f004 000f 	and.w	r0, r4, #15
  401728:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40172c:	2564      	movs	r5, #100	; 0x64
  40172e:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  401732:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  401734:	b142      	cbz	r2, 401748 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401736:	f3c4 5000 	ubfx	r0, r4, #20, #1
  40173a:	0081      	lsls	r1, r0, #2
  40173c:	4408      	add	r0, r1
  40173e:	f3c4 4103 	ubfx	r1, r4, #16, #4
  401742:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  401746:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  401748:	b143      	cbz	r3, 40175c <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40174a:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40174e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401752:	f3c4 6103 	ubfx	r1, r4, #24, #4
  401756:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  40175a:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  40175c:	b116      	cbz	r6, 401764 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  40175e:	f3c4 5442 	ubfx	r4, r4, #21, #3
  401762:	6034      	str	r4, [r6, #0]
	}
}
  401764:	bcf0      	pop	{r4, r5, r6, r7}
  401766:	4770      	bx	lr

00401768 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401768:	e7fe      	b.n	401768 <Dummy_Handler>
	...

0040176c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40176c:	b500      	push	{lr}
  40176e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  401770:	4b25      	ldr	r3, [pc, #148]	; (401808 <Reset_Handler+0x9c>)
  401772:	4a26      	ldr	r2, [pc, #152]	; (40180c <Reset_Handler+0xa0>)
  401774:	429a      	cmp	r2, r3
  401776:	d010      	beq.n	40179a <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  401778:	4b25      	ldr	r3, [pc, #148]	; (401810 <Reset_Handler+0xa4>)
  40177a:	4a23      	ldr	r2, [pc, #140]	; (401808 <Reset_Handler+0x9c>)
  40177c:	429a      	cmp	r2, r3
  40177e:	d20c      	bcs.n	40179a <Reset_Handler+0x2e>
  401780:	3b01      	subs	r3, #1
  401782:	1a9b      	subs	r3, r3, r2
  401784:	f023 0303 	bic.w	r3, r3, #3
  401788:	3304      	adds	r3, #4
  40178a:	4413      	add	r3, r2
  40178c:	491f      	ldr	r1, [pc, #124]	; (40180c <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40178e:	f851 0b04 	ldr.w	r0, [r1], #4
  401792:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  401796:	429a      	cmp	r2, r3
  401798:	d1f9      	bne.n	40178e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40179a:	4b1e      	ldr	r3, [pc, #120]	; (401814 <Reset_Handler+0xa8>)
  40179c:	4a1e      	ldr	r2, [pc, #120]	; (401818 <Reset_Handler+0xac>)
  40179e:	429a      	cmp	r2, r3
  4017a0:	d20a      	bcs.n	4017b8 <Reset_Handler+0x4c>
  4017a2:	3b01      	subs	r3, #1
  4017a4:	1a9b      	subs	r3, r3, r2
  4017a6:	f023 0303 	bic.w	r3, r3, #3
  4017aa:	3304      	adds	r3, #4
  4017ac:	4413      	add	r3, r2
		*pDest++ = 0;
  4017ae:	2100      	movs	r1, #0
  4017b0:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4017b4:	4293      	cmp	r3, r2
  4017b6:	d1fb      	bne.n	4017b0 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4017b8:	4a18      	ldr	r2, [pc, #96]	; (40181c <Reset_Handler+0xb0>)
  4017ba:	4b19      	ldr	r3, [pc, #100]	; (401820 <Reset_Handler+0xb4>)
  4017bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4017c0:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4017c2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4017c6:	fab3 f383 	clz	r3, r3
  4017ca:	095b      	lsrs	r3, r3, #5
  4017cc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4017ce:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4017d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4017d4:	2200      	movs	r2, #0
  4017d6:	4b13      	ldr	r3, [pc, #76]	; (401824 <Reset_Handler+0xb8>)
  4017d8:	701a      	strb	r2, [r3, #0]
	return flags;
  4017da:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4017dc:	4a12      	ldr	r2, [pc, #72]	; (401828 <Reset_Handler+0xbc>)
  4017de:	6813      	ldr	r3, [r2, #0]
  4017e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4017e4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4017e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4017ea:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4017ee:	b129      	cbz	r1, 4017fc <Reset_Handler+0x90>
		cpu_irq_enable();
  4017f0:	2201      	movs	r2, #1
  4017f2:	4b0c      	ldr	r3, [pc, #48]	; (401824 <Reset_Handler+0xb8>)
  4017f4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4017f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4017fa:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4017fc:	4b0b      	ldr	r3, [pc, #44]	; (40182c <Reset_Handler+0xc0>)
  4017fe:	4798      	blx	r3

	/* Branch to main function */
	main();
  401800:	4b0b      	ldr	r3, [pc, #44]	; (401830 <Reset_Handler+0xc4>)
  401802:	4798      	blx	r3
  401804:	e7fe      	b.n	401804 <Reset_Handler+0x98>
  401806:	bf00      	nop
  401808:	20000000 	.word	0x20000000
  40180c:	00408b3c 	.word	0x00408b3c
  401810:	200009b8 	.word	0x200009b8
  401814:	20000aec 	.word	0x20000aec
  401818:	200009b8 	.word	0x200009b8
  40181c:	e000ed00 	.word	0xe000ed00
  401820:	00400000 	.word	0x00400000
  401824:	20000000 	.word	0x20000000
  401828:	e000ed88 	.word	0xe000ed88
  40182c:	004038c9 	.word	0x004038c9
  401830:	0040349d 	.word	0x0040349d

00401834 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  401834:	4b3b      	ldr	r3, [pc, #236]	; (401924 <SystemCoreClockUpdate+0xf0>)
  401836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401838:	f003 0303 	and.w	r3, r3, #3
  40183c:	2b01      	cmp	r3, #1
  40183e:	d01d      	beq.n	40187c <SystemCoreClockUpdate+0x48>
  401840:	b183      	cbz	r3, 401864 <SystemCoreClockUpdate+0x30>
  401842:	2b02      	cmp	r3, #2
  401844:	d036      	beq.n	4018b4 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  401846:	4b37      	ldr	r3, [pc, #220]	; (401924 <SystemCoreClockUpdate+0xf0>)
  401848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40184a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40184e:	2b70      	cmp	r3, #112	; 0x70
  401850:	d05f      	beq.n	401912 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  401852:	4b34      	ldr	r3, [pc, #208]	; (401924 <SystemCoreClockUpdate+0xf0>)
  401854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401856:	4934      	ldr	r1, [pc, #208]	; (401928 <SystemCoreClockUpdate+0xf4>)
  401858:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40185c:	680b      	ldr	r3, [r1, #0]
  40185e:	40d3      	lsrs	r3, r2
  401860:	600b      	str	r3, [r1, #0]
  401862:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401864:	4b31      	ldr	r3, [pc, #196]	; (40192c <SystemCoreClockUpdate+0xf8>)
  401866:	695b      	ldr	r3, [r3, #20]
  401868:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40186c:	bf14      	ite	ne
  40186e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401872:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401876:	4b2c      	ldr	r3, [pc, #176]	; (401928 <SystemCoreClockUpdate+0xf4>)
  401878:	601a      	str	r2, [r3, #0]
  40187a:	e7e4      	b.n	401846 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40187c:	4b29      	ldr	r3, [pc, #164]	; (401924 <SystemCoreClockUpdate+0xf0>)
  40187e:	6a1b      	ldr	r3, [r3, #32]
  401880:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401884:	d003      	beq.n	40188e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401886:	4a2a      	ldr	r2, [pc, #168]	; (401930 <SystemCoreClockUpdate+0xfc>)
  401888:	4b27      	ldr	r3, [pc, #156]	; (401928 <SystemCoreClockUpdate+0xf4>)
  40188a:	601a      	str	r2, [r3, #0]
  40188c:	e7db      	b.n	401846 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40188e:	4a29      	ldr	r2, [pc, #164]	; (401934 <SystemCoreClockUpdate+0x100>)
  401890:	4b25      	ldr	r3, [pc, #148]	; (401928 <SystemCoreClockUpdate+0xf4>)
  401892:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401894:	4b23      	ldr	r3, [pc, #140]	; (401924 <SystemCoreClockUpdate+0xf0>)
  401896:	6a1b      	ldr	r3, [r3, #32]
  401898:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40189c:	2b10      	cmp	r3, #16
  40189e:	d005      	beq.n	4018ac <SystemCoreClockUpdate+0x78>
  4018a0:	2b20      	cmp	r3, #32
  4018a2:	d1d0      	bne.n	401846 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  4018a4:	4a22      	ldr	r2, [pc, #136]	; (401930 <SystemCoreClockUpdate+0xfc>)
  4018a6:	4b20      	ldr	r3, [pc, #128]	; (401928 <SystemCoreClockUpdate+0xf4>)
  4018a8:	601a      	str	r2, [r3, #0]
				break;
  4018aa:	e7cc      	b.n	401846 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  4018ac:	4a22      	ldr	r2, [pc, #136]	; (401938 <SystemCoreClockUpdate+0x104>)
  4018ae:	4b1e      	ldr	r3, [pc, #120]	; (401928 <SystemCoreClockUpdate+0xf4>)
  4018b0:	601a      	str	r2, [r3, #0]
				break;
  4018b2:	e7c8      	b.n	401846 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4018b4:	4b1b      	ldr	r3, [pc, #108]	; (401924 <SystemCoreClockUpdate+0xf0>)
  4018b6:	6a1b      	ldr	r3, [r3, #32]
  4018b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4018bc:	d016      	beq.n	4018ec <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4018be:	4a1c      	ldr	r2, [pc, #112]	; (401930 <SystemCoreClockUpdate+0xfc>)
  4018c0:	4b19      	ldr	r3, [pc, #100]	; (401928 <SystemCoreClockUpdate+0xf4>)
  4018c2:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4018c4:	4b17      	ldr	r3, [pc, #92]	; (401924 <SystemCoreClockUpdate+0xf0>)
  4018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018c8:	f003 0303 	and.w	r3, r3, #3
  4018cc:	2b02      	cmp	r3, #2
  4018ce:	d1ba      	bne.n	401846 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018d0:	4a14      	ldr	r2, [pc, #80]	; (401924 <SystemCoreClockUpdate+0xf0>)
  4018d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4018d6:	4814      	ldr	r0, [pc, #80]	; (401928 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4018d8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4018dc:	6803      	ldr	r3, [r0, #0]
  4018de:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4018e2:	b2d2      	uxtb	r2, r2
  4018e4:	fbb3 f3f2 	udiv	r3, r3, r2
  4018e8:	6003      	str	r3, [r0, #0]
  4018ea:	e7ac      	b.n	401846 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4018ec:	4a11      	ldr	r2, [pc, #68]	; (401934 <SystemCoreClockUpdate+0x100>)
  4018ee:	4b0e      	ldr	r3, [pc, #56]	; (401928 <SystemCoreClockUpdate+0xf4>)
  4018f0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4018f2:	4b0c      	ldr	r3, [pc, #48]	; (401924 <SystemCoreClockUpdate+0xf0>)
  4018f4:	6a1b      	ldr	r3, [r3, #32]
  4018f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4018fa:	2b10      	cmp	r3, #16
  4018fc:	d005      	beq.n	40190a <SystemCoreClockUpdate+0xd6>
  4018fe:	2b20      	cmp	r3, #32
  401900:	d1e0      	bne.n	4018c4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  401902:	4a0b      	ldr	r2, [pc, #44]	; (401930 <SystemCoreClockUpdate+0xfc>)
  401904:	4b08      	ldr	r3, [pc, #32]	; (401928 <SystemCoreClockUpdate+0xf4>)
  401906:	601a      	str	r2, [r3, #0]
				break;
  401908:	e7dc      	b.n	4018c4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  40190a:	4a0b      	ldr	r2, [pc, #44]	; (401938 <SystemCoreClockUpdate+0x104>)
  40190c:	4b06      	ldr	r3, [pc, #24]	; (401928 <SystemCoreClockUpdate+0xf4>)
  40190e:	601a      	str	r2, [r3, #0]
				break;
  401910:	e7d8      	b.n	4018c4 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  401912:	4a05      	ldr	r2, [pc, #20]	; (401928 <SystemCoreClockUpdate+0xf4>)
  401914:	6813      	ldr	r3, [r2, #0]
  401916:	4909      	ldr	r1, [pc, #36]	; (40193c <SystemCoreClockUpdate+0x108>)
  401918:	fba1 1303 	umull	r1, r3, r1, r3
  40191c:	085b      	lsrs	r3, r3, #1
  40191e:	6013      	str	r3, [r2, #0]
  401920:	4770      	bx	lr
  401922:	bf00      	nop
  401924:	400e0400 	.word	0x400e0400
  401928:	20000004 	.word	0x20000004
  40192c:	400e1810 	.word	0x400e1810
  401930:	00b71b00 	.word	0x00b71b00
  401934:	003d0900 	.word	0x003d0900
  401938:	007a1200 	.word	0x007a1200
  40193c:	aaaaaaab 	.word	0xaaaaaaab

00401940 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401940:	4b12      	ldr	r3, [pc, #72]	; (40198c <system_init_flash+0x4c>)
  401942:	4298      	cmp	r0, r3
  401944:	d911      	bls.n	40196a <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  401946:	4b12      	ldr	r3, [pc, #72]	; (401990 <system_init_flash+0x50>)
  401948:	4298      	cmp	r0, r3
  40194a:	d913      	bls.n	401974 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  40194c:	4b11      	ldr	r3, [pc, #68]	; (401994 <system_init_flash+0x54>)
  40194e:	4298      	cmp	r0, r3
  401950:	d914      	bls.n	40197c <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401952:	4b11      	ldr	r3, [pc, #68]	; (401998 <system_init_flash+0x58>)
  401954:	4298      	cmp	r0, r3
  401956:	d915      	bls.n	401984 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401958:	4b10      	ldr	r3, [pc, #64]	; (40199c <system_init_flash+0x5c>)
  40195a:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40195c:	bf94      	ite	ls
  40195e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401962:	4a0f      	ldrhi	r2, [pc, #60]	; (4019a0 <system_init_flash+0x60>)
  401964:	4b0f      	ldr	r3, [pc, #60]	; (4019a4 <system_init_flash+0x64>)
  401966:	601a      	str	r2, [r3, #0]
  401968:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40196a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40196e:	4b0d      	ldr	r3, [pc, #52]	; (4019a4 <system_init_flash+0x64>)
  401970:	601a      	str	r2, [r3, #0]
  401972:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401974:	4a0c      	ldr	r2, [pc, #48]	; (4019a8 <system_init_flash+0x68>)
  401976:	4b0b      	ldr	r3, [pc, #44]	; (4019a4 <system_init_flash+0x64>)
  401978:	601a      	str	r2, [r3, #0]
  40197a:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40197c:	4a0b      	ldr	r2, [pc, #44]	; (4019ac <system_init_flash+0x6c>)
  40197e:	4b09      	ldr	r3, [pc, #36]	; (4019a4 <system_init_flash+0x64>)
  401980:	601a      	str	r2, [r3, #0]
  401982:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401984:	4a0a      	ldr	r2, [pc, #40]	; (4019b0 <system_init_flash+0x70>)
  401986:	4b07      	ldr	r3, [pc, #28]	; (4019a4 <system_init_flash+0x64>)
  401988:	601a      	str	r2, [r3, #0]
  40198a:	4770      	bx	lr
  40198c:	01312cff 	.word	0x01312cff
  401990:	026259ff 	.word	0x026259ff
  401994:	039386ff 	.word	0x039386ff
  401998:	04c4b3ff 	.word	0x04c4b3ff
  40199c:	05f5e0ff 	.word	0x05f5e0ff
  4019a0:	04000500 	.word	0x04000500
  4019a4:	400e0a00 	.word	0x400e0a00
  4019a8:	04000100 	.word	0x04000100
  4019ac:	04000200 	.word	0x04000200
  4019b0:	04000300 	.word	0x04000300

004019b4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4019b4:	4b0a      	ldr	r3, [pc, #40]	; (4019e0 <_sbrk+0x2c>)
  4019b6:	681b      	ldr	r3, [r3, #0]
  4019b8:	b153      	cbz	r3, 4019d0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4019ba:	4b09      	ldr	r3, [pc, #36]	; (4019e0 <_sbrk+0x2c>)
  4019bc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4019be:	181a      	adds	r2, r3, r0
  4019c0:	4908      	ldr	r1, [pc, #32]	; (4019e4 <_sbrk+0x30>)
  4019c2:	4291      	cmp	r1, r2
  4019c4:	db08      	blt.n	4019d8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4019c6:	4610      	mov	r0, r2
  4019c8:	4a05      	ldr	r2, [pc, #20]	; (4019e0 <_sbrk+0x2c>)
  4019ca:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4019cc:	4618      	mov	r0, r3
  4019ce:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4019d0:	4a05      	ldr	r2, [pc, #20]	; (4019e8 <_sbrk+0x34>)
  4019d2:	4b03      	ldr	r3, [pc, #12]	; (4019e0 <_sbrk+0x2c>)
  4019d4:	601a      	str	r2, [r3, #0]
  4019d6:	e7f0      	b.n	4019ba <_sbrk+0x6>
		return (caddr_t) -1;	
  4019d8:	f04f 30ff 	mov.w	r0, #4294967295
}
  4019dc:	4770      	bx	lr
  4019de:	bf00      	nop
  4019e0:	20000a0c 	.word	0x20000a0c
  4019e4:	2001fffc 	.word	0x2001fffc
  4019e8:	20003af0 	.word	0x20003af0

004019ec <disk_initialize>:
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  4019ec:	2802      	cmp	r0, #2
  4019ee:	d815      	bhi.n	401a1c <disk_initialize+0x30>
{
  4019f0:	b510      	push	{r4, lr}
  4019f2:	4604      	mov	r4, r0
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  4019f4:	4b0b      	ldr	r3, [pc, #44]	; (401a24 <disk_initialize+0x38>)
  4019f6:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  4019f8:	2803      	cmp	r0, #3
  4019fa:	d106      	bne.n	401a0a <disk_initialize+0x1e>
		mem_status = mem_test_unit_ready(drv);
  4019fc:	4620      	mov	r0, r4
  4019fe:	4b09      	ldr	r3, [pc, #36]	; (401a24 <disk_initialize+0x38>)
  401a00:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  401a02:	2803      	cmp	r0, #3
  401a04:	d101      	bne.n	401a0a <disk_initialize+0x1e>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  401a06:	2001      	movs	r0, #1
  401a08:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  401a0a:	b948      	cbnz	r0, 401a20 <disk_initialize+0x34>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  401a0c:	4620      	mov	r0, r4
  401a0e:	4b06      	ldr	r3, [pc, #24]	; (401a28 <disk_initialize+0x3c>)
  401a10:	4798      	blx	r3
  401a12:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  401a14:	bf14      	ite	ne
  401a16:	2004      	movne	r0, #4
  401a18:	2000      	moveq	r0, #0
  401a1a:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  401a1c:	2001      	movs	r0, #1
  401a1e:	4770      	bx	lr
		return STA_NOINIT;
  401a20:	2001      	movs	r0, #1
}
  401a22:	bd10      	pop	{r4, pc}
  401a24:	00400f8d 	.word	0x00400f8d
  401a28:	00400fd1 	.word	0x00400fd1

00401a2c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  401a2c:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  401a2e:	4b05      	ldr	r3, [pc, #20]	; (401a44 <disk_status+0x18>)
  401a30:	4798      	blx	r3
  401a32:	b120      	cbz	r0, 401a3e <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  401a34:	2802      	cmp	r0, #2
  401a36:	bf0c      	ite	eq
  401a38:	2003      	moveq	r0, #3
  401a3a:	2001      	movne	r0, #1
  401a3c:	bd08      	pop	{r3, pc}
		return 0;
  401a3e:	2000      	movs	r0, #0
	}
}
  401a40:	bd08      	pop	{r3, pc}
  401a42:	bf00      	nop
  401a44:	00400f8d 	.word	0x00400f8d

00401a48 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  401a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401a4c:	b083      	sub	sp, #12
  401a4e:	4680      	mov	r8, r0
  401a50:	460d      	mov	r5, r1
  401a52:	4614      	mov	r4, r2
  401a54:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  401a56:	4b15      	ldr	r3, [pc, #84]	; (401aac <disk_read+0x64>)
  401a58:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  401a5a:	b918      	cbnz	r0, 401a64 <disk_read+0x1c>
		return RES_ERROR;
  401a5c:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  401a5e:	b003      	add	sp, #12
  401a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a64:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  401a66:	a901      	add	r1, sp, #4
  401a68:	4640      	mov	r0, r8
  401a6a:	4b11      	ldr	r3, [pc, #68]	; (401ab0 <disk_read+0x68>)
  401a6c:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  401a6e:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  401a70:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  401a74:	9b01      	ldr	r3, [sp, #4]
  401a76:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  401a7a:	429a      	cmp	r2, r3
  401a7c:	d901      	bls.n	401a82 <disk_read+0x3a>
		return RES_PARERR;
  401a7e:	2004      	movs	r0, #4
  401a80:	e7ed      	b.n	401a5e <disk_read+0x16>
	for (i = 0; i < count; i++) {
  401a82:	46ba      	mov	sl, r7
  401a84:	b177      	cbz	r7, 401aa4 <disk_read+0x5c>
  401a86:	0276      	lsls	r6, r6, #9
  401a88:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  401a8a:	f8df b028 	ldr.w	fp, [pc, #40]	; 401ab4 <disk_read+0x6c>
  401a8e:	462a      	mov	r2, r5
  401a90:	4621      	mov	r1, r4
  401a92:	4640      	mov	r0, r8
  401a94:	47d8      	blx	fp
  401a96:	b938      	cbnz	r0, 401aa8 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  401a98:	3701      	adds	r7, #1
  401a9a:	444c      	add	r4, r9
  401a9c:	4435      	add	r5, r6
  401a9e:	4557      	cmp	r7, sl
  401aa0:	d1f5      	bne.n	401a8e <disk_read+0x46>
  401aa2:	e7dc      	b.n	401a5e <disk_read+0x16>
	return RES_OK;
  401aa4:	2000      	movs	r0, #0
  401aa6:	e7da      	b.n	401a5e <disk_read+0x16>
			return RES_ERROR;
  401aa8:	2001      	movs	r0, #1
  401aaa:	e7d8      	b.n	401a5e <disk_read+0x16>
  401aac:	00400fc5 	.word	0x00400fc5
  401ab0:	00400fa5 	.word	0x00400fa5
  401ab4:	00400fed 	.word	0x00400fed

00401ab8 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  401ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401abc:	b083      	sub	sp, #12
  401abe:	4680      	mov	r8, r0
  401ac0:	460d      	mov	r5, r1
  401ac2:	4614      	mov	r4, r2
  401ac4:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  401ac6:	4b15      	ldr	r3, [pc, #84]	; (401b1c <disk_write+0x64>)
  401ac8:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  401aca:	b918      	cbnz	r0, 401ad4 <disk_write+0x1c>
		return RES_ERROR;
  401acc:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  401ace:	b003      	add	sp, #12
  401ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ad4:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  401ad6:	a901      	add	r1, sp, #4
  401ad8:	4640      	mov	r0, r8
  401ada:	4b11      	ldr	r3, [pc, #68]	; (401b20 <disk_write+0x68>)
  401adc:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  401ade:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  401ae0:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  401ae4:	9b01      	ldr	r3, [sp, #4]
  401ae6:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  401aea:	429a      	cmp	r2, r3
  401aec:	d901      	bls.n	401af2 <disk_write+0x3a>
		return RES_PARERR;
  401aee:	2004      	movs	r0, #4
  401af0:	e7ed      	b.n	401ace <disk_write+0x16>
	for (i = 0; i < count; i++) {
  401af2:	46ba      	mov	sl, r7
  401af4:	b177      	cbz	r7, 401b14 <disk_write+0x5c>
  401af6:	0276      	lsls	r6, r6, #9
  401af8:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  401afa:	f8df b028 	ldr.w	fp, [pc, #40]	; 401b24 <disk_write+0x6c>
  401afe:	462a      	mov	r2, r5
  401b00:	4621      	mov	r1, r4
  401b02:	4640      	mov	r0, r8
  401b04:	47d8      	blx	fp
  401b06:	b938      	cbnz	r0, 401b18 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  401b08:	3701      	adds	r7, #1
  401b0a:	444c      	add	r4, r9
  401b0c:	4435      	add	r5, r6
  401b0e:	4557      	cmp	r7, sl
  401b10:	d1f5      	bne.n	401afe <disk_write+0x46>
  401b12:	e7dc      	b.n	401ace <disk_write+0x16>
	return RES_OK;
  401b14:	2000      	movs	r0, #0
  401b16:	e7da      	b.n	401ace <disk_write+0x16>
			return RES_ERROR;
  401b18:	2001      	movs	r0, #1
  401b1a:	e7d8      	b.n	401ace <disk_write+0x16>
  401b1c:	00400fc5 	.word	0x00400fc5
  401b20:	00400fa5 	.word	0x00400fa5
  401b24:	00401011 	.word	0x00401011

00401b28 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  401b28:	b510      	push	{r4, lr}
  401b2a:	b082      	sub	sp, #8
  401b2c:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  401b2e:	2903      	cmp	r1, #3
  401b30:	d827      	bhi.n	401b82 <disk_ioctl+0x5a>
  401b32:	e8df f001 	tbb	[pc, r1]
  401b36:	071f      	.short	0x071f
  401b38:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  401b3a:	2301      	movs	r3, #1
  401b3c:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  401b3e:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  401b40:	b002      	add	sp, #8
  401b42:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  401b44:	a901      	add	r1, sp, #4
  401b46:	4b11      	ldr	r3, [pc, #68]	; (401b8c <disk_ioctl+0x64>)
  401b48:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  401b4a:	9b01      	ldr	r3, [sp, #4]
  401b4c:	3301      	adds	r3, #1
  401b4e:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  401b50:	2000      	movs	r0, #0
	break;
  401b52:	e7f5      	b.n	401b40 <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  401b54:	4b0e      	ldr	r3, [pc, #56]	; (401b90 <disk_ioctl+0x68>)
  401b56:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  401b58:	2808      	cmp	r0, #8
  401b5a:	d814      	bhi.n	401b86 <disk_ioctl+0x5e>
  401b5c:	f44f 738b 	mov.w	r3, #278	; 0x116
  401b60:	fa23 f000 	lsr.w	r0, r3, r0
  401b64:	f010 0f01 	tst.w	r0, #1
  401b68:	d101      	bne.n	401b6e <disk_ioctl+0x46>
			return RES_ERROR;
  401b6a:	2001      	movs	r0, #1
  401b6c:	e7e8      	b.n	401b40 <disk_ioctl+0x18>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  401b6e:	2000      	movs	r0, #0
  401b70:	7020      	strb	r0, [r4, #0]
	break;
  401b72:	e7e5      	b.n	401b40 <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  401b74:	4b07      	ldr	r3, [pc, #28]	; (401b94 <disk_ioctl+0x6c>)
  401b76:	4798      	blx	r3
  401b78:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  401b7a:	bf0c      	ite	eq
  401b7c:	2000      	moveq	r0, #0
  401b7e:	2003      	movne	r0, #3
  401b80:	e7de      	b.n	401b40 <disk_ioctl+0x18>
		res = RES_PARERR;
  401b82:	2004      	movs	r0, #4
  401b84:	e7dc      	b.n	401b40 <disk_ioctl+0x18>
			return RES_ERROR;
  401b86:	2001      	movs	r0, #1
  401b88:	e7da      	b.n	401b40 <disk_ioctl+0x18>
  401b8a:	bf00      	nop
  401b8c:	00400fa5 	.word	0x00400fa5
  401b90:	00400fc5 	.word	0x00400fc5
  401b94:	00400f8d 	.word	0x00400f8d

00401b98 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  401b98:	b530      	push	{r4, r5, lr}
  401b9a:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  401b9c:	4c11      	ldr	r4, [pc, #68]	; (401be4 <get_fattime+0x4c>)
  401b9e:	ab07      	add	r3, sp, #28
  401ba0:	aa08      	add	r2, sp, #32
  401ba2:	a909      	add	r1, sp, #36	; 0x24
  401ba4:	4620      	mov	r0, r4
  401ba6:	4d10      	ldr	r5, [pc, #64]	; (401be8 <get_fattime+0x50>)
  401ba8:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  401baa:	ab03      	add	r3, sp, #12
  401bac:	9300      	str	r3, [sp, #0]
  401bae:	ab04      	add	r3, sp, #16
  401bb0:	aa05      	add	r2, sp, #20
  401bb2:	a906      	add	r1, sp, #24
  401bb4:	4620      	mov	r0, r4
  401bb6:	4c0d      	ldr	r4, [pc, #52]	; (401bec <get_fattime+0x54>)
  401bb8:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  401bba:	9b04      	ldr	r3, [sp, #16]
  401bbc:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  401bbe:	9805      	ldr	r0, [sp, #20]
  401bc0:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  401bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
  401bc6:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  401bca:	9808      	ldr	r0, [sp, #32]
  401bcc:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  401bd0:	9807      	ldr	r0, [sp, #28]
  401bd2:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  401bd6:	9806      	ldr	r0, [sp, #24]
  401bd8:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| ((ul_second >> 1) << 0);

	return ul_time;
}
  401bdc:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  401be0:	b00b      	add	sp, #44	; 0x2c
  401be2:	bd30      	pop	{r4, r5, pc}
  401be4:	400e1860 	.word	0x400e1860
  401be8:	0040169d 	.word	0x0040169d
  401bec:	004016f7 	.word	0x004016f7

00401bf0 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  401bf0:	b13a      	cbz	r2, 401c02 <mem_cpy+0x12>
  401bf2:	3801      	subs	r0, #1
  401bf4:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  401bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
  401bfa:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  401bfe:	4291      	cmp	r1, r2
  401c00:	d1f9      	bne.n	401bf6 <mem_cpy+0x6>
  401c02:	4770      	bx	lr

00401c04 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  401c04:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  401c06:	6983      	ldr	r3, [r0, #24]
  401c08:	3b02      	subs	r3, #2
  401c0a:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
  401c0c:	bf3d      	ittte	cc
  401c0e:	7883      	ldrbcc	r3, [r0, #2]
  401c10:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
  401c12:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  401c16:	2000      	movcs	r0, #0
}
  401c18:	4770      	bx	lr

00401c1a <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  401c1a:	4602      	mov	r2, r0
  401c1c:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  401c20:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  401c22:	01c3      	lsls	r3, r0, #7
  401c24:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  401c28:	f812 0b01 	ldrb.w	r0, [r2], #1
  401c2c:	fa50 f383 	uxtab	r3, r0, r3
  401c30:	b2d8      	uxtb	r0, r3
  401c32:	428a      	cmp	r2, r1
  401c34:	d1f5      	bne.n	401c22 <sum_sfn+0x8>
	return sum;
}
  401c36:	4770      	bx	lr

00401c38 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  401c38:	b198      	cbz	r0, 401c62 <validate+0x2a>
{
  401c3a:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  401c3c:	7802      	ldrb	r2, [r0, #0]
  401c3e:	b90a      	cbnz	r2, 401c44 <validate+0xc>
		return FR_INVALID_OBJECT;
  401c40:	2009      	movs	r0, #9
  401c42:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  401c44:	88c2      	ldrh	r2, [r0, #6]
  401c46:	428a      	cmp	r2, r1
  401c48:	d001      	beq.n	401c4e <validate+0x16>
		return FR_INVALID_OBJECT;
  401c4a:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  401c4c:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  401c4e:	7840      	ldrb	r0, [r0, #1]
  401c50:	4b05      	ldr	r3, [pc, #20]	; (401c68 <validate+0x30>)
  401c52:	4798      	blx	r3
  401c54:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  401c58:	2800      	cmp	r0, #0
  401c5a:	bf14      	ite	ne
  401c5c:	2003      	movne	r0, #3
  401c5e:	2000      	moveq	r0, #0
  401c60:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  401c62:	2009      	movs	r0, #9
  401c64:	4770      	bx	lr
  401c66:	bf00      	nop
  401c68:	00401a2d 	.word	0x00401a2d

00401c6c <check_fs>:
{
  401c6c:	b538      	push	{r3, r4, r5, lr}
  401c6e:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  401c70:	2301      	movs	r3, #1
  401c72:	460a      	mov	r2, r1
  401c74:	f100 0130 	add.w	r1, r0, #48	; 0x30
  401c78:	7840      	ldrb	r0, [r0, #1]
  401c7a:	4d1d      	ldr	r5, [pc, #116]	; (401cf0 <check_fs+0x84>)
  401c7c:	47a8      	blx	r5
  401c7e:	b108      	cbz	r0, 401c84 <check_fs+0x18>
		return 3;
  401c80:	2003      	movs	r0, #3
  401c82:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  401c84:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  401c88:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  401c8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401c90:	b21b      	sxth	r3, r3
  401c92:	4a18      	ldr	r2, [pc, #96]	; (401cf4 <check_fs+0x88>)
  401c94:	4293      	cmp	r3, r2
  401c96:	d001      	beq.n	401c9c <check_fs+0x30>
		return 2;
  401c98:	2002      	movs	r0, #2
  401c9a:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  401c9c:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  401ca0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  401ca4:	041b      	lsls	r3, r3, #16
  401ca6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401caa:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
  401cae:	4313      	orrs	r3, r2
  401cb0:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  401cb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401cb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401cbc:	4a0e      	ldr	r2, [pc, #56]	; (401cf8 <check_fs+0x8c>)
  401cbe:	4293      	cmp	r3, r2
  401cc0:	d013      	beq.n	401cea <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  401cc2:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
  401cc6:	f894 0084 	ldrb.w	r0, [r4, #132]	; 0x84
  401cca:	0400      	lsls	r0, r0, #16
  401ccc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  401cd0:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  401cd4:	4318      	orrs	r0, r3
  401cd6:	f894 3083 	ldrb.w	r3, [r4, #131]	; 0x83
  401cda:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  401cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  401ce2:	1a80      	subs	r0, r0, r2
  401ce4:	bf18      	it	ne
  401ce6:	2001      	movne	r0, #1
  401ce8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  401cea:	2000      	movs	r0, #0
}
  401cec:	bd38      	pop	{r3, r4, r5, pc}
  401cee:	bf00      	nop
  401cf0:	00401a49 	.word	0x00401a49
  401cf4:	ffffaa55 	.word	0xffffaa55
  401cf8:	00544146 	.word	0x00544146

00401cfc <chk_mounted>:
{
  401cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  401cfe:	6804      	ldr	r4, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  401d00:	7823      	ldrb	r3, [r4, #0]
  401d02:	3b30      	subs	r3, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  401d04:	2b09      	cmp	r3, #9
  401d06:	d802      	bhi.n	401d0e <chk_mounted+0x12>
  401d08:	7865      	ldrb	r5, [r4, #1]
  401d0a:	2d3a      	cmp	r5, #58	; 0x3a
  401d0c:	d018      	beq.n	401d40 <chk_mounted+0x44>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  401d0e:	4bb0      	ldr	r3, [pc, #704]	; (401fd0 <chk_mounted+0x2d4>)
  401d10:	681c      	ldr	r4, [r3, #0]
  401d12:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401d14:	2c00      	cmp	r4, #0
  401d16:	f000 8142 	beq.w	401f9e <chk_mounted+0x2a2>
  401d1a:	4615      	mov	r5, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  401d1c:	7823      	ldrb	r3, [r4, #0]
  401d1e:	b1ab      	cbz	r3, 401d4c <chk_mounted+0x50>
		stat = disk_status(fs->drv);
  401d20:	7860      	ldrb	r0, [r4, #1]
  401d22:	4bac      	ldr	r3, [pc, #688]	; (401fd4 <chk_mounted+0x2d8>)
  401d24:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  401d26:	f010 0f01 	tst.w	r0, #1
  401d2a:	d10f      	bne.n	401d4c <chk_mounted+0x50>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  401d2c:	2d00      	cmp	r5, #0
  401d2e:	f000 8138 	beq.w	401fa2 <chk_mounted+0x2a6>
  401d32:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  401d36:	2800      	cmp	r0, #0
  401d38:	bf0c      	ite	eq
  401d3a:	2000      	moveq	r0, #0
  401d3c:	200a      	movne	r0, #10
  401d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p += 2; *path = p;				/* Return pointer to the path name */
  401d40:	3402      	adds	r4, #2
  401d42:	6004      	str	r4, [r0, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  401d44:	2b00      	cmp	r3, #0
  401d46:	d0e2      	beq.n	401d0e <chk_mounted+0x12>
		return FR_INVALID_DRIVE;
  401d48:	200b      	movs	r0, #11
  401d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  401d4c:	2000      	movs	r0, #0
  401d4e:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  401d50:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  401d52:	4ba1      	ldr	r3, [pc, #644]	; (401fd8 <chk_mounted+0x2dc>)
  401d54:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  401d56:	f010 0f01 	tst.w	r0, #1
  401d5a:	d001      	beq.n	401d60 <chk_mounted+0x64>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  401d5c:	2003      	movs	r0, #3
  401d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  401d60:	b125      	cbz	r5, 401d6c <chk_mounted+0x70>
  401d62:	f010 0f04 	tst.w	r0, #4
  401d66:	d001      	beq.n	401d6c <chk_mounted+0x70>
		return FR_WRITE_PROTECTED;
  401d68:	200a      	movs	r0, #10
  401d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401d6c:	2100      	movs	r1, #0
  401d6e:	4620      	mov	r0, r4
  401d70:	4b9a      	ldr	r3, [pc, #616]	; (401fdc <chk_mounted+0x2e0>)
  401d72:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  401d74:	2801      	cmp	r0, #1
  401d76:	d006      	beq.n	401d86 <chk_mounted+0x8a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  401d78:	2500      	movs	r5, #0
	if (fmt == 3) return FR_DISK_ERR;
  401d7a:	2803      	cmp	r0, #3
  401d7c:	f000 8113 	beq.w	401fa6 <chk_mounted+0x2aa>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401d80:	b1c8      	cbz	r0, 401db6 <chk_mounted+0xba>
  401d82:	200d      	movs	r0, #13
  401d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  401d86:	f894 31f2 	ldrb.w	r3, [r4, #498]	; 0x1f2
  401d8a:	b90b      	cbnz	r3, 401d90 <chk_mounted+0x94>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  401d8c:	200d      	movs	r0, #13
  401d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  401d90:	f894 31f9 	ldrb.w	r3, [r4, #505]	; 0x1f9
  401d94:	f894 51f8 	ldrb.w	r5, [r4, #504]	; 0x1f8
  401d98:	042d      	lsls	r5, r5, #16
  401d9a:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
  401d9e:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
  401da2:	431d      	orrs	r5, r3
  401da4:	f894 31f7 	ldrb.w	r3, [r4, #503]	; 0x1f7
  401da8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  401dac:	4629      	mov	r1, r5
  401dae:	4620      	mov	r0, r4
  401db0:	4b8a      	ldr	r3, [pc, #552]	; (401fdc <chk_mounted+0x2e0>)
  401db2:	4798      	blx	r3
  401db4:	e7e1      	b.n	401d7a <chk_mounted+0x7e>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  401db6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  401dba:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
  401dbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401dc2:	b21b      	sxth	r3, r3
  401dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401dc8:	d001      	beq.n	401dce <chk_mounted+0xd2>
		return FR_NO_FILESYSTEM;
  401dca:	200d      	movs	r0, #13
  401dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  401dce:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
  401dd2:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  401dd6:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  401dda:	d10d      	bne.n	401df8 <chk_mounted+0xfc>
  401ddc:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
  401de0:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
  401de4:	0412      	lsls	r2, r2, #16
  401de6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  401dea:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
  401dee:	431a      	orrs	r2, r3
  401df0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
  401df4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  401df8:	61e2      	str	r2, [r4, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  401dfa:	f894 e040 	ldrb.w	lr, [r4, #64]	; 0x40
  401dfe:	f884 e003 	strb.w	lr, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  401e02:	f10e 33ff 	add.w	r3, lr, #4294967295
  401e06:	b2db      	uxtb	r3, r3
  401e08:	2b01      	cmp	r3, #1
  401e0a:	d901      	bls.n	401e10 <chk_mounted+0x114>
  401e0c:	200d      	movs	r0, #13
  401e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  401e10:	f894 603d 	ldrb.w	r6, [r4, #61]	; 0x3d
  401e14:	70a6      	strb	r6, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  401e16:	2e00      	cmp	r6, #0
  401e18:	f000 80c7 	beq.w	401faa <chk_mounted+0x2ae>
  401e1c:	1e73      	subs	r3, r6, #1
  401e1e:	4233      	tst	r3, r6
  401e20:	d001      	beq.n	401e26 <chk_mounted+0x12a>
  401e22:	200d      	movs	r0, #13
  401e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  401e26:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  401e2a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  401e2e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  401e32:	8121      	strh	r1, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  401e34:	f011 0f0f 	tst.w	r1, #15
  401e38:	f040 80b9 	bne.w	401fae <chk_mounted+0x2b2>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  401e3c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
  401e40:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  401e44:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  401e48:	d10d      	bne.n	401e66 <chk_mounted+0x16a>
  401e4a:	f894 0053 	ldrb.w	r0, [r4, #83]	; 0x53
  401e4e:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
  401e52:	041b      	lsls	r3, r3, #16
  401e54:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  401e58:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
  401e5c:	4303      	orrs	r3, r0
  401e5e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  401e62:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  401e66:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
  401e6a:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  401e6e:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  401e72:	f000 809e 	beq.w	401fb2 <chk_mounted+0x2b6>
	fasize *= b;										/* Number of sectors for FAT area */
  401e76:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  401e7a:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  401e7e:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  401e80:	4283      	cmp	r3, r0
  401e82:	f0c0 8098 	bcc.w	401fb6 <chk_mounted+0x2ba>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  401e86:	1a1b      	subs	r3, r3, r0
  401e88:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  401e8c:	2b00      	cmp	r3, #0
  401e8e:	f000 8094 	beq.w	401fba <chk_mounted+0x2be>
	fmt = FS_FAT12;
  401e92:	f640 76f5 	movw	r6, #4085	; 0xff5
  401e96:	42b3      	cmp	r3, r6
  401e98:	bf8c      	ite	hi
  401e9a:	2602      	movhi	r6, #2
  401e9c:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  401e9e:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  401ea2:	4563      	cmp	r3, ip
  401ea4:	f200 80a4 	bhi.w	401ff0 <chk_mounted+0x2f4>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  401ea8:	3302      	adds	r3, #2
  401eaa:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  401eac:	4428      	add	r0, r5
  401eae:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  401eb0:	443d      	add	r5, r7
  401eb2:	6225      	str	r5, [r4, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  401eb4:	2900      	cmp	r1, #0
  401eb6:	f000 8088 	beq.w	401fca <chk_mounted+0x2ce>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  401eba:	4475      	add	r5, lr
  401ebc:	6265      	str	r5, [r4, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  401ebe:	2e02      	cmp	r6, #2
  401ec0:	bf0f      	iteee	eq
  401ec2:	005b      	lsleq	r3, r3, #1
  401ec4:	eb03 0143 	addne.w	r1, r3, r3, lsl #1
  401ec8:	f003 0301 	andne.w	r3, r3, #1
  401ecc:	eb03 0351 	addne.w	r3, r3, r1, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  401ed0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  401ed4:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  401ed8:	d375      	bcc.n	401fc6 <chk_mounted+0x2ca>
	fs->free_clust = 0xFFFFFFFF;
  401eda:	f04f 33ff 	mov.w	r3, #4294967295
  401ede:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  401ee0:	2300      	movs	r3, #0
  401ee2:	60e3      	str	r3, [r4, #12]
  401ee4:	e04a      	b.n	401f7c <chk_mounted+0x280>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  401ee6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  401eea:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  401eee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  401ef2:	b21b      	sxth	r3, r3
  401ef4:	4a3a      	ldr	r2, [pc, #232]	; (401fe0 <chk_mounted+0x2e4>)
  401ef6:	4293      	cmp	r3, r2
  401ef8:	d14b      	bne.n	401f92 <chk_mounted+0x296>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  401efa:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  401efe:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  401f02:	041b      	lsls	r3, r3, #16
  401f04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401f08:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  401f0c:	4313      	orrs	r3, r2
  401f0e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
  401f12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  401f16:	4a33      	ldr	r2, [pc, #204]	; (401fe4 <chk_mounted+0x2e8>)
  401f18:	4293      	cmp	r3, r2
  401f1a:	d13c      	bne.n	401f96 <chk_mounted+0x29a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  401f1c:	f894 2217 	ldrb.w	r2, [r4, #535]	; 0x217
  401f20:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
  401f24:	041b      	lsls	r3, r3, #16
  401f26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401f2a:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
  401f2e:	4313      	orrs	r3, r2
  401f30:	f894 2215 	ldrb.w	r2, [r4, #533]	; 0x215
  401f34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  401f38:	4a2b      	ldr	r2, [pc, #172]	; (401fe8 <chk_mounted+0x2ec>)
  401f3a:	4293      	cmp	r3, r2
  401f3c:	d12d      	bne.n	401f9a <chk_mounted+0x29e>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  401f3e:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
  401f42:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
  401f46:	041b      	lsls	r3, r3, #16
  401f48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401f4c:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
  401f50:	4313      	orrs	r3, r2
  401f52:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
  401f56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401f5a:	60e3      	str	r3, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  401f5c:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
  401f60:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
  401f64:	041b      	lsls	r3, r3, #16
  401f66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  401f6a:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
  401f6e:	4313      	orrs	r3, r2
  401f70:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
  401f74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  401f78:	6123      	str	r3, [r4, #16]
  401f7a:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  401f7c:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  401f7e:	4a1b      	ldr	r2, [pc, #108]	; (401fec <chk_mounted+0x2f0>)
  401f80:	8813      	ldrh	r3, [r2, #0]
  401f82:	3301      	adds	r3, #1
  401f84:	b29b      	uxth	r3, r3
  401f86:	8013      	strh	r3, [r2, #0]
  401f88:	80e3      	strh	r3, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  401f8a:	2000      	movs	r0, #0
  401f8c:	62e0      	str	r0, [r4, #44]	; 0x2c
	fs->wflag = 0;
  401f8e:	7120      	strb	r0, [r4, #4]
	return FR_OK;
  401f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401f92:	2603      	movs	r6, #3
  401f94:	e7f2      	b.n	401f7c <chk_mounted+0x280>
  401f96:	2603      	movs	r6, #3
  401f98:	e7f0      	b.n	401f7c <chk_mounted+0x280>
  401f9a:	2603      	movs	r6, #3
  401f9c:	e7ee      	b.n	401f7c <chk_mounted+0x280>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  401f9e:	200c      	movs	r0, #12
  401fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  401fa2:	2000      	movs	r0, #0
  401fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  401fa6:	2001      	movs	r0, #1
  401fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  401faa:	200d      	movs	r0, #13
  401fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  401fae:	200d      	movs	r0, #13
  401fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  401fb2:	200d      	movs	r0, #13
  401fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  401fb6:	200d      	movs	r0, #13
  401fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  401fba:	200d      	movs	r0, #13
  401fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  401fbe:	200d      	movs	r0, #13
  401fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  401fc2:	200d      	movs	r0, #13
  401fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  401fc6:	200d      	movs	r0, #13
  401fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  401fca:	200d      	movs	r0, #13
  401fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401fce:	bf00      	nop
  401fd0:	20000a10 	.word	0x20000a10
  401fd4:	00401a2d 	.word	0x00401a2d
  401fd8:	004019ed 	.word	0x004019ed
  401fdc:	00401c6d 	.word	0x00401c6d
  401fe0:	ffffaa55 	.word	0xffffaa55
  401fe4:	41615252 	.word	0x41615252
  401fe8:	61417272 	.word	0x61417272
  401fec:	20000a14 	.word	0x20000a14
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  401ff0:	3302      	adds	r3, #2
  401ff2:	61a3      	str	r3, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  401ff4:	4428      	add	r0, r5
  401ff6:	62a0      	str	r0, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  401ff8:	442f      	add	r7, r5
  401ffa:	6227      	str	r7, [r4, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  401ffc:	2900      	cmp	r1, #0
  401ffe:	d1e0      	bne.n	401fc2 <chk_mounted+0x2c6>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  402000:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
  402004:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
  402008:	0409      	lsls	r1, r1, #16
  40200a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  40200e:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  402012:	4301      	orrs	r1, r0
  402014:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  402018:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  40201c:	6261      	str	r1, [r4, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  40201e:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  402020:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  402024:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  402028:	d3c9      	bcc.n	401fbe <chk_mounted+0x2c2>
	fs->free_clust = 0xFFFFFFFF;
  40202a:	f04f 33ff 	mov.w	r3, #4294967295
  40202e:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
  402030:	2300      	movs	r3, #0
  402032:	60e3      	str	r3, [r4, #12]
	 	fs->fsi_flag = 0;
  402034:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  402036:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
  40203a:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
  40203e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  402042:	442a      	add	r2, r5
  402044:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  402046:	2301      	movs	r3, #1
  402048:	f104 0130 	add.w	r1, r4, #48	; 0x30
  40204c:	7860      	ldrb	r0, [r4, #1]
  40204e:	4d03      	ldr	r5, [pc, #12]	; (40205c <chk_mounted+0x360>)
  402050:	47a8      	blx	r5
  402052:	2800      	cmp	r0, #0
  402054:	f43f af47 	beq.w	401ee6 <chk_mounted+0x1ea>
  402058:	2603      	movs	r6, #3
  40205a:	e78f      	b.n	401f7c <chk_mounted+0x280>
  40205c:	00401a49 	.word	0x00401a49

00402060 <move_window>:
{
  402060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  402064:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  402066:	428f      	cmp	r7, r1
  402068:	d035      	beq.n	4020d6 <move_window+0x76>
  40206a:	460e      	mov	r6, r1
  40206c:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  40206e:	7903      	ldrb	r3, [r0, #4]
  402070:	b91b      	cbnz	r3, 40207a <move_window+0x1a>
		if (sector) {
  402072:	bb2e      	cbnz	r6, 4020c0 <move_window+0x60>
	return FR_OK;
  402074:	2000      	movs	r0, #0
  402076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  40207a:	f100 0830 	add.w	r8, r0, #48	; 0x30
  40207e:	2301      	movs	r3, #1
  402080:	463a      	mov	r2, r7
  402082:	4641      	mov	r1, r8
  402084:	7840      	ldrb	r0, [r0, #1]
  402086:	4d18      	ldr	r5, [pc, #96]	; (4020e8 <move_window+0x88>)
  402088:	47a8      	blx	r5
  40208a:	bb38      	cbnz	r0, 4020dc <move_window+0x7c>
			fs->wflag = 0;
  40208c:	2300      	movs	r3, #0
  40208e:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  402090:	6a23      	ldr	r3, [r4, #32]
  402092:	69e2      	ldr	r2, [r4, #28]
  402094:	4413      	add	r3, r2
  402096:	429f      	cmp	r7, r3
  402098:	d2eb      	bcs.n	402072 <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  40209a:	78e5      	ldrb	r5, [r4, #3]
  40209c:	2d01      	cmp	r5, #1
  40209e:	d9e8      	bls.n	402072 <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  4020a0:	f04f 0a01 	mov.w	sl, #1
  4020a4:	f8df 9040 	ldr.w	r9, [pc, #64]	; 4020e8 <move_window+0x88>
					wsect += fs->fsize;
  4020a8:	69e3      	ldr	r3, [r4, #28]
  4020aa:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  4020ac:	4653      	mov	r3, sl
  4020ae:	463a      	mov	r2, r7
  4020b0:	4641      	mov	r1, r8
  4020b2:	7860      	ldrb	r0, [r4, #1]
  4020b4:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  4020b6:	3d01      	subs	r5, #1
  4020b8:	b2ed      	uxtb	r5, r5
  4020ba:	2d01      	cmp	r5, #1
  4020bc:	d1f4      	bne.n	4020a8 <move_window+0x48>
  4020be:	e7d8      	b.n	402072 <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  4020c0:	2301      	movs	r3, #1
  4020c2:	4632      	mov	r2, r6
  4020c4:	f104 0130 	add.w	r1, r4, #48	; 0x30
  4020c8:	7860      	ldrb	r0, [r4, #1]
  4020ca:	4d08      	ldr	r5, [pc, #32]	; (4020ec <move_window+0x8c>)
  4020cc:	47a8      	blx	r5
  4020ce:	b940      	cbnz	r0, 4020e2 <move_window+0x82>
			fs->winsect = sector;
  4020d0:	62e6      	str	r6, [r4, #44]	; 0x2c
  4020d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  4020d6:	2000      	movs	r0, #0
  4020d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  4020dc:	2001      	movs	r0, #1
  4020de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  4020e2:	2001      	movs	r0, #1
}
  4020e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020e8:	00401ab9 	.word	0x00401ab9
  4020ec:	00401a49 	.word	0x00401a49

004020f0 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4020f0:	2901      	cmp	r1, #1
  4020f2:	d96a      	bls.n	4021ca <get_fat+0xda>
{
  4020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  4020f6:	6983      	ldr	r3, [r0, #24]
  4020f8:	4299      	cmp	r1, r3
  4020fa:	d268      	bcs.n	4021ce <get_fat+0xde>
  4020fc:	460c      	mov	r4, r1
  4020fe:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  402100:	7803      	ldrb	r3, [r0, #0]
  402102:	2b02      	cmp	r3, #2
  402104:	d02f      	beq.n	402166 <get_fat+0x76>
  402106:	2b03      	cmp	r3, #3
  402108:	d041      	beq.n	40218e <get_fat+0x9e>
  40210a:	2b01      	cmp	r3, #1
  40210c:	d002      	beq.n	402114 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40210e:	f04f 30ff 	mov.w	r0, #4294967295
  402112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  402114:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402118:	6a01      	ldr	r1, [r0, #32]
  40211a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  40211e:	4b2d      	ldr	r3, [pc, #180]	; (4021d4 <get_fat+0xe4>)
  402120:	4798      	blx	r3
  402122:	b110      	cbz	r0, 40212a <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402124:	f04f 30ff 	mov.w	r0, #4294967295
  402128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  40212a:	f3c7 0308 	ubfx	r3, r7, #0, #9
  40212e:	4433      	add	r3, r6
  402130:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
  402134:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  402136:	6a31      	ldr	r1, [r6, #32]
  402138:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  40213c:	4630      	mov	r0, r6
  40213e:	4b25      	ldr	r3, [pc, #148]	; (4021d4 <get_fat+0xe4>)
  402140:	4798      	blx	r3
  402142:	b110      	cbz	r0, 40214a <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402144:	f04f 30ff 	mov.w	r0, #4294967295
  402148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  40214a:	f3c7 0708 	ubfx	r7, r7, #0, #9
  40214e:	19f0      	adds	r0, r6, r7
  402150:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402154:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  402158:	f014 0f01 	tst.w	r4, #1
  40215c:	bf14      	ite	ne
  40215e:	0900      	lsrne	r0, r0, #4
  402160:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  402164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  402166:	6a01      	ldr	r1, [r0, #32]
  402168:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  40216c:	4b19      	ldr	r3, [pc, #100]	; (4021d4 <get_fat+0xe4>)
  40216e:	4798      	blx	r3
  402170:	b110      	cbz	r0, 402178 <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  402172:	f04f 30ff 	mov.w	r0, #4294967295
  402176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  402178:	0060      	lsls	r0, r4, #1
  40217a:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  40217e:	4430      	add	r0, r6
  402180:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  402184:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  402188:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  40218e:	6a01      	ldr	r1, [r0, #32]
  402190:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  402194:	4b0f      	ldr	r3, [pc, #60]	; (4021d4 <get_fat+0xe4>)
  402196:	4798      	blx	r3
  402198:	b110      	cbz	r0, 4021a0 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  40219a:	f04f 30ff 	mov.w	r0, #4294967295
}
  40219e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  4021a0:	00a0      	lsls	r0, r4, #2
  4021a2:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  4021a6:	f100 0230 	add.w	r2, r0, #48	; 0x30
  4021aa:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  4021ac:	78d1      	ldrb	r1, [r2, #3]
  4021ae:	7893      	ldrb	r3, [r2, #2]
  4021b0:	041b      	lsls	r3, r3, #16
  4021b2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  4021b6:	4430      	add	r0, r6
  4021b8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
  4021bc:	4318      	orrs	r0, r3
  4021be:	7853      	ldrb	r3, [r2, #1]
  4021c0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4021c4:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  4021c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4021ca:	2001      	movs	r0, #1
  4021cc:	4770      	bx	lr
  4021ce:	2001      	movs	r0, #1
  4021d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4021d2:	bf00      	nop
  4021d4:	00402061 	.word	0x00402061

004021d8 <dir_sdi>:
{
  4021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4021da:	4605      	mov	r5, r0
  4021dc:	460c      	mov	r4, r1
	dj->index = idx;
  4021de:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  4021e0:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  4021e2:	2901      	cmp	r1, #1
  4021e4:	d03d      	beq.n	402262 <dir_sdi+0x8a>
  4021e6:	6803      	ldr	r3, [r0, #0]
  4021e8:	699a      	ldr	r2, [r3, #24]
  4021ea:	4291      	cmp	r1, r2
  4021ec:	d301      	bcc.n	4021f2 <dir_sdi+0x1a>
		return FR_INT_ERR;
  4021ee:	2002      	movs	r0, #2
  4021f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  4021f2:	b961      	cbnz	r1, 40220e <dir_sdi+0x36>
  4021f4:	781a      	ldrb	r2, [r3, #0]
  4021f6:	2a03      	cmp	r2, #3
  4021f8:	d006      	beq.n	402208 <dir_sdi+0x30>
		dj->clust = clst;
  4021fa:	2200      	movs	r2, #0
  4021fc:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  4021fe:	891a      	ldrh	r2, [r3, #8]
  402200:	42a2      	cmp	r2, r4
  402202:	d821      	bhi.n	402248 <dir_sdi+0x70>
			return FR_INT_ERR;
  402204:	2002      	movs	r0, #2
  402206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  402208:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  40220a:	2900      	cmp	r1, #0
  40220c:	d0f5      	beq.n	4021fa <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  40220e:	789e      	ldrb	r6, [r3, #2]
  402210:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  402212:	42b4      	cmp	r4, r6
  402214:	d310      	bcc.n	402238 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  402216:	4f17      	ldr	r7, [pc, #92]	; (402274 <dir_sdi+0x9c>)
  402218:	6828      	ldr	r0, [r5, #0]
  40221a:	47b8      	blx	r7
  40221c:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  40221e:	f1b0 3fff 	cmp.w	r0, #4294967295
  402222:	d020      	beq.n	402266 <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  402224:	2801      	cmp	r0, #1
  402226:	d920      	bls.n	40226a <dir_sdi+0x92>
  402228:	682b      	ldr	r3, [r5, #0]
  40222a:	699b      	ldr	r3, [r3, #24]
  40222c:	4298      	cmp	r0, r3
  40222e:	d21e      	bcs.n	40226e <dir_sdi+0x96>
			idx -= ic;
  402230:	1ba4      	subs	r4, r4, r6
  402232:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  402234:	42a6      	cmp	r6, r4
  402236:	d9ef      	bls.n	402218 <dir_sdi+0x40>
		dj->clust = clst;
  402238:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40223a:	6828      	ldr	r0, [r5, #0]
  40223c:	4b0e      	ldr	r3, [pc, #56]	; (402278 <dir_sdi+0xa0>)
  40223e:	4798      	blx	r3
  402240:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  402244:	6128      	str	r0, [r5, #16]
  402246:	e003      	b.n	402250 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  402248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40224a:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  40224e:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  402250:	682b      	ldr	r3, [r5, #0]
  402252:	3330      	adds	r3, #48	; 0x30
  402254:	f004 040f 	and.w	r4, r4, #15
  402258:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  40225c:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  40225e:	2000      	movs	r0, #0
  402260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  402262:	2002      	movs	r0, #2
  402264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  402266:	2001      	movs	r0, #1
  402268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  40226a:	2002      	movs	r0, #2
  40226c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40226e:	2002      	movs	r0, #2
}
  402270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402272:	bf00      	nop
  402274:	004020f1 	.word	0x004020f1
  402278:	00401c05 	.word	0x00401c05

0040227c <put_fat>:
{
  40227c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402280:	2901      	cmp	r1, #1
  402282:	f240 808f 	bls.w	4023a4 <put_fat+0x128>
  402286:	6983      	ldr	r3, [r0, #24]
  402288:	4299      	cmp	r1, r3
  40228a:	d301      	bcc.n	402290 <put_fat+0x14>
		res = FR_INT_ERR;
  40228c:	2702      	movs	r7, #2
	return res;
  40228e:	e08a      	b.n	4023a6 <put_fat+0x12a>
  402290:	4615      	mov	r5, r2
  402292:	460c      	mov	r4, r1
  402294:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  402296:	7803      	ldrb	r3, [r0, #0]
  402298:	2b02      	cmp	r3, #2
  40229a:	d04e      	beq.n	40233a <put_fat+0xbe>
  40229c:	2b03      	cmp	r3, #3
  40229e:	d05f      	beq.n	402360 <put_fat+0xe4>
  4022a0:	2b01      	cmp	r3, #1
  4022a2:	d003      	beq.n	4022ac <put_fat+0x30>
			res = FR_INT_ERR;
  4022a4:	2702      	movs	r7, #2
		fs->wflag = 1;
  4022a6:	2301      	movs	r3, #1
  4022a8:	7133      	strb	r3, [r6, #4]
  4022aa:	e07c      	b.n	4023a6 <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  4022ac:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4022b0:	6a01      	ldr	r1, [r0, #32]
  4022b2:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4022b6:	4b3d      	ldr	r3, [pc, #244]	; (4023ac <put_fat+0x130>)
  4022b8:	4798      	blx	r3
			if (res != FR_OK) break;
  4022ba:	4607      	mov	r7, r0
  4022bc:	2800      	cmp	r0, #0
  4022be:	d1f2      	bne.n	4022a6 <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  4022c0:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  4022c4:	f014 0f01 	tst.w	r4, #1
  4022c8:	d01c      	beq.n	402304 <put_fat+0x88>
  4022ca:	4433      	add	r3, r6
  4022cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
  4022d0:	f002 020f 	and.w	r2, r2, #15
  4022d4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  4022d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
  4022dc:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  4022e0:	2301      	movs	r3, #1
  4022e2:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  4022e4:	6a31      	ldr	r1, [r6, #32]
  4022e6:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  4022ea:	4630      	mov	r0, r6
  4022ec:	4b2f      	ldr	r3, [pc, #188]	; (4023ac <put_fat+0x130>)
  4022ee:	4798      	blx	r3
			if (res != FR_OK) break;
  4022f0:	2800      	cmp	r0, #0
  4022f2:	d153      	bne.n	40239c <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  4022f4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4022f8:	f3c5 1207 	ubfx	r2, r5, #4, #8
  4022fc:	44b0      	add	r8, r6
  4022fe:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
			break;
  402302:	e7d0      	b.n	4022a6 <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  402304:	4433      	add	r3, r6
  402306:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
			bc++;
  40230a:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  40230e:	2301      	movs	r3, #1
  402310:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  402312:	6a31      	ldr	r1, [r6, #32]
  402314:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  402318:	4630      	mov	r0, r6
  40231a:	4b24      	ldr	r3, [pc, #144]	; (4023ac <put_fat+0x130>)
  40231c:	4798      	blx	r3
			if (res != FR_OK) break;
  40231e:	2800      	cmp	r0, #0
  402320:	d13e      	bne.n	4023a0 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  402322:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  402326:	eb06 0308 	add.w	r3, r6, r8
  40232a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
  40232e:	f023 030f 	bic.w	r3, r3, #15
  402332:	f3c5 2203 	ubfx	r2, r5, #8, #4
  402336:	431a      	orrs	r2, r3
  402338:	e7e0      	b.n	4022fc <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  40233a:	6a01      	ldr	r1, [r0, #32]
  40233c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  402340:	4b1a      	ldr	r3, [pc, #104]	; (4023ac <put_fat+0x130>)
  402342:	4798      	blx	r3
			if (res != FR_OK) break;
  402344:	4607      	mov	r7, r0
  402346:	2800      	cmp	r0, #0
  402348:	d1ad      	bne.n	4022a6 <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  40234a:	0063      	lsls	r3, r4, #1
  40234c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  402350:	4433      	add	r3, r6
  402352:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
  402356:	f3c5 2207 	ubfx	r2, r5, #8, #8
  40235a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			break;
  40235e:	e7a2      	b.n	4022a6 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  402360:	6a01      	ldr	r1, [r0, #32]
  402362:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  402366:	4b11      	ldr	r3, [pc, #68]	; (4023ac <put_fat+0x130>)
  402368:	4798      	blx	r3
			if (res != FR_OK) break;
  40236a:	4607      	mov	r7, r0
  40236c:	2800      	cmp	r0, #0
  40236e:	d19a      	bne.n	4022a6 <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  402370:	00a1      	lsls	r1, r4, #2
  402372:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  402376:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40237a:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  40237c:	78da      	ldrb	r2, [r3, #3]
  40237e:	0612      	lsls	r2, r2, #24
  402380:	4431      	add	r1, r6
  402382:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  402386:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  402388:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  40238c:	f3c2 2107 	ubfx	r1, r2, #8, #8
  402390:	7059      	strb	r1, [r3, #1]
  402392:	0c11      	lsrs	r1, r2, #16
  402394:	7099      	strb	r1, [r3, #2]
  402396:	0e12      	lsrs	r2, r2, #24
  402398:	70da      	strb	r2, [r3, #3]
			break;
  40239a:	e784      	b.n	4022a6 <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  40239c:	4607      	mov	r7, r0
  40239e:	e782      	b.n	4022a6 <put_fat+0x2a>
  4023a0:	4607      	mov	r7, r0
  4023a2:	e780      	b.n	4022a6 <put_fat+0x2a>
		res = FR_INT_ERR;
  4023a4:	2702      	movs	r7, #2
}
  4023a6:	4638      	mov	r0, r7
  4023a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4023ac:	00402061 	.word	0x00402061

004023b0 <create_chain>:
{
  4023b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4023b4:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  4023b6:	4688      	mov	r8, r1
  4023b8:	b941      	cbnz	r1, 4023cc <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  4023ba:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4023bc:	b186      	cbz	r6, 4023e0 <create_chain+0x30>
  4023be:	6983      	ldr	r3, [r0, #24]
  4023c0:	429e      	cmp	r6, r3
  4023c2:	bf28      	it	cs
  4023c4:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  4023c6:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4023c8:	4f27      	ldr	r7, [pc, #156]	; (402468 <create_chain+0xb8>)
  4023ca:	e017      	b.n	4023fc <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  4023cc:	4b26      	ldr	r3, [pc, #152]	; (402468 <create_chain+0xb8>)
  4023ce:	4798      	blx	r3
  4023d0:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  4023d2:	2801      	cmp	r0, #1
  4023d4:	d93e      	bls.n	402454 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  4023d6:	69aa      	ldr	r2, [r5, #24]
  4023d8:	4290      	cmp	r0, r2
  4023da:	d340      	bcc.n	40245e <create_chain+0xae>
		scl = clst;
  4023dc:	4646      	mov	r6, r8
  4023de:	e7f2      	b.n	4023c6 <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  4023e0:	2601      	movs	r6, #1
  4023e2:	e7f0      	b.n	4023c6 <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4023e4:	4621      	mov	r1, r4
  4023e6:	4628      	mov	r0, r5
  4023e8:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  4023ea:	4603      	mov	r3, r0
  4023ec:	b170      	cbz	r0, 40240c <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  4023ee:	f1b0 3fff 	cmp.w	r0, #4294967295
  4023f2:	d034      	beq.n	40245e <create_chain+0xae>
  4023f4:	2801      	cmp	r0, #1
  4023f6:	d032      	beq.n	40245e <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  4023f8:	42b4      	cmp	r4, r6
  4023fa:	d02f      	beq.n	40245c <create_chain+0xac>
		ncl++;							/* Next cluster */
  4023fc:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  4023fe:	69ab      	ldr	r3, [r5, #24]
  402400:	429c      	cmp	r4, r3
  402402:	d3ef      	bcc.n	4023e4 <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  402404:	2e01      	cmp	r6, #1
  402406:	d927      	bls.n	402458 <create_chain+0xa8>
			ncl = 2;
  402408:	2402      	movs	r4, #2
  40240a:	e7eb      	b.n	4023e4 <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  40240c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  402410:	4621      	mov	r1, r4
  402412:	4628      	mov	r0, r5
  402414:	4b15      	ldr	r3, [pc, #84]	; (40246c <create_chain+0xbc>)
  402416:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  402418:	4603      	mov	r3, r0
  40241a:	b9a8      	cbnz	r0, 402448 <create_chain+0x98>
  40241c:	f1b8 0f00 	cmp.w	r8, #0
  402420:	d10a      	bne.n	402438 <create_chain+0x88>
		fs->last_clust = ncl;			/* Update FSINFO */
  402422:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  402424:	692b      	ldr	r3, [r5, #16]
  402426:	f1b3 3fff 	cmp.w	r3, #4294967295
  40242a:	d01b      	beq.n	402464 <create_chain+0xb4>
			fs->free_clust--;
  40242c:	3b01      	subs	r3, #1
  40242e:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  402430:	2301      	movs	r3, #1
  402432:	716b      	strb	r3, [r5, #5]
  402434:	4623      	mov	r3, r4
  402436:	e012      	b.n	40245e <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  402438:	4622      	mov	r2, r4
  40243a:	4641      	mov	r1, r8
  40243c:	4628      	mov	r0, r5
  40243e:	4b0b      	ldr	r3, [pc, #44]	; (40246c <create_chain+0xbc>)
  402440:	4798      	blx	r3
	if (res == FR_OK) {
  402442:	4603      	mov	r3, r0
  402444:	2800      	cmp	r0, #0
  402446:	d0ec      	beq.n	402422 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  402448:	2b01      	cmp	r3, #1
  40244a:	bf0c      	ite	eq
  40244c:	f04f 33ff 	moveq.w	r3, #4294967295
  402450:	2301      	movne	r3, #1
  402452:	e004      	b.n	40245e <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  402454:	2301      	movs	r3, #1
  402456:	e002      	b.n	40245e <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  402458:	2300      	movs	r3, #0
  40245a:	e000      	b.n	40245e <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  40245c:	2300      	movs	r3, #0
}
  40245e:	4618      	mov	r0, r3
  402460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402464:	4623      	mov	r3, r4
  402466:	e7fa      	b.n	40245e <create_chain+0xae>
  402468:	004020f1 	.word	0x004020f1
  40246c:	0040227d 	.word	0x0040227d

00402470 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  402470:	2901      	cmp	r1, #1
  402472:	d92e      	bls.n	4024d2 <remove_chain+0x62>
{
  402474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402478:	4604      	mov	r4, r0
  40247a:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  40247c:	6983      	ldr	r3, [r0, #24]
  40247e:	4299      	cmp	r1, r3
  402480:	d303      	bcc.n	40248a <remove_chain+0x1a>
		res = FR_INT_ERR;
  402482:	2202      	movs	r2, #2
}
  402484:	4610      	mov	r0, r2
  402486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40248a:	4f16      	ldr	r7, [pc, #88]	; (4024e4 <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  40248c:	f04f 0900 	mov.w	r9, #0
  402490:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4024e8 <remove_chain+0x78>
  402494:	e003      	b.n	40249e <remove_chain+0x2e>
  402496:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  402498:	69a3      	ldr	r3, [r4, #24]
  40249a:	42ab      	cmp	r3, r5
  40249c:	d9f2      	bls.n	402484 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40249e:	4631      	mov	r1, r6
  4024a0:	4620      	mov	r0, r4
  4024a2:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  4024a4:	4605      	mov	r5, r0
  4024a6:	b1b8      	cbz	r0, 4024d8 <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4024a8:	2801      	cmp	r0, #1
  4024aa:	d017      	beq.n	4024dc <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4024ac:	f1b0 3fff 	cmp.w	r0, #4294967295
  4024b0:	d016      	beq.n	4024e0 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  4024b2:	464a      	mov	r2, r9
  4024b4:	4631      	mov	r1, r6
  4024b6:	4620      	mov	r0, r4
  4024b8:	47c0      	blx	r8
			if (res != FR_OK) break;
  4024ba:	4602      	mov	r2, r0
  4024bc:	2800      	cmp	r0, #0
  4024be:	d1e1      	bne.n	402484 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  4024c0:	6923      	ldr	r3, [r4, #16]
  4024c2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4024c6:	d0e6      	beq.n	402496 <remove_chain+0x26>
				fs->free_clust++;
  4024c8:	3301      	adds	r3, #1
  4024ca:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  4024cc:	2301      	movs	r3, #1
  4024ce:	7163      	strb	r3, [r4, #5]
  4024d0:	e7e1      	b.n	402496 <remove_chain+0x26>
		res = FR_INT_ERR;
  4024d2:	2202      	movs	r2, #2
}
  4024d4:	4610      	mov	r0, r2
  4024d6:	4770      	bx	lr
  4024d8:	2200      	movs	r2, #0
  4024da:	e7d3      	b.n	402484 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4024dc:	2202      	movs	r2, #2
  4024de:	e7d1      	b.n	402484 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4024e0:	2201      	movs	r2, #1
  4024e2:	e7cf      	b.n	402484 <remove_chain+0x14>
  4024e4:	004020f1 	.word	0x004020f1
  4024e8:	0040227d 	.word	0x0040227d

004024ec <sync>:
{
  4024ec:	b538      	push	{r3, r4, r5, lr}
  4024ee:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  4024f0:	2100      	movs	r1, #0
  4024f2:	4b2e      	ldr	r3, [pc, #184]	; (4025ac <sync+0xc0>)
  4024f4:	4798      	blx	r3
	if (res == FR_OK) {
  4024f6:	4603      	mov	r3, r0
  4024f8:	b950      	cbnz	r0, 402510 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  4024fa:	7823      	ldrb	r3, [r4, #0]
  4024fc:	2b03      	cmp	r3, #3
  4024fe:	d009      	beq.n	402514 <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  402500:	2200      	movs	r2, #0
  402502:	4611      	mov	r1, r2
  402504:	7860      	ldrb	r0, [r4, #1]
  402506:	4b2a      	ldr	r3, [pc, #168]	; (4025b0 <sync+0xc4>)
  402508:	4798      	blx	r3
	res = move_window(fs, 0);
  40250a:	1c03      	adds	r3, r0, #0
  40250c:	bf18      	it	ne
  40250e:	2301      	movne	r3, #1
}
  402510:	4618      	mov	r0, r3
  402512:	bd38      	pop	{r3, r4, r5, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  402514:	7963      	ldrb	r3, [r4, #5]
  402516:	2b00      	cmp	r3, #0
  402518:	d0f2      	beq.n	402500 <sync+0x14>
			fs->winsect = 0;
  40251a:	2300      	movs	r3, #0
  40251c:	62e3      	str	r3, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
  40251e:	f104 0130 	add.w	r1, r4, #48	; 0x30
  402522:	f504 700c 	add.w	r0, r4, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  402526:	460b      	mov	r3, r1
		*d++ = (BYTE)val;
  402528:	2200      	movs	r2, #0
  40252a:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  40252e:	4283      	cmp	r3, r0
  402530:	d1fb      	bne.n	40252a <sync+0x3e>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  402532:	2355      	movs	r3, #85	; 0x55
  402534:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
  402538:	23aa      	movs	r3, #170	; 0xaa
  40253a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  40253e:	2352      	movs	r3, #82	; 0x52
  402540:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  402544:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  402548:	2361      	movs	r3, #97	; 0x61
  40254a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  40254e:	2241      	movs	r2, #65	; 0x41
  402550:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  402554:	2072      	movs	r0, #114	; 0x72
  402556:	f884 0214 	strb.w	r0, [r4, #532]	; 0x214
  40255a:	f884 0215 	strb.w	r0, [r4, #533]	; 0x215
  40255e:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  402562:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  402566:	6923      	ldr	r3, [r4, #16]
  402568:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
  40256c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  402570:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
  402574:	0c1a      	lsrs	r2, r3, #16
  402576:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  40257a:	0e1b      	lsrs	r3, r3, #24
  40257c:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  402580:	68e3      	ldr	r3, [r4, #12]
  402582:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  402586:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40258a:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  40258e:	0c1a      	lsrs	r2, r3, #16
  402590:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  402594:	0e1b      	lsrs	r3, r3, #24
  402596:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  40259a:	2301      	movs	r3, #1
  40259c:	6962      	ldr	r2, [r4, #20]
  40259e:	7860      	ldrb	r0, [r4, #1]
  4025a0:	4d04      	ldr	r5, [pc, #16]	; (4025b4 <sync+0xc8>)
  4025a2:	47a8      	blx	r5
			fs->fsi_flag = 0;
  4025a4:	2300      	movs	r3, #0
  4025a6:	7163      	strb	r3, [r4, #5]
  4025a8:	e7aa      	b.n	402500 <sync+0x14>
  4025aa:	bf00      	nop
  4025ac:	00402061 	.word	0x00402061
  4025b0:	00401b29 	.word	0x00401b29
  4025b4:	00401ab9 	.word	0x00401ab9

004025b8 <dir_next>:
{
  4025b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  4025bc:	88c4      	ldrh	r4, [r0, #6]
  4025be:	3401      	adds	r4, #1
  4025c0:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4025c2:	b914      	cbnz	r4, 4025ca <dir_next+0x12>
		return FR_NO_FILE;
  4025c4:	2004      	movs	r0, #4
  4025c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4025ca:	6903      	ldr	r3, [r0, #16]
  4025cc:	b913      	cbnz	r3, 4025d4 <dir_next+0x1c>
		return FR_NO_FILE;
  4025ce:	2004      	movs	r0, #4
  4025d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4025d4:	460e      	mov	r6, r1
  4025d6:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  4025d8:	f014 070f 	ands.w	r7, r4, #15
  4025dc:	d110      	bne.n	402600 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  4025de:	3301      	adds	r3, #1
  4025e0:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  4025e2:	68c1      	ldr	r1, [r0, #12]
  4025e4:	b931      	cbnz	r1, 4025f4 <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  4025e6:	6803      	ldr	r3, [r0, #0]
  4025e8:	891b      	ldrh	r3, [r3, #8]
  4025ea:	42a3      	cmp	r3, r4
  4025ec:	d808      	bhi.n	402600 <dir_next+0x48>
				return FR_NO_FILE;
  4025ee:	2004      	movs	r0, #4
  4025f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  4025f4:	6800      	ldr	r0, [r0, #0]
  4025f6:	7883      	ldrb	r3, [r0, #2]
  4025f8:	3b01      	subs	r3, #1
  4025fa:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  4025fe:	d008      	beq.n	402612 <dir_next+0x5a>
	dj->index = i;
  402600:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  402602:	682b      	ldr	r3, [r5, #0]
  402604:	3330      	adds	r3, #48	; 0x30
  402606:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  40260a:	616b      	str	r3, [r5, #20]
	return FR_OK;
  40260c:	2000      	movs	r0, #0
  40260e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  402612:	4b33      	ldr	r3, [pc, #204]	; (4026e0 <dir_next+0x128>)
  402614:	4798      	blx	r3
  402616:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  402618:	2801      	cmp	r0, #1
  40261a:	d94f      	bls.n	4026bc <dir_next+0x104>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40261c:	f1b0 3fff 	cmp.w	r0, #4294967295
  402620:	d04f      	beq.n	4026c2 <dir_next+0x10a>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  402622:	6828      	ldr	r0, [r5, #0]
  402624:	6983      	ldr	r3, [r0, #24]
  402626:	4598      	cmp	r8, r3
  402628:	d340      	bcc.n	4026ac <dir_next+0xf4>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  40262a:	b916      	cbnz	r6, 402632 <dir_next+0x7a>
  40262c:	2004      	movs	r0, #4
  40262e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  402632:	68e9      	ldr	r1, [r5, #12]
  402634:	4b2b      	ldr	r3, [pc, #172]	; (4026e4 <dir_next+0x12c>)
  402636:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  402638:	4680      	mov	r8, r0
  40263a:	b910      	cbnz	r0, 402642 <dir_next+0x8a>
  40263c:	2007      	movs	r0, #7
  40263e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  402642:	2801      	cmp	r0, #1
  402644:	d040      	beq.n	4026c8 <dir_next+0x110>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  402646:	f1b0 3fff 	cmp.w	r0, #4294967295
  40264a:	d040      	beq.n	4026ce <dir_next+0x116>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  40264c:	2100      	movs	r1, #0
  40264e:	6828      	ldr	r0, [r5, #0]
  402650:	4b25      	ldr	r3, [pc, #148]	; (4026e8 <dir_next+0x130>)
  402652:	4798      	blx	r3
  402654:	2800      	cmp	r0, #0
  402656:	d13d      	bne.n	4026d4 <dir_next+0x11c>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  402658:	682b      	ldr	r3, [r5, #0]
  40265a:	f503 710c 	add.w	r1, r3, #560	; 0x230
	BYTE *d = (BYTE*)dst;
  40265e:	3330      	adds	r3, #48	; 0x30
		*d++ = (BYTE)val;
  402660:	2200      	movs	r2, #0
  402662:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  402666:	428b      	cmp	r3, r1
  402668:	d1fb      	bne.n	402662 <dir_next+0xaa>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  40266a:	682e      	ldr	r6, [r5, #0]
  40266c:	4641      	mov	r1, r8
  40266e:	4630      	mov	r0, r6
  402670:	4b1e      	ldr	r3, [pc, #120]	; (4026ec <dir_next+0x134>)
  402672:	4798      	blx	r3
  402674:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402676:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  402678:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40267c:	46b2      	mov	sl, r6
  40267e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 4026e8 <dir_next+0x130>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  402682:	682b      	ldr	r3, [r5, #0]
  402684:	7899      	ldrb	r1, [r3, #2]
  402686:	b2f2      	uxtb	r2, r6
  402688:	4291      	cmp	r1, r2
  40268a:	d90b      	bls.n	4026a4 <dir_next+0xec>
						dj->fs->wflag = 1;
  40268c:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  402690:	4651      	mov	r1, sl
  402692:	6828      	ldr	r0, [r5, #0]
  402694:	47c8      	blx	r9
  402696:	3601      	adds	r6, #1
  402698:	b9f8      	cbnz	r0, 4026da <dir_next+0x122>
						dj->fs->winsect++;
  40269a:	682a      	ldr	r2, [r5, #0]
  40269c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  40269e:	3301      	adds	r3, #1
  4026a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  4026a2:	e7ee      	b.n	402682 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
  4026a4:	4616      	mov	r6, r2
  4026a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4026a8:	1b96      	subs	r6, r2, r6
  4026aa:	62de      	str	r6, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
  4026ac:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  4026b0:	4641      	mov	r1, r8
  4026b2:	6828      	ldr	r0, [r5, #0]
  4026b4:	4b0d      	ldr	r3, [pc, #52]	; (4026ec <dir_next+0x134>)
  4026b6:	4798      	blx	r3
  4026b8:	6128      	str	r0, [r5, #16]
  4026ba:	e7a1      	b.n	402600 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  4026bc:	2002      	movs	r0, #2
  4026be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4026c2:	2001      	movs	r0, #1
  4026c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4026c8:	2002      	movs	r0, #2
  4026ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4026ce:	2001      	movs	r0, #1
  4026d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4026d4:	2001      	movs	r0, #1
  4026d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4026da:	2001      	movs	r0, #1
}
  4026dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026e0:	004020f1 	.word	0x004020f1
  4026e4:	004023b1 	.word	0x004023b1
  4026e8:	00402061 	.word	0x00402061
  4026ec:	00401c05 	.word	0x00401c05

004026f0 <dir_find>:
{
  4026f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4026f4:	b085      	sub	sp, #20
  4026f6:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  4026f8:	2100      	movs	r1, #0
  4026fa:	4b62      	ldr	r3, [pc, #392]	; (402884 <dir_find+0x194>)
  4026fc:	4798      	blx	r3
	if (res != FR_OK) return res;
  4026fe:	4680      	mov	r8, r0
  402700:	bb08      	cbnz	r0, 402746 <dir_find+0x56>
  402702:	f04f 0bff 	mov.w	fp, #255	; 0xff
  402706:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  402708:	4f5f      	ldr	r7, [pc, #380]	; (402888 <dir_find+0x198>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40270a:	46da      	mov	sl, fp
  40270c:	e095      	b.n	40283a <dir_find+0x14a>
			if (a == AM_LFN) {			/* An LFN entry is found */
  40270e:	2a0f      	cmp	r2, #15
  402710:	d01d      	beq.n	40274e <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  402712:	f1b9 0f00 	cmp.w	r9, #0
  402716:	d104      	bne.n	402722 <dir_find+0x32>
  402718:	4620      	mov	r0, r4
  40271a:	4b5c      	ldr	r3, [pc, #368]	; (40288c <dir_find+0x19c>)
  40271c:	4798      	blx	r3
  40271e:	4582      	cmp	sl, r0
  402720:	d011      	beq.n	402746 <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402722:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402726:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  402728:	69ab      	ldr	r3, [r5, #24]
  40272a:	7ada      	ldrb	r2, [r3, #11]
  40272c:	f012 0f01 	tst.w	r2, #1
  402730:	d17a      	bne.n	402828 <dir_find+0x138>
  402732:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  402736:	f814 1b01 	ldrb.w	r1, [r4], #1
  40273a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40273e:	4291      	cmp	r1, r2
  402740:	d16c      	bne.n	40281c <dir_find+0x12c>
  402742:	42a0      	cmp	r0, r4
  402744:	d1f7      	bne.n	402736 <dir_find+0x46>
}
  402746:	4640      	mov	r0, r8
  402748:	b005      	add	sp, #20
  40274a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  40274e:	f8d5 801c 	ldr.w	r8, [r5, #28]
  402752:	f1b8 0f00 	cmp.w	r8, #0
  402756:	d069      	beq.n	40282c <dir_find+0x13c>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  402758:	f016 0f40 	tst.w	r6, #64	; 0x40
  40275c:	d00c      	beq.n	402778 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  40275e:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  402762:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  402766:	88eb      	ldrh	r3, [r5, #6]
  402768:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40276a:	f894 b00d 	ldrb.w	fp, [r4, #13]
  40276e:	45d3      	cmp	fp, sl
  402770:	d008      	beq.n	402784 <dir_find+0x94>
  402772:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402776:	e059      	b.n	40282c <dir_find+0x13c>
  402778:	45b1      	cmp	r9, r6
  40277a:	bf18      	it	ne
  40277c:	f04f 09ff 	movne.w	r9, #255	; 0xff
  402780:	d154      	bne.n	40282c <dir_find+0x13c>
  402782:	e7f2      	b.n	40276a <dir_find+0x7a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  402784:	f894 a000 	ldrb.w	sl, [r4]
  402788:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  40278c:	f10a 3aff 	add.w	sl, sl, #4294967295
  402790:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  402794:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  402798:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 402898 <dir_find+0x1a8>
  40279c:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  4027a0:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4027a2:	9603      	str	r6, [sp, #12]
  4027a4:	f8cd b004 	str.w	fp, [sp, #4]
  4027a8:	461e      	mov	r6, r3
  4027aa:	9502      	str	r5, [sp, #8]
  4027ac:	e00f      	b.n	4027ce <dir_find+0xde>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4027ae:	4618      	mov	r0, r3
  4027b0:	4b37      	ldr	r3, [pc, #220]	; (402890 <dir_find+0x1a0>)
  4027b2:	4798      	blx	r3
  4027b4:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  4027b6:	2efe      	cmp	r6, #254	; 0xfe
  4027b8:	d85b      	bhi.n	402872 <dir_find+0x182>
  4027ba:	1c75      	adds	r5, r6, #1
  4027bc:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  4027c0:	4b33      	ldr	r3, [pc, #204]	; (402890 <dir_find+0x1a0>)
  4027c2:	4798      	blx	r3
  4027c4:	4583      	cmp	fp, r0
  4027c6:	d158      	bne.n	40287a <dir_find+0x18a>
  4027c8:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  4027ca:	45d1      	cmp	r9, sl
  4027cc:	d013      	beq.n	4027f6 <dir_find+0x106>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4027ce:	f819 2b01 	ldrb.w	r2, [r9], #1
  4027d2:	18a3      	adds	r3, r4, r2
  4027d4:	7859      	ldrb	r1, [r3, #1]
  4027d6:	5ca3      	ldrb	r3, [r4, r2]
  4027d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  4027dc:	2800      	cmp	r0, #0
  4027de:	d1e6      	bne.n	4027ae <dir_find+0xbe>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4027e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4027e4:	4293      	cmp	r3, r2
  4027e6:	d0f0      	beq.n	4027ca <dir_find+0xda>
  4027e8:	f8dd b004 	ldr.w	fp, [sp, #4]
  4027ec:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4027ee:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4027f0:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4027f4:	e01a      	b.n	40282c <dir_find+0x13c>
  4027f6:	f8dd b004 	ldr.w	fp, [sp, #4]
  4027fa:	4632      	mov	r2, r6
  4027fc:	9e03      	ldr	r6, [sp, #12]
  4027fe:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  402800:	7823      	ldrb	r3, [r4, #0]
  402802:	f013 0f40 	tst.w	r3, #64	; 0x40
  402806:	d004      	beq.n	402812 <dir_find+0x122>
  402808:	b118      	cbz	r0, 402812 <dir_find+0x122>
  40280a:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  40280e:	2b00      	cmp	r3, #0
  402810:	d1ed      	bne.n	4027ee <dir_find+0xfe>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  402812:	3e01      	subs	r6, #1
  402814:	fa5f f986 	uxtb.w	r9, r6
  402818:	46da      	mov	sl, fp
  40281a:	e007      	b.n	40282c <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40281c:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402820:	e004      	b.n	40282c <dir_find+0x13c>
			ord = 0xFF;
  402822:	f04f 09ff 	mov.w	r9, #255	; 0xff
  402826:	e001      	b.n	40282c <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  402828:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  40282c:	2100      	movs	r1, #0
  40282e:	4628      	mov	r0, r5
  402830:	4b18      	ldr	r3, [pc, #96]	; (402894 <dir_find+0x1a4>)
  402832:	4798      	blx	r3
	} while (res == FR_OK);
  402834:	4680      	mov	r8, r0
  402836:	2800      	cmp	r0, #0
  402838:	d185      	bne.n	402746 <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  40283a:	6929      	ldr	r1, [r5, #16]
  40283c:	6828      	ldr	r0, [r5, #0]
  40283e:	47b8      	blx	r7
		if (res != FR_OK) break;
  402840:	4680      	mov	r8, r0
  402842:	2800      	cmp	r0, #0
  402844:	f47f af7f 	bne.w	402746 <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  402848:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  40284a:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  40284c:	b176      	cbz	r6, 40286c <dir_find+0x17c>
		a = dir[DIR_Attr] & AM_MASK;
  40284e:	7ae3      	ldrb	r3, [r4, #11]
  402850:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  402854:	2ee5      	cmp	r6, #229	; 0xe5
  402856:	d0e4      	beq.n	402822 <dir_find+0x132>
  402858:	f013 0f08 	tst.w	r3, #8
  40285c:	f43f af57 	beq.w	40270e <dir_find+0x1e>
  402860:	2a0f      	cmp	r2, #15
  402862:	f43f af74 	beq.w	40274e <dir_find+0x5e>
			ord = 0xFF;
  402866:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40286a:	e7df      	b.n	40282c <dir_find+0x13c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  40286c:	f04f 0804 	mov.w	r8, #4
  402870:	e769      	b.n	402746 <dir_find+0x56>
  402872:	f8dd b004 	ldr.w	fp, [sp, #4]
  402876:	9d02      	ldr	r5, [sp, #8]
  402878:	e7b9      	b.n	4027ee <dir_find+0xfe>
  40287a:	f8dd b004 	ldr.w	fp, [sp, #4]
  40287e:	9d02      	ldr	r5, [sp, #8]
  402880:	e7b5      	b.n	4027ee <dir_find+0xfe>
  402882:	bf00      	nop
  402884:	004021d9 	.word	0x004021d9
  402888:	00402061 	.word	0x00402061
  40288c:	00401c1b 	.word	0x00401c1b
  402890:	004033cd 	.word	0x004033cd
  402894:	004025b9 	.word	0x004025b9
  402898:	00408300 	.word	0x00408300

0040289c <follow_path>:
{
  40289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4028a0:	b083      	sub	sp, #12
  4028a2:	4682      	mov	sl, r0
  4028a4:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  4028a6:	780b      	ldrb	r3, [r1, #0]
  4028a8:	2b2f      	cmp	r3, #47	; 0x2f
  4028aa:	d00c      	beq.n	4028c6 <follow_path+0x2a>
  4028ac:	2b5c      	cmp	r3, #92	; 0x5c
  4028ae:	d00a      	beq.n	4028c6 <follow_path+0x2a>
	dj->sclust = 0;						/* Start from the root dir */
  4028b0:	2300      	movs	r3, #0
  4028b2:	f8ca 3008 	str.w	r3, [sl, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  4028b6:	f898 3000 	ldrb.w	r3, [r8]
  4028ba:	2b1f      	cmp	r3, #31
  4028bc:	d906      	bls.n	4028cc <follow_path+0x30>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4028be:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 402bb4 <follow_path+0x318>
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  4028c2:	4644      	mov	r4, r8
  4028c4:	e00c      	b.n	4028e0 <follow_path+0x44>
		path++;
  4028c6:	f108 0801 	add.w	r8, r8, #1
  4028ca:	e7f1      	b.n	4028b0 <follow_path+0x14>
		res = dir_sdi(dj, 0);
  4028cc:	2100      	movs	r1, #0
  4028ce:	4650      	mov	r0, sl
  4028d0:	4bb3      	ldr	r3, [pc, #716]	; (402ba0 <follow_path+0x304>)
  4028d2:	4798      	blx	r3
  4028d4:	4603      	mov	r3, r0
		dj->dir = 0;
  4028d6:	2200      	movs	r2, #0
  4028d8:	f8ca 2014 	str.w	r2, [sl, #20]
  4028dc:	e130      	b.n	402b40 <follow_path+0x2a4>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  4028de:	461c      	mov	r4, r3
  4028e0:	4627      	mov	r7, r4
  4028e2:	4623      	mov	r3, r4
  4028e4:	f813 0b01 	ldrb.w	r0, [r3], #1
  4028e8:	282f      	cmp	r0, #47	; 0x2f
  4028ea:	d0f8      	beq.n	4028de <follow_path+0x42>
  4028ec:	285c      	cmp	r0, #92	; 0x5c
  4028ee:	bf08      	it	eq
  4028f0:	461c      	moveq	r4, r3
  4028f2:	d0f5      	beq.n	4028e0 <follow_path+0x44>
	lfn = dj->lfn;
  4028f4:	f8da b01c 	ldr.w	fp, [sl, #28]
		w = p[si++];					/* Get a character */
  4028f8:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  4028fa:	281f      	cmp	r0, #31
  4028fc:	f240 812f 	bls.w	402b5e <follow_path+0x2c2>
  402900:	282f      	cmp	r0, #47	; 0x2f
  402902:	f000 8131 	beq.w	402b68 <follow_path+0x2cc>
  402906:	285c      	cmp	r0, #92	; 0x5c
  402908:	f000 8137 	beq.w	402b7a <follow_path+0x2de>
  40290c:	f1ab 0602 	sub.w	r6, fp, #2
  402910:	2501      	movs	r5, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  402912:	46a8      	mov	r8, r5
  402914:	e012      	b.n	40293c <follow_path+0xa0>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  402916:	bb73      	cbnz	r3, 402976 <follow_path+0xda>
		lfn[di++] = w;					/* Store the Unicode char */
  402918:	f826 2f02 	strh.w	r2, [r6, #2]!
		w = p[si++];					/* Get a character */
  40291c:	1c6b      	adds	r3, r5, #1
  40291e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  402922:	281f      	cmp	r0, #31
  402924:	f240 811d 	bls.w	402b62 <follow_path+0x2c6>
  402928:	282f      	cmp	r0, #47	; 0x2f
  40292a:	f000 811f 	beq.w	402b6c <follow_path+0x2d0>
  40292e:	285c      	cmp	r0, #92	; 0x5c
  402930:	f000 811c 	beq.w	402b6c <follow_path+0x2d0>
		if (di >= _MAX_LFN)				/* Reject too long name */
  402934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402938:	d01d      	beq.n	402976 <follow_path+0xda>
		w = p[si++];					/* Get a character */
  40293a:	461d      	mov	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40293c:	4641      	mov	r1, r8
  40293e:	47c8      	blx	r9
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  402940:	4602      	mov	r2, r0
  402942:	b1c0      	cbz	r0, 402976 <follow_path+0xda>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  402944:	287f      	cmp	r0, #127	; 0x7f
  402946:	d8e7      	bhi.n	402918 <follow_path+0x7c>
	while (*str && *str != chr) str++;
  402948:	2822      	cmp	r0, #34	; 0x22
  40294a:	f000 80f8 	beq.w	402b3e <follow_path+0x2a2>
  40294e:	232a      	movs	r3, #42	; 0x2a
  402950:	4994      	ldr	r1, [pc, #592]	; (402ba4 <follow_path+0x308>)
  402952:	b298      	uxth	r0, r3
  402954:	4290      	cmp	r0, r2
  402956:	d0de      	beq.n	402916 <follow_path+0x7a>
  402958:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40295c:	2b00      	cmp	r3, #0
  40295e:	d1f8      	bne.n	402952 <follow_path+0xb6>
  402960:	e7da      	b.n	402918 <follow_path+0x7c>
	while (di) {						/* Strip trailing spaces and dots */
  402962:	3d01      	subs	r5, #1
  402964:	f000 80eb 	beq.w	402b3e <follow_path+0x2a2>
		w = lfn[di-1];
  402968:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  40296c:	2b20      	cmp	r3, #32
  40296e:	d0f8      	beq.n	402962 <follow_path+0xc6>
  402970:	2b2e      	cmp	r3, #46	; 0x2e
  402972:	d0f6      	beq.n	402962 <follow_path+0xc6>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  402974:	b90d      	cbnz	r5, 40297a <follow_path+0xde>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402976:	2306      	movs	r3, #6
	return res;
  402978:	e0e2      	b.n	402b40 <follow_path+0x2a4>
	lfn[di] = 0;						/* LFN is created */
  40297a:	0068      	lsls	r0, r5, #1
  40297c:	2300      	movs	r3, #0
  40297e:	f82b 3015 	strh.w	r3, [fp, r5, lsl #1]
	mem_set(dj->fn, ' ', 11);
  402982:	f8da 3018 	ldr.w	r3, [sl, #24]
  402986:	f103 010b 	add.w	r1, r3, #11
		*d++ = (BYTE)val;
  40298a:	2220      	movs	r2, #32
  40298c:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  402990:	428b      	cmp	r3, r1
  402992:	d1fb      	bne.n	40298c <follow_path+0xf0>
  402994:	f1ab 0102 	sub.w	r1, fp, #2
  402998:	2300      	movs	r3, #0
  40299a:	e000      	b.n	40299e <follow_path+0x102>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  40299c:	3301      	adds	r3, #1
  40299e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  4029a2:	2a20      	cmp	r2, #32
  4029a4:	d0fa      	beq.n	40299c <follow_path+0x100>
  4029a6:	2a2e      	cmp	r2, #46	; 0x2e
  4029a8:	d0f8      	beq.n	40299c <follow_path+0x100>
	if (si) cf |= NS_LOSS | NS_LFN;
  4029aa:	b10b      	cbz	r3, 4029b0 <follow_path+0x114>
  4029ac:	f046 0603 	orr.w	r6, r6, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  4029b0:	1e81      	subs	r1, r0, #2
  4029b2:	eb0b 0201 	add.w	r2, fp, r1
  4029b6:	f83b 1001 	ldrh.w	r1, [fp, r1]
  4029ba:	292e      	cmp	r1, #46	; 0x2e
  4029bc:	d005      	beq.n	4029ca <follow_path+0x12e>
  4029be:	3d01      	subs	r5, #1
  4029c0:	d003      	beq.n	4029ca <follow_path+0x12e>
  4029c2:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  4029c6:	292e      	cmp	r1, #46	; 0x2e
  4029c8:	d1f9      	bne.n	4029be <follow_path+0x122>
		dj->fn[i++] = (BYTE)w;
  4029ca:	2208      	movs	r2, #8
  4029cc:	9200      	str	r2, [sp, #0]
  4029ce:	f04f 0800 	mov.w	r8, #0
  4029d2:	f8cd 8004 	str.w	r8, [sp, #4]
  4029d6:	e005      	b.n	4029e4 <follow_path+0x148>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  4029d8:	42af      	cmp	r7, r5
  4029da:	f000 80d1 	beq.w	402b80 <follow_path+0x2e4>
			cf |= NS_LOSS | NS_LFN; continue;
  4029de:	f046 0603 	orr.w	r6, r6, #3
		w = lfn[si++];					/* Get an LFN char */
  4029e2:	463b      	mov	r3, r7
  4029e4:	1c5f      	adds	r7, r3, #1
  4029e6:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  4029ea:	b350      	cbz	r0, 402a42 <follow_path+0x1a6>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  4029ec:	2820      	cmp	r0, #32
  4029ee:	d0f6      	beq.n	4029de <follow_path+0x142>
  4029f0:	282e      	cmp	r0, #46	; 0x2e
  4029f2:	d0f1      	beq.n	4029d8 <follow_path+0x13c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  4029f4:	9b00      	ldr	r3, [sp, #0]
  4029f6:	4598      	cmp	r8, r3
  4029f8:	d219      	bcs.n	402a2e <follow_path+0x192>
  4029fa:	42af      	cmp	r7, r5
  4029fc:	f000 80c0 	beq.w	402b80 <follow_path+0x2e4>
		if (w >= 0x80) {				/* Non ASCII char */
  402a00:	287f      	cmp	r0, #127	; 0x7f
  402a02:	d86c      	bhi.n	402ade <follow_path+0x242>
	while (*str && *str != chr) str++;
  402a04:	282b      	cmp	r0, #43	; 0x2b
  402a06:	d079      	beq.n	402afc <follow_path+0x260>
  402a08:	232c      	movs	r3, #44	; 0x2c
  402a0a:	4a67      	ldr	r2, [pc, #412]	; (402ba8 <follow_path+0x30c>)
  402a0c:	b299      	uxth	r1, r3
  402a0e:	4281      	cmp	r1, r0
  402a10:	d072      	beq.n	402af8 <follow_path+0x25c>
  402a12:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  402a16:	2b00      	cmp	r3, #0
  402a18:	d1f8      	bne.n	402a0c <follow_path+0x170>
				if (IsUpper(w)) {		/* ASCII large capital */
  402a1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  402a1e:	b29b      	uxth	r3, r3
  402a20:	2b19      	cmp	r3, #25
  402a22:	d876      	bhi.n	402b12 <follow_path+0x276>
					b |= 2;
  402a24:	9b01      	ldr	r3, [sp, #4]
  402a26:	f043 0302 	orr.w	r3, r3, #2
  402a2a:	9301      	str	r3, [sp, #4]
  402a2c:	e069      	b.n	402b02 <follow_path+0x266>
			if (ni == 11) {				/* Long extension */
  402a2e:	9b00      	ldr	r3, [sp, #0]
  402a30:	2b0b      	cmp	r3, #11
  402a32:	d048      	beq.n	402ac6 <follow_path+0x22a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  402a34:	42af      	cmp	r7, r5
  402a36:	f000 80a6 	beq.w	402b86 <follow_path+0x2ea>
  402a3a:	f046 0603 	orr.w	r6, r6, #3
			if (si > di) break;			/* No extension */
  402a3e:	f240 80a2 	bls.w	402b86 <follow_path+0x2ea>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402a42:	f8da 3018 	ldr.w	r3, [sl, #24]
  402a46:	781a      	ldrb	r2, [r3, #0]
  402a48:	2ae5      	cmp	r2, #229	; 0xe5
  402a4a:	d045      	beq.n	402ad8 <follow_path+0x23c>
	if (ni == 8) b <<= 2;
  402a4c:	9b00      	ldr	r3, [sp, #0]
  402a4e:	2b08      	cmp	r3, #8
  402a50:	d06b      	beq.n	402b2a <follow_path+0x28e>
  402a52:	9a01      	ldr	r2, [sp, #4]
  402a54:	f002 030c 	and.w	r3, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  402a58:	2b0c      	cmp	r3, #12
  402a5a:	d06d      	beq.n	402b38 <follow_path+0x29c>
  402a5c:	f002 0203 	and.w	r2, r2, #3
  402a60:	2a03      	cmp	r2, #3
  402a62:	d069      	beq.n	402b38 <follow_path+0x29c>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  402a64:	f016 0f02 	tst.w	r6, #2
  402a68:	d10b      	bne.n	402a82 <follow_path+0x1e6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  402a6a:	9a01      	ldr	r2, [sp, #4]
  402a6c:	f002 0b03 	and.w	fp, r2, #3
  402a70:	f1bb 0f01 	cmp.w	fp, #1
  402a74:	bf08      	it	eq
  402a76:	f046 0610 	orreq.w	r6, r6, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  402a7a:	2b04      	cmp	r3, #4
  402a7c:	bf08      	it	eq
  402a7e:	f046 0608 	orreq.w	r6, r6, #8
	dj->fn[NS] = cf;	/* SFN is created */
  402a82:	f8da 3018 	ldr.w	r3, [sl, #24]
  402a86:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
  402a88:	4650      	mov	r0, sl
  402a8a:	4b48      	ldr	r3, [pc, #288]	; (402bac <follow_path+0x310>)
  402a8c:	4798      	blx	r3
			ns = *(dj->fn+NS);
  402a8e:	f8da 3018 	ldr.w	r3, [sl, #24]
  402a92:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  402a94:	4603      	mov	r3, r0
  402a96:	2800      	cmp	r0, #0
  402a98:	d156      	bne.n	402b48 <follow_path+0x2ac>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  402a9a:	f012 0f04 	tst.w	r2, #4
  402a9e:	d14f      	bne.n	402b40 <follow_path+0x2a4>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  402aa0:	f8da 2014 	ldr.w	r2, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  402aa4:	7ad3      	ldrb	r3, [r2, #11]
  402aa6:	f013 0f10 	tst.w	r3, #16
  402aaa:	d056      	beq.n	402b5a <follow_path+0x2be>
			dj->sclust = LD_CLUST(dir);
  402aac:	7d51      	ldrb	r1, [r2, #21]
  402aae:	7d13      	ldrb	r3, [r2, #20]
  402ab0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  402ab4:	7ed0      	ldrb	r0, [r2, #27]
  402ab6:	7e93      	ldrb	r3, [r2, #26]
  402ab8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  402abc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  402ac0:	f8ca 3008 	str.w	r3, [sl, #8]
			res = create_name(dj, &path);	/* Get a segment */
  402ac4:	e70c      	b.n	4028e0 <follow_path+0x44>
				cf |= NS_LOSS | NS_LFN; break;
  402ac6:	f046 0603 	orr.w	r6, r6, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  402aca:	f8da 3018 	ldr.w	r3, [sl, #24]
  402ace:	781a      	ldrb	r2, [r3, #0]
  402ad0:	2ae5      	cmp	r2, #229	; 0xe5
  402ad2:	d1be      	bne.n	402a52 <follow_path+0x1b6>
  402ad4:	220b      	movs	r2, #11
  402ad6:	9200      	str	r2, [sp, #0]
  402ad8:	2205      	movs	r2, #5
  402ada:	701a      	strb	r2, [r3, #0]
  402adc:	e7b6      	b.n	402a4c <follow_path+0x1b0>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  402ade:	2100      	movs	r1, #0
  402ae0:	47c8      	blx	r9
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  402ae2:	4603      	mov	r3, r0
  402ae4:	2800      	cmp	r0, #0
  402ae6:	d058      	beq.n	402b9a <follow_path+0x2fe>
  402ae8:	4a31      	ldr	r2, [pc, #196]	; (402bb0 <follow_path+0x314>)
  402aea:	4413      	add	r3, r2
  402aec:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  402af0:	f046 0602 	orr.w	r6, r6, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  402af4:	b110      	cbz	r0, 402afc <follow_path+0x260>
  402af6:	e785      	b.n	402a04 <follow_path+0x168>
  402af8:	2b00      	cmp	r3, #0
  402afa:	d08e      	beq.n	402a1a <follow_path+0x17e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  402afc:	f046 0603 	orr.w	r6, r6, #3
  402b00:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  402b02:	f8da 3018 	ldr.w	r3, [sl, #24]
  402b06:	f803 0008 	strb.w	r0, [r3, r8]
		w = lfn[si++];					/* Get an LFN char */
  402b0a:	463b      	mov	r3, r7
		dj->fn[i++] = (BYTE)w;
  402b0c:	f108 0801 	add.w	r8, r8, #1
  402b10:	e768      	b.n	4029e4 <follow_path+0x148>
					if (IsLower(w)) {	/* ASCII small capital */
  402b12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  402b16:	b29b      	uxth	r3, r3
  402b18:	2b19      	cmp	r3, #25
  402b1a:	d8f2      	bhi.n	402b02 <follow_path+0x266>
						b |= 1; w -= 0x20;
  402b1c:	9b01      	ldr	r3, [sp, #4]
  402b1e:	f043 0301 	orr.w	r3, r3, #1
  402b22:	9301      	str	r3, [sp, #4]
  402b24:	3820      	subs	r0, #32
  402b26:	b280      	uxth	r0, r0
  402b28:	e7eb      	b.n	402b02 <follow_path+0x266>
	if (ni == 8) b <<= 2;
  402b2a:	9b01      	ldr	r3, [sp, #4]
  402b2c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  402b30:	fa5f f38b 	uxtb.w	r3, fp
  402b34:	9301      	str	r3, [sp, #4]
  402b36:	e78c      	b.n	402a52 <follow_path+0x1b6>
		cf |= NS_LFN;
  402b38:	f046 0602 	orr.w	r6, r6, #2
  402b3c:	e792      	b.n	402a64 <follow_path+0x1c8>
  402b3e:	2306      	movs	r3, #6
}
  402b40:	4618      	mov	r0, r3
  402b42:	b003      	add	sp, #12
  402b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  402b48:	2804      	cmp	r0, #4
  402b4a:	d1f9      	bne.n	402b40 <follow_path+0x2a4>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  402b4c:	f002 0204 	and.w	r2, r2, #4
  402b50:	2a00      	cmp	r2, #0
  402b52:	bf14      	ite	ne
  402b54:	4603      	movne	r3, r0
  402b56:	2305      	moveq	r3, #5
  402b58:	e7f2      	b.n	402b40 <follow_path+0x2a4>
				res = FR_NO_PATH; break;
  402b5a:	2305      	movs	r3, #5
  402b5c:	e7f0      	b.n	402b40 <follow_path+0x2a4>
		w = p[si++];					/* Get a character */
  402b5e:	2301      	movs	r3, #1
	si = di = 0;
  402b60:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  402b62:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402b64:	2604      	movs	r6, #4
  402b66:	e003      	b.n	402b70 <follow_path+0x2d4>
		w = p[si++];					/* Get a character */
  402b68:	2301      	movs	r3, #1
	si = di = 0;
  402b6a:	2500      	movs	r5, #0
	*path = &p[si];						/* Return pointer to the next segment */
  402b6c:	18fc      	adds	r4, r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  402b6e:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
  402b70:	2d00      	cmp	r5, #0
  402b72:	d0e4      	beq.n	402b3e <follow_path+0x2a2>
  402b74:	eb0b 0245 	add.w	r2, fp, r5, lsl #1
  402b78:	e6f6      	b.n	402968 <follow_path+0xcc>
		w = p[si++];					/* Get a character */
  402b7a:	2301      	movs	r3, #1
	si = di = 0;
  402b7c:	2500      	movs	r5, #0
  402b7e:	e7f5      	b.n	402b6c <follow_path+0x2d0>
			if (ni == 11) {				/* Long extension */
  402b80:	9b00      	ldr	r3, [sp, #0]
  402b82:	2b0b      	cmp	r3, #11
  402b84:	d09f      	beq.n	402ac6 <follow_path+0x22a>
			b <<= 2; continue;
  402b86:	9b01      	ldr	r3, [sp, #4]
  402b88:	009b      	lsls	r3, r3, #2
  402b8a:	b2db      	uxtb	r3, r3
  402b8c:	9301      	str	r3, [sp, #4]
  402b8e:	462b      	mov	r3, r5
			si = di; i = 8; ni = 11;	/* Enter extension section */
  402b90:	220b      	movs	r2, #11
  402b92:	9200      	str	r2, [sp, #0]
  402b94:	f04f 0808 	mov.w	r8, #8
  402b98:	e724      	b.n	4029e4 <follow_path+0x148>
			cf |= NS_LFN;				/* Force create LFN entry */
  402b9a:	f046 0602 	orr.w	r6, r6, #2
  402b9e:	e7ad      	b.n	402afc <follow_path+0x260>
  402ba0:	004021d9 	.word	0x004021d9
  402ba4:	00408391 	.word	0x00408391
  402ba8:	0040839d 	.word	0x0040839d
  402bac:	004026f1 	.word	0x004026f1
  402bb0:	00408310 	.word	0x00408310
  402bb4:	0040338d 	.word	0x0040338d

00402bb8 <dir_register>:
{
  402bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402bbc:	b089      	sub	sp, #36	; 0x24
  402bbe:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  402bc0:	6985      	ldr	r5, [r0, #24]
  402bc2:	f8d0 b01c 	ldr.w	fp, [r0, #28]
	mem_cpy(sn, fn, 12);
  402bc6:	220c      	movs	r2, #12
  402bc8:	4629      	mov	r1, r5
  402bca:	a805      	add	r0, sp, #20
  402bcc:	4ba9      	ldr	r3, [pc, #676]	; (402e74 <dir_register+0x2bc>)
  402bce:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  402bd0:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402bd4:	f013 0f01 	tst.w	r3, #1
  402bd8:	d079      	beq.n	402cce <dir_register+0x116>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  402bda:	2300      	movs	r3, #0
  402bdc:	72eb      	strb	r3, [r5, #11]
  402bde:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  402be0:	220b      	movs	r2, #11
  402be2:	a905      	add	r1, sp, #20
  402be4:	4628      	mov	r0, r5
  402be6:	4ba3      	ldr	r3, [pc, #652]	; (402e74 <dir_register+0x2bc>)
  402be8:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  402bea:	2701      	movs	r7, #1
  402bec:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402bee:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402bf2:	f8df 929c 	ldr.w	r9, [pc, #668]	; 402e90 <dir_register+0x2d8>
	mem_cpy(dst, src, 11);
  402bf6:	f8df a27c 	ldr.w	sl, [pc, #636]	; 402e74 <dir_register+0x2bc>
  402bfa:	e032      	b.n	402c62 <dir_register+0xaa>
		for (n = 1; n < 100; n++) {
  402bfc:	463b      	mov	r3, r7
  402bfe:	e030      	b.n	402c62 <dir_register+0xaa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  402c00:	4613      	mov	r3, r2
  402c02:	e002      	b.n	402c0a <dir_register+0x52>
  402c04:	2300      	movs	r3, #0
  402c06:	e000      	b.n	402c0a <dir_register+0x52>
  402c08:	4613      	mov	r3, r2
  402c0a:	442b      	add	r3, r5
  402c0c:	e005      	b.n	402c1a <dir_register+0x62>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402c0e:	4641      	mov	r1, r8
  402c10:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  402c14:	1b59      	subs	r1, r3, r5
  402c16:	2907      	cmp	r1, #7
  402c18:	d807      	bhi.n	402c2a <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  402c1a:	2a07      	cmp	r2, #7
  402c1c:	d8f7      	bhi.n	402c0e <dir_register+0x56>
  402c1e:	a908      	add	r1, sp, #32
  402c20:	4411      	add	r1, r2
  402c22:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  402c26:	3201      	adds	r2, #1
  402c28:	e7f2      	b.n	402c10 <dir_register+0x58>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  402c2a:	4620      	mov	r0, r4
  402c2c:	47c8      	blx	r9
			if (res != FR_OK) break;
  402c2e:	4606      	mov	r6, r0
  402c30:	2800      	cmp	r0, #0
  402c32:	d13e      	bne.n	402cb2 <dir_register+0xfa>
		for (n = 1; n < 100; n++) {
  402c34:	3701      	adds	r7, #1
  402c36:	b2bf      	uxth	r7, r7
  402c38:	2f64      	cmp	r7, #100	; 0x64
  402c3a:	d038      	beq.n	402cae <dir_register+0xf6>
	mem_cpy(dst, src, 11);
  402c3c:	220b      	movs	r2, #11
  402c3e:	a905      	add	r1, sp, #20
  402c40:	4628      	mov	r0, r5
  402c42:	47d0      	blx	sl
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  402c44:	2f05      	cmp	r7, #5
  402c46:	d9d9      	bls.n	402bfc <dir_register+0x44>
  402c48:	463b      	mov	r3, r7
  402c4a:	4659      	mov	r1, fp
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  402c4c:	03da      	lsls	r2, r3, #15
  402c4e:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  402c52:	f831 2b02 	ldrh.w	r2, [r1], #2
  402c56:	fa12 f383 	uxtah	r3, r2, r3
  402c5a:	b29b      	uxth	r3, r3
  402c5c:	880a      	ldrh	r2, [r1, #0]
  402c5e:	2a00      	cmp	r2, #0
  402c60:	d1f4      	bne.n	402c4c <dir_register+0x94>
  402c62:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  402c66:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  402c68:	f003 000f 	and.w	r0, r3, #15
  402c6c:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  402c70:	2939      	cmp	r1, #57	; 0x39
  402c72:	bf88      	it	hi
  402c74:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  402c78:	3a01      	subs	r2, #1
  402c7a:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  402c7e:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  402c82:	2b00      	cmp	r3, #0
  402c84:	d1f0      	bne.n	402c68 <dir_register+0xb0>
	ns[i] = '~';
  402c86:	217e      	movs	r1, #126	; 0x7e
  402c88:	ab08      	add	r3, sp, #32
  402c8a:	4413      	add	r3, r2
  402c8c:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  402c90:	2a00      	cmp	r2, #0
  402c92:	d0b5      	beq.n	402c00 <dir_register+0x48>
  402c94:	782b      	ldrb	r3, [r5, #0]
  402c96:	2b20      	cmp	r3, #32
  402c98:	d0b4      	beq.n	402c04 <dir_register+0x4c>
  402c9a:	4629      	mov	r1, r5
  402c9c:	2300      	movs	r3, #0
  402c9e:	3301      	adds	r3, #1
  402ca0:	429a      	cmp	r2, r3
  402ca2:	d0b1      	beq.n	402c08 <dir_register+0x50>
  402ca4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  402ca8:	2820      	cmp	r0, #32
  402caa:	d1f8      	bne.n	402c9e <dir_register+0xe6>
  402cac:	e7ad      	b.n	402c0a <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  402cae:	2607      	movs	r6, #7
  402cb0:	e004      	b.n	402cbc <dir_register+0x104>
  402cb2:	2f64      	cmp	r7, #100	; 0x64
  402cb4:	f000 809f 	beq.w	402df6 <dir_register+0x23e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  402cb8:	2804      	cmp	r0, #4
  402cba:	d003      	beq.n	402cc4 <dir_register+0x10c>
}
  402cbc:	4630      	mov	r0, r6
  402cbe:	b009      	add	sp, #36	; 0x24
  402cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
  402cc4:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402cc8:	72eb      	strb	r3, [r5, #11]
  402cca:	f8c4 b01c 	str.w	fp, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  402cce:	f89d 301f 	ldrb.w	r3, [sp, #31]
  402cd2:	f013 0f02 	tst.w	r3, #2
  402cd6:	d014      	beq.n	402d02 <dir_register+0x14a>
		for (ne = 0; lfn[ne]; ne++) ;
  402cd8:	f8bb 3000 	ldrh.w	r3, [fp]
  402cdc:	b17b      	cbz	r3, 402cfe <dir_register+0x146>
  402cde:	2300      	movs	r3, #0
  402ce0:	3301      	adds	r3, #1
  402ce2:	b29b      	uxth	r3, r3
  402ce4:	f83b 2013 	ldrh.w	r2, [fp, r3, lsl #1]
  402ce8:	2a00      	cmp	r2, #0
  402cea:	d1f9      	bne.n	402ce0 <dir_register+0x128>
		ne = (ne + 25) / 13;
  402cec:	3319      	adds	r3, #25
  402cee:	4f62      	ldr	r7, [pc, #392]	; (402e78 <dir_register+0x2c0>)
  402cf0:	fb87 2703 	smull	r2, r7, r7, r3
  402cf4:	17db      	asrs	r3, r3, #31
  402cf6:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  402cfa:	b2bf      	uxth	r7, r7
  402cfc:	e002      	b.n	402d04 <dir_register+0x14c>
		for (ne = 0; lfn[ne]; ne++) ;
  402cfe:	2300      	movs	r3, #0
  402d00:	e7f4      	b.n	402cec <dir_register+0x134>
		ne = 1;
  402d02:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  402d04:	2100      	movs	r1, #0
  402d06:	4620      	mov	r0, r4
  402d08:	4b5c      	ldr	r3, [pc, #368]	; (402e7c <dir_register+0x2c4>)
  402d0a:	4798      	blx	r3
	if (res != FR_OK) return res;
  402d0c:	4606      	mov	r6, r0
  402d0e:	2800      	cmp	r0, #0
  402d10:	d1d4      	bne.n	402cbc <dir_register+0x104>
  402d12:	f04f 0a00 	mov.w	sl, #0
  402d16:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  402d18:	f8df 816c 	ldr.w	r8, [pc, #364]	; 402e88 <dir_register+0x2d0>
			n = 0;					/* Not a blank entry. Restart to search */
  402d1c:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402d1e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 402e84 <dir_register+0x2cc>
  402d22:	e00a      	b.n	402d3a <dir_register+0x182>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  402d24:	1c6b      	adds	r3, r5, #1
  402d26:	b29b      	uxth	r3, r3
  402d28:	429f      	cmp	r7, r3
  402d2a:	d066      	beq.n	402dfa <dir_register+0x242>
  402d2c:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  402d2e:	2101      	movs	r1, #1
  402d30:	4620      	mov	r0, r4
  402d32:	47c8      	blx	r9
	} while (res == FR_OK);
  402d34:	4606      	mov	r6, r0
  402d36:	2800      	cmp	r0, #0
  402d38:	d1c0      	bne.n	402cbc <dir_register+0x104>
		res = move_window(dj->fs, dj->sect);
  402d3a:	6921      	ldr	r1, [r4, #16]
  402d3c:	6820      	ldr	r0, [r4, #0]
  402d3e:	47c0      	blx	r8
		if (res != FR_OK) break;
  402d40:	4606      	mov	r6, r0
  402d42:	2800      	cmp	r0, #0
  402d44:	d1ba      	bne.n	402cbc <dir_register+0x104>
		c = *dj->dir;				/* Check the entry status */
  402d46:	6963      	ldr	r3, [r4, #20]
  402d48:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  402d4a:	2be5      	cmp	r3, #229	; 0xe5
  402d4c:	d000      	beq.n	402d50 <dir_register+0x198>
  402d4e:	b923      	cbnz	r3, 402d5a <dir_register+0x1a2>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  402d50:	2d00      	cmp	r5, #0
  402d52:	d1e7      	bne.n	402d24 <dir_register+0x16c>
  402d54:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  402d58:	e7e4      	b.n	402d24 <dir_register+0x16c>
			n = 0;					/* Not a blank entry. Restart to search */
  402d5a:	465d      	mov	r5, fp
  402d5c:	e7e7      	b.n	402d2e <dir_register+0x176>
		res = dir_sdi(dj, is);
  402d5e:	4651      	mov	r1, sl
  402d60:	4620      	mov	r0, r4
  402d62:	4b46      	ldr	r3, [pc, #280]	; (402e7c <dir_register+0x2c4>)
  402d64:	4798      	blx	r3
		if (res == FR_OK) {
  402d66:	4606      	mov	r6, r0
  402d68:	2800      	cmp	r0, #0
  402d6a:	d1a7      	bne.n	402cbc <dir_register+0x104>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  402d6c:	69a0      	ldr	r0, [r4, #24]
  402d6e:	4b44      	ldr	r3, [pc, #272]	; (402e80 <dir_register+0x2c8>)
  402d70:	4798      	blx	r3
  402d72:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  402d74:	2700      	movs	r7, #0
	s = wc = 0;
  402d76:	9701      	str	r7, [sp, #4]
  402d78:	e019      	b.n	402dae <dir_register+0x1f6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402d7a:	4671      	mov	r1, lr
  402d7c:	e065      	b.n	402e4a <dir_register+0x292>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  402d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402d82:	4293      	cmp	r3, r2
  402d84:	d002      	beq.n	402d8c <dir_register+0x1d4>
  402d86:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  402d8a:	b90b      	cbnz	r3, 402d90 <dir_register+0x1d8>
  402d8c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  402d90:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  402d94:	6823      	ldr	r3, [r4, #0]
  402d96:	2201      	movs	r2, #1
  402d98:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  402d9a:	4639      	mov	r1, r7
  402d9c:	4620      	mov	r0, r4
  402d9e:	4b39      	ldr	r3, [pc, #228]	; (402e84 <dir_register+0x2cc>)
  402da0:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  402da2:	4606      	mov	r6, r0
  402da4:	2800      	cmp	r0, #0
  402da6:	d189      	bne.n	402cbc <dir_register+0x104>
  402da8:	3d01      	subs	r5, #1
  402daa:	b2ad      	uxth	r5, r5
  402dac:	b33d      	cbz	r5, 402dfe <dir_register+0x246>
				res = move_window(dj->fs, dj->sect);
  402dae:	6921      	ldr	r1, [r4, #16]
  402db0:	6820      	ldr	r0, [r4, #0]
  402db2:	4b35      	ldr	r3, [pc, #212]	; (402e88 <dir_register+0x2d0>)
  402db4:	4798      	blx	r3
				if (res != FR_OK) break;
  402db6:	4606      	mov	r6, r0
  402db8:	2800      	cmp	r0, #0
  402dba:	f47f af7f 	bne.w	402cbc <dir_register+0x104>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  402dbe:	f8d4 901c 	ldr.w	r9, [r4, #28]
  402dc2:	6960      	ldr	r0, [r4, #20]
  402dc4:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  402dc8:	f89d 3000 	ldrb.w	r3, [sp]
  402dcc:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  402dce:	230f      	movs	r3, #15
  402dd0:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  402dd2:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  402dd4:	7687      	strb	r7, [r0, #26]
  402dd6:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  402dd8:	f10b 31ff 	add.w	r1, fp, #4294967295
  402ddc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  402de0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  402de4:	4a29      	ldr	r2, [pc, #164]	; (402e8c <dir_register+0x2d4>)
  402de6:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  402dea:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402dec:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  402df0:	f04f 0aff 	mov.w	sl, #255	; 0xff
  402df4:	e02c      	b.n	402e50 <dir_register+0x298>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  402df6:	2607      	movs	r6, #7
  402df8:	e760      	b.n	402cbc <dir_register+0x104>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  402dfa:	2b01      	cmp	r3, #1
  402dfc:	d8af      	bhi.n	402d5e <dir_register+0x1a6>
		res = move_window(dj->fs, dj->sect);
  402dfe:	6921      	ldr	r1, [r4, #16]
  402e00:	6820      	ldr	r0, [r4, #0]
  402e02:	4b21      	ldr	r3, [pc, #132]	; (402e88 <dir_register+0x2d0>)
  402e04:	4798      	blx	r3
		if (res == FR_OK) {
  402e06:	4606      	mov	r6, r0
  402e08:	2800      	cmp	r0, #0
  402e0a:	f47f af57 	bne.w	402cbc <dir_register+0x104>
			dir = dj->dir;
  402e0e:	6965      	ldr	r5, [r4, #20]
  402e10:	f105 0120 	add.w	r1, r5, #32
	BYTE *d = (BYTE*)dst;
  402e14:	462b      	mov	r3, r5
		*d++ = (BYTE)val;
  402e16:	2200      	movs	r2, #0
  402e18:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt--)
  402e1c:	4299      	cmp	r1, r3
  402e1e:	d1fb      	bne.n	402e18 <dir_register+0x260>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  402e20:	220b      	movs	r2, #11
  402e22:	69a1      	ldr	r1, [r4, #24]
  402e24:	4628      	mov	r0, r5
  402e26:	4b13      	ldr	r3, [pc, #76]	; (402e74 <dir_register+0x2bc>)
  402e28:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  402e2a:	69a3      	ldr	r3, [r4, #24]
  402e2c:	7adb      	ldrb	r3, [r3, #11]
  402e2e:	f003 0318 	and.w	r3, r3, #24
  402e32:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  402e34:	6823      	ldr	r3, [r4, #0]
  402e36:	2201      	movs	r2, #1
  402e38:	711a      	strb	r2, [r3, #4]
  402e3a:	e73f      	b.n	402cbc <dir_register+0x104>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  402e3c:	f892 e000 	ldrb.w	lr, [r2]
  402e40:	f800 a00e 	strb.w	sl, [r0, lr]
  402e44:	4486      	add	lr, r0
  402e46:	f88e a001 	strb.w	sl, [lr, #1]
  402e4a:	3201      	adds	r2, #1
	} while (++s < 13);
  402e4c:	4590      	cmp	r8, r2
  402e4e:	d096      	beq.n	402d7e <dir_register+0x1c6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402e50:	42b3      	cmp	r3, r6
  402e52:	d0f3      	beq.n	402e3c <dir_register+0x284>
  402e54:	f101 0e01 	add.w	lr, r1, #1
  402e58:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  402e5c:	7811      	ldrb	r1, [r2, #0]
  402e5e:	5443      	strb	r3, [r0, r1]
  402e60:	4401      	add	r1, r0
  402e62:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  402e66:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  402e6a:	2b00      	cmp	r3, #0
  402e6c:	d185      	bne.n	402d7a <dir_register+0x1c2>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  402e6e:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  402e70:	4633      	mov	r3, r6
  402e72:	e7ea      	b.n	402e4a <dir_register+0x292>
  402e74:	00401bf1 	.word	0x00401bf1
  402e78:	4ec4ec4f 	.word	0x4ec4ec4f
  402e7c:	004021d9 	.word	0x004021d9
  402e80:	00401c1b 	.word	0x00401c1b
  402e84:	004025b9 	.word	0x004025b9
  402e88:	00402061 	.word	0x00402061
  402e8c:	00408300 	.word	0x00408300
  402e90:	004026f1 	.word	0x004026f1

00402e94 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  402e94:	b108      	cbz	r0, 402e9a <f_mount+0x6>
		return FR_INVALID_DRIVE;
  402e96:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  402e98:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  402e9a:	4b06      	ldr	r3, [pc, #24]	; (402eb4 <f_mount+0x20>)
  402e9c:	681b      	ldr	r3, [r3, #0]
	if (rfs) {
  402e9e:	b10b      	cbz	r3, 402ea4 <f_mount+0x10>
		rfs->fs_type = 0;		/* Clear old fs object */
  402ea0:	2200      	movs	r2, #0
  402ea2:	701a      	strb	r2, [r3, #0]
	if (fs) {
  402ea4:	b109      	cbz	r1, 402eaa <f_mount+0x16>
		fs->fs_type = 0;		/* Clear new fs object */
  402ea6:	2300      	movs	r3, #0
  402ea8:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  402eaa:	4b02      	ldr	r3, [pc, #8]	; (402eb4 <f_mount+0x20>)
  402eac:	6019      	str	r1, [r3, #0]
	return FR_OK;
  402eae:	2000      	movs	r0, #0
  402eb0:	4770      	bx	lr
  402eb2:	bf00      	nop
  402eb4:	20000a10 	.word	0x20000a10

00402eb8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  402eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ebc:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  402ec0:	4605      	mov	r5, r0
  402ec2:	9101      	str	r1, [sp, #4]
  402ec4:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  402ec6:	2300      	movs	r3, #0
  402ec8:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  402eca:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  402ece:	f002 021e 	and.w	r2, r2, #30
  402ed2:	a985      	add	r1, sp, #532	; 0x214
  402ed4:	a801      	add	r0, sp, #4
  402ed6:	4b58      	ldr	r3, [pc, #352]	; (403038 <f_open+0x180>)
  402ed8:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  402eda:	ab82      	add	r3, sp, #520	; 0x208
  402edc:	938b      	str	r3, [sp, #556]	; 0x22c
  402ede:	ab02      	add	r3, sp, #8
  402ee0:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  402ee2:	b140      	cbz	r0, 402ef6 <f_open+0x3e>
  402ee4:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  402ee6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402ee8:	f016 0f1c 	tst.w	r6, #28
  402eec:	d117      	bne.n	402f1e <f_open+0x66>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  402eee:	2b00      	cmp	r3, #0
  402ef0:	f040 8092 	bne.w	403018 <f_open+0x160>
  402ef4:	e00d      	b.n	402f12 <f_open+0x5a>
		res = follow_path(&dj, path);	/* Follow the file path */
  402ef6:	9901      	ldr	r1, [sp, #4]
  402ef8:	a885      	add	r0, sp, #532	; 0x214
  402efa:	4b50      	ldr	r3, [pc, #320]	; (40303c <f_open+0x184>)
  402efc:	4798      	blx	r3
	dir = dj.dir;
  402efe:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
  402f00:	4603      	mov	r3, r0
  402f02:	2800      	cmp	r0, #0
  402f04:	d1f0      	bne.n	402ee8 <f_open+0x30>
		if (!dir)	/* Current dir itself */
  402f06:	2c00      	cmp	r4, #0
  402f08:	f000 808b 	beq.w	403022 <f_open+0x16a>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  402f0c:	f016 0f1c 	tst.w	r6, #28
  402f10:	d116      	bne.n	402f40 <f_open+0x88>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  402f12:	7ae3      	ldrb	r3, [r4, #11]
  402f14:	f013 0f10 	tst.w	r3, #16
  402f18:	d04f      	beq.n	402fba <f_open+0x102>
				res = FR_NO_FILE;
  402f1a:	2304      	movs	r3, #4
  402f1c:	e07c      	b.n	403018 <f_open+0x160>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  402f1e:	2b04      	cmp	r3, #4
  402f20:	d005      	beq.n	402f2e <f_open+0x76>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  402f22:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  402f26:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  402f28:	2b00      	cmp	r3, #0
  402f2a:	d057      	beq.n	402fdc <f_open+0x124>
  402f2c:	e074      	b.n	403018 <f_open+0x160>
				res = dir_register(&dj);
  402f2e:	a885      	add	r0, sp, #532	; 0x214
  402f30:	4b43      	ldr	r3, [pc, #268]	; (403040 <f_open+0x188>)
  402f32:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  402f34:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  402f38:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  402f3a:	4603      	mov	r3, r0
  402f3c:	b138      	cbz	r0, 402f4e <f_open+0x96>
  402f3e:	e06b      	b.n	403018 <f_open+0x160>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  402f40:	7ae3      	ldrb	r3, [r4, #11]
  402f42:	f013 0f11 	tst.w	r3, #17
  402f46:	d173      	bne.n	403030 <f_open+0x178>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  402f48:	f016 0f04 	tst.w	r6, #4
  402f4c:	d172      	bne.n	403034 <f_open+0x17c>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  402f4e:	f017 0f08 	tst.w	r7, #8
  402f52:	d03f      	beq.n	402fd4 <f_open+0x11c>
			dw = get_fattime();					/* Created time */
  402f54:	4b3b      	ldr	r3, [pc, #236]	; (403044 <f_open+0x18c>)
  402f56:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  402f58:	73a0      	strb	r0, [r4, #14]
  402f5a:	f3c0 2307 	ubfx	r3, r0, #8, #8
  402f5e:	73e3      	strb	r3, [r4, #15]
  402f60:	0c03      	lsrs	r3, r0, #16
  402f62:	7423      	strb	r3, [r4, #16]
  402f64:	0e00      	lsrs	r0, r0, #24
  402f66:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  402f68:	2300      	movs	r3, #0
  402f6a:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  402f6c:	7723      	strb	r3, [r4, #28]
  402f6e:	7763      	strb	r3, [r4, #29]
  402f70:	77a3      	strb	r3, [r4, #30]
  402f72:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  402f74:	7d62      	ldrb	r2, [r4, #21]
  402f76:	7d26      	ldrb	r6, [r4, #20]
  402f78:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  402f7c:	7ee1      	ldrb	r1, [r4, #27]
  402f7e:	7ea2      	ldrb	r2, [r4, #26]
  402f80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  402f84:	76a3      	strb	r3, [r4, #26]
  402f86:	76e3      	strb	r3, [r4, #27]
  402f88:	7523      	strb	r3, [r4, #20]
  402f8a:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  402f8c:	9885      	ldr	r0, [sp, #532]	; 0x214
  402f8e:	2301      	movs	r3, #1
  402f90:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  402f92:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  402f96:	d01b      	beq.n	402fd0 <f_open+0x118>
				dw = dj.fs->winsect;
  402f98:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  402f9c:	4631      	mov	r1, r6
  402f9e:	4b2a      	ldr	r3, [pc, #168]	; (403048 <f_open+0x190>)
  402fa0:	4798      	blx	r3
				if (res == FR_OK) {
  402fa2:	4603      	mov	r3, r0
  402fa4:	2800      	cmp	r0, #0
  402fa6:	d137      	bne.n	403018 <f_open+0x160>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  402fa8:	9885      	ldr	r0, [sp, #532]	; 0x214
  402faa:	3e01      	subs	r6, #1
  402fac:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  402fae:	4641      	mov	r1, r8
  402fb0:	4b26      	ldr	r3, [pc, #152]	; (40304c <f_open+0x194>)
  402fb2:	4798      	blx	r3
	if (res == FR_OK) {
  402fb4:	4603      	mov	r3, r0
  402fb6:	b158      	cbz	r0, 402fd0 <f_open+0x118>
  402fb8:	e02e      	b.n	403018 <f_open+0x160>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  402fba:	f016 0f02 	tst.w	r6, #2
  402fbe:	d004      	beq.n	402fca <f_open+0x112>
  402fc0:	f013 0f01 	tst.w	r3, #1
  402fc4:	d001      	beq.n	402fca <f_open+0x112>
					res = FR_DENIED;
  402fc6:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  402fc8:	e026      	b.n	403018 <f_open+0x160>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  402fca:	f016 0f08 	tst.w	r6, #8
  402fce:	d001      	beq.n	402fd4 <f_open+0x11c>
			mode |= FA__WRITTEN;
  402fd0:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  402fd4:	9b85      	ldr	r3, [sp, #532]	; 0x214
  402fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402fd8:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  402fda:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  402fdc:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  402fde:	7d62      	ldrb	r2, [r4, #21]
  402fe0:	7d23      	ldrb	r3, [r4, #20]
  402fe2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  402fe6:	7ee1      	ldrb	r1, [r4, #27]
  402fe8:	7ea3      	ldrb	r3, [r4, #26]
  402fea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  402fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  402ff2:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  402ff4:	7fe2      	ldrb	r2, [r4, #31]
  402ff6:	7fa3      	ldrb	r3, [r4, #30]
  402ff8:	041b      	lsls	r3, r3, #16
  402ffa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  402ffe:	7f22      	ldrb	r2, [r4, #28]
  403000:	4313      	orrs	r3, r2
  403002:	7f62      	ldrb	r2, [r4, #29]
  403004:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  403008:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  40300a:	2300      	movs	r3, #0
  40300c:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  40300e:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  403010:	9a85      	ldr	r2, [sp, #532]	; 0x214
  403012:	602a      	str	r2, [r5, #0]
  403014:	88d2      	ldrh	r2, [r2, #6]
  403016:	80aa      	strh	r2, [r5, #4]
}
  403018:	4618      	mov	r0, r3
  40301a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  40301e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  403022:	f016 0f1c 	tst.w	r6, #28
  403026:	d101      	bne.n	40302c <f_open+0x174>
			res = FR_INVALID_NAME;
  403028:	2306      	movs	r3, #6
  40302a:	e77d      	b.n	402f28 <f_open+0x70>
  40302c:	2306      	movs	r3, #6
  40302e:	e778      	b.n	402f22 <f_open+0x6a>
				res = FR_DENIED;
  403030:	2307      	movs	r3, #7
  403032:	e7f1      	b.n	403018 <f_open+0x160>
					res = FR_EXIST;
  403034:	2308      	movs	r3, #8
  403036:	e7ef      	b.n	403018 <f_open+0x160>
  403038:	00401cfd 	.word	0x00401cfd
  40303c:	0040289d 	.word	0x0040289d
  403040:	00402bb9 	.word	0x00402bb9
  403044:	00401b99 	.word	0x00401b99
  403048:	00402471 	.word	0x00402471
  40304c:	00402061 	.word	0x00402061

00403050 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  403050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403054:	b083      	sub	sp, #12
  403056:	4604      	mov	r4, r0
  403058:	4689      	mov	r9, r1
  40305a:	4616      	mov	r6, r2
  40305c:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  40305e:	2300      	movs	r3, #0
  403060:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  403064:	8881      	ldrh	r1, [r0, #4]
  403066:	6800      	ldr	r0, [r0, #0]
  403068:	4b75      	ldr	r3, [pc, #468]	; (403240 <f_write+0x1f0>)
  40306a:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  40306c:	9001      	str	r0, [sp, #4]
  40306e:	2800      	cmp	r0, #0
  403070:	f040 80e2 	bne.w	403238 <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  403074:	79a3      	ldrb	r3, [r4, #6]
  403076:	f013 0f80 	tst.w	r3, #128	; 0x80
  40307a:	f040 80db 	bne.w	403234 <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  40307e:	f013 0f02 	tst.w	r3, #2
  403082:	d102      	bne.n	40308a <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  403084:	2307      	movs	r3, #7
  403086:	9301      	str	r3, [sp, #4]
  403088:	e0d6      	b.n	403238 <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  40308a:	68e3      	ldr	r3, [r4, #12]
  40308c:	42f3      	cmn	r3, r6
  40308e:	d20f      	bcs.n	4030b0 <f_write+0x60>

	for ( ;  btw;							/* Repeat until all data written */
  403090:	2e00      	cmp	r6, #0
  403092:	d17a      	bne.n	40318a <f_write+0x13a>
  403094:	e00c      	b.n	4030b0 <f_write+0x60>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  403096:	2100      	movs	r1, #0
  403098:	4b6a      	ldr	r3, [pc, #424]	; (403244 <f_write+0x1f4>)
  40309a:	4798      	blx	r3
  40309c:	4603      	mov	r3, r0
  40309e:	6120      	str	r0, [r4, #16]
  4030a0:	e003      	b.n	4030aa <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  4030a2:	6961      	ldr	r1, [r4, #20]
  4030a4:	4b67      	ldr	r3, [pc, #412]	; (403244 <f_write+0x1f4>)
  4030a6:	4798      	blx	r3
  4030a8:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  4030aa:	2b00      	cmp	r3, #0
  4030ac:	f040 8081 	bne.w	4031b2 <f_write+0x162>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  4030b0:	68a3      	ldr	r3, [r4, #8]
  4030b2:	68e2      	ldr	r2, [r4, #12]
  4030b4:	4293      	cmp	r3, r2
  4030b6:	bf88      	it	hi
  4030b8:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  4030ba:	79a3      	ldrb	r3, [r4, #6]
  4030bc:	f043 0320 	orr.w	r3, r3, #32
  4030c0:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  4030c2:	e0b9      	b.n	403238 <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4030c4:	79a3      	ldrb	r3, [r4, #6]
  4030c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4030ca:	71a3      	strb	r3, [r4, #6]
  4030cc:	2302      	movs	r3, #2
  4030ce:	9301      	str	r3, [sp, #4]
  4030d0:	e0b2      	b.n	403238 <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4030d2:	79a3      	ldrb	r3, [r4, #6]
  4030d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4030d8:	71a3      	strb	r3, [r4, #6]
  4030da:	2301      	movs	r3, #1
  4030dc:	9301      	str	r3, [sp, #4]
  4030de:	e0ab      	b.n	403238 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  4030e0:	6820      	ldr	r0, [r4, #0]
  4030e2:	2301      	movs	r3, #1
  4030e4:	69a2      	ldr	r2, [r4, #24]
  4030e6:	f104 0124 	add.w	r1, r4, #36	; 0x24
  4030ea:	7840      	ldrb	r0, [r0, #1]
  4030ec:	4d56      	ldr	r5, [pc, #344]	; (403248 <f_write+0x1f8>)
  4030ee:	47a8      	blx	r5
  4030f0:	b920      	cbnz	r0, 4030fc <f_write+0xac>
				fp->flag &= ~FA__DIRTY;
  4030f2:	79a3      	ldrb	r3, [r4, #6]
  4030f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  4030f8:	71a3      	strb	r3, [r4, #6]
  4030fa:	e064      	b.n	4031c6 <f_write+0x176>
					ABORT(fp->fs, FR_DISK_ERR);
  4030fc:	79a3      	ldrb	r3, [r4, #6]
  4030fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403102:	71a3      	strb	r3, [r4, #6]
  403104:	2301      	movs	r3, #1
  403106:	9301      	str	r3, [sp, #4]
  403108:	e096      	b.n	403238 <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  40310a:	79a3      	ldrb	r3, [r4, #6]
  40310c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403110:	71a3      	strb	r3, [r4, #6]
  403112:	2302      	movs	r3, #2
  403114:	9301      	str	r3, [sp, #4]
  403116:	e08f      	b.n	403238 <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  403118:	79a3      	ldrb	r3, [r4, #6]
  40311a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40311e:	71a3      	strb	r3, [r4, #6]
  403120:	2301      	movs	r3, #1
  403122:	9301      	str	r3, [sp, #4]
  403124:	e088      	b.n	403238 <f_write+0x1e8>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  403126:	f44f 7200 	mov.w	r2, #512	; 0x200
  40312a:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  40312e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  403132:	4b46      	ldr	r3, [pc, #280]	; (40324c <f_write+0x1fc>)
  403134:	4798      	blx	r3
					fp->flag &= ~FA__DIRTY;
  403136:	79a3      	ldrb	r3, [r4, #6]
  403138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40313c:	71a3      	strb	r3, [r4, #6]
  40313e:	e065      	b.n	40320c <f_write+0x1bc>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
  403140:	69a3      	ldr	r3, [r4, #24]
  403142:	429d      	cmp	r5, r3
  403144:	d003      	beq.n	40314e <f_write+0xfe>
				if (fp->fptr < fp->fsize &&
  403146:	68a2      	ldr	r2, [r4, #8]
  403148:	68e3      	ldr	r3, [r4, #12]
  40314a:	429a      	cmp	r2, r3
  40314c:	d361      	bcc.n	403212 <f_write+0x1c2>
			fp->dsect = sect;
  40314e:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  403150:	68a0      	ldr	r0, [r4, #8]
  403152:	f3c0 0008 	ubfx	r0, r0, #0, #9
  403156:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
  40315a:	42b5      	cmp	r5, r6
  40315c:	bf28      	it	cs
  40315e:	4635      	movcs	r5, r6
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  403160:	3024      	adds	r0, #36	; 0x24
  403162:	462a      	mov	r2, r5
  403164:	4649      	mov	r1, r9
  403166:	4420      	add	r0, r4
  403168:	4b38      	ldr	r3, [pc, #224]	; (40324c <f_write+0x1fc>)
  40316a:	4798      	blx	r3
		fp->flag |= FA__DIRTY;
  40316c:	79a3      	ldrb	r3, [r4, #6]
  40316e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403172:	71a3      	strb	r3, [r4, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  403174:	44a9      	add	r9, r5
  403176:	68a3      	ldr	r3, [r4, #8]
  403178:	442b      	add	r3, r5
  40317a:	60a3      	str	r3, [r4, #8]
  40317c:	f8d8 3000 	ldr.w	r3, [r8]
  403180:	442b      	add	r3, r5
  403182:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  403186:	1b76      	subs	r6, r6, r5
  403188:	d092      	beq.n	4030b0 <f_write+0x60>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  40318a:	68a2      	ldr	r2, [r4, #8]
  40318c:	f3c2 0308 	ubfx	r3, r2, #0, #9
  403190:	2b00      	cmp	r3, #0
  403192:	d1dd      	bne.n	403150 <f_write+0x100>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  403194:	6820      	ldr	r0, [r4, #0]
  403196:	7883      	ldrb	r3, [r0, #2]
  403198:	3b01      	subs	r3, #1
  40319a:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  40319e:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  4031a2:	d10c      	bne.n	4031be <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
  4031a4:	2a00      	cmp	r2, #0
  4031a6:	f47f af7c 	bne.w	4030a2 <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  4031aa:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  4031ac:	2b00      	cmp	r3, #0
  4031ae:	f43f af72 	beq.w	403096 <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4031b2:	2b01      	cmp	r3, #1
  4031b4:	d086      	beq.n	4030c4 <f_write+0x74>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4031b6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4031ba:	d08a      	beq.n	4030d2 <f_write+0x82>
				fp->clust = clst;			/* Update current cluster */
  4031bc:	6163      	str	r3, [r4, #20]
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
  4031be:	79a3      	ldrb	r3, [r4, #6]
  4031c0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4031c4:	d18c      	bne.n	4030e0 <f_write+0x90>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  4031c6:	f8d4 a000 	ldr.w	sl, [r4]
  4031ca:	6961      	ldr	r1, [r4, #20]
  4031cc:	4650      	mov	r0, sl
  4031ce:	4b20      	ldr	r3, [pc, #128]	; (403250 <f_write+0x200>)
  4031d0:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  4031d2:	4605      	mov	r5, r0
  4031d4:	2800      	cmp	r0, #0
  4031d6:	d098      	beq.n	40310a <f_write+0xba>
			sect += csect;
  4031d8:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  4031da:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  4031de:	d0af      	beq.n	403140 <f_write+0xf0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  4031e0:	f89a 3002 	ldrb.w	r3, [sl, #2]
  4031e4:	eb07 020b 	add.w	r2, r7, fp
  4031e8:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  4031ea:	bf88      	it	hi
  4031ec:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  4031f0:	fa5f f38b 	uxtb.w	r3, fp
  4031f4:	462a      	mov	r2, r5
  4031f6:	4649      	mov	r1, r9
  4031f8:	f89a 0001 	ldrb.w	r0, [sl, #1]
  4031fc:	4f12      	ldr	r7, [pc, #72]	; (403248 <f_write+0x1f8>)
  4031fe:	47b8      	blx	r7
  403200:	2800      	cmp	r0, #0
  403202:	d189      	bne.n	403118 <f_write+0xc8>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  403204:	69a1      	ldr	r1, [r4, #24]
  403206:	1b49      	subs	r1, r1, r5
  403208:	458b      	cmp	fp, r1
  40320a:	d88c      	bhi.n	403126 <f_write+0xd6>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  40320c:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  403210:	e7b0      	b.n	403174 <f_write+0x124>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  403212:	2301      	movs	r3, #1
  403214:	462a      	mov	r2, r5
  403216:	f104 0124 	add.w	r1, r4, #36	; 0x24
  40321a:	f89a 0001 	ldrb.w	r0, [sl, #1]
  40321e:	4f0d      	ldr	r7, [pc, #52]	; (403254 <f_write+0x204>)
  403220:	47b8      	blx	r7
				if (fp->fptr < fp->fsize &&
  403222:	2800      	cmp	r0, #0
  403224:	d093      	beq.n	40314e <f_write+0xfe>
						ABORT(fp->fs, FR_DISK_ERR);
  403226:	79a3      	ldrb	r3, [r4, #6]
  403228:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40322c:	71a3      	strb	r3, [r4, #6]
  40322e:	2301      	movs	r3, #1
  403230:	9301      	str	r3, [sp, #4]
  403232:	e001      	b.n	403238 <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  403234:	2302      	movs	r3, #2
  403236:	9301      	str	r3, [sp, #4]
}
  403238:	9801      	ldr	r0, [sp, #4]
  40323a:	b003      	add	sp, #12
  40323c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403240:	00401c39 	.word	0x00401c39
  403244:	004023b1 	.word	0x004023b1
  403248:	00401ab9 	.word	0x00401ab9
  40324c:	00401bf1 	.word	0x00401bf1
  403250:	00401c05 	.word	0x00401c05
  403254:	00401a49 	.word	0x00401a49

00403258 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  403258:	b538      	push	{r3, r4, r5, lr}
  40325a:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  40325c:	8881      	ldrh	r1, [r0, #4]
  40325e:	6800      	ldr	r0, [r0, #0]
  403260:	4b28      	ldr	r3, [pc, #160]	; (403304 <f_sync+0xac>)
  403262:	4798      	blx	r3
	if (res == FR_OK) {
  403264:	4603      	mov	r3, r0
  403266:	b9d0      	cbnz	r0, 40329e <f_sync+0x46>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  403268:	79a2      	ldrb	r2, [r4, #6]
  40326a:	f012 0f20 	tst.w	r2, #32
  40326e:	d016      	beq.n	40329e <f_sync+0x46>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
  403270:	f012 0f40 	tst.w	r2, #64	; 0x40
  403274:	d00d      	beq.n	403292 <f_sync+0x3a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  403276:	6820      	ldr	r0, [r4, #0]
  403278:	2301      	movs	r3, #1
  40327a:	69a2      	ldr	r2, [r4, #24]
  40327c:	f104 0124 	add.w	r1, r4, #36	; 0x24
  403280:	7840      	ldrb	r0, [r0, #1]
  403282:	4d21      	ldr	r5, [pc, #132]	; (403308 <f_sync+0xb0>)
  403284:	47a8      	blx	r5
  403286:	2800      	cmp	r0, #0
  403288:	d139      	bne.n	4032fe <f_sync+0xa6>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
  40328a:	79a3      	ldrb	r3, [r4, #6]
  40328c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  403290:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  403292:	69e1      	ldr	r1, [r4, #28]
  403294:	6820      	ldr	r0, [r4, #0]
  403296:	4b1d      	ldr	r3, [pc, #116]	; (40330c <f_sync+0xb4>)
  403298:	4798      	blx	r3
			if (res == FR_OK) {
  40329a:	4603      	mov	r3, r0
  40329c:	b108      	cbz	r0, 4032a2 <f_sync+0x4a>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  40329e:	4618      	mov	r0, r3
  4032a0:	bd38      	pop	{r3, r4, r5, pc}
				dir = fp->dir_ptr;
  4032a2:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  4032a4:	7aeb      	ldrb	r3, [r5, #11]
  4032a6:	f043 0320 	orr.w	r3, r3, #32
  4032aa:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  4032ac:	68e3      	ldr	r3, [r4, #12]
  4032ae:	772b      	strb	r3, [r5, #28]
  4032b0:	89a3      	ldrh	r3, [r4, #12]
  4032b2:	0a1b      	lsrs	r3, r3, #8
  4032b4:	776b      	strb	r3, [r5, #29]
  4032b6:	89e3      	ldrh	r3, [r4, #14]
  4032b8:	77ab      	strb	r3, [r5, #30]
  4032ba:	7be3      	ldrb	r3, [r4, #15]
  4032bc:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  4032be:	6923      	ldr	r3, [r4, #16]
  4032c0:	76ab      	strb	r3, [r5, #26]
  4032c2:	8a23      	ldrh	r3, [r4, #16]
  4032c4:	0a1b      	lsrs	r3, r3, #8
  4032c6:	76eb      	strb	r3, [r5, #27]
  4032c8:	8a63      	ldrh	r3, [r4, #18]
  4032ca:	752b      	strb	r3, [r5, #20]
  4032cc:	8a63      	ldrh	r3, [r4, #18]
  4032ce:	0a1b      	lsrs	r3, r3, #8
  4032d0:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  4032d2:	4b0f      	ldr	r3, [pc, #60]	; (403310 <f_sync+0xb8>)
  4032d4:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  4032d6:	75a8      	strb	r0, [r5, #22]
  4032d8:	f3c0 2307 	ubfx	r3, r0, #8, #8
  4032dc:	75eb      	strb	r3, [r5, #23]
  4032de:	0c03      	lsrs	r3, r0, #16
  4032e0:	762b      	strb	r3, [r5, #24]
  4032e2:	0e00      	lsrs	r0, r0, #24
  4032e4:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  4032e6:	79a3      	ldrb	r3, [r4, #6]
  4032e8:	f023 0320 	bic.w	r3, r3, #32
  4032ec:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  4032ee:	6823      	ldr	r3, [r4, #0]
  4032f0:	2201      	movs	r2, #1
  4032f2:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  4032f4:	6820      	ldr	r0, [r4, #0]
  4032f6:	4b07      	ldr	r3, [pc, #28]	; (403314 <f_sync+0xbc>)
  4032f8:	4798      	blx	r3
  4032fa:	4603      	mov	r3, r0
  4032fc:	e7cf      	b.n	40329e <f_sync+0x46>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
  4032fe:	2301      	movs	r3, #1
  403300:	e7cd      	b.n	40329e <f_sync+0x46>
  403302:	bf00      	nop
  403304:	00401c39 	.word	0x00401c39
  403308:	00401ab9 	.word	0x00401ab9
  40330c:	00402061 	.word	0x00402061
  403310:	00401b99 	.word	0x00401b99
  403314:	004024ed 	.word	0x004024ed

00403318 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  403318:	b510      	push	{r4, lr}
  40331a:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  40331c:	4b03      	ldr	r3, [pc, #12]	; (40332c <f_close+0x14>)
  40331e:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  403320:	4603      	mov	r3, r0
  403322:	b908      	cbnz	r0, 403328 <f_close+0x10>
  403324:	2200      	movs	r2, #0
  403326:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  403328:	4618      	mov	r0, r3
  40332a:	bd10      	pop	{r4, pc}
  40332c:	00403259 	.word	0x00403259

00403330 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  403330:	b510      	push	{r4, lr}
  403332:	b082      	sub	sp, #8
  403334:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  403336:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  40333a:	ab01      	add	r3, sp, #4
  40333c:	2201      	movs	r2, #1
  40333e:	4669      	mov	r1, sp
  403340:	4620      	mov	r0, r4
  403342:	4c05      	ldr	r4, [pc, #20]	; (403358 <f_putc+0x28>)
  403344:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  403346:	9b01      	ldr	r3, [sp, #4]
  403348:	2b01      	cmp	r3, #1
}
  40334a:	bf0c      	ite	eq
  40334c:	2001      	moveq	r0, #1
  40334e:	f04f 30ff 	movne.w	r0, #4294967295
  403352:	b002      	add	sp, #8
  403354:	bd10      	pop	{r4, pc}
  403356:	bf00      	nop
  403358:	00403051 	.word	0x00403051

0040335c <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  40335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  40335e:	7803      	ldrb	r3, [r0, #0]
  403360:	b17b      	cbz	r3, 403382 <f_puts+0x26>
  403362:	460e      	mov	r6, r1
  403364:	4605      	mov	r5, r0
  403366:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  403368:	4f07      	ldr	r7, [pc, #28]	; (403388 <f_puts+0x2c>)
  40336a:	4631      	mov	r1, r6
  40336c:	4618      	mov	r0, r3
  40336e:	47b8      	blx	r7
  403370:	f1b0 3fff 	cmp.w	r0, #4294967295
  403374:	d006      	beq.n	403384 <f_puts+0x28>
  403376:	1b60      	subs	r0, r4, r5
	for (n = 0; *str; str++, n++) {
  403378:	f814 3b01 	ldrb.w	r3, [r4], #1
  40337c:	2b00      	cmp	r3, #0
  40337e:	d1f4      	bne.n	40336a <f_puts+0xe>
  403380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403382:	2000      	movs	r0, #0
	}
	return n;
}
  403384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403386:	bf00      	nop
  403388:	00403331 	.word	0x00403331

0040338c <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  40338c:	287f      	cmp	r0, #127	; 0x7f
  40338e:	d919      	bls.n	4033c4 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  403390:	b971      	cbnz	r1, 4033b0 <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  403392:	28c7      	cmp	r0, #199	; 0xc7
  403394:	d013      	beq.n	4033be <ff_convert+0x32>
  403396:	4a0c      	ldr	r2, [pc, #48]	; (4033c8 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  403398:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  40339a:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  40339e:	4281      	cmp	r1, r0
  4033a0:	d003      	beq.n	4033aa <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  4033a2:	3301      	adds	r3, #1
  4033a4:	b29b      	uxth	r3, r3
  4033a6:	2b80      	cmp	r3, #128	; 0x80
  4033a8:	d1f7      	bne.n	40339a <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  4033aa:	3380      	adds	r3, #128	; 0x80
  4033ac:	b2d8      	uxtb	r0, r3
  4033ae:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4033b0:	28ff      	cmp	r0, #255	; 0xff
  4033b2:	d806      	bhi.n	4033c2 <ff_convert+0x36>
  4033b4:	3880      	subs	r0, #128	; 0x80
  4033b6:	4b04      	ldr	r3, [pc, #16]	; (4033c8 <ff_convert+0x3c>)
  4033b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  4033bc:	4770      	bx	lr
				if (src == Tbl[c]) break;
  4033be:	2300      	movs	r3, #0
  4033c0:	e7f3      	b.n	4033aa <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  4033c2:	2000      	movs	r0, #0
		}
	}

	return c;
}
  4033c4:	4770      	bx	lr
  4033c6:	bf00      	nop
  4033c8:	004083a4 	.word	0x004083a4

004033cc <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  4033cc:	2861      	cmp	r0, #97	; 0x61
  4033ce:	d010      	beq.n	4033f2 <ff_wtoupper+0x26>
  4033d0:	4909      	ldr	r1, [pc, #36]	; (4033f8 <ff_wtoupper+0x2c>)
  4033d2:	2201      	movs	r2, #1
  4033d4:	2362      	movs	r3, #98	; 0x62
  4033d6:	4298      	cmp	r0, r3
  4033d8:	d005      	beq.n	4033e6 <ff_wtoupper+0x1a>
  4033da:	3201      	adds	r2, #1
  4033dc:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  4033e0:	2b00      	cmp	r3, #0
  4033e2:	d1f8      	bne.n	4033d6 <ff_wtoupper+0xa>
  4033e4:	e003      	b.n	4033ee <ff_wtoupper+0x22>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  4033e6:	b118      	cbz	r0, 4033f0 <ff_wtoupper+0x24>
  4033e8:	4b04      	ldr	r3, [pc, #16]	; (4033fc <ff_wtoupper+0x30>)
  4033ea:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  4033ee:	4770      	bx	lr
  4033f0:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  4033f2:	2200      	movs	r2, #0
  4033f4:	e7f8      	b.n	4033e8 <ff_wtoupper+0x1c>
  4033f6:	bf00      	nop
  4033f8:	004084a6 	.word	0x004084a6
  4033fc:	00408684 	.word	0x00408684

00403400 <WaitForSDCard>:
    ;
}

//Waits until SD Card is inserted
void WaitForSDCard(void)
{
  403400:	b570      	push	{r4, r5, r6, lr}

  //Wait until SD stack initialized and SD card inserted
  do
  {
    //Check if stack ready
    status = sd_mmc_test_unit_ready(0);
  403402:	2400      	movs	r4, #0
  403404:	4e06      	ldr	r6, [pc, #24]	; (403420 <WaitForSDCard+0x20>)
    if (status == CTRL_FAIL)
    {
      //Wait for a card to be inserted
      while (sd_mmc_check(0) != CTRL_NO_PRESENT)
  403406:	4d07      	ldr	r5, [pc, #28]	; (403424 <WaitForSDCard+0x24>)
  403408:	e003      	b.n	403412 <WaitForSDCard+0x12>
  40340a:	4620      	mov	r0, r4
  40340c:	47a8      	blx	r5
  40340e:	2802      	cmp	r0, #2
  403410:	d1fb      	bne.n	40340a <WaitForSDCard+0xa>
    status = sd_mmc_test_unit_ready(0);
  403412:	4620      	mov	r0, r4
  403414:	47b0      	blx	r6
    if (status == CTRL_FAIL)
  403416:	2801      	cmp	r0, #1
  403418:	d0f7      	beq.n	40340a <WaitForSDCard+0xa>
      {
        //Use a timeout here for real projects.
      }
    }
  } while (status != CTRL_GOOD);
  40341a:	2800      	cmp	r0, #0
  40341c:	d1f9      	bne.n	403412 <WaitForSDCard+0x12>
}
  40341e:	bd70      	pop	{r4, r5, r6, pc}
  403420:	00400dd5 	.word	0x00400dd5
  403424:	0040028d 	.word	0x0040028d

00403428 <SetupPeripherals>:

//Initialize MCU Peripherals
void SetupPeripherals(void)
{
  403428:	b570      	push	{r4, r5, r6, lr}
  40342a:	b082      	sub	sp, #8
  //Disable watchdog timer
	board_init();
  40342c:	4b13      	ldr	r3, [pc, #76]	; (40347c <SetupPeripherals+0x54>)
  40342e:	4798      	blx	r3
  403430:	2009      	movs	r0, #9
  403432:	4b13      	ldr	r3, [pc, #76]	; (403480 <SetupPeripherals+0x58>)
  403434:	4798      	blx	r3

  //Enable PIOA clock to detect Card Detect (CD) change
  sysclk_enable_peripheral_clock(ID_PIOA);

  //Configure SD card pins as per MCI peripheral (periph C)
  pio_set_peripheral(PIOA, PIO_PERIPH_C, PIO_PA30C_MCDA0 |     //MCI Data 0
  403436:	4c13      	ldr	r4, [pc, #76]	; (403484 <SetupPeripherals+0x5c>)
  403438:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
  40343c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  403440:	4620      	mov	r0, r4
  403442:	4b11      	ldr	r3, [pc, #68]	; (403488 <SetupPeripherals+0x60>)
  403444:	4798      	blx	r3
                                             PIO_PA26C_MCDA2 | //MCI Data 2
                                             PIO_PA27C_MCDA3 | //MCI Data 3
                                             PIO_PA28C_MCCDA | //MCI Command
                                             PIO_PA29C_MCCK);  //MCI Clock
  //SD Card Detect Pin (active low)
  pio_set_input(PIOA, PIO_PA6, PIO_INPUT | PIO_PULLUP);
  403446:	4a11      	ldr	r2, [pc, #68]	; (40348c <SetupPeripherals+0x64>)
  403448:	2140      	movs	r1, #64	; 0x40
  40344a:	4620      	mov	r0, r4
  40344c:	4b10      	ldr	r3, [pc, #64]	; (403490 <SetupPeripherals+0x68>)
  40344e:	4798      	blx	r3

  //Configure LEDs for status update
  pio_set_output(PIOA, PIO_PA19, PIO_TYPE_PIO_OUTPUT_0, PIO_DEFAULT, PIO_DEFAULT);
  403450:	2500      	movs	r5, #0
  403452:	9500      	str	r5, [sp, #0]
  403454:	462b      	mov	r3, r5
  403456:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  40345a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40345e:	4620      	mov	r0, r4
  403460:	4e0c      	ldr	r6, [pc, #48]	; (403494 <SetupPeripherals+0x6c>)
  403462:	47b0      	blx	r6
  pio_set_output(PIOA, PIO_PA20, PIO_TYPE_PIO_OUTPUT_0, PIO_DEFAULT, PIO_DEFAULT);
  403464:	9500      	str	r5, [sp, #0]
  403466:	462b      	mov	r3, r5
  403468:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  40346c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  403470:	4620      	mov	r0, r4
  403472:	47b0      	blx	r6

  //Initialize SD MMC stack
  sd_mmc_init();
  403474:	4b08      	ldr	r3, [pc, #32]	; (403498 <SetupPeripherals+0x70>)
  403476:	4798      	blx	r3
}
  403478:	b002      	add	sp, #8
  40347a:	bd70      	pop	{r4, r5, r6, pc}
  40347c:	00401035 	.word	0x00401035
  403480:	00403875 	.word	0x00403875
  403484:	400e0e00 	.word	0x400e0e00
  403488:	0040367d 	.word	0x0040367d
  40348c:	28000001 	.word	0x28000001
  403490:	0040370f 	.word	0x0040370f
  403494:	00403741 	.word	0x00403741
  403498:	0040026d 	.word	0x0040026d

0040349c <main>:
{
  40349c:	b530      	push	{r4, r5, lr}
  40349e:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
  const char test_file_name[] = "0:sam_arm_sd.txt";
  4034a2:	ac01      	add	r4, sp, #4
  4034a4:	4d1b      	ldr	r5, [pc, #108]	; (403514 <main+0x78>)
  4034a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4034a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4034aa:	682b      	ldr	r3, [r5, #0]
  4034ac:	7023      	strb	r3, [r4, #0]
  sysclk_init();
  4034ae:	4b1a      	ldr	r3, [pc, #104]	; (403518 <main+0x7c>)
  4034b0:	4798      	blx	r3
  SetupPeripherals();
  4034b2:	4b1a      	ldr	r3, [pc, #104]	; (40351c <main+0x80>)
  4034b4:	4798      	blx	r3
  WaitForSDCard();
  4034b6:	4b1a      	ldr	r3, [pc, #104]	; (403520 <main+0x84>)
  4034b8:	4798      	blx	r3
  pio_set_pin_low(PIO_PA19_IDX); //indicate card detected
  4034ba:	2013      	movs	r0, #19
  4034bc:	4b19      	ldr	r3, [pc, #100]	; (403524 <main+0x88>)
  4034be:	4798      	blx	r3
  memset(&fs, 0, sizeof(FATFS)); //initially clear it
  4034c0:	f44f 720c 	mov.w	r2, #560	; 0x230
  4034c4:	2100      	movs	r1, #0
  4034c6:	a896      	add	r0, sp, #600	; 0x258
  4034c8:	4b17      	ldr	r3, [pc, #92]	; (403528 <main+0x8c>)
  4034ca:	4798      	blx	r3
  if (f_mount(LUN_ID_SD_MMC_0_MEM, &fs) != FR_OK)
  4034cc:	a996      	add	r1, sp, #600	; 0x258
  4034ce:	2000      	movs	r0, #0
  4034d0:	4b16      	ldr	r3, [pc, #88]	; (40352c <main+0x90>)
  4034d2:	4798      	blx	r3
  4034d4:	b118      	cbz	r0, 4034de <main+0x42>
}
  4034d6:	2000      	movs	r0, #0
  4034d8:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
  4034dc:	bd30      	pop	{r4, r5, pc}
  if (f_open(&fhandle, test_file_name, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
  4034de:	220a      	movs	r2, #10
  4034e0:	a901      	add	r1, sp, #4
  4034e2:	a80d      	add	r0, sp, #52	; 0x34
  4034e4:	4b12      	ldr	r3, [pc, #72]	; (403530 <main+0x94>)
  4034e6:	4798      	blx	r3
  4034e8:	b100      	cbz	r0, 4034ec <main+0x50>
  4034ea:	e7fe      	b.n	4034ea <main+0x4e>
    uint32_t cap = sd_mmc_get_capacity(0);
  4034ec:	4b11      	ldr	r3, [pc, #68]	; (403534 <main+0x98>)
  4034ee:	4798      	blx	r3
    sprintf(buf, "Capacity: %lu\n", cap);
  4034f0:	4602      	mov	r2, r0
  4034f2:	4911      	ldr	r1, [pc, #68]	; (403538 <main+0x9c>)
  4034f4:	a806      	add	r0, sp, #24
  4034f6:	4b11      	ldr	r3, [pc, #68]	; (40353c <main+0xa0>)
  4034f8:	4798      	blx	r3
    if (f_puts(buf, &fhandle) != 0) //# chars written
  4034fa:	a90d      	add	r1, sp, #52	; 0x34
  4034fc:	a806      	add	r0, sp, #24
  4034fe:	4b10      	ldr	r3, [pc, #64]	; (403540 <main+0xa4>)
  403500:	4798      	blx	r3
  403502:	b110      	cbz	r0, 40350a <main+0x6e>
      pio_set_pin_low(PIO_PA20_IDX); //success LED
  403504:	2014      	movs	r0, #20
  403506:	4b07      	ldr	r3, [pc, #28]	; (403524 <main+0x88>)
  403508:	4798      	blx	r3
    f_close(&fhandle);
  40350a:	a80d      	add	r0, sp, #52	; 0x34
  40350c:	4b0d      	ldr	r3, [pc, #52]	; (403544 <main+0xa8>)
  40350e:	4798      	blx	r3
  403510:	e7eb      	b.n	4034ea <main+0x4e>
  403512:	bf00      	nop
  403514:	00408874 	.word	0x00408874
  403518:	00403549 	.word	0x00403549
  40351c:	00403429 	.word	0x00403429
  403520:	00403401 	.word	0x00403401
  403524:	00403771 	.word	0x00403771
  403528:	00403919 	.word	0x00403919
  40352c:	00402e95 	.word	0x00402e95
  403530:	00402eb9 	.word	0x00402eb9
  403534:	00400b31 	.word	0x00400b31
  403538:	00408864 	.word	0x00408864
  40353c:	004039b5 	.word	0x004039b5
  403540:	0040335d 	.word	0x0040335d
  403544:	00403319 	.word	0x00403319

00403548 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403548:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40354a:	480e      	ldr	r0, [pc, #56]	; (403584 <sysclk_init+0x3c>)
  40354c:	4b0e      	ldr	r3, [pc, #56]	; (403588 <sysclk_init+0x40>)
  40354e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403550:	213e      	movs	r1, #62	; 0x3e
  403552:	2000      	movs	r0, #0
  403554:	4b0d      	ldr	r3, [pc, #52]	; (40358c <sysclk_init+0x44>)
  403556:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403558:	4c0d      	ldr	r4, [pc, #52]	; (403590 <sysclk_init+0x48>)
  40355a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40355c:	2800      	cmp	r0, #0
  40355e:	d0fc      	beq.n	40355a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  403560:	4b0c      	ldr	r3, [pc, #48]	; (403594 <sysclk_init+0x4c>)
  403562:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403564:	4a0c      	ldr	r2, [pc, #48]	; (403598 <sysclk_init+0x50>)
  403566:	4b0d      	ldr	r3, [pc, #52]	; (40359c <sysclk_init+0x54>)
  403568:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40356a:	4c0d      	ldr	r4, [pc, #52]	; (4035a0 <sysclk_init+0x58>)
  40356c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40356e:	2800      	cmp	r0, #0
  403570:	d0fc      	beq.n	40356c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403572:	2010      	movs	r0, #16
  403574:	4b0b      	ldr	r3, [pc, #44]	; (4035a4 <sysclk_init+0x5c>)
  403576:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403578:	4b0b      	ldr	r3, [pc, #44]	; (4035a8 <sysclk_init+0x60>)
  40357a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40357c:	480b      	ldr	r0, [pc, #44]	; (4035ac <sysclk_init+0x64>)
  40357e:	4b02      	ldr	r3, [pc, #8]	; (403588 <sysclk_init+0x40>)
  403580:	4798      	blx	r3
  403582:	bd10      	pop	{r4, pc}
  403584:	07270e00 	.word	0x07270e00
  403588:	00401941 	.word	0x00401941
  40358c:	004037f1 	.word	0x004037f1
  403590:	00403845 	.word	0x00403845
  403594:	00403855 	.word	0x00403855
  403598:	200f3f01 	.word	0x200f3f01
  40359c:	400e0400 	.word	0x400e0400
  4035a0:	00403865 	.word	0x00403865
  4035a4:	0040378d 	.word	0x0040378d
  4035a8:	00401835 	.word	0x00401835
  4035ac:	05b8d800 	.word	0x05b8d800

004035b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4035b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4035b4:	4681      	mov	r9, r0
  4035b6:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4035b8:	4b12      	ldr	r3, [pc, #72]	; (403604 <pio_handler_process+0x54>)
  4035ba:	4798      	blx	r3
  4035bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4035be:	4648      	mov	r0, r9
  4035c0:	4b11      	ldr	r3, [pc, #68]	; (403608 <pio_handler_process+0x58>)
  4035c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4035c4:	4005      	ands	r5, r0
  4035c6:	d013      	beq.n	4035f0 <pio_handler_process+0x40>
  4035c8:	4c10      	ldr	r4, [pc, #64]	; (40360c <pio_handler_process+0x5c>)
  4035ca:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4035ce:	e003      	b.n	4035d8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4035d0:	42b4      	cmp	r4, r6
  4035d2:	d00d      	beq.n	4035f0 <pio_handler_process+0x40>
  4035d4:	3410      	adds	r4, #16
		while (status != 0) {
  4035d6:	b15d      	cbz	r5, 4035f0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4035d8:	6820      	ldr	r0, [r4, #0]
  4035da:	42b8      	cmp	r0, r7
  4035dc:	d1f8      	bne.n	4035d0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4035de:	6861      	ldr	r1, [r4, #4]
  4035e0:	4229      	tst	r1, r5
  4035e2:	d0f5      	beq.n	4035d0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4035e4:	68e3      	ldr	r3, [r4, #12]
  4035e6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4035e8:	6863      	ldr	r3, [r4, #4]
  4035ea:	ea25 0503 	bic.w	r5, r5, r3
  4035ee:	e7ef      	b.n	4035d0 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4035f0:	4b07      	ldr	r3, [pc, #28]	; (403610 <pio_handler_process+0x60>)
  4035f2:	681b      	ldr	r3, [r3, #0]
  4035f4:	b123      	cbz	r3, 403600 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4035f6:	4b07      	ldr	r3, [pc, #28]	; (403614 <pio_handler_process+0x64>)
  4035f8:	681b      	ldr	r3, [r3, #0]
  4035fa:	b10b      	cbz	r3, 403600 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4035fc:	4648      	mov	r0, r9
  4035fe:	4798      	blx	r3
  403600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403604:	00403769 	.word	0x00403769
  403608:	0040376d 	.word	0x0040376d
  40360c:	20000a18 	.word	0x20000a18
  403610:	20000ac0 	.word	0x20000ac0
  403614:	20000a88 	.word	0x20000a88

00403618 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  403618:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40361a:	2109      	movs	r1, #9
  40361c:	4801      	ldr	r0, [pc, #4]	; (403624 <PIOA_Handler+0xc>)
  40361e:	4b02      	ldr	r3, [pc, #8]	; (403628 <PIOA_Handler+0x10>)
  403620:	4798      	blx	r3
  403622:	bd08      	pop	{r3, pc}
  403624:	400e0e00 	.word	0x400e0e00
  403628:	004035b1 	.word	0x004035b1

0040362c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40362c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40362e:	210a      	movs	r1, #10
  403630:	4801      	ldr	r0, [pc, #4]	; (403638 <PIOB_Handler+0xc>)
  403632:	4b02      	ldr	r3, [pc, #8]	; (40363c <PIOB_Handler+0x10>)
  403634:	4798      	blx	r3
  403636:	bd08      	pop	{r3, pc}
  403638:	400e1000 	.word	0x400e1000
  40363c:	004035b1 	.word	0x004035b1

00403640 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  403640:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  403642:	210b      	movs	r1, #11
  403644:	4801      	ldr	r0, [pc, #4]	; (40364c <PIOC_Handler+0xc>)
  403646:	4b02      	ldr	r3, [pc, #8]	; (403650 <PIOC_Handler+0x10>)
  403648:	4798      	blx	r3
  40364a:	bd08      	pop	{r3, pc}
  40364c:	400e1200 	.word	0x400e1200
  403650:	004035b1 	.word	0x004035b1

00403654 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  403654:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  403656:	210c      	movs	r1, #12
  403658:	4801      	ldr	r0, [pc, #4]	; (403660 <PIOD_Handler+0xc>)
  40365a:	4b02      	ldr	r3, [pc, #8]	; (403664 <PIOD_Handler+0x10>)
  40365c:	4798      	blx	r3
  40365e:	bd08      	pop	{r3, pc}
  403660:	400e1400 	.word	0x400e1400
  403664:	004035b1 	.word	0x004035b1

00403668 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  403668:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40366a:	210d      	movs	r1, #13
  40366c:	4801      	ldr	r0, [pc, #4]	; (403674 <PIOE_Handler+0xc>)
  40366e:	4b02      	ldr	r3, [pc, #8]	; (403678 <PIOE_Handler+0x10>)
  403670:	4798      	blx	r3
  403672:	bd08      	pop	{r3, pc}
  403674:	400e1600 	.word	0x400e1600
  403678:	004035b1 	.word	0x004035b1

0040367c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40367c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40367e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  403682:	d03a      	beq.n	4036fa <pio_set_peripheral+0x7e>
  403684:	d813      	bhi.n	4036ae <pio_set_peripheral+0x32>
  403686:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40368a:	d025      	beq.n	4036d8 <pio_set_peripheral+0x5c>
  40368c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  403690:	d10a      	bne.n	4036a8 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403692:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403694:	4313      	orrs	r3, r2
  403696:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403698:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40369a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40369c:	400b      	ands	r3, r1
  40369e:	ea23 0302 	bic.w	r3, r3, r2
  4036a2:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4036a4:	6042      	str	r2, [r0, #4]
  4036a6:	4770      	bx	lr
	switch (ul_type) {
  4036a8:	2900      	cmp	r1, #0
  4036aa:	d1fb      	bne.n	4036a4 <pio_set_peripheral+0x28>
  4036ac:	4770      	bx	lr
  4036ae:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4036b2:	d021      	beq.n	4036f8 <pio_set_peripheral+0x7c>
  4036b4:	d809      	bhi.n	4036ca <pio_set_peripheral+0x4e>
  4036b6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4036ba:	d1f3      	bne.n	4036a4 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4036bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4036be:	4313      	orrs	r3, r2
  4036c0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4036c2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4036c4:	4313      	orrs	r3, r2
  4036c6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4036c8:	e7ec      	b.n	4036a4 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4036ca:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4036ce:	d013      	beq.n	4036f8 <pio_set_peripheral+0x7c>
  4036d0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4036d4:	d010      	beq.n	4036f8 <pio_set_peripheral+0x7c>
  4036d6:	e7e5      	b.n	4036a4 <pio_set_peripheral+0x28>
{
  4036d8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4036da:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4036dc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4036de:	43d3      	mvns	r3, r2
  4036e0:	4021      	ands	r1, r4
  4036e2:	461c      	mov	r4, r3
  4036e4:	4019      	ands	r1, r3
  4036e6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4036e8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4036ea:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4036ec:	400b      	ands	r3, r1
  4036ee:	4023      	ands	r3, r4
  4036f0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4036f2:	6042      	str	r2, [r0, #4]
}
  4036f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4036f8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4036fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4036fc:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4036fe:	400b      	ands	r3, r1
  403700:	ea23 0302 	bic.w	r3, r3, r2
  403704:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403706:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403708:	4313      	orrs	r3, r2
  40370a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40370c:	e7ca      	b.n	4036a4 <pio_set_peripheral+0x28>

0040370e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40370e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  403710:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  403714:	bf14      	ite	ne
  403716:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  403718:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40371a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40371e:	bf14      	ite	ne
  403720:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  403722:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  403724:	f012 0f02 	tst.w	r2, #2
  403728:	d107      	bne.n	40373a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40372a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40372e:	bf18      	it	ne
  403730:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  403734:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  403736:	6001      	str	r1, [r0, #0]
  403738:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  40373a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40373e:	e7f9      	b.n	403734 <pio_set_input+0x26>

00403740 <pio_set_output>:
{
  403740:	b410      	push	{r4}
  403742:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  403744:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  403746:	b94c      	cbnz	r4, 40375c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  403748:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40374a:	b14b      	cbz	r3, 403760 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40374c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40374e:	b94a      	cbnz	r2, 403764 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  403750:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  403752:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  403754:	6001      	str	r1, [r0, #0]
}
  403756:	f85d 4b04 	ldr.w	r4, [sp], #4
  40375a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40375c:	6641      	str	r1, [r0, #100]	; 0x64
  40375e:	e7f4      	b.n	40374a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  403760:	6541      	str	r1, [r0, #84]	; 0x54
  403762:	e7f4      	b.n	40374e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  403764:	6301      	str	r1, [r0, #48]	; 0x30
  403766:	e7f4      	b.n	403752 <pio_set_output+0x12>

00403768 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  403768:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40376a:	4770      	bx	lr

0040376c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40376c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40376e:	4770      	bx	lr

00403770 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403770:	0943      	lsrs	r3, r0, #5
  403772:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403776:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40377a:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40377c:	f000 001f 	and.w	r0, r0, #31
  403780:	2201      	movs	r2, #1
  403782:	fa02 f000 	lsl.w	r0, r2, r0
  403786:	6358      	str	r0, [r3, #52]	; 0x34
  403788:	4770      	bx	lr
	...

0040378c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40378c:	4a17      	ldr	r2, [pc, #92]	; (4037ec <pmc_switch_mck_to_pllack+0x60>)
  40378e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403794:	4318      	orrs	r0, r3
  403796:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403798:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40379a:	f013 0f08 	tst.w	r3, #8
  40379e:	d10a      	bne.n	4037b6 <pmc_switch_mck_to_pllack+0x2a>
  4037a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4037a4:	4911      	ldr	r1, [pc, #68]	; (4037ec <pmc_switch_mck_to_pllack+0x60>)
  4037a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4037a8:	f012 0f08 	tst.w	r2, #8
  4037ac:	d103      	bne.n	4037b6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4037ae:	3b01      	subs	r3, #1
  4037b0:	d1f9      	bne.n	4037a6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4037b2:	2001      	movs	r0, #1
  4037b4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4037b6:	4a0d      	ldr	r2, [pc, #52]	; (4037ec <pmc_switch_mck_to_pllack+0x60>)
  4037b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4037ba:	f023 0303 	bic.w	r3, r3, #3
  4037be:	f043 0302 	orr.w	r3, r3, #2
  4037c2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4037c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4037c6:	f013 0f08 	tst.w	r3, #8
  4037ca:	d10a      	bne.n	4037e2 <pmc_switch_mck_to_pllack+0x56>
  4037cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4037d0:	4906      	ldr	r1, [pc, #24]	; (4037ec <pmc_switch_mck_to_pllack+0x60>)
  4037d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4037d4:	f012 0f08 	tst.w	r2, #8
  4037d8:	d105      	bne.n	4037e6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4037da:	3b01      	subs	r3, #1
  4037dc:	d1f9      	bne.n	4037d2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4037de:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4037e0:	4770      	bx	lr
	return 0;
  4037e2:	2000      	movs	r0, #0
  4037e4:	4770      	bx	lr
  4037e6:	2000      	movs	r0, #0
  4037e8:	4770      	bx	lr
  4037ea:	bf00      	nop
  4037ec:	400e0400 	.word	0x400e0400

004037f0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4037f0:	b9c8      	cbnz	r0, 403826 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4037f2:	4a11      	ldr	r2, [pc, #68]	; (403838 <pmc_switch_mainck_to_xtal+0x48>)
  4037f4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4037f6:	0209      	lsls	r1, r1, #8
  4037f8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4037fa:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4037fe:	f023 0303 	bic.w	r3, r3, #3
  403802:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403806:	f043 0301 	orr.w	r3, r3, #1
  40380a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40380c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40380e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403810:	f013 0f01 	tst.w	r3, #1
  403814:	d0fb      	beq.n	40380e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403816:	4a08      	ldr	r2, [pc, #32]	; (403838 <pmc_switch_mainck_to_xtal+0x48>)
  403818:	6a13      	ldr	r3, [r2, #32]
  40381a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40381e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403822:	6213      	str	r3, [r2, #32]
  403824:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403826:	4904      	ldr	r1, [pc, #16]	; (403838 <pmc_switch_mainck_to_xtal+0x48>)
  403828:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40382a:	4a04      	ldr	r2, [pc, #16]	; (40383c <pmc_switch_mainck_to_xtal+0x4c>)
  40382c:	401a      	ands	r2, r3
  40382e:	4b04      	ldr	r3, [pc, #16]	; (403840 <pmc_switch_mainck_to_xtal+0x50>)
  403830:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403832:	620b      	str	r3, [r1, #32]
  403834:	4770      	bx	lr
  403836:	bf00      	nop
  403838:	400e0400 	.word	0x400e0400
  40383c:	fec8fffc 	.word	0xfec8fffc
  403840:	01370002 	.word	0x01370002

00403844 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  403844:	4b02      	ldr	r3, [pc, #8]	; (403850 <pmc_osc_is_ready_mainck+0xc>)
  403846:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403848:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40384c:	4770      	bx	lr
  40384e:	bf00      	nop
  403850:	400e0400 	.word	0x400e0400

00403854 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403854:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403858:	4b01      	ldr	r3, [pc, #4]	; (403860 <pmc_disable_pllack+0xc>)
  40385a:	629a      	str	r2, [r3, #40]	; 0x28
  40385c:	4770      	bx	lr
  40385e:	bf00      	nop
  403860:	400e0400 	.word	0x400e0400

00403864 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403864:	4b02      	ldr	r3, [pc, #8]	; (403870 <pmc_is_locked_pllack+0xc>)
  403866:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403868:	f000 0002 	and.w	r0, r0, #2
  40386c:	4770      	bx	lr
  40386e:	bf00      	nop
  403870:	400e0400 	.word	0x400e0400

00403874 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  403874:	282f      	cmp	r0, #47	; 0x2f
  403876:	d81e      	bhi.n	4038b6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403878:	281f      	cmp	r0, #31
  40387a:	d80c      	bhi.n	403896 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40387c:	4b11      	ldr	r3, [pc, #68]	; (4038c4 <pmc_enable_periph_clk+0x50>)
  40387e:	699a      	ldr	r2, [r3, #24]
  403880:	2301      	movs	r3, #1
  403882:	4083      	lsls	r3, r0
  403884:	4393      	bics	r3, r2
  403886:	d018      	beq.n	4038ba <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403888:	2301      	movs	r3, #1
  40388a:	fa03 f000 	lsl.w	r0, r3, r0
  40388e:	4b0d      	ldr	r3, [pc, #52]	; (4038c4 <pmc_enable_periph_clk+0x50>)
  403890:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  403892:	2000      	movs	r0, #0
  403894:	4770      	bx	lr
		ul_id -= 32;
  403896:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403898:	4b0a      	ldr	r3, [pc, #40]	; (4038c4 <pmc_enable_periph_clk+0x50>)
  40389a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40389e:	2301      	movs	r3, #1
  4038a0:	4083      	lsls	r3, r0
  4038a2:	4393      	bics	r3, r2
  4038a4:	d00b      	beq.n	4038be <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4038a6:	2301      	movs	r3, #1
  4038a8:	fa03 f000 	lsl.w	r0, r3, r0
  4038ac:	4b05      	ldr	r3, [pc, #20]	; (4038c4 <pmc_enable_periph_clk+0x50>)
  4038ae:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4038b2:	2000      	movs	r0, #0
  4038b4:	4770      	bx	lr
		return 1;
  4038b6:	2001      	movs	r0, #1
  4038b8:	4770      	bx	lr
	return 0;
  4038ba:	2000      	movs	r0, #0
  4038bc:	4770      	bx	lr
  4038be:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4038c0:	4770      	bx	lr
  4038c2:	bf00      	nop
  4038c4:	400e0400 	.word	0x400e0400

004038c8 <__libc_init_array>:
  4038c8:	b570      	push	{r4, r5, r6, lr}
  4038ca:	4e0f      	ldr	r6, [pc, #60]	; (403908 <__libc_init_array+0x40>)
  4038cc:	4d0f      	ldr	r5, [pc, #60]	; (40390c <__libc_init_array+0x44>)
  4038ce:	1b76      	subs	r6, r6, r5
  4038d0:	10b6      	asrs	r6, r6, #2
  4038d2:	bf18      	it	ne
  4038d4:	2400      	movne	r4, #0
  4038d6:	d005      	beq.n	4038e4 <__libc_init_array+0x1c>
  4038d8:	3401      	adds	r4, #1
  4038da:	f855 3b04 	ldr.w	r3, [r5], #4
  4038de:	4798      	blx	r3
  4038e0:	42a6      	cmp	r6, r4
  4038e2:	d1f9      	bne.n	4038d8 <__libc_init_array+0x10>
  4038e4:	4e0a      	ldr	r6, [pc, #40]	; (403910 <__libc_init_array+0x48>)
  4038e6:	4d0b      	ldr	r5, [pc, #44]	; (403914 <__libc_init_array+0x4c>)
  4038e8:	1b76      	subs	r6, r6, r5
  4038ea:	f005 f911 	bl	408b10 <_init>
  4038ee:	10b6      	asrs	r6, r6, #2
  4038f0:	bf18      	it	ne
  4038f2:	2400      	movne	r4, #0
  4038f4:	d006      	beq.n	403904 <__libc_init_array+0x3c>
  4038f6:	3401      	adds	r4, #1
  4038f8:	f855 3b04 	ldr.w	r3, [r5], #4
  4038fc:	4798      	blx	r3
  4038fe:	42a6      	cmp	r6, r4
  403900:	d1f9      	bne.n	4038f6 <__libc_init_array+0x2e>
  403902:	bd70      	pop	{r4, r5, r6, pc}
  403904:	bd70      	pop	{r4, r5, r6, pc}
  403906:	bf00      	nop
  403908:	00408b1c 	.word	0x00408b1c
  40390c:	00408b1c 	.word	0x00408b1c
  403910:	00408b24 	.word	0x00408b24
  403914:	00408b1c 	.word	0x00408b1c

00403918 <memset>:
  403918:	b470      	push	{r4, r5, r6}
  40391a:	0786      	lsls	r6, r0, #30
  40391c:	d046      	beq.n	4039ac <memset+0x94>
  40391e:	1e54      	subs	r4, r2, #1
  403920:	2a00      	cmp	r2, #0
  403922:	d041      	beq.n	4039a8 <memset+0x90>
  403924:	b2ca      	uxtb	r2, r1
  403926:	4603      	mov	r3, r0
  403928:	e002      	b.n	403930 <memset+0x18>
  40392a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40392e:	d33b      	bcc.n	4039a8 <memset+0x90>
  403930:	f803 2b01 	strb.w	r2, [r3], #1
  403934:	079d      	lsls	r5, r3, #30
  403936:	d1f8      	bne.n	40392a <memset+0x12>
  403938:	2c03      	cmp	r4, #3
  40393a:	d92e      	bls.n	40399a <memset+0x82>
  40393c:	b2cd      	uxtb	r5, r1
  40393e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403942:	2c0f      	cmp	r4, #15
  403944:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403948:	d919      	bls.n	40397e <memset+0x66>
  40394a:	f103 0210 	add.w	r2, r3, #16
  40394e:	4626      	mov	r6, r4
  403950:	3e10      	subs	r6, #16
  403952:	2e0f      	cmp	r6, #15
  403954:	f842 5c10 	str.w	r5, [r2, #-16]
  403958:	f842 5c0c 	str.w	r5, [r2, #-12]
  40395c:	f842 5c08 	str.w	r5, [r2, #-8]
  403960:	f842 5c04 	str.w	r5, [r2, #-4]
  403964:	f102 0210 	add.w	r2, r2, #16
  403968:	d8f2      	bhi.n	403950 <memset+0x38>
  40396a:	f1a4 0210 	sub.w	r2, r4, #16
  40396e:	f022 020f 	bic.w	r2, r2, #15
  403972:	f004 040f 	and.w	r4, r4, #15
  403976:	3210      	adds	r2, #16
  403978:	2c03      	cmp	r4, #3
  40397a:	4413      	add	r3, r2
  40397c:	d90d      	bls.n	40399a <memset+0x82>
  40397e:	461e      	mov	r6, r3
  403980:	4622      	mov	r2, r4
  403982:	3a04      	subs	r2, #4
  403984:	2a03      	cmp	r2, #3
  403986:	f846 5b04 	str.w	r5, [r6], #4
  40398a:	d8fa      	bhi.n	403982 <memset+0x6a>
  40398c:	1f22      	subs	r2, r4, #4
  40398e:	f022 0203 	bic.w	r2, r2, #3
  403992:	3204      	adds	r2, #4
  403994:	4413      	add	r3, r2
  403996:	f004 0403 	and.w	r4, r4, #3
  40399a:	b12c      	cbz	r4, 4039a8 <memset+0x90>
  40399c:	b2c9      	uxtb	r1, r1
  40399e:	441c      	add	r4, r3
  4039a0:	f803 1b01 	strb.w	r1, [r3], #1
  4039a4:	429c      	cmp	r4, r3
  4039a6:	d1fb      	bne.n	4039a0 <memset+0x88>
  4039a8:	bc70      	pop	{r4, r5, r6}
  4039aa:	4770      	bx	lr
  4039ac:	4614      	mov	r4, r2
  4039ae:	4603      	mov	r3, r0
  4039b0:	e7c2      	b.n	403938 <memset+0x20>
  4039b2:	bf00      	nop

004039b4 <sprintf>:
  4039b4:	b40e      	push	{r1, r2, r3}
  4039b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4039b8:	b09c      	sub	sp, #112	; 0x70
  4039ba:	ab21      	add	r3, sp, #132	; 0x84
  4039bc:	490f      	ldr	r1, [pc, #60]	; (4039fc <sprintf+0x48>)
  4039be:	f853 2b04 	ldr.w	r2, [r3], #4
  4039c2:	9301      	str	r3, [sp, #4]
  4039c4:	4605      	mov	r5, r0
  4039c6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4039ca:	6808      	ldr	r0, [r1, #0]
  4039cc:	9502      	str	r5, [sp, #8]
  4039ce:	f44f 7702 	mov.w	r7, #520	; 0x208
  4039d2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4039d6:	a902      	add	r1, sp, #8
  4039d8:	9506      	str	r5, [sp, #24]
  4039da:	f8ad 7014 	strh.w	r7, [sp, #20]
  4039de:	9404      	str	r4, [sp, #16]
  4039e0:	9407      	str	r4, [sp, #28]
  4039e2:	f8ad 6016 	strh.w	r6, [sp, #22]
  4039e6:	f000 f80b 	bl	403a00 <_svfprintf_r>
  4039ea:	9b02      	ldr	r3, [sp, #8]
  4039ec:	2200      	movs	r2, #0
  4039ee:	701a      	strb	r2, [r3, #0]
  4039f0:	b01c      	add	sp, #112	; 0x70
  4039f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4039f6:	b003      	add	sp, #12
  4039f8:	4770      	bx	lr
  4039fa:	bf00      	nop
  4039fc:	20000008 	.word	0x20000008

00403a00 <_svfprintf_r>:
  403a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a04:	b0c3      	sub	sp, #268	; 0x10c
  403a06:	460c      	mov	r4, r1
  403a08:	910b      	str	r1, [sp, #44]	; 0x2c
  403a0a:	4692      	mov	sl, r2
  403a0c:	930f      	str	r3, [sp, #60]	; 0x3c
  403a0e:	900c      	str	r0, [sp, #48]	; 0x30
  403a10:	f002 fa0e 	bl	405e30 <_localeconv_r>
  403a14:	6803      	ldr	r3, [r0, #0]
  403a16:	931a      	str	r3, [sp, #104]	; 0x68
  403a18:	4618      	mov	r0, r3
  403a1a:	f003 f8f1 	bl	406c00 <strlen>
  403a1e:	89a3      	ldrh	r3, [r4, #12]
  403a20:	9019      	str	r0, [sp, #100]	; 0x64
  403a22:	0619      	lsls	r1, r3, #24
  403a24:	d503      	bpl.n	403a2e <_svfprintf_r+0x2e>
  403a26:	6923      	ldr	r3, [r4, #16]
  403a28:	2b00      	cmp	r3, #0
  403a2a:	f001 8003 	beq.w	404a34 <_svfprintf_r+0x1034>
  403a2e:	2300      	movs	r3, #0
  403a30:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403a34:	9313      	str	r3, [sp, #76]	; 0x4c
  403a36:	9315      	str	r3, [sp, #84]	; 0x54
  403a38:	9314      	str	r3, [sp, #80]	; 0x50
  403a3a:	9327      	str	r3, [sp, #156]	; 0x9c
  403a3c:	9326      	str	r3, [sp, #152]	; 0x98
  403a3e:	9318      	str	r3, [sp, #96]	; 0x60
  403a40:	931b      	str	r3, [sp, #108]	; 0x6c
  403a42:	9309      	str	r3, [sp, #36]	; 0x24
  403a44:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403a48:	46c8      	mov	r8, r9
  403a4a:	9316      	str	r3, [sp, #88]	; 0x58
  403a4c:	9317      	str	r3, [sp, #92]	; 0x5c
  403a4e:	f89a 3000 	ldrb.w	r3, [sl]
  403a52:	4654      	mov	r4, sl
  403a54:	b1e3      	cbz	r3, 403a90 <_svfprintf_r+0x90>
  403a56:	2b25      	cmp	r3, #37	; 0x25
  403a58:	d102      	bne.n	403a60 <_svfprintf_r+0x60>
  403a5a:	e019      	b.n	403a90 <_svfprintf_r+0x90>
  403a5c:	2b25      	cmp	r3, #37	; 0x25
  403a5e:	d003      	beq.n	403a68 <_svfprintf_r+0x68>
  403a60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403a64:	2b00      	cmp	r3, #0
  403a66:	d1f9      	bne.n	403a5c <_svfprintf_r+0x5c>
  403a68:	eba4 050a 	sub.w	r5, r4, sl
  403a6c:	b185      	cbz	r5, 403a90 <_svfprintf_r+0x90>
  403a6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403a70:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403a72:	f8c8 a000 	str.w	sl, [r8]
  403a76:	3301      	adds	r3, #1
  403a78:	442a      	add	r2, r5
  403a7a:	2b07      	cmp	r3, #7
  403a7c:	f8c8 5004 	str.w	r5, [r8, #4]
  403a80:	9227      	str	r2, [sp, #156]	; 0x9c
  403a82:	9326      	str	r3, [sp, #152]	; 0x98
  403a84:	dc7f      	bgt.n	403b86 <_svfprintf_r+0x186>
  403a86:	f108 0808 	add.w	r8, r8, #8
  403a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403a8c:	442b      	add	r3, r5
  403a8e:	9309      	str	r3, [sp, #36]	; 0x24
  403a90:	7823      	ldrb	r3, [r4, #0]
  403a92:	2b00      	cmp	r3, #0
  403a94:	d07f      	beq.n	403b96 <_svfprintf_r+0x196>
  403a96:	2300      	movs	r3, #0
  403a98:	461a      	mov	r2, r3
  403a9a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403a9e:	4619      	mov	r1, r3
  403aa0:	930d      	str	r3, [sp, #52]	; 0x34
  403aa2:	469b      	mov	fp, r3
  403aa4:	f04f 30ff 	mov.w	r0, #4294967295
  403aa8:	7863      	ldrb	r3, [r4, #1]
  403aaa:	900a      	str	r0, [sp, #40]	; 0x28
  403aac:	f104 0a01 	add.w	sl, r4, #1
  403ab0:	f10a 0a01 	add.w	sl, sl, #1
  403ab4:	f1a3 0020 	sub.w	r0, r3, #32
  403ab8:	2858      	cmp	r0, #88	; 0x58
  403aba:	f200 83c1 	bhi.w	404240 <_svfprintf_r+0x840>
  403abe:	e8df f010 	tbh	[pc, r0, lsl #1]
  403ac2:	0238      	.short	0x0238
  403ac4:	03bf03bf 	.word	0x03bf03bf
  403ac8:	03bf0240 	.word	0x03bf0240
  403acc:	03bf03bf 	.word	0x03bf03bf
  403ad0:	03bf03bf 	.word	0x03bf03bf
  403ad4:	024503bf 	.word	0x024503bf
  403ad8:	03bf0203 	.word	0x03bf0203
  403adc:	026b005d 	.word	0x026b005d
  403ae0:	028603bf 	.word	0x028603bf
  403ae4:	039d039d 	.word	0x039d039d
  403ae8:	039d039d 	.word	0x039d039d
  403aec:	039d039d 	.word	0x039d039d
  403af0:	039d039d 	.word	0x039d039d
  403af4:	03bf039d 	.word	0x03bf039d
  403af8:	03bf03bf 	.word	0x03bf03bf
  403afc:	03bf03bf 	.word	0x03bf03bf
  403b00:	03bf03bf 	.word	0x03bf03bf
  403b04:	03bf03bf 	.word	0x03bf03bf
  403b08:	033703bf 	.word	0x033703bf
  403b0c:	03bf0357 	.word	0x03bf0357
  403b10:	03bf0357 	.word	0x03bf0357
  403b14:	03bf03bf 	.word	0x03bf03bf
  403b18:	039803bf 	.word	0x039803bf
  403b1c:	03bf03bf 	.word	0x03bf03bf
  403b20:	03bf03ad 	.word	0x03bf03ad
  403b24:	03bf03bf 	.word	0x03bf03bf
  403b28:	03bf03bf 	.word	0x03bf03bf
  403b2c:	03bf0259 	.word	0x03bf0259
  403b30:	031e03bf 	.word	0x031e03bf
  403b34:	03bf03bf 	.word	0x03bf03bf
  403b38:	03bf03bf 	.word	0x03bf03bf
  403b3c:	03bf03bf 	.word	0x03bf03bf
  403b40:	03bf03bf 	.word	0x03bf03bf
  403b44:	03bf03bf 	.word	0x03bf03bf
  403b48:	02db02c6 	.word	0x02db02c6
  403b4c:	03570357 	.word	0x03570357
  403b50:	028b0357 	.word	0x028b0357
  403b54:	03bf02db 	.word	0x03bf02db
  403b58:	029003bf 	.word	0x029003bf
  403b5c:	029d03bf 	.word	0x029d03bf
  403b60:	02b401cc 	.word	0x02b401cc
  403b64:	03bf0208 	.word	0x03bf0208
  403b68:	03bf01e1 	.word	0x03bf01e1
  403b6c:	03bf007e 	.word	0x03bf007e
  403b70:	020d03bf 	.word	0x020d03bf
  403b74:	980d      	ldr	r0, [sp, #52]	; 0x34
  403b76:	930f      	str	r3, [sp, #60]	; 0x3c
  403b78:	4240      	negs	r0, r0
  403b7a:	900d      	str	r0, [sp, #52]	; 0x34
  403b7c:	f04b 0b04 	orr.w	fp, fp, #4
  403b80:	f89a 3000 	ldrb.w	r3, [sl]
  403b84:	e794      	b.n	403ab0 <_svfprintf_r+0xb0>
  403b86:	aa25      	add	r2, sp, #148	; 0x94
  403b88:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403b8a:	980c      	ldr	r0, [sp, #48]	; 0x30
  403b8c:	f003 f8a6 	bl	406cdc <__ssprint_r>
  403b90:	b940      	cbnz	r0, 403ba4 <_svfprintf_r+0x1a4>
  403b92:	46c8      	mov	r8, r9
  403b94:	e779      	b.n	403a8a <_svfprintf_r+0x8a>
  403b96:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403b98:	b123      	cbz	r3, 403ba4 <_svfprintf_r+0x1a4>
  403b9a:	980c      	ldr	r0, [sp, #48]	; 0x30
  403b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403b9e:	aa25      	add	r2, sp, #148	; 0x94
  403ba0:	f003 f89c 	bl	406cdc <__ssprint_r>
  403ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403ba6:	899b      	ldrh	r3, [r3, #12]
  403ba8:	f013 0f40 	tst.w	r3, #64	; 0x40
  403bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403bae:	bf18      	it	ne
  403bb0:	f04f 33ff 	movne.w	r3, #4294967295
  403bb4:	9309      	str	r3, [sp, #36]	; 0x24
  403bb6:	9809      	ldr	r0, [sp, #36]	; 0x24
  403bb8:	b043      	add	sp, #268	; 0x10c
  403bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bbe:	f01b 0f20 	tst.w	fp, #32
  403bc2:	9311      	str	r3, [sp, #68]	; 0x44
  403bc4:	f040 81dd 	bne.w	403f82 <_svfprintf_r+0x582>
  403bc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403bca:	f01b 0f10 	tst.w	fp, #16
  403bce:	4613      	mov	r3, r2
  403bd0:	f040 856e 	bne.w	4046b0 <_svfprintf_r+0xcb0>
  403bd4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403bd8:	f000 856a 	beq.w	4046b0 <_svfprintf_r+0xcb0>
  403bdc:	8814      	ldrh	r4, [r2, #0]
  403bde:	3204      	adds	r2, #4
  403be0:	2500      	movs	r5, #0
  403be2:	2301      	movs	r3, #1
  403be4:	920f      	str	r2, [sp, #60]	; 0x3c
  403be6:	2700      	movs	r7, #0
  403be8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403bec:	990a      	ldr	r1, [sp, #40]	; 0x28
  403bee:	1c4a      	adds	r2, r1, #1
  403bf0:	f000 8265 	beq.w	4040be <_svfprintf_r+0x6be>
  403bf4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403bf8:	9207      	str	r2, [sp, #28]
  403bfa:	ea54 0205 	orrs.w	r2, r4, r5
  403bfe:	f040 8264 	bne.w	4040ca <_svfprintf_r+0x6ca>
  403c02:	2900      	cmp	r1, #0
  403c04:	f040 843c 	bne.w	404480 <_svfprintf_r+0xa80>
  403c08:	2b00      	cmp	r3, #0
  403c0a:	f040 84d7 	bne.w	4045bc <_svfprintf_r+0xbbc>
  403c0e:	f01b 0301 	ands.w	r3, fp, #1
  403c12:	930e      	str	r3, [sp, #56]	; 0x38
  403c14:	f000 8604 	beq.w	404820 <_svfprintf_r+0xe20>
  403c18:	ae42      	add	r6, sp, #264	; 0x108
  403c1a:	2330      	movs	r3, #48	; 0x30
  403c1c:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403c22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403c24:	4293      	cmp	r3, r2
  403c26:	bfb8      	it	lt
  403c28:	4613      	movlt	r3, r2
  403c2a:	9308      	str	r3, [sp, #32]
  403c2c:	2300      	movs	r3, #0
  403c2e:	9312      	str	r3, [sp, #72]	; 0x48
  403c30:	b117      	cbz	r7, 403c38 <_svfprintf_r+0x238>
  403c32:	9b08      	ldr	r3, [sp, #32]
  403c34:	3301      	adds	r3, #1
  403c36:	9308      	str	r3, [sp, #32]
  403c38:	9b07      	ldr	r3, [sp, #28]
  403c3a:	f013 0302 	ands.w	r3, r3, #2
  403c3e:	9310      	str	r3, [sp, #64]	; 0x40
  403c40:	d002      	beq.n	403c48 <_svfprintf_r+0x248>
  403c42:	9b08      	ldr	r3, [sp, #32]
  403c44:	3302      	adds	r3, #2
  403c46:	9308      	str	r3, [sp, #32]
  403c48:	9b07      	ldr	r3, [sp, #28]
  403c4a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403c4e:	f040 830e 	bne.w	40426e <_svfprintf_r+0x86e>
  403c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403c54:	9a08      	ldr	r2, [sp, #32]
  403c56:	eba3 0b02 	sub.w	fp, r3, r2
  403c5a:	f1bb 0f00 	cmp.w	fp, #0
  403c5e:	f340 8306 	ble.w	40426e <_svfprintf_r+0x86e>
  403c62:	f1bb 0f10 	cmp.w	fp, #16
  403c66:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403c68:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403c6a:	dd29      	ble.n	403cc0 <_svfprintf_r+0x2c0>
  403c6c:	4643      	mov	r3, r8
  403c6e:	4621      	mov	r1, r4
  403c70:	46a8      	mov	r8, r5
  403c72:	2710      	movs	r7, #16
  403c74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403c76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403c78:	e006      	b.n	403c88 <_svfprintf_r+0x288>
  403c7a:	f1ab 0b10 	sub.w	fp, fp, #16
  403c7e:	f1bb 0f10 	cmp.w	fp, #16
  403c82:	f103 0308 	add.w	r3, r3, #8
  403c86:	dd18      	ble.n	403cba <_svfprintf_r+0x2ba>
  403c88:	3201      	adds	r2, #1
  403c8a:	48b7      	ldr	r0, [pc, #732]	; (403f68 <_svfprintf_r+0x568>)
  403c8c:	9226      	str	r2, [sp, #152]	; 0x98
  403c8e:	3110      	adds	r1, #16
  403c90:	2a07      	cmp	r2, #7
  403c92:	9127      	str	r1, [sp, #156]	; 0x9c
  403c94:	e883 0081 	stmia.w	r3, {r0, r7}
  403c98:	ddef      	ble.n	403c7a <_svfprintf_r+0x27a>
  403c9a:	aa25      	add	r2, sp, #148	; 0x94
  403c9c:	4629      	mov	r1, r5
  403c9e:	4620      	mov	r0, r4
  403ca0:	f003 f81c 	bl	406cdc <__ssprint_r>
  403ca4:	2800      	cmp	r0, #0
  403ca6:	f47f af7d 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  403caa:	f1ab 0b10 	sub.w	fp, fp, #16
  403cae:	f1bb 0f10 	cmp.w	fp, #16
  403cb2:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403cb4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403cb6:	464b      	mov	r3, r9
  403cb8:	dce6      	bgt.n	403c88 <_svfprintf_r+0x288>
  403cba:	4645      	mov	r5, r8
  403cbc:	460c      	mov	r4, r1
  403cbe:	4698      	mov	r8, r3
  403cc0:	3201      	adds	r2, #1
  403cc2:	4ba9      	ldr	r3, [pc, #676]	; (403f68 <_svfprintf_r+0x568>)
  403cc4:	9226      	str	r2, [sp, #152]	; 0x98
  403cc6:	445c      	add	r4, fp
  403cc8:	2a07      	cmp	r2, #7
  403cca:	9427      	str	r4, [sp, #156]	; 0x9c
  403ccc:	e888 0808 	stmia.w	r8, {r3, fp}
  403cd0:	f300 8498 	bgt.w	404604 <_svfprintf_r+0xc04>
  403cd4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403cd8:	f108 0808 	add.w	r8, r8, #8
  403cdc:	b177      	cbz	r7, 403cfc <_svfprintf_r+0x2fc>
  403cde:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ce0:	3301      	adds	r3, #1
  403ce2:	3401      	adds	r4, #1
  403ce4:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403ce8:	2201      	movs	r2, #1
  403cea:	2b07      	cmp	r3, #7
  403cec:	9427      	str	r4, [sp, #156]	; 0x9c
  403cee:	9326      	str	r3, [sp, #152]	; 0x98
  403cf0:	e888 0006 	stmia.w	r8, {r1, r2}
  403cf4:	f300 83db 	bgt.w	4044ae <_svfprintf_r+0xaae>
  403cf8:	f108 0808 	add.w	r8, r8, #8
  403cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403cfe:	b16b      	cbz	r3, 403d1c <_svfprintf_r+0x31c>
  403d00:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d02:	3301      	adds	r3, #1
  403d04:	3402      	adds	r4, #2
  403d06:	a91e      	add	r1, sp, #120	; 0x78
  403d08:	2202      	movs	r2, #2
  403d0a:	2b07      	cmp	r3, #7
  403d0c:	9427      	str	r4, [sp, #156]	; 0x9c
  403d0e:	9326      	str	r3, [sp, #152]	; 0x98
  403d10:	e888 0006 	stmia.w	r8, {r1, r2}
  403d14:	f300 83d6 	bgt.w	4044c4 <_svfprintf_r+0xac4>
  403d18:	f108 0808 	add.w	r8, r8, #8
  403d1c:	2d80      	cmp	r5, #128	; 0x80
  403d1e:	f000 8315 	beq.w	40434c <_svfprintf_r+0x94c>
  403d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403d26:	1a9f      	subs	r7, r3, r2
  403d28:	2f00      	cmp	r7, #0
  403d2a:	dd36      	ble.n	403d9a <_svfprintf_r+0x39a>
  403d2c:	2f10      	cmp	r7, #16
  403d2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d30:	4d8e      	ldr	r5, [pc, #568]	; (403f6c <_svfprintf_r+0x56c>)
  403d32:	dd27      	ble.n	403d84 <_svfprintf_r+0x384>
  403d34:	4642      	mov	r2, r8
  403d36:	4621      	mov	r1, r4
  403d38:	46b0      	mov	r8, r6
  403d3a:	f04f 0b10 	mov.w	fp, #16
  403d3e:	462e      	mov	r6, r5
  403d40:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403d42:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403d44:	e004      	b.n	403d50 <_svfprintf_r+0x350>
  403d46:	3f10      	subs	r7, #16
  403d48:	2f10      	cmp	r7, #16
  403d4a:	f102 0208 	add.w	r2, r2, #8
  403d4e:	dd15      	ble.n	403d7c <_svfprintf_r+0x37c>
  403d50:	3301      	adds	r3, #1
  403d52:	3110      	adds	r1, #16
  403d54:	2b07      	cmp	r3, #7
  403d56:	9127      	str	r1, [sp, #156]	; 0x9c
  403d58:	9326      	str	r3, [sp, #152]	; 0x98
  403d5a:	e882 0840 	stmia.w	r2, {r6, fp}
  403d5e:	ddf2      	ble.n	403d46 <_svfprintf_r+0x346>
  403d60:	aa25      	add	r2, sp, #148	; 0x94
  403d62:	4629      	mov	r1, r5
  403d64:	4620      	mov	r0, r4
  403d66:	f002 ffb9 	bl	406cdc <__ssprint_r>
  403d6a:	2800      	cmp	r0, #0
  403d6c:	f47f af1a 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  403d70:	3f10      	subs	r7, #16
  403d72:	2f10      	cmp	r7, #16
  403d74:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403d76:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d78:	464a      	mov	r2, r9
  403d7a:	dce9      	bgt.n	403d50 <_svfprintf_r+0x350>
  403d7c:	4635      	mov	r5, r6
  403d7e:	460c      	mov	r4, r1
  403d80:	4646      	mov	r6, r8
  403d82:	4690      	mov	r8, r2
  403d84:	3301      	adds	r3, #1
  403d86:	443c      	add	r4, r7
  403d88:	2b07      	cmp	r3, #7
  403d8a:	9427      	str	r4, [sp, #156]	; 0x9c
  403d8c:	9326      	str	r3, [sp, #152]	; 0x98
  403d8e:	e888 00a0 	stmia.w	r8, {r5, r7}
  403d92:	f300 8381 	bgt.w	404498 <_svfprintf_r+0xa98>
  403d96:	f108 0808 	add.w	r8, r8, #8
  403d9a:	9b07      	ldr	r3, [sp, #28]
  403d9c:	05df      	lsls	r7, r3, #23
  403d9e:	f100 8268 	bmi.w	404272 <_svfprintf_r+0x872>
  403da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403da4:	990e      	ldr	r1, [sp, #56]	; 0x38
  403da6:	f8c8 6000 	str.w	r6, [r8]
  403daa:	3301      	adds	r3, #1
  403dac:	440c      	add	r4, r1
  403dae:	2b07      	cmp	r3, #7
  403db0:	9427      	str	r4, [sp, #156]	; 0x9c
  403db2:	f8c8 1004 	str.w	r1, [r8, #4]
  403db6:	9326      	str	r3, [sp, #152]	; 0x98
  403db8:	f300 834d 	bgt.w	404456 <_svfprintf_r+0xa56>
  403dbc:	f108 0808 	add.w	r8, r8, #8
  403dc0:	9b07      	ldr	r3, [sp, #28]
  403dc2:	075b      	lsls	r3, r3, #29
  403dc4:	d53a      	bpl.n	403e3c <_svfprintf_r+0x43c>
  403dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403dc8:	9a08      	ldr	r2, [sp, #32]
  403dca:	1a9d      	subs	r5, r3, r2
  403dcc:	2d00      	cmp	r5, #0
  403dce:	dd35      	ble.n	403e3c <_svfprintf_r+0x43c>
  403dd0:	2d10      	cmp	r5, #16
  403dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403dd4:	dd20      	ble.n	403e18 <_svfprintf_r+0x418>
  403dd6:	2610      	movs	r6, #16
  403dd8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403dda:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403dde:	e004      	b.n	403dea <_svfprintf_r+0x3ea>
  403de0:	3d10      	subs	r5, #16
  403de2:	2d10      	cmp	r5, #16
  403de4:	f108 0808 	add.w	r8, r8, #8
  403de8:	dd16      	ble.n	403e18 <_svfprintf_r+0x418>
  403dea:	3301      	adds	r3, #1
  403dec:	4a5e      	ldr	r2, [pc, #376]	; (403f68 <_svfprintf_r+0x568>)
  403dee:	9326      	str	r3, [sp, #152]	; 0x98
  403df0:	3410      	adds	r4, #16
  403df2:	2b07      	cmp	r3, #7
  403df4:	9427      	str	r4, [sp, #156]	; 0x9c
  403df6:	e888 0044 	stmia.w	r8, {r2, r6}
  403dfa:	ddf1      	ble.n	403de0 <_svfprintf_r+0x3e0>
  403dfc:	aa25      	add	r2, sp, #148	; 0x94
  403dfe:	4659      	mov	r1, fp
  403e00:	4638      	mov	r0, r7
  403e02:	f002 ff6b 	bl	406cdc <__ssprint_r>
  403e06:	2800      	cmp	r0, #0
  403e08:	f47f aecc 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  403e0c:	3d10      	subs	r5, #16
  403e0e:	2d10      	cmp	r5, #16
  403e10:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e14:	46c8      	mov	r8, r9
  403e16:	dce8      	bgt.n	403dea <_svfprintf_r+0x3ea>
  403e18:	3301      	adds	r3, #1
  403e1a:	4a53      	ldr	r2, [pc, #332]	; (403f68 <_svfprintf_r+0x568>)
  403e1c:	9326      	str	r3, [sp, #152]	; 0x98
  403e1e:	442c      	add	r4, r5
  403e20:	2b07      	cmp	r3, #7
  403e22:	9427      	str	r4, [sp, #156]	; 0x9c
  403e24:	e888 0024 	stmia.w	r8, {r2, r5}
  403e28:	dd08      	ble.n	403e3c <_svfprintf_r+0x43c>
  403e2a:	aa25      	add	r2, sp, #148	; 0x94
  403e2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403e2e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403e30:	f002 ff54 	bl	406cdc <__ssprint_r>
  403e34:	2800      	cmp	r0, #0
  403e36:	f47f aeb5 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  403e3a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403e3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403e40:	9908      	ldr	r1, [sp, #32]
  403e42:	428a      	cmp	r2, r1
  403e44:	bfac      	ite	ge
  403e46:	189b      	addge	r3, r3, r2
  403e48:	185b      	addlt	r3, r3, r1
  403e4a:	9309      	str	r3, [sp, #36]	; 0x24
  403e4c:	2c00      	cmp	r4, #0
  403e4e:	f040 830d 	bne.w	40446c <_svfprintf_r+0xa6c>
  403e52:	2300      	movs	r3, #0
  403e54:	9326      	str	r3, [sp, #152]	; 0x98
  403e56:	46c8      	mov	r8, r9
  403e58:	e5f9      	b.n	403a4e <_svfprintf_r+0x4e>
  403e5a:	9311      	str	r3, [sp, #68]	; 0x44
  403e5c:	f01b 0320 	ands.w	r3, fp, #32
  403e60:	f040 81e3 	bne.w	40422a <_svfprintf_r+0x82a>
  403e64:	f01b 0210 	ands.w	r2, fp, #16
  403e68:	f040 842e 	bne.w	4046c8 <_svfprintf_r+0xcc8>
  403e6c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403e70:	f000 842a 	beq.w	4046c8 <_svfprintf_r+0xcc8>
  403e74:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403e76:	4613      	mov	r3, r2
  403e78:	460a      	mov	r2, r1
  403e7a:	3204      	adds	r2, #4
  403e7c:	880c      	ldrh	r4, [r1, #0]
  403e7e:	920f      	str	r2, [sp, #60]	; 0x3c
  403e80:	2500      	movs	r5, #0
  403e82:	e6b0      	b.n	403be6 <_svfprintf_r+0x1e6>
  403e84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403e86:	9311      	str	r3, [sp, #68]	; 0x44
  403e88:	6816      	ldr	r6, [r2, #0]
  403e8a:	2400      	movs	r4, #0
  403e8c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403e90:	1d15      	adds	r5, r2, #4
  403e92:	2e00      	cmp	r6, #0
  403e94:	f000 86a7 	beq.w	404be6 <_svfprintf_r+0x11e6>
  403e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403e9a:	1c53      	adds	r3, r2, #1
  403e9c:	f000 8609 	beq.w	404ab2 <_svfprintf_r+0x10b2>
  403ea0:	4621      	mov	r1, r4
  403ea2:	4630      	mov	r0, r6
  403ea4:	f002 fa8c 	bl	4063c0 <memchr>
  403ea8:	2800      	cmp	r0, #0
  403eaa:	f000 86e1 	beq.w	404c70 <_svfprintf_r+0x1270>
  403eae:	1b83      	subs	r3, r0, r6
  403eb0:	930e      	str	r3, [sp, #56]	; 0x38
  403eb2:	940a      	str	r4, [sp, #40]	; 0x28
  403eb4:	950f      	str	r5, [sp, #60]	; 0x3c
  403eb6:	f8cd b01c 	str.w	fp, [sp, #28]
  403eba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403ebe:	9308      	str	r3, [sp, #32]
  403ec0:	9412      	str	r4, [sp, #72]	; 0x48
  403ec2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403ec6:	e6b3      	b.n	403c30 <_svfprintf_r+0x230>
  403ec8:	f89a 3000 	ldrb.w	r3, [sl]
  403ecc:	2201      	movs	r2, #1
  403ece:	212b      	movs	r1, #43	; 0x2b
  403ed0:	e5ee      	b.n	403ab0 <_svfprintf_r+0xb0>
  403ed2:	f04b 0b20 	orr.w	fp, fp, #32
  403ed6:	f89a 3000 	ldrb.w	r3, [sl]
  403eda:	e5e9      	b.n	403ab0 <_svfprintf_r+0xb0>
  403edc:	9311      	str	r3, [sp, #68]	; 0x44
  403ede:	2a00      	cmp	r2, #0
  403ee0:	f040 8795 	bne.w	404e0e <_svfprintf_r+0x140e>
  403ee4:	4b22      	ldr	r3, [pc, #136]	; (403f70 <_svfprintf_r+0x570>)
  403ee6:	9318      	str	r3, [sp, #96]	; 0x60
  403ee8:	f01b 0f20 	tst.w	fp, #32
  403eec:	f040 8111 	bne.w	404112 <_svfprintf_r+0x712>
  403ef0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403ef2:	f01b 0f10 	tst.w	fp, #16
  403ef6:	4613      	mov	r3, r2
  403ef8:	f040 83e1 	bne.w	4046be <_svfprintf_r+0xcbe>
  403efc:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403f00:	f000 83dd 	beq.w	4046be <_svfprintf_r+0xcbe>
  403f04:	3304      	adds	r3, #4
  403f06:	8814      	ldrh	r4, [r2, #0]
  403f08:	930f      	str	r3, [sp, #60]	; 0x3c
  403f0a:	2500      	movs	r5, #0
  403f0c:	f01b 0f01 	tst.w	fp, #1
  403f10:	f000 810c 	beq.w	40412c <_svfprintf_r+0x72c>
  403f14:	ea54 0305 	orrs.w	r3, r4, r5
  403f18:	f000 8108 	beq.w	40412c <_svfprintf_r+0x72c>
  403f1c:	2330      	movs	r3, #48	; 0x30
  403f1e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403f22:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403f26:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403f2a:	f04b 0b02 	orr.w	fp, fp, #2
  403f2e:	2302      	movs	r3, #2
  403f30:	e659      	b.n	403be6 <_svfprintf_r+0x1e6>
  403f32:	f89a 3000 	ldrb.w	r3, [sl]
  403f36:	2900      	cmp	r1, #0
  403f38:	f47f adba 	bne.w	403ab0 <_svfprintf_r+0xb0>
  403f3c:	2201      	movs	r2, #1
  403f3e:	2120      	movs	r1, #32
  403f40:	e5b6      	b.n	403ab0 <_svfprintf_r+0xb0>
  403f42:	f04b 0b01 	orr.w	fp, fp, #1
  403f46:	f89a 3000 	ldrb.w	r3, [sl]
  403f4a:	e5b1      	b.n	403ab0 <_svfprintf_r+0xb0>
  403f4c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403f4e:	6823      	ldr	r3, [r4, #0]
  403f50:	930d      	str	r3, [sp, #52]	; 0x34
  403f52:	4618      	mov	r0, r3
  403f54:	2800      	cmp	r0, #0
  403f56:	4623      	mov	r3, r4
  403f58:	f103 0304 	add.w	r3, r3, #4
  403f5c:	f6ff ae0a 	blt.w	403b74 <_svfprintf_r+0x174>
  403f60:	930f      	str	r3, [sp, #60]	; 0x3c
  403f62:	f89a 3000 	ldrb.w	r3, [sl]
  403f66:	e5a3      	b.n	403ab0 <_svfprintf_r+0xb0>
  403f68:	004088d0 	.word	0x004088d0
  403f6c:	004088e0 	.word	0x004088e0
  403f70:	004088b0 	.word	0x004088b0
  403f74:	f04b 0b10 	orr.w	fp, fp, #16
  403f78:	f01b 0f20 	tst.w	fp, #32
  403f7c:	9311      	str	r3, [sp, #68]	; 0x44
  403f7e:	f43f ae23 	beq.w	403bc8 <_svfprintf_r+0x1c8>
  403f82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403f84:	3507      	adds	r5, #7
  403f86:	f025 0307 	bic.w	r3, r5, #7
  403f8a:	f103 0208 	add.w	r2, r3, #8
  403f8e:	e9d3 4500 	ldrd	r4, r5, [r3]
  403f92:	920f      	str	r2, [sp, #60]	; 0x3c
  403f94:	2301      	movs	r3, #1
  403f96:	e626      	b.n	403be6 <_svfprintf_r+0x1e6>
  403f98:	f89a 3000 	ldrb.w	r3, [sl]
  403f9c:	2b2a      	cmp	r3, #42	; 0x2a
  403f9e:	f10a 0401 	add.w	r4, sl, #1
  403fa2:	f000 8727 	beq.w	404df4 <_svfprintf_r+0x13f4>
  403fa6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403faa:	2809      	cmp	r0, #9
  403fac:	46a2      	mov	sl, r4
  403fae:	f200 86ad 	bhi.w	404d0c <_svfprintf_r+0x130c>
  403fb2:	2300      	movs	r3, #0
  403fb4:	461c      	mov	r4, r3
  403fb6:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403fba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403fbe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403fc2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403fc6:	2809      	cmp	r0, #9
  403fc8:	d9f5      	bls.n	403fb6 <_svfprintf_r+0x5b6>
  403fca:	940a      	str	r4, [sp, #40]	; 0x28
  403fcc:	e572      	b.n	403ab4 <_svfprintf_r+0xb4>
  403fce:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403fd2:	f89a 3000 	ldrb.w	r3, [sl]
  403fd6:	e56b      	b.n	403ab0 <_svfprintf_r+0xb0>
  403fd8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403fdc:	f89a 3000 	ldrb.w	r3, [sl]
  403fe0:	e566      	b.n	403ab0 <_svfprintf_r+0xb0>
  403fe2:	f89a 3000 	ldrb.w	r3, [sl]
  403fe6:	2b6c      	cmp	r3, #108	; 0x6c
  403fe8:	bf03      	ittte	eq
  403fea:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403fee:	f04b 0b20 	orreq.w	fp, fp, #32
  403ff2:	f10a 0a01 	addeq.w	sl, sl, #1
  403ff6:	f04b 0b10 	orrne.w	fp, fp, #16
  403ffa:	e559      	b.n	403ab0 <_svfprintf_r+0xb0>
  403ffc:	2a00      	cmp	r2, #0
  403ffe:	f040 8711 	bne.w	404e24 <_svfprintf_r+0x1424>
  404002:	f01b 0f20 	tst.w	fp, #32
  404006:	f040 84f9 	bne.w	4049fc <_svfprintf_r+0xffc>
  40400a:	f01b 0f10 	tst.w	fp, #16
  40400e:	f040 84ac 	bne.w	40496a <_svfprintf_r+0xf6a>
  404012:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404016:	f000 84a8 	beq.w	40496a <_svfprintf_r+0xf6a>
  40401a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40401c:	6813      	ldr	r3, [r2, #0]
  40401e:	3204      	adds	r2, #4
  404020:	920f      	str	r2, [sp, #60]	; 0x3c
  404022:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404026:	801a      	strh	r2, [r3, #0]
  404028:	e511      	b.n	403a4e <_svfprintf_r+0x4e>
  40402a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40402c:	4bb3      	ldr	r3, [pc, #716]	; (4042fc <_svfprintf_r+0x8fc>)
  40402e:	680c      	ldr	r4, [r1, #0]
  404030:	9318      	str	r3, [sp, #96]	; 0x60
  404032:	2230      	movs	r2, #48	; 0x30
  404034:	2378      	movs	r3, #120	; 0x78
  404036:	3104      	adds	r1, #4
  404038:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  40403c:	9311      	str	r3, [sp, #68]	; 0x44
  40403e:	f04b 0b02 	orr.w	fp, fp, #2
  404042:	910f      	str	r1, [sp, #60]	; 0x3c
  404044:	2500      	movs	r5, #0
  404046:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40404a:	2302      	movs	r3, #2
  40404c:	e5cb      	b.n	403be6 <_svfprintf_r+0x1e6>
  40404e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404050:	9311      	str	r3, [sp, #68]	; 0x44
  404052:	680a      	ldr	r2, [r1, #0]
  404054:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404058:	2300      	movs	r3, #0
  40405a:	460a      	mov	r2, r1
  40405c:	461f      	mov	r7, r3
  40405e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404062:	3204      	adds	r2, #4
  404064:	2301      	movs	r3, #1
  404066:	9308      	str	r3, [sp, #32]
  404068:	f8cd b01c 	str.w	fp, [sp, #28]
  40406c:	970a      	str	r7, [sp, #40]	; 0x28
  40406e:	9712      	str	r7, [sp, #72]	; 0x48
  404070:	920f      	str	r2, [sp, #60]	; 0x3c
  404072:	930e      	str	r3, [sp, #56]	; 0x38
  404074:	ae28      	add	r6, sp, #160	; 0xa0
  404076:	e5df      	b.n	403c38 <_svfprintf_r+0x238>
  404078:	9311      	str	r3, [sp, #68]	; 0x44
  40407a:	2a00      	cmp	r2, #0
  40407c:	f040 86ea 	bne.w	404e54 <_svfprintf_r+0x1454>
  404080:	f01b 0f20 	tst.w	fp, #32
  404084:	d15d      	bne.n	404142 <_svfprintf_r+0x742>
  404086:	f01b 0f10 	tst.w	fp, #16
  40408a:	f040 8308 	bne.w	40469e <_svfprintf_r+0xc9e>
  40408e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404092:	f000 8304 	beq.w	40469e <_svfprintf_r+0xc9e>
  404096:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404098:	f9b1 4000 	ldrsh.w	r4, [r1]
  40409c:	3104      	adds	r1, #4
  40409e:	17e5      	asrs	r5, r4, #31
  4040a0:	4622      	mov	r2, r4
  4040a2:	462b      	mov	r3, r5
  4040a4:	910f      	str	r1, [sp, #60]	; 0x3c
  4040a6:	2a00      	cmp	r2, #0
  4040a8:	f173 0300 	sbcs.w	r3, r3, #0
  4040ac:	db58      	blt.n	404160 <_svfprintf_r+0x760>
  4040ae:	990a      	ldr	r1, [sp, #40]	; 0x28
  4040b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4040b4:	1c4a      	adds	r2, r1, #1
  4040b6:	f04f 0301 	mov.w	r3, #1
  4040ba:	f47f ad9b 	bne.w	403bf4 <_svfprintf_r+0x1f4>
  4040be:	ea54 0205 	orrs.w	r2, r4, r5
  4040c2:	f000 81df 	beq.w	404484 <_svfprintf_r+0xa84>
  4040c6:	f8cd b01c 	str.w	fp, [sp, #28]
  4040ca:	2b01      	cmp	r3, #1
  4040cc:	f000 827b 	beq.w	4045c6 <_svfprintf_r+0xbc6>
  4040d0:	2b02      	cmp	r3, #2
  4040d2:	f040 8206 	bne.w	4044e2 <_svfprintf_r+0xae2>
  4040d6:	9818      	ldr	r0, [sp, #96]	; 0x60
  4040d8:	464e      	mov	r6, r9
  4040da:	0923      	lsrs	r3, r4, #4
  4040dc:	f004 010f 	and.w	r1, r4, #15
  4040e0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4040e4:	092a      	lsrs	r2, r5, #4
  4040e6:	461c      	mov	r4, r3
  4040e8:	4615      	mov	r5, r2
  4040ea:	5c43      	ldrb	r3, [r0, r1]
  4040ec:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4040f0:	ea54 0305 	orrs.w	r3, r4, r5
  4040f4:	d1f1      	bne.n	4040da <_svfprintf_r+0x6da>
  4040f6:	eba9 0306 	sub.w	r3, r9, r6
  4040fa:	930e      	str	r3, [sp, #56]	; 0x38
  4040fc:	e590      	b.n	403c20 <_svfprintf_r+0x220>
  4040fe:	9311      	str	r3, [sp, #68]	; 0x44
  404100:	2a00      	cmp	r2, #0
  404102:	f040 86a3 	bne.w	404e4c <_svfprintf_r+0x144c>
  404106:	4b7e      	ldr	r3, [pc, #504]	; (404300 <_svfprintf_r+0x900>)
  404108:	9318      	str	r3, [sp, #96]	; 0x60
  40410a:	f01b 0f20 	tst.w	fp, #32
  40410e:	f43f aeef 	beq.w	403ef0 <_svfprintf_r+0x4f0>
  404112:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404114:	3507      	adds	r5, #7
  404116:	f025 0307 	bic.w	r3, r5, #7
  40411a:	f103 0208 	add.w	r2, r3, #8
  40411e:	f01b 0f01 	tst.w	fp, #1
  404122:	920f      	str	r2, [sp, #60]	; 0x3c
  404124:	e9d3 4500 	ldrd	r4, r5, [r3]
  404128:	f47f aef4 	bne.w	403f14 <_svfprintf_r+0x514>
  40412c:	2302      	movs	r3, #2
  40412e:	e55a      	b.n	403be6 <_svfprintf_r+0x1e6>
  404130:	9311      	str	r3, [sp, #68]	; 0x44
  404132:	2a00      	cmp	r2, #0
  404134:	f040 8686 	bne.w	404e44 <_svfprintf_r+0x1444>
  404138:	f04b 0b10 	orr.w	fp, fp, #16
  40413c:	f01b 0f20 	tst.w	fp, #32
  404140:	d0a1      	beq.n	404086 <_svfprintf_r+0x686>
  404142:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404144:	3507      	adds	r5, #7
  404146:	f025 0507 	bic.w	r5, r5, #7
  40414a:	e9d5 2300 	ldrd	r2, r3, [r5]
  40414e:	2a00      	cmp	r2, #0
  404150:	f105 0108 	add.w	r1, r5, #8
  404154:	461d      	mov	r5, r3
  404156:	f173 0300 	sbcs.w	r3, r3, #0
  40415a:	910f      	str	r1, [sp, #60]	; 0x3c
  40415c:	4614      	mov	r4, r2
  40415e:	daa6      	bge.n	4040ae <_svfprintf_r+0x6ae>
  404160:	272d      	movs	r7, #45	; 0x2d
  404162:	4264      	negs	r4, r4
  404164:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404168:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40416c:	2301      	movs	r3, #1
  40416e:	e53d      	b.n	403bec <_svfprintf_r+0x1ec>
  404170:	9311      	str	r3, [sp, #68]	; 0x44
  404172:	2a00      	cmp	r2, #0
  404174:	f040 8662 	bne.w	404e3c <_svfprintf_r+0x143c>
  404178:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40417a:	3507      	adds	r5, #7
  40417c:	f025 0307 	bic.w	r3, r5, #7
  404180:	f103 0208 	add.w	r2, r3, #8
  404184:	920f      	str	r2, [sp, #60]	; 0x3c
  404186:	681a      	ldr	r2, [r3, #0]
  404188:	9215      	str	r2, [sp, #84]	; 0x54
  40418a:	685b      	ldr	r3, [r3, #4]
  40418c:	9314      	str	r3, [sp, #80]	; 0x50
  40418e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404190:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404192:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404196:	4628      	mov	r0, r5
  404198:	4621      	mov	r1, r4
  40419a:	f04f 32ff 	mov.w	r2, #4294967295
  40419e:	4b59      	ldr	r3, [pc, #356]	; (404304 <_svfprintf_r+0x904>)
  4041a0:	f003 fe62 	bl	407e68 <__aeabi_dcmpun>
  4041a4:	2800      	cmp	r0, #0
  4041a6:	f040 834a 	bne.w	40483e <_svfprintf_r+0xe3e>
  4041aa:	4628      	mov	r0, r5
  4041ac:	4621      	mov	r1, r4
  4041ae:	f04f 32ff 	mov.w	r2, #4294967295
  4041b2:	4b54      	ldr	r3, [pc, #336]	; (404304 <_svfprintf_r+0x904>)
  4041b4:	f003 fe3a 	bl	407e2c <__aeabi_dcmple>
  4041b8:	2800      	cmp	r0, #0
  4041ba:	f040 8340 	bne.w	40483e <_svfprintf_r+0xe3e>
  4041be:	a815      	add	r0, sp, #84	; 0x54
  4041c0:	c80d      	ldmia	r0, {r0, r2, r3}
  4041c2:	9914      	ldr	r1, [sp, #80]	; 0x50
  4041c4:	f003 fe28 	bl	407e18 <__aeabi_dcmplt>
  4041c8:	2800      	cmp	r0, #0
  4041ca:	f040 8530 	bne.w	404c2e <_svfprintf_r+0x122e>
  4041ce:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4041d2:	4e4d      	ldr	r6, [pc, #308]	; (404308 <_svfprintf_r+0x908>)
  4041d4:	4b4d      	ldr	r3, [pc, #308]	; (40430c <_svfprintf_r+0x90c>)
  4041d6:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  4041da:	9007      	str	r0, [sp, #28]
  4041dc:	9811      	ldr	r0, [sp, #68]	; 0x44
  4041de:	2203      	movs	r2, #3
  4041e0:	2100      	movs	r1, #0
  4041e2:	9208      	str	r2, [sp, #32]
  4041e4:	910a      	str	r1, [sp, #40]	; 0x28
  4041e6:	2847      	cmp	r0, #71	; 0x47
  4041e8:	bfd8      	it	le
  4041ea:	461e      	movle	r6, r3
  4041ec:	920e      	str	r2, [sp, #56]	; 0x38
  4041ee:	9112      	str	r1, [sp, #72]	; 0x48
  4041f0:	e51e      	b.n	403c30 <_svfprintf_r+0x230>
  4041f2:	f04b 0b08 	orr.w	fp, fp, #8
  4041f6:	f89a 3000 	ldrb.w	r3, [sl]
  4041fa:	e459      	b.n	403ab0 <_svfprintf_r+0xb0>
  4041fc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404200:	2300      	movs	r3, #0
  404202:	461c      	mov	r4, r3
  404204:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404208:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40420c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404210:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404214:	2809      	cmp	r0, #9
  404216:	d9f5      	bls.n	404204 <_svfprintf_r+0x804>
  404218:	940d      	str	r4, [sp, #52]	; 0x34
  40421a:	e44b      	b.n	403ab4 <_svfprintf_r+0xb4>
  40421c:	f04b 0b10 	orr.w	fp, fp, #16
  404220:	9311      	str	r3, [sp, #68]	; 0x44
  404222:	f01b 0320 	ands.w	r3, fp, #32
  404226:	f43f ae1d 	beq.w	403e64 <_svfprintf_r+0x464>
  40422a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40422c:	3507      	adds	r5, #7
  40422e:	f025 0307 	bic.w	r3, r5, #7
  404232:	f103 0208 	add.w	r2, r3, #8
  404236:	e9d3 4500 	ldrd	r4, r5, [r3]
  40423a:	920f      	str	r2, [sp, #60]	; 0x3c
  40423c:	2300      	movs	r3, #0
  40423e:	e4d2      	b.n	403be6 <_svfprintf_r+0x1e6>
  404240:	9311      	str	r3, [sp, #68]	; 0x44
  404242:	2a00      	cmp	r2, #0
  404244:	f040 85e7 	bne.w	404e16 <_svfprintf_r+0x1416>
  404248:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40424a:	2a00      	cmp	r2, #0
  40424c:	f43f aca3 	beq.w	403b96 <_svfprintf_r+0x196>
  404250:	2300      	movs	r3, #0
  404252:	2101      	movs	r1, #1
  404254:	461f      	mov	r7, r3
  404256:	9108      	str	r1, [sp, #32]
  404258:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40425c:	f8cd b01c 	str.w	fp, [sp, #28]
  404260:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404264:	930a      	str	r3, [sp, #40]	; 0x28
  404266:	9312      	str	r3, [sp, #72]	; 0x48
  404268:	910e      	str	r1, [sp, #56]	; 0x38
  40426a:	ae28      	add	r6, sp, #160	; 0xa0
  40426c:	e4e4      	b.n	403c38 <_svfprintf_r+0x238>
  40426e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404270:	e534      	b.n	403cdc <_svfprintf_r+0x2dc>
  404272:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404274:	2b65      	cmp	r3, #101	; 0x65
  404276:	f340 80a7 	ble.w	4043c8 <_svfprintf_r+0x9c8>
  40427a:	a815      	add	r0, sp, #84	; 0x54
  40427c:	c80d      	ldmia	r0, {r0, r2, r3}
  40427e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404280:	f003 fdc0 	bl	407e04 <__aeabi_dcmpeq>
  404284:	2800      	cmp	r0, #0
  404286:	f000 8150 	beq.w	40452a <_svfprintf_r+0xb2a>
  40428a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40428c:	4a20      	ldr	r2, [pc, #128]	; (404310 <_svfprintf_r+0x910>)
  40428e:	f8c8 2000 	str.w	r2, [r8]
  404292:	3301      	adds	r3, #1
  404294:	3401      	adds	r4, #1
  404296:	2201      	movs	r2, #1
  404298:	2b07      	cmp	r3, #7
  40429a:	9427      	str	r4, [sp, #156]	; 0x9c
  40429c:	9326      	str	r3, [sp, #152]	; 0x98
  40429e:	f8c8 2004 	str.w	r2, [r8, #4]
  4042a2:	f300 836a 	bgt.w	40497a <_svfprintf_r+0xf7a>
  4042a6:	f108 0808 	add.w	r8, r8, #8
  4042aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4042ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4042ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4042b0:	4293      	cmp	r3, r2
  4042b2:	db03      	blt.n	4042bc <_svfprintf_r+0x8bc>
  4042b4:	9b07      	ldr	r3, [sp, #28]
  4042b6:	07dd      	lsls	r5, r3, #31
  4042b8:	f57f ad82 	bpl.w	403dc0 <_svfprintf_r+0x3c0>
  4042bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042be:	9919      	ldr	r1, [sp, #100]	; 0x64
  4042c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4042c2:	f8c8 2000 	str.w	r2, [r8]
  4042c6:	3301      	adds	r3, #1
  4042c8:	440c      	add	r4, r1
  4042ca:	2b07      	cmp	r3, #7
  4042cc:	f8c8 1004 	str.w	r1, [r8, #4]
  4042d0:	9427      	str	r4, [sp, #156]	; 0x9c
  4042d2:	9326      	str	r3, [sp, #152]	; 0x98
  4042d4:	f300 839e 	bgt.w	404a14 <_svfprintf_r+0x1014>
  4042d8:	f108 0808 	add.w	r8, r8, #8
  4042dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4042de:	1e5e      	subs	r6, r3, #1
  4042e0:	2e00      	cmp	r6, #0
  4042e2:	f77f ad6d 	ble.w	403dc0 <_svfprintf_r+0x3c0>
  4042e6:	2e10      	cmp	r6, #16
  4042e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042ea:	4d0a      	ldr	r5, [pc, #40]	; (404314 <_svfprintf_r+0x914>)
  4042ec:	f340 81f5 	ble.w	4046da <_svfprintf_r+0xcda>
  4042f0:	4622      	mov	r2, r4
  4042f2:	2710      	movs	r7, #16
  4042f4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4042f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4042fa:	e013      	b.n	404324 <_svfprintf_r+0x924>
  4042fc:	004088b0 	.word	0x004088b0
  404300:	0040889c 	.word	0x0040889c
  404304:	7fefffff 	.word	0x7fefffff
  404308:	00408890 	.word	0x00408890
  40430c:	0040888c 	.word	0x0040888c
  404310:	004088cc 	.word	0x004088cc
  404314:	004088e0 	.word	0x004088e0
  404318:	f108 0808 	add.w	r8, r8, #8
  40431c:	3e10      	subs	r6, #16
  40431e:	2e10      	cmp	r6, #16
  404320:	f340 81da 	ble.w	4046d8 <_svfprintf_r+0xcd8>
  404324:	3301      	adds	r3, #1
  404326:	3210      	adds	r2, #16
  404328:	2b07      	cmp	r3, #7
  40432a:	9227      	str	r2, [sp, #156]	; 0x9c
  40432c:	9326      	str	r3, [sp, #152]	; 0x98
  40432e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404332:	ddf1      	ble.n	404318 <_svfprintf_r+0x918>
  404334:	aa25      	add	r2, sp, #148	; 0x94
  404336:	4621      	mov	r1, r4
  404338:	4658      	mov	r0, fp
  40433a:	f002 fccf 	bl	406cdc <__ssprint_r>
  40433e:	2800      	cmp	r0, #0
  404340:	f47f ac30 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404344:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404346:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404348:	46c8      	mov	r8, r9
  40434a:	e7e7      	b.n	40431c <_svfprintf_r+0x91c>
  40434c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40434e:	9a08      	ldr	r2, [sp, #32]
  404350:	1a9f      	subs	r7, r3, r2
  404352:	2f00      	cmp	r7, #0
  404354:	f77f ace5 	ble.w	403d22 <_svfprintf_r+0x322>
  404358:	2f10      	cmp	r7, #16
  40435a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40435c:	4db6      	ldr	r5, [pc, #728]	; (404638 <_svfprintf_r+0xc38>)
  40435e:	dd27      	ble.n	4043b0 <_svfprintf_r+0x9b0>
  404360:	4642      	mov	r2, r8
  404362:	4621      	mov	r1, r4
  404364:	46b0      	mov	r8, r6
  404366:	f04f 0b10 	mov.w	fp, #16
  40436a:	462e      	mov	r6, r5
  40436c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40436e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404370:	e004      	b.n	40437c <_svfprintf_r+0x97c>
  404372:	3f10      	subs	r7, #16
  404374:	2f10      	cmp	r7, #16
  404376:	f102 0208 	add.w	r2, r2, #8
  40437a:	dd15      	ble.n	4043a8 <_svfprintf_r+0x9a8>
  40437c:	3301      	adds	r3, #1
  40437e:	3110      	adds	r1, #16
  404380:	2b07      	cmp	r3, #7
  404382:	9127      	str	r1, [sp, #156]	; 0x9c
  404384:	9326      	str	r3, [sp, #152]	; 0x98
  404386:	e882 0840 	stmia.w	r2, {r6, fp}
  40438a:	ddf2      	ble.n	404372 <_svfprintf_r+0x972>
  40438c:	aa25      	add	r2, sp, #148	; 0x94
  40438e:	4629      	mov	r1, r5
  404390:	4620      	mov	r0, r4
  404392:	f002 fca3 	bl	406cdc <__ssprint_r>
  404396:	2800      	cmp	r0, #0
  404398:	f47f ac04 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  40439c:	3f10      	subs	r7, #16
  40439e:	2f10      	cmp	r7, #16
  4043a0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4043a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043a4:	464a      	mov	r2, r9
  4043a6:	dce9      	bgt.n	40437c <_svfprintf_r+0x97c>
  4043a8:	4635      	mov	r5, r6
  4043aa:	460c      	mov	r4, r1
  4043ac:	4646      	mov	r6, r8
  4043ae:	4690      	mov	r8, r2
  4043b0:	3301      	adds	r3, #1
  4043b2:	443c      	add	r4, r7
  4043b4:	2b07      	cmp	r3, #7
  4043b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4043b8:	9326      	str	r3, [sp, #152]	; 0x98
  4043ba:	e888 00a0 	stmia.w	r8, {r5, r7}
  4043be:	f300 8232 	bgt.w	404826 <_svfprintf_r+0xe26>
  4043c2:	f108 0808 	add.w	r8, r8, #8
  4043c6:	e4ac      	b.n	403d22 <_svfprintf_r+0x322>
  4043c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4043ca:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043cc:	2b01      	cmp	r3, #1
  4043ce:	f340 81fe 	ble.w	4047ce <_svfprintf_r+0xdce>
  4043d2:	3701      	adds	r7, #1
  4043d4:	3401      	adds	r4, #1
  4043d6:	2301      	movs	r3, #1
  4043d8:	2f07      	cmp	r7, #7
  4043da:	9427      	str	r4, [sp, #156]	; 0x9c
  4043dc:	9726      	str	r7, [sp, #152]	; 0x98
  4043de:	f8c8 6000 	str.w	r6, [r8]
  4043e2:	f8c8 3004 	str.w	r3, [r8, #4]
  4043e6:	f300 8203 	bgt.w	4047f0 <_svfprintf_r+0xdf0>
  4043ea:	f108 0808 	add.w	r8, r8, #8
  4043ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4043f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4043f2:	f8c8 3000 	str.w	r3, [r8]
  4043f6:	3701      	adds	r7, #1
  4043f8:	4414      	add	r4, r2
  4043fa:	2f07      	cmp	r7, #7
  4043fc:	9427      	str	r4, [sp, #156]	; 0x9c
  4043fe:	9726      	str	r7, [sp, #152]	; 0x98
  404400:	f8c8 2004 	str.w	r2, [r8, #4]
  404404:	f300 8200 	bgt.w	404808 <_svfprintf_r+0xe08>
  404408:	f108 0808 	add.w	r8, r8, #8
  40440c:	a815      	add	r0, sp, #84	; 0x54
  40440e:	c80d      	ldmia	r0, {r0, r2, r3}
  404410:	9914      	ldr	r1, [sp, #80]	; 0x50
  404412:	f003 fcf7 	bl	407e04 <__aeabi_dcmpeq>
  404416:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404418:	2800      	cmp	r0, #0
  40441a:	f040 8101 	bne.w	404620 <_svfprintf_r+0xc20>
  40441e:	3b01      	subs	r3, #1
  404420:	3701      	adds	r7, #1
  404422:	3601      	adds	r6, #1
  404424:	441c      	add	r4, r3
  404426:	2f07      	cmp	r7, #7
  404428:	9726      	str	r7, [sp, #152]	; 0x98
  40442a:	9427      	str	r4, [sp, #156]	; 0x9c
  40442c:	f8c8 6000 	str.w	r6, [r8]
  404430:	f8c8 3004 	str.w	r3, [r8, #4]
  404434:	f300 8127 	bgt.w	404686 <_svfprintf_r+0xc86>
  404438:	f108 0808 	add.w	r8, r8, #8
  40443c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40443e:	f8c8 2004 	str.w	r2, [r8, #4]
  404442:	3701      	adds	r7, #1
  404444:	4414      	add	r4, r2
  404446:	ab21      	add	r3, sp, #132	; 0x84
  404448:	2f07      	cmp	r7, #7
  40444a:	9427      	str	r4, [sp, #156]	; 0x9c
  40444c:	9726      	str	r7, [sp, #152]	; 0x98
  40444e:	f8c8 3000 	str.w	r3, [r8]
  404452:	f77f acb3 	ble.w	403dbc <_svfprintf_r+0x3bc>
  404456:	aa25      	add	r2, sp, #148	; 0x94
  404458:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40445a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40445c:	f002 fc3e 	bl	406cdc <__ssprint_r>
  404460:	2800      	cmp	r0, #0
  404462:	f47f ab9f 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404466:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404468:	46c8      	mov	r8, r9
  40446a:	e4a9      	b.n	403dc0 <_svfprintf_r+0x3c0>
  40446c:	aa25      	add	r2, sp, #148	; 0x94
  40446e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404470:	980c      	ldr	r0, [sp, #48]	; 0x30
  404472:	f002 fc33 	bl	406cdc <__ssprint_r>
  404476:	2800      	cmp	r0, #0
  404478:	f43f aceb 	beq.w	403e52 <_svfprintf_r+0x452>
  40447c:	f7ff bb92 	b.w	403ba4 <_svfprintf_r+0x1a4>
  404480:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404484:	2b01      	cmp	r3, #1
  404486:	f000 8134 	beq.w	4046f2 <_svfprintf_r+0xcf2>
  40448a:	2b02      	cmp	r3, #2
  40448c:	d125      	bne.n	4044da <_svfprintf_r+0xada>
  40448e:	f8cd b01c 	str.w	fp, [sp, #28]
  404492:	2400      	movs	r4, #0
  404494:	2500      	movs	r5, #0
  404496:	e61e      	b.n	4040d6 <_svfprintf_r+0x6d6>
  404498:	aa25      	add	r2, sp, #148	; 0x94
  40449a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40449c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40449e:	f002 fc1d 	bl	406cdc <__ssprint_r>
  4044a2:	2800      	cmp	r0, #0
  4044a4:	f47f ab7e 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  4044a8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4044aa:	46c8      	mov	r8, r9
  4044ac:	e475      	b.n	403d9a <_svfprintf_r+0x39a>
  4044ae:	aa25      	add	r2, sp, #148	; 0x94
  4044b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044b2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044b4:	f002 fc12 	bl	406cdc <__ssprint_r>
  4044b8:	2800      	cmp	r0, #0
  4044ba:	f47f ab73 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  4044be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4044c0:	46c8      	mov	r8, r9
  4044c2:	e41b      	b.n	403cfc <_svfprintf_r+0x2fc>
  4044c4:	aa25      	add	r2, sp, #148	; 0x94
  4044c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044c8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044ca:	f002 fc07 	bl	406cdc <__ssprint_r>
  4044ce:	2800      	cmp	r0, #0
  4044d0:	f47f ab68 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  4044d4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4044d6:	46c8      	mov	r8, r9
  4044d8:	e420      	b.n	403d1c <_svfprintf_r+0x31c>
  4044da:	f8cd b01c 	str.w	fp, [sp, #28]
  4044de:	2400      	movs	r4, #0
  4044e0:	2500      	movs	r5, #0
  4044e2:	4649      	mov	r1, r9
  4044e4:	e000      	b.n	4044e8 <_svfprintf_r+0xae8>
  4044e6:	4631      	mov	r1, r6
  4044e8:	08e2      	lsrs	r2, r4, #3
  4044ea:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4044ee:	08e8      	lsrs	r0, r5, #3
  4044f0:	f004 0307 	and.w	r3, r4, #7
  4044f4:	4605      	mov	r5, r0
  4044f6:	4614      	mov	r4, r2
  4044f8:	3330      	adds	r3, #48	; 0x30
  4044fa:	ea54 0205 	orrs.w	r2, r4, r5
  4044fe:	f801 3c01 	strb.w	r3, [r1, #-1]
  404502:	f101 36ff 	add.w	r6, r1, #4294967295
  404506:	d1ee      	bne.n	4044e6 <_svfprintf_r+0xae6>
  404508:	9a07      	ldr	r2, [sp, #28]
  40450a:	07d2      	lsls	r2, r2, #31
  40450c:	f57f adf3 	bpl.w	4040f6 <_svfprintf_r+0x6f6>
  404510:	2b30      	cmp	r3, #48	; 0x30
  404512:	f43f adf0 	beq.w	4040f6 <_svfprintf_r+0x6f6>
  404516:	3902      	subs	r1, #2
  404518:	2330      	movs	r3, #48	; 0x30
  40451a:	f806 3c01 	strb.w	r3, [r6, #-1]
  40451e:	eba9 0301 	sub.w	r3, r9, r1
  404522:	930e      	str	r3, [sp, #56]	; 0x38
  404524:	460e      	mov	r6, r1
  404526:	f7ff bb7b 	b.w	403c20 <_svfprintf_r+0x220>
  40452a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40452c:	2900      	cmp	r1, #0
  40452e:	f340 822e 	ble.w	40498e <_svfprintf_r+0xf8e>
  404532:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404534:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404536:	4293      	cmp	r3, r2
  404538:	bfa8      	it	ge
  40453a:	4613      	movge	r3, r2
  40453c:	2b00      	cmp	r3, #0
  40453e:	461f      	mov	r7, r3
  404540:	dd0d      	ble.n	40455e <_svfprintf_r+0xb5e>
  404542:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404544:	f8c8 6000 	str.w	r6, [r8]
  404548:	3301      	adds	r3, #1
  40454a:	443c      	add	r4, r7
  40454c:	2b07      	cmp	r3, #7
  40454e:	9427      	str	r4, [sp, #156]	; 0x9c
  404550:	f8c8 7004 	str.w	r7, [r8, #4]
  404554:	9326      	str	r3, [sp, #152]	; 0x98
  404556:	f300 831f 	bgt.w	404b98 <_svfprintf_r+0x1198>
  40455a:	f108 0808 	add.w	r8, r8, #8
  40455e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404560:	2f00      	cmp	r7, #0
  404562:	bfa8      	it	ge
  404564:	1bdb      	subge	r3, r3, r7
  404566:	2b00      	cmp	r3, #0
  404568:	461f      	mov	r7, r3
  40456a:	f340 80d6 	ble.w	40471a <_svfprintf_r+0xd1a>
  40456e:	2f10      	cmp	r7, #16
  404570:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404572:	4d31      	ldr	r5, [pc, #196]	; (404638 <_svfprintf_r+0xc38>)
  404574:	f340 81ed 	ble.w	404952 <_svfprintf_r+0xf52>
  404578:	4642      	mov	r2, r8
  40457a:	4621      	mov	r1, r4
  40457c:	46b0      	mov	r8, r6
  40457e:	f04f 0b10 	mov.w	fp, #16
  404582:	462e      	mov	r6, r5
  404584:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404586:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404588:	e004      	b.n	404594 <_svfprintf_r+0xb94>
  40458a:	3208      	adds	r2, #8
  40458c:	3f10      	subs	r7, #16
  40458e:	2f10      	cmp	r7, #16
  404590:	f340 81db 	ble.w	40494a <_svfprintf_r+0xf4a>
  404594:	3301      	adds	r3, #1
  404596:	3110      	adds	r1, #16
  404598:	2b07      	cmp	r3, #7
  40459a:	9127      	str	r1, [sp, #156]	; 0x9c
  40459c:	9326      	str	r3, [sp, #152]	; 0x98
  40459e:	e882 0840 	stmia.w	r2, {r6, fp}
  4045a2:	ddf2      	ble.n	40458a <_svfprintf_r+0xb8a>
  4045a4:	aa25      	add	r2, sp, #148	; 0x94
  4045a6:	4629      	mov	r1, r5
  4045a8:	4620      	mov	r0, r4
  4045aa:	f002 fb97 	bl	406cdc <__ssprint_r>
  4045ae:	2800      	cmp	r0, #0
  4045b0:	f47f aaf8 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  4045b4:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4045b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045b8:	464a      	mov	r2, r9
  4045ba:	e7e7      	b.n	40458c <_svfprintf_r+0xb8c>
  4045bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4045be:	930e      	str	r3, [sp, #56]	; 0x38
  4045c0:	464e      	mov	r6, r9
  4045c2:	f7ff bb2d 	b.w	403c20 <_svfprintf_r+0x220>
  4045c6:	2d00      	cmp	r5, #0
  4045c8:	bf08      	it	eq
  4045ca:	2c0a      	cmpeq	r4, #10
  4045cc:	f0c0 808f 	bcc.w	4046ee <_svfprintf_r+0xcee>
  4045d0:	464e      	mov	r6, r9
  4045d2:	4620      	mov	r0, r4
  4045d4:	4629      	mov	r1, r5
  4045d6:	220a      	movs	r2, #10
  4045d8:	2300      	movs	r3, #0
  4045da:	f003 fc83 	bl	407ee4 <__aeabi_uldivmod>
  4045de:	3230      	adds	r2, #48	; 0x30
  4045e0:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4045e4:	4620      	mov	r0, r4
  4045e6:	4629      	mov	r1, r5
  4045e8:	2300      	movs	r3, #0
  4045ea:	220a      	movs	r2, #10
  4045ec:	f003 fc7a 	bl	407ee4 <__aeabi_uldivmod>
  4045f0:	4604      	mov	r4, r0
  4045f2:	460d      	mov	r5, r1
  4045f4:	ea54 0305 	orrs.w	r3, r4, r5
  4045f8:	d1eb      	bne.n	4045d2 <_svfprintf_r+0xbd2>
  4045fa:	eba9 0306 	sub.w	r3, r9, r6
  4045fe:	930e      	str	r3, [sp, #56]	; 0x38
  404600:	f7ff bb0e 	b.w	403c20 <_svfprintf_r+0x220>
  404604:	aa25      	add	r2, sp, #148	; 0x94
  404606:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404608:	980c      	ldr	r0, [sp, #48]	; 0x30
  40460a:	f002 fb67 	bl	406cdc <__ssprint_r>
  40460e:	2800      	cmp	r0, #0
  404610:	f47f aac8 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404614:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404618:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40461a:	46c8      	mov	r8, r9
  40461c:	f7ff bb5e 	b.w	403cdc <_svfprintf_r+0x2dc>
  404620:	1e5e      	subs	r6, r3, #1
  404622:	2e00      	cmp	r6, #0
  404624:	f77f af0a 	ble.w	40443c <_svfprintf_r+0xa3c>
  404628:	2e10      	cmp	r6, #16
  40462a:	4d03      	ldr	r5, [pc, #12]	; (404638 <_svfprintf_r+0xc38>)
  40462c:	dd22      	ble.n	404674 <_svfprintf_r+0xc74>
  40462e:	4622      	mov	r2, r4
  404630:	f04f 0b10 	mov.w	fp, #16
  404634:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404636:	e006      	b.n	404646 <_svfprintf_r+0xc46>
  404638:	004088e0 	.word	0x004088e0
  40463c:	3e10      	subs	r6, #16
  40463e:	2e10      	cmp	r6, #16
  404640:	f108 0808 	add.w	r8, r8, #8
  404644:	dd15      	ble.n	404672 <_svfprintf_r+0xc72>
  404646:	3701      	adds	r7, #1
  404648:	3210      	adds	r2, #16
  40464a:	2f07      	cmp	r7, #7
  40464c:	9227      	str	r2, [sp, #156]	; 0x9c
  40464e:	9726      	str	r7, [sp, #152]	; 0x98
  404650:	e888 0820 	stmia.w	r8, {r5, fp}
  404654:	ddf2      	ble.n	40463c <_svfprintf_r+0xc3c>
  404656:	aa25      	add	r2, sp, #148	; 0x94
  404658:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40465a:	4620      	mov	r0, r4
  40465c:	f002 fb3e 	bl	406cdc <__ssprint_r>
  404660:	2800      	cmp	r0, #0
  404662:	f47f aa9f 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404666:	3e10      	subs	r6, #16
  404668:	2e10      	cmp	r6, #16
  40466a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40466c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40466e:	46c8      	mov	r8, r9
  404670:	dce9      	bgt.n	404646 <_svfprintf_r+0xc46>
  404672:	4614      	mov	r4, r2
  404674:	3701      	adds	r7, #1
  404676:	4434      	add	r4, r6
  404678:	2f07      	cmp	r7, #7
  40467a:	9427      	str	r4, [sp, #156]	; 0x9c
  40467c:	9726      	str	r7, [sp, #152]	; 0x98
  40467e:	e888 0060 	stmia.w	r8, {r5, r6}
  404682:	f77f aed9 	ble.w	404438 <_svfprintf_r+0xa38>
  404686:	aa25      	add	r2, sp, #148	; 0x94
  404688:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40468a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40468c:	f002 fb26 	bl	406cdc <__ssprint_r>
  404690:	2800      	cmp	r0, #0
  404692:	f47f aa87 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404696:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404698:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40469a:	46c8      	mov	r8, r9
  40469c:	e6ce      	b.n	40443c <_svfprintf_r+0xa3c>
  40469e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4046a0:	6814      	ldr	r4, [r2, #0]
  4046a2:	4613      	mov	r3, r2
  4046a4:	3304      	adds	r3, #4
  4046a6:	17e5      	asrs	r5, r4, #31
  4046a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4046aa:	4622      	mov	r2, r4
  4046ac:	462b      	mov	r3, r5
  4046ae:	e4fa      	b.n	4040a6 <_svfprintf_r+0x6a6>
  4046b0:	3204      	adds	r2, #4
  4046b2:	681c      	ldr	r4, [r3, #0]
  4046b4:	920f      	str	r2, [sp, #60]	; 0x3c
  4046b6:	2301      	movs	r3, #1
  4046b8:	2500      	movs	r5, #0
  4046ba:	f7ff ba94 	b.w	403be6 <_svfprintf_r+0x1e6>
  4046be:	681c      	ldr	r4, [r3, #0]
  4046c0:	3304      	adds	r3, #4
  4046c2:	930f      	str	r3, [sp, #60]	; 0x3c
  4046c4:	2500      	movs	r5, #0
  4046c6:	e421      	b.n	403f0c <_svfprintf_r+0x50c>
  4046c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4046ca:	460a      	mov	r2, r1
  4046cc:	3204      	adds	r2, #4
  4046ce:	680c      	ldr	r4, [r1, #0]
  4046d0:	920f      	str	r2, [sp, #60]	; 0x3c
  4046d2:	2500      	movs	r5, #0
  4046d4:	f7ff ba87 	b.w	403be6 <_svfprintf_r+0x1e6>
  4046d8:	4614      	mov	r4, r2
  4046da:	3301      	adds	r3, #1
  4046dc:	4434      	add	r4, r6
  4046de:	2b07      	cmp	r3, #7
  4046e0:	9427      	str	r4, [sp, #156]	; 0x9c
  4046e2:	9326      	str	r3, [sp, #152]	; 0x98
  4046e4:	e888 0060 	stmia.w	r8, {r5, r6}
  4046e8:	f77f ab68 	ble.w	403dbc <_svfprintf_r+0x3bc>
  4046ec:	e6b3      	b.n	404456 <_svfprintf_r+0xa56>
  4046ee:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4046f2:	f8cd b01c 	str.w	fp, [sp, #28]
  4046f6:	ae42      	add	r6, sp, #264	; 0x108
  4046f8:	3430      	adds	r4, #48	; 0x30
  4046fa:	2301      	movs	r3, #1
  4046fc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404700:	930e      	str	r3, [sp, #56]	; 0x38
  404702:	f7ff ba8d 	b.w	403c20 <_svfprintf_r+0x220>
  404706:	aa25      	add	r2, sp, #148	; 0x94
  404708:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40470a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40470c:	f002 fae6 	bl	406cdc <__ssprint_r>
  404710:	2800      	cmp	r0, #0
  404712:	f47f aa47 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404716:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404718:	46c8      	mov	r8, r9
  40471a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40471c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40471e:	429a      	cmp	r2, r3
  404720:	db44      	blt.n	4047ac <_svfprintf_r+0xdac>
  404722:	9b07      	ldr	r3, [sp, #28]
  404724:	07d9      	lsls	r1, r3, #31
  404726:	d441      	bmi.n	4047ac <_svfprintf_r+0xdac>
  404728:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40472a:	9812      	ldr	r0, [sp, #72]	; 0x48
  40472c:	1a9a      	subs	r2, r3, r2
  40472e:	1a1d      	subs	r5, r3, r0
  404730:	4295      	cmp	r5, r2
  404732:	bfa8      	it	ge
  404734:	4615      	movge	r5, r2
  404736:	2d00      	cmp	r5, #0
  404738:	dd0e      	ble.n	404758 <_svfprintf_r+0xd58>
  40473a:	9926      	ldr	r1, [sp, #152]	; 0x98
  40473c:	f8c8 5004 	str.w	r5, [r8, #4]
  404740:	3101      	adds	r1, #1
  404742:	4406      	add	r6, r0
  404744:	442c      	add	r4, r5
  404746:	2907      	cmp	r1, #7
  404748:	f8c8 6000 	str.w	r6, [r8]
  40474c:	9427      	str	r4, [sp, #156]	; 0x9c
  40474e:	9126      	str	r1, [sp, #152]	; 0x98
  404750:	f300 823b 	bgt.w	404bca <_svfprintf_r+0x11ca>
  404754:	f108 0808 	add.w	r8, r8, #8
  404758:	2d00      	cmp	r5, #0
  40475a:	bfac      	ite	ge
  40475c:	1b56      	subge	r6, r2, r5
  40475e:	4616      	movlt	r6, r2
  404760:	2e00      	cmp	r6, #0
  404762:	f77f ab2d 	ble.w	403dc0 <_svfprintf_r+0x3c0>
  404766:	2e10      	cmp	r6, #16
  404768:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40476a:	4db0      	ldr	r5, [pc, #704]	; (404a2c <_svfprintf_r+0x102c>)
  40476c:	ddb5      	ble.n	4046da <_svfprintf_r+0xcda>
  40476e:	4622      	mov	r2, r4
  404770:	2710      	movs	r7, #16
  404772:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404776:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404778:	e004      	b.n	404784 <_svfprintf_r+0xd84>
  40477a:	f108 0808 	add.w	r8, r8, #8
  40477e:	3e10      	subs	r6, #16
  404780:	2e10      	cmp	r6, #16
  404782:	dda9      	ble.n	4046d8 <_svfprintf_r+0xcd8>
  404784:	3301      	adds	r3, #1
  404786:	3210      	adds	r2, #16
  404788:	2b07      	cmp	r3, #7
  40478a:	9227      	str	r2, [sp, #156]	; 0x9c
  40478c:	9326      	str	r3, [sp, #152]	; 0x98
  40478e:	e888 00a0 	stmia.w	r8, {r5, r7}
  404792:	ddf2      	ble.n	40477a <_svfprintf_r+0xd7a>
  404794:	aa25      	add	r2, sp, #148	; 0x94
  404796:	4621      	mov	r1, r4
  404798:	4658      	mov	r0, fp
  40479a:	f002 fa9f 	bl	406cdc <__ssprint_r>
  40479e:	2800      	cmp	r0, #0
  4047a0:	f47f aa00 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  4047a4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4047a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047a8:	46c8      	mov	r8, r9
  4047aa:	e7e8      	b.n	40477e <_svfprintf_r+0xd7e>
  4047ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047ae:	9819      	ldr	r0, [sp, #100]	; 0x64
  4047b0:	991a      	ldr	r1, [sp, #104]	; 0x68
  4047b2:	f8c8 1000 	str.w	r1, [r8]
  4047b6:	3301      	adds	r3, #1
  4047b8:	4404      	add	r4, r0
  4047ba:	2b07      	cmp	r3, #7
  4047bc:	9427      	str	r4, [sp, #156]	; 0x9c
  4047be:	f8c8 0004 	str.w	r0, [r8, #4]
  4047c2:	9326      	str	r3, [sp, #152]	; 0x98
  4047c4:	f300 81f5 	bgt.w	404bb2 <_svfprintf_r+0x11b2>
  4047c8:	f108 0808 	add.w	r8, r8, #8
  4047cc:	e7ac      	b.n	404728 <_svfprintf_r+0xd28>
  4047ce:	9b07      	ldr	r3, [sp, #28]
  4047d0:	07da      	lsls	r2, r3, #31
  4047d2:	f53f adfe 	bmi.w	4043d2 <_svfprintf_r+0x9d2>
  4047d6:	3701      	adds	r7, #1
  4047d8:	3401      	adds	r4, #1
  4047da:	2301      	movs	r3, #1
  4047dc:	2f07      	cmp	r7, #7
  4047de:	9427      	str	r4, [sp, #156]	; 0x9c
  4047e0:	9726      	str	r7, [sp, #152]	; 0x98
  4047e2:	f8c8 6000 	str.w	r6, [r8]
  4047e6:	f8c8 3004 	str.w	r3, [r8, #4]
  4047ea:	f77f ae25 	ble.w	404438 <_svfprintf_r+0xa38>
  4047ee:	e74a      	b.n	404686 <_svfprintf_r+0xc86>
  4047f0:	aa25      	add	r2, sp, #148	; 0x94
  4047f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047f4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047f6:	f002 fa71 	bl	406cdc <__ssprint_r>
  4047fa:	2800      	cmp	r0, #0
  4047fc:	f47f a9d2 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404800:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404802:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404804:	46c8      	mov	r8, r9
  404806:	e5f2      	b.n	4043ee <_svfprintf_r+0x9ee>
  404808:	aa25      	add	r2, sp, #148	; 0x94
  40480a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40480c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40480e:	f002 fa65 	bl	406cdc <__ssprint_r>
  404812:	2800      	cmp	r0, #0
  404814:	f47f a9c6 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404818:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40481a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40481c:	46c8      	mov	r8, r9
  40481e:	e5f5      	b.n	40440c <_svfprintf_r+0xa0c>
  404820:	464e      	mov	r6, r9
  404822:	f7ff b9fd 	b.w	403c20 <_svfprintf_r+0x220>
  404826:	aa25      	add	r2, sp, #148	; 0x94
  404828:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40482a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40482c:	f002 fa56 	bl	406cdc <__ssprint_r>
  404830:	2800      	cmp	r0, #0
  404832:	f47f a9b7 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404836:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404838:	46c8      	mov	r8, r9
  40483a:	f7ff ba72 	b.w	403d22 <_svfprintf_r+0x322>
  40483e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404840:	4622      	mov	r2, r4
  404842:	4620      	mov	r0, r4
  404844:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404846:	4623      	mov	r3, r4
  404848:	4621      	mov	r1, r4
  40484a:	f003 fb0d 	bl	407e68 <__aeabi_dcmpun>
  40484e:	2800      	cmp	r0, #0
  404850:	f040 8286 	bne.w	404d60 <_svfprintf_r+0x1360>
  404854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404856:	3301      	adds	r3, #1
  404858:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40485a:	f023 0320 	bic.w	r3, r3, #32
  40485e:	930e      	str	r3, [sp, #56]	; 0x38
  404860:	f000 81e2 	beq.w	404c28 <_svfprintf_r+0x1228>
  404864:	2b47      	cmp	r3, #71	; 0x47
  404866:	f000 811e 	beq.w	404aa6 <_svfprintf_r+0x10a6>
  40486a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40486e:	9307      	str	r3, [sp, #28]
  404870:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404872:	1e1f      	subs	r7, r3, #0
  404874:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404876:	9308      	str	r3, [sp, #32]
  404878:	bfbb      	ittet	lt
  40487a:	463b      	movlt	r3, r7
  40487c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404880:	2300      	movge	r3, #0
  404882:	232d      	movlt	r3, #45	; 0x2d
  404884:	9310      	str	r3, [sp, #64]	; 0x40
  404886:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404888:	2b66      	cmp	r3, #102	; 0x66
  40488a:	f000 81bb 	beq.w	404c04 <_svfprintf_r+0x1204>
  40488e:	2b46      	cmp	r3, #70	; 0x46
  404890:	f000 80df 	beq.w	404a52 <_svfprintf_r+0x1052>
  404894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404896:	9a08      	ldr	r2, [sp, #32]
  404898:	2b45      	cmp	r3, #69	; 0x45
  40489a:	bf0c      	ite	eq
  40489c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40489e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4048a0:	a823      	add	r0, sp, #140	; 0x8c
  4048a2:	a920      	add	r1, sp, #128	; 0x80
  4048a4:	bf08      	it	eq
  4048a6:	1c5d      	addeq	r5, r3, #1
  4048a8:	9004      	str	r0, [sp, #16]
  4048aa:	9103      	str	r1, [sp, #12]
  4048ac:	a81f      	add	r0, sp, #124	; 0x7c
  4048ae:	2102      	movs	r1, #2
  4048b0:	463b      	mov	r3, r7
  4048b2:	9002      	str	r0, [sp, #8]
  4048b4:	9501      	str	r5, [sp, #4]
  4048b6:	9100      	str	r1, [sp, #0]
  4048b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048ba:	f000 fb75 	bl	404fa8 <_dtoa_r>
  4048be:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4048c0:	2b67      	cmp	r3, #103	; 0x67
  4048c2:	4606      	mov	r6, r0
  4048c4:	f040 81e0 	bne.w	404c88 <_svfprintf_r+0x1288>
  4048c8:	f01b 0f01 	tst.w	fp, #1
  4048cc:	f000 8246 	beq.w	404d5c <_svfprintf_r+0x135c>
  4048d0:	1974      	adds	r4, r6, r5
  4048d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4048d4:	9808      	ldr	r0, [sp, #32]
  4048d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4048d8:	4639      	mov	r1, r7
  4048da:	f003 fa93 	bl	407e04 <__aeabi_dcmpeq>
  4048de:	2800      	cmp	r0, #0
  4048e0:	f040 8165 	bne.w	404bae <_svfprintf_r+0x11ae>
  4048e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4048e6:	42a3      	cmp	r3, r4
  4048e8:	d206      	bcs.n	4048f8 <_svfprintf_r+0xef8>
  4048ea:	2130      	movs	r1, #48	; 0x30
  4048ec:	1c5a      	adds	r2, r3, #1
  4048ee:	9223      	str	r2, [sp, #140]	; 0x8c
  4048f0:	7019      	strb	r1, [r3, #0]
  4048f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4048f4:	429c      	cmp	r4, r3
  4048f6:	d8f9      	bhi.n	4048ec <_svfprintf_r+0xeec>
  4048f8:	1b9b      	subs	r3, r3, r6
  4048fa:	9313      	str	r3, [sp, #76]	; 0x4c
  4048fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4048fe:	2b47      	cmp	r3, #71	; 0x47
  404900:	f000 80e9 	beq.w	404ad6 <_svfprintf_r+0x10d6>
  404904:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404906:	2b65      	cmp	r3, #101	; 0x65
  404908:	f340 81cd 	ble.w	404ca6 <_svfprintf_r+0x12a6>
  40490c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40490e:	2b66      	cmp	r3, #102	; 0x66
  404910:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404912:	9312      	str	r3, [sp, #72]	; 0x48
  404914:	f000 819e 	beq.w	404c54 <_svfprintf_r+0x1254>
  404918:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40491a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40491c:	4619      	mov	r1, r3
  40491e:	4291      	cmp	r1, r2
  404920:	f300 818a 	bgt.w	404c38 <_svfprintf_r+0x1238>
  404924:	f01b 0f01 	tst.w	fp, #1
  404928:	f040 8213 	bne.w	404d52 <_svfprintf_r+0x1352>
  40492c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404930:	9308      	str	r3, [sp, #32]
  404932:	2367      	movs	r3, #103	; 0x67
  404934:	920e      	str	r2, [sp, #56]	; 0x38
  404936:	9311      	str	r3, [sp, #68]	; 0x44
  404938:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40493a:	2b00      	cmp	r3, #0
  40493c:	f040 80c4 	bne.w	404ac8 <_svfprintf_r+0x10c8>
  404940:	930a      	str	r3, [sp, #40]	; 0x28
  404942:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404946:	f7ff b973 	b.w	403c30 <_svfprintf_r+0x230>
  40494a:	4635      	mov	r5, r6
  40494c:	460c      	mov	r4, r1
  40494e:	4646      	mov	r6, r8
  404950:	4690      	mov	r8, r2
  404952:	3301      	adds	r3, #1
  404954:	443c      	add	r4, r7
  404956:	2b07      	cmp	r3, #7
  404958:	9427      	str	r4, [sp, #156]	; 0x9c
  40495a:	9326      	str	r3, [sp, #152]	; 0x98
  40495c:	e888 00a0 	stmia.w	r8, {r5, r7}
  404960:	f73f aed1 	bgt.w	404706 <_svfprintf_r+0xd06>
  404964:	f108 0808 	add.w	r8, r8, #8
  404968:	e6d7      	b.n	40471a <_svfprintf_r+0xd1a>
  40496a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40496c:	6813      	ldr	r3, [r2, #0]
  40496e:	3204      	adds	r2, #4
  404970:	920f      	str	r2, [sp, #60]	; 0x3c
  404972:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404974:	601a      	str	r2, [r3, #0]
  404976:	f7ff b86a 	b.w	403a4e <_svfprintf_r+0x4e>
  40497a:	aa25      	add	r2, sp, #148	; 0x94
  40497c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40497e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404980:	f002 f9ac 	bl	406cdc <__ssprint_r>
  404984:	2800      	cmp	r0, #0
  404986:	f47f a90d 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  40498a:	46c8      	mov	r8, r9
  40498c:	e48d      	b.n	4042aa <_svfprintf_r+0x8aa>
  40498e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404990:	4a27      	ldr	r2, [pc, #156]	; (404a30 <_svfprintf_r+0x1030>)
  404992:	f8c8 2000 	str.w	r2, [r8]
  404996:	3301      	adds	r3, #1
  404998:	3401      	adds	r4, #1
  40499a:	2201      	movs	r2, #1
  40499c:	2b07      	cmp	r3, #7
  40499e:	9427      	str	r4, [sp, #156]	; 0x9c
  4049a0:	9326      	str	r3, [sp, #152]	; 0x98
  4049a2:	f8c8 2004 	str.w	r2, [r8, #4]
  4049a6:	dc72      	bgt.n	404a8e <_svfprintf_r+0x108e>
  4049a8:	f108 0808 	add.w	r8, r8, #8
  4049ac:	b929      	cbnz	r1, 4049ba <_svfprintf_r+0xfba>
  4049ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4049b0:	b91b      	cbnz	r3, 4049ba <_svfprintf_r+0xfba>
  4049b2:	9b07      	ldr	r3, [sp, #28]
  4049b4:	07d8      	lsls	r0, r3, #31
  4049b6:	f57f aa03 	bpl.w	403dc0 <_svfprintf_r+0x3c0>
  4049ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049bc:	9819      	ldr	r0, [sp, #100]	; 0x64
  4049be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4049c0:	f8c8 2000 	str.w	r2, [r8]
  4049c4:	3301      	adds	r3, #1
  4049c6:	4602      	mov	r2, r0
  4049c8:	4422      	add	r2, r4
  4049ca:	2b07      	cmp	r3, #7
  4049cc:	9227      	str	r2, [sp, #156]	; 0x9c
  4049ce:	f8c8 0004 	str.w	r0, [r8, #4]
  4049d2:	9326      	str	r3, [sp, #152]	; 0x98
  4049d4:	f300 818d 	bgt.w	404cf2 <_svfprintf_r+0x12f2>
  4049d8:	f108 0808 	add.w	r8, r8, #8
  4049dc:	2900      	cmp	r1, #0
  4049de:	f2c0 8165 	blt.w	404cac <_svfprintf_r+0x12ac>
  4049e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4049e4:	f8c8 6000 	str.w	r6, [r8]
  4049e8:	3301      	adds	r3, #1
  4049ea:	188c      	adds	r4, r1, r2
  4049ec:	2b07      	cmp	r3, #7
  4049ee:	9427      	str	r4, [sp, #156]	; 0x9c
  4049f0:	9326      	str	r3, [sp, #152]	; 0x98
  4049f2:	f8c8 1004 	str.w	r1, [r8, #4]
  4049f6:	f77f a9e1 	ble.w	403dbc <_svfprintf_r+0x3bc>
  4049fa:	e52c      	b.n	404456 <_svfprintf_r+0xa56>
  4049fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4049fe:	9909      	ldr	r1, [sp, #36]	; 0x24
  404a00:	6813      	ldr	r3, [r2, #0]
  404a02:	17cd      	asrs	r5, r1, #31
  404a04:	4608      	mov	r0, r1
  404a06:	3204      	adds	r2, #4
  404a08:	4629      	mov	r1, r5
  404a0a:	920f      	str	r2, [sp, #60]	; 0x3c
  404a0c:	e9c3 0100 	strd	r0, r1, [r3]
  404a10:	f7ff b81d 	b.w	403a4e <_svfprintf_r+0x4e>
  404a14:	aa25      	add	r2, sp, #148	; 0x94
  404a16:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a18:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a1a:	f002 f95f 	bl	406cdc <__ssprint_r>
  404a1e:	2800      	cmp	r0, #0
  404a20:	f47f a8c0 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404a24:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404a26:	46c8      	mov	r8, r9
  404a28:	e458      	b.n	4042dc <_svfprintf_r+0x8dc>
  404a2a:	bf00      	nop
  404a2c:	004088e0 	.word	0x004088e0
  404a30:	004088cc 	.word	0x004088cc
  404a34:	2140      	movs	r1, #64	; 0x40
  404a36:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a38:	f001 fa0c 	bl	405e54 <_malloc_r>
  404a3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404a3e:	6010      	str	r0, [r2, #0]
  404a40:	6110      	str	r0, [r2, #16]
  404a42:	2800      	cmp	r0, #0
  404a44:	f000 81f2 	beq.w	404e2c <_svfprintf_r+0x142c>
  404a48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404a4a:	2340      	movs	r3, #64	; 0x40
  404a4c:	6153      	str	r3, [r2, #20]
  404a4e:	f7fe bfee 	b.w	403a2e <_svfprintf_r+0x2e>
  404a52:	a823      	add	r0, sp, #140	; 0x8c
  404a54:	a920      	add	r1, sp, #128	; 0x80
  404a56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404a58:	9004      	str	r0, [sp, #16]
  404a5a:	9103      	str	r1, [sp, #12]
  404a5c:	a81f      	add	r0, sp, #124	; 0x7c
  404a5e:	2103      	movs	r1, #3
  404a60:	9002      	str	r0, [sp, #8]
  404a62:	9a08      	ldr	r2, [sp, #32]
  404a64:	9401      	str	r4, [sp, #4]
  404a66:	463b      	mov	r3, r7
  404a68:	9100      	str	r1, [sp, #0]
  404a6a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a6c:	f000 fa9c 	bl	404fa8 <_dtoa_r>
  404a70:	4625      	mov	r5, r4
  404a72:	4606      	mov	r6, r0
  404a74:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a76:	2b46      	cmp	r3, #70	; 0x46
  404a78:	eb06 0405 	add.w	r4, r6, r5
  404a7c:	f47f af29 	bne.w	4048d2 <_svfprintf_r+0xed2>
  404a80:	7833      	ldrb	r3, [r6, #0]
  404a82:	2b30      	cmp	r3, #48	; 0x30
  404a84:	f000 8178 	beq.w	404d78 <_svfprintf_r+0x1378>
  404a88:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404a8a:	442c      	add	r4, r5
  404a8c:	e721      	b.n	4048d2 <_svfprintf_r+0xed2>
  404a8e:	aa25      	add	r2, sp, #148	; 0x94
  404a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a92:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a94:	f002 f922 	bl	406cdc <__ssprint_r>
  404a98:	2800      	cmp	r0, #0
  404a9a:	f47f a883 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404a9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404aa0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404aa2:	46c8      	mov	r8, r9
  404aa4:	e782      	b.n	4049ac <_svfprintf_r+0xfac>
  404aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404aa8:	2b00      	cmp	r3, #0
  404aaa:	bf08      	it	eq
  404aac:	2301      	moveq	r3, #1
  404aae:	930a      	str	r3, [sp, #40]	; 0x28
  404ab0:	e6db      	b.n	40486a <_svfprintf_r+0xe6a>
  404ab2:	4630      	mov	r0, r6
  404ab4:	940a      	str	r4, [sp, #40]	; 0x28
  404ab6:	f002 f8a3 	bl	406c00 <strlen>
  404aba:	950f      	str	r5, [sp, #60]	; 0x3c
  404abc:	900e      	str	r0, [sp, #56]	; 0x38
  404abe:	f8cd b01c 	str.w	fp, [sp, #28]
  404ac2:	4603      	mov	r3, r0
  404ac4:	f7ff b9f9 	b.w	403eba <_svfprintf_r+0x4ba>
  404ac8:	272d      	movs	r7, #45	; 0x2d
  404aca:	2300      	movs	r3, #0
  404acc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404ad0:	930a      	str	r3, [sp, #40]	; 0x28
  404ad2:	f7ff b8ae 	b.w	403c32 <_svfprintf_r+0x232>
  404ad6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404ad8:	9312      	str	r3, [sp, #72]	; 0x48
  404ada:	461a      	mov	r2, r3
  404adc:	3303      	adds	r3, #3
  404ade:	db04      	blt.n	404aea <_svfprintf_r+0x10ea>
  404ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ae2:	4619      	mov	r1, r3
  404ae4:	4291      	cmp	r1, r2
  404ae6:	f6bf af17 	bge.w	404918 <_svfprintf_r+0xf18>
  404aea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404aec:	3b02      	subs	r3, #2
  404aee:	9311      	str	r3, [sp, #68]	; 0x44
  404af0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404af4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404af8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404afa:	3b01      	subs	r3, #1
  404afc:	2b00      	cmp	r3, #0
  404afe:	931f      	str	r3, [sp, #124]	; 0x7c
  404b00:	bfbd      	ittte	lt
  404b02:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404b04:	f1c3 0301 	rsblt	r3, r3, #1
  404b08:	222d      	movlt	r2, #45	; 0x2d
  404b0a:	222b      	movge	r2, #43	; 0x2b
  404b0c:	2b09      	cmp	r3, #9
  404b0e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  404b12:	f340 8116 	ble.w	404d42 <_svfprintf_r+0x1342>
  404b16:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404b1a:	4620      	mov	r0, r4
  404b1c:	4dab      	ldr	r5, [pc, #684]	; (404dcc <_svfprintf_r+0x13cc>)
  404b1e:	e000      	b.n	404b22 <_svfprintf_r+0x1122>
  404b20:	4610      	mov	r0, r2
  404b22:	fb85 1203 	smull	r1, r2, r5, r3
  404b26:	17d9      	asrs	r1, r3, #31
  404b28:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404b2c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404b30:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404b34:	3230      	adds	r2, #48	; 0x30
  404b36:	2909      	cmp	r1, #9
  404b38:	f800 2c01 	strb.w	r2, [r0, #-1]
  404b3c:	460b      	mov	r3, r1
  404b3e:	f100 32ff 	add.w	r2, r0, #4294967295
  404b42:	dced      	bgt.n	404b20 <_svfprintf_r+0x1120>
  404b44:	3330      	adds	r3, #48	; 0x30
  404b46:	3802      	subs	r0, #2
  404b48:	b2d9      	uxtb	r1, r3
  404b4a:	4284      	cmp	r4, r0
  404b4c:	f802 1c01 	strb.w	r1, [r2, #-1]
  404b50:	f240 8165 	bls.w	404e1e <_svfprintf_r+0x141e>
  404b54:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404b58:	4613      	mov	r3, r2
  404b5a:	e001      	b.n	404b60 <_svfprintf_r+0x1160>
  404b5c:	f813 1b01 	ldrb.w	r1, [r3], #1
  404b60:	f800 1b01 	strb.w	r1, [r0], #1
  404b64:	42a3      	cmp	r3, r4
  404b66:	d1f9      	bne.n	404b5c <_svfprintf_r+0x115c>
  404b68:	3301      	adds	r3, #1
  404b6a:	1a9b      	subs	r3, r3, r2
  404b6c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  404b70:	4413      	add	r3, r2
  404b72:	aa21      	add	r2, sp, #132	; 0x84
  404b74:	1a9b      	subs	r3, r3, r2
  404b76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404b78:	931b      	str	r3, [sp, #108]	; 0x6c
  404b7a:	2a01      	cmp	r2, #1
  404b7c:	4413      	add	r3, r2
  404b7e:	930e      	str	r3, [sp, #56]	; 0x38
  404b80:	f340 8119 	ble.w	404db6 <_svfprintf_r+0x13b6>
  404b84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404b86:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404b88:	4413      	add	r3, r2
  404b8a:	930e      	str	r3, [sp, #56]	; 0x38
  404b8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404b90:	9308      	str	r3, [sp, #32]
  404b92:	2300      	movs	r3, #0
  404b94:	9312      	str	r3, [sp, #72]	; 0x48
  404b96:	e6cf      	b.n	404938 <_svfprintf_r+0xf38>
  404b98:	aa25      	add	r2, sp, #148	; 0x94
  404b9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b9c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b9e:	f002 f89d 	bl	406cdc <__ssprint_r>
  404ba2:	2800      	cmp	r0, #0
  404ba4:	f47e affe 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404ba8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404baa:	46c8      	mov	r8, r9
  404bac:	e4d7      	b.n	40455e <_svfprintf_r+0xb5e>
  404bae:	4623      	mov	r3, r4
  404bb0:	e6a2      	b.n	4048f8 <_svfprintf_r+0xef8>
  404bb2:	aa25      	add	r2, sp, #148	; 0x94
  404bb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404bb8:	f002 f890 	bl	406cdc <__ssprint_r>
  404bbc:	2800      	cmp	r0, #0
  404bbe:	f47e aff1 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404bc2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404bc4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404bc6:	46c8      	mov	r8, r9
  404bc8:	e5ae      	b.n	404728 <_svfprintf_r+0xd28>
  404bca:	aa25      	add	r2, sp, #148	; 0x94
  404bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404bce:	980c      	ldr	r0, [sp, #48]	; 0x30
  404bd0:	f002 f884 	bl	406cdc <__ssprint_r>
  404bd4:	2800      	cmp	r0, #0
  404bd6:	f47e afe5 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404bda:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404bdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404bde:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404be0:	1a9a      	subs	r2, r3, r2
  404be2:	46c8      	mov	r8, r9
  404be4:	e5b8      	b.n	404758 <_svfprintf_r+0xd58>
  404be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404be8:	9612      	str	r6, [sp, #72]	; 0x48
  404bea:	2b06      	cmp	r3, #6
  404bec:	bf28      	it	cs
  404bee:	2306      	movcs	r3, #6
  404bf0:	960a      	str	r6, [sp, #40]	; 0x28
  404bf2:	4637      	mov	r7, r6
  404bf4:	9308      	str	r3, [sp, #32]
  404bf6:	950f      	str	r5, [sp, #60]	; 0x3c
  404bf8:	f8cd b01c 	str.w	fp, [sp, #28]
  404bfc:	930e      	str	r3, [sp, #56]	; 0x38
  404bfe:	4e74      	ldr	r6, [pc, #464]	; (404dd0 <_svfprintf_r+0x13d0>)
  404c00:	f7ff b816 	b.w	403c30 <_svfprintf_r+0x230>
  404c04:	a823      	add	r0, sp, #140	; 0x8c
  404c06:	a920      	add	r1, sp, #128	; 0x80
  404c08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404c0a:	9004      	str	r0, [sp, #16]
  404c0c:	9103      	str	r1, [sp, #12]
  404c0e:	a81f      	add	r0, sp, #124	; 0x7c
  404c10:	2103      	movs	r1, #3
  404c12:	9002      	str	r0, [sp, #8]
  404c14:	9a08      	ldr	r2, [sp, #32]
  404c16:	9501      	str	r5, [sp, #4]
  404c18:	463b      	mov	r3, r7
  404c1a:	9100      	str	r1, [sp, #0]
  404c1c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404c1e:	f000 f9c3 	bl	404fa8 <_dtoa_r>
  404c22:	4606      	mov	r6, r0
  404c24:	1944      	adds	r4, r0, r5
  404c26:	e72b      	b.n	404a80 <_svfprintf_r+0x1080>
  404c28:	2306      	movs	r3, #6
  404c2a:	930a      	str	r3, [sp, #40]	; 0x28
  404c2c:	e61d      	b.n	40486a <_svfprintf_r+0xe6a>
  404c2e:	272d      	movs	r7, #45	; 0x2d
  404c30:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404c34:	f7ff bacd 	b.w	4041d2 <_svfprintf_r+0x7d2>
  404c38:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404c3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404c3c:	4413      	add	r3, r2
  404c3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404c40:	930e      	str	r3, [sp, #56]	; 0x38
  404c42:	2a00      	cmp	r2, #0
  404c44:	f340 80b0 	ble.w	404da8 <_svfprintf_r+0x13a8>
  404c48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404c4c:	9308      	str	r3, [sp, #32]
  404c4e:	2367      	movs	r3, #103	; 0x67
  404c50:	9311      	str	r3, [sp, #68]	; 0x44
  404c52:	e671      	b.n	404938 <_svfprintf_r+0xf38>
  404c54:	2b00      	cmp	r3, #0
  404c56:	f340 80c3 	ble.w	404de0 <_svfprintf_r+0x13e0>
  404c5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404c5c:	2a00      	cmp	r2, #0
  404c5e:	f040 8099 	bne.w	404d94 <_svfprintf_r+0x1394>
  404c62:	f01b 0f01 	tst.w	fp, #1
  404c66:	f040 8095 	bne.w	404d94 <_svfprintf_r+0x1394>
  404c6a:	9308      	str	r3, [sp, #32]
  404c6c:	930e      	str	r3, [sp, #56]	; 0x38
  404c6e:	e663      	b.n	404938 <_svfprintf_r+0xf38>
  404c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c72:	9308      	str	r3, [sp, #32]
  404c74:	930e      	str	r3, [sp, #56]	; 0x38
  404c76:	900a      	str	r0, [sp, #40]	; 0x28
  404c78:	950f      	str	r5, [sp, #60]	; 0x3c
  404c7a:	f8cd b01c 	str.w	fp, [sp, #28]
  404c7e:	9012      	str	r0, [sp, #72]	; 0x48
  404c80:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404c84:	f7fe bfd4 	b.w	403c30 <_svfprintf_r+0x230>
  404c88:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404c8a:	2b47      	cmp	r3, #71	; 0x47
  404c8c:	f47f ae20 	bne.w	4048d0 <_svfprintf_r+0xed0>
  404c90:	f01b 0f01 	tst.w	fp, #1
  404c94:	f47f aeee 	bne.w	404a74 <_svfprintf_r+0x1074>
  404c98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404c9a:	1b9b      	subs	r3, r3, r6
  404c9c:	9313      	str	r3, [sp, #76]	; 0x4c
  404c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404ca0:	2b47      	cmp	r3, #71	; 0x47
  404ca2:	f43f af18 	beq.w	404ad6 <_svfprintf_r+0x10d6>
  404ca6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404ca8:	9312      	str	r3, [sp, #72]	; 0x48
  404caa:	e721      	b.n	404af0 <_svfprintf_r+0x10f0>
  404cac:	424f      	negs	r7, r1
  404cae:	3110      	adds	r1, #16
  404cb0:	4d48      	ldr	r5, [pc, #288]	; (404dd4 <_svfprintf_r+0x13d4>)
  404cb2:	da2f      	bge.n	404d14 <_svfprintf_r+0x1314>
  404cb4:	2410      	movs	r4, #16
  404cb6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404cba:	e004      	b.n	404cc6 <_svfprintf_r+0x12c6>
  404cbc:	f108 0808 	add.w	r8, r8, #8
  404cc0:	3f10      	subs	r7, #16
  404cc2:	2f10      	cmp	r7, #16
  404cc4:	dd26      	ble.n	404d14 <_svfprintf_r+0x1314>
  404cc6:	3301      	adds	r3, #1
  404cc8:	3210      	adds	r2, #16
  404cca:	2b07      	cmp	r3, #7
  404ccc:	9227      	str	r2, [sp, #156]	; 0x9c
  404cce:	9326      	str	r3, [sp, #152]	; 0x98
  404cd0:	f8c8 5000 	str.w	r5, [r8]
  404cd4:	f8c8 4004 	str.w	r4, [r8, #4]
  404cd8:	ddf0      	ble.n	404cbc <_svfprintf_r+0x12bc>
  404cda:	aa25      	add	r2, sp, #148	; 0x94
  404cdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cde:	4658      	mov	r0, fp
  404ce0:	f001 fffc 	bl	406cdc <__ssprint_r>
  404ce4:	2800      	cmp	r0, #0
  404ce6:	f47e af5d 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404cea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404cec:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404cee:	46c8      	mov	r8, r9
  404cf0:	e7e6      	b.n	404cc0 <_svfprintf_r+0x12c0>
  404cf2:	aa25      	add	r2, sp, #148	; 0x94
  404cf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404cf6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404cf8:	f001 fff0 	bl	406cdc <__ssprint_r>
  404cfc:	2800      	cmp	r0, #0
  404cfe:	f47e af51 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404d02:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404d04:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404d06:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d08:	46c8      	mov	r8, r9
  404d0a:	e667      	b.n	4049dc <_svfprintf_r+0xfdc>
  404d0c:	2000      	movs	r0, #0
  404d0e:	900a      	str	r0, [sp, #40]	; 0x28
  404d10:	f7fe bed0 	b.w	403ab4 <_svfprintf_r+0xb4>
  404d14:	3301      	adds	r3, #1
  404d16:	443a      	add	r2, r7
  404d18:	2b07      	cmp	r3, #7
  404d1a:	e888 00a0 	stmia.w	r8, {r5, r7}
  404d1e:	9227      	str	r2, [sp, #156]	; 0x9c
  404d20:	9326      	str	r3, [sp, #152]	; 0x98
  404d22:	f108 0808 	add.w	r8, r8, #8
  404d26:	f77f ae5c 	ble.w	4049e2 <_svfprintf_r+0xfe2>
  404d2a:	aa25      	add	r2, sp, #148	; 0x94
  404d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d2e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d30:	f001 ffd4 	bl	406cdc <__ssprint_r>
  404d34:	2800      	cmp	r0, #0
  404d36:	f47e af35 	bne.w	403ba4 <_svfprintf_r+0x1a4>
  404d3a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404d3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d3e:	46c8      	mov	r8, r9
  404d40:	e64f      	b.n	4049e2 <_svfprintf_r+0xfe2>
  404d42:	3330      	adds	r3, #48	; 0x30
  404d44:	2230      	movs	r2, #48	; 0x30
  404d46:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404d4a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404d4e:	ab22      	add	r3, sp, #136	; 0x88
  404d50:	e70f      	b.n	404b72 <_svfprintf_r+0x1172>
  404d52:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404d54:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404d56:	4413      	add	r3, r2
  404d58:	930e      	str	r3, [sp, #56]	; 0x38
  404d5a:	e775      	b.n	404c48 <_svfprintf_r+0x1248>
  404d5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404d5e:	e5cb      	b.n	4048f8 <_svfprintf_r+0xef8>
  404d60:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404d62:	4e1d      	ldr	r6, [pc, #116]	; (404dd8 <_svfprintf_r+0x13d8>)
  404d64:	2b00      	cmp	r3, #0
  404d66:	bfb6      	itet	lt
  404d68:	272d      	movlt	r7, #45	; 0x2d
  404d6a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  404d6e:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  404d72:	4b1a      	ldr	r3, [pc, #104]	; (404ddc <_svfprintf_r+0x13dc>)
  404d74:	f7ff ba2f 	b.w	4041d6 <_svfprintf_r+0x7d6>
  404d78:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404d7a:	9808      	ldr	r0, [sp, #32]
  404d7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404d7e:	4639      	mov	r1, r7
  404d80:	f003 f840 	bl	407e04 <__aeabi_dcmpeq>
  404d84:	2800      	cmp	r0, #0
  404d86:	f47f ae7f 	bne.w	404a88 <_svfprintf_r+0x1088>
  404d8a:	f1c5 0501 	rsb	r5, r5, #1
  404d8e:	951f      	str	r5, [sp, #124]	; 0x7c
  404d90:	442c      	add	r4, r5
  404d92:	e59e      	b.n	4048d2 <_svfprintf_r+0xed2>
  404d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404d96:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404d98:	4413      	add	r3, r2
  404d9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404d9c:	441a      	add	r2, r3
  404d9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404da2:	920e      	str	r2, [sp, #56]	; 0x38
  404da4:	9308      	str	r3, [sp, #32]
  404da6:	e5c7      	b.n	404938 <_svfprintf_r+0xf38>
  404da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404dac:	f1c3 0301 	rsb	r3, r3, #1
  404db0:	441a      	add	r2, r3
  404db2:	4613      	mov	r3, r2
  404db4:	e7d0      	b.n	404d58 <_svfprintf_r+0x1358>
  404db6:	f01b 0301 	ands.w	r3, fp, #1
  404dba:	9312      	str	r3, [sp, #72]	; 0x48
  404dbc:	f47f aee2 	bne.w	404b84 <_svfprintf_r+0x1184>
  404dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404dc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404dc6:	9308      	str	r3, [sp, #32]
  404dc8:	e5b6      	b.n	404938 <_svfprintf_r+0xf38>
  404dca:	bf00      	nop
  404dcc:	66666667 	.word	0x66666667
  404dd0:	004088c4 	.word	0x004088c4
  404dd4:	004088e0 	.word	0x004088e0
  404dd8:	00408898 	.word	0x00408898
  404ddc:	00408894 	.word	0x00408894
  404de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404de2:	b913      	cbnz	r3, 404dea <_svfprintf_r+0x13ea>
  404de4:	f01b 0f01 	tst.w	fp, #1
  404de8:	d002      	beq.n	404df0 <_svfprintf_r+0x13f0>
  404dea:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404dec:	3301      	adds	r3, #1
  404dee:	e7d4      	b.n	404d9a <_svfprintf_r+0x139a>
  404df0:	2301      	movs	r3, #1
  404df2:	e73a      	b.n	404c6a <_svfprintf_r+0x126a>
  404df4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404df6:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404dfa:	6828      	ldr	r0, [r5, #0]
  404dfc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404e00:	900a      	str	r0, [sp, #40]	; 0x28
  404e02:	4628      	mov	r0, r5
  404e04:	3004      	adds	r0, #4
  404e06:	46a2      	mov	sl, r4
  404e08:	900f      	str	r0, [sp, #60]	; 0x3c
  404e0a:	f7fe be51 	b.w	403ab0 <_svfprintf_r+0xb0>
  404e0e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404e12:	f7ff b867 	b.w	403ee4 <_svfprintf_r+0x4e4>
  404e16:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404e1a:	f7ff ba15 	b.w	404248 <_svfprintf_r+0x848>
  404e1e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  404e22:	e6a6      	b.n	404b72 <_svfprintf_r+0x1172>
  404e24:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404e28:	f7ff b8eb 	b.w	404002 <_svfprintf_r+0x602>
  404e2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404e2e:	230c      	movs	r3, #12
  404e30:	6013      	str	r3, [r2, #0]
  404e32:	f04f 33ff 	mov.w	r3, #4294967295
  404e36:	9309      	str	r3, [sp, #36]	; 0x24
  404e38:	f7fe bebd 	b.w	403bb6 <_svfprintf_r+0x1b6>
  404e3c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404e40:	f7ff b99a 	b.w	404178 <_svfprintf_r+0x778>
  404e44:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404e48:	f7ff b976 	b.w	404138 <_svfprintf_r+0x738>
  404e4c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404e50:	f7ff b959 	b.w	404106 <_svfprintf_r+0x706>
  404e54:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404e58:	f7ff b912 	b.w	404080 <_svfprintf_r+0x680>

00404e5c <register_fini>:
  404e5c:	4b02      	ldr	r3, [pc, #8]	; (404e68 <register_fini+0xc>)
  404e5e:	b113      	cbz	r3, 404e66 <register_fini+0xa>
  404e60:	4802      	ldr	r0, [pc, #8]	; (404e6c <register_fini+0x10>)
  404e62:	f000 b805 	b.w	404e70 <atexit>
  404e66:	4770      	bx	lr
  404e68:	00000000 	.word	0x00000000
  404e6c:	00405dfd 	.word	0x00405dfd

00404e70 <atexit>:
  404e70:	2300      	movs	r3, #0
  404e72:	4601      	mov	r1, r0
  404e74:	461a      	mov	r2, r3
  404e76:	4618      	mov	r0, r3
  404e78:	f001 bfae 	b.w	406dd8 <__register_exitproc>

00404e7c <quorem>:
  404e7c:	6902      	ldr	r2, [r0, #16]
  404e7e:	690b      	ldr	r3, [r1, #16]
  404e80:	4293      	cmp	r3, r2
  404e82:	f300 808d 	bgt.w	404fa0 <quorem+0x124>
  404e86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404e8a:	f103 38ff 	add.w	r8, r3, #4294967295
  404e8e:	f101 0714 	add.w	r7, r1, #20
  404e92:	f100 0b14 	add.w	fp, r0, #20
  404e96:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  404e9a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  404e9e:	ea4f 0488 	mov.w	r4, r8, lsl #2
  404ea2:	b083      	sub	sp, #12
  404ea4:	3201      	adds	r2, #1
  404ea6:	fbb3 f9f2 	udiv	r9, r3, r2
  404eaa:	eb0b 0304 	add.w	r3, fp, r4
  404eae:	9400      	str	r4, [sp, #0]
  404eb0:	eb07 0a04 	add.w	sl, r7, r4
  404eb4:	9301      	str	r3, [sp, #4]
  404eb6:	f1b9 0f00 	cmp.w	r9, #0
  404eba:	d039      	beq.n	404f30 <quorem+0xb4>
  404ebc:	2500      	movs	r5, #0
  404ebe:	462e      	mov	r6, r5
  404ec0:	46bc      	mov	ip, r7
  404ec2:	46de      	mov	lr, fp
  404ec4:	f85c 4b04 	ldr.w	r4, [ip], #4
  404ec8:	f8de 3000 	ldr.w	r3, [lr]
  404ecc:	b2a2      	uxth	r2, r4
  404ece:	fb09 5502 	mla	r5, r9, r2, r5
  404ed2:	0c22      	lsrs	r2, r4, #16
  404ed4:	0c2c      	lsrs	r4, r5, #16
  404ed6:	fb09 4202 	mla	r2, r9, r2, r4
  404eda:	b2ad      	uxth	r5, r5
  404edc:	1b75      	subs	r5, r6, r5
  404ede:	b296      	uxth	r6, r2
  404ee0:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  404ee4:	fa15 f383 	uxtah	r3, r5, r3
  404ee8:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404eec:	b29b      	uxth	r3, r3
  404eee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  404ef2:	45e2      	cmp	sl, ip
  404ef4:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404ef8:	f84e 3b04 	str.w	r3, [lr], #4
  404efc:	ea4f 4626 	mov.w	r6, r6, asr #16
  404f00:	d2e0      	bcs.n	404ec4 <quorem+0x48>
  404f02:	9b00      	ldr	r3, [sp, #0]
  404f04:	f85b 3003 	ldr.w	r3, [fp, r3]
  404f08:	b993      	cbnz	r3, 404f30 <quorem+0xb4>
  404f0a:	9c01      	ldr	r4, [sp, #4]
  404f0c:	1f23      	subs	r3, r4, #4
  404f0e:	459b      	cmp	fp, r3
  404f10:	d20c      	bcs.n	404f2c <quorem+0xb0>
  404f12:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404f16:	b94b      	cbnz	r3, 404f2c <quorem+0xb0>
  404f18:	f1a4 0308 	sub.w	r3, r4, #8
  404f1c:	e002      	b.n	404f24 <quorem+0xa8>
  404f1e:	681a      	ldr	r2, [r3, #0]
  404f20:	3b04      	subs	r3, #4
  404f22:	b91a      	cbnz	r2, 404f2c <quorem+0xb0>
  404f24:	459b      	cmp	fp, r3
  404f26:	f108 38ff 	add.w	r8, r8, #4294967295
  404f2a:	d3f8      	bcc.n	404f1e <quorem+0xa2>
  404f2c:	f8c0 8010 	str.w	r8, [r0, #16]
  404f30:	4604      	mov	r4, r0
  404f32:	f001 fd39 	bl	4069a8 <__mcmp>
  404f36:	2800      	cmp	r0, #0
  404f38:	db2e      	blt.n	404f98 <quorem+0x11c>
  404f3a:	f109 0901 	add.w	r9, r9, #1
  404f3e:	465d      	mov	r5, fp
  404f40:	2300      	movs	r3, #0
  404f42:	f857 1b04 	ldr.w	r1, [r7], #4
  404f46:	6828      	ldr	r0, [r5, #0]
  404f48:	b28a      	uxth	r2, r1
  404f4a:	1a9a      	subs	r2, r3, r2
  404f4c:	0c0b      	lsrs	r3, r1, #16
  404f4e:	fa12 f280 	uxtah	r2, r2, r0
  404f52:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  404f56:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404f5a:	b292      	uxth	r2, r2
  404f5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404f60:	45ba      	cmp	sl, r7
  404f62:	f845 2b04 	str.w	r2, [r5], #4
  404f66:	ea4f 4323 	mov.w	r3, r3, asr #16
  404f6a:	d2ea      	bcs.n	404f42 <quorem+0xc6>
  404f6c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  404f70:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404f74:	b982      	cbnz	r2, 404f98 <quorem+0x11c>
  404f76:	1f1a      	subs	r2, r3, #4
  404f78:	4593      	cmp	fp, r2
  404f7a:	d20b      	bcs.n	404f94 <quorem+0x118>
  404f7c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404f80:	b942      	cbnz	r2, 404f94 <quorem+0x118>
  404f82:	3b08      	subs	r3, #8
  404f84:	e002      	b.n	404f8c <quorem+0x110>
  404f86:	681a      	ldr	r2, [r3, #0]
  404f88:	3b04      	subs	r3, #4
  404f8a:	b91a      	cbnz	r2, 404f94 <quorem+0x118>
  404f8c:	459b      	cmp	fp, r3
  404f8e:	f108 38ff 	add.w	r8, r8, #4294967295
  404f92:	d3f8      	bcc.n	404f86 <quorem+0x10a>
  404f94:	f8c4 8010 	str.w	r8, [r4, #16]
  404f98:	4648      	mov	r0, r9
  404f9a:	b003      	add	sp, #12
  404f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404fa0:	2000      	movs	r0, #0
  404fa2:	4770      	bx	lr
  404fa4:	0000      	movs	r0, r0
	...

00404fa8 <_dtoa_r>:
  404fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404fac:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404fae:	b09b      	sub	sp, #108	; 0x6c
  404fb0:	4604      	mov	r4, r0
  404fb2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  404fb4:	4692      	mov	sl, r2
  404fb6:	469b      	mov	fp, r3
  404fb8:	b141      	cbz	r1, 404fcc <_dtoa_r+0x24>
  404fba:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404fbc:	604a      	str	r2, [r1, #4]
  404fbe:	2301      	movs	r3, #1
  404fc0:	4093      	lsls	r3, r2
  404fc2:	608b      	str	r3, [r1, #8]
  404fc4:	f001 fb18 	bl	4065f8 <_Bfree>
  404fc8:	2300      	movs	r3, #0
  404fca:	6423      	str	r3, [r4, #64]	; 0x40
  404fcc:	f1bb 0f00 	cmp.w	fp, #0
  404fd0:	465d      	mov	r5, fp
  404fd2:	db35      	blt.n	405040 <_dtoa_r+0x98>
  404fd4:	2300      	movs	r3, #0
  404fd6:	6033      	str	r3, [r6, #0]
  404fd8:	4b9d      	ldr	r3, [pc, #628]	; (405250 <_dtoa_r+0x2a8>)
  404fda:	43ab      	bics	r3, r5
  404fdc:	d015      	beq.n	40500a <_dtoa_r+0x62>
  404fde:	4650      	mov	r0, sl
  404fe0:	4659      	mov	r1, fp
  404fe2:	2200      	movs	r2, #0
  404fe4:	2300      	movs	r3, #0
  404fe6:	f002 ff0d 	bl	407e04 <__aeabi_dcmpeq>
  404fea:	4680      	mov	r8, r0
  404fec:	2800      	cmp	r0, #0
  404fee:	d02d      	beq.n	40504c <_dtoa_r+0xa4>
  404ff0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404ff2:	2301      	movs	r3, #1
  404ff4:	6013      	str	r3, [r2, #0]
  404ff6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404ff8:	2b00      	cmp	r3, #0
  404ffa:	f000 80bd 	beq.w	405178 <_dtoa_r+0x1d0>
  404ffe:	4895      	ldr	r0, [pc, #596]	; (405254 <_dtoa_r+0x2ac>)
  405000:	6018      	str	r0, [r3, #0]
  405002:	3801      	subs	r0, #1
  405004:	b01b      	add	sp, #108	; 0x6c
  405006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40500a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40500c:	f242 730f 	movw	r3, #9999	; 0x270f
  405010:	6013      	str	r3, [r2, #0]
  405012:	f1ba 0f00 	cmp.w	sl, #0
  405016:	d10d      	bne.n	405034 <_dtoa_r+0x8c>
  405018:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40501c:	b955      	cbnz	r5, 405034 <_dtoa_r+0x8c>
  40501e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405020:	488d      	ldr	r0, [pc, #564]	; (405258 <_dtoa_r+0x2b0>)
  405022:	2b00      	cmp	r3, #0
  405024:	d0ee      	beq.n	405004 <_dtoa_r+0x5c>
  405026:	f100 0308 	add.w	r3, r0, #8
  40502a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40502c:	6013      	str	r3, [r2, #0]
  40502e:	b01b      	add	sp, #108	; 0x6c
  405030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405034:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405036:	4889      	ldr	r0, [pc, #548]	; (40525c <_dtoa_r+0x2b4>)
  405038:	2b00      	cmp	r3, #0
  40503a:	d0e3      	beq.n	405004 <_dtoa_r+0x5c>
  40503c:	1cc3      	adds	r3, r0, #3
  40503e:	e7f4      	b.n	40502a <_dtoa_r+0x82>
  405040:	2301      	movs	r3, #1
  405042:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405046:	6033      	str	r3, [r6, #0]
  405048:	46ab      	mov	fp, r5
  40504a:	e7c5      	b.n	404fd8 <_dtoa_r+0x30>
  40504c:	aa18      	add	r2, sp, #96	; 0x60
  40504e:	ab19      	add	r3, sp, #100	; 0x64
  405050:	9201      	str	r2, [sp, #4]
  405052:	9300      	str	r3, [sp, #0]
  405054:	4652      	mov	r2, sl
  405056:	465b      	mov	r3, fp
  405058:	4620      	mov	r0, r4
  40505a:	f001 fd45 	bl	406ae8 <__d2b>
  40505e:	0d2b      	lsrs	r3, r5, #20
  405060:	4681      	mov	r9, r0
  405062:	d071      	beq.n	405148 <_dtoa_r+0x1a0>
  405064:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405068:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40506c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40506e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405072:	4650      	mov	r0, sl
  405074:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405078:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40507c:	2200      	movs	r2, #0
  40507e:	4b78      	ldr	r3, [pc, #480]	; (405260 <_dtoa_r+0x2b8>)
  405080:	f002 faa4 	bl	4075cc <__aeabi_dsub>
  405084:	a36c      	add	r3, pc, #432	; (adr r3, 405238 <_dtoa_r+0x290>)
  405086:	e9d3 2300 	ldrd	r2, r3, [r3]
  40508a:	f002 fc53 	bl	407934 <__aeabi_dmul>
  40508e:	a36c      	add	r3, pc, #432	; (adr r3, 405240 <_dtoa_r+0x298>)
  405090:	e9d3 2300 	ldrd	r2, r3, [r3]
  405094:	f002 fa9c 	bl	4075d0 <__adddf3>
  405098:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40509c:	4630      	mov	r0, r6
  40509e:	f002 fbe3 	bl	407868 <__aeabi_i2d>
  4050a2:	a369      	add	r3, pc, #420	; (adr r3, 405248 <_dtoa_r+0x2a0>)
  4050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4050a8:	f002 fc44 	bl	407934 <__aeabi_dmul>
  4050ac:	4602      	mov	r2, r0
  4050ae:	460b      	mov	r3, r1
  4050b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4050b4:	f002 fa8c 	bl	4075d0 <__adddf3>
  4050b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4050bc:	f002 feea 	bl	407e94 <__aeabi_d2iz>
  4050c0:	2200      	movs	r2, #0
  4050c2:	9002      	str	r0, [sp, #8]
  4050c4:	2300      	movs	r3, #0
  4050c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4050ca:	f002 fea5 	bl	407e18 <__aeabi_dcmplt>
  4050ce:	2800      	cmp	r0, #0
  4050d0:	f040 8173 	bne.w	4053ba <_dtoa_r+0x412>
  4050d4:	9d02      	ldr	r5, [sp, #8]
  4050d6:	2d16      	cmp	r5, #22
  4050d8:	f200 815d 	bhi.w	405396 <_dtoa_r+0x3ee>
  4050dc:	4b61      	ldr	r3, [pc, #388]	; (405264 <_dtoa_r+0x2bc>)
  4050de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4050e2:	e9d3 0100 	ldrd	r0, r1, [r3]
  4050e6:	4652      	mov	r2, sl
  4050e8:	465b      	mov	r3, fp
  4050ea:	f002 feb3 	bl	407e54 <__aeabi_dcmpgt>
  4050ee:	2800      	cmp	r0, #0
  4050f0:	f000 81c5 	beq.w	40547e <_dtoa_r+0x4d6>
  4050f4:	1e6b      	subs	r3, r5, #1
  4050f6:	9302      	str	r3, [sp, #8]
  4050f8:	2300      	movs	r3, #0
  4050fa:	930e      	str	r3, [sp, #56]	; 0x38
  4050fc:	1bbf      	subs	r7, r7, r6
  4050fe:	1e7b      	subs	r3, r7, #1
  405100:	9306      	str	r3, [sp, #24]
  405102:	f100 8154 	bmi.w	4053ae <_dtoa_r+0x406>
  405106:	2300      	movs	r3, #0
  405108:	9308      	str	r3, [sp, #32]
  40510a:	9b02      	ldr	r3, [sp, #8]
  40510c:	2b00      	cmp	r3, #0
  40510e:	f2c0 8145 	blt.w	40539c <_dtoa_r+0x3f4>
  405112:	9a06      	ldr	r2, [sp, #24]
  405114:	930d      	str	r3, [sp, #52]	; 0x34
  405116:	4611      	mov	r1, r2
  405118:	4419      	add	r1, r3
  40511a:	2300      	movs	r3, #0
  40511c:	9106      	str	r1, [sp, #24]
  40511e:	930c      	str	r3, [sp, #48]	; 0x30
  405120:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405122:	2b09      	cmp	r3, #9
  405124:	d82a      	bhi.n	40517c <_dtoa_r+0x1d4>
  405126:	2b05      	cmp	r3, #5
  405128:	f340 865b 	ble.w	405de2 <_dtoa_r+0xe3a>
  40512c:	3b04      	subs	r3, #4
  40512e:	9324      	str	r3, [sp, #144]	; 0x90
  405130:	2500      	movs	r5, #0
  405132:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405134:	3b02      	subs	r3, #2
  405136:	2b03      	cmp	r3, #3
  405138:	f200 8642 	bhi.w	405dc0 <_dtoa_r+0xe18>
  40513c:	e8df f013 	tbh	[pc, r3, lsl #1]
  405140:	02c903d4 	.word	0x02c903d4
  405144:	046103df 	.word	0x046103df
  405148:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40514a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40514c:	443e      	add	r6, r7
  40514e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405152:	2b20      	cmp	r3, #32
  405154:	f340 818e 	ble.w	405474 <_dtoa_r+0x4cc>
  405158:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40515c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405160:	409d      	lsls	r5, r3
  405162:	fa2a f000 	lsr.w	r0, sl, r0
  405166:	4328      	orrs	r0, r5
  405168:	f002 fb6e 	bl	407848 <__aeabi_ui2d>
  40516c:	2301      	movs	r3, #1
  40516e:	3e01      	subs	r6, #1
  405170:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405174:	9314      	str	r3, [sp, #80]	; 0x50
  405176:	e781      	b.n	40507c <_dtoa_r+0xd4>
  405178:	483b      	ldr	r0, [pc, #236]	; (405268 <_dtoa_r+0x2c0>)
  40517a:	e743      	b.n	405004 <_dtoa_r+0x5c>
  40517c:	2100      	movs	r1, #0
  40517e:	6461      	str	r1, [r4, #68]	; 0x44
  405180:	4620      	mov	r0, r4
  405182:	9125      	str	r1, [sp, #148]	; 0x94
  405184:	f001 fa12 	bl	4065ac <_Balloc>
  405188:	f04f 33ff 	mov.w	r3, #4294967295
  40518c:	930a      	str	r3, [sp, #40]	; 0x28
  40518e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405190:	930f      	str	r3, [sp, #60]	; 0x3c
  405192:	2301      	movs	r3, #1
  405194:	9004      	str	r0, [sp, #16]
  405196:	6420      	str	r0, [r4, #64]	; 0x40
  405198:	9224      	str	r2, [sp, #144]	; 0x90
  40519a:	930b      	str	r3, [sp, #44]	; 0x2c
  40519c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40519e:	2b00      	cmp	r3, #0
  4051a0:	f2c0 80d9 	blt.w	405356 <_dtoa_r+0x3ae>
  4051a4:	9a02      	ldr	r2, [sp, #8]
  4051a6:	2a0e      	cmp	r2, #14
  4051a8:	f300 80d5 	bgt.w	405356 <_dtoa_r+0x3ae>
  4051ac:	4b2d      	ldr	r3, [pc, #180]	; (405264 <_dtoa_r+0x2bc>)
  4051ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4051ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4051bc:	2b00      	cmp	r3, #0
  4051be:	f2c0 83ba 	blt.w	405936 <_dtoa_r+0x98e>
  4051c2:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4051c6:	4650      	mov	r0, sl
  4051c8:	462a      	mov	r2, r5
  4051ca:	4633      	mov	r3, r6
  4051cc:	4659      	mov	r1, fp
  4051ce:	f002 fcdb 	bl	407b88 <__aeabi_ddiv>
  4051d2:	f002 fe5f 	bl	407e94 <__aeabi_d2iz>
  4051d6:	4680      	mov	r8, r0
  4051d8:	f002 fb46 	bl	407868 <__aeabi_i2d>
  4051dc:	462a      	mov	r2, r5
  4051de:	4633      	mov	r3, r6
  4051e0:	f002 fba8 	bl	407934 <__aeabi_dmul>
  4051e4:	460b      	mov	r3, r1
  4051e6:	4602      	mov	r2, r0
  4051e8:	4659      	mov	r1, fp
  4051ea:	4650      	mov	r0, sl
  4051ec:	f002 f9ee 	bl	4075cc <__aeabi_dsub>
  4051f0:	9d04      	ldr	r5, [sp, #16]
  4051f2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4051f6:	702b      	strb	r3, [r5, #0]
  4051f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4051fa:	2b01      	cmp	r3, #1
  4051fc:	4606      	mov	r6, r0
  4051fe:	460f      	mov	r7, r1
  405200:	f105 0501 	add.w	r5, r5, #1
  405204:	d068      	beq.n	4052d8 <_dtoa_r+0x330>
  405206:	2200      	movs	r2, #0
  405208:	4b18      	ldr	r3, [pc, #96]	; (40526c <_dtoa_r+0x2c4>)
  40520a:	f002 fb93 	bl	407934 <__aeabi_dmul>
  40520e:	2200      	movs	r2, #0
  405210:	2300      	movs	r3, #0
  405212:	4606      	mov	r6, r0
  405214:	460f      	mov	r7, r1
  405216:	f002 fdf5 	bl	407e04 <__aeabi_dcmpeq>
  40521a:	2800      	cmp	r0, #0
  40521c:	f040 8088 	bne.w	405330 <_dtoa_r+0x388>
  405220:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405224:	f04f 0a00 	mov.w	sl, #0
  405228:	f8df b040 	ldr.w	fp, [pc, #64]	; 40526c <_dtoa_r+0x2c4>
  40522c:	940c      	str	r4, [sp, #48]	; 0x30
  40522e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405232:	e028      	b.n	405286 <_dtoa_r+0x2de>
  405234:	f3af 8000 	nop.w
  405238:	636f4361 	.word	0x636f4361
  40523c:	3fd287a7 	.word	0x3fd287a7
  405240:	8b60c8b3 	.word	0x8b60c8b3
  405244:	3fc68a28 	.word	0x3fc68a28
  405248:	509f79fb 	.word	0x509f79fb
  40524c:	3fd34413 	.word	0x3fd34413
  405250:	7ff00000 	.word	0x7ff00000
  405254:	004088cd 	.word	0x004088cd
  405258:	004088f0 	.word	0x004088f0
  40525c:	004088fc 	.word	0x004088fc
  405260:	3ff80000 	.word	0x3ff80000
  405264:	00408928 	.word	0x00408928
  405268:	004088cc 	.word	0x004088cc
  40526c:	40240000 	.word	0x40240000
  405270:	f002 fb60 	bl	407934 <__aeabi_dmul>
  405274:	2200      	movs	r2, #0
  405276:	2300      	movs	r3, #0
  405278:	4606      	mov	r6, r0
  40527a:	460f      	mov	r7, r1
  40527c:	f002 fdc2 	bl	407e04 <__aeabi_dcmpeq>
  405280:	2800      	cmp	r0, #0
  405282:	f040 83c1 	bne.w	405a08 <_dtoa_r+0xa60>
  405286:	4642      	mov	r2, r8
  405288:	464b      	mov	r3, r9
  40528a:	4630      	mov	r0, r6
  40528c:	4639      	mov	r1, r7
  40528e:	f002 fc7b 	bl	407b88 <__aeabi_ddiv>
  405292:	f002 fdff 	bl	407e94 <__aeabi_d2iz>
  405296:	4604      	mov	r4, r0
  405298:	f002 fae6 	bl	407868 <__aeabi_i2d>
  40529c:	4642      	mov	r2, r8
  40529e:	464b      	mov	r3, r9
  4052a0:	f002 fb48 	bl	407934 <__aeabi_dmul>
  4052a4:	4602      	mov	r2, r0
  4052a6:	460b      	mov	r3, r1
  4052a8:	4630      	mov	r0, r6
  4052aa:	4639      	mov	r1, r7
  4052ac:	f002 f98e 	bl	4075cc <__aeabi_dsub>
  4052b0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4052b4:	9e04      	ldr	r6, [sp, #16]
  4052b6:	f805 eb01 	strb.w	lr, [r5], #1
  4052ba:	eba5 0e06 	sub.w	lr, r5, r6
  4052be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4052c0:	45b6      	cmp	lr, r6
  4052c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4052c6:	4652      	mov	r2, sl
  4052c8:	465b      	mov	r3, fp
  4052ca:	d1d1      	bne.n	405270 <_dtoa_r+0x2c8>
  4052cc:	46a0      	mov	r8, r4
  4052ce:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4052d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4052d4:	4606      	mov	r6, r0
  4052d6:	460f      	mov	r7, r1
  4052d8:	4632      	mov	r2, r6
  4052da:	463b      	mov	r3, r7
  4052dc:	4630      	mov	r0, r6
  4052de:	4639      	mov	r1, r7
  4052e0:	f002 f976 	bl	4075d0 <__adddf3>
  4052e4:	4606      	mov	r6, r0
  4052e6:	460f      	mov	r7, r1
  4052e8:	4602      	mov	r2, r0
  4052ea:	460b      	mov	r3, r1
  4052ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4052f0:	f002 fd92 	bl	407e18 <__aeabi_dcmplt>
  4052f4:	b948      	cbnz	r0, 40530a <_dtoa_r+0x362>
  4052f6:	4632      	mov	r2, r6
  4052f8:	463b      	mov	r3, r7
  4052fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4052fe:	f002 fd81 	bl	407e04 <__aeabi_dcmpeq>
  405302:	b1a8      	cbz	r0, 405330 <_dtoa_r+0x388>
  405304:	f018 0f01 	tst.w	r8, #1
  405308:	d012      	beq.n	405330 <_dtoa_r+0x388>
  40530a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40530e:	9a04      	ldr	r2, [sp, #16]
  405310:	1e6b      	subs	r3, r5, #1
  405312:	e004      	b.n	40531e <_dtoa_r+0x376>
  405314:	429a      	cmp	r2, r3
  405316:	f000 8401 	beq.w	405b1c <_dtoa_r+0xb74>
  40531a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40531e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405322:	f103 0501 	add.w	r5, r3, #1
  405326:	d0f5      	beq.n	405314 <_dtoa_r+0x36c>
  405328:	f108 0801 	add.w	r8, r8, #1
  40532c:	f883 8000 	strb.w	r8, [r3]
  405330:	4649      	mov	r1, r9
  405332:	4620      	mov	r0, r4
  405334:	f001 f960 	bl	4065f8 <_Bfree>
  405338:	2200      	movs	r2, #0
  40533a:	9b02      	ldr	r3, [sp, #8]
  40533c:	702a      	strb	r2, [r5, #0]
  40533e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405340:	3301      	adds	r3, #1
  405342:	6013      	str	r3, [r2, #0]
  405344:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405346:	2b00      	cmp	r3, #0
  405348:	f000 839e 	beq.w	405a88 <_dtoa_r+0xae0>
  40534c:	9804      	ldr	r0, [sp, #16]
  40534e:	601d      	str	r5, [r3, #0]
  405350:	b01b      	add	sp, #108	; 0x6c
  405352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405356:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405358:	2a00      	cmp	r2, #0
  40535a:	d03e      	beq.n	4053da <_dtoa_r+0x432>
  40535c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40535e:	2a01      	cmp	r2, #1
  405360:	f340 8311 	ble.w	405986 <_dtoa_r+0x9de>
  405364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405368:	1e5f      	subs	r7, r3, #1
  40536a:	42ba      	cmp	r2, r7
  40536c:	f2c0 838f 	blt.w	405a8e <_dtoa_r+0xae6>
  405370:	1bd7      	subs	r7, r2, r7
  405372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405374:	2b00      	cmp	r3, #0
  405376:	f2c0 848b 	blt.w	405c90 <_dtoa_r+0xce8>
  40537a:	9d08      	ldr	r5, [sp, #32]
  40537c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40537e:	9a08      	ldr	r2, [sp, #32]
  405380:	441a      	add	r2, r3
  405382:	9208      	str	r2, [sp, #32]
  405384:	9a06      	ldr	r2, [sp, #24]
  405386:	2101      	movs	r1, #1
  405388:	441a      	add	r2, r3
  40538a:	4620      	mov	r0, r4
  40538c:	9206      	str	r2, [sp, #24]
  40538e:	f001 f9cd 	bl	40672c <__i2b>
  405392:	4606      	mov	r6, r0
  405394:	e024      	b.n	4053e0 <_dtoa_r+0x438>
  405396:	2301      	movs	r3, #1
  405398:	930e      	str	r3, [sp, #56]	; 0x38
  40539a:	e6af      	b.n	4050fc <_dtoa_r+0x154>
  40539c:	9a08      	ldr	r2, [sp, #32]
  40539e:	9b02      	ldr	r3, [sp, #8]
  4053a0:	1ad2      	subs	r2, r2, r3
  4053a2:	425b      	negs	r3, r3
  4053a4:	930c      	str	r3, [sp, #48]	; 0x30
  4053a6:	2300      	movs	r3, #0
  4053a8:	9208      	str	r2, [sp, #32]
  4053aa:	930d      	str	r3, [sp, #52]	; 0x34
  4053ac:	e6b8      	b.n	405120 <_dtoa_r+0x178>
  4053ae:	f1c7 0301 	rsb	r3, r7, #1
  4053b2:	9308      	str	r3, [sp, #32]
  4053b4:	2300      	movs	r3, #0
  4053b6:	9306      	str	r3, [sp, #24]
  4053b8:	e6a7      	b.n	40510a <_dtoa_r+0x162>
  4053ba:	9d02      	ldr	r5, [sp, #8]
  4053bc:	4628      	mov	r0, r5
  4053be:	f002 fa53 	bl	407868 <__aeabi_i2d>
  4053c2:	4602      	mov	r2, r0
  4053c4:	460b      	mov	r3, r1
  4053c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4053ca:	f002 fd1b 	bl	407e04 <__aeabi_dcmpeq>
  4053ce:	2800      	cmp	r0, #0
  4053d0:	f47f ae80 	bne.w	4050d4 <_dtoa_r+0x12c>
  4053d4:	1e6b      	subs	r3, r5, #1
  4053d6:	9302      	str	r3, [sp, #8]
  4053d8:	e67c      	b.n	4050d4 <_dtoa_r+0x12c>
  4053da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4053dc:	9d08      	ldr	r5, [sp, #32]
  4053de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4053e0:	2d00      	cmp	r5, #0
  4053e2:	dd0c      	ble.n	4053fe <_dtoa_r+0x456>
  4053e4:	9906      	ldr	r1, [sp, #24]
  4053e6:	2900      	cmp	r1, #0
  4053e8:	460b      	mov	r3, r1
  4053ea:	dd08      	ble.n	4053fe <_dtoa_r+0x456>
  4053ec:	42a9      	cmp	r1, r5
  4053ee:	9a08      	ldr	r2, [sp, #32]
  4053f0:	bfa8      	it	ge
  4053f2:	462b      	movge	r3, r5
  4053f4:	1ad2      	subs	r2, r2, r3
  4053f6:	1aed      	subs	r5, r5, r3
  4053f8:	1acb      	subs	r3, r1, r3
  4053fa:	9208      	str	r2, [sp, #32]
  4053fc:	9306      	str	r3, [sp, #24]
  4053fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405400:	b1d3      	cbz	r3, 405438 <_dtoa_r+0x490>
  405402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405404:	2b00      	cmp	r3, #0
  405406:	f000 82b7 	beq.w	405978 <_dtoa_r+0x9d0>
  40540a:	2f00      	cmp	r7, #0
  40540c:	dd10      	ble.n	405430 <_dtoa_r+0x488>
  40540e:	4631      	mov	r1, r6
  405410:	463a      	mov	r2, r7
  405412:	4620      	mov	r0, r4
  405414:	f001 fa26 	bl	406864 <__pow5mult>
  405418:	464a      	mov	r2, r9
  40541a:	4601      	mov	r1, r0
  40541c:	4606      	mov	r6, r0
  40541e:	4620      	mov	r0, r4
  405420:	f001 f98e 	bl	406740 <__multiply>
  405424:	4649      	mov	r1, r9
  405426:	4680      	mov	r8, r0
  405428:	4620      	mov	r0, r4
  40542a:	f001 f8e5 	bl	4065f8 <_Bfree>
  40542e:	46c1      	mov	r9, r8
  405430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405432:	1bda      	subs	r2, r3, r7
  405434:	f040 82a1 	bne.w	40597a <_dtoa_r+0x9d2>
  405438:	2101      	movs	r1, #1
  40543a:	4620      	mov	r0, r4
  40543c:	f001 f976 	bl	40672c <__i2b>
  405440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405442:	2b00      	cmp	r3, #0
  405444:	4680      	mov	r8, r0
  405446:	dd1c      	ble.n	405482 <_dtoa_r+0x4da>
  405448:	4601      	mov	r1, r0
  40544a:	461a      	mov	r2, r3
  40544c:	4620      	mov	r0, r4
  40544e:	f001 fa09 	bl	406864 <__pow5mult>
  405452:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405454:	2b01      	cmp	r3, #1
  405456:	4680      	mov	r8, r0
  405458:	f340 8254 	ble.w	405904 <_dtoa_r+0x95c>
  40545c:	2300      	movs	r3, #0
  40545e:	930c      	str	r3, [sp, #48]	; 0x30
  405460:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405464:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405468:	6918      	ldr	r0, [r3, #16]
  40546a:	f001 f90f 	bl	40668c <__hi0bits>
  40546e:	f1c0 0020 	rsb	r0, r0, #32
  405472:	e010      	b.n	405496 <_dtoa_r+0x4ee>
  405474:	f1c3 0520 	rsb	r5, r3, #32
  405478:	fa0a f005 	lsl.w	r0, sl, r5
  40547c:	e674      	b.n	405168 <_dtoa_r+0x1c0>
  40547e:	900e      	str	r0, [sp, #56]	; 0x38
  405480:	e63c      	b.n	4050fc <_dtoa_r+0x154>
  405482:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405484:	2b01      	cmp	r3, #1
  405486:	f340 8287 	ble.w	405998 <_dtoa_r+0x9f0>
  40548a:	2300      	movs	r3, #0
  40548c:	930c      	str	r3, [sp, #48]	; 0x30
  40548e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405490:	2001      	movs	r0, #1
  405492:	2b00      	cmp	r3, #0
  405494:	d1e4      	bne.n	405460 <_dtoa_r+0x4b8>
  405496:	9a06      	ldr	r2, [sp, #24]
  405498:	4410      	add	r0, r2
  40549a:	f010 001f 	ands.w	r0, r0, #31
  40549e:	f000 80a1 	beq.w	4055e4 <_dtoa_r+0x63c>
  4054a2:	f1c0 0320 	rsb	r3, r0, #32
  4054a6:	2b04      	cmp	r3, #4
  4054a8:	f340 849e 	ble.w	405de8 <_dtoa_r+0xe40>
  4054ac:	9b08      	ldr	r3, [sp, #32]
  4054ae:	f1c0 001c 	rsb	r0, r0, #28
  4054b2:	4403      	add	r3, r0
  4054b4:	9308      	str	r3, [sp, #32]
  4054b6:	4613      	mov	r3, r2
  4054b8:	4403      	add	r3, r0
  4054ba:	4405      	add	r5, r0
  4054bc:	9306      	str	r3, [sp, #24]
  4054be:	9b08      	ldr	r3, [sp, #32]
  4054c0:	2b00      	cmp	r3, #0
  4054c2:	dd05      	ble.n	4054d0 <_dtoa_r+0x528>
  4054c4:	4649      	mov	r1, r9
  4054c6:	461a      	mov	r2, r3
  4054c8:	4620      	mov	r0, r4
  4054ca:	f001 fa1b 	bl	406904 <__lshift>
  4054ce:	4681      	mov	r9, r0
  4054d0:	9b06      	ldr	r3, [sp, #24]
  4054d2:	2b00      	cmp	r3, #0
  4054d4:	dd05      	ble.n	4054e2 <_dtoa_r+0x53a>
  4054d6:	4641      	mov	r1, r8
  4054d8:	461a      	mov	r2, r3
  4054da:	4620      	mov	r0, r4
  4054dc:	f001 fa12 	bl	406904 <__lshift>
  4054e0:	4680      	mov	r8, r0
  4054e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4054e4:	2b00      	cmp	r3, #0
  4054e6:	f040 8086 	bne.w	4055f6 <_dtoa_r+0x64e>
  4054ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4054ec:	2b00      	cmp	r3, #0
  4054ee:	f340 8266 	ble.w	4059be <_dtoa_r+0xa16>
  4054f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4054f4:	2b00      	cmp	r3, #0
  4054f6:	f000 8098 	beq.w	40562a <_dtoa_r+0x682>
  4054fa:	2d00      	cmp	r5, #0
  4054fc:	dd05      	ble.n	40550a <_dtoa_r+0x562>
  4054fe:	4631      	mov	r1, r6
  405500:	462a      	mov	r2, r5
  405502:	4620      	mov	r0, r4
  405504:	f001 f9fe 	bl	406904 <__lshift>
  405508:	4606      	mov	r6, r0
  40550a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40550c:	2b00      	cmp	r3, #0
  40550e:	f040 8337 	bne.w	405b80 <_dtoa_r+0xbd8>
  405512:	9606      	str	r6, [sp, #24]
  405514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405516:	9a04      	ldr	r2, [sp, #16]
  405518:	f8dd b018 	ldr.w	fp, [sp, #24]
  40551c:	3b01      	subs	r3, #1
  40551e:	18d3      	adds	r3, r2, r3
  405520:	930b      	str	r3, [sp, #44]	; 0x2c
  405522:	f00a 0301 	and.w	r3, sl, #1
  405526:	930c      	str	r3, [sp, #48]	; 0x30
  405528:	4617      	mov	r7, r2
  40552a:	46c2      	mov	sl, r8
  40552c:	4651      	mov	r1, sl
  40552e:	4648      	mov	r0, r9
  405530:	f7ff fca4 	bl	404e7c <quorem>
  405534:	4631      	mov	r1, r6
  405536:	4605      	mov	r5, r0
  405538:	4648      	mov	r0, r9
  40553a:	f001 fa35 	bl	4069a8 <__mcmp>
  40553e:	465a      	mov	r2, fp
  405540:	900a      	str	r0, [sp, #40]	; 0x28
  405542:	4651      	mov	r1, sl
  405544:	4620      	mov	r0, r4
  405546:	f001 fa4b 	bl	4069e0 <__mdiff>
  40554a:	68c2      	ldr	r2, [r0, #12]
  40554c:	4680      	mov	r8, r0
  40554e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405552:	2a00      	cmp	r2, #0
  405554:	f040 822b 	bne.w	4059ae <_dtoa_r+0xa06>
  405558:	4601      	mov	r1, r0
  40555a:	4648      	mov	r0, r9
  40555c:	9308      	str	r3, [sp, #32]
  40555e:	f001 fa23 	bl	4069a8 <__mcmp>
  405562:	4641      	mov	r1, r8
  405564:	9006      	str	r0, [sp, #24]
  405566:	4620      	mov	r0, r4
  405568:	f001 f846 	bl	4065f8 <_Bfree>
  40556c:	9a06      	ldr	r2, [sp, #24]
  40556e:	9b08      	ldr	r3, [sp, #32]
  405570:	b932      	cbnz	r2, 405580 <_dtoa_r+0x5d8>
  405572:	9924      	ldr	r1, [sp, #144]	; 0x90
  405574:	b921      	cbnz	r1, 405580 <_dtoa_r+0x5d8>
  405576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405578:	2a00      	cmp	r2, #0
  40557a:	f000 83ef 	beq.w	405d5c <_dtoa_r+0xdb4>
  40557e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405580:	990a      	ldr	r1, [sp, #40]	; 0x28
  405582:	2900      	cmp	r1, #0
  405584:	f2c0 829f 	blt.w	405ac6 <_dtoa_r+0xb1e>
  405588:	d105      	bne.n	405596 <_dtoa_r+0x5ee>
  40558a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40558c:	b919      	cbnz	r1, 405596 <_dtoa_r+0x5ee>
  40558e:	990c      	ldr	r1, [sp, #48]	; 0x30
  405590:	2900      	cmp	r1, #0
  405592:	f000 8298 	beq.w	405ac6 <_dtoa_r+0xb1e>
  405596:	2a00      	cmp	r2, #0
  405598:	f300 8306 	bgt.w	405ba8 <_dtoa_r+0xc00>
  40559c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40559e:	703b      	strb	r3, [r7, #0]
  4055a0:	f107 0801 	add.w	r8, r7, #1
  4055a4:	4297      	cmp	r7, r2
  4055a6:	4645      	mov	r5, r8
  4055a8:	f000 830c 	beq.w	405bc4 <_dtoa_r+0xc1c>
  4055ac:	4649      	mov	r1, r9
  4055ae:	2300      	movs	r3, #0
  4055b0:	220a      	movs	r2, #10
  4055b2:	4620      	mov	r0, r4
  4055b4:	f001 f82a 	bl	40660c <__multadd>
  4055b8:	455e      	cmp	r6, fp
  4055ba:	4681      	mov	r9, r0
  4055bc:	4631      	mov	r1, r6
  4055be:	f04f 0300 	mov.w	r3, #0
  4055c2:	f04f 020a 	mov.w	r2, #10
  4055c6:	4620      	mov	r0, r4
  4055c8:	f000 81eb 	beq.w	4059a2 <_dtoa_r+0x9fa>
  4055cc:	f001 f81e 	bl	40660c <__multadd>
  4055d0:	4659      	mov	r1, fp
  4055d2:	4606      	mov	r6, r0
  4055d4:	2300      	movs	r3, #0
  4055d6:	220a      	movs	r2, #10
  4055d8:	4620      	mov	r0, r4
  4055da:	f001 f817 	bl	40660c <__multadd>
  4055de:	4647      	mov	r7, r8
  4055e0:	4683      	mov	fp, r0
  4055e2:	e7a3      	b.n	40552c <_dtoa_r+0x584>
  4055e4:	201c      	movs	r0, #28
  4055e6:	9b08      	ldr	r3, [sp, #32]
  4055e8:	4403      	add	r3, r0
  4055ea:	9308      	str	r3, [sp, #32]
  4055ec:	9b06      	ldr	r3, [sp, #24]
  4055ee:	4403      	add	r3, r0
  4055f0:	4405      	add	r5, r0
  4055f2:	9306      	str	r3, [sp, #24]
  4055f4:	e763      	b.n	4054be <_dtoa_r+0x516>
  4055f6:	4641      	mov	r1, r8
  4055f8:	4648      	mov	r0, r9
  4055fa:	f001 f9d5 	bl	4069a8 <__mcmp>
  4055fe:	2800      	cmp	r0, #0
  405600:	f6bf af73 	bge.w	4054ea <_dtoa_r+0x542>
  405604:	9f02      	ldr	r7, [sp, #8]
  405606:	4649      	mov	r1, r9
  405608:	2300      	movs	r3, #0
  40560a:	220a      	movs	r2, #10
  40560c:	4620      	mov	r0, r4
  40560e:	3f01      	subs	r7, #1
  405610:	9702      	str	r7, [sp, #8]
  405612:	f000 fffb 	bl	40660c <__multadd>
  405616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405618:	4681      	mov	r9, r0
  40561a:	2b00      	cmp	r3, #0
  40561c:	f040 83b6 	bne.w	405d8c <_dtoa_r+0xde4>
  405620:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405622:	2b00      	cmp	r3, #0
  405624:	f340 83bf 	ble.w	405da6 <_dtoa_r+0xdfe>
  405628:	930a      	str	r3, [sp, #40]	; 0x28
  40562a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40562e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405630:	465d      	mov	r5, fp
  405632:	e002      	b.n	40563a <_dtoa_r+0x692>
  405634:	f000 ffea 	bl	40660c <__multadd>
  405638:	4681      	mov	r9, r0
  40563a:	4641      	mov	r1, r8
  40563c:	4648      	mov	r0, r9
  40563e:	f7ff fc1d 	bl	404e7c <quorem>
  405642:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405646:	f805 ab01 	strb.w	sl, [r5], #1
  40564a:	eba5 030b 	sub.w	r3, r5, fp
  40564e:	42bb      	cmp	r3, r7
  405650:	f04f 020a 	mov.w	r2, #10
  405654:	f04f 0300 	mov.w	r3, #0
  405658:	4649      	mov	r1, r9
  40565a:	4620      	mov	r0, r4
  40565c:	dbea      	blt.n	405634 <_dtoa_r+0x68c>
  40565e:	9b04      	ldr	r3, [sp, #16]
  405660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405662:	2a01      	cmp	r2, #1
  405664:	bfac      	ite	ge
  405666:	189b      	addge	r3, r3, r2
  405668:	3301      	addlt	r3, #1
  40566a:	461d      	mov	r5, r3
  40566c:	f04f 0b00 	mov.w	fp, #0
  405670:	4649      	mov	r1, r9
  405672:	2201      	movs	r2, #1
  405674:	4620      	mov	r0, r4
  405676:	f001 f945 	bl	406904 <__lshift>
  40567a:	4641      	mov	r1, r8
  40567c:	4681      	mov	r9, r0
  40567e:	f001 f993 	bl	4069a8 <__mcmp>
  405682:	2800      	cmp	r0, #0
  405684:	f340 823d 	ble.w	405b02 <_dtoa_r+0xb5a>
  405688:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40568c:	9904      	ldr	r1, [sp, #16]
  40568e:	1e6b      	subs	r3, r5, #1
  405690:	e004      	b.n	40569c <_dtoa_r+0x6f4>
  405692:	428b      	cmp	r3, r1
  405694:	f000 81ae 	beq.w	4059f4 <_dtoa_r+0xa4c>
  405698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40569c:	2a39      	cmp	r2, #57	; 0x39
  40569e:	f103 0501 	add.w	r5, r3, #1
  4056a2:	d0f6      	beq.n	405692 <_dtoa_r+0x6ea>
  4056a4:	3201      	adds	r2, #1
  4056a6:	701a      	strb	r2, [r3, #0]
  4056a8:	4641      	mov	r1, r8
  4056aa:	4620      	mov	r0, r4
  4056ac:	f000 ffa4 	bl	4065f8 <_Bfree>
  4056b0:	2e00      	cmp	r6, #0
  4056b2:	f43f ae3d 	beq.w	405330 <_dtoa_r+0x388>
  4056b6:	f1bb 0f00 	cmp.w	fp, #0
  4056ba:	d005      	beq.n	4056c8 <_dtoa_r+0x720>
  4056bc:	45b3      	cmp	fp, r6
  4056be:	d003      	beq.n	4056c8 <_dtoa_r+0x720>
  4056c0:	4659      	mov	r1, fp
  4056c2:	4620      	mov	r0, r4
  4056c4:	f000 ff98 	bl	4065f8 <_Bfree>
  4056c8:	4631      	mov	r1, r6
  4056ca:	4620      	mov	r0, r4
  4056cc:	f000 ff94 	bl	4065f8 <_Bfree>
  4056d0:	e62e      	b.n	405330 <_dtoa_r+0x388>
  4056d2:	2300      	movs	r3, #0
  4056d4:	930b      	str	r3, [sp, #44]	; 0x2c
  4056d6:	9b02      	ldr	r3, [sp, #8]
  4056d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4056da:	4413      	add	r3, r2
  4056dc:	930f      	str	r3, [sp, #60]	; 0x3c
  4056de:	3301      	adds	r3, #1
  4056e0:	2b01      	cmp	r3, #1
  4056e2:	461f      	mov	r7, r3
  4056e4:	461e      	mov	r6, r3
  4056e6:	930a      	str	r3, [sp, #40]	; 0x28
  4056e8:	bfb8      	it	lt
  4056ea:	2701      	movlt	r7, #1
  4056ec:	2100      	movs	r1, #0
  4056ee:	2f17      	cmp	r7, #23
  4056f0:	6461      	str	r1, [r4, #68]	; 0x44
  4056f2:	d90a      	bls.n	40570a <_dtoa_r+0x762>
  4056f4:	2201      	movs	r2, #1
  4056f6:	2304      	movs	r3, #4
  4056f8:	005b      	lsls	r3, r3, #1
  4056fa:	f103 0014 	add.w	r0, r3, #20
  4056fe:	4287      	cmp	r7, r0
  405700:	4611      	mov	r1, r2
  405702:	f102 0201 	add.w	r2, r2, #1
  405706:	d2f7      	bcs.n	4056f8 <_dtoa_r+0x750>
  405708:	6461      	str	r1, [r4, #68]	; 0x44
  40570a:	4620      	mov	r0, r4
  40570c:	f000 ff4e 	bl	4065ac <_Balloc>
  405710:	2e0e      	cmp	r6, #14
  405712:	9004      	str	r0, [sp, #16]
  405714:	6420      	str	r0, [r4, #64]	; 0x40
  405716:	f63f ad41 	bhi.w	40519c <_dtoa_r+0x1f4>
  40571a:	2d00      	cmp	r5, #0
  40571c:	f43f ad3e 	beq.w	40519c <_dtoa_r+0x1f4>
  405720:	9902      	ldr	r1, [sp, #8]
  405722:	2900      	cmp	r1, #0
  405724:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405728:	f340 8202 	ble.w	405b30 <_dtoa_r+0xb88>
  40572c:	4bb8      	ldr	r3, [pc, #736]	; (405a10 <_dtoa_r+0xa68>)
  40572e:	f001 020f 	and.w	r2, r1, #15
  405732:	110d      	asrs	r5, r1, #4
  405734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405738:	06e9      	lsls	r1, r5, #27
  40573a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40573e:	f140 81ae 	bpl.w	405a9e <_dtoa_r+0xaf6>
  405742:	4bb4      	ldr	r3, [pc, #720]	; (405a14 <_dtoa_r+0xa6c>)
  405744:	4650      	mov	r0, sl
  405746:	4659      	mov	r1, fp
  405748:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40574c:	f002 fa1c 	bl	407b88 <__aeabi_ddiv>
  405750:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  405754:	f005 050f 	and.w	r5, r5, #15
  405758:	f04f 0a03 	mov.w	sl, #3
  40575c:	b18d      	cbz	r5, 405782 <_dtoa_r+0x7da>
  40575e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 405a14 <_dtoa_r+0xa6c>
  405762:	07ea      	lsls	r2, r5, #31
  405764:	d509      	bpl.n	40577a <_dtoa_r+0x7d2>
  405766:	4630      	mov	r0, r6
  405768:	4639      	mov	r1, r7
  40576a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40576e:	f002 f8e1 	bl	407934 <__aeabi_dmul>
  405772:	f10a 0a01 	add.w	sl, sl, #1
  405776:	4606      	mov	r6, r0
  405778:	460f      	mov	r7, r1
  40577a:	106d      	asrs	r5, r5, #1
  40577c:	f108 0808 	add.w	r8, r8, #8
  405780:	d1ef      	bne.n	405762 <_dtoa_r+0x7ba>
  405782:	463b      	mov	r3, r7
  405784:	4632      	mov	r2, r6
  405786:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40578a:	f002 f9fd 	bl	407b88 <__aeabi_ddiv>
  40578e:	4607      	mov	r7, r0
  405790:	4688      	mov	r8, r1
  405792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405794:	b143      	cbz	r3, 4057a8 <_dtoa_r+0x800>
  405796:	2200      	movs	r2, #0
  405798:	4b9f      	ldr	r3, [pc, #636]	; (405a18 <_dtoa_r+0xa70>)
  40579a:	4638      	mov	r0, r7
  40579c:	4641      	mov	r1, r8
  40579e:	f002 fb3b 	bl	407e18 <__aeabi_dcmplt>
  4057a2:	2800      	cmp	r0, #0
  4057a4:	f040 8286 	bne.w	405cb4 <_dtoa_r+0xd0c>
  4057a8:	4650      	mov	r0, sl
  4057aa:	f002 f85d 	bl	407868 <__aeabi_i2d>
  4057ae:	463a      	mov	r2, r7
  4057b0:	4643      	mov	r3, r8
  4057b2:	f002 f8bf 	bl	407934 <__aeabi_dmul>
  4057b6:	4b99      	ldr	r3, [pc, #612]	; (405a1c <_dtoa_r+0xa74>)
  4057b8:	2200      	movs	r2, #0
  4057ba:	f001 ff09 	bl	4075d0 <__adddf3>
  4057be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4057c0:	4605      	mov	r5, r0
  4057c2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4057c6:	2b00      	cmp	r3, #0
  4057c8:	f000 813e 	beq.w	405a48 <_dtoa_r+0xaa0>
  4057cc:	9b02      	ldr	r3, [sp, #8]
  4057ce:	9315      	str	r3, [sp, #84]	; 0x54
  4057d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4057d2:	9312      	str	r3, [sp, #72]	; 0x48
  4057d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4057d6:	2b00      	cmp	r3, #0
  4057d8:	f000 81fa 	beq.w	405bd0 <_dtoa_r+0xc28>
  4057dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4057de:	4b8c      	ldr	r3, [pc, #560]	; (405a10 <_dtoa_r+0xa68>)
  4057e0:	498f      	ldr	r1, [pc, #572]	; (405a20 <_dtoa_r+0xa78>)
  4057e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4057e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4057ea:	2000      	movs	r0, #0
  4057ec:	f002 f9cc 	bl	407b88 <__aeabi_ddiv>
  4057f0:	462a      	mov	r2, r5
  4057f2:	4633      	mov	r3, r6
  4057f4:	f001 feea 	bl	4075cc <__aeabi_dsub>
  4057f8:	4682      	mov	sl, r0
  4057fa:	468b      	mov	fp, r1
  4057fc:	4638      	mov	r0, r7
  4057fe:	4641      	mov	r1, r8
  405800:	f002 fb48 	bl	407e94 <__aeabi_d2iz>
  405804:	4605      	mov	r5, r0
  405806:	f002 f82f 	bl	407868 <__aeabi_i2d>
  40580a:	4602      	mov	r2, r0
  40580c:	460b      	mov	r3, r1
  40580e:	4638      	mov	r0, r7
  405810:	4641      	mov	r1, r8
  405812:	f001 fedb 	bl	4075cc <__aeabi_dsub>
  405816:	3530      	adds	r5, #48	; 0x30
  405818:	fa5f f885 	uxtb.w	r8, r5
  40581c:	9d04      	ldr	r5, [sp, #16]
  40581e:	4606      	mov	r6, r0
  405820:	460f      	mov	r7, r1
  405822:	f885 8000 	strb.w	r8, [r5]
  405826:	4602      	mov	r2, r0
  405828:	460b      	mov	r3, r1
  40582a:	4650      	mov	r0, sl
  40582c:	4659      	mov	r1, fp
  40582e:	3501      	adds	r5, #1
  405830:	f002 fb10 	bl	407e54 <__aeabi_dcmpgt>
  405834:	2800      	cmp	r0, #0
  405836:	d154      	bne.n	4058e2 <_dtoa_r+0x93a>
  405838:	4632      	mov	r2, r6
  40583a:	463b      	mov	r3, r7
  40583c:	2000      	movs	r0, #0
  40583e:	4976      	ldr	r1, [pc, #472]	; (405a18 <_dtoa_r+0xa70>)
  405840:	f001 fec4 	bl	4075cc <__aeabi_dsub>
  405844:	4602      	mov	r2, r0
  405846:	460b      	mov	r3, r1
  405848:	4650      	mov	r0, sl
  40584a:	4659      	mov	r1, fp
  40584c:	f002 fb02 	bl	407e54 <__aeabi_dcmpgt>
  405850:	2800      	cmp	r0, #0
  405852:	f040 8270 	bne.w	405d36 <_dtoa_r+0xd8e>
  405856:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405858:	2a01      	cmp	r2, #1
  40585a:	f000 8111 	beq.w	405a80 <_dtoa_r+0xad8>
  40585e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405860:	9a04      	ldr	r2, [sp, #16]
  405862:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405866:	4413      	add	r3, r2
  405868:	4699      	mov	r9, r3
  40586a:	e00d      	b.n	405888 <_dtoa_r+0x8e0>
  40586c:	2000      	movs	r0, #0
  40586e:	496a      	ldr	r1, [pc, #424]	; (405a18 <_dtoa_r+0xa70>)
  405870:	f001 feac 	bl	4075cc <__aeabi_dsub>
  405874:	4652      	mov	r2, sl
  405876:	465b      	mov	r3, fp
  405878:	f002 face 	bl	407e18 <__aeabi_dcmplt>
  40587c:	2800      	cmp	r0, #0
  40587e:	f040 8258 	bne.w	405d32 <_dtoa_r+0xd8a>
  405882:	454d      	cmp	r5, r9
  405884:	f000 80fa 	beq.w	405a7c <_dtoa_r+0xad4>
  405888:	4650      	mov	r0, sl
  40588a:	4659      	mov	r1, fp
  40588c:	2200      	movs	r2, #0
  40588e:	4b65      	ldr	r3, [pc, #404]	; (405a24 <_dtoa_r+0xa7c>)
  405890:	f002 f850 	bl	407934 <__aeabi_dmul>
  405894:	2200      	movs	r2, #0
  405896:	4b63      	ldr	r3, [pc, #396]	; (405a24 <_dtoa_r+0xa7c>)
  405898:	4682      	mov	sl, r0
  40589a:	468b      	mov	fp, r1
  40589c:	4630      	mov	r0, r6
  40589e:	4639      	mov	r1, r7
  4058a0:	f002 f848 	bl	407934 <__aeabi_dmul>
  4058a4:	460f      	mov	r7, r1
  4058a6:	4606      	mov	r6, r0
  4058a8:	f002 faf4 	bl	407e94 <__aeabi_d2iz>
  4058ac:	4680      	mov	r8, r0
  4058ae:	f001 ffdb 	bl	407868 <__aeabi_i2d>
  4058b2:	4602      	mov	r2, r0
  4058b4:	460b      	mov	r3, r1
  4058b6:	4630      	mov	r0, r6
  4058b8:	4639      	mov	r1, r7
  4058ba:	f001 fe87 	bl	4075cc <__aeabi_dsub>
  4058be:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4058c2:	fa5f f888 	uxtb.w	r8, r8
  4058c6:	4652      	mov	r2, sl
  4058c8:	465b      	mov	r3, fp
  4058ca:	f805 8b01 	strb.w	r8, [r5], #1
  4058ce:	4606      	mov	r6, r0
  4058d0:	460f      	mov	r7, r1
  4058d2:	f002 faa1 	bl	407e18 <__aeabi_dcmplt>
  4058d6:	4632      	mov	r2, r6
  4058d8:	463b      	mov	r3, r7
  4058da:	2800      	cmp	r0, #0
  4058dc:	d0c6      	beq.n	40586c <_dtoa_r+0x8c4>
  4058de:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4058e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4058e4:	9302      	str	r3, [sp, #8]
  4058e6:	e523      	b.n	405330 <_dtoa_r+0x388>
  4058e8:	2300      	movs	r3, #0
  4058ea:	930b      	str	r3, [sp, #44]	; 0x2c
  4058ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4058ee:	2b00      	cmp	r3, #0
  4058f0:	f340 80dc 	ble.w	405aac <_dtoa_r+0xb04>
  4058f4:	461f      	mov	r7, r3
  4058f6:	461e      	mov	r6, r3
  4058f8:	930f      	str	r3, [sp, #60]	; 0x3c
  4058fa:	930a      	str	r3, [sp, #40]	; 0x28
  4058fc:	e6f6      	b.n	4056ec <_dtoa_r+0x744>
  4058fe:	2301      	movs	r3, #1
  405900:	930b      	str	r3, [sp, #44]	; 0x2c
  405902:	e7f3      	b.n	4058ec <_dtoa_r+0x944>
  405904:	f1ba 0f00 	cmp.w	sl, #0
  405908:	f47f ada8 	bne.w	40545c <_dtoa_r+0x4b4>
  40590c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405910:	2b00      	cmp	r3, #0
  405912:	f47f adba 	bne.w	40548a <_dtoa_r+0x4e2>
  405916:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40591a:	0d3f      	lsrs	r7, r7, #20
  40591c:	053f      	lsls	r7, r7, #20
  40591e:	2f00      	cmp	r7, #0
  405920:	f000 820d 	beq.w	405d3e <_dtoa_r+0xd96>
  405924:	9b08      	ldr	r3, [sp, #32]
  405926:	3301      	adds	r3, #1
  405928:	9308      	str	r3, [sp, #32]
  40592a:	9b06      	ldr	r3, [sp, #24]
  40592c:	3301      	adds	r3, #1
  40592e:	9306      	str	r3, [sp, #24]
  405930:	2301      	movs	r3, #1
  405932:	930c      	str	r3, [sp, #48]	; 0x30
  405934:	e5ab      	b.n	40548e <_dtoa_r+0x4e6>
  405936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405938:	2b00      	cmp	r3, #0
  40593a:	f73f ac42 	bgt.w	4051c2 <_dtoa_r+0x21a>
  40593e:	f040 8221 	bne.w	405d84 <_dtoa_r+0xddc>
  405942:	2200      	movs	r2, #0
  405944:	4b38      	ldr	r3, [pc, #224]	; (405a28 <_dtoa_r+0xa80>)
  405946:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40594a:	f001 fff3 	bl	407934 <__aeabi_dmul>
  40594e:	4652      	mov	r2, sl
  405950:	465b      	mov	r3, fp
  405952:	f002 fa75 	bl	407e40 <__aeabi_dcmpge>
  405956:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40595a:	4646      	mov	r6, r8
  40595c:	2800      	cmp	r0, #0
  40595e:	d041      	beq.n	4059e4 <_dtoa_r+0xa3c>
  405960:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405962:	9d04      	ldr	r5, [sp, #16]
  405964:	43db      	mvns	r3, r3
  405966:	9302      	str	r3, [sp, #8]
  405968:	4641      	mov	r1, r8
  40596a:	4620      	mov	r0, r4
  40596c:	f000 fe44 	bl	4065f8 <_Bfree>
  405970:	2e00      	cmp	r6, #0
  405972:	f43f acdd 	beq.w	405330 <_dtoa_r+0x388>
  405976:	e6a7      	b.n	4056c8 <_dtoa_r+0x720>
  405978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40597a:	4649      	mov	r1, r9
  40597c:	4620      	mov	r0, r4
  40597e:	f000 ff71 	bl	406864 <__pow5mult>
  405982:	4681      	mov	r9, r0
  405984:	e558      	b.n	405438 <_dtoa_r+0x490>
  405986:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405988:	2a00      	cmp	r2, #0
  40598a:	f000 8187 	beq.w	405c9c <_dtoa_r+0xcf4>
  40598e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405992:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405994:	9d08      	ldr	r5, [sp, #32]
  405996:	e4f2      	b.n	40537e <_dtoa_r+0x3d6>
  405998:	f1ba 0f00 	cmp.w	sl, #0
  40599c:	f47f ad75 	bne.w	40548a <_dtoa_r+0x4e2>
  4059a0:	e7b4      	b.n	40590c <_dtoa_r+0x964>
  4059a2:	f000 fe33 	bl	40660c <__multadd>
  4059a6:	4647      	mov	r7, r8
  4059a8:	4606      	mov	r6, r0
  4059aa:	4683      	mov	fp, r0
  4059ac:	e5be      	b.n	40552c <_dtoa_r+0x584>
  4059ae:	4601      	mov	r1, r0
  4059b0:	4620      	mov	r0, r4
  4059b2:	9306      	str	r3, [sp, #24]
  4059b4:	f000 fe20 	bl	4065f8 <_Bfree>
  4059b8:	2201      	movs	r2, #1
  4059ba:	9b06      	ldr	r3, [sp, #24]
  4059bc:	e5e0      	b.n	405580 <_dtoa_r+0x5d8>
  4059be:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059c0:	2b02      	cmp	r3, #2
  4059c2:	f77f ad96 	ble.w	4054f2 <_dtoa_r+0x54a>
  4059c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4059c8:	2b00      	cmp	r3, #0
  4059ca:	d1c9      	bne.n	405960 <_dtoa_r+0x9b8>
  4059cc:	4641      	mov	r1, r8
  4059ce:	2205      	movs	r2, #5
  4059d0:	4620      	mov	r0, r4
  4059d2:	f000 fe1b 	bl	40660c <__multadd>
  4059d6:	4601      	mov	r1, r0
  4059d8:	4680      	mov	r8, r0
  4059da:	4648      	mov	r0, r9
  4059dc:	f000 ffe4 	bl	4069a8 <__mcmp>
  4059e0:	2800      	cmp	r0, #0
  4059e2:	ddbd      	ble.n	405960 <_dtoa_r+0x9b8>
  4059e4:	9a02      	ldr	r2, [sp, #8]
  4059e6:	9904      	ldr	r1, [sp, #16]
  4059e8:	2331      	movs	r3, #49	; 0x31
  4059ea:	3201      	adds	r2, #1
  4059ec:	9202      	str	r2, [sp, #8]
  4059ee:	700b      	strb	r3, [r1, #0]
  4059f0:	1c4d      	adds	r5, r1, #1
  4059f2:	e7b9      	b.n	405968 <_dtoa_r+0x9c0>
  4059f4:	9a02      	ldr	r2, [sp, #8]
  4059f6:	3201      	adds	r2, #1
  4059f8:	9202      	str	r2, [sp, #8]
  4059fa:	9a04      	ldr	r2, [sp, #16]
  4059fc:	2331      	movs	r3, #49	; 0x31
  4059fe:	7013      	strb	r3, [r2, #0]
  405a00:	e652      	b.n	4056a8 <_dtoa_r+0x700>
  405a02:	2301      	movs	r3, #1
  405a04:	930b      	str	r3, [sp, #44]	; 0x2c
  405a06:	e666      	b.n	4056d6 <_dtoa_r+0x72e>
  405a08:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405a0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405a0e:	e48f      	b.n	405330 <_dtoa_r+0x388>
  405a10:	00408928 	.word	0x00408928
  405a14:	00408900 	.word	0x00408900
  405a18:	3ff00000 	.word	0x3ff00000
  405a1c:	401c0000 	.word	0x401c0000
  405a20:	3fe00000 	.word	0x3fe00000
  405a24:	40240000 	.word	0x40240000
  405a28:	40140000 	.word	0x40140000
  405a2c:	4650      	mov	r0, sl
  405a2e:	f001 ff1b 	bl	407868 <__aeabi_i2d>
  405a32:	463a      	mov	r2, r7
  405a34:	4643      	mov	r3, r8
  405a36:	f001 ff7d 	bl	407934 <__aeabi_dmul>
  405a3a:	2200      	movs	r2, #0
  405a3c:	4bc1      	ldr	r3, [pc, #772]	; (405d44 <_dtoa_r+0xd9c>)
  405a3e:	f001 fdc7 	bl	4075d0 <__adddf3>
  405a42:	4605      	mov	r5, r0
  405a44:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405a48:	4641      	mov	r1, r8
  405a4a:	2200      	movs	r2, #0
  405a4c:	4bbe      	ldr	r3, [pc, #760]	; (405d48 <_dtoa_r+0xda0>)
  405a4e:	4638      	mov	r0, r7
  405a50:	f001 fdbc 	bl	4075cc <__aeabi_dsub>
  405a54:	462a      	mov	r2, r5
  405a56:	4633      	mov	r3, r6
  405a58:	4682      	mov	sl, r0
  405a5a:	468b      	mov	fp, r1
  405a5c:	f002 f9fa 	bl	407e54 <__aeabi_dcmpgt>
  405a60:	4680      	mov	r8, r0
  405a62:	2800      	cmp	r0, #0
  405a64:	f040 8110 	bne.w	405c88 <_dtoa_r+0xce0>
  405a68:	462a      	mov	r2, r5
  405a6a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  405a6e:	4650      	mov	r0, sl
  405a70:	4659      	mov	r1, fp
  405a72:	f002 f9d1 	bl	407e18 <__aeabi_dcmplt>
  405a76:	b118      	cbz	r0, 405a80 <_dtoa_r+0xad8>
  405a78:	4646      	mov	r6, r8
  405a7a:	e771      	b.n	405960 <_dtoa_r+0x9b8>
  405a7c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405a80:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  405a84:	f7ff bb8a 	b.w	40519c <_dtoa_r+0x1f4>
  405a88:	9804      	ldr	r0, [sp, #16]
  405a8a:	f7ff babb 	b.w	405004 <_dtoa_r+0x5c>
  405a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405a92:	970c      	str	r7, [sp, #48]	; 0x30
  405a94:	1afb      	subs	r3, r7, r3
  405a96:	441a      	add	r2, r3
  405a98:	920d      	str	r2, [sp, #52]	; 0x34
  405a9a:	2700      	movs	r7, #0
  405a9c:	e469      	b.n	405372 <_dtoa_r+0x3ca>
  405a9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  405aa2:	f04f 0a02 	mov.w	sl, #2
  405aa6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  405aaa:	e657      	b.n	40575c <_dtoa_r+0x7b4>
  405aac:	2100      	movs	r1, #0
  405aae:	2301      	movs	r3, #1
  405ab0:	6461      	str	r1, [r4, #68]	; 0x44
  405ab2:	4620      	mov	r0, r4
  405ab4:	9325      	str	r3, [sp, #148]	; 0x94
  405ab6:	f000 fd79 	bl	4065ac <_Balloc>
  405aba:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405abc:	9004      	str	r0, [sp, #16]
  405abe:	6420      	str	r0, [r4, #64]	; 0x40
  405ac0:	930a      	str	r3, [sp, #40]	; 0x28
  405ac2:	930f      	str	r3, [sp, #60]	; 0x3c
  405ac4:	e629      	b.n	40571a <_dtoa_r+0x772>
  405ac6:	2a00      	cmp	r2, #0
  405ac8:	46d0      	mov	r8, sl
  405aca:	f8cd b018 	str.w	fp, [sp, #24]
  405ace:	469a      	mov	sl, r3
  405ad0:	dd11      	ble.n	405af6 <_dtoa_r+0xb4e>
  405ad2:	4649      	mov	r1, r9
  405ad4:	2201      	movs	r2, #1
  405ad6:	4620      	mov	r0, r4
  405ad8:	f000 ff14 	bl	406904 <__lshift>
  405adc:	4641      	mov	r1, r8
  405ade:	4681      	mov	r9, r0
  405ae0:	f000 ff62 	bl	4069a8 <__mcmp>
  405ae4:	2800      	cmp	r0, #0
  405ae6:	f340 8146 	ble.w	405d76 <_dtoa_r+0xdce>
  405aea:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405aee:	f000 8106 	beq.w	405cfe <_dtoa_r+0xd56>
  405af2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  405af6:	46b3      	mov	fp, r6
  405af8:	f887 a000 	strb.w	sl, [r7]
  405afc:	1c7d      	adds	r5, r7, #1
  405afe:	9e06      	ldr	r6, [sp, #24]
  405b00:	e5d2      	b.n	4056a8 <_dtoa_r+0x700>
  405b02:	d104      	bne.n	405b0e <_dtoa_r+0xb66>
  405b04:	f01a 0f01 	tst.w	sl, #1
  405b08:	d001      	beq.n	405b0e <_dtoa_r+0xb66>
  405b0a:	e5bd      	b.n	405688 <_dtoa_r+0x6e0>
  405b0c:	4615      	mov	r5, r2
  405b0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405b12:	2b30      	cmp	r3, #48	; 0x30
  405b14:	f105 32ff 	add.w	r2, r5, #4294967295
  405b18:	d0f8      	beq.n	405b0c <_dtoa_r+0xb64>
  405b1a:	e5c5      	b.n	4056a8 <_dtoa_r+0x700>
  405b1c:	9904      	ldr	r1, [sp, #16]
  405b1e:	2230      	movs	r2, #48	; 0x30
  405b20:	700a      	strb	r2, [r1, #0]
  405b22:	9a02      	ldr	r2, [sp, #8]
  405b24:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405b28:	3201      	adds	r2, #1
  405b2a:	9202      	str	r2, [sp, #8]
  405b2c:	f7ff bbfc 	b.w	405328 <_dtoa_r+0x380>
  405b30:	f000 80bb 	beq.w	405caa <_dtoa_r+0xd02>
  405b34:	9b02      	ldr	r3, [sp, #8]
  405b36:	425d      	negs	r5, r3
  405b38:	4b84      	ldr	r3, [pc, #528]	; (405d4c <_dtoa_r+0xda4>)
  405b3a:	f005 020f 	and.w	r2, r5, #15
  405b3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405b42:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405b4a:	f001 fef3 	bl	407934 <__aeabi_dmul>
  405b4e:	112d      	asrs	r5, r5, #4
  405b50:	4607      	mov	r7, r0
  405b52:	4688      	mov	r8, r1
  405b54:	f000 812c 	beq.w	405db0 <_dtoa_r+0xe08>
  405b58:	4e7d      	ldr	r6, [pc, #500]	; (405d50 <_dtoa_r+0xda8>)
  405b5a:	f04f 0a02 	mov.w	sl, #2
  405b5e:	07eb      	lsls	r3, r5, #31
  405b60:	d509      	bpl.n	405b76 <_dtoa_r+0xbce>
  405b62:	4638      	mov	r0, r7
  405b64:	4641      	mov	r1, r8
  405b66:	e9d6 2300 	ldrd	r2, r3, [r6]
  405b6a:	f001 fee3 	bl	407934 <__aeabi_dmul>
  405b6e:	f10a 0a01 	add.w	sl, sl, #1
  405b72:	4607      	mov	r7, r0
  405b74:	4688      	mov	r8, r1
  405b76:	106d      	asrs	r5, r5, #1
  405b78:	f106 0608 	add.w	r6, r6, #8
  405b7c:	d1ef      	bne.n	405b5e <_dtoa_r+0xbb6>
  405b7e:	e608      	b.n	405792 <_dtoa_r+0x7ea>
  405b80:	6871      	ldr	r1, [r6, #4]
  405b82:	4620      	mov	r0, r4
  405b84:	f000 fd12 	bl	4065ac <_Balloc>
  405b88:	6933      	ldr	r3, [r6, #16]
  405b8a:	3302      	adds	r3, #2
  405b8c:	009a      	lsls	r2, r3, #2
  405b8e:	4605      	mov	r5, r0
  405b90:	f106 010c 	add.w	r1, r6, #12
  405b94:	300c      	adds	r0, #12
  405b96:	f000 fc63 	bl	406460 <memcpy>
  405b9a:	4629      	mov	r1, r5
  405b9c:	2201      	movs	r2, #1
  405b9e:	4620      	mov	r0, r4
  405ba0:	f000 feb0 	bl	406904 <__lshift>
  405ba4:	9006      	str	r0, [sp, #24]
  405ba6:	e4b5      	b.n	405514 <_dtoa_r+0x56c>
  405ba8:	2b39      	cmp	r3, #57	; 0x39
  405baa:	f8cd b018 	str.w	fp, [sp, #24]
  405bae:	46d0      	mov	r8, sl
  405bb0:	f000 80a5 	beq.w	405cfe <_dtoa_r+0xd56>
  405bb4:	f103 0a01 	add.w	sl, r3, #1
  405bb8:	46b3      	mov	fp, r6
  405bba:	f887 a000 	strb.w	sl, [r7]
  405bbe:	1c7d      	adds	r5, r7, #1
  405bc0:	9e06      	ldr	r6, [sp, #24]
  405bc2:	e571      	b.n	4056a8 <_dtoa_r+0x700>
  405bc4:	465a      	mov	r2, fp
  405bc6:	46d0      	mov	r8, sl
  405bc8:	46b3      	mov	fp, r6
  405bca:	469a      	mov	sl, r3
  405bcc:	4616      	mov	r6, r2
  405bce:	e54f      	b.n	405670 <_dtoa_r+0x6c8>
  405bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405bd2:	495e      	ldr	r1, [pc, #376]	; (405d4c <_dtoa_r+0xda4>)
  405bd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405bd8:	462a      	mov	r2, r5
  405bda:	4633      	mov	r3, r6
  405bdc:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405be0:	f001 fea8 	bl	407934 <__aeabi_dmul>
  405be4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405be8:	4638      	mov	r0, r7
  405bea:	4641      	mov	r1, r8
  405bec:	f002 f952 	bl	407e94 <__aeabi_d2iz>
  405bf0:	4605      	mov	r5, r0
  405bf2:	f001 fe39 	bl	407868 <__aeabi_i2d>
  405bf6:	460b      	mov	r3, r1
  405bf8:	4602      	mov	r2, r0
  405bfa:	4641      	mov	r1, r8
  405bfc:	4638      	mov	r0, r7
  405bfe:	f001 fce5 	bl	4075cc <__aeabi_dsub>
  405c02:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405c04:	460f      	mov	r7, r1
  405c06:	9904      	ldr	r1, [sp, #16]
  405c08:	3530      	adds	r5, #48	; 0x30
  405c0a:	2b01      	cmp	r3, #1
  405c0c:	700d      	strb	r5, [r1, #0]
  405c0e:	4606      	mov	r6, r0
  405c10:	f101 0501 	add.w	r5, r1, #1
  405c14:	d026      	beq.n	405c64 <_dtoa_r+0xcbc>
  405c16:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405c18:	9a04      	ldr	r2, [sp, #16]
  405c1a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 405d58 <_dtoa_r+0xdb0>
  405c1e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  405c22:	4413      	add	r3, r2
  405c24:	f04f 0a00 	mov.w	sl, #0
  405c28:	4699      	mov	r9, r3
  405c2a:	4652      	mov	r2, sl
  405c2c:	465b      	mov	r3, fp
  405c2e:	4630      	mov	r0, r6
  405c30:	4639      	mov	r1, r7
  405c32:	f001 fe7f 	bl	407934 <__aeabi_dmul>
  405c36:	460f      	mov	r7, r1
  405c38:	4606      	mov	r6, r0
  405c3a:	f002 f92b 	bl	407e94 <__aeabi_d2iz>
  405c3e:	4680      	mov	r8, r0
  405c40:	f001 fe12 	bl	407868 <__aeabi_i2d>
  405c44:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405c48:	4602      	mov	r2, r0
  405c4a:	460b      	mov	r3, r1
  405c4c:	4630      	mov	r0, r6
  405c4e:	4639      	mov	r1, r7
  405c50:	f001 fcbc 	bl	4075cc <__aeabi_dsub>
  405c54:	f805 8b01 	strb.w	r8, [r5], #1
  405c58:	454d      	cmp	r5, r9
  405c5a:	4606      	mov	r6, r0
  405c5c:	460f      	mov	r7, r1
  405c5e:	d1e4      	bne.n	405c2a <_dtoa_r+0xc82>
  405c60:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405c64:	4b3b      	ldr	r3, [pc, #236]	; (405d54 <_dtoa_r+0xdac>)
  405c66:	2200      	movs	r2, #0
  405c68:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  405c6c:	f001 fcb0 	bl	4075d0 <__adddf3>
  405c70:	4632      	mov	r2, r6
  405c72:	463b      	mov	r3, r7
  405c74:	f002 f8d0 	bl	407e18 <__aeabi_dcmplt>
  405c78:	2800      	cmp	r0, #0
  405c7a:	d046      	beq.n	405d0a <_dtoa_r+0xd62>
  405c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405c7e:	9302      	str	r3, [sp, #8]
  405c80:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405c84:	f7ff bb43 	b.w	40530e <_dtoa_r+0x366>
  405c88:	f04f 0800 	mov.w	r8, #0
  405c8c:	4646      	mov	r6, r8
  405c8e:	e6a9      	b.n	4059e4 <_dtoa_r+0xa3c>
  405c90:	9b08      	ldr	r3, [sp, #32]
  405c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405c94:	1a9d      	subs	r5, r3, r2
  405c96:	2300      	movs	r3, #0
  405c98:	f7ff bb71 	b.w	40537e <_dtoa_r+0x3d6>
  405c9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  405c9e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405ca0:	9d08      	ldr	r5, [sp, #32]
  405ca2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405ca6:	f7ff bb6a 	b.w	40537e <_dtoa_r+0x3d6>
  405caa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  405cae:	f04f 0a02 	mov.w	sl, #2
  405cb2:	e56e      	b.n	405792 <_dtoa_r+0x7ea>
  405cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cb6:	2b00      	cmp	r3, #0
  405cb8:	f43f aeb8 	beq.w	405a2c <_dtoa_r+0xa84>
  405cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405cbe:	2b00      	cmp	r3, #0
  405cc0:	f77f aede 	ble.w	405a80 <_dtoa_r+0xad8>
  405cc4:	2200      	movs	r2, #0
  405cc6:	4b24      	ldr	r3, [pc, #144]	; (405d58 <_dtoa_r+0xdb0>)
  405cc8:	4638      	mov	r0, r7
  405cca:	4641      	mov	r1, r8
  405ccc:	f001 fe32 	bl	407934 <__aeabi_dmul>
  405cd0:	4607      	mov	r7, r0
  405cd2:	4688      	mov	r8, r1
  405cd4:	f10a 0001 	add.w	r0, sl, #1
  405cd8:	f001 fdc6 	bl	407868 <__aeabi_i2d>
  405cdc:	463a      	mov	r2, r7
  405cde:	4643      	mov	r3, r8
  405ce0:	f001 fe28 	bl	407934 <__aeabi_dmul>
  405ce4:	2200      	movs	r2, #0
  405ce6:	4b17      	ldr	r3, [pc, #92]	; (405d44 <_dtoa_r+0xd9c>)
  405ce8:	f001 fc72 	bl	4075d0 <__adddf3>
  405cec:	9a02      	ldr	r2, [sp, #8]
  405cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405cf0:	9312      	str	r3, [sp, #72]	; 0x48
  405cf2:	3a01      	subs	r2, #1
  405cf4:	4605      	mov	r5, r0
  405cf6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405cfa:	9215      	str	r2, [sp, #84]	; 0x54
  405cfc:	e56a      	b.n	4057d4 <_dtoa_r+0x82c>
  405cfe:	2239      	movs	r2, #57	; 0x39
  405d00:	46b3      	mov	fp, r6
  405d02:	703a      	strb	r2, [r7, #0]
  405d04:	9e06      	ldr	r6, [sp, #24]
  405d06:	1c7d      	adds	r5, r7, #1
  405d08:	e4c0      	b.n	40568c <_dtoa_r+0x6e4>
  405d0a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  405d0e:	2000      	movs	r0, #0
  405d10:	4910      	ldr	r1, [pc, #64]	; (405d54 <_dtoa_r+0xdac>)
  405d12:	f001 fc5b 	bl	4075cc <__aeabi_dsub>
  405d16:	4632      	mov	r2, r6
  405d18:	463b      	mov	r3, r7
  405d1a:	f002 f89b 	bl	407e54 <__aeabi_dcmpgt>
  405d1e:	b908      	cbnz	r0, 405d24 <_dtoa_r+0xd7c>
  405d20:	e6ae      	b.n	405a80 <_dtoa_r+0xad8>
  405d22:	4615      	mov	r5, r2
  405d24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405d28:	2b30      	cmp	r3, #48	; 0x30
  405d2a:	f105 32ff 	add.w	r2, r5, #4294967295
  405d2e:	d0f8      	beq.n	405d22 <_dtoa_r+0xd7a>
  405d30:	e5d7      	b.n	4058e2 <_dtoa_r+0x93a>
  405d32:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  405d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405d38:	9302      	str	r3, [sp, #8]
  405d3a:	f7ff bae8 	b.w	40530e <_dtoa_r+0x366>
  405d3e:	970c      	str	r7, [sp, #48]	; 0x30
  405d40:	f7ff bba5 	b.w	40548e <_dtoa_r+0x4e6>
  405d44:	401c0000 	.word	0x401c0000
  405d48:	40140000 	.word	0x40140000
  405d4c:	00408928 	.word	0x00408928
  405d50:	00408900 	.word	0x00408900
  405d54:	3fe00000 	.word	0x3fe00000
  405d58:	40240000 	.word	0x40240000
  405d5c:	2b39      	cmp	r3, #57	; 0x39
  405d5e:	f8cd b018 	str.w	fp, [sp, #24]
  405d62:	46d0      	mov	r8, sl
  405d64:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405d68:	469a      	mov	sl, r3
  405d6a:	d0c8      	beq.n	405cfe <_dtoa_r+0xd56>
  405d6c:	f1bb 0f00 	cmp.w	fp, #0
  405d70:	f73f aebf 	bgt.w	405af2 <_dtoa_r+0xb4a>
  405d74:	e6bf      	b.n	405af6 <_dtoa_r+0xb4e>
  405d76:	f47f aebe 	bne.w	405af6 <_dtoa_r+0xb4e>
  405d7a:	f01a 0f01 	tst.w	sl, #1
  405d7e:	f43f aeba 	beq.w	405af6 <_dtoa_r+0xb4e>
  405d82:	e6b2      	b.n	405aea <_dtoa_r+0xb42>
  405d84:	f04f 0800 	mov.w	r8, #0
  405d88:	4646      	mov	r6, r8
  405d8a:	e5e9      	b.n	405960 <_dtoa_r+0x9b8>
  405d8c:	4631      	mov	r1, r6
  405d8e:	2300      	movs	r3, #0
  405d90:	220a      	movs	r2, #10
  405d92:	4620      	mov	r0, r4
  405d94:	f000 fc3a 	bl	40660c <__multadd>
  405d98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405d9a:	2b00      	cmp	r3, #0
  405d9c:	4606      	mov	r6, r0
  405d9e:	dd0a      	ble.n	405db6 <_dtoa_r+0xe0e>
  405da0:	930a      	str	r3, [sp, #40]	; 0x28
  405da2:	f7ff bbaa 	b.w	4054fa <_dtoa_r+0x552>
  405da6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405da8:	2b02      	cmp	r3, #2
  405daa:	dc23      	bgt.n	405df4 <_dtoa_r+0xe4c>
  405dac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405dae:	e43b      	b.n	405628 <_dtoa_r+0x680>
  405db0:	f04f 0a02 	mov.w	sl, #2
  405db4:	e4ed      	b.n	405792 <_dtoa_r+0x7ea>
  405db6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405db8:	2b02      	cmp	r3, #2
  405dba:	dc1b      	bgt.n	405df4 <_dtoa_r+0xe4c>
  405dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405dbe:	e7ef      	b.n	405da0 <_dtoa_r+0xdf8>
  405dc0:	2500      	movs	r5, #0
  405dc2:	6465      	str	r5, [r4, #68]	; 0x44
  405dc4:	4629      	mov	r1, r5
  405dc6:	4620      	mov	r0, r4
  405dc8:	f000 fbf0 	bl	4065ac <_Balloc>
  405dcc:	f04f 33ff 	mov.w	r3, #4294967295
  405dd0:	930a      	str	r3, [sp, #40]	; 0x28
  405dd2:	930f      	str	r3, [sp, #60]	; 0x3c
  405dd4:	2301      	movs	r3, #1
  405dd6:	9004      	str	r0, [sp, #16]
  405dd8:	9525      	str	r5, [sp, #148]	; 0x94
  405dda:	6420      	str	r0, [r4, #64]	; 0x40
  405ddc:	930b      	str	r3, [sp, #44]	; 0x2c
  405dde:	f7ff b9dd 	b.w	40519c <_dtoa_r+0x1f4>
  405de2:	2501      	movs	r5, #1
  405de4:	f7ff b9a5 	b.w	405132 <_dtoa_r+0x18a>
  405de8:	f43f ab69 	beq.w	4054be <_dtoa_r+0x516>
  405dec:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405df0:	f7ff bbf9 	b.w	4055e6 <_dtoa_r+0x63e>
  405df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405df6:	930a      	str	r3, [sp, #40]	; 0x28
  405df8:	e5e5      	b.n	4059c6 <_dtoa_r+0xa1e>
  405dfa:	bf00      	nop

00405dfc <__libc_fini_array>:
  405dfc:	b538      	push	{r3, r4, r5, lr}
  405dfe:	4c0a      	ldr	r4, [pc, #40]	; (405e28 <__libc_fini_array+0x2c>)
  405e00:	4d0a      	ldr	r5, [pc, #40]	; (405e2c <__libc_fini_array+0x30>)
  405e02:	1b64      	subs	r4, r4, r5
  405e04:	10a4      	asrs	r4, r4, #2
  405e06:	d00a      	beq.n	405e1e <__libc_fini_array+0x22>
  405e08:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405e0c:	3b01      	subs	r3, #1
  405e0e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405e12:	3c01      	subs	r4, #1
  405e14:	f855 3904 	ldr.w	r3, [r5], #-4
  405e18:	4798      	blx	r3
  405e1a:	2c00      	cmp	r4, #0
  405e1c:	d1f9      	bne.n	405e12 <__libc_fini_array+0x16>
  405e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405e22:	f002 be7f 	b.w	408b24 <_fini>
  405e26:	bf00      	nop
  405e28:	00408b34 	.word	0x00408b34
  405e2c:	00408b30 	.word	0x00408b30

00405e30 <_localeconv_r>:
  405e30:	4a04      	ldr	r2, [pc, #16]	; (405e44 <_localeconv_r+0x14>)
  405e32:	4b05      	ldr	r3, [pc, #20]	; (405e48 <_localeconv_r+0x18>)
  405e34:	6812      	ldr	r2, [r2, #0]
  405e36:	6b50      	ldr	r0, [r2, #52]	; 0x34
  405e38:	2800      	cmp	r0, #0
  405e3a:	bf08      	it	eq
  405e3c:	4618      	moveq	r0, r3
  405e3e:	30f0      	adds	r0, #240	; 0xf0
  405e40:	4770      	bx	lr
  405e42:	bf00      	nop
  405e44:	20000008 	.word	0x20000008
  405e48:	2000084c 	.word	0x2000084c

00405e4c <__retarget_lock_acquire_recursive>:
  405e4c:	4770      	bx	lr
  405e4e:	bf00      	nop

00405e50 <__retarget_lock_release_recursive>:
  405e50:	4770      	bx	lr
  405e52:	bf00      	nop

00405e54 <_malloc_r>:
  405e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e58:	f101 060b 	add.w	r6, r1, #11
  405e5c:	2e16      	cmp	r6, #22
  405e5e:	b083      	sub	sp, #12
  405e60:	4605      	mov	r5, r0
  405e62:	f240 809e 	bls.w	405fa2 <_malloc_r+0x14e>
  405e66:	f036 0607 	bics.w	r6, r6, #7
  405e6a:	f100 80bd 	bmi.w	405fe8 <_malloc_r+0x194>
  405e6e:	42b1      	cmp	r1, r6
  405e70:	f200 80ba 	bhi.w	405fe8 <_malloc_r+0x194>
  405e74:	f000 fb8e 	bl	406594 <__malloc_lock>
  405e78:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405e7c:	f0c0 8293 	bcc.w	4063a6 <_malloc_r+0x552>
  405e80:	0a73      	lsrs	r3, r6, #9
  405e82:	f000 80b8 	beq.w	405ff6 <_malloc_r+0x1a2>
  405e86:	2b04      	cmp	r3, #4
  405e88:	f200 8179 	bhi.w	40617e <_malloc_r+0x32a>
  405e8c:	09b3      	lsrs	r3, r6, #6
  405e8e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405e92:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405e96:	00c3      	lsls	r3, r0, #3
  405e98:	4fbf      	ldr	r7, [pc, #764]	; (406198 <_malloc_r+0x344>)
  405e9a:	443b      	add	r3, r7
  405e9c:	f1a3 0108 	sub.w	r1, r3, #8
  405ea0:	685c      	ldr	r4, [r3, #4]
  405ea2:	42a1      	cmp	r1, r4
  405ea4:	d106      	bne.n	405eb4 <_malloc_r+0x60>
  405ea6:	e00c      	b.n	405ec2 <_malloc_r+0x6e>
  405ea8:	2a00      	cmp	r2, #0
  405eaa:	f280 80aa 	bge.w	406002 <_malloc_r+0x1ae>
  405eae:	68e4      	ldr	r4, [r4, #12]
  405eb0:	42a1      	cmp	r1, r4
  405eb2:	d006      	beq.n	405ec2 <_malloc_r+0x6e>
  405eb4:	6863      	ldr	r3, [r4, #4]
  405eb6:	f023 0303 	bic.w	r3, r3, #3
  405eba:	1b9a      	subs	r2, r3, r6
  405ebc:	2a0f      	cmp	r2, #15
  405ebe:	ddf3      	ble.n	405ea8 <_malloc_r+0x54>
  405ec0:	4670      	mov	r0, lr
  405ec2:	693c      	ldr	r4, [r7, #16]
  405ec4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4061ac <_malloc_r+0x358>
  405ec8:	4574      	cmp	r4, lr
  405eca:	f000 81ab 	beq.w	406224 <_malloc_r+0x3d0>
  405ece:	6863      	ldr	r3, [r4, #4]
  405ed0:	f023 0303 	bic.w	r3, r3, #3
  405ed4:	1b9a      	subs	r2, r3, r6
  405ed6:	2a0f      	cmp	r2, #15
  405ed8:	f300 8190 	bgt.w	4061fc <_malloc_r+0x3a8>
  405edc:	2a00      	cmp	r2, #0
  405ede:	f8c7 e014 	str.w	lr, [r7, #20]
  405ee2:	f8c7 e010 	str.w	lr, [r7, #16]
  405ee6:	f280 809d 	bge.w	406024 <_malloc_r+0x1d0>
  405eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405eee:	f080 8161 	bcs.w	4061b4 <_malloc_r+0x360>
  405ef2:	08db      	lsrs	r3, r3, #3
  405ef4:	f103 0c01 	add.w	ip, r3, #1
  405ef8:	1099      	asrs	r1, r3, #2
  405efa:	687a      	ldr	r2, [r7, #4]
  405efc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405f00:	f8c4 8008 	str.w	r8, [r4, #8]
  405f04:	2301      	movs	r3, #1
  405f06:	408b      	lsls	r3, r1
  405f08:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405f0c:	4313      	orrs	r3, r2
  405f0e:	3908      	subs	r1, #8
  405f10:	60e1      	str	r1, [r4, #12]
  405f12:	607b      	str	r3, [r7, #4]
  405f14:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405f18:	f8c8 400c 	str.w	r4, [r8, #12]
  405f1c:	1082      	asrs	r2, r0, #2
  405f1e:	2401      	movs	r4, #1
  405f20:	4094      	lsls	r4, r2
  405f22:	429c      	cmp	r4, r3
  405f24:	f200 808b 	bhi.w	40603e <_malloc_r+0x1ea>
  405f28:	421c      	tst	r4, r3
  405f2a:	d106      	bne.n	405f3a <_malloc_r+0xe6>
  405f2c:	f020 0003 	bic.w	r0, r0, #3
  405f30:	0064      	lsls	r4, r4, #1
  405f32:	421c      	tst	r4, r3
  405f34:	f100 0004 	add.w	r0, r0, #4
  405f38:	d0fa      	beq.n	405f30 <_malloc_r+0xdc>
  405f3a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405f3e:	46cc      	mov	ip, r9
  405f40:	4680      	mov	r8, r0
  405f42:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405f46:	459c      	cmp	ip, r3
  405f48:	d107      	bne.n	405f5a <_malloc_r+0x106>
  405f4a:	e16d      	b.n	406228 <_malloc_r+0x3d4>
  405f4c:	2a00      	cmp	r2, #0
  405f4e:	f280 817b 	bge.w	406248 <_malloc_r+0x3f4>
  405f52:	68db      	ldr	r3, [r3, #12]
  405f54:	459c      	cmp	ip, r3
  405f56:	f000 8167 	beq.w	406228 <_malloc_r+0x3d4>
  405f5a:	6859      	ldr	r1, [r3, #4]
  405f5c:	f021 0103 	bic.w	r1, r1, #3
  405f60:	1b8a      	subs	r2, r1, r6
  405f62:	2a0f      	cmp	r2, #15
  405f64:	ddf2      	ble.n	405f4c <_malloc_r+0xf8>
  405f66:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405f6a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405f6e:	9300      	str	r3, [sp, #0]
  405f70:	199c      	adds	r4, r3, r6
  405f72:	4628      	mov	r0, r5
  405f74:	f046 0601 	orr.w	r6, r6, #1
  405f78:	f042 0501 	orr.w	r5, r2, #1
  405f7c:	605e      	str	r6, [r3, #4]
  405f7e:	f8c8 c00c 	str.w	ip, [r8, #12]
  405f82:	f8cc 8008 	str.w	r8, [ip, #8]
  405f86:	617c      	str	r4, [r7, #20]
  405f88:	613c      	str	r4, [r7, #16]
  405f8a:	f8c4 e00c 	str.w	lr, [r4, #12]
  405f8e:	f8c4 e008 	str.w	lr, [r4, #8]
  405f92:	6065      	str	r5, [r4, #4]
  405f94:	505a      	str	r2, [r3, r1]
  405f96:	f000 fb03 	bl	4065a0 <__malloc_unlock>
  405f9a:	9b00      	ldr	r3, [sp, #0]
  405f9c:	f103 0408 	add.w	r4, r3, #8
  405fa0:	e01e      	b.n	405fe0 <_malloc_r+0x18c>
  405fa2:	2910      	cmp	r1, #16
  405fa4:	d820      	bhi.n	405fe8 <_malloc_r+0x194>
  405fa6:	f000 faf5 	bl	406594 <__malloc_lock>
  405faa:	2610      	movs	r6, #16
  405fac:	2318      	movs	r3, #24
  405fae:	2002      	movs	r0, #2
  405fb0:	4f79      	ldr	r7, [pc, #484]	; (406198 <_malloc_r+0x344>)
  405fb2:	443b      	add	r3, r7
  405fb4:	f1a3 0208 	sub.w	r2, r3, #8
  405fb8:	685c      	ldr	r4, [r3, #4]
  405fba:	4294      	cmp	r4, r2
  405fbc:	f000 813d 	beq.w	40623a <_malloc_r+0x3e6>
  405fc0:	6863      	ldr	r3, [r4, #4]
  405fc2:	68e1      	ldr	r1, [r4, #12]
  405fc4:	68a6      	ldr	r6, [r4, #8]
  405fc6:	f023 0303 	bic.w	r3, r3, #3
  405fca:	4423      	add	r3, r4
  405fcc:	4628      	mov	r0, r5
  405fce:	685a      	ldr	r2, [r3, #4]
  405fd0:	60f1      	str	r1, [r6, #12]
  405fd2:	f042 0201 	orr.w	r2, r2, #1
  405fd6:	608e      	str	r6, [r1, #8]
  405fd8:	605a      	str	r2, [r3, #4]
  405fda:	f000 fae1 	bl	4065a0 <__malloc_unlock>
  405fde:	3408      	adds	r4, #8
  405fe0:	4620      	mov	r0, r4
  405fe2:	b003      	add	sp, #12
  405fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fe8:	2400      	movs	r4, #0
  405fea:	230c      	movs	r3, #12
  405fec:	4620      	mov	r0, r4
  405fee:	602b      	str	r3, [r5, #0]
  405ff0:	b003      	add	sp, #12
  405ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ff6:	2040      	movs	r0, #64	; 0x40
  405ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
  405ffc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406000:	e74a      	b.n	405e98 <_malloc_r+0x44>
  406002:	4423      	add	r3, r4
  406004:	68e1      	ldr	r1, [r4, #12]
  406006:	685a      	ldr	r2, [r3, #4]
  406008:	68a6      	ldr	r6, [r4, #8]
  40600a:	f042 0201 	orr.w	r2, r2, #1
  40600e:	60f1      	str	r1, [r6, #12]
  406010:	4628      	mov	r0, r5
  406012:	608e      	str	r6, [r1, #8]
  406014:	605a      	str	r2, [r3, #4]
  406016:	f000 fac3 	bl	4065a0 <__malloc_unlock>
  40601a:	3408      	adds	r4, #8
  40601c:	4620      	mov	r0, r4
  40601e:	b003      	add	sp, #12
  406020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406024:	4423      	add	r3, r4
  406026:	4628      	mov	r0, r5
  406028:	685a      	ldr	r2, [r3, #4]
  40602a:	f042 0201 	orr.w	r2, r2, #1
  40602e:	605a      	str	r2, [r3, #4]
  406030:	f000 fab6 	bl	4065a0 <__malloc_unlock>
  406034:	3408      	adds	r4, #8
  406036:	4620      	mov	r0, r4
  406038:	b003      	add	sp, #12
  40603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40603e:	68bc      	ldr	r4, [r7, #8]
  406040:	6863      	ldr	r3, [r4, #4]
  406042:	f023 0803 	bic.w	r8, r3, #3
  406046:	45b0      	cmp	r8, r6
  406048:	d304      	bcc.n	406054 <_malloc_r+0x200>
  40604a:	eba8 0306 	sub.w	r3, r8, r6
  40604e:	2b0f      	cmp	r3, #15
  406050:	f300 8085 	bgt.w	40615e <_malloc_r+0x30a>
  406054:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4061b0 <_malloc_r+0x35c>
  406058:	4b50      	ldr	r3, [pc, #320]	; (40619c <_malloc_r+0x348>)
  40605a:	f8d9 2000 	ldr.w	r2, [r9]
  40605e:	681b      	ldr	r3, [r3, #0]
  406060:	3201      	adds	r2, #1
  406062:	4433      	add	r3, r6
  406064:	eb04 0a08 	add.w	sl, r4, r8
  406068:	f000 8155 	beq.w	406316 <_malloc_r+0x4c2>
  40606c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406070:	330f      	adds	r3, #15
  406072:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406076:	f02b 0b0f 	bic.w	fp, fp, #15
  40607a:	4659      	mov	r1, fp
  40607c:	4628      	mov	r0, r5
  40607e:	f000 fd8f 	bl	406ba0 <_sbrk_r>
  406082:	1c41      	adds	r1, r0, #1
  406084:	4602      	mov	r2, r0
  406086:	f000 80fc 	beq.w	406282 <_malloc_r+0x42e>
  40608a:	4582      	cmp	sl, r0
  40608c:	f200 80f7 	bhi.w	40627e <_malloc_r+0x42a>
  406090:	4b43      	ldr	r3, [pc, #268]	; (4061a0 <_malloc_r+0x34c>)
  406092:	6819      	ldr	r1, [r3, #0]
  406094:	4459      	add	r1, fp
  406096:	6019      	str	r1, [r3, #0]
  406098:	f000 814d 	beq.w	406336 <_malloc_r+0x4e2>
  40609c:	f8d9 0000 	ldr.w	r0, [r9]
  4060a0:	3001      	adds	r0, #1
  4060a2:	bf1b      	ittet	ne
  4060a4:	eba2 0a0a 	subne.w	sl, r2, sl
  4060a8:	4451      	addne	r1, sl
  4060aa:	f8c9 2000 	streq.w	r2, [r9]
  4060ae:	6019      	strne	r1, [r3, #0]
  4060b0:	f012 0107 	ands.w	r1, r2, #7
  4060b4:	f000 8115 	beq.w	4062e2 <_malloc_r+0x48e>
  4060b8:	f1c1 0008 	rsb	r0, r1, #8
  4060bc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4060c0:	4402      	add	r2, r0
  4060c2:	3108      	adds	r1, #8
  4060c4:	eb02 090b 	add.w	r9, r2, fp
  4060c8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4060cc:	eba1 0909 	sub.w	r9, r1, r9
  4060d0:	4649      	mov	r1, r9
  4060d2:	4628      	mov	r0, r5
  4060d4:	9301      	str	r3, [sp, #4]
  4060d6:	9200      	str	r2, [sp, #0]
  4060d8:	f000 fd62 	bl	406ba0 <_sbrk_r>
  4060dc:	1c43      	adds	r3, r0, #1
  4060de:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4060e2:	f000 8143 	beq.w	40636c <_malloc_r+0x518>
  4060e6:	1a80      	subs	r0, r0, r2
  4060e8:	4448      	add	r0, r9
  4060ea:	f040 0001 	orr.w	r0, r0, #1
  4060ee:	6819      	ldr	r1, [r3, #0]
  4060f0:	60ba      	str	r2, [r7, #8]
  4060f2:	4449      	add	r1, r9
  4060f4:	42bc      	cmp	r4, r7
  4060f6:	6050      	str	r0, [r2, #4]
  4060f8:	6019      	str	r1, [r3, #0]
  4060fa:	d017      	beq.n	40612c <_malloc_r+0x2d8>
  4060fc:	f1b8 0f0f 	cmp.w	r8, #15
  406100:	f240 80fb 	bls.w	4062fa <_malloc_r+0x4a6>
  406104:	6860      	ldr	r0, [r4, #4]
  406106:	f1a8 020c 	sub.w	r2, r8, #12
  40610a:	f022 0207 	bic.w	r2, r2, #7
  40610e:	eb04 0e02 	add.w	lr, r4, r2
  406112:	f000 0001 	and.w	r0, r0, #1
  406116:	f04f 0c05 	mov.w	ip, #5
  40611a:	4310      	orrs	r0, r2
  40611c:	2a0f      	cmp	r2, #15
  40611e:	6060      	str	r0, [r4, #4]
  406120:	f8ce c004 	str.w	ip, [lr, #4]
  406124:	f8ce c008 	str.w	ip, [lr, #8]
  406128:	f200 8117 	bhi.w	40635a <_malloc_r+0x506>
  40612c:	4b1d      	ldr	r3, [pc, #116]	; (4061a4 <_malloc_r+0x350>)
  40612e:	68bc      	ldr	r4, [r7, #8]
  406130:	681a      	ldr	r2, [r3, #0]
  406132:	4291      	cmp	r1, r2
  406134:	bf88      	it	hi
  406136:	6019      	strhi	r1, [r3, #0]
  406138:	4b1b      	ldr	r3, [pc, #108]	; (4061a8 <_malloc_r+0x354>)
  40613a:	681a      	ldr	r2, [r3, #0]
  40613c:	4291      	cmp	r1, r2
  40613e:	6862      	ldr	r2, [r4, #4]
  406140:	bf88      	it	hi
  406142:	6019      	strhi	r1, [r3, #0]
  406144:	f022 0203 	bic.w	r2, r2, #3
  406148:	4296      	cmp	r6, r2
  40614a:	eba2 0306 	sub.w	r3, r2, r6
  40614e:	d801      	bhi.n	406154 <_malloc_r+0x300>
  406150:	2b0f      	cmp	r3, #15
  406152:	dc04      	bgt.n	40615e <_malloc_r+0x30a>
  406154:	4628      	mov	r0, r5
  406156:	f000 fa23 	bl	4065a0 <__malloc_unlock>
  40615a:	2400      	movs	r4, #0
  40615c:	e740      	b.n	405fe0 <_malloc_r+0x18c>
  40615e:	19a2      	adds	r2, r4, r6
  406160:	f043 0301 	orr.w	r3, r3, #1
  406164:	f046 0601 	orr.w	r6, r6, #1
  406168:	6066      	str	r6, [r4, #4]
  40616a:	4628      	mov	r0, r5
  40616c:	60ba      	str	r2, [r7, #8]
  40616e:	6053      	str	r3, [r2, #4]
  406170:	f000 fa16 	bl	4065a0 <__malloc_unlock>
  406174:	3408      	adds	r4, #8
  406176:	4620      	mov	r0, r4
  406178:	b003      	add	sp, #12
  40617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40617e:	2b14      	cmp	r3, #20
  406180:	d971      	bls.n	406266 <_malloc_r+0x412>
  406182:	2b54      	cmp	r3, #84	; 0x54
  406184:	f200 80a3 	bhi.w	4062ce <_malloc_r+0x47a>
  406188:	0b33      	lsrs	r3, r6, #12
  40618a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40618e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406192:	00c3      	lsls	r3, r0, #3
  406194:	e680      	b.n	405e98 <_malloc_r+0x44>
  406196:	bf00      	nop
  406198:	2000043c 	.word	0x2000043c
  40619c:	20000abc 	.word	0x20000abc
  4061a0:	20000a8c 	.word	0x20000a8c
  4061a4:	20000ab4 	.word	0x20000ab4
  4061a8:	20000ab8 	.word	0x20000ab8
  4061ac:	20000444 	.word	0x20000444
  4061b0:	20000844 	.word	0x20000844
  4061b4:	0a5a      	lsrs	r2, r3, #9
  4061b6:	2a04      	cmp	r2, #4
  4061b8:	d95b      	bls.n	406272 <_malloc_r+0x41e>
  4061ba:	2a14      	cmp	r2, #20
  4061bc:	f200 80ae 	bhi.w	40631c <_malloc_r+0x4c8>
  4061c0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4061c4:	00c9      	lsls	r1, r1, #3
  4061c6:	325b      	adds	r2, #91	; 0x5b
  4061c8:	eb07 0c01 	add.w	ip, r7, r1
  4061cc:	5879      	ldr	r1, [r7, r1]
  4061ce:	f1ac 0c08 	sub.w	ip, ip, #8
  4061d2:	458c      	cmp	ip, r1
  4061d4:	f000 8088 	beq.w	4062e8 <_malloc_r+0x494>
  4061d8:	684a      	ldr	r2, [r1, #4]
  4061da:	f022 0203 	bic.w	r2, r2, #3
  4061de:	4293      	cmp	r3, r2
  4061e0:	d273      	bcs.n	4062ca <_malloc_r+0x476>
  4061e2:	6889      	ldr	r1, [r1, #8]
  4061e4:	458c      	cmp	ip, r1
  4061e6:	d1f7      	bne.n	4061d8 <_malloc_r+0x384>
  4061e8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4061ec:	687b      	ldr	r3, [r7, #4]
  4061ee:	60e2      	str	r2, [r4, #12]
  4061f0:	f8c4 c008 	str.w	ip, [r4, #8]
  4061f4:	6094      	str	r4, [r2, #8]
  4061f6:	f8cc 400c 	str.w	r4, [ip, #12]
  4061fa:	e68f      	b.n	405f1c <_malloc_r+0xc8>
  4061fc:	19a1      	adds	r1, r4, r6
  4061fe:	f046 0c01 	orr.w	ip, r6, #1
  406202:	f042 0601 	orr.w	r6, r2, #1
  406206:	f8c4 c004 	str.w	ip, [r4, #4]
  40620a:	4628      	mov	r0, r5
  40620c:	6179      	str	r1, [r7, #20]
  40620e:	6139      	str	r1, [r7, #16]
  406210:	f8c1 e00c 	str.w	lr, [r1, #12]
  406214:	f8c1 e008 	str.w	lr, [r1, #8]
  406218:	604e      	str	r6, [r1, #4]
  40621a:	50e2      	str	r2, [r4, r3]
  40621c:	f000 f9c0 	bl	4065a0 <__malloc_unlock>
  406220:	3408      	adds	r4, #8
  406222:	e6dd      	b.n	405fe0 <_malloc_r+0x18c>
  406224:	687b      	ldr	r3, [r7, #4]
  406226:	e679      	b.n	405f1c <_malloc_r+0xc8>
  406228:	f108 0801 	add.w	r8, r8, #1
  40622c:	f018 0f03 	tst.w	r8, #3
  406230:	f10c 0c08 	add.w	ip, ip, #8
  406234:	f47f ae85 	bne.w	405f42 <_malloc_r+0xee>
  406238:	e02d      	b.n	406296 <_malloc_r+0x442>
  40623a:	68dc      	ldr	r4, [r3, #12]
  40623c:	42a3      	cmp	r3, r4
  40623e:	bf08      	it	eq
  406240:	3002      	addeq	r0, #2
  406242:	f43f ae3e 	beq.w	405ec2 <_malloc_r+0x6e>
  406246:	e6bb      	b.n	405fc0 <_malloc_r+0x16c>
  406248:	4419      	add	r1, r3
  40624a:	461c      	mov	r4, r3
  40624c:	684a      	ldr	r2, [r1, #4]
  40624e:	68db      	ldr	r3, [r3, #12]
  406250:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406254:	f042 0201 	orr.w	r2, r2, #1
  406258:	604a      	str	r2, [r1, #4]
  40625a:	4628      	mov	r0, r5
  40625c:	60f3      	str	r3, [r6, #12]
  40625e:	609e      	str	r6, [r3, #8]
  406260:	f000 f99e 	bl	4065a0 <__malloc_unlock>
  406264:	e6bc      	b.n	405fe0 <_malloc_r+0x18c>
  406266:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40626a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40626e:	00c3      	lsls	r3, r0, #3
  406270:	e612      	b.n	405e98 <_malloc_r+0x44>
  406272:	099a      	lsrs	r2, r3, #6
  406274:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406278:	00c9      	lsls	r1, r1, #3
  40627a:	3238      	adds	r2, #56	; 0x38
  40627c:	e7a4      	b.n	4061c8 <_malloc_r+0x374>
  40627e:	42bc      	cmp	r4, r7
  406280:	d054      	beq.n	40632c <_malloc_r+0x4d8>
  406282:	68bc      	ldr	r4, [r7, #8]
  406284:	6862      	ldr	r2, [r4, #4]
  406286:	f022 0203 	bic.w	r2, r2, #3
  40628a:	e75d      	b.n	406148 <_malloc_r+0x2f4>
  40628c:	f859 3908 	ldr.w	r3, [r9], #-8
  406290:	4599      	cmp	r9, r3
  406292:	f040 8086 	bne.w	4063a2 <_malloc_r+0x54e>
  406296:	f010 0f03 	tst.w	r0, #3
  40629a:	f100 30ff 	add.w	r0, r0, #4294967295
  40629e:	d1f5      	bne.n	40628c <_malloc_r+0x438>
  4062a0:	687b      	ldr	r3, [r7, #4]
  4062a2:	ea23 0304 	bic.w	r3, r3, r4
  4062a6:	607b      	str	r3, [r7, #4]
  4062a8:	0064      	lsls	r4, r4, #1
  4062aa:	429c      	cmp	r4, r3
  4062ac:	f63f aec7 	bhi.w	40603e <_malloc_r+0x1ea>
  4062b0:	2c00      	cmp	r4, #0
  4062b2:	f43f aec4 	beq.w	40603e <_malloc_r+0x1ea>
  4062b6:	421c      	tst	r4, r3
  4062b8:	4640      	mov	r0, r8
  4062ba:	f47f ae3e 	bne.w	405f3a <_malloc_r+0xe6>
  4062be:	0064      	lsls	r4, r4, #1
  4062c0:	421c      	tst	r4, r3
  4062c2:	f100 0004 	add.w	r0, r0, #4
  4062c6:	d0fa      	beq.n	4062be <_malloc_r+0x46a>
  4062c8:	e637      	b.n	405f3a <_malloc_r+0xe6>
  4062ca:	468c      	mov	ip, r1
  4062cc:	e78c      	b.n	4061e8 <_malloc_r+0x394>
  4062ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4062d2:	d815      	bhi.n	406300 <_malloc_r+0x4ac>
  4062d4:	0bf3      	lsrs	r3, r6, #15
  4062d6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4062da:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4062de:	00c3      	lsls	r3, r0, #3
  4062e0:	e5da      	b.n	405e98 <_malloc_r+0x44>
  4062e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4062e6:	e6ed      	b.n	4060c4 <_malloc_r+0x270>
  4062e8:	687b      	ldr	r3, [r7, #4]
  4062ea:	1092      	asrs	r2, r2, #2
  4062ec:	2101      	movs	r1, #1
  4062ee:	fa01 f202 	lsl.w	r2, r1, r2
  4062f2:	4313      	orrs	r3, r2
  4062f4:	607b      	str	r3, [r7, #4]
  4062f6:	4662      	mov	r2, ip
  4062f8:	e779      	b.n	4061ee <_malloc_r+0x39a>
  4062fa:	2301      	movs	r3, #1
  4062fc:	6053      	str	r3, [r2, #4]
  4062fe:	e729      	b.n	406154 <_malloc_r+0x300>
  406300:	f240 5254 	movw	r2, #1364	; 0x554
  406304:	4293      	cmp	r3, r2
  406306:	d822      	bhi.n	40634e <_malloc_r+0x4fa>
  406308:	0cb3      	lsrs	r3, r6, #18
  40630a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40630e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406312:	00c3      	lsls	r3, r0, #3
  406314:	e5c0      	b.n	405e98 <_malloc_r+0x44>
  406316:	f103 0b10 	add.w	fp, r3, #16
  40631a:	e6ae      	b.n	40607a <_malloc_r+0x226>
  40631c:	2a54      	cmp	r2, #84	; 0x54
  40631e:	d829      	bhi.n	406374 <_malloc_r+0x520>
  406320:	0b1a      	lsrs	r2, r3, #12
  406322:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406326:	00c9      	lsls	r1, r1, #3
  406328:	326e      	adds	r2, #110	; 0x6e
  40632a:	e74d      	b.n	4061c8 <_malloc_r+0x374>
  40632c:	4b20      	ldr	r3, [pc, #128]	; (4063b0 <_malloc_r+0x55c>)
  40632e:	6819      	ldr	r1, [r3, #0]
  406330:	4459      	add	r1, fp
  406332:	6019      	str	r1, [r3, #0]
  406334:	e6b2      	b.n	40609c <_malloc_r+0x248>
  406336:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40633a:	2800      	cmp	r0, #0
  40633c:	f47f aeae 	bne.w	40609c <_malloc_r+0x248>
  406340:	eb08 030b 	add.w	r3, r8, fp
  406344:	68ba      	ldr	r2, [r7, #8]
  406346:	f043 0301 	orr.w	r3, r3, #1
  40634a:	6053      	str	r3, [r2, #4]
  40634c:	e6ee      	b.n	40612c <_malloc_r+0x2d8>
  40634e:	207f      	movs	r0, #127	; 0x7f
  406350:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406354:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406358:	e59e      	b.n	405e98 <_malloc_r+0x44>
  40635a:	f104 0108 	add.w	r1, r4, #8
  40635e:	4628      	mov	r0, r5
  406360:	9300      	str	r3, [sp, #0]
  406362:	f000 fe1b 	bl	406f9c <_free_r>
  406366:	9b00      	ldr	r3, [sp, #0]
  406368:	6819      	ldr	r1, [r3, #0]
  40636a:	e6df      	b.n	40612c <_malloc_r+0x2d8>
  40636c:	2001      	movs	r0, #1
  40636e:	f04f 0900 	mov.w	r9, #0
  406372:	e6bc      	b.n	4060ee <_malloc_r+0x29a>
  406374:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406378:	d805      	bhi.n	406386 <_malloc_r+0x532>
  40637a:	0bda      	lsrs	r2, r3, #15
  40637c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406380:	00c9      	lsls	r1, r1, #3
  406382:	3277      	adds	r2, #119	; 0x77
  406384:	e720      	b.n	4061c8 <_malloc_r+0x374>
  406386:	f240 5154 	movw	r1, #1364	; 0x554
  40638a:	428a      	cmp	r2, r1
  40638c:	d805      	bhi.n	40639a <_malloc_r+0x546>
  40638e:	0c9a      	lsrs	r2, r3, #18
  406390:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406394:	00c9      	lsls	r1, r1, #3
  406396:	327c      	adds	r2, #124	; 0x7c
  406398:	e716      	b.n	4061c8 <_malloc_r+0x374>
  40639a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40639e:	227e      	movs	r2, #126	; 0x7e
  4063a0:	e712      	b.n	4061c8 <_malloc_r+0x374>
  4063a2:	687b      	ldr	r3, [r7, #4]
  4063a4:	e780      	b.n	4062a8 <_malloc_r+0x454>
  4063a6:	08f0      	lsrs	r0, r6, #3
  4063a8:	f106 0308 	add.w	r3, r6, #8
  4063ac:	e600      	b.n	405fb0 <_malloc_r+0x15c>
  4063ae:	bf00      	nop
  4063b0:	20000a8c 	.word	0x20000a8c
	...

004063c0 <memchr>:
  4063c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4063c4:	2a10      	cmp	r2, #16
  4063c6:	db2b      	blt.n	406420 <memchr+0x60>
  4063c8:	f010 0f07 	tst.w	r0, #7
  4063cc:	d008      	beq.n	4063e0 <memchr+0x20>
  4063ce:	f810 3b01 	ldrb.w	r3, [r0], #1
  4063d2:	3a01      	subs	r2, #1
  4063d4:	428b      	cmp	r3, r1
  4063d6:	d02d      	beq.n	406434 <memchr+0x74>
  4063d8:	f010 0f07 	tst.w	r0, #7
  4063dc:	b342      	cbz	r2, 406430 <memchr+0x70>
  4063de:	d1f6      	bne.n	4063ce <memchr+0xe>
  4063e0:	b4f0      	push	{r4, r5, r6, r7}
  4063e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4063e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4063ea:	f022 0407 	bic.w	r4, r2, #7
  4063ee:	f07f 0700 	mvns.w	r7, #0
  4063f2:	2300      	movs	r3, #0
  4063f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4063f8:	3c08      	subs	r4, #8
  4063fa:	ea85 0501 	eor.w	r5, r5, r1
  4063fe:	ea86 0601 	eor.w	r6, r6, r1
  406402:	fa85 f547 	uadd8	r5, r5, r7
  406406:	faa3 f587 	sel	r5, r3, r7
  40640a:	fa86 f647 	uadd8	r6, r6, r7
  40640e:	faa5 f687 	sel	r6, r5, r7
  406412:	b98e      	cbnz	r6, 406438 <memchr+0x78>
  406414:	d1ee      	bne.n	4063f4 <memchr+0x34>
  406416:	bcf0      	pop	{r4, r5, r6, r7}
  406418:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40641c:	f002 0207 	and.w	r2, r2, #7
  406420:	b132      	cbz	r2, 406430 <memchr+0x70>
  406422:	f810 3b01 	ldrb.w	r3, [r0], #1
  406426:	3a01      	subs	r2, #1
  406428:	ea83 0301 	eor.w	r3, r3, r1
  40642c:	b113      	cbz	r3, 406434 <memchr+0x74>
  40642e:	d1f8      	bne.n	406422 <memchr+0x62>
  406430:	2000      	movs	r0, #0
  406432:	4770      	bx	lr
  406434:	3801      	subs	r0, #1
  406436:	4770      	bx	lr
  406438:	2d00      	cmp	r5, #0
  40643a:	bf06      	itte	eq
  40643c:	4635      	moveq	r5, r6
  40643e:	3803      	subeq	r0, #3
  406440:	3807      	subne	r0, #7
  406442:	f015 0f01 	tst.w	r5, #1
  406446:	d107      	bne.n	406458 <memchr+0x98>
  406448:	3001      	adds	r0, #1
  40644a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40644e:	bf02      	ittt	eq
  406450:	3001      	addeq	r0, #1
  406452:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406456:	3001      	addeq	r0, #1
  406458:	bcf0      	pop	{r4, r5, r6, r7}
  40645a:	3801      	subs	r0, #1
  40645c:	4770      	bx	lr
  40645e:	bf00      	nop

00406460 <memcpy>:
  406460:	4684      	mov	ip, r0
  406462:	ea41 0300 	orr.w	r3, r1, r0
  406466:	f013 0303 	ands.w	r3, r3, #3
  40646a:	d16d      	bne.n	406548 <memcpy+0xe8>
  40646c:	3a40      	subs	r2, #64	; 0x40
  40646e:	d341      	bcc.n	4064f4 <memcpy+0x94>
  406470:	f851 3b04 	ldr.w	r3, [r1], #4
  406474:	f840 3b04 	str.w	r3, [r0], #4
  406478:	f851 3b04 	ldr.w	r3, [r1], #4
  40647c:	f840 3b04 	str.w	r3, [r0], #4
  406480:	f851 3b04 	ldr.w	r3, [r1], #4
  406484:	f840 3b04 	str.w	r3, [r0], #4
  406488:	f851 3b04 	ldr.w	r3, [r1], #4
  40648c:	f840 3b04 	str.w	r3, [r0], #4
  406490:	f851 3b04 	ldr.w	r3, [r1], #4
  406494:	f840 3b04 	str.w	r3, [r0], #4
  406498:	f851 3b04 	ldr.w	r3, [r1], #4
  40649c:	f840 3b04 	str.w	r3, [r0], #4
  4064a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4064a4:	f840 3b04 	str.w	r3, [r0], #4
  4064a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4064ac:	f840 3b04 	str.w	r3, [r0], #4
  4064b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4064b4:	f840 3b04 	str.w	r3, [r0], #4
  4064b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4064bc:	f840 3b04 	str.w	r3, [r0], #4
  4064c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4064c4:	f840 3b04 	str.w	r3, [r0], #4
  4064c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4064cc:	f840 3b04 	str.w	r3, [r0], #4
  4064d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4064d4:	f840 3b04 	str.w	r3, [r0], #4
  4064d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4064dc:	f840 3b04 	str.w	r3, [r0], #4
  4064e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4064e4:	f840 3b04 	str.w	r3, [r0], #4
  4064e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4064ec:	f840 3b04 	str.w	r3, [r0], #4
  4064f0:	3a40      	subs	r2, #64	; 0x40
  4064f2:	d2bd      	bcs.n	406470 <memcpy+0x10>
  4064f4:	3230      	adds	r2, #48	; 0x30
  4064f6:	d311      	bcc.n	40651c <memcpy+0xbc>
  4064f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4064fc:	f840 3b04 	str.w	r3, [r0], #4
  406500:	f851 3b04 	ldr.w	r3, [r1], #4
  406504:	f840 3b04 	str.w	r3, [r0], #4
  406508:	f851 3b04 	ldr.w	r3, [r1], #4
  40650c:	f840 3b04 	str.w	r3, [r0], #4
  406510:	f851 3b04 	ldr.w	r3, [r1], #4
  406514:	f840 3b04 	str.w	r3, [r0], #4
  406518:	3a10      	subs	r2, #16
  40651a:	d2ed      	bcs.n	4064f8 <memcpy+0x98>
  40651c:	320c      	adds	r2, #12
  40651e:	d305      	bcc.n	40652c <memcpy+0xcc>
  406520:	f851 3b04 	ldr.w	r3, [r1], #4
  406524:	f840 3b04 	str.w	r3, [r0], #4
  406528:	3a04      	subs	r2, #4
  40652a:	d2f9      	bcs.n	406520 <memcpy+0xc0>
  40652c:	3204      	adds	r2, #4
  40652e:	d008      	beq.n	406542 <memcpy+0xe2>
  406530:	07d2      	lsls	r2, r2, #31
  406532:	bf1c      	itt	ne
  406534:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406538:	f800 3b01 	strbne.w	r3, [r0], #1
  40653c:	d301      	bcc.n	406542 <memcpy+0xe2>
  40653e:	880b      	ldrh	r3, [r1, #0]
  406540:	8003      	strh	r3, [r0, #0]
  406542:	4660      	mov	r0, ip
  406544:	4770      	bx	lr
  406546:	bf00      	nop
  406548:	2a08      	cmp	r2, #8
  40654a:	d313      	bcc.n	406574 <memcpy+0x114>
  40654c:	078b      	lsls	r3, r1, #30
  40654e:	d08d      	beq.n	40646c <memcpy+0xc>
  406550:	f010 0303 	ands.w	r3, r0, #3
  406554:	d08a      	beq.n	40646c <memcpy+0xc>
  406556:	f1c3 0304 	rsb	r3, r3, #4
  40655a:	1ad2      	subs	r2, r2, r3
  40655c:	07db      	lsls	r3, r3, #31
  40655e:	bf1c      	itt	ne
  406560:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406564:	f800 3b01 	strbne.w	r3, [r0], #1
  406568:	d380      	bcc.n	40646c <memcpy+0xc>
  40656a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40656e:	f820 3b02 	strh.w	r3, [r0], #2
  406572:	e77b      	b.n	40646c <memcpy+0xc>
  406574:	3a04      	subs	r2, #4
  406576:	d3d9      	bcc.n	40652c <memcpy+0xcc>
  406578:	3a01      	subs	r2, #1
  40657a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40657e:	f800 3b01 	strb.w	r3, [r0], #1
  406582:	d2f9      	bcs.n	406578 <memcpy+0x118>
  406584:	780b      	ldrb	r3, [r1, #0]
  406586:	7003      	strb	r3, [r0, #0]
  406588:	784b      	ldrb	r3, [r1, #1]
  40658a:	7043      	strb	r3, [r0, #1]
  40658c:	788b      	ldrb	r3, [r1, #2]
  40658e:	7083      	strb	r3, [r0, #2]
  406590:	4660      	mov	r0, ip
  406592:	4770      	bx	lr

00406594 <__malloc_lock>:
  406594:	4801      	ldr	r0, [pc, #4]	; (40659c <__malloc_lock+0x8>)
  406596:	f7ff bc59 	b.w	405e4c <__retarget_lock_acquire_recursive>
  40659a:	bf00      	nop
  40659c:	20000ad4 	.word	0x20000ad4

004065a0 <__malloc_unlock>:
  4065a0:	4801      	ldr	r0, [pc, #4]	; (4065a8 <__malloc_unlock+0x8>)
  4065a2:	f7ff bc55 	b.w	405e50 <__retarget_lock_release_recursive>
  4065a6:	bf00      	nop
  4065a8:	20000ad4 	.word	0x20000ad4

004065ac <_Balloc>:
  4065ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4065ae:	b570      	push	{r4, r5, r6, lr}
  4065b0:	4605      	mov	r5, r0
  4065b2:	460c      	mov	r4, r1
  4065b4:	b14b      	cbz	r3, 4065ca <_Balloc+0x1e>
  4065b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4065ba:	b180      	cbz	r0, 4065de <_Balloc+0x32>
  4065bc:	6802      	ldr	r2, [r0, #0]
  4065be:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4065c2:	2300      	movs	r3, #0
  4065c4:	6103      	str	r3, [r0, #16]
  4065c6:	60c3      	str	r3, [r0, #12]
  4065c8:	bd70      	pop	{r4, r5, r6, pc}
  4065ca:	2221      	movs	r2, #33	; 0x21
  4065cc:	2104      	movs	r1, #4
  4065ce:	f000 fc65 	bl	406e9c <_calloc_r>
  4065d2:	64e8      	str	r0, [r5, #76]	; 0x4c
  4065d4:	4603      	mov	r3, r0
  4065d6:	2800      	cmp	r0, #0
  4065d8:	d1ed      	bne.n	4065b6 <_Balloc+0xa>
  4065da:	2000      	movs	r0, #0
  4065dc:	bd70      	pop	{r4, r5, r6, pc}
  4065de:	2101      	movs	r1, #1
  4065e0:	fa01 f604 	lsl.w	r6, r1, r4
  4065e4:	1d72      	adds	r2, r6, #5
  4065e6:	4628      	mov	r0, r5
  4065e8:	0092      	lsls	r2, r2, #2
  4065ea:	f000 fc57 	bl	406e9c <_calloc_r>
  4065ee:	2800      	cmp	r0, #0
  4065f0:	d0f3      	beq.n	4065da <_Balloc+0x2e>
  4065f2:	6044      	str	r4, [r0, #4]
  4065f4:	6086      	str	r6, [r0, #8]
  4065f6:	e7e4      	b.n	4065c2 <_Balloc+0x16>

004065f8 <_Bfree>:
  4065f8:	b131      	cbz	r1, 406608 <_Bfree+0x10>
  4065fa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4065fc:	684a      	ldr	r2, [r1, #4]
  4065fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406602:	6008      	str	r0, [r1, #0]
  406604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406608:	4770      	bx	lr
  40660a:	bf00      	nop

0040660c <__multadd>:
  40660c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40660e:	690c      	ldr	r4, [r1, #16]
  406610:	b083      	sub	sp, #12
  406612:	460d      	mov	r5, r1
  406614:	4606      	mov	r6, r0
  406616:	f101 0e14 	add.w	lr, r1, #20
  40661a:	2700      	movs	r7, #0
  40661c:	f8de 0000 	ldr.w	r0, [lr]
  406620:	b281      	uxth	r1, r0
  406622:	fb02 3301 	mla	r3, r2, r1, r3
  406626:	0c01      	lsrs	r1, r0, #16
  406628:	0c18      	lsrs	r0, r3, #16
  40662a:	fb02 0101 	mla	r1, r2, r1, r0
  40662e:	b29b      	uxth	r3, r3
  406630:	3701      	adds	r7, #1
  406632:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406636:	42bc      	cmp	r4, r7
  406638:	f84e 3b04 	str.w	r3, [lr], #4
  40663c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406640:	dcec      	bgt.n	40661c <__multadd+0x10>
  406642:	b13b      	cbz	r3, 406654 <__multadd+0x48>
  406644:	68aa      	ldr	r2, [r5, #8]
  406646:	4294      	cmp	r4, r2
  406648:	da07      	bge.n	40665a <__multadd+0x4e>
  40664a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40664e:	3401      	adds	r4, #1
  406650:	6153      	str	r3, [r2, #20]
  406652:	612c      	str	r4, [r5, #16]
  406654:	4628      	mov	r0, r5
  406656:	b003      	add	sp, #12
  406658:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40665a:	6869      	ldr	r1, [r5, #4]
  40665c:	9301      	str	r3, [sp, #4]
  40665e:	3101      	adds	r1, #1
  406660:	4630      	mov	r0, r6
  406662:	f7ff ffa3 	bl	4065ac <_Balloc>
  406666:	692a      	ldr	r2, [r5, #16]
  406668:	3202      	adds	r2, #2
  40666a:	f105 010c 	add.w	r1, r5, #12
  40666e:	4607      	mov	r7, r0
  406670:	0092      	lsls	r2, r2, #2
  406672:	300c      	adds	r0, #12
  406674:	f7ff fef4 	bl	406460 <memcpy>
  406678:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40667a:	6869      	ldr	r1, [r5, #4]
  40667c:	9b01      	ldr	r3, [sp, #4]
  40667e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  406682:	6028      	str	r0, [r5, #0]
  406684:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  406688:	463d      	mov	r5, r7
  40668a:	e7de      	b.n	40664a <__multadd+0x3e>

0040668c <__hi0bits>:
  40668c:	0c02      	lsrs	r2, r0, #16
  40668e:	0412      	lsls	r2, r2, #16
  406690:	4603      	mov	r3, r0
  406692:	b9b2      	cbnz	r2, 4066c2 <__hi0bits+0x36>
  406694:	0403      	lsls	r3, r0, #16
  406696:	2010      	movs	r0, #16
  406698:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40669c:	bf04      	itt	eq
  40669e:	021b      	lsleq	r3, r3, #8
  4066a0:	3008      	addeq	r0, #8
  4066a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4066a6:	bf04      	itt	eq
  4066a8:	011b      	lsleq	r3, r3, #4
  4066aa:	3004      	addeq	r0, #4
  4066ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4066b0:	bf04      	itt	eq
  4066b2:	009b      	lsleq	r3, r3, #2
  4066b4:	3002      	addeq	r0, #2
  4066b6:	2b00      	cmp	r3, #0
  4066b8:	db02      	blt.n	4066c0 <__hi0bits+0x34>
  4066ba:	005b      	lsls	r3, r3, #1
  4066bc:	d403      	bmi.n	4066c6 <__hi0bits+0x3a>
  4066be:	2020      	movs	r0, #32
  4066c0:	4770      	bx	lr
  4066c2:	2000      	movs	r0, #0
  4066c4:	e7e8      	b.n	406698 <__hi0bits+0xc>
  4066c6:	3001      	adds	r0, #1
  4066c8:	4770      	bx	lr
  4066ca:	bf00      	nop

004066cc <__lo0bits>:
  4066cc:	6803      	ldr	r3, [r0, #0]
  4066ce:	f013 0207 	ands.w	r2, r3, #7
  4066d2:	4601      	mov	r1, r0
  4066d4:	d007      	beq.n	4066e6 <__lo0bits+0x1a>
  4066d6:	07da      	lsls	r2, r3, #31
  4066d8:	d421      	bmi.n	40671e <__lo0bits+0x52>
  4066da:	0798      	lsls	r0, r3, #30
  4066dc:	d421      	bmi.n	406722 <__lo0bits+0x56>
  4066de:	089b      	lsrs	r3, r3, #2
  4066e0:	600b      	str	r3, [r1, #0]
  4066e2:	2002      	movs	r0, #2
  4066e4:	4770      	bx	lr
  4066e6:	b298      	uxth	r0, r3
  4066e8:	b198      	cbz	r0, 406712 <__lo0bits+0x46>
  4066ea:	4610      	mov	r0, r2
  4066ec:	f013 0fff 	tst.w	r3, #255	; 0xff
  4066f0:	bf04      	itt	eq
  4066f2:	0a1b      	lsreq	r3, r3, #8
  4066f4:	3008      	addeq	r0, #8
  4066f6:	071a      	lsls	r2, r3, #28
  4066f8:	bf04      	itt	eq
  4066fa:	091b      	lsreq	r3, r3, #4
  4066fc:	3004      	addeq	r0, #4
  4066fe:	079a      	lsls	r2, r3, #30
  406700:	bf04      	itt	eq
  406702:	089b      	lsreq	r3, r3, #2
  406704:	3002      	addeq	r0, #2
  406706:	07da      	lsls	r2, r3, #31
  406708:	d407      	bmi.n	40671a <__lo0bits+0x4e>
  40670a:	085b      	lsrs	r3, r3, #1
  40670c:	d104      	bne.n	406718 <__lo0bits+0x4c>
  40670e:	2020      	movs	r0, #32
  406710:	4770      	bx	lr
  406712:	0c1b      	lsrs	r3, r3, #16
  406714:	2010      	movs	r0, #16
  406716:	e7e9      	b.n	4066ec <__lo0bits+0x20>
  406718:	3001      	adds	r0, #1
  40671a:	600b      	str	r3, [r1, #0]
  40671c:	4770      	bx	lr
  40671e:	2000      	movs	r0, #0
  406720:	4770      	bx	lr
  406722:	085b      	lsrs	r3, r3, #1
  406724:	600b      	str	r3, [r1, #0]
  406726:	2001      	movs	r0, #1
  406728:	4770      	bx	lr
  40672a:	bf00      	nop

0040672c <__i2b>:
  40672c:	b510      	push	{r4, lr}
  40672e:	460c      	mov	r4, r1
  406730:	2101      	movs	r1, #1
  406732:	f7ff ff3b 	bl	4065ac <_Balloc>
  406736:	2201      	movs	r2, #1
  406738:	6144      	str	r4, [r0, #20]
  40673a:	6102      	str	r2, [r0, #16]
  40673c:	bd10      	pop	{r4, pc}
  40673e:	bf00      	nop

00406740 <__multiply>:
  406740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406744:	690c      	ldr	r4, [r1, #16]
  406746:	6915      	ldr	r5, [r2, #16]
  406748:	42ac      	cmp	r4, r5
  40674a:	b083      	sub	sp, #12
  40674c:	468b      	mov	fp, r1
  40674e:	4616      	mov	r6, r2
  406750:	da04      	bge.n	40675c <__multiply+0x1c>
  406752:	4622      	mov	r2, r4
  406754:	46b3      	mov	fp, r6
  406756:	462c      	mov	r4, r5
  406758:	460e      	mov	r6, r1
  40675a:	4615      	mov	r5, r2
  40675c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406760:	f8db 1004 	ldr.w	r1, [fp, #4]
  406764:	eb04 0805 	add.w	r8, r4, r5
  406768:	4598      	cmp	r8, r3
  40676a:	bfc8      	it	gt
  40676c:	3101      	addgt	r1, #1
  40676e:	f7ff ff1d 	bl	4065ac <_Balloc>
  406772:	f100 0914 	add.w	r9, r0, #20
  406776:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40677a:	45d1      	cmp	r9, sl
  40677c:	9000      	str	r0, [sp, #0]
  40677e:	d205      	bcs.n	40678c <__multiply+0x4c>
  406780:	464b      	mov	r3, r9
  406782:	2100      	movs	r1, #0
  406784:	f843 1b04 	str.w	r1, [r3], #4
  406788:	459a      	cmp	sl, r3
  40678a:	d8fb      	bhi.n	406784 <__multiply+0x44>
  40678c:	f106 0c14 	add.w	ip, r6, #20
  406790:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  406794:	f10b 0b14 	add.w	fp, fp, #20
  406798:	459c      	cmp	ip, r3
  40679a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40679e:	d24c      	bcs.n	40683a <__multiply+0xfa>
  4067a0:	f8cd a004 	str.w	sl, [sp, #4]
  4067a4:	469a      	mov	sl, r3
  4067a6:	f8dc 5000 	ldr.w	r5, [ip]
  4067aa:	b2af      	uxth	r7, r5
  4067ac:	b1ef      	cbz	r7, 4067ea <__multiply+0xaa>
  4067ae:	2100      	movs	r1, #0
  4067b0:	464d      	mov	r5, r9
  4067b2:	465e      	mov	r6, fp
  4067b4:	460c      	mov	r4, r1
  4067b6:	f856 2b04 	ldr.w	r2, [r6], #4
  4067ba:	6828      	ldr	r0, [r5, #0]
  4067bc:	b293      	uxth	r3, r2
  4067be:	b281      	uxth	r1, r0
  4067c0:	fb07 1303 	mla	r3, r7, r3, r1
  4067c4:	0c12      	lsrs	r2, r2, #16
  4067c6:	0c01      	lsrs	r1, r0, #16
  4067c8:	4423      	add	r3, r4
  4067ca:	fb07 1102 	mla	r1, r7, r2, r1
  4067ce:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4067d2:	b29b      	uxth	r3, r3
  4067d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4067d8:	45b6      	cmp	lr, r6
  4067da:	f845 3b04 	str.w	r3, [r5], #4
  4067de:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4067e2:	d8e8      	bhi.n	4067b6 <__multiply+0x76>
  4067e4:	602c      	str	r4, [r5, #0]
  4067e6:	f8dc 5000 	ldr.w	r5, [ip]
  4067ea:	0c2d      	lsrs	r5, r5, #16
  4067ec:	d01d      	beq.n	40682a <__multiply+0xea>
  4067ee:	f8d9 3000 	ldr.w	r3, [r9]
  4067f2:	4648      	mov	r0, r9
  4067f4:	461c      	mov	r4, r3
  4067f6:	4659      	mov	r1, fp
  4067f8:	2200      	movs	r2, #0
  4067fa:	880e      	ldrh	r6, [r1, #0]
  4067fc:	0c24      	lsrs	r4, r4, #16
  4067fe:	fb05 4406 	mla	r4, r5, r6, r4
  406802:	4422      	add	r2, r4
  406804:	b29b      	uxth	r3, r3
  406806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40680a:	f840 3b04 	str.w	r3, [r0], #4
  40680e:	f851 3b04 	ldr.w	r3, [r1], #4
  406812:	6804      	ldr	r4, [r0, #0]
  406814:	0c1b      	lsrs	r3, r3, #16
  406816:	b2a6      	uxth	r6, r4
  406818:	fb05 6303 	mla	r3, r5, r3, r6
  40681c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406820:	458e      	cmp	lr, r1
  406822:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406826:	d8e8      	bhi.n	4067fa <__multiply+0xba>
  406828:	6003      	str	r3, [r0, #0]
  40682a:	f10c 0c04 	add.w	ip, ip, #4
  40682e:	45e2      	cmp	sl, ip
  406830:	f109 0904 	add.w	r9, r9, #4
  406834:	d8b7      	bhi.n	4067a6 <__multiply+0x66>
  406836:	f8dd a004 	ldr.w	sl, [sp, #4]
  40683a:	f1b8 0f00 	cmp.w	r8, #0
  40683e:	dd0b      	ble.n	406858 <__multiply+0x118>
  406840:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406844:	f1aa 0a04 	sub.w	sl, sl, #4
  406848:	b11b      	cbz	r3, 406852 <__multiply+0x112>
  40684a:	e005      	b.n	406858 <__multiply+0x118>
  40684c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406850:	b913      	cbnz	r3, 406858 <__multiply+0x118>
  406852:	f1b8 0801 	subs.w	r8, r8, #1
  406856:	d1f9      	bne.n	40684c <__multiply+0x10c>
  406858:	9800      	ldr	r0, [sp, #0]
  40685a:	f8c0 8010 	str.w	r8, [r0, #16]
  40685e:	b003      	add	sp, #12
  406860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406864 <__pow5mult>:
  406864:	f012 0303 	ands.w	r3, r2, #3
  406868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40686c:	4614      	mov	r4, r2
  40686e:	4607      	mov	r7, r0
  406870:	d12e      	bne.n	4068d0 <__pow5mult+0x6c>
  406872:	460d      	mov	r5, r1
  406874:	10a4      	asrs	r4, r4, #2
  406876:	d01c      	beq.n	4068b2 <__pow5mult+0x4e>
  406878:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40687a:	b396      	cbz	r6, 4068e2 <__pow5mult+0x7e>
  40687c:	07e3      	lsls	r3, r4, #31
  40687e:	f04f 0800 	mov.w	r8, #0
  406882:	d406      	bmi.n	406892 <__pow5mult+0x2e>
  406884:	1064      	asrs	r4, r4, #1
  406886:	d014      	beq.n	4068b2 <__pow5mult+0x4e>
  406888:	6830      	ldr	r0, [r6, #0]
  40688a:	b1a8      	cbz	r0, 4068b8 <__pow5mult+0x54>
  40688c:	4606      	mov	r6, r0
  40688e:	07e3      	lsls	r3, r4, #31
  406890:	d5f8      	bpl.n	406884 <__pow5mult+0x20>
  406892:	4632      	mov	r2, r6
  406894:	4629      	mov	r1, r5
  406896:	4638      	mov	r0, r7
  406898:	f7ff ff52 	bl	406740 <__multiply>
  40689c:	b1b5      	cbz	r5, 4068cc <__pow5mult+0x68>
  40689e:	686a      	ldr	r2, [r5, #4]
  4068a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4068a2:	1064      	asrs	r4, r4, #1
  4068a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4068a8:	6029      	str	r1, [r5, #0]
  4068aa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4068ae:	4605      	mov	r5, r0
  4068b0:	d1ea      	bne.n	406888 <__pow5mult+0x24>
  4068b2:	4628      	mov	r0, r5
  4068b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4068b8:	4632      	mov	r2, r6
  4068ba:	4631      	mov	r1, r6
  4068bc:	4638      	mov	r0, r7
  4068be:	f7ff ff3f 	bl	406740 <__multiply>
  4068c2:	6030      	str	r0, [r6, #0]
  4068c4:	f8c0 8000 	str.w	r8, [r0]
  4068c8:	4606      	mov	r6, r0
  4068ca:	e7e0      	b.n	40688e <__pow5mult+0x2a>
  4068cc:	4605      	mov	r5, r0
  4068ce:	e7d9      	b.n	406884 <__pow5mult+0x20>
  4068d0:	1e5a      	subs	r2, r3, #1
  4068d2:	4d0b      	ldr	r5, [pc, #44]	; (406900 <__pow5mult+0x9c>)
  4068d4:	2300      	movs	r3, #0
  4068d6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4068da:	f7ff fe97 	bl	40660c <__multadd>
  4068de:	4605      	mov	r5, r0
  4068e0:	e7c8      	b.n	406874 <__pow5mult+0x10>
  4068e2:	2101      	movs	r1, #1
  4068e4:	4638      	mov	r0, r7
  4068e6:	f7ff fe61 	bl	4065ac <_Balloc>
  4068ea:	f240 2171 	movw	r1, #625	; 0x271
  4068ee:	2201      	movs	r2, #1
  4068f0:	2300      	movs	r3, #0
  4068f2:	6141      	str	r1, [r0, #20]
  4068f4:	6102      	str	r2, [r0, #16]
  4068f6:	4606      	mov	r6, r0
  4068f8:	64b8      	str	r0, [r7, #72]	; 0x48
  4068fa:	6003      	str	r3, [r0, #0]
  4068fc:	e7be      	b.n	40687c <__pow5mult+0x18>
  4068fe:	bf00      	nop
  406900:	004089f0 	.word	0x004089f0

00406904 <__lshift>:
  406904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406908:	4691      	mov	r9, r2
  40690a:	690a      	ldr	r2, [r1, #16]
  40690c:	688b      	ldr	r3, [r1, #8]
  40690e:	ea4f 1469 	mov.w	r4, r9, asr #5
  406912:	eb04 0802 	add.w	r8, r4, r2
  406916:	f108 0501 	add.w	r5, r8, #1
  40691a:	429d      	cmp	r5, r3
  40691c:	460e      	mov	r6, r1
  40691e:	4607      	mov	r7, r0
  406920:	6849      	ldr	r1, [r1, #4]
  406922:	dd04      	ble.n	40692e <__lshift+0x2a>
  406924:	005b      	lsls	r3, r3, #1
  406926:	429d      	cmp	r5, r3
  406928:	f101 0101 	add.w	r1, r1, #1
  40692c:	dcfa      	bgt.n	406924 <__lshift+0x20>
  40692e:	4638      	mov	r0, r7
  406930:	f7ff fe3c 	bl	4065ac <_Balloc>
  406934:	2c00      	cmp	r4, #0
  406936:	f100 0314 	add.w	r3, r0, #20
  40693a:	dd06      	ble.n	40694a <__lshift+0x46>
  40693c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406940:	2100      	movs	r1, #0
  406942:	f843 1b04 	str.w	r1, [r3], #4
  406946:	429a      	cmp	r2, r3
  406948:	d1fb      	bne.n	406942 <__lshift+0x3e>
  40694a:	6934      	ldr	r4, [r6, #16]
  40694c:	f106 0114 	add.w	r1, r6, #20
  406950:	f019 091f 	ands.w	r9, r9, #31
  406954:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406958:	d01d      	beq.n	406996 <__lshift+0x92>
  40695a:	f1c9 0c20 	rsb	ip, r9, #32
  40695e:	2200      	movs	r2, #0
  406960:	680c      	ldr	r4, [r1, #0]
  406962:	fa04 f409 	lsl.w	r4, r4, r9
  406966:	4314      	orrs	r4, r2
  406968:	f843 4b04 	str.w	r4, [r3], #4
  40696c:	f851 2b04 	ldr.w	r2, [r1], #4
  406970:	458e      	cmp	lr, r1
  406972:	fa22 f20c 	lsr.w	r2, r2, ip
  406976:	d8f3      	bhi.n	406960 <__lshift+0x5c>
  406978:	601a      	str	r2, [r3, #0]
  40697a:	b10a      	cbz	r2, 406980 <__lshift+0x7c>
  40697c:	f108 0502 	add.w	r5, r8, #2
  406980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  406982:	6872      	ldr	r2, [r6, #4]
  406984:	3d01      	subs	r5, #1
  406986:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40698a:	6105      	str	r5, [r0, #16]
  40698c:	6031      	str	r1, [r6, #0]
  40698e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406996:	3b04      	subs	r3, #4
  406998:	f851 2b04 	ldr.w	r2, [r1], #4
  40699c:	f843 2f04 	str.w	r2, [r3, #4]!
  4069a0:	458e      	cmp	lr, r1
  4069a2:	d8f9      	bhi.n	406998 <__lshift+0x94>
  4069a4:	e7ec      	b.n	406980 <__lshift+0x7c>
  4069a6:	bf00      	nop

004069a8 <__mcmp>:
  4069a8:	b430      	push	{r4, r5}
  4069aa:	690b      	ldr	r3, [r1, #16]
  4069ac:	4605      	mov	r5, r0
  4069ae:	6900      	ldr	r0, [r0, #16]
  4069b0:	1ac0      	subs	r0, r0, r3
  4069b2:	d10f      	bne.n	4069d4 <__mcmp+0x2c>
  4069b4:	009b      	lsls	r3, r3, #2
  4069b6:	3514      	adds	r5, #20
  4069b8:	3114      	adds	r1, #20
  4069ba:	4419      	add	r1, r3
  4069bc:	442b      	add	r3, r5
  4069be:	e001      	b.n	4069c4 <__mcmp+0x1c>
  4069c0:	429d      	cmp	r5, r3
  4069c2:	d207      	bcs.n	4069d4 <__mcmp+0x2c>
  4069c4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4069c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4069cc:	4294      	cmp	r4, r2
  4069ce:	d0f7      	beq.n	4069c0 <__mcmp+0x18>
  4069d0:	d302      	bcc.n	4069d8 <__mcmp+0x30>
  4069d2:	2001      	movs	r0, #1
  4069d4:	bc30      	pop	{r4, r5}
  4069d6:	4770      	bx	lr
  4069d8:	f04f 30ff 	mov.w	r0, #4294967295
  4069dc:	e7fa      	b.n	4069d4 <__mcmp+0x2c>
  4069de:	bf00      	nop

004069e0 <__mdiff>:
  4069e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4069e4:	690f      	ldr	r7, [r1, #16]
  4069e6:	460e      	mov	r6, r1
  4069e8:	6911      	ldr	r1, [r2, #16]
  4069ea:	1a7f      	subs	r7, r7, r1
  4069ec:	2f00      	cmp	r7, #0
  4069ee:	4690      	mov	r8, r2
  4069f0:	d117      	bne.n	406a22 <__mdiff+0x42>
  4069f2:	0089      	lsls	r1, r1, #2
  4069f4:	f106 0514 	add.w	r5, r6, #20
  4069f8:	f102 0e14 	add.w	lr, r2, #20
  4069fc:	186b      	adds	r3, r5, r1
  4069fe:	4471      	add	r1, lr
  406a00:	e001      	b.n	406a06 <__mdiff+0x26>
  406a02:	429d      	cmp	r5, r3
  406a04:	d25c      	bcs.n	406ac0 <__mdiff+0xe0>
  406a06:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406a0a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406a0e:	42a2      	cmp	r2, r4
  406a10:	d0f7      	beq.n	406a02 <__mdiff+0x22>
  406a12:	d25e      	bcs.n	406ad2 <__mdiff+0xf2>
  406a14:	4633      	mov	r3, r6
  406a16:	462c      	mov	r4, r5
  406a18:	4646      	mov	r6, r8
  406a1a:	4675      	mov	r5, lr
  406a1c:	4698      	mov	r8, r3
  406a1e:	2701      	movs	r7, #1
  406a20:	e005      	b.n	406a2e <__mdiff+0x4e>
  406a22:	db58      	blt.n	406ad6 <__mdiff+0xf6>
  406a24:	f106 0514 	add.w	r5, r6, #20
  406a28:	f108 0414 	add.w	r4, r8, #20
  406a2c:	2700      	movs	r7, #0
  406a2e:	6871      	ldr	r1, [r6, #4]
  406a30:	f7ff fdbc 	bl	4065ac <_Balloc>
  406a34:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406a38:	6936      	ldr	r6, [r6, #16]
  406a3a:	60c7      	str	r7, [r0, #12]
  406a3c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406a40:	46a6      	mov	lr, r4
  406a42:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406a46:	f100 0414 	add.w	r4, r0, #20
  406a4a:	2300      	movs	r3, #0
  406a4c:	f85e 1b04 	ldr.w	r1, [lr], #4
  406a50:	f855 8b04 	ldr.w	r8, [r5], #4
  406a54:	b28a      	uxth	r2, r1
  406a56:	fa13 f388 	uxtah	r3, r3, r8
  406a5a:	0c09      	lsrs	r1, r1, #16
  406a5c:	1a9a      	subs	r2, r3, r2
  406a5e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  406a62:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406a66:	b292      	uxth	r2, r2
  406a68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406a6c:	45f4      	cmp	ip, lr
  406a6e:	f844 2b04 	str.w	r2, [r4], #4
  406a72:	ea4f 4323 	mov.w	r3, r3, asr #16
  406a76:	d8e9      	bhi.n	406a4c <__mdiff+0x6c>
  406a78:	42af      	cmp	r7, r5
  406a7a:	d917      	bls.n	406aac <__mdiff+0xcc>
  406a7c:	46a4      	mov	ip, r4
  406a7e:	46ae      	mov	lr, r5
  406a80:	f85e 2b04 	ldr.w	r2, [lr], #4
  406a84:	fa13 f382 	uxtah	r3, r3, r2
  406a88:	1419      	asrs	r1, r3, #16
  406a8a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  406a8e:	b29b      	uxth	r3, r3
  406a90:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  406a94:	4577      	cmp	r7, lr
  406a96:	f84c 2b04 	str.w	r2, [ip], #4
  406a9a:	ea4f 4321 	mov.w	r3, r1, asr #16
  406a9e:	d8ef      	bhi.n	406a80 <__mdiff+0xa0>
  406aa0:	43ed      	mvns	r5, r5
  406aa2:	442f      	add	r7, r5
  406aa4:	f027 0703 	bic.w	r7, r7, #3
  406aa8:	3704      	adds	r7, #4
  406aaa:	443c      	add	r4, r7
  406aac:	3c04      	subs	r4, #4
  406aae:	b922      	cbnz	r2, 406aba <__mdiff+0xda>
  406ab0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  406ab4:	3e01      	subs	r6, #1
  406ab6:	2b00      	cmp	r3, #0
  406ab8:	d0fa      	beq.n	406ab0 <__mdiff+0xd0>
  406aba:	6106      	str	r6, [r0, #16]
  406abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ac0:	2100      	movs	r1, #0
  406ac2:	f7ff fd73 	bl	4065ac <_Balloc>
  406ac6:	2201      	movs	r2, #1
  406ac8:	2300      	movs	r3, #0
  406aca:	6102      	str	r2, [r0, #16]
  406acc:	6143      	str	r3, [r0, #20]
  406ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ad2:	4674      	mov	r4, lr
  406ad4:	e7ab      	b.n	406a2e <__mdiff+0x4e>
  406ad6:	4633      	mov	r3, r6
  406ad8:	f106 0414 	add.w	r4, r6, #20
  406adc:	f102 0514 	add.w	r5, r2, #20
  406ae0:	4616      	mov	r6, r2
  406ae2:	2701      	movs	r7, #1
  406ae4:	4698      	mov	r8, r3
  406ae6:	e7a2      	b.n	406a2e <__mdiff+0x4e>

00406ae8 <__d2b>:
  406ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406aec:	b082      	sub	sp, #8
  406aee:	2101      	movs	r1, #1
  406af0:	461c      	mov	r4, r3
  406af2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406af6:	4615      	mov	r5, r2
  406af8:	9e08      	ldr	r6, [sp, #32]
  406afa:	f7ff fd57 	bl	4065ac <_Balloc>
  406afe:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406b02:	4680      	mov	r8, r0
  406b04:	b10f      	cbz	r7, 406b0a <__d2b+0x22>
  406b06:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  406b0a:	9401      	str	r4, [sp, #4]
  406b0c:	b31d      	cbz	r5, 406b56 <__d2b+0x6e>
  406b0e:	a802      	add	r0, sp, #8
  406b10:	f840 5d08 	str.w	r5, [r0, #-8]!
  406b14:	f7ff fdda 	bl	4066cc <__lo0bits>
  406b18:	2800      	cmp	r0, #0
  406b1a:	d134      	bne.n	406b86 <__d2b+0x9e>
  406b1c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406b20:	f8c8 2014 	str.w	r2, [r8, #20]
  406b24:	2b00      	cmp	r3, #0
  406b26:	bf0c      	ite	eq
  406b28:	2101      	moveq	r1, #1
  406b2a:	2102      	movne	r1, #2
  406b2c:	f8c8 3018 	str.w	r3, [r8, #24]
  406b30:	f8c8 1010 	str.w	r1, [r8, #16]
  406b34:	b9df      	cbnz	r7, 406b6e <__d2b+0x86>
  406b36:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  406b3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406b3e:	6030      	str	r0, [r6, #0]
  406b40:	6918      	ldr	r0, [r3, #16]
  406b42:	f7ff fda3 	bl	40668c <__hi0bits>
  406b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406b48:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  406b4c:	6018      	str	r0, [r3, #0]
  406b4e:	4640      	mov	r0, r8
  406b50:	b002      	add	sp, #8
  406b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406b56:	a801      	add	r0, sp, #4
  406b58:	f7ff fdb8 	bl	4066cc <__lo0bits>
  406b5c:	9b01      	ldr	r3, [sp, #4]
  406b5e:	f8c8 3014 	str.w	r3, [r8, #20]
  406b62:	2101      	movs	r1, #1
  406b64:	3020      	adds	r0, #32
  406b66:	f8c8 1010 	str.w	r1, [r8, #16]
  406b6a:	2f00      	cmp	r7, #0
  406b6c:	d0e3      	beq.n	406b36 <__d2b+0x4e>
  406b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406b70:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  406b74:	4407      	add	r7, r0
  406b76:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406b7a:	6037      	str	r7, [r6, #0]
  406b7c:	6018      	str	r0, [r3, #0]
  406b7e:	4640      	mov	r0, r8
  406b80:	b002      	add	sp, #8
  406b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406b86:	e89d 000a 	ldmia.w	sp, {r1, r3}
  406b8a:	f1c0 0220 	rsb	r2, r0, #32
  406b8e:	fa03 f202 	lsl.w	r2, r3, r2
  406b92:	430a      	orrs	r2, r1
  406b94:	40c3      	lsrs	r3, r0
  406b96:	9301      	str	r3, [sp, #4]
  406b98:	f8c8 2014 	str.w	r2, [r8, #20]
  406b9c:	e7c2      	b.n	406b24 <__d2b+0x3c>
  406b9e:	bf00      	nop

00406ba0 <_sbrk_r>:
  406ba0:	b538      	push	{r3, r4, r5, lr}
  406ba2:	4c07      	ldr	r4, [pc, #28]	; (406bc0 <_sbrk_r+0x20>)
  406ba4:	2300      	movs	r3, #0
  406ba6:	4605      	mov	r5, r0
  406ba8:	4608      	mov	r0, r1
  406baa:	6023      	str	r3, [r4, #0]
  406bac:	f7fa ff02 	bl	4019b4 <_sbrk>
  406bb0:	1c43      	adds	r3, r0, #1
  406bb2:	d000      	beq.n	406bb6 <_sbrk_r+0x16>
  406bb4:	bd38      	pop	{r3, r4, r5, pc}
  406bb6:	6823      	ldr	r3, [r4, #0]
  406bb8:	2b00      	cmp	r3, #0
  406bba:	d0fb      	beq.n	406bb4 <_sbrk_r+0x14>
  406bbc:	602b      	str	r3, [r5, #0]
  406bbe:	bd38      	pop	{r3, r4, r5, pc}
  406bc0:	20000ae8 	.word	0x20000ae8
	...

00406c00 <strlen>:
  406c00:	f890 f000 	pld	[r0]
  406c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406c08:	f020 0107 	bic.w	r1, r0, #7
  406c0c:	f06f 0c00 	mvn.w	ip, #0
  406c10:	f010 0407 	ands.w	r4, r0, #7
  406c14:	f891 f020 	pld	[r1, #32]
  406c18:	f040 8049 	bne.w	406cae <strlen+0xae>
  406c1c:	f04f 0400 	mov.w	r4, #0
  406c20:	f06f 0007 	mvn.w	r0, #7
  406c24:	e9d1 2300 	ldrd	r2, r3, [r1]
  406c28:	f891 f040 	pld	[r1, #64]	; 0x40
  406c2c:	f100 0008 	add.w	r0, r0, #8
  406c30:	fa82 f24c 	uadd8	r2, r2, ip
  406c34:	faa4 f28c 	sel	r2, r4, ip
  406c38:	fa83 f34c 	uadd8	r3, r3, ip
  406c3c:	faa2 f38c 	sel	r3, r2, ip
  406c40:	bb4b      	cbnz	r3, 406c96 <strlen+0x96>
  406c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406c46:	fa82 f24c 	uadd8	r2, r2, ip
  406c4a:	f100 0008 	add.w	r0, r0, #8
  406c4e:	faa4 f28c 	sel	r2, r4, ip
  406c52:	fa83 f34c 	uadd8	r3, r3, ip
  406c56:	faa2 f38c 	sel	r3, r2, ip
  406c5a:	b9e3      	cbnz	r3, 406c96 <strlen+0x96>
  406c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406c60:	fa82 f24c 	uadd8	r2, r2, ip
  406c64:	f100 0008 	add.w	r0, r0, #8
  406c68:	faa4 f28c 	sel	r2, r4, ip
  406c6c:	fa83 f34c 	uadd8	r3, r3, ip
  406c70:	faa2 f38c 	sel	r3, r2, ip
  406c74:	b97b      	cbnz	r3, 406c96 <strlen+0x96>
  406c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406c7a:	f101 0120 	add.w	r1, r1, #32
  406c7e:	fa82 f24c 	uadd8	r2, r2, ip
  406c82:	f100 0008 	add.w	r0, r0, #8
  406c86:	faa4 f28c 	sel	r2, r4, ip
  406c8a:	fa83 f34c 	uadd8	r3, r3, ip
  406c8e:	faa2 f38c 	sel	r3, r2, ip
  406c92:	2b00      	cmp	r3, #0
  406c94:	d0c6      	beq.n	406c24 <strlen+0x24>
  406c96:	2a00      	cmp	r2, #0
  406c98:	bf04      	itt	eq
  406c9a:	3004      	addeq	r0, #4
  406c9c:	461a      	moveq	r2, r3
  406c9e:	ba12      	rev	r2, r2
  406ca0:	fab2 f282 	clz	r2, r2
  406ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406cac:	4770      	bx	lr
  406cae:	e9d1 2300 	ldrd	r2, r3, [r1]
  406cb2:	f004 0503 	and.w	r5, r4, #3
  406cb6:	f1c4 0000 	rsb	r0, r4, #0
  406cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406cbe:	f014 0f04 	tst.w	r4, #4
  406cc2:	f891 f040 	pld	[r1, #64]	; 0x40
  406cc6:	fa0c f505 	lsl.w	r5, ip, r5
  406cca:	ea62 0205 	orn	r2, r2, r5
  406cce:	bf1c      	itt	ne
  406cd0:	ea63 0305 	ornne	r3, r3, r5
  406cd4:	4662      	movne	r2, ip
  406cd6:	f04f 0400 	mov.w	r4, #0
  406cda:	e7a9      	b.n	406c30 <strlen+0x30>

00406cdc <__ssprint_r>:
  406cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ce0:	6893      	ldr	r3, [r2, #8]
  406ce2:	b083      	sub	sp, #12
  406ce4:	4690      	mov	r8, r2
  406ce6:	2b00      	cmp	r3, #0
  406ce8:	d070      	beq.n	406dcc <__ssprint_r+0xf0>
  406cea:	4682      	mov	sl, r0
  406cec:	460c      	mov	r4, r1
  406cee:	6817      	ldr	r7, [r2, #0]
  406cf0:	688d      	ldr	r5, [r1, #8]
  406cf2:	6808      	ldr	r0, [r1, #0]
  406cf4:	e042      	b.n	406d7c <__ssprint_r+0xa0>
  406cf6:	89a3      	ldrh	r3, [r4, #12]
  406cf8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406cfc:	d02e      	beq.n	406d5c <__ssprint_r+0x80>
  406cfe:	6965      	ldr	r5, [r4, #20]
  406d00:	6921      	ldr	r1, [r4, #16]
  406d02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  406d06:	eba0 0b01 	sub.w	fp, r0, r1
  406d0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  406d0e:	f10b 0001 	add.w	r0, fp, #1
  406d12:	106d      	asrs	r5, r5, #1
  406d14:	4430      	add	r0, r6
  406d16:	42a8      	cmp	r0, r5
  406d18:	462a      	mov	r2, r5
  406d1a:	bf84      	itt	hi
  406d1c:	4605      	movhi	r5, r0
  406d1e:	462a      	movhi	r2, r5
  406d20:	055b      	lsls	r3, r3, #21
  406d22:	d538      	bpl.n	406d96 <__ssprint_r+0xba>
  406d24:	4611      	mov	r1, r2
  406d26:	4650      	mov	r0, sl
  406d28:	f7ff f894 	bl	405e54 <_malloc_r>
  406d2c:	2800      	cmp	r0, #0
  406d2e:	d03c      	beq.n	406daa <__ssprint_r+0xce>
  406d30:	465a      	mov	r2, fp
  406d32:	6921      	ldr	r1, [r4, #16]
  406d34:	9001      	str	r0, [sp, #4]
  406d36:	f7ff fb93 	bl	406460 <memcpy>
  406d3a:	89a2      	ldrh	r2, [r4, #12]
  406d3c:	9b01      	ldr	r3, [sp, #4]
  406d3e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406d46:	81a2      	strh	r2, [r4, #12]
  406d48:	eba5 020b 	sub.w	r2, r5, fp
  406d4c:	eb03 000b 	add.w	r0, r3, fp
  406d50:	6165      	str	r5, [r4, #20]
  406d52:	6123      	str	r3, [r4, #16]
  406d54:	6020      	str	r0, [r4, #0]
  406d56:	60a2      	str	r2, [r4, #8]
  406d58:	4635      	mov	r5, r6
  406d5a:	46b3      	mov	fp, r6
  406d5c:	465a      	mov	r2, fp
  406d5e:	4649      	mov	r1, r9
  406d60:	f000 fa18 	bl	407194 <memmove>
  406d64:	f8d8 3008 	ldr.w	r3, [r8, #8]
  406d68:	68a2      	ldr	r2, [r4, #8]
  406d6a:	6820      	ldr	r0, [r4, #0]
  406d6c:	1b55      	subs	r5, r2, r5
  406d6e:	4458      	add	r0, fp
  406d70:	1b9e      	subs	r6, r3, r6
  406d72:	60a5      	str	r5, [r4, #8]
  406d74:	6020      	str	r0, [r4, #0]
  406d76:	f8c8 6008 	str.w	r6, [r8, #8]
  406d7a:	b33e      	cbz	r6, 406dcc <__ssprint_r+0xf0>
  406d7c:	687e      	ldr	r6, [r7, #4]
  406d7e:	463b      	mov	r3, r7
  406d80:	3708      	adds	r7, #8
  406d82:	2e00      	cmp	r6, #0
  406d84:	d0fa      	beq.n	406d7c <__ssprint_r+0xa0>
  406d86:	42ae      	cmp	r6, r5
  406d88:	f8d3 9000 	ldr.w	r9, [r3]
  406d8c:	46ab      	mov	fp, r5
  406d8e:	d2b2      	bcs.n	406cf6 <__ssprint_r+0x1a>
  406d90:	4635      	mov	r5, r6
  406d92:	46b3      	mov	fp, r6
  406d94:	e7e2      	b.n	406d5c <__ssprint_r+0x80>
  406d96:	4650      	mov	r0, sl
  406d98:	f000 fa60 	bl	40725c <_realloc_r>
  406d9c:	4603      	mov	r3, r0
  406d9e:	2800      	cmp	r0, #0
  406da0:	d1d2      	bne.n	406d48 <__ssprint_r+0x6c>
  406da2:	6921      	ldr	r1, [r4, #16]
  406da4:	4650      	mov	r0, sl
  406da6:	f000 f8f9 	bl	406f9c <_free_r>
  406daa:	230c      	movs	r3, #12
  406dac:	f8ca 3000 	str.w	r3, [sl]
  406db0:	89a3      	ldrh	r3, [r4, #12]
  406db2:	2200      	movs	r2, #0
  406db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406db8:	f04f 30ff 	mov.w	r0, #4294967295
  406dbc:	81a3      	strh	r3, [r4, #12]
  406dbe:	f8c8 2008 	str.w	r2, [r8, #8]
  406dc2:	f8c8 2004 	str.w	r2, [r8, #4]
  406dc6:	b003      	add	sp, #12
  406dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dcc:	2000      	movs	r0, #0
  406dce:	f8c8 0004 	str.w	r0, [r8, #4]
  406dd2:	b003      	add	sp, #12
  406dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406dd8 <__register_exitproc>:
  406dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406ddc:	4d2c      	ldr	r5, [pc, #176]	; (406e90 <__register_exitproc+0xb8>)
  406dde:	4606      	mov	r6, r0
  406de0:	6828      	ldr	r0, [r5, #0]
  406de2:	4698      	mov	r8, r3
  406de4:	460f      	mov	r7, r1
  406de6:	4691      	mov	r9, r2
  406de8:	f7ff f830 	bl	405e4c <__retarget_lock_acquire_recursive>
  406dec:	4b29      	ldr	r3, [pc, #164]	; (406e94 <__register_exitproc+0xbc>)
  406dee:	681c      	ldr	r4, [r3, #0]
  406df0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406df4:	2b00      	cmp	r3, #0
  406df6:	d03e      	beq.n	406e76 <__register_exitproc+0x9e>
  406df8:	685a      	ldr	r2, [r3, #4]
  406dfa:	2a1f      	cmp	r2, #31
  406dfc:	dc1c      	bgt.n	406e38 <__register_exitproc+0x60>
  406dfe:	f102 0e01 	add.w	lr, r2, #1
  406e02:	b176      	cbz	r6, 406e22 <__register_exitproc+0x4a>
  406e04:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406e08:	2401      	movs	r4, #1
  406e0a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406e0e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406e12:	4094      	lsls	r4, r2
  406e14:	4320      	orrs	r0, r4
  406e16:	2e02      	cmp	r6, #2
  406e18:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406e1c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406e20:	d023      	beq.n	406e6a <__register_exitproc+0x92>
  406e22:	3202      	adds	r2, #2
  406e24:	f8c3 e004 	str.w	lr, [r3, #4]
  406e28:	6828      	ldr	r0, [r5, #0]
  406e2a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  406e2e:	f7ff f80f 	bl	405e50 <__retarget_lock_release_recursive>
  406e32:	2000      	movs	r0, #0
  406e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406e38:	4b17      	ldr	r3, [pc, #92]	; (406e98 <__register_exitproc+0xc0>)
  406e3a:	b30b      	cbz	r3, 406e80 <__register_exitproc+0xa8>
  406e3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406e40:	f3af 8000 	nop.w
  406e44:	4603      	mov	r3, r0
  406e46:	b1d8      	cbz	r0, 406e80 <__register_exitproc+0xa8>
  406e48:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406e4c:	6002      	str	r2, [r0, #0]
  406e4e:	2100      	movs	r1, #0
  406e50:	6041      	str	r1, [r0, #4]
  406e52:	460a      	mov	r2, r1
  406e54:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406e58:	f04f 0e01 	mov.w	lr, #1
  406e5c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406e60:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406e64:	2e00      	cmp	r6, #0
  406e66:	d0dc      	beq.n	406e22 <__register_exitproc+0x4a>
  406e68:	e7cc      	b.n	406e04 <__register_exitproc+0x2c>
  406e6a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406e6e:	430c      	orrs	r4, r1
  406e70:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406e74:	e7d5      	b.n	406e22 <__register_exitproc+0x4a>
  406e76:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406e7a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406e7e:	e7bb      	b.n	406df8 <__register_exitproc+0x20>
  406e80:	6828      	ldr	r0, [r5, #0]
  406e82:	f7fe ffe5 	bl	405e50 <__retarget_lock_release_recursive>
  406e86:	f04f 30ff 	mov.w	r0, #4294967295
  406e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406e8e:	bf00      	nop
  406e90:	20000438 	.word	0x20000438
  406e94:	00408888 	.word	0x00408888
  406e98:	00000000 	.word	0x00000000

00406e9c <_calloc_r>:
  406e9c:	b510      	push	{r4, lr}
  406e9e:	fb02 f101 	mul.w	r1, r2, r1
  406ea2:	f7fe ffd7 	bl	405e54 <_malloc_r>
  406ea6:	4604      	mov	r4, r0
  406ea8:	b1d8      	cbz	r0, 406ee2 <_calloc_r+0x46>
  406eaa:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406eae:	f022 0203 	bic.w	r2, r2, #3
  406eb2:	3a04      	subs	r2, #4
  406eb4:	2a24      	cmp	r2, #36	; 0x24
  406eb6:	d818      	bhi.n	406eea <_calloc_r+0x4e>
  406eb8:	2a13      	cmp	r2, #19
  406eba:	d914      	bls.n	406ee6 <_calloc_r+0x4a>
  406ebc:	2300      	movs	r3, #0
  406ebe:	2a1b      	cmp	r2, #27
  406ec0:	6003      	str	r3, [r0, #0]
  406ec2:	6043      	str	r3, [r0, #4]
  406ec4:	d916      	bls.n	406ef4 <_calloc_r+0x58>
  406ec6:	2a24      	cmp	r2, #36	; 0x24
  406ec8:	6083      	str	r3, [r0, #8]
  406eca:	60c3      	str	r3, [r0, #12]
  406ecc:	bf11      	iteee	ne
  406ece:	f100 0210 	addne.w	r2, r0, #16
  406ed2:	6103      	streq	r3, [r0, #16]
  406ed4:	6143      	streq	r3, [r0, #20]
  406ed6:	f100 0218 	addeq.w	r2, r0, #24
  406eda:	2300      	movs	r3, #0
  406edc:	6013      	str	r3, [r2, #0]
  406ede:	6053      	str	r3, [r2, #4]
  406ee0:	6093      	str	r3, [r2, #8]
  406ee2:	4620      	mov	r0, r4
  406ee4:	bd10      	pop	{r4, pc}
  406ee6:	4602      	mov	r2, r0
  406ee8:	e7f7      	b.n	406eda <_calloc_r+0x3e>
  406eea:	2100      	movs	r1, #0
  406eec:	f7fc fd14 	bl	403918 <memset>
  406ef0:	4620      	mov	r0, r4
  406ef2:	bd10      	pop	{r4, pc}
  406ef4:	f100 0208 	add.w	r2, r0, #8
  406ef8:	e7ef      	b.n	406eda <_calloc_r+0x3e>
  406efa:	bf00      	nop

00406efc <_malloc_trim_r>:
  406efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406efe:	4f24      	ldr	r7, [pc, #144]	; (406f90 <_malloc_trim_r+0x94>)
  406f00:	460c      	mov	r4, r1
  406f02:	4606      	mov	r6, r0
  406f04:	f7ff fb46 	bl	406594 <__malloc_lock>
  406f08:	68bb      	ldr	r3, [r7, #8]
  406f0a:	685d      	ldr	r5, [r3, #4]
  406f0c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406f10:	310f      	adds	r1, #15
  406f12:	f025 0503 	bic.w	r5, r5, #3
  406f16:	4429      	add	r1, r5
  406f18:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406f1c:	f021 010f 	bic.w	r1, r1, #15
  406f20:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406f24:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406f28:	db07      	blt.n	406f3a <_malloc_trim_r+0x3e>
  406f2a:	2100      	movs	r1, #0
  406f2c:	4630      	mov	r0, r6
  406f2e:	f7ff fe37 	bl	406ba0 <_sbrk_r>
  406f32:	68bb      	ldr	r3, [r7, #8]
  406f34:	442b      	add	r3, r5
  406f36:	4298      	cmp	r0, r3
  406f38:	d004      	beq.n	406f44 <_malloc_trim_r+0x48>
  406f3a:	4630      	mov	r0, r6
  406f3c:	f7ff fb30 	bl	4065a0 <__malloc_unlock>
  406f40:	2000      	movs	r0, #0
  406f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406f44:	4261      	negs	r1, r4
  406f46:	4630      	mov	r0, r6
  406f48:	f7ff fe2a 	bl	406ba0 <_sbrk_r>
  406f4c:	3001      	adds	r0, #1
  406f4e:	d00d      	beq.n	406f6c <_malloc_trim_r+0x70>
  406f50:	4b10      	ldr	r3, [pc, #64]	; (406f94 <_malloc_trim_r+0x98>)
  406f52:	68ba      	ldr	r2, [r7, #8]
  406f54:	6819      	ldr	r1, [r3, #0]
  406f56:	1b2d      	subs	r5, r5, r4
  406f58:	f045 0501 	orr.w	r5, r5, #1
  406f5c:	4630      	mov	r0, r6
  406f5e:	1b09      	subs	r1, r1, r4
  406f60:	6055      	str	r5, [r2, #4]
  406f62:	6019      	str	r1, [r3, #0]
  406f64:	f7ff fb1c 	bl	4065a0 <__malloc_unlock>
  406f68:	2001      	movs	r0, #1
  406f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406f6c:	2100      	movs	r1, #0
  406f6e:	4630      	mov	r0, r6
  406f70:	f7ff fe16 	bl	406ba0 <_sbrk_r>
  406f74:	68ba      	ldr	r2, [r7, #8]
  406f76:	1a83      	subs	r3, r0, r2
  406f78:	2b0f      	cmp	r3, #15
  406f7a:	ddde      	ble.n	406f3a <_malloc_trim_r+0x3e>
  406f7c:	4c06      	ldr	r4, [pc, #24]	; (406f98 <_malloc_trim_r+0x9c>)
  406f7e:	4905      	ldr	r1, [pc, #20]	; (406f94 <_malloc_trim_r+0x98>)
  406f80:	6824      	ldr	r4, [r4, #0]
  406f82:	f043 0301 	orr.w	r3, r3, #1
  406f86:	1b00      	subs	r0, r0, r4
  406f88:	6053      	str	r3, [r2, #4]
  406f8a:	6008      	str	r0, [r1, #0]
  406f8c:	e7d5      	b.n	406f3a <_malloc_trim_r+0x3e>
  406f8e:	bf00      	nop
  406f90:	2000043c 	.word	0x2000043c
  406f94:	20000a8c 	.word	0x20000a8c
  406f98:	20000844 	.word	0x20000844

00406f9c <_free_r>:
  406f9c:	2900      	cmp	r1, #0
  406f9e:	d044      	beq.n	40702a <_free_r+0x8e>
  406fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406fa4:	460d      	mov	r5, r1
  406fa6:	4680      	mov	r8, r0
  406fa8:	f7ff faf4 	bl	406594 <__malloc_lock>
  406fac:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406fb0:	4969      	ldr	r1, [pc, #420]	; (407158 <_free_r+0x1bc>)
  406fb2:	f027 0301 	bic.w	r3, r7, #1
  406fb6:	f1a5 0408 	sub.w	r4, r5, #8
  406fba:	18e2      	adds	r2, r4, r3
  406fbc:	688e      	ldr	r6, [r1, #8]
  406fbe:	6850      	ldr	r0, [r2, #4]
  406fc0:	42b2      	cmp	r2, r6
  406fc2:	f020 0003 	bic.w	r0, r0, #3
  406fc6:	d05e      	beq.n	407086 <_free_r+0xea>
  406fc8:	07fe      	lsls	r6, r7, #31
  406fca:	6050      	str	r0, [r2, #4]
  406fcc:	d40b      	bmi.n	406fe6 <_free_r+0x4a>
  406fce:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406fd2:	1be4      	subs	r4, r4, r7
  406fd4:	f101 0e08 	add.w	lr, r1, #8
  406fd8:	68a5      	ldr	r5, [r4, #8]
  406fda:	4575      	cmp	r5, lr
  406fdc:	443b      	add	r3, r7
  406fde:	d06d      	beq.n	4070bc <_free_r+0x120>
  406fe0:	68e7      	ldr	r7, [r4, #12]
  406fe2:	60ef      	str	r7, [r5, #12]
  406fe4:	60bd      	str	r5, [r7, #8]
  406fe6:	1815      	adds	r5, r2, r0
  406fe8:	686d      	ldr	r5, [r5, #4]
  406fea:	07ed      	lsls	r5, r5, #31
  406fec:	d53e      	bpl.n	40706c <_free_r+0xd0>
  406fee:	f043 0201 	orr.w	r2, r3, #1
  406ff2:	6062      	str	r2, [r4, #4]
  406ff4:	50e3      	str	r3, [r4, r3]
  406ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406ffa:	d217      	bcs.n	40702c <_free_r+0x90>
  406ffc:	08db      	lsrs	r3, r3, #3
  406ffe:	1c58      	adds	r0, r3, #1
  407000:	109a      	asrs	r2, r3, #2
  407002:	684d      	ldr	r5, [r1, #4]
  407004:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407008:	60a7      	str	r7, [r4, #8]
  40700a:	2301      	movs	r3, #1
  40700c:	4093      	lsls	r3, r2
  40700e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407012:	432b      	orrs	r3, r5
  407014:	3a08      	subs	r2, #8
  407016:	60e2      	str	r2, [r4, #12]
  407018:	604b      	str	r3, [r1, #4]
  40701a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40701e:	60fc      	str	r4, [r7, #12]
  407020:	4640      	mov	r0, r8
  407022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407026:	f7ff babb 	b.w	4065a0 <__malloc_unlock>
  40702a:	4770      	bx	lr
  40702c:	0a5a      	lsrs	r2, r3, #9
  40702e:	2a04      	cmp	r2, #4
  407030:	d852      	bhi.n	4070d8 <_free_r+0x13c>
  407032:	099a      	lsrs	r2, r3, #6
  407034:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407038:	00ff      	lsls	r7, r7, #3
  40703a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40703e:	19c8      	adds	r0, r1, r7
  407040:	59ca      	ldr	r2, [r1, r7]
  407042:	3808      	subs	r0, #8
  407044:	4290      	cmp	r0, r2
  407046:	d04f      	beq.n	4070e8 <_free_r+0x14c>
  407048:	6851      	ldr	r1, [r2, #4]
  40704a:	f021 0103 	bic.w	r1, r1, #3
  40704e:	428b      	cmp	r3, r1
  407050:	d232      	bcs.n	4070b8 <_free_r+0x11c>
  407052:	6892      	ldr	r2, [r2, #8]
  407054:	4290      	cmp	r0, r2
  407056:	d1f7      	bne.n	407048 <_free_r+0xac>
  407058:	68c3      	ldr	r3, [r0, #12]
  40705a:	60a0      	str	r0, [r4, #8]
  40705c:	60e3      	str	r3, [r4, #12]
  40705e:	609c      	str	r4, [r3, #8]
  407060:	60c4      	str	r4, [r0, #12]
  407062:	4640      	mov	r0, r8
  407064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407068:	f7ff ba9a 	b.w	4065a0 <__malloc_unlock>
  40706c:	6895      	ldr	r5, [r2, #8]
  40706e:	4f3b      	ldr	r7, [pc, #236]	; (40715c <_free_r+0x1c0>)
  407070:	42bd      	cmp	r5, r7
  407072:	4403      	add	r3, r0
  407074:	d040      	beq.n	4070f8 <_free_r+0x15c>
  407076:	68d0      	ldr	r0, [r2, #12]
  407078:	60e8      	str	r0, [r5, #12]
  40707a:	f043 0201 	orr.w	r2, r3, #1
  40707e:	6085      	str	r5, [r0, #8]
  407080:	6062      	str	r2, [r4, #4]
  407082:	50e3      	str	r3, [r4, r3]
  407084:	e7b7      	b.n	406ff6 <_free_r+0x5a>
  407086:	07ff      	lsls	r7, r7, #31
  407088:	4403      	add	r3, r0
  40708a:	d407      	bmi.n	40709c <_free_r+0x100>
  40708c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407090:	1aa4      	subs	r4, r4, r2
  407092:	4413      	add	r3, r2
  407094:	68a0      	ldr	r0, [r4, #8]
  407096:	68e2      	ldr	r2, [r4, #12]
  407098:	60c2      	str	r2, [r0, #12]
  40709a:	6090      	str	r0, [r2, #8]
  40709c:	4a30      	ldr	r2, [pc, #192]	; (407160 <_free_r+0x1c4>)
  40709e:	6812      	ldr	r2, [r2, #0]
  4070a0:	f043 0001 	orr.w	r0, r3, #1
  4070a4:	4293      	cmp	r3, r2
  4070a6:	6060      	str	r0, [r4, #4]
  4070a8:	608c      	str	r4, [r1, #8]
  4070aa:	d3b9      	bcc.n	407020 <_free_r+0x84>
  4070ac:	4b2d      	ldr	r3, [pc, #180]	; (407164 <_free_r+0x1c8>)
  4070ae:	4640      	mov	r0, r8
  4070b0:	6819      	ldr	r1, [r3, #0]
  4070b2:	f7ff ff23 	bl	406efc <_malloc_trim_r>
  4070b6:	e7b3      	b.n	407020 <_free_r+0x84>
  4070b8:	4610      	mov	r0, r2
  4070ba:	e7cd      	b.n	407058 <_free_r+0xbc>
  4070bc:	1811      	adds	r1, r2, r0
  4070be:	6849      	ldr	r1, [r1, #4]
  4070c0:	07c9      	lsls	r1, r1, #31
  4070c2:	d444      	bmi.n	40714e <_free_r+0x1b2>
  4070c4:	6891      	ldr	r1, [r2, #8]
  4070c6:	68d2      	ldr	r2, [r2, #12]
  4070c8:	60ca      	str	r2, [r1, #12]
  4070ca:	4403      	add	r3, r0
  4070cc:	f043 0001 	orr.w	r0, r3, #1
  4070d0:	6091      	str	r1, [r2, #8]
  4070d2:	6060      	str	r0, [r4, #4]
  4070d4:	50e3      	str	r3, [r4, r3]
  4070d6:	e7a3      	b.n	407020 <_free_r+0x84>
  4070d8:	2a14      	cmp	r2, #20
  4070da:	d816      	bhi.n	40710a <_free_r+0x16e>
  4070dc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4070e0:	00ff      	lsls	r7, r7, #3
  4070e2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4070e6:	e7aa      	b.n	40703e <_free_r+0xa2>
  4070e8:	10aa      	asrs	r2, r5, #2
  4070ea:	2301      	movs	r3, #1
  4070ec:	684d      	ldr	r5, [r1, #4]
  4070ee:	4093      	lsls	r3, r2
  4070f0:	432b      	orrs	r3, r5
  4070f2:	604b      	str	r3, [r1, #4]
  4070f4:	4603      	mov	r3, r0
  4070f6:	e7b0      	b.n	40705a <_free_r+0xbe>
  4070f8:	f043 0201 	orr.w	r2, r3, #1
  4070fc:	614c      	str	r4, [r1, #20]
  4070fe:	610c      	str	r4, [r1, #16]
  407100:	60e5      	str	r5, [r4, #12]
  407102:	60a5      	str	r5, [r4, #8]
  407104:	6062      	str	r2, [r4, #4]
  407106:	50e3      	str	r3, [r4, r3]
  407108:	e78a      	b.n	407020 <_free_r+0x84>
  40710a:	2a54      	cmp	r2, #84	; 0x54
  40710c:	d806      	bhi.n	40711c <_free_r+0x180>
  40710e:	0b1a      	lsrs	r2, r3, #12
  407110:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407114:	00ff      	lsls	r7, r7, #3
  407116:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40711a:	e790      	b.n	40703e <_free_r+0xa2>
  40711c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407120:	d806      	bhi.n	407130 <_free_r+0x194>
  407122:	0bda      	lsrs	r2, r3, #15
  407124:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407128:	00ff      	lsls	r7, r7, #3
  40712a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40712e:	e786      	b.n	40703e <_free_r+0xa2>
  407130:	f240 5054 	movw	r0, #1364	; 0x554
  407134:	4282      	cmp	r2, r0
  407136:	d806      	bhi.n	407146 <_free_r+0x1aa>
  407138:	0c9a      	lsrs	r2, r3, #18
  40713a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40713e:	00ff      	lsls	r7, r7, #3
  407140:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407144:	e77b      	b.n	40703e <_free_r+0xa2>
  407146:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40714a:	257e      	movs	r5, #126	; 0x7e
  40714c:	e777      	b.n	40703e <_free_r+0xa2>
  40714e:	f043 0101 	orr.w	r1, r3, #1
  407152:	6061      	str	r1, [r4, #4]
  407154:	6013      	str	r3, [r2, #0]
  407156:	e763      	b.n	407020 <_free_r+0x84>
  407158:	2000043c 	.word	0x2000043c
  40715c:	20000444 	.word	0x20000444
  407160:	20000848 	.word	0x20000848
  407164:	20000abc 	.word	0x20000abc

00407168 <__ascii_mbtowc>:
  407168:	b082      	sub	sp, #8
  40716a:	b149      	cbz	r1, 407180 <__ascii_mbtowc+0x18>
  40716c:	b15a      	cbz	r2, 407186 <__ascii_mbtowc+0x1e>
  40716e:	b16b      	cbz	r3, 40718c <__ascii_mbtowc+0x24>
  407170:	7813      	ldrb	r3, [r2, #0]
  407172:	600b      	str	r3, [r1, #0]
  407174:	7812      	ldrb	r2, [r2, #0]
  407176:	1c10      	adds	r0, r2, #0
  407178:	bf18      	it	ne
  40717a:	2001      	movne	r0, #1
  40717c:	b002      	add	sp, #8
  40717e:	4770      	bx	lr
  407180:	a901      	add	r1, sp, #4
  407182:	2a00      	cmp	r2, #0
  407184:	d1f3      	bne.n	40716e <__ascii_mbtowc+0x6>
  407186:	4610      	mov	r0, r2
  407188:	b002      	add	sp, #8
  40718a:	4770      	bx	lr
  40718c:	f06f 0001 	mvn.w	r0, #1
  407190:	e7f4      	b.n	40717c <__ascii_mbtowc+0x14>
  407192:	bf00      	nop

00407194 <memmove>:
  407194:	4288      	cmp	r0, r1
  407196:	b5f0      	push	{r4, r5, r6, r7, lr}
  407198:	d90d      	bls.n	4071b6 <memmove+0x22>
  40719a:	188b      	adds	r3, r1, r2
  40719c:	4298      	cmp	r0, r3
  40719e:	d20a      	bcs.n	4071b6 <memmove+0x22>
  4071a0:	1884      	adds	r4, r0, r2
  4071a2:	2a00      	cmp	r2, #0
  4071a4:	d051      	beq.n	40724a <memmove+0xb6>
  4071a6:	4622      	mov	r2, r4
  4071a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4071ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4071b0:	4299      	cmp	r1, r3
  4071b2:	d1f9      	bne.n	4071a8 <memmove+0x14>
  4071b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4071b6:	2a0f      	cmp	r2, #15
  4071b8:	d948      	bls.n	40724c <memmove+0xb8>
  4071ba:	ea41 0300 	orr.w	r3, r1, r0
  4071be:	079b      	lsls	r3, r3, #30
  4071c0:	d146      	bne.n	407250 <memmove+0xbc>
  4071c2:	f100 0410 	add.w	r4, r0, #16
  4071c6:	f101 0310 	add.w	r3, r1, #16
  4071ca:	4615      	mov	r5, r2
  4071cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4071d0:	f844 6c10 	str.w	r6, [r4, #-16]
  4071d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4071d8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4071dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4071e0:	f844 6c08 	str.w	r6, [r4, #-8]
  4071e4:	3d10      	subs	r5, #16
  4071e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4071ea:	f844 6c04 	str.w	r6, [r4, #-4]
  4071ee:	2d0f      	cmp	r5, #15
  4071f0:	f103 0310 	add.w	r3, r3, #16
  4071f4:	f104 0410 	add.w	r4, r4, #16
  4071f8:	d8e8      	bhi.n	4071cc <memmove+0x38>
  4071fa:	f1a2 0310 	sub.w	r3, r2, #16
  4071fe:	f023 030f 	bic.w	r3, r3, #15
  407202:	f002 0e0f 	and.w	lr, r2, #15
  407206:	3310      	adds	r3, #16
  407208:	f1be 0f03 	cmp.w	lr, #3
  40720c:	4419      	add	r1, r3
  40720e:	4403      	add	r3, r0
  407210:	d921      	bls.n	407256 <memmove+0xc2>
  407212:	1f1e      	subs	r6, r3, #4
  407214:	460d      	mov	r5, r1
  407216:	4674      	mov	r4, lr
  407218:	3c04      	subs	r4, #4
  40721a:	f855 7b04 	ldr.w	r7, [r5], #4
  40721e:	f846 7f04 	str.w	r7, [r6, #4]!
  407222:	2c03      	cmp	r4, #3
  407224:	d8f8      	bhi.n	407218 <memmove+0x84>
  407226:	f1ae 0404 	sub.w	r4, lr, #4
  40722a:	f024 0403 	bic.w	r4, r4, #3
  40722e:	3404      	adds	r4, #4
  407230:	4421      	add	r1, r4
  407232:	4423      	add	r3, r4
  407234:	f002 0203 	and.w	r2, r2, #3
  407238:	b162      	cbz	r2, 407254 <memmove+0xc0>
  40723a:	3b01      	subs	r3, #1
  40723c:	440a      	add	r2, r1
  40723e:	f811 4b01 	ldrb.w	r4, [r1], #1
  407242:	f803 4f01 	strb.w	r4, [r3, #1]!
  407246:	428a      	cmp	r2, r1
  407248:	d1f9      	bne.n	40723e <memmove+0xaa>
  40724a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40724c:	4603      	mov	r3, r0
  40724e:	e7f3      	b.n	407238 <memmove+0xa4>
  407250:	4603      	mov	r3, r0
  407252:	e7f2      	b.n	40723a <memmove+0xa6>
  407254:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407256:	4672      	mov	r2, lr
  407258:	e7ee      	b.n	407238 <memmove+0xa4>
  40725a:	bf00      	nop

0040725c <_realloc_r>:
  40725c:	2900      	cmp	r1, #0
  40725e:	f000 8095 	beq.w	40738c <_realloc_r+0x130>
  407262:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407266:	460d      	mov	r5, r1
  407268:	4616      	mov	r6, r2
  40726a:	b083      	sub	sp, #12
  40726c:	4680      	mov	r8, r0
  40726e:	f106 070b 	add.w	r7, r6, #11
  407272:	f7ff f98f 	bl	406594 <__malloc_lock>
  407276:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40727a:	2f16      	cmp	r7, #22
  40727c:	f02e 0403 	bic.w	r4, lr, #3
  407280:	f1a5 0908 	sub.w	r9, r5, #8
  407284:	d83c      	bhi.n	407300 <_realloc_r+0xa4>
  407286:	2210      	movs	r2, #16
  407288:	4617      	mov	r7, r2
  40728a:	42be      	cmp	r6, r7
  40728c:	d83d      	bhi.n	40730a <_realloc_r+0xae>
  40728e:	4294      	cmp	r4, r2
  407290:	da43      	bge.n	40731a <_realloc_r+0xbe>
  407292:	4bc4      	ldr	r3, [pc, #784]	; (4075a4 <_realloc_r+0x348>)
  407294:	6899      	ldr	r1, [r3, #8]
  407296:	eb09 0004 	add.w	r0, r9, r4
  40729a:	4288      	cmp	r0, r1
  40729c:	f000 80b4 	beq.w	407408 <_realloc_r+0x1ac>
  4072a0:	6843      	ldr	r3, [r0, #4]
  4072a2:	f023 0101 	bic.w	r1, r3, #1
  4072a6:	4401      	add	r1, r0
  4072a8:	6849      	ldr	r1, [r1, #4]
  4072aa:	07c9      	lsls	r1, r1, #31
  4072ac:	d54c      	bpl.n	407348 <_realloc_r+0xec>
  4072ae:	f01e 0f01 	tst.w	lr, #1
  4072b2:	f000 809b 	beq.w	4073ec <_realloc_r+0x190>
  4072b6:	4631      	mov	r1, r6
  4072b8:	4640      	mov	r0, r8
  4072ba:	f7fe fdcb 	bl	405e54 <_malloc_r>
  4072be:	4606      	mov	r6, r0
  4072c0:	2800      	cmp	r0, #0
  4072c2:	d03a      	beq.n	40733a <_realloc_r+0xde>
  4072c4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4072c8:	f023 0301 	bic.w	r3, r3, #1
  4072cc:	444b      	add	r3, r9
  4072ce:	f1a0 0208 	sub.w	r2, r0, #8
  4072d2:	429a      	cmp	r2, r3
  4072d4:	f000 8121 	beq.w	40751a <_realloc_r+0x2be>
  4072d8:	1f22      	subs	r2, r4, #4
  4072da:	2a24      	cmp	r2, #36	; 0x24
  4072dc:	f200 8107 	bhi.w	4074ee <_realloc_r+0x292>
  4072e0:	2a13      	cmp	r2, #19
  4072e2:	f200 80db 	bhi.w	40749c <_realloc_r+0x240>
  4072e6:	4603      	mov	r3, r0
  4072e8:	462a      	mov	r2, r5
  4072ea:	6811      	ldr	r1, [r2, #0]
  4072ec:	6019      	str	r1, [r3, #0]
  4072ee:	6851      	ldr	r1, [r2, #4]
  4072f0:	6059      	str	r1, [r3, #4]
  4072f2:	6892      	ldr	r2, [r2, #8]
  4072f4:	609a      	str	r2, [r3, #8]
  4072f6:	4629      	mov	r1, r5
  4072f8:	4640      	mov	r0, r8
  4072fa:	f7ff fe4f 	bl	406f9c <_free_r>
  4072fe:	e01c      	b.n	40733a <_realloc_r+0xde>
  407300:	f027 0707 	bic.w	r7, r7, #7
  407304:	2f00      	cmp	r7, #0
  407306:	463a      	mov	r2, r7
  407308:	dabf      	bge.n	40728a <_realloc_r+0x2e>
  40730a:	2600      	movs	r6, #0
  40730c:	230c      	movs	r3, #12
  40730e:	4630      	mov	r0, r6
  407310:	f8c8 3000 	str.w	r3, [r8]
  407314:	b003      	add	sp, #12
  407316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40731a:	462e      	mov	r6, r5
  40731c:	1be3      	subs	r3, r4, r7
  40731e:	2b0f      	cmp	r3, #15
  407320:	d81e      	bhi.n	407360 <_realloc_r+0x104>
  407322:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407326:	f003 0301 	and.w	r3, r3, #1
  40732a:	4323      	orrs	r3, r4
  40732c:	444c      	add	r4, r9
  40732e:	f8c9 3004 	str.w	r3, [r9, #4]
  407332:	6863      	ldr	r3, [r4, #4]
  407334:	f043 0301 	orr.w	r3, r3, #1
  407338:	6063      	str	r3, [r4, #4]
  40733a:	4640      	mov	r0, r8
  40733c:	f7ff f930 	bl	4065a0 <__malloc_unlock>
  407340:	4630      	mov	r0, r6
  407342:	b003      	add	sp, #12
  407344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407348:	f023 0303 	bic.w	r3, r3, #3
  40734c:	18e1      	adds	r1, r4, r3
  40734e:	4291      	cmp	r1, r2
  407350:	db1f      	blt.n	407392 <_realloc_r+0x136>
  407352:	68c3      	ldr	r3, [r0, #12]
  407354:	6882      	ldr	r2, [r0, #8]
  407356:	462e      	mov	r6, r5
  407358:	60d3      	str	r3, [r2, #12]
  40735a:	460c      	mov	r4, r1
  40735c:	609a      	str	r2, [r3, #8]
  40735e:	e7dd      	b.n	40731c <_realloc_r+0xc0>
  407360:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407364:	eb09 0107 	add.w	r1, r9, r7
  407368:	f002 0201 	and.w	r2, r2, #1
  40736c:	444c      	add	r4, r9
  40736e:	f043 0301 	orr.w	r3, r3, #1
  407372:	4317      	orrs	r7, r2
  407374:	f8c9 7004 	str.w	r7, [r9, #4]
  407378:	604b      	str	r3, [r1, #4]
  40737a:	6863      	ldr	r3, [r4, #4]
  40737c:	f043 0301 	orr.w	r3, r3, #1
  407380:	3108      	adds	r1, #8
  407382:	6063      	str	r3, [r4, #4]
  407384:	4640      	mov	r0, r8
  407386:	f7ff fe09 	bl	406f9c <_free_r>
  40738a:	e7d6      	b.n	40733a <_realloc_r+0xde>
  40738c:	4611      	mov	r1, r2
  40738e:	f7fe bd61 	b.w	405e54 <_malloc_r>
  407392:	f01e 0f01 	tst.w	lr, #1
  407396:	d18e      	bne.n	4072b6 <_realloc_r+0x5a>
  407398:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40739c:	eba9 0a01 	sub.w	sl, r9, r1
  4073a0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4073a4:	f021 0103 	bic.w	r1, r1, #3
  4073a8:	440b      	add	r3, r1
  4073aa:	4423      	add	r3, r4
  4073ac:	4293      	cmp	r3, r2
  4073ae:	db25      	blt.n	4073fc <_realloc_r+0x1a0>
  4073b0:	68c2      	ldr	r2, [r0, #12]
  4073b2:	6881      	ldr	r1, [r0, #8]
  4073b4:	4656      	mov	r6, sl
  4073b6:	60ca      	str	r2, [r1, #12]
  4073b8:	6091      	str	r1, [r2, #8]
  4073ba:	f8da 100c 	ldr.w	r1, [sl, #12]
  4073be:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4073c2:	1f22      	subs	r2, r4, #4
  4073c4:	2a24      	cmp	r2, #36	; 0x24
  4073c6:	60c1      	str	r1, [r0, #12]
  4073c8:	6088      	str	r0, [r1, #8]
  4073ca:	f200 8094 	bhi.w	4074f6 <_realloc_r+0x29a>
  4073ce:	2a13      	cmp	r2, #19
  4073d0:	d96f      	bls.n	4074b2 <_realloc_r+0x256>
  4073d2:	6829      	ldr	r1, [r5, #0]
  4073d4:	f8ca 1008 	str.w	r1, [sl, #8]
  4073d8:	6869      	ldr	r1, [r5, #4]
  4073da:	f8ca 100c 	str.w	r1, [sl, #12]
  4073de:	2a1b      	cmp	r2, #27
  4073e0:	f200 80a2 	bhi.w	407528 <_realloc_r+0x2cc>
  4073e4:	3508      	adds	r5, #8
  4073e6:	f10a 0210 	add.w	r2, sl, #16
  4073ea:	e063      	b.n	4074b4 <_realloc_r+0x258>
  4073ec:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4073f0:	eba9 0a03 	sub.w	sl, r9, r3
  4073f4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4073f8:	f021 0103 	bic.w	r1, r1, #3
  4073fc:	1863      	adds	r3, r4, r1
  4073fe:	4293      	cmp	r3, r2
  407400:	f6ff af59 	blt.w	4072b6 <_realloc_r+0x5a>
  407404:	4656      	mov	r6, sl
  407406:	e7d8      	b.n	4073ba <_realloc_r+0x15e>
  407408:	6841      	ldr	r1, [r0, #4]
  40740a:	f021 0b03 	bic.w	fp, r1, #3
  40740e:	44a3      	add	fp, r4
  407410:	f107 0010 	add.w	r0, r7, #16
  407414:	4583      	cmp	fp, r0
  407416:	da56      	bge.n	4074c6 <_realloc_r+0x26a>
  407418:	f01e 0f01 	tst.w	lr, #1
  40741c:	f47f af4b 	bne.w	4072b6 <_realloc_r+0x5a>
  407420:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407424:	eba9 0a01 	sub.w	sl, r9, r1
  407428:	f8da 1004 	ldr.w	r1, [sl, #4]
  40742c:	f021 0103 	bic.w	r1, r1, #3
  407430:	448b      	add	fp, r1
  407432:	4558      	cmp	r0, fp
  407434:	dce2      	bgt.n	4073fc <_realloc_r+0x1a0>
  407436:	4656      	mov	r6, sl
  407438:	f8da 100c 	ldr.w	r1, [sl, #12]
  40743c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407440:	1f22      	subs	r2, r4, #4
  407442:	2a24      	cmp	r2, #36	; 0x24
  407444:	60c1      	str	r1, [r0, #12]
  407446:	6088      	str	r0, [r1, #8]
  407448:	f200 808f 	bhi.w	40756a <_realloc_r+0x30e>
  40744c:	2a13      	cmp	r2, #19
  40744e:	f240 808a 	bls.w	407566 <_realloc_r+0x30a>
  407452:	6829      	ldr	r1, [r5, #0]
  407454:	f8ca 1008 	str.w	r1, [sl, #8]
  407458:	6869      	ldr	r1, [r5, #4]
  40745a:	f8ca 100c 	str.w	r1, [sl, #12]
  40745e:	2a1b      	cmp	r2, #27
  407460:	f200 808a 	bhi.w	407578 <_realloc_r+0x31c>
  407464:	3508      	adds	r5, #8
  407466:	f10a 0210 	add.w	r2, sl, #16
  40746a:	6829      	ldr	r1, [r5, #0]
  40746c:	6011      	str	r1, [r2, #0]
  40746e:	6869      	ldr	r1, [r5, #4]
  407470:	6051      	str	r1, [r2, #4]
  407472:	68a9      	ldr	r1, [r5, #8]
  407474:	6091      	str	r1, [r2, #8]
  407476:	eb0a 0107 	add.w	r1, sl, r7
  40747a:	ebab 0207 	sub.w	r2, fp, r7
  40747e:	f042 0201 	orr.w	r2, r2, #1
  407482:	6099      	str	r1, [r3, #8]
  407484:	604a      	str	r2, [r1, #4]
  407486:	f8da 3004 	ldr.w	r3, [sl, #4]
  40748a:	f003 0301 	and.w	r3, r3, #1
  40748e:	431f      	orrs	r7, r3
  407490:	4640      	mov	r0, r8
  407492:	f8ca 7004 	str.w	r7, [sl, #4]
  407496:	f7ff f883 	bl	4065a0 <__malloc_unlock>
  40749a:	e751      	b.n	407340 <_realloc_r+0xe4>
  40749c:	682b      	ldr	r3, [r5, #0]
  40749e:	6003      	str	r3, [r0, #0]
  4074a0:	686b      	ldr	r3, [r5, #4]
  4074a2:	6043      	str	r3, [r0, #4]
  4074a4:	2a1b      	cmp	r2, #27
  4074a6:	d82d      	bhi.n	407504 <_realloc_r+0x2a8>
  4074a8:	f100 0308 	add.w	r3, r0, #8
  4074ac:	f105 0208 	add.w	r2, r5, #8
  4074b0:	e71b      	b.n	4072ea <_realloc_r+0x8e>
  4074b2:	4632      	mov	r2, r6
  4074b4:	6829      	ldr	r1, [r5, #0]
  4074b6:	6011      	str	r1, [r2, #0]
  4074b8:	6869      	ldr	r1, [r5, #4]
  4074ba:	6051      	str	r1, [r2, #4]
  4074bc:	68a9      	ldr	r1, [r5, #8]
  4074be:	6091      	str	r1, [r2, #8]
  4074c0:	461c      	mov	r4, r3
  4074c2:	46d1      	mov	r9, sl
  4074c4:	e72a      	b.n	40731c <_realloc_r+0xc0>
  4074c6:	eb09 0107 	add.w	r1, r9, r7
  4074ca:	ebab 0b07 	sub.w	fp, fp, r7
  4074ce:	f04b 0201 	orr.w	r2, fp, #1
  4074d2:	6099      	str	r1, [r3, #8]
  4074d4:	604a      	str	r2, [r1, #4]
  4074d6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4074da:	f003 0301 	and.w	r3, r3, #1
  4074de:	431f      	orrs	r7, r3
  4074e0:	4640      	mov	r0, r8
  4074e2:	f845 7c04 	str.w	r7, [r5, #-4]
  4074e6:	f7ff f85b 	bl	4065a0 <__malloc_unlock>
  4074ea:	462e      	mov	r6, r5
  4074ec:	e728      	b.n	407340 <_realloc_r+0xe4>
  4074ee:	4629      	mov	r1, r5
  4074f0:	f7ff fe50 	bl	407194 <memmove>
  4074f4:	e6ff      	b.n	4072f6 <_realloc_r+0x9a>
  4074f6:	4629      	mov	r1, r5
  4074f8:	4630      	mov	r0, r6
  4074fa:	461c      	mov	r4, r3
  4074fc:	46d1      	mov	r9, sl
  4074fe:	f7ff fe49 	bl	407194 <memmove>
  407502:	e70b      	b.n	40731c <_realloc_r+0xc0>
  407504:	68ab      	ldr	r3, [r5, #8]
  407506:	6083      	str	r3, [r0, #8]
  407508:	68eb      	ldr	r3, [r5, #12]
  40750a:	60c3      	str	r3, [r0, #12]
  40750c:	2a24      	cmp	r2, #36	; 0x24
  40750e:	d017      	beq.n	407540 <_realloc_r+0x2e4>
  407510:	f100 0310 	add.w	r3, r0, #16
  407514:	f105 0210 	add.w	r2, r5, #16
  407518:	e6e7      	b.n	4072ea <_realloc_r+0x8e>
  40751a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40751e:	f023 0303 	bic.w	r3, r3, #3
  407522:	441c      	add	r4, r3
  407524:	462e      	mov	r6, r5
  407526:	e6f9      	b.n	40731c <_realloc_r+0xc0>
  407528:	68a9      	ldr	r1, [r5, #8]
  40752a:	f8ca 1010 	str.w	r1, [sl, #16]
  40752e:	68e9      	ldr	r1, [r5, #12]
  407530:	f8ca 1014 	str.w	r1, [sl, #20]
  407534:	2a24      	cmp	r2, #36	; 0x24
  407536:	d00c      	beq.n	407552 <_realloc_r+0x2f6>
  407538:	3510      	adds	r5, #16
  40753a:	f10a 0218 	add.w	r2, sl, #24
  40753e:	e7b9      	b.n	4074b4 <_realloc_r+0x258>
  407540:	692b      	ldr	r3, [r5, #16]
  407542:	6103      	str	r3, [r0, #16]
  407544:	696b      	ldr	r3, [r5, #20]
  407546:	6143      	str	r3, [r0, #20]
  407548:	f105 0218 	add.w	r2, r5, #24
  40754c:	f100 0318 	add.w	r3, r0, #24
  407550:	e6cb      	b.n	4072ea <_realloc_r+0x8e>
  407552:	692a      	ldr	r2, [r5, #16]
  407554:	f8ca 2018 	str.w	r2, [sl, #24]
  407558:	696a      	ldr	r2, [r5, #20]
  40755a:	f8ca 201c 	str.w	r2, [sl, #28]
  40755e:	3518      	adds	r5, #24
  407560:	f10a 0220 	add.w	r2, sl, #32
  407564:	e7a6      	b.n	4074b4 <_realloc_r+0x258>
  407566:	4632      	mov	r2, r6
  407568:	e77f      	b.n	40746a <_realloc_r+0x20e>
  40756a:	4629      	mov	r1, r5
  40756c:	4630      	mov	r0, r6
  40756e:	9301      	str	r3, [sp, #4]
  407570:	f7ff fe10 	bl	407194 <memmove>
  407574:	9b01      	ldr	r3, [sp, #4]
  407576:	e77e      	b.n	407476 <_realloc_r+0x21a>
  407578:	68a9      	ldr	r1, [r5, #8]
  40757a:	f8ca 1010 	str.w	r1, [sl, #16]
  40757e:	68e9      	ldr	r1, [r5, #12]
  407580:	f8ca 1014 	str.w	r1, [sl, #20]
  407584:	2a24      	cmp	r2, #36	; 0x24
  407586:	d003      	beq.n	407590 <_realloc_r+0x334>
  407588:	3510      	adds	r5, #16
  40758a:	f10a 0218 	add.w	r2, sl, #24
  40758e:	e76c      	b.n	40746a <_realloc_r+0x20e>
  407590:	692a      	ldr	r2, [r5, #16]
  407592:	f8ca 2018 	str.w	r2, [sl, #24]
  407596:	696a      	ldr	r2, [r5, #20]
  407598:	f8ca 201c 	str.w	r2, [sl, #28]
  40759c:	3518      	adds	r5, #24
  40759e:	f10a 0220 	add.w	r2, sl, #32
  4075a2:	e762      	b.n	40746a <_realloc_r+0x20e>
  4075a4:	2000043c 	.word	0x2000043c

004075a8 <__ascii_wctomb>:
  4075a8:	b121      	cbz	r1, 4075b4 <__ascii_wctomb+0xc>
  4075aa:	2aff      	cmp	r2, #255	; 0xff
  4075ac:	d804      	bhi.n	4075b8 <__ascii_wctomb+0x10>
  4075ae:	700a      	strb	r2, [r1, #0]
  4075b0:	2001      	movs	r0, #1
  4075b2:	4770      	bx	lr
  4075b4:	4608      	mov	r0, r1
  4075b6:	4770      	bx	lr
  4075b8:	238a      	movs	r3, #138	; 0x8a
  4075ba:	6003      	str	r3, [r0, #0]
  4075bc:	f04f 30ff 	mov.w	r0, #4294967295
  4075c0:	4770      	bx	lr
  4075c2:	bf00      	nop

004075c4 <__aeabi_drsub>:
  4075c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4075c8:	e002      	b.n	4075d0 <__adddf3>
  4075ca:	bf00      	nop

004075cc <__aeabi_dsub>:
  4075cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004075d0 <__adddf3>:
  4075d0:	b530      	push	{r4, r5, lr}
  4075d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4075d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4075da:	ea94 0f05 	teq	r4, r5
  4075de:	bf08      	it	eq
  4075e0:	ea90 0f02 	teqeq	r0, r2
  4075e4:	bf1f      	itttt	ne
  4075e6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4075ea:	ea55 0c02 	orrsne.w	ip, r5, r2
  4075ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4075f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4075f6:	f000 80e2 	beq.w	4077be <__adddf3+0x1ee>
  4075fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4075fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407602:	bfb8      	it	lt
  407604:	426d      	neglt	r5, r5
  407606:	dd0c      	ble.n	407622 <__adddf3+0x52>
  407608:	442c      	add	r4, r5
  40760a:	ea80 0202 	eor.w	r2, r0, r2
  40760e:	ea81 0303 	eor.w	r3, r1, r3
  407612:	ea82 0000 	eor.w	r0, r2, r0
  407616:	ea83 0101 	eor.w	r1, r3, r1
  40761a:	ea80 0202 	eor.w	r2, r0, r2
  40761e:	ea81 0303 	eor.w	r3, r1, r3
  407622:	2d36      	cmp	r5, #54	; 0x36
  407624:	bf88      	it	hi
  407626:	bd30      	pophi	{r4, r5, pc}
  407628:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40762c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407630:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407634:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407638:	d002      	beq.n	407640 <__adddf3+0x70>
  40763a:	4240      	negs	r0, r0
  40763c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407640:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407644:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407648:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40764c:	d002      	beq.n	407654 <__adddf3+0x84>
  40764e:	4252      	negs	r2, r2
  407650:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407654:	ea94 0f05 	teq	r4, r5
  407658:	f000 80a7 	beq.w	4077aa <__adddf3+0x1da>
  40765c:	f1a4 0401 	sub.w	r4, r4, #1
  407660:	f1d5 0e20 	rsbs	lr, r5, #32
  407664:	db0d      	blt.n	407682 <__adddf3+0xb2>
  407666:	fa02 fc0e 	lsl.w	ip, r2, lr
  40766a:	fa22 f205 	lsr.w	r2, r2, r5
  40766e:	1880      	adds	r0, r0, r2
  407670:	f141 0100 	adc.w	r1, r1, #0
  407674:	fa03 f20e 	lsl.w	r2, r3, lr
  407678:	1880      	adds	r0, r0, r2
  40767a:	fa43 f305 	asr.w	r3, r3, r5
  40767e:	4159      	adcs	r1, r3
  407680:	e00e      	b.n	4076a0 <__adddf3+0xd0>
  407682:	f1a5 0520 	sub.w	r5, r5, #32
  407686:	f10e 0e20 	add.w	lr, lr, #32
  40768a:	2a01      	cmp	r2, #1
  40768c:	fa03 fc0e 	lsl.w	ip, r3, lr
  407690:	bf28      	it	cs
  407692:	f04c 0c02 	orrcs.w	ip, ip, #2
  407696:	fa43 f305 	asr.w	r3, r3, r5
  40769a:	18c0      	adds	r0, r0, r3
  40769c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4076a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4076a4:	d507      	bpl.n	4076b6 <__adddf3+0xe6>
  4076a6:	f04f 0e00 	mov.w	lr, #0
  4076aa:	f1dc 0c00 	rsbs	ip, ip, #0
  4076ae:	eb7e 0000 	sbcs.w	r0, lr, r0
  4076b2:	eb6e 0101 	sbc.w	r1, lr, r1
  4076b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4076ba:	d31b      	bcc.n	4076f4 <__adddf3+0x124>
  4076bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4076c0:	d30c      	bcc.n	4076dc <__adddf3+0x10c>
  4076c2:	0849      	lsrs	r1, r1, #1
  4076c4:	ea5f 0030 	movs.w	r0, r0, rrx
  4076c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4076cc:	f104 0401 	add.w	r4, r4, #1
  4076d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4076d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4076d8:	f080 809a 	bcs.w	407810 <__adddf3+0x240>
  4076dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4076e0:	bf08      	it	eq
  4076e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4076e6:	f150 0000 	adcs.w	r0, r0, #0
  4076ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4076ee:	ea41 0105 	orr.w	r1, r1, r5
  4076f2:	bd30      	pop	{r4, r5, pc}
  4076f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4076f8:	4140      	adcs	r0, r0
  4076fa:	eb41 0101 	adc.w	r1, r1, r1
  4076fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407702:	f1a4 0401 	sub.w	r4, r4, #1
  407706:	d1e9      	bne.n	4076dc <__adddf3+0x10c>
  407708:	f091 0f00 	teq	r1, #0
  40770c:	bf04      	itt	eq
  40770e:	4601      	moveq	r1, r0
  407710:	2000      	moveq	r0, #0
  407712:	fab1 f381 	clz	r3, r1
  407716:	bf08      	it	eq
  407718:	3320      	addeq	r3, #32
  40771a:	f1a3 030b 	sub.w	r3, r3, #11
  40771e:	f1b3 0220 	subs.w	r2, r3, #32
  407722:	da0c      	bge.n	40773e <__adddf3+0x16e>
  407724:	320c      	adds	r2, #12
  407726:	dd08      	ble.n	40773a <__adddf3+0x16a>
  407728:	f102 0c14 	add.w	ip, r2, #20
  40772c:	f1c2 020c 	rsb	r2, r2, #12
  407730:	fa01 f00c 	lsl.w	r0, r1, ip
  407734:	fa21 f102 	lsr.w	r1, r1, r2
  407738:	e00c      	b.n	407754 <__adddf3+0x184>
  40773a:	f102 0214 	add.w	r2, r2, #20
  40773e:	bfd8      	it	le
  407740:	f1c2 0c20 	rsble	ip, r2, #32
  407744:	fa01 f102 	lsl.w	r1, r1, r2
  407748:	fa20 fc0c 	lsr.w	ip, r0, ip
  40774c:	bfdc      	itt	le
  40774e:	ea41 010c 	orrle.w	r1, r1, ip
  407752:	4090      	lslle	r0, r2
  407754:	1ae4      	subs	r4, r4, r3
  407756:	bfa2      	ittt	ge
  407758:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40775c:	4329      	orrge	r1, r5
  40775e:	bd30      	popge	{r4, r5, pc}
  407760:	ea6f 0404 	mvn.w	r4, r4
  407764:	3c1f      	subs	r4, #31
  407766:	da1c      	bge.n	4077a2 <__adddf3+0x1d2>
  407768:	340c      	adds	r4, #12
  40776a:	dc0e      	bgt.n	40778a <__adddf3+0x1ba>
  40776c:	f104 0414 	add.w	r4, r4, #20
  407770:	f1c4 0220 	rsb	r2, r4, #32
  407774:	fa20 f004 	lsr.w	r0, r0, r4
  407778:	fa01 f302 	lsl.w	r3, r1, r2
  40777c:	ea40 0003 	orr.w	r0, r0, r3
  407780:	fa21 f304 	lsr.w	r3, r1, r4
  407784:	ea45 0103 	orr.w	r1, r5, r3
  407788:	bd30      	pop	{r4, r5, pc}
  40778a:	f1c4 040c 	rsb	r4, r4, #12
  40778e:	f1c4 0220 	rsb	r2, r4, #32
  407792:	fa20 f002 	lsr.w	r0, r0, r2
  407796:	fa01 f304 	lsl.w	r3, r1, r4
  40779a:	ea40 0003 	orr.w	r0, r0, r3
  40779e:	4629      	mov	r1, r5
  4077a0:	bd30      	pop	{r4, r5, pc}
  4077a2:	fa21 f004 	lsr.w	r0, r1, r4
  4077a6:	4629      	mov	r1, r5
  4077a8:	bd30      	pop	{r4, r5, pc}
  4077aa:	f094 0f00 	teq	r4, #0
  4077ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4077b2:	bf06      	itte	eq
  4077b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4077b8:	3401      	addeq	r4, #1
  4077ba:	3d01      	subne	r5, #1
  4077bc:	e74e      	b.n	40765c <__adddf3+0x8c>
  4077be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4077c2:	bf18      	it	ne
  4077c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4077c8:	d029      	beq.n	40781e <__adddf3+0x24e>
  4077ca:	ea94 0f05 	teq	r4, r5
  4077ce:	bf08      	it	eq
  4077d0:	ea90 0f02 	teqeq	r0, r2
  4077d4:	d005      	beq.n	4077e2 <__adddf3+0x212>
  4077d6:	ea54 0c00 	orrs.w	ip, r4, r0
  4077da:	bf04      	itt	eq
  4077dc:	4619      	moveq	r1, r3
  4077de:	4610      	moveq	r0, r2
  4077e0:	bd30      	pop	{r4, r5, pc}
  4077e2:	ea91 0f03 	teq	r1, r3
  4077e6:	bf1e      	ittt	ne
  4077e8:	2100      	movne	r1, #0
  4077ea:	2000      	movne	r0, #0
  4077ec:	bd30      	popne	{r4, r5, pc}
  4077ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4077f2:	d105      	bne.n	407800 <__adddf3+0x230>
  4077f4:	0040      	lsls	r0, r0, #1
  4077f6:	4149      	adcs	r1, r1
  4077f8:	bf28      	it	cs
  4077fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4077fe:	bd30      	pop	{r4, r5, pc}
  407800:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407804:	bf3c      	itt	cc
  407806:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40780a:	bd30      	popcc	{r4, r5, pc}
  40780c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407810:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407814:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407818:	f04f 0000 	mov.w	r0, #0
  40781c:	bd30      	pop	{r4, r5, pc}
  40781e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407822:	bf1a      	itte	ne
  407824:	4619      	movne	r1, r3
  407826:	4610      	movne	r0, r2
  407828:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40782c:	bf1c      	itt	ne
  40782e:	460b      	movne	r3, r1
  407830:	4602      	movne	r2, r0
  407832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407836:	bf06      	itte	eq
  407838:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40783c:	ea91 0f03 	teqeq	r1, r3
  407840:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407844:	bd30      	pop	{r4, r5, pc}
  407846:	bf00      	nop

00407848 <__aeabi_ui2d>:
  407848:	f090 0f00 	teq	r0, #0
  40784c:	bf04      	itt	eq
  40784e:	2100      	moveq	r1, #0
  407850:	4770      	bxeq	lr
  407852:	b530      	push	{r4, r5, lr}
  407854:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407858:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40785c:	f04f 0500 	mov.w	r5, #0
  407860:	f04f 0100 	mov.w	r1, #0
  407864:	e750      	b.n	407708 <__adddf3+0x138>
  407866:	bf00      	nop

00407868 <__aeabi_i2d>:
  407868:	f090 0f00 	teq	r0, #0
  40786c:	bf04      	itt	eq
  40786e:	2100      	moveq	r1, #0
  407870:	4770      	bxeq	lr
  407872:	b530      	push	{r4, r5, lr}
  407874:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407878:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40787c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407880:	bf48      	it	mi
  407882:	4240      	negmi	r0, r0
  407884:	f04f 0100 	mov.w	r1, #0
  407888:	e73e      	b.n	407708 <__adddf3+0x138>
  40788a:	bf00      	nop

0040788c <__aeabi_f2d>:
  40788c:	0042      	lsls	r2, r0, #1
  40788e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407892:	ea4f 0131 	mov.w	r1, r1, rrx
  407896:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40789a:	bf1f      	itttt	ne
  40789c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4078a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4078a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4078a8:	4770      	bxne	lr
  4078aa:	f092 0f00 	teq	r2, #0
  4078ae:	bf14      	ite	ne
  4078b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4078b4:	4770      	bxeq	lr
  4078b6:	b530      	push	{r4, r5, lr}
  4078b8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4078bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4078c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4078c4:	e720      	b.n	407708 <__adddf3+0x138>
  4078c6:	bf00      	nop

004078c8 <__aeabi_ul2d>:
  4078c8:	ea50 0201 	orrs.w	r2, r0, r1
  4078cc:	bf08      	it	eq
  4078ce:	4770      	bxeq	lr
  4078d0:	b530      	push	{r4, r5, lr}
  4078d2:	f04f 0500 	mov.w	r5, #0
  4078d6:	e00a      	b.n	4078ee <__aeabi_l2d+0x16>

004078d8 <__aeabi_l2d>:
  4078d8:	ea50 0201 	orrs.w	r2, r0, r1
  4078dc:	bf08      	it	eq
  4078de:	4770      	bxeq	lr
  4078e0:	b530      	push	{r4, r5, lr}
  4078e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4078e6:	d502      	bpl.n	4078ee <__aeabi_l2d+0x16>
  4078e8:	4240      	negs	r0, r0
  4078ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4078ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4078f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4078f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4078fa:	f43f aedc 	beq.w	4076b6 <__adddf3+0xe6>
  4078fe:	f04f 0203 	mov.w	r2, #3
  407902:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407906:	bf18      	it	ne
  407908:	3203      	addne	r2, #3
  40790a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40790e:	bf18      	it	ne
  407910:	3203      	addne	r2, #3
  407912:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407916:	f1c2 0320 	rsb	r3, r2, #32
  40791a:	fa00 fc03 	lsl.w	ip, r0, r3
  40791e:	fa20 f002 	lsr.w	r0, r0, r2
  407922:	fa01 fe03 	lsl.w	lr, r1, r3
  407926:	ea40 000e 	orr.w	r0, r0, lr
  40792a:	fa21 f102 	lsr.w	r1, r1, r2
  40792e:	4414      	add	r4, r2
  407930:	e6c1      	b.n	4076b6 <__adddf3+0xe6>
  407932:	bf00      	nop

00407934 <__aeabi_dmul>:
  407934:	b570      	push	{r4, r5, r6, lr}
  407936:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40793a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40793e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407942:	bf1d      	ittte	ne
  407944:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407948:	ea94 0f0c 	teqne	r4, ip
  40794c:	ea95 0f0c 	teqne	r5, ip
  407950:	f000 f8de 	bleq	407b10 <__aeabi_dmul+0x1dc>
  407954:	442c      	add	r4, r5
  407956:	ea81 0603 	eor.w	r6, r1, r3
  40795a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40795e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407962:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  407966:	bf18      	it	ne
  407968:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40796c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407974:	d038      	beq.n	4079e8 <__aeabi_dmul+0xb4>
  407976:	fba0 ce02 	umull	ip, lr, r0, r2
  40797a:	f04f 0500 	mov.w	r5, #0
  40797e:	fbe1 e502 	umlal	lr, r5, r1, r2
  407982:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  407986:	fbe0 e503 	umlal	lr, r5, r0, r3
  40798a:	f04f 0600 	mov.w	r6, #0
  40798e:	fbe1 5603 	umlal	r5, r6, r1, r3
  407992:	f09c 0f00 	teq	ip, #0
  407996:	bf18      	it	ne
  407998:	f04e 0e01 	orrne.w	lr, lr, #1
  40799c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4079a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4079a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4079a8:	d204      	bcs.n	4079b4 <__aeabi_dmul+0x80>
  4079aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4079ae:	416d      	adcs	r5, r5
  4079b0:	eb46 0606 	adc.w	r6, r6, r6
  4079b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4079b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4079bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4079c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4079c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4079c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4079cc:	bf88      	it	hi
  4079ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4079d2:	d81e      	bhi.n	407a12 <__aeabi_dmul+0xde>
  4079d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4079d8:	bf08      	it	eq
  4079da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4079de:	f150 0000 	adcs.w	r0, r0, #0
  4079e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4079e6:	bd70      	pop	{r4, r5, r6, pc}
  4079e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4079ec:	ea46 0101 	orr.w	r1, r6, r1
  4079f0:	ea40 0002 	orr.w	r0, r0, r2
  4079f4:	ea81 0103 	eor.w	r1, r1, r3
  4079f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4079fc:	bfc2      	ittt	gt
  4079fe:	ebd4 050c 	rsbsgt	r5, r4, ip
  407a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407a06:	bd70      	popgt	{r4, r5, r6, pc}
  407a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407a0c:	f04f 0e00 	mov.w	lr, #0
  407a10:	3c01      	subs	r4, #1
  407a12:	f300 80ab 	bgt.w	407b6c <__aeabi_dmul+0x238>
  407a16:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407a1a:	bfde      	ittt	le
  407a1c:	2000      	movle	r0, #0
  407a1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407a22:	bd70      	pople	{r4, r5, r6, pc}
  407a24:	f1c4 0400 	rsb	r4, r4, #0
  407a28:	3c20      	subs	r4, #32
  407a2a:	da35      	bge.n	407a98 <__aeabi_dmul+0x164>
  407a2c:	340c      	adds	r4, #12
  407a2e:	dc1b      	bgt.n	407a68 <__aeabi_dmul+0x134>
  407a30:	f104 0414 	add.w	r4, r4, #20
  407a34:	f1c4 0520 	rsb	r5, r4, #32
  407a38:	fa00 f305 	lsl.w	r3, r0, r5
  407a3c:	fa20 f004 	lsr.w	r0, r0, r4
  407a40:	fa01 f205 	lsl.w	r2, r1, r5
  407a44:	ea40 0002 	orr.w	r0, r0, r2
  407a48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407a4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407a50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407a54:	fa21 f604 	lsr.w	r6, r1, r4
  407a58:	eb42 0106 	adc.w	r1, r2, r6
  407a5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407a60:	bf08      	it	eq
  407a62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407a66:	bd70      	pop	{r4, r5, r6, pc}
  407a68:	f1c4 040c 	rsb	r4, r4, #12
  407a6c:	f1c4 0520 	rsb	r5, r4, #32
  407a70:	fa00 f304 	lsl.w	r3, r0, r4
  407a74:	fa20 f005 	lsr.w	r0, r0, r5
  407a78:	fa01 f204 	lsl.w	r2, r1, r4
  407a7c:	ea40 0002 	orr.w	r0, r0, r2
  407a80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407a84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407a88:	f141 0100 	adc.w	r1, r1, #0
  407a8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407a90:	bf08      	it	eq
  407a92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407a96:	bd70      	pop	{r4, r5, r6, pc}
  407a98:	f1c4 0520 	rsb	r5, r4, #32
  407a9c:	fa00 f205 	lsl.w	r2, r0, r5
  407aa0:	ea4e 0e02 	orr.w	lr, lr, r2
  407aa4:	fa20 f304 	lsr.w	r3, r0, r4
  407aa8:	fa01 f205 	lsl.w	r2, r1, r5
  407aac:	ea43 0302 	orr.w	r3, r3, r2
  407ab0:	fa21 f004 	lsr.w	r0, r1, r4
  407ab4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407ab8:	fa21 f204 	lsr.w	r2, r1, r4
  407abc:	ea20 0002 	bic.w	r0, r0, r2
  407ac0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407ac4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407ac8:	bf08      	it	eq
  407aca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407ace:	bd70      	pop	{r4, r5, r6, pc}
  407ad0:	f094 0f00 	teq	r4, #0
  407ad4:	d10f      	bne.n	407af6 <__aeabi_dmul+0x1c2>
  407ad6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407ada:	0040      	lsls	r0, r0, #1
  407adc:	eb41 0101 	adc.w	r1, r1, r1
  407ae0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407ae4:	bf08      	it	eq
  407ae6:	3c01      	subeq	r4, #1
  407ae8:	d0f7      	beq.n	407ada <__aeabi_dmul+0x1a6>
  407aea:	ea41 0106 	orr.w	r1, r1, r6
  407aee:	f095 0f00 	teq	r5, #0
  407af2:	bf18      	it	ne
  407af4:	4770      	bxne	lr
  407af6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407afa:	0052      	lsls	r2, r2, #1
  407afc:	eb43 0303 	adc.w	r3, r3, r3
  407b00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407b04:	bf08      	it	eq
  407b06:	3d01      	subeq	r5, #1
  407b08:	d0f7      	beq.n	407afa <__aeabi_dmul+0x1c6>
  407b0a:	ea43 0306 	orr.w	r3, r3, r6
  407b0e:	4770      	bx	lr
  407b10:	ea94 0f0c 	teq	r4, ip
  407b14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407b18:	bf18      	it	ne
  407b1a:	ea95 0f0c 	teqne	r5, ip
  407b1e:	d00c      	beq.n	407b3a <__aeabi_dmul+0x206>
  407b20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407b24:	bf18      	it	ne
  407b26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407b2a:	d1d1      	bne.n	407ad0 <__aeabi_dmul+0x19c>
  407b2c:	ea81 0103 	eor.w	r1, r1, r3
  407b30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407b34:	f04f 0000 	mov.w	r0, #0
  407b38:	bd70      	pop	{r4, r5, r6, pc}
  407b3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407b3e:	bf06      	itte	eq
  407b40:	4610      	moveq	r0, r2
  407b42:	4619      	moveq	r1, r3
  407b44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407b48:	d019      	beq.n	407b7e <__aeabi_dmul+0x24a>
  407b4a:	ea94 0f0c 	teq	r4, ip
  407b4e:	d102      	bne.n	407b56 <__aeabi_dmul+0x222>
  407b50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407b54:	d113      	bne.n	407b7e <__aeabi_dmul+0x24a>
  407b56:	ea95 0f0c 	teq	r5, ip
  407b5a:	d105      	bne.n	407b68 <__aeabi_dmul+0x234>
  407b5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407b60:	bf1c      	itt	ne
  407b62:	4610      	movne	r0, r2
  407b64:	4619      	movne	r1, r3
  407b66:	d10a      	bne.n	407b7e <__aeabi_dmul+0x24a>
  407b68:	ea81 0103 	eor.w	r1, r1, r3
  407b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407b70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407b74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407b78:	f04f 0000 	mov.w	r0, #0
  407b7c:	bd70      	pop	{r4, r5, r6, pc}
  407b7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407b82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  407b86:	bd70      	pop	{r4, r5, r6, pc}

00407b88 <__aeabi_ddiv>:
  407b88:	b570      	push	{r4, r5, r6, lr}
  407b8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407b8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407b92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407b96:	bf1d      	ittte	ne
  407b98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407b9c:	ea94 0f0c 	teqne	r4, ip
  407ba0:	ea95 0f0c 	teqne	r5, ip
  407ba4:	f000 f8a7 	bleq	407cf6 <__aeabi_ddiv+0x16e>
  407ba8:	eba4 0405 	sub.w	r4, r4, r5
  407bac:	ea81 0e03 	eor.w	lr, r1, r3
  407bb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407bb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407bb8:	f000 8088 	beq.w	407ccc <__aeabi_ddiv+0x144>
  407bbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407bc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407bc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407bc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407bcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407bd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407bd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407bd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407bdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407be0:	429d      	cmp	r5, r3
  407be2:	bf08      	it	eq
  407be4:	4296      	cmpeq	r6, r2
  407be6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407bea:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407bee:	d202      	bcs.n	407bf6 <__aeabi_ddiv+0x6e>
  407bf0:	085b      	lsrs	r3, r3, #1
  407bf2:	ea4f 0232 	mov.w	r2, r2, rrx
  407bf6:	1ab6      	subs	r6, r6, r2
  407bf8:	eb65 0503 	sbc.w	r5, r5, r3
  407bfc:	085b      	lsrs	r3, r3, #1
  407bfe:	ea4f 0232 	mov.w	r2, r2, rrx
  407c02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407c06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407c0a:	ebb6 0e02 	subs.w	lr, r6, r2
  407c0e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407c12:	bf22      	ittt	cs
  407c14:	1ab6      	subcs	r6, r6, r2
  407c16:	4675      	movcs	r5, lr
  407c18:	ea40 000c 	orrcs.w	r0, r0, ip
  407c1c:	085b      	lsrs	r3, r3, #1
  407c1e:	ea4f 0232 	mov.w	r2, r2, rrx
  407c22:	ebb6 0e02 	subs.w	lr, r6, r2
  407c26:	eb75 0e03 	sbcs.w	lr, r5, r3
  407c2a:	bf22      	ittt	cs
  407c2c:	1ab6      	subcs	r6, r6, r2
  407c2e:	4675      	movcs	r5, lr
  407c30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407c34:	085b      	lsrs	r3, r3, #1
  407c36:	ea4f 0232 	mov.w	r2, r2, rrx
  407c3a:	ebb6 0e02 	subs.w	lr, r6, r2
  407c3e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407c42:	bf22      	ittt	cs
  407c44:	1ab6      	subcs	r6, r6, r2
  407c46:	4675      	movcs	r5, lr
  407c48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407c4c:	085b      	lsrs	r3, r3, #1
  407c4e:	ea4f 0232 	mov.w	r2, r2, rrx
  407c52:	ebb6 0e02 	subs.w	lr, r6, r2
  407c56:	eb75 0e03 	sbcs.w	lr, r5, r3
  407c5a:	bf22      	ittt	cs
  407c5c:	1ab6      	subcs	r6, r6, r2
  407c5e:	4675      	movcs	r5, lr
  407c60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407c64:	ea55 0e06 	orrs.w	lr, r5, r6
  407c68:	d018      	beq.n	407c9c <__aeabi_ddiv+0x114>
  407c6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407c6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407c72:	ea4f 1606 	mov.w	r6, r6, lsl #4
  407c76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  407c7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407c7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407c82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  407c86:	d1c0      	bne.n	407c0a <__aeabi_ddiv+0x82>
  407c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407c8c:	d10b      	bne.n	407ca6 <__aeabi_ddiv+0x11e>
  407c8e:	ea41 0100 	orr.w	r1, r1, r0
  407c92:	f04f 0000 	mov.w	r0, #0
  407c96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407c9a:	e7b6      	b.n	407c0a <__aeabi_ddiv+0x82>
  407c9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407ca0:	bf04      	itt	eq
  407ca2:	4301      	orreq	r1, r0
  407ca4:	2000      	moveq	r0, #0
  407ca6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407caa:	bf88      	it	hi
  407cac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407cb0:	f63f aeaf 	bhi.w	407a12 <__aeabi_dmul+0xde>
  407cb4:	ebb5 0c03 	subs.w	ip, r5, r3
  407cb8:	bf04      	itt	eq
  407cba:	ebb6 0c02 	subseq.w	ip, r6, r2
  407cbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407cc2:	f150 0000 	adcs.w	r0, r0, #0
  407cc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407cca:	bd70      	pop	{r4, r5, r6, pc}
  407ccc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407cd0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407cd4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407cd8:	bfc2      	ittt	gt
  407cda:	ebd4 050c 	rsbsgt	r5, r4, ip
  407cde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407ce2:	bd70      	popgt	{r4, r5, r6, pc}
  407ce4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407ce8:	f04f 0e00 	mov.w	lr, #0
  407cec:	3c01      	subs	r4, #1
  407cee:	e690      	b.n	407a12 <__aeabi_dmul+0xde>
  407cf0:	ea45 0e06 	orr.w	lr, r5, r6
  407cf4:	e68d      	b.n	407a12 <__aeabi_dmul+0xde>
  407cf6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407cfa:	ea94 0f0c 	teq	r4, ip
  407cfe:	bf08      	it	eq
  407d00:	ea95 0f0c 	teqeq	r5, ip
  407d04:	f43f af3b 	beq.w	407b7e <__aeabi_dmul+0x24a>
  407d08:	ea94 0f0c 	teq	r4, ip
  407d0c:	d10a      	bne.n	407d24 <__aeabi_ddiv+0x19c>
  407d0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407d12:	f47f af34 	bne.w	407b7e <__aeabi_dmul+0x24a>
  407d16:	ea95 0f0c 	teq	r5, ip
  407d1a:	f47f af25 	bne.w	407b68 <__aeabi_dmul+0x234>
  407d1e:	4610      	mov	r0, r2
  407d20:	4619      	mov	r1, r3
  407d22:	e72c      	b.n	407b7e <__aeabi_dmul+0x24a>
  407d24:	ea95 0f0c 	teq	r5, ip
  407d28:	d106      	bne.n	407d38 <__aeabi_ddiv+0x1b0>
  407d2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407d2e:	f43f aefd 	beq.w	407b2c <__aeabi_dmul+0x1f8>
  407d32:	4610      	mov	r0, r2
  407d34:	4619      	mov	r1, r3
  407d36:	e722      	b.n	407b7e <__aeabi_dmul+0x24a>
  407d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407d3c:	bf18      	it	ne
  407d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407d42:	f47f aec5 	bne.w	407ad0 <__aeabi_dmul+0x19c>
  407d46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  407d4a:	f47f af0d 	bne.w	407b68 <__aeabi_dmul+0x234>
  407d4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407d52:	f47f aeeb 	bne.w	407b2c <__aeabi_dmul+0x1f8>
  407d56:	e712      	b.n	407b7e <__aeabi_dmul+0x24a>

00407d58 <__gedf2>:
  407d58:	f04f 3cff 	mov.w	ip, #4294967295
  407d5c:	e006      	b.n	407d6c <__cmpdf2+0x4>
  407d5e:	bf00      	nop

00407d60 <__ledf2>:
  407d60:	f04f 0c01 	mov.w	ip, #1
  407d64:	e002      	b.n	407d6c <__cmpdf2+0x4>
  407d66:	bf00      	nop

00407d68 <__cmpdf2>:
  407d68:	f04f 0c01 	mov.w	ip, #1
  407d6c:	f84d cd04 	str.w	ip, [sp, #-4]!
  407d70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407d74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407d78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407d7c:	bf18      	it	ne
  407d7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407d82:	d01b      	beq.n	407dbc <__cmpdf2+0x54>
  407d84:	b001      	add	sp, #4
  407d86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  407d8a:	bf0c      	ite	eq
  407d8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407d90:	ea91 0f03 	teqne	r1, r3
  407d94:	bf02      	ittt	eq
  407d96:	ea90 0f02 	teqeq	r0, r2
  407d9a:	2000      	moveq	r0, #0
  407d9c:	4770      	bxeq	lr
  407d9e:	f110 0f00 	cmn.w	r0, #0
  407da2:	ea91 0f03 	teq	r1, r3
  407da6:	bf58      	it	pl
  407da8:	4299      	cmppl	r1, r3
  407daa:	bf08      	it	eq
  407dac:	4290      	cmpeq	r0, r2
  407dae:	bf2c      	ite	cs
  407db0:	17d8      	asrcs	r0, r3, #31
  407db2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407db6:	f040 0001 	orr.w	r0, r0, #1
  407dba:	4770      	bx	lr
  407dbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407dc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407dc4:	d102      	bne.n	407dcc <__cmpdf2+0x64>
  407dc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407dca:	d107      	bne.n	407ddc <__cmpdf2+0x74>
  407dcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407dd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407dd4:	d1d6      	bne.n	407d84 <__cmpdf2+0x1c>
  407dd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407dda:	d0d3      	beq.n	407d84 <__cmpdf2+0x1c>
  407ddc:	f85d 0b04 	ldr.w	r0, [sp], #4
  407de0:	4770      	bx	lr
  407de2:	bf00      	nop

00407de4 <__aeabi_cdrcmple>:
  407de4:	4684      	mov	ip, r0
  407de6:	4610      	mov	r0, r2
  407de8:	4662      	mov	r2, ip
  407dea:	468c      	mov	ip, r1
  407dec:	4619      	mov	r1, r3
  407dee:	4663      	mov	r3, ip
  407df0:	e000      	b.n	407df4 <__aeabi_cdcmpeq>
  407df2:	bf00      	nop

00407df4 <__aeabi_cdcmpeq>:
  407df4:	b501      	push	{r0, lr}
  407df6:	f7ff ffb7 	bl	407d68 <__cmpdf2>
  407dfa:	2800      	cmp	r0, #0
  407dfc:	bf48      	it	mi
  407dfe:	f110 0f00 	cmnmi.w	r0, #0
  407e02:	bd01      	pop	{r0, pc}

00407e04 <__aeabi_dcmpeq>:
  407e04:	f84d ed08 	str.w	lr, [sp, #-8]!
  407e08:	f7ff fff4 	bl	407df4 <__aeabi_cdcmpeq>
  407e0c:	bf0c      	ite	eq
  407e0e:	2001      	moveq	r0, #1
  407e10:	2000      	movne	r0, #0
  407e12:	f85d fb08 	ldr.w	pc, [sp], #8
  407e16:	bf00      	nop

00407e18 <__aeabi_dcmplt>:
  407e18:	f84d ed08 	str.w	lr, [sp, #-8]!
  407e1c:	f7ff ffea 	bl	407df4 <__aeabi_cdcmpeq>
  407e20:	bf34      	ite	cc
  407e22:	2001      	movcc	r0, #1
  407e24:	2000      	movcs	r0, #0
  407e26:	f85d fb08 	ldr.w	pc, [sp], #8
  407e2a:	bf00      	nop

00407e2c <__aeabi_dcmple>:
  407e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407e30:	f7ff ffe0 	bl	407df4 <__aeabi_cdcmpeq>
  407e34:	bf94      	ite	ls
  407e36:	2001      	movls	r0, #1
  407e38:	2000      	movhi	r0, #0
  407e3a:	f85d fb08 	ldr.w	pc, [sp], #8
  407e3e:	bf00      	nop

00407e40 <__aeabi_dcmpge>:
  407e40:	f84d ed08 	str.w	lr, [sp, #-8]!
  407e44:	f7ff ffce 	bl	407de4 <__aeabi_cdrcmple>
  407e48:	bf94      	ite	ls
  407e4a:	2001      	movls	r0, #1
  407e4c:	2000      	movhi	r0, #0
  407e4e:	f85d fb08 	ldr.w	pc, [sp], #8
  407e52:	bf00      	nop

00407e54 <__aeabi_dcmpgt>:
  407e54:	f84d ed08 	str.w	lr, [sp, #-8]!
  407e58:	f7ff ffc4 	bl	407de4 <__aeabi_cdrcmple>
  407e5c:	bf34      	ite	cc
  407e5e:	2001      	movcc	r0, #1
  407e60:	2000      	movcs	r0, #0
  407e62:	f85d fb08 	ldr.w	pc, [sp], #8
  407e66:	bf00      	nop

00407e68 <__aeabi_dcmpun>:
  407e68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407e6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407e70:	d102      	bne.n	407e78 <__aeabi_dcmpun+0x10>
  407e72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407e76:	d10a      	bne.n	407e8e <__aeabi_dcmpun+0x26>
  407e78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407e7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407e80:	d102      	bne.n	407e88 <__aeabi_dcmpun+0x20>
  407e82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407e86:	d102      	bne.n	407e8e <__aeabi_dcmpun+0x26>
  407e88:	f04f 0000 	mov.w	r0, #0
  407e8c:	4770      	bx	lr
  407e8e:	f04f 0001 	mov.w	r0, #1
  407e92:	4770      	bx	lr

00407e94 <__aeabi_d2iz>:
  407e94:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407e98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407e9c:	d215      	bcs.n	407eca <__aeabi_d2iz+0x36>
  407e9e:	d511      	bpl.n	407ec4 <__aeabi_d2iz+0x30>
  407ea0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407ea4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407ea8:	d912      	bls.n	407ed0 <__aeabi_d2iz+0x3c>
  407eaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407eb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407eb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407eba:	fa23 f002 	lsr.w	r0, r3, r2
  407ebe:	bf18      	it	ne
  407ec0:	4240      	negne	r0, r0
  407ec2:	4770      	bx	lr
  407ec4:	f04f 0000 	mov.w	r0, #0
  407ec8:	4770      	bx	lr
  407eca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407ece:	d105      	bne.n	407edc <__aeabi_d2iz+0x48>
  407ed0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407ed4:	bf08      	it	eq
  407ed6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407eda:	4770      	bx	lr
  407edc:	f04f 0000 	mov.w	r0, #0
  407ee0:	4770      	bx	lr
  407ee2:	bf00      	nop

00407ee4 <__aeabi_uldivmod>:
  407ee4:	b953      	cbnz	r3, 407efc <__aeabi_uldivmod+0x18>
  407ee6:	b94a      	cbnz	r2, 407efc <__aeabi_uldivmod+0x18>
  407ee8:	2900      	cmp	r1, #0
  407eea:	bf08      	it	eq
  407eec:	2800      	cmpeq	r0, #0
  407eee:	bf1c      	itt	ne
  407ef0:	f04f 31ff 	movne.w	r1, #4294967295
  407ef4:	f04f 30ff 	movne.w	r0, #4294967295
  407ef8:	f000 b97a 	b.w	4081f0 <__aeabi_idiv0>
  407efc:	f1ad 0c08 	sub.w	ip, sp, #8
  407f00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407f04:	f000 f806 	bl	407f14 <__udivmoddi4>
  407f08:	f8dd e004 	ldr.w	lr, [sp, #4]
  407f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407f10:	b004      	add	sp, #16
  407f12:	4770      	bx	lr

00407f14 <__udivmoddi4>:
  407f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407f18:	468c      	mov	ip, r1
  407f1a:	460d      	mov	r5, r1
  407f1c:	4604      	mov	r4, r0
  407f1e:	9e08      	ldr	r6, [sp, #32]
  407f20:	2b00      	cmp	r3, #0
  407f22:	d151      	bne.n	407fc8 <__udivmoddi4+0xb4>
  407f24:	428a      	cmp	r2, r1
  407f26:	4617      	mov	r7, r2
  407f28:	d96d      	bls.n	408006 <__udivmoddi4+0xf2>
  407f2a:	fab2 fe82 	clz	lr, r2
  407f2e:	f1be 0f00 	cmp.w	lr, #0
  407f32:	d00b      	beq.n	407f4c <__udivmoddi4+0x38>
  407f34:	f1ce 0c20 	rsb	ip, lr, #32
  407f38:	fa01 f50e 	lsl.w	r5, r1, lr
  407f3c:	fa20 fc0c 	lsr.w	ip, r0, ip
  407f40:	fa02 f70e 	lsl.w	r7, r2, lr
  407f44:	ea4c 0c05 	orr.w	ip, ip, r5
  407f48:	fa00 f40e 	lsl.w	r4, r0, lr
  407f4c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  407f50:	0c25      	lsrs	r5, r4, #16
  407f52:	fbbc f8fa 	udiv	r8, ip, sl
  407f56:	fa1f f987 	uxth.w	r9, r7
  407f5a:	fb0a cc18 	mls	ip, sl, r8, ip
  407f5e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  407f62:	fb08 f309 	mul.w	r3, r8, r9
  407f66:	42ab      	cmp	r3, r5
  407f68:	d90a      	bls.n	407f80 <__udivmoddi4+0x6c>
  407f6a:	19ed      	adds	r5, r5, r7
  407f6c:	f108 32ff 	add.w	r2, r8, #4294967295
  407f70:	f080 8123 	bcs.w	4081ba <__udivmoddi4+0x2a6>
  407f74:	42ab      	cmp	r3, r5
  407f76:	f240 8120 	bls.w	4081ba <__udivmoddi4+0x2a6>
  407f7a:	f1a8 0802 	sub.w	r8, r8, #2
  407f7e:	443d      	add	r5, r7
  407f80:	1aed      	subs	r5, r5, r3
  407f82:	b2a4      	uxth	r4, r4
  407f84:	fbb5 f0fa 	udiv	r0, r5, sl
  407f88:	fb0a 5510 	mls	r5, sl, r0, r5
  407f8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  407f90:	fb00 f909 	mul.w	r9, r0, r9
  407f94:	45a1      	cmp	r9, r4
  407f96:	d909      	bls.n	407fac <__udivmoddi4+0x98>
  407f98:	19e4      	adds	r4, r4, r7
  407f9a:	f100 33ff 	add.w	r3, r0, #4294967295
  407f9e:	f080 810a 	bcs.w	4081b6 <__udivmoddi4+0x2a2>
  407fa2:	45a1      	cmp	r9, r4
  407fa4:	f240 8107 	bls.w	4081b6 <__udivmoddi4+0x2a2>
  407fa8:	3802      	subs	r0, #2
  407faa:	443c      	add	r4, r7
  407fac:	eba4 0409 	sub.w	r4, r4, r9
  407fb0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  407fb4:	2100      	movs	r1, #0
  407fb6:	2e00      	cmp	r6, #0
  407fb8:	d061      	beq.n	40807e <__udivmoddi4+0x16a>
  407fba:	fa24 f40e 	lsr.w	r4, r4, lr
  407fbe:	2300      	movs	r3, #0
  407fc0:	6034      	str	r4, [r6, #0]
  407fc2:	6073      	str	r3, [r6, #4]
  407fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407fc8:	428b      	cmp	r3, r1
  407fca:	d907      	bls.n	407fdc <__udivmoddi4+0xc8>
  407fcc:	2e00      	cmp	r6, #0
  407fce:	d054      	beq.n	40807a <__udivmoddi4+0x166>
  407fd0:	2100      	movs	r1, #0
  407fd2:	e886 0021 	stmia.w	r6, {r0, r5}
  407fd6:	4608      	mov	r0, r1
  407fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407fdc:	fab3 f183 	clz	r1, r3
  407fe0:	2900      	cmp	r1, #0
  407fe2:	f040 808e 	bne.w	408102 <__udivmoddi4+0x1ee>
  407fe6:	42ab      	cmp	r3, r5
  407fe8:	d302      	bcc.n	407ff0 <__udivmoddi4+0xdc>
  407fea:	4282      	cmp	r2, r0
  407fec:	f200 80fa 	bhi.w	4081e4 <__udivmoddi4+0x2d0>
  407ff0:	1a84      	subs	r4, r0, r2
  407ff2:	eb65 0503 	sbc.w	r5, r5, r3
  407ff6:	2001      	movs	r0, #1
  407ff8:	46ac      	mov	ip, r5
  407ffa:	2e00      	cmp	r6, #0
  407ffc:	d03f      	beq.n	40807e <__udivmoddi4+0x16a>
  407ffe:	e886 1010 	stmia.w	r6, {r4, ip}
  408002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408006:	b912      	cbnz	r2, 40800e <__udivmoddi4+0xfa>
  408008:	2701      	movs	r7, #1
  40800a:	fbb7 f7f2 	udiv	r7, r7, r2
  40800e:	fab7 fe87 	clz	lr, r7
  408012:	f1be 0f00 	cmp.w	lr, #0
  408016:	d134      	bne.n	408082 <__udivmoddi4+0x16e>
  408018:	1beb      	subs	r3, r5, r7
  40801a:	0c3a      	lsrs	r2, r7, #16
  40801c:	fa1f fc87 	uxth.w	ip, r7
  408020:	2101      	movs	r1, #1
  408022:	fbb3 f8f2 	udiv	r8, r3, r2
  408026:	0c25      	lsrs	r5, r4, #16
  408028:	fb02 3318 	mls	r3, r2, r8, r3
  40802c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408030:	fb0c f308 	mul.w	r3, ip, r8
  408034:	42ab      	cmp	r3, r5
  408036:	d907      	bls.n	408048 <__udivmoddi4+0x134>
  408038:	19ed      	adds	r5, r5, r7
  40803a:	f108 30ff 	add.w	r0, r8, #4294967295
  40803e:	d202      	bcs.n	408046 <__udivmoddi4+0x132>
  408040:	42ab      	cmp	r3, r5
  408042:	f200 80d1 	bhi.w	4081e8 <__udivmoddi4+0x2d4>
  408046:	4680      	mov	r8, r0
  408048:	1aed      	subs	r5, r5, r3
  40804a:	b2a3      	uxth	r3, r4
  40804c:	fbb5 f0f2 	udiv	r0, r5, r2
  408050:	fb02 5510 	mls	r5, r2, r0, r5
  408054:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408058:	fb0c fc00 	mul.w	ip, ip, r0
  40805c:	45a4      	cmp	ip, r4
  40805e:	d907      	bls.n	408070 <__udivmoddi4+0x15c>
  408060:	19e4      	adds	r4, r4, r7
  408062:	f100 33ff 	add.w	r3, r0, #4294967295
  408066:	d202      	bcs.n	40806e <__udivmoddi4+0x15a>
  408068:	45a4      	cmp	ip, r4
  40806a:	f200 80b8 	bhi.w	4081de <__udivmoddi4+0x2ca>
  40806e:	4618      	mov	r0, r3
  408070:	eba4 040c 	sub.w	r4, r4, ip
  408074:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408078:	e79d      	b.n	407fb6 <__udivmoddi4+0xa2>
  40807a:	4631      	mov	r1, r6
  40807c:	4630      	mov	r0, r6
  40807e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408082:	f1ce 0420 	rsb	r4, lr, #32
  408086:	fa05 f30e 	lsl.w	r3, r5, lr
  40808a:	fa07 f70e 	lsl.w	r7, r7, lr
  40808e:	fa20 f804 	lsr.w	r8, r0, r4
  408092:	0c3a      	lsrs	r2, r7, #16
  408094:	fa25 f404 	lsr.w	r4, r5, r4
  408098:	ea48 0803 	orr.w	r8, r8, r3
  40809c:	fbb4 f1f2 	udiv	r1, r4, r2
  4080a0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4080a4:	fb02 4411 	mls	r4, r2, r1, r4
  4080a8:	fa1f fc87 	uxth.w	ip, r7
  4080ac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4080b0:	fb01 f30c 	mul.w	r3, r1, ip
  4080b4:	42ab      	cmp	r3, r5
  4080b6:	fa00 f40e 	lsl.w	r4, r0, lr
  4080ba:	d909      	bls.n	4080d0 <__udivmoddi4+0x1bc>
  4080bc:	19ed      	adds	r5, r5, r7
  4080be:	f101 30ff 	add.w	r0, r1, #4294967295
  4080c2:	f080 808a 	bcs.w	4081da <__udivmoddi4+0x2c6>
  4080c6:	42ab      	cmp	r3, r5
  4080c8:	f240 8087 	bls.w	4081da <__udivmoddi4+0x2c6>
  4080cc:	3902      	subs	r1, #2
  4080ce:	443d      	add	r5, r7
  4080d0:	1aeb      	subs	r3, r5, r3
  4080d2:	fa1f f588 	uxth.w	r5, r8
  4080d6:	fbb3 f0f2 	udiv	r0, r3, r2
  4080da:	fb02 3310 	mls	r3, r2, r0, r3
  4080de:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4080e2:	fb00 f30c 	mul.w	r3, r0, ip
  4080e6:	42ab      	cmp	r3, r5
  4080e8:	d907      	bls.n	4080fa <__udivmoddi4+0x1e6>
  4080ea:	19ed      	adds	r5, r5, r7
  4080ec:	f100 38ff 	add.w	r8, r0, #4294967295
  4080f0:	d26f      	bcs.n	4081d2 <__udivmoddi4+0x2be>
  4080f2:	42ab      	cmp	r3, r5
  4080f4:	d96d      	bls.n	4081d2 <__udivmoddi4+0x2be>
  4080f6:	3802      	subs	r0, #2
  4080f8:	443d      	add	r5, r7
  4080fa:	1aeb      	subs	r3, r5, r3
  4080fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408100:	e78f      	b.n	408022 <__udivmoddi4+0x10e>
  408102:	f1c1 0720 	rsb	r7, r1, #32
  408106:	fa22 f807 	lsr.w	r8, r2, r7
  40810a:	408b      	lsls	r3, r1
  40810c:	fa05 f401 	lsl.w	r4, r5, r1
  408110:	ea48 0303 	orr.w	r3, r8, r3
  408114:	fa20 fe07 	lsr.w	lr, r0, r7
  408118:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40811c:	40fd      	lsrs	r5, r7
  40811e:	ea4e 0e04 	orr.w	lr, lr, r4
  408122:	fbb5 f9fc 	udiv	r9, r5, ip
  408126:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40812a:	fb0c 5519 	mls	r5, ip, r9, r5
  40812e:	fa1f f883 	uxth.w	r8, r3
  408132:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408136:	fb09 f408 	mul.w	r4, r9, r8
  40813a:	42ac      	cmp	r4, r5
  40813c:	fa02 f201 	lsl.w	r2, r2, r1
  408140:	fa00 fa01 	lsl.w	sl, r0, r1
  408144:	d908      	bls.n	408158 <__udivmoddi4+0x244>
  408146:	18ed      	adds	r5, r5, r3
  408148:	f109 30ff 	add.w	r0, r9, #4294967295
  40814c:	d243      	bcs.n	4081d6 <__udivmoddi4+0x2c2>
  40814e:	42ac      	cmp	r4, r5
  408150:	d941      	bls.n	4081d6 <__udivmoddi4+0x2c2>
  408152:	f1a9 0902 	sub.w	r9, r9, #2
  408156:	441d      	add	r5, r3
  408158:	1b2d      	subs	r5, r5, r4
  40815a:	fa1f fe8e 	uxth.w	lr, lr
  40815e:	fbb5 f0fc 	udiv	r0, r5, ip
  408162:	fb0c 5510 	mls	r5, ip, r0, r5
  408166:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40816a:	fb00 f808 	mul.w	r8, r0, r8
  40816e:	45a0      	cmp	r8, r4
  408170:	d907      	bls.n	408182 <__udivmoddi4+0x26e>
  408172:	18e4      	adds	r4, r4, r3
  408174:	f100 35ff 	add.w	r5, r0, #4294967295
  408178:	d229      	bcs.n	4081ce <__udivmoddi4+0x2ba>
  40817a:	45a0      	cmp	r8, r4
  40817c:	d927      	bls.n	4081ce <__udivmoddi4+0x2ba>
  40817e:	3802      	subs	r0, #2
  408180:	441c      	add	r4, r3
  408182:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408186:	eba4 0408 	sub.w	r4, r4, r8
  40818a:	fba0 8902 	umull	r8, r9, r0, r2
  40818e:	454c      	cmp	r4, r9
  408190:	46c6      	mov	lr, r8
  408192:	464d      	mov	r5, r9
  408194:	d315      	bcc.n	4081c2 <__udivmoddi4+0x2ae>
  408196:	d012      	beq.n	4081be <__udivmoddi4+0x2aa>
  408198:	b156      	cbz	r6, 4081b0 <__udivmoddi4+0x29c>
  40819a:	ebba 030e 	subs.w	r3, sl, lr
  40819e:	eb64 0405 	sbc.w	r4, r4, r5
  4081a2:	fa04 f707 	lsl.w	r7, r4, r7
  4081a6:	40cb      	lsrs	r3, r1
  4081a8:	431f      	orrs	r7, r3
  4081aa:	40cc      	lsrs	r4, r1
  4081ac:	6037      	str	r7, [r6, #0]
  4081ae:	6074      	str	r4, [r6, #4]
  4081b0:	2100      	movs	r1, #0
  4081b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4081b6:	4618      	mov	r0, r3
  4081b8:	e6f8      	b.n	407fac <__udivmoddi4+0x98>
  4081ba:	4690      	mov	r8, r2
  4081bc:	e6e0      	b.n	407f80 <__udivmoddi4+0x6c>
  4081be:	45c2      	cmp	sl, r8
  4081c0:	d2ea      	bcs.n	408198 <__udivmoddi4+0x284>
  4081c2:	ebb8 0e02 	subs.w	lr, r8, r2
  4081c6:	eb69 0503 	sbc.w	r5, r9, r3
  4081ca:	3801      	subs	r0, #1
  4081cc:	e7e4      	b.n	408198 <__udivmoddi4+0x284>
  4081ce:	4628      	mov	r0, r5
  4081d0:	e7d7      	b.n	408182 <__udivmoddi4+0x26e>
  4081d2:	4640      	mov	r0, r8
  4081d4:	e791      	b.n	4080fa <__udivmoddi4+0x1e6>
  4081d6:	4681      	mov	r9, r0
  4081d8:	e7be      	b.n	408158 <__udivmoddi4+0x244>
  4081da:	4601      	mov	r1, r0
  4081dc:	e778      	b.n	4080d0 <__udivmoddi4+0x1bc>
  4081de:	3802      	subs	r0, #2
  4081e0:	443c      	add	r4, r7
  4081e2:	e745      	b.n	408070 <__udivmoddi4+0x15c>
  4081e4:	4608      	mov	r0, r1
  4081e6:	e708      	b.n	407ffa <__udivmoddi4+0xe6>
  4081e8:	f1a8 0802 	sub.w	r8, r8, #2
  4081ec:	443d      	add	r5, r7
  4081ee:	e72b      	b.n	408048 <__udivmoddi4+0x134>

004081f0 <__aeabi_idiv0>:
  4081f0:	4770      	bx	lr
  4081f2:	bf00      	nop

004081f4 <mmc_trans_multipliers>:
  4081f4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  408204:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  408214:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  408224:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00408234 <sd_mmc_trans_units>:
  408234:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00408250 <sd_trans_multipliers>:
  408250:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  408260:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  408270:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  408280:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00408290 <lun_desc>:
  408290:	0e25 0040 0e65 0040 0e85 0040 0e9d 0040     %.@.e.@...@...@.
  4082a0:	0ebd 0040 0f01 0040 0f65 0040 82d0 0040     ..@...@.e.@...@.
  4082b0:	0e35 0040 0e75 0040 0e91 0040 0ead 0040     5.@.u.@...@...@.
  4082c0:	0ec1 0040 0f15 0040 0f79 0040 82e8 0040     ..@...@.y.@...@.
  4082d0:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
  4082e0:	2074 2230 0000 0000 5322 2f44 4d4d 2043     t 0"...."SD/MMC 
  4082f0:	6143 6472 5320 6f6c 2074 2231 0000 0000     Card Slot 1"....

00408300 <LfnOfs>:
  408300:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

00408310 <excvt.5682>:
  408310:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  408320:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  408330:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  408340:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  408350:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  408360:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  408370:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  408380:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  408390:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  4083a0:	5d5b 0000                                   []..

004083a4 <Tbl>:
  4083a4:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  4083b4:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  4083c4:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  4083d4:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  4083e4:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  4083f4:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  408404:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  408414:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  408424:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  408434:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  408444:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  408454:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  408464:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  408474:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  408484:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  408494:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

004084a4 <tbl_lower.5432>:
  4084a4:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  4084b4:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  4084c4:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  4084d4:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  4084e4:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  4084f4:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  408504:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  408514:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  408524:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  408534:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  408544:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  408554:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  408564:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  408574:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  408584:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  408594:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  4085a4:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  4085b4:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  4085c4:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  4085d4:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  4085e4:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  4085f4:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  408604:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  408614:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  408624:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  408634:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  408644:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  408654:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  408664:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  408674:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00408684 <tbl_upper.5433>:
  408684:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  408694:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  4086a4:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  4086b4:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  4086c4:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  4086d4:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  4086e4:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  4086f4:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  408704:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  408714:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  408724:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  408734:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  408744:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  408754:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  408764:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  408774:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  408784:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  408794:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  4087a4:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  4087b4:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  4087c4:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  4087d4:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  4087e4:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  4087f4:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  408804:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  408814:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  408824:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  408834:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  408844:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  408854:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
  408864:	6143 6170 6963 7974 203a 6c25 0a75 0000     Capacity: %lu...
  408874:	3a30 6173 5f6d 7261 5f6d 6473 742e 7478     0:sam_arm_sd.txt
  408884:	0000 0000                                   ....

00408888 <_global_impure_ptr>:
  408888:	0010 2000 4e49 0046 6e69 0066 414e 004e     ... INF.inf.NAN.
  408898:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  4088a8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  4088b8:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  4088c8:	296c 0000 0030 0000                         l)..0...

004088d0 <blanks.7223>:
  4088d0:	2020 2020 2020 2020 2020 2020 2020 2020                     

004088e0 <zeroes.7224>:
  4088e0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4088f0:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00408900 <__mprec_bigtens>:
  408900:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  408910:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  408920:	bf3c 7f73 4fdd 7515                         <.s..O.u

00408928 <__mprec_tens>:
  408928:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  408938:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  408948:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  408958:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  408968:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  408978:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  408988:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  408998:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4089a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  4089b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  4089c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  4089d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4089e8:	9db4 79d9 7843 44ea                         ...yCx.D

004089f0 <p05.6055>:
  4089f0:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  408a00:	4f50 4953 0058 0000 002e 0000               POSIX.......

00408a0c <_ctype_>:
  408a0c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  408a1c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  408a2c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  408a3c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  408a4c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  408a5c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  408a6c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  408a7c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  408a8c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00408b10 <_init>:
  408b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408b12:	bf00      	nop
  408b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408b16:	bc08      	pop	{r3}
  408b18:	469e      	mov	lr, r3
  408b1a:	4770      	bx	lr

00408b1c <__init_array_start>:
  408b1c:	00404e5d 	.word	0x00404e5d

00408b20 <__frame_dummy_init_array_entry>:
  408b20:	0040011d                                ..@.

00408b24 <_fini>:
  408b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408b26:	bf00      	nop
  408b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408b2a:	bc08      	pop	{r3}
  408b2c:	469e      	mov	lr, r3
  408b2e:	4770      	bx	lr

00408b30 <__fini_array_start>:
  408b30:	004000f9 	.word	0x004000f9
