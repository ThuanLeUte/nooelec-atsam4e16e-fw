
arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b94c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040b94c  0040b94c  0001b94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20000000  0040b954  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a2a4  200009d0  0040c328  000209d0  2**3
                  ALLOC
  4 .stack        00003004  2000ac74  004165cc  000209d0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  7 .debug_info   00023817  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000495a  00000000  00000000  0004426e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000096b1  00000000  00000000  00048bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001220  00000000  00000000  00052279  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001090  00000000  00000000  00053499  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f216  00000000  00000000  00054529  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017285  00000000  00000000  0007373f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007325c  00000000  00000000  0008a9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000053f0  00000000  00000000  000fdc20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 dc 00 20 75 4f 40 00 e7 4e 40 00 e7 4e 40 00     x.. uO@..N@..N@.
  400010:	e7 4e 40 00 e7 4e 40 00 e7 4e 40 00 00 00 00 00     .N@..N@..N@.....
	...
  40002c:	d5 03 40 00 e7 4e 40 00 00 00 00 00 e5 04 40 00     ..@..N@.......@.
  40003c:	39 05 40 00 e7 4e 40 00 e7 4e 40 00 e7 4e 40 00     9.@..N@..N@..N@.
  40004c:	e7 4e 40 00 e7 4e 40 00 e7 4e 40 00 e7 4e 40 00     .N@..N@..N@..N@.
  40005c:	e7 4e 40 00 e7 4e 40 00 39 57 40 00 51 57 40 00     .N@..N@.9W@.QW@.
  40006c:	69 57 40 00 81 57 40 00 99 57 40 00 e7 4e 40 00     iW@..W@..W@..N@.
  40007c:	e7 4e 40 00 e7 4e 40 00 e7 4e 40 00 e7 4e 40 00     .N@..N@..N@..N@.
  40008c:	e7 4e 40 00 e7 4e 40 00 e7 4e 40 00 e7 4e 40 00     .N@..N@..N@..N@.
  40009c:	e7 4e 40 00 e7 4e 40 00 e7 4e 40 00 e7 4e 40 00     .N@..N@..N@..N@.
  4000ac:	e7 4e 40 00 e7 4e 40 00 e7 4e 40 00 e7 4e 40 00     .N@..N@..N@..N@.
  4000bc:	e7 4e 40 00 e7 4e 40 00 e7 4e 40 00 e7 4e 40 00     .N@..N@..N@..N@.
  4000cc:	e7 4e 40 00 e7 4e 40 00 e7 4e 40 00 e7 4e 40 00     .N@..N@..N@..N@.
  4000dc:	e7 4e 40 00 e7 4e 40 00 e7 4e 40 00 e7 4e 40 00     .N@..N@..N@..N@.
  4000ec:	e7 4e 40 00 e7 4e 40 00 e7 4e 40 00                 .N@..N@..N@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200009d0 	.word	0x200009d0
  400114:	00000000 	.word	0x00000000
  400118:	0040b954 	.word	0x0040b954

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	0040b954 	.word	0x0040b954
  400158:	200009d4 	.word	0x200009d4
  40015c:	0040b954 	.word	0x0040b954
  400160:	00000000 	.word	0x00000000

00400164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  400164:	b480      	push	{r7}
  400166:	b083      	sub	sp, #12
  400168:	af00      	add	r7, sp, #0
  40016a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  40016c:	687b      	ldr	r3, [r7, #4]
  40016e:	f103 0208 	add.w	r2, r3, #8
  400172:	687b      	ldr	r3, [r7, #4]
  400174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400176:	687b      	ldr	r3, [r7, #4]
  400178:	f04f 32ff 	mov.w	r2, #4294967295
  40017c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  40017e:	687b      	ldr	r3, [r7, #4]
  400180:	f103 0208 	add.w	r2, r3, #8
  400184:	687b      	ldr	r3, [r7, #4]
  400186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400188:	687b      	ldr	r3, [r7, #4]
  40018a:	f103 0208 	add.w	r2, r3, #8
  40018e:	687b      	ldr	r3, [r7, #4]
  400190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  400192:	687b      	ldr	r3, [r7, #4]
  400194:	2200      	movs	r2, #0
  400196:	601a      	str	r2, [r3, #0]
}
  400198:	bf00      	nop
  40019a:	370c      	adds	r7, #12
  40019c:	46bd      	mov	sp, r7
  40019e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001a2:	4770      	bx	lr

004001a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  4001a4:	b480      	push	{r7}
  4001a6:	b083      	sub	sp, #12
  4001a8:	af00      	add	r7, sp, #0
  4001aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4001ac:	687b      	ldr	r3, [r7, #4]
  4001ae:	2200      	movs	r2, #0
  4001b0:	611a      	str	r2, [r3, #16]
}
  4001b2:	bf00      	nop
  4001b4:	370c      	adds	r7, #12
  4001b6:	46bd      	mov	sp, r7
  4001b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001bc:	4770      	bx	lr

004001be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  4001be:	b480      	push	{r7}
  4001c0:	b085      	sub	sp, #20
  4001c2:	af00      	add	r7, sp, #0
  4001c4:	6078      	str	r0, [r7, #4]
  4001c6:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  4001c8:	687b      	ldr	r3, [r7, #4]
  4001ca:	685b      	ldr	r3, [r3, #4]
  4001cc:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  4001ce:	68fb      	ldr	r3, [r7, #12]
  4001d0:	685a      	ldr	r2, [r3, #4]
  4001d2:	683b      	ldr	r3, [r7, #0]
  4001d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  4001d6:	687b      	ldr	r3, [r7, #4]
  4001d8:	685a      	ldr	r2, [r3, #4]
  4001da:	683b      	ldr	r3, [r7, #0]
  4001dc:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4001de:	68fb      	ldr	r3, [r7, #12]
  4001e0:	685b      	ldr	r3, [r3, #4]
  4001e2:	683a      	ldr	r2, [r7, #0]
  4001e4:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  4001e6:	68fb      	ldr	r3, [r7, #12]
  4001e8:	683a      	ldr	r2, [r7, #0]
  4001ea:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4001ec:	687b      	ldr	r3, [r7, #4]
  4001ee:	683a      	ldr	r2, [r7, #0]
  4001f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4001f2:	683b      	ldr	r3, [r7, #0]
  4001f4:	687a      	ldr	r2, [r7, #4]
  4001f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4001f8:	687b      	ldr	r3, [r7, #4]
  4001fa:	681b      	ldr	r3, [r3, #0]
  4001fc:	1c5a      	adds	r2, r3, #1
  4001fe:	687b      	ldr	r3, [r7, #4]
  400200:	601a      	str	r2, [r3, #0]
}
  400202:	bf00      	nop
  400204:	3714      	adds	r7, #20
  400206:	46bd      	mov	sp, r7
  400208:	f85d 7b04 	ldr.w	r7, [sp], #4
  40020c:	4770      	bx	lr

0040020e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  40020e:	b480      	push	{r7}
  400210:	b085      	sub	sp, #20
  400212:	af00      	add	r7, sp, #0
  400214:	6078      	str	r0, [r7, #4]
  400216:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  400218:	683b      	ldr	r3, [r7, #0]
  40021a:	681b      	ldr	r3, [r3, #0]
  40021c:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40021e:	68bb      	ldr	r3, [r7, #8]
  400220:	f1b3 3fff 	cmp.w	r3, #4294967295
  400224:	d103      	bne.n	40022e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400226:	687b      	ldr	r3, [r7, #4]
  400228:	691b      	ldr	r3, [r3, #16]
  40022a:	60fb      	str	r3, [r7, #12]
  40022c:	e00c      	b.n	400248 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  40022e:	687b      	ldr	r3, [r7, #4]
  400230:	3308      	adds	r3, #8
  400232:	60fb      	str	r3, [r7, #12]
  400234:	e002      	b.n	40023c <vListInsert+0x2e>
  400236:	68fb      	ldr	r3, [r7, #12]
  400238:	685b      	ldr	r3, [r3, #4]
  40023a:	60fb      	str	r3, [r7, #12]
  40023c:	68fb      	ldr	r3, [r7, #12]
  40023e:	685b      	ldr	r3, [r3, #4]
  400240:	681a      	ldr	r2, [r3, #0]
  400242:	68bb      	ldr	r3, [r7, #8]
  400244:	429a      	cmp	r2, r3
  400246:	d9f6      	bls.n	400236 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400248:	68fb      	ldr	r3, [r7, #12]
  40024a:	685a      	ldr	r2, [r3, #4]
  40024c:	683b      	ldr	r3, [r7, #0]
  40024e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400250:	683b      	ldr	r3, [r7, #0]
  400252:	685b      	ldr	r3, [r3, #4]
  400254:	683a      	ldr	r2, [r7, #0]
  400256:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400258:	683b      	ldr	r3, [r7, #0]
  40025a:	68fa      	ldr	r2, [r7, #12]
  40025c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  40025e:	68fb      	ldr	r3, [r7, #12]
  400260:	683a      	ldr	r2, [r7, #0]
  400262:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400264:	683b      	ldr	r3, [r7, #0]
  400266:	687a      	ldr	r2, [r7, #4]
  400268:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  40026a:	687b      	ldr	r3, [r7, #4]
  40026c:	681b      	ldr	r3, [r3, #0]
  40026e:	1c5a      	adds	r2, r3, #1
  400270:	687b      	ldr	r3, [r7, #4]
  400272:	601a      	str	r2, [r3, #0]
}
  400274:	bf00      	nop
  400276:	3714      	adds	r7, #20
  400278:	46bd      	mov	sp, r7
  40027a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40027e:	4770      	bx	lr

00400280 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  400280:	b480      	push	{r7}
  400282:	b085      	sub	sp, #20
  400284:	af00      	add	r7, sp, #0
  400286:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400288:	687b      	ldr	r3, [r7, #4]
  40028a:	685b      	ldr	r3, [r3, #4]
  40028c:	687a      	ldr	r2, [r7, #4]
  40028e:	6892      	ldr	r2, [r2, #8]
  400290:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400292:	687b      	ldr	r3, [r7, #4]
  400294:	689b      	ldr	r3, [r3, #8]
  400296:	687a      	ldr	r2, [r7, #4]
  400298:	6852      	ldr	r2, [r2, #4]
  40029a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	691b      	ldr	r3, [r3, #16]
  4002a0:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4002a2:	68fb      	ldr	r3, [r7, #12]
  4002a4:	685a      	ldr	r2, [r3, #4]
  4002a6:	687b      	ldr	r3, [r7, #4]
  4002a8:	429a      	cmp	r2, r3
  4002aa:	d103      	bne.n	4002b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	689a      	ldr	r2, [r3, #8]
  4002b0:	68fb      	ldr	r3, [r7, #12]
  4002b2:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	2200      	movs	r2, #0
  4002b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  4002ba:	68fb      	ldr	r3, [r7, #12]
  4002bc:	681b      	ldr	r3, [r3, #0]
  4002be:	1e5a      	subs	r2, r3, #1
  4002c0:	68fb      	ldr	r3, [r7, #12]
  4002c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4002c4:	68fb      	ldr	r3, [r7, #12]
  4002c6:	681b      	ldr	r3, [r3, #0]
}
  4002c8:	4618      	mov	r0, r3
  4002ca:	3714      	adds	r7, #20
  4002cc:	46bd      	mov	sp, r7
  4002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d2:	4770      	bx	lr

004002d4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002d4:	b480      	push	{r7}
  4002d6:	b083      	sub	sp, #12
  4002d8:	af00      	add	r7, sp, #0
  4002da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002dc:	687b      	ldr	r3, [r7, #4]
  4002de:	2b07      	cmp	r3, #7
  4002e0:	d825      	bhi.n	40032e <osc_get_rate+0x5a>
  4002e2:	a201      	add	r2, pc, #4	; (adr r2, 4002e8 <osc_get_rate+0x14>)
  4002e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002e8:	00400309 	.word	0x00400309
  4002ec:	0040030f 	.word	0x0040030f
  4002f0:	00400315 	.word	0x00400315
  4002f4:	0040031b 	.word	0x0040031b
  4002f8:	0040031f 	.word	0x0040031f
  4002fc:	00400323 	.word	0x00400323
  400300:	00400327 	.word	0x00400327
  400304:	0040032b 	.word	0x0040032b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400308:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40030c:	e010      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40030e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400312:	e00d      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400318:	e00a      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40031a:	4b08      	ldr	r3, [pc, #32]	; (40033c <osc_get_rate+0x68>)
  40031c:	e008      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40031e:	4b08      	ldr	r3, [pc, #32]	; (400340 <osc_get_rate+0x6c>)
  400320:	e006      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400322:	4b08      	ldr	r3, [pc, #32]	; (400344 <osc_get_rate+0x70>)
  400324:	e004      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400326:	4b07      	ldr	r3, [pc, #28]	; (400344 <osc_get_rate+0x70>)
  400328:	e002      	b.n	400330 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40032a:	4b06      	ldr	r3, [pc, #24]	; (400344 <osc_get_rate+0x70>)
  40032c:	e000      	b.n	400330 <osc_get_rate+0x5c>
	}

	return 0;
  40032e:	2300      	movs	r3, #0
}
  400330:	4618      	mov	r0, r3
  400332:	370c      	adds	r7, #12
  400334:	46bd      	mov	sp, r7
  400336:	f85d 7b04 	ldr.w	r7, [sp], #4
  40033a:	4770      	bx	lr
  40033c:	003d0900 	.word	0x003d0900
  400340:	007a1200 	.word	0x007a1200
  400344:	00b71b00 	.word	0x00b71b00

00400348 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400348:	b580      	push	{r7, lr}
  40034a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40034c:	2006      	movs	r0, #6
  40034e:	4b03      	ldr	r3, [pc, #12]	; (40035c <sysclk_get_main_hz+0x14>)
  400350:	4798      	blx	r3
  400352:	4603      	mov	r3, r0
  400354:	011b      	lsls	r3, r3, #4

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400356:	4618      	mov	r0, r3
  400358:	bd80      	pop	{r7, pc}
  40035a:	bf00      	nop
  40035c:	004002d5 	.word	0x004002d5

00400360 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400360:	b580      	push	{r7, lr}
  400362:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400364:	4b02      	ldr	r3, [pc, #8]	; (400370 <sysclk_get_cpu_hz+0x10>)
  400366:	4798      	blx	r3
  400368:	4603      	mov	r3, r0
  40036a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40036c:	4618      	mov	r0, r3
  40036e:	bd80      	pop	{r7, pc}
  400370:	00400349 	.word	0x00400349

00400374 <pxPortInitialiseStack>:
/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters )
{
  400374:	b480      	push	{r7}
  400376:	b085      	sub	sp, #20
  400378:	af00      	add	r7, sp, #0
  40037a:	60f8      	str	r0, [r7, #12]
  40037c:	60b9      	str	r1, [r7, #8]
  40037e:	607a      	str	r2, [r7, #4]
	* interrupt. */

	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;
  400380:	68fb      	ldr	r3, [r7, #12]
  400382:	3b04      	subs	r3, #4
  400384:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  400386:	68fb      	ldr	r3, [r7, #12]
  400388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40038c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40038e:	68fb      	ldr	r3, [r7, #12]
  400390:	3b04      	subs	r3, #4
  400392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400394:	68ba      	ldr	r2, [r7, #8]
  400396:	68fb      	ldr	r3, [r7, #12]
  400398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	3b04      	subs	r3, #4
  40039e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;    /* LR */
  4003a0:	68fb      	ldr	r3, [r7, #12]
  4003a2:	2200      	movs	r2, #0
  4003a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
  4003a6:	68fb      	ldr	r3, [r7, #12]
  4003a8:	3b14      	subs	r3, #20
  4003aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  4003ac:	687a      	ldr	r2, [r7, #4]
  4003ae:	68fb      	ldr	r3, [r7, #12]
  4003b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
  4003b2:	68fb      	ldr	r3, [r7, #12]
  4003b4:	3b04      	subs	r3, #4
  4003b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4003b8:	68fb      	ldr	r3, [r7, #12]
  4003ba:	f06f 0202 	mvn.w	r2, #2
  4003be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  4003c0:	68fb      	ldr	r3, [r7, #12]
  4003c2:	3b20      	subs	r3, #32
  4003c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  4003c6:	68fb      	ldr	r3, [r7, #12]
}
  4003c8:	4618      	mov	r0, r3
  4003ca:	3714      	adds	r7, #20
  4003cc:	46bd      	mov	sp, r7
  4003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003d2:	4770      	bx	lr

004003d4 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  4003d4:	4b05      	ldr	r3, [pc, #20]	; (4003ec <pxCurrentTCBConst2>)
  4003d6:	6819      	ldr	r1, [r3, #0]
  4003d8:	6808      	ldr	r0, [r1, #0]
  4003da:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003de:	f380 8809 	msr	PSP, r0
  4003e2:	f04f 0000 	mov.w	r0, #0
  4003e6:	f380 8811 	msr	BASEPRI, r0
  4003ea:	4770      	bx	lr

004003ec <pxCurrentTCBConst2>:
  4003ec:	2000a9fc 	.word	0x2000a9fc
		" bx r14                          \n"
		"                                   \n"
		" .align 2                        \n"
		"pxCurrentTCBConst2: .word pxCurrentTCB \n"
		);
}
  4003f0:	bf00      	nop
  4003f2:	bf00      	nop

004003f4 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  4003f4:	4804      	ldr	r0, [pc, #16]	; (400408 <prvPortStartFirstTask+0x14>)
  4003f6:	6800      	ldr	r0, [r0, #0]
  4003f8:	6800      	ldr	r0, [r0, #0]
  4003fa:	f380 8808 	msr	MSP, r0
  4003fe:	b662      	cpsie	i
  400400:	df00      	svc	0
  400402:	bf00      	nop
		" msr msp, r0             \n"                         /* Set the msp back to the start of the stack. */
		" cpsie i                 \n"                         /* Globally enable interrupts. */
		" svc 0                   \n"                         /* System call to start first task. */
		" nop                     \n"
		);
}
  400404:	bf00      	nop
  400406:	0000      	.short	0x0000
  400408:	e000ed08 	.word	0xe000ed08

0040040c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  40040c:	b580      	push	{r7, lr}
  40040e:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400410:	4a0e      	ldr	r2, [pc, #56]	; (40044c <xPortStartScheduler+0x40>)
  400412:	4b0e      	ldr	r3, [pc, #56]	; (40044c <xPortStartScheduler+0x40>)
  400414:	681b      	ldr	r3, [r3, #0]
  400416:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40041a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40041c:	4a0b      	ldr	r2, [pc, #44]	; (40044c <xPortStartScheduler+0x40>)
  40041e:	4b0b      	ldr	r3, [pc, #44]	; (40044c <xPortStartScheduler+0x40>)
  400420:	681b      	ldr	r3, [r3, #0]
  400422:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  400426:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  400428:	4b09      	ldr	r3, [pc, #36]	; (400450 <xPortStartScheduler+0x44>)
  40042a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  40042c:	4b09      	ldr	r3, [pc, #36]	; (400454 <xPortStartScheduler+0x48>)
  40042e:	2200      	movs	r2, #0
  400430:	601a      	str	r2, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400432:	4b09      	ldr	r3, [pc, #36]	; (400458 <xPortStartScheduler+0x4c>)
  400434:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  400436:	4a09      	ldr	r2, [pc, #36]	; (40045c <xPortStartScheduler+0x50>)
  400438:	4b08      	ldr	r3, [pc, #32]	; (40045c <xPortStartScheduler+0x50>)
  40043a:	681b      	ldr	r3, [r3, #0]
  40043c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400440:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400442:	4b07      	ldr	r3, [pc, #28]	; (400460 <xPortStartScheduler+0x54>)
  400444:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  400446:	2300      	movs	r3, #0
}
  400448:	4618      	mov	r0, r3
  40044a:	bd80      	pop	{r7, pc}
  40044c:	e000ed20 	.word	0xe000ed20
  400450:	00400569 	.word	0x00400569
  400454:	2000000c 	.word	0x2000000c
  400458:	0040059d 	.word	0x0040059d
  40045c:	e000ef34 	.word	0xe000ef34
  400460:	004003f5 	.word	0x004003f5

00400464 <vPortYieldFromISR>:
}

/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  400464:	b480      	push	{r7}
  400466:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400468:	4b04      	ldr	r3, [pc, #16]	; (40047c <vPortYieldFromISR+0x18>)
  40046a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40046e:	601a      	str	r2, [r3, #0]
}
  400470:	bf00      	nop
  400472:	46bd      	mov	sp, r7
  400474:	f85d 7b04 	ldr.w	r7, [sp], #4
  400478:	4770      	bx	lr
  40047a:	bf00      	nop
  40047c:	e000ed04 	.word	0xe000ed04

00400480 <vPortEnterCritical>:

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400480:	b580      	push	{r7, lr}
  400482:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  400484:	4b04      	ldr	r3, [pc, #16]	; (400498 <vPortEnterCritical+0x18>)
  400486:	4798      	blx	r3
	uxCriticalNesting++;
  400488:	4b04      	ldr	r3, [pc, #16]	; (40049c <vPortEnterCritical+0x1c>)
  40048a:	681b      	ldr	r3, [r3, #0]
  40048c:	3301      	adds	r3, #1
  40048e:	4a03      	ldr	r2, [pc, #12]	; (40049c <vPortEnterCritical+0x1c>)
  400490:	6013      	str	r3, [r2, #0]
}
  400492:	bf00      	nop
  400494:	bd80      	pop	{r7, pc}
  400496:	bf00      	nop
  400498:	004004c9 	.word	0x004004c9
  40049c:	2000000c 	.word	0x2000000c

004004a0 <vPortExitCritical>:

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  4004a0:	b580      	push	{r7, lr}
  4004a2:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  4004a4:	4b06      	ldr	r3, [pc, #24]	; (4004c0 <vPortExitCritical+0x20>)
  4004a6:	681b      	ldr	r3, [r3, #0]
  4004a8:	3b01      	subs	r3, #1
  4004aa:	4a05      	ldr	r2, [pc, #20]	; (4004c0 <vPortExitCritical+0x20>)
  4004ac:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  4004ae:	4b04      	ldr	r3, [pc, #16]	; (4004c0 <vPortExitCritical+0x20>)
  4004b0:	681b      	ldr	r3, [r3, #0]
  4004b2:	2b00      	cmp	r3, #0
  4004b4:	d102      	bne.n	4004bc <vPortExitCritical+0x1c>
		portENABLE_INTERRUPTS();
  4004b6:	2000      	movs	r0, #0
  4004b8:	4b02      	ldr	r3, [pc, #8]	; (4004c4 <vPortExitCritical+0x24>)
  4004ba:	4798      	blx	r3
	}
}
  4004bc:	bf00      	nop
  4004be:	bd80      	pop	{r7, pc}
  4004c0:	2000000c 	.word	0x2000000c
  4004c4:	004004db 	.word	0x004004db

004004c8 <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  4004c8:	f3ef 8011 	mrs	r0, BASEPRI
  4004cc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  4004d0:	f381 8811 	msr	BASEPRI, r1
  4004d4:	4770      	bx	lr
		:: "i" (configMAX_SYSCALL_INTERRUPT_PRIORITY) : "r0", "r1" \
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
  4004d6:	2300      	movs	r3, #0
}
  4004d8:	4618      	mov	r0, r3

004004da <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  4004da:	f380 8811 	msr	BASEPRI, r0
  4004de:	4770      	bx	lr
	( \
		" msr basepri, r0                            \n" \
		" bx lr                                      \n" \
		::: "r0" \
	);
}
  4004e0:	bf00      	nop
	...

004004e4 <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  4004e4:	f3ef 8009 	mrs	r0, PSP
  4004e8:	4b11      	ldr	r3, [pc, #68]	; (400530 <pxCurrentTCBConst>)
  4004ea:	681a      	ldr	r2, [r3, #0]
  4004ec:	f01e 0f10 	tst.w	lr, #16
  4004f0:	bf08      	it	eq
  4004f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4004f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004fa:	6010      	str	r0, [r2, #0]
  4004fc:	e92d 4008 	stmdb	sp!, {r3, lr}
  400500:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  400504:	f380 8811 	msr	BASEPRI, r0
  400508:	f000 fffa 	bl	401500 <vTaskSwitchContext>
  40050c:	f04f 0000 	mov.w	r0, #0
  400510:	f380 8811 	msr	BASEPRI, r0
  400514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400518:	6819      	ldr	r1, [r3, #0]
  40051a:	6808      	ldr	r0, [r1, #0]
  40051c:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400520:	f01e 0f10 	tst.w	lr, #16
  400524:	bf08      	it	eq
  400526:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40052a:	f380 8809 	msr	PSP, r0
  40052e:	4770      	bx	lr

00400530 <pxCurrentTCBConst>:
  400530:	2000a9fc 	.word	0x2000a9fc
		"                                       \n"
		"   .align 2                            \n"
		"pxCurrentTCBConst: .word pxCurrentTCB    \n"
		::"i" (configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  400534:	bf00      	nop
  400536:	bf00      	nop

00400538 <SysTick_Handler>:

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  400538:	b580      	push	{r7, lr}
  40053a:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40053c:	4b06      	ldr	r3, [pc, #24]	; (400558 <SysTick_Handler+0x20>)
  40053e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400542:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  400544:	4b05      	ldr	r3, [pc, #20]	; (40055c <SysTick_Handler+0x24>)
  400546:	4798      	blx	r3
	{
		vTaskIncrementTick();
  400548:	4b05      	ldr	r3, [pc, #20]	; (400560 <SysTick_Handler+0x28>)
  40054a:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  40054c:	2000      	movs	r0, #0
  40054e:	4b05      	ldr	r3, [pc, #20]	; (400564 <SysTick_Handler+0x2c>)
  400550:	4798      	blx	r3
}
  400552:	bf00      	nop
  400554:	bd80      	pop	{r7, pc}
  400556:	bf00      	nop
  400558:	e000ed04 	.word	0xe000ed04
  40055c:	004004c9 	.word	0x004004c9
  400560:	004013b5 	.word	0x004013b5
  400564:	004004db 	.word	0x004004db

00400568 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
  400568:	b598      	push	{r3, r4, r7, lr}
  40056a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
  40056c:	4c07      	ldr	r4, [pc, #28]	; (40058c <vPortSetupTimerInterrupt+0x24>)
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  40056e:	4b08      	ldr	r3, [pc, #32]	; (400590 <vPortSetupTimerInterrupt+0x28>)
  400570:	4798      	blx	r3
  400572:	4602      	mov	r2, r0
  400574:	4b07      	ldr	r3, [pc, #28]	; (400594 <vPortSetupTimerInterrupt+0x2c>)
  400576:	fba3 2302 	umull	r2, r3, r3, r2
  40057a:	099b      	lsrs	r3, r3, #6
  40057c:	3b01      	subs	r3, #1
  40057e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400580:	4b05      	ldr	r3, [pc, #20]	; (400598 <vPortSetupTimerInterrupt+0x30>)
  400582:	2207      	movs	r2, #7
  400584:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
}
  400586:	bf00      	nop
  400588:	bd98      	pop	{r3, r4, r7, pc}
  40058a:	bf00      	nop
  40058c:	e000e014 	.word	0xe000e014
  400590:	00400361 	.word	0x00400361
  400594:	10624dd3 	.word	0x10624dd3
  400598:	e000e010 	.word	0xe000e010

0040059c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40059c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4005ac <vPortEnableVFP+0x10>
  4005a0:	6801      	ldr	r1, [r0, #0]
  4005a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4005a6:	6001      	str	r1, [r0, #0]
  4005a8:	4770      	bx	lr
		"                            \n"
		" orr r1, r1, #( 0xf << 20 ) \n" /* Enable CP10 and CP11 coprocessors, then save back. */
		" str r1, [r0]               \n"
		" bx r14                     "
	);
}
  4005aa:	bf00      	nop
  4005ac:	e000ed88 	.word	0xe000ed88

004005b0 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  4005b0:	b580      	push	{r7, lr}
  4005b2:	b086      	sub	sp, #24
  4005b4:	af00      	add	r7, sp, #0
  4005b6:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  4005b8:	2300      	movs	r3, #0
  4005ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  4005bc:	4b34      	ldr	r3, [pc, #208]	; (400690 <pvPortMalloc+0xe0>)
  4005be:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  4005c0:	4b34      	ldr	r3, [pc, #208]	; (400694 <pvPortMalloc+0xe4>)
  4005c2:	681b      	ldr	r3, [r3, #0]
  4005c4:	2b00      	cmp	r3, #0
  4005c6:	d101      	bne.n	4005cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  4005c8:	4b33      	ldr	r3, [pc, #204]	; (400698 <pvPortMalloc+0xe8>)
  4005ca:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  4005cc:	687b      	ldr	r3, [r7, #4]
  4005ce:	2b00      	cmp	r3, #0
  4005d0:	d00e      	beq.n	4005f0 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4005d2:	2310      	movs	r3, #16
  4005d4:	461a      	mov	r2, r3
  4005d6:	687b      	ldr	r3, [r7, #4]
  4005d8:	4413      	add	r3, r2
  4005da:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4005dc:	687b      	ldr	r3, [r7, #4]
  4005de:	f003 0307 	and.w	r3, r3, #7
  4005e2:	2b00      	cmp	r3, #0
  4005e4:	d004      	beq.n	4005f0 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4005e6:	687b      	ldr	r3, [r7, #4]
  4005e8:	f023 0307 	bic.w	r3, r3, #7
  4005ec:	3308      	adds	r3, #8
  4005ee:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4005f0:	687b      	ldr	r3, [r7, #4]
  4005f2:	2b00      	cmp	r3, #0
  4005f4:	d045      	beq.n	400682 <pvPortMalloc+0xd2>
  4005f6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4005fa:	687b      	ldr	r3, [r7, #4]
  4005fc:	4293      	cmp	r3, r2
  4005fe:	d240      	bcs.n	400682 <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  400600:	4b26      	ldr	r3, [pc, #152]	; (40069c <pvPortMalloc+0xec>)
  400602:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  400604:	4b25      	ldr	r3, [pc, #148]	; (40069c <pvPortMalloc+0xec>)
  400606:	681b      	ldr	r3, [r3, #0]
  400608:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40060a:	e004      	b.n	400616 <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  40060c:	697b      	ldr	r3, [r7, #20]
  40060e:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  400610:	697b      	ldr	r3, [r7, #20]
  400612:	681b      	ldr	r3, [r3, #0]
  400614:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400616:	697b      	ldr	r3, [r7, #20]
  400618:	685a      	ldr	r2, [r3, #4]
  40061a:	687b      	ldr	r3, [r7, #4]
  40061c:	429a      	cmp	r2, r3
  40061e:	d203      	bcs.n	400628 <pvPortMalloc+0x78>
  400620:	697b      	ldr	r3, [r7, #20]
  400622:	681b      	ldr	r3, [r3, #0]
  400624:	2b00      	cmp	r3, #0
  400626:	d1f1      	bne.n	40060c <pvPortMalloc+0x5c>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  400628:	4b1a      	ldr	r3, [pc, #104]	; (400694 <pvPortMalloc+0xe4>)
  40062a:	681b      	ldr	r3, [r3, #0]
  40062c:	697a      	ldr	r2, [r7, #20]
  40062e:	429a      	cmp	r2, r3
  400630:	d027      	beq.n	400682 <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  400632:	693b      	ldr	r3, [r7, #16]
  400634:	681b      	ldr	r3, [r3, #0]
  400636:	2210      	movs	r2, #16
  400638:	4413      	add	r3, r2
  40063a:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  40063c:	697b      	ldr	r3, [r7, #20]
  40063e:	681a      	ldr	r2, [r3, #0]
  400640:	693b      	ldr	r3, [r7, #16]
  400642:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400644:	697b      	ldr	r3, [r7, #20]
  400646:	685a      	ldr	r2, [r3, #4]
  400648:	687b      	ldr	r3, [r7, #4]
  40064a:	1ad3      	subs	r3, r2, r3
  40064c:	2210      	movs	r2, #16
  40064e:	0052      	lsls	r2, r2, #1
  400650:	4293      	cmp	r3, r2
  400652:	d90f      	bls.n	400674 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  400654:	697a      	ldr	r2, [r7, #20]
  400656:	687b      	ldr	r3, [r7, #4]
  400658:	4413      	add	r3, r2
  40065a:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  40065c:	697b      	ldr	r3, [r7, #20]
  40065e:	685a      	ldr	r2, [r3, #4]
  400660:	687b      	ldr	r3, [r7, #4]
  400662:	1ad2      	subs	r2, r2, r3
  400664:	68bb      	ldr	r3, [r7, #8]
  400666:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  400668:	697b      	ldr	r3, [r7, #20]
  40066a:	687a      	ldr	r2, [r7, #4]
  40066c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  40066e:	68b8      	ldr	r0, [r7, #8]
  400670:	4b0b      	ldr	r3, [pc, #44]	; (4006a0 <pvPortMalloc+0xf0>)
  400672:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  400674:	4b0b      	ldr	r3, [pc, #44]	; (4006a4 <pvPortMalloc+0xf4>)
  400676:	681a      	ldr	r2, [r3, #0]
  400678:	697b      	ldr	r3, [r7, #20]
  40067a:	685b      	ldr	r3, [r3, #4]
  40067c:	1ad3      	subs	r3, r2, r3
  40067e:	4a09      	ldr	r2, [pc, #36]	; (4006a4 <pvPortMalloc+0xf4>)
  400680:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  400682:	4b09      	ldr	r3, [pc, #36]	; (4006a8 <pvPortMalloc+0xf8>)
  400684:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
  400686:	68fb      	ldr	r3, [r7, #12]
}
  400688:	4618      	mov	r0, r3
  40068a:	3718      	adds	r7, #24
  40068c:	46bd      	mov	sp, r7
  40068e:	bd80      	pop	{r7, pc}
  400690:	0040124d 	.word	0x0040124d
  400694:	2000a9f8 	.word	0x2000a9f8
  400698:	00400701 	.word	0x00400701
  40069c:	2000a9f0 	.word	0x2000a9f0
  4006a0:	00400791 	.word	0x00400791
  4006a4:	20000010 	.word	0x20000010
  4006a8:	00401269 	.word	0x00401269

004006ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  4006ac:	b580      	push	{r7, lr}
  4006ae:	b084      	sub	sp, #16
  4006b0:	af00      	add	r7, sp, #0
  4006b2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  4006b4:	687b      	ldr	r3, [r7, #4]
  4006b6:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  4006b8:	687b      	ldr	r3, [r7, #4]
  4006ba:	2b00      	cmp	r3, #0
  4006bc:	d014      	beq.n	4006e8 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  4006be:	2310      	movs	r3, #16
  4006c0:	425b      	negs	r3, r3
  4006c2:	68fa      	ldr	r2, [r7, #12]
  4006c4:	4413      	add	r3, r2
  4006c6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  4006c8:	68fb      	ldr	r3, [r7, #12]
  4006ca:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  4006cc:	4b08      	ldr	r3, [pc, #32]	; (4006f0 <vPortFree+0x44>)
  4006ce:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4006d0:	68bb      	ldr	r3, [r7, #8]
  4006d2:	685a      	ldr	r2, [r3, #4]
  4006d4:	4b07      	ldr	r3, [pc, #28]	; (4006f4 <vPortFree+0x48>)
  4006d6:	681b      	ldr	r3, [r3, #0]
  4006d8:	4413      	add	r3, r2
  4006da:	4a06      	ldr	r2, [pc, #24]	; (4006f4 <vPortFree+0x48>)
  4006dc:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  4006de:	68b8      	ldr	r0, [r7, #8]
  4006e0:	4b05      	ldr	r3, [pc, #20]	; (4006f8 <vPortFree+0x4c>)
  4006e2:	4798      	blx	r3
		}
		xTaskResumeAll();
  4006e4:	4b05      	ldr	r3, [pc, #20]	; (4006fc <vPortFree+0x50>)
  4006e6:	4798      	blx	r3
	}
}
  4006e8:	bf00      	nop
  4006ea:	3710      	adds	r7, #16
  4006ec:	46bd      	mov	sp, r7
  4006ee:	bd80      	pop	{r7, pc}
  4006f0:	0040124d 	.word	0x0040124d
  4006f4:	20000010 	.word	0x20000010
  4006f8:	00400791 	.word	0x00400791
  4006fc:	00401269 	.word	0x00401269

00400700 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  400700:	b580      	push	{r7, lr}
  400702:	b082      	sub	sp, #8
  400704:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  400706:	4b1d      	ldr	r3, [pc, #116]	; (40077c <prvHeapInit+0x7c>)
  400708:	4a1d      	ldr	r2, [pc, #116]	; (400780 <prvHeapInit+0x80>)
  40070a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  40070c:	4b1b      	ldr	r3, [pc, #108]	; (40077c <prvHeapInit+0x7c>)
  40070e:	2200      	movs	r2, #0
  400710:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  400712:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  400716:	4b1a      	ldr	r3, [pc, #104]	; (400780 <prvHeapInit+0x80>)
  400718:	4413      	add	r3, r2
  40071a:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  40071c:	2310      	movs	r3, #16
  40071e:	425b      	negs	r3, r3
  400720:	687a      	ldr	r2, [r7, #4]
  400722:	4413      	add	r3, r2
  400724:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  400726:	4a17      	ldr	r2, [pc, #92]	; (400784 <prvHeapInit+0x84>)
  400728:	687b      	ldr	r3, [r7, #4]
  40072a:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  40072c:	4b15      	ldr	r3, [pc, #84]	; (400784 <prvHeapInit+0x84>)
  40072e:	681b      	ldr	r3, [r3, #0]
  400730:	f003 0307 	and.w	r3, r3, #7
  400734:	2b00      	cmp	r3, #0
  400736:	d003      	beq.n	400740 <prvHeapInit+0x40>
  400738:	4b13      	ldr	r3, [pc, #76]	; (400788 <prvHeapInit+0x88>)
  40073a:	4798      	blx	r3
  40073c:	bf00      	nop
  40073e:	e7fd      	b.n	40073c <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  400740:	4b10      	ldr	r3, [pc, #64]	; (400784 <prvHeapInit+0x84>)
  400742:	681b      	ldr	r3, [r3, #0]
  400744:	2200      	movs	r2, #0
  400746:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  400748:	4b0e      	ldr	r3, [pc, #56]	; (400784 <prvHeapInit+0x84>)
  40074a:	681b      	ldr	r3, [r3, #0]
  40074c:	2200      	movs	r2, #0
  40074e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  400750:	4b0b      	ldr	r3, [pc, #44]	; (400780 <prvHeapInit+0x80>)
  400752:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  400754:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  400758:	2210      	movs	r2, #16
  40075a:	1a9a      	subs	r2, r3, r2
  40075c:	683b      	ldr	r3, [r7, #0]
  40075e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  400760:	4b08      	ldr	r3, [pc, #32]	; (400784 <prvHeapInit+0x84>)
  400762:	681a      	ldr	r2, [r3, #0]
  400764:	683b      	ldr	r3, [r7, #0]
  400766:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  400768:	4b08      	ldr	r3, [pc, #32]	; (40078c <prvHeapInit+0x8c>)
  40076a:	681b      	ldr	r3, [r3, #0]
  40076c:	2210      	movs	r2, #16
  40076e:	1a9b      	subs	r3, r3, r2
  400770:	4a06      	ldr	r2, [pc, #24]	; (40078c <prvHeapInit+0x8c>)
  400772:	6013      	str	r3, [r2, #0]
}
  400774:	bf00      	nop
  400776:	3708      	adds	r7, #8
  400778:	46bd      	mov	sp, r7
  40077a:	bd80      	pop	{r7, pc}
  40077c:	2000a9f0 	.word	0x2000a9f0
  400780:	200009f0 	.word	0x200009f0
  400784:	2000a9f8 	.word	0x2000a9f8
  400788:	004004c9 	.word	0x004004c9
  40078c:	20000010 	.word	0x20000010

00400790 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400790:	b480      	push	{r7}
  400792:	b085      	sub	sp, #20
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400798:	4b28      	ldr	r3, [pc, #160]	; (40083c <prvInsertBlockIntoFreeList+0xac>)
  40079a:	60fb      	str	r3, [r7, #12]
  40079c:	e002      	b.n	4007a4 <prvInsertBlockIntoFreeList+0x14>
  40079e:	68fb      	ldr	r3, [r7, #12]
  4007a0:	681b      	ldr	r3, [r3, #0]
  4007a2:	60fb      	str	r3, [r7, #12]
  4007a4:	68fb      	ldr	r3, [r7, #12]
  4007a6:	681a      	ldr	r2, [r3, #0]
  4007a8:	687b      	ldr	r3, [r7, #4]
  4007aa:	429a      	cmp	r2, r3
  4007ac:	d3f7      	bcc.n	40079e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  4007ae:	68fb      	ldr	r3, [r7, #12]
  4007b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  4007b2:	68fb      	ldr	r3, [r7, #12]
  4007b4:	685b      	ldr	r3, [r3, #4]
  4007b6:	68ba      	ldr	r2, [r7, #8]
  4007b8:	441a      	add	r2, r3
  4007ba:	687b      	ldr	r3, [r7, #4]
  4007bc:	429a      	cmp	r2, r3
  4007be:	d108      	bne.n	4007d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4007c0:	68fb      	ldr	r3, [r7, #12]
  4007c2:	685a      	ldr	r2, [r3, #4]
  4007c4:	687b      	ldr	r3, [r7, #4]
  4007c6:	685b      	ldr	r3, [r3, #4]
  4007c8:	441a      	add	r2, r3
  4007ca:	68fb      	ldr	r3, [r7, #12]
  4007cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  4007ce:	68fb      	ldr	r3, [r7, #12]
  4007d0:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  4007d2:	687b      	ldr	r3, [r7, #4]
  4007d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  4007d6:	687b      	ldr	r3, [r7, #4]
  4007d8:	685b      	ldr	r3, [r3, #4]
  4007da:	68ba      	ldr	r2, [r7, #8]
  4007dc:	441a      	add	r2, r3
  4007de:	68fb      	ldr	r3, [r7, #12]
  4007e0:	681b      	ldr	r3, [r3, #0]
  4007e2:	429a      	cmp	r2, r3
  4007e4:	d118      	bne.n	400818 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4007e6:	68fb      	ldr	r3, [r7, #12]
  4007e8:	681a      	ldr	r2, [r3, #0]
  4007ea:	4b15      	ldr	r3, [pc, #84]	; (400840 <prvInsertBlockIntoFreeList+0xb0>)
  4007ec:	681b      	ldr	r3, [r3, #0]
  4007ee:	429a      	cmp	r2, r3
  4007f0:	d00d      	beq.n	40080e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4007f2:	687b      	ldr	r3, [r7, #4]
  4007f4:	685a      	ldr	r2, [r3, #4]
  4007f6:	68fb      	ldr	r3, [r7, #12]
  4007f8:	681b      	ldr	r3, [r3, #0]
  4007fa:	685b      	ldr	r3, [r3, #4]
  4007fc:	441a      	add	r2, r3
  4007fe:	687b      	ldr	r3, [r7, #4]
  400800:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  400802:	68fb      	ldr	r3, [r7, #12]
  400804:	681b      	ldr	r3, [r3, #0]
  400806:	681a      	ldr	r2, [r3, #0]
  400808:	687b      	ldr	r3, [r7, #4]
  40080a:	601a      	str	r2, [r3, #0]
  40080c:	e008      	b.n	400820 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  40080e:	4b0c      	ldr	r3, [pc, #48]	; (400840 <prvInsertBlockIntoFreeList+0xb0>)
  400810:	681a      	ldr	r2, [r3, #0]
  400812:	687b      	ldr	r3, [r7, #4]
  400814:	601a      	str	r2, [r3, #0]
  400816:	e003      	b.n	400820 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  400818:	68fb      	ldr	r3, [r7, #12]
  40081a:	681a      	ldr	r2, [r3, #0]
  40081c:	687b      	ldr	r3, [r7, #4]
  40081e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  400820:	68fa      	ldr	r2, [r7, #12]
  400822:	687b      	ldr	r3, [r7, #4]
  400824:	429a      	cmp	r2, r3
  400826:	d002      	beq.n	40082e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  400828:	68fb      	ldr	r3, [r7, #12]
  40082a:	687a      	ldr	r2, [r7, #4]
  40082c:	601a      	str	r2, [r3, #0]
	}
}
  40082e:	bf00      	nop
  400830:	3714      	adds	r7, #20
  400832:	46bd      	mov	sp, r7
  400834:	f85d 7b04 	ldr.w	r7, [sp], #4
  400838:	4770      	bx	lr
  40083a:	bf00      	nop
  40083c:	2000a9f0 	.word	0x2000a9f0
  400840:	2000a9f8 	.word	0x2000a9f8

00400844 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  400844:	b580      	push	{r7, lr}
  400846:	b082      	sub	sp, #8
  400848:	af00      	add	r7, sp, #0
  40084a:	6078      	str	r0, [r7, #4]
  40084c:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  40084e:	687b      	ldr	r3, [r7, #4]
  400850:	2b00      	cmp	r3, #0
  400852:	d103      	bne.n	40085c <xQueueGenericReset+0x18>
  400854:	4b27      	ldr	r3, [pc, #156]	; (4008f4 <xQueueGenericReset+0xb0>)
  400856:	4798      	blx	r3
  400858:	bf00      	nop
  40085a:	e7fd      	b.n	400858 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  40085c:	4b26      	ldr	r3, [pc, #152]	; (4008f8 <xQueueGenericReset+0xb4>)
  40085e:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400860:	687b      	ldr	r3, [r7, #4]
  400862:	681a      	ldr	r2, [r3, #0]
  400864:	687b      	ldr	r3, [r7, #4]
  400866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400868:	6879      	ldr	r1, [r7, #4]
  40086a:	6c09      	ldr	r1, [r1, #64]	; 0x40
  40086c:	fb01 f303 	mul.w	r3, r1, r3
  400870:	441a      	add	r2, r3
  400872:	687b      	ldr	r3, [r7, #4]
  400874:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  400876:	687b      	ldr	r3, [r7, #4]
  400878:	2200      	movs	r2, #0
  40087a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  40087c:	687b      	ldr	r3, [r7, #4]
  40087e:	681a      	ldr	r2, [r3, #0]
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  400884:	687b      	ldr	r3, [r7, #4]
  400886:	681a      	ldr	r2, [r3, #0]
  400888:	687b      	ldr	r3, [r7, #4]
  40088a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40088c:	3b01      	subs	r3, #1
  40088e:	6879      	ldr	r1, [r7, #4]
  400890:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400892:	fb01 f303 	mul.w	r3, r1, r3
  400896:	441a      	add	r2, r3
  400898:	687b      	ldr	r3, [r7, #4]
  40089a:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40089c:	687b      	ldr	r3, [r7, #4]
  40089e:	f04f 32ff 	mov.w	r2, #4294967295
  4008a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4008a4:	687b      	ldr	r3, [r7, #4]
  4008a6:	f04f 32ff 	mov.w	r2, #4294967295
  4008aa:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4008ac:	683b      	ldr	r3, [r7, #0]
  4008ae:	2b00      	cmp	r3, #0
  4008b0:	d10e      	bne.n	4008d0 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4008b2:	687b      	ldr	r3, [r7, #4]
  4008b4:	691b      	ldr	r3, [r3, #16]
  4008b6:	2b00      	cmp	r3, #0
  4008b8:	d014      	beq.n	4008e4 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4008ba:	687b      	ldr	r3, [r7, #4]
  4008bc:	3310      	adds	r3, #16
  4008be:	4618      	mov	r0, r3
  4008c0:	4b0e      	ldr	r3, [pc, #56]	; (4008fc <xQueueGenericReset+0xb8>)
  4008c2:	4798      	blx	r3
  4008c4:	4603      	mov	r3, r0
  4008c6:	2b01      	cmp	r3, #1
  4008c8:	d10c      	bne.n	4008e4 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  4008ca:	4b0d      	ldr	r3, [pc, #52]	; (400900 <xQueueGenericReset+0xbc>)
  4008cc:	4798      	blx	r3
  4008ce:	e009      	b.n	4008e4 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4008d0:	687b      	ldr	r3, [r7, #4]
  4008d2:	3310      	adds	r3, #16
  4008d4:	4618      	mov	r0, r3
  4008d6:	4b0b      	ldr	r3, [pc, #44]	; (400904 <xQueueGenericReset+0xc0>)
  4008d8:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4008da:	687b      	ldr	r3, [r7, #4]
  4008dc:	3324      	adds	r3, #36	; 0x24
  4008de:	4618      	mov	r0, r3
  4008e0:	4b08      	ldr	r3, [pc, #32]	; (400904 <xQueueGenericReset+0xc0>)
  4008e2:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  4008e4:	4b08      	ldr	r3, [pc, #32]	; (400908 <xQueueGenericReset+0xc4>)
  4008e6:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  4008e8:	2301      	movs	r3, #1
}
  4008ea:	4618      	mov	r0, r3
  4008ec:	3708      	adds	r7, #8
  4008ee:	46bd      	mov	sp, r7
  4008f0:	bd80      	pop	{r7, pc}
  4008f2:	bf00      	nop
  4008f4:	004004c9 	.word	0x004004c9
  4008f8:	00400481 	.word	0x00400481
  4008fc:	0040168d 	.word	0x0040168d
  400900:	00400465 	.word	0x00400465
  400904:	00400165 	.word	0x00400165
  400908:	004004a1 	.word	0x004004a1

0040090c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  40090c:	b580      	push	{r7, lr}
  40090e:	b088      	sub	sp, #32
  400910:	af00      	add	r7, sp, #0
  400912:	60f8      	str	r0, [r7, #12]
  400914:	60b9      	str	r1, [r7, #8]
  400916:	4613      	mov	r3, r2
  400918:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  40091a:	2300      	movs	r3, #0
  40091c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  40091e:	68fb      	ldr	r3, [r7, #12]
  400920:	2b00      	cmp	r3, #0
  400922:	d02a      	beq.n	40097a <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  400924:	2050      	movs	r0, #80	; 0x50
  400926:	4b1b      	ldr	r3, [pc, #108]	; (400994 <xQueueGenericCreate+0x88>)
  400928:	4798      	blx	r3
  40092a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  40092c:	69bb      	ldr	r3, [r7, #24]
  40092e:	2b00      	cmp	r3, #0
  400930:	d023      	beq.n	40097a <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  400932:	68fb      	ldr	r3, [r7, #12]
  400934:	68ba      	ldr	r2, [r7, #8]
  400936:	fb02 f303 	mul.w	r3, r2, r3
  40093a:	3301      	adds	r3, #1
  40093c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  40093e:	6978      	ldr	r0, [r7, #20]
  400940:	4b14      	ldr	r3, [pc, #80]	; (400994 <xQueueGenericCreate+0x88>)
  400942:	4798      	blx	r3
  400944:	4602      	mov	r2, r0
  400946:	69bb      	ldr	r3, [r7, #24]
  400948:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  40094a:	69bb      	ldr	r3, [r7, #24]
  40094c:	681b      	ldr	r3, [r3, #0]
  40094e:	2b00      	cmp	r3, #0
  400950:	d010      	beq.n	400974 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  400952:	69bb      	ldr	r3, [r7, #24]
  400954:	68fa      	ldr	r2, [r7, #12]
  400956:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  400958:	69bb      	ldr	r3, [r7, #24]
  40095a:	68ba      	ldr	r2, [r7, #8]
  40095c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  40095e:	2101      	movs	r1, #1
  400960:	69b8      	ldr	r0, [r7, #24]
  400962:	4b0d      	ldr	r3, [pc, #52]	; (400998 <xQueueGenericCreate+0x8c>)
  400964:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  400966:	69bb      	ldr	r3, [r7, #24]
  400968:	79fa      	ldrb	r2, [r7, #7]
  40096a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  40096e:	69bb      	ldr	r3, [r7, #24]
  400970:	61fb      	str	r3, [r7, #28]
  400972:	e002      	b.n	40097a <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  400974:	69b8      	ldr	r0, [r7, #24]
  400976:	4b09      	ldr	r3, [pc, #36]	; (40099c <xQueueGenericCreate+0x90>)
  400978:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  40097a:	69fb      	ldr	r3, [r7, #28]
  40097c:	2b00      	cmp	r3, #0
  40097e:	d103      	bne.n	400988 <xQueueGenericCreate+0x7c>
  400980:	4b07      	ldr	r3, [pc, #28]	; (4009a0 <xQueueGenericCreate+0x94>)
  400982:	4798      	blx	r3
  400984:	bf00      	nop
  400986:	e7fd      	b.n	400984 <xQueueGenericCreate+0x78>

	return xReturn;
  400988:	69fb      	ldr	r3, [r7, #28]
}
  40098a:	4618      	mov	r0, r3
  40098c:	3720      	adds	r7, #32
  40098e:	46bd      	mov	sp, r7
  400990:	bd80      	pop	{r7, pc}
  400992:	bf00      	nop
  400994:	004005b1 	.word	0x004005b1
  400998:	00400845 	.word	0x00400845
  40099c:	004006ad 	.word	0x004006ad
  4009a0:	004004c9 	.word	0x004004c9

004009a4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  4009a4:	b580      	push	{r7, lr}
  4009a6:	b088      	sub	sp, #32
  4009a8:	af00      	add	r7, sp, #0
  4009aa:	60f8      	str	r0, [r7, #12]
  4009ac:	60b9      	str	r1, [r7, #8]
  4009ae:	607a      	str	r2, [r7, #4]
  4009b0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  4009b2:	2300      	movs	r3, #0
  4009b4:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  4009b6:	68fb      	ldr	r3, [r7, #12]
  4009b8:	2b00      	cmp	r3, #0
  4009ba:	d103      	bne.n	4009c4 <xQueueGenericSend+0x20>
  4009bc:	4b46      	ldr	r3, [pc, #280]	; (400ad8 <xQueueGenericSend+0x134>)
  4009be:	4798      	blx	r3
  4009c0:	bf00      	nop
  4009c2:	e7fd      	b.n	4009c0 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  4009c4:	68bb      	ldr	r3, [r7, #8]
  4009c6:	2b00      	cmp	r3, #0
  4009c8:	d103      	bne.n	4009d2 <xQueueGenericSend+0x2e>
  4009ca:	68fb      	ldr	r3, [r7, #12]
  4009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4009ce:	2b00      	cmp	r3, #0
  4009d0:	d101      	bne.n	4009d6 <xQueueGenericSend+0x32>
  4009d2:	2301      	movs	r3, #1
  4009d4:	e000      	b.n	4009d8 <xQueueGenericSend+0x34>
  4009d6:	2300      	movs	r3, #0
  4009d8:	2b00      	cmp	r3, #0
  4009da:	d103      	bne.n	4009e4 <xQueueGenericSend+0x40>
  4009dc:	4b3e      	ldr	r3, [pc, #248]	; (400ad8 <xQueueGenericSend+0x134>)
  4009de:	4798      	blx	r3
  4009e0:	bf00      	nop
  4009e2:	e7fd      	b.n	4009e0 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  4009e4:	4b3d      	ldr	r3, [pc, #244]	; (400adc <xQueueGenericSend+0x138>)
  4009e6:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4009e8:	68fb      	ldr	r3, [r7, #12]
  4009ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4009ec:	68fb      	ldr	r3, [r7, #12]
  4009ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4009f0:	429a      	cmp	r2, r3
  4009f2:	d216      	bcs.n	400a22 <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4009f4:	683a      	ldr	r2, [r7, #0]
  4009f6:	68b9      	ldr	r1, [r7, #8]
  4009f8:	68f8      	ldr	r0, [r7, #12]
  4009fa:	4b39      	ldr	r3, [pc, #228]	; (400ae0 <xQueueGenericSend+0x13c>)
  4009fc:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009fe:	68fb      	ldr	r3, [r7, #12]
  400a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400a02:	2b00      	cmp	r3, #0
  400a04:	d009      	beq.n	400a1a <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400a06:	68fb      	ldr	r3, [r7, #12]
  400a08:	3324      	adds	r3, #36	; 0x24
  400a0a:	4618      	mov	r0, r3
  400a0c:	4b35      	ldr	r3, [pc, #212]	; (400ae4 <xQueueGenericSend+0x140>)
  400a0e:	4798      	blx	r3
  400a10:	4603      	mov	r3, r0
  400a12:	2b01      	cmp	r3, #1
  400a14:	d101      	bne.n	400a1a <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  400a16:	4b34      	ldr	r3, [pc, #208]	; (400ae8 <xQueueGenericSend+0x144>)
  400a18:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  400a1a:	4b34      	ldr	r3, [pc, #208]	; (400aec <xQueueGenericSend+0x148>)
  400a1c:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  400a1e:	2301      	movs	r3, #1
  400a20:	e056      	b.n	400ad0 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400a22:	687b      	ldr	r3, [r7, #4]
  400a24:	2b00      	cmp	r3, #0
  400a26:	d103      	bne.n	400a30 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400a28:	4b30      	ldr	r3, [pc, #192]	; (400aec <xQueueGenericSend+0x148>)
  400a2a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400a2c:	2300      	movs	r3, #0
  400a2e:	e04f      	b.n	400ad0 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  400a30:	69fb      	ldr	r3, [r7, #28]
  400a32:	2b00      	cmp	r3, #0
  400a34:	d106      	bne.n	400a44 <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400a36:	f107 0314 	add.w	r3, r7, #20
  400a3a:	4618      	mov	r0, r3
  400a3c:	4b2c      	ldr	r3, [pc, #176]	; (400af0 <xQueueGenericSend+0x14c>)
  400a3e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400a40:	2301      	movs	r3, #1
  400a42:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400a44:	4b29      	ldr	r3, [pc, #164]	; (400aec <xQueueGenericSend+0x148>)
  400a46:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400a48:	4b2a      	ldr	r3, [pc, #168]	; (400af4 <xQueueGenericSend+0x150>)
  400a4a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400a4c:	4b23      	ldr	r3, [pc, #140]	; (400adc <xQueueGenericSend+0x138>)
  400a4e:	4798      	blx	r3
  400a50:	68fb      	ldr	r3, [r7, #12]
  400a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400a54:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a58:	d102      	bne.n	400a60 <xQueueGenericSend+0xbc>
  400a5a:	68fb      	ldr	r3, [r7, #12]
  400a5c:	2200      	movs	r2, #0
  400a5e:	645a      	str	r2, [r3, #68]	; 0x44
  400a60:	68fb      	ldr	r3, [r7, #12]
  400a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400a64:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a68:	d102      	bne.n	400a70 <xQueueGenericSend+0xcc>
  400a6a:	68fb      	ldr	r3, [r7, #12]
  400a6c:	2200      	movs	r2, #0
  400a6e:	649a      	str	r2, [r3, #72]	; 0x48
  400a70:	4b1e      	ldr	r3, [pc, #120]	; (400aec <xQueueGenericSend+0x148>)
  400a72:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400a74:	1d3a      	adds	r2, r7, #4
  400a76:	f107 0314 	add.w	r3, r7, #20
  400a7a:	4611      	mov	r1, r2
  400a7c:	4618      	mov	r0, r3
  400a7e:	4b1e      	ldr	r3, [pc, #120]	; (400af8 <xQueueGenericSend+0x154>)
  400a80:	4798      	blx	r3
  400a82:	4603      	mov	r3, r0
  400a84:	2b00      	cmp	r3, #0
  400a86:	d11d      	bne.n	400ac4 <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400a88:	68f8      	ldr	r0, [r7, #12]
  400a8a:	4b1c      	ldr	r3, [pc, #112]	; (400afc <xQueueGenericSend+0x158>)
  400a8c:	4798      	blx	r3
  400a8e:	4603      	mov	r3, r0
  400a90:	2b00      	cmp	r3, #0
  400a92:	d011      	beq.n	400ab8 <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400a94:	68fb      	ldr	r3, [r7, #12]
  400a96:	3310      	adds	r3, #16
  400a98:	687a      	ldr	r2, [r7, #4]
  400a9a:	4611      	mov	r1, r2
  400a9c:	4618      	mov	r0, r3
  400a9e:	4b18      	ldr	r3, [pc, #96]	; (400b00 <xQueueGenericSend+0x15c>)
  400aa0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400aa2:	68f8      	ldr	r0, [r7, #12]
  400aa4:	4b17      	ldr	r3, [pc, #92]	; (400b04 <xQueueGenericSend+0x160>)
  400aa6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400aa8:	4b17      	ldr	r3, [pc, #92]	; (400b08 <xQueueGenericSend+0x164>)
  400aaa:	4798      	blx	r3
  400aac:	4603      	mov	r3, r0
  400aae:	2b00      	cmp	r3, #0
  400ab0:	d198      	bne.n	4009e4 <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  400ab2:	4b0d      	ldr	r3, [pc, #52]	; (400ae8 <xQueueGenericSend+0x144>)
  400ab4:	4798      	blx	r3
  400ab6:	e795      	b.n	4009e4 <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400ab8:	68f8      	ldr	r0, [r7, #12]
  400aba:	4b12      	ldr	r3, [pc, #72]	; (400b04 <xQueueGenericSend+0x160>)
  400abc:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400abe:	4b12      	ldr	r3, [pc, #72]	; (400b08 <xQueueGenericSend+0x164>)
  400ac0:	4798      	blx	r3
  400ac2:	e78f      	b.n	4009e4 <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400ac4:	68f8      	ldr	r0, [r7, #12]
  400ac6:	4b0f      	ldr	r3, [pc, #60]	; (400b04 <xQueueGenericSend+0x160>)
  400ac8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400aca:	4b0f      	ldr	r3, [pc, #60]	; (400b08 <xQueueGenericSend+0x164>)
  400acc:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400ace:	2300      	movs	r3, #0
		}
	}
}
  400ad0:	4618      	mov	r0, r3
  400ad2:	3720      	adds	r7, #32
  400ad4:	46bd      	mov	sp, r7
  400ad6:	bd80      	pop	{r7, pc}
  400ad8:	004004c9 	.word	0x004004c9
  400adc:	00400481 	.word	0x00400481
  400ae0:	00400d9d 	.word	0x00400d9d
  400ae4:	0040168d 	.word	0x0040168d
  400ae8:	00400465 	.word	0x00400465
  400aec:	004004a1 	.word	0x004004a1
  400af0:	00401749 	.word	0x00401749
  400af4:	0040124d 	.word	0x0040124d
  400af8:	00401785 	.word	0x00401785
  400afc:	00400f89 	.word	0x00400f89
  400b00:	004015a5 	.word	0x004015a5
  400b04:	00400ead 	.word	0x00400ead
  400b08:	00401269 	.word	0x00401269

00400b0c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  400b0c:	b580      	push	{r7, lr}
  400b0e:	b086      	sub	sp, #24
  400b10:	af00      	add	r7, sp, #0
  400b12:	60f8      	str	r0, [r7, #12]
  400b14:	60b9      	str	r1, [r7, #8]
  400b16:	607a      	str	r2, [r7, #4]
  400b18:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  400b1a:	68fb      	ldr	r3, [r7, #12]
  400b1c:	2b00      	cmp	r3, #0
  400b1e:	d103      	bne.n	400b28 <xQueueGenericSendFromISR+0x1c>
  400b20:	4b25      	ldr	r3, [pc, #148]	; (400bb8 <xQueueGenericSendFromISR+0xac>)
  400b22:	4798      	blx	r3
  400b24:	bf00      	nop
  400b26:	e7fd      	b.n	400b24 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400b28:	68bb      	ldr	r3, [r7, #8]
  400b2a:	2b00      	cmp	r3, #0
  400b2c:	d103      	bne.n	400b36 <xQueueGenericSendFromISR+0x2a>
  400b2e:	68fb      	ldr	r3, [r7, #12]
  400b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400b32:	2b00      	cmp	r3, #0
  400b34:	d101      	bne.n	400b3a <xQueueGenericSendFromISR+0x2e>
  400b36:	2301      	movs	r3, #1
  400b38:	e000      	b.n	400b3c <xQueueGenericSendFromISR+0x30>
  400b3a:	2300      	movs	r3, #0
  400b3c:	2b00      	cmp	r3, #0
  400b3e:	d103      	bne.n	400b48 <xQueueGenericSendFromISR+0x3c>
  400b40:	4b1d      	ldr	r3, [pc, #116]	; (400bb8 <xQueueGenericSendFromISR+0xac>)
  400b42:	4798      	blx	r3
  400b44:	bf00      	nop
  400b46:	e7fd      	b.n	400b44 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  400b48:	4b1b      	ldr	r3, [pc, #108]	; (400bb8 <xQueueGenericSendFromISR+0xac>)
  400b4a:	4798      	blx	r3
  400b4c:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400b4e:	68fb      	ldr	r3, [r7, #12]
  400b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400b52:	68fb      	ldr	r3, [r7, #12]
  400b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400b56:	429a      	cmp	r2, r3
  400b58:	d224      	bcs.n	400ba4 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400b5a:	683a      	ldr	r2, [r7, #0]
  400b5c:	68b9      	ldr	r1, [r7, #8]
  400b5e:	68f8      	ldr	r0, [r7, #12]
  400b60:	4b16      	ldr	r3, [pc, #88]	; (400bbc <xQueueGenericSendFromISR+0xb0>)
  400b62:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400b64:	68fb      	ldr	r3, [r7, #12]
  400b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400b68:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b6c:	d112      	bne.n	400b94 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400b6e:	68fb      	ldr	r3, [r7, #12]
  400b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400b72:	2b00      	cmp	r3, #0
  400b74:	d013      	beq.n	400b9e <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400b76:	68fb      	ldr	r3, [r7, #12]
  400b78:	3324      	adds	r3, #36	; 0x24
  400b7a:	4618      	mov	r0, r3
  400b7c:	4b10      	ldr	r3, [pc, #64]	; (400bc0 <xQueueGenericSendFromISR+0xb4>)
  400b7e:	4798      	blx	r3
  400b80:	4603      	mov	r3, r0
  400b82:	2b00      	cmp	r3, #0
  400b84:	d00b      	beq.n	400b9e <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  400b86:	687b      	ldr	r3, [r7, #4]
  400b88:	2b00      	cmp	r3, #0
  400b8a:	d008      	beq.n	400b9e <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  400b8c:	687b      	ldr	r3, [r7, #4]
  400b8e:	2201      	movs	r2, #1
  400b90:	601a      	str	r2, [r3, #0]
  400b92:	e004      	b.n	400b9e <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400b94:	68fb      	ldr	r3, [r7, #12]
  400b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400b98:	1c5a      	adds	r2, r3, #1
  400b9a:	68fb      	ldr	r3, [r7, #12]
  400b9c:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  400b9e:	2301      	movs	r3, #1
  400ba0:	617b      	str	r3, [r7, #20]
  400ba2:	e001      	b.n	400ba8 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400ba4:	2300      	movs	r3, #0
  400ba6:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  400ba8:	6938      	ldr	r0, [r7, #16]
  400baa:	4b06      	ldr	r3, [pc, #24]	; (400bc4 <xQueueGenericSendFromISR+0xb8>)
  400bac:	4798      	blx	r3

	return xReturn;
  400bae:	697b      	ldr	r3, [r7, #20]
}
  400bb0:	4618      	mov	r0, r3
  400bb2:	3718      	adds	r7, #24
  400bb4:	46bd      	mov	sp, r7
  400bb6:	bd80      	pop	{r7, pc}
  400bb8:	004004c9 	.word	0x004004c9
  400bbc:	00400d9d 	.word	0x00400d9d
  400bc0:	0040168d 	.word	0x0040168d
  400bc4:	004004db 	.word	0x004004db

00400bc8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  400bc8:	b580      	push	{r7, lr}
  400bca:	b088      	sub	sp, #32
  400bcc:	af00      	add	r7, sp, #0
  400bce:	60f8      	str	r0, [r7, #12]
  400bd0:	60b9      	str	r1, [r7, #8]
  400bd2:	607a      	str	r2, [r7, #4]
  400bd4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400bd6:	2300      	movs	r3, #0
  400bd8:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  400bda:	68fb      	ldr	r3, [r7, #12]
  400bdc:	2b00      	cmp	r3, #0
  400bde:	d103      	bne.n	400be8 <xQueueGenericReceive+0x20>
  400be0:	4b5f      	ldr	r3, [pc, #380]	; (400d60 <xQueueGenericReceive+0x198>)
  400be2:	4798      	blx	r3
  400be4:	bf00      	nop
  400be6:	e7fd      	b.n	400be4 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400be8:	68bb      	ldr	r3, [r7, #8]
  400bea:	2b00      	cmp	r3, #0
  400bec:	d103      	bne.n	400bf6 <xQueueGenericReceive+0x2e>
  400bee:	68fb      	ldr	r3, [r7, #12]
  400bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400bf2:	2b00      	cmp	r3, #0
  400bf4:	d101      	bne.n	400bfa <xQueueGenericReceive+0x32>
  400bf6:	2301      	movs	r3, #1
  400bf8:	e000      	b.n	400bfc <xQueueGenericReceive+0x34>
  400bfa:	2300      	movs	r3, #0
  400bfc:	2b00      	cmp	r3, #0
  400bfe:	d103      	bne.n	400c08 <xQueueGenericReceive+0x40>
  400c00:	4b57      	ldr	r3, [pc, #348]	; (400d60 <xQueueGenericReceive+0x198>)
  400c02:	4798      	blx	r3
  400c04:	bf00      	nop
  400c06:	e7fd      	b.n	400c04 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400c08:	4b56      	ldr	r3, [pc, #344]	; (400d64 <xQueueGenericReceive+0x19c>)
  400c0a:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  400c0c:	68fb      	ldr	r3, [r7, #12]
  400c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400c10:	2b00      	cmp	r3, #0
  400c12:	d03b      	beq.n	400c8c <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  400c14:	68fb      	ldr	r3, [r7, #12]
  400c16:	68db      	ldr	r3, [r3, #12]
  400c18:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400c1a:	68b9      	ldr	r1, [r7, #8]
  400c1c:	68f8      	ldr	r0, [r7, #12]
  400c1e:	4b52      	ldr	r3, [pc, #328]	; (400d68 <xQueueGenericReceive+0x1a0>)
  400c20:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  400c22:	683b      	ldr	r3, [r7, #0]
  400c24:	2b00      	cmp	r3, #0
  400c26:	d11c      	bne.n	400c62 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  400c28:	68fb      	ldr	r3, [r7, #12]
  400c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400c2c:	1e5a      	subs	r2, r3, #1
  400c2e:	68fb      	ldr	r3, [r7, #12]
  400c30:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400c32:	68fb      	ldr	r3, [r7, #12]
  400c34:	681b      	ldr	r3, [r3, #0]
  400c36:	2b00      	cmp	r3, #0
  400c38:	d104      	bne.n	400c44 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  400c3a:	4b4c      	ldr	r3, [pc, #304]	; (400d6c <xQueueGenericReceive+0x1a4>)
  400c3c:	4798      	blx	r3
  400c3e:	4602      	mov	r2, r0
  400c40:	68fb      	ldr	r3, [r7, #12]
  400c42:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400c44:	68fb      	ldr	r3, [r7, #12]
  400c46:	691b      	ldr	r3, [r3, #16]
  400c48:	2b00      	cmp	r3, #0
  400c4a:	d01b      	beq.n	400c84 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400c4c:	68fb      	ldr	r3, [r7, #12]
  400c4e:	3310      	adds	r3, #16
  400c50:	4618      	mov	r0, r3
  400c52:	4b47      	ldr	r3, [pc, #284]	; (400d70 <xQueueGenericReceive+0x1a8>)
  400c54:	4798      	blx	r3
  400c56:	4603      	mov	r3, r0
  400c58:	2b01      	cmp	r3, #1
  400c5a:	d113      	bne.n	400c84 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  400c5c:	4b45      	ldr	r3, [pc, #276]	; (400d74 <xQueueGenericReceive+0x1ac>)
  400c5e:	4798      	blx	r3
  400c60:	e010      	b.n	400c84 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  400c62:	68fb      	ldr	r3, [r7, #12]
  400c64:	69ba      	ldr	r2, [r7, #24]
  400c66:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c68:	68fb      	ldr	r3, [r7, #12]
  400c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	d009      	beq.n	400c84 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c70:	68fb      	ldr	r3, [r7, #12]
  400c72:	3324      	adds	r3, #36	; 0x24
  400c74:	4618      	mov	r0, r3
  400c76:	4b3e      	ldr	r3, [pc, #248]	; (400d70 <xQueueGenericReceive+0x1a8>)
  400c78:	4798      	blx	r3
  400c7a:	4603      	mov	r3, r0
  400c7c:	2b00      	cmp	r3, #0
  400c7e:	d001      	beq.n	400c84 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  400c80:	4b3c      	ldr	r3, [pc, #240]	; (400d74 <xQueueGenericReceive+0x1ac>)
  400c82:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  400c84:	4b3c      	ldr	r3, [pc, #240]	; (400d78 <xQueueGenericReceive+0x1b0>)
  400c86:	4798      	blx	r3
				return pdPASS;
  400c88:	2301      	movs	r3, #1
  400c8a:	e064      	b.n	400d56 <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400c8c:	687b      	ldr	r3, [r7, #4]
  400c8e:	2b00      	cmp	r3, #0
  400c90:	d103      	bne.n	400c9a <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400c92:	4b39      	ldr	r3, [pc, #228]	; (400d78 <xQueueGenericReceive+0x1b0>)
  400c94:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  400c96:	2300      	movs	r3, #0
  400c98:	e05d      	b.n	400d56 <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  400c9a:	69fb      	ldr	r3, [r7, #28]
  400c9c:	2b00      	cmp	r3, #0
  400c9e:	d106      	bne.n	400cae <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400ca0:	f107 0310 	add.w	r3, r7, #16
  400ca4:	4618      	mov	r0, r3
  400ca6:	4b35      	ldr	r3, [pc, #212]	; (400d7c <xQueueGenericReceive+0x1b4>)
  400ca8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400caa:	2301      	movs	r3, #1
  400cac:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400cae:	4b32      	ldr	r3, [pc, #200]	; (400d78 <xQueueGenericReceive+0x1b0>)
  400cb0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400cb2:	4b33      	ldr	r3, [pc, #204]	; (400d80 <xQueueGenericReceive+0x1b8>)
  400cb4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400cb6:	4b2b      	ldr	r3, [pc, #172]	; (400d64 <xQueueGenericReceive+0x19c>)
  400cb8:	4798      	blx	r3
  400cba:	68fb      	ldr	r3, [r7, #12]
  400cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
  400cc2:	d102      	bne.n	400cca <xQueueGenericReceive+0x102>
  400cc4:	68fb      	ldr	r3, [r7, #12]
  400cc6:	2200      	movs	r2, #0
  400cc8:	645a      	str	r2, [r3, #68]	; 0x44
  400cca:	68fb      	ldr	r3, [r7, #12]
  400ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400cce:	f1b3 3fff 	cmp.w	r3, #4294967295
  400cd2:	d102      	bne.n	400cda <xQueueGenericReceive+0x112>
  400cd4:	68fb      	ldr	r3, [r7, #12]
  400cd6:	2200      	movs	r2, #0
  400cd8:	649a      	str	r2, [r3, #72]	; 0x48
  400cda:	4b27      	ldr	r3, [pc, #156]	; (400d78 <xQueueGenericReceive+0x1b0>)
  400cdc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400cde:	1d3a      	adds	r2, r7, #4
  400ce0:	f107 0310 	add.w	r3, r7, #16
  400ce4:	4611      	mov	r1, r2
  400ce6:	4618      	mov	r0, r3
  400ce8:	4b26      	ldr	r3, [pc, #152]	; (400d84 <xQueueGenericReceive+0x1bc>)
  400cea:	4798      	blx	r3
  400cec:	4603      	mov	r3, r0
  400cee:	2b00      	cmp	r3, #0
  400cf0:	d12b      	bne.n	400d4a <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400cf2:	68f8      	ldr	r0, [r7, #12]
  400cf4:	4b24      	ldr	r3, [pc, #144]	; (400d88 <xQueueGenericReceive+0x1c0>)
  400cf6:	4798      	blx	r3
  400cf8:	4603      	mov	r3, r0
  400cfa:	2b00      	cmp	r3, #0
  400cfc:	d01f      	beq.n	400d3e <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400cfe:	68fb      	ldr	r3, [r7, #12]
  400d00:	681b      	ldr	r3, [r3, #0]
  400d02:	2b00      	cmp	r3, #0
  400d04:	d108      	bne.n	400d18 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  400d06:	4b17      	ldr	r3, [pc, #92]	; (400d64 <xQueueGenericReceive+0x19c>)
  400d08:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400d0a:	68fb      	ldr	r3, [r7, #12]
  400d0c:	685b      	ldr	r3, [r3, #4]
  400d0e:	4618      	mov	r0, r3
  400d10:	4b1e      	ldr	r3, [pc, #120]	; (400d8c <xQueueGenericReceive+0x1c4>)
  400d12:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  400d14:	4b18      	ldr	r3, [pc, #96]	; (400d78 <xQueueGenericReceive+0x1b0>)
  400d16:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400d18:	68fb      	ldr	r3, [r7, #12]
  400d1a:	3324      	adds	r3, #36	; 0x24
  400d1c:	687a      	ldr	r2, [r7, #4]
  400d1e:	4611      	mov	r1, r2
  400d20:	4618      	mov	r0, r3
  400d22:	4b1b      	ldr	r3, [pc, #108]	; (400d90 <xQueueGenericReceive+0x1c8>)
  400d24:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400d26:	68f8      	ldr	r0, [r7, #12]
  400d28:	4b1a      	ldr	r3, [pc, #104]	; (400d94 <xQueueGenericReceive+0x1cc>)
  400d2a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400d2c:	4b1a      	ldr	r3, [pc, #104]	; (400d98 <xQueueGenericReceive+0x1d0>)
  400d2e:	4798      	blx	r3
  400d30:	4603      	mov	r3, r0
  400d32:	2b00      	cmp	r3, #0
  400d34:	f47f af68 	bne.w	400c08 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  400d38:	4b0e      	ldr	r3, [pc, #56]	; (400d74 <xQueueGenericReceive+0x1ac>)
  400d3a:	4798      	blx	r3
  400d3c:	e764      	b.n	400c08 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400d3e:	68f8      	ldr	r0, [r7, #12]
  400d40:	4b14      	ldr	r3, [pc, #80]	; (400d94 <xQueueGenericReceive+0x1cc>)
  400d42:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400d44:	4b14      	ldr	r3, [pc, #80]	; (400d98 <xQueueGenericReceive+0x1d0>)
  400d46:	4798      	blx	r3
  400d48:	e75e      	b.n	400c08 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  400d4a:	68f8      	ldr	r0, [r7, #12]
  400d4c:	4b11      	ldr	r3, [pc, #68]	; (400d94 <xQueueGenericReceive+0x1cc>)
  400d4e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400d50:	4b11      	ldr	r3, [pc, #68]	; (400d98 <xQueueGenericReceive+0x1d0>)
  400d52:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  400d54:	2300      	movs	r3, #0
		}
	}
}
  400d56:	4618      	mov	r0, r3
  400d58:	3720      	adds	r7, #32
  400d5a:	46bd      	mov	sp, r7
  400d5c:	bd80      	pop	{r7, pc}
  400d5e:	bf00      	nop
  400d60:	004004c9 	.word	0x004004c9
  400d64:	00400481 	.word	0x00400481
  400d68:	00400e5d 	.word	0x00400e5d
  400d6c:	00401b05 	.word	0x00401b05
  400d70:	0040168d 	.word	0x0040168d
  400d74:	00400465 	.word	0x00400465
  400d78:	004004a1 	.word	0x004004a1
  400d7c:	00401749 	.word	0x00401749
  400d80:	0040124d 	.word	0x0040124d
  400d84:	00401785 	.word	0x00401785
  400d88:	00400f55 	.word	0x00400f55
  400d8c:	00401b61 	.word	0x00401b61
  400d90:	004015a5 	.word	0x004015a5
  400d94:	00400ead 	.word	0x00400ead
  400d98:	00401269 	.word	0x00401269

00400d9c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  400d9c:	b580      	push	{r7, lr}
  400d9e:	b084      	sub	sp, #16
  400da0:	af00      	add	r7, sp, #0
  400da2:	60f8      	str	r0, [r7, #12]
  400da4:	60b9      	str	r1, [r7, #8]
  400da6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  400da8:	68fb      	ldr	r3, [r7, #12]
  400daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400dac:	2b00      	cmp	r3, #0
  400dae:	d10c      	bne.n	400dca <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400db0:	68fb      	ldr	r3, [r7, #12]
  400db2:	681b      	ldr	r3, [r3, #0]
  400db4:	2b00      	cmp	r3, #0
  400db6:	d143      	bne.n	400e40 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400db8:	68fb      	ldr	r3, [r7, #12]
  400dba:	685b      	ldr	r3, [r3, #4]
  400dbc:	4618      	mov	r0, r3
  400dbe:	4b25      	ldr	r3, [pc, #148]	; (400e54 <prvCopyDataToQueue+0xb8>)
  400dc0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400dc2:	68fb      	ldr	r3, [r7, #12]
  400dc4:	2200      	movs	r2, #0
  400dc6:	605a      	str	r2, [r3, #4]
  400dc8:	e03a      	b.n	400e40 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  400dca:	687b      	ldr	r3, [r7, #4]
  400dcc:	2b00      	cmp	r3, #0
  400dce:	d119      	bne.n	400e04 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400dd0:	68fb      	ldr	r3, [r7, #12]
  400dd2:	6898      	ldr	r0, [r3, #8]
  400dd4:	68fb      	ldr	r3, [r7, #12]
  400dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400dd8:	461a      	mov	r2, r3
  400dda:	68b9      	ldr	r1, [r7, #8]
  400ddc:	4b1e      	ldr	r3, [pc, #120]	; (400e58 <prvCopyDataToQueue+0xbc>)
  400dde:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400de0:	68fb      	ldr	r3, [r7, #12]
  400de2:	689a      	ldr	r2, [r3, #8]
  400de4:	68fb      	ldr	r3, [r7, #12]
  400de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400de8:	441a      	add	r2, r3
  400dea:	68fb      	ldr	r3, [r7, #12]
  400dec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  400dee:	68fb      	ldr	r3, [r7, #12]
  400df0:	689a      	ldr	r2, [r3, #8]
  400df2:	68fb      	ldr	r3, [r7, #12]
  400df4:	685b      	ldr	r3, [r3, #4]
  400df6:	429a      	cmp	r2, r3
  400df8:	d322      	bcc.n	400e40 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400dfa:	68fb      	ldr	r3, [r7, #12]
  400dfc:	681a      	ldr	r2, [r3, #0]
  400dfe:	68fb      	ldr	r3, [r7, #12]
  400e00:	609a      	str	r2, [r3, #8]
  400e02:	e01d      	b.n	400e40 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400e04:	68fb      	ldr	r3, [r7, #12]
  400e06:	68d8      	ldr	r0, [r3, #12]
  400e08:	68fb      	ldr	r3, [r7, #12]
  400e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e0c:	461a      	mov	r2, r3
  400e0e:	68b9      	ldr	r1, [r7, #8]
  400e10:	4b11      	ldr	r3, [pc, #68]	; (400e58 <prvCopyDataToQueue+0xbc>)
  400e12:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  400e14:	68fb      	ldr	r3, [r7, #12]
  400e16:	68da      	ldr	r2, [r3, #12]
  400e18:	68fb      	ldr	r3, [r7, #12]
  400e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e1c:	425b      	negs	r3, r3
  400e1e:	441a      	add	r2, r3
  400e20:	68fb      	ldr	r3, [r7, #12]
  400e22:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  400e24:	68fb      	ldr	r3, [r7, #12]
  400e26:	68da      	ldr	r2, [r3, #12]
  400e28:	68fb      	ldr	r3, [r7, #12]
  400e2a:	681b      	ldr	r3, [r3, #0]
  400e2c:	429a      	cmp	r2, r3
  400e2e:	d207      	bcs.n	400e40 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400e30:	68fb      	ldr	r3, [r7, #12]
  400e32:	685a      	ldr	r2, [r3, #4]
  400e34:	68fb      	ldr	r3, [r7, #12]
  400e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e38:	425b      	negs	r3, r3
  400e3a:	441a      	add	r2, r3
  400e3c:	68fb      	ldr	r3, [r7, #12]
  400e3e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400e40:	68fb      	ldr	r3, [r7, #12]
  400e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400e44:	1c5a      	adds	r2, r3, #1
  400e46:	68fb      	ldr	r3, [r7, #12]
  400e48:	639a      	str	r2, [r3, #56]	; 0x38
}
  400e4a:	bf00      	nop
  400e4c:	3710      	adds	r7, #16
  400e4e:	46bd      	mov	sp, r7
  400e50:	bd80      	pop	{r7, pc}
  400e52:	bf00      	nop
  400e54:	00401c15 	.word	0x00401c15
  400e58:	0040684d 	.word	0x0040684d

00400e5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  400e5c:	b580      	push	{r7, lr}
  400e5e:	b082      	sub	sp, #8
  400e60:	af00      	add	r7, sp, #0
  400e62:	6078      	str	r0, [r7, #4]
  400e64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  400e66:	687b      	ldr	r3, [r7, #4]
  400e68:	681b      	ldr	r3, [r3, #0]
  400e6a:	2b00      	cmp	r3, #0
  400e6c:	d018      	beq.n	400ea0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  400e6e:	687b      	ldr	r3, [r7, #4]
  400e70:	68da      	ldr	r2, [r3, #12]
  400e72:	687b      	ldr	r3, [r7, #4]
  400e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e76:	441a      	add	r2, r3
  400e78:	687b      	ldr	r3, [r7, #4]
  400e7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  400e7c:	687b      	ldr	r3, [r7, #4]
  400e7e:	68da      	ldr	r2, [r3, #12]
  400e80:	687b      	ldr	r3, [r7, #4]
  400e82:	685b      	ldr	r3, [r3, #4]
  400e84:	429a      	cmp	r2, r3
  400e86:	d303      	bcc.n	400e90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  400e88:	687b      	ldr	r3, [r7, #4]
  400e8a:	681a      	ldr	r2, [r3, #0]
  400e8c:	687b      	ldr	r3, [r7, #4]
  400e8e:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  400e90:	687b      	ldr	r3, [r7, #4]
  400e92:	68d9      	ldr	r1, [r3, #12]
  400e94:	687b      	ldr	r3, [r7, #4]
  400e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e98:	461a      	mov	r2, r3
  400e9a:	6838      	ldr	r0, [r7, #0]
  400e9c:	4b02      	ldr	r3, [pc, #8]	; (400ea8 <prvCopyDataFromQueue+0x4c>)
  400e9e:	4798      	blx	r3
	}
}
  400ea0:	bf00      	nop
  400ea2:	3708      	adds	r7, #8
  400ea4:	46bd      	mov	sp, r7
  400ea6:	bd80      	pop	{r7, pc}
  400ea8:	0040684d 	.word	0x0040684d

00400eac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  400eac:	b580      	push	{r7, lr}
  400eae:	b082      	sub	sp, #8
  400eb0:	af00      	add	r7, sp, #0
  400eb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400eb4:	4b23      	ldr	r3, [pc, #140]	; (400f44 <prvUnlockQueue+0x98>)
  400eb6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400eb8:	e012      	b.n	400ee0 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400eba:	687b      	ldr	r3, [r7, #4]
  400ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400ebe:	2b00      	cmp	r3, #0
  400ec0:	d013      	beq.n	400eea <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ec2:	687b      	ldr	r3, [r7, #4]
  400ec4:	3324      	adds	r3, #36	; 0x24
  400ec6:	4618      	mov	r0, r3
  400ec8:	4b1f      	ldr	r3, [pc, #124]	; (400f48 <prvUnlockQueue+0x9c>)
  400eca:	4798      	blx	r3
  400ecc:	4603      	mov	r3, r0
  400ece:	2b00      	cmp	r3, #0
  400ed0:	d001      	beq.n	400ed6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  400ed2:	4b1e      	ldr	r3, [pc, #120]	; (400f4c <prvUnlockQueue+0xa0>)
  400ed4:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  400ed6:	687b      	ldr	r3, [r7, #4]
  400ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400eda:	1e5a      	subs	r2, r3, #1
  400edc:	687b      	ldr	r3, [r7, #4]
  400ede:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ee0:	687b      	ldr	r3, [r7, #4]
  400ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400ee4:	2b00      	cmp	r3, #0
  400ee6:	dce8      	bgt.n	400eba <prvUnlockQueue+0xe>
  400ee8:	e000      	b.n	400eec <prvUnlockQueue+0x40>
			}
			else
			{
				break;
  400eea:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400eec:	687b      	ldr	r3, [r7, #4]
  400eee:	f04f 32ff 	mov.w	r2, #4294967295
  400ef2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400ef4:	4b16      	ldr	r3, [pc, #88]	; (400f50 <prvUnlockQueue+0xa4>)
  400ef6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400ef8:	4b12      	ldr	r3, [pc, #72]	; (400f44 <prvUnlockQueue+0x98>)
  400efa:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400efc:	e012      	b.n	400f24 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400efe:	687b      	ldr	r3, [r7, #4]
  400f00:	691b      	ldr	r3, [r3, #16]
  400f02:	2b00      	cmp	r3, #0
  400f04:	d013      	beq.n	400f2e <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400f06:	687b      	ldr	r3, [r7, #4]
  400f08:	3310      	adds	r3, #16
  400f0a:	4618      	mov	r0, r3
  400f0c:	4b0e      	ldr	r3, [pc, #56]	; (400f48 <prvUnlockQueue+0x9c>)
  400f0e:	4798      	blx	r3
  400f10:	4603      	mov	r3, r0
  400f12:	2b00      	cmp	r3, #0
  400f14:	d001      	beq.n	400f1a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  400f16:	4b0d      	ldr	r3, [pc, #52]	; (400f4c <prvUnlockQueue+0xa0>)
  400f18:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  400f1a:	687b      	ldr	r3, [r7, #4]
  400f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400f1e:	1e5a      	subs	r2, r3, #1
  400f20:	687b      	ldr	r3, [r7, #4]
  400f22:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400f24:	687b      	ldr	r3, [r7, #4]
  400f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400f28:	2b00      	cmp	r3, #0
  400f2a:	dce8      	bgt.n	400efe <prvUnlockQueue+0x52>
  400f2c:	e000      	b.n	400f30 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
  400f2e:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  400f30:	687b      	ldr	r3, [r7, #4]
  400f32:	f04f 32ff 	mov.w	r2, #4294967295
  400f36:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  400f38:	4b05      	ldr	r3, [pc, #20]	; (400f50 <prvUnlockQueue+0xa4>)
  400f3a:	4798      	blx	r3
}
  400f3c:	bf00      	nop
  400f3e:	3708      	adds	r7, #8
  400f40:	46bd      	mov	sp, r7
  400f42:	bd80      	pop	{r7, pc}
  400f44:	00400481 	.word	0x00400481
  400f48:	0040168d 	.word	0x0040168d
  400f4c:	00401839 	.word	0x00401839
  400f50:	004004a1 	.word	0x004004a1

00400f54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  400f54:	b580      	push	{r7, lr}
  400f56:	b084      	sub	sp, #16
  400f58:	af00      	add	r7, sp, #0
  400f5a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  400f5c:	4b08      	ldr	r3, [pc, #32]	; (400f80 <prvIsQueueEmpty+0x2c>)
  400f5e:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  400f60:	687b      	ldr	r3, [r7, #4]
  400f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400f64:	2b00      	cmp	r3, #0
  400f66:	bf0c      	ite	eq
  400f68:	2301      	moveq	r3, #1
  400f6a:	2300      	movne	r3, #0
  400f6c:	b2db      	uxtb	r3, r3
  400f6e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  400f70:	4b04      	ldr	r3, [pc, #16]	; (400f84 <prvIsQueueEmpty+0x30>)
  400f72:	4798      	blx	r3

	return xReturn;
  400f74:	68fb      	ldr	r3, [r7, #12]
}
  400f76:	4618      	mov	r0, r3
  400f78:	3710      	adds	r7, #16
  400f7a:	46bd      	mov	sp, r7
  400f7c:	bd80      	pop	{r7, pc}
  400f7e:	bf00      	nop
  400f80:	00400481 	.word	0x00400481
  400f84:	004004a1 	.word	0x004004a1

00400f88 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  400f88:	b580      	push	{r7, lr}
  400f8a:	b084      	sub	sp, #16
  400f8c:	af00      	add	r7, sp, #0
  400f8e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  400f90:	4b09      	ldr	r3, [pc, #36]	; (400fb8 <prvIsQueueFull+0x30>)
  400f92:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  400f94:	687b      	ldr	r3, [r7, #4]
  400f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400f98:	687b      	ldr	r3, [r7, #4]
  400f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400f9c:	429a      	cmp	r2, r3
  400f9e:	bf0c      	ite	eq
  400fa0:	2301      	moveq	r3, #1
  400fa2:	2300      	movne	r3, #0
  400fa4:	b2db      	uxtb	r3, r3
  400fa6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  400fa8:	4b04      	ldr	r3, [pc, #16]	; (400fbc <prvIsQueueFull+0x34>)
  400faa:	4798      	blx	r3

	return xReturn;
  400fac:	68fb      	ldr	r3, [r7, #12]
}
  400fae:	4618      	mov	r0, r3
  400fb0:	3710      	adds	r7, #16
  400fb2:	46bd      	mov	sp, r7
  400fb4:	bd80      	pop	{r7, pc}
  400fb6:	bf00      	nop
  400fb8:	00400481 	.word	0x00400481
  400fbc:	004004a1 	.word	0x004004a1

00400fc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  400fc0:	b580      	push	{r7, lr}
  400fc2:	b082      	sub	sp, #8
  400fc4:	af00      	add	r7, sp, #0
  400fc6:	6078      	str	r0, [r7, #4]
  400fc8:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  400fca:	4b12      	ldr	r3, [pc, #72]	; (401014 <vQueueWaitForMessageRestricted+0x54>)
  400fcc:	4798      	blx	r3
  400fce:	687b      	ldr	r3, [r7, #4]
  400fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fd6:	d102      	bne.n	400fde <vQueueWaitForMessageRestricted+0x1e>
  400fd8:	687b      	ldr	r3, [r7, #4]
  400fda:	2200      	movs	r2, #0
  400fdc:	645a      	str	r2, [r3, #68]	; 0x44
  400fde:	687b      	ldr	r3, [r7, #4]
  400fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fe6:	d102      	bne.n	400fee <vQueueWaitForMessageRestricted+0x2e>
  400fe8:	687b      	ldr	r3, [r7, #4]
  400fea:	2200      	movs	r2, #0
  400fec:	649a      	str	r2, [r3, #72]	; 0x48
  400fee:	4b0a      	ldr	r3, [pc, #40]	; (401018 <vQueueWaitForMessageRestricted+0x58>)
  400ff0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  400ff2:	687b      	ldr	r3, [r7, #4]
  400ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400ff6:	2b00      	cmp	r3, #0
  400ff8:	d105      	bne.n	401006 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400ffa:	687b      	ldr	r3, [r7, #4]
  400ffc:	3324      	adds	r3, #36	; 0x24
  400ffe:	6839      	ldr	r1, [r7, #0]
  401000:	4618      	mov	r0, r3
  401002:	4b06      	ldr	r3, [pc, #24]	; (40101c <vQueueWaitForMessageRestricted+0x5c>)
  401004:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  401006:	6878      	ldr	r0, [r7, #4]
  401008:	4b05      	ldr	r3, [pc, #20]	; (401020 <vQueueWaitForMessageRestricted+0x60>)
  40100a:	4798      	blx	r3
	}
  40100c:	bf00      	nop
  40100e:	3708      	adds	r7, #8
  401010:	46bd      	mov	sp, r7
  401012:	bd80      	pop	{r7, pc}
  401014:	00400481 	.word	0x00400481
  401018:	004004a1 	.word	0x004004a1
  40101c:	00401629 	.word	0x00401629
  401020:	00400ead 	.word	0x00400ead

00401024 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  401024:	b590      	push	{r4, r7, lr}
  401026:	b08b      	sub	sp, #44	; 0x2c
  401028:	af02      	add	r7, sp, #8
  40102a:	60f8      	str	r0, [r7, #12]
  40102c:	60b9      	str	r1, [r7, #8]
  40102e:	603b      	str	r3, [r7, #0]
  401030:	4613      	mov	r3, r2
  401032:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  401034:	68fb      	ldr	r3, [r7, #12]
  401036:	2b00      	cmp	r3, #0
  401038:	d103      	bne.n	401042 <xTaskGenericCreate+0x1e>
  40103a:	4b54      	ldr	r3, [pc, #336]	; (40118c <xTaskGenericCreate+0x168>)
  40103c:	4798      	blx	r3
  40103e:	bf00      	nop
  401040:	e7fd      	b.n	40103e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  401042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401044:	2b04      	cmp	r3, #4
  401046:	d903      	bls.n	401050 <xTaskGenericCreate+0x2c>
  401048:	4b50      	ldr	r3, [pc, #320]	; (40118c <xTaskGenericCreate+0x168>)
  40104a:	4798      	blx	r3
  40104c:	bf00      	nop
  40104e:	e7fd      	b.n	40104c <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  401050:	88fb      	ldrh	r3, [r7, #6]
  401052:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401054:	4618      	mov	r0, r3
  401056:	4b4e      	ldr	r3, [pc, #312]	; (401190 <xTaskGenericCreate+0x16c>)
  401058:	4798      	blx	r3
  40105a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  40105c:	69bb      	ldr	r3, [r7, #24]
  40105e:	2b00      	cmp	r3, #0
  401060:	d07d      	beq.n	40115e <xTaskGenericCreate+0x13a>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  401062:	69bb      	ldr	r3, [r7, #24]
  401064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401066:	88fb      	ldrh	r3, [r7, #6]
  401068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  40106c:	3b01      	subs	r3, #1
  40106e:	009b      	lsls	r3, r3, #2
  401070:	4413      	add	r3, r2
  401072:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  401074:	697b      	ldr	r3, [r7, #20]
  401076:	f023 0307 	bic.w	r3, r3, #7
  40107a:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  40107c:	697b      	ldr	r3, [r7, #20]
  40107e:	f003 0307 	and.w	r3, r3, #7
  401082:	2b00      	cmp	r3, #0
  401084:	d003      	beq.n	40108e <xTaskGenericCreate+0x6a>
  401086:	4b41      	ldr	r3, [pc, #260]	; (40118c <xTaskGenericCreate+0x168>)
  401088:	4798      	blx	r3
  40108a:	bf00      	nop
  40108c:	e7fd      	b.n	40108a <xTaskGenericCreate+0x66>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  40108e:	88fb      	ldrh	r3, [r7, #6]
  401090:	9300      	str	r3, [sp, #0]
  401092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401096:	68b9      	ldr	r1, [r7, #8]
  401098:	69b8      	ldr	r0, [r7, #24]
  40109a:	4c3e      	ldr	r4, [pc, #248]	; (401194 <xTaskGenericCreate+0x170>)
  40109c:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40109e:	683a      	ldr	r2, [r7, #0]
  4010a0:	68f9      	ldr	r1, [r7, #12]
  4010a2:	6978      	ldr	r0, [r7, #20]
  4010a4:	4b3c      	ldr	r3, [pc, #240]	; (401198 <xTaskGenericCreate+0x174>)
  4010a6:	4798      	blx	r3
  4010a8:	4602      	mov	r2, r0
  4010aa:	69bb      	ldr	r3, [r7, #24]
  4010ac:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  4010ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4010b0:	2b00      	cmp	r3, #0
  4010b2:	d002      	beq.n	4010ba <xTaskGenericCreate+0x96>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  4010b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4010b6:	69ba      	ldr	r2, [r7, #24]
  4010b8:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  4010ba:	4b38      	ldr	r3, [pc, #224]	; (40119c <xTaskGenericCreate+0x178>)
  4010bc:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4010be:	4b38      	ldr	r3, [pc, #224]	; (4011a0 <xTaskGenericCreate+0x17c>)
  4010c0:	681b      	ldr	r3, [r3, #0]
  4010c2:	3301      	adds	r3, #1
  4010c4:	4a36      	ldr	r2, [pc, #216]	; (4011a0 <xTaskGenericCreate+0x17c>)
  4010c6:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4010c8:	4b36      	ldr	r3, [pc, #216]	; (4011a4 <xTaskGenericCreate+0x180>)
  4010ca:	681b      	ldr	r3, [r3, #0]
  4010cc:	2b00      	cmp	r3, #0
  4010ce:	d109      	bne.n	4010e4 <xTaskGenericCreate+0xc0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4010d0:	4a34      	ldr	r2, [pc, #208]	; (4011a4 <xTaskGenericCreate+0x180>)
  4010d2:	69bb      	ldr	r3, [r7, #24]
  4010d4:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4010d6:	4b32      	ldr	r3, [pc, #200]	; (4011a0 <xTaskGenericCreate+0x17c>)
  4010d8:	681b      	ldr	r3, [r3, #0]
  4010da:	2b01      	cmp	r3, #1
  4010dc:	d10f      	bne.n	4010fe <xTaskGenericCreate+0xda>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  4010de:	4b32      	ldr	r3, [pc, #200]	; (4011a8 <xTaskGenericCreate+0x184>)
  4010e0:	4798      	blx	r3
  4010e2:	e00c      	b.n	4010fe <xTaskGenericCreate+0xda>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4010e4:	4b31      	ldr	r3, [pc, #196]	; (4011ac <xTaskGenericCreate+0x188>)
  4010e6:	681b      	ldr	r3, [r3, #0]
  4010e8:	2b00      	cmp	r3, #0
  4010ea:	d108      	bne.n	4010fe <xTaskGenericCreate+0xda>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4010ec:	4b2d      	ldr	r3, [pc, #180]	; (4011a4 <xTaskGenericCreate+0x180>)
  4010ee:	681b      	ldr	r3, [r3, #0]
  4010f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4010f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4010f4:	429a      	cmp	r2, r3
  4010f6:	d802      	bhi.n	4010fe <xTaskGenericCreate+0xda>
					{
						pxCurrentTCB = pxNewTCB;
  4010f8:	4a2a      	ldr	r2, [pc, #168]	; (4011a4 <xTaskGenericCreate+0x180>)
  4010fa:	69bb      	ldr	r3, [r7, #24]
  4010fc:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  4010fe:	69bb      	ldr	r3, [r7, #24]
  401100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401102:	4b2b      	ldr	r3, [pc, #172]	; (4011b0 <xTaskGenericCreate+0x18c>)
  401104:	681b      	ldr	r3, [r3, #0]
  401106:	429a      	cmp	r2, r3
  401108:	d903      	bls.n	401112 <xTaskGenericCreate+0xee>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  40110a:	69bb      	ldr	r3, [r7, #24]
  40110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40110e:	4a28      	ldr	r2, [pc, #160]	; (4011b0 <xTaskGenericCreate+0x18c>)
  401110:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401112:	4b28      	ldr	r3, [pc, #160]	; (4011b4 <xTaskGenericCreate+0x190>)
  401114:	681a      	ldr	r2, [r3, #0]
  401116:	69bb      	ldr	r3, [r7, #24]
  401118:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  40111a:	4b26      	ldr	r3, [pc, #152]	; (4011b4 <xTaskGenericCreate+0x190>)
  40111c:	681b      	ldr	r3, [r3, #0]
  40111e:	3301      	adds	r3, #1
  401120:	4a24      	ldr	r2, [pc, #144]	; (4011b4 <xTaskGenericCreate+0x190>)
  401122:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  401124:	69bb      	ldr	r3, [r7, #24]
  401126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401128:	4b23      	ldr	r3, [pc, #140]	; (4011b8 <xTaskGenericCreate+0x194>)
  40112a:	681b      	ldr	r3, [r3, #0]
  40112c:	429a      	cmp	r2, r3
  40112e:	d903      	bls.n	401138 <xTaskGenericCreate+0x114>
  401130:	69bb      	ldr	r3, [r7, #24]
  401132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401134:	4a20      	ldr	r2, [pc, #128]	; (4011b8 <xTaskGenericCreate+0x194>)
  401136:	6013      	str	r3, [r2, #0]
  401138:	69bb      	ldr	r3, [r7, #24]
  40113a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40113c:	4613      	mov	r3, r2
  40113e:	009b      	lsls	r3, r3, #2
  401140:	4413      	add	r3, r2
  401142:	009b      	lsls	r3, r3, #2
  401144:	4a1d      	ldr	r2, [pc, #116]	; (4011bc <xTaskGenericCreate+0x198>)
  401146:	441a      	add	r2, r3
  401148:	69bb      	ldr	r3, [r7, #24]
  40114a:	3304      	adds	r3, #4
  40114c:	4619      	mov	r1, r3
  40114e:	4610      	mov	r0, r2
  401150:	4b1b      	ldr	r3, [pc, #108]	; (4011c0 <xTaskGenericCreate+0x19c>)
  401152:	4798      	blx	r3

			xReturn = pdPASS;
  401154:	2301      	movs	r3, #1
  401156:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401158:	4b1a      	ldr	r3, [pc, #104]	; (4011c4 <xTaskGenericCreate+0x1a0>)
  40115a:	4798      	blx	r3
  40115c:	e002      	b.n	401164 <xTaskGenericCreate+0x140>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  40115e:	f04f 33ff 	mov.w	r3, #4294967295
  401162:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  401164:	69fb      	ldr	r3, [r7, #28]
  401166:	2b01      	cmp	r3, #1
  401168:	d10b      	bne.n	401182 <xTaskGenericCreate+0x15e>
	{
		if( xSchedulerRunning != pdFALSE )
  40116a:	4b10      	ldr	r3, [pc, #64]	; (4011ac <xTaskGenericCreate+0x188>)
  40116c:	681b      	ldr	r3, [r3, #0]
  40116e:	2b00      	cmp	r3, #0
  401170:	d007      	beq.n	401182 <xTaskGenericCreate+0x15e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401172:	4b0c      	ldr	r3, [pc, #48]	; (4011a4 <xTaskGenericCreate+0x180>)
  401174:	681b      	ldr	r3, [r3, #0]
  401176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40117a:	429a      	cmp	r2, r3
  40117c:	d201      	bcs.n	401182 <xTaskGenericCreate+0x15e>
			{
				portYIELD_WITHIN_API();
  40117e:	4b12      	ldr	r3, [pc, #72]	; (4011c8 <xTaskGenericCreate+0x1a4>)
  401180:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  401182:	69fb      	ldr	r3, [r7, #28]
}
  401184:	4618      	mov	r0, r3
  401186:	3724      	adds	r7, #36	; 0x24
  401188:	46bd      	mov	sp, r7
  40118a:	bd90      	pop	{r4, r7, pc}
  40118c:	004004c9 	.word	0x004004c9
  401190:	00401a71 	.word	0x00401a71
  401194:	00401879 	.word	0x00401879
  401198:	00400375 	.word	0x00400375
  40119c:	00400481 	.word	0x00400481
  4011a0:	2000aad4 	.word	0x2000aad4
  4011a4:	2000a9fc 	.word	0x2000a9fc
  4011a8:	004018ed 	.word	0x004018ed
  4011ac:	2000aae4 	.word	0x2000aae4
  4011b0:	2000aadc 	.word	0x2000aadc
  4011b4:	2000aaf8 	.word	0x2000aaf8
  4011b8:	2000aae0 	.word	0x2000aae0
  4011bc:	2000aa00 	.word	0x2000aa00
  4011c0:	004001bf 	.word	0x004001bf
  4011c4:	004004a1 	.word	0x004004a1
  4011c8:	00400465 	.word	0x00400465

004011cc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4011cc:	b590      	push	{r4, r7, lr}
  4011ce:	b087      	sub	sp, #28
  4011d0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  4011d2:	2300      	movs	r3, #0
  4011d4:	9303      	str	r3, [sp, #12]
  4011d6:	2300      	movs	r3, #0
  4011d8:	9302      	str	r3, [sp, #8]
  4011da:	2300      	movs	r3, #0
  4011dc:	9301      	str	r3, [sp, #4]
  4011de:	2300      	movs	r3, #0
  4011e0:	9300      	str	r3, [sp, #0]
  4011e2:	2300      	movs	r3, #0
  4011e4:	2282      	movs	r2, #130	; 0x82
  4011e6:	4911      	ldr	r1, [pc, #68]	; (40122c <vTaskStartScheduler+0x60>)
  4011e8:	4811      	ldr	r0, [pc, #68]	; (401230 <vTaskStartScheduler+0x64>)
  4011ea:	4c12      	ldr	r4, [pc, #72]	; (401234 <vTaskStartScheduler+0x68>)
  4011ec:	47a0      	blx	r4
  4011ee:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4011f0:	687b      	ldr	r3, [r7, #4]
  4011f2:	2b01      	cmp	r3, #1
  4011f4:	d102      	bne.n	4011fc <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  4011f6:	4b10      	ldr	r3, [pc, #64]	; (401238 <vTaskStartScheduler+0x6c>)
  4011f8:	4798      	blx	r3
  4011fa:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  4011fc:	687b      	ldr	r3, [r7, #4]
  4011fe:	2b01      	cmp	r3, #1
  401200:	d109      	bne.n	401216 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  401202:	4b0e      	ldr	r3, [pc, #56]	; (40123c <vTaskStartScheduler+0x70>)
  401204:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  401206:	4b0e      	ldr	r3, [pc, #56]	; (401240 <vTaskStartScheduler+0x74>)
  401208:	2201      	movs	r2, #1
  40120a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  40120c:	4b0d      	ldr	r3, [pc, #52]	; (401244 <vTaskStartScheduler+0x78>)
  40120e:	2200      	movs	r2, #0
  401210:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401212:	4b0d      	ldr	r3, [pc, #52]	; (401248 <vTaskStartScheduler+0x7c>)
  401214:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  401216:	687b      	ldr	r3, [r7, #4]
  401218:	2b00      	cmp	r3, #0
  40121a:	d103      	bne.n	401224 <vTaskStartScheduler+0x58>
  40121c:	4b07      	ldr	r3, [pc, #28]	; (40123c <vTaskStartScheduler+0x70>)
  40121e:	4798      	blx	r3
  401220:	bf00      	nop
  401222:	e7fd      	b.n	401220 <vTaskStartScheduler+0x54>
}
  401224:	bf00      	nop
  401226:	370c      	adds	r7, #12
  401228:	46bd      	mov	sp, r7
  40122a:	bd90      	pop	{r4, r7, pc}
  40122c:	0040ae98 	.word	0x0040ae98
  401230:	00401851 	.word	0x00401851
  401234:	00401025 	.word	0x00401025
  401238:	00401c99 	.word	0x00401c99
  40123c:	004004c9 	.word	0x004004c9
  401240:	2000aae4 	.word	0x2000aae4
  401244:	2000aad8 	.word	0x2000aad8
  401248:	0040040d 	.word	0x0040040d

0040124c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  40124c:	b480      	push	{r7}
  40124e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  401250:	4b04      	ldr	r3, [pc, #16]	; (401264 <vTaskSuspendAll+0x18>)
  401252:	681b      	ldr	r3, [r3, #0]
  401254:	3301      	adds	r3, #1
  401256:	4a03      	ldr	r2, [pc, #12]	; (401264 <vTaskSuspendAll+0x18>)
  401258:	6013      	str	r3, [r2, #0]
}
  40125a:	bf00      	nop
  40125c:	46bd      	mov	sp, r7
  40125e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401262:	4770      	bx	lr
  401264:	2000aae8 	.word	0x2000aae8

00401268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  401268:	b590      	push	{r4, r7, lr}
  40126a:	b083      	sub	sp, #12
  40126c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40126e:	2300      	movs	r3, #0
  401270:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401272:	4b36      	ldr	r3, [pc, #216]	; (40134c <xTaskResumeAll+0xe4>)
  401274:	681b      	ldr	r3, [r3, #0]
  401276:	2b00      	cmp	r3, #0
  401278:	d103      	bne.n	401282 <xTaskResumeAll+0x1a>
  40127a:	4b35      	ldr	r3, [pc, #212]	; (401350 <xTaskResumeAll+0xe8>)
  40127c:	4798      	blx	r3
  40127e:	bf00      	nop
  401280:	e7fd      	b.n	40127e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401282:	4b34      	ldr	r3, [pc, #208]	; (401354 <xTaskResumeAll+0xec>)
  401284:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401286:	4b31      	ldr	r3, [pc, #196]	; (40134c <xTaskResumeAll+0xe4>)
  401288:	681b      	ldr	r3, [r3, #0]
  40128a:	3b01      	subs	r3, #1
  40128c:	4a2f      	ldr	r2, [pc, #188]	; (40134c <xTaskResumeAll+0xe4>)
  40128e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401290:	4b2e      	ldr	r3, [pc, #184]	; (40134c <xTaskResumeAll+0xe4>)
  401292:	681b      	ldr	r3, [r3, #0]
  401294:	2b00      	cmp	r3, #0
  401296:	d152      	bne.n	40133e <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  401298:	4b2f      	ldr	r3, [pc, #188]	; (401358 <xTaskResumeAll+0xf0>)
  40129a:	681b      	ldr	r3, [r3, #0]
  40129c:	2b00      	cmp	r3, #0
  40129e:	d04e      	beq.n	40133e <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  4012a0:	2300      	movs	r3, #0
  4012a2:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4012a4:	e027      	b.n	4012f6 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  4012a6:	4b2d      	ldr	r3, [pc, #180]	; (40135c <xTaskResumeAll+0xf4>)
  4012a8:	68db      	ldr	r3, [r3, #12]
  4012aa:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  4012ac:	f104 0318 	add.w	r3, r4, #24
  4012b0:	4618      	mov	r0, r3
  4012b2:	4b2b      	ldr	r3, [pc, #172]	; (401360 <xTaskResumeAll+0xf8>)
  4012b4:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  4012b6:	1d23      	adds	r3, r4, #4
  4012b8:	4618      	mov	r0, r3
  4012ba:	4b29      	ldr	r3, [pc, #164]	; (401360 <xTaskResumeAll+0xf8>)
  4012bc:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  4012be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4012c0:	4b28      	ldr	r3, [pc, #160]	; (401364 <xTaskResumeAll+0xfc>)
  4012c2:	681b      	ldr	r3, [r3, #0]
  4012c4:	429a      	cmp	r2, r3
  4012c6:	d902      	bls.n	4012ce <xTaskResumeAll+0x66>
  4012c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4012ca:	4a26      	ldr	r2, [pc, #152]	; (401364 <xTaskResumeAll+0xfc>)
  4012cc:	6013      	str	r3, [r2, #0]
  4012ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4012d0:	4613      	mov	r3, r2
  4012d2:	009b      	lsls	r3, r3, #2
  4012d4:	4413      	add	r3, r2
  4012d6:	009b      	lsls	r3, r3, #2
  4012d8:	4a23      	ldr	r2, [pc, #140]	; (401368 <xTaskResumeAll+0x100>)
  4012da:	4413      	add	r3, r2
  4012dc:	1d22      	adds	r2, r4, #4
  4012de:	4611      	mov	r1, r2
  4012e0:	4618      	mov	r0, r3
  4012e2:	4b22      	ldr	r3, [pc, #136]	; (40136c <xTaskResumeAll+0x104>)
  4012e4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4012e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4012e8:	4b21      	ldr	r3, [pc, #132]	; (401370 <xTaskResumeAll+0x108>)
  4012ea:	681b      	ldr	r3, [r3, #0]
  4012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4012ee:	429a      	cmp	r2, r3
  4012f0:	d301      	bcc.n	4012f6 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  4012f2:	2301      	movs	r3, #1
  4012f4:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4012f6:	4b19      	ldr	r3, [pc, #100]	; (40135c <xTaskResumeAll+0xf4>)
  4012f8:	681b      	ldr	r3, [r3, #0]
  4012fa:	2b00      	cmp	r3, #0
  4012fc:	d1d3      	bne.n	4012a6 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4012fe:	4b1d      	ldr	r3, [pc, #116]	; (401374 <xTaskResumeAll+0x10c>)
  401300:	681b      	ldr	r3, [r3, #0]
  401302:	2b00      	cmp	r3, #0
  401304:	d00d      	beq.n	401322 <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401306:	e006      	b.n	401316 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  401308:	4b1b      	ldr	r3, [pc, #108]	; (401378 <xTaskResumeAll+0x110>)
  40130a:	4798      	blx	r3
						--uxMissedTicks;
  40130c:	4b19      	ldr	r3, [pc, #100]	; (401374 <xTaskResumeAll+0x10c>)
  40130e:	681b      	ldr	r3, [r3, #0]
  401310:	3b01      	subs	r3, #1
  401312:	4a18      	ldr	r2, [pc, #96]	; (401374 <xTaskResumeAll+0x10c>)
  401314:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401316:	4b17      	ldr	r3, [pc, #92]	; (401374 <xTaskResumeAll+0x10c>)
  401318:	681b      	ldr	r3, [r3, #0]
  40131a:	2b00      	cmp	r3, #0
  40131c:	d1f4      	bne.n	401308 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  40131e:	2301      	movs	r3, #1
  401320:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  401322:	683b      	ldr	r3, [r7, #0]
  401324:	2b01      	cmp	r3, #1
  401326:	d003      	beq.n	401330 <xTaskResumeAll+0xc8>
  401328:	4b14      	ldr	r3, [pc, #80]	; (40137c <xTaskResumeAll+0x114>)
  40132a:	681b      	ldr	r3, [r3, #0]
  40132c:	2b01      	cmp	r3, #1
  40132e:	d106      	bne.n	40133e <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  401330:	2301      	movs	r3, #1
  401332:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  401334:	4b11      	ldr	r3, [pc, #68]	; (40137c <xTaskResumeAll+0x114>)
  401336:	2200      	movs	r2, #0
  401338:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  40133a:	4b11      	ldr	r3, [pc, #68]	; (401380 <xTaskResumeAll+0x118>)
  40133c:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  40133e:	4b11      	ldr	r3, [pc, #68]	; (401384 <xTaskResumeAll+0x11c>)
  401340:	4798      	blx	r3

	return xAlreadyYielded;
  401342:	687b      	ldr	r3, [r7, #4]
}
  401344:	4618      	mov	r0, r3
  401346:	370c      	adds	r7, #12
  401348:	46bd      	mov	sp, r7
  40134a:	bd90      	pop	{r4, r7, pc}
  40134c:	2000aae8 	.word	0x2000aae8
  401350:	004004c9 	.word	0x004004c9
  401354:	00400481 	.word	0x00400481
  401358:	2000aad4 	.word	0x2000aad4
  40135c:	2000aa94 	.word	0x2000aa94
  401360:	00400281 	.word	0x00400281
  401364:	2000aae0 	.word	0x2000aae0
  401368:	2000aa00 	.word	0x2000aa00
  40136c:	004001bf 	.word	0x004001bf
  401370:	2000a9fc 	.word	0x2000a9fc
  401374:	2000aaec 	.word	0x2000aaec
  401378:	004013b5 	.word	0x004013b5
  40137c:	2000aaf0 	.word	0x2000aaf0
  401380:	00400465 	.word	0x00400465
  401384:	004004a1 	.word	0x004004a1

00401388 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  401388:	b580      	push	{r7, lr}
  40138a:	b082      	sub	sp, #8
  40138c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  40138e:	4b06      	ldr	r3, [pc, #24]	; (4013a8 <xTaskGetTickCount+0x20>)
  401390:	4798      	blx	r3
	{
		xTicks = xTickCount;
  401392:	4b06      	ldr	r3, [pc, #24]	; (4013ac <xTaskGetTickCount+0x24>)
  401394:	681b      	ldr	r3, [r3, #0]
  401396:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  401398:	4b05      	ldr	r3, [pc, #20]	; (4013b0 <xTaskGetTickCount+0x28>)
  40139a:	4798      	blx	r3

	return xTicks;
  40139c:	687b      	ldr	r3, [r7, #4]
}
  40139e:	4618      	mov	r0, r3
  4013a0:	3708      	adds	r7, #8
  4013a2:	46bd      	mov	sp, r7
  4013a4:	bd80      	pop	{r7, pc}
  4013a6:	bf00      	nop
  4013a8:	00400481 	.word	0x00400481
  4013ac:	2000aad8 	.word	0x2000aad8
  4013b0:	004004a1 	.word	0x004004a1

004013b4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  4013b4:	b580      	push	{r7, lr}
  4013b6:	b084      	sub	sp, #16
  4013b8:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4013ba:	4b45      	ldr	r3, [pc, #276]	; (4014d0 <vTaskIncrementTick+0x11c>)
  4013bc:	681b      	ldr	r3, [r3, #0]
  4013be:	2b00      	cmp	r3, #0
  4013c0:	d17b      	bne.n	4014ba <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  4013c2:	4b44      	ldr	r3, [pc, #272]	; (4014d4 <vTaskIncrementTick+0x120>)
  4013c4:	681b      	ldr	r3, [r3, #0]
  4013c6:	3301      	adds	r3, #1
  4013c8:	4a42      	ldr	r2, [pc, #264]	; (4014d4 <vTaskIncrementTick+0x120>)
  4013ca:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  4013cc:	4b41      	ldr	r3, [pc, #260]	; (4014d4 <vTaskIncrementTick+0x120>)
  4013ce:	681b      	ldr	r3, [r3, #0]
  4013d0:	2b00      	cmp	r3, #0
  4013d2:	d12a      	bne.n	40142a <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  4013d4:	4b40      	ldr	r3, [pc, #256]	; (4014d8 <vTaskIncrementTick+0x124>)
  4013d6:	681b      	ldr	r3, [r3, #0]
  4013d8:	681b      	ldr	r3, [r3, #0]
  4013da:	2b00      	cmp	r3, #0
  4013dc:	d003      	beq.n	4013e6 <vTaskIncrementTick+0x32>
  4013de:	4b3f      	ldr	r3, [pc, #252]	; (4014dc <vTaskIncrementTick+0x128>)
  4013e0:	4798      	blx	r3
  4013e2:	bf00      	nop
  4013e4:	e7fd      	b.n	4013e2 <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  4013e6:	4b3c      	ldr	r3, [pc, #240]	; (4014d8 <vTaskIncrementTick+0x124>)
  4013e8:	681b      	ldr	r3, [r3, #0]
  4013ea:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4013ec:	4b3c      	ldr	r3, [pc, #240]	; (4014e0 <vTaskIncrementTick+0x12c>)
  4013ee:	681b      	ldr	r3, [r3, #0]
  4013f0:	4a39      	ldr	r2, [pc, #228]	; (4014d8 <vTaskIncrementTick+0x124>)
  4013f2:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  4013f4:	4a3a      	ldr	r2, [pc, #232]	; (4014e0 <vTaskIncrementTick+0x12c>)
  4013f6:	68fb      	ldr	r3, [r7, #12]
  4013f8:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  4013fa:	4b3a      	ldr	r3, [pc, #232]	; (4014e4 <vTaskIncrementTick+0x130>)
  4013fc:	681b      	ldr	r3, [r3, #0]
  4013fe:	3301      	adds	r3, #1
  401400:	4a38      	ldr	r2, [pc, #224]	; (4014e4 <vTaskIncrementTick+0x130>)
  401402:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401404:	4b34      	ldr	r3, [pc, #208]	; (4014d8 <vTaskIncrementTick+0x124>)
  401406:	681b      	ldr	r3, [r3, #0]
  401408:	681b      	ldr	r3, [r3, #0]
  40140a:	2b00      	cmp	r3, #0
  40140c:	d104      	bne.n	401418 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  40140e:	4b36      	ldr	r3, [pc, #216]	; (4014e8 <vTaskIncrementTick+0x134>)
  401410:	f04f 32ff 	mov.w	r2, #4294967295
  401414:	601a      	str	r2, [r3, #0]
  401416:	e008      	b.n	40142a <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401418:	4b2f      	ldr	r3, [pc, #188]	; (4014d8 <vTaskIncrementTick+0x124>)
  40141a:	681b      	ldr	r3, [r3, #0]
  40141c:	68db      	ldr	r3, [r3, #12]
  40141e:	68db      	ldr	r3, [r3, #12]
  401420:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401422:	68bb      	ldr	r3, [r7, #8]
  401424:	685b      	ldr	r3, [r3, #4]
  401426:	4a30      	ldr	r2, [pc, #192]	; (4014e8 <vTaskIncrementTick+0x134>)
  401428:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  40142a:	4b2a      	ldr	r3, [pc, #168]	; (4014d4 <vTaskIncrementTick+0x120>)
  40142c:	681a      	ldr	r2, [r3, #0]
  40142e:	4b2e      	ldr	r3, [pc, #184]	; (4014e8 <vTaskIncrementTick+0x134>)
  401430:	681b      	ldr	r3, [r3, #0]
  401432:	429a      	cmp	r2, r3
  401434:	d347      	bcc.n	4014c6 <vTaskIncrementTick+0x112>
  401436:	4b28      	ldr	r3, [pc, #160]	; (4014d8 <vTaskIncrementTick+0x124>)
  401438:	681b      	ldr	r3, [r3, #0]
  40143a:	681b      	ldr	r3, [r3, #0]
  40143c:	2b00      	cmp	r3, #0
  40143e:	d104      	bne.n	40144a <vTaskIncrementTick+0x96>
  401440:	4b29      	ldr	r3, [pc, #164]	; (4014e8 <vTaskIncrementTick+0x134>)
  401442:	f04f 32ff 	mov.w	r2, #4294967295
  401446:	601a      	str	r2, [r3, #0]
  401448:	e03d      	b.n	4014c6 <vTaskIncrementTick+0x112>
  40144a:	4b23      	ldr	r3, [pc, #140]	; (4014d8 <vTaskIncrementTick+0x124>)
  40144c:	681b      	ldr	r3, [r3, #0]
  40144e:	68db      	ldr	r3, [r3, #12]
  401450:	68db      	ldr	r3, [r3, #12]
  401452:	60bb      	str	r3, [r7, #8]
  401454:	68bb      	ldr	r3, [r7, #8]
  401456:	685b      	ldr	r3, [r3, #4]
  401458:	607b      	str	r3, [r7, #4]
  40145a:	4b1e      	ldr	r3, [pc, #120]	; (4014d4 <vTaskIncrementTick+0x120>)
  40145c:	681a      	ldr	r2, [r3, #0]
  40145e:	687b      	ldr	r3, [r7, #4]
  401460:	429a      	cmp	r2, r3
  401462:	d203      	bcs.n	40146c <vTaskIncrementTick+0xb8>
  401464:	4a20      	ldr	r2, [pc, #128]	; (4014e8 <vTaskIncrementTick+0x134>)
  401466:	687b      	ldr	r3, [r7, #4]
  401468:	6013      	str	r3, [r2, #0]
  40146a:	e02c      	b.n	4014c6 <vTaskIncrementTick+0x112>
  40146c:	68bb      	ldr	r3, [r7, #8]
  40146e:	3304      	adds	r3, #4
  401470:	4618      	mov	r0, r3
  401472:	4b1e      	ldr	r3, [pc, #120]	; (4014ec <vTaskIncrementTick+0x138>)
  401474:	4798      	blx	r3
  401476:	68bb      	ldr	r3, [r7, #8]
  401478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40147a:	2b00      	cmp	r3, #0
  40147c:	d004      	beq.n	401488 <vTaskIncrementTick+0xd4>
  40147e:	68bb      	ldr	r3, [r7, #8]
  401480:	3318      	adds	r3, #24
  401482:	4618      	mov	r0, r3
  401484:	4b19      	ldr	r3, [pc, #100]	; (4014ec <vTaskIncrementTick+0x138>)
  401486:	4798      	blx	r3
  401488:	68bb      	ldr	r3, [r7, #8]
  40148a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40148c:	4b18      	ldr	r3, [pc, #96]	; (4014f0 <vTaskIncrementTick+0x13c>)
  40148e:	681b      	ldr	r3, [r3, #0]
  401490:	429a      	cmp	r2, r3
  401492:	d903      	bls.n	40149c <vTaskIncrementTick+0xe8>
  401494:	68bb      	ldr	r3, [r7, #8]
  401496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401498:	4a15      	ldr	r2, [pc, #84]	; (4014f0 <vTaskIncrementTick+0x13c>)
  40149a:	6013      	str	r3, [r2, #0]
  40149c:	68bb      	ldr	r3, [r7, #8]
  40149e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4014a0:	4613      	mov	r3, r2
  4014a2:	009b      	lsls	r3, r3, #2
  4014a4:	4413      	add	r3, r2
  4014a6:	009b      	lsls	r3, r3, #2
  4014a8:	4a12      	ldr	r2, [pc, #72]	; (4014f4 <vTaskIncrementTick+0x140>)
  4014aa:	441a      	add	r2, r3
  4014ac:	68bb      	ldr	r3, [r7, #8]
  4014ae:	3304      	adds	r3, #4
  4014b0:	4619      	mov	r1, r3
  4014b2:	4610      	mov	r0, r2
  4014b4:	4b10      	ldr	r3, [pc, #64]	; (4014f8 <vTaskIncrementTick+0x144>)
  4014b6:	4798      	blx	r3
  4014b8:	e7bd      	b.n	401436 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  4014ba:	4b10      	ldr	r3, [pc, #64]	; (4014fc <vTaskIncrementTick+0x148>)
  4014bc:	681b      	ldr	r3, [r3, #0]
  4014be:	3301      	adds	r3, #1
  4014c0:	4a0e      	ldr	r2, [pc, #56]	; (4014fc <vTaskIncrementTick+0x148>)
  4014c2:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  4014c4:	e7ff      	b.n	4014c6 <vTaskIncrementTick+0x112>
  4014c6:	bf00      	nop
  4014c8:	3710      	adds	r7, #16
  4014ca:	46bd      	mov	sp, r7
  4014cc:	bd80      	pop	{r7, pc}
  4014ce:	bf00      	nop
  4014d0:	2000aae8 	.word	0x2000aae8
  4014d4:	2000aad8 	.word	0x2000aad8
  4014d8:	2000aa8c 	.word	0x2000aa8c
  4014dc:	004004c9 	.word	0x004004c9
  4014e0:	2000aa90 	.word	0x2000aa90
  4014e4:	2000aaf4 	.word	0x2000aaf4
  4014e8:	20000014 	.word	0x20000014
  4014ec:	00400281 	.word	0x00400281
  4014f0:	2000aae0 	.word	0x2000aae0
  4014f4:	2000aa00 	.word	0x2000aa00
  4014f8:	004001bf 	.word	0x004001bf
  4014fc:	2000aaec 	.word	0x2000aaec

00401500 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401500:	b580      	push	{r7, lr}
  401502:	b082      	sub	sp, #8
  401504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  401506:	4b21      	ldr	r3, [pc, #132]	; (40158c <vTaskSwitchContext+0x8c>)
  401508:	681b      	ldr	r3, [r3, #0]
  40150a:	2b00      	cmp	r3, #0
  40150c:	d010      	beq.n	401530 <vTaskSwitchContext+0x30>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  40150e:	4b20      	ldr	r3, [pc, #128]	; (401590 <vTaskSwitchContext+0x90>)
  401510:	2201      	movs	r2, #1
  401512:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  401514:	e035      	b.n	401582 <vTaskSwitchContext+0x82>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401516:	4b1f      	ldr	r3, [pc, #124]	; (401594 <vTaskSwitchContext+0x94>)
  401518:	681b      	ldr	r3, [r3, #0]
  40151a:	2b00      	cmp	r3, #0
  40151c:	d103      	bne.n	401526 <vTaskSwitchContext+0x26>
  40151e:	4b1e      	ldr	r3, [pc, #120]	; (401598 <vTaskSwitchContext+0x98>)
  401520:	4798      	blx	r3
  401522:	bf00      	nop
  401524:	e7fd      	b.n	401522 <vTaskSwitchContext+0x22>
  401526:	4b1b      	ldr	r3, [pc, #108]	; (401594 <vTaskSwitchContext+0x94>)
  401528:	681b      	ldr	r3, [r3, #0]
  40152a:	3b01      	subs	r3, #1
  40152c:	4a19      	ldr	r2, [pc, #100]	; (401594 <vTaskSwitchContext+0x94>)
  40152e:	6013      	str	r3, [r2, #0]
  401530:	4b18      	ldr	r3, [pc, #96]	; (401594 <vTaskSwitchContext+0x94>)
  401532:	681a      	ldr	r2, [r3, #0]
  401534:	4919      	ldr	r1, [pc, #100]	; (40159c <vTaskSwitchContext+0x9c>)
  401536:	4613      	mov	r3, r2
  401538:	009b      	lsls	r3, r3, #2
  40153a:	4413      	add	r3, r2
  40153c:	009b      	lsls	r3, r3, #2
  40153e:	440b      	add	r3, r1
  401540:	681b      	ldr	r3, [r3, #0]
  401542:	2b00      	cmp	r3, #0
  401544:	d0e7      	beq.n	401516 <vTaskSwitchContext+0x16>
  401546:	4b13      	ldr	r3, [pc, #76]	; (401594 <vTaskSwitchContext+0x94>)
  401548:	681a      	ldr	r2, [r3, #0]
  40154a:	4613      	mov	r3, r2
  40154c:	009b      	lsls	r3, r3, #2
  40154e:	4413      	add	r3, r2
  401550:	009b      	lsls	r3, r3, #2
  401552:	4a12      	ldr	r2, [pc, #72]	; (40159c <vTaskSwitchContext+0x9c>)
  401554:	4413      	add	r3, r2
  401556:	607b      	str	r3, [r7, #4]
  401558:	687b      	ldr	r3, [r7, #4]
  40155a:	685b      	ldr	r3, [r3, #4]
  40155c:	685a      	ldr	r2, [r3, #4]
  40155e:	687b      	ldr	r3, [r7, #4]
  401560:	605a      	str	r2, [r3, #4]
  401562:	687b      	ldr	r3, [r7, #4]
  401564:	685a      	ldr	r2, [r3, #4]
  401566:	687b      	ldr	r3, [r7, #4]
  401568:	3308      	adds	r3, #8
  40156a:	429a      	cmp	r2, r3
  40156c:	d104      	bne.n	401578 <vTaskSwitchContext+0x78>
  40156e:	687b      	ldr	r3, [r7, #4]
  401570:	685b      	ldr	r3, [r3, #4]
  401572:	685a      	ldr	r2, [r3, #4]
  401574:	687b      	ldr	r3, [r7, #4]
  401576:	605a      	str	r2, [r3, #4]
  401578:	687b      	ldr	r3, [r7, #4]
  40157a:	685b      	ldr	r3, [r3, #4]
  40157c:	68db      	ldr	r3, [r3, #12]
  40157e:	4a08      	ldr	r2, [pc, #32]	; (4015a0 <vTaskSwitchContext+0xa0>)
  401580:	6013      	str	r3, [r2, #0]
}
  401582:	bf00      	nop
  401584:	3708      	adds	r7, #8
  401586:	46bd      	mov	sp, r7
  401588:	bd80      	pop	{r7, pc}
  40158a:	bf00      	nop
  40158c:	2000aae8 	.word	0x2000aae8
  401590:	2000aaf0 	.word	0x2000aaf0
  401594:	2000aae0 	.word	0x2000aae0
  401598:	004004c9 	.word	0x004004c9
  40159c:	2000aa00 	.word	0x2000aa00
  4015a0:	2000a9fc 	.word	0x2000a9fc

004015a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4015a4:	b580      	push	{r7, lr}
  4015a6:	b084      	sub	sp, #16
  4015a8:	af00      	add	r7, sp, #0
  4015aa:	6078      	str	r0, [r7, #4]
  4015ac:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  4015ae:	687b      	ldr	r3, [r7, #4]
  4015b0:	2b00      	cmp	r3, #0
  4015b2:	d103      	bne.n	4015bc <vTaskPlaceOnEventList+0x18>
  4015b4:	4b14      	ldr	r3, [pc, #80]	; (401608 <vTaskPlaceOnEventList+0x64>)
  4015b6:	4798      	blx	r3
  4015b8:	bf00      	nop
  4015ba:	e7fd      	b.n	4015b8 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4015bc:	4b13      	ldr	r3, [pc, #76]	; (40160c <vTaskPlaceOnEventList+0x68>)
  4015be:	681b      	ldr	r3, [r3, #0]
  4015c0:	3318      	adds	r3, #24
  4015c2:	4619      	mov	r1, r3
  4015c4:	6878      	ldr	r0, [r7, #4]
  4015c6:	4b12      	ldr	r3, [pc, #72]	; (401610 <vTaskPlaceOnEventList+0x6c>)
  4015c8:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4015ca:	4b10      	ldr	r3, [pc, #64]	; (40160c <vTaskPlaceOnEventList+0x68>)
  4015cc:	681b      	ldr	r3, [r3, #0]
  4015ce:	3304      	adds	r3, #4
  4015d0:	4618      	mov	r0, r3
  4015d2:	4b10      	ldr	r3, [pc, #64]	; (401614 <vTaskPlaceOnEventList+0x70>)
  4015d4:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  4015d6:	683b      	ldr	r3, [r7, #0]
  4015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015dc:	d107      	bne.n	4015ee <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4015de:	4b0b      	ldr	r3, [pc, #44]	; (40160c <vTaskPlaceOnEventList+0x68>)
  4015e0:	681b      	ldr	r3, [r3, #0]
  4015e2:	3304      	adds	r3, #4
  4015e4:	4619      	mov	r1, r3
  4015e6:	480c      	ldr	r0, [pc, #48]	; (401618 <vTaskPlaceOnEventList+0x74>)
  4015e8:	4b0c      	ldr	r3, [pc, #48]	; (40161c <vTaskPlaceOnEventList+0x78>)
  4015ea:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  4015ec:	e007      	b.n	4015fe <vTaskPlaceOnEventList+0x5a>
			xTimeToWake = xTickCount + xTicksToWait;
  4015ee:	4b0c      	ldr	r3, [pc, #48]	; (401620 <vTaskPlaceOnEventList+0x7c>)
  4015f0:	681a      	ldr	r2, [r3, #0]
  4015f2:	683b      	ldr	r3, [r7, #0]
  4015f4:	4413      	add	r3, r2
  4015f6:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4015f8:	68f8      	ldr	r0, [r7, #12]
  4015fa:	4b0a      	ldr	r3, [pc, #40]	; (401624 <vTaskPlaceOnEventList+0x80>)
  4015fc:	4798      	blx	r3
}
  4015fe:	bf00      	nop
  401600:	3710      	adds	r7, #16
  401602:	46bd      	mov	sp, r7
  401604:	bd80      	pop	{r7, pc}
  401606:	bf00      	nop
  401608:	004004c9 	.word	0x004004c9
  40160c:	2000a9fc 	.word	0x2000a9fc
  401610:	0040020f 	.word	0x0040020f
  401614:	00400281 	.word	0x00400281
  401618:	2000aac0 	.word	0x2000aac0
  40161c:	004001bf 	.word	0x004001bf
  401620:	2000aad8 	.word	0x2000aad8
  401624:	00401a01 	.word	0x00401a01

00401628 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  401628:	b580      	push	{r7, lr}
  40162a:	b084      	sub	sp, #16
  40162c:	af00      	add	r7, sp, #0
  40162e:	6078      	str	r0, [r7, #4]
  401630:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  401632:	687b      	ldr	r3, [r7, #4]
  401634:	2b00      	cmp	r3, #0
  401636:	d103      	bne.n	401640 <vTaskPlaceOnEventListRestricted+0x18>
  401638:	4b0e      	ldr	r3, [pc, #56]	; (401674 <vTaskPlaceOnEventListRestricted+0x4c>)
  40163a:	4798      	blx	r3
  40163c:	bf00      	nop
  40163e:	e7fd      	b.n	40163c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401640:	4b0d      	ldr	r3, [pc, #52]	; (401678 <vTaskPlaceOnEventListRestricted+0x50>)
  401642:	681b      	ldr	r3, [r3, #0]
  401644:	3318      	adds	r3, #24
  401646:	4619      	mov	r1, r3
  401648:	6878      	ldr	r0, [r7, #4]
  40164a:	4b0c      	ldr	r3, [pc, #48]	; (40167c <vTaskPlaceOnEventListRestricted+0x54>)
  40164c:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  40164e:	4b0a      	ldr	r3, [pc, #40]	; (401678 <vTaskPlaceOnEventListRestricted+0x50>)
  401650:	681b      	ldr	r3, [r3, #0]
  401652:	3304      	adds	r3, #4
  401654:	4618      	mov	r0, r3
  401656:	4b0a      	ldr	r3, [pc, #40]	; (401680 <vTaskPlaceOnEventListRestricted+0x58>)
  401658:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  40165a:	4b0a      	ldr	r3, [pc, #40]	; (401684 <vTaskPlaceOnEventListRestricted+0x5c>)
  40165c:	681a      	ldr	r2, [r3, #0]
  40165e:	683b      	ldr	r3, [r7, #0]
  401660:	4413      	add	r3, r2
  401662:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  401664:	68f8      	ldr	r0, [r7, #12]
  401666:	4b08      	ldr	r3, [pc, #32]	; (401688 <vTaskPlaceOnEventListRestricted+0x60>)
  401668:	4798      	blx	r3
	}
  40166a:	bf00      	nop
  40166c:	3710      	adds	r7, #16
  40166e:	46bd      	mov	sp, r7
  401670:	bd80      	pop	{r7, pc}
  401672:	bf00      	nop
  401674:	004004c9 	.word	0x004004c9
  401678:	2000a9fc 	.word	0x2000a9fc
  40167c:	004001bf 	.word	0x004001bf
  401680:	00400281 	.word	0x00400281
  401684:	2000aad8 	.word	0x2000aad8
  401688:	00401a01 	.word	0x00401a01

0040168c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  40168c:	b580      	push	{r7, lr}
  40168e:	b084      	sub	sp, #16
  401690:	af00      	add	r7, sp, #0
  401692:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401694:	687b      	ldr	r3, [r7, #4]
  401696:	68db      	ldr	r3, [r3, #12]
  401698:	68db      	ldr	r3, [r3, #12]
  40169a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  40169c:	68bb      	ldr	r3, [r7, #8]
  40169e:	2b00      	cmp	r3, #0
  4016a0:	d103      	bne.n	4016aa <xTaskRemoveFromEventList+0x1e>
  4016a2:	4b21      	ldr	r3, [pc, #132]	; (401728 <xTaskRemoveFromEventList+0x9c>)
  4016a4:	4798      	blx	r3
  4016a6:	bf00      	nop
  4016a8:	e7fd      	b.n	4016a6 <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4016aa:	68bb      	ldr	r3, [r7, #8]
  4016ac:	3318      	adds	r3, #24
  4016ae:	4618      	mov	r0, r3
  4016b0:	4b1e      	ldr	r3, [pc, #120]	; (40172c <xTaskRemoveFromEventList+0xa0>)
  4016b2:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4016b4:	4b1e      	ldr	r3, [pc, #120]	; (401730 <xTaskRemoveFromEventList+0xa4>)
  4016b6:	681b      	ldr	r3, [r3, #0]
  4016b8:	2b00      	cmp	r3, #0
  4016ba:	d11d      	bne.n	4016f8 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4016bc:	68bb      	ldr	r3, [r7, #8]
  4016be:	3304      	adds	r3, #4
  4016c0:	4618      	mov	r0, r3
  4016c2:	4b1a      	ldr	r3, [pc, #104]	; (40172c <xTaskRemoveFromEventList+0xa0>)
  4016c4:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  4016c6:	68bb      	ldr	r3, [r7, #8]
  4016c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4016ca:	4b1a      	ldr	r3, [pc, #104]	; (401734 <xTaskRemoveFromEventList+0xa8>)
  4016cc:	681b      	ldr	r3, [r3, #0]
  4016ce:	429a      	cmp	r2, r3
  4016d0:	d903      	bls.n	4016da <xTaskRemoveFromEventList+0x4e>
  4016d2:	68bb      	ldr	r3, [r7, #8]
  4016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4016d6:	4a17      	ldr	r2, [pc, #92]	; (401734 <xTaskRemoveFromEventList+0xa8>)
  4016d8:	6013      	str	r3, [r2, #0]
  4016da:	68bb      	ldr	r3, [r7, #8]
  4016dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4016de:	4613      	mov	r3, r2
  4016e0:	009b      	lsls	r3, r3, #2
  4016e2:	4413      	add	r3, r2
  4016e4:	009b      	lsls	r3, r3, #2
  4016e6:	4a14      	ldr	r2, [pc, #80]	; (401738 <xTaskRemoveFromEventList+0xac>)
  4016e8:	441a      	add	r2, r3
  4016ea:	68bb      	ldr	r3, [r7, #8]
  4016ec:	3304      	adds	r3, #4
  4016ee:	4619      	mov	r1, r3
  4016f0:	4610      	mov	r0, r2
  4016f2:	4b12      	ldr	r3, [pc, #72]	; (40173c <xTaskRemoveFromEventList+0xb0>)
  4016f4:	4798      	blx	r3
  4016f6:	e005      	b.n	401704 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4016f8:	68bb      	ldr	r3, [r7, #8]
  4016fa:	3318      	adds	r3, #24
  4016fc:	4619      	mov	r1, r3
  4016fe:	4810      	ldr	r0, [pc, #64]	; (401740 <xTaskRemoveFromEventList+0xb4>)
  401700:	4b0e      	ldr	r3, [pc, #56]	; (40173c <xTaskRemoveFromEventList+0xb0>)
  401702:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401704:	68bb      	ldr	r3, [r7, #8]
  401706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401708:	4b0e      	ldr	r3, [pc, #56]	; (401744 <xTaskRemoveFromEventList+0xb8>)
  40170a:	681b      	ldr	r3, [r3, #0]
  40170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40170e:	429a      	cmp	r2, r3
  401710:	d302      	bcc.n	401718 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  401712:	2301      	movs	r3, #1
  401714:	60fb      	str	r3, [r7, #12]
  401716:	e001      	b.n	40171c <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  401718:	2300      	movs	r3, #0
  40171a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  40171c:	68fb      	ldr	r3, [r7, #12]
}
  40171e:	4618      	mov	r0, r3
  401720:	3710      	adds	r7, #16
  401722:	46bd      	mov	sp, r7
  401724:	bd80      	pop	{r7, pc}
  401726:	bf00      	nop
  401728:	004004c9 	.word	0x004004c9
  40172c:	00400281 	.word	0x00400281
  401730:	2000aae8 	.word	0x2000aae8
  401734:	2000aae0 	.word	0x2000aae0
  401738:	2000aa00 	.word	0x2000aa00
  40173c:	004001bf 	.word	0x004001bf
  401740:	2000aa94 	.word	0x2000aa94
  401744:	2000a9fc 	.word	0x2000a9fc

00401748 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  401748:	b580      	push	{r7, lr}
  40174a:	b082      	sub	sp, #8
  40174c:	af00      	add	r7, sp, #0
  40174e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  401750:	687b      	ldr	r3, [r7, #4]
  401752:	2b00      	cmp	r3, #0
  401754:	d103      	bne.n	40175e <vTaskSetTimeOutState+0x16>
  401756:	4b08      	ldr	r3, [pc, #32]	; (401778 <vTaskSetTimeOutState+0x30>)
  401758:	4798      	blx	r3
  40175a:	bf00      	nop
  40175c:	e7fd      	b.n	40175a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40175e:	4b07      	ldr	r3, [pc, #28]	; (40177c <vTaskSetTimeOutState+0x34>)
  401760:	681a      	ldr	r2, [r3, #0]
  401762:	687b      	ldr	r3, [r7, #4]
  401764:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401766:	4b06      	ldr	r3, [pc, #24]	; (401780 <vTaskSetTimeOutState+0x38>)
  401768:	681a      	ldr	r2, [r3, #0]
  40176a:	687b      	ldr	r3, [r7, #4]
  40176c:	605a      	str	r2, [r3, #4]
}
  40176e:	bf00      	nop
  401770:	3708      	adds	r7, #8
  401772:	46bd      	mov	sp, r7
  401774:	bd80      	pop	{r7, pc}
  401776:	bf00      	nop
  401778:	004004c9 	.word	0x004004c9
  40177c:	2000aaf4 	.word	0x2000aaf4
  401780:	2000aad8 	.word	0x2000aad8

00401784 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  401784:	b580      	push	{r7, lr}
  401786:	b084      	sub	sp, #16
  401788:	af00      	add	r7, sp, #0
  40178a:	6078      	str	r0, [r7, #4]
  40178c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  40178e:	687b      	ldr	r3, [r7, #4]
  401790:	2b00      	cmp	r3, #0
  401792:	d103      	bne.n	40179c <xTaskCheckForTimeOut+0x18>
  401794:	4b22      	ldr	r3, [pc, #136]	; (401820 <xTaskCheckForTimeOut+0x9c>)
  401796:	4798      	blx	r3
  401798:	bf00      	nop
  40179a:	e7fd      	b.n	401798 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  40179c:	683b      	ldr	r3, [r7, #0]
  40179e:	2b00      	cmp	r3, #0
  4017a0:	d103      	bne.n	4017aa <xTaskCheckForTimeOut+0x26>
  4017a2:	4b1f      	ldr	r3, [pc, #124]	; (401820 <xTaskCheckForTimeOut+0x9c>)
  4017a4:	4798      	blx	r3
  4017a6:	bf00      	nop
  4017a8:	e7fd      	b.n	4017a6 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  4017aa:	4b1e      	ldr	r3, [pc, #120]	; (401824 <xTaskCheckForTimeOut+0xa0>)
  4017ac:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4017ae:	683b      	ldr	r3, [r7, #0]
  4017b0:	681b      	ldr	r3, [r3, #0]
  4017b2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017b6:	d102      	bne.n	4017be <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  4017b8:	2300      	movs	r3, #0
  4017ba:	60fb      	str	r3, [r7, #12]
  4017bc:	e029      	b.n	401812 <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  4017be:	687b      	ldr	r3, [r7, #4]
  4017c0:	681a      	ldr	r2, [r3, #0]
  4017c2:	4b19      	ldr	r3, [pc, #100]	; (401828 <xTaskCheckForTimeOut+0xa4>)
  4017c4:	681b      	ldr	r3, [r3, #0]
  4017c6:	429a      	cmp	r2, r3
  4017c8:	d008      	beq.n	4017dc <xTaskCheckForTimeOut+0x58>
  4017ca:	687b      	ldr	r3, [r7, #4]
  4017cc:	685a      	ldr	r2, [r3, #4]
  4017ce:	4b17      	ldr	r3, [pc, #92]	; (40182c <xTaskCheckForTimeOut+0xa8>)
  4017d0:	681b      	ldr	r3, [r3, #0]
  4017d2:	429a      	cmp	r2, r3
  4017d4:	d802      	bhi.n	4017dc <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  4017d6:	2301      	movs	r3, #1
  4017d8:	60fb      	str	r3, [r7, #12]
  4017da:	e01a      	b.n	401812 <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  4017dc:	4b13      	ldr	r3, [pc, #76]	; (40182c <xTaskCheckForTimeOut+0xa8>)
  4017de:	681a      	ldr	r2, [r3, #0]
  4017e0:	687b      	ldr	r3, [r7, #4]
  4017e2:	685b      	ldr	r3, [r3, #4]
  4017e4:	1ad2      	subs	r2, r2, r3
  4017e6:	683b      	ldr	r3, [r7, #0]
  4017e8:	681b      	ldr	r3, [r3, #0]
  4017ea:	429a      	cmp	r2, r3
  4017ec:	d20f      	bcs.n	40180e <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  4017ee:	4b0f      	ldr	r3, [pc, #60]	; (40182c <xTaskCheckForTimeOut+0xa8>)
  4017f0:	681a      	ldr	r2, [r3, #0]
  4017f2:	687b      	ldr	r3, [r7, #4]
  4017f4:	685b      	ldr	r3, [r3, #4]
  4017f6:	1ad3      	subs	r3, r2, r3
  4017f8:	683a      	ldr	r2, [r7, #0]
  4017fa:	6812      	ldr	r2, [r2, #0]
  4017fc:	1ad2      	subs	r2, r2, r3
  4017fe:	683b      	ldr	r3, [r7, #0]
  401800:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401802:	6878      	ldr	r0, [r7, #4]
  401804:	4b0a      	ldr	r3, [pc, #40]	; (401830 <xTaskCheckForTimeOut+0xac>)
  401806:	4798      	blx	r3
			xReturn = pdFALSE;
  401808:	2300      	movs	r3, #0
  40180a:	60fb      	str	r3, [r7, #12]
  40180c:	e001      	b.n	401812 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  40180e:	2301      	movs	r3, #1
  401810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  401812:	4b08      	ldr	r3, [pc, #32]	; (401834 <xTaskCheckForTimeOut+0xb0>)
  401814:	4798      	blx	r3

	return xReturn;
  401816:	68fb      	ldr	r3, [r7, #12]
}
  401818:	4618      	mov	r0, r3
  40181a:	3710      	adds	r7, #16
  40181c:	46bd      	mov	sp, r7
  40181e:	bd80      	pop	{r7, pc}
  401820:	004004c9 	.word	0x004004c9
  401824:	00400481 	.word	0x00400481
  401828:	2000aaf4 	.word	0x2000aaf4
  40182c:	2000aad8 	.word	0x2000aad8
  401830:	00401749 	.word	0x00401749
  401834:	004004a1 	.word	0x004004a1

00401838 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  401838:	b480      	push	{r7}
  40183a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  40183c:	4b03      	ldr	r3, [pc, #12]	; (40184c <vTaskMissedYield+0x14>)
  40183e:	2201      	movs	r2, #1
  401840:	601a      	str	r2, [r3, #0]
}
  401842:	bf00      	nop
  401844:	46bd      	mov	sp, r7
  401846:	f85d 7b04 	ldr.w	r7, [sp], #4
  40184a:	4770      	bx	lr
  40184c:	2000aaf0 	.word	0x2000aaf0

00401850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401850:	b580      	push	{r7, lr}
  401852:	b082      	sub	sp, #8
  401854:	af00      	add	r7, sp, #0
  401856:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  401858:	4b04      	ldr	r3, [pc, #16]	; (40186c <prvIdleTask+0x1c>)
  40185a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  40185c:	4b04      	ldr	r3, [pc, #16]	; (401870 <prvIdleTask+0x20>)
  40185e:	681b      	ldr	r3, [r3, #0]
  401860:	2b01      	cmp	r3, #1
  401862:	d9f9      	bls.n	401858 <prvIdleTask+0x8>
			{
				taskYIELD();
  401864:	4b03      	ldr	r3, [pc, #12]	; (401874 <prvIdleTask+0x24>)
  401866:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
  401868:	e7f6      	b.n	401858 <prvIdleTask+0x8>
  40186a:	bf00      	nop
  40186c:	00401971 	.word	0x00401971
  401870:	2000aa00 	.word	0x2000aa00
  401874:	00400465 	.word	0x00400465

00401878 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  401878:	b580      	push	{r7, lr}
  40187a:	b084      	sub	sp, #16
  40187c:	af00      	add	r7, sp, #0
  40187e:	60f8      	str	r0, [r7, #12]
  401880:	60b9      	str	r1, [r7, #8]
  401882:	607a      	str	r2, [r7, #4]
  401884:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  401886:	68fb      	ldr	r3, [r7, #12]
  401888:	3334      	adds	r3, #52	; 0x34
  40188a:	220a      	movs	r2, #10
  40188c:	68b9      	ldr	r1, [r7, #8]
  40188e:	4618      	mov	r0, r3
  401890:	4b14      	ldr	r3, [pc, #80]	; (4018e4 <prvInitialiseTCBVariables+0x6c>)
  401892:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  401894:	68fb      	ldr	r3, [r7, #12]
  401896:	2200      	movs	r2, #0
  401898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  40189c:	687b      	ldr	r3, [r7, #4]
  40189e:	2b04      	cmp	r3, #4
  4018a0:	d901      	bls.n	4018a6 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  4018a2:	2304      	movs	r3, #4
  4018a4:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  4018a6:	68fb      	ldr	r3, [r7, #12]
  4018a8:	687a      	ldr	r2, [r7, #4]
  4018aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4018ac:	68fb      	ldr	r3, [r7, #12]
  4018ae:	687a      	ldr	r2, [r7, #4]
  4018b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4018b2:	68fb      	ldr	r3, [r7, #12]
  4018b4:	3304      	adds	r3, #4
  4018b6:	4618      	mov	r0, r3
  4018b8:	4b0b      	ldr	r3, [pc, #44]	; (4018e8 <prvInitialiseTCBVariables+0x70>)
  4018ba:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4018bc:	68fb      	ldr	r3, [r7, #12]
  4018be:	3318      	adds	r3, #24
  4018c0:	4618      	mov	r0, r3
  4018c2:	4b09      	ldr	r3, [pc, #36]	; (4018e8 <prvInitialiseTCBVariables+0x70>)
  4018c4:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4018c6:	68fb      	ldr	r3, [r7, #12]
  4018c8:	68fa      	ldr	r2, [r7, #12]
  4018ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  4018cc:	687b      	ldr	r3, [r7, #4]
  4018ce:	f1c3 0205 	rsb	r2, r3, #5
  4018d2:	68fb      	ldr	r3, [r7, #12]
  4018d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4018d6:	68fb      	ldr	r3, [r7, #12]
  4018d8:	68fa      	ldr	r2, [r7, #12]
  4018da:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  4018dc:	bf00      	nop
  4018de:	3710      	adds	r7, #16
  4018e0:	46bd      	mov	sp, r7
  4018e2:	bd80      	pop	{r7, pc}
  4018e4:	00406b5d 	.word	0x00406b5d
  4018e8:	004001a5 	.word	0x004001a5

004018ec <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  4018ec:	b580      	push	{r7, lr}
  4018ee:	b082      	sub	sp, #8
  4018f0:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4018f2:	2300      	movs	r3, #0
  4018f4:	607b      	str	r3, [r7, #4]
  4018f6:	e00c      	b.n	401912 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4018f8:	687a      	ldr	r2, [r7, #4]
  4018fa:	4613      	mov	r3, r2
  4018fc:	009b      	lsls	r3, r3, #2
  4018fe:	4413      	add	r3, r2
  401900:	009b      	lsls	r3, r3, #2
  401902:	4a12      	ldr	r2, [pc, #72]	; (40194c <prvInitialiseTaskLists+0x60>)
  401904:	4413      	add	r3, r2
  401906:	4618      	mov	r0, r3
  401908:	4b11      	ldr	r3, [pc, #68]	; (401950 <prvInitialiseTaskLists+0x64>)
  40190a:	4798      	blx	r3
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  40190c:	687b      	ldr	r3, [r7, #4]
  40190e:	3301      	adds	r3, #1
  401910:	607b      	str	r3, [r7, #4]
  401912:	687b      	ldr	r3, [r7, #4]
  401914:	2b04      	cmp	r3, #4
  401916:	d9ef      	bls.n	4018f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  401918:	480e      	ldr	r0, [pc, #56]	; (401954 <prvInitialiseTaskLists+0x68>)
  40191a:	4b0d      	ldr	r3, [pc, #52]	; (401950 <prvInitialiseTaskLists+0x64>)
  40191c:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  40191e:	480e      	ldr	r0, [pc, #56]	; (401958 <prvInitialiseTaskLists+0x6c>)
  401920:	4b0b      	ldr	r3, [pc, #44]	; (401950 <prvInitialiseTaskLists+0x64>)
  401922:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  401924:	480d      	ldr	r0, [pc, #52]	; (40195c <prvInitialiseTaskLists+0x70>)
  401926:	4b0a      	ldr	r3, [pc, #40]	; (401950 <prvInitialiseTaskLists+0x64>)
  401928:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  40192a:	480d      	ldr	r0, [pc, #52]	; (401960 <prvInitialiseTaskLists+0x74>)
  40192c:	4b08      	ldr	r3, [pc, #32]	; (401950 <prvInitialiseTaskLists+0x64>)
  40192e:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  401930:	480c      	ldr	r0, [pc, #48]	; (401964 <prvInitialiseTaskLists+0x78>)
  401932:	4b07      	ldr	r3, [pc, #28]	; (401950 <prvInitialiseTaskLists+0x64>)
  401934:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401936:	4b0c      	ldr	r3, [pc, #48]	; (401968 <prvInitialiseTaskLists+0x7c>)
  401938:	4a06      	ldr	r2, [pc, #24]	; (401954 <prvInitialiseTaskLists+0x68>)
  40193a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40193c:	4b0b      	ldr	r3, [pc, #44]	; (40196c <prvInitialiseTaskLists+0x80>)
  40193e:	4a06      	ldr	r2, [pc, #24]	; (401958 <prvInitialiseTaskLists+0x6c>)
  401940:	601a      	str	r2, [r3, #0]
}
  401942:	bf00      	nop
  401944:	3708      	adds	r7, #8
  401946:	46bd      	mov	sp, r7
  401948:	bd80      	pop	{r7, pc}
  40194a:	bf00      	nop
  40194c:	2000aa00 	.word	0x2000aa00
  401950:	00400165 	.word	0x00400165
  401954:	2000aa64 	.word	0x2000aa64
  401958:	2000aa78 	.word	0x2000aa78
  40195c:	2000aa94 	.word	0x2000aa94
  401960:	2000aaa8 	.word	0x2000aaa8
  401964:	2000aac0 	.word	0x2000aac0
  401968:	2000aa8c 	.word	0x2000aa8c
  40196c:	2000aa90 	.word	0x2000aa90

00401970 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  401970:	b580      	push	{r7, lr}
  401972:	b082      	sub	sp, #8
  401974:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401976:	e028      	b.n	4019ca <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  401978:	4b18      	ldr	r3, [pc, #96]	; (4019dc <prvCheckTasksWaitingTermination+0x6c>)
  40197a:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40197c:	4b18      	ldr	r3, [pc, #96]	; (4019e0 <prvCheckTasksWaitingTermination+0x70>)
  40197e:	681b      	ldr	r3, [r3, #0]
  401980:	2b00      	cmp	r3, #0
  401982:	bf0c      	ite	eq
  401984:	2301      	moveq	r3, #1
  401986:	2300      	movne	r3, #0
  401988:	b2db      	uxtb	r3, r3
  40198a:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  40198c:	4b15      	ldr	r3, [pc, #84]	; (4019e4 <prvCheckTasksWaitingTermination+0x74>)
  40198e:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  401990:	687b      	ldr	r3, [r7, #4]
  401992:	2b00      	cmp	r3, #0
  401994:	d119      	bne.n	4019ca <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  401996:	4b14      	ldr	r3, [pc, #80]	; (4019e8 <prvCheckTasksWaitingTermination+0x78>)
  401998:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  40199a:	4b11      	ldr	r3, [pc, #68]	; (4019e0 <prvCheckTasksWaitingTermination+0x70>)
  40199c:	68db      	ldr	r3, [r3, #12]
  40199e:	68db      	ldr	r3, [r3, #12]
  4019a0:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  4019a2:	683b      	ldr	r3, [r7, #0]
  4019a4:	3304      	adds	r3, #4
  4019a6:	4618      	mov	r0, r3
  4019a8:	4b10      	ldr	r3, [pc, #64]	; (4019ec <prvCheckTasksWaitingTermination+0x7c>)
  4019aa:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4019ac:	4b10      	ldr	r3, [pc, #64]	; (4019f0 <prvCheckTasksWaitingTermination+0x80>)
  4019ae:	681b      	ldr	r3, [r3, #0]
  4019b0:	3b01      	subs	r3, #1
  4019b2:	4a0f      	ldr	r2, [pc, #60]	; (4019f0 <prvCheckTasksWaitingTermination+0x80>)
  4019b4:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4019b6:	4b0f      	ldr	r3, [pc, #60]	; (4019f4 <prvCheckTasksWaitingTermination+0x84>)
  4019b8:	681b      	ldr	r3, [r3, #0]
  4019ba:	3b01      	subs	r3, #1
  4019bc:	4a0d      	ldr	r2, [pc, #52]	; (4019f4 <prvCheckTasksWaitingTermination+0x84>)
  4019be:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  4019c0:	4b0d      	ldr	r3, [pc, #52]	; (4019f8 <prvCheckTasksWaitingTermination+0x88>)
  4019c2:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  4019c4:	6838      	ldr	r0, [r7, #0]
  4019c6:	4b0d      	ldr	r3, [pc, #52]	; (4019fc <prvCheckTasksWaitingTermination+0x8c>)
  4019c8:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  4019ca:	4b0a      	ldr	r3, [pc, #40]	; (4019f4 <prvCheckTasksWaitingTermination+0x84>)
  4019cc:	681b      	ldr	r3, [r3, #0]
  4019ce:	2b00      	cmp	r3, #0
  4019d0:	d1d2      	bne.n	401978 <prvCheckTasksWaitingTermination+0x8>
			}
		}
	}
	#endif
}
  4019d2:	bf00      	nop
  4019d4:	3708      	adds	r7, #8
  4019d6:	46bd      	mov	sp, r7
  4019d8:	bd80      	pop	{r7, pc}
  4019da:	bf00      	nop
  4019dc:	0040124d 	.word	0x0040124d
  4019e0:	2000aaa8 	.word	0x2000aaa8
  4019e4:	00401269 	.word	0x00401269
  4019e8:	00400481 	.word	0x00400481
  4019ec:	00400281 	.word	0x00400281
  4019f0:	2000aad4 	.word	0x2000aad4
  4019f4:	2000aabc 	.word	0x2000aabc
  4019f8:	004004a1 	.word	0x004004a1
  4019fc:	00401ae1 	.word	0x00401ae1

00401a00 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  401a00:	b580      	push	{r7, lr}
  401a02:	b082      	sub	sp, #8
  401a04:	af00      	add	r7, sp, #0
  401a06:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401a08:	4b13      	ldr	r3, [pc, #76]	; (401a58 <prvAddCurrentTaskToDelayedList+0x58>)
  401a0a:	681b      	ldr	r3, [r3, #0]
  401a0c:	687a      	ldr	r2, [r7, #4]
  401a0e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  401a10:	4b12      	ldr	r3, [pc, #72]	; (401a5c <prvAddCurrentTaskToDelayedList+0x5c>)
  401a12:	681b      	ldr	r3, [r3, #0]
  401a14:	687a      	ldr	r2, [r7, #4]
  401a16:	429a      	cmp	r2, r3
  401a18:	d209      	bcs.n	401a2e <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401a1a:	4b11      	ldr	r3, [pc, #68]	; (401a60 <prvAddCurrentTaskToDelayedList+0x60>)
  401a1c:	681a      	ldr	r2, [r3, #0]
  401a1e:	4b0e      	ldr	r3, [pc, #56]	; (401a58 <prvAddCurrentTaskToDelayedList+0x58>)
  401a20:	681b      	ldr	r3, [r3, #0]
  401a22:	3304      	adds	r3, #4
  401a24:	4619      	mov	r1, r3
  401a26:	4610      	mov	r0, r2
  401a28:	4b0e      	ldr	r3, [pc, #56]	; (401a64 <prvAddCurrentTaskToDelayedList+0x64>)
  401a2a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  401a2c:	e010      	b.n	401a50 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401a2e:	4b0e      	ldr	r3, [pc, #56]	; (401a68 <prvAddCurrentTaskToDelayedList+0x68>)
  401a30:	681a      	ldr	r2, [r3, #0]
  401a32:	4b09      	ldr	r3, [pc, #36]	; (401a58 <prvAddCurrentTaskToDelayedList+0x58>)
  401a34:	681b      	ldr	r3, [r3, #0]
  401a36:	3304      	adds	r3, #4
  401a38:	4619      	mov	r1, r3
  401a3a:	4610      	mov	r0, r2
  401a3c:	4b09      	ldr	r3, [pc, #36]	; (401a64 <prvAddCurrentTaskToDelayedList+0x64>)
  401a3e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401a40:	4b0a      	ldr	r3, [pc, #40]	; (401a6c <prvAddCurrentTaskToDelayedList+0x6c>)
  401a42:	681b      	ldr	r3, [r3, #0]
  401a44:	687a      	ldr	r2, [r7, #4]
  401a46:	429a      	cmp	r2, r3
  401a48:	d202      	bcs.n	401a50 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
  401a4a:	4a08      	ldr	r2, [pc, #32]	; (401a6c <prvAddCurrentTaskToDelayedList+0x6c>)
  401a4c:	687b      	ldr	r3, [r7, #4]
  401a4e:	6013      	str	r3, [r2, #0]
}
  401a50:	bf00      	nop
  401a52:	3708      	adds	r7, #8
  401a54:	46bd      	mov	sp, r7
  401a56:	bd80      	pop	{r7, pc}
  401a58:	2000a9fc 	.word	0x2000a9fc
  401a5c:	2000aad8 	.word	0x2000aad8
  401a60:	2000aa90 	.word	0x2000aa90
  401a64:	0040020f 	.word	0x0040020f
  401a68:	2000aa8c 	.word	0x2000aa8c
  401a6c:	20000014 	.word	0x20000014

00401a70 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  401a70:	b580      	push	{r7, lr}
  401a72:	b084      	sub	sp, #16
  401a74:	af00      	add	r7, sp, #0
  401a76:	4603      	mov	r3, r0
  401a78:	6039      	str	r1, [r7, #0]
  401a7a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401a7c:	204c      	movs	r0, #76	; 0x4c
  401a7e:	4b15      	ldr	r3, [pc, #84]	; (401ad4 <prvAllocateTCBAndStack+0x64>)
  401a80:	4798      	blx	r3
  401a82:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  401a84:	68fb      	ldr	r3, [r7, #12]
  401a86:	2b00      	cmp	r3, #0
  401a88:	d01e      	beq.n	401ac8 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401a8a:	683b      	ldr	r3, [r7, #0]
  401a8c:	2b00      	cmp	r3, #0
  401a8e:	d106      	bne.n	401a9e <prvAllocateTCBAndStack+0x2e>
  401a90:	88fb      	ldrh	r3, [r7, #6]
  401a92:	009b      	lsls	r3, r3, #2
  401a94:	4618      	mov	r0, r3
  401a96:	4b0f      	ldr	r3, [pc, #60]	; (401ad4 <prvAllocateTCBAndStack+0x64>)
  401a98:	4798      	blx	r3
  401a9a:	4603      	mov	r3, r0
  401a9c:	e000      	b.n	401aa0 <prvAllocateTCBAndStack+0x30>
  401a9e:	683b      	ldr	r3, [r7, #0]
  401aa0:	68fa      	ldr	r2, [r7, #12]
  401aa2:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  401aa4:	68fb      	ldr	r3, [r7, #12]
  401aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401aa8:	2b00      	cmp	r3, #0
  401aaa:	d105      	bne.n	401ab8 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  401aac:	68f8      	ldr	r0, [r7, #12]
  401aae:	4b0a      	ldr	r3, [pc, #40]	; (401ad8 <prvAllocateTCBAndStack+0x68>)
  401ab0:	4798      	blx	r3
			pxNewTCB = NULL;
  401ab2:	2300      	movs	r3, #0
  401ab4:	60fb      	str	r3, [r7, #12]
  401ab6:	e007      	b.n	401ac8 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  401ab8:	68fb      	ldr	r3, [r7, #12]
  401aba:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401abc:	88fb      	ldrh	r3, [r7, #6]
  401abe:	009b      	lsls	r3, r3, #2
  401ac0:	461a      	mov	r2, r3
  401ac2:	21a5      	movs	r1, #165	; 0xa5
  401ac4:	4b05      	ldr	r3, [pc, #20]	; (401adc <prvAllocateTCBAndStack+0x6c>)
  401ac6:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  401ac8:	68fb      	ldr	r3, [r7, #12]
}
  401aca:	4618      	mov	r0, r3
  401acc:	3710      	adds	r7, #16
  401ace:	46bd      	mov	sp, r7
  401ad0:	bd80      	pop	{r7, pc}
  401ad2:	bf00      	nop
  401ad4:	004005b1 	.word	0x004005b1
  401ad8:	004006ad 	.word	0x004006ad
  401adc:	00406981 	.word	0x00406981

00401ae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  401ae0:	b580      	push	{r7, lr}
  401ae2:	b082      	sub	sp, #8
  401ae4:	af00      	add	r7, sp, #0
  401ae6:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401ae8:	687b      	ldr	r3, [r7, #4]
  401aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401aec:	4618      	mov	r0, r3
  401aee:	4b04      	ldr	r3, [pc, #16]	; (401b00 <prvDeleteTCB+0x20>)
  401af0:	4798      	blx	r3
		vPortFree( pxTCB );
  401af2:	6878      	ldr	r0, [r7, #4]
  401af4:	4b02      	ldr	r3, [pc, #8]	; (401b00 <prvDeleteTCB+0x20>)
  401af6:	4798      	blx	r3
	}
  401af8:	bf00      	nop
  401afa:	3708      	adds	r7, #8
  401afc:	46bd      	mov	sp, r7
  401afe:	bd80      	pop	{r7, pc}
  401b00:	004006ad 	.word	0x004006ad

00401b04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  401b04:	b480      	push	{r7}
  401b06:	b083      	sub	sp, #12
  401b08:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401b0a:	4b05      	ldr	r3, [pc, #20]	; (401b20 <xTaskGetCurrentTaskHandle+0x1c>)
  401b0c:	681b      	ldr	r3, [r3, #0]
  401b0e:	607b      	str	r3, [r7, #4]

		return xReturn;
  401b10:	687b      	ldr	r3, [r7, #4]
	}
  401b12:	4618      	mov	r0, r3
  401b14:	370c      	adds	r7, #12
  401b16:	46bd      	mov	sp, r7
  401b18:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b1c:	4770      	bx	lr
  401b1e:	bf00      	nop
  401b20:	2000a9fc 	.word	0x2000a9fc

00401b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  401b24:	b480      	push	{r7}
  401b26:	b083      	sub	sp, #12
  401b28:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  401b2a:	4b0b      	ldr	r3, [pc, #44]	; (401b58 <xTaskGetSchedulerState+0x34>)
  401b2c:	681b      	ldr	r3, [r3, #0]
  401b2e:	2b00      	cmp	r3, #0
  401b30:	d102      	bne.n	401b38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401b32:	2300      	movs	r3, #0
  401b34:	607b      	str	r3, [r7, #4]
  401b36:	e008      	b.n	401b4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401b38:	4b08      	ldr	r3, [pc, #32]	; (401b5c <xTaskGetSchedulerState+0x38>)
  401b3a:	681b      	ldr	r3, [r3, #0]
  401b3c:	2b00      	cmp	r3, #0
  401b3e:	d102      	bne.n	401b46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  401b40:	2301      	movs	r3, #1
  401b42:	607b      	str	r3, [r7, #4]
  401b44:	e001      	b.n	401b4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401b46:	2302      	movs	r3, #2
  401b48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  401b4a:	687b      	ldr	r3, [r7, #4]
	}
  401b4c:	4618      	mov	r0, r3
  401b4e:	370c      	adds	r7, #12
  401b50:	46bd      	mov	sp, r7
  401b52:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b56:	4770      	bx	lr
  401b58:	2000aae4 	.word	0x2000aae4
  401b5c:	2000aae8 	.word	0x2000aae8

00401b60 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  401b60:	b580      	push	{r7, lr}
  401b62:	b084      	sub	sp, #16
  401b64:	af00      	add	r7, sp, #0
  401b66:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401b68:	687b      	ldr	r3, [r7, #4]
  401b6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401b6c:	687b      	ldr	r3, [r7, #4]
  401b6e:	2b00      	cmp	r3, #0
  401b70:	d041      	beq.n	401bf6 <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401b72:	68fb      	ldr	r3, [r7, #12]
  401b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401b76:	4b22      	ldr	r3, [pc, #136]	; (401c00 <vTaskPriorityInherit+0xa0>)
  401b78:	681b      	ldr	r3, [r3, #0]
  401b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b7c:	429a      	cmp	r2, r3
  401b7e:	d23a      	bcs.n	401bf6 <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  401b80:	4b1f      	ldr	r3, [pc, #124]	; (401c00 <vTaskPriorityInherit+0xa0>)
  401b82:	681b      	ldr	r3, [r3, #0]
  401b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b86:	f1c3 0205 	rsb	r2, r3, #5
  401b8a:	68fb      	ldr	r3, [r7, #12]
  401b8c:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401b8e:	68fb      	ldr	r3, [r7, #12]
  401b90:	6959      	ldr	r1, [r3, #20]
  401b92:	68fb      	ldr	r3, [r7, #12]
  401b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401b96:	4613      	mov	r3, r2
  401b98:	009b      	lsls	r3, r3, #2
  401b9a:	4413      	add	r3, r2
  401b9c:	009b      	lsls	r3, r3, #2
  401b9e:	4a19      	ldr	r2, [pc, #100]	; (401c04 <vTaskPriorityInherit+0xa4>)
  401ba0:	4413      	add	r3, r2
  401ba2:	4299      	cmp	r1, r3
  401ba4:	d122      	bne.n	401bec <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401ba6:	68fb      	ldr	r3, [r7, #12]
  401ba8:	3304      	adds	r3, #4
  401baa:	4618      	mov	r0, r3
  401bac:	4b16      	ldr	r3, [pc, #88]	; (401c08 <vTaskPriorityInherit+0xa8>)
  401bae:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401bb0:	4b13      	ldr	r3, [pc, #76]	; (401c00 <vTaskPriorityInherit+0xa0>)
  401bb2:	681b      	ldr	r3, [r3, #0]
  401bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bb6:	68fb      	ldr	r3, [r7, #12]
  401bb8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  401bba:	68fb      	ldr	r3, [r7, #12]
  401bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bbe:	4b13      	ldr	r3, [pc, #76]	; (401c0c <vTaskPriorityInherit+0xac>)
  401bc0:	681b      	ldr	r3, [r3, #0]
  401bc2:	429a      	cmp	r2, r3
  401bc4:	d903      	bls.n	401bce <vTaskPriorityInherit+0x6e>
  401bc6:	68fb      	ldr	r3, [r7, #12]
  401bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401bca:	4a10      	ldr	r2, [pc, #64]	; (401c0c <vTaskPriorityInherit+0xac>)
  401bcc:	6013      	str	r3, [r2, #0]
  401bce:	68fb      	ldr	r3, [r7, #12]
  401bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bd2:	4613      	mov	r3, r2
  401bd4:	009b      	lsls	r3, r3, #2
  401bd6:	4413      	add	r3, r2
  401bd8:	009b      	lsls	r3, r3, #2
  401bda:	4a0a      	ldr	r2, [pc, #40]	; (401c04 <vTaskPriorityInherit+0xa4>)
  401bdc:	441a      	add	r2, r3
  401bde:	68fb      	ldr	r3, [r7, #12]
  401be0:	3304      	adds	r3, #4
  401be2:	4619      	mov	r1, r3
  401be4:	4610      	mov	r0, r2
  401be6:	4b0a      	ldr	r3, [pc, #40]	; (401c10 <vTaskPriorityInherit+0xb0>)
  401be8:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  401bea:	e004      	b.n	401bf6 <vTaskPriorityInherit+0x96>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401bec:	4b04      	ldr	r3, [pc, #16]	; (401c00 <vTaskPriorityInherit+0xa0>)
  401bee:	681b      	ldr	r3, [r3, #0]
  401bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bf2:	68fb      	ldr	r3, [r7, #12]
  401bf4:	62da      	str	r2, [r3, #44]	; 0x2c
	}
  401bf6:	bf00      	nop
  401bf8:	3710      	adds	r7, #16
  401bfa:	46bd      	mov	sp, r7
  401bfc:	bd80      	pop	{r7, pc}
  401bfe:	bf00      	nop
  401c00:	2000a9fc 	.word	0x2000a9fc
  401c04:	2000aa00 	.word	0x2000aa00
  401c08:	00400281 	.word	0x00400281
  401c0c:	2000aae0 	.word	0x2000aae0
  401c10:	004001bf 	.word	0x004001bf

00401c14 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  401c14:	b580      	push	{r7, lr}
  401c16:	b084      	sub	sp, #16
  401c18:	af00      	add	r7, sp, #0
  401c1a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401c1c:	687b      	ldr	r3, [r7, #4]
  401c1e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  401c20:	687b      	ldr	r3, [r7, #4]
  401c22:	2b00      	cmp	r3, #0
  401c24:	d02c      	beq.n	401c80 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401c26:	68fb      	ldr	r3, [r7, #12]
  401c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c2a:	68fb      	ldr	r3, [r7, #12]
  401c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401c2e:	429a      	cmp	r2, r3
  401c30:	d026      	beq.n	401c80 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401c32:	68fb      	ldr	r3, [r7, #12]
  401c34:	3304      	adds	r3, #4
  401c36:	4618      	mov	r0, r3
  401c38:	4b13      	ldr	r3, [pc, #76]	; (401c88 <vTaskPriorityDisinherit+0x74>)
  401c3a:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  401c3c:	68fb      	ldr	r3, [r7, #12]
  401c3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  401c40:	68fb      	ldr	r3, [r7, #12]
  401c42:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  401c44:	68fb      	ldr	r3, [r7, #12]
  401c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c48:	f1c3 0205 	rsb	r2, r3, #5
  401c4c:	68fb      	ldr	r3, [r7, #12]
  401c4e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  401c50:	68fb      	ldr	r3, [r7, #12]
  401c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c54:	4b0d      	ldr	r3, [pc, #52]	; (401c8c <vTaskPriorityDisinherit+0x78>)
  401c56:	681b      	ldr	r3, [r3, #0]
  401c58:	429a      	cmp	r2, r3
  401c5a:	d903      	bls.n	401c64 <vTaskPriorityDisinherit+0x50>
  401c5c:	68fb      	ldr	r3, [r7, #12]
  401c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c60:	4a0a      	ldr	r2, [pc, #40]	; (401c8c <vTaskPriorityDisinherit+0x78>)
  401c62:	6013      	str	r3, [r2, #0]
  401c64:	68fb      	ldr	r3, [r7, #12]
  401c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c68:	4613      	mov	r3, r2
  401c6a:	009b      	lsls	r3, r3, #2
  401c6c:	4413      	add	r3, r2
  401c6e:	009b      	lsls	r3, r3, #2
  401c70:	4a07      	ldr	r2, [pc, #28]	; (401c90 <vTaskPriorityDisinherit+0x7c>)
  401c72:	441a      	add	r2, r3
  401c74:	68fb      	ldr	r3, [r7, #12]
  401c76:	3304      	adds	r3, #4
  401c78:	4619      	mov	r1, r3
  401c7a:	4610      	mov	r0, r2
  401c7c:	4b05      	ldr	r3, [pc, #20]	; (401c94 <vTaskPriorityDisinherit+0x80>)
  401c7e:	4798      	blx	r3
			}
		}
	}
  401c80:	bf00      	nop
  401c82:	3710      	adds	r7, #16
  401c84:	46bd      	mov	sp, r7
  401c86:	bd80      	pop	{r7, pc}
  401c88:	00400281 	.word	0x00400281
  401c8c:	2000aae0 	.word	0x2000aae0
  401c90:	2000aa00 	.word	0x2000aa00
  401c94:	004001bf 	.word	0x004001bf

00401c98 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  401c98:	b590      	push	{r4, r7, lr}
  401c9a:	b087      	sub	sp, #28
  401c9c:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  401c9e:	2300      	movs	r3, #0
  401ca0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  401ca2:	4b11      	ldr	r3, [pc, #68]	; (401ce8 <xTimerCreateTimerTask+0x50>)
  401ca4:	4798      	blx	r3

	if( xTimerQueue != NULL )
  401ca6:	4b11      	ldr	r3, [pc, #68]	; (401cec <xTimerCreateTimerTask+0x54>)
  401ca8:	681b      	ldr	r3, [r3, #0]
  401caa:	2b00      	cmp	r3, #0
  401cac:	d00f      	beq.n	401cce <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401cae:	2300      	movs	r3, #0
  401cb0:	9303      	str	r3, [sp, #12]
  401cb2:	2300      	movs	r3, #0
  401cb4:	9302      	str	r3, [sp, #8]
  401cb6:	2300      	movs	r3, #0
  401cb8:	9301      	str	r3, [sp, #4]
  401cba:	2304      	movs	r3, #4
  401cbc:	9300      	str	r3, [sp, #0]
  401cbe:	2300      	movs	r3, #0
  401cc0:	f44f 7282 	mov.w	r2, #260	; 0x104
  401cc4:	490a      	ldr	r1, [pc, #40]	; (401cf0 <xTimerCreateTimerTask+0x58>)
  401cc6:	480b      	ldr	r0, [pc, #44]	; (401cf4 <xTimerCreateTimerTask+0x5c>)
  401cc8:	4c0b      	ldr	r4, [pc, #44]	; (401cf8 <xTimerCreateTimerTask+0x60>)
  401cca:	47a0      	blx	r4
  401ccc:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  401cce:	687b      	ldr	r3, [r7, #4]
  401cd0:	2b00      	cmp	r3, #0
  401cd2:	d103      	bne.n	401cdc <xTimerCreateTimerTask+0x44>
  401cd4:	4b09      	ldr	r3, [pc, #36]	; (401cfc <xTimerCreateTimerTask+0x64>)
  401cd6:	4798      	blx	r3
  401cd8:	bf00      	nop
  401cda:	e7fd      	b.n	401cd8 <xTimerCreateTimerTask+0x40>
	return xReturn;
  401cdc:	687b      	ldr	r3, [r7, #4]
}
  401cde:	4618      	mov	r0, r3
  401ce0:	370c      	adds	r7, #12
  401ce2:	46bd      	mov	sp, r7
  401ce4:	bd90      	pop	{r4, r7, pc}
  401ce6:	bf00      	nop
  401ce8:	004021b5 	.word	0x004021b5
  401cec:	2000ab2c 	.word	0x2000ab2c
  401cf0:	0040aeb8 	.word	0x0040aeb8
  401cf4:	00401e11 	.word	0x00401e11
  401cf8:	00401025 	.word	0x00401025
  401cfc:	004004c9 	.word	0x004004c9

00401d00 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  401d00:	b590      	push	{r4, r7, lr}
  401d02:	b089      	sub	sp, #36	; 0x24
  401d04:	af00      	add	r7, sp, #0
  401d06:	60f8      	str	r0, [r7, #12]
  401d08:	60b9      	str	r1, [r7, #8]
  401d0a:	607a      	str	r2, [r7, #4]
  401d0c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  401d0e:	2300      	movs	r3, #0
  401d10:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401d12:	4b1a      	ldr	r3, [pc, #104]	; (401d7c <xTimerGenericCommand+0x7c>)
  401d14:	681b      	ldr	r3, [r3, #0]
  401d16:	2b00      	cmp	r3, #0
  401d18:	d02a      	beq.n	401d70 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401d1a:	68bb      	ldr	r3, [r7, #8]
  401d1c:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  401d1e:	687b      	ldr	r3, [r7, #4]
  401d20:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  401d22:	68fb      	ldr	r3, [r7, #12]
  401d24:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  401d26:	683b      	ldr	r3, [r7, #0]
  401d28:	2b00      	cmp	r3, #0
  401d2a:	d118      	bne.n	401d5e <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401d2c:	4b14      	ldr	r3, [pc, #80]	; (401d80 <xTimerGenericCommand+0x80>)
  401d2e:	4798      	blx	r3
  401d30:	4603      	mov	r3, r0
  401d32:	2b01      	cmp	r3, #1
  401d34:	d109      	bne.n	401d4a <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  401d36:	4b11      	ldr	r3, [pc, #68]	; (401d7c <xTimerGenericCommand+0x7c>)
  401d38:	6818      	ldr	r0, [r3, #0]
  401d3a:	f107 0110 	add.w	r1, r7, #16
  401d3e:	2300      	movs	r3, #0
  401d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401d42:	4c10      	ldr	r4, [pc, #64]	; (401d84 <xTimerGenericCommand+0x84>)
  401d44:	47a0      	blx	r4
  401d46:	61f8      	str	r0, [r7, #28]
  401d48:	e012      	b.n	401d70 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401d4a:	4b0c      	ldr	r3, [pc, #48]	; (401d7c <xTimerGenericCommand+0x7c>)
  401d4c:	6818      	ldr	r0, [r3, #0]
  401d4e:	f107 0110 	add.w	r1, r7, #16
  401d52:	2300      	movs	r3, #0
  401d54:	2200      	movs	r2, #0
  401d56:	4c0b      	ldr	r4, [pc, #44]	; (401d84 <xTimerGenericCommand+0x84>)
  401d58:	47a0      	blx	r4
  401d5a:	61f8      	str	r0, [r7, #28]
  401d5c:	e008      	b.n	401d70 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401d5e:	4b07      	ldr	r3, [pc, #28]	; (401d7c <xTimerGenericCommand+0x7c>)
  401d60:	6818      	ldr	r0, [r3, #0]
  401d62:	f107 0110 	add.w	r1, r7, #16
  401d66:	2300      	movs	r3, #0
  401d68:	683a      	ldr	r2, [r7, #0]
  401d6a:	4c07      	ldr	r4, [pc, #28]	; (401d88 <xTimerGenericCommand+0x88>)
  401d6c:	47a0      	blx	r4
  401d6e:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  401d70:	69fb      	ldr	r3, [r7, #28]
}
  401d72:	4618      	mov	r0, r3
  401d74:	3724      	adds	r7, #36	; 0x24
  401d76:	46bd      	mov	sp, r7
  401d78:	bd90      	pop	{r4, r7, pc}
  401d7a:	bf00      	nop
  401d7c:	2000ab2c 	.word	0x2000ab2c
  401d80:	00401b25 	.word	0x00401b25
  401d84:	004009a5 	.word	0x004009a5
  401d88:	00400b0d 	.word	0x00400b0d

00401d8c <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  401d8c:	b590      	push	{r4, r7, lr}
  401d8e:	b087      	sub	sp, #28
  401d90:	af02      	add	r7, sp, #8
  401d92:	6078      	str	r0, [r7, #4]
  401d94:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401d96:	4b19      	ldr	r3, [pc, #100]	; (401dfc <prvProcessExpiredTimer+0x70>)
  401d98:	681b      	ldr	r3, [r3, #0]
  401d9a:	68db      	ldr	r3, [r3, #12]
  401d9c:	68db      	ldr	r3, [r3, #12]
  401d9e:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  401da0:	68fb      	ldr	r3, [r7, #12]
  401da2:	3304      	adds	r3, #4
  401da4:	4618      	mov	r0, r3
  401da6:	4b16      	ldr	r3, [pc, #88]	; (401e00 <prvProcessExpiredTimer+0x74>)
  401da8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  401daa:	68fb      	ldr	r3, [r7, #12]
  401dac:	69db      	ldr	r3, [r3, #28]
  401dae:	2b01      	cmp	r3, #1
  401db0:	d11b      	bne.n	401dea <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401db2:	68fb      	ldr	r3, [r7, #12]
  401db4:	699a      	ldr	r2, [r3, #24]
  401db6:	687b      	ldr	r3, [r7, #4]
  401db8:	18d1      	adds	r1, r2, r3
  401dba:	687b      	ldr	r3, [r7, #4]
  401dbc:	683a      	ldr	r2, [r7, #0]
  401dbe:	68f8      	ldr	r0, [r7, #12]
  401dc0:	4c10      	ldr	r4, [pc, #64]	; (401e04 <prvProcessExpiredTimer+0x78>)
  401dc2:	47a0      	blx	r4
  401dc4:	4603      	mov	r3, r0
  401dc6:	2b01      	cmp	r3, #1
  401dc8:	d10f      	bne.n	401dea <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  401dca:	2300      	movs	r3, #0
  401dcc:	9300      	str	r3, [sp, #0]
  401dce:	2300      	movs	r3, #0
  401dd0:	687a      	ldr	r2, [r7, #4]
  401dd2:	2100      	movs	r1, #0
  401dd4:	68f8      	ldr	r0, [r7, #12]
  401dd6:	4c0c      	ldr	r4, [pc, #48]	; (401e08 <prvProcessExpiredTimer+0x7c>)
  401dd8:	47a0      	blx	r4
  401dda:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  401ddc:	68bb      	ldr	r3, [r7, #8]
  401dde:	2b00      	cmp	r3, #0
  401de0:	d103      	bne.n	401dea <prvProcessExpiredTimer+0x5e>
  401de2:	4b0a      	ldr	r3, [pc, #40]	; (401e0c <prvProcessExpiredTimer+0x80>)
  401de4:	4798      	blx	r3
  401de6:	bf00      	nop
  401de8:	e7fd      	b.n	401de6 <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  401dea:	68fb      	ldr	r3, [r7, #12]
  401dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401dee:	68f8      	ldr	r0, [r7, #12]
  401df0:	4798      	blx	r3
}
  401df2:	bf00      	nop
  401df4:	3714      	adds	r7, #20
  401df6:	46bd      	mov	sp, r7
  401df8:	bd90      	pop	{r4, r7, pc}
  401dfa:	bf00      	nop
  401dfc:	2000ab24 	.word	0x2000ab24
  401e00:	00400281 	.word	0x00400281
  401e04:	00401f59 	.word	0x00401f59
  401e08:	00401d01 	.word	0x00401d01
  401e0c:	004004c9 	.word	0x004004c9

00401e10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  401e10:	b580      	push	{r7, lr}
  401e12:	b084      	sub	sp, #16
  401e14:	af00      	add	r7, sp, #0
  401e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401e18:	f107 0308 	add.w	r3, r7, #8
  401e1c:	4618      	mov	r0, r3
  401e1e:	4b05      	ldr	r3, [pc, #20]	; (401e34 <prvTimerTask+0x24>)
  401e20:	4798      	blx	r3
  401e22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  401e24:	68bb      	ldr	r3, [r7, #8]
  401e26:	4619      	mov	r1, r3
  401e28:	68f8      	ldr	r0, [r7, #12]
  401e2a:	4b03      	ldr	r3, [pc, #12]	; (401e38 <prvTimerTask+0x28>)
  401e2c:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  401e2e:	4b03      	ldr	r3, [pc, #12]	; (401e3c <prvTimerTask+0x2c>)
  401e30:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401e32:	e7f1      	b.n	401e18 <prvTimerTask+0x8>
  401e34:	00401ec5 	.word	0x00401ec5
  401e38:	00401e41 	.word	0x00401e41
  401e3c:	00401fe1 	.word	0x00401fe1

00401e40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  401e40:	b580      	push	{r7, lr}
  401e42:	b084      	sub	sp, #16
  401e44:	af00      	add	r7, sp, #0
  401e46:	6078      	str	r0, [r7, #4]
  401e48:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  401e4a:	4b17      	ldr	r3, [pc, #92]	; (401ea8 <prvProcessTimerOrBlockTask+0x68>)
  401e4c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401e4e:	f107 0308 	add.w	r3, r7, #8
  401e52:	4618      	mov	r0, r3
  401e54:	4b15      	ldr	r3, [pc, #84]	; (401eac <prvProcessTimerOrBlockTask+0x6c>)
  401e56:	4798      	blx	r3
  401e58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  401e5a:	68bb      	ldr	r3, [r7, #8]
  401e5c:	2b00      	cmp	r3, #0
  401e5e:	d11d      	bne.n	401e9c <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401e60:	683b      	ldr	r3, [r7, #0]
  401e62:	2b00      	cmp	r3, #0
  401e64:	d10a      	bne.n	401e7c <prvProcessTimerOrBlockTask+0x3c>
  401e66:	687a      	ldr	r2, [r7, #4]
  401e68:	68fb      	ldr	r3, [r7, #12]
  401e6a:	429a      	cmp	r2, r3
  401e6c:	d806      	bhi.n	401e7c <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  401e6e:	4b10      	ldr	r3, [pc, #64]	; (401eb0 <prvProcessTimerOrBlockTask+0x70>)
  401e70:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401e72:	68f9      	ldr	r1, [r7, #12]
  401e74:	6878      	ldr	r0, [r7, #4]
  401e76:	4b0f      	ldr	r3, [pc, #60]	; (401eb4 <prvProcessTimerOrBlockTask+0x74>)
  401e78:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  401e7a:	e011      	b.n	401ea0 <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  401e7c:	4b0e      	ldr	r3, [pc, #56]	; (401eb8 <prvProcessTimerOrBlockTask+0x78>)
  401e7e:	6818      	ldr	r0, [r3, #0]
  401e80:	687a      	ldr	r2, [r7, #4]
  401e82:	68fb      	ldr	r3, [r7, #12]
  401e84:	1ad3      	subs	r3, r2, r3
  401e86:	4619      	mov	r1, r3
  401e88:	4b0c      	ldr	r3, [pc, #48]	; (401ebc <prvProcessTimerOrBlockTask+0x7c>)
  401e8a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401e8c:	4b08      	ldr	r3, [pc, #32]	; (401eb0 <prvProcessTimerOrBlockTask+0x70>)
  401e8e:	4798      	blx	r3
  401e90:	4603      	mov	r3, r0
  401e92:	2b00      	cmp	r3, #0
  401e94:	d104      	bne.n	401ea0 <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
  401e96:	4b0a      	ldr	r3, [pc, #40]	; (401ec0 <prvProcessTimerOrBlockTask+0x80>)
  401e98:	4798      	blx	r3
}
  401e9a:	e001      	b.n	401ea0 <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
  401e9c:	4b04      	ldr	r3, [pc, #16]	; (401eb0 <prvProcessTimerOrBlockTask+0x70>)
  401e9e:	4798      	blx	r3
}
  401ea0:	bf00      	nop
  401ea2:	3710      	adds	r7, #16
  401ea4:	46bd      	mov	sp, r7
  401ea6:	bd80      	pop	{r7, pc}
  401ea8:	0040124d 	.word	0x0040124d
  401eac:	00401f0d 	.word	0x00401f0d
  401eb0:	00401269 	.word	0x00401269
  401eb4:	00401d8d 	.word	0x00401d8d
  401eb8:	2000ab2c 	.word	0x2000ab2c
  401ebc:	00400fc1 	.word	0x00400fc1
  401ec0:	00400465 	.word	0x00400465

00401ec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  401ec4:	b480      	push	{r7}
  401ec6:	b085      	sub	sp, #20
  401ec8:	af00      	add	r7, sp, #0
  401eca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401ecc:	4b0e      	ldr	r3, [pc, #56]	; (401f08 <prvGetNextExpireTime+0x44>)
  401ece:	681b      	ldr	r3, [r3, #0]
  401ed0:	681b      	ldr	r3, [r3, #0]
  401ed2:	2b00      	cmp	r3, #0
  401ed4:	bf0c      	ite	eq
  401ed6:	2301      	moveq	r3, #1
  401ed8:	2300      	movne	r3, #0
  401eda:	b2db      	uxtb	r3, r3
  401edc:	461a      	mov	r2, r3
  401ede:	687b      	ldr	r3, [r7, #4]
  401ee0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  401ee2:	687b      	ldr	r3, [r7, #4]
  401ee4:	681b      	ldr	r3, [r3, #0]
  401ee6:	2b00      	cmp	r3, #0
  401ee8:	d105      	bne.n	401ef6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401eea:	4b07      	ldr	r3, [pc, #28]	; (401f08 <prvGetNextExpireTime+0x44>)
  401eec:	681b      	ldr	r3, [r3, #0]
  401eee:	68db      	ldr	r3, [r3, #12]
  401ef0:	681b      	ldr	r3, [r3, #0]
  401ef2:	60fb      	str	r3, [r7, #12]
  401ef4:	e001      	b.n	401efa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  401ef6:	2300      	movs	r3, #0
  401ef8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  401efa:	68fb      	ldr	r3, [r7, #12]
}
  401efc:	4618      	mov	r0, r3
  401efe:	3714      	adds	r7, #20
  401f00:	46bd      	mov	sp, r7
  401f02:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f06:	4770      	bx	lr
  401f08:	2000ab24 	.word	0x2000ab24

00401f0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  401f0c:	b580      	push	{r7, lr}
  401f0e:	b084      	sub	sp, #16
  401f10:	af00      	add	r7, sp, #0
  401f12:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  401f14:	4b0d      	ldr	r3, [pc, #52]	; (401f4c <prvSampleTimeNow+0x40>)
  401f16:	4798      	blx	r3
  401f18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  401f1a:	4b0d      	ldr	r3, [pc, #52]	; (401f50 <prvSampleTimeNow+0x44>)
  401f1c:	681b      	ldr	r3, [r3, #0]
  401f1e:	68fa      	ldr	r2, [r7, #12]
  401f20:	429a      	cmp	r2, r3
  401f22:	d208      	bcs.n	401f36 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  401f24:	4b0a      	ldr	r3, [pc, #40]	; (401f50 <prvSampleTimeNow+0x44>)
  401f26:	681b      	ldr	r3, [r3, #0]
  401f28:	4618      	mov	r0, r3
  401f2a:	4b0a      	ldr	r3, [pc, #40]	; (401f54 <prvSampleTimeNow+0x48>)
  401f2c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  401f2e:	687b      	ldr	r3, [r7, #4]
  401f30:	2201      	movs	r2, #1
  401f32:	601a      	str	r2, [r3, #0]
  401f34:	e002      	b.n	401f3c <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  401f36:	687b      	ldr	r3, [r7, #4]
  401f38:	2200      	movs	r2, #0
  401f3a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  401f3c:	4a04      	ldr	r2, [pc, #16]	; (401f50 <prvSampleTimeNow+0x44>)
  401f3e:	68fb      	ldr	r3, [r7, #12]
  401f40:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  401f42:	68fb      	ldr	r3, [r7, #12]
}
  401f44:	4618      	mov	r0, r3
  401f46:	3710      	adds	r7, #16
  401f48:	46bd      	mov	sp, r7
  401f4a:	bd80      	pop	{r7, pc}
  401f4c:	00401389 	.word	0x00401389
  401f50:	2000ab30 	.word	0x2000ab30
  401f54:	004020ed 	.word	0x004020ed

00401f58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  401f58:	b580      	push	{r7, lr}
  401f5a:	b086      	sub	sp, #24
  401f5c:	af00      	add	r7, sp, #0
  401f5e:	60f8      	str	r0, [r7, #12]
  401f60:	60b9      	str	r1, [r7, #8]
  401f62:	607a      	str	r2, [r7, #4]
  401f64:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  401f66:	2300      	movs	r3, #0
  401f68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401f6a:	68fb      	ldr	r3, [r7, #12]
  401f6c:	68ba      	ldr	r2, [r7, #8]
  401f6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401f70:	68fb      	ldr	r3, [r7, #12]
  401f72:	68fa      	ldr	r2, [r7, #12]
  401f74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  401f76:	68ba      	ldr	r2, [r7, #8]
  401f78:	687b      	ldr	r3, [r7, #4]
  401f7a:	429a      	cmp	r2, r3
  401f7c:	d812      	bhi.n	401fa4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  401f7e:	687a      	ldr	r2, [r7, #4]
  401f80:	683b      	ldr	r3, [r7, #0]
  401f82:	1ad2      	subs	r2, r2, r3
  401f84:	68fb      	ldr	r3, [r7, #12]
  401f86:	699b      	ldr	r3, [r3, #24]
  401f88:	429a      	cmp	r2, r3
  401f8a:	d302      	bcc.n	401f92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401f8c:	2301      	movs	r3, #1
  401f8e:	617b      	str	r3, [r7, #20]
  401f90:	e01b      	b.n	401fca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401f92:	4b10      	ldr	r3, [pc, #64]	; (401fd4 <prvInsertTimerInActiveList+0x7c>)
  401f94:	681a      	ldr	r2, [r3, #0]
  401f96:	68fb      	ldr	r3, [r7, #12]
  401f98:	3304      	adds	r3, #4
  401f9a:	4619      	mov	r1, r3
  401f9c:	4610      	mov	r0, r2
  401f9e:	4b0e      	ldr	r3, [pc, #56]	; (401fd8 <prvInsertTimerInActiveList+0x80>)
  401fa0:	4798      	blx	r3
  401fa2:	e012      	b.n	401fca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401fa4:	687a      	ldr	r2, [r7, #4]
  401fa6:	683b      	ldr	r3, [r7, #0]
  401fa8:	429a      	cmp	r2, r3
  401faa:	d206      	bcs.n	401fba <prvInsertTimerInActiveList+0x62>
  401fac:	68ba      	ldr	r2, [r7, #8]
  401fae:	683b      	ldr	r3, [r7, #0]
  401fb0:	429a      	cmp	r2, r3
  401fb2:	d302      	bcc.n	401fba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401fb4:	2301      	movs	r3, #1
  401fb6:	617b      	str	r3, [r7, #20]
  401fb8:	e007      	b.n	401fca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401fba:	4b08      	ldr	r3, [pc, #32]	; (401fdc <prvInsertTimerInActiveList+0x84>)
  401fbc:	681a      	ldr	r2, [r3, #0]
  401fbe:	68fb      	ldr	r3, [r7, #12]
  401fc0:	3304      	adds	r3, #4
  401fc2:	4619      	mov	r1, r3
  401fc4:	4610      	mov	r0, r2
  401fc6:	4b04      	ldr	r3, [pc, #16]	; (401fd8 <prvInsertTimerInActiveList+0x80>)
  401fc8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  401fca:	697b      	ldr	r3, [r7, #20]
}
  401fcc:	4618      	mov	r0, r3
  401fce:	3718      	adds	r7, #24
  401fd0:	46bd      	mov	sp, r7
  401fd2:	bd80      	pop	{r7, pc}
  401fd4:	2000ab28 	.word	0x2000ab28
  401fd8:	0040020f 	.word	0x0040020f
  401fdc:	2000ab24 	.word	0x2000ab24

00401fe0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  401fe0:	b590      	push	{r4, r7, lr}
  401fe2:	b08b      	sub	sp, #44	; 0x2c
  401fe4:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401fe6:	1d3b      	adds	r3, r7, #4
  401fe8:	4618      	mov	r0, r3
  401fea:	4b38      	ldr	r3, [pc, #224]	; (4020cc <prvProcessReceivedCommands+0xec>)
  401fec:	4798      	blx	r3
  401fee:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  401ff0:	e05d      	b.n	4020ae <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  401ff2:	693b      	ldr	r3, [r7, #16]
  401ff4:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  401ff6:	69bb      	ldr	r3, [r7, #24]
  401ff8:	2b00      	cmp	r3, #0
  401ffa:	d008      	beq.n	40200e <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  401ffc:	69bb      	ldr	r3, [r7, #24]
  401ffe:	695b      	ldr	r3, [r3, #20]
  402000:	2b00      	cmp	r3, #0
  402002:	d004      	beq.n	40200e <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  402004:	69bb      	ldr	r3, [r7, #24]
  402006:	3304      	adds	r3, #4
  402008:	4618      	mov	r0, r3
  40200a:	4b31      	ldr	r3, [pc, #196]	; (4020d0 <prvProcessReceivedCommands+0xf0>)
  40200c:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  40200e:	68bb      	ldr	r3, [r7, #8]
  402010:	2b03      	cmp	r3, #3
  402012:	d84b      	bhi.n	4020ac <prvProcessReceivedCommands+0xcc>
  402014:	a201      	add	r2, pc, #4	; (adr r2, 40201c <prvProcessReceivedCommands+0x3c>)
  402016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40201a:	bf00      	nop
  40201c:	0040202d 	.word	0x0040202d
  402020:	004020af 	.word	0x004020af
  402024:	0040207b 	.word	0x0040207b
  402028:	004020a5 	.word	0x004020a5
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  40202c:	68fa      	ldr	r2, [r7, #12]
  40202e:	69bb      	ldr	r3, [r7, #24]
  402030:	699b      	ldr	r3, [r3, #24]
  402032:	18d1      	adds	r1, r2, r3
  402034:	68fb      	ldr	r3, [r7, #12]
  402036:	69fa      	ldr	r2, [r7, #28]
  402038:	69b8      	ldr	r0, [r7, #24]
  40203a:	4c26      	ldr	r4, [pc, #152]	; (4020d4 <prvProcessReceivedCommands+0xf4>)
  40203c:	47a0      	blx	r4
  40203e:	4603      	mov	r3, r0
  402040:	2b01      	cmp	r3, #1
  402042:	d134      	bne.n	4020ae <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402044:	69bb      	ldr	r3, [r7, #24]
  402046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402048:	69b8      	ldr	r0, [r7, #24]
  40204a:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40204c:	69bb      	ldr	r3, [r7, #24]
  40204e:	69db      	ldr	r3, [r3, #28]
  402050:	2b01      	cmp	r3, #1
  402052:	d12c      	bne.n	4020ae <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402054:	68fa      	ldr	r2, [r7, #12]
  402056:	69bb      	ldr	r3, [r7, #24]
  402058:	699b      	ldr	r3, [r3, #24]
  40205a:	441a      	add	r2, r3
  40205c:	2300      	movs	r3, #0
  40205e:	9300      	str	r3, [sp, #0]
  402060:	2300      	movs	r3, #0
  402062:	2100      	movs	r1, #0
  402064:	69b8      	ldr	r0, [r7, #24]
  402066:	4c1c      	ldr	r4, [pc, #112]	; (4020d8 <prvProcessReceivedCommands+0xf8>)
  402068:	47a0      	blx	r4
  40206a:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  40206c:	697b      	ldr	r3, [r7, #20]
  40206e:	2b00      	cmp	r3, #0
  402070:	d11d      	bne.n	4020ae <prvProcessReceivedCommands+0xce>
  402072:	4b1a      	ldr	r3, [pc, #104]	; (4020dc <prvProcessReceivedCommands+0xfc>)
  402074:	4798      	blx	r3
  402076:	bf00      	nop
  402078:	e7fd      	b.n	402076 <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  40207a:	68fa      	ldr	r2, [r7, #12]
  40207c:	69bb      	ldr	r3, [r7, #24]
  40207e:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402080:	69bb      	ldr	r3, [r7, #24]
  402082:	699b      	ldr	r3, [r3, #24]
  402084:	2b00      	cmp	r3, #0
  402086:	d103      	bne.n	402090 <prvProcessReceivedCommands+0xb0>
  402088:	4b14      	ldr	r3, [pc, #80]	; (4020dc <prvProcessReceivedCommands+0xfc>)
  40208a:	4798      	blx	r3
  40208c:	bf00      	nop
  40208e:	e7fd      	b.n	40208c <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402090:	69bb      	ldr	r3, [r7, #24]
  402092:	699a      	ldr	r2, [r3, #24]
  402094:	69fb      	ldr	r3, [r7, #28]
  402096:	18d1      	adds	r1, r2, r3
  402098:	69fb      	ldr	r3, [r7, #28]
  40209a:	69fa      	ldr	r2, [r7, #28]
  40209c:	69b8      	ldr	r0, [r7, #24]
  40209e:	4c0d      	ldr	r4, [pc, #52]	; (4020d4 <prvProcessReceivedCommands+0xf4>)
  4020a0:	47a0      	blx	r4
				break;
  4020a2:	e004      	b.n	4020ae <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  4020a4:	69b8      	ldr	r0, [r7, #24]
  4020a6:	4b0e      	ldr	r3, [pc, #56]	; (4020e0 <prvProcessReceivedCommands+0x100>)
  4020a8:	4798      	blx	r3
				break;
  4020aa:	e000      	b.n	4020ae <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  4020ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4020ae:	4b0d      	ldr	r3, [pc, #52]	; (4020e4 <prvProcessReceivedCommands+0x104>)
  4020b0:	6818      	ldr	r0, [r3, #0]
  4020b2:	f107 0108 	add.w	r1, r7, #8
  4020b6:	2300      	movs	r3, #0
  4020b8:	2200      	movs	r2, #0
  4020ba:	4c0b      	ldr	r4, [pc, #44]	; (4020e8 <prvProcessReceivedCommands+0x108>)
  4020bc:	47a0      	blx	r4
  4020be:	4603      	mov	r3, r0
  4020c0:	2b00      	cmp	r3, #0
  4020c2:	d196      	bne.n	401ff2 <prvProcessReceivedCommands+0x12>
		}
	}
}
  4020c4:	bf00      	nop
  4020c6:	3724      	adds	r7, #36	; 0x24
  4020c8:	46bd      	mov	sp, r7
  4020ca:	bd90      	pop	{r4, r7, pc}
  4020cc:	00401f0d 	.word	0x00401f0d
  4020d0:	00400281 	.word	0x00400281
  4020d4:	00401f59 	.word	0x00401f59
  4020d8:	00401d01 	.word	0x00401d01
  4020dc:	004004c9 	.word	0x004004c9
  4020e0:	004006ad 	.word	0x004006ad
  4020e4:	2000ab2c 	.word	0x2000ab2c
  4020e8:	00400bc9 	.word	0x00400bc9

004020ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  4020ec:	b590      	push	{r4, r7, lr}
  4020ee:	b08b      	sub	sp, #44	; 0x2c
  4020f0:	af02      	add	r7, sp, #8
  4020f2:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4020f4:	e03e      	b.n	402174 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4020f6:	4b29      	ldr	r3, [pc, #164]	; (40219c <prvSwitchTimerLists+0xb0>)
  4020f8:	681b      	ldr	r3, [r3, #0]
  4020fa:	68db      	ldr	r3, [r3, #12]
  4020fc:	681b      	ldr	r3, [r3, #0]
  4020fe:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402100:	4b26      	ldr	r3, [pc, #152]	; (40219c <prvSwitchTimerLists+0xb0>)
  402102:	681b      	ldr	r3, [r3, #0]
  402104:	68db      	ldr	r3, [r3, #12]
  402106:	68db      	ldr	r3, [r3, #12]
  402108:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  40210a:	69bb      	ldr	r3, [r7, #24]
  40210c:	3304      	adds	r3, #4
  40210e:	4618      	mov	r0, r3
  402110:	4b23      	ldr	r3, [pc, #140]	; (4021a0 <prvSwitchTimerLists+0xb4>)
  402112:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402114:	69bb      	ldr	r3, [r7, #24]
  402116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402118:	69b8      	ldr	r0, [r7, #24]
  40211a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40211c:	69bb      	ldr	r3, [r7, #24]
  40211e:	69db      	ldr	r3, [r3, #28]
  402120:	2b01      	cmp	r3, #1
  402122:	d127      	bne.n	402174 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402124:	69bb      	ldr	r3, [r7, #24]
  402126:	699a      	ldr	r2, [r3, #24]
  402128:	69fb      	ldr	r3, [r7, #28]
  40212a:	4413      	add	r3, r2
  40212c:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  40212e:	697a      	ldr	r2, [r7, #20]
  402130:	69fb      	ldr	r3, [r7, #28]
  402132:	429a      	cmp	r2, r3
  402134:	d90e      	bls.n	402154 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402136:	69bb      	ldr	r3, [r7, #24]
  402138:	697a      	ldr	r2, [r7, #20]
  40213a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40213c:	69bb      	ldr	r3, [r7, #24]
  40213e:	69ba      	ldr	r2, [r7, #24]
  402140:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402142:	4b16      	ldr	r3, [pc, #88]	; (40219c <prvSwitchTimerLists+0xb0>)
  402144:	681a      	ldr	r2, [r3, #0]
  402146:	69bb      	ldr	r3, [r7, #24]
  402148:	3304      	adds	r3, #4
  40214a:	4619      	mov	r1, r3
  40214c:	4610      	mov	r0, r2
  40214e:	4b15      	ldr	r3, [pc, #84]	; (4021a4 <prvSwitchTimerLists+0xb8>)
  402150:	4798      	blx	r3
  402152:	e00f      	b.n	402174 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  402154:	2300      	movs	r3, #0
  402156:	9300      	str	r3, [sp, #0]
  402158:	2300      	movs	r3, #0
  40215a:	69fa      	ldr	r2, [r7, #28]
  40215c:	2100      	movs	r1, #0
  40215e:	69b8      	ldr	r0, [r7, #24]
  402160:	4c11      	ldr	r4, [pc, #68]	; (4021a8 <prvSwitchTimerLists+0xbc>)
  402162:	47a0      	blx	r4
  402164:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  402166:	693b      	ldr	r3, [r7, #16]
  402168:	2b00      	cmp	r3, #0
  40216a:	d103      	bne.n	402174 <prvSwitchTimerLists+0x88>
  40216c:	4b0f      	ldr	r3, [pc, #60]	; (4021ac <prvSwitchTimerLists+0xc0>)
  40216e:	4798      	blx	r3
  402170:	bf00      	nop
  402172:	e7fd      	b.n	402170 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402174:	4b09      	ldr	r3, [pc, #36]	; (40219c <prvSwitchTimerLists+0xb0>)
  402176:	681b      	ldr	r3, [r3, #0]
  402178:	681b      	ldr	r3, [r3, #0]
  40217a:	2b00      	cmp	r3, #0
  40217c:	d1bb      	bne.n	4020f6 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  40217e:	4b07      	ldr	r3, [pc, #28]	; (40219c <prvSwitchTimerLists+0xb0>)
  402180:	681b      	ldr	r3, [r3, #0]
  402182:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  402184:	4b0a      	ldr	r3, [pc, #40]	; (4021b0 <prvSwitchTimerLists+0xc4>)
  402186:	681b      	ldr	r3, [r3, #0]
  402188:	4a04      	ldr	r2, [pc, #16]	; (40219c <prvSwitchTimerLists+0xb0>)
  40218a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  40218c:	4a08      	ldr	r2, [pc, #32]	; (4021b0 <prvSwitchTimerLists+0xc4>)
  40218e:	68fb      	ldr	r3, [r7, #12]
  402190:	6013      	str	r3, [r2, #0]
}
  402192:	bf00      	nop
  402194:	3724      	adds	r7, #36	; 0x24
  402196:	46bd      	mov	sp, r7
  402198:	bd90      	pop	{r4, r7, pc}
  40219a:	bf00      	nop
  40219c:	2000ab24 	.word	0x2000ab24
  4021a0:	00400281 	.word	0x00400281
  4021a4:	0040020f 	.word	0x0040020f
  4021a8:	00401d01 	.word	0x00401d01
  4021ac:	004004c9 	.word	0x004004c9
  4021b0:	2000ab28 	.word	0x2000ab28

004021b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4021b4:	b580      	push	{r7, lr}
  4021b6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4021b8:	4b0e      	ldr	r3, [pc, #56]	; (4021f4 <prvCheckForValidListAndQueue+0x40>)
  4021ba:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4021bc:	4b0e      	ldr	r3, [pc, #56]	; (4021f8 <prvCheckForValidListAndQueue+0x44>)
  4021be:	681b      	ldr	r3, [r3, #0]
  4021c0:	2b00      	cmp	r3, #0
  4021c2:	d113      	bne.n	4021ec <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  4021c4:	480d      	ldr	r0, [pc, #52]	; (4021fc <prvCheckForValidListAndQueue+0x48>)
  4021c6:	4b0e      	ldr	r3, [pc, #56]	; (402200 <prvCheckForValidListAndQueue+0x4c>)
  4021c8:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  4021ca:	480e      	ldr	r0, [pc, #56]	; (402204 <prvCheckForValidListAndQueue+0x50>)
  4021cc:	4b0c      	ldr	r3, [pc, #48]	; (402200 <prvCheckForValidListAndQueue+0x4c>)
  4021ce:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  4021d0:	4b0d      	ldr	r3, [pc, #52]	; (402208 <prvCheckForValidListAndQueue+0x54>)
  4021d2:	4a0a      	ldr	r2, [pc, #40]	; (4021fc <prvCheckForValidListAndQueue+0x48>)
  4021d4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4021d6:	4b0d      	ldr	r3, [pc, #52]	; (40220c <prvCheckForValidListAndQueue+0x58>)
  4021d8:	4a0a      	ldr	r2, [pc, #40]	; (402204 <prvCheckForValidListAndQueue+0x50>)
  4021da:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  4021dc:	2200      	movs	r2, #0
  4021de:	210c      	movs	r1, #12
  4021e0:	2005      	movs	r0, #5
  4021e2:	4b0b      	ldr	r3, [pc, #44]	; (402210 <prvCheckForValidListAndQueue+0x5c>)
  4021e4:	4798      	blx	r3
  4021e6:	4602      	mov	r2, r0
  4021e8:	4b03      	ldr	r3, [pc, #12]	; (4021f8 <prvCheckForValidListAndQueue+0x44>)
  4021ea:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  4021ec:	4b09      	ldr	r3, [pc, #36]	; (402214 <prvCheckForValidListAndQueue+0x60>)
  4021ee:	4798      	blx	r3
}
  4021f0:	bf00      	nop
  4021f2:	bd80      	pop	{r7, pc}
  4021f4:	00400481 	.word	0x00400481
  4021f8:	2000ab2c 	.word	0x2000ab2c
  4021fc:	2000aafc 	.word	0x2000aafc
  402200:	00400165 	.word	0x00400165
  402204:	2000ab10 	.word	0x2000ab10
  402208:	2000ab24 	.word	0x2000ab24
  40220c:	2000ab28 	.word	0x2000ab28
  402210:	0040090d 	.word	0x0040090d
  402214:	004004a1 	.word	0x004004a1

00402218 <osc_get_rate>:
{
  402218:	b480      	push	{r7}
  40221a:	b083      	sub	sp, #12
  40221c:	af00      	add	r7, sp, #0
  40221e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402220:	687b      	ldr	r3, [r7, #4]
  402222:	2b07      	cmp	r3, #7
  402224:	d825      	bhi.n	402272 <osc_get_rate+0x5a>
  402226:	a201      	add	r2, pc, #4	; (adr r2, 40222c <osc_get_rate+0x14>)
  402228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40222c:	0040224d 	.word	0x0040224d
  402230:	00402253 	.word	0x00402253
  402234:	00402259 	.word	0x00402259
  402238:	0040225f 	.word	0x0040225f
  40223c:	00402263 	.word	0x00402263
  402240:	00402267 	.word	0x00402267
  402244:	0040226b 	.word	0x0040226b
  402248:	0040226f 	.word	0x0040226f
		return OSC_SLCK_32K_RC_HZ;
  40224c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402250:	e010      	b.n	402274 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402256:	e00d      	b.n	402274 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40225c:	e00a      	b.n	402274 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40225e:	4b08      	ldr	r3, [pc, #32]	; (402280 <osc_get_rate+0x68>)
  402260:	e008      	b.n	402274 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402262:	4b08      	ldr	r3, [pc, #32]	; (402284 <osc_get_rate+0x6c>)
  402264:	e006      	b.n	402274 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402266:	4b08      	ldr	r3, [pc, #32]	; (402288 <osc_get_rate+0x70>)
  402268:	e004      	b.n	402274 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40226a:	4b07      	ldr	r3, [pc, #28]	; (402288 <osc_get_rate+0x70>)
  40226c:	e002      	b.n	402274 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40226e:	4b06      	ldr	r3, [pc, #24]	; (402288 <osc_get_rate+0x70>)
  402270:	e000      	b.n	402274 <osc_get_rate+0x5c>
	return 0;
  402272:	2300      	movs	r3, #0
}
  402274:	4618      	mov	r0, r3
  402276:	370c      	adds	r7, #12
  402278:	46bd      	mov	sp, r7
  40227a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40227e:	4770      	bx	lr
  402280:	003d0900 	.word	0x003d0900
  402284:	007a1200 	.word	0x007a1200
  402288:	00b71b00 	.word	0x00b71b00

0040228c <sysclk_get_main_hz>:
{
  40228c:	b580      	push	{r7, lr}
  40228e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402290:	2006      	movs	r0, #6
  402292:	4b03      	ldr	r3, [pc, #12]	; (4022a0 <sysclk_get_main_hz+0x14>)
  402294:	4798      	blx	r3
  402296:	4603      	mov	r3, r0
  402298:	011b      	lsls	r3, r3, #4
}
  40229a:	4618      	mov	r0, r3
  40229c:	bd80      	pop	{r7, pc}
  40229e:	bf00      	nop
  4022a0:	00402219 	.word	0x00402219

004022a4 <sysclk_get_cpu_hz>:
{
  4022a4:	b580      	push	{r7, lr}
  4022a6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4022a8:	4b02      	ldr	r3, [pc, #8]	; (4022b4 <sysclk_get_cpu_hz+0x10>)
  4022aa:	4798      	blx	r3
  4022ac:	4603      	mov	r3, r0
  4022ae:	085b      	lsrs	r3, r3, #1
}
  4022b0:	4618      	mov	r0, r3
  4022b2:	bd80      	pop	{r7, pc}
  4022b4:	0040228d 	.word	0x0040228d

004022b8 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4022b8:	b580      	push	{r7, lr}
  4022ba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4022bc:	4b02      	ldr	r3, [pc, #8]	; (4022c8 <sysclk_get_peripheral_hz+0x10>)
  4022be:	4798      	blx	r3
  4022c0:	4603      	mov	r3, r0
  4022c2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4022c4:	4618      	mov	r0, r3
  4022c6:	bd80      	pop	{r7, pc}
  4022c8:	0040228d 	.word	0x0040228d

004022cc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4022cc:	b580      	push	{r7, lr}
  4022ce:	b082      	sub	sp, #8
  4022d0:	af00      	add	r7, sp, #0
  4022d2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4022d4:	6878      	ldr	r0, [r7, #4]
  4022d6:	4b03      	ldr	r3, [pc, #12]	; (4022e4 <sysclk_enable_peripheral_clock+0x18>)
  4022d8:	4798      	blx	r3
}
  4022da:	bf00      	nop
  4022dc:	3708      	adds	r7, #8
  4022de:	46bd      	mov	sp, r7
  4022e0:	bd80      	pop	{r7, pc}
  4022e2:	bf00      	nop
  4022e4:	00406191 	.word	0x00406191

004022e8 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
  4022e8:	b580      	push	{r7, lr}
  4022ea:	b082      	sub	sp, #8
  4022ec:	af00      	add	r7, sp, #0
  4022ee:	6078      	str	r0, [r7, #4]
  4022f0:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4022f2:	4b10      	ldr	r3, [pc, #64]	; (402334 <twi_master_setup+0x4c>)
  4022f4:	4798      	blx	r3
  4022f6:	4602      	mov	r2, r0
  4022f8:	683b      	ldr	r3, [r7, #0]
  4022fa:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
  4022fc:	683b      	ldr	r3, [r7, #0]
  4022fe:	2200      	movs	r2, #0
  402300:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
  402302:	687b      	ldr	r3, [r7, #4]
  402304:	4a0c      	ldr	r2, [pc, #48]	; (402338 <twi_master_setup+0x50>)
  402306:	4293      	cmp	r3, r2
  402308:	d103      	bne.n	402312 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
  40230a:	2011      	movs	r0, #17
  40230c:	4b0b      	ldr	r3, [pc, #44]	; (40233c <twi_master_setup+0x54>)
  40230e:	4798      	blx	r3
  402310:	e006      	b.n	402320 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
  402312:	687b      	ldr	r3, [r7, #4]
  402314:	4a0a      	ldr	r2, [pc, #40]	; (402340 <twi_master_setup+0x58>)
  402316:	4293      	cmp	r3, r2
  402318:	d102      	bne.n	402320 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
  40231a:	2012      	movs	r0, #18
  40231c:	4b07      	ldr	r3, [pc, #28]	; (40233c <twi_master_setup+0x54>)
  40231e:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
  402320:	6839      	ldr	r1, [r7, #0]
  402322:	6878      	ldr	r0, [r7, #4]
  402324:	4b07      	ldr	r3, [pc, #28]	; (402344 <twi_master_setup+0x5c>)
  402326:	4798      	blx	r3
  402328:	4603      	mov	r3, r0
}
  40232a:	4618      	mov	r0, r3
  40232c:	3708      	adds	r7, #8
  40232e:	46bd      	mov	sp, r7
  402330:	bd80      	pop	{r7, pc}
  402332:	bf00      	nop
  402334:	004022b9 	.word	0x004022b9
  402338:	400a8000 	.word	0x400a8000
  40233c:	004022cd 	.word	0x004022cd
  402340:	400ac000 	.word	0x400ac000
  402344:	0040623d 	.word	0x0040623d

00402348 <bsp_hw_init>:
static void m_bsp_i2c_init(void);
static void m_bsp_sdcard_init(void);

/* Function definitions ----------------------------------------------- */
void bsp_hw_init(void)
{
  402348:	b580      	push	{r7, lr}
  40234a:	af00      	add	r7, sp, #0
  m_bsp_i2c_init();
  40234c:	4b04      	ldr	r3, [pc, #16]	; (402360 <bsp_hw_init+0x18>)
  40234e:	4798      	blx	r3
  bsp_rtc_init();
  402350:	4b04      	ldr	r3, [pc, #16]	; (402364 <bsp_hw_init+0x1c>)
  402352:	4798      	blx	r3
  m_bsp_sdcard_init();
  402354:	4b04      	ldr	r3, [pc, #16]	; (402368 <bsp_hw_init+0x20>)
  402356:	4798      	blx	r3
  bsp_gpio_init();
  402358:	4b04      	ldr	r3, [pc, #16]	; (40236c <bsp_hw_init+0x24>)
  40235a:	4798      	blx	r3
}
  40235c:	bf00      	nop
  40235e:	bd80      	pop	{r7, pc}
  402360:	00402469 	.word	0x00402469
  402364:	00402ae5 	.word	0x00402ae5
  402368:	0040249d 	.word	0x0040249d
  40236c:	00402721 	.word	0x00402721

00402370 <bsp_i2c_write>:

int bsp_i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t *p_data, uint32_t len)
{
  402370:	b580      	push	{r7, lr}
  402372:	b08a      	sub	sp, #40	; 0x28
  402374:	af00      	add	r7, sp, #0
  402376:	60ba      	str	r2, [r7, #8]
  402378:	607b      	str	r3, [r7, #4]
  40237a:	4603      	mov	r3, r0
  40237c:	73fb      	strb	r3, [r7, #15]
  40237e:	460b      	mov	r3, r1
  402380:	73bb      	strb	r3, [r7, #14]
  twi_package_t packet_write;

  packet_write.chip        = slave_addr;        // TWI slave bus address
  402382:	7bfb      	ldrb	r3, [r7, #15]
  402384:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  packet_write.addr[0]     = reg_addr;          // TWI slave memory address data
  402388:	7bbb      	ldrb	r3, [r7, #14]
  40238a:	753b      	strb	r3, [r7, #20]
  packet_write.addr_length = sizeof(reg_addr);  // TWI slave memory address data size
  40238c:	2301      	movs	r3, #1
  40238e:	61bb      	str	r3, [r7, #24]
  packet_write.buffer      = (void *)p_data;    // Transfer data source buffer
  402390:	68bb      	ldr	r3, [r7, #8]
  402392:	61fb      	str	r3, [r7, #28]
  packet_write.length      = len;               // Transfer data size (bytes)
  402394:	687b      	ldr	r3, [r7, #4]
  402396:	623b      	str	r3, [r7, #32]

  return twi_master_write(TWI0, &packet_write);
  402398:	f107 0314 	add.w	r3, r7, #20
  40239c:	4619      	mov	r1, r3
  40239e:	4804      	ldr	r0, [pc, #16]	; (4023b0 <bsp_i2c_write+0x40>)
  4023a0:	4b04      	ldr	r3, [pc, #16]	; (4023b4 <bsp_i2c_write+0x44>)
  4023a2:	4798      	blx	r3
  4023a4:	4603      	mov	r3, r0
}
  4023a6:	4618      	mov	r0, r3
  4023a8:	3728      	adds	r7, #40	; 0x28
  4023aa:	46bd      	mov	sp, r7
  4023ac:	bd80      	pop	{r7, pc}
  4023ae:	bf00      	nop
  4023b0:	400a8000 	.word	0x400a8000
  4023b4:	004063f1 	.word	0x004063f1

004023b8 <bsp_delay>:

void bsp_delay(uint32_t ms)
{
  4023b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4023ba:	b083      	sub	sp, #12
  4023bc:	af00      	add	r7, sp, #0
  4023be:	6078      	str	r0, [r7, #4]
  delay_ms(ms);
  4023c0:	687b      	ldr	r3, [r7, #4]
  4023c2:	2b00      	cmp	r3, #0
  4023c4:	d026      	beq.n	402414 <bsp_delay+0x5c>
  4023c6:	687b      	ldr	r3, [r7, #4]
  4023c8:	461d      	mov	r5, r3
  4023ca:	f04f 0600 	mov.w	r6, #0
  4023ce:	4b22      	ldr	r3, [pc, #136]	; (402458 <bsp_delay+0xa0>)
  4023d0:	4798      	blx	r3
  4023d2:	4603      	mov	r3, r0
  4023d4:	f04f 0400 	mov.w	r4, #0
  4023d8:	fb03 f106 	mul.w	r1, r3, r6
  4023dc:	fb05 f204 	mul.w	r2, r5, r4
  4023e0:	440a      	add	r2, r1
  4023e2:	fba5 3403 	umull	r3, r4, r5, r3
  4023e6:	4422      	add	r2, r4
  4023e8:	4614      	mov	r4, r2
  4023ea:	f243 61af 	movw	r1, #13999	; 0x36af
  4023ee:	f04f 0200 	mov.w	r2, #0
  4023f2:	185d      	adds	r5, r3, r1
  4023f4:	eb44 0602 	adc.w	r6, r4, r2
  4023f8:	4628      	mov	r0, r5
  4023fa:	4631      	mov	r1, r6
  4023fc:	4c17      	ldr	r4, [pc, #92]	; (40245c <bsp_delay+0xa4>)
  4023fe:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402402:	f04f 0300 	mov.w	r3, #0
  402406:	47a0      	blx	r4
  402408:	4603      	mov	r3, r0
  40240a:	460c      	mov	r4, r1
  40240c:	4618      	mov	r0, r3
  40240e:	4b14      	ldr	r3, [pc, #80]	; (402460 <bsp_delay+0xa8>)
  402410:	4798      	blx	r3
}
  402412:	e016      	b.n	402442 <bsp_delay+0x8a>
  delay_ms(ms);
  402414:	4b10      	ldr	r3, [pc, #64]	; (402458 <bsp_delay+0xa0>)
  402416:	4798      	blx	r3
  402418:	4603      	mov	r3, r0
  40241a:	f04f 0400 	mov.w	r4, #0
  40241e:	a20c      	add	r2, pc, #48	; (adr r2, 402450 <bsp_delay+0x98>)
  402420:	e9d2 1200 	ldrd	r1, r2, [r2]
  402424:	185d      	adds	r5, r3, r1
  402426:	eb44 0602 	adc.w	r6, r4, r2
  40242a:	4628      	mov	r0, r5
  40242c:	4631      	mov	r1, r6
  40242e:	4c0b      	ldr	r4, [pc, #44]	; (40245c <bsp_delay+0xa4>)
  402430:	4a0c      	ldr	r2, [pc, #48]	; (402464 <bsp_delay+0xac>)
  402432:	f04f 0300 	mov.w	r3, #0
  402436:	47a0      	blx	r4
  402438:	4603      	mov	r3, r0
  40243a:	460c      	mov	r4, r1
  40243c:	4618      	mov	r0, r3
  40243e:	4b08      	ldr	r3, [pc, #32]	; (402460 <bsp_delay+0xa8>)
  402440:	4798      	blx	r3
}
  402442:	bf00      	nop
  402444:	370c      	adds	r7, #12
  402446:	46bd      	mov	sp, r7
  402448:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40244a:	bf00      	nop
  40244c:	f3af 8000 	nop.w
  402450:	00d59f7f 	.word	0x00d59f7f
  402454:	00000000 	.word	0x00000000
  402458:	004022a5 	.word	0x004022a5
  40245c:	004064ed 	.word	0x004064ed
  402460:	20000001 	.word	0x20000001
  402464:	00d59f80 	.word	0x00d59f80

00402468 <m_bsp_i2c_init>:
/* Private function definitions ---------------------------------------- */
/**
 * @brief I2C init
 */
static void m_bsp_i2c_init(void)
{
  402468:	b580      	push	{r7, lr}
  40246a:	b084      	sub	sp, #16
  40246c:	af00      	add	r7, sp, #0
  twi_master_options_t opt = {
  40246e:	1d3b      	adds	r3, r7, #4
  402470:	2200      	movs	r2, #0
  402472:	601a      	str	r2, [r3, #0]
  402474:	605a      	str	r2, [r3, #4]
  402476:	609a      	str	r2, [r3, #8]
  402478:	4b05      	ldr	r3, [pc, #20]	; (402490 <m_bsp_i2c_init+0x28>)
  40247a:	60bb      	str	r3, [r7, #8]
      .speed = 100000
  };

  twi_master_setup(TWI0, &opt);
  40247c:	1d3b      	adds	r3, r7, #4
  40247e:	4619      	mov	r1, r3
  402480:	4804      	ldr	r0, [pc, #16]	; (402494 <m_bsp_i2c_init+0x2c>)
  402482:	4b05      	ldr	r3, [pc, #20]	; (402498 <m_bsp_i2c_init+0x30>)
  402484:	4798      	blx	r3
}
  402486:	bf00      	nop
  402488:	3710      	adds	r7, #16
  40248a:	46bd      	mov	sp, r7
  40248c:	bd80      	pop	{r7, pc}
  40248e:	bf00      	nop
  402490:	000186a0 	.word	0x000186a0
  402494:	400a8000 	.word	0x400a8000
  402498:	004022e9 	.word	0x004022e9

0040249c <m_bsp_sdcard_init>:

/**
 * @brief Sdcard init
 */
static void m_bsp_sdcard_init(void)
{
  40249c:	b580      	push	{r7, lr}
  40249e:	b082      	sub	sp, #8
  4024a0:	af00      	add	r7, sp, #0
  Ctrl_status status;

  // Enable PIOA clock to detect Card Detect (CD) change
  sysclk_enable_peripheral_clock(ID_PIOA);
  4024a2:	2009      	movs	r0, #9
  4024a4:	4b10      	ldr	r3, [pc, #64]	; (4024e8 <m_bsp_sdcard_init+0x4c>)
  4024a6:	4798      	blx	r3

  // Configure SD card pins as per MCI peripheral (periph C)
  pio_set_peripheral(PIOA, PIO_PERIPH_C, PIO_PA30C_MCDA0 | // MCI Data 0
  4024a8:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
  4024ac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4024b0:	480e      	ldr	r0, [pc, #56]	; (4024ec <m_bsp_sdcard_init+0x50>)
  4024b2:	4b0f      	ldr	r3, [pc, #60]	; (4024f0 <m_bsp_sdcard_init+0x54>)
  4024b4:	4798      	blx	r3
                                         PIO_PA27C_MCDA3 | // MCI Data 3
                                         PIO_PA28C_MCCDA | // MCI Command
                                         PIO_PA29C_MCCK);  // MCI Clock

  // Initialize SD MMC stack
  sd_mmc_init();
  4024b6:	4b0f      	ldr	r3, [pc, #60]	; (4024f4 <m_bsp_sdcard_init+0x58>)
  4024b8:	4798      	blx	r3

  //  Wait until SD stack initialized and SD card inserted
  do
  {
    // Check if stack ready
    status = sd_mmc_test_unit_ready(0);
  4024ba:	2000      	movs	r0, #0
  4024bc:	4b0e      	ldr	r3, [pc, #56]	; (4024f8 <m_bsp_sdcard_init+0x5c>)
  4024be:	4798      	blx	r3
  4024c0:	4603      	mov	r3, r0
  4024c2:	71fb      	strb	r3, [r7, #7]
    if (status == CTRL_FAIL)
  4024c4:	79fb      	ldrb	r3, [r7, #7]
  4024c6:	2b01      	cmp	r3, #1
  4024c8:	d106      	bne.n	4024d8 <m_bsp_sdcard_init+0x3c>
    {
      // Wait for a card to be inserted
      while (sd_mmc_check(0) != CTRL_NO_PRESENT)
  4024ca:	bf00      	nop
  4024cc:	2000      	movs	r0, #0
  4024ce:	4b0b      	ldr	r3, [pc, #44]	; (4024fc <m_bsp_sdcard_init+0x60>)
  4024d0:	4798      	blx	r3
  4024d2:	4603      	mov	r3, r0
  4024d4:	2b02      	cmp	r3, #2
  4024d6:	d1f9      	bne.n	4024cc <m_bsp_sdcard_init+0x30>
      {
        // Use a timeout here for real projects.
      }
    }
  } while (status != CTRL_GOOD);
  4024d8:	79fb      	ldrb	r3, [r7, #7]
  4024da:	2b00      	cmp	r3, #0
  4024dc:	d1ed      	bne.n	4024ba <m_bsp_sdcard_init+0x1e>
}
  4024de:	bf00      	nop
  4024e0:	3708      	adds	r7, #8
  4024e2:	46bd      	mov	sp, r7
  4024e4:	bd80      	pop	{r7, pc}
  4024e6:	bf00      	nop
  4024e8:	004022cd 	.word	0x004022cd
  4024ec:	400e0e00 	.word	0x400e0e00
  4024f0:	00405cff 	.word	0x00405cff
  4024f4:	00403f51 	.word	0x00403f51
  4024f8:	00404035 	.word	0x00404035
  4024fc:	00403f95 	.word	0x00403f95

00402500 <osc_get_rate>:
{
  402500:	b480      	push	{r7}
  402502:	b083      	sub	sp, #12
  402504:	af00      	add	r7, sp, #0
  402506:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402508:	687b      	ldr	r3, [r7, #4]
  40250a:	2b07      	cmp	r3, #7
  40250c:	d825      	bhi.n	40255a <osc_get_rate+0x5a>
  40250e:	a201      	add	r2, pc, #4	; (adr r2, 402514 <osc_get_rate+0x14>)
  402510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402514:	00402535 	.word	0x00402535
  402518:	0040253b 	.word	0x0040253b
  40251c:	00402541 	.word	0x00402541
  402520:	00402547 	.word	0x00402547
  402524:	0040254b 	.word	0x0040254b
  402528:	0040254f 	.word	0x0040254f
  40252c:	00402553 	.word	0x00402553
  402530:	00402557 	.word	0x00402557
		return OSC_SLCK_32K_RC_HZ;
  402534:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402538:	e010      	b.n	40255c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40253a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40253e:	e00d      	b.n	40255c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402544:	e00a      	b.n	40255c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402546:	4b08      	ldr	r3, [pc, #32]	; (402568 <osc_get_rate+0x68>)
  402548:	e008      	b.n	40255c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40254a:	4b08      	ldr	r3, [pc, #32]	; (40256c <osc_get_rate+0x6c>)
  40254c:	e006      	b.n	40255c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40254e:	4b08      	ldr	r3, [pc, #32]	; (402570 <osc_get_rate+0x70>)
  402550:	e004      	b.n	40255c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402552:	4b07      	ldr	r3, [pc, #28]	; (402570 <osc_get_rate+0x70>)
  402554:	e002      	b.n	40255c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402556:	4b06      	ldr	r3, [pc, #24]	; (402570 <osc_get_rate+0x70>)
  402558:	e000      	b.n	40255c <osc_get_rate+0x5c>
	return 0;
  40255a:	2300      	movs	r3, #0
}
  40255c:	4618      	mov	r0, r3
  40255e:	370c      	adds	r7, #12
  402560:	46bd      	mov	sp, r7
  402562:	f85d 7b04 	ldr.w	r7, [sp], #4
  402566:	4770      	bx	lr
  402568:	003d0900 	.word	0x003d0900
  40256c:	007a1200 	.word	0x007a1200
  402570:	00b71b00 	.word	0x00b71b00

00402574 <sysclk_get_main_hz>:
{
  402574:	b580      	push	{r7, lr}
  402576:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402578:	2006      	movs	r0, #6
  40257a:	4b03      	ldr	r3, [pc, #12]	; (402588 <sysclk_get_main_hz+0x14>)
  40257c:	4798      	blx	r3
  40257e:	4603      	mov	r3, r0
  402580:	011b      	lsls	r3, r3, #4
}
  402582:	4618      	mov	r0, r3
  402584:	bd80      	pop	{r7, pc}
  402586:	bf00      	nop
  402588:	00402501 	.word	0x00402501

0040258c <sysclk_get_cpu_hz>:
{
  40258c:	b580      	push	{r7, lr}
  40258e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402590:	4b02      	ldr	r3, [pc, #8]	; (40259c <sysclk_get_cpu_hz+0x10>)
  402592:	4798      	blx	r3
  402594:	4603      	mov	r3, r0
  402596:	085b      	lsrs	r3, r3, #1
}
  402598:	4618      	mov	r0, r3
  40259a:	bd80      	pop	{r7, pc}
  40259c:	00402575 	.word	0x00402575

004025a0 <bsp_can_init>:
can_mb_conf_t m_can1_mailbox;

/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
void bsp_can_init(void)
{
  4025a0:	b580      	push	{r7, lr}
  4025a2:	b082      	sub	sp, #8
  4025a4:	af00      	add	r7, sp, #0
  uint32_t ul_sysclk = sysclk_get_cpu_hz();
  4025a6:	4b1b      	ldr	r3, [pc, #108]	; (402614 <bsp_can_init+0x74>)
  4025a8:	4798      	blx	r3
  4025aa:	6078      	str	r0, [r7, #4]

  pmc_enable_periph_clk(ID_CAN1);
  4025ac:	2026      	movs	r0, #38	; 0x26
  4025ae:	4b1a      	ldr	r3, [pc, #104]	; (402618 <bsp_can_init+0x78>)
  4025b0:	4798      	blx	r3

  can_init(CAN1, ul_sysclk, CAN_BPS_250K);
  4025b2:	22fa      	movs	r2, #250	; 0xfa
  4025b4:	6879      	ldr	r1, [r7, #4]
  4025b6:	4819      	ldr	r0, [pc, #100]	; (40261c <bsp_can_init+0x7c>)
  4025b8:	4b19      	ldr	r3, [pc, #100]	; (402620 <bsp_can_init+0x80>)
  4025ba:	4798      	blx	r3
  can_reset_all_mailbox(CAN1);
  4025bc:	4817      	ldr	r0, [pc, #92]	; (40261c <bsp_can_init+0x7c>)
  4025be:	4b19      	ldr	r3, [pc, #100]	; (402624 <bsp_can_init+0x84>)
  4025c0:	4798      	blx	r3

  m_can1_mailbox.ul_mb_idx   = 0;
  4025c2:	4b19      	ldr	r3, [pc, #100]	; (402628 <bsp_can_init+0x88>)
  4025c4:	2200      	movs	r2, #0
  4025c6:	601a      	str	r2, [r3, #0]
  m_can1_mailbox.uc_obj_type = CAN_MB_TX_MODE;
  4025c8:	4b17      	ldr	r3, [pc, #92]	; (402628 <bsp_can_init+0x88>)
  4025ca:	2203      	movs	r2, #3
  4025cc:	711a      	strb	r2, [r3, #4]
  m_can1_mailbox.uc_tx_prio  = 15;
  4025ce:	4b16      	ldr	r3, [pc, #88]	; (402628 <bsp_can_init+0x88>)
  4025d0:	220f      	movs	r2, #15
  4025d2:	71da      	strb	r2, [r3, #7]
  m_can1_mailbox.uc_id_ver   = 0;
  4025d4:	4b14      	ldr	r3, [pc, #80]	; (402628 <bsp_can_init+0x88>)
  4025d6:	2200      	movs	r2, #0
  4025d8:	715a      	strb	r2, [r3, #5]
  m_can1_mailbox.ul_id_msk   = 0;
  4025da:	4b13      	ldr	r3, [pc, #76]	; (402628 <bsp_can_init+0x88>)
  4025dc:	2200      	movs	r2, #0
  4025de:	60da      	str	r2, [r3, #12]
  can_mailbox_init(CAN1, &m_can1_mailbox);
  4025e0:	4911      	ldr	r1, [pc, #68]	; (402628 <bsp_can_init+0x88>)
  4025e2:	480e      	ldr	r0, [pc, #56]	; (40261c <bsp_can_init+0x7c>)
  4025e4:	4b11      	ldr	r3, [pc, #68]	; (40262c <bsp_can_init+0x8c>)
  4025e6:	4798      	blx	r3
  
  m_can1_mailbox.ul_id     = CAN_MID_MIDvA(0x07);
  4025e8:	4b0f      	ldr	r3, [pc, #60]	; (402628 <bsp_can_init+0x88>)
  4025ea:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
  4025ee:	611a      	str	r2, [r3, #16]
  m_can1_mailbox.ul_datal  = 0x12345678;
  4025f0:	4b0d      	ldr	r3, [pc, #52]	; (402628 <bsp_can_init+0x88>)
  4025f2:	4a0f      	ldr	r2, [pc, #60]	; (402630 <bsp_can_init+0x90>)
  4025f4:	619a      	str	r2, [r3, #24]
  m_can1_mailbox.ul_datah  = 0x87654321;
  4025f6:	4b0c      	ldr	r3, [pc, #48]	; (402628 <bsp_can_init+0x88>)
  4025f8:	4a0e      	ldr	r2, [pc, #56]	; (402634 <bsp_can_init+0x94>)
  4025fa:	61da      	str	r2, [r3, #28]
  m_can1_mailbox.uc_length = 8;
  4025fc:	4b0a      	ldr	r3, [pc, #40]	; (402628 <bsp_can_init+0x88>)
  4025fe:	2208      	movs	r2, #8
  402600:	719a      	strb	r2, [r3, #6]
  can_mailbox_write(CAN1, &m_can1_mailbox);
  402602:	4909      	ldr	r1, [pc, #36]	; (402628 <bsp_can_init+0x88>)
  402604:	4805      	ldr	r0, [pc, #20]	; (40261c <bsp_can_init+0x7c>)
  402606:	4b0c      	ldr	r3, [pc, #48]	; (402638 <bsp_can_init+0x98>)
  402608:	4798      	blx	r3
}
  40260a:	bf00      	nop
  40260c:	3708      	adds	r7, #8
  40260e:	46bd      	mov	sp, r7
  402610:	bd80      	pop	{r7, pc}
  402612:	bf00      	nop
  402614:	0040258d 	.word	0x0040258d
  402618:	00406191 	.word	0x00406191
  40261c:	40014000 	.word	0x40014000
  402620:	00405901 	.word	0x00405901
  402624:	00405c11 	.word	0x00405c11
  402628:	2000ac1c 	.word	0x2000ac1c
  40262c:	00405a33 	.word	0x00405a33
  402630:	12345678 	.word	0x12345678
  402634:	87654321 	.word	0x87654321
  402638:	00405b59 	.word	0x00405b59

0040263c <bsp_can_send>:

void bsp_can_send(void)
{
  40263c:	b580      	push	{r7, lr}
  40263e:	af00      	add	r7, sp, #0
  can_global_send_transfer_cmd(CAN1, CAN_TCR_MB0);
  402640:	2101      	movs	r1, #1
  402642:	4802      	ldr	r0, [pc, #8]	; (40264c <bsp_can_send+0x10>)
  402644:	4b02      	ldr	r3, [pc, #8]	; (402650 <bsp_can_send+0x14>)
  402646:	4798      	blx	r3
}
  402648:	bf00      	nop
  40264a:	bd80      	pop	{r7, pc}
  40264c:	40014000 	.word	0x40014000
  402650:	004059e1 	.word	0x004059e1

00402654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  402654:	b480      	push	{r7}
  402656:	b083      	sub	sp, #12
  402658:	af00      	add	r7, sp, #0
  40265a:	4603      	mov	r3, r0
  40265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402662:	2b00      	cmp	r3, #0
  402664:	db0b      	blt.n	40267e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402666:	4909      	ldr	r1, [pc, #36]	; (40268c <__NVIC_EnableIRQ+0x38>)
  402668:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40266c:	095b      	lsrs	r3, r3, #5
  40266e:	79fa      	ldrb	r2, [r7, #7]
  402670:	f002 021f 	and.w	r2, r2, #31
  402674:	2001      	movs	r0, #1
  402676:	fa00 f202 	lsl.w	r2, r0, r2
  40267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  40267e:	bf00      	nop
  402680:	370c      	adds	r7, #12
  402682:	46bd      	mov	sp, r7
  402684:	f85d 7b04 	ldr.w	r7, [sp], #4
  402688:	4770      	bx	lr
  40268a:	bf00      	nop
  40268c:	e000e100 	.word	0xe000e100

00402690 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  402690:	b480      	push	{r7}
  402692:	b083      	sub	sp, #12
  402694:	af00      	add	r7, sp, #0
  402696:	4603      	mov	r3, r0
  402698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40269e:	2b00      	cmp	r3, #0
  4026a0:	db0c      	blt.n	4026bc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4026a2:	4909      	ldr	r1, [pc, #36]	; (4026c8 <__NVIC_ClearPendingIRQ+0x38>)
  4026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4026a8:	095b      	lsrs	r3, r3, #5
  4026aa:	79fa      	ldrb	r2, [r7, #7]
  4026ac:	f002 021f 	and.w	r2, r2, #31
  4026b0:	2001      	movs	r0, #1
  4026b2:	fa00 f202 	lsl.w	r2, r0, r2
  4026b6:	3360      	adds	r3, #96	; 0x60
  4026b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  4026bc:	bf00      	nop
  4026be:	370c      	adds	r7, #12
  4026c0:	46bd      	mov	sp, r7
  4026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026c6:	4770      	bx	lr
  4026c8:	e000e100 	.word	0xe000e100

004026cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  4026cc:	b480      	push	{r7}
  4026ce:	b083      	sub	sp, #12
  4026d0:	af00      	add	r7, sp, #0
  4026d2:	4603      	mov	r3, r0
  4026d4:	6039      	str	r1, [r7, #0]
  4026d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4026dc:	2b00      	cmp	r3, #0
  4026de:	db0a      	blt.n	4026f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4026e0:	490d      	ldr	r1, [pc, #52]	; (402718 <__NVIC_SetPriority+0x4c>)
  4026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4026e6:	683a      	ldr	r2, [r7, #0]
  4026e8:	b2d2      	uxtb	r2, r2
  4026ea:	0112      	lsls	r2, r2, #4
  4026ec:	b2d2      	uxtb	r2, r2
  4026ee:	440b      	add	r3, r1
  4026f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  4026f4:	e00a      	b.n	40270c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4026f6:	4909      	ldr	r1, [pc, #36]	; (40271c <__NVIC_SetPriority+0x50>)
  4026f8:	79fb      	ldrb	r3, [r7, #7]
  4026fa:	f003 030f 	and.w	r3, r3, #15
  4026fe:	3b04      	subs	r3, #4
  402700:	683a      	ldr	r2, [r7, #0]
  402702:	b2d2      	uxtb	r2, r2
  402704:	0112      	lsls	r2, r2, #4
  402706:	b2d2      	uxtb	r2, r2
  402708:	440b      	add	r3, r1
  40270a:	761a      	strb	r2, [r3, #24]
}
  40270c:	bf00      	nop
  40270e:	370c      	adds	r7, #12
  402710:	46bd      	mov	sp, r7
  402712:	f85d 7b04 	ldr.w	r7, [sp], #4
  402716:	4770      	bx	lr
  402718:	e000e100 	.word	0xe000e100
  40271c:	e000ed00 	.word	0xe000ed00

00402720 <bsp_gpio_init>:
/* Private macros ----------------------------------------------------- */
/* Public variables --------------------------------------------------- */
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
void bsp_gpio_init(void)
{
  402720:	b5b0      	push	{r4, r5, r7, lr}
  402722:	b084      	sub	sp, #16
  402724:	af02      	add	r7, sp, #8
  for (uint8_t i = 1; i <= 1; i++)
  402726:	2301      	movs	r3, #1
  402728:	71fb      	strb	r3, [r7, #7]
  40272a:	e060      	b.n	4027ee <bsp_gpio_init+0xce>
  {
    // Configure as input with pull-up and denouncing
    pio_set_input(PORT, PIN, PIO_INPUT | PIO_OPENDRAIN | PIO_DEBOUNCE);
  40272c:	79fb      	ldrb	r3, [r7, #7]
  40272e:	011b      	lsls	r3, r3, #4
  402730:	4a4b      	ldr	r2, [pc, #300]	; (402860 <bsp_gpio_init+0x140>)
  402732:	4413      	add	r3, r2
  402734:	4618      	mov	r0, r3
  402736:	4b4b      	ldr	r3, [pc, #300]	; (402864 <bsp_gpio_init+0x144>)
  402738:	4798      	blx	r3
  40273a:	4604      	mov	r4, r0
  40273c:	79fb      	ldrb	r3, [r7, #7]
  40273e:	011b      	lsls	r3, r3, #4
  402740:	4a47      	ldr	r2, [pc, #284]	; (402860 <bsp_gpio_init+0x140>)
  402742:	4413      	add	r3, r2
  402744:	4618      	mov	r0, r3
  402746:	4b48      	ldr	r3, [pc, #288]	; (402868 <bsp_gpio_init+0x148>)
  402748:	4798      	blx	r3
  40274a:	4603      	mov	r3, r0
  40274c:	4a47      	ldr	r2, [pc, #284]	; (40286c <bsp_gpio_init+0x14c>)
  40274e:	4619      	mov	r1, r3
  402750:	4620      	mov	r0, r4
  402752:	4b47      	ldr	r3, [pc, #284]	; (402870 <bsp_gpio_init+0x150>)
  402754:	4798      	blx	r3

    // Configure debounce filter at 25Hz
    pio_set_debounce_filter(PORT, PIN, 25);
  402756:	79fb      	ldrb	r3, [r7, #7]
  402758:	011b      	lsls	r3, r3, #4
  40275a:	4a41      	ldr	r2, [pc, #260]	; (402860 <bsp_gpio_init+0x140>)
  40275c:	4413      	add	r3, r2
  40275e:	4618      	mov	r0, r3
  402760:	4b40      	ldr	r3, [pc, #256]	; (402864 <bsp_gpio_init+0x144>)
  402762:	4798      	blx	r3
  402764:	4604      	mov	r4, r0
  402766:	79fb      	ldrb	r3, [r7, #7]
  402768:	011b      	lsls	r3, r3, #4
  40276a:	4a3d      	ldr	r2, [pc, #244]	; (402860 <bsp_gpio_init+0x140>)
  40276c:	4413      	add	r3, r2
  40276e:	4618      	mov	r0, r3
  402770:	4b3d      	ldr	r3, [pc, #244]	; (402868 <bsp_gpio_init+0x148>)
  402772:	4798      	blx	r3
  402774:	4603      	mov	r3, r0
  402776:	2219      	movs	r2, #25
  402778:	4619      	mov	r1, r3
  40277a:	4620      	mov	r0, r4
  40277c:	4b3d      	ldr	r3, [pc, #244]	; (402874 <bsp_gpio_init+0x154>)
  40277e:	4798      	blx	r3

    // Configure External Interrupt on falling edge
    pio_handler_set(PORT, PORT_ID, PIN, PIO_IT_RISE_EDGE, bsp_io_interrupt_handler);
  402780:	79fb      	ldrb	r3, [r7, #7]
  402782:	011b      	lsls	r3, r3, #4
  402784:	4a36      	ldr	r2, [pc, #216]	; (402860 <bsp_gpio_init+0x140>)
  402786:	4413      	add	r3, r2
  402788:	4618      	mov	r0, r3
  40278a:	4b36      	ldr	r3, [pc, #216]	; (402864 <bsp_gpio_init+0x144>)
  40278c:	4798      	blx	r3
  40278e:	4604      	mov	r4, r0
  402790:	79fb      	ldrb	r3, [r7, #7]
  402792:	011b      	lsls	r3, r3, #4
  402794:	4a32      	ldr	r2, [pc, #200]	; (402860 <bsp_gpio_init+0x140>)
  402796:	4413      	add	r3, r2
  402798:	4618      	mov	r0, r3
  40279a:	4b37      	ldr	r3, [pc, #220]	; (402878 <bsp_gpio_init+0x158>)
  40279c:	4798      	blx	r3
  40279e:	4605      	mov	r5, r0
  4027a0:	79fb      	ldrb	r3, [r7, #7]
  4027a2:	011b      	lsls	r3, r3, #4
  4027a4:	4a2e      	ldr	r2, [pc, #184]	; (402860 <bsp_gpio_init+0x140>)
  4027a6:	4413      	add	r3, r2
  4027a8:	4618      	mov	r0, r3
  4027aa:	4b2f      	ldr	r3, [pc, #188]	; (402868 <bsp_gpio_init+0x148>)
  4027ac:	4798      	blx	r3
  4027ae:	4603      	mov	r3, r0
  4027b0:	461a      	mov	r2, r3
  4027b2:	4b32      	ldr	r3, [pc, #200]	; (40287c <bsp_gpio_init+0x15c>)
  4027b4:	9300      	str	r3, [sp, #0]
  4027b6:	2370      	movs	r3, #112	; 0x70
  4027b8:	4629      	mov	r1, r5
  4027ba:	4620      	mov	r0, r4
  4027bc:	4c30      	ldr	r4, [pc, #192]	; (402880 <bsp_gpio_init+0x160>)
  4027be:	47a0      	blx	r4

    // Enable external interrupt
    pio_enable_interrupt(PORT, PIN);
  4027c0:	79fb      	ldrb	r3, [r7, #7]
  4027c2:	011b      	lsls	r3, r3, #4
  4027c4:	4a26      	ldr	r2, [pc, #152]	; (402860 <bsp_gpio_init+0x140>)
  4027c6:	4413      	add	r3, r2
  4027c8:	4618      	mov	r0, r3
  4027ca:	4b26      	ldr	r3, [pc, #152]	; (402864 <bsp_gpio_init+0x144>)
  4027cc:	4798      	blx	r3
  4027ce:	4604      	mov	r4, r0
  4027d0:	79fb      	ldrb	r3, [r7, #7]
  4027d2:	011b      	lsls	r3, r3, #4
  4027d4:	4a22      	ldr	r2, [pc, #136]	; (402860 <bsp_gpio_init+0x140>)
  4027d6:	4413      	add	r3, r2
  4027d8:	4618      	mov	r0, r3
  4027da:	4b23      	ldr	r3, [pc, #140]	; (402868 <bsp_gpio_init+0x148>)
  4027dc:	4798      	blx	r3
  4027de:	4603      	mov	r3, r0
  4027e0:	4619      	mov	r1, r3
  4027e2:	4620      	mov	r0, r4
  4027e4:	4b27      	ldr	r3, [pc, #156]	; (402884 <bsp_gpio_init+0x164>)
  4027e6:	4798      	blx	r3
  for (uint8_t i = 1; i <= 1; i++)
  4027e8:	79fb      	ldrb	r3, [r7, #7]
  4027ea:	3301      	adds	r3, #1
  4027ec:	71fb      	strb	r3, [r7, #7]
  4027ee:	79fb      	ldrb	r3, [r7, #7]
  4027f0:	2b01      	cmp	r3, #1
  4027f2:	d99b      	bls.n	40272c <bsp_gpio_init+0xc>
  }

  // Configure Ext Interrupt in NVIC
  irq_register_handler(PIOA_IRQn, 0);
  4027f4:	2009      	movs	r0, #9
  4027f6:	4b24      	ldr	r3, [pc, #144]	; (402888 <bsp_gpio_init+0x168>)
  4027f8:	4798      	blx	r3
  4027fa:	2100      	movs	r1, #0
  4027fc:	2009      	movs	r0, #9
  4027fe:	4b23      	ldr	r3, [pc, #140]	; (40288c <bsp_gpio_init+0x16c>)
  402800:	4798      	blx	r3
  402802:	2009      	movs	r0, #9
  402804:	4b22      	ldr	r3, [pc, #136]	; (402890 <bsp_gpio_init+0x170>)
  402806:	4798      	blx	r3
  irq_register_handler(PIOB_IRQn, 0);
  402808:	200a      	movs	r0, #10
  40280a:	4b1f      	ldr	r3, [pc, #124]	; (402888 <bsp_gpio_init+0x168>)
  40280c:	4798      	blx	r3
  40280e:	2100      	movs	r1, #0
  402810:	200a      	movs	r0, #10
  402812:	4b1e      	ldr	r3, [pc, #120]	; (40288c <bsp_gpio_init+0x16c>)
  402814:	4798      	blx	r3
  402816:	200a      	movs	r0, #10
  402818:	4b1d      	ldr	r3, [pc, #116]	; (402890 <bsp_gpio_init+0x170>)
  40281a:	4798      	blx	r3
  irq_register_handler(PIOC_IRQn, 0);
  40281c:	200b      	movs	r0, #11
  40281e:	4b1a      	ldr	r3, [pc, #104]	; (402888 <bsp_gpio_init+0x168>)
  402820:	4798      	blx	r3
  402822:	2100      	movs	r1, #0
  402824:	200b      	movs	r0, #11
  402826:	4b19      	ldr	r3, [pc, #100]	; (40288c <bsp_gpio_init+0x16c>)
  402828:	4798      	blx	r3
  40282a:	200b      	movs	r0, #11
  40282c:	4b18      	ldr	r3, [pc, #96]	; (402890 <bsp_gpio_init+0x170>)
  40282e:	4798      	blx	r3
  irq_register_handler(PIOD_IRQn, 0);
  402830:	200c      	movs	r0, #12
  402832:	4b15      	ldr	r3, [pc, #84]	; (402888 <bsp_gpio_init+0x168>)
  402834:	4798      	blx	r3
  402836:	2100      	movs	r1, #0
  402838:	200c      	movs	r0, #12
  40283a:	4b14      	ldr	r3, [pc, #80]	; (40288c <bsp_gpio_init+0x16c>)
  40283c:	4798      	blx	r3
  40283e:	200c      	movs	r0, #12
  402840:	4b13      	ldr	r3, [pc, #76]	; (402890 <bsp_gpio_init+0x170>)
  402842:	4798      	blx	r3
  irq_register_handler(PIOE_IRQn, 0);
  402844:	200d      	movs	r0, #13
  402846:	4b10      	ldr	r3, [pc, #64]	; (402888 <bsp_gpio_init+0x168>)
  402848:	4798      	blx	r3
  40284a:	2100      	movs	r1, #0
  40284c:	200d      	movs	r0, #13
  40284e:	4b0f      	ldr	r3, [pc, #60]	; (40288c <bsp_gpio_init+0x16c>)
  402850:	4798      	blx	r3
  402852:	200d      	movs	r0, #13
  402854:	4b0e      	ldr	r3, [pc, #56]	; (402890 <bsp_gpio_init+0x170>)
  402856:	4798      	blx	r3
}
  402858:	bf00      	nop
  40285a:	3708      	adds	r7, #8
  40285c:	46bd      	mov	sp, r7
  40285e:	bdb0      	pop	{r4, r5, r7, pc}
  402860:	0040aecc 	.word	0x0040aecc
  402864:	00402975 	.word	0x00402975
  402868:	004029a5 	.word	0x004029a5
  40286c:	2800000c 	.word	0x2800000c
  402870:	00405e11 	.word	0x00405e11
  402874:	00405c81 	.word	0x00405c81
  402878:	0040298d 	.word	0x0040298d
  40287c:	00402895 	.word	0x00402895
  402880:	00405699 	.word	0x00405699
  402884:	00405efd 	.word	0x00405efd
  402888:	00402691 	.word	0x00402691
  40288c:	004026cd 	.word	0x004026cd
  402890:	00402655 	.word	0x00402655

00402894 <bsp_io_interrupt_handler>:

void bsp_io_interrupt_handler(uint32_t id, uint32_t index)
{
  402894:	b590      	push	{r4, r7, lr}
  402896:	b089      	sub	sp, #36	; 0x24
  402898:	af02      	add	r7, sp, #8
  40289a:	6078      	str	r0, [r7, #4]
  40289c:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 1; i <= 1; i++)
  40289e:	2301      	movs	r3, #1
  4028a0:	75fb      	strb	r3, [r7, #23]
  4028a2:	e04d      	b.n	402940 <bsp_io_interrupt_handler+0xac>
  {
    if ((id == PORT_ID) && (index == PIN))
  4028a4:	7dfb      	ldrb	r3, [r7, #23]
  4028a6:	011b      	lsls	r3, r3, #4
  4028a8:	4a29      	ldr	r2, [pc, #164]	; (402950 <bsp_io_interrupt_handler+0xbc>)
  4028aa:	4413      	add	r3, r2
  4028ac:	4618      	mov	r0, r3
  4028ae:	4b29      	ldr	r3, [pc, #164]	; (402954 <bsp_io_interrupt_handler+0xc0>)
  4028b0:	4798      	blx	r3
  4028b2:	4602      	mov	r2, r0
  4028b4:	687b      	ldr	r3, [r7, #4]
  4028b6:	429a      	cmp	r2, r3
  4028b8:	d13f      	bne.n	40293a <bsp_io_interrupt_handler+0xa6>
  4028ba:	7dfb      	ldrb	r3, [r7, #23]
  4028bc:	011b      	lsls	r3, r3, #4
  4028be:	4a24      	ldr	r2, [pc, #144]	; (402950 <bsp_io_interrupt_handler+0xbc>)
  4028c0:	4413      	add	r3, r2
  4028c2:	4618      	mov	r0, r3
  4028c4:	4b24      	ldr	r3, [pc, #144]	; (402958 <bsp_io_interrupt_handler+0xc4>)
  4028c6:	4798      	blx	r3
  4028c8:	4603      	mov	r3, r0
  4028ca:	461a      	mov	r2, r3
  4028cc:	683b      	ldr	r3, [r7, #0]
  4028ce:	429a      	cmp	r2, r3
  4028d0:	d133      	bne.n	40293a <bsp_io_interrupt_handler+0xa6>
    {
      if (pio_get(PORT, PIO_TYPE_PIO_INPUT, PIN))
  4028d2:	7dfb      	ldrb	r3, [r7, #23]
  4028d4:	011b      	lsls	r3, r3, #4
  4028d6:	4a1e      	ldr	r2, [pc, #120]	; (402950 <bsp_io_interrupt_handler+0xbc>)
  4028d8:	4413      	add	r3, r2
  4028da:	4618      	mov	r0, r3
  4028dc:	4b1f      	ldr	r3, [pc, #124]	; (40295c <bsp_io_interrupt_handler+0xc8>)
  4028de:	4798      	blx	r3
  4028e0:	4604      	mov	r4, r0
  4028e2:	7dfb      	ldrb	r3, [r7, #23]
  4028e4:	011b      	lsls	r3, r3, #4
  4028e6:	4a1a      	ldr	r2, [pc, #104]	; (402950 <bsp_io_interrupt_handler+0xbc>)
  4028e8:	4413      	add	r3, r2
  4028ea:	4618      	mov	r0, r3
  4028ec:	4b1a      	ldr	r3, [pc, #104]	; (402958 <bsp_io_interrupt_handler+0xc4>)
  4028ee:	4798      	blx	r3
  4028f0:	4603      	mov	r3, r0
  4028f2:	461a      	mov	r2, r3
  4028f4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4028f8:	4620      	mov	r0, r4
  4028fa:	4b19      	ldr	r3, [pc, #100]	; (402960 <bsp_io_interrupt_handler+0xcc>)
  4028fc:	4798      	blx	r3
  4028fe:	4603      	mov	r3, r0
  402900:	2b00      	cmp	r3, #0
  402902:	d01a      	beq.n	40293a <bsp_io_interrupt_handler+0xa6>
      {
        static uint8_t m_current_row = 0;
        char time[14];

        bsp_rtc_make_string_time_style(time);
  402904:	f107 0308 	add.w	r3, r7, #8
  402908:	4618      	mov	r0, r3
  40290a:	4b16      	ldr	r3, [pc, #88]	; (402964 <bsp_io_interrupt_handler+0xd0>)
  40290c:	4798      	blx	r3

        bsp_lcd_write_string(0, m_current_row++, "%s: SS%d", time, i);
  40290e:	4b16      	ldr	r3, [pc, #88]	; (402968 <bsp_io_interrupt_handler+0xd4>)
  402910:	7819      	ldrb	r1, [r3, #0]
  402912:	1c4b      	adds	r3, r1, #1
  402914:	b2da      	uxtb	r2, r3
  402916:	4b14      	ldr	r3, [pc, #80]	; (402968 <bsp_io_interrupt_handler+0xd4>)
  402918:	701a      	strb	r2, [r3, #0]
  40291a:	7dfb      	ldrb	r3, [r7, #23]
  40291c:	f107 0208 	add.w	r2, r7, #8
  402920:	9300      	str	r3, [sp, #0]
  402922:	4613      	mov	r3, r2
  402924:	4a11      	ldr	r2, [pc, #68]	; (40296c <bsp_io_interrupt_handler+0xd8>)
  402926:	2000      	movs	r0, #0
  402928:	4c11      	ldr	r4, [pc, #68]	; (402970 <bsp_io_interrupt_handler+0xdc>)
  40292a:	47a0      	blx	r4
        if (m_current_row == 4)
  40292c:	4b0e      	ldr	r3, [pc, #56]	; (402968 <bsp_io_interrupt_handler+0xd4>)
  40292e:	781b      	ldrb	r3, [r3, #0]
  402930:	2b04      	cmp	r3, #4
  402932:	d102      	bne.n	40293a <bsp_io_interrupt_handler+0xa6>
          m_current_row = 0;
  402934:	4b0c      	ldr	r3, [pc, #48]	; (402968 <bsp_io_interrupt_handler+0xd4>)
  402936:	2200      	movs	r2, #0
  402938:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 1; i <= 1; i++)
  40293a:	7dfb      	ldrb	r3, [r7, #23]
  40293c:	3301      	adds	r3, #1
  40293e:	75fb      	strb	r3, [r7, #23]
  402940:	7dfb      	ldrb	r3, [r7, #23]
  402942:	2b01      	cmp	r3, #1
  402944:	d9ae      	bls.n	4028a4 <bsp_io_interrupt_handler+0x10>
      }
    }
  }
}
  402946:	bf00      	nop
  402948:	371c      	adds	r7, #28
  40294a:	46bd      	mov	sp, r7
  40294c:	bd90      	pop	{r4, r7, pc}
  40294e:	bf00      	nop
  402950:	0040aecc 	.word	0x0040aecc
  402954:	0040298d 	.word	0x0040298d
  402958:	004029a5 	.word	0x004029a5
  40295c:	00402975 	.word	0x00402975
  402960:	00405cb9 	.word	0x00405cb9
  402964:	00402b19 	.word	0x00402b19
  402968:	2000ab34 	.word	0x2000ab34
  40296c:	0040aec0 	.word	0x0040aec0
  402970:	004029f1 	.word	0x004029f1

00402974 <bsp_io_get_port_address>:

/* Function definitions ----------------------------------------------- */
Pio *bsp_io_get_port_address(const bsp_io_10_t *io)
{
  402974:	b480      	push	{r7}
  402976:	b083      	sub	sp, #12
  402978:	af00      	add	r7, sp, #0
  40297a:	6078      	str	r0, [r7, #4]
  return io->port;
  40297c:	687b      	ldr	r3, [r7, #4]
  40297e:	681b      	ldr	r3, [r3, #0]
}
  402980:	4618      	mov	r0, r3
  402982:	370c      	adds	r7, #12
  402984:	46bd      	mov	sp, r7
  402986:	f85d 7b04 	ldr.w	r7, [sp], #4
  40298a:	4770      	bx	lr

0040298c <bsp_io_get_port_id>:

uint32_t bsp_io_get_port_id(const bsp_io_10_t *io)
{
  40298c:	b480      	push	{r7}
  40298e:	b083      	sub	sp, #12
  402990:	af00      	add	r7, sp, #0
  402992:	6078      	str	r0, [r7, #4]
  return io->port_id;
  402994:	687b      	ldr	r3, [r7, #4]
  402996:	685b      	ldr	r3, [r3, #4]
}
  402998:	4618      	mov	r0, r3
  40299a:	370c      	adds	r7, #12
  40299c:	46bd      	mov	sp, r7
  40299e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029a2:	4770      	bx	lr

004029a4 <bsp_io_get_pin>:

uint16_t bsp_io_get_pin(const bsp_io_10_t *io)
{
  4029a4:	b480      	push	{r7}
  4029a6:	b083      	sub	sp, #12
  4029a8:	af00      	add	r7, sp, #0
  4029aa:	6078      	str	r0, [r7, #4]
  return io->pin;
  4029ac:	687b      	ldr	r3, [r7, #4]
  4029ae:	689b      	ldr	r3, [r3, #8]
  4029b0:	b29b      	uxth	r3, r3
}
  4029b2:	4618      	mov	r0, r3
  4029b4:	370c      	adds	r7, #12
  4029b6:	46bd      	mov	sp, r7
  4029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029bc:	4770      	bx	lr
	...

004029c0 <bsp_lcd_init>:
/* Private function prototypes ---------------------------------------- */
void m_bsp_lcd_set_position(uint8_t row, uint8_t col);

/* Function definitions ----------------------------------------------- */
void bsp_lcd_init(void)
{
  4029c0:	b580      	push	{r7, lr}
  4029c2:	af00      	add	r7, sp, #0
  m_ssd1311.device_address = SSD1311_I2C_ADDRESS;
  4029c4:	4b06      	ldr	r3, [pc, #24]	; (4029e0 <bsp_lcd_init+0x20>)
  4029c6:	223c      	movs	r2, #60	; 0x3c
  4029c8:	701a      	strb	r2, [r3, #0]
  m_ssd1311.i2c_write      = bsp_i2c_write;
  4029ca:	4b05      	ldr	r3, [pc, #20]	; (4029e0 <bsp_lcd_init+0x20>)
  4029cc:	4a05      	ldr	r2, [pc, #20]	; (4029e4 <bsp_lcd_init+0x24>)
  4029ce:	605a      	str	r2, [r3, #4]
  m_ssd1311.delay          = bsp_delay;
  4029d0:	4b03      	ldr	r3, [pc, #12]	; (4029e0 <bsp_lcd_init+0x20>)
  4029d2:	4a05      	ldr	r2, [pc, #20]	; (4029e8 <bsp_lcd_init+0x28>)
  4029d4:	609a      	str	r2, [r3, #8]
  
  ssd1311_init(&m_ssd1311);
  4029d6:	4802      	ldr	r0, [pc, #8]	; (4029e0 <bsp_lcd_init+0x20>)
  4029d8:	4b04      	ldr	r3, [pc, #16]	; (4029ec <bsp_lcd_init+0x2c>)
  4029da:	4798      	blx	r3
}
  4029dc:	bf00      	nop
  4029de:	bd80      	pop	{r7, pc}
  4029e0:	2000ac3c 	.word	0x2000ac3c
  4029e4:	00402371 	.word	0x00402371
  4029e8:	004023b9 	.word	0x004023b9
  4029ec:	00402bb9 	.word	0x00402bb9

004029f0 <bsp_lcd_write_string>:

void bsp_lcd_write_string(uint8_t x, uint8_t y, const char *fmt_string, ...)
{
  4029f0:	b40c      	push	{r2, r3}
  4029f2:	b580      	push	{r7, lr}
  4029f4:	b0c4      	sub	sp, #272	; 0x110
  4029f6:	af00      	add	r7, sp, #0
  4029f8:	4602      	mov	r2, r0
  4029fa:	1dfb      	adds	r3, r7, #7
  4029fc:	701a      	strb	r2, [r3, #0]
  4029fe:	1dbb      	adds	r3, r7, #6
  402a00:	460a      	mov	r2, r1
  402a02:	701a      	strb	r2, [r3, #0]
  char str[256] = "";
  402a04:	f107 030c 	add.w	r3, r7, #12
  402a08:	2200      	movs	r2, #0
  402a0a:	601a      	str	r2, [r3, #0]
  402a0c:	3304      	adds	r3, #4
  402a0e:	22fc      	movs	r2, #252	; 0xfc
  402a10:	2100      	movs	r1, #0
  402a12:	4618      	mov	r0, r3
  402a14:	4b1f      	ldr	r3, [pc, #124]	; (402a94 <bsp_lcd_write_string+0xa4>)
  402a16:	4798      	blx	r3
  unsigned char i = 0;
  402a18:	2300      	movs	r3, #0
  402a1a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

  va_list args;
  va_start(args, fmt_string);
  402a1e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
  402a22:	f107 0308 	add.w	r3, r7, #8
  402a26:	601a      	str	r2, [r3, #0]
  vsprintf(str + strlen(str), fmt_string, args);
  402a28:	f107 030c 	add.w	r3, r7, #12
  402a2c:	4618      	mov	r0, r3
  402a2e:	4b1a      	ldr	r3, [pc, #104]	; (402a98 <bsp_lcd_write_string+0xa8>)
  402a30:	4798      	blx	r3
  402a32:	4602      	mov	r2, r0
  402a34:	f107 030c 	add.w	r3, r7, #12
  402a38:	1898      	adds	r0, r3, r2
  402a3a:	f107 0308 	add.w	r3, r7, #8
  402a3e:	681a      	ldr	r2, [r3, #0]
  402a40:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
  402a44:	4b15      	ldr	r3, [pc, #84]	; (402a9c <bsp_lcd_write_string+0xac>)
  402a46:	4798      	blx	r3
  va_end(args);

  m_bsp_lcd_set_position(x, y);
  402a48:	1dbb      	adds	r3, r7, #6
  402a4a:	781a      	ldrb	r2, [r3, #0]
  402a4c:	1dfb      	adds	r3, r7, #7
  402a4e:	781b      	ldrb	r3, [r3, #0]
  402a50:	4611      	mov	r1, r2
  402a52:	4618      	mov	r0, r3
  402a54:	4b12      	ldr	r3, [pc, #72]	; (402aa0 <bsp_lcd_write_string+0xb0>)
  402a56:	4798      	blx	r3
  while(str[i])
  402a58:	e00d      	b.n	402a76 <bsp_lcd_write_string+0x86>
  {
    ssd1311_write_data_byte(&m_ssd1311, str[i]);
  402a5a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
  402a5e:	f107 020c 	add.w	r2, r7, #12
  402a62:	5cd3      	ldrb	r3, [r2, r3]
  402a64:	4619      	mov	r1, r3
  402a66:	480f      	ldr	r0, [pc, #60]	; (402aa4 <bsp_lcd_write_string+0xb4>)
  402a68:	4b0f      	ldr	r3, [pc, #60]	; (402aa8 <bsp_lcd_write_string+0xb8>)
  402a6a:	4798      	blx	r3
    i++;
  402a6c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
  402a70:	3301      	adds	r3, #1
  402a72:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  while(str[i])
  402a76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
  402a7a:	f107 020c 	add.w	r2, r7, #12
  402a7e:	5cd3      	ldrb	r3, [r2, r3]
  402a80:	2b00      	cmp	r3, #0
  402a82:	d1ea      	bne.n	402a5a <bsp_lcd_write_string+0x6a>
  }
}
  402a84:	bf00      	nop
  402a86:	f507 7788 	add.w	r7, r7, #272	; 0x110
  402a8a:	46bd      	mov	sp, r7
  402a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
  402a90:	b002      	add	sp, #8
  402a92:	4770      	bx	lr
  402a94:	00406981 	.word	0x00406981
  402a98:	00406a81 	.word	0x00406a81
  402a9c:	00408051 	.word	0x00408051
  402aa0:	00402aad 	.word	0x00402aad
  402aa4:	2000ac3c 	.word	0x2000ac3c
  402aa8:	00402c19 	.word	0x00402c19

00402aac <m_bsp_lcd_set_position>:

/* Private function definitions --------------------------------------- */
void m_bsp_lcd_set_position(uint8_t x, uint8_t y)
{
  402aac:	b580      	push	{r7, lr}
  402aae:	b082      	sub	sp, #8
  402ab0:	af00      	add	r7, sp, #0
  402ab2:	4603      	mov	r3, r0
  402ab4:	460a      	mov	r2, r1
  402ab6:	71fb      	strb	r3, [r7, #7]
  402ab8:	4613      	mov	r3, r2
  402aba:	71bb      	strb	r3, [r7, #6]
  ssd1311_write_cmd(&m_ssd1311, 0x80 + 0x20 * y + x);
  402abc:	79bb      	ldrb	r3, [r7, #6]
  402abe:	3304      	adds	r3, #4
  402ac0:	b2db      	uxtb	r3, r3
  402ac2:	015b      	lsls	r3, r3, #5
  402ac4:	b2da      	uxtb	r2, r3
  402ac6:	79fb      	ldrb	r3, [r7, #7]
  402ac8:	4413      	add	r3, r2
  402aca:	b2db      	uxtb	r3, r3
  402acc:	4619      	mov	r1, r3
  402ace:	4803      	ldr	r0, [pc, #12]	; (402adc <m_bsp_lcd_set_position+0x30>)
  402ad0:	4b03      	ldr	r3, [pc, #12]	; (402ae0 <m_bsp_lcd_set_position+0x34>)
  402ad2:	4798      	blx	r3
}
  402ad4:	bf00      	nop
  402ad6:	3708      	adds	r7, #8
  402ad8:	46bd      	mov	sp, r7
  402ada:	bd80      	pop	{r7, pc}
  402adc:	2000ac3c 	.word	0x2000ac3c
  402ae0:	00402be9 	.word	0x00402be9

00402ae4 <bsp_rtc_init>:
/* Private macros ----------------------------------------------------- */
/* Public variables --------------------------------------------------- */
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
void bsp_rtc_init(void)
{
  402ae4:	b580      	push	{r7, lr}
  402ae6:	af00      	add	r7, sp, #0
  pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  402ae8:	2000      	movs	r0, #0
  402aea:	4b07      	ldr	r3, [pc, #28]	; (402b08 <bsp_rtc_init+0x24>)
  402aec:	4798      	blx	r3

  while (!pmc_osc_is_ready_32kxtal());
  402aee:	bf00      	nop
  402af0:	4b06      	ldr	r3, [pc, #24]	; (402b0c <bsp_rtc_init+0x28>)
  402af2:	4798      	blx	r3
  402af4:	4603      	mov	r3, r0
  402af6:	2b00      	cmp	r3, #0
  402af8:	d0fa      	beq.n	402af0 <bsp_rtc_init+0xc>

  rtc_set_hour_mode(RTC, 0);
  402afa:	2100      	movs	r1, #0
  402afc:	4804      	ldr	r0, [pc, #16]	; (402b10 <bsp_rtc_init+0x2c>)
  402afe:	4b05      	ldr	r3, [pc, #20]	; (402b14 <bsp_rtc_init+0x30>)
  402b00:	4798      	blx	r3
}
  402b02:	bf00      	nop
  402b04:	bd80      	pop	{r7, pc}
  402b06:	bf00      	nop
  402b08:	00405fe9 	.word	0x00405fe9
  402b0c:	00406021 	.word	0x00406021
  402b10:	400e1860 	.word	0x400e1860
  402b14:	00404d05 	.word	0x00404d05

00402b18 <bsp_rtc_make_string_time_style>:

void bsp_rtc_make_string_time_style(char *out)
{
  402b18:	b5b0      	push	{r4, r5, r7, lr}
  402b1a:	b090      	sub	sp, #64	; 0x40
  402b1c:	af04      	add	r7, sp, #16
  402b1e:	6078      	str	r0, [r7, #4]
  date_time_t dt;

  rtc_get_time(RTC, (uint32_t *)&dt.tm_hour, (uint32_t *)&dt.tm_min, (uint32_t *)&dt.tm_sec);
  402b20:	f107 000c 	add.w	r0, r7, #12
  402b24:	f107 030c 	add.w	r3, r7, #12
  402b28:	1d1a      	adds	r2, r3, #4
  402b2a:	f107 030c 	add.w	r3, r7, #12
  402b2e:	f103 0108 	add.w	r1, r3, #8
  402b32:	4603      	mov	r3, r0
  402b34:	481a      	ldr	r0, [pc, #104]	; (402ba0 <bsp_rtc_make_string_time_style+0x88>)
  402b36:	4c1b      	ldr	r4, [pc, #108]	; (402ba4 <bsp_rtc_make_string_time_style+0x8c>)
  402b38:	47a0      	blx	r4
  rtc_get_date(RTC, (uint32_t *)&dt.tm_year, (uint32_t *)&dt.tm_mon, (uint32_t *)&dt.tm_mday, NULL);
  402b3a:	f107 030c 	add.w	r3, r7, #12
  402b3e:	f103 000c 	add.w	r0, r3, #12
  402b42:	f107 030c 	add.w	r3, r7, #12
  402b46:	f103 0210 	add.w	r2, r3, #16
  402b4a:	f107 030c 	add.w	r3, r7, #12
  402b4e:	f103 0114 	add.w	r1, r3, #20
  402b52:	2300      	movs	r3, #0
  402b54:	9300      	str	r3, [sp, #0]
  402b56:	4603      	mov	r3, r0
  402b58:	4811      	ldr	r0, [pc, #68]	; (402ba0 <bsp_rtc_make_string_time_style+0x88>)
  402b5a:	4c13      	ldr	r4, [pc, #76]	; (402ba8 <bsp_rtc_make_string_time_style+0x90>)
  402b5c:	47a0      	blx	r4

  dt.tm_year %= 1000;
  402b5e:	6a3a      	ldr	r2, [r7, #32]
  402b60:	4b12      	ldr	r3, [pc, #72]	; (402bac <bsp_rtc_make_string_time_style+0x94>)
  402b62:	fb83 1302 	smull	r1, r3, r3, r2
  402b66:	1199      	asrs	r1, r3, #6
  402b68:	17d3      	asrs	r3, r2, #31
  402b6a:	1acb      	subs	r3, r1, r3
  402b6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  402b70:	fb01 f303 	mul.w	r3, r1, r3
  402b74:	1ad3      	subs	r3, r2, r3
  402b76:	623b      	str	r3, [r7, #32]

  sprintf(out, "%02d%02d%02d:%02d%02d%02d", dt.tm_year, dt.tm_mon, dt.tm_mday,
  402b78:	6a3c      	ldr	r4, [r7, #32]
  402b7a:	69fd      	ldr	r5, [r7, #28]
  402b7c:	69bb      	ldr	r3, [r7, #24]
  402b7e:	697a      	ldr	r2, [r7, #20]
  402b80:	6939      	ldr	r1, [r7, #16]
  402b82:	68f8      	ldr	r0, [r7, #12]
  402b84:	9003      	str	r0, [sp, #12]
  402b86:	9102      	str	r1, [sp, #8]
  402b88:	9201      	str	r2, [sp, #4]
  402b8a:	9300      	str	r3, [sp, #0]
  402b8c:	462b      	mov	r3, r5
  402b8e:	4622      	mov	r2, r4
  402b90:	4907      	ldr	r1, [pc, #28]	; (402bb0 <bsp_rtc_make_string_time_style+0x98>)
  402b92:	6878      	ldr	r0, [r7, #4]
  402b94:	4c07      	ldr	r4, [pc, #28]	; (402bb4 <bsp_rtc_make_string_time_style+0x9c>)
  402b96:	47a0      	blx	r4
                                            dt.tm_hour, dt.tm_min, dt.tm_sec);
}
  402b98:	bf00      	nop
  402b9a:	3730      	adds	r7, #48	; 0x30
  402b9c:	46bd      	mov	sp, r7
  402b9e:	bdb0      	pop	{r4, r5, r7, pc}
  402ba0:	400e1860 	.word	0x400e1860
  402ba4:	00404d3b 	.word	0x00404d3b
  402ba8:	00404dff 	.word	0x00404dff
  402bac:	10624dd3 	.word	0x10624dd3
  402bb0:	0040b50c 	.word	0x0040b50c
  402bb4:	00406a1d 	.word	0x00406a1d

00402bb8 <ssd1311_init>:
void cursPos(ssd1311_t *me, uint8_t col, uint8_t row);


/* Function definitions ----------------------------------------------- */
base_status_t ssd1311_init(ssd1311_t *me)
{
  402bb8:	b580      	push	{r7, lr}
  402bba:	b082      	sub	sp, #8
  402bbc:	af00      	add	r7, sp, #0
  402bbe:	6078      	str	r0, [r7, #4]
  if ((me == NULL) || (me->i2c_write == NULL))
  402bc0:	687b      	ldr	r3, [r7, #4]
  402bc2:	2b00      	cmp	r3, #0
  402bc4:	d003      	beq.n	402bce <ssd1311_init+0x16>
  402bc6:	687b      	ldr	r3, [r7, #4]
  402bc8:	685b      	ldr	r3, [r3, #4]
  402bca:	2b00      	cmp	r3, #0
  402bcc:	d101      	bne.n	402bd2 <ssd1311_init+0x1a>
    return BS_ERROR_PARAMS;
  402bce:	2301      	movs	r3, #1
  402bd0:	e003      	b.n	402bda <ssd1311_init+0x22>

  m_ssd1311_run_cfg_script(me);
  402bd2:	6878      	ldr	r0, [r7, #4]
  402bd4:	4b03      	ldr	r3, [pc, #12]	; (402be4 <ssd1311_init+0x2c>)
  402bd6:	4798      	blx	r3

  return BS_OK;
  402bd8:	2300      	movs	r3, #0
}
  402bda:	4618      	mov	r0, r3
  402bdc:	3708      	adds	r7, #8
  402bde:	46bd      	mov	sp, r7
  402be0:	bd80      	pop	{r7, pc}
  402be2:	bf00      	nop
  402be4:	00402c49 	.word	0x00402c49

00402be8 <ssd1311_write_cmd>:

base_status_t ssd1311_write_cmd(ssd1311_t *me, uint8_t cmd)
{
  402be8:	b590      	push	{r4, r7, lr}
  402bea:	b083      	sub	sp, #12
  402bec:	af00      	add	r7, sp, #0
  402bee:	6078      	str	r0, [r7, #4]
  402bf0:	460b      	mov	r3, r1
  402bf2:	70fb      	strb	r3, [r7, #3]
  CHECK(BS_OK == me->i2c_write(me->device_address, SSD1311_CMD_MODE, &cmd, 1), BS_ERROR);
  402bf4:	687b      	ldr	r3, [r7, #4]
  402bf6:	685c      	ldr	r4, [r3, #4]
  402bf8:	687b      	ldr	r3, [r7, #4]
  402bfa:	7818      	ldrb	r0, [r3, #0]
  402bfc:	1cfa      	adds	r2, r7, #3
  402bfe:	2301      	movs	r3, #1
  402c00:	2180      	movs	r1, #128	; 0x80
  402c02:	47a0      	blx	r4
  402c04:	4603      	mov	r3, r0
  402c06:	2b00      	cmp	r3, #0
  402c08:	d001      	beq.n	402c0e <ssd1311_write_cmd+0x26>
  402c0a:	2302      	movs	r3, #2
  402c0c:	e000      	b.n	402c10 <ssd1311_write_cmd+0x28>

  return BS_OK;
  402c0e:	2300      	movs	r3, #0
}
  402c10:	4618      	mov	r0, r3
  402c12:	370c      	adds	r7, #12
  402c14:	46bd      	mov	sp, r7
  402c16:	bd90      	pop	{r4, r7, pc}

00402c18 <ssd1311_write_data_byte>:

  return BS_OK;
}

base_status_t ssd1311_write_data_byte(ssd1311_t *me, uint8_t data)
{
  402c18:	b590      	push	{r4, r7, lr}
  402c1a:	b083      	sub	sp, #12
  402c1c:	af00      	add	r7, sp, #0
  402c1e:	6078      	str	r0, [r7, #4]
  402c20:	460b      	mov	r3, r1
  402c22:	70fb      	strb	r3, [r7, #3]
  CHECK(BS_OK == me->i2c_write(me->device_address, SSD1311_DATA_MODE, &data, 1), BS_ERROR);
  402c24:	687b      	ldr	r3, [r7, #4]
  402c26:	685c      	ldr	r4, [r3, #4]
  402c28:	687b      	ldr	r3, [r7, #4]
  402c2a:	7818      	ldrb	r0, [r3, #0]
  402c2c:	1cfa      	adds	r2, r7, #3
  402c2e:	2301      	movs	r3, #1
  402c30:	2140      	movs	r1, #64	; 0x40
  402c32:	47a0      	blx	r4
  402c34:	4603      	mov	r3, r0
  402c36:	2b00      	cmp	r3, #0
  402c38:	d001      	beq.n	402c3e <ssd1311_write_data_byte+0x26>
  402c3a:	2302      	movs	r3, #2
  402c3c:	e000      	b.n	402c40 <ssd1311_write_data_byte+0x28>

  return BS_OK;
  402c3e:	2300      	movs	r3, #0
}
  402c40:	4618      	mov	r0, r3
  402c42:	370c      	adds	r7, #12
  402c44:	46bd      	mov	sp, r7
  402c46:	bd90      	pop	{r4, r7, pc}

00402c48 <m_ssd1311_run_cfg_script>:
 * @return
 * - BS_OK
 * - BS_ERROR
 */
static base_status_t m_ssd1311_run_cfg_script(ssd1311_t *me)
{
  402c48:	b580      	push	{r7, lr}
  402c4a:	b084      	sub	sp, #16
  402c4c:	af00      	add	r7, sp, #0
  402c4e:	6078      	str	r0, [r7, #4]
  int i          = 0;
  402c50:	2300      	movs	r3, #0
  402c52:	60fb      	str	r3, [r7, #12]
  int end_script = 0;
  402c54:	2300      	movs	r3, #0
  402c56:	60bb      	str	r3, [r7, #8]

  do
  {
    switch (SSD1311_CFG_SCRIPT[i].cmd)
  402c58:	4a20      	ldr	r2, [pc, #128]	; (402cdc <m_ssd1311_run_cfg_script+0x94>)
  402c5a:	68fb      	ldr	r3, [r7, #12]
  402c5c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
  402c60:	2b04      	cmp	r3, #4
  402c62:	d82e      	bhi.n	402cc2 <m_ssd1311_run_cfg_script+0x7a>
  402c64:	a201      	add	r2, pc, #4	; (adr r2, 402c6c <m_ssd1311_run_cfg_script+0x24>)
  402c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402c6a:	bf00      	nop
  402c6c:	00402cc3 	.word	0x00402cc3
  402c70:	00402cbd 	.word	0x00402cbd
  402c74:	00402c81 	.word	0x00402c81
  402c78:	00402c95 	.word	0x00402c95
  402c7c:	00402ca9 	.word	0x00402ca9
    {
    case SSD1311_START:
      break;
    case SSD1311_CMD:
      ssd1311_write_cmd(me, SSD1311_CFG_SCRIPT[i].data & 0xFF);
  402c80:	4a16      	ldr	r2, [pc, #88]	; (402cdc <m_ssd1311_run_cfg_script+0x94>)
  402c82:	68fb      	ldr	r3, [r7, #12]
  402c84:	005b      	lsls	r3, r3, #1
  402c86:	4413      	add	r3, r2
  402c88:	785b      	ldrb	r3, [r3, #1]
  402c8a:	4619      	mov	r1, r3
  402c8c:	6878      	ldr	r0, [r7, #4]
  402c8e:	4b14      	ldr	r3, [pc, #80]	; (402ce0 <m_ssd1311_run_cfg_script+0x98>)
  402c90:	4798      	blx	r3
      break;
  402c92:	e017      	b.n	402cc4 <m_ssd1311_run_cfg_script+0x7c>
    case SSD1311_DATA:
      ssd1311_write_data_byte(me, SSD1311_CFG_SCRIPT[i].data & 0xFF);
  402c94:	4a11      	ldr	r2, [pc, #68]	; (402cdc <m_ssd1311_run_cfg_script+0x94>)
  402c96:	68fb      	ldr	r3, [r7, #12]
  402c98:	005b      	lsls	r3, r3, #1
  402c9a:	4413      	add	r3, r2
  402c9c:	785b      	ldrb	r3, [r3, #1]
  402c9e:	4619      	mov	r1, r3
  402ca0:	6878      	ldr	r0, [r7, #4]
  402ca2:	4b10      	ldr	r3, [pc, #64]	; (402ce4 <m_ssd1311_run_cfg_script+0x9c>)
  402ca4:	4798      	blx	r3
      break;
  402ca6:	e00d      	b.n	402cc4 <m_ssd1311_run_cfg_script+0x7c>
    case SSD1311_DELAY:
      me->delay(SSD1311_CFG_SCRIPT[i].data);
  402ca8:	687b      	ldr	r3, [r7, #4]
  402caa:	689a      	ldr	r2, [r3, #8]
  402cac:	490b      	ldr	r1, [pc, #44]	; (402cdc <m_ssd1311_run_cfg_script+0x94>)
  402cae:	68fb      	ldr	r3, [r7, #12]
  402cb0:	005b      	lsls	r3, r3, #1
  402cb2:	440b      	add	r3, r1
  402cb4:	785b      	ldrb	r3, [r3, #1]
  402cb6:	4618      	mov	r0, r3
  402cb8:	4790      	blx	r2
      break;
  402cba:	e003      	b.n	402cc4 <m_ssd1311_run_cfg_script+0x7c>
    case SSD1311_END:
      end_script = 1;
  402cbc:	2301      	movs	r3, #1
  402cbe:	60bb      	str	r3, [r7, #8]
      break;
  402cc0:	e000      	b.n	402cc4 <m_ssd1311_run_cfg_script+0x7c>
    default:
      break;
  402cc2:	bf00      	nop
    }
    i++;
  402cc4:	68fb      	ldr	r3, [r7, #12]
  402cc6:	3301      	adds	r3, #1
  402cc8:	60fb      	str	r3, [r7, #12]
  }
  while (!end_script);
  402cca:	68bb      	ldr	r3, [r7, #8]
  402ccc:	2b00      	cmp	r3, #0
  402cce:	d0c3      	beq.n	402c58 <m_ssd1311_run_cfg_script+0x10>

  return BS_OK;
  402cd0:	2300      	movs	r3, #0
}
  402cd2:	4618      	mov	r0, r3
  402cd4:	3710      	adds	r7, #16
  402cd6:	46bd      	mov	sp, r7
  402cd8:	bd80      	pop	{r7, pc}
  402cda:	bf00      	nop
  402cdc:	0040b528 	.word	0x0040b528
  402ce0:	00402be9 	.word	0x00402be9
  402ce4:	00402c19 	.word	0x00402c19

00402ce8 <vTaskCode>:
void vTaskCode(void *pvParameters);

/* Function definitions ----------------------------------------------- */

void vTaskCode(void *pvParameters)
{
  402ce8:	b480      	push	{r7}
  402cea:	b083      	sub	sp, #12
  402cec:	af00      	add	r7, sp, #0
  402cee:	6078      	str	r0, [r7, #4]
  for (;;)
  402cf0:	e7fe      	b.n	402cf0 <vTaskCode+0x8>
	...

00402cf4 <sys_init>:
    // Task code goes here.
  }
}

void sys_init(void)
{
  402cf4:	b590      	push	{r4, r7, lr}
  402cf6:	b085      	sub	sp, #20
  402cf8:	af04      	add	r7, sp, #16

  sysclk_init();  // Initialize System Clock
  402cfa:	4b0f      	ldr	r3, [pc, #60]	; (402d38 <sys_init+0x44>)
  402cfc:	4798      	blx	r3
  board_init();   // Board init
  402cfe:	4b0f      	ldr	r3, [pc, #60]	; (402d3c <sys_init+0x48>)
  402d00:	4798      	blx	r3
  bsp_hw_init();  // Hardware init
  402d02:	4b0f      	ldr	r3, [pc, #60]	; (402d40 <sys_init+0x4c>)
  402d04:	4798      	blx	r3
  bsp_can_init(); // Can bus init
  402d06:	4b0f      	ldr	r3, [pc, #60]	; (402d44 <sys_init+0x50>)
  402d08:	4798      	blx	r3
  bsp_lcd_init();
  402d0a:	4b0f      	ldr	r3, [pc, #60]	; (402d48 <sys_init+0x54>)
  402d0c:	4798      	blx	r3

  xTaskCreate(vTaskCode,
  402d0e:	2300      	movs	r3, #0
  402d10:	9303      	str	r3, [sp, #12]
  402d12:	2300      	movs	r3, #0
  402d14:	9302      	str	r3, [sp, #8]
  402d16:	2300      	movs	r3, #0
  402d18:	9301      	str	r3, [sp, #4]
  402d1a:	2302      	movs	r3, #2
  402d1c:	9300      	str	r3, [sp, #0]
  402d1e:	2300      	movs	r3, #0
  402d20:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402d24:	4909      	ldr	r1, [pc, #36]	; (402d4c <sys_init+0x58>)
  402d26:	480a      	ldr	r0, [pc, #40]	; (402d50 <sys_init+0x5c>)
  402d28:	4c0a      	ldr	r4, [pc, #40]	; (402d54 <sys_init+0x60>)
  402d2a:	47a0      	blx	r4
              1024,
              NULL,
              2,
              NULL);

  vTaskStartScheduler();
  402d2c:	4b0a      	ldr	r3, [pc, #40]	; (402d58 <sys_init+0x64>)
  402d2e:	4798      	blx	r3

  // Will only get here if there was insufficient memory to create the idle
	// and/or timer task.
}
  402d30:	bf00      	nop
  402d32:	3704      	adds	r7, #4
  402d34:	46bd      	mov	sp, r7
  402d36:	bd90      	pop	{r4, r7, pc}
  402d38:	00405555 	.word	0x00405555
  402d3c:	00404419 	.word	0x00404419
  402d40:	00402349 	.word	0x00402349
  402d44:	004025a1 	.word	0x004025a1
  402d48:	004029c1 	.word	0x004029c1
  402d4c:	0040b568 	.word	0x0040b568
  402d50:	00402ce9 	.word	0x00402ce9
  402d54:	00401025 	.word	0x00401025
  402d58:	004011cd 	.word	0x004011cd

00402d5c <sys_run>:

void sys_run(void)
{
  402d5c:	b580      	push	{r7, lr}
  402d5e:	af00      	add	r7, sp, #0
  bsp_can_send();
  402d60:	4b01      	ldr	r3, [pc, #4]	; (402d68 <sys_run+0xc>)
  402d62:	4798      	blx	r3
  //     bsp_lcd_write_string(0, m_current_row++, "%s: SS%d", time, i);
  //     if (m_current_row == 4)
  //       m_current_row = 0;
  //   }
  // }
}
  402d64:	bf00      	nop
  402d66:	bd80      	pop	{r7, pc}
  402d68:	0040263d 	.word	0x0040263d

00402d6c <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
  402d6c:	b480      	push	{r7}
  402d6e:	b087      	sub	sp, #28
  402d70:	af00      	add	r7, sp, #0
  402d72:	60f8      	str	r0, [r7, #12]
  402d74:	4608      	mov	r0, r1
  402d76:	4611      	mov	r1, r2
  402d78:	461a      	mov	r2, r3
  402d7a:	4603      	mov	r3, r0
  402d7c:	817b      	strh	r3, [r7, #10]
  402d7e:	460b      	mov	r3, r1
  402d80:	813b      	strh	r3, [r7, #8]
  402d82:	4613      	mov	r3, r2
  402d84:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  402d86:	897a      	ldrh	r2, [r7, #10]
  402d88:	893b      	ldrh	r3, [r7, #8]
  402d8a:	1ad3      	subs	r3, r2, r3
  402d8c:	3307      	adds	r3, #7
  402d8e:	2b00      	cmp	r3, #0
  402d90:	da00      	bge.n	402d94 <SDMMC_UNSTUFF_BITS+0x28>
  402d92:	3307      	adds	r3, #7
  402d94:	10db      	asrs	r3, r3, #3
  402d96:	3b01      	subs	r3, #1
  402d98:	68fa      	ldr	r2, [r7, #12]
  402d9a:	4413      	add	r3, r2
  402d9c:	781b      	ldrb	r3, [r3, #0]
  402d9e:	461a      	mov	r2, r3
  402da0:	893b      	ldrh	r3, [r7, #8]
  402da2:	f003 0307 	and.w	r3, r3, #7
  402da6:	fa42 f303 	asr.w	r3, r2, r3
  402daa:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
  402dac:	893b      	ldrh	r3, [r7, #8]
  402dae:	f003 0207 	and.w	r2, r3, #7
  402db2:	79fb      	ldrb	r3, [r7, #7]
  402db4:	4413      	add	r3, r2
  402db6:	2b08      	cmp	r3, #8
  402db8:	dd16      	ble.n	402de8 <SDMMC_UNSTUFF_BITS+0x7c>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  402dba:	897a      	ldrh	r2, [r7, #10]
  402dbc:	893b      	ldrh	r3, [r7, #8]
  402dbe:	1ad3      	subs	r3, r2, r3
  402dc0:	3307      	adds	r3, #7
  402dc2:	2b00      	cmp	r3, #0
  402dc4:	da00      	bge.n	402dc8 <SDMMC_UNSTUFF_BITS+0x5c>
  402dc6:	3307      	adds	r3, #7
  402dc8:	10db      	asrs	r3, r3, #3
  402dca:	3b02      	subs	r3, #2
  402dcc:	68fa      	ldr	r2, [r7, #12]
  402dce:	4413      	add	r3, r2
  402dd0:	781b      	ldrb	r3, [r3, #0]
  402dd2:	461a      	mov	r2, r3
  402dd4:	893b      	ldrh	r3, [r7, #8]
  402dd6:	f003 0307 	and.w	r3, r3, #7
  402dda:	f1c3 0308 	rsb	r3, r3, #8
  402dde:	fa02 f303 	lsl.w	r3, r2, r3
  402de2:	697a      	ldr	r2, [r7, #20]
  402de4:	4313      	orrs	r3, r2
  402de6:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  402de8:	893b      	ldrh	r3, [r7, #8]
  402dea:	f003 0207 	and.w	r2, r3, #7
  402dee:	79fb      	ldrb	r3, [r7, #7]
  402df0:	4413      	add	r3, r2
  402df2:	2b10      	cmp	r3, #16
  402df4:	dd16      	ble.n	402e24 <SDMMC_UNSTUFF_BITS+0xb8>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  402df6:	897a      	ldrh	r2, [r7, #10]
  402df8:	893b      	ldrh	r3, [r7, #8]
  402dfa:	1ad3      	subs	r3, r2, r3
  402dfc:	3307      	adds	r3, #7
  402dfe:	2b00      	cmp	r3, #0
  402e00:	da00      	bge.n	402e04 <SDMMC_UNSTUFF_BITS+0x98>
  402e02:	3307      	adds	r3, #7
  402e04:	10db      	asrs	r3, r3, #3
  402e06:	3b03      	subs	r3, #3
  402e08:	68fa      	ldr	r2, [r7, #12]
  402e0a:	4413      	add	r3, r2
  402e0c:	781b      	ldrb	r3, [r3, #0]
  402e0e:	461a      	mov	r2, r3
  402e10:	893b      	ldrh	r3, [r7, #8]
  402e12:	f003 0307 	and.w	r3, r3, #7
  402e16:	f1c3 0310 	rsb	r3, r3, #16
  402e1a:	fa02 f303 	lsl.w	r3, r2, r3
  402e1e:	697a      	ldr	r2, [r7, #20]
  402e20:	4313      	orrs	r3, r2
  402e22:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
  402e24:	893b      	ldrh	r3, [r7, #8]
  402e26:	f003 0207 	and.w	r2, r3, #7
  402e2a:	79fb      	ldrb	r3, [r7, #7]
  402e2c:	4413      	add	r3, r2
  402e2e:	2b10      	cmp	r3, #16
  402e30:	dd16      	ble.n	402e60 <SDMMC_UNSTUFF_BITS+0xf4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  402e32:	897a      	ldrh	r2, [r7, #10]
  402e34:	893b      	ldrh	r3, [r7, #8]
  402e36:	1ad3      	subs	r3, r2, r3
  402e38:	3307      	adds	r3, #7
  402e3a:	2b00      	cmp	r3, #0
  402e3c:	da00      	bge.n	402e40 <SDMMC_UNSTUFF_BITS+0xd4>
  402e3e:	3307      	adds	r3, #7
  402e40:	10db      	asrs	r3, r3, #3
  402e42:	3b03      	subs	r3, #3
  402e44:	68fa      	ldr	r2, [r7, #12]
  402e46:	4413      	add	r3, r2
  402e48:	781b      	ldrb	r3, [r3, #0]
  402e4a:	461a      	mov	r2, r3
  402e4c:	893b      	ldrh	r3, [r7, #8]
  402e4e:	f003 0307 	and.w	r3, r3, #7
  402e52:	f1c3 0310 	rsb	r3, r3, #16
  402e56:	fa02 f303 	lsl.w	r3, r2, r3
  402e5a:	697a      	ldr	r2, [r7, #20]
  402e5c:	4313      	orrs	r3, r2
  402e5e:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
  402e60:	79fb      	ldrb	r3, [r7, #7]
  402e62:	2201      	movs	r2, #1
  402e64:	fa02 f303 	lsl.w	r3, r2, r3
  402e68:	3b01      	subs	r3, #1
  402e6a:	697a      	ldr	r2, [r7, #20]
  402e6c:	4013      	ands	r3, r2
  402e6e:	617b      	str	r3, [r7, #20]
	return value;
  402e70:	697b      	ldr	r3, [r7, #20]
}
  402e72:	4618      	mov	r0, r3
  402e74:	371c      	adds	r7, #28
  402e76:	46bd      	mov	sp, r7
  402e78:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e7c:	4770      	bx	lr
	...

00402e80 <mmc_mci_op_cond>:
 * - CMD1 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_mci_op_cond(void)
{
  402e80:	b580      	push	{r7, lr}
  402e82:	b082      	sub	sp, #8
  402e84:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+6)*8) cylces = 4200 retry
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
  402e86:	f241 0368 	movw	r3, #4200	; 0x1068
  402e8a:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  402e8c:	4917      	ldr	r1, [pc, #92]	; (402eec <mmc_mci_op_cond+0x6c>)
  402e8e:	f244 5001 	movw	r0, #17665	; 0x4501
  402e92:	4b17      	ldr	r3, [pc, #92]	; (402ef0 <mmc_mci_op_cond+0x70>)
  402e94:	4798      	blx	r3
  402e96:	4603      	mov	r3, r0
  402e98:	f083 0301 	eor.w	r3, r3, #1
  402e9c:	b2db      	uxtb	r3, r3
  402e9e:	2b00      	cmp	r3, #0
  402ea0:	d001      	beq.n	402ea6 <mmc_mci_op_cond+0x26>
				SD_MMC_VOLTAGE_SUPPORT | OCR_ACCESS_MODE_SECTOR)) {
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
  402ea2:	2300      	movs	r3, #0
  402ea4:	e01e      	b.n	402ee4 <mmc_mci_op_cond+0x64>
		}
		// Check busy flag
		resp = driver_get_response();
  402ea6:	4b13      	ldr	r3, [pc, #76]	; (402ef4 <mmc_mci_op_cond+0x74>)
  402ea8:	4798      	blx	r3
  402eaa:	6038      	str	r0, [r7, #0]
		if (resp & OCR_POWER_UP_BUSY) {
  402eac:	683b      	ldr	r3, [r7, #0]
  402eae:	2b00      	cmp	r3, #0
  402eb0:	da0f      	bge.n	402ed2 <mmc_mci_op_cond+0x52>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  402eb2:	683b      	ldr	r3, [r7, #0]
  402eb4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  402eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  402ebc:	d110      	bne.n	402ee0 <mmc_mci_op_cond+0x60>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  402ebe:	4b0e      	ldr	r3, [pc, #56]	; (402ef8 <mmc_mci_op_cond+0x78>)
  402ec0:	681b      	ldr	r3, [r3, #0]
  402ec2:	4a0d      	ldr	r2, [pc, #52]	; (402ef8 <mmc_mci_op_cond+0x78>)
  402ec4:	6812      	ldr	r2, [r2, #0]
  402ec6:	7ad2      	ldrb	r2, [r2, #11]
  402ec8:	f042 0208 	orr.w	r2, r2, #8
  402ecc:	b2d2      	uxtb	r2, r2
  402ece:	72da      	strb	r2, [r3, #11]
			}
			break;
  402ed0:	e006      	b.n	402ee0 <mmc_mci_op_cond+0x60>
		}
		if (retry-- == 0) {
  402ed2:	687b      	ldr	r3, [r7, #4]
  402ed4:	1e5a      	subs	r2, r3, #1
  402ed6:	607a      	str	r2, [r7, #4]
  402ed8:	2b00      	cmp	r3, #0
  402eda:	d1d7      	bne.n	402e8c <mmc_mci_op_cond+0xc>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
  402edc:	2300      	movs	r3, #0
  402ede:	e001      	b.n	402ee4 <mmc_mci_op_cond+0x64>
			break;
  402ee0:	bf00      	nop
		}
	} while (1);
	return true;
  402ee2:	2301      	movs	r3, #1
}
  402ee4:	4618      	mov	r0, r3
  402ee6:	3708      	adds	r7, #8
  402ee8:	46bd      	mov	sp, r7
  402eea:	bd80      	pop	{r7, pc}
  402eec:	401f8000 	.word	0x401f8000
  402ef0:	00404945 	.word	0x00404945
  402ef4:	00404989 	.word	0x00404989
  402ef8:	2000ab5c 	.word	0x2000ab5c

00402efc <sd_mci_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_mci_op_cond(uint8_t v2)
{
  402efc:	b580      	push	{r7, lr}
  402efe:	b086      	sub	sp, #24
  402f00:	af00      	add	r7, sp, #0
  402f02:	4603      	mov	r3, r0
  402f04:	71fb      	strb	r3, [r7, #7]
	 * 6 = cmd byte size
	 * 6 = response byte size
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 2100;
  402f06:	f640 0334 	movw	r3, #2100	; 0x834
  402f0a:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  402f0c:	2100      	movs	r1, #0
  402f0e:	f241 1037 	movw	r0, #4407	; 0x1137
  402f12:	4b21      	ldr	r3, [pc, #132]	; (402f98 <sd_mci_op_cond+0x9c>)
  402f14:	4798      	blx	r3
  402f16:	4603      	mov	r3, r0
  402f18:	f083 0301 	eor.w	r3, r3, #1
  402f1c:	b2db      	uxtb	r3, r3
  402f1e:	2b00      	cmp	r3, #0
  402f20:	d001      	beq.n	402f26 <sd_mci_op_cond+0x2a>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
  402f22:	2300      	movs	r3, #0
  402f24:	e034      	b.n	402f90 <sd_mci_op_cond+0x94>
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  402f26:	f44f 13fc 	mov.w	r3, #2064384	; 0x1f8000
  402f2a:	617b      	str	r3, [r7, #20]
		if (v2) {
  402f2c:	79fb      	ldrb	r3, [r7, #7]
  402f2e:	2b00      	cmp	r3, #0
  402f30:	d003      	beq.n	402f3a <sd_mci_op_cond+0x3e>
			arg |= SD_ACMD41_HCS;
  402f32:	697b      	ldr	r3, [r7, #20]
  402f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  402f38:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  402f3a:	6979      	ldr	r1, [r7, #20]
  402f3c:	f244 5029 	movw	r0, #17705	; 0x4529
  402f40:	4b15      	ldr	r3, [pc, #84]	; (402f98 <sd_mci_op_cond+0x9c>)
  402f42:	4798      	blx	r3
  402f44:	4603      	mov	r3, r0
  402f46:	f083 0301 	eor.w	r3, r3, #1
  402f4a:	b2db      	uxtb	r3, r3
  402f4c:	2b00      	cmp	r3, #0
  402f4e:	d001      	beq.n	402f54 <sd_mci_op_cond+0x58>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
  402f50:	2300      	movs	r3, #0
  402f52:	e01d      	b.n	402f90 <sd_mci_op_cond+0x94>
		}
		resp = driver_get_response();
  402f54:	4b11      	ldr	r3, [pc, #68]	; (402f9c <sd_mci_op_cond+0xa0>)
  402f56:	4798      	blx	r3
  402f58:	60f8      	str	r0, [r7, #12]
		if (resp & OCR_POWER_UP_BUSY) {
  402f5a:	68fb      	ldr	r3, [r7, #12]
  402f5c:	2b00      	cmp	r3, #0
  402f5e:	da0e      	bge.n	402f7e <sd_mci_op_cond+0x82>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  402f60:	68fb      	ldr	r3, [r7, #12]
  402f62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  402f66:	2b00      	cmp	r3, #0
  402f68:	d010      	beq.n	402f8c <sd_mci_op_cond+0x90>
				sd_mmc_card->type |= CARD_TYPE_HC;
  402f6a:	4b0d      	ldr	r3, [pc, #52]	; (402fa0 <sd_mci_op_cond+0xa4>)
  402f6c:	681b      	ldr	r3, [r3, #0]
  402f6e:	4a0c      	ldr	r2, [pc, #48]	; (402fa0 <sd_mci_op_cond+0xa4>)
  402f70:	6812      	ldr	r2, [r2, #0]
  402f72:	7ad2      	ldrb	r2, [r2, #11]
  402f74:	f042 0208 	orr.w	r2, r2, #8
  402f78:	b2d2      	uxtb	r2, r2
  402f7a:	72da      	strb	r2, [r3, #11]
			}
			break;
  402f7c:	e006      	b.n	402f8c <sd_mci_op_cond+0x90>
		}
		if (retry-- == 0) {
  402f7e:	693b      	ldr	r3, [r7, #16]
  402f80:	1e5a      	subs	r2, r3, #1
  402f82:	613a      	str	r2, [r7, #16]
  402f84:	2b00      	cmp	r3, #0
  402f86:	d1c1      	bne.n	402f0c <sd_mci_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
  402f88:	2300      	movs	r3, #0
  402f8a:	e001      	b.n	402f90 <sd_mci_op_cond+0x94>
			break;
  402f8c:	bf00      	nop
		}
	} while (1);
	return true;
  402f8e:	2301      	movs	r3, #1
}
  402f90:	4618      	mov	r0, r3
  402f92:	3718      	adds	r7, #24
  402f94:	46bd      	mov	sp, r7
  402f96:	bd80      	pop	{r7, pc}
  402f98:	00404945 	.word	0x00404945
  402f9c:	00404989 	.word	0x00404989
  402fa0:	2000ab5c 	.word	0x2000ab5c

00402fa4 <sdio_op_cond>:
 *   sd_mmc_card->type is updated
 *
 * \return true if success, otherwise false
 */
static bool sdio_op_cond(void)
{
  402fa4:	b580      	push	{r7, lr}
  402fa6:	b082      	sub	sp, #8
  402fa8:	af00      	add	r7, sp, #0
	uint32_t resp;

	// CMD5 - SDIO send operation condition (OCR) command.
	if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND, 0)) {
  402faa:	2100      	movs	r1, #0
  402fac:	f244 5005 	movw	r0, #17669	; 0x4505
  402fb0:	4b23      	ldr	r3, [pc, #140]	; (403040 <sdio_op_cond+0x9c>)
  402fb2:	4798      	blx	r3
  402fb4:	4603      	mov	r3, r0
  402fb6:	f083 0301 	eor.w	r3, r3, #1
  402fba:	b2db      	uxtb	r3, r3
  402fbc:	2b00      	cmp	r3, #0
  402fbe:	d001      	beq.n	402fc4 <sdio_op_cond+0x20>
		sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
		return true; // No error but card type not updated
  402fc0:	2301      	movs	r3, #1
  402fc2:	e039      	b.n	403038 <sdio_op_cond+0x94>
	}
	resp = driver_get_response();
  402fc4:	4b1f      	ldr	r3, [pc, #124]	; (403044 <sdio_op_cond+0xa0>)
  402fc6:	4798      	blx	r3
  402fc8:	6078      	str	r0, [r7, #4]
	if ((resp & OCR_SDIO_NF) == 0) {
  402fca:	687b      	ldr	r3, [r7, #4]
  402fcc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
  402fd0:	2b00      	cmp	r3, #0
  402fd2:	d101      	bne.n	402fd8 <sdio_op_cond+0x34>
		return true; // No error but card type not updated
  402fd4:	2301      	movs	r3, #1
  402fd6:	e02f      	b.n	403038 <sdio_op_cond+0x94>
	 * Wait card ready
	 * Timeout 1s = 400KHz / ((6+4)*8) cylces = 5000 retry
	 * 6 = cmd byte size
	 * 4(SPI) 6(MCI) = response byte size
	 */
	uint32_t cmd5_retry = 5000;
  402fd8:	f241 3388 	movw	r3, #5000	; 0x1388
  402fdc:	603b      	str	r3, [r7, #0]
	while (1) {
		// CMD5 - SDIO send operation condition (OCR) command.
		if (!driver_send_cmd(SDIO_CMD5_SEND_OP_COND,
  402fde:	687b      	ldr	r3, [r7, #4]
  402fe0:	f403 13fc 	and.w	r3, r3, #2064384	; 0x1f8000
  402fe4:	4619      	mov	r1, r3
  402fe6:	f244 5005 	movw	r0, #17669	; 0x4505
  402fea:	4b15      	ldr	r3, [pc, #84]	; (403040 <sdio_op_cond+0x9c>)
  402fec:	4798      	blx	r3
  402fee:	4603      	mov	r3, r0
  402ff0:	f083 0301 	eor.w	r3, r3, #1
  402ff4:	b2db      	uxtb	r3, r3
  402ff6:	2b00      	cmp	r3, #0
  402ff8:	d001      	beq.n	402ffe <sdio_op_cond+0x5a>
				resp & SD_MMC_VOLTAGE_SUPPORT)) {
			sd_mmc_debug("%s: CMD5 Fail\n\r", __func__);
			return false;
  402ffa:	2300      	movs	r3, #0
  402ffc:	e01c      	b.n	403038 <sdio_op_cond+0x94>
		}
		resp = driver_get_response();
  402ffe:	4b11      	ldr	r3, [pc, #68]	; (403044 <sdio_op_cond+0xa0>)
  403000:	4798      	blx	r3
  403002:	6078      	str	r0, [r7, #4]
		if ((resp & OCR_POWER_UP_BUSY) == OCR_POWER_UP_BUSY) {
  403004:	687b      	ldr	r3, [r7, #4]
  403006:	2b00      	cmp	r3, #0
  403008:	db06      	blt.n	403018 <sdio_op_cond+0x74>
			break;
		}
		if (cmd5_retry-- == 0) {
  40300a:	683b      	ldr	r3, [r7, #0]
  40300c:	1e5a      	subs	r2, r3, #1
  40300e:	603a      	str	r2, [r7, #0]
  403010:	2b00      	cmp	r3, #0
  403012:	d1e4      	bne.n	402fde <sdio_op_cond+0x3a>
			sd_mmc_debug("%s: CMD5 Timeout on busy\n\r", __func__);
			return false;
  403014:	2300      	movs	r3, #0
  403016:	e00f      	b.n	403038 <sdio_op_cond+0x94>
			break;
  403018:	bf00      	nop
		}
	}
	// Update card type at the end of busy
	if ((resp & OCR_SDIO_MP) > 0) {
  40301a:	687b      	ldr	r3, [r7, #4]
  40301c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  403020:	2b00      	cmp	r3, #0
  403022:	d004      	beq.n	40302e <sdio_op_cond+0x8a>
		sd_mmc_card->type = CARD_TYPE_SD_COMBO;
  403024:	4b08      	ldr	r3, [pc, #32]	; (403048 <sdio_op_cond+0xa4>)
  403026:	681b      	ldr	r3, [r3, #0]
  403028:	2205      	movs	r2, #5
  40302a:	72da      	strb	r2, [r3, #11]
  40302c:	e003      	b.n	403036 <sdio_op_cond+0x92>
	} else {
		sd_mmc_card->type = CARD_TYPE_SDIO;
  40302e:	4b06      	ldr	r3, [pc, #24]	; (403048 <sdio_op_cond+0xa4>)
  403030:	681b      	ldr	r3, [r3, #0]
  403032:	2204      	movs	r2, #4
  403034:	72da      	strb	r2, [r3, #11]
	}
	return true; // No error and card type updated with SDIO type
  403036:	2301      	movs	r3, #1
}
  403038:	4618      	mov	r0, r3
  40303a:	3708      	adds	r7, #8
  40303c:	46bd      	mov	sp, r7
  40303e:	bd80      	pop	{r7, pc}
  403040:	00404945 	.word	0x00404945
  403044:	00404989 	.word	0x00404989
  403048:	2000ab5c 	.word	0x2000ab5c

0040304c <sdio_get_max_speed>:
 *   and update sd_mmc_card->clock
 *
 * \return true if success, otherwise false
 */
static bool sdio_get_max_speed(void)
{
  40304c:	b590      	push	{r4, r7, lr}
  40304e:	b08b      	sub	sp, #44	; 0x2c
  403050:	af02      	add	r7, sp, #8
	uint32_t mul;
	uint8_t tplfe_max_tran_speed, i;
	uint8_t addr_cis[4];

	/* Read CIS area address in CCCR area */
	addr_old = SDIO_CCCR_CIS_PTR;
  403052:	2309      	movs	r3, #9
  403054:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < 4; i++) {
  403056:	2300      	movs	r3, #0
  403058:	75bb      	strb	r3, [r7, #22]
  40305a:	e00f      	b.n	40307c <sdio_get_max_speed+0x30>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_old, 0, &addr_cis[i]);
  40305c:	7dbb      	ldrb	r3, [r7, #22]
  40305e:	463a      	mov	r2, r7
  403060:	4413      	add	r3, r2
  403062:	9300      	str	r3, [sp, #0]
  403064:	2300      	movs	r3, #0
  403066:	69ba      	ldr	r2, [r7, #24]
  403068:	2100      	movs	r1, #0
  40306a:	2000      	movs	r0, #0
  40306c:	4c46      	ldr	r4, [pc, #280]	; (403188 <sdio_get_max_speed+0x13c>)
  40306e:	47a0      	blx	r4
		addr_old++;
  403070:	69bb      	ldr	r3, [r7, #24]
  403072:	3301      	adds	r3, #1
  403074:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < 4; i++) {
  403076:	7dbb      	ldrb	r3, [r7, #22]
  403078:	3301      	adds	r3, #1
  40307a:	75bb      	strb	r3, [r7, #22]
  40307c:	7dbb      	ldrb	r3, [r7, #22]
  40307e:	2b03      	cmp	r3, #3
  403080:	d9ec      	bls.n	40305c <sdio_get_max_speed+0x10>
	}
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  403082:	783b      	ldrb	r3, [r7, #0]
  403084:	461a      	mov	r2, r3
  403086:	787b      	ldrb	r3, [r7, #1]
  403088:	021b      	lsls	r3, r3, #8
  40308a:	441a      	add	r2, r3
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  40308c:	78bb      	ldrb	r3, [r7, #2]
  40308e:	041b      	lsls	r3, r3, #16
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  403090:	441a      	add	r2, r3
				(addr_cis[2] << 16) + (addr_cis[3] << 24);
  403092:	78fb      	ldrb	r3, [r7, #3]
  403094:	061b      	lsls	r3, r3, #24
  403096:	4413      	add	r3, r2
	addr_old = addr_cis[0] + (addr_cis[1] << 8) + \
  403098:	61bb      	str	r3, [r7, #24]
	addr_new = addr_old;
  40309a:	69bb      	ldr	r3, [r7, #24]
  40309c:	61fb      	str	r3, [r7, #28]

	while (1) {
		/* Read a sample of CIA area */
		for(i=0; i<3; i++) {
  40309e:	2300      	movs	r3, #0
  4030a0:	75bb      	strb	r3, [r7, #22]
  4030a2:	e00f      	b.n	4030c4 <sdio_get_max_speed+0x78>
			sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  4030a4:	7dbb      	ldrb	r3, [r7, #22]
  4030a6:	1d3a      	adds	r2, r7, #4
  4030a8:	4413      	add	r3, r2
  4030aa:	9300      	str	r3, [sp, #0]
  4030ac:	2300      	movs	r3, #0
  4030ae:	69fa      	ldr	r2, [r7, #28]
  4030b0:	2100      	movs	r1, #0
  4030b2:	2000      	movs	r0, #0
  4030b4:	4c34      	ldr	r4, [pc, #208]	; (403188 <sdio_get_max_speed+0x13c>)
  4030b6:	47a0      	blx	r4
			addr_new++;
  4030b8:	69fb      	ldr	r3, [r7, #28]
  4030ba:	3301      	adds	r3, #1
  4030bc:	61fb      	str	r3, [r7, #28]
		for(i=0; i<3; i++) {
  4030be:	7dbb      	ldrb	r3, [r7, #22]
  4030c0:	3301      	adds	r3, #1
  4030c2:	75bb      	strb	r3, [r7, #22]
  4030c4:	7dbb      	ldrb	r3, [r7, #22]
  4030c6:	2b02      	cmp	r3, #2
  4030c8:	d9ec      	bls.n	4030a4 <sdio_get_max_speed+0x58>
		}
		if (buf[0] == SDIO_CISTPL_END) {
  4030ca:	793b      	ldrb	r3, [r7, #4]
  4030cc:	2bff      	cmp	r3, #255	; 0xff
  4030ce:	d101      	bne.n	4030d4 <sdio_get_max_speed+0x88>
			return false; /* Tuple error */
  4030d0:	2300      	movs	r3, #0
  4030d2:	e055      	b.n	403180 <sdio_get_max_speed+0x134>
		}
		if (buf[0] == SDIO_CISTPL_FUNCE && buf[2] == 0x00) {
  4030d4:	793b      	ldrb	r3, [r7, #4]
  4030d6:	2b22      	cmp	r3, #34	; 0x22
  4030d8:	d102      	bne.n	4030e0 <sdio_get_max_speed+0x94>
  4030da:	79bb      	ldrb	r3, [r7, #6]
  4030dc:	2b00      	cmp	r3, #0
  4030de:	d012      	beq.n	403106 <sdio_get_max_speed+0xba>
			break; /* Fun0 tuple found */
		}
		if (buf[1] == 0) {
  4030e0:	797b      	ldrb	r3, [r7, #5]
  4030e2:	2b00      	cmp	r3, #0
  4030e4:	d101      	bne.n	4030ea <sdio_get_max_speed+0x9e>
			return false; /* Tuple error */
  4030e6:	2300      	movs	r3, #0
  4030e8:	e04a      	b.n	403180 <sdio_get_max_speed+0x134>
		}
		/* Next address */
		addr_new += buf[1]-1;
  4030ea:	797b      	ldrb	r3, [r7, #5]
  4030ec:	461a      	mov	r2, r3
  4030ee:	69fb      	ldr	r3, [r7, #28]
  4030f0:	4413      	add	r3, r2
  4030f2:	3b01      	subs	r3, #1
  4030f4:	61fb      	str	r3, [r7, #28]
		if (addr_new > (addr_old + 256)) {
  4030f6:	69bb      	ldr	r3, [r7, #24]
  4030f8:	f503 7280 	add.w	r2, r3, #256	; 0x100
  4030fc:	69fb      	ldr	r3, [r7, #28]
  4030fe:	429a      	cmp	r2, r3
  403100:	d2cd      	bcs.n	40309e <sdio_get_max_speed+0x52>
			return false; /* Outoff CIS area */
  403102:	2300      	movs	r3, #0
  403104:	e03c      	b.n	403180 <sdio_get_max_speed+0x134>
			break; /* Fun0 tuple found */
  403106:	bf00      	nop
		}
	}

	/* Read all Fun0 tuple fields: fn0_blk_siz & max_tran_speed */
	addr_new -= 3;
  403108:	69fb      	ldr	r3, [r7, #28]
  40310a:	3b03      	subs	r3, #3
  40310c:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < 6; i++) {
  40310e:	2300      	movs	r3, #0
  403110:	75bb      	strb	r3, [r7, #22]
  403112:	e00f      	b.n	403134 <sdio_get_max_speed+0xe8>
		sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, addr_new, 0, &buf[i]);
  403114:	7dbb      	ldrb	r3, [r7, #22]
  403116:	1d3a      	adds	r2, r7, #4
  403118:	4413      	add	r3, r2
  40311a:	9300      	str	r3, [sp, #0]
  40311c:	2300      	movs	r3, #0
  40311e:	69fa      	ldr	r2, [r7, #28]
  403120:	2100      	movs	r1, #0
  403122:	2000      	movs	r0, #0
  403124:	4c18      	ldr	r4, [pc, #96]	; (403188 <sdio_get_max_speed+0x13c>)
  403126:	47a0      	blx	r4
		addr_new++;
  403128:	69fb      	ldr	r3, [r7, #28]
  40312a:	3301      	adds	r3, #1
  40312c:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < 6; i++) {
  40312e:	7dbb      	ldrb	r3, [r7, #22]
  403130:	3301      	adds	r3, #1
  403132:	75bb      	strb	r3, [r7, #22]
  403134:	7dbb      	ldrb	r3, [r7, #22]
  403136:	2b05      	cmp	r3, #5
  403138:	d9ec      	bls.n	403114 <sdio_get_max_speed+0xc8>
	}

	tplfe_max_tran_speed = buf[5];
  40313a:	7a7b      	ldrb	r3, [r7, #9]
  40313c:	75fb      	strb	r3, [r7, #23]
	if (tplfe_max_tran_speed > 0x32) {
  40313e:	7dfb      	ldrb	r3, [r7, #23]
  403140:	2b32      	cmp	r3, #50	; 0x32
  403142:	d901      	bls.n	403148 <sdio_get_max_speed+0xfc>
		/* Error on SDIO register, the high speed is not activated
		 * and the clock can not be more than 25MHz.
		 * This error is present on specific SDIO card
		 * (H&D wireless card - HDG104 WiFi SIP).
		 */
		tplfe_max_tran_speed = 0x32; /* 25Mhz */
  403144:	2332      	movs	r3, #50	; 0x32
  403146:	75fb      	strb	r3, [r7, #23]
	}

	/* Decode transfer speed in Hz.*/
	unit = sd_mmc_trans_units[tplfe_max_tran_speed & 0x7];
  403148:	7dfb      	ldrb	r3, [r7, #23]
  40314a:	f003 0307 	and.w	r3, r3, #7
  40314e:	4a0f      	ldr	r2, [pc, #60]	; (40318c <sdio_get_max_speed+0x140>)
  403150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403154:	613b      	str	r3, [r7, #16]
	mul = sd_trans_multipliers[(tplfe_max_tran_speed >> 3) & 0xF];
  403156:	7dfb      	ldrb	r3, [r7, #23]
  403158:	08db      	lsrs	r3, r3, #3
  40315a:	b2db      	uxtb	r3, r3
  40315c:	f003 030f 	and.w	r3, r3, #15
  403160:	4a0b      	ldr	r2, [pc, #44]	; (403190 <sdio_get_max_speed+0x144>)
  403162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403166:	60fb      	str	r3, [r7, #12]
	sd_mmc_card->clock = unit * mul * 1000;
  403168:	4b0a      	ldr	r3, [pc, #40]	; (403194 <sdio_get_max_speed+0x148>)
  40316a:	681b      	ldr	r3, [r3, #0]
  40316c:	693a      	ldr	r2, [r7, #16]
  40316e:	68f9      	ldr	r1, [r7, #12]
  403170:	fb01 f202 	mul.w	r2, r1, r2
  403174:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403178:	fb01 f202 	mul.w	r2, r1, r2
  40317c:	601a      	str	r2, [r3, #0]
	 * which supports upto 25MHz.
	 * A SDIO card alone can be:
	 * - a Low-Speed SDIO card which supports 400Khz minimum
	 * - a Full-Speed SDIO card which supports upto 25MHz
	 */
	return true;
  40317e:	2301      	movs	r3, #1
}
  403180:	4618      	mov	r0, r3
  403182:	3724      	adds	r7, #36	; 0x24
  403184:	46bd      	mov	sp, r7
  403186:	bd90      	pop	{r4, r7, pc}
  403188:	0040381d 	.word	0x0040381d
  40318c:	0040b598 	.word	0x0040b598
  403190:	0040b5b4 	.word	0x0040b5b4
  403194:	2000ab5c 	.word	0x2000ab5c

00403198 <sdio_cmd52_set_bus_width>:
 * \note sd_mmc_card->bus_width is updated.
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52_set_bus_width(void)
{
  403198:	b590      	push	{r4, r7, lr}
  40319a:	b085      	sub	sp, #20
  40319c:	af02      	add	r7, sp, #8
	 * A SDIO Low-Speed alone can supports 4bit (Optional)
	 */
	uint8_t u8_value;

	// Check 4bit support in 4BLS of "Card Capability" register
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_CAP,
  40319e:	1dfb      	adds	r3, r7, #7
  4031a0:	9300      	str	r3, [sp, #0]
  4031a2:	2300      	movs	r3, #0
  4031a4:	2208      	movs	r2, #8
  4031a6:	2100      	movs	r1, #0
  4031a8:	2000      	movs	r0, #0
  4031aa:	4c15      	ldr	r4, [pc, #84]	; (403200 <sdio_cmd52_set_bus_width+0x68>)
  4031ac:	47a0      	blx	r4
  4031ae:	4603      	mov	r3, r0
  4031b0:	f083 0301 	eor.w	r3, r3, #1
  4031b4:	b2db      	uxtb	r3, r3
  4031b6:	2b00      	cmp	r3, #0
  4031b8:	d001      	beq.n	4031be <sdio_cmd52_set_bus_width+0x26>
			0, &u8_value)) {
		return false;
  4031ba:	2300      	movs	r3, #0
  4031bc:	e01c      	b.n	4031f8 <sdio_cmd52_set_bus_width+0x60>
	}
	if ((u8_value & SDIO_CAP_4BLS) != SDIO_CAP_4BLS) {
  4031be:	79fb      	ldrb	r3, [r7, #7]
  4031c0:	b25b      	sxtb	r3, r3
  4031c2:	2b00      	cmp	r3, #0
  4031c4:	db01      	blt.n	4031ca <sdio_cmd52_set_bus_width+0x32>
		// No supported, it is not a protocol error
		return true;
  4031c6:	2301      	movs	r3, #1
  4031c8:	e016      	b.n	4031f8 <sdio_cmd52_set_bus_width+0x60>
	}
	// HS mode possible, then enable
	u8_value = SDIO_BUSWIDTH_4B;
  4031ca:	2302      	movs	r3, #2
  4031cc:	71fb      	strb	r3, [r7, #7]
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_BUS_CTRL,
  4031ce:	1dfb      	adds	r3, r7, #7
  4031d0:	9300      	str	r3, [sp, #0]
  4031d2:	2301      	movs	r3, #1
  4031d4:	2207      	movs	r2, #7
  4031d6:	2100      	movs	r1, #0
  4031d8:	2001      	movs	r0, #1
  4031da:	4c09      	ldr	r4, [pc, #36]	; (403200 <sdio_cmd52_set_bus_width+0x68>)
  4031dc:	47a0      	blx	r4
  4031de:	4603      	mov	r3, r0
  4031e0:	f083 0301 	eor.w	r3, r3, #1
  4031e4:	b2db      	uxtb	r3, r3
  4031e6:	2b00      	cmp	r3, #0
  4031e8:	d001      	beq.n	4031ee <sdio_cmd52_set_bus_width+0x56>
			1, &u8_value)) {
		return false;
  4031ea:	2300      	movs	r3, #0
  4031ec:	e004      	b.n	4031f8 <sdio_cmd52_set_bus_width+0x60>
	}
	sd_mmc_card->bus_width = 4;
  4031ee:	4b05      	ldr	r3, [pc, #20]	; (403204 <sdio_cmd52_set_bus_width+0x6c>)
  4031f0:	681b      	ldr	r3, [r3, #0]
  4031f2:	2204      	movs	r2, #4
  4031f4:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  4031f6:	2301      	movs	r3, #1
}
  4031f8:	4618      	mov	r0, r3
  4031fa:	370c      	adds	r7, #12
  4031fc:	46bd      	mov	sp, r7
  4031fe:	bd90      	pop	{r4, r7, pc}
  403200:	0040381d 	.word	0x0040381d
  403204:	2000ab5c 	.word	0x2000ab5c

00403208 <sdio_cmd52_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52_set_high_speed(void)
{
  403208:	b590      	push	{r4, r7, lr}
  40320a:	b085      	sub	sp, #20
  40320c:	af02      	add	r7, sp, #8
	uint8_t u8_value;

	// Check CIA.HS
	if (!sdio_cmd52(SDIO_CMD52_READ_FLAG, SDIO_CIA, SDIO_CCCR_HS, 0, &u8_value)) {
  40320e:	1dfb      	adds	r3, r7, #7
  403210:	9300      	str	r3, [sp, #0]
  403212:	2300      	movs	r3, #0
  403214:	2213      	movs	r2, #19
  403216:	2100      	movs	r1, #0
  403218:	2000      	movs	r0, #0
  40321a:	4c19      	ldr	r4, [pc, #100]	; (403280 <sdio_cmd52_set_high_speed+0x78>)
  40321c:	47a0      	blx	r4
  40321e:	4603      	mov	r3, r0
  403220:	f083 0301 	eor.w	r3, r3, #1
  403224:	b2db      	uxtb	r3, r3
  403226:	2b00      	cmp	r3, #0
  403228:	d001      	beq.n	40322e <sdio_cmd52_set_high_speed+0x26>
		return false;
  40322a:	2300      	movs	r3, #0
  40322c:	e024      	b.n	403278 <sdio_cmd52_set_high_speed+0x70>
	}
	if ((u8_value & SDIO_SHS) != SDIO_SHS) {
  40322e:	79fb      	ldrb	r3, [r7, #7]
  403230:	f003 0301 	and.w	r3, r3, #1
  403234:	2b00      	cmp	r3, #0
  403236:	d101      	bne.n	40323c <sdio_cmd52_set_high_speed+0x34>
		// No supported, it is not a protocol error
		return true;
  403238:	2301      	movs	r3, #1
  40323a:	e01d      	b.n	403278 <sdio_cmd52_set_high_speed+0x70>
	}
	// HS mode possible, then enable
	u8_value = SDIO_EHS;
  40323c:	2302      	movs	r3, #2
  40323e:	71fb      	strb	r3, [r7, #7]
	if (!sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA, SDIO_CCCR_HS,
  403240:	1dfb      	adds	r3, r7, #7
  403242:	9300      	str	r3, [sp, #0]
  403244:	2301      	movs	r3, #1
  403246:	2213      	movs	r2, #19
  403248:	2100      	movs	r1, #0
  40324a:	2001      	movs	r0, #1
  40324c:	4c0c      	ldr	r4, [pc, #48]	; (403280 <sdio_cmd52_set_high_speed+0x78>)
  40324e:	47a0      	blx	r4
  403250:	4603      	mov	r3, r0
  403252:	f083 0301 	eor.w	r3, r3, #1
  403256:	b2db      	uxtb	r3, r3
  403258:	2b00      	cmp	r3, #0
  40325a:	d001      	beq.n	403260 <sdio_cmd52_set_high_speed+0x58>
			1, &u8_value)) {
		return false;
  40325c:	2300      	movs	r3, #0
  40325e:	e00b      	b.n	403278 <sdio_cmd52_set_high_speed+0x70>
	}
	sd_mmc_card->high_speed = 1;
  403260:	4b08      	ldr	r3, [pc, #32]	; (403284 <sdio_cmd52_set_high_speed+0x7c>)
  403262:	681b      	ldr	r3, [r3, #0]
  403264:	2201      	movs	r2, #1
  403266:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  403268:	4b06      	ldr	r3, [pc, #24]	; (403284 <sdio_cmd52_set_high_speed+0x7c>)
  40326a:	681b      	ldr	r3, [r3, #0]
  40326c:	4a05      	ldr	r2, [pc, #20]	; (403284 <sdio_cmd52_set_high_speed+0x7c>)
  40326e:	6812      	ldr	r2, [r2, #0]
  403270:	6812      	ldr	r2, [r2, #0]
  403272:	0052      	lsls	r2, r2, #1
  403274:	601a      	str	r2, [r3, #0]
	return true;
  403276:	2301      	movs	r3, #1
}
  403278:	4618      	mov	r0, r3
  40327a:	370c      	adds	r7, #12
  40327c:	46bd      	mov	sp, r7
  40327e:	bd90      	pop	{r4, r7, pc}
  403280:	0040381d 	.word	0x0040381d
  403284:	2000ab5c 	.word	0x2000ab5c

00403288 <sd_cm6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool sd_cm6_set_high_speed(void)
{
  403288:	b590      	push	{r4, r7, lr}
  40328a:	b093      	sub	sp, #76	; 0x4c
  40328c:	af02      	add	r7, sp, #8
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  40328e:	463b      	mov	r3, r7
  403290:	2240      	movs	r2, #64	; 0x40
  403292:	2100      	movs	r1, #0
  403294:	4618      	mov	r0, r3
  403296:	4b2f      	ldr	r3, [pc, #188]	; (403354 <sd_cm6_set_high_speed+0xcc>)
  403298:	4798      	blx	r3

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  40329a:	2301      	movs	r3, #1
  40329c:	9300      	str	r3, [sp, #0]
  40329e:	2301      	movs	r3, #1
  4032a0:	2240      	movs	r2, #64	; 0x40
  4032a2:	492d      	ldr	r1, [pc, #180]	; (403358 <sd_cm6_set_high_speed+0xd0>)
  4032a4:	482d      	ldr	r0, [pc, #180]	; (40335c <sd_cm6_set_high_speed+0xd4>)
  4032a6:	4c2e      	ldr	r4, [pc, #184]	; (403360 <sd_cm6_set_high_speed+0xd8>)
  4032a8:	47a0      	blx	r4
  4032aa:	4603      	mov	r3, r0
  4032ac:	f083 0301 	eor.w	r3, r3, #1
  4032b0:	b2db      	uxtb	r3, r3
  4032b2:	2b00      	cmp	r3, #0
  4032b4:	d001      	beq.n	4032ba <sd_cm6_set_high_speed+0x32>
			| SD_CMD6_GRP4_NO_INFLUENCE
			| SD_CMD6_GRP3_NO_INFLUENCE
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
  4032b6:	2300      	movs	r3, #0
  4032b8:	e047      	b.n	40334a <sd_cm6_set_high_speed+0xc2>
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  4032ba:	463b      	mov	r3, r7
  4032bc:	2101      	movs	r1, #1
  4032be:	4618      	mov	r0, r3
  4032c0:	4b28      	ldr	r3, [pc, #160]	; (403364 <sd_cm6_set_high_speed+0xdc>)
  4032c2:	4798      	blx	r3
  4032c4:	4603      	mov	r3, r0
  4032c6:	f083 0301 	eor.w	r3, r3, #1
  4032ca:	b2db      	uxtb	r3, r3
  4032cc:	2b00      	cmp	r3, #0
  4032ce:	d001      	beq.n	4032d4 <sd_cm6_set_high_speed+0x4c>
		return false;
  4032d0:	2300      	movs	r3, #0
  4032d2:	e03a      	b.n	40334a <sd_cm6_set_high_speed+0xc2>
	}
	if (!driver_wait_end_of_read_blocks()) {
  4032d4:	4b24      	ldr	r3, [pc, #144]	; (403368 <sd_cm6_set_high_speed+0xe0>)
  4032d6:	4798      	blx	r3
  4032d8:	4603      	mov	r3, r0
  4032da:	f083 0301 	eor.w	r3, r3, #1
  4032de:	b2db      	uxtb	r3, r3
  4032e0:	2b00      	cmp	r3, #0
  4032e2:	d001      	beq.n	4032e8 <sd_cm6_set_high_speed+0x60>
		return false;
  4032e4:	2300      	movs	r3, #0
  4032e6:	e030      	b.n	40334a <sd_cm6_set_high_speed+0xc2>
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4032e8:	4b20      	ldr	r3, [pc, #128]	; (40336c <sd_cm6_set_high_speed+0xe4>)
  4032ea:	4798      	blx	r3
  4032ec:	4603      	mov	r3, r0
  4032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4032f2:	2b00      	cmp	r3, #0
  4032f4:	d001      	beq.n	4032fa <sd_cm6_set_high_speed+0x72>
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  4032f6:	2300      	movs	r3, #0
  4032f8:	e027      	b.n	40334a <sd_cm6_set_high_speed+0xc2>
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  4032fa:	4638      	mov	r0, r7
  4032fc:	2304      	movs	r3, #4
  4032fe:	f44f 72bc 	mov.w	r2, #376	; 0x178
  403302:	f44f 7100 	mov.w	r1, #512	; 0x200
  403306:	4c1a      	ldr	r4, [pc, #104]	; (403370 <sd_cm6_set_high_speed+0xe8>)
  403308:	47a0      	blx	r4
  40330a:	4603      	mov	r3, r0
  40330c:	2b0f      	cmp	r3, #15
  40330e:	d101      	bne.n	403314 <sd_cm6_set_high_speed+0x8c>
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
  403310:	2301      	movs	r3, #1
  403312:	e01a      	b.n	40334a <sd_cm6_set_high_speed+0xc2>
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  403314:	4638      	mov	r0, r7
  403316:	2310      	movs	r3, #16
  403318:	f44f 7288 	mov.w	r2, #272	; 0x110
  40331c:	f44f 7100 	mov.w	r1, #512	; 0x200
  403320:	4c13      	ldr	r4, [pc, #76]	; (403370 <sd_cm6_set_high_speed+0xe8>)
  403322:	47a0      	blx	r4
  403324:	4603      	mov	r3, r0
  403326:	2b00      	cmp	r3, #0
  403328:	d001      	beq.n	40332e <sd_cm6_set_high_speed+0xa6>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
  40332a:	2300      	movs	r3, #0
  40332c:	e00d      	b.n	40334a <sd_cm6_set_high_speed+0xc2>
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  40332e:	4b11      	ldr	r3, [pc, #68]	; (403374 <sd_cm6_set_high_speed+0xec>)
  403330:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  403332:	4b11      	ldr	r3, [pc, #68]	; (403378 <sd_cm6_set_high_speed+0xf0>)
  403334:	681b      	ldr	r3, [r3, #0]
  403336:	2201      	movs	r2, #1
  403338:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock *= 2;
  40333a:	4b0f      	ldr	r3, [pc, #60]	; (403378 <sd_cm6_set_high_speed+0xf0>)
  40333c:	681b      	ldr	r3, [r3, #0]
  40333e:	4a0e      	ldr	r2, [pc, #56]	; (403378 <sd_cm6_set_high_speed+0xf0>)
  403340:	6812      	ldr	r2, [r2, #0]
  403342:	6812      	ldr	r2, [r2, #0]
  403344:	0052      	lsls	r2, r2, #1
  403346:	601a      	str	r2, [r3, #0]
	return true;
  403348:	2301      	movs	r3, #1
}
  40334a:	4618      	mov	r0, r3
  40334c:	3744      	adds	r7, #68	; 0x44
  40334e:	46bd      	mov	sp, r7
  403350:	bd90      	pop	{r4, r7, pc}
  403352:	bf00      	nop
  403354:	00406981 	.word	0x00406981
  403358:	80ffff01 	.word	0x80ffff01
  40335c:	00081106 	.word	0x00081106
  403360:	00404a11 	.word	0x00404a11
  403364:	00404bd5 	.word	0x00404bd5
  403368:	00404c75 	.word	0x00404c75
  40336c:	00404989 	.word	0x00404989
  403370:	00402d6d 	.word	0x00402d6d
  403374:	00404909 	.word	0x00404909
  403378:	2000ab5c 	.word	0x2000ab5c

0040337c <mmc_cmd6_set_bus_width>:
 * \param bus_width   Bus width to set
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
  40337c:	b580      	push	{r7, lr}
  40337e:	b084      	sub	sp, #16
  403380:	af00      	add	r7, sp, #0
  403382:	4603      	mov	r3, r0
  403384:	71fb      	strb	r3, [r7, #7]
	uint32_t arg;

	switch (bus_width) {
  403386:	79fb      	ldrb	r3, [r7, #7]
  403388:	2b04      	cmp	r3, #4
  40338a:	d004      	beq.n	403396 <mmc_cmd6_set_bus_width+0x1a>
  40338c:	2b08      	cmp	r3, #8
  40338e:	d105      	bne.n	40339c <mmc_cmd6_set_bus_width+0x20>
	case 8:
		arg = MMC_CMD6_ACCESS_SET_BITS
  403390:	4b13      	ldr	r3, [pc, #76]	; (4033e0 <mmc_cmd6_set_bus_width+0x64>)
  403392:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
  403394:	e005      	b.n	4033a2 <mmc_cmd6_set_bus_width+0x26>
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  403396:	4b13      	ldr	r3, [pc, #76]	; (4033e4 <mmc_cmd6_set_bus_width+0x68>)
  403398:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
  40339a:	e002      	b.n	4033a2 <mmc_cmd6_set_bus_width+0x26>
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  40339c:	4b12      	ldr	r3, [pc, #72]	; (4033e8 <mmc_cmd6_set_bus_width+0x6c>)
  40339e:	60fb      	str	r3, [r7, #12]
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
  4033a0:	bf00      	nop
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  4033a2:	68f9      	ldr	r1, [r7, #12]
  4033a4:	f243 1006 	movw	r0, #12550	; 0x3106
  4033a8:	4b10      	ldr	r3, [pc, #64]	; (4033ec <mmc_cmd6_set_bus_width+0x70>)
  4033aa:	4798      	blx	r3
  4033ac:	4603      	mov	r3, r0
  4033ae:	f083 0301 	eor.w	r3, r3, #1
  4033b2:	b2db      	uxtb	r3, r3
  4033b4:	2b00      	cmp	r3, #0
  4033b6:	d001      	beq.n	4033bc <mmc_cmd6_set_bus_width+0x40>
		return false;
  4033b8:	2300      	movs	r3, #0
  4033ba:	e00d      	b.n	4033d8 <mmc_cmd6_set_bus_width+0x5c>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  4033bc:	4b0c      	ldr	r3, [pc, #48]	; (4033f0 <mmc_cmd6_set_bus_width+0x74>)
  4033be:	4798      	blx	r3
  4033c0:	4603      	mov	r3, r0
  4033c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4033c6:	2b00      	cmp	r3, #0
  4033c8:	d001      	beq.n	4033ce <mmc_cmd6_set_bus_width+0x52>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  4033ca:	2300      	movs	r3, #0
  4033cc:	e004      	b.n	4033d8 <mmc_cmd6_set_bus_width+0x5c>
	}
	sd_mmc_card->bus_width = bus_width;
  4033ce:	4b09      	ldr	r3, [pc, #36]	; (4033f4 <mmc_cmd6_set_bus_width+0x78>)
  4033d0:	681b      	ldr	r3, [r3, #0]
  4033d2:	79fa      	ldrb	r2, [r7, #7]
  4033d4:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  4033d6:	2301      	movs	r3, #1
}
  4033d8:	4618      	mov	r0, r3
  4033da:	3710      	adds	r7, #16
  4033dc:	46bd      	mov	sp, r7
  4033de:	bd80      	pop	{r7, pc}
  4033e0:	01b70200 	.word	0x01b70200
  4033e4:	01b70100 	.word	0x01b70100
  4033e8:	01b70000 	.word	0x01b70000
  4033ec:	00404945 	.word	0x00404945
  4033f0:	00404989 	.word	0x00404989
  4033f4:	2000ab5c 	.word	0x2000ab5c

004033f8 <mmc_cmd6_set_high_speed>:
 * \note sd_mmc_card->clock is updated.
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
  4033f8:	b580      	push	{r7, lr}
  4033fa:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  4033fc:	4910      	ldr	r1, [pc, #64]	; (403440 <mmc_cmd6_set_high_speed+0x48>)
  4033fe:	f243 1006 	movw	r0, #12550	; 0x3106
  403402:	4b10      	ldr	r3, [pc, #64]	; (403444 <mmc_cmd6_set_high_speed+0x4c>)
  403404:	4798      	blx	r3
  403406:	4603      	mov	r3, r0
  403408:	f083 0301 	eor.w	r3, r3, #1
  40340c:	b2db      	uxtb	r3, r3
  40340e:	2b00      	cmp	r3, #0
  403410:	d001      	beq.n	403416 <mmc_cmd6_set_high_speed+0x1e>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
  403412:	2300      	movs	r3, #0
  403414:	e011      	b.n	40343a <mmc_cmd6_set_high_speed+0x42>
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  403416:	4b0c      	ldr	r3, [pc, #48]	; (403448 <mmc_cmd6_set_high_speed+0x50>)
  403418:	4798      	blx	r3
  40341a:	4603      	mov	r3, r0
  40341c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403420:	2b00      	cmp	r3, #0
  403422:	d001      	beq.n	403428 <mmc_cmd6_set_high_speed+0x30>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
  403424:	2300      	movs	r3, #0
  403426:	e008      	b.n	40343a <mmc_cmd6_set_high_speed+0x42>
	}
	sd_mmc_card->high_speed = 1;
  403428:	4b08      	ldr	r3, [pc, #32]	; (40344c <mmc_cmd6_set_high_speed+0x54>)
  40342a:	681b      	ldr	r3, [r3, #0]
  40342c:	2201      	movs	r2, #1
  40342e:	779a      	strb	r2, [r3, #30]
	sd_mmc_card->clock = 52000000lu;
  403430:	4b06      	ldr	r3, [pc, #24]	; (40344c <mmc_cmd6_set_high_speed+0x54>)
  403432:	681b      	ldr	r3, [r3, #0]
  403434:	4a06      	ldr	r2, [pc, #24]	; (403450 <mmc_cmd6_set_high_speed+0x58>)
  403436:	601a      	str	r2, [r3, #0]
	return true;
  403438:	2301      	movs	r3, #1
}
  40343a:	4618      	mov	r0, r3
  40343c:	bd80      	pop	{r7, pc}
  40343e:	bf00      	nop
  403440:	03b90100 	.word	0x03b90100
  403444:	00404945 	.word	0x00404945
  403448:	00404989 	.word	0x00404989
  40344c:	2000ab5c 	.word	0x2000ab5c
  403450:	03197500 	.word	0x03197500

00403454 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
  403454:	b580      	push	{r7, lr}
  403456:	b084      	sub	sp, #16
  403458:	af00      	add	r7, sp, #0
  40345a:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
  40345c:	687b      	ldr	r3, [r7, #4]
  40345e:	2200      	movs	r2, #0
  403460:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  403462:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  403466:	f245 5008 	movw	r0, #21768	; 0x5508
  40346a:	4b11      	ldr	r3, [pc, #68]	; (4034b0 <sd_cmd8+0x5c>)
  40346c:	4798      	blx	r3
  40346e:	4603      	mov	r3, r0
  403470:	f083 0301 	eor.w	r3, r3, #1
  403474:	b2db      	uxtb	r3, r3
  403476:	2b00      	cmp	r3, #0
  403478:	d001      	beq.n	40347e <sd_cmd8+0x2a>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
  40347a:	2301      	movs	r3, #1
  40347c:	e014      	b.n	4034a8 <sd_cmd8+0x54>
	}
	// Check R7 response
	resp = driver_get_response();
  40347e:	4b0d      	ldr	r3, [pc, #52]	; (4034b4 <sd_cmd8+0x60>)
  403480:	4798      	blx	r3
  403482:	60f8      	str	r0, [r7, #12]
	if (resp == 0xFFFFFFFF) {
  403484:	68fb      	ldr	r3, [r7, #12]
  403486:	f1b3 3fff 	cmp.w	r3, #4294967295
  40348a:	d101      	bne.n	403490 <sd_cmd8+0x3c>
		// No compliance R7 value
		return true; // It is not a V2
  40348c:	2301      	movs	r3, #1
  40348e:	e00b      	b.n	4034a8 <sd_cmd8+0x54>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  403490:	68fb      	ldr	r3, [r7, #12]
  403492:	f3c3 030b 	ubfx	r3, r3, #0, #12
  403496:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
  40349a:	d001      	beq.n	4034a0 <sd_cmd8+0x4c>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
  40349c:	2300      	movs	r3, #0
  40349e:	e003      	b.n	4034a8 <sd_cmd8+0x54>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  4034a0:	687b      	ldr	r3, [r7, #4]
  4034a2:	2201      	movs	r2, #1
  4034a4:	701a      	strb	r2, [r3, #0]
	return true;
  4034a6:	2301      	movs	r3, #1
}
  4034a8:	4618      	mov	r0, r3
  4034aa:	3710      	adds	r7, #16
  4034ac:	46bd      	mov	sp, r7
  4034ae:	bd80      	pop	{r7, pc}
  4034b0:	00404945 	.word	0x00404945
  4034b4:	00404989 	.word	0x00404989

004034b8 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
  4034b8:	b590      	push	{r4, r7, lr}
  4034ba:	b089      	sub	sp, #36	; 0x24
  4034bc:	af02      	add	r7, sp, #8
  4034be:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  4034c0:	2300      	movs	r3, #0
  4034c2:	9300      	str	r3, [sp, #0]
  4034c4:	2301      	movs	r3, #1
  4034c6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4034ca:	2100      	movs	r1, #0
  4034cc:	4833      	ldr	r0, [pc, #204]	; (40359c <mmc_cmd8+0xe4>)
  4034ce:	4c34      	ldr	r4, [pc, #208]	; (4035a0 <mmc_cmd8+0xe8>)
  4034d0:	47a0      	blx	r4
  4034d2:	4603      	mov	r3, r0
  4034d4:	f083 0301 	eor.w	r3, r3, #1
  4034d8:	b2db      	uxtb	r3, r3
  4034da:	2b00      	cmp	r3, #0
  4034dc:	d001      	beq.n	4034e2 <mmc_cmd8+0x2a>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
  4034de:	2300      	movs	r3, #0
  4034e0:	e058      	b.n	403594 <mmc_cmd8+0xdc>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  4034e2:	2300      	movs	r3, #0
  4034e4:	82fb      	strh	r3, [r7, #22]
  4034e6:	e00f      	b.n	403508 <mmc_cmd8+0x50>
		if (!driver_read_word(&ext_csd)) {
  4034e8:	f107 0310 	add.w	r3, r7, #16
  4034ec:	4618      	mov	r0, r3
  4034ee:	4b2d      	ldr	r3, [pc, #180]	; (4035a4 <mmc_cmd8+0xec>)
  4034f0:	4798      	blx	r3
  4034f2:	4603      	mov	r3, r0
  4034f4:	f083 0301 	eor.w	r3, r3, #1
  4034f8:	b2db      	uxtb	r3, r3
  4034fa:	2b00      	cmp	r3, #0
  4034fc:	d001      	beq.n	403502 <mmc_cmd8+0x4a>
			return false;
  4034fe:	2300      	movs	r3, #0
  403500:	e048      	b.n	403594 <mmc_cmd8+0xdc>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  403502:	8afb      	ldrh	r3, [r7, #22]
  403504:	3301      	adds	r3, #1
  403506:	82fb      	strh	r3, [r7, #22]
  403508:	8afb      	ldrh	r3, [r7, #22]
  40350a:	2b31      	cmp	r3, #49	; 0x31
  40350c:	d9ec      	bls.n	4034e8 <mmc_cmd8+0x30>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
  40350e:	693b      	ldr	r3, [r7, #16]
  403510:	b2db      	uxtb	r3, r3
  403512:	f003 0302 	and.w	r3, r3, #2
  403516:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  403518:	687b      	ldr	r3, [r7, #4]
  40351a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  40351c:	4b22      	ldr	r3, [pc, #136]	; (4035a8 <mmc_cmd8+0xf0>)
  40351e:	681b      	ldr	r3, [r3, #0]
  403520:	f103 000e 	add.w	r0, r3, #14
  403524:	230c      	movs	r3, #12
  403526:	223e      	movs	r2, #62	; 0x3e
  403528:	2180      	movs	r1, #128	; 0x80
  40352a:	4c20      	ldr	r4, [pc, #128]	; (4035ac <mmc_cmd8+0xf4>)
  40352c:	47a0      	blx	r4
  40352e:	4602      	mov	r2, r0
  403530:	f640 73ff 	movw	r3, #4095	; 0xfff
  403534:	429a      	cmp	r2, r3
  403536:	d129      	bne.n	40358c <mmc_cmd8+0xd4>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  403538:	e00f      	b.n	40355a <mmc_cmd8+0xa2>
			if (!driver_read_word(&sec_count)) {
  40353a:	f107 030c 	add.w	r3, r7, #12
  40353e:	4618      	mov	r0, r3
  403540:	4b18      	ldr	r3, [pc, #96]	; (4035a4 <mmc_cmd8+0xec>)
  403542:	4798      	blx	r3
  403544:	4603      	mov	r3, r0
  403546:	f083 0301 	eor.w	r3, r3, #1
  40354a:	b2db      	uxtb	r3, r3
  40354c:	2b00      	cmp	r3, #0
  40354e:	d001      	beq.n	403554 <mmc_cmd8+0x9c>
				return false;
  403550:	2300      	movs	r3, #0
  403552:	e01f      	b.n	403594 <mmc_cmd8+0xdc>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  403554:	8afb      	ldrh	r3, [r7, #22]
  403556:	3301      	adds	r3, #1
  403558:	82fb      	strh	r3, [r7, #22]
  40355a:	8afb      	ldrh	r3, [r7, #22]
  40355c:	2b35      	cmp	r3, #53	; 0x35
  40355e:	d9ec      	bls.n	40353a <mmc_cmd8+0x82>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  403560:	4b11      	ldr	r3, [pc, #68]	; (4035a8 <mmc_cmd8+0xf0>)
  403562:	681b      	ldr	r3, [r3, #0]
  403564:	68fa      	ldr	r2, [r7, #12]
  403566:	0852      	lsrs	r2, r2, #1
  403568:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  40356a:	e00f      	b.n	40358c <mmc_cmd8+0xd4>
		if (!driver_read_word(&sec_count)) {
  40356c:	f107 030c 	add.w	r3, r7, #12
  403570:	4618      	mov	r0, r3
  403572:	4b0c      	ldr	r3, [pc, #48]	; (4035a4 <mmc_cmd8+0xec>)
  403574:	4798      	blx	r3
  403576:	4603      	mov	r3, r0
  403578:	f083 0301 	eor.w	r3, r3, #1
  40357c:	b2db      	uxtb	r3, r3
  40357e:	2b00      	cmp	r3, #0
  403580:	d001      	beq.n	403586 <mmc_cmd8+0xce>
			return false;
  403582:	2300      	movs	r3, #0
  403584:	e006      	b.n	403594 <mmc_cmd8+0xdc>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  403586:	8afb      	ldrh	r3, [r7, #22]
  403588:	3301      	adds	r3, #1
  40358a:	82fb      	strh	r3, [r7, #22]
  40358c:	8afb      	ldrh	r3, [r7, #22]
  40358e:	2b7f      	cmp	r3, #127	; 0x7f
  403590:	d9ec      	bls.n	40356c <mmc_cmd8+0xb4>
		}
	}
	return true;
  403592:	2301      	movs	r3, #1
}
  403594:	4618      	mov	r0, r3
  403596:	371c      	adds	r7, #28
  403598:	46bd      	mov	sp, r7
  40359a:	bd90      	pop	{r4, r7, pc}
  40359c:	00081108 	.word	0x00081108
  4035a0:	00404a11 	.word	0x00404a11
  4035a4:	00404b39 	.word	0x00404b39
  4035a8:	2000ab5c 	.word	0x2000ab5c
  4035ac:	00402d6d 	.word	0x00402d6d

004035b0 <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  4035b0:	b580      	push	{r7, lr}
  4035b2:	af00      	add	r7, sp, #0
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  4035b4:	4b0c      	ldr	r3, [pc, #48]	; (4035e8 <sd_mmc_cmd9_mci+0x38>)
  4035b6:	681b      	ldr	r3, [r3, #0]
  4035b8:	891b      	ldrh	r3, [r3, #8]
  4035ba:	041b      	lsls	r3, r3, #16
  4035bc:	4619      	mov	r1, r3
  4035be:	f641 3009 	movw	r0, #6921	; 0x1b09
  4035c2:	4b0a      	ldr	r3, [pc, #40]	; (4035ec <sd_mmc_cmd9_mci+0x3c>)
  4035c4:	4798      	blx	r3
  4035c6:	4603      	mov	r3, r0
  4035c8:	f083 0301 	eor.w	r3, r3, #1
  4035cc:	b2db      	uxtb	r3, r3
  4035ce:	2b00      	cmp	r3, #0
  4035d0:	d001      	beq.n	4035d6 <sd_mmc_cmd9_mci+0x26>
		return false;
  4035d2:	2300      	movs	r3, #0
  4035d4:	e006      	b.n	4035e4 <sd_mmc_cmd9_mci+0x34>
	}
	driver_get_response_128(sd_mmc_card->csd);
  4035d6:	4b04      	ldr	r3, [pc, #16]	; (4035e8 <sd_mmc_cmd9_mci+0x38>)
  4035d8:	681b      	ldr	r3, [r3, #0]
  4035da:	330e      	adds	r3, #14
  4035dc:	4618      	mov	r0, r3
  4035de:	4b04      	ldr	r3, [pc, #16]	; (4035f0 <sd_mmc_cmd9_mci+0x40>)
  4035e0:	4798      	blx	r3
	return true;
  4035e2:	2301      	movs	r3, #1
}
  4035e4:	4618      	mov	r0, r3
  4035e6:	bd80      	pop	{r7, pc}
  4035e8:	2000ab5c 	.word	0x2000ab5c
  4035ec:	00404945 	.word	0x00404945
  4035f0:	004049a1 	.word	0x004049a1

004035f4 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
  4035f4:	b5b0      	push	{r4, r5, r7, lr}
  4035f6:	b084      	sub	sp, #16
  4035f8:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  4035fa:	4b48      	ldr	r3, [pc, #288]	; (40371c <mmc_decode_csd+0x128>)
  4035fc:	681b      	ldr	r3, [r3, #0]
  4035fe:	f103 000e 	add.w	r0, r3, #14
  403602:	2304      	movs	r3, #4
  403604:	227a      	movs	r2, #122	; 0x7a
  403606:	2180      	movs	r1, #128	; 0x80
  403608:	4c45      	ldr	r4, [pc, #276]	; (403720 <mmc_decode_csd+0x12c>)
  40360a:	47a0      	blx	r4
  40360c:	4603      	mov	r3, r0
  40360e:	3b01      	subs	r3, #1
  403610:	2b03      	cmp	r3, #3
  403612:	d80b      	bhi.n	40362c <mmc_decode_csd+0x38>
  403614:	a201      	add	r2, pc, #4	; (adr r2, 40361c <mmc_decode_csd+0x28>)
  403616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40361a:	bf00      	nop
  40361c:	00403637 	.word	0x00403637
  403620:	00403641 	.word	0x00403641
  403624:	0040364b 	.word	0x0040364b
  403628:	00403655 	.word	0x00403655
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  40362c:	4b3b      	ldr	r3, [pc, #236]	; (40371c <mmc_decode_csd+0x128>)
  40362e:	681b      	ldr	r3, [r3, #0]
  403630:	2212      	movs	r2, #18
  403632:	731a      	strb	r2, [r3, #12]
		break;
  403634:	e013      	b.n	40365e <mmc_decode_csd+0x6a>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  403636:	4b39      	ldr	r3, [pc, #228]	; (40371c <mmc_decode_csd+0x128>)
  403638:	681b      	ldr	r3, [r3, #0]
  40363a:	2214      	movs	r2, #20
  40363c:	731a      	strb	r2, [r3, #12]
		break;
  40363e:	e00e      	b.n	40365e <mmc_decode_csd+0x6a>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  403640:	4b36      	ldr	r3, [pc, #216]	; (40371c <mmc_decode_csd+0x128>)
  403642:	681b      	ldr	r3, [r3, #0]
  403644:	2222      	movs	r2, #34	; 0x22
  403646:	731a      	strb	r2, [r3, #12]
		break;
  403648:	e009      	b.n	40365e <mmc_decode_csd+0x6a>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  40364a:	4b34      	ldr	r3, [pc, #208]	; (40371c <mmc_decode_csd+0x128>)
  40364c:	681b      	ldr	r3, [r3, #0]
  40364e:	2230      	movs	r2, #48	; 0x30
  403650:	731a      	strb	r2, [r3, #12]
		break;
  403652:	e004      	b.n	40365e <mmc_decode_csd+0x6a>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  403654:	4b31      	ldr	r3, [pc, #196]	; (40371c <mmc_decode_csd+0x128>)
  403656:	681b      	ldr	r3, [r3, #0]
  403658:	2240      	movs	r2, #64	; 0x40
  40365a:	731a      	strb	r2, [r3, #12]
		break;
  40365c:	bf00      	nop
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  40365e:	4b2f      	ldr	r3, [pc, #188]	; (40371c <mmc_decode_csd+0x128>)
  403660:	681b      	ldr	r3, [r3, #0]
  403662:	f103 000e 	add.w	r0, r3, #14
  403666:	2308      	movs	r3, #8
  403668:	2260      	movs	r2, #96	; 0x60
  40366a:	2180      	movs	r1, #128	; 0x80
  40366c:	4c2c      	ldr	r4, [pc, #176]	; (403720 <mmc_decode_csd+0x12c>)
  40366e:	47a0      	blx	r4
  403670:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  403672:	68fb      	ldr	r3, [r7, #12]
  403674:	f003 0307 	and.w	r3, r3, #7
  403678:	4a2a      	ldr	r2, [pc, #168]	; (403724 <mmc_decode_csd+0x130>)
  40367a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40367e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  403680:	68fb      	ldr	r3, [r7, #12]
  403682:	08db      	lsrs	r3, r3, #3
  403684:	f003 030f 	and.w	r3, r3, #15
  403688:	4a27      	ldr	r2, [pc, #156]	; (403728 <mmc_decode_csd+0x134>)
  40368a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40368e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  403690:	4b22      	ldr	r3, [pc, #136]	; (40371c <mmc_decode_csd+0x128>)
  403692:	681b      	ldr	r3, [r3, #0]
  403694:	68ba      	ldr	r2, [r7, #8]
  403696:	6879      	ldr	r1, [r7, #4]
  403698:	fb01 f202 	mul.w	r2, r1, r2
  40369c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4036a0:	fb01 f202 	mul.w	r2, r1, r2
  4036a4:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4036a6:	4b1d      	ldr	r3, [pc, #116]	; (40371c <mmc_decode_csd+0x128>)
  4036a8:	681b      	ldr	r3, [r3, #0]
  4036aa:	f103 000e 	add.w	r0, r3, #14
  4036ae:	230c      	movs	r3, #12
  4036b0:	223e      	movs	r2, #62	; 0x3e
  4036b2:	2180      	movs	r1, #128	; 0x80
  4036b4:	4c1a      	ldr	r4, [pc, #104]	; (403720 <mmc_decode_csd+0x12c>)
  4036b6:	47a0      	blx	r4
  4036b8:	4602      	mov	r2, r0
  4036ba:	f640 73ff 	movw	r3, #4095	; 0xfff
  4036be:	429a      	cmp	r2, r3
  4036c0:	d028      	beq.n	403714 <mmc_decode_csd+0x120>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  4036c2:	4b16      	ldr	r3, [pc, #88]	; (40371c <mmc_decode_csd+0x128>)
  4036c4:	681b      	ldr	r3, [r3, #0]
  4036c6:	f103 000e 	add.w	r0, r3, #14
  4036ca:	230c      	movs	r3, #12
  4036cc:	223e      	movs	r2, #62	; 0x3e
  4036ce:	2180      	movs	r1, #128	; 0x80
  4036d0:	4c13      	ldr	r4, [pc, #76]	; (403720 <mmc_decode_csd+0x12c>)
  4036d2:	47a0      	blx	r4
  4036d4:	4603      	mov	r3, r0
  4036d6:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  4036d8:	4b10      	ldr	r3, [pc, #64]	; (40371c <mmc_decode_csd+0x128>)
  4036da:	681b      	ldr	r3, [r3, #0]
  4036dc:	f103 000e 	add.w	r0, r3, #14
  4036e0:	2303      	movs	r3, #3
  4036e2:	222f      	movs	r2, #47	; 0x2f
  4036e4:	2180      	movs	r1, #128	; 0x80
  4036e6:	4d0e      	ldr	r5, [pc, #56]	; (403720 <mmc_decode_csd+0x12c>)
  4036e8:	47a8      	blx	r5
  4036ea:	4603      	mov	r3, r0
  4036ec:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  4036ee:	fa04 f303 	lsl.w	r3, r4, r3
  4036f2:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
  4036f4:	4b09      	ldr	r3, [pc, #36]	; (40371c <mmc_decode_csd+0x128>)
  4036f6:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  4036f8:	4b08      	ldr	r3, [pc, #32]	; (40371c <mmc_decode_csd+0x128>)
  4036fa:	681b      	ldr	r3, [r3, #0]
  4036fc:	f103 000e 	add.w	r0, r3, #14
  403700:	2304      	movs	r3, #4
  403702:	2250      	movs	r2, #80	; 0x50
  403704:	2180      	movs	r1, #128	; 0x80
  403706:	4d06      	ldr	r5, [pc, #24]	; (403720 <mmc_decode_csd+0x12c>)
  403708:	47a8      	blx	r5
  40370a:	4602      	mov	r2, r0
		sd_mmc_card->capacity = blocknr *
  40370c:	683b      	ldr	r3, [r7, #0]
  40370e:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  403710:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  403712:	6063      	str	r3, [r4, #4]
	}
}
  403714:	bf00      	nop
  403716:	3710      	adds	r7, #16
  403718:	46bd      	mov	sp, r7
  40371a:	bdb0      	pop	{r4, r5, r7, pc}
  40371c:	2000ab5c 	.word	0x2000ab5c
  403720:	00402d6d 	.word	0x00402d6d
  403724:	0040b598 	.word	0x0040b598
  403728:	0040b5f4 	.word	0x0040b5f4

0040372c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
  40372c:	b5b0      	push	{r4, r5, r7, lr}
  40372e:	b084      	sub	sp, #16
  403730:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  403732:	4b36      	ldr	r3, [pc, #216]	; (40380c <sd_decode_csd+0xe0>)
  403734:	681b      	ldr	r3, [r3, #0]
  403736:	f103 000e 	add.w	r0, r3, #14
  40373a:	2308      	movs	r3, #8
  40373c:	2260      	movs	r2, #96	; 0x60
  40373e:	2180      	movs	r1, #128	; 0x80
  403740:	4c33      	ldr	r4, [pc, #204]	; (403810 <sd_decode_csd+0xe4>)
  403742:	47a0      	blx	r4
  403744:	60f8      	str	r0, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  403746:	68fb      	ldr	r3, [r7, #12]
  403748:	f003 0307 	and.w	r3, r3, #7
  40374c:	4a31      	ldr	r2, [pc, #196]	; (403814 <sd_decode_csd+0xe8>)
  40374e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403752:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  403754:	68fb      	ldr	r3, [r7, #12]
  403756:	08db      	lsrs	r3, r3, #3
  403758:	f003 030f 	and.w	r3, r3, #15
  40375c:	4a2e      	ldr	r2, [pc, #184]	; (403818 <sd_decode_csd+0xec>)
  40375e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403762:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
  403764:	4b29      	ldr	r3, [pc, #164]	; (40380c <sd_decode_csd+0xe0>)
  403766:	681b      	ldr	r3, [r3, #0]
  403768:	68ba      	ldr	r2, [r7, #8]
  40376a:	6879      	ldr	r1, [r7, #4]
  40376c:	fb01 f202 	mul.w	r2, r1, r2
  403770:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403774:	fb01 f202 	mul.w	r2, r1, r2
  403778:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  40377a:	4b24      	ldr	r3, [pc, #144]	; (40380c <sd_decode_csd+0xe0>)
  40377c:	681b      	ldr	r3, [r3, #0]
  40377e:	f103 000e 	add.w	r0, r3, #14
  403782:	2302      	movs	r3, #2
  403784:	227e      	movs	r2, #126	; 0x7e
  403786:	2180      	movs	r1, #128	; 0x80
  403788:	4c21      	ldr	r4, [pc, #132]	; (403810 <sd_decode_csd+0xe4>)
  40378a:	47a0      	blx	r4
  40378c:	4603      	mov	r3, r0
  40378e:	2b00      	cmp	r3, #0
  403790:	d00f      	beq.n	4037b2 <sd_decode_csd+0x86>
		sd_mmc_card->capacity =
  403792:	4b1e      	ldr	r3, [pc, #120]	; (40380c <sd_decode_csd+0xe0>)
  403794:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
  403796:	4b1d      	ldr	r3, [pc, #116]	; (40380c <sd_decode_csd+0xe0>)
  403798:	681b      	ldr	r3, [r3, #0]
  40379a:	f103 000e 	add.w	r0, r3, #14
  40379e:	2316      	movs	r3, #22
  4037a0:	2230      	movs	r2, #48	; 0x30
  4037a2:	2180      	movs	r1, #128	; 0x80
  4037a4:	4d1a      	ldr	r5, [pc, #104]	; (403810 <sd_decode_csd+0xe4>)
  4037a6:	47a8      	blx	r5
  4037a8:	4603      	mov	r3, r0
				* 512;
  4037aa:	3301      	adds	r3, #1
  4037ac:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
  4037ae:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
  4037b0:	e028      	b.n	403804 <sd_decode_csd+0xd8>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4037b2:	4b16      	ldr	r3, [pc, #88]	; (40380c <sd_decode_csd+0xe0>)
  4037b4:	681b      	ldr	r3, [r3, #0]
  4037b6:	f103 000e 	add.w	r0, r3, #14
  4037ba:	230c      	movs	r3, #12
  4037bc:	223e      	movs	r2, #62	; 0x3e
  4037be:	2180      	movs	r1, #128	; 0x80
  4037c0:	4c13      	ldr	r4, [pc, #76]	; (403810 <sd_decode_csd+0xe4>)
  4037c2:	47a0      	blx	r4
  4037c4:	4603      	mov	r3, r0
  4037c6:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  4037c8:	4b10      	ldr	r3, [pc, #64]	; (40380c <sd_decode_csd+0xe0>)
  4037ca:	681b      	ldr	r3, [r3, #0]
  4037cc:	f103 000e 	add.w	r0, r3, #14
  4037d0:	2303      	movs	r3, #3
  4037d2:	222f      	movs	r2, #47	; 0x2f
  4037d4:	2180      	movs	r1, #128	; 0x80
  4037d6:	4d0e      	ldr	r5, [pc, #56]	; (403810 <sd_decode_csd+0xe4>)
  4037d8:	47a8      	blx	r5
  4037da:	4603      	mov	r3, r0
  4037dc:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4037de:	fa04 f303 	lsl.w	r3, r4, r3
  4037e2:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
  4037e4:	4b09      	ldr	r3, [pc, #36]	; (40380c <sd_decode_csd+0xe0>)
  4037e6:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
  4037e8:	4b08      	ldr	r3, [pc, #32]	; (40380c <sd_decode_csd+0xe0>)
  4037ea:	681b      	ldr	r3, [r3, #0]
  4037ec:	f103 000e 	add.w	r0, r3, #14
  4037f0:	2304      	movs	r3, #4
  4037f2:	2250      	movs	r2, #80	; 0x50
  4037f4:	2180      	movs	r1, #128	; 0x80
  4037f6:	4d06      	ldr	r5, [pc, #24]	; (403810 <sd_decode_csd+0xe4>)
  4037f8:	47a8      	blx	r5
  4037fa:	4602      	mov	r2, r0
		sd_mmc_card->capacity = blocknr *
  4037fc:	683b      	ldr	r3, [r7, #0]
  4037fe:	4093      	lsls	r3, r2
				/ 1024;
  403800:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  403802:	6063      	str	r3, [r4, #4]
}
  403804:	bf00      	nop
  403806:	3710      	adds	r7, #16
  403808:	46bd      	mov	sp, r7
  40380a:	bdb0      	pop	{r4, r5, r7, pc}
  40380c:	2000ab5c 	.word	0x2000ab5c
  403810:	00402d6d 	.word	0x00402d6d
  403814:	0040b598 	.word	0x0040b598
  403818:	0040b5b4 	.word	0x0040b5b4

0040381c <sdio_cmd52>:
 *
 * \return true if success, otherwise false
 */
static bool sdio_cmd52(uint8_t rw_flag, uint8_t func_nb,
		uint32_t reg_addr, uint8_t rd_after_wr, uint8_t *io_data)
{
  40381c:	b580      	push	{r7, lr}
  40381e:	b082      	sub	sp, #8
  403820:	af00      	add	r7, sp, #0
  403822:	603a      	str	r2, [r7, #0]
  403824:	461a      	mov	r2, r3
  403826:	4603      	mov	r3, r0
  403828:	71fb      	strb	r3, [r7, #7]
  40382a:	460b      	mov	r3, r1
  40382c:	71bb      	strb	r3, [r7, #6]
  40382e:	4613      	mov	r3, r2
  403830:	717b      	strb	r3, [r7, #5]
	Assert(io_data != NULL);
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
		((uint32_t)*io_data << SDIO_CMD52_WR_DATA)
  403832:	693b      	ldr	r3, [r7, #16]
  403834:	781b      	ldrb	r3, [r3, #0]
  403836:	461a      	mov	r2, r3
		| ((uint32_t)rw_flag << SDIO_CMD52_RW_FLAG)
  403838:	79fb      	ldrb	r3, [r7, #7]
  40383a:	07db      	lsls	r3, r3, #31
  40383c:	431a      	orrs	r2, r3
		| ((uint32_t)func_nb << SDIO_CMD52_FUNCTION_NUM)
  40383e:	79bb      	ldrb	r3, [r7, #6]
  403840:	071b      	lsls	r3, r3, #28
  403842:	431a      	orrs	r2, r3
		| ((uint32_t)rd_after_wr << SDIO_CMD52_RAW_FLAG)
  403844:	797b      	ldrb	r3, [r7, #5]
  403846:	06db      	lsls	r3, r3, #27
  403848:	431a      	orrs	r2, r3
		| ((uint32_t)reg_addr << SDIO_CMD52_REG_ADRR))) {
  40384a:	683b      	ldr	r3, [r7, #0]
  40384c:	025b      	lsls	r3, r3, #9
	if (!driver_send_cmd(SDIO_CMD52_IO_RW_DIRECT,
  40384e:	4313      	orrs	r3, r2
  403850:	4619      	mov	r1, r3
  403852:	f241 3034 	movw	r0, #4916	; 0x1334
  403856:	4b0a      	ldr	r3, [pc, #40]	; (403880 <sdio_cmd52+0x64>)
  403858:	4798      	blx	r3
  40385a:	4603      	mov	r3, r0
  40385c:	f083 0301 	eor.w	r3, r3, #1
  403860:	b2db      	uxtb	r3, r3
  403862:	2b00      	cmp	r3, #0
  403864:	d001      	beq.n	40386a <sdio_cmd52+0x4e>
		return false;
  403866:	2300      	movs	r3, #0
  403868:	e006      	b.n	403878 <sdio_cmd52+0x5c>
	}
	*io_data = driver_get_response() & 0xFF;
  40386a:	4b06      	ldr	r3, [pc, #24]	; (403884 <sdio_cmd52+0x68>)
  40386c:	4798      	blx	r3
  40386e:	4603      	mov	r3, r0
  403870:	b2da      	uxtb	r2, r3
  403872:	693b      	ldr	r3, [r7, #16]
  403874:	701a      	strb	r2, [r3, #0]
	return true;
  403876:	2301      	movs	r3, #1
}
  403878:	4618      	mov	r0, r3
  40387a:	3708      	adds	r7, #8
  40387c:	46bd      	mov	sp, r7
  40387e:	bd80      	pop	{r7, pc}
  403880:	00404945 	.word	0x00404945
  403884:	00404989 	.word	0x00404989

00403888 <sd_acmd6>:
 * \brief ACMD6 - Define the data bus width to 4 bits bus
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd6(void)
{
  403888:	b580      	push	{r7, lr}
  40388a:	af00      	add	r7, sp, #0
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  40388c:	4b12      	ldr	r3, [pc, #72]	; (4038d8 <sd_acmd6+0x50>)
  40388e:	681b      	ldr	r3, [r3, #0]
  403890:	891b      	ldrh	r3, [r3, #8]
  403892:	041b      	lsls	r3, r3, #16
  403894:	4619      	mov	r1, r3
  403896:	f241 1037 	movw	r0, #4407	; 0x1137
  40389a:	4b10      	ldr	r3, [pc, #64]	; (4038dc <sd_acmd6+0x54>)
  40389c:	4798      	blx	r3
  40389e:	4603      	mov	r3, r0
  4038a0:	f083 0301 	eor.w	r3, r3, #1
  4038a4:	b2db      	uxtb	r3, r3
  4038a6:	2b00      	cmp	r3, #0
  4038a8:	d001      	beq.n	4038ae <sd_acmd6+0x26>
		return false;
  4038aa:	2300      	movs	r3, #0
  4038ac:	e011      	b.n	4038d2 <sd_acmd6+0x4a>
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  4038ae:	2102      	movs	r1, #2
  4038b0:	f241 1006 	movw	r0, #4358	; 0x1106
  4038b4:	4b09      	ldr	r3, [pc, #36]	; (4038dc <sd_acmd6+0x54>)
  4038b6:	4798      	blx	r3
  4038b8:	4603      	mov	r3, r0
  4038ba:	f083 0301 	eor.w	r3, r3, #1
  4038be:	b2db      	uxtb	r3, r3
  4038c0:	2b00      	cmp	r3, #0
  4038c2:	d001      	beq.n	4038c8 <sd_acmd6+0x40>
		return false;
  4038c4:	2300      	movs	r3, #0
  4038c6:	e004      	b.n	4038d2 <sd_acmd6+0x4a>
	}
	sd_mmc_card->bus_width = 4;
  4038c8:	4b03      	ldr	r3, [pc, #12]	; (4038d8 <sd_acmd6+0x50>)
  4038ca:	681b      	ldr	r3, [r3, #0]
  4038cc:	2204      	movs	r2, #4
  4038ce:	735a      	strb	r2, [r3, #13]
	sd_mmc_debug("%d-bit bus width enabled.\n\r", (int)sd_mmc_card->bus_width);
	return true;
  4038d0:	2301      	movs	r3, #1
}
  4038d2:	4618      	mov	r0, r3
  4038d4:	bd80      	pop	{r7, pc}
  4038d6:	bf00      	nop
  4038d8:	2000ab5c 	.word	0x2000ab5c
  4038dc:	00404945 	.word	0x00404945

004038e0 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
  4038e0:	b590      	push	{r4, r7, lr}
  4038e2:	b085      	sub	sp, #20
  4038e4:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  4038e6:	4b36      	ldr	r3, [pc, #216]	; (4039c0 <sd_acmd51+0xe0>)
  4038e8:	681b      	ldr	r3, [r3, #0]
  4038ea:	891b      	ldrh	r3, [r3, #8]
  4038ec:	041b      	lsls	r3, r3, #16
  4038ee:	4619      	mov	r1, r3
  4038f0:	f241 1037 	movw	r0, #4407	; 0x1137
  4038f4:	4b33      	ldr	r3, [pc, #204]	; (4039c4 <sd_acmd51+0xe4>)
  4038f6:	4798      	blx	r3
  4038f8:	4603      	mov	r3, r0
  4038fa:	f083 0301 	eor.w	r3, r3, #1
  4038fe:	b2db      	uxtb	r3, r3
  403900:	2b00      	cmp	r3, #0
  403902:	d001      	beq.n	403908 <sd_acmd51+0x28>
		return false;
  403904:	2300      	movs	r3, #0
  403906:	e057      	b.n	4039b8 <sd_acmd51+0xd8>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  403908:	2301      	movs	r3, #1
  40390a:	9300      	str	r3, [sp, #0]
  40390c:	2301      	movs	r3, #1
  40390e:	2208      	movs	r2, #8
  403910:	2100      	movs	r1, #0
  403912:	482d      	ldr	r0, [pc, #180]	; (4039c8 <sd_acmd51+0xe8>)
  403914:	4c2d      	ldr	r4, [pc, #180]	; (4039cc <sd_acmd51+0xec>)
  403916:	47a0      	blx	r4
  403918:	4603      	mov	r3, r0
  40391a:	f083 0301 	eor.w	r3, r3, #1
  40391e:	b2db      	uxtb	r3, r3
  403920:	2b00      	cmp	r3, #0
  403922:	d001      	beq.n	403928 <sd_acmd51+0x48>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
  403924:	2300      	movs	r3, #0
  403926:	e047      	b.n	4039b8 <sd_acmd51+0xd8>
	}
	if (!driver_start_read_blocks(scr, 1)) {
  403928:	463b      	mov	r3, r7
  40392a:	2101      	movs	r1, #1
  40392c:	4618      	mov	r0, r3
  40392e:	4b28      	ldr	r3, [pc, #160]	; (4039d0 <sd_acmd51+0xf0>)
  403930:	4798      	blx	r3
  403932:	4603      	mov	r3, r0
  403934:	f083 0301 	eor.w	r3, r3, #1
  403938:	b2db      	uxtb	r3, r3
  40393a:	2b00      	cmp	r3, #0
  40393c:	d001      	beq.n	403942 <sd_acmd51+0x62>
		return false;
  40393e:	2300      	movs	r3, #0
  403940:	e03a      	b.n	4039b8 <sd_acmd51+0xd8>
	}
	if (!driver_wait_end_of_read_blocks()) {
  403942:	4b24      	ldr	r3, [pc, #144]	; (4039d4 <sd_acmd51+0xf4>)
  403944:	4798      	blx	r3
  403946:	4603      	mov	r3, r0
  403948:	f083 0301 	eor.w	r3, r3, #1
  40394c:	b2db      	uxtb	r3, r3
  40394e:	2b00      	cmp	r3, #0
  403950:	d001      	beq.n	403956 <sd_acmd51+0x76>
		return false;
  403952:	2300      	movs	r3, #0
  403954:	e030      	b.n	4039b8 <sd_acmd51+0xd8>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  403956:	4638      	mov	r0, r7
  403958:	2304      	movs	r3, #4
  40395a:	2238      	movs	r2, #56	; 0x38
  40395c:	2140      	movs	r1, #64	; 0x40
  40395e:	4c1e      	ldr	r4, [pc, #120]	; (4039d8 <sd_acmd51+0xf8>)
  403960:	47a0      	blx	r4
  403962:	4603      	mov	r3, r0
  403964:	2b01      	cmp	r3, #1
  403966:	d009      	beq.n	40397c <sd_acmd51+0x9c>
  403968:	2b01      	cmp	r3, #1
  40396a:	d302      	bcc.n	403972 <sd_acmd51+0x92>
  40396c:	2b02      	cmp	r3, #2
  40396e:	d00a      	beq.n	403986 <sd_acmd51+0xa6>
  403970:	e01c      	b.n	4039ac <sd_acmd51+0xcc>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  403972:	4b13      	ldr	r3, [pc, #76]	; (4039c0 <sd_acmd51+0xe0>)
  403974:	681b      	ldr	r3, [r3, #0]
  403976:	2210      	movs	r2, #16
  403978:	731a      	strb	r2, [r3, #12]
		break;
  40397a:	e01c      	b.n	4039b6 <sd_acmd51+0xd6>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  40397c:	4b10      	ldr	r3, [pc, #64]	; (4039c0 <sd_acmd51+0xe0>)
  40397e:	681b      	ldr	r3, [r3, #0]
  403980:	221a      	movs	r2, #26
  403982:	731a      	strb	r2, [r3, #12]
		break;
  403984:	e017      	b.n	4039b6 <sd_acmd51+0xd6>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  403986:	4638      	mov	r0, r7
  403988:	2301      	movs	r3, #1
  40398a:	222f      	movs	r2, #47	; 0x2f
  40398c:	2140      	movs	r1, #64	; 0x40
  40398e:	4c12      	ldr	r4, [pc, #72]	; (4039d8 <sd_acmd51+0xf8>)
  403990:	47a0      	blx	r4
  403992:	4603      	mov	r3, r0
  403994:	2b01      	cmp	r3, #1
  403996:	d104      	bne.n	4039a2 <sd_acmd51+0xc2>
			sd_mmc_card->version = CARD_VER_SD_3_0;
  403998:	4b09      	ldr	r3, [pc, #36]	; (4039c0 <sd_acmd51+0xe0>)
  40399a:	681b      	ldr	r3, [r3, #0]
  40399c:	2230      	movs	r2, #48	; 0x30
  40399e:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
  4039a0:	e009      	b.n	4039b6 <sd_acmd51+0xd6>
			sd_mmc_card->version = CARD_VER_SD_2_0;
  4039a2:	4b07      	ldr	r3, [pc, #28]	; (4039c0 <sd_acmd51+0xe0>)
  4039a4:	681b      	ldr	r3, [r3, #0]
  4039a6:	2220      	movs	r2, #32
  4039a8:	731a      	strb	r2, [r3, #12]
		break;
  4039aa:	e004      	b.n	4039b6 <sd_acmd51+0xd6>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4039ac:	4b04      	ldr	r3, [pc, #16]	; (4039c0 <sd_acmd51+0xe0>)
  4039ae:	681b      	ldr	r3, [r3, #0]
  4039b0:	2210      	movs	r2, #16
  4039b2:	731a      	strb	r2, [r3, #12]
		break;
  4039b4:	bf00      	nop
	}
	return true;
  4039b6:	2301      	movs	r3, #1
}
  4039b8:	4618      	mov	r0, r3
  4039ba:	370c      	adds	r7, #12
  4039bc:	46bd      	mov	sp, r7
  4039be:	bd90      	pop	{r4, r7, pc}
  4039c0:	2000ab5c 	.word	0x2000ab5c
  4039c4:	00404945 	.word	0x00404945
  4039c8:	00081133 	.word	0x00081133
  4039cc:	00404a11 	.word	0x00404a11
  4039d0:	00404bd5 	.word	0x00404bd5
  4039d4:	00404c75 	.word	0x00404c75
  4039d8:	00402d6d 	.word	0x00402d6d

004039dc <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  4039dc:	b580      	push	{r7, lr}
  4039de:	b082      	sub	sp, #8
  4039e0:	af00      	add	r7, sp, #0
  4039e2:	4603      	mov	r3, r0
  4039e4:	71fb      	strb	r3, [r7, #7]
	if (slot >= SD_MMC_MEM_CNT) {
  4039e6:	79fb      	ldrb	r3, [r7, #7]
  4039e8:	2b00      	cmp	r3, #0
  4039ea:	d001      	beq.n	4039f0 <sd_mmc_select_slot+0x14>
		return SD_MMC_ERR_SLOT;
  4039ec:	2304      	movs	r3, #4
  4039ee:	e040      	b.n	403a72 <sd_mmc_select_slot+0x96>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
  4039f0:	79fb      	ldrb	r3, [r7, #7]
  4039f2:	4a22      	ldr	r2, [pc, #136]	; (403a7c <sd_mmc_select_slot+0xa0>)
  4039f4:	015b      	lsls	r3, r3, #5
  4039f6:	4413      	add	r3, r2
  4039f8:	330a      	adds	r3, #10
  4039fa:	781b      	ldrb	r3, [r3, #0]
  4039fc:	2b04      	cmp	r3, #4
  4039fe:	d007      	beq.n	403a10 <sd_mmc_select_slot+0x34>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
  403a00:	79fb      	ldrb	r3, [r7, #7]
  403a02:	4a1e      	ldr	r2, [pc, #120]	; (403a7c <sd_mmc_select_slot+0xa0>)
  403a04:	015b      	lsls	r3, r3, #5
  403a06:	4413      	add	r3, r2
  403a08:	330a      	adds	r3, #10
  403a0a:	781b      	ldrb	r3, [r3, #0]
  403a0c:	2b03      	cmp	r3, #3
  403a0e:	d11a      	bne.n	403a46 <sd_mmc_select_slot+0x6a>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  403a10:	79fb      	ldrb	r3, [r7, #7]
  403a12:	4a1a      	ldr	r2, [pc, #104]	; (403a7c <sd_mmc_select_slot+0xa0>)
  403a14:	015b      	lsls	r3, r3, #5
  403a16:	4413      	add	r3, r2
  403a18:	330a      	adds	r3, #10
  403a1a:	2202      	movs	r2, #2
  403a1c:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  403a1e:	79fb      	ldrb	r3, [r7, #7]
  403a20:	4a16      	ldr	r2, [pc, #88]	; (403a7c <sd_mmc_select_slot+0xa0>)
  403a22:	015b      	lsls	r3, r3, #5
  403a24:	4413      	add	r3, r2
  403a26:	4a16      	ldr	r2, [pc, #88]	; (403a80 <sd_mmc_select_slot+0xa4>)
  403a28:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  403a2a:	79fb      	ldrb	r3, [r7, #7]
  403a2c:	4a13      	ldr	r2, [pc, #76]	; (403a7c <sd_mmc_select_slot+0xa0>)
  403a2e:	015b      	lsls	r3, r3, #5
  403a30:	4413      	add	r3, r2
  403a32:	330d      	adds	r3, #13
  403a34:	2201      	movs	r2, #1
  403a36:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
  403a38:	79fb      	ldrb	r3, [r7, #7]
  403a3a:	4a10      	ldr	r2, [pc, #64]	; (403a7c <sd_mmc_select_slot+0xa0>)
  403a3c:	015b      	lsls	r3, r3, #5
  403a3e:	4413      	add	r3, r2
  403a40:	331e      	adds	r3, #30
  403a42:	2200      	movs	r2, #0
  403a44:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  403a46:	4a0f      	ldr	r2, [pc, #60]	; (403a84 <sd_mmc_select_slot+0xa8>)
  403a48:	79fb      	ldrb	r3, [r7, #7]
  403a4a:	7013      	strb	r3, [r2, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  403a4c:	79fb      	ldrb	r3, [r7, #7]
  403a4e:	015b      	lsls	r3, r3, #5
  403a50:	4a0a      	ldr	r2, [pc, #40]	; (403a7c <sd_mmc_select_slot+0xa0>)
  403a52:	4413      	add	r3, r2
  403a54:	4a0c      	ldr	r2, [pc, #48]	; (403a88 <sd_mmc_select_slot+0xac>)
  403a56:	6013      	str	r3, [r2, #0]
	sd_mmc_configure_slot();
  403a58:	4b0c      	ldr	r3, [pc, #48]	; (403a8c <sd_mmc_select_slot+0xb0>)
  403a5a:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  403a5c:	79fb      	ldrb	r3, [r7, #7]
  403a5e:	4a07      	ldr	r2, [pc, #28]	; (403a7c <sd_mmc_select_slot+0xa0>)
  403a60:	015b      	lsls	r3, r3, #5
  403a62:	4413      	add	r3, r2
  403a64:	330a      	adds	r3, #10
  403a66:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  403a68:	2b02      	cmp	r3, #2
  403a6a:	bf0c      	ite	eq
  403a6c:	2301      	moveq	r3, #1
  403a6e:	2300      	movne	r3, #0
  403a70:	b2db      	uxtb	r3, r3
}
  403a72:	4618      	mov	r0, r3
  403a74:	3708      	adds	r7, #8
  403a76:	46bd      	mov	sp, r7
  403a78:	bd80      	pop	{r7, pc}
  403a7a:	bf00      	nop
  403a7c:	2000ab38 	.word	0x2000ab38
  403a80:	00061a80 	.word	0x00061a80
  403a84:	2000ab58 	.word	0x2000ab58
  403a88:	2000ab5c 	.word	0x2000ab5c
  403a8c:	00403a91 	.word	0x00403a91

00403a90 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  403a90:	b598      	push	{r3, r4, r7, lr}
  403a92:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  403a94:	4b09      	ldr	r3, [pc, #36]	; (403abc <sd_mmc_configure_slot+0x2c>)
  403a96:	7818      	ldrb	r0, [r3, #0]
  403a98:	4b09      	ldr	r3, [pc, #36]	; (403ac0 <sd_mmc_configure_slot+0x30>)
  403a9a:	681b      	ldr	r3, [r3, #0]
  403a9c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  403a9e:	4b08      	ldr	r3, [pc, #32]	; (403ac0 <sd_mmc_configure_slot+0x30>)
  403aa0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  403aa2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
  403aa4:	4b06      	ldr	r3, [pc, #24]	; (403ac0 <sd_mmc_configure_slot+0x30>)
  403aa6:	681b      	ldr	r3, [r3, #0]
  403aa8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  403aaa:	2b00      	cmp	r3, #0
  403aac:	bf14      	ite	ne
  403aae:	2301      	movne	r3, #1
  403ab0:	2300      	moveq	r3, #0
  403ab2:	b2db      	uxtb	r3, r3
  403ab4:	4c03      	ldr	r4, [pc, #12]	; (403ac4 <sd_mmc_configure_slot+0x34>)
  403ab6:	47a0      	blx	r4
}
  403ab8:	bf00      	nop
  403aba:	bd98      	pop	{r3, r4, r7, pc}
  403abc:	2000ab58 	.word	0x2000ab58
  403ac0:	2000ab5c 	.word	0x2000ab5c
  403ac4:	00404859 	.word	0x00404859

00403ac8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  403ac8:	b580      	push	{r7, lr}
  403aca:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  403acc:	4b05      	ldr	r3, [pc, #20]	; (403ae4 <sd_mmc_deselect_slot+0x1c>)
  403ace:	781b      	ldrb	r3, [r3, #0]
  403ad0:	2b00      	cmp	r3, #0
  403ad2:	d104      	bne.n	403ade <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
  403ad4:	4b03      	ldr	r3, [pc, #12]	; (403ae4 <sd_mmc_deselect_slot+0x1c>)
  403ad6:	781b      	ldrb	r3, [r3, #0]
  403ad8:	4618      	mov	r0, r3
  403ada:	4b03      	ldr	r3, [pc, #12]	; (403ae8 <sd_mmc_deselect_slot+0x20>)
  403adc:	4798      	blx	r3
	}
}
  403ade:	bf00      	nop
  403ae0:	bd80      	pop	{r7, pc}
  403ae2:	bf00      	nop
  403ae4:	2000ab58 	.word	0x2000ab58
  403ae8:	004048f1 	.word	0x004048f1

00403aec <sd_mmc_mci_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_card_init(void)
{
  403aec:	b590      	push	{r4, r7, lr}
  403aee:	b085      	sub	sp, #20
  403af0:	af02      	add	r7, sp, #8
	uint8_t v2 = 0;
  403af2:	2300      	movs	r3, #0
  403af4:	71fb      	strb	r3, [r7, #7]
#ifdef SDIO_SUPPORT_ENABLE
	uint8_t data = 0x08;
  403af6:	2308      	movs	r3, #8
  403af8:	71bb      	strb	r3, [r7, #6]
#endif

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  403afa:	4b9a      	ldr	r3, [pc, #616]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403afc:	681b      	ldr	r3, [r3, #0]
  403afe:	2201      	movs	r2, #1
  403b00:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  403b02:	4b98      	ldr	r3, [pc, #608]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403b04:	681b      	ldr	r3, [r3, #0]
  403b06:	2200      	movs	r2, #0
  403b08:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
  403b0a:	4b96      	ldr	r3, [pc, #600]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403b0c:	681b      	ldr	r3, [r3, #0]
  403b0e:	2200      	movs	r2, #0
  403b10:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  403b12:	4b95      	ldr	r3, [pc, #596]	; (403d68 <sd_mmc_mci_card_init+0x27c>)
  403b14:	4798      	blx	r3

#ifdef SDIO_SUPPORT_ENABLE
	/* CMD52 Reset SDIO */
	sdio_cmd52(SDIO_CMD52_WRITE_FLAG, SDIO_CIA,SDIO_CCCR_IOA, 0, &data);
  403b16:	1dbb      	adds	r3, r7, #6
  403b18:	9300      	str	r3, [sp, #0]
  403b1a:	2300      	movs	r3, #0
  403b1c:	2206      	movs	r2, #6
  403b1e:	2100      	movs	r1, #0
  403b20:	2001      	movs	r0, #1
  403b22:	4c92      	ldr	r4, [pc, #584]	; (403d6c <sd_mmc_mci_card_init+0x280>)
  403b24:	47a0      	blx	r4
#endif

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  403b26:	2100      	movs	r1, #0
  403b28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  403b2c:	4b90      	ldr	r3, [pc, #576]	; (403d70 <sd_mmc_mci_card_init+0x284>)
  403b2e:	4798      	blx	r3
  403b30:	4603      	mov	r3, r0
  403b32:	f083 0301 	eor.w	r3, r3, #1
  403b36:	b2db      	uxtb	r3, r3
  403b38:	2b00      	cmp	r3, #0
  403b3a:	d001      	beq.n	403b40 <sd_mmc_mci_card_init+0x54>
		return false;
  403b3c:	2300      	movs	r3, #0
  403b3e:	e10d      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
	}
	if (!sd_cmd8(&v2)) {
  403b40:	1dfb      	adds	r3, r7, #7
  403b42:	4618      	mov	r0, r3
  403b44:	4b8b      	ldr	r3, [pc, #556]	; (403d74 <sd_mmc_mci_card_init+0x288>)
  403b46:	4798      	blx	r3
  403b48:	4603      	mov	r3, r0
  403b4a:	f083 0301 	eor.w	r3, r3, #1
  403b4e:	b2db      	uxtb	r3, r3
  403b50:	2b00      	cmp	r3, #0
  403b52:	d001      	beq.n	403b58 <sd_mmc_mci_card_init+0x6c>
		return false;
  403b54:	2300      	movs	r3, #0
  403b56:	e101      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
  403b58:	4b87      	ldr	r3, [pc, #540]	; (403d78 <sd_mmc_mci_card_init+0x28c>)
  403b5a:	4798      	blx	r3
  403b5c:	4603      	mov	r3, r0
  403b5e:	f083 0301 	eor.w	r3, r3, #1
  403b62:	b2db      	uxtb	r3, r3
  403b64:	2b00      	cmp	r3, #0
  403b66:	d001      	beq.n	403b6c <sd_mmc_mci_card_init+0x80>
		return false;
  403b68:	2300      	movs	r3, #0
  403b6a:	e0f7      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403b6c:	4b7d      	ldr	r3, [pc, #500]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403b6e:	681b      	ldr	r3, [r3, #0]
  403b70:	7adb      	ldrb	r3, [r3, #11]
  403b72:	f003 0301 	and.w	r3, r3, #1
  403b76:	2b00      	cmp	r3, #0
  403b78:	d011      	beq.n	403b9e <sd_mmc_mci_card_init+0xb2>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
  403b7a:	79fb      	ldrb	r3, [r7, #7]
  403b7c:	4618      	mov	r0, r3
  403b7e:	4b7f      	ldr	r3, [pc, #508]	; (403d7c <sd_mmc_mci_card_init+0x290>)
  403b80:	4798      	blx	r3
  403b82:	4603      	mov	r3, r0
  403b84:	f083 0301 	eor.w	r3, r3, #1
  403b88:	b2db      	uxtb	r3, r3
  403b8a:	2b00      	cmp	r3, #0
  403b8c:	d007      	beq.n	403b9e <sd_mmc_mci_card_init+0xb2>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  403b8e:	4b75      	ldr	r3, [pc, #468]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403b90:	681b      	ldr	r3, [r3, #0]
  403b92:	2202      	movs	r2, #2
  403b94:	72da      	strb	r2, [r3, #11]
			return sd_mmc_mci_install_mmc();
  403b96:	4b7a      	ldr	r3, [pc, #488]	; (403d80 <sd_mmc_mci_card_init+0x294>)
  403b98:	4798      	blx	r3
  403b9a:	4603      	mov	r3, r0
  403b9c:	e0de      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403b9e:	4b71      	ldr	r3, [pc, #452]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403ba0:	681b      	ldr	r3, [r3, #0]
  403ba2:	7adb      	ldrb	r3, [r3, #11]
  403ba4:	f003 0301 	and.w	r3, r3, #1
  403ba8:	2b00      	cmp	r3, #0
  403baa:	d00c      	beq.n	403bc6 <sd_mmc_mci_card_init+0xda>
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  403bac:	2100      	movs	r1, #0
  403bae:	f645 3002 	movw	r0, #23298	; 0x5b02
  403bb2:	4b6f      	ldr	r3, [pc, #444]	; (403d70 <sd_mmc_mci_card_init+0x284>)
  403bb4:	4798      	blx	r3
  403bb6:	4603      	mov	r3, r0
  403bb8:	f083 0301 	eor.w	r3, r3, #1
  403bbc:	b2db      	uxtb	r3, r3
  403bbe:	2b00      	cmp	r3, #0
  403bc0:	d001      	beq.n	403bc6 <sd_mmc_mci_card_init+0xda>
			return false;
  403bc2:	2300      	movs	r3, #0
  403bc4:	e0ca      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  403bc6:	2100      	movs	r1, #0
  403bc8:	f245 1003 	movw	r0, #20739	; 0x5103
  403bcc:	4b68      	ldr	r3, [pc, #416]	; (403d70 <sd_mmc_mci_card_init+0x284>)
  403bce:	4798      	blx	r3
  403bd0:	4603      	mov	r3, r0
  403bd2:	f083 0301 	eor.w	r3, r3, #1
  403bd6:	b2db      	uxtb	r3, r3
  403bd8:	2b00      	cmp	r3, #0
  403bda:	d001      	beq.n	403be0 <sd_mmc_mci_card_init+0xf4>
		return false;
  403bdc:	2300      	movs	r3, #0
  403bde:	e0bd      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  403be0:	4b60      	ldr	r3, [pc, #384]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403be2:	681c      	ldr	r4, [r3, #0]
  403be4:	4b67      	ldr	r3, [pc, #412]	; (403d84 <sd_mmc_mci_card_init+0x298>)
  403be6:	4798      	blx	r3
  403be8:	4603      	mov	r3, r0
  403bea:	0c1b      	lsrs	r3, r3, #16
  403bec:	b29b      	uxth	r3, r3
  403bee:	8123      	strh	r3, [r4, #8]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403bf0:	4b5c      	ldr	r3, [pc, #368]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403bf2:	681b      	ldr	r3, [r3, #0]
  403bf4:	7adb      	ldrb	r3, [r3, #11]
  403bf6:	f003 0301 	and.w	r3, r3, #1
  403bfa:	2b00      	cmp	r3, #0
  403bfc:	d00b      	beq.n	403c16 <sd_mmc_mci_card_init+0x12a>
		if (!sd_mmc_cmd9_mci()) {
  403bfe:	4b62      	ldr	r3, [pc, #392]	; (403d88 <sd_mmc_mci_card_init+0x29c>)
  403c00:	4798      	blx	r3
  403c02:	4603      	mov	r3, r0
  403c04:	f083 0301 	eor.w	r3, r3, #1
  403c08:	b2db      	uxtb	r3, r3
  403c0a:	2b00      	cmp	r3, #0
  403c0c:	d001      	beq.n	403c12 <sd_mmc_mci_card_init+0x126>
			return false;
  403c0e:	2300      	movs	r3, #0
  403c10:	e0a4      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
		}
		sd_decode_csd();
  403c12:	4b5e      	ldr	r3, [pc, #376]	; (403d8c <sd_mmc_mci_card_init+0x2a0>)
  403c14:	4798      	blx	r3
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  403c16:	4b53      	ldr	r3, [pc, #332]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403c18:	681b      	ldr	r3, [r3, #0]
  403c1a:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  403c1c:	041b      	lsls	r3, r3, #16
  403c1e:	4619      	mov	r1, r3
  403c20:	f243 1007 	movw	r0, #12551	; 0x3107
  403c24:	4b52      	ldr	r3, [pc, #328]	; (403d70 <sd_mmc_mci_card_init+0x284>)
  403c26:	4798      	blx	r3
  403c28:	4603      	mov	r3, r0
  403c2a:	f083 0301 	eor.w	r3, r3, #1
  403c2e:	b2db      	uxtb	r3, r3
  403c30:	2b00      	cmp	r3, #0
  403c32:	d001      	beq.n	403c38 <sd_mmc_mci_card_init+0x14c>
		return false;
  403c34:	2300      	movs	r3, #0
  403c36:	e091      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403c38:	4b4a      	ldr	r3, [pc, #296]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403c3a:	681b      	ldr	r3, [r3, #0]
  403c3c:	7adb      	ldrb	r3, [r3, #11]
  403c3e:	f003 0301 	and.w	r3, r3, #1
  403c42:	2b00      	cmp	r3, #0
  403c44:	d009      	beq.n	403c5a <sd_mmc_mci_card_init+0x16e>
		if (!sd_acmd51()) {
  403c46:	4b52      	ldr	r3, [pc, #328]	; (403d90 <sd_mmc_mci_card_init+0x2a4>)
  403c48:	4798      	blx	r3
  403c4a:	4603      	mov	r3, r0
  403c4c:	f083 0301 	eor.w	r3, r3, #1
  403c50:	b2db      	uxtb	r3, r3
  403c52:	2b00      	cmp	r3, #0
  403c54:	d001      	beq.n	403c5a <sd_mmc_mci_card_init+0x16e>
			return false;
  403c56:	2300      	movs	r3, #0
  403c58:	e080      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
		}
	}
	if (IS_SDIO()) {
  403c5a:	4b42      	ldr	r3, [pc, #264]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403c5c:	681b      	ldr	r3, [r3, #0]
  403c5e:	7adb      	ldrb	r3, [r3, #11]
  403c60:	f003 0304 	and.w	r3, r3, #4
  403c64:	2b00      	cmp	r3, #0
  403c66:	d009      	beq.n	403c7c <sd_mmc_mci_card_init+0x190>
		if (!sdio_get_max_speed()) {
  403c68:	4b4a      	ldr	r3, [pc, #296]	; (403d94 <sd_mmc_mci_card_init+0x2a8>)
  403c6a:	4798      	blx	r3
  403c6c:	4603      	mov	r3, r0
  403c6e:	f083 0301 	eor.w	r3, r3, #1
  403c72:	b2db      	uxtb	r3, r3
  403c74:	2b00      	cmp	r3, #0
  403c76:	d001      	beq.n	403c7c <sd_mmc_mci_card_init+0x190>
			return false;
  403c78:	2300      	movs	r3, #0
  403c7a:	e06f      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  403c7c:	4b46      	ldr	r3, [pc, #280]	; (403d98 <sd_mmc_mci_card_init+0x2ac>)
  403c7e:	781b      	ldrb	r3, [r3, #0]
  403c80:	4618      	mov	r0, r3
  403c82:	4b46      	ldr	r3, [pc, #280]	; (403d9c <sd_mmc_mci_card_init+0x2b0>)
  403c84:	4798      	blx	r3
  403c86:	4603      	mov	r3, r0
  403c88:	2b03      	cmp	r3, #3
  403c8a:	d923      	bls.n	403cd4 <sd_mmc_mci_card_init+0x1e8>
		// TRY to enable 4-bit mode
		if (IS_SDIO()) {
  403c8c:	4b35      	ldr	r3, [pc, #212]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403c8e:	681b      	ldr	r3, [r3, #0]
  403c90:	7adb      	ldrb	r3, [r3, #11]
  403c92:	f003 0304 	and.w	r3, r3, #4
  403c96:	2b00      	cmp	r3, #0
  403c98:	d009      	beq.n	403cae <sd_mmc_mci_card_init+0x1c2>
			if (!sdio_cmd52_set_bus_width()) {
  403c9a:	4b41      	ldr	r3, [pc, #260]	; (403da0 <sd_mmc_mci_card_init+0x2b4>)
  403c9c:	4798      	blx	r3
  403c9e:	4603      	mov	r3, r0
  403ca0:	f083 0301 	eor.w	r3, r3, #1
  403ca4:	b2db      	uxtb	r3, r3
  403ca6:	2b00      	cmp	r3, #0
  403ca8:	d001      	beq.n	403cae <sd_mmc_mci_card_init+0x1c2>
				return false;
  403caa:	2300      	movs	r3, #0
  403cac:	e056      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  403cae:	4b2d      	ldr	r3, [pc, #180]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403cb0:	681b      	ldr	r3, [r3, #0]
  403cb2:	7adb      	ldrb	r3, [r3, #11]
  403cb4:	f003 0301 	and.w	r3, r3, #1
  403cb8:	2b00      	cmp	r3, #0
  403cba:	d009      	beq.n	403cd0 <sd_mmc_mci_card_init+0x1e4>
			if (!sd_acmd6()) {
  403cbc:	4b39      	ldr	r3, [pc, #228]	; (403da4 <sd_mmc_mci_card_init+0x2b8>)
  403cbe:	4798      	blx	r3
  403cc0:	4603      	mov	r3, r0
  403cc2:	f083 0301 	eor.w	r3, r3, #1
  403cc6:	b2db      	uxtb	r3, r3
  403cc8:	2b00      	cmp	r3, #0
  403cca:	d001      	beq.n	403cd0 <sd_mmc_mci_card_init+0x1e4>
				return false;
  403ccc:	2300      	movs	r3, #0
  403cce:	e045      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  403cd0:	4b35      	ldr	r3, [pc, #212]	; (403da8 <sd_mmc_mci_card_init+0x2bc>)
  403cd2:	4798      	blx	r3
	}
	if (driver_is_high_speed_capable()) {
  403cd4:	4b35      	ldr	r3, [pc, #212]	; (403dac <sd_mmc_mci_card_init+0x2c0>)
  403cd6:	4798      	blx	r3
  403cd8:	4603      	mov	r3, r0
  403cda:	2b00      	cmp	r3, #0
  403cdc:	d028      	beq.n	403d30 <sd_mmc_mci_card_init+0x244>
		// TRY to enable High-Speed Mode
		if (IS_SDIO()) {
  403cde:	4b21      	ldr	r3, [pc, #132]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403ce0:	681b      	ldr	r3, [r3, #0]
  403ce2:	7adb      	ldrb	r3, [r3, #11]
  403ce4:	f003 0304 	and.w	r3, r3, #4
  403ce8:	2b00      	cmp	r3, #0
  403cea:	d009      	beq.n	403d00 <sd_mmc_mci_card_init+0x214>
			if (!sdio_cmd52_set_high_speed()) {
  403cec:	4b30      	ldr	r3, [pc, #192]	; (403db0 <sd_mmc_mci_card_init+0x2c4>)
  403cee:	4798      	blx	r3
  403cf0:	4603      	mov	r3, r0
  403cf2:	f083 0301 	eor.w	r3, r3, #1
  403cf6:	b2db      	uxtb	r3, r3
  403cf8:	2b00      	cmp	r3, #0
  403cfa:	d001      	beq.n	403d00 <sd_mmc_mci_card_init+0x214>
				return false;
  403cfc:	2300      	movs	r3, #0
  403cfe:	e02d      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  403d00:	4b18      	ldr	r3, [pc, #96]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403d02:	681b      	ldr	r3, [r3, #0]
  403d04:	7adb      	ldrb	r3, [r3, #11]
  403d06:	f003 0301 	and.w	r3, r3, #1
  403d0a:	2b00      	cmp	r3, #0
  403d0c:	d00e      	beq.n	403d2c <sd_mmc_mci_card_init+0x240>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  403d0e:	4b15      	ldr	r3, [pc, #84]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403d10:	681b      	ldr	r3, [r3, #0]
  403d12:	7b1b      	ldrb	r3, [r3, #12]
  403d14:	2b10      	cmp	r3, #16
  403d16:	d909      	bls.n	403d2c <sd_mmc_mci_card_init+0x240>
				if (!sd_cm6_set_high_speed()) {
  403d18:	4b26      	ldr	r3, [pc, #152]	; (403db4 <sd_mmc_mci_card_init+0x2c8>)
  403d1a:	4798      	blx	r3
  403d1c:	4603      	mov	r3, r0
  403d1e:	f083 0301 	eor.w	r3, r3, #1
  403d22:	b2db      	uxtb	r3, r3
  403d24:	2b00      	cmp	r3, #0
  403d26:	d001      	beq.n	403d2c <sd_mmc_mci_card_init+0x240>
					return false;
  403d28:	2300      	movs	r3, #0
  403d2a:	e017      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  403d2c:	4b1e      	ldr	r3, [pc, #120]	; (403da8 <sd_mmc_mci_card_init+0x2bc>)
  403d2e:	4798      	blx	r3
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403d30:	4b0c      	ldr	r3, [pc, #48]	; (403d64 <sd_mmc_mci_card_init+0x278>)
  403d32:	681b      	ldr	r3, [r3, #0]
  403d34:	7adb      	ldrb	r3, [r3, #11]
  403d36:	f003 0301 	and.w	r3, r3, #1
  403d3a:	2b00      	cmp	r3, #0
  403d3c:	d00d      	beq.n	403d5a <sd_mmc_mci_card_init+0x26e>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  403d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
  403d42:	f241 1010 	movw	r0, #4368	; 0x1110
  403d46:	4b0a      	ldr	r3, [pc, #40]	; (403d70 <sd_mmc_mci_card_init+0x284>)
  403d48:	4798      	blx	r3
  403d4a:	4603      	mov	r3, r0
  403d4c:	f083 0301 	eor.w	r3, r3, #1
  403d50:	b2db      	uxtb	r3, r3
  403d52:	2b00      	cmp	r3, #0
  403d54:	d001      	beq.n	403d5a <sd_mmc_mci_card_init+0x26e>
			return false;
  403d56:	2300      	movs	r3, #0
  403d58:	e000      	b.n	403d5c <sd_mmc_mci_card_init+0x270>
		}
	}
	return true;
  403d5a:	2301      	movs	r3, #1
}
  403d5c:	4618      	mov	r0, r3
  403d5e:	370c      	adds	r7, #12
  403d60:	46bd      	mov	sp, r7
  403d62:	bd90      	pop	{r4, r7, pc}
  403d64:	2000ab5c 	.word	0x2000ab5c
  403d68:	00404909 	.word	0x00404909
  403d6c:	0040381d 	.word	0x0040381d
  403d70:	00404945 	.word	0x00404945
  403d74:	00403455 	.word	0x00403455
  403d78:	00402fa5 	.word	0x00402fa5
  403d7c:	00402efd 	.word	0x00402efd
  403d80:	00403db9 	.word	0x00403db9
  403d84:	00404989 	.word	0x00404989
  403d88:	004035b1 	.word	0x004035b1
  403d8c:	0040372d 	.word	0x0040372d
  403d90:	004038e1 	.word	0x004038e1
  403d94:	0040304d 	.word	0x0040304d
  403d98:	2000ab58 	.word	0x2000ab58
  403d9c:	00404825 	.word	0x00404825
  403da0:	00403199 	.word	0x00403199
  403da4:	00403889 	.word	0x00403889
  403da8:	00403a91 	.word	0x00403a91
  403dac:	00404847 	.word	0x00404847
  403db0:	00403209 	.word	0x00403209
  403db4:	00403289 	.word	0x00403289

00403db8 <sd_mmc_mci_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_mci_install_mmc(void)
{
  403db8:	b580      	push	{r7, lr}
  403dba:	b082      	sub	sp, #8
  403dbc:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  403dbe:	2100      	movs	r1, #0
  403dc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  403dc4:	4b56      	ldr	r3, [pc, #344]	; (403f20 <sd_mmc_mci_install_mmc+0x168>)
  403dc6:	4798      	blx	r3
  403dc8:	4603      	mov	r3, r0
  403dca:	f083 0301 	eor.w	r3, r3, #1
  403dce:	b2db      	uxtb	r3, r3
  403dd0:	2b00      	cmp	r3, #0
  403dd2:	d001      	beq.n	403dd8 <sd_mmc_mci_install_mmc+0x20>
		return false;
  403dd4:	2300      	movs	r3, #0
  403dd6:	e09f      	b.n	403f18 <sd_mmc_mci_install_mmc+0x160>
	}

	if (!mmc_mci_op_cond()) {
  403dd8:	4b52      	ldr	r3, [pc, #328]	; (403f24 <sd_mmc_mci_install_mmc+0x16c>)
  403dda:	4798      	blx	r3
  403ddc:	4603      	mov	r3, r0
  403dde:	f083 0301 	eor.w	r3, r3, #1
  403de2:	b2db      	uxtb	r3, r3
  403de4:	2b00      	cmp	r3, #0
  403de6:	d001      	beq.n	403dec <sd_mmc_mci_install_mmc+0x34>
		return false;
  403de8:	2300      	movs	r3, #0
  403dea:	e095      	b.n	403f18 <sd_mmc_mci_install_mmc+0x160>
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  403dec:	2100      	movs	r1, #0
  403dee:	f645 3002 	movw	r0, #23298	; 0x5b02
  403df2:	4b4b      	ldr	r3, [pc, #300]	; (403f20 <sd_mmc_mci_install_mmc+0x168>)
  403df4:	4798      	blx	r3
  403df6:	4603      	mov	r3, r0
  403df8:	f083 0301 	eor.w	r3, r3, #1
  403dfc:	b2db      	uxtb	r3, r3
  403dfe:	2b00      	cmp	r3, #0
  403e00:	d001      	beq.n	403e06 <sd_mmc_mci_install_mmc+0x4e>
		return false;
  403e02:	2300      	movs	r3, #0
  403e04:	e088      	b.n	403f18 <sd_mmc_mci_install_mmc+0x160>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  403e06:	4b48      	ldr	r3, [pc, #288]	; (403f28 <sd_mmc_mci_install_mmc+0x170>)
  403e08:	681b      	ldr	r3, [r3, #0]
  403e0a:	2201      	movs	r2, #1
  403e0c:	811a      	strh	r2, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
  403e0e:	4b46      	ldr	r3, [pc, #280]	; (403f28 <sd_mmc_mci_install_mmc+0x170>)
  403e10:	681b      	ldr	r3, [r3, #0]
  403e12:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  403e14:	041b      	lsls	r3, r3, #16
  403e16:	4619      	mov	r1, r3
  403e18:	f241 1003 	movw	r0, #4355	; 0x1103
  403e1c:	4b40      	ldr	r3, [pc, #256]	; (403f20 <sd_mmc_mci_install_mmc+0x168>)
  403e1e:	4798      	blx	r3
  403e20:	4603      	mov	r3, r0
  403e22:	f083 0301 	eor.w	r3, r3, #1
  403e26:	b2db      	uxtb	r3, r3
  403e28:	2b00      	cmp	r3, #0
  403e2a:	d001      	beq.n	403e30 <sd_mmc_mci_install_mmc+0x78>
		return false;
  403e2c:	2300      	movs	r3, #0
  403e2e:	e073      	b.n	403f18 <sd_mmc_mci_install_mmc+0x160>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  403e30:	4b3e      	ldr	r3, [pc, #248]	; (403f2c <sd_mmc_mci_install_mmc+0x174>)
  403e32:	4798      	blx	r3
  403e34:	4603      	mov	r3, r0
  403e36:	f083 0301 	eor.w	r3, r3, #1
  403e3a:	b2db      	uxtb	r3, r3
  403e3c:	2b00      	cmp	r3, #0
  403e3e:	d001      	beq.n	403e44 <sd_mmc_mci_install_mmc+0x8c>
		return false;
  403e40:	2300      	movs	r3, #0
  403e42:	e069      	b.n	403f18 <sd_mmc_mci_install_mmc+0x160>
	}
	mmc_decode_csd();
  403e44:	4b3a      	ldr	r3, [pc, #232]	; (403f30 <sd_mmc_mci_install_mmc+0x178>)
  403e46:	4798      	blx	r3
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  403e48:	4b37      	ldr	r3, [pc, #220]	; (403f28 <sd_mmc_mci_install_mmc+0x170>)
  403e4a:	681b      	ldr	r3, [r3, #0]
  403e4c:	891b      	ldrh	r3, [r3, #8]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  403e4e:	041b      	lsls	r3, r3, #16
  403e50:	4619      	mov	r1, r3
  403e52:	f243 1007 	movw	r0, #12551	; 0x3107
  403e56:	4b32      	ldr	r3, [pc, #200]	; (403f20 <sd_mmc_mci_install_mmc+0x168>)
  403e58:	4798      	blx	r3
  403e5a:	4603      	mov	r3, r0
  403e5c:	f083 0301 	eor.w	r3, r3, #1
  403e60:	b2db      	uxtb	r3, r3
  403e62:	2b00      	cmp	r3, #0
  403e64:	d001      	beq.n	403e6a <sd_mmc_mci_install_mmc+0xb2>
		return false;
  403e66:	2300      	movs	r3, #0
  403e68:	e056      	b.n	403f18 <sd_mmc_mci_install_mmc+0x160>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  403e6a:	4b2f      	ldr	r3, [pc, #188]	; (403f28 <sd_mmc_mci_install_mmc+0x170>)
  403e6c:	681b      	ldr	r3, [r3, #0]
  403e6e:	7b1b      	ldrb	r3, [r3, #12]
  403e70:	2b3f      	cmp	r3, #63	; 0x3f
  403e72:	d93b      	bls.n	403eec <sd_mmc_mci_install_mmc+0x134>
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
  403e74:	1dbb      	adds	r3, r7, #6
  403e76:	4618      	mov	r0, r3
  403e78:	4b2e      	ldr	r3, [pc, #184]	; (403f34 <sd_mmc_mci_install_mmc+0x17c>)
  403e7a:	4798      	blx	r3
  403e7c:	4603      	mov	r3, r0
  403e7e:	f083 0301 	eor.w	r3, r3, #1
  403e82:	b2db      	uxtb	r3, r3
  403e84:	2b00      	cmp	r3, #0
  403e86:	d001      	beq.n	403e8c <sd_mmc_mci_install_mmc+0xd4>
			return false;
  403e88:	2300      	movs	r3, #0
  403e8a:	e045      	b.n	403f18 <sd_mmc_mci_install_mmc+0x160>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  403e8c:	4b2a      	ldr	r3, [pc, #168]	; (403f38 <sd_mmc_mci_install_mmc+0x180>)
  403e8e:	781b      	ldrb	r3, [r3, #0]
  403e90:	4618      	mov	r0, r3
  403e92:	4b2a      	ldr	r3, [pc, #168]	; (403f3c <sd_mmc_mci_install_mmc+0x184>)
  403e94:	4798      	blx	r3
  403e96:	4603      	mov	r3, r0
  403e98:	2b03      	cmp	r3, #3
  403e9a:	d912      	bls.n	403ec2 <sd_mmc_mci_install_mmc+0x10a>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  403e9c:	4b26      	ldr	r3, [pc, #152]	; (403f38 <sd_mmc_mci_install_mmc+0x180>)
  403e9e:	781b      	ldrb	r3, [r3, #0]
  403ea0:	4618      	mov	r0, r3
  403ea2:	4b26      	ldr	r3, [pc, #152]	; (403f3c <sd_mmc_mci_install_mmc+0x184>)
  403ea4:	4798      	blx	r3
  403ea6:	4603      	mov	r3, r0
  403ea8:	4618      	mov	r0, r3
  403eaa:	4b25      	ldr	r3, [pc, #148]	; (403f40 <sd_mmc_mci_install_mmc+0x188>)
  403eac:	4798      	blx	r3
  403eae:	4603      	mov	r3, r0
  403eb0:	f083 0301 	eor.w	r3, r3, #1
  403eb4:	b2db      	uxtb	r3, r3
  403eb6:	2b00      	cmp	r3, #0
  403eb8:	d001      	beq.n	403ebe <sd_mmc_mci_install_mmc+0x106>
				return false;
  403eba:	2300      	movs	r3, #0
  403ebc:	e02c      	b.n	403f18 <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  403ebe:	4b21      	ldr	r3, [pc, #132]	; (403f44 <sd_mmc_mci_install_mmc+0x18c>)
  403ec0:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  403ec2:	4b21      	ldr	r3, [pc, #132]	; (403f48 <sd_mmc_mci_install_mmc+0x190>)
  403ec4:	4798      	blx	r3
  403ec6:	4603      	mov	r3, r0
  403ec8:	2b00      	cmp	r3, #0
  403eca:	d011      	beq.n	403ef0 <sd_mmc_mci_install_mmc+0x138>
  403ecc:	79bb      	ldrb	r3, [r7, #6]
  403ece:	2b00      	cmp	r3, #0
  403ed0:	d00e      	beq.n	403ef0 <sd_mmc_mci_install_mmc+0x138>
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
  403ed2:	4b1e      	ldr	r3, [pc, #120]	; (403f4c <sd_mmc_mci_install_mmc+0x194>)
  403ed4:	4798      	blx	r3
  403ed6:	4603      	mov	r3, r0
  403ed8:	f083 0301 	eor.w	r3, r3, #1
  403edc:	b2db      	uxtb	r3, r3
  403ede:	2b00      	cmp	r3, #0
  403ee0:	d001      	beq.n	403ee6 <sd_mmc_mci_install_mmc+0x12e>
				return false;
  403ee2:	2300      	movs	r3, #0
  403ee4:	e018      	b.n	403f18 <sd_mmc_mci_install_mmc+0x160>
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  403ee6:	4b17      	ldr	r3, [pc, #92]	; (403f44 <sd_mmc_mci_install_mmc+0x18c>)
  403ee8:	4798      	blx	r3
  403eea:	e001      	b.n	403ef0 <sd_mmc_mci_install_mmc+0x138>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  403eec:	4b15      	ldr	r3, [pc, #84]	; (403f44 <sd_mmc_mci_install_mmc+0x18c>)
  403eee:	4798      	blx	r3
	}

	uint8_t retry = 10;
  403ef0:	230a      	movs	r3, #10
  403ef2:	71fb      	strb	r3, [r7, #7]
	while (retry--) {
  403ef4:	e00a      	b.n	403f0c <sd_mmc_mci_install_mmc+0x154>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  403ef6:	f44f 7100 	mov.w	r1, #512	; 0x200
  403efa:	f241 1010 	movw	r0, #4368	; 0x1110
  403efe:	4b08      	ldr	r3, [pc, #32]	; (403f20 <sd_mmc_mci_install_mmc+0x168>)
  403f00:	4798      	blx	r3
  403f02:	4603      	mov	r3, r0
  403f04:	2b00      	cmp	r3, #0
  403f06:	d001      	beq.n	403f0c <sd_mmc_mci_install_mmc+0x154>
			return true;
  403f08:	2301      	movs	r3, #1
  403f0a:	e005      	b.n	403f18 <sd_mmc_mci_install_mmc+0x160>
	while (retry--) {
  403f0c:	79fb      	ldrb	r3, [r7, #7]
  403f0e:	1e5a      	subs	r2, r3, #1
  403f10:	71fa      	strb	r2, [r7, #7]
  403f12:	2b00      	cmp	r3, #0
  403f14:	d1ef      	bne.n	403ef6 <sd_mmc_mci_install_mmc+0x13e>
		}
	}
	return false;
  403f16:	2300      	movs	r3, #0
}
  403f18:	4618      	mov	r0, r3
  403f1a:	3708      	adds	r7, #8
  403f1c:	46bd      	mov	sp, r7
  403f1e:	bd80      	pop	{r7, pc}
  403f20:	00404945 	.word	0x00404945
  403f24:	00402e81 	.word	0x00402e81
  403f28:	2000ab5c 	.word	0x2000ab5c
  403f2c:	004035b1 	.word	0x004035b1
  403f30:	004035f5 	.word	0x004035f5
  403f34:	004034b9 	.word	0x004034b9
  403f38:	2000ab58 	.word	0x2000ab58
  403f3c:	00404825 	.word	0x00404825
  403f40:	0040337d 	.word	0x0040337d
  403f44:	00403a91 	.word	0x00403a91
  403f48:	00404847 	.word	0x00404847
  403f4c:	004033f9 	.word	0x004033f9

00403f50 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  403f50:	b580      	push	{r7, lr}
  403f52:	b082      	sub	sp, #8
  403f54:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  403f56:	2300      	movs	r3, #0
  403f58:	71fb      	strb	r3, [r7, #7]
  403f5a:	e009      	b.n	403f70 <sd_mmc_init+0x20>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  403f5c:	79fb      	ldrb	r3, [r7, #7]
  403f5e:	4a0a      	ldr	r2, [pc, #40]	; (403f88 <sd_mmc_init+0x38>)
  403f60:	015b      	lsls	r3, r3, #5
  403f62:	4413      	add	r3, r2
  403f64:	330a      	adds	r3, #10
  403f66:	2204      	movs	r2, #4
  403f68:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
  403f6a:	79fb      	ldrb	r3, [r7, #7]
  403f6c:	3301      	adds	r3, #1
  403f6e:	71fb      	strb	r3, [r7, #7]
  403f70:	79fb      	ldrb	r3, [r7, #7]
  403f72:	2b00      	cmp	r3, #0
  403f74:	d0f2      	beq.n	403f5c <sd_mmc_init+0xc>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  403f76:	4b05      	ldr	r3, [pc, #20]	; (403f8c <sd_mmc_init+0x3c>)
  403f78:	22ff      	movs	r2, #255	; 0xff
  403f7a:	701a      	strb	r2, [r3, #0]
	driver_init();
  403f7c:	4b04      	ldr	r3, [pc, #16]	; (403f90 <sd_mmc_init+0x40>)
  403f7e:	4798      	blx	r3
}
  403f80:	bf00      	nop
  403f82:	3708      	adds	r7, #8
  403f84:	46bd      	mov	sp, r7
  403f86:	bd80      	pop	{r7, pc}
  403f88:	2000ab38 	.word	0x2000ab38
  403f8c:	2000ab58 	.word	0x2000ab58
  403f90:	004047ed 	.word	0x004047ed

00403f94 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  403f94:	b580      	push	{r7, lr}
  403f96:	b084      	sub	sp, #16
  403f98:	af00      	add	r7, sp, #0
  403f9a:	4603      	mov	r3, r0
  403f9c:	71fb      	strb	r3, [r7, #7]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  403f9e:	79fb      	ldrb	r3, [r7, #7]
  403fa0:	4618      	mov	r0, r3
  403fa2:	4b11      	ldr	r3, [pc, #68]	; (403fe8 <sd_mmc_check+0x54>)
  403fa4:	4798      	blx	r3
  403fa6:	4603      	mov	r3, r0
  403fa8:	73fb      	strb	r3, [r7, #15]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  403faa:	7bfb      	ldrb	r3, [r7, #15]
  403fac:	2b01      	cmp	r3, #1
  403fae:	d003      	beq.n	403fb8 <sd_mmc_check+0x24>
		sd_mmc_deselect_slot();
  403fb0:	4b0e      	ldr	r3, [pc, #56]	; (403fec <sd_mmc_check+0x58>)
  403fb2:	4798      	blx	r3
		return sd_mmc_err;
  403fb4:	7bfb      	ldrb	r3, [r7, #15]
  403fb6:	e013      	b.n	403fe0 <sd_mmc_check+0x4c>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
			: sd_mmc_mci_card_init()) {
  403fb8:	4b0d      	ldr	r3, [pc, #52]	; (403ff0 <sd_mmc_check+0x5c>)
  403fba:	4798      	blx	r3
  403fbc:	4603      	mov	r3, r0
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  403fbe:	2b00      	cmp	r3, #0
  403fc0:	d007      	beq.n	403fd2 <sd_mmc_check+0x3e>
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  403fc2:	4b0c      	ldr	r3, [pc, #48]	; (403ff4 <sd_mmc_check+0x60>)
  403fc4:	681b      	ldr	r3, [r3, #0]
  403fc6:	2200      	movs	r2, #0
  403fc8:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
  403fca:	4b08      	ldr	r3, [pc, #32]	; (403fec <sd_mmc_check+0x58>)
  403fcc:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  403fce:	2301      	movs	r3, #1
  403fd0:	e006      	b.n	403fe0 <sd_mmc_check+0x4c>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  403fd2:	4b08      	ldr	r3, [pc, #32]	; (403ff4 <sd_mmc_check+0x60>)
  403fd4:	681b      	ldr	r3, [r3, #0]
  403fd6:	2203      	movs	r2, #3
  403fd8:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
  403fda:	4b04      	ldr	r3, [pc, #16]	; (403fec <sd_mmc_check+0x58>)
  403fdc:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  403fde:	2303      	movs	r3, #3
}
  403fe0:	4618      	mov	r0, r3
  403fe2:	3710      	adds	r7, #16
  403fe4:	46bd      	mov	sp, r7
  403fe6:	bd80      	pop	{r7, pc}
  403fe8:	004039dd 	.word	0x004039dd
  403fec:	00403ac9 	.word	0x00403ac9
  403ff0:	00403aed 	.word	0x00403aed
  403ff4:	2000ab5c 	.word	0x2000ab5c

00403ff8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  403ff8:	b580      	push	{r7, lr}
  403ffa:	b082      	sub	sp, #8
  403ffc:	af00      	add	r7, sp, #0
  403ffe:	4603      	mov	r3, r0
  404000:	71fb      	strb	r3, [r7, #7]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  404002:	79fb      	ldrb	r3, [r7, #7]
  404004:	4618      	mov	r0, r3
  404006:	4b08      	ldr	r3, [pc, #32]	; (404028 <sd_mmc_get_type+0x30>)
  404008:	4798      	blx	r3
  40400a:	4603      	mov	r3, r0
  40400c:	2b00      	cmp	r3, #0
  40400e:	d001      	beq.n	404014 <sd_mmc_get_type+0x1c>
		return CARD_TYPE_UNKNOWN;
  404010:	2300      	movs	r3, #0
  404012:	e004      	b.n	40401e <sd_mmc_get_type+0x26>
	}
	sd_mmc_deselect_slot();
  404014:	4b05      	ldr	r3, [pc, #20]	; (40402c <sd_mmc_get_type+0x34>)
  404016:	4798      	blx	r3
	return sd_mmc_card->type;
  404018:	4b05      	ldr	r3, [pc, #20]	; (404030 <sd_mmc_get_type+0x38>)
  40401a:	681b      	ldr	r3, [r3, #0]
  40401c:	7adb      	ldrb	r3, [r3, #11]
}
  40401e:	4618      	mov	r0, r3
  404020:	3708      	adds	r7, #8
  404022:	46bd      	mov	sp, r7
  404024:	bd80      	pop	{r7, pc}
  404026:	bf00      	nop
  404028:	004039dd 	.word	0x004039dd
  40402c:	00403ac9 	.word	0x00403ac9
  404030:	2000ab5c 	.word	0x2000ab5c

00404034 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  404034:	b580      	push	{r7, lr}
  404036:	b082      	sub	sp, #8
  404038:	af00      	add	r7, sp, #0
  40403a:	4603      	mov	r3, r0
  40403c:	71fb      	strb	r3, [r7, #7]
	switch (sd_mmc_check(slot))
  40403e:	79fb      	ldrb	r3, [r7, #7]
  404040:	4618      	mov	r0, r3
  404042:	4b15      	ldr	r3, [pc, #84]	; (404098 <sd_mmc_test_unit_ready+0x64>)
  404044:	4798      	blx	r3
  404046:	4603      	mov	r3, r0
  404048:	2b01      	cmp	r3, #1
  40404a:	d017      	beq.n	40407c <sd_mmc_test_unit_ready+0x48>
  40404c:	2b02      	cmp	r3, #2
  40404e:	d017      	beq.n	404080 <sd_mmc_test_unit_ready+0x4c>
  404050:	2b00      	cmp	r3, #0
  404052:	d11b      	bne.n	40408c <sd_mmc_test_unit_ready+0x58>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  404054:	79fb      	ldrb	r3, [r7, #7]
  404056:	4a11      	ldr	r2, [pc, #68]	; (40409c <sd_mmc_test_unit_ready+0x68>)
  404058:	5cd3      	ldrb	r3, [r2, r3]
  40405a:	2b00      	cmp	r3, #0
  40405c:	d001      	beq.n	404062 <sd_mmc_test_unit_ready+0x2e>
			return CTRL_NO_PRESENT;
  40405e:	2302      	movs	r3, #2
  404060:	e015      	b.n	40408e <sd_mmc_test_unit_ready+0x5a>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  404062:	79fb      	ldrb	r3, [r7, #7]
  404064:	4618      	mov	r0, r3
  404066:	4b0e      	ldr	r3, [pc, #56]	; (4040a0 <sd_mmc_test_unit_ready+0x6c>)
  404068:	4798      	blx	r3
  40406a:	4603      	mov	r3, r0
  40406c:	f003 0303 	and.w	r3, r3, #3
  404070:	2b00      	cmp	r3, #0
  404072:	d001      	beq.n	404078 <sd_mmc_test_unit_ready+0x44>
			return CTRL_GOOD;
  404074:	2300      	movs	r3, #0
  404076:	e00a      	b.n	40408e <sd_mmc_test_unit_ready+0x5a>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
  404078:	2302      	movs	r3, #2
  40407a:	e008      	b.n	40408e <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  40407c:	2303      	movs	r3, #3
  40407e:	e006      	b.n	40408e <sd_mmc_test_unit_ready+0x5a>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  404080:	79fb      	ldrb	r3, [r7, #7]
  404082:	4a06      	ldr	r2, [pc, #24]	; (40409c <sd_mmc_test_unit_ready+0x68>)
  404084:	2100      	movs	r1, #0
  404086:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
  404088:	2302      	movs	r3, #2
  40408a:	e000      	b.n	40408e <sd_mmc_test_unit_ready+0x5a>

	default:
		return CTRL_FAIL;
  40408c:	2301      	movs	r3, #1
	}
}
  40408e:	4618      	mov	r0, r3
  404090:	3708      	adds	r7, #8
  404092:	46bd      	mov	sp, r7
  404094:	bd80      	pop	{r7, pc}
  404096:	bf00      	nop
  404098:	00403f95 	.word	0x00403f95
  40409c:	2000ab60 	.word	0x2000ab60
  4040a0:	00403ff9 	.word	0x00403ff9

004040a4 <sysclk_enable_peripheral_clock>:
{
  4040a4:	b580      	push	{r7, lr}
  4040a6:	b082      	sub	sp, #8
  4040a8:	af00      	add	r7, sp, #0
  4040aa:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4040ac:	6878      	ldr	r0, [r7, #4]
  4040ae:	4b03      	ldr	r3, [pc, #12]	; (4040bc <sysclk_enable_peripheral_clock+0x18>)
  4040b0:	4798      	blx	r3
}
  4040b2:	bf00      	nop
  4040b4:	3708      	adds	r7, #8
  4040b6:	46bd      	mov	sp, r7
  4040b8:	bd80      	pop	{r7, pc}
  4040ba:	bf00      	nop
  4040bc:	00406191 	.word	0x00406191

004040c0 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4040c0:	b580      	push	{r7, lr}
  4040c2:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4040c4:	2009      	movs	r0, #9
  4040c6:	4b08      	ldr	r3, [pc, #32]	; (4040e8 <ioport_init+0x28>)
  4040c8:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4040ca:	200a      	movs	r0, #10
  4040cc:	4b06      	ldr	r3, [pc, #24]	; (4040e8 <ioport_init+0x28>)
  4040ce:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4040d0:	200b      	movs	r0, #11
  4040d2:	4b05      	ldr	r3, [pc, #20]	; (4040e8 <ioport_init+0x28>)
  4040d4:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4040d6:	200c      	movs	r0, #12
  4040d8:	4b03      	ldr	r3, [pc, #12]	; (4040e8 <ioport_init+0x28>)
  4040da:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  4040dc:	200d      	movs	r0, #13
  4040de:	4b02      	ldr	r3, [pc, #8]	; (4040e8 <ioport_init+0x28>)
  4040e0:	4798      	blx	r3
	arch_ioport_init();
}
  4040e2:	bf00      	nop
  4040e4:	bd80      	pop	{r7, pc}
  4040e6:	bf00      	nop
  4040e8:	004040a5 	.word	0x004040a5

004040ec <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  4040ec:	b480      	push	{r7}
  4040ee:	b089      	sub	sp, #36	; 0x24
  4040f0:	af00      	add	r7, sp, #0
  4040f2:	6078      	str	r0, [r7, #4]
  4040f4:	687b      	ldr	r3, [r7, #4]
  4040f6:	61fb      	str	r3, [r7, #28]
  4040f8:	69fb      	ldr	r3, [r7, #28]
  4040fa:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4040fc:	69bb      	ldr	r3, [r7, #24]
  4040fe:	095a      	lsrs	r2, r3, #5
  404100:	69fb      	ldr	r3, [r7, #28]
  404102:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  404104:	697b      	ldr	r3, [r7, #20]
  404106:	f003 031f 	and.w	r3, r3, #31
  40410a:	2101      	movs	r1, #1
  40410c:	fa01 f303 	lsl.w	r3, r1, r3
  404110:	613a      	str	r2, [r7, #16]
  404112:	60fb      	str	r3, [r7, #12]
  404114:	693b      	ldr	r3, [r7, #16]
  404116:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404118:	68bb      	ldr	r3, [r7, #8]
  40411a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40411e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404122:	025b      	lsls	r3, r3, #9
  404124:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404126:	68fb      	ldr	r3, [r7, #12]
  404128:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40412a:	bf00      	nop
  40412c:	3724      	adds	r7, #36	; 0x24
  40412e:	46bd      	mov	sp, r7
  404130:	f85d 7b04 	ldr.w	r7, [sp], #4
  404134:	4770      	bx	lr

00404136 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  404136:	b480      	push	{r7}
  404138:	b08d      	sub	sp, #52	; 0x34
  40413a:	af00      	add	r7, sp, #0
  40413c:	6078      	str	r0, [r7, #4]
  40413e:	6039      	str	r1, [r7, #0]
  404140:	687b      	ldr	r3, [r7, #4]
  404142:	62fb      	str	r3, [r7, #44]	; 0x2c
  404144:	683b      	ldr	r3, [r7, #0]
  404146:	62bb      	str	r3, [r7, #40]	; 0x28
  404148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40414a:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40414e:	095a      	lsrs	r2, r3, #5
  404150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404152:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  404154:	6a3b      	ldr	r3, [r7, #32]
  404156:	f003 031f 	and.w	r3, r3, #31
  40415a:	2101      	movs	r1, #1
  40415c:	fa01 f303 	lsl.w	r3, r1, r3
  404160:	61fa      	str	r2, [r7, #28]
  404162:	61bb      	str	r3, [r7, #24]
  404164:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404166:	617b      	str	r3, [r7, #20]
  404168:	69fb      	ldr	r3, [r7, #28]
  40416a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40416c:	693b      	ldr	r3, [r7, #16]
  40416e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404172:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404176:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  404178:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  40417a:	697b      	ldr	r3, [r7, #20]
  40417c:	f003 0308 	and.w	r3, r3, #8
  404180:	2b00      	cmp	r3, #0
  404182:	d003      	beq.n	40418c <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  404184:	68fb      	ldr	r3, [r7, #12]
  404186:	69ba      	ldr	r2, [r7, #24]
  404188:	665a      	str	r2, [r3, #100]	; 0x64
  40418a:	e002      	b.n	404192 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  40418c:	68fb      	ldr	r3, [r7, #12]
  40418e:	69ba      	ldr	r2, [r7, #24]
  404190:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  404192:	697b      	ldr	r3, [r7, #20]
  404194:	f003 0310 	and.w	r3, r3, #16
  404198:	2b00      	cmp	r3, #0
  40419a:	d004      	beq.n	4041a6 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  40419c:	68fb      	ldr	r3, [r7, #12]
  40419e:	69ba      	ldr	r2, [r7, #24]
  4041a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4041a4:	e003      	b.n	4041ae <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  4041a6:	68fb      	ldr	r3, [r7, #12]
  4041a8:	69ba      	ldr	r2, [r7, #24]
  4041aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4041ae:	697b      	ldr	r3, [r7, #20]
  4041b0:	f003 0320 	and.w	r3, r3, #32
  4041b4:	2b00      	cmp	r3, #0
  4041b6:	d003      	beq.n	4041c0 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  4041b8:	68fb      	ldr	r3, [r7, #12]
  4041ba:	69ba      	ldr	r2, [r7, #24]
  4041bc:	651a      	str	r2, [r3, #80]	; 0x50
  4041be:	e002      	b.n	4041c6 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  4041c0:	68fb      	ldr	r3, [r7, #12]
  4041c2:	69ba      	ldr	r2, [r7, #24]
  4041c4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4041c6:	697b      	ldr	r3, [r7, #20]
  4041c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4041cc:	2b00      	cmp	r3, #0
  4041ce:	d003      	beq.n	4041d8 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4041d0:	68fb      	ldr	r3, [r7, #12]
  4041d2:	69ba      	ldr	r2, [r7, #24]
  4041d4:	621a      	str	r2, [r3, #32]
  4041d6:	e002      	b.n	4041de <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  4041d8:	68fb      	ldr	r3, [r7, #12]
  4041da:	69ba      	ldr	r2, [r7, #24]
  4041dc:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4041de:	697b      	ldr	r3, [r7, #20]
  4041e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4041e4:	2b00      	cmp	r3, #0
  4041e6:	d004      	beq.n	4041f2 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4041e8:	68fb      	ldr	r3, [r7, #12]
  4041ea:	69ba      	ldr	r2, [r7, #24]
  4041ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4041f0:	e003      	b.n	4041fa <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4041f2:	68fb      	ldr	r3, [r7, #12]
  4041f4:	69ba      	ldr	r2, [r7, #24]
  4041f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4041fa:	697b      	ldr	r3, [r7, #20]
  4041fc:	f003 0301 	and.w	r3, r3, #1
  404200:	2b00      	cmp	r3, #0
  404202:	d006      	beq.n	404212 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  404204:	68fb      	ldr	r3, [r7, #12]
  404206:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  404208:	69bb      	ldr	r3, [r7, #24]
  40420a:	431a      	orrs	r2, r3
  40420c:	68fb      	ldr	r3, [r7, #12]
  40420e:	671a      	str	r2, [r3, #112]	; 0x70
  404210:	e006      	b.n	404220 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  404212:	68fb      	ldr	r3, [r7, #12]
  404214:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  404216:	69bb      	ldr	r3, [r7, #24]
  404218:	43db      	mvns	r3, r3
  40421a:	401a      	ands	r2, r3
  40421c:	68fb      	ldr	r3, [r7, #12]
  40421e:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  404220:	697b      	ldr	r3, [r7, #20]
  404222:	f003 0302 	and.w	r3, r3, #2
  404226:	2b00      	cmp	r3, #0
  404228:	d006      	beq.n	404238 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  40422a:	68fb      	ldr	r3, [r7, #12]
  40422c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40422e:	69bb      	ldr	r3, [r7, #24]
  404230:	431a      	orrs	r2, r3
  404232:	68fb      	ldr	r3, [r7, #12]
  404234:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  404236:	e006      	b.n	404246 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  404238:	68fb      	ldr	r3, [r7, #12]
  40423a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40423c:	69bb      	ldr	r3, [r7, #24]
  40423e:	43db      	mvns	r3, r3
  404240:	401a      	ands	r2, r3
  404242:	68fb      	ldr	r3, [r7, #12]
  404244:	675a      	str	r2, [r3, #116]	; 0x74
  404246:	bf00      	nop
  404248:	3734      	adds	r7, #52	; 0x34
  40424a:	46bd      	mov	sp, r7
  40424c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404250:	4770      	bx	lr

00404252 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  404252:	b480      	push	{r7}
  404254:	b08d      	sub	sp, #52	; 0x34
  404256:	af00      	add	r7, sp, #0
  404258:	6078      	str	r0, [r7, #4]
  40425a:	460b      	mov	r3, r1
  40425c:	70fb      	strb	r3, [r7, #3]
  40425e:	687b      	ldr	r3, [r7, #4]
  404260:	62fb      	str	r3, [r7, #44]	; 0x2c
  404262:	78fb      	ldrb	r3, [r7, #3]
  404264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  404268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40426a:	627b      	str	r3, [r7, #36]	; 0x24
  40426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40426e:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  404270:	6a3b      	ldr	r3, [r7, #32]
  404272:	095b      	lsrs	r3, r3, #5
  404274:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404276:	69fb      	ldr	r3, [r7, #28]
  404278:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40427c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404280:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404282:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  404284:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  404288:	2b01      	cmp	r3, #1
  40428a:	d109      	bne.n	4042a0 <ioport_set_pin_dir+0x4e>
  40428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40428e:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  404290:	697b      	ldr	r3, [r7, #20]
  404292:	f003 031f 	and.w	r3, r3, #31
  404296:	2201      	movs	r2, #1
  404298:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40429a:	69bb      	ldr	r3, [r7, #24]
  40429c:	611a      	str	r2, [r3, #16]
  40429e:	e00c      	b.n	4042ba <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4042a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4042a4:	2b00      	cmp	r3, #0
  4042a6:	d108      	bne.n	4042ba <ioport_set_pin_dir+0x68>
  4042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4042aa:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4042ac:	693b      	ldr	r3, [r7, #16]
  4042ae:	f003 031f 	and.w	r3, r3, #31
  4042b2:	2201      	movs	r2, #1
  4042b4:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4042b6:	69bb      	ldr	r3, [r7, #24]
  4042b8:	615a      	str	r2, [r3, #20]
  4042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4042bc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4042be:	68fb      	ldr	r3, [r7, #12]
  4042c0:	f003 031f 	and.w	r3, r3, #31
  4042c4:	2201      	movs	r2, #1
  4042c6:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4042c8:	69bb      	ldr	r3, [r7, #24]
  4042ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4042ce:	bf00      	nop
  4042d0:	3734      	adds	r7, #52	; 0x34
  4042d2:	46bd      	mov	sp, r7
  4042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042d8:	4770      	bx	lr

004042da <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4042da:	b480      	push	{r7}
  4042dc:	b08b      	sub	sp, #44	; 0x2c
  4042de:	af00      	add	r7, sp, #0
  4042e0:	6078      	str	r0, [r7, #4]
  4042e2:	460b      	mov	r3, r1
  4042e4:	70fb      	strb	r3, [r7, #3]
  4042e6:	687b      	ldr	r3, [r7, #4]
  4042e8:	627b      	str	r3, [r7, #36]	; 0x24
  4042ea:	78fb      	ldrb	r3, [r7, #3]
  4042ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4042f2:	61fb      	str	r3, [r7, #28]
  4042f4:	69fb      	ldr	r3, [r7, #28]
  4042f6:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4042f8:	69bb      	ldr	r3, [r7, #24]
  4042fa:	095b      	lsrs	r3, r3, #5
  4042fc:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4042fe:	697b      	ldr	r3, [r7, #20]
  404300:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404304:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404308:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40430a:	613b      	str	r3, [r7, #16]

	if (level) {
  40430c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  404310:	2b00      	cmp	r3, #0
  404312:	d009      	beq.n	404328 <ioport_set_pin_level+0x4e>
  404314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404316:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  404318:	68fb      	ldr	r3, [r7, #12]
  40431a:	f003 031f 	and.w	r3, r3, #31
  40431e:	2201      	movs	r2, #1
  404320:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404322:	693b      	ldr	r3, [r7, #16]
  404324:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  404326:	e008      	b.n	40433a <ioport_set_pin_level+0x60>
  404328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40432a:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40432c:	68bb      	ldr	r3, [r7, #8]
  40432e:	f003 031f 	and.w	r3, r3, #31
  404332:	2201      	movs	r2, #1
  404334:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404336:	693b      	ldr	r3, [r7, #16]
  404338:	635a      	str	r2, [r3, #52]	; 0x34
  40433a:	bf00      	nop
  40433c:	372c      	adds	r7, #44	; 0x2c
  40433e:	46bd      	mov	sp, r7
  404340:	f85d 7b04 	ldr.w	r7, [sp], #4
  404344:	4770      	bx	lr
	...

00404348 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  404348:	b480      	push	{r7}
  40434a:	b08d      	sub	sp, #52	; 0x34
  40434c:	af00      	add	r7, sp, #0
  40434e:	6078      	str	r0, [r7, #4]
  404350:	460b      	mov	r3, r1
  404352:	70fb      	strb	r3, [r7, #3]
  404354:	687b      	ldr	r3, [r7, #4]
  404356:	62fb      	str	r3, [r7, #44]	; 0x2c
  404358:	78fb      	ldrb	r3, [r7, #3]
  40435a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404360:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  404362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404364:	095a      	lsrs	r2, r3, #5
  404366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404368:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40436a:	6a3b      	ldr	r3, [r7, #32]
  40436c:	f003 031f 	and.w	r3, r3, #31
  404370:	2101      	movs	r1, #1
  404372:	fa01 f303 	lsl.w	r3, r1, r3
  404376:	61fa      	str	r2, [r7, #28]
  404378:	61bb      	str	r3, [r7, #24]
  40437a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40437e:	75fb      	strb	r3, [r7, #23]
  404380:	69fb      	ldr	r3, [r7, #28]
  404382:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404384:	693b      	ldr	r3, [r7, #16]
  404386:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40438a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40438e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  404390:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  404392:	7dfb      	ldrb	r3, [r7, #23]
  404394:	3b01      	subs	r3, #1
  404396:	2b03      	cmp	r3, #3
  404398:	d82e      	bhi.n	4043f8 <ioport_set_pin_sense_mode+0xb0>
  40439a:	a201      	add	r2, pc, #4	; (adr r2, 4043a0 <ioport_set_pin_sense_mode+0x58>)
  40439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4043a0:	004043d5 	.word	0x004043d5
  4043a4:	004043e7 	.word	0x004043e7
  4043a8:	004043b1 	.word	0x004043b1
  4043ac:	004043c3 	.word	0x004043c3
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  4043b0:	68fb      	ldr	r3, [r7, #12]
  4043b2:	69ba      	ldr	r2, [r7, #24]
  4043b4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  4043b8:	68fb      	ldr	r3, [r7, #12]
  4043ba:	69ba      	ldr	r2, [r7, #24]
  4043bc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4043c0:	e01f      	b.n	404402 <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  4043c2:	68fb      	ldr	r3, [r7, #12]
  4043c4:	69ba      	ldr	r2, [r7, #24]
  4043c6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4043ca:	68fb      	ldr	r3, [r7, #12]
  4043cc:	69ba      	ldr	r2, [r7, #24]
  4043ce:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4043d2:	e016      	b.n	404402 <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  4043d4:	68fb      	ldr	r3, [r7, #12]
  4043d6:	69ba      	ldr	r2, [r7, #24]
  4043d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4043dc:	68fb      	ldr	r3, [r7, #12]
  4043de:	69ba      	ldr	r2, [r7, #24]
  4043e0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4043e4:	e00d      	b.n	404402 <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4043e6:	68fb      	ldr	r3, [r7, #12]
  4043e8:	69ba      	ldr	r2, [r7, #24]
  4043ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4043ee:	68fb      	ldr	r3, [r7, #12]
  4043f0:	69ba      	ldr	r2, [r7, #24]
  4043f2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4043f6:	e004      	b.n	404402 <ioport_set_pin_sense_mode+0xba>
		break;
	default:
		base->PIO_AIMDR = mask;
  4043f8:	68fb      	ldr	r3, [r7, #12]
  4043fa:	69ba      	ldr	r2, [r7, #24]
  4043fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  404400:	e003      	b.n	40440a <ioport_set_pin_sense_mode+0xc2>
		return;
	}
	base->PIO_AIMER = mask;
  404402:	68fb      	ldr	r3, [r7, #12]
  404404:	69ba      	ldr	r2, [r7, #24]
  404406:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  40440a:	bf00      	nop
  40440c:	3734      	adds	r7, #52	; 0x34
  40440e:	46bd      	mov	sp, r7
  404410:	f85d 7b04 	ldr.w	r7, [sp], #4
  404414:	4770      	bx	lr
  404416:	bf00      	nop

00404418 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  404418:	b580      	push	{r7, lr}
  40441a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40441c:	4b34      	ldr	r3, [pc, #208]	; (4044f0 <board_init+0xd8>)
  40441e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404422:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  404424:	4b33      	ldr	r3, [pc, #204]	; (4044f4 <board_init+0xdc>)
  404426:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  404428:	2101      	movs	r1, #1
  40442a:	2076      	movs	r0, #118	; 0x76
  40442c:	4b32      	ldr	r3, [pc, #200]	; (4044f8 <board_init+0xe0>)
  40442e:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  404430:	2101      	movs	r1, #1
  404432:	2076      	movs	r0, #118	; 0x76
  404434:	4b31      	ldr	r3, [pc, #196]	; (4044fc <board_init+0xe4>)
  404436:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  404438:	2100      	movs	r1, #0
  40443a:	2002      	movs	r0, #2
  40443c:	4b2e      	ldr	r3, [pc, #184]	; (4044f8 <board_init+0xe0>)
  40443e:	4798      	blx	r3
  404440:	2188      	movs	r1, #136	; 0x88
  404442:	2002      	movs	r0, #2
  404444:	4b2e      	ldr	r3, [pc, #184]	; (404500 <board_init+0xe8>)
  404446:	4798      	blx	r3
  404448:	2102      	movs	r1, #2
  40444a:	2002      	movs	r0, #2
  40444c:	4b2d      	ldr	r3, [pc, #180]	; (404504 <board_init+0xec>)
  40444e:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
#endif

#ifdef CONF_BOARD_CAN
	/* Configure the CAN1 TX and RX pin. */
	ioport_set_pin_peripheral_mode(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
  404450:	2102      	movs	r1, #2
  404452:	204c      	movs	r0, #76	; 0x4c
  404454:	4b2a      	ldr	r3, [pc, #168]	; (404500 <board_init+0xe8>)
  404456:	4798      	blx	r3
  404458:	204c      	movs	r0, #76	; 0x4c
  40445a:	4b2b      	ldr	r3, [pc, #172]	; (404508 <board_init+0xf0>)
  40445c:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
  40445e:	2102      	movs	r1, #2
  404460:	204f      	movs	r0, #79	; 0x4f
  404462:	4b27      	ldr	r3, [pc, #156]	; (404500 <board_init+0xe8>)
  404464:	4798      	blx	r3
  404466:	204f      	movs	r0, #79	; 0x4f
  404468:	4b27      	ldr	r3, [pc, #156]	; (404508 <board_init+0xf0>)
  40446a:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	ioport_set_pin_dir(PIN_CAN1_TR_RS_IDX, IOPORT_DIR_OUTPUT);
  40446c:	2101      	movs	r1, #1
  40446e:	2082      	movs	r0, #130	; 0x82
  404470:	4b21      	ldr	r3, [pc, #132]	; (4044f8 <board_init+0xe0>)
  404472:	4798      	blx	r3
	ioport_set_pin_dir(PIN_CAN1_TR_EN_IDX, IOPORT_DIR_OUTPUT);
  404474:	2101      	movs	r1, #1
  404476:	2083      	movs	r0, #131	; 0x83
  404478:	4b1f      	ldr	r3, [pc, #124]	; (4044f8 <board_init+0xe0>)
  40447a:	4798      	blx	r3
#  endif
#endif

#if defined (CONF_BOARD_SD_MMC_HSMCI)
	/* Configure HSMCI pins */
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
  40447c:	2102      	movs	r1, #2
  40447e:	201c      	movs	r0, #28
  404480:	4b1f      	ldr	r3, [pc, #124]	; (404500 <board_init+0xe8>)
  404482:	4798      	blx	r3
  404484:	201c      	movs	r0, #28
  404486:	4b20      	ldr	r3, [pc, #128]	; (404508 <board_init+0xf0>)
  404488:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
  40448a:	2102      	movs	r1, #2
  40448c:	201d      	movs	r0, #29
  40448e:	4b1c      	ldr	r3, [pc, #112]	; (404500 <board_init+0xe8>)
  404490:	4798      	blx	r3
  404492:	201d      	movs	r0, #29
  404494:	4b1c      	ldr	r3, [pc, #112]	; (404508 <board_init+0xf0>)
  404496:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
  404498:	2102      	movs	r1, #2
  40449a:	201e      	movs	r0, #30
  40449c:	4b18      	ldr	r3, [pc, #96]	; (404500 <board_init+0xe8>)
  40449e:	4798      	blx	r3
  4044a0:	201e      	movs	r0, #30
  4044a2:	4b19      	ldr	r3, [pc, #100]	; (404508 <board_init+0xf0>)
  4044a4:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
  4044a6:	2102      	movs	r1, #2
  4044a8:	201f      	movs	r0, #31
  4044aa:	4b15      	ldr	r3, [pc, #84]	; (404500 <board_init+0xe8>)
  4044ac:	4798      	blx	r3
  4044ae:	201f      	movs	r0, #31
  4044b0:	4b15      	ldr	r3, [pc, #84]	; (404508 <board_init+0xf0>)
  4044b2:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
  4044b4:	2102      	movs	r1, #2
  4044b6:	201a      	movs	r0, #26
  4044b8:	4b11      	ldr	r3, [pc, #68]	; (404500 <board_init+0xe8>)
  4044ba:	4798      	blx	r3
  4044bc:	201a      	movs	r0, #26
  4044be:	4b12      	ldr	r3, [pc, #72]	; (404508 <board_init+0xf0>)
  4044c0:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
  4044c2:	2102      	movs	r1, #2
  4044c4:	201b      	movs	r0, #27
  4044c6:	4b0e      	ldr	r3, [pc, #56]	; (404500 <board_init+0xe8>)
  4044c8:	4798      	blx	r3
  4044ca:	201b      	movs	r0, #27
  4044cc:	4b0e      	ldr	r3, [pc, #56]	; (404508 <board_init+0xf0>)
  4044ce:	4798      	blx	r3
	ioport_set_pin_dir(AT86RFX_SLP_PIN, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(AT86RFX_SLP_PIN, IOPORT_PIN_LEVEL_HIGH);
#endif  

#if (defined(CONF_BOARD_TWI0) || defined(CONF_BOARD_EDBG_TWI))
	ioport_set_pin_peripheral_mode(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  4044d0:	2100      	movs	r1, #0
  4044d2:	2003      	movs	r0, #3
  4044d4:	4b0a      	ldr	r3, [pc, #40]	; (404500 <board_init+0xe8>)
  4044d6:	4798      	blx	r3
  4044d8:	2003      	movs	r0, #3
  4044da:	4b0b      	ldr	r3, [pc, #44]	; (404508 <board_init+0xf0>)
  4044dc:	4798      	blx	r3
	ioport_set_pin_peripheral_mode(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  4044de:	2100      	movs	r1, #0
  4044e0:	2004      	movs	r0, #4
  4044e2:	4b07      	ldr	r3, [pc, #28]	; (404500 <board_init+0xe8>)
  4044e4:	4798      	blx	r3
  4044e6:	2004      	movs	r0, #4
  4044e8:	4b07      	ldr	r3, [pc, #28]	; (404508 <board_init+0xf0>)
  4044ea:	4798      	blx	r3
#endif

}
  4044ec:	bf00      	nop
  4044ee:	bd80      	pop	{r7, pc}
  4044f0:	400e1850 	.word	0x400e1850
  4044f4:	004040c1 	.word	0x004040c1
  4044f8:	00404253 	.word	0x00404253
  4044fc:	004042db 	.word	0x004042db
  404500:	00404137 	.word	0x00404137
  404504:	00404349 	.word	0x00404349
  404508:	004040ed 	.word	0x004040ed

0040450c <osc_get_rate>:
{
  40450c:	b480      	push	{r7}
  40450e:	b083      	sub	sp, #12
  404510:	af00      	add	r7, sp, #0
  404512:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404514:	687b      	ldr	r3, [r7, #4]
  404516:	2b07      	cmp	r3, #7
  404518:	d825      	bhi.n	404566 <osc_get_rate+0x5a>
  40451a:	a201      	add	r2, pc, #4	; (adr r2, 404520 <osc_get_rate+0x14>)
  40451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404520:	00404541 	.word	0x00404541
  404524:	00404547 	.word	0x00404547
  404528:	0040454d 	.word	0x0040454d
  40452c:	00404553 	.word	0x00404553
  404530:	00404557 	.word	0x00404557
  404534:	0040455b 	.word	0x0040455b
  404538:	0040455f 	.word	0x0040455f
  40453c:	00404563 	.word	0x00404563
		return OSC_SLCK_32K_RC_HZ;
  404540:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404544:	e010      	b.n	404568 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  404546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40454a:	e00d      	b.n	404568 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40454c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404550:	e00a      	b.n	404568 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  404552:	4b08      	ldr	r3, [pc, #32]	; (404574 <osc_get_rate+0x68>)
  404554:	e008      	b.n	404568 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  404556:	4b08      	ldr	r3, [pc, #32]	; (404578 <osc_get_rate+0x6c>)
  404558:	e006      	b.n	404568 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40455a:	4b08      	ldr	r3, [pc, #32]	; (40457c <osc_get_rate+0x70>)
  40455c:	e004      	b.n	404568 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40455e:	4b07      	ldr	r3, [pc, #28]	; (40457c <osc_get_rate+0x70>)
  404560:	e002      	b.n	404568 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  404562:	4b06      	ldr	r3, [pc, #24]	; (40457c <osc_get_rate+0x70>)
  404564:	e000      	b.n	404568 <osc_get_rate+0x5c>
	return 0;
  404566:	2300      	movs	r3, #0
}
  404568:	4618      	mov	r0, r3
  40456a:	370c      	adds	r7, #12
  40456c:	46bd      	mov	sp, r7
  40456e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404572:	4770      	bx	lr
  404574:	003d0900 	.word	0x003d0900
  404578:	007a1200 	.word	0x007a1200
  40457c:	00b71b00 	.word	0x00b71b00

00404580 <sysclk_get_main_hz>:
{
  404580:	b580      	push	{r7, lr}
  404582:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  404584:	2006      	movs	r0, #6
  404586:	4b03      	ldr	r3, [pc, #12]	; (404594 <sysclk_get_main_hz+0x14>)
  404588:	4798      	blx	r3
  40458a:	4603      	mov	r3, r0
  40458c:	011b      	lsls	r3, r3, #4
}
  40458e:	4618      	mov	r0, r3
  404590:	bd80      	pop	{r7, pc}
  404592:	bf00      	nop
  404594:	0040450d 	.word	0x0040450d

00404598 <sysclk_get_peripheral_hz>:
{
  404598:	b580      	push	{r7, lr}
  40459a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40459c:	4b02      	ldr	r3, [pc, #8]	; (4045a8 <sysclk_get_peripheral_hz+0x10>)
  40459e:	4798      	blx	r3
  4045a0:	4603      	mov	r3, r0
  4045a2:	085b      	lsrs	r3, r3, #1
}
  4045a4:	4618      	mov	r0, r3
  4045a6:	bd80      	pop	{r7, pc}
  4045a8:	00404581 	.word	0x00404581

004045ac <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  4045ac:	b480      	push	{r7}
  4045ae:	b087      	sub	sp, #28
  4045b0:	af00      	add	r7, sp, #0
	uint32_t mr = HSMCI->HSMCI_MR;
  4045b2:	4b15      	ldr	r3, [pc, #84]	; (404608 <hsmci_reset+0x5c>)
  4045b4:	685b      	ldr	r3, [r3, #4]
  4045b6:	617b      	str	r3, [r7, #20]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  4045b8:	4b13      	ldr	r3, [pc, #76]	; (404608 <hsmci_reset+0x5c>)
  4045ba:	689b      	ldr	r3, [r3, #8]
  4045bc:	613b      	str	r3, [r7, #16]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  4045be:	4b12      	ldr	r3, [pc, #72]	; (404608 <hsmci_reset+0x5c>)
  4045c0:	68db      	ldr	r3, [r3, #12]
  4045c2:	60fb      	str	r3, [r7, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  4045c4:	4b10      	ldr	r3, [pc, #64]	; (404608 <hsmci_reset+0x5c>)
  4045c6:	69db      	ldr	r3, [r3, #28]
  4045c8:	60bb      	str	r3, [r7, #8]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  4045ca:	4b0f      	ldr	r3, [pc, #60]	; (404608 <hsmci_reset+0x5c>)
  4045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  4045ce:	607b      	str	r3, [r7, #4]
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  4045d0:	4b0d      	ldr	r3, [pc, #52]	; (404608 <hsmci_reset+0x5c>)
  4045d2:	2280      	movs	r2, #128	; 0x80
  4045d4:	601a      	str	r2, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  4045d6:	4a0c      	ldr	r2, [pc, #48]	; (404608 <hsmci_reset+0x5c>)
  4045d8:	697b      	ldr	r3, [r7, #20]
  4045da:	6053      	str	r3, [r2, #4]
	HSMCI->HSMCI_DTOR = dtor;
  4045dc:	4a0a      	ldr	r2, [pc, #40]	; (404608 <hsmci_reset+0x5c>)
  4045de:	693b      	ldr	r3, [r7, #16]
  4045e0:	6093      	str	r3, [r2, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  4045e2:	4a09      	ldr	r2, [pc, #36]	; (404608 <hsmci_reset+0x5c>)
  4045e4:	68fb      	ldr	r3, [r7, #12]
  4045e6:	60d3      	str	r3, [r2, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  4045e8:	4a07      	ldr	r2, [pc, #28]	; (404608 <hsmci_reset+0x5c>)
  4045ea:	68bb      	ldr	r3, [r7, #8]
  4045ec:	61d3      	str	r3, [r2, #28]
	HSMCI->HSMCI_CFG = cfg;
  4045ee:	4a06      	ldr	r2, [pc, #24]	; (404608 <hsmci_reset+0x5c>)
  4045f0:	687b      	ldr	r3, [r7, #4]
  4045f2:	6553      	str	r3, [r2, #84]	; 0x54
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  4045f4:	4b04      	ldr	r3, [pc, #16]	; (404608 <hsmci_reset+0x5c>)
  4045f6:	2205      	movs	r2, #5
  4045f8:	601a      	str	r2, [r3, #0]
}
  4045fa:	bf00      	nop
  4045fc:	371c      	adds	r7, #28
  4045fe:	46bd      	mov	sp, r7
  404600:	f85d 7b04 	ldr.w	r7, [sp], #4
  404604:	4770      	bx	lr
  404606:	bf00      	nop
  404608:	40080000 	.word	0x40080000

0040460c <hsmci_set_speed>:
 *
 * \param speed    HSMCI clock speed in Hz.
 * \param mck      MCK clock speed in Hz.
 */
static void hsmci_set_speed(uint32_t speed, uint32_t mck)
{
  40460c:	b480      	push	{r7}
  40460e:	b087      	sub	sp, #28
  404610:	af00      	add	r7, sp, #0
  404612:	6078      	str	r0, [r7, #4]
  404614:	6039      	str	r1, [r7, #0]
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	uint32_t clkdiv = 0;
  404616:	2300      	movs	r3, #0
  404618:	617b      	str	r3, [r7, #20]
	uint32_t clkodd = 0;
  40461a:	2300      	movs	r3, #0
  40461c:	613b      	str	r3, [r7, #16]
	// clock divider, represent (((clkdiv << 1) + clkodd) + 2)
	uint32_t div = 0;
  40461e:	2300      	movs	r3, #0
  404620:	60fb      	str	r3, [r7, #12]

	// Speed = MCK clock / (((clkdiv << 1) + clkodd) + 2)
	if ((speed * 2) < mck) {
  404622:	687b      	ldr	r3, [r7, #4]
  404624:	005a      	lsls	r2, r3, #1
  404626:	683b      	ldr	r3, [r7, #0]
  404628:	429a      	cmp	r2, r3
  40462a:	d21a      	bcs.n	404662 <hsmci_set_speed+0x56>
		div = (mck / speed) - 2;
  40462c:	683a      	ldr	r2, [r7, #0]
  40462e:	687b      	ldr	r3, [r7, #4]
  404630:	fbb2 f3f3 	udiv	r3, r2, r3
  404634:	3b02      	subs	r3, #2
  404636:	60fb      	str	r3, [r7, #12]
		if (mck % speed) {
  404638:	683b      	ldr	r3, [r7, #0]
  40463a:	687a      	ldr	r2, [r7, #4]
  40463c:	fbb3 f2f2 	udiv	r2, r3, r2
  404640:	6879      	ldr	r1, [r7, #4]
  404642:	fb01 f202 	mul.w	r2, r1, r2
  404646:	1a9b      	subs	r3, r3, r2
  404648:	2b00      	cmp	r3, #0
  40464a:	d002      	beq.n	404652 <hsmci_set_speed+0x46>
			// Ensure that the card speed not be higher than expected.
			div++;
  40464c:	68fb      	ldr	r3, [r7, #12]
  40464e:	3301      	adds	r3, #1
  404650:	60fb      	str	r3, [r7, #12]
		}
		clkdiv = div >> 1;
  404652:	68fb      	ldr	r3, [r7, #12]
  404654:	085b      	lsrs	r3, r3, #1
  404656:	617b      	str	r3, [r7, #20]
		// clkodd is the last significant bit of the clock divider (div).
		clkodd = div % 2;
  404658:	68fb      	ldr	r3, [r7, #12]
  40465a:	f003 0301 	and.w	r3, r3, #1
  40465e:	613b      	str	r3, [r7, #16]
  404660:	e003      	b.n	40466a <hsmci_set_speed+0x5e>
	} else {
		clkdiv = 0;
  404662:	2300      	movs	r3, #0
  404664:	617b      	str	r3, [r7, #20]
		clkodd = 0;
  404666:	2300      	movs	r3, #0
  404668:	613b      	str	r3, [r7, #16]
	}

	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40466a:	4a11      	ldr	r2, [pc, #68]	; (4046b0 <hsmci_set_speed+0xa4>)
  40466c:	4b10      	ldr	r3, [pc, #64]	; (4046b0 <hsmci_set_speed+0xa4>)
  40466e:	685b      	ldr	r3, [r3, #4]
  404670:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  404674:	6053      	str	r3, [r2, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  404676:	490e      	ldr	r1, [pc, #56]	; (4046b0 <hsmci_set_speed+0xa4>)
  404678:	4b0d      	ldr	r3, [pc, #52]	; (4046b0 <hsmci_set_speed+0xa4>)
  40467a:	685a      	ldr	r2, [r3, #4]
  40467c:	697b      	ldr	r3, [r7, #20]
  40467e:	b2db      	uxtb	r3, r3
  404680:	4313      	orrs	r3, r2
  404682:	604b      	str	r3, [r1, #4]
	if (clkodd) {
  404684:	693b      	ldr	r3, [r7, #16]
  404686:	2b00      	cmp	r3, #0
  404688:	d006      	beq.n	404698 <hsmci_set_speed+0x8c>
		HSMCI->HSMCI_MR |= HSMCI_MR_CLKODD;
  40468a:	4a09      	ldr	r2, [pc, #36]	; (4046b0 <hsmci_set_speed+0xa4>)
  40468c:	4b08      	ldr	r3, [pc, #32]	; (4046b0 <hsmci_set_speed+0xa4>)
  40468e:	685b      	ldr	r3, [r3, #4]
  404690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404694:	6053      	str	r3, [r2, #4]
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
#endif

}
  404696:	e005      	b.n	4046a4 <hsmci_set_speed+0x98>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKODD;
  404698:	4a05      	ldr	r2, [pc, #20]	; (4046b0 <hsmci_set_speed+0xa4>)
  40469a:	4b05      	ldr	r3, [pc, #20]	; (4046b0 <hsmci_set_speed+0xa4>)
  40469c:	685b      	ldr	r3, [r3, #4]
  40469e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4046a2:	6053      	str	r3, [r2, #4]
}
  4046a4:	bf00      	nop
  4046a6:	371c      	adds	r7, #28
  4046a8:	46bd      	mov	sp, r7
  4046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4046ae:	4770      	bx	lr
  4046b0:	40080000 	.word	0x40080000

004046b4 <hsmci_wait_busy>:
/** \brief Wait the end of busy signal on data line
 *
 * \return true if success, otherwise false
 */
static bool hsmci_wait_busy(void)
{
  4046b4:	b580      	push	{r7, lr}
  4046b6:	b082      	sub	sp, #8
  4046b8:	af00      	add	r7, sp, #0
	uint32_t busy_wait = 0xFFFFFFFF;
  4046ba:	f04f 33ff 	mov.w	r3, #4294967295
  4046be:	607b      	str	r3, [r7, #4]
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  4046c0:	4b0d      	ldr	r3, [pc, #52]	; (4046f8 <hsmci_wait_busy+0x44>)
  4046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4046c4:	603b      	str	r3, [r7, #0]
		if (busy_wait-- == 0) {
  4046c6:	687b      	ldr	r3, [r7, #4]
  4046c8:	1e5a      	subs	r2, r3, #1
  4046ca:	607a      	str	r2, [r7, #4]
  4046cc:	2b00      	cmp	r3, #0
  4046ce:	d103      	bne.n	4046d8 <hsmci_wait_busy+0x24>
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  4046d0:	4b0a      	ldr	r3, [pc, #40]	; (4046fc <hsmci_wait_busy+0x48>)
  4046d2:	4798      	blx	r3
			return false;
  4046d4:	2300      	movs	r3, #0
  4046d6:	e00a      	b.n	4046ee <hsmci_wait_busy+0x3a>
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  4046d8:	683b      	ldr	r3, [r7, #0]
  4046da:	f003 0320 	and.w	r3, r3, #32
  4046de:	2b00      	cmp	r3, #0
  4046e0:	d0ee      	beq.n	4046c0 <hsmci_wait_busy+0xc>
  4046e2:	683b      	ldr	r3, [r7, #0]
  4046e4:	f003 0310 	and.w	r3, r3, #16
  4046e8:	2b00      	cmp	r3, #0
  4046ea:	d1e9      	bne.n	4046c0 <hsmci_wait_busy+0xc>
	return true;
  4046ec:	2301      	movs	r3, #1
}
  4046ee:	4618      	mov	r0, r3
  4046f0:	3708      	adds	r7, #8
  4046f2:	46bd      	mov	sp, r7
  4046f4:	bd80      	pop	{r7, pc}
  4046f6:	bf00      	nop
  4046f8:	40080000 	.word	0x40080000
  4046fc:	004045ad 	.word	0x004045ad

00404700 <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  404700:	b580      	push	{r7, lr}
  404702:	b086      	sub	sp, #24
  404704:	af00      	add	r7, sp, #0
  404706:	60f8      	str	r0, [r7, #12]
  404708:	60b9      	str	r1, [r7, #8]
  40470a:	607a      	str	r2, [r7, #4]
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  40470c:	68bb      	ldr	r3, [r7, #8]
  40470e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  404712:	68fa      	ldr	r2, [r7, #12]
  404714:	4313      	orrs	r3, r2
  404716:	60fb      	str	r3, [r7, #12]
	if (cmd & SDMMC_RESP_PRESENT) {
  404718:	68bb      	ldr	r3, [r7, #8]
  40471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  40471e:	2b00      	cmp	r3, #0
  404720:	d01b      	beq.n	40475a <hsmci_send_cmd_execute+0x5a>
		cmdr |= HSMCI_CMDR_MAXLAT;
  404722:	68fb      	ldr	r3, [r7, #12]
  404724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  404728:	60fb      	str	r3, [r7, #12]
		if (cmd & SDMMC_RESP_136) {
  40472a:	68bb      	ldr	r3, [r7, #8]
  40472c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  404730:	2b00      	cmp	r3, #0
  404732:	d004      	beq.n	40473e <hsmci_send_cmd_execute+0x3e>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  404734:	68fb      	ldr	r3, [r7, #12]
  404736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40473a:	60fb      	str	r3, [r7, #12]
  40473c:	e00d      	b.n	40475a <hsmci_send_cmd_execute+0x5a>
		} else if (cmd & SDMMC_RESP_BUSY) {
  40473e:	68bb      	ldr	r3, [r7, #8]
  404740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  404744:	2b00      	cmp	r3, #0
  404746:	d004      	beq.n	404752 <hsmci_send_cmd_execute+0x52>
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  404748:	68fb      	ldr	r3, [r7, #12]
  40474a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  40474e:	60fb      	str	r3, [r7, #12]
  404750:	e003      	b.n	40475a <hsmci_send_cmd_execute+0x5a>
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  404752:	68fb      	ldr	r3, [r7, #12]
  404754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404758:	60fb      	str	r3, [r7, #12]
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  40475a:	68bb      	ldr	r3, [r7, #8]
  40475c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  404760:	2b00      	cmp	r3, #0
  404762:	d003      	beq.n	40476c <hsmci_send_cmd_execute+0x6c>
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  404764:	68fb      	ldr	r3, [r7, #12]
  404766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40476a:	60fb      	str	r3, [r7, #12]
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  40476c:	4a1c      	ldr	r2, [pc, #112]	; (4047e0 <hsmci_send_cmd_execute+0xe0>)
  40476e:	687b      	ldr	r3, [r7, #4]
  404770:	6113      	str	r3, [r2, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  404772:	4a1b      	ldr	r2, [pc, #108]	; (4047e0 <hsmci_send_cmd_execute+0xe0>)
  404774:	68fb      	ldr	r3, [r7, #12]
  404776:	6153      	str	r3, [r2, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  404778:	4b19      	ldr	r3, [pc, #100]	; (4047e0 <hsmci_send_cmd_execute+0xe0>)
  40477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40477c:	617b      	str	r3, [r7, #20]
		if (cmd & SDMMC_RESP_CRC) {
  40477e:	68bb      	ldr	r3, [r7, #8]
  404780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  404784:	2b00      	cmp	r3, #0
  404786:	d008      	beq.n	40479a <hsmci_send_cmd_execute+0x9a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  404788:	697b      	ldr	r3, [r7, #20]
  40478a:	f403 031f 	and.w	r3, r3, #10420224	; 0x9f0000
  40478e:	2b00      	cmp	r3, #0
  404790:	d00c      	beq.n	4047ac <hsmci_send_cmd_execute+0xac>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  404792:	4b14      	ldr	r3, [pc, #80]	; (4047e4 <hsmci_send_cmd_execute+0xe4>)
  404794:	4798      	blx	r3
				return false;
  404796:	2300      	movs	r3, #0
  404798:	e01d      	b.n	4047d6 <hsmci_send_cmd_execute+0xd6>
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  40479a:	697b      	ldr	r3, [r7, #20]
  40479c:	f403 031b 	and.w	r3, r3, #10158080	; 0x9b0000
  4047a0:	2b00      	cmp	r3, #0
  4047a2:	d003      	beq.n	4047ac <hsmci_send_cmd_execute+0xac>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  4047a4:	4b0f      	ldr	r3, [pc, #60]	; (4047e4 <hsmci_send_cmd_execute+0xe4>)
  4047a6:	4798      	blx	r3
				return false;
  4047a8:	2300      	movs	r3, #0
  4047aa:	e014      	b.n	4047d6 <hsmci_send_cmd_execute+0xd6>
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4047ac:	697b      	ldr	r3, [r7, #20]
  4047ae:	f003 0301 	and.w	r3, r3, #1
  4047b2:	2b00      	cmp	r3, #0
  4047b4:	d0e0      	beq.n	404778 <hsmci_send_cmd_execute+0x78>

	if (cmd & SDMMC_RESP_BUSY) {
  4047b6:	68bb      	ldr	r3, [r7, #8]
  4047b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  4047bc:	2b00      	cmp	r3, #0
  4047be:	d009      	beq.n	4047d4 <hsmci_send_cmd_execute+0xd4>
		if (!hsmci_wait_busy()) {
  4047c0:	4b09      	ldr	r3, [pc, #36]	; (4047e8 <hsmci_send_cmd_execute+0xe8>)
  4047c2:	4798      	blx	r3
  4047c4:	4603      	mov	r3, r0
  4047c6:	f083 0301 	eor.w	r3, r3, #1
  4047ca:	b2db      	uxtb	r3, r3
  4047cc:	2b00      	cmp	r3, #0
  4047ce:	d001      	beq.n	4047d4 <hsmci_send_cmd_execute+0xd4>
			return false;
  4047d0:	2300      	movs	r3, #0
  4047d2:	e000      	b.n	4047d6 <hsmci_send_cmd_execute+0xd6>
		}
	}
	return true;
  4047d4:	2301      	movs	r3, #1
}
  4047d6:	4618      	mov	r0, r3
  4047d8:	3718      	adds	r7, #24
  4047da:	46bd      	mov	sp, r7
  4047dc:	bd80      	pop	{r7, pc}
  4047de:	bf00      	nop
  4047e0:	40080000 	.word	0x40080000
  4047e4:	004045ad 	.word	0x004045ad
  4047e8:	004046b5 	.word	0x004046b5

004047ec <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  4047ec:	b580      	push	{r7, lr}
  4047ee:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_HSMCI);
  4047f0:	2010      	movs	r0, #16
  4047f2:	4b0a      	ldr	r3, [pc, #40]	; (40481c <hsmci_init+0x30>)
  4047f4:	4798      	blx	r3
	pmc_enable_periph_clk(ID_XDMAC);
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  4047f6:	4b0a      	ldr	r3, [pc, #40]	; (404820 <hsmci_init+0x34>)
  4047f8:	2272      	movs	r2, #114	; 0x72
  4047fa:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  4047fc:	4b08      	ldr	r3, [pc, #32]	; (404820 <hsmci_init+0x34>)
  4047fe:	2272      	movs	r2, #114	; 0x72
  404800:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  404802:	4b07      	ldr	r3, [pc, #28]	; (404820 <hsmci_init+0x34>)
  404804:	2211      	movs	r2, #17
  404806:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  404808:	4b05      	ldr	r3, [pc, #20]	; (404820 <hsmci_init+0x34>)
  40480a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  40480e:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  404810:	4b03      	ldr	r3, [pc, #12]	; (404820 <hsmci_init+0x34>)
  404812:	2205      	movs	r2, #5
  404814:	601a      	str	r2, [r3, #0]
}
  404816:	bf00      	nop
  404818:	bd80      	pop	{r7, pc}
  40481a:	bf00      	nop
  40481c:	00406191 	.word	0x00406191
  404820:	40080000 	.word	0x40080000

00404824 <hsmci_get_bus_width>:

uint8_t hsmci_get_bus_width(uint8_t slot)
{
  404824:	b480      	push	{r7}
  404826:	b083      	sub	sp, #12
  404828:	af00      	add	r7, sp, #0
  40482a:	4603      	mov	r3, r0
  40482c:	71fb      	strb	r3, [r7, #7]
	switch (slot) {
  40482e:	79fb      	ldrb	r3, [r7, #7]
  404830:	2b00      	cmp	r3, #0
  404832:	d101      	bne.n	404838 <hsmci_get_bus_width+0x14>
	case 0:
		return SD_MMC_HSMCI_SLOT_0_SIZE;
  404834:	2304      	movs	r3, #4
  404836:	e000      	b.n	40483a <hsmci_get_bus_width+0x16>
#if (SD_MMC_HSMCI_MEM_CNT == 2)
	case 1:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
  404838:	2300      	movs	r3, #0
	}
}
  40483a:	4618      	mov	r0, r3
  40483c:	370c      	adds	r7, #12
  40483e:	46bd      	mov	sp, r7
  404840:	f85d 7b04 	ldr.w	r7, [sp], #4
  404844:	4770      	bx	lr

00404846 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
  404846:	b480      	push	{r7}
  404848:	af00      	add	r7, sp, #0
	return true;
  40484a:	2301      	movs	r3, #1
}
  40484c:	4618      	mov	r0, r3
  40484e:	46bd      	mov	sp, r7
  404850:	f85d 7b04 	ldr.w	r7, [sp], #4
  404854:	4770      	bx	lr
	...

00404858 <hsmci_select_device>:

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
  404858:	b580      	push	{r7, lr}
  40485a:	b084      	sub	sp, #16
  40485c:	af00      	add	r7, sp, #0
  40485e:	6039      	str	r1, [r7, #0]
  404860:	4611      	mov	r1, r2
  404862:	461a      	mov	r2, r3
  404864:	4603      	mov	r3, r0
  404866:	71fb      	strb	r3, [r7, #7]
  404868:	460b      	mov	r3, r1
  40486a:	71bb      	strb	r3, [r7, #6]
  40486c:	4613      	mov	r3, r2
  40486e:	717b      	strb	r3, [r7, #5]
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  404870:	2300      	movs	r3, #0
  404872:	60fb      	str	r3, [r7, #12]
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  404874:	2300      	movs	r3, #0
  404876:	60bb      	str	r3, [r7, #8]

	if (high_speed) {
  404878:	797b      	ldrb	r3, [r7, #5]
  40487a:	2b00      	cmp	r3, #0
  40487c:	d006      	beq.n	40488c <hsmci_select_device+0x34>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  40487e:	4a19      	ldr	r2, [pc, #100]	; (4048e4 <hsmci_select_device+0x8c>)
  404880:	4b18      	ldr	r3, [pc, #96]	; (4048e4 <hsmci_select_device+0x8c>)
  404882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  404884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404888:	6553      	str	r3, [r2, #84]	; 0x54
  40488a:	e005      	b.n	404898 <hsmci_select_device+0x40>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  40488c:	4a15      	ldr	r2, [pc, #84]	; (4048e4 <hsmci_select_device+0x8c>)
  40488e:	4b15      	ldr	r3, [pc, #84]	; (4048e4 <hsmci_select_device+0x8c>)
  404890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  404892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  404896:	6553      	str	r3, [r2, #84]	; 0x54
	}

	hsmci_set_speed(clock, sysclk_get_peripheral_hz());
  404898:	4b13      	ldr	r3, [pc, #76]	; (4048e8 <hsmci_select_device+0x90>)
  40489a:	4798      	blx	r3
  40489c:	4603      	mov	r3, r0
  40489e:	4619      	mov	r1, r3
  4048a0:	6838      	ldr	r0, [r7, #0]
  4048a2:	4b12      	ldr	r3, [pc, #72]	; (4048ec <hsmci_select_device+0x94>)
  4048a4:	4798      	blx	r3

	switch (slot) {
  4048a6:	79fb      	ldrb	r3, [r7, #7]
  4048a8:	2b00      	cmp	r3, #0
  4048aa:	d102      	bne.n	4048b2 <hsmci_select_device+0x5a>
	case 0:
		hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
  4048ac:	2300      	movs	r3, #0
  4048ae:	60fb      	str	r3, [r7, #12]
		break;
  4048b0:	bf00      	nop
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4048b2:	79bb      	ldrb	r3, [r7, #6]
  4048b4:	2b04      	cmp	r3, #4
  4048b6:	d006      	beq.n	4048c6 <hsmci_select_device+0x6e>
  4048b8:	2b08      	cmp	r3, #8
  4048ba:	d007      	beq.n	4048cc <hsmci_select_device+0x74>
  4048bc:	2b01      	cmp	r3, #1
  4048be:	d108      	bne.n	4048d2 <hsmci_select_device+0x7a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4048c0:	2300      	movs	r3, #0
  4048c2:	60bb      	str	r3, [r7, #8]
		break;
  4048c4:	e005      	b.n	4048d2 <hsmci_select_device+0x7a>

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4048c6:	2380      	movs	r3, #128	; 0x80
  4048c8:	60bb      	str	r3, [r7, #8]
		break;
  4048ca:	e002      	b.n	4048d2 <hsmci_select_device+0x7a>

	case 8:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_8;
  4048cc:	23c0      	movs	r3, #192	; 0xc0
  4048ce:	60bb      	str	r3, [r7, #8]
		break;
  4048d0:	bf00      	nop

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4048d2:	4904      	ldr	r1, [pc, #16]	; (4048e4 <hsmci_select_device+0x8c>)
  4048d4:	68fa      	ldr	r2, [r7, #12]
  4048d6:	68bb      	ldr	r3, [r7, #8]
  4048d8:	4313      	orrs	r3, r2
  4048da:	60cb      	str	r3, [r1, #12]
}
  4048dc:	bf00      	nop
  4048de:	3710      	adds	r7, #16
  4048e0:	46bd      	mov	sp, r7
  4048e2:	bd80      	pop	{r7, pc}
  4048e4:	40080000 	.word	0x40080000
  4048e8:	00404599 	.word	0x00404599
  4048ec:	0040460d 	.word	0x0040460d

004048f0 <hsmci_deselect_device>:

void hsmci_deselect_device(uint8_t slot)
{
  4048f0:	b480      	push	{r7}
  4048f2:	b083      	sub	sp, #12
  4048f4:	af00      	add	r7, sp, #0
  4048f6:	4603      	mov	r3, r0
  4048f8:	71fb      	strb	r3, [r7, #7]
	UNUSED(slot);
	// Nothing to do
}
  4048fa:	bf00      	nop
  4048fc:	370c      	adds	r7, #12
  4048fe:	46bd      	mov	sp, r7
  404900:	f85d 7b04 	ldr.w	r7, [sp], #4
  404904:	4770      	bx	lr
	...

00404908 <hsmci_send_clock>:

void hsmci_send_clock(void)
{
  404908:	b480      	push	{r7}
  40490a:	af00      	add	r7, sp, #0
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40490c:	4a0c      	ldr	r2, [pc, #48]	; (404940 <hsmci_send_clock+0x38>)
  40490e:	4b0c      	ldr	r3, [pc, #48]	; (404940 <hsmci_send_clock+0x38>)
  404910:	685b      	ldr	r3, [r3, #4]
  404912:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  404916:	6053      	str	r3, [r2, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  404918:	4b09      	ldr	r3, [pc, #36]	; (404940 <hsmci_send_clock+0x38>)
  40491a:	2200      	movs	r2, #0
  40491c:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  40491e:	4b08      	ldr	r3, [pc, #32]	; (404940 <hsmci_send_clock+0x38>)
  404920:	f44f 6210 	mov.w	r2, #2304	; 0x900
  404924:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  404926:	bf00      	nop
  404928:	4b05      	ldr	r3, [pc, #20]	; (404940 <hsmci_send_clock+0x38>)
  40492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40492c:	f003 0301 	and.w	r3, r3, #1
  404930:	2b00      	cmp	r3, #0
  404932:	d0f9      	beq.n	404928 <hsmci_send_clock+0x20>
}
  404934:	bf00      	nop
  404936:	46bd      	mov	sp, r7
  404938:	f85d 7b04 	ldr.w	r7, [sp], #4
  40493c:	4770      	bx	lr
  40493e:	bf00      	nop
  404940:	40080000 	.word	0x40080000

00404944 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  404944:	b580      	push	{r7, lr}
  404946:	b082      	sub	sp, #8
  404948:	af00      	add	r7, sp, #0
  40494a:	6078      	str	r0, [r7, #4]
  40494c:	6039      	str	r1, [r7, #0]
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  40494e:	4a0c      	ldr	r2, [pc, #48]	; (404980 <hsmci_send_cmd+0x3c>)
  404950:	4b0b      	ldr	r3, [pc, #44]	; (404980 <hsmci_send_cmd+0x3c>)
  404952:	685b      	ldr	r3, [r3, #4]
  404954:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  404958:	6053      	str	r3, [r2, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  40495a:	4a09      	ldr	r2, [pc, #36]	; (404980 <hsmci_send_cmd+0x3c>)
  40495c:	4b08      	ldr	r3, [pc, #32]	; (404980 <hsmci_send_cmd+0x3c>)
  40495e:	685b      	ldr	r3, [r3, #4]
  404960:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  404964:	6053      	str	r3, [r2, #4]
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  404966:	4b06      	ldr	r3, [pc, #24]	; (404980 <hsmci_send_cmd+0x3c>)
  404968:	2200      	movs	r2, #0
  40496a:	619a      	str	r2, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  40496c:	683a      	ldr	r2, [r7, #0]
  40496e:	6879      	ldr	r1, [r7, #4]
  404970:	2000      	movs	r0, #0
  404972:	4b04      	ldr	r3, [pc, #16]	; (404984 <hsmci_send_cmd+0x40>)
  404974:	4798      	blx	r3
  404976:	4603      	mov	r3, r0
}
  404978:	4618      	mov	r0, r3
  40497a:	3708      	adds	r7, #8
  40497c:	46bd      	mov	sp, r7
  40497e:	bd80      	pop	{r7, pc}
  404980:	40080000 	.word	0x40080000
  404984:	00404701 	.word	0x00404701

00404988 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
  404988:	b480      	push	{r7}
  40498a:	af00      	add	r7, sp, #0
	return HSMCI->HSMCI_RSPR[0];
  40498c:	4b03      	ldr	r3, [pc, #12]	; (40499c <hsmci_get_response+0x14>)
  40498e:	6a1b      	ldr	r3, [r3, #32]
}
  404990:	4618      	mov	r0, r3
  404992:	46bd      	mov	sp, r7
  404994:	f85d 7b04 	ldr.w	r7, [sp], #4
  404998:	4770      	bx	lr
  40499a:	bf00      	nop
  40499c:	40080000 	.word	0x40080000

004049a0 <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  4049a0:	b480      	push	{r7}
  4049a2:	b085      	sub	sp, #20
  4049a4:	af00      	add	r7, sp, #0
  4049a6:	6078      	str	r0, [r7, #4]
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
  4049a8:	2300      	movs	r3, #0
  4049aa:	73fb      	strb	r3, [r7, #15]
  4049ac:	e024      	b.n	4049f8 <hsmci_get_response_128+0x58>
		response_32 = HSMCI->HSMCI_RSPR[0];
  4049ae:	4b17      	ldr	r3, [pc, #92]	; (404a0c <hsmci_get_response_128+0x6c>)
  4049b0:	6a1b      	ldr	r3, [r3, #32]
  4049b2:	60bb      	str	r3, [r7, #8]
		*response = (response_32 >> 24) & 0xFF;
  4049b4:	68bb      	ldr	r3, [r7, #8]
  4049b6:	0e1b      	lsrs	r3, r3, #24
  4049b8:	b2da      	uxtb	r2, r3
  4049ba:	687b      	ldr	r3, [r7, #4]
  4049bc:	701a      	strb	r2, [r3, #0]
		response++;
  4049be:	687b      	ldr	r3, [r7, #4]
  4049c0:	3301      	adds	r3, #1
  4049c2:	607b      	str	r3, [r7, #4]
		*response = (response_32 >> 16) & 0xFF;
  4049c4:	68bb      	ldr	r3, [r7, #8]
  4049c6:	0c1b      	lsrs	r3, r3, #16
  4049c8:	b2da      	uxtb	r2, r3
  4049ca:	687b      	ldr	r3, [r7, #4]
  4049cc:	701a      	strb	r2, [r3, #0]
		response++;
  4049ce:	687b      	ldr	r3, [r7, #4]
  4049d0:	3301      	adds	r3, #1
  4049d2:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  8) & 0xFF;
  4049d4:	68bb      	ldr	r3, [r7, #8]
  4049d6:	0a1b      	lsrs	r3, r3, #8
  4049d8:	b2da      	uxtb	r2, r3
  4049da:	687b      	ldr	r3, [r7, #4]
  4049dc:	701a      	strb	r2, [r3, #0]
		response++;
  4049de:	687b      	ldr	r3, [r7, #4]
  4049e0:	3301      	adds	r3, #1
  4049e2:	607b      	str	r3, [r7, #4]
		*response = (response_32 >>  0) & 0xFF;
  4049e4:	68bb      	ldr	r3, [r7, #8]
  4049e6:	b2da      	uxtb	r2, r3
  4049e8:	687b      	ldr	r3, [r7, #4]
  4049ea:	701a      	strb	r2, [r3, #0]
		response++;
  4049ec:	687b      	ldr	r3, [r7, #4]
  4049ee:	3301      	adds	r3, #1
  4049f0:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < 4; i++) {
  4049f2:	7bfb      	ldrb	r3, [r7, #15]
  4049f4:	3301      	adds	r3, #1
  4049f6:	73fb      	strb	r3, [r7, #15]
  4049f8:	7bfb      	ldrb	r3, [r7, #15]
  4049fa:	2b03      	cmp	r3, #3
  4049fc:	d9d7      	bls.n	4049ae <hsmci_get_response_128+0xe>
	}
}
  4049fe:	bf00      	nop
  404a00:	3714      	adds	r7, #20
  404a02:	46bd      	mov	sp, r7
  404a04:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a08:	4770      	bx	lr
  404a0a:	bf00      	nop
  404a0c:	40080000 	.word	0x40080000

00404a10 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  404a10:	b580      	push	{r7, lr}
  404a12:	b086      	sub	sp, #24
  404a14:	af00      	add	r7, sp, #0
  404a16:	60f8      	str	r0, [r7, #12]
  404a18:	60b9      	str	r1, [r7, #8]
  404a1a:	4611      	mov	r1, r2
  404a1c:	461a      	mov	r2, r3
  404a1e:	460b      	mov	r3, r1
  404a20:	80fb      	strh	r3, [r7, #6]
  404a22:	4613      	mov	r3, r2
  404a24:	80bb      	strh	r3, [r7, #4]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  404a26:	f897 3020 	ldrb.w	r3, [r7, #32]
  404a2a:	2b00      	cmp	r3, #0
  404a2c:	d006      	beq.n	404a3c <hsmci_adtc_start+0x2c>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  404a2e:	4a3d      	ldr	r2, [pc, #244]	; (404b24 <hsmci_adtc_start+0x114>)
  404a30:	4b3c      	ldr	r3, [pc, #240]	; (404b24 <hsmci_adtc_start+0x114>)
  404a32:	685b      	ldr	r3, [r3, #4]
  404a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  404a38:	6053      	str	r3, [r2, #4]
  404a3a:	e005      	b.n	404a48 <hsmci_adtc_start+0x38>
	} else {
		// Disable PDC for HSMCI
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  404a3c:	4a39      	ldr	r2, [pc, #228]	; (404b24 <hsmci_adtc_start+0x114>)
  404a3e:	4b39      	ldr	r3, [pc, #228]	; (404b24 <hsmci_adtc_start+0x114>)
  404a40:	685b      	ldr	r3, [r3, #4]
  404a42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  404a46:	6053      	str	r3, [r2, #4]
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  404a48:	4a36      	ldr	r2, [pc, #216]	; (404b24 <hsmci_adtc_start+0x114>)
  404a4a:	4b36      	ldr	r3, [pc, #216]	; (404b24 <hsmci_adtc_start+0x114>)
  404a4c:	685b      	ldr	r3, [r3, #4]
  404a4e:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
  404a52:	6053      	str	r3, [r2, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  404a54:	88fb      	ldrh	r3, [r7, #6]
  404a56:	f003 0303 	and.w	r3, r3, #3
  404a5a:	2b00      	cmp	r3, #0
  404a5c:	d006      	beq.n	404a6c <hsmci_adtc_start+0x5c>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  404a5e:	4a31      	ldr	r2, [pc, #196]	; (404b24 <hsmci_adtc_start+0x114>)
  404a60:	4b30      	ldr	r3, [pc, #192]	; (404b24 <hsmci_adtc_start+0x114>)
  404a62:	685b      	ldr	r3, [r3, #4]
  404a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404a68:	6053      	str	r3, [r2, #4]
  404a6a:	e005      	b.n	404a78 <hsmci_adtc_start+0x68>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  404a6c:	4a2d      	ldr	r2, [pc, #180]	; (404b24 <hsmci_adtc_start+0x114>)
  404a6e:	4b2d      	ldr	r3, [pc, #180]	; (404b24 <hsmci_adtc_start+0x114>)
  404a70:	685b      	ldr	r3, [r3, #4]
  404a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404a76:	6053      	str	r3, [r2, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  404a78:	68fb      	ldr	r3, [r7, #12]
  404a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  404a7e:	2b00      	cmp	r3, #0
  404a80:	d003      	beq.n	404a8a <hsmci_adtc_start+0x7a>
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
  404a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  404a86:	617b      	str	r3, [r7, #20]
  404a88:	e002      	b.n	404a90 <hsmci_adtc_start+0x80>
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  404a8a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  404a8e:	617b      	str	r3, [r7, #20]
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  404a90:	68fb      	ldr	r3, [r7, #12]
  404a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  404a96:	2b00      	cmp	r3, #0
  404a98:	d009      	beq.n	404aae <hsmci_adtc_start+0x9e>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  404a9a:	697b      	ldr	r3, [r7, #20]
  404a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  404aa0:	617b      	str	r3, [r7, #20]
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  404aa2:	4a20      	ldr	r2, [pc, #128]	; (404b24 <hsmci_adtc_start+0x114>)
  404aa4:	88fb      	ldrh	r3, [r7, #6]
  404aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  404aaa:	6193      	str	r3, [r2, #24]
  404aac:	e027      	b.n	404afe <hsmci_adtc_start+0xee>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  404aae:	491d      	ldr	r1, [pc, #116]	; (404b24 <hsmci_adtc_start+0x114>)
  404ab0:	88fb      	ldrh	r3, [r7, #6]
  404ab2:	041a      	lsls	r2, r3, #16
				(nb_block << HSMCI_BLKR_BCNT_Pos);
  404ab4:	88bb      	ldrh	r3, [r7, #4]
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  404ab6:	4313      	orrs	r3, r2
  404ab8:	618b      	str	r3, [r1, #24]
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  404aba:	68fb      	ldr	r3, [r7, #12]
  404abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  404ac0:	2b00      	cmp	r3, #0
  404ac2:	d004      	beq.n	404ace <hsmci_adtc_start+0xbe>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  404ac4:	697b      	ldr	r3, [r7, #20]
  404ac6:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
  404aca:	617b      	str	r3, [r7, #20]
  404acc:	e017      	b.n	404afe <hsmci_adtc_start+0xee>
		} else if (cmd & SDMMC_CMD_STREAM) {
  404ace:	68fb      	ldr	r3, [r7, #12]
  404ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  404ad4:	2b00      	cmp	r3, #0
  404ad6:	d004      	beq.n	404ae2 <hsmci_adtc_start+0xd2>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  404ad8:	697b      	ldr	r3, [r7, #20]
  404ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404ade:	617b      	str	r3, [r7, #20]
  404ae0:	e00d      	b.n	404afe <hsmci_adtc_start+0xee>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  404ae2:	68fb      	ldr	r3, [r7, #12]
  404ae4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  404ae8:	2b00      	cmp	r3, #0
  404aea:	d108      	bne.n	404afe <hsmci_adtc_start+0xee>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  404aec:	68fb      	ldr	r3, [r7, #12]
  404aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  404af2:	2b00      	cmp	r3, #0
  404af4:	d003      	beq.n	404afe <hsmci_adtc_start+0xee>
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  404af6:	697b      	ldr	r3, [r7, #20]
  404af8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
  404afc:	617b      	str	r3, [r7, #20]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  404afe:	4b0a      	ldr	r3, [pc, #40]	; (404b28 <hsmci_adtc_start+0x118>)
  404b00:	2200      	movs	r2, #0
  404b02:	601a      	str	r2, [r3, #0]
	hsmci_block_size = block_size;
  404b04:	4a09      	ldr	r2, [pc, #36]	; (404b2c <hsmci_adtc_start+0x11c>)
  404b06:	88fb      	ldrh	r3, [r7, #6]
  404b08:	8013      	strh	r3, [r2, #0]
	hsmci_nb_block = nb_block;
  404b0a:	4a09      	ldr	r2, [pc, #36]	; (404b30 <hsmci_adtc_start+0x120>)
  404b0c:	88bb      	ldrh	r3, [r7, #4]
  404b0e:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  404b10:	68ba      	ldr	r2, [r7, #8]
  404b12:	68f9      	ldr	r1, [r7, #12]
  404b14:	6978      	ldr	r0, [r7, #20]
  404b16:	4b07      	ldr	r3, [pc, #28]	; (404b34 <hsmci_adtc_start+0x124>)
  404b18:	4798      	blx	r3
  404b1a:	4603      	mov	r3, r0
}
  404b1c:	4618      	mov	r0, r3
  404b1e:	3718      	adds	r7, #24
  404b20:	46bd      	mov	sp, r7
  404b22:	bd80      	pop	{r7, pc}
  404b24:	40080000 	.word	0x40080000
  404b28:	2000ab64 	.word	0x2000ab64
  404b2c:	2000ab68 	.word	0x2000ab68
  404b30:	2000ab6a 	.word	0x2000ab6a
  404b34:	00404701 	.word	0x00404701

00404b38 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  404b38:	b580      	push	{r7, lr}
  404b3a:	b084      	sub	sp, #16
  404b3c:	af00      	add	r7, sp, #0
  404b3e:	6078      	str	r0, [r7, #4]

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  404b40:	4b1e      	ldr	r3, [pc, #120]	; (404bbc <hsmci_read_word+0x84>)
  404b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  404b44:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  404b46:	68fa      	ldr	r2, [r7, #12]
  404b48:	4b1d      	ldr	r3, [pc, #116]	; (404bc0 <hsmci_read_word+0x88>)
  404b4a:	4013      	ands	r3, r2
  404b4c:	2b00      	cmp	r3, #0
  404b4e:	d003      	beq.n	404b58 <hsmci_read_word+0x20>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  404b50:	4b1c      	ldr	r3, [pc, #112]	; (404bc4 <hsmci_read_word+0x8c>)
  404b52:	4798      	blx	r3
			return false;
  404b54:	2300      	movs	r3, #0
  404b56:	e02c      	b.n	404bb2 <hsmci_read_word+0x7a>
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  404b58:	68fb      	ldr	r3, [r7, #12]
  404b5a:	f003 0302 	and.w	r3, r3, #2
  404b5e:	2b00      	cmp	r3, #0
  404b60:	d0ee      	beq.n	404b40 <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  404b62:	4b16      	ldr	r3, [pc, #88]	; (404bbc <hsmci_read_word+0x84>)
  404b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  404b66:	687b      	ldr	r3, [r7, #4]
  404b68:	601a      	str	r2, [r3, #0]
	hsmci_transfert_pos += 4;
  404b6a:	4b17      	ldr	r3, [pc, #92]	; (404bc8 <hsmci_read_word+0x90>)
  404b6c:	681b      	ldr	r3, [r3, #0]
  404b6e:	3304      	adds	r3, #4
  404b70:	4a15      	ldr	r2, [pc, #84]	; (404bc8 <hsmci_read_word+0x90>)
  404b72:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  404b74:	4b15      	ldr	r3, [pc, #84]	; (404bcc <hsmci_read_word+0x94>)
  404b76:	881b      	ldrh	r3, [r3, #0]
  404b78:	461a      	mov	r2, r3
  404b7a:	4b15      	ldr	r3, [pc, #84]	; (404bd0 <hsmci_read_word+0x98>)
  404b7c:	881b      	ldrh	r3, [r3, #0]
  404b7e:	fb03 f202 	mul.w	r2, r3, r2
  404b82:	4b11      	ldr	r3, [pc, #68]	; (404bc8 <hsmci_read_word+0x90>)
  404b84:	681b      	ldr	r3, [r3, #0]
  404b86:	429a      	cmp	r2, r3
  404b88:	d901      	bls.n	404b8e <hsmci_read_word+0x56>
		return true;
  404b8a:	2301      	movs	r3, #1
  404b8c:	e011      	b.n	404bb2 <hsmci_read_word+0x7a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  404b8e:	4b0b      	ldr	r3, [pc, #44]	; (404bbc <hsmci_read_word+0x84>)
  404b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  404b92:	60fb      	str	r3, [r7, #12]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  404b94:	68fa      	ldr	r2, [r7, #12]
  404b96:	4b0a      	ldr	r3, [pc, #40]	; (404bc0 <hsmci_read_word+0x88>)
  404b98:	4013      	ands	r3, r2
  404b9a:	2b00      	cmp	r3, #0
  404b9c:	d003      	beq.n	404ba6 <hsmci_read_word+0x6e>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  404b9e:	4b09      	ldr	r3, [pc, #36]	; (404bc4 <hsmci_read_word+0x8c>)
  404ba0:	4798      	blx	r3
			return false;
  404ba2:	2300      	movs	r3, #0
  404ba4:	e005      	b.n	404bb2 <hsmci_read_word+0x7a>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  404ba6:	68fb      	ldr	r3, [r7, #12]
  404ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  404bac:	2b00      	cmp	r3, #0
  404bae:	d0ee      	beq.n	404b8e <hsmci_read_word+0x56>
	return true;
  404bb0:	2301      	movs	r3, #1
}
  404bb2:	4618      	mov	r0, r3
  404bb4:	3710      	adds	r7, #16
  404bb6:	46bd      	mov	sp, r7
  404bb8:	bd80      	pop	{r7, pc}
  404bba:	bf00      	nop
  404bbc:	40080000 	.word	0x40080000
  404bc0:	c0600000 	.word	0xc0600000
  404bc4:	004045ad 	.word	0x004045ad
  404bc8:	2000ab64 	.word	0x2000ab64
  404bcc:	2000ab68 	.word	0x2000ab68
  404bd0:	2000ab6a 	.word	0x2000ab6a

00404bd4 <hsmci_start_read_blocks>:
}
#endif // HSMCI_SR_DMADONE

#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
  404bd4:	b480      	push	{r7}
  404bd6:	b085      	sub	sp, #20
  404bd8:	af00      	add	r7, sp, #0
  404bda:	6078      	str	r0, [r7, #4]
  404bdc:	460b      	mov	r3, r1
  404bde:	807b      	strh	r3, [r7, #2]
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  404be0:	887b      	ldrh	r3, [r7, #2]
  404be2:	4a21      	ldr	r2, [pc, #132]	; (404c68 <hsmci_start_read_blocks+0x94>)
  404be4:	8812      	ldrh	r2, [r2, #0]
  404be6:	fb02 f303 	mul.w	r3, r2, r3
  404bea:	60fb      	str	r3, [r7, #12]
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  404bec:	687b      	ldr	r3, [r7, #4]
  404bee:	f003 0303 	and.w	r3, r3, #3
  404bf2:	2b00      	cmp	r3, #0
  404bf4:	d105      	bne.n	404c02 <hsmci_start_read_blocks+0x2e>
  404bf6:	4b1c      	ldr	r3, [pc, #112]	; (404c68 <hsmci_start_read_blocks+0x94>)
  404bf8:	881b      	ldrh	r3, [r3, #0]
  404bfa:	f003 0303 	and.w	r3, r3, #3
  404bfe:	2b00      	cmp	r3, #0
  404c00:	d006      	beq.n	404c10 <hsmci_start_read_blocks+0x3c>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  404c02:	4a1a      	ldr	r2, [pc, #104]	; (404c6c <hsmci_start_read_blocks+0x98>)
  404c04:	4b19      	ldr	r3, [pc, #100]	; (404c6c <hsmci_start_read_blocks+0x98>)
  404c06:	685b      	ldr	r3, [r3, #4]
  404c08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404c0c:	6053      	str	r3, [r2, #4]
  404c0e:	e005      	b.n	404c1c <hsmci_start_read_blocks+0x48>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  404c10:	4a16      	ldr	r2, [pc, #88]	; (404c6c <hsmci_start_read_blocks+0x98>)
  404c12:	4b16      	ldr	r3, [pc, #88]	; (404c6c <hsmci_start_read_blocks+0x98>)
  404c14:	685b      	ldr	r3, [r3, #4]
  404c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404c1a:	6053      	str	r3, [r2, #4]
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  404c1c:	4a13      	ldr	r2, [pc, #76]	; (404c6c <hsmci_start_read_blocks+0x98>)
  404c1e:	687b      	ldr	r3, [r7, #4]
  404c20:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  404c24:	4a11      	ldr	r2, [pc, #68]	; (404c6c <hsmci_start_read_blocks+0x98>)
  404c26:	4b11      	ldr	r3, [pc, #68]	; (404c6c <hsmci_start_read_blocks+0x98>)
  404c28:	685b      	ldr	r3, [r3, #4]
  404c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
			nb_data : nb_data / 4;
  404c2e:	2b00      	cmp	r3, #0
  404c30:	d102      	bne.n	404c38 <hsmci_start_read_blocks+0x64>
  404c32:	68fb      	ldr	r3, [r7, #12]
  404c34:	089b      	lsrs	r3, r3, #2
  404c36:	e000      	b.n	404c3a <hsmci_start_read_blocks+0x66>
  404c38:	68fb      	ldr	r3, [r7, #12]
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  404c3a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	HSMCI->HSMCI_RNCR = 0;
  404c3e:	4b0b      	ldr	r3, [pc, #44]	; (404c6c <hsmci_start_read_blocks+0x98>)
  404c40:	2200      	movs	r2, #0
  404c42:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  404c46:	4b09      	ldr	r3, [pc, #36]	; (404c6c <hsmci_start_read_blocks+0x98>)
  404c48:	2201      	movs	r2, #1
  404c4a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  404c4e:	4b08      	ldr	r3, [pc, #32]	; (404c70 <hsmci_start_read_blocks+0x9c>)
  404c50:	681a      	ldr	r2, [r3, #0]
  404c52:	68fb      	ldr	r3, [r7, #12]
  404c54:	4413      	add	r3, r2
  404c56:	4a06      	ldr	r2, [pc, #24]	; (404c70 <hsmci_start_read_blocks+0x9c>)
  404c58:	6013      	str	r3, [r2, #0]
	return true;
  404c5a:	2301      	movs	r3, #1
}
  404c5c:	4618      	mov	r0, r3
  404c5e:	3714      	adds	r7, #20
  404c60:	46bd      	mov	sp, r7
  404c62:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c66:	4770      	bx	lr
  404c68:	2000ab68 	.word	0x2000ab68
  404c6c:	40080000 	.word	0x40080000
  404c70:	2000ab64 	.word	0x2000ab64

00404c74 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  404c74:	b580      	push	{r7, lr}
  404c76:	b082      	sub	sp, #8
  404c78:	af00      	add	r7, sp, #0
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  404c7a:	4b1c      	ldr	r3, [pc, #112]	; (404cec <hsmci_wait_end_of_read_blocks+0x78>)
  404c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  404c7e:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  404c80:	687a      	ldr	r2, [r7, #4]
  404c82:	4b1b      	ldr	r3, [pc, #108]	; (404cf0 <hsmci_wait_end_of_read_blocks+0x7c>)
  404c84:	4013      	ands	r3, r2
  404c86:	2b00      	cmp	r3, #0
  404c88:	d008      	beq.n	404c9c <hsmci_wait_end_of_read_blocks+0x28>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  404c8a:	4b18      	ldr	r3, [pc, #96]	; (404cec <hsmci_wait_end_of_read_blocks+0x78>)
  404c8c:	f240 2202 	movw	r2, #514	; 0x202
  404c90:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			hsmci_reset();
  404c94:	4b17      	ldr	r3, [pc, #92]	; (404cf4 <hsmci_wait_end_of_read_blocks+0x80>)
  404c96:	4798      	blx	r3
			return false;
  404c98:	2300      	movs	r3, #0
  404c9a:	e023      	b.n	404ce4 <hsmci_wait_end_of_read_blocks+0x70>
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  404c9c:	687b      	ldr	r3, [r7, #4]
  404c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  404ca2:	2b00      	cmp	r3, #0
  404ca4:	d0e9      	beq.n	404c7a <hsmci_wait_end_of_read_blocks+0x6>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  404ca6:	4b14      	ldr	r3, [pc, #80]	; (404cf8 <hsmci_wait_end_of_read_blocks+0x84>)
  404ca8:	881b      	ldrh	r3, [r3, #0]
  404caa:	461a      	mov	r2, r3
  404cac:	4b13      	ldr	r3, [pc, #76]	; (404cfc <hsmci_wait_end_of_read_blocks+0x88>)
  404cae:	881b      	ldrh	r3, [r3, #0]
  404cb0:	fb03 f202 	mul.w	r2, r3, r2
  404cb4:	4b12      	ldr	r3, [pc, #72]	; (404d00 <hsmci_wait_end_of_read_blocks+0x8c>)
  404cb6:	681b      	ldr	r3, [r3, #0]
  404cb8:	429a      	cmp	r2, r3
  404cba:	d901      	bls.n	404cc0 <hsmci_wait_end_of_read_blocks+0x4c>
		return true;
  404cbc:	2301      	movs	r3, #1
  404cbe:	e011      	b.n	404ce4 <hsmci_wait_end_of_read_blocks+0x70>
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  404cc0:	4b0a      	ldr	r3, [pc, #40]	; (404cec <hsmci_wait_end_of_read_blocks+0x78>)
  404cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  404cc4:	607b      	str	r3, [r7, #4]
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  404cc6:	687a      	ldr	r2, [r7, #4]
  404cc8:	4b09      	ldr	r3, [pc, #36]	; (404cf0 <hsmci_wait_end_of_read_blocks+0x7c>)
  404cca:	4013      	ands	r3, r2
  404ccc:	2b00      	cmp	r3, #0
  404cce:	d003      	beq.n	404cd8 <hsmci_wait_end_of_read_blocks+0x64>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  404cd0:	4b08      	ldr	r3, [pc, #32]	; (404cf4 <hsmci_wait_end_of_read_blocks+0x80>)
  404cd2:	4798      	blx	r3
			return false;
  404cd4:	2300      	movs	r3, #0
  404cd6:	e005      	b.n	404ce4 <hsmci_wait_end_of_read_blocks+0x70>
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  404cd8:	687b      	ldr	r3, [r7, #4]
  404cda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  404cde:	2b00      	cmp	r3, #0
  404ce0:	d0ee      	beq.n	404cc0 <hsmci_wait_end_of_read_blocks+0x4c>
	return true;
  404ce2:	2301      	movs	r3, #1
}
  404ce4:	4618      	mov	r0, r3
  404ce6:	3708      	adds	r7, #8
  404ce8:	46bd      	mov	sp, r7
  404cea:	bd80      	pop	{r7, pc}
  404cec:	40080000 	.word	0x40080000
  404cf0:	c0600000 	.word	0xc0600000
  404cf4:	004045ad 	.word	0x004045ad
  404cf8:	2000ab68 	.word	0x2000ab68
  404cfc:	2000ab6a 	.word	0x2000ab6a
  404d00:	2000ab64 	.word	0x2000ab64

00404d04 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  404d04:	b480      	push	{r7}
  404d06:	b083      	sub	sp, #12
  404d08:	af00      	add	r7, sp, #0
  404d0a:	6078      	str	r0, [r7, #4]
  404d0c:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  404d0e:	683b      	ldr	r3, [r7, #0]
  404d10:	2b00      	cmp	r3, #0
  404d12:	d006      	beq.n	404d22 <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  404d14:	687b      	ldr	r3, [r7, #4]
  404d16:	685b      	ldr	r3, [r3, #4]
  404d18:	f043 0201 	orr.w	r2, r3, #1
  404d1c:	687b      	ldr	r3, [r7, #4]
  404d1e:	605a      	str	r2, [r3, #4]
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
	}
}
  404d20:	e005      	b.n	404d2e <rtc_set_hour_mode+0x2a>
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  404d22:	687b      	ldr	r3, [r7, #4]
  404d24:	685b      	ldr	r3, [r3, #4]
  404d26:	f023 0201 	bic.w	r2, r3, #1
  404d2a:	687b      	ldr	r3, [r7, #4]
  404d2c:	605a      	str	r2, [r3, #4]
}
  404d2e:	bf00      	nop
  404d30:	370c      	adds	r7, #12
  404d32:	46bd      	mov	sp, r7
  404d34:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d38:	4770      	bx	lr

00404d3a <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  404d3a:	b480      	push	{r7}
  404d3c:	b087      	sub	sp, #28
  404d3e:	af00      	add	r7, sp, #0
  404d40:	60f8      	str	r0, [r7, #12]
  404d42:	60b9      	str	r1, [r7, #8]
  404d44:	607a      	str	r2, [r7, #4]
  404d46:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  404d48:	68fb      	ldr	r3, [r7, #12]
  404d4a:	689b      	ldr	r3, [r3, #8]
  404d4c:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  404d4e:	e002      	b.n	404d56 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  404d50:	68fb      	ldr	r3, [r7, #12]
  404d52:	689b      	ldr	r3, [r3, #8]
  404d54:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  404d56:	68fb      	ldr	r3, [r7, #12]
  404d58:	689a      	ldr	r2, [r3, #8]
  404d5a:	697b      	ldr	r3, [r7, #20]
  404d5c:	429a      	cmp	r2, r3
  404d5e:	d1f7      	bne.n	404d50 <rtc_get_time+0x16>
	}

	/* Hour */
	if (pul_hour) {
  404d60:	68bb      	ldr	r3, [r7, #8]
  404d62:	2b00      	cmp	r3, #0
  404d64:	d01c      	beq.n	404da0 <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  404d66:	697b      	ldr	r3, [r7, #20]
  404d68:	0c1b      	lsrs	r3, r3, #16
  404d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  404d6e:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404d70:	693b      	ldr	r3, [r7, #16]
  404d72:	091a      	lsrs	r2, r3, #4
  404d74:	4613      	mov	r3, r2
  404d76:	009b      	lsls	r3, r3, #2
  404d78:	4413      	add	r3, r2
  404d7a:	005b      	lsls	r3, r3, #1
  404d7c:	461a      	mov	r2, r3
  404d7e:	693b      	ldr	r3, [r7, #16]
  404d80:	f003 030f 	and.w	r3, r3, #15
  404d84:	441a      	add	r2, r3
  404d86:	68bb      	ldr	r3, [r7, #8]
  404d88:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  404d8a:	697b      	ldr	r3, [r7, #20]
  404d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  404d90:	2b00      	cmp	r3, #0
  404d92:	d005      	beq.n	404da0 <rtc_get_time+0x66>
			*pul_hour += 12;
  404d94:	68bb      	ldr	r3, [r7, #8]
  404d96:	681b      	ldr	r3, [r3, #0]
  404d98:	f103 020c 	add.w	r2, r3, #12
  404d9c:	68bb      	ldr	r3, [r7, #8]
  404d9e:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  404da0:	687b      	ldr	r3, [r7, #4]
  404da2:	2b00      	cmp	r3, #0
  404da4:	d011      	beq.n	404dca <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  404da6:	697b      	ldr	r3, [r7, #20]
  404da8:	0a1b      	lsrs	r3, r3, #8
  404daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404dae:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  404db0:	693b      	ldr	r3, [r7, #16]
  404db2:	091a      	lsrs	r2, r3, #4
  404db4:	4613      	mov	r3, r2
  404db6:	009b      	lsls	r3, r3, #2
  404db8:	4413      	add	r3, r2
  404dba:	005b      	lsls	r3, r3, #1
  404dbc:	461a      	mov	r2, r3
  404dbe:	693b      	ldr	r3, [r7, #16]
  404dc0:	f003 030f 	and.w	r3, r3, #15
  404dc4:	441a      	add	r2, r3
  404dc6:	687b      	ldr	r3, [r7, #4]
  404dc8:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  404dca:	683b      	ldr	r3, [r7, #0]
  404dcc:	2b00      	cmp	r3, #0
  404dce:	d010      	beq.n	404df2 <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  404dd0:	697b      	ldr	r3, [r7, #20]
  404dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404dd6:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404dd8:	693b      	ldr	r3, [r7, #16]
  404dda:	091a      	lsrs	r2, r3, #4
  404ddc:	4613      	mov	r3, r2
  404dde:	009b      	lsls	r3, r3, #2
  404de0:	4413      	add	r3, r2
  404de2:	005b      	lsls	r3, r3, #1
  404de4:	461a      	mov	r2, r3
  404de6:	693b      	ldr	r3, [r7, #16]
  404de8:	f003 030f 	and.w	r3, r3, #15
  404dec:	441a      	add	r2, r3
  404dee:	683b      	ldr	r3, [r7, #0]
  404df0:	601a      	str	r2, [r3, #0]
	}
}
  404df2:	bf00      	nop
  404df4:	371c      	adds	r7, #28
  404df6:	46bd      	mov	sp, r7
  404df8:	f85d 7b04 	ldr.w	r7, [sp], #4
  404dfc:	4770      	bx	lr

00404dfe <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  404dfe:	b480      	push	{r7}
  404e00:	b089      	sub	sp, #36	; 0x24
  404e02:	af00      	add	r7, sp, #0
  404e04:	60f8      	str	r0, [r7, #12]
  404e06:	60b9      	str	r1, [r7, #8]
  404e08:	607a      	str	r2, [r7, #4]
  404e0a:	603b      	str	r3, [r7, #0]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  404e0c:	68fb      	ldr	r3, [r7, #12]
  404e0e:	68db      	ldr	r3, [r3, #12]
  404e10:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  404e12:	e002      	b.n	404e1a <rtc_get_date+0x1c>
		ul_date = p_rtc->RTC_CALR;
  404e14:	68fb      	ldr	r3, [r7, #12]
  404e16:	68db      	ldr	r3, [r3, #12]
  404e18:	61fb      	str	r3, [r7, #28]
	while (ul_date != p_rtc->RTC_CALR) {
  404e1a:	68fb      	ldr	r3, [r7, #12]
  404e1c:	68da      	ldr	r2, [r3, #12]
  404e1e:	69fb      	ldr	r3, [r7, #28]
  404e20:	429a      	cmp	r2, r3
  404e22:	d1f7      	bne.n	404e14 <rtc_get_date+0x16>
	}

	/* Retrieve year */
	if (pul_year) {
  404e24:	68bb      	ldr	r3, [r7, #8]
  404e26:	2b00      	cmp	r3, #0
  404e28:	d024      	beq.n	404e74 <rtc_get_date+0x76>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
  404e2a:	69fb      	ldr	r3, [r7, #28]
  404e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404e30:	61bb      	str	r3, [r7, #24]
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404e32:	69bb      	ldr	r3, [r7, #24]
  404e34:	091a      	lsrs	r2, r3, #4
  404e36:	4613      	mov	r3, r2
  404e38:	009b      	lsls	r3, r3, #2
  404e3a:	4413      	add	r3, r2
  404e3c:	005b      	lsls	r3, r3, #1
  404e3e:	461a      	mov	r2, r3
  404e40:	69bb      	ldr	r3, [r7, #24]
  404e42:	f003 030f 	and.w	r3, r3, #15
  404e46:	4413      	add	r3, r2
  404e48:	617b      	str	r3, [r7, #20]
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  404e4a:	69fb      	ldr	r3, [r7, #28]
  404e4c:	0a1b      	lsrs	r3, r3, #8
  404e4e:	b2db      	uxtb	r3, r3
  404e50:	61bb      	str	r3, [r7, #24]
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  404e52:	697b      	ldr	r3, [r7, #20]
  404e54:	2264      	movs	r2, #100	; 0x64
  404e56:	fb02 f103 	mul.w	r1, r2, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404e5a:	69bb      	ldr	r3, [r7, #24]
  404e5c:	091a      	lsrs	r2, r3, #4
  404e5e:	4613      	mov	r3, r2
  404e60:	009b      	lsls	r3, r3, #2
  404e62:	4413      	add	r3, r2
  404e64:	005b      	lsls	r3, r3, #1
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  404e66:	18ca      	adds	r2, r1, r3
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404e68:	69bb      	ldr	r3, [r7, #24]
  404e6a:	f003 030f 	and.w	r3, r3, #15
  404e6e:	441a      	add	r2, r3
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  404e70:	68bb      	ldr	r3, [r7, #8]
  404e72:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  404e74:	687b      	ldr	r3, [r7, #4]
  404e76:	2b00      	cmp	r3, #0
  404e78:	d011      	beq.n	404e9e <rtc_get_date+0xa0>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  404e7a:	69fb      	ldr	r3, [r7, #28]
  404e7c:	0c1b      	lsrs	r3, r3, #16
  404e7e:	f003 031f 	and.w	r3, r3, #31
  404e82:	61bb      	str	r3, [r7, #24]
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404e84:	69bb      	ldr	r3, [r7, #24]
  404e86:	091a      	lsrs	r2, r3, #4
  404e88:	4613      	mov	r3, r2
  404e8a:	009b      	lsls	r3, r3, #2
  404e8c:	4413      	add	r3, r2
  404e8e:	005b      	lsls	r3, r3, #1
  404e90:	461a      	mov	r2, r3
  404e92:	69bb      	ldr	r3, [r7, #24]
  404e94:	f003 030f 	and.w	r3, r3, #15
  404e98:	441a      	add	r2, r3
  404e9a:	687b      	ldr	r3, [r7, #4]
  404e9c:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  404e9e:	683b      	ldr	r3, [r7, #0]
  404ea0:	2b00      	cmp	r3, #0
  404ea2:	d011      	beq.n	404ec8 <rtc_get_date+0xca>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  404ea4:	69fb      	ldr	r3, [r7, #28]
  404ea6:	0e1b      	lsrs	r3, r3, #24
  404ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  404eac:	61bb      	str	r3, [r7, #24]
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404eae:	69bb      	ldr	r3, [r7, #24]
  404eb0:	091a      	lsrs	r2, r3, #4
  404eb2:	4613      	mov	r3, r2
  404eb4:	009b      	lsls	r3, r3, #2
  404eb6:	4413      	add	r3, r2
  404eb8:	005b      	lsls	r3, r3, #1
  404eba:	461a      	mov	r2, r3
  404ebc:	69bb      	ldr	r3, [r7, #24]
  404ebe:	f003 030f 	and.w	r3, r3, #15
  404ec2:	441a      	add	r2, r3
  404ec4:	683b      	ldr	r3, [r7, #0]
  404ec6:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  404ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404eca:	2b00      	cmp	r3, #0
  404ecc:	d005      	beq.n	404eda <rtc_get_date+0xdc>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  404ece:	69fb      	ldr	r3, [r7, #28]
  404ed0:	0d5b      	lsrs	r3, r3, #21
  404ed2:	f003 0207 	and.w	r2, r3, #7
  404ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404ed8:	601a      	str	r2, [r3, #0]
	}
}
  404eda:	bf00      	nop
  404edc:	3724      	adds	r7, #36	; 0x24
  404ede:	46bd      	mov	sp, r7
  404ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ee4:	4770      	bx	lr

00404ee6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  404ee6:	b480      	push	{r7}
  404ee8:	af00      	add	r7, sp, #0
	while (1) {
  404eea:	e7fe      	b.n	404eea <Dummy_Handler+0x4>

00404eec <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  404eec:	b480      	push	{r7}
  404eee:	b083      	sub	sp, #12
  404ef0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  404ef2:	f3ef 8310 	mrs	r3, PRIMASK
  404ef6:	607b      	str	r3, [r7, #4]
  return(result);
  404ef8:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404efa:	2b00      	cmp	r3, #0
  404efc:	bf0c      	ite	eq
  404efe:	2301      	moveq	r3, #1
  404f00:	2300      	movne	r3, #0
  404f02:	b2db      	uxtb	r3, r3
  404f04:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  404f06:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  404f08:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404f0c:	4b04      	ldr	r3, [pc, #16]	; (404f20 <cpu_irq_save+0x34>)
  404f0e:	2200      	movs	r2, #0
  404f10:	701a      	strb	r2, [r3, #0]
	return flags;
  404f12:	683b      	ldr	r3, [r7, #0]
}
  404f14:	4618      	mov	r0, r3
  404f16:	370c      	adds	r7, #12
  404f18:	46bd      	mov	sp, r7
  404f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f1e:	4770      	bx	lr
  404f20:	20000018 	.word	0x20000018

00404f24 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  404f24:	b480      	push	{r7}
  404f26:	b083      	sub	sp, #12
  404f28:	af00      	add	r7, sp, #0
  404f2a:	6078      	str	r0, [r7, #4]
	return (flags);
  404f2c:	687b      	ldr	r3, [r7, #4]
  404f2e:	2b00      	cmp	r3, #0
  404f30:	bf14      	ite	ne
  404f32:	2301      	movne	r3, #1
  404f34:	2300      	moveq	r3, #0
  404f36:	b2db      	uxtb	r3, r3
}
  404f38:	4618      	mov	r0, r3
  404f3a:	370c      	adds	r7, #12
  404f3c:	46bd      	mov	sp, r7
  404f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f42:	4770      	bx	lr

00404f44 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  404f44:	b580      	push	{r7, lr}
  404f46:	b082      	sub	sp, #8
  404f48:	af00      	add	r7, sp, #0
  404f4a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  404f4c:	6878      	ldr	r0, [r7, #4]
  404f4e:	4b07      	ldr	r3, [pc, #28]	; (404f6c <cpu_irq_restore+0x28>)
  404f50:	4798      	blx	r3
  404f52:	4603      	mov	r3, r0
  404f54:	2b00      	cmp	r3, #0
  404f56:	d005      	beq.n	404f64 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  404f58:	4b05      	ldr	r3, [pc, #20]	; (404f70 <cpu_irq_restore+0x2c>)
  404f5a:	2201      	movs	r2, #1
  404f5c:	701a      	strb	r2, [r3, #0]
  404f5e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404f62:	b662      	cpsie	i
}
  404f64:	bf00      	nop
  404f66:	3708      	adds	r7, #8
  404f68:	46bd      	mov	sp, r7
  404f6a:	bd80      	pop	{r7, pc}
  404f6c:	00404f25 	.word	0x00404f25
  404f70:	20000018 	.word	0x20000018

00404f74 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  404f74:	b580      	push	{r7, lr}
  404f76:	b084      	sub	sp, #16
  404f78:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  404f7a:	4b1e      	ldr	r3, [pc, #120]	; (404ff4 <Reset_Handler+0x80>)
  404f7c:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  404f7e:	4b1e      	ldr	r3, [pc, #120]	; (404ff8 <Reset_Handler+0x84>)
  404f80:	60bb      	str	r3, [r7, #8]

	if (pSrc != pDest) {
  404f82:	68fa      	ldr	r2, [r7, #12]
  404f84:	68bb      	ldr	r3, [r7, #8]
  404f86:	429a      	cmp	r2, r3
  404f88:	d00c      	beq.n	404fa4 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  404f8a:	e007      	b.n	404f9c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  404f8c:	68bb      	ldr	r3, [r7, #8]
  404f8e:	1d1a      	adds	r2, r3, #4
  404f90:	60ba      	str	r2, [r7, #8]
  404f92:	68fa      	ldr	r2, [r7, #12]
  404f94:	1d11      	adds	r1, r2, #4
  404f96:	60f9      	str	r1, [r7, #12]
  404f98:	6812      	ldr	r2, [r2, #0]
  404f9a:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  404f9c:	68bb      	ldr	r3, [r7, #8]
  404f9e:	4a17      	ldr	r2, [pc, #92]	; (404ffc <Reset_Handler+0x88>)
  404fa0:	4293      	cmp	r3, r2
  404fa2:	d3f3      	bcc.n	404f8c <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  404fa4:	4b16      	ldr	r3, [pc, #88]	; (405000 <Reset_Handler+0x8c>)
  404fa6:	60bb      	str	r3, [r7, #8]
  404fa8:	e004      	b.n	404fb4 <Reset_Handler+0x40>
		*pDest++ = 0;
  404faa:	68bb      	ldr	r3, [r7, #8]
  404fac:	1d1a      	adds	r2, r3, #4
  404fae:	60ba      	str	r2, [r7, #8]
  404fb0:	2200      	movs	r2, #0
  404fb2:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  404fb4:	68bb      	ldr	r3, [r7, #8]
  404fb6:	4a13      	ldr	r2, [pc, #76]	; (405004 <Reset_Handler+0x90>)
  404fb8:	4293      	cmp	r3, r2
  404fba:	d3f6      	bcc.n	404faa <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  404fbc:	4b12      	ldr	r3, [pc, #72]	; (405008 <Reset_Handler+0x94>)
  404fbe:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404fc0:	4a12      	ldr	r2, [pc, #72]	; (40500c <Reset_Handler+0x98>)
  404fc2:	68fb      	ldr	r3, [r7, #12]
  404fc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  404fc8:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  404fca:	4b11      	ldr	r3, [pc, #68]	; (405010 <Reset_Handler+0x9c>)
  404fcc:	4798      	blx	r3
  404fce:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  404fd0:	4a10      	ldr	r2, [pc, #64]	; (405014 <Reset_Handler+0xa0>)
  404fd2:	4b10      	ldr	r3, [pc, #64]	; (405014 <Reset_Handler+0xa0>)
  404fd4:	681b      	ldr	r3, [r3, #0]
  404fd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  404fda:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  404fdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  404fe0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  404fe4:	6878      	ldr	r0, [r7, #4]
  404fe6:	4b0c      	ldr	r3, [pc, #48]	; (405018 <Reset_Handler+0xa4>)
  404fe8:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  404fea:	4b0c      	ldr	r3, [pc, #48]	; (40501c <Reset_Handler+0xa8>)
  404fec:	4798      	blx	r3

	/* Branch to main function */
	main();
  404fee:	4b0c      	ldr	r3, [pc, #48]	; (405020 <Reset_Handler+0xac>)
  404ff0:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  404ff2:	e7fe      	b.n	404ff2 <Reset_Handler+0x7e>
  404ff4:	0040b954 	.word	0x0040b954
  404ff8:	20000000 	.word	0x20000000
  404ffc:	200009d0 	.word	0x200009d0
  405000:	200009d0 	.word	0x200009d0
  405004:	2000ac74 	.word	0x2000ac74
  405008:	00400000 	.word	0x00400000
  40500c:	e000ed00 	.word	0xe000ed00
  405010:	00404eed 	.word	0x00404eed
  405014:	e000ed88 	.word	0xe000ed88
  405018:	00404f45 	.word	0x00404f45
  40501c:	004067fd 	.word	0x004067fd
  405020:	0040527d 	.word	0x0040527d

00405024 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  405024:	b480      	push	{r7}
  405026:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  405028:	4b52      	ldr	r3, [pc, #328]	; (405174 <SystemCoreClockUpdate+0x150>)
  40502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40502c:	f003 0303 	and.w	r3, r3, #3
  405030:	2b01      	cmp	r3, #1
  405032:	d014      	beq.n	40505e <SystemCoreClockUpdate+0x3a>
  405034:	2b01      	cmp	r3, #1
  405036:	d302      	bcc.n	40503e <SystemCoreClockUpdate+0x1a>
  405038:	2b02      	cmp	r3, #2
  40503a:	d038      	beq.n	4050ae <SystemCoreClockUpdate+0x8a>
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
		}
		break;

	default:
		break;
  40503c:	e07a      	b.n	405134 <SystemCoreClockUpdate+0x110>
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40503e:	4b4e      	ldr	r3, [pc, #312]	; (405178 <SystemCoreClockUpdate+0x154>)
  405040:	695b      	ldr	r3, [r3, #20]
  405042:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405046:	2b00      	cmp	r3, #0
  405048:	d004      	beq.n	405054 <SystemCoreClockUpdate+0x30>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40504a:	4b4c      	ldr	r3, [pc, #304]	; (40517c <SystemCoreClockUpdate+0x158>)
  40504c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405050:	601a      	str	r2, [r3, #0]
		break;
  405052:	e06f      	b.n	405134 <SystemCoreClockUpdate+0x110>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405054:	4b49      	ldr	r3, [pc, #292]	; (40517c <SystemCoreClockUpdate+0x158>)
  405056:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  40505a:	601a      	str	r2, [r3, #0]
		break;
  40505c:	e06a      	b.n	405134 <SystemCoreClockUpdate+0x110>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40505e:	4b45      	ldr	r3, [pc, #276]	; (405174 <SystemCoreClockUpdate+0x150>)
  405060:	6a1b      	ldr	r3, [r3, #32]
  405062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  405066:	2b00      	cmp	r3, #0
  405068:	d003      	beq.n	405072 <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40506a:	4b44      	ldr	r3, [pc, #272]	; (40517c <SystemCoreClockUpdate+0x158>)
  40506c:	4a44      	ldr	r2, [pc, #272]	; (405180 <SystemCoreClockUpdate+0x15c>)
  40506e:	601a      	str	r2, [r3, #0]
		break;
  405070:	e060      	b.n	405134 <SystemCoreClockUpdate+0x110>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405072:	4b42      	ldr	r3, [pc, #264]	; (40517c <SystemCoreClockUpdate+0x158>)
  405074:	4a43      	ldr	r2, [pc, #268]	; (405184 <SystemCoreClockUpdate+0x160>)
  405076:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  405078:	4b3e      	ldr	r3, [pc, #248]	; (405174 <SystemCoreClockUpdate+0x150>)
  40507a:	6a1b      	ldr	r3, [r3, #32]
  40507c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405080:	2b10      	cmp	r3, #16
  405082:	d004      	beq.n	40508e <SystemCoreClockUpdate+0x6a>
  405084:	2b20      	cmp	r3, #32
  405086:	d008      	beq.n	40509a <SystemCoreClockUpdate+0x76>
  405088:	2b00      	cmp	r3, #0
  40508a:	d00e      	beq.n	4050aa <SystemCoreClockUpdate+0x86>
				break;
  40508c:	e00e      	b.n	4050ac <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 2U;
  40508e:	4b3b      	ldr	r3, [pc, #236]	; (40517c <SystemCoreClockUpdate+0x158>)
  405090:	681b      	ldr	r3, [r3, #0]
  405092:	005b      	lsls	r3, r3, #1
  405094:	4a39      	ldr	r2, [pc, #228]	; (40517c <SystemCoreClockUpdate+0x158>)
  405096:	6013      	str	r3, [r2, #0]
				break;
  405098:	e008      	b.n	4050ac <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 3U;
  40509a:	4b38      	ldr	r3, [pc, #224]	; (40517c <SystemCoreClockUpdate+0x158>)
  40509c:	681a      	ldr	r2, [r3, #0]
  40509e:	4613      	mov	r3, r2
  4050a0:	005b      	lsls	r3, r3, #1
  4050a2:	4413      	add	r3, r2
  4050a4:	4a35      	ldr	r2, [pc, #212]	; (40517c <SystemCoreClockUpdate+0x158>)
  4050a6:	6013      	str	r3, [r2, #0]
				break;
  4050a8:	e000      	b.n	4050ac <SystemCoreClockUpdate+0x88>
				break;
  4050aa:	bf00      	nop
		break;
  4050ac:	e042      	b.n	405134 <SystemCoreClockUpdate+0x110>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4050ae:	4b31      	ldr	r3, [pc, #196]	; (405174 <SystemCoreClockUpdate+0x150>)
  4050b0:	6a1b      	ldr	r3, [r3, #32]
  4050b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4050b6:	2b00      	cmp	r3, #0
  4050b8:	d003      	beq.n	4050c2 <SystemCoreClockUpdate+0x9e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4050ba:	4b30      	ldr	r3, [pc, #192]	; (40517c <SystemCoreClockUpdate+0x158>)
  4050bc:	4a30      	ldr	r2, [pc, #192]	; (405180 <SystemCoreClockUpdate+0x15c>)
  4050be:	601a      	str	r2, [r3, #0]
  4050c0:	e01c      	b.n	4050fc <SystemCoreClockUpdate+0xd8>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4050c2:	4b2e      	ldr	r3, [pc, #184]	; (40517c <SystemCoreClockUpdate+0x158>)
  4050c4:	4a2f      	ldr	r2, [pc, #188]	; (405184 <SystemCoreClockUpdate+0x160>)
  4050c6:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4050c8:	4b2a      	ldr	r3, [pc, #168]	; (405174 <SystemCoreClockUpdate+0x150>)
  4050ca:	6a1b      	ldr	r3, [r3, #32]
  4050cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4050d0:	2b10      	cmp	r3, #16
  4050d2:	d004      	beq.n	4050de <SystemCoreClockUpdate+0xba>
  4050d4:	2b20      	cmp	r3, #32
  4050d6:	d008      	beq.n	4050ea <SystemCoreClockUpdate+0xc6>
  4050d8:	2b00      	cmp	r3, #0
  4050da:	d00e      	beq.n	4050fa <SystemCoreClockUpdate+0xd6>
				break;
  4050dc:	e00e      	b.n	4050fc <SystemCoreClockUpdate+0xd8>
				SystemCoreClock *= 2U;
  4050de:	4b27      	ldr	r3, [pc, #156]	; (40517c <SystemCoreClockUpdate+0x158>)
  4050e0:	681b      	ldr	r3, [r3, #0]
  4050e2:	005b      	lsls	r3, r3, #1
  4050e4:	4a25      	ldr	r2, [pc, #148]	; (40517c <SystemCoreClockUpdate+0x158>)
  4050e6:	6013      	str	r3, [r2, #0]
				break;
  4050e8:	e008      	b.n	4050fc <SystemCoreClockUpdate+0xd8>
				SystemCoreClock *= 3U;
  4050ea:	4b24      	ldr	r3, [pc, #144]	; (40517c <SystemCoreClockUpdate+0x158>)
  4050ec:	681a      	ldr	r2, [r3, #0]
  4050ee:	4613      	mov	r3, r2
  4050f0:	005b      	lsls	r3, r3, #1
  4050f2:	4413      	add	r3, r2
  4050f4:	4a21      	ldr	r2, [pc, #132]	; (40517c <SystemCoreClockUpdate+0x158>)
  4050f6:	6013      	str	r3, [r2, #0]
				break;
  4050f8:	e000      	b.n	4050fc <SystemCoreClockUpdate+0xd8>
				break;
  4050fa:	bf00      	nop
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4050fc:	4b1d      	ldr	r3, [pc, #116]	; (405174 <SystemCoreClockUpdate+0x150>)
  4050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405100:	f003 0303 	and.w	r3, r3, #3
  405104:	2b02      	cmp	r3, #2
  405106:	d114      	bne.n	405132 <SystemCoreClockUpdate+0x10e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405108:	4b1a      	ldr	r3, [pc, #104]	; (405174 <SystemCoreClockUpdate+0x150>)
  40510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40510c:	0c1b      	lsrs	r3, r3, #16
  40510e:	f3c3 030a 	ubfx	r3, r3, #0, #11
  405112:	3301      	adds	r3, #1
  405114:	4a19      	ldr	r2, [pc, #100]	; (40517c <SystemCoreClockUpdate+0x158>)
  405116:	6812      	ldr	r2, [r2, #0]
  405118:	fb02 f303 	mul.w	r3, r2, r3
  40511c:	4a17      	ldr	r2, [pc, #92]	; (40517c <SystemCoreClockUpdate+0x158>)
  40511e:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405120:	4b14      	ldr	r3, [pc, #80]	; (405174 <SystemCoreClockUpdate+0x150>)
  405122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  405124:	b2db      	uxtb	r3, r3
  405126:	4a15      	ldr	r2, [pc, #84]	; (40517c <SystemCoreClockUpdate+0x158>)
  405128:	6812      	ldr	r2, [r2, #0]
  40512a:	fbb2 f3f3 	udiv	r3, r2, r3
  40512e:	4a13      	ldr	r2, [pc, #76]	; (40517c <SystemCoreClockUpdate+0x158>)
  405130:	6013      	str	r3, [r2, #0]
		break;
  405132:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  405134:	4b0f      	ldr	r3, [pc, #60]	; (405174 <SystemCoreClockUpdate+0x150>)
  405136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405138:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40513c:	2b70      	cmp	r3, #112	; 0x70
  40513e:	d108      	bne.n	405152 <SystemCoreClockUpdate+0x12e>
		SystemCoreClock /= 3U;
  405140:	4b0e      	ldr	r3, [pc, #56]	; (40517c <SystemCoreClockUpdate+0x158>)
  405142:	681b      	ldr	r3, [r3, #0]
  405144:	4a10      	ldr	r2, [pc, #64]	; (405188 <SystemCoreClockUpdate+0x164>)
  405146:	fba2 2303 	umull	r2, r3, r2, r3
  40514a:	085b      	lsrs	r3, r3, #1
  40514c:	4a0b      	ldr	r2, [pc, #44]	; (40517c <SystemCoreClockUpdate+0x158>)
  40514e:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
				PMC_MCKR_PRES_Pos);
	}
}
  405150:	e00a      	b.n	405168 <SystemCoreClockUpdate+0x144>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  405152:	4b08      	ldr	r3, [pc, #32]	; (405174 <SystemCoreClockUpdate+0x150>)
  405154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405156:	091b      	lsrs	r3, r3, #4
  405158:	f003 0307 	and.w	r3, r3, #7
  40515c:	4a07      	ldr	r2, [pc, #28]	; (40517c <SystemCoreClockUpdate+0x158>)
  40515e:	6812      	ldr	r2, [r2, #0]
  405160:	fa22 f303 	lsr.w	r3, r2, r3
  405164:	4a05      	ldr	r2, [pc, #20]	; (40517c <SystemCoreClockUpdate+0x158>)
  405166:	6013      	str	r3, [r2, #0]
}
  405168:	bf00      	nop
  40516a:	46bd      	mov	sp, r7
  40516c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405170:	4770      	bx	lr
  405172:	bf00      	nop
  405174:	400e0400 	.word	0x400e0400
  405178:	400e1810 	.word	0x400e1810
  40517c:	2000001c 	.word	0x2000001c
  405180:	00b71b00 	.word	0x00b71b00
  405184:	003d0900 	.word	0x003d0900
  405188:	aaaaaaab 	.word	0xaaaaaaab

0040518c <system_init_flash>:

/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  40518c:	b480      	push	{r7}
  40518e:	b083      	sub	sp, #12
  405190:	af00      	add	r7, sp, #0
  405192:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  405194:	687b      	ldr	r3, [r7, #4]
  405196:	4a19      	ldr	r2, [pc, #100]	; (4051fc <system_init_flash+0x70>)
  405198:	4293      	cmp	r3, r2
  40519a:	d804      	bhi.n	4051a6 <system_init_flash+0x1a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40519c:	4b18      	ldr	r3, [pc, #96]	; (405200 <system_init_flash+0x74>)
  40519e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4051a2:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
}
  4051a4:	e023      	b.n	4051ee <system_init_flash+0x62>
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4051a6:	687b      	ldr	r3, [r7, #4]
  4051a8:	4a16      	ldr	r2, [pc, #88]	; (405204 <system_init_flash+0x78>)
  4051aa:	4293      	cmp	r3, r2
  4051ac:	d803      	bhi.n	4051b6 <system_init_flash+0x2a>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4051ae:	4b14      	ldr	r3, [pc, #80]	; (405200 <system_init_flash+0x74>)
  4051b0:	4a15      	ldr	r2, [pc, #84]	; (405208 <system_init_flash+0x7c>)
  4051b2:	601a      	str	r2, [r3, #0]
}
  4051b4:	e01b      	b.n	4051ee <system_init_flash+0x62>
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4051b6:	687b      	ldr	r3, [r7, #4]
  4051b8:	4a14      	ldr	r2, [pc, #80]	; (40520c <system_init_flash+0x80>)
  4051ba:	4293      	cmp	r3, r2
  4051bc:	d803      	bhi.n	4051c6 <system_init_flash+0x3a>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4051be:	4b10      	ldr	r3, [pc, #64]	; (405200 <system_init_flash+0x74>)
  4051c0:	4a13      	ldr	r2, [pc, #76]	; (405210 <system_init_flash+0x84>)
  4051c2:	601a      	str	r2, [r3, #0]
}
  4051c4:	e013      	b.n	4051ee <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4051c6:	687b      	ldr	r3, [r7, #4]
  4051c8:	4a12      	ldr	r2, [pc, #72]	; (405214 <system_init_flash+0x88>)
  4051ca:	4293      	cmp	r3, r2
  4051cc:	d803      	bhi.n	4051d6 <system_init_flash+0x4a>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4051ce:	4b0c      	ldr	r3, [pc, #48]	; (405200 <system_init_flash+0x74>)
  4051d0:	4a11      	ldr	r2, [pc, #68]	; (405218 <system_init_flash+0x8c>)
  4051d2:	601a      	str	r2, [r3, #0]
}
  4051d4:	e00b      	b.n	4051ee <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4051d6:	687b      	ldr	r3, [r7, #4]
  4051d8:	4a10      	ldr	r2, [pc, #64]	; (40521c <system_init_flash+0x90>)
  4051da:	4293      	cmp	r3, r2
  4051dc:	d804      	bhi.n	4051e8 <system_init_flash+0x5c>
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4051de:	4b08      	ldr	r3, [pc, #32]	; (405200 <system_init_flash+0x74>)
  4051e0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4051e4:	601a      	str	r2, [r3, #0]
}
  4051e6:	e002      	b.n	4051ee <system_init_flash+0x62>
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4051e8:	4b05      	ldr	r3, [pc, #20]	; (405200 <system_init_flash+0x74>)
  4051ea:	4a0d      	ldr	r2, [pc, #52]	; (405220 <system_init_flash+0x94>)
  4051ec:	601a      	str	r2, [r3, #0]
}
  4051ee:	bf00      	nop
  4051f0:	370c      	adds	r7, #12
  4051f2:	46bd      	mov	sp, r7
  4051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051f8:	4770      	bx	lr
  4051fa:	bf00      	nop
  4051fc:	01312cff 	.word	0x01312cff
  405200:	400e0a00 	.word	0x400e0a00
  405204:	026259ff 	.word	0x026259ff
  405208:	04000100 	.word	0x04000100
  40520c:	039386ff 	.word	0x039386ff
  405210:	04000200 	.word	0x04000200
  405214:	04c4b3ff 	.word	0x04c4b3ff
  405218:	04000300 	.word	0x04000300
  40521c:	05f5e0ff 	.word	0x05f5e0ff
  405220:	04000500 	.word	0x04000500

00405224 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  405224:	b480      	push	{r7}
  405226:	b085      	sub	sp, #20
  405228:	af00      	add	r7, sp, #0
  40522a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40522c:	4b10      	ldr	r3, [pc, #64]	; (405270 <_sbrk+0x4c>)
  40522e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  405230:	4b10      	ldr	r3, [pc, #64]	; (405274 <_sbrk+0x50>)
  405232:	681b      	ldr	r3, [r3, #0]
  405234:	2b00      	cmp	r3, #0
  405236:	d102      	bne.n	40523e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  405238:	4b0e      	ldr	r3, [pc, #56]	; (405274 <_sbrk+0x50>)
  40523a:	4a0f      	ldr	r2, [pc, #60]	; (405278 <_sbrk+0x54>)
  40523c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40523e:	4b0d      	ldr	r3, [pc, #52]	; (405274 <_sbrk+0x50>)
  405240:	681b      	ldr	r3, [r3, #0]
  405242:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  405244:	68ba      	ldr	r2, [r7, #8]
  405246:	687b      	ldr	r3, [r7, #4]
  405248:	441a      	add	r2, r3
  40524a:	68fb      	ldr	r3, [r7, #12]
  40524c:	429a      	cmp	r2, r3
  40524e:	dd02      	ble.n	405256 <_sbrk+0x32>
		return (caddr_t) -1;	
  405250:	f04f 33ff 	mov.w	r3, #4294967295
  405254:	e006      	b.n	405264 <_sbrk+0x40>
	}

	heap += incr;
  405256:	4b07      	ldr	r3, [pc, #28]	; (405274 <_sbrk+0x50>)
  405258:	681a      	ldr	r2, [r3, #0]
  40525a:	687b      	ldr	r3, [r7, #4]
  40525c:	4413      	add	r3, r2
  40525e:	4a05      	ldr	r2, [pc, #20]	; (405274 <_sbrk+0x50>)
  405260:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  405262:	68bb      	ldr	r3, [r7, #8]
}
  405264:	4618      	mov	r0, r3
  405266:	3714      	adds	r7, #20
  405268:	46bd      	mov	sp, r7
  40526a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40526e:	4770      	bx	lr
  405270:	2001fffc 	.word	0x2001fffc
  405274:	2000ab6c 	.word	0x2000ab6c
  405278:	2000dc78 	.word	0x2000dc78

0040527c <main>:
/* Function definitions ----------------------------------------------- */
/**
 * @brief Entry
 */
int main(void)
{
  40527c:	b580      	push	{r7, lr}
  40527e:	af00      	add	r7, sp, #0
  sys_init();
  405280:	4b02      	ldr	r3, [pc, #8]	; (40528c <main+0x10>)
  405282:	4798      	blx	r3

  while (1)
  {
    sys_run();
  405284:	4b02      	ldr	r3, [pc, #8]	; (405290 <main+0x14>)
  405286:	4798      	blx	r3
  405288:	e7fc      	b.n	405284 <main+0x8>
  40528a:	bf00      	nop
  40528c:	00402cf5 	.word	0x00402cf5
  405290:	00402d5d 	.word	0x00402d5d

00405294 <osc_enable>:
{
  405294:	b580      	push	{r7, lr}
  405296:	b082      	sub	sp, #8
  405298:	af00      	add	r7, sp, #0
  40529a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40529c:	687b      	ldr	r3, [r7, #4]
  40529e:	2b07      	cmp	r3, #7
  4052a0:	d831      	bhi.n	405306 <osc_enable+0x72>
  4052a2:	a201      	add	r2, pc, #4	; (adr r2, 4052a8 <osc_enable+0x14>)
  4052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4052a8:	00405305 	.word	0x00405305
  4052ac:	004052c9 	.word	0x004052c9
  4052b0:	004052d1 	.word	0x004052d1
  4052b4:	004052d9 	.word	0x004052d9
  4052b8:	004052e1 	.word	0x004052e1
  4052bc:	004052e9 	.word	0x004052e9
  4052c0:	004052f1 	.word	0x004052f1
  4052c4:	004052fb 	.word	0x004052fb
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4052c8:	2000      	movs	r0, #0
  4052ca:	4b11      	ldr	r3, [pc, #68]	; (405310 <osc_enable+0x7c>)
  4052cc:	4798      	blx	r3
		break;
  4052ce:	e01a      	b.n	405306 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4052d0:	2001      	movs	r0, #1
  4052d2:	4b0f      	ldr	r3, [pc, #60]	; (405310 <osc_enable+0x7c>)
  4052d4:	4798      	blx	r3
		break;
  4052d6:	e016      	b.n	405306 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4052d8:	2000      	movs	r0, #0
  4052da:	4b0e      	ldr	r3, [pc, #56]	; (405314 <osc_enable+0x80>)
  4052dc:	4798      	blx	r3
		break;
  4052de:	e012      	b.n	405306 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4052e0:	2010      	movs	r0, #16
  4052e2:	4b0c      	ldr	r3, [pc, #48]	; (405314 <osc_enable+0x80>)
  4052e4:	4798      	blx	r3
		break;
  4052e6:	e00e      	b.n	405306 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4052e8:	2020      	movs	r0, #32
  4052ea:	4b0a      	ldr	r3, [pc, #40]	; (405314 <osc_enable+0x80>)
  4052ec:	4798      	blx	r3
		break;
  4052ee:	e00a      	b.n	405306 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4052f0:	213e      	movs	r1, #62	; 0x3e
  4052f2:	2000      	movs	r0, #0
  4052f4:	4b08      	ldr	r3, [pc, #32]	; (405318 <osc_enable+0x84>)
  4052f6:	4798      	blx	r3
		break;
  4052f8:	e005      	b.n	405306 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4052fa:	213e      	movs	r1, #62	; 0x3e
  4052fc:	2001      	movs	r0, #1
  4052fe:	4b06      	ldr	r3, [pc, #24]	; (405318 <osc_enable+0x84>)
  405300:	4798      	blx	r3
		break;
  405302:	e000      	b.n	405306 <osc_enable+0x72>
		break;
  405304:	bf00      	nop
}
  405306:	bf00      	nop
  405308:	3708      	adds	r7, #8
  40530a:	46bd      	mov	sp, r7
  40530c:	bd80      	pop	{r7, pc}
  40530e:	bf00      	nop
  405310:	00405fe9 	.word	0x00405fe9
  405314:	00406055 	.word	0x00406055
  405318:	004060c5 	.word	0x004060c5

0040531c <osc_is_ready>:
{
  40531c:	b580      	push	{r7, lr}
  40531e:	b082      	sub	sp, #8
  405320:	af00      	add	r7, sp, #0
  405322:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405324:	687b      	ldr	r3, [r7, #4]
  405326:	2b07      	cmp	r3, #7
  405328:	d826      	bhi.n	405378 <osc_is_ready+0x5c>
  40532a:	a201      	add	r2, pc, #4	; (adr r2, 405330 <osc_is_ready+0x14>)
  40532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405330:	00405351 	.word	0x00405351
  405334:	00405355 	.word	0x00405355
  405338:	00405355 	.word	0x00405355
  40533c:	00405367 	.word	0x00405367
  405340:	00405367 	.word	0x00405367
  405344:	00405367 	.word	0x00405367
  405348:	00405367 	.word	0x00405367
  40534c:	00405367 	.word	0x00405367
		return 1;
  405350:	2301      	movs	r3, #1
  405352:	e012      	b.n	40537a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  405354:	4b0b      	ldr	r3, [pc, #44]	; (405384 <osc_is_ready+0x68>)
  405356:	4798      	blx	r3
  405358:	4603      	mov	r3, r0
  40535a:	2b00      	cmp	r3, #0
  40535c:	bf14      	ite	ne
  40535e:	2301      	movne	r3, #1
  405360:	2300      	moveq	r3, #0
  405362:	b2db      	uxtb	r3, r3
  405364:	e009      	b.n	40537a <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  405366:	4b08      	ldr	r3, [pc, #32]	; (405388 <osc_is_ready+0x6c>)
  405368:	4798      	blx	r3
  40536a:	4603      	mov	r3, r0
  40536c:	2b00      	cmp	r3, #0
  40536e:	bf14      	ite	ne
  405370:	2301      	movne	r3, #1
  405372:	2300      	moveq	r3, #0
  405374:	b2db      	uxtb	r3, r3
  405376:	e000      	b.n	40537a <osc_is_ready+0x5e>
	return 0;
  405378:	2300      	movs	r3, #0
}
  40537a:	4618      	mov	r0, r3
  40537c:	3708      	adds	r7, #8
  40537e:	46bd      	mov	sp, r7
  405380:	bd80      	pop	{r7, pc}
  405382:	bf00      	nop
  405384:	00406021 	.word	0x00406021
  405388:	0040613d 	.word	0x0040613d

0040538c <osc_get_rate>:
{
  40538c:	b480      	push	{r7}
  40538e:	b083      	sub	sp, #12
  405390:	af00      	add	r7, sp, #0
  405392:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  405394:	687b      	ldr	r3, [r7, #4]
  405396:	2b07      	cmp	r3, #7
  405398:	d825      	bhi.n	4053e6 <osc_get_rate+0x5a>
  40539a:	a201      	add	r2, pc, #4	; (adr r2, 4053a0 <osc_get_rate+0x14>)
  40539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4053a0:	004053c1 	.word	0x004053c1
  4053a4:	004053c7 	.word	0x004053c7
  4053a8:	004053cd 	.word	0x004053cd
  4053ac:	004053d3 	.word	0x004053d3
  4053b0:	004053d7 	.word	0x004053d7
  4053b4:	004053db 	.word	0x004053db
  4053b8:	004053df 	.word	0x004053df
  4053bc:	004053e3 	.word	0x004053e3
		return OSC_SLCK_32K_RC_HZ;
  4053c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4053c4:	e010      	b.n	4053e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4053c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4053ca:	e00d      	b.n	4053e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4053cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4053d0:	e00a      	b.n	4053e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4053d2:	4b08      	ldr	r3, [pc, #32]	; (4053f4 <osc_get_rate+0x68>)
  4053d4:	e008      	b.n	4053e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4053d6:	4b08      	ldr	r3, [pc, #32]	; (4053f8 <osc_get_rate+0x6c>)
  4053d8:	e006      	b.n	4053e8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4053da:	4b08      	ldr	r3, [pc, #32]	; (4053fc <osc_get_rate+0x70>)
  4053dc:	e004      	b.n	4053e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4053de:	4b07      	ldr	r3, [pc, #28]	; (4053fc <osc_get_rate+0x70>)
  4053e0:	e002      	b.n	4053e8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4053e2:	4b06      	ldr	r3, [pc, #24]	; (4053fc <osc_get_rate+0x70>)
  4053e4:	e000      	b.n	4053e8 <osc_get_rate+0x5c>
	return 0;
  4053e6:	2300      	movs	r3, #0
}
  4053e8:	4618      	mov	r0, r3
  4053ea:	370c      	adds	r7, #12
  4053ec:	46bd      	mov	sp, r7
  4053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053f2:	4770      	bx	lr
  4053f4:	003d0900 	.word	0x003d0900
  4053f8:	007a1200 	.word	0x007a1200
  4053fc:	00b71b00 	.word	0x00b71b00

00405400 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  405400:	b580      	push	{r7, lr}
  405402:	b082      	sub	sp, #8
  405404:	af00      	add	r7, sp, #0
  405406:	4603      	mov	r3, r0
  405408:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40540a:	bf00      	nop
  40540c:	79fb      	ldrb	r3, [r7, #7]
  40540e:	4618      	mov	r0, r3
  405410:	4b05      	ldr	r3, [pc, #20]	; (405428 <osc_wait_ready+0x28>)
  405412:	4798      	blx	r3
  405414:	4603      	mov	r3, r0
  405416:	f083 0301 	eor.w	r3, r3, #1
  40541a:	b2db      	uxtb	r3, r3
  40541c:	2b00      	cmp	r3, #0
  40541e:	d1f5      	bne.n	40540c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  405420:	bf00      	nop
  405422:	3708      	adds	r7, #8
  405424:	46bd      	mov	sp, r7
  405426:	bd80      	pop	{r7, pc}
  405428:	0040531d 	.word	0x0040531d

0040542c <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40542c:	b580      	push	{r7, lr}
  40542e:	b086      	sub	sp, #24
  405430:	af00      	add	r7, sp, #0
  405432:	60f8      	str	r0, [r7, #12]
  405434:	607a      	str	r2, [r7, #4]
  405436:	603b      	str	r3, [r7, #0]
  405438:	460b      	mov	r3, r1
  40543a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40543c:	7afb      	ldrb	r3, [r7, #11]
  40543e:	4618      	mov	r0, r3
  405440:	4b0d      	ldr	r3, [pc, #52]	; (405478 <pll_config_init+0x4c>)
  405442:	4798      	blx	r3
  405444:	4602      	mov	r2, r0
  405446:	687b      	ldr	r3, [r7, #4]
  405448:	fbb2 f3f3 	udiv	r3, r2, r3
  40544c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40544e:	697b      	ldr	r3, [r7, #20]
  405450:	683a      	ldr	r2, [r7, #0]
  405452:	fb02 f303 	mul.w	r3, r2, r3
  405456:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | \
  405458:	683b      	ldr	r3, [r7, #0]
  40545a:	3b01      	subs	r3, #1
  40545c:	041a      	lsls	r2, r3, #16
  40545e:	4b07      	ldr	r3, [pc, #28]	; (40547c <pll_config_init+0x50>)
  405460:	4013      	ands	r3, r2
  405462:	687a      	ldr	r2, [r7, #4]
  405464:	b2d2      	uxtb	r2, r2
  405466:	4313      	orrs	r3, r2
  405468:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40546c:	68fb      	ldr	r3, [r7, #12]
  40546e:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
}
  405470:	bf00      	nop
  405472:	3718      	adds	r7, #24
  405474:	46bd      	mov	sp, r7
  405476:	bd80      	pop	{r7, pc}
  405478:	0040538d 	.word	0x0040538d
  40547c:	07ff0000 	.word	0x07ff0000

00405480 <pll_enable>:
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  405480:	b580      	push	{r7, lr}
  405482:	b082      	sub	sp, #8
  405484:	af00      	add	r7, sp, #0
  405486:	6078      	str	r0, [r7, #4]
  405488:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40548a:	683b      	ldr	r3, [r7, #0]
  40548c:	2b00      	cmp	r3, #0
  40548e:	d107      	bne.n	4054a0 <pll_enable+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
  405490:	4b05      	ldr	r3, [pc, #20]	; (4054a8 <pll_enable+0x28>)
  405492:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  405494:	4a05      	ldr	r2, [pc, #20]	; (4054ac <pll_enable+0x2c>)
  405496:	687b      	ldr	r3, [r7, #4]
  405498:	681b      	ldr	r3, [r3, #0]
  40549a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40549e:	6293      	str	r3, [r2, #40]	; 0x28
	}
}
  4054a0:	bf00      	nop
  4054a2:	3708      	adds	r7, #8
  4054a4:	46bd      	mov	sp, r7
  4054a6:	bd80      	pop	{r7, pc}
  4054a8:	00406159 	.word	0x00406159
  4054ac:	400e0400 	.word	0x400e0400

004054b0 <pll_is_locked>:
		pmc_disable_pllack();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4054b0:	b580      	push	{r7, lr}
  4054b2:	b082      	sub	sp, #8
  4054b4:	af00      	add	r7, sp, #0
  4054b6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  4054b8:	4b03      	ldr	r3, [pc, #12]	; (4054c8 <pll_is_locked+0x18>)
  4054ba:	4798      	blx	r3
  4054bc:	4603      	mov	r3, r0
}
  4054be:	4618      	mov	r0, r3
  4054c0:	3708      	adds	r7, #8
  4054c2:	46bd      	mov	sp, r7
  4054c4:	bd80      	pop	{r7, pc}
  4054c6:	bf00      	nop
  4054c8:	00406175 	.word	0x00406175

004054cc <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4054cc:	b580      	push	{r7, lr}
  4054ce:	b082      	sub	sp, #8
  4054d0:	af00      	add	r7, sp, #0
  4054d2:	4603      	mov	r3, r0
  4054d4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4054d6:	79fb      	ldrb	r3, [r7, #7]
  4054d8:	3b03      	subs	r3, #3
  4054da:	2b04      	cmp	r3, #4
  4054dc:	d808      	bhi.n	4054f0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4054de:	79fb      	ldrb	r3, [r7, #7]
  4054e0:	4618      	mov	r0, r3
  4054e2:	4b06      	ldr	r3, [pc, #24]	; (4054fc <pll_enable_source+0x30>)
  4054e4:	4798      	blx	r3
		osc_wait_ready(e_src);
  4054e6:	79fb      	ldrb	r3, [r7, #7]
  4054e8:	4618      	mov	r0, r3
  4054ea:	4b05      	ldr	r3, [pc, #20]	; (405500 <pll_enable_source+0x34>)
  4054ec:	4798      	blx	r3
		break;
  4054ee:	e000      	b.n	4054f2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  4054f0:	bf00      	nop
	}
}
  4054f2:	bf00      	nop
  4054f4:	3708      	adds	r7, #8
  4054f6:	46bd      	mov	sp, r7
  4054f8:	bd80      	pop	{r7, pc}
  4054fa:	bf00      	nop
  4054fc:	00405295 	.word	0x00405295
  405500:	00405401 	.word	0x00405401

00405504 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  405504:	b580      	push	{r7, lr}
  405506:	b082      	sub	sp, #8
  405508:	af00      	add	r7, sp, #0
  40550a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40550c:	bf00      	nop
  40550e:	6878      	ldr	r0, [r7, #4]
  405510:	4b04      	ldr	r3, [pc, #16]	; (405524 <pll_wait_for_lock+0x20>)
  405512:	4798      	blx	r3
  405514:	4603      	mov	r3, r0
  405516:	2b00      	cmp	r3, #0
  405518:	d0f9      	beq.n	40550e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40551a:	2300      	movs	r3, #0
}
  40551c:	4618      	mov	r0, r3
  40551e:	3708      	adds	r7, #8
  405520:	46bd      	mov	sp, r7
  405522:	bd80      	pop	{r7, pc}
  405524:	004054b1 	.word	0x004054b1

00405528 <sysclk_get_main_hz>:
{
  405528:	b580      	push	{r7, lr}
  40552a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40552c:	2006      	movs	r0, #6
  40552e:	4b03      	ldr	r3, [pc, #12]	; (40553c <sysclk_get_main_hz+0x14>)
  405530:	4798      	blx	r3
  405532:	4603      	mov	r3, r0
  405534:	011b      	lsls	r3, r3, #4
}
  405536:	4618      	mov	r0, r3
  405538:	bd80      	pop	{r7, pc}
  40553a:	bf00      	nop
  40553c:	0040538d 	.word	0x0040538d

00405540 <sysclk_get_cpu_hz>:
{
  405540:	b580      	push	{r7, lr}
  405542:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  405544:	4b02      	ldr	r3, [pc, #8]	; (405550 <sysclk_get_cpu_hz+0x10>)
  405546:	4798      	blx	r3
  405548:	4603      	mov	r3, r0
  40554a:	085b      	lsrs	r3, r3, #1
}
  40554c:	4618      	mov	r0, r3
  40554e:	bd80      	pop	{r7, pc}
  405550:	00405529 	.word	0x00405529

00405554 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  405554:	b590      	push	{r4, r7, lr}
  405556:	b083      	sub	sp, #12
  405558:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40555a:	4811      	ldr	r0, [pc, #68]	; (4055a0 <sysclk_init+0x4c>)
  40555c:	4b11      	ldr	r3, [pc, #68]	; (4055a4 <sysclk_init+0x50>)
  40555e:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  405560:	2006      	movs	r0, #6
  405562:	4b11      	ldr	r3, [pc, #68]	; (4055a8 <sysclk_init+0x54>)
  405564:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  405566:	1d38      	adds	r0, r7, #4
  405568:	2310      	movs	r3, #16
  40556a:	2201      	movs	r2, #1
  40556c:	2106      	movs	r1, #6
  40556e:	4c0f      	ldr	r4, [pc, #60]	; (4055ac <sysclk_init+0x58>)
  405570:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  405572:	1d3b      	adds	r3, r7, #4
  405574:	2100      	movs	r1, #0
  405576:	4618      	mov	r0, r3
  405578:	4b0d      	ldr	r3, [pc, #52]	; (4055b0 <sysclk_init+0x5c>)
  40557a:	4798      	blx	r3
		pll_wait_for_lock(0);
  40557c:	2000      	movs	r0, #0
  40557e:	4b0d      	ldr	r3, [pc, #52]	; (4055b4 <sysclk_init+0x60>)
  405580:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  405582:	2010      	movs	r0, #16
  405584:	4b0c      	ldr	r3, [pc, #48]	; (4055b8 <sysclk_init+0x64>)
  405586:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  405588:	4b0c      	ldr	r3, [pc, #48]	; (4055bc <sysclk_init+0x68>)
  40558a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40558c:	4b0c      	ldr	r3, [pc, #48]	; (4055c0 <sysclk_init+0x6c>)
  40558e:	4798      	blx	r3
  405590:	4603      	mov	r3, r0
  405592:	4618      	mov	r0, r3
  405594:	4b03      	ldr	r3, [pc, #12]	; (4055a4 <sysclk_init+0x50>)
  405596:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  405598:	bf00      	nop
  40559a:	370c      	adds	r7, #12
  40559c:	46bd      	mov	sp, r7
  40559e:	bd90      	pop	{r4, r7, pc}
  4055a0:	07270e00 	.word	0x07270e00
  4055a4:	0040518d 	.word	0x0040518d
  4055a8:	004054cd 	.word	0x004054cd
  4055ac:	0040542d 	.word	0x0040542d
  4055b0:	00405481 	.word	0x00405481
  4055b4:	00405505 	.word	0x00405505
  4055b8:	00405f65 	.word	0x00405f65
  4055bc:	00405025 	.word	0x00405025
  4055c0:	00405541 	.word	0x00405541

004055c4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4055c4:	b580      	push	{r7, lr}
  4055c6:	b084      	sub	sp, #16
  4055c8:	af00      	add	r7, sp, #0
  4055ca:	6078      	str	r0, [r7, #4]
  4055cc:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4055ce:	6878      	ldr	r0, [r7, #4]
  4055d0:	4b2c      	ldr	r3, [pc, #176]	; (405684 <pio_handler_process+0xc0>)
  4055d2:	4798      	blx	r3
  4055d4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4055d6:	6878      	ldr	r0, [r7, #4]
  4055d8:	4b2b      	ldr	r3, [pc, #172]	; (405688 <pio_handler_process+0xc4>)
  4055da:	4798      	blx	r3
  4055dc:	4602      	mov	r2, r0
  4055de:	68fb      	ldr	r3, [r7, #12]
  4055e0:	4013      	ands	r3, r2
  4055e2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4055e4:	68fb      	ldr	r3, [r7, #12]
  4055e6:	2b00      	cmp	r3, #0
  4055e8:	d03c      	beq.n	405664 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4055ea:	2300      	movs	r3, #0
  4055ec:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4055ee:	e034      	b.n	40565a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4055f0:	4a26      	ldr	r2, [pc, #152]	; (40568c <pio_handler_process+0xc8>)
  4055f2:	68bb      	ldr	r3, [r7, #8]
  4055f4:	011b      	lsls	r3, r3, #4
  4055f6:	4413      	add	r3, r2
  4055f8:	681a      	ldr	r2, [r3, #0]
  4055fa:	683b      	ldr	r3, [r7, #0]
  4055fc:	429a      	cmp	r2, r3
  4055fe:	d126      	bne.n	40564e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  405600:	4a22      	ldr	r2, [pc, #136]	; (40568c <pio_handler_process+0xc8>)
  405602:	68bb      	ldr	r3, [r7, #8]
  405604:	011b      	lsls	r3, r3, #4
  405606:	4413      	add	r3, r2
  405608:	3304      	adds	r3, #4
  40560a:	681a      	ldr	r2, [r3, #0]
  40560c:	68fb      	ldr	r3, [r7, #12]
  40560e:	4013      	ands	r3, r2
  405610:	2b00      	cmp	r3, #0
  405612:	d01c      	beq.n	40564e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  405614:	4a1d      	ldr	r2, [pc, #116]	; (40568c <pio_handler_process+0xc8>)
  405616:	68bb      	ldr	r3, [r7, #8]
  405618:	011b      	lsls	r3, r3, #4
  40561a:	4413      	add	r3, r2
  40561c:	330c      	adds	r3, #12
  40561e:	681b      	ldr	r3, [r3, #0]
  405620:	491a      	ldr	r1, [pc, #104]	; (40568c <pio_handler_process+0xc8>)
  405622:	68ba      	ldr	r2, [r7, #8]
  405624:	0112      	lsls	r2, r2, #4
  405626:	440a      	add	r2, r1
  405628:	6810      	ldr	r0, [r2, #0]
  40562a:	4918      	ldr	r1, [pc, #96]	; (40568c <pio_handler_process+0xc8>)
  40562c:	68ba      	ldr	r2, [r7, #8]
  40562e:	0112      	lsls	r2, r2, #4
  405630:	440a      	add	r2, r1
  405632:	3204      	adds	r2, #4
  405634:	6812      	ldr	r2, [r2, #0]
  405636:	4611      	mov	r1, r2
  405638:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40563a:	4a14      	ldr	r2, [pc, #80]	; (40568c <pio_handler_process+0xc8>)
  40563c:	68bb      	ldr	r3, [r7, #8]
  40563e:	011b      	lsls	r3, r3, #4
  405640:	4413      	add	r3, r2
  405642:	3304      	adds	r3, #4
  405644:	681b      	ldr	r3, [r3, #0]
  405646:	43db      	mvns	r3, r3
  405648:	68fa      	ldr	r2, [r7, #12]
  40564a:	4013      	ands	r3, r2
  40564c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40564e:	68bb      	ldr	r3, [r7, #8]
  405650:	3301      	adds	r3, #1
  405652:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  405654:	68bb      	ldr	r3, [r7, #8]
  405656:	2b06      	cmp	r3, #6
  405658:	d803      	bhi.n	405662 <pio_handler_process+0x9e>
		while (status != 0) {
  40565a:	68fb      	ldr	r3, [r7, #12]
  40565c:	2b00      	cmp	r3, #0
  40565e:	d1c7      	bne.n	4055f0 <pio_handler_process+0x2c>
  405660:	e000      	b.n	405664 <pio_handler_process+0xa0>
				break;
  405662:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  405664:	4b0a      	ldr	r3, [pc, #40]	; (405690 <pio_handler_process+0xcc>)
  405666:	681b      	ldr	r3, [r3, #0]
  405668:	2b00      	cmp	r3, #0
  40566a:	d007      	beq.n	40567c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  40566c:	4b09      	ldr	r3, [pc, #36]	; (405694 <pio_handler_process+0xd0>)
  40566e:	681b      	ldr	r3, [r3, #0]
  405670:	2b00      	cmp	r3, #0
  405672:	d003      	beq.n	40567c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  405674:	4b07      	ldr	r3, [pc, #28]	; (405694 <pio_handler_process+0xd0>)
  405676:	681b      	ldr	r3, [r3, #0]
  405678:	6878      	ldr	r0, [r7, #4]
  40567a:	4798      	blx	r3
		}
	}
#endif
}
  40567c:	bf00      	nop
  40567e:	3710      	adds	r7, #16
  405680:	46bd      	mov	sp, r7
  405682:	bd80      	pop	{r7, pc}
  405684:	00405f35 	.word	0x00405f35
  405688:	00405f4d 	.word	0x00405f4d
  40568c:	2000ab70 	.word	0x2000ab70
  405690:	2000ac48 	.word	0x2000ac48
  405694:	2000abe4 	.word	0x2000abe4

00405698 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  405698:	b580      	push	{r7, lr}
  40569a:	b086      	sub	sp, #24
  40569c:	af00      	add	r7, sp, #0
  40569e:	60f8      	str	r0, [r7, #12]
  4056a0:	60b9      	str	r1, [r7, #8]
  4056a2:	607a      	str	r2, [r7, #4]
  4056a4:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4056a6:	4b21      	ldr	r3, [pc, #132]	; (40572c <pio_handler_set+0x94>)
  4056a8:	681b      	ldr	r3, [r3, #0]
  4056aa:	2b06      	cmp	r3, #6
  4056ac:	d901      	bls.n	4056b2 <pio_handler_set+0x1a>
		return 1;
  4056ae:	2301      	movs	r3, #1
  4056b0:	e038      	b.n	405724 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4056b2:	2300      	movs	r3, #0
  4056b4:	75fb      	strb	r3, [r7, #23]
  4056b6:	e011      	b.n	4056dc <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  4056b8:	7dfb      	ldrb	r3, [r7, #23]
  4056ba:	011b      	lsls	r3, r3, #4
  4056bc:	4a1c      	ldr	r2, [pc, #112]	; (405730 <pio_handler_set+0x98>)
  4056be:	4413      	add	r3, r2
  4056c0:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4056c2:	693b      	ldr	r3, [r7, #16]
  4056c4:	681a      	ldr	r2, [r3, #0]
  4056c6:	68bb      	ldr	r3, [r7, #8]
  4056c8:	429a      	cmp	r2, r3
  4056ca:	d104      	bne.n	4056d6 <pio_handler_set+0x3e>
  4056cc:	693b      	ldr	r3, [r7, #16]
  4056ce:	685a      	ldr	r2, [r3, #4]
  4056d0:	687b      	ldr	r3, [r7, #4]
  4056d2:	429a      	cmp	r2, r3
  4056d4:	d008      	beq.n	4056e8 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4056d6:	7dfb      	ldrb	r3, [r7, #23]
  4056d8:	3301      	adds	r3, #1
  4056da:	75fb      	strb	r3, [r7, #23]
  4056dc:	7dfa      	ldrb	r2, [r7, #23]
  4056de:	4b13      	ldr	r3, [pc, #76]	; (40572c <pio_handler_set+0x94>)
  4056e0:	681b      	ldr	r3, [r3, #0]
  4056e2:	429a      	cmp	r2, r3
  4056e4:	d9e8      	bls.n	4056b8 <pio_handler_set+0x20>
  4056e6:	e000      	b.n	4056ea <pio_handler_set+0x52>
			break;
  4056e8:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4056ea:	693b      	ldr	r3, [r7, #16]
  4056ec:	68ba      	ldr	r2, [r7, #8]
  4056ee:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4056f0:	693b      	ldr	r3, [r7, #16]
  4056f2:	687a      	ldr	r2, [r7, #4]
  4056f4:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4056f6:	693b      	ldr	r3, [r7, #16]
  4056f8:	683a      	ldr	r2, [r7, #0]
  4056fa:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  4056fc:	693b      	ldr	r3, [r7, #16]
  4056fe:	6a3a      	ldr	r2, [r7, #32]
  405700:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  405702:	7dfa      	ldrb	r2, [r7, #23]
  405704:	4b09      	ldr	r3, [pc, #36]	; (40572c <pio_handler_set+0x94>)
  405706:	681b      	ldr	r3, [r3, #0]
  405708:	3301      	adds	r3, #1
  40570a:	429a      	cmp	r2, r3
  40570c:	d104      	bne.n	405718 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40570e:	4b07      	ldr	r3, [pc, #28]	; (40572c <pio_handler_set+0x94>)
  405710:	681b      	ldr	r3, [r3, #0]
  405712:	3301      	adds	r3, #1
  405714:	4a05      	ldr	r2, [pc, #20]	; (40572c <pio_handler_set+0x94>)
  405716:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  405718:	683a      	ldr	r2, [r7, #0]
  40571a:	6879      	ldr	r1, [r7, #4]
  40571c:	68f8      	ldr	r0, [r7, #12]
  40571e:	4b05      	ldr	r3, [pc, #20]	; (405734 <pio_handler_set+0x9c>)
  405720:	4798      	blx	r3

	return 0;
  405722:	2300      	movs	r3, #0
}
  405724:	4618      	mov	r0, r3
  405726:	3718      	adds	r7, #24
  405728:	46bd      	mov	sp, r7
  40572a:	bd80      	pop	{r7, pc}
  40572c:	2000abe0 	.word	0x2000abe0
  405730:	2000ab70 	.word	0x2000ab70
  405734:	00405e91 	.word	0x00405e91

00405738 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  405738:	b580      	push	{r7, lr}
  40573a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40573c:	2109      	movs	r1, #9
  40573e:	4802      	ldr	r0, [pc, #8]	; (405748 <PIOA_Handler+0x10>)
  405740:	4b02      	ldr	r3, [pc, #8]	; (40574c <PIOA_Handler+0x14>)
  405742:	4798      	blx	r3
}
  405744:	bf00      	nop
  405746:	bd80      	pop	{r7, pc}
  405748:	400e0e00 	.word	0x400e0e00
  40574c:	004055c5 	.word	0x004055c5

00405750 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  405750:	b580      	push	{r7, lr}
  405752:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  405754:	210a      	movs	r1, #10
  405756:	4802      	ldr	r0, [pc, #8]	; (405760 <PIOB_Handler+0x10>)
  405758:	4b02      	ldr	r3, [pc, #8]	; (405764 <PIOB_Handler+0x14>)
  40575a:	4798      	blx	r3
}
  40575c:	bf00      	nop
  40575e:	bd80      	pop	{r7, pc}
  405760:	400e1000 	.word	0x400e1000
  405764:	004055c5 	.word	0x004055c5

00405768 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  405768:	b580      	push	{r7, lr}
  40576a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  40576c:	210b      	movs	r1, #11
  40576e:	4802      	ldr	r0, [pc, #8]	; (405778 <PIOC_Handler+0x10>)
  405770:	4b02      	ldr	r3, [pc, #8]	; (40577c <PIOC_Handler+0x14>)
  405772:	4798      	blx	r3
}
  405774:	bf00      	nop
  405776:	bd80      	pop	{r7, pc}
  405778:	400e1200 	.word	0x400e1200
  40577c:	004055c5 	.word	0x004055c5

00405780 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  405780:	b580      	push	{r7, lr}
  405782:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  405784:	210c      	movs	r1, #12
  405786:	4802      	ldr	r0, [pc, #8]	; (405790 <PIOD_Handler+0x10>)
  405788:	4b02      	ldr	r3, [pc, #8]	; (405794 <PIOD_Handler+0x14>)
  40578a:	4798      	blx	r3
}
  40578c:	bf00      	nop
  40578e:	bd80      	pop	{r7, pc}
  405790:	400e1400 	.word	0x400e1400
  405794:	004055c5 	.word	0x004055c5

00405798 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  405798:	b580      	push	{r7, lr}
  40579a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  40579c:	210d      	movs	r1, #13
  40579e:	4802      	ldr	r0, [pc, #8]	; (4057a8 <PIOE_Handler+0x10>)
  4057a0:	4b02      	ldr	r3, [pc, #8]	; (4057ac <PIOE_Handler+0x14>)
  4057a2:	4798      	blx	r3
}
  4057a4:	bf00      	nop
  4057a6:	bd80      	pop	{r7, pc}
  4057a8:	400e1600 	.word	0x400e1600
  4057ac:	004055c5 	.word	0x004055c5

004057b0 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
  4057b0:	b580      	push	{r7, lr}
  4057b2:	b08a      	sub	sp, #40	; 0x28
  4057b4:	af00      	add	r7, sp, #0
  4057b6:	60f8      	str	r0, [r7, #12]
  4057b8:	60b9      	str	r1, [r7, #8]
  4057ba:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  4057bc:	687b      	ldr	r3, [r7, #4]
  4057be:	f246 12a8 	movw	r2, #25000	; 0x61a8
  4057c2:	fb02 f203 	mul.w	r2, r2, r3
  4057c6:	68bb      	ldr	r3, [r7, #8]
  4057c8:	4413      	add	r3, r2
  4057ca:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
  4057cc:	687b      	ldr	r3, [r7, #4]
  4057ce:	f246 11a8 	movw	r1, #25000	; 0x61a8
  4057d2:	fb01 f303 	mul.w	r3, r1, r3
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  4057d6:	fbb2 f3f3 	udiv	r3, r2, r3
  4057da:	2b80      	cmp	r3, #128	; 0x80
  4057dc:	d901      	bls.n	4057e2 <can_set_baudrate+0x32>
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
  4057de:	2300      	movs	r3, #0
  4057e0:	e086      	b.n	4058f0 <can_set_baudrate+0x140>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
  4057e2:	68bb      	ldr	r3, [r7, #8]
  4057e4:	085a      	lsrs	r2, r3, #1
  4057e6:	687b      	ldr	r3, [r7, #4]
  4057e8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  4057ec:	fb01 f303 	mul.w	r3, r1, r3
  4057f0:	429a      	cmp	r2, r3
  4057f2:	d201      	bcs.n	4057f8 <can_set_baudrate+0x48>
		return 0;
  4057f4:	2300      	movs	r3, #0
  4057f6:	e07b      	b.n	4058f0 <can_set_baudrate+0x140>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
  4057f8:	2308      	movs	r3, #8
  4057fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
  4057fe:	f04f 33ff 	mov.w	r3, #4294967295
  405802:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  405804:	2308      	movs	r3, #8
  405806:	77fb      	strb	r3, [r7, #31]
  405808:	e02a      	b.n	405860 <can_set_baudrate+0xb0>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
  40580a:	7ffb      	ldrb	r3, [r7, #31]
  40580c:	687a      	ldr	r2, [r7, #4]
  40580e:	fb02 f303 	mul.w	r3, r2, r3
  405812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  405816:	fb02 f303 	mul.w	r3, r2, r3
  40581a:	68ba      	ldr	r2, [r7, #8]
  40581c:	fbb2 f3f3 	udiv	r3, r2, r3
  405820:	2b80      	cmp	r3, #128	; 0x80
  405822:	d81a      	bhi.n	40585a <can_set_baudrate+0xaa>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
  405824:	7ffb      	ldrb	r3, [r7, #31]
  405826:	687a      	ldr	r2, [r7, #4]
  405828:	fb02 f303 	mul.w	r3, r2, r3
  40582c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  405830:	fb02 f203 	mul.w	r2, r2, r3
  405834:	68bb      	ldr	r3, [r7, #8]
  405836:	fbb3 f1f2 	udiv	r1, r3, r2
  40583a:	fb02 f201 	mul.w	r2, r2, r1
  40583e:	1a9b      	subs	r3, r3, r2
  405840:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
  405842:	69ba      	ldr	r2, [r7, #24]
  405844:	6a3b      	ldr	r3, [r7, #32]
  405846:	429a      	cmp	r2, r3
  405848:	d207      	bcs.n	40585a <can_set_baudrate+0xaa>
				ul_mod = ul_cur_mod;
  40584a:	69bb      	ldr	r3, [r7, #24]
  40584c:	623b      	str	r3, [r7, #32]
				uc_tq = i;
  40584e:	7ffb      	ldrb	r3, [r7, #31]
  405850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
  405854:	6a3b      	ldr	r3, [r7, #32]
  405856:	2b00      	cmp	r3, #0
  405858:	d006      	beq.n	405868 <can_set_baudrate+0xb8>
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  40585a:	7ffb      	ldrb	r3, [r7, #31]
  40585c:	3301      	adds	r3, #1
  40585e:	77fb      	strb	r3, [r7, #31]
  405860:	7ffb      	ldrb	r3, [r7, #31]
  405862:	2b19      	cmp	r3, #25
  405864:	d9d1      	bls.n	40580a <can_set_baudrate+0x5a>
  405866:	e000      	b.n	40586a <can_set_baudrate+0xba>
					break;
  405868:	bf00      	nop
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
  40586a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40586e:	687a      	ldr	r2, [r7, #4]
  405870:	fb02 f303 	mul.w	r3, r2, r3
  405874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  405878:	fb02 f303 	mul.w	r3, r2, r3
  40587c:	68ba      	ldr	r2, [r7, #8]
  40587e:	fbb2 f3f3 	udiv	r3, r2, r3
  405882:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
  405884:	7dfb      	ldrb	r3, [r7, #23]
  405886:	2b01      	cmp	r3, #1
  405888:	d801      	bhi.n	40588e <can_set_baudrate+0xde>
		return 0;
  40588a:	2300      	movs	r3, #0
  40588c:	e030      	b.n	4058f0 <can_set_baudrate+0x140>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
  40588e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  405892:	f1a3 0208 	sub.w	r2, r3, #8
  405896:	4613      	mov	r3, r2
  405898:	005b      	lsls	r3, r3, #1
  40589a:	4413      	add	r3, r2
  40589c:	005b      	lsls	r3, r3, #1
  40589e:	4a16      	ldr	r2, [pc, #88]	; (4058f8 <can_set_baudrate+0x148>)
  4058a0:	4413      	add	r3, r2
  4058a2:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
  4058a4:	68f8      	ldr	r0, [r7, #12]
  4058a6:	4b15      	ldr	r3, [pc, #84]	; (4058fc <can_set_baudrate+0x14c>)
  4058a8:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  4058aa:	693b      	ldr	r3, [r7, #16]
  4058ac:	78db      	ldrb	r3, [r3, #3]
  4058ae:	3b01      	subs	r3, #1
  4058b0:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  4058b4:	693b      	ldr	r3, [r7, #16]
  4058b6:	789b      	ldrb	r3, [r3, #2]
  4058b8:	3b01      	subs	r3, #1
  4058ba:	011b      	lsls	r3, r3, #4
  4058bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  4058c0:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  4058c2:	693b      	ldr	r3, [r7, #16]
  4058c4:	785b      	ldrb	r3, [r3, #1]
  4058c6:	3b01      	subs	r3, #1
  4058c8:	021b      	lsls	r3, r3, #8
  4058ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  4058ce:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  4058d0:	693b      	ldr	r3, [r7, #16]
  4058d2:	791b      	ldrb	r3, [r3, #4]
  4058d4:	3b01      	subs	r3, #1
  4058d6:	031b      	lsls	r3, r3, #12
  4058d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  4058dc:	431a      	orrs	r2, r3
			CAN_BR_BRP(uc_prescale - 1);
  4058de:	7dfb      	ldrb	r3, [r7, #23]
  4058e0:	3b01      	subs	r3, #1
  4058e2:	041b      	lsls	r3, r3, #16
  4058e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  4058e8:	431a      	orrs	r2, r3
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  4058ea:	68fb      	ldr	r3, [r7, #12]
  4058ec:	615a      	str	r2, [r3, #20]
	return 1;
  4058ee:	2301      	movs	r3, #1
}
  4058f0:	4618      	mov	r0, r3
  4058f2:	3728      	adds	r7, #40	; 0x28
  4058f4:	46bd      	mov	sp, r7
  4058f6:	bd80      	pop	{r7, pc}
  4058f8:	0040b634 	.word	0x0040b634
  4058fc:	004059a9 	.word	0x004059a9

00405900 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
  405900:	b580      	push	{r7, lr}
  405902:	b086      	sub	sp, #24
  405904:	af00      	add	r7, sp, #0
  405906:	60f8      	str	r0, [r7, #12]
  405908:	60b9      	str	r1, [r7, #8]
  40590a:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
  40590c:	687a      	ldr	r2, [r7, #4]
  40590e:	68b9      	ldr	r1, [r7, #8]
  405910:	68f8      	ldr	r0, [r7, #12]
  405912:	4b17      	ldr	r3, [pc, #92]	; (405970 <can_init+0x70>)
  405914:	4798      	blx	r3
  405916:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
  405918:	697b      	ldr	r3, [r7, #20]
  40591a:	2b00      	cmp	r3, #0
  40591c:	d101      	bne.n	405922 <can_init+0x22>
		return 0;
  40591e:	2300      	movs	r3, #0
  405920:	e021      	b.n	405966 <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
  405922:	68f8      	ldr	r0, [r7, #12]
  405924:	4b13      	ldr	r3, [pc, #76]	; (405974 <can_init+0x74>)
  405926:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
  405928:	68f8      	ldr	r0, [r7, #12]
  40592a:	4b13      	ldr	r3, [pc, #76]	; (405978 <can_init+0x78>)
  40592c:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
  40592e:	2300      	movs	r3, #0
  405930:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
  405932:	2300      	movs	r3, #0
  405934:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  405936:	e006      	b.n	405946 <can_init+0x46>
		ul_flag = can_get_status(p_can);
  405938:	68f8      	ldr	r0, [r7, #12]
  40593a:	4b10      	ldr	r3, [pc, #64]	; (40597c <can_init+0x7c>)
  40593c:	4798      	blx	r3
  40593e:	6178      	str	r0, [r7, #20]
		ul_tick++;
  405940:	693b      	ldr	r3, [r7, #16]
  405942:	3301      	adds	r3, #1
  405944:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  405946:	697b      	ldr	r3, [r7, #20]
  405948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  40594c:	2b00      	cmp	r3, #0
  40594e:	d103      	bne.n	405958 <can_init+0x58>
  405950:	693b      	ldr	r3, [r7, #16]
  405952:	4a0b      	ldr	r2, [pc, #44]	; (405980 <can_init+0x80>)
  405954:	4293      	cmp	r3, r2
  405956:	d9ef      	bls.n	405938 <can_init+0x38>
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
  405958:	693b      	ldr	r3, [r7, #16]
  40595a:	4a0a      	ldr	r2, [pc, #40]	; (405984 <can_init+0x84>)
  40595c:	4293      	cmp	r3, r2
  40595e:	d101      	bne.n	405964 <can_init+0x64>
		return 0;
  405960:	2300      	movs	r3, #0
  405962:	e000      	b.n	405966 <can_init+0x66>
	} else {
		return 1;
  405964:	2301      	movs	r3, #1
	}
}
  405966:	4618      	mov	r0, r3
  405968:	3718      	adds	r7, #24
  40596a:	46bd      	mov	sp, r7
  40596c:	bd80      	pop	{r7, pc}
  40596e:	bf00      	nop
  405970:	004057b1 	.word	0x004057b1
  405974:	00405c11 	.word	0x00405c11
  405978:	00405989 	.word	0x00405989
  40597c:	004059c9 	.word	0x004059c9
  405980:	0001869f 	.word	0x0001869f
  405984:	000186a0 	.word	0x000186a0

00405988 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
  405988:	b480      	push	{r7}
  40598a:	b083      	sub	sp, #12
  40598c:	af00      	add	r7, sp, #0
  40598e:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
  405990:	687b      	ldr	r3, [r7, #4]
  405992:	681b      	ldr	r3, [r3, #0]
  405994:	f043 0201 	orr.w	r2, r3, #1
  405998:	687b      	ldr	r3, [r7, #4]
  40599a:	601a      	str	r2, [r3, #0]
}
  40599c:	bf00      	nop
  40599e:	370c      	adds	r7, #12
  4059a0:	46bd      	mov	sp, r7
  4059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059a6:	4770      	bx	lr

004059a8 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
  4059a8:	b480      	push	{r7}
  4059aa:	b083      	sub	sp, #12
  4059ac:	af00      	add	r7, sp, #0
  4059ae:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
  4059b0:	687b      	ldr	r3, [r7, #4]
  4059b2:	681b      	ldr	r3, [r3, #0]
  4059b4:	f023 0201 	bic.w	r2, r3, #1
  4059b8:	687b      	ldr	r3, [r7, #4]
  4059ba:	601a      	str	r2, [r3, #0]
}
  4059bc:	bf00      	nop
  4059be:	370c      	adds	r7, #12
  4059c0:	46bd      	mov	sp, r7
  4059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059c6:	4770      	bx	lr

004059c8 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
  4059c8:	b480      	push	{r7}
  4059ca:	b083      	sub	sp, #12
  4059cc:	af00      	add	r7, sp, #0
  4059ce:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
  4059d0:	687b      	ldr	r3, [r7, #4]
  4059d2:	691b      	ldr	r3, [r3, #16]
}
  4059d4:	4618      	mov	r0, r3
  4059d6:	370c      	adds	r7, #12
  4059d8:	46bd      	mov	sp, r7
  4059da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059de:	4770      	bx	lr

004059e0 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
  4059e0:	b480      	push	{r7}
  4059e2:	b085      	sub	sp, #20
  4059e4:	af00      	add	r7, sp, #0
  4059e6:	6078      	str	r0, [r7, #4]
  4059e8:	460b      	mov	r3, r1
  4059ea:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
  4059ec:	687b      	ldr	r3, [r7, #4]
  4059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4059f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  4059f4:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
  4059f6:	78fa      	ldrb	r2, [r7, #3]
  4059f8:	68fb      	ldr	r3, [r7, #12]
  4059fa:	431a      	orrs	r2, r3
  4059fc:	687b      	ldr	r3, [r7, #4]
  4059fe:	625a      	str	r2, [r3, #36]	; 0x24
}
  405a00:	bf00      	nop
  405a02:	3714      	adds	r7, #20
  405a04:	46bd      	mov	sp, r7
  405a06:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a0a:	4770      	bx	lr

00405a0c <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
  405a0c:	b480      	push	{r7}
  405a0e:	b083      	sub	sp, #12
  405a10:	af00      	add	r7, sp, #0
  405a12:	6078      	str	r0, [r7, #4]
  405a14:	460b      	mov	r3, r1
  405a16:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
  405a18:	78fb      	ldrb	r3, [r7, #3]
  405a1a:	687a      	ldr	r2, [r7, #4]
  405a1c:	015b      	lsls	r3, r3, #5
  405a1e:	4413      	add	r3, r2
  405a20:	f503 7304 	add.w	r3, r3, #528	; 0x210
  405a24:	681b      	ldr	r3, [r3, #0]
}
  405a26:	4618      	mov	r0, r3
  405a28:	370c      	adds	r7, #12
  405a2a:	46bd      	mov	sp, r7
  405a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a30:	4770      	bx	lr

00405a32 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
  405a32:	b480      	push	{r7}
  405a34:	b085      	sub	sp, #20
  405a36:	af00      	add	r7, sp, #0
  405a38:	6078      	str	r0, [r7, #4]
  405a3a:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  405a3c:	683b      	ldr	r3, [r7, #0]
  405a3e:	681b      	ldr	r3, [r3, #0]
  405a40:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
  405a42:	683b      	ldr	r3, [r7, #0]
  405a44:	791b      	ldrb	r3, [r3, #4]
  405a46:	2b00      	cmp	r3, #0
  405a48:	d12f      	bne.n	405aaa <can_mailbox_init+0x78>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
  405a4a:	7bfb      	ldrb	r3, [r7, #15]
  405a4c:	687a      	ldr	r2, [r7, #4]
  405a4e:	3310      	adds	r3, #16
  405a50:	015b      	lsls	r3, r3, #5
  405a52:	4413      	add	r3, r2
  405a54:	2200      	movs	r2, #0
  405a56:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
  405a58:	7bfb      	ldrb	r3, [r7, #15]
  405a5a:	687a      	ldr	r2, [r7, #4]
  405a5c:	3310      	adds	r3, #16
  405a5e:	015b      	lsls	r3, r3, #5
  405a60:	4413      	add	r3, r2
  405a62:	3304      	adds	r3, #4
  405a64:	2200      	movs	r2, #0
  405a66:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
  405a68:	7bfb      	ldrb	r3, [r7, #15]
  405a6a:	687a      	ldr	r2, [r7, #4]
  405a6c:	015b      	lsls	r3, r3, #5
  405a6e:	4413      	add	r3, r2
  405a70:	f503 7302 	add.w	r3, r3, #520	; 0x208
  405a74:	2200      	movs	r2, #0
  405a76:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
  405a78:	7bfb      	ldrb	r3, [r7, #15]
  405a7a:	687a      	ldr	r2, [r7, #4]
  405a7c:	015b      	lsls	r3, r3, #5
  405a7e:	4413      	add	r3, r2
  405a80:	f503 7305 	add.w	r3, r3, #532	; 0x214
  405a84:	2200      	movs	r2, #0
  405a86:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
  405a88:	7bfb      	ldrb	r3, [r7, #15]
  405a8a:	687a      	ldr	r2, [r7, #4]
  405a8c:	015b      	lsls	r3, r3, #5
  405a8e:	4413      	add	r3, r2
  405a90:	f503 7306 	add.w	r3, r3, #536	; 0x218
  405a94:	2200      	movs	r2, #0
  405a96:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
  405a98:	7bfb      	ldrb	r3, [r7, #15]
  405a9a:	687a      	ldr	r2, [r7, #4]
  405a9c:	015b      	lsls	r3, r3, #5
  405a9e:	4413      	add	r3, r2
  405aa0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  405aa4:	2200      	movs	r2, #0
  405aa6:	601a      	str	r2, [r3, #0]
		return;
  405aa8:	e050      	b.n	405b4c <can_mailbox_init+0x11a>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  405aaa:	7bfb      	ldrb	r3, [r7, #15]
  405aac:	7bfa      	ldrb	r2, [r7, #15]
  405aae:	6879      	ldr	r1, [r7, #4]
  405ab0:	3210      	adds	r2, #16
  405ab2:	0152      	lsls	r2, r2, #5
  405ab4:	440a      	add	r2, r1
  405ab6:	6812      	ldr	r2, [r2, #0]
  405ab8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
  405abc:	6839      	ldr	r1, [r7, #0]
  405abe:	79c9      	ldrb	r1, [r1, #7]
  405ac0:	0409      	lsls	r1, r1, #16
			~CAN_MMR_PRIOR_Msk) |
  405ac2:	430a      	orrs	r2, r1
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  405ac4:	6879      	ldr	r1, [r7, #4]
  405ac6:	3310      	adds	r3, #16
  405ac8:	015b      	lsls	r3, r3, #5
  405aca:	440b      	add	r3, r1
  405acc:	601a      	str	r2, [r3, #0]

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
  405ace:	683b      	ldr	r3, [r7, #0]
  405ad0:	795b      	ldrb	r3, [r3, #5]
  405ad2:	2b00      	cmp	r3, #0
  405ad4:	d016      	beq.n	405b04 <can_mailbox_init+0xd2>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
  405ad6:	7bfb      	ldrb	r3, [r7, #15]
  405ad8:	683a      	ldr	r2, [r7, #0]
  405ada:	68d2      	ldr	r2, [r2, #12]
  405adc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  405ae0:	6879      	ldr	r1, [r7, #4]
  405ae2:	3310      	adds	r3, #16
  405ae4:	015b      	lsls	r3, r3, #5
  405ae6:	440b      	add	r3, r1
  405ae8:	3304      	adds	r3, #4
  405aea:	601a      	str	r2, [r3, #0]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  405aec:	7bfb      	ldrb	r3, [r7, #15]
  405aee:	683a      	ldr	r2, [r7, #0]
  405af0:	6912      	ldr	r2, [r2, #16]
  405af2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  405af6:	6879      	ldr	r1, [r7, #4]
  405af8:	015b      	lsls	r3, r3, #5
  405afa:	440b      	add	r3, r1
  405afc:	f503 7302 	add.w	r3, r3, #520	; 0x208
  405b00:	601a      	str	r2, [r3, #0]
  405b02:	e011      	b.n	405b28 <can_mailbox_init+0xf6>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
  405b04:	7bfb      	ldrb	r3, [r7, #15]
  405b06:	683a      	ldr	r2, [r7, #0]
  405b08:	68d2      	ldr	r2, [r2, #12]
  405b0a:	6879      	ldr	r1, [r7, #4]
  405b0c:	3310      	adds	r3, #16
  405b0e:	015b      	lsls	r3, r3, #5
  405b10:	440b      	add	r3, r1
  405b12:	3304      	adds	r3, #4
  405b14:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  405b16:	7bfb      	ldrb	r3, [r7, #15]
  405b18:	683a      	ldr	r2, [r7, #0]
  405b1a:	6912      	ldr	r2, [r2, #16]
  405b1c:	6879      	ldr	r1, [r7, #4]
  405b1e:	015b      	lsls	r3, r3, #5
  405b20:	440b      	add	r3, r1
  405b22:	f503 7302 	add.w	r3, r3, #520	; 0x208
  405b26:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  405b28:	7bfb      	ldrb	r3, [r7, #15]
  405b2a:	7bfa      	ldrb	r2, [r7, #15]
  405b2c:	6879      	ldr	r1, [r7, #4]
  405b2e:	3210      	adds	r2, #16
  405b30:	0152      	lsls	r2, r2, #5
  405b32:	440a      	add	r2, r1
  405b34:	6812      	ldr	r2, [r2, #0]
  405b36:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
  405b3a:	6839      	ldr	r1, [r7, #0]
  405b3c:	7909      	ldrb	r1, [r1, #4]
  405b3e:	0609      	lsls	r1, r1, #24
			~CAN_MMR_MOT_Msk) |
  405b40:	430a      	orrs	r2, r1
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  405b42:	6879      	ldr	r1, [r7, #4]
  405b44:	3310      	adds	r3, #16
  405b46:	015b      	lsls	r3, r3, #5
  405b48:	440b      	add	r3, r1
  405b4a:	601a      	str	r2, [r3, #0]
}
  405b4c:	3714      	adds	r7, #20
  405b4e:	46bd      	mov	sp, r7
  405b50:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b54:	4770      	bx	lr
	...

00405b58 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
  405b58:	b580      	push	{r7, lr}
  405b5a:	b084      	sub	sp, #16
  405b5c:	af00      	add	r7, sp, #0
  405b5e:	6078      	str	r0, [r7, #4]
  405b60:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  405b62:	683b      	ldr	r3, [r7, #0]
  405b64:	681b      	ldr	r3, [r3, #0]
  405b66:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
  405b68:	7bfb      	ldrb	r3, [r7, #15]
  405b6a:	4619      	mov	r1, r3
  405b6c:	6878      	ldr	r0, [r7, #4]
  405b6e:	4b27      	ldr	r3, [pc, #156]	; (405c0c <can_mailbox_write+0xb4>)
  405b70:	4798      	blx	r3
  405b72:	4602      	mov	r2, r0
  405b74:	683b      	ldr	r3, [r7, #0]
  405b76:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
  405b78:	683b      	ldr	r3, [r7, #0]
  405b7a:	689b      	ldr	r3, [r3, #8]
  405b7c:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
  405b7e:	68bb      	ldr	r3, [r7, #8]
  405b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  405b84:	2b00      	cmp	r3, #0
  405b86:	d101      	bne.n	405b8c <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
  405b88:	2301      	movs	r3, #1
  405b8a:	e03b      	b.n	405c04 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
  405b8c:	683b      	ldr	r3, [r7, #0]
  405b8e:	795b      	ldrb	r3, [r3, #5]
  405b90:	2b00      	cmp	r3, #0
  405b92:	d00b      	beq.n	405bac <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  405b94:	7bfb      	ldrb	r3, [r7, #15]
  405b96:	683a      	ldr	r2, [r7, #0]
  405b98:	6912      	ldr	r2, [r2, #16]
  405b9a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  405b9e:	6879      	ldr	r1, [r7, #4]
  405ba0:	015b      	lsls	r3, r3, #5
  405ba2:	440b      	add	r3, r1
  405ba4:	f503 7302 	add.w	r3, r3, #520	; 0x208
  405ba8:	601a      	str	r2, [r3, #0]
  405baa:	e008      	b.n	405bbe <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  405bac:	7bfb      	ldrb	r3, [r7, #15]
  405bae:	683a      	ldr	r2, [r7, #0]
  405bb0:	6912      	ldr	r2, [r2, #16]
  405bb2:	6879      	ldr	r1, [r7, #4]
  405bb4:	015b      	lsls	r3, r3, #5
  405bb6:	440b      	add	r3, r1
  405bb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
  405bbc:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
  405bbe:	7bfb      	ldrb	r3, [r7, #15]
  405bc0:	683a      	ldr	r2, [r7, #0]
  405bc2:	6992      	ldr	r2, [r2, #24]
  405bc4:	6879      	ldr	r1, [r7, #4]
  405bc6:	015b      	lsls	r3, r3, #5
  405bc8:	440b      	add	r3, r1
  405bca:	f503 7305 	add.w	r3, r3, #532	; 0x214
  405bce:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {
  405bd0:	683b      	ldr	r3, [r7, #0]
  405bd2:	799b      	ldrb	r3, [r3, #6]
  405bd4:	2b04      	cmp	r3, #4
  405bd6:	d908      	bls.n	405bea <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
  405bd8:	7bfb      	ldrb	r3, [r7, #15]
  405bda:	683a      	ldr	r2, [r7, #0]
  405bdc:	69d2      	ldr	r2, [r2, #28]
  405bde:	6879      	ldr	r1, [r7, #4]
  405be0:	015b      	lsls	r3, r3, #5
  405be2:	440b      	add	r3, r1
  405be4:	f503 7306 	add.w	r3, r3, #536	; 0x218
  405be8:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
  405bea:	7bfb      	ldrb	r3, [r7, #15]
  405bec:	683a      	ldr	r2, [r7, #0]
  405bee:	7992      	ldrb	r2, [r2, #6]
  405bf0:	0412      	lsls	r2, r2, #16
  405bf2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  405bf6:	6879      	ldr	r1, [r7, #4]
  405bf8:	015b      	lsls	r3, r3, #5
  405bfa:	440b      	add	r3, r1
  405bfc:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  405c00:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
  405c02:	2300      	movs	r3, #0
}
  405c04:	4618      	mov	r0, r3
  405c06:	3710      	adds	r7, #16
  405c08:	46bd      	mov	sp, r7
  405c0a:	bd80      	pop	{r7, pc}
  405c0c:	00405a0d 	.word	0x00405a0d

00405c10 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
  405c10:	b580      	push	{r7, lr}
  405c12:	b08c      	sub	sp, #48	; 0x30
  405c14:	af00      	add	r7, sp, #0
  405c16:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
  405c18:	2300      	movs	r3, #0
  405c1a:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  405c1c:	2300      	movs	r3, #0
  405c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  405c22:	e00d      	b.n	405c40 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
  405c24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405c28:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
  405c2a:	f107 030c 	add.w	r3, r7, #12
  405c2e:	4619      	mov	r1, r3
  405c30:	6878      	ldr	r0, [r7, #4]
  405c32:	4b07      	ldr	r3, [pc, #28]	; (405c50 <can_reset_all_mailbox+0x40>)
  405c34:	4798      	blx	r3
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  405c36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405c3a:	3301      	adds	r3, #1
  405c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  405c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  405c44:	2b07      	cmp	r3, #7
  405c46:	d9ed      	bls.n	405c24 <can_reset_all_mailbox+0x14>
	}
}
  405c48:	bf00      	nop
  405c4a:	3730      	adds	r7, #48	; 0x30
  405c4c:	46bd      	mov	sp, r7
  405c4e:	bd80      	pop	{r7, pc}
  405c50:	00405a33 	.word	0x00405a33

00405c54 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  405c54:	b480      	push	{r7}
  405c56:	b085      	sub	sp, #20
  405c58:	af00      	add	r7, sp, #0
  405c5a:	60f8      	str	r0, [r7, #12]
  405c5c:	60b9      	str	r1, [r7, #8]
  405c5e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  405c60:	687b      	ldr	r3, [r7, #4]
  405c62:	2b00      	cmp	r3, #0
  405c64:	d003      	beq.n	405c6e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  405c66:	68fb      	ldr	r3, [r7, #12]
  405c68:	68ba      	ldr	r2, [r7, #8]
  405c6a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  405c6c:	e002      	b.n	405c74 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  405c6e:	68fb      	ldr	r3, [r7, #12]
  405c70:	68ba      	ldr	r2, [r7, #8]
  405c72:	661a      	str	r2, [r3, #96]	; 0x60
}
  405c74:	bf00      	nop
  405c76:	3714      	adds	r7, #20
  405c78:	46bd      	mov	sp, r7
  405c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c7e:	4770      	bx	lr

00405c80 <pio_set_debounce_filter>:
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 * \param ul_cut_off Cuts off frequency for debouncing filter.
 */
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
  405c80:	b480      	push	{r7}
  405c82:	b085      	sub	sp, #20
  405c84:	af00      	add	r7, sp, #0
  405c86:	60f8      	str	r0, [r7, #12]
  405c88:	60b9      	str	r1, [r7, #8]
  405c8a:	607a      	str	r2, [r7, #4]
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  405c8c:	68fb      	ldr	r3, [r7, #12]
  405c8e:	68ba      	ldr	r2, [r7, #8]
  405c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  405c94:	687b      	ldr	r3, [r7, #4]
  405c96:	005b      	lsls	r3, r3, #1
  405c98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405c9c:	fbb2 f3f3 	udiv	r3, r2, r3
  405ca0:	3b01      	subs	r3, #1
  405ca2:	f3c3 020d 	ubfx	r2, r3, #0, #14
  405ca6:	68fb      	ldr	r3, [r7, #12]
  405ca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			(2 * (ul_cut_off))) - 1);
}
  405cac:	bf00      	nop
  405cae:	3714      	adds	r7, #20
  405cb0:	46bd      	mov	sp, r7
  405cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cb6:	4770      	bx	lr

00405cb8 <pio_get>:
 * \retval 1 at least one PIO currently has a high level.
 * \retval 0 all PIOs have a low level.
 */
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  405cb8:	b480      	push	{r7}
  405cba:	b087      	sub	sp, #28
  405cbc:	af00      	add	r7, sp, #0
  405cbe:	60f8      	str	r0, [r7, #12]
  405cc0:	60b9      	str	r1, [r7, #8]
  405cc2:	607a      	str	r2, [r7, #4]
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  405cc4:	68bb      	ldr	r3, [r7, #8]
  405cc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  405cca:	d003      	beq.n	405cd4 <pio_get+0x1c>
  405ccc:	68bb      	ldr	r3, [r7, #8]
  405cce:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  405cd2:	d103      	bne.n	405cdc <pio_get+0x24>
		ul_reg = p_pio->PIO_ODSR;
  405cd4:	68fb      	ldr	r3, [r7, #12]
  405cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405cd8:	617b      	str	r3, [r7, #20]
  405cda:	e002      	b.n	405ce2 <pio_get+0x2a>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  405cdc:	68fb      	ldr	r3, [r7, #12]
  405cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405ce0:	617b      	str	r3, [r7, #20]
	}

	if ((ul_reg & ul_mask) == 0) {
  405ce2:	697a      	ldr	r2, [r7, #20]
  405ce4:	687b      	ldr	r3, [r7, #4]
  405ce6:	4013      	ands	r3, r2
  405ce8:	2b00      	cmp	r3, #0
  405cea:	d101      	bne.n	405cf0 <pio_get+0x38>
		return 0;
  405cec:	2300      	movs	r3, #0
  405cee:	e000      	b.n	405cf2 <pio_get+0x3a>
	} else {
		return 1;
  405cf0:	2301      	movs	r3, #1
	}
}
  405cf2:	4618      	mov	r0, r3
  405cf4:	371c      	adds	r7, #28
  405cf6:	46bd      	mov	sp, r7
  405cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cfc:	4770      	bx	lr

00405cfe <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  405cfe:	b480      	push	{r7}
  405d00:	b087      	sub	sp, #28
  405d02:	af00      	add	r7, sp, #0
  405d04:	60f8      	str	r0, [r7, #12]
  405d06:	60b9      	str	r1, [r7, #8]
  405d08:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  405d0a:	68fb      	ldr	r3, [r7, #12]
  405d0c:	687a      	ldr	r2, [r7, #4]
  405d0e:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  405d10:	68bb      	ldr	r3, [r7, #8]
  405d12:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405d16:	d04a      	beq.n	405dae <pio_set_peripheral+0xb0>
  405d18:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405d1c:	d808      	bhi.n	405d30 <pio_set_peripheral+0x32>
  405d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  405d22:	d016      	beq.n	405d52 <pio_set_peripheral+0x54>
  405d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  405d28:	d02c      	beq.n	405d84 <pio_set_peripheral+0x86>
  405d2a:	2b00      	cmp	r3, #0
  405d2c:	d069      	beq.n	405e02 <pio_set_peripheral+0x104>
  405d2e:	e064      	b.n	405dfa <pio_set_peripheral+0xfc>
  405d30:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  405d34:	d065      	beq.n	405e02 <pio_set_peripheral+0x104>
  405d36:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  405d3a:	d803      	bhi.n	405d44 <pio_set_peripheral+0x46>
  405d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  405d40:	d04a      	beq.n	405dd8 <pio_set_peripheral+0xda>
  405d42:	e05a      	b.n	405dfa <pio_set_peripheral+0xfc>
  405d44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  405d48:	d05b      	beq.n	405e02 <pio_set_peripheral+0x104>
  405d4a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  405d4e:	d058      	beq.n	405e02 <pio_set_peripheral+0x104>
  405d50:	e053      	b.n	405dfa <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405d52:	68fb      	ldr	r3, [r7, #12]
  405d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405d56:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405d58:	68fb      	ldr	r3, [r7, #12]
  405d5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405d5c:	687b      	ldr	r3, [r7, #4]
  405d5e:	43d9      	mvns	r1, r3
  405d60:	697b      	ldr	r3, [r7, #20]
  405d62:	400b      	ands	r3, r1
  405d64:	401a      	ands	r2, r3
  405d66:	68fb      	ldr	r3, [r7, #12]
  405d68:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405d6a:	68fb      	ldr	r3, [r7, #12]
  405d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405d6e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405d70:	68fb      	ldr	r3, [r7, #12]
  405d72:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405d74:	687b      	ldr	r3, [r7, #4]
  405d76:	43d9      	mvns	r1, r3
  405d78:	697b      	ldr	r3, [r7, #20]
  405d7a:	400b      	ands	r3, r1
  405d7c:	401a      	ands	r2, r3
  405d7e:	68fb      	ldr	r3, [r7, #12]
  405d80:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405d82:	e03a      	b.n	405dfa <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405d84:	68fb      	ldr	r3, [r7, #12]
  405d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405d88:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  405d8a:	687a      	ldr	r2, [r7, #4]
  405d8c:	697b      	ldr	r3, [r7, #20]
  405d8e:	431a      	orrs	r2, r3
  405d90:	68fb      	ldr	r3, [r7, #12]
  405d92:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405d94:	68fb      	ldr	r3, [r7, #12]
  405d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405d98:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405d9a:	68fb      	ldr	r3, [r7, #12]
  405d9c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405d9e:	687b      	ldr	r3, [r7, #4]
  405da0:	43d9      	mvns	r1, r3
  405da2:	697b      	ldr	r3, [r7, #20]
  405da4:	400b      	ands	r3, r1
  405da6:	401a      	ands	r2, r3
  405da8:	68fb      	ldr	r3, [r7, #12]
  405daa:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405dac:	e025      	b.n	405dfa <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405dae:	68fb      	ldr	r3, [r7, #12]
  405db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405db2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  405db4:	68fb      	ldr	r3, [r7, #12]
  405db6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405db8:	687b      	ldr	r3, [r7, #4]
  405dba:	43d9      	mvns	r1, r3
  405dbc:	697b      	ldr	r3, [r7, #20]
  405dbe:	400b      	ands	r3, r1
  405dc0:	401a      	ands	r2, r3
  405dc2:	68fb      	ldr	r3, [r7, #12]
  405dc4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405dc6:	68fb      	ldr	r3, [r7, #12]
  405dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405dca:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  405dcc:	687a      	ldr	r2, [r7, #4]
  405dce:	697b      	ldr	r3, [r7, #20]
  405dd0:	431a      	orrs	r2, r3
  405dd2:	68fb      	ldr	r3, [r7, #12]
  405dd4:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405dd6:	e010      	b.n	405dfa <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405dd8:	68fb      	ldr	r3, [r7, #12]
  405dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405ddc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  405dde:	687a      	ldr	r2, [r7, #4]
  405de0:	697b      	ldr	r3, [r7, #20]
  405de2:	431a      	orrs	r2, r3
  405de4:	68fb      	ldr	r3, [r7, #12]
  405de6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405de8:	68fb      	ldr	r3, [r7, #12]
  405dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405dec:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  405dee:	687a      	ldr	r2, [r7, #4]
  405df0:	697b      	ldr	r3, [r7, #20]
  405df2:	431a      	orrs	r2, r3
  405df4:	68fb      	ldr	r3, [r7, #12]
  405df6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405df8:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  405dfa:	68fb      	ldr	r3, [r7, #12]
  405dfc:	687a      	ldr	r2, [r7, #4]
  405dfe:	605a      	str	r2, [r3, #4]
  405e00:	e000      	b.n	405e04 <pio_set_peripheral+0x106>
		return;
  405e02:	bf00      	nop
}
  405e04:	371c      	adds	r7, #28
  405e06:	46bd      	mov	sp, r7
  405e08:	f85d 7b04 	ldr.w	r7, [sp], #4
  405e0c:	4770      	bx	lr
	...

00405e10 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  405e10:	b580      	push	{r7, lr}
  405e12:	b084      	sub	sp, #16
  405e14:	af00      	add	r7, sp, #0
  405e16:	60f8      	str	r0, [r7, #12]
  405e18:	60b9      	str	r1, [r7, #8]
  405e1a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  405e1c:	68b9      	ldr	r1, [r7, #8]
  405e1e:	68f8      	ldr	r0, [r7, #12]
  405e20:	4b19      	ldr	r3, [pc, #100]	; (405e88 <pio_set_input+0x78>)
  405e22:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  405e24:	687b      	ldr	r3, [r7, #4]
  405e26:	f003 0301 	and.w	r3, r3, #1
  405e2a:	461a      	mov	r2, r3
  405e2c:	68b9      	ldr	r1, [r7, #8]
  405e2e:	68f8      	ldr	r0, [r7, #12]
  405e30:	4b16      	ldr	r3, [pc, #88]	; (405e8c <pio_set_input+0x7c>)
  405e32:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  405e34:	687b      	ldr	r3, [r7, #4]
  405e36:	f003 030a 	and.w	r3, r3, #10
  405e3a:	2b00      	cmp	r3, #0
  405e3c:	d003      	beq.n	405e46 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  405e3e:	68fb      	ldr	r3, [r7, #12]
  405e40:	68ba      	ldr	r2, [r7, #8]
  405e42:	621a      	str	r2, [r3, #32]
  405e44:	e002      	b.n	405e4c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  405e46:	68fb      	ldr	r3, [r7, #12]
  405e48:	68ba      	ldr	r2, [r7, #8]
  405e4a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  405e4c:	687b      	ldr	r3, [r7, #4]
  405e4e:	f003 0302 	and.w	r3, r3, #2
  405e52:	2b00      	cmp	r3, #0
  405e54:	d004      	beq.n	405e60 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  405e56:	68fb      	ldr	r3, [r7, #12]
  405e58:	68ba      	ldr	r2, [r7, #8]
  405e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  405e5e:	e008      	b.n	405e72 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  405e60:	687b      	ldr	r3, [r7, #4]
  405e62:	f003 0308 	and.w	r3, r3, #8
  405e66:	2b00      	cmp	r3, #0
  405e68:	d003      	beq.n	405e72 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  405e6a:	68fb      	ldr	r3, [r7, #12]
  405e6c:	68ba      	ldr	r2, [r7, #8]
  405e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  405e72:	68fb      	ldr	r3, [r7, #12]
  405e74:	68ba      	ldr	r2, [r7, #8]
  405e76:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  405e78:	68fb      	ldr	r3, [r7, #12]
  405e7a:	68ba      	ldr	r2, [r7, #8]
  405e7c:	601a      	str	r2, [r3, #0]
}
  405e7e:	bf00      	nop
  405e80:	3710      	adds	r7, #16
  405e82:	46bd      	mov	sp, r7
  405e84:	bd80      	pop	{r7, pc}
  405e86:	bf00      	nop
  405e88:	00405f19 	.word	0x00405f19
  405e8c:	00405c55 	.word	0x00405c55

00405e90 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  405e90:	b480      	push	{r7}
  405e92:	b085      	sub	sp, #20
  405e94:	af00      	add	r7, sp, #0
  405e96:	60f8      	str	r0, [r7, #12]
  405e98:	60b9      	str	r1, [r7, #8]
  405e9a:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  405e9c:	687b      	ldr	r3, [r7, #4]
  405e9e:	f003 0310 	and.w	r3, r3, #16
  405ea2:	2b00      	cmp	r3, #0
  405ea4:	d020      	beq.n	405ee8 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  405ea6:	68fb      	ldr	r3, [r7, #12]
  405ea8:	68ba      	ldr	r2, [r7, #8]
  405eaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  405eae:	687b      	ldr	r3, [r7, #4]
  405eb0:	f003 0320 	and.w	r3, r3, #32
  405eb4:	2b00      	cmp	r3, #0
  405eb6:	d004      	beq.n	405ec2 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  405eb8:	68fb      	ldr	r3, [r7, #12]
  405eba:	68ba      	ldr	r2, [r7, #8]
  405ebc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  405ec0:	e003      	b.n	405eca <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  405ec2:	68fb      	ldr	r3, [r7, #12]
  405ec4:	68ba      	ldr	r2, [r7, #8]
  405ec6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  405eca:	687b      	ldr	r3, [r7, #4]
  405ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405ed0:	2b00      	cmp	r3, #0
  405ed2:	d004      	beq.n	405ede <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  405ed4:	68fb      	ldr	r3, [r7, #12]
  405ed6:	68ba      	ldr	r2, [r7, #8]
  405ed8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  405edc:	e008      	b.n	405ef0 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  405ede:	68fb      	ldr	r3, [r7, #12]
  405ee0:	68ba      	ldr	r2, [r7, #8]
  405ee2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  405ee6:	e003      	b.n	405ef0 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  405ee8:	68fb      	ldr	r3, [r7, #12]
  405eea:	68ba      	ldr	r2, [r7, #8]
  405eec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  405ef0:	bf00      	nop
  405ef2:	3714      	adds	r7, #20
  405ef4:	46bd      	mov	sp, r7
  405ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
  405efa:	4770      	bx	lr

00405efc <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  405efc:	b480      	push	{r7}
  405efe:	b083      	sub	sp, #12
  405f00:	af00      	add	r7, sp, #0
  405f02:	6078      	str	r0, [r7, #4]
  405f04:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  405f06:	687b      	ldr	r3, [r7, #4]
  405f08:	683a      	ldr	r2, [r7, #0]
  405f0a:	641a      	str	r2, [r3, #64]	; 0x40
}
  405f0c:	bf00      	nop
  405f0e:	370c      	adds	r7, #12
  405f10:	46bd      	mov	sp, r7
  405f12:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f16:	4770      	bx	lr

00405f18 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  405f18:	b480      	push	{r7}
  405f1a:	b083      	sub	sp, #12
  405f1c:	af00      	add	r7, sp, #0
  405f1e:	6078      	str	r0, [r7, #4]
  405f20:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  405f22:	687b      	ldr	r3, [r7, #4]
  405f24:	683a      	ldr	r2, [r7, #0]
  405f26:	645a      	str	r2, [r3, #68]	; 0x44
}
  405f28:	bf00      	nop
  405f2a:	370c      	adds	r7, #12
  405f2c:	46bd      	mov	sp, r7
  405f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f32:	4770      	bx	lr

00405f34 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  405f34:	b480      	push	{r7}
  405f36:	b083      	sub	sp, #12
  405f38:	af00      	add	r7, sp, #0
  405f3a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  405f3c:	687b      	ldr	r3, [r7, #4]
  405f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  405f40:	4618      	mov	r0, r3
  405f42:	370c      	adds	r7, #12
  405f44:	46bd      	mov	sp, r7
  405f46:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f4a:	4770      	bx	lr

00405f4c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  405f4c:	b480      	push	{r7}
  405f4e:	b083      	sub	sp, #12
  405f50:	af00      	add	r7, sp, #0
  405f52:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  405f54:	687b      	ldr	r3, [r7, #4]
  405f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  405f58:	4618      	mov	r0, r3
  405f5a:	370c      	adds	r7, #12
  405f5c:	46bd      	mov	sp, r7
  405f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405f62:	4770      	bx	lr

00405f64 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  405f64:	b480      	push	{r7}
  405f66:	b085      	sub	sp, #20
  405f68:	af00      	add	r7, sp, #0
  405f6a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  405f6c:	491d      	ldr	r1, [pc, #116]	; (405fe4 <pmc_switch_mck_to_pllack+0x80>)
  405f6e:	4b1d      	ldr	r3, [pc, #116]	; (405fe4 <pmc_switch_mck_to_pllack+0x80>)
  405f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405f72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  405f76:	687b      	ldr	r3, [r7, #4]
  405f78:	4313      	orrs	r3, r2
  405f7a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405f7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405f80:	60fb      	str	r3, [r7, #12]
  405f82:	e007      	b.n	405f94 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405f84:	68fb      	ldr	r3, [r7, #12]
  405f86:	2b00      	cmp	r3, #0
  405f88:	d101      	bne.n	405f8e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  405f8a:	2301      	movs	r3, #1
  405f8c:	e023      	b.n	405fd6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  405f8e:	68fb      	ldr	r3, [r7, #12]
  405f90:	3b01      	subs	r3, #1
  405f92:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405f94:	4b13      	ldr	r3, [pc, #76]	; (405fe4 <pmc_switch_mck_to_pllack+0x80>)
  405f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405f98:	f003 0308 	and.w	r3, r3, #8
  405f9c:	2b00      	cmp	r3, #0
  405f9e:	d0f1      	beq.n	405f84 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  405fa0:	4a10      	ldr	r2, [pc, #64]	; (405fe4 <pmc_switch_mck_to_pllack+0x80>)
  405fa2:	4b10      	ldr	r3, [pc, #64]	; (405fe4 <pmc_switch_mck_to_pllack+0x80>)
  405fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405fa6:	f023 0303 	bic.w	r3, r3, #3
  405faa:	f043 0302 	orr.w	r3, r3, #2
  405fae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405fb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405fb4:	60fb      	str	r3, [r7, #12]
  405fb6:	e007      	b.n	405fc8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405fb8:	68fb      	ldr	r3, [r7, #12]
  405fba:	2b00      	cmp	r3, #0
  405fbc:	d101      	bne.n	405fc2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  405fbe:	2301      	movs	r3, #1
  405fc0:	e009      	b.n	405fd6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  405fc2:	68fb      	ldr	r3, [r7, #12]
  405fc4:	3b01      	subs	r3, #1
  405fc6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405fc8:	4b06      	ldr	r3, [pc, #24]	; (405fe4 <pmc_switch_mck_to_pllack+0x80>)
  405fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405fcc:	f003 0308 	and.w	r3, r3, #8
  405fd0:	2b00      	cmp	r3, #0
  405fd2:	d0f1      	beq.n	405fb8 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  405fd4:	2300      	movs	r3, #0
}
  405fd6:	4618      	mov	r0, r3
  405fd8:	3714      	adds	r7, #20
  405fda:	46bd      	mov	sp, r7
  405fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fe0:	4770      	bx	lr
  405fe2:	bf00      	nop
  405fe4:	400e0400 	.word	0x400e0400

00405fe8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  405fe8:	b480      	push	{r7}
  405fea:	b083      	sub	sp, #12
  405fec:	af00      	add	r7, sp, #0
  405fee:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  405ff0:	687b      	ldr	r3, [r7, #4]
  405ff2:	2b01      	cmp	r3, #1
  405ff4:	d107      	bne.n	406006 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  405ff6:	4a08      	ldr	r2, [pc, #32]	; (406018 <pmc_switch_sclk_to_32kxtal+0x30>)
  405ff8:	4b07      	ldr	r3, [pc, #28]	; (406018 <pmc_switch_sclk_to_32kxtal+0x30>)
  405ffa:	689b      	ldr	r3, [r3, #8]
  405ffc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  406000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406004:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  406006:	4b04      	ldr	r3, [pc, #16]	; (406018 <pmc_switch_sclk_to_32kxtal+0x30>)
  406008:	4a04      	ldr	r2, [pc, #16]	; (40601c <pmc_switch_sclk_to_32kxtal+0x34>)
  40600a:	601a      	str	r2, [r3, #0]
}
  40600c:	bf00      	nop
  40600e:	370c      	adds	r7, #12
  406010:	46bd      	mov	sp, r7
  406012:	f85d 7b04 	ldr.w	r7, [sp], #4
  406016:	4770      	bx	lr
  406018:	400e1810 	.word	0x400e1810
  40601c:	a5000008 	.word	0xa5000008

00406020 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  406020:	b480      	push	{r7}
  406022:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  406024:	4b09      	ldr	r3, [pc, #36]	; (40604c <pmc_osc_is_ready_32kxtal+0x2c>)
  406026:	695b      	ldr	r3, [r3, #20]
  406028:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40602c:	2b00      	cmp	r3, #0
  40602e:	d007      	beq.n	406040 <pmc_osc_is_ready_32kxtal+0x20>
  406030:	4b07      	ldr	r3, [pc, #28]	; (406050 <pmc_osc_is_ready_32kxtal+0x30>)
  406032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406034:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406038:	2b00      	cmp	r3, #0
  40603a:	d001      	beq.n	406040 <pmc_osc_is_ready_32kxtal+0x20>
  40603c:	2301      	movs	r3, #1
  40603e:	e000      	b.n	406042 <pmc_osc_is_ready_32kxtal+0x22>
  406040:	2300      	movs	r3, #0
}
  406042:	4618      	mov	r0, r3
  406044:	46bd      	mov	sp, r7
  406046:	f85d 7b04 	ldr.w	r7, [sp], #4
  40604a:	4770      	bx	lr
  40604c:	400e1810 	.word	0x400e1810
  406050:	400e0400 	.word	0x400e0400

00406054 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  406054:	b480      	push	{r7}
  406056:	b083      	sub	sp, #12
  406058:	af00      	add	r7, sp, #0
  40605a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40605c:	4a18      	ldr	r2, [pc, #96]	; (4060c0 <pmc_switch_mainck_to_fastrc+0x6c>)
  40605e:	4b18      	ldr	r3, [pc, #96]	; (4060c0 <pmc_switch_mainck_to_fastrc+0x6c>)
  406060:	6a1b      	ldr	r3, [r3, #32]
  406062:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  406066:	f043 0308 	orr.w	r3, r3, #8
  40606a:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40606c:	bf00      	nop
  40606e:	4b14      	ldr	r3, [pc, #80]	; (4060c0 <pmc_switch_mainck_to_fastrc+0x6c>)
  406070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  406076:	2b00      	cmp	r3, #0
  406078:	d0f9      	beq.n	40606e <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40607a:	4911      	ldr	r1, [pc, #68]	; (4060c0 <pmc_switch_mainck_to_fastrc+0x6c>)
  40607c:	4b10      	ldr	r3, [pc, #64]	; (4060c0 <pmc_switch_mainck_to_fastrc+0x6c>)
  40607e:	6a1b      	ldr	r3, [r3, #32]
  406080:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  406084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  406088:	687a      	ldr	r2, [r7, #4]
  40608a:	4313      	orrs	r3, r2
  40608c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  406090:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  406092:	bf00      	nop
  406094:	4b0a      	ldr	r3, [pc, #40]	; (4060c0 <pmc_switch_mainck_to_fastrc+0x6c>)
  406096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40609c:	2b00      	cmp	r3, #0
  40609e:	d0f9      	beq.n	406094 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4060a0:	4a07      	ldr	r2, [pc, #28]	; (4060c0 <pmc_switch_mainck_to_fastrc+0x6c>)
  4060a2:	4b07      	ldr	r3, [pc, #28]	; (4060c0 <pmc_switch_mainck_to_fastrc+0x6c>)
  4060a4:	6a1b      	ldr	r3, [r3, #32]
  4060a6:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4060aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4060ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4060b2:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4060b4:	bf00      	nop
  4060b6:	370c      	adds	r7, #12
  4060b8:	46bd      	mov	sp, r7
  4060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4060be:	4770      	bx	lr
  4060c0:	400e0400 	.word	0x400e0400

004060c4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4060c4:	b480      	push	{r7}
  4060c6:	b083      	sub	sp, #12
  4060c8:	af00      	add	r7, sp, #0
  4060ca:	6078      	str	r0, [r7, #4]
  4060cc:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4060ce:	687b      	ldr	r3, [r7, #4]
  4060d0:	2b00      	cmp	r3, #0
  4060d2:	d008      	beq.n	4060e6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4060d4:	4916      	ldr	r1, [pc, #88]	; (406130 <pmc_switch_mainck_to_xtal+0x6c>)
  4060d6:	4b16      	ldr	r3, [pc, #88]	; (406130 <pmc_switch_mainck_to_xtal+0x6c>)
  4060d8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4060da:	4a16      	ldr	r2, [pc, #88]	; (406134 <pmc_switch_mainck_to_xtal+0x70>)
  4060dc:	401a      	ands	r2, r3
  4060de:	4b16      	ldr	r3, [pc, #88]	; (406138 <pmc_switch_mainck_to_xtal+0x74>)
  4060e0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4060e2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4060e4:	e01e      	b.n	406124 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4060e6:	4912      	ldr	r1, [pc, #72]	; (406130 <pmc_switch_mainck_to_xtal+0x6c>)
  4060e8:	4b11      	ldr	r3, [pc, #68]	; (406130 <pmc_switch_mainck_to_xtal+0x6c>)
  4060ea:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4060ec:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4060f0:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4060f4:	683a      	ldr	r2, [r7, #0]
  4060f6:	0212      	lsls	r2, r2, #8
  4060f8:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4060fa:	4313      	orrs	r3, r2
  4060fc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  406100:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  406104:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  406106:	bf00      	nop
  406108:	4b09      	ldr	r3, [pc, #36]	; (406130 <pmc_switch_mainck_to_xtal+0x6c>)
  40610a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40610c:	f003 0301 	and.w	r3, r3, #1
  406110:	2b00      	cmp	r3, #0
  406112:	d0f9      	beq.n	406108 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  406114:	4a06      	ldr	r2, [pc, #24]	; (406130 <pmc_switch_mainck_to_xtal+0x6c>)
  406116:	4b06      	ldr	r3, [pc, #24]	; (406130 <pmc_switch_mainck_to_xtal+0x6c>)
  406118:	6a1b      	ldr	r3, [r3, #32]
  40611a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40611e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  406122:	6213      	str	r3, [r2, #32]
}
  406124:	bf00      	nop
  406126:	370c      	adds	r7, #12
  406128:	46bd      	mov	sp, r7
  40612a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40612e:	4770      	bx	lr
  406130:	400e0400 	.word	0x400e0400
  406134:	fec8fffc 	.word	0xfec8fffc
  406138:	01370002 	.word	0x01370002

0040613c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40613c:	b480      	push	{r7}
  40613e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  406140:	4b04      	ldr	r3, [pc, #16]	; (406154 <pmc_osc_is_ready_mainck+0x18>)
  406142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  406148:	4618      	mov	r0, r3
  40614a:	46bd      	mov	sp, r7
  40614c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406150:	4770      	bx	lr
  406152:	bf00      	nop
  406154:	400e0400 	.word	0x400e0400

00406158 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  406158:	b480      	push	{r7}
  40615a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40615c:	4b04      	ldr	r3, [pc, #16]	; (406170 <pmc_disable_pllack+0x18>)
  40615e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  406162:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  406164:	bf00      	nop
  406166:	46bd      	mov	sp, r7
  406168:	f85d 7b04 	ldr.w	r7, [sp], #4
  40616c:	4770      	bx	lr
  40616e:	bf00      	nop
  406170:	400e0400 	.word	0x400e0400

00406174 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  406174:	b480      	push	{r7}
  406176:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  406178:	4b04      	ldr	r3, [pc, #16]	; (40618c <pmc_is_locked_pllack+0x18>)
  40617a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40617c:	f003 0302 	and.w	r3, r3, #2
}
  406180:	4618      	mov	r0, r3
  406182:	46bd      	mov	sp, r7
  406184:	f85d 7b04 	ldr.w	r7, [sp], #4
  406188:	4770      	bx	lr
  40618a:	bf00      	nop
  40618c:	400e0400 	.word	0x400e0400

00406190 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  406190:	b480      	push	{r7}
  406192:	b083      	sub	sp, #12
  406194:	af00      	add	r7, sp, #0
  406196:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  406198:	687b      	ldr	r3, [r7, #4]
  40619a:	2b2f      	cmp	r3, #47	; 0x2f
  40619c:	d901      	bls.n	4061a2 <pmc_enable_periph_clk+0x12>
		return 1;
  40619e:	2301      	movs	r3, #1
  4061a0:	e02f      	b.n	406202 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4061a2:	687b      	ldr	r3, [r7, #4]
  4061a4:	2b1f      	cmp	r3, #31
  4061a6:	d813      	bhi.n	4061d0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4061a8:	4b19      	ldr	r3, [pc, #100]	; (406210 <pmc_enable_periph_clk+0x80>)
  4061aa:	699a      	ldr	r2, [r3, #24]
  4061ac:	2101      	movs	r1, #1
  4061ae:	687b      	ldr	r3, [r7, #4]
  4061b0:	fa01 f303 	lsl.w	r3, r1, r3
  4061b4:	401a      	ands	r2, r3
  4061b6:	2101      	movs	r1, #1
  4061b8:	687b      	ldr	r3, [r7, #4]
  4061ba:	fa01 f303 	lsl.w	r3, r1, r3
  4061be:	429a      	cmp	r2, r3
  4061c0:	d01e      	beq.n	406200 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4061c2:	4a13      	ldr	r2, [pc, #76]	; (406210 <pmc_enable_periph_clk+0x80>)
  4061c4:	2101      	movs	r1, #1
  4061c6:	687b      	ldr	r3, [r7, #4]
  4061c8:	fa01 f303 	lsl.w	r3, r1, r3
  4061cc:	6113      	str	r3, [r2, #16]
  4061ce:	e017      	b.n	406200 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4061d0:	687b      	ldr	r3, [r7, #4]
  4061d2:	3b20      	subs	r3, #32
  4061d4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4061d6:	4b0e      	ldr	r3, [pc, #56]	; (406210 <pmc_enable_periph_clk+0x80>)
  4061d8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4061dc:	2101      	movs	r1, #1
  4061de:	687b      	ldr	r3, [r7, #4]
  4061e0:	fa01 f303 	lsl.w	r3, r1, r3
  4061e4:	401a      	ands	r2, r3
  4061e6:	2101      	movs	r1, #1
  4061e8:	687b      	ldr	r3, [r7, #4]
  4061ea:	fa01 f303 	lsl.w	r3, r1, r3
  4061ee:	429a      	cmp	r2, r3
  4061f0:	d006      	beq.n	406200 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4061f2:	4a07      	ldr	r2, [pc, #28]	; (406210 <pmc_enable_periph_clk+0x80>)
  4061f4:	2101      	movs	r1, #1
  4061f6:	687b      	ldr	r3, [r7, #4]
  4061f8:	fa01 f303 	lsl.w	r3, r1, r3
  4061fc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  406200:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  406202:	4618      	mov	r0, r3
  406204:	370c      	adds	r7, #12
  406206:	46bd      	mov	sp, r7
  406208:	f85d 7b04 	ldr.w	r7, [sp], #4
  40620c:	4770      	bx	lr
  40620e:	bf00      	nop
  406210:	400e0400 	.word	0x400e0400

00406214 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  406214:	b480      	push	{r7}
  406216:	b083      	sub	sp, #12
  406218:	af00      	add	r7, sp, #0
  40621a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  40621c:	687b      	ldr	r3, [r7, #4]
  40621e:	2208      	movs	r2, #8
  406220:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  406222:	687b      	ldr	r3, [r7, #4]
  406224:	2220      	movs	r2, #32
  406226:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  406228:	687b      	ldr	r3, [r7, #4]
  40622a:	2204      	movs	r2, #4
  40622c:	601a      	str	r2, [r3, #0]
}
  40622e:	bf00      	nop
  406230:	370c      	adds	r7, #12
  406232:	46bd      	mov	sp, r7
  406234:	f85d 7b04 	ldr.w	r7, [sp], #4
  406238:	4770      	bx	lr
	...

0040623c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  40623c:	b580      	push	{r7, lr}
  40623e:	b084      	sub	sp, #16
  406240:	af00      	add	r7, sp, #0
  406242:	6078      	str	r0, [r7, #4]
  406244:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  406246:	2300      	movs	r3, #0
  406248:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  40624a:	687b      	ldr	r3, [r7, #4]
  40624c:	f04f 32ff 	mov.w	r2, #4294967295
  406250:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  406252:	687b      	ldr	r3, [r7, #4]
  406254:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  406256:	6878      	ldr	r0, [r7, #4]
  406258:	4b0e      	ldr	r3, [pc, #56]	; (406294 <twi_master_init+0x58>)
  40625a:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  40625c:	6878      	ldr	r0, [r7, #4]
  40625e:	4b0e      	ldr	r3, [pc, #56]	; (406298 <twi_master_init+0x5c>)
  406260:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  406262:	683b      	ldr	r3, [r7, #0]
  406264:	6859      	ldr	r1, [r3, #4]
  406266:	683b      	ldr	r3, [r7, #0]
  406268:	681b      	ldr	r3, [r3, #0]
  40626a:	461a      	mov	r2, r3
  40626c:	6878      	ldr	r0, [r7, #4]
  40626e:	4b0b      	ldr	r3, [pc, #44]	; (40629c <twi_master_init+0x60>)
  406270:	4798      	blx	r3
  406272:	4603      	mov	r3, r0
  406274:	2b01      	cmp	r3, #1
  406276:	d101      	bne.n	40627c <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  406278:	2301      	movs	r3, #1
  40627a:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  40627c:	683b      	ldr	r3, [r7, #0]
  40627e:	7a5b      	ldrb	r3, [r3, #9]
  406280:	2b01      	cmp	r3, #1
  406282:	d102      	bne.n	40628a <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  406284:	687b      	ldr	r3, [r7, #4]
  406286:	2240      	movs	r2, #64	; 0x40
  406288:	601a      	str	r2, [r3, #0]
	}

	return status;
  40628a:	68fb      	ldr	r3, [r7, #12]
}
  40628c:	4618      	mov	r0, r3
  40628e:	3710      	adds	r7, #16
  406290:	46bd      	mov	sp, r7
  406292:	bd80      	pop	{r7, pc}
  406294:	004064cd 	.word	0x004064cd
  406298:	00406215 	.word	0x00406215
  40629c:	004062a1 	.word	0x004062a1

004062a0 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  4062a0:	b480      	push	{r7}
  4062a2:	b089      	sub	sp, #36	; 0x24
  4062a4:	af00      	add	r7, sp, #0
  4062a6:	60f8      	str	r0, [r7, #12]
  4062a8:	60b9      	str	r1, [r7, #8]
  4062aa:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  4062ac:	2300      	movs	r3, #0
  4062ae:	61fb      	str	r3, [r7, #28]
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4062b0:	68bb      	ldr	r3, [r7, #8]
  4062b2:	4a34      	ldr	r2, [pc, #208]	; (406384 <twi_set_speed+0xe4>)
  4062b4:	4293      	cmp	r3, r2
  4062b6:	d901      	bls.n	4062bc <twi_set_speed+0x1c>
		return FAIL;
  4062b8:	2301      	movs	r3, #1
  4062ba:	e05d      	b.n	406378 <twi_set_speed+0xd8>
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4062bc:	68bb      	ldr	r3, [r7, #8]
  4062be:	4a32      	ldr	r2, [pc, #200]	; (406388 <twi_set_speed+0xe8>)
  4062c0:	4293      	cmp	r3, r2
  4062c2:	d937      	bls.n	406334 <twi_set_speed+0x94>
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4062c4:	687b      	ldr	r3, [r7, #4]
  4062c6:	4a31      	ldr	r2, [pc, #196]	; (40638c <twi_set_speed+0xec>)
  4062c8:	fba2 2303 	umull	r2, r3, r2, r3
  4062cc:	0b9b      	lsrs	r3, r3, #14
  4062ce:	3b04      	subs	r3, #4
  4062d0:	617b      	str	r3, [r7, #20]
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4062d2:	68ba      	ldr	r2, [r7, #8]
  4062d4:	4b2e      	ldr	r3, [pc, #184]	; (406390 <twi_set_speed+0xf0>)
  4062d6:	4413      	add	r3, r2
  4062d8:	009b      	lsls	r3, r3, #2
  4062da:	687a      	ldr	r2, [r7, #4]
  4062dc:	fbb2 f3f3 	udiv	r3, r2, r3
  4062e0:	3b04      	subs	r3, #4
  4062e2:	613b      	str	r3, [r7, #16]
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4062e4:	e005      	b.n	4062f2 <twi_set_speed+0x52>
			/* Increase clock divider */
			ckdiv++;
  4062e6:	69fb      	ldr	r3, [r7, #28]
  4062e8:	3301      	adds	r3, #1
  4062ea:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4062ec:	697b      	ldr	r3, [r7, #20]
  4062ee:	085b      	lsrs	r3, r3, #1
  4062f0:	617b      	str	r3, [r7, #20]
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4062f2:	697b      	ldr	r3, [r7, #20]
  4062f4:	2bff      	cmp	r3, #255	; 0xff
  4062f6:	d909      	bls.n	40630c <twi_set_speed+0x6c>
  4062f8:	69fb      	ldr	r3, [r7, #28]
  4062fa:	2b06      	cmp	r3, #6
  4062fc:	d9f3      	bls.n	4062e6 <twi_set_speed+0x46>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4062fe:	e005      	b.n	40630c <twi_set_speed+0x6c>
			/* Increase clock divider */
			ckdiv++;
  406300:	69fb      	ldr	r3, [r7, #28]
  406302:	3301      	adds	r3, #1
  406304:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			chdiv /= TWI_CLK_DIVIDER;
  406306:	693b      	ldr	r3, [r7, #16]
  406308:	085b      	lsrs	r3, r3, #1
  40630a:	613b      	str	r3, [r7, #16]
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40630c:	693b      	ldr	r3, [r7, #16]
  40630e:	2bff      	cmp	r3, #255	; 0xff
  406310:	d902      	bls.n	406318 <twi_set_speed+0x78>
  406312:	69fb      	ldr	r3, [r7, #28]
  406314:	2b06      	cmp	r3, #6
  406316:	d9f3      	bls.n	406300 <twi_set_speed+0x60>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  406318:	697b      	ldr	r3, [r7, #20]
  40631a:	b2da      	uxtb	r2, r3
  40631c:	693b      	ldr	r3, [r7, #16]
  40631e:	021b      	lsls	r3, r3, #8
  406320:	b29b      	uxth	r3, r3
  406322:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);		
  406324:	69fb      	ldr	r3, [r7, #28]
  406326:	041b      	lsls	r3, r3, #16
  406328:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  40632c:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  40632e:	68fb      	ldr	r3, [r7, #12]
  406330:	611a      	str	r2, [r3, #16]
  406332:	e020      	b.n	406376 <twi_set_speed+0xd6>
	} else {
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  406334:	68bb      	ldr	r3, [r7, #8]
  406336:	005b      	lsls	r3, r3, #1
  406338:	687a      	ldr	r2, [r7, #4]
  40633a:	fbb2 f3f3 	udiv	r3, r2, r3
  40633e:	3b04      	subs	r3, #4
  406340:	61bb      	str	r3, [r7, #24]

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  406342:	e005      	b.n	406350 <twi_set_speed+0xb0>
			/* Increase clock divider */
			ckdiv++;
  406344:	69fb      	ldr	r3, [r7, #28]
  406346:	3301      	adds	r3, #1
  406348:	61fb      	str	r3, [r7, #28]
			/* Divide cldiv value */
			c_lh_div /= TWI_CLK_DIVIDER;
  40634a:	69bb      	ldr	r3, [r7, #24]
  40634c:	085b      	lsrs	r3, r3, #1
  40634e:	61bb      	str	r3, [r7, #24]
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  406350:	69bb      	ldr	r3, [r7, #24]
  406352:	2bff      	cmp	r3, #255	; 0xff
  406354:	d902      	bls.n	40635c <twi_set_speed+0xbc>
  406356:	69fb      	ldr	r3, [r7, #28]
  406358:	2b06      	cmp	r3, #6
  40635a:	d9f3      	bls.n	406344 <twi_set_speed+0xa4>
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  40635c:	69bb      	ldr	r3, [r7, #24]
  40635e:	b2da      	uxtb	r2, r3
  406360:	69bb      	ldr	r3, [r7, #24]
  406362:	021b      	lsls	r3, r3, #8
  406364:	b29b      	uxth	r3, r3
  406366:	431a      	orrs	r2, r3
				TWI_CWGR_CKDIV(ckdiv);
  406368:	69fb      	ldr	r3, [r7, #28]
  40636a:	041b      	lsls	r3, r3, #16
  40636c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  406370:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  406372:	68fb      	ldr	r3, [r7, #12]
  406374:	611a      	str	r2, [r3, #16]
	}

	return PASS;
  406376:	2300      	movs	r3, #0
}
  406378:	4618      	mov	r0, r3
  40637a:	3724      	adds	r7, #36	; 0x24
  40637c:	46bd      	mov	sp, r7
  40637e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406382:	4770      	bx	lr
  406384:	00061a80 	.word	0x00061a80
  406388:	0005dc00 	.word	0x0005dc00
  40638c:	057619f1 	.word	0x057619f1
  406390:	3ffd1200 	.word	0x3ffd1200

00406394 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  406394:	b480      	push	{r7}
  406396:	b085      	sub	sp, #20
  406398:	af00      	add	r7, sp, #0
  40639a:	6078      	str	r0, [r7, #4]
  40639c:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  40639e:	683b      	ldr	r3, [r7, #0]
  4063a0:	2b00      	cmp	r3, #0
  4063a2:	d101      	bne.n	4063a8 <twi_mk_addr+0x14>
		return 0;
  4063a4:	2300      	movs	r3, #0
  4063a6:	e01d      	b.n	4063e4 <twi_mk_addr+0x50>

	val = addr[0];
  4063a8:	687b      	ldr	r3, [r7, #4]
  4063aa:	781b      	ldrb	r3, [r3, #0]
  4063ac:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  4063ae:	683b      	ldr	r3, [r7, #0]
  4063b0:	2b01      	cmp	r3, #1
  4063b2:	dd09      	ble.n	4063c8 <twi_mk_addr+0x34>
		val <<= 8;
  4063b4:	68fb      	ldr	r3, [r7, #12]
  4063b6:	021b      	lsls	r3, r3, #8
  4063b8:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  4063ba:	687b      	ldr	r3, [r7, #4]
  4063bc:	3301      	adds	r3, #1
  4063be:	781b      	ldrb	r3, [r3, #0]
  4063c0:	461a      	mov	r2, r3
  4063c2:	68fb      	ldr	r3, [r7, #12]
  4063c4:	4313      	orrs	r3, r2
  4063c6:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  4063c8:	683b      	ldr	r3, [r7, #0]
  4063ca:	2b02      	cmp	r3, #2
  4063cc:	dd09      	ble.n	4063e2 <twi_mk_addr+0x4e>
		val <<= 8;
  4063ce:	68fb      	ldr	r3, [r7, #12]
  4063d0:	021b      	lsls	r3, r3, #8
  4063d2:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  4063d4:	687b      	ldr	r3, [r7, #4]
  4063d6:	3302      	adds	r3, #2
  4063d8:	781b      	ldrb	r3, [r3, #0]
  4063da:	461a      	mov	r2, r3
  4063dc:	68fb      	ldr	r3, [r7, #12]
  4063de:	4313      	orrs	r3, r2
  4063e0:	60fb      	str	r3, [r7, #12]
	}
	return val;
  4063e2:	68fb      	ldr	r3, [r7, #12]
}
  4063e4:	4618      	mov	r0, r3
  4063e6:	3714      	adds	r7, #20
  4063e8:	46bd      	mov	sp, r7
  4063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4063ee:	4770      	bx	lr

004063f0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4063f0:	b580      	push	{r7, lr}
  4063f2:	b086      	sub	sp, #24
  4063f4:	af00      	add	r7, sp, #0
  4063f6:	6078      	str	r0, [r7, #4]
  4063f8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4063fa:	683b      	ldr	r3, [r7, #0]
  4063fc:	68db      	ldr	r3, [r3, #12]
  4063fe:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  406400:	683b      	ldr	r3, [r7, #0]
  406402:	689b      	ldr	r3, [r3, #8]
  406404:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  406406:	697b      	ldr	r3, [r7, #20]
  406408:	2b00      	cmp	r3, #0
  40640a:	d101      	bne.n	406410 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  40640c:	2301      	movs	r3, #1
  40640e:	e056      	b.n	4064be <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  406410:	687b      	ldr	r3, [r7, #4]
  406412:	2200      	movs	r2, #0
  406414:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  406416:	683b      	ldr	r3, [r7, #0]
  406418:	7c1b      	ldrb	r3, [r3, #16]
  40641a:	041b      	lsls	r3, r3, #16
  40641c:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  406420:	683b      	ldr	r3, [r7, #0]
  406422:	685b      	ldr	r3, [r3, #4]
  406424:	021b      	lsls	r3, r3, #8
  406426:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  40642a:	431a      	orrs	r2, r3
  40642c:	687b      	ldr	r3, [r7, #4]
  40642e:	605a      	str	r2, [r3, #4]
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  406430:	687b      	ldr	r3, [r7, #4]
  406432:	2200      	movs	r2, #0
  406434:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  406436:	683a      	ldr	r2, [r7, #0]
  406438:	683b      	ldr	r3, [r7, #0]
  40643a:	685b      	ldr	r3, [r3, #4]
  40643c:	4619      	mov	r1, r3
  40643e:	4610      	mov	r0, r2
  406440:	4b21      	ldr	r3, [pc, #132]	; (4064c8 <twi_master_write+0xd8>)
  406442:	4798      	blx	r3
  406444:	4602      	mov	r2, r0
  406446:	687b      	ldr	r3, [r7, #4]
  406448:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  40644a:	e019      	b.n	406480 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  40644c:	687b      	ldr	r3, [r7, #4]
  40644e:	6a1b      	ldr	r3, [r3, #32]
  406450:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  406452:	68fb      	ldr	r3, [r7, #12]
  406454:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406458:	2b00      	cmp	r3, #0
  40645a:	d001      	beq.n	406460 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  40645c:	2305      	movs	r3, #5
  40645e:	e02e      	b.n	4064be <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  406460:	68fb      	ldr	r3, [r7, #12]
  406462:	f003 0304 	and.w	r3, r3, #4
  406466:	2b00      	cmp	r3, #0
  406468:	d100      	bne.n	40646c <twi_master_write+0x7c>
			continue;
  40646a:	e009      	b.n	406480 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  40646c:	693b      	ldr	r3, [r7, #16]
  40646e:	1c5a      	adds	r2, r3, #1
  406470:	613a      	str	r2, [r7, #16]
  406472:	781b      	ldrb	r3, [r3, #0]
  406474:	461a      	mov	r2, r3
  406476:	687b      	ldr	r3, [r7, #4]
  406478:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  40647a:	697b      	ldr	r3, [r7, #20]
  40647c:	3b01      	subs	r3, #1
  40647e:	617b      	str	r3, [r7, #20]
	while (cnt > 0) {
  406480:	697b      	ldr	r3, [r7, #20]
  406482:	2b00      	cmp	r3, #0
  406484:	d1e2      	bne.n	40644c <twi_master_write+0x5c>
	}

	while (1) {
		status = p_twi->TWI_SR;
  406486:	687b      	ldr	r3, [r7, #4]
  406488:	6a1b      	ldr	r3, [r3, #32]
  40648a:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  40648c:	68fb      	ldr	r3, [r7, #12]
  40648e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406492:	2b00      	cmp	r3, #0
  406494:	d001      	beq.n	40649a <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  406496:	2305      	movs	r3, #5
  406498:	e011      	b.n	4064be <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  40649a:	68fb      	ldr	r3, [r7, #12]
  40649c:	f003 0304 	and.w	r3, r3, #4
  4064a0:	2b00      	cmp	r3, #0
  4064a2:	d100      	bne.n	4064a6 <twi_master_write+0xb6>
		status = p_twi->TWI_SR;
  4064a4:	e7ef      	b.n	406486 <twi_master_write+0x96>
			break;
  4064a6:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4064a8:	687b      	ldr	r3, [r7, #4]
  4064aa:	2202      	movs	r2, #2
  4064ac:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4064ae:	bf00      	nop
  4064b0:	687b      	ldr	r3, [r7, #4]
  4064b2:	6a1b      	ldr	r3, [r3, #32]
  4064b4:	f003 0301 	and.w	r3, r3, #1
  4064b8:	2b00      	cmp	r3, #0
  4064ba:	d0f9      	beq.n	4064b0 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  4064bc:	2300      	movs	r3, #0
}
  4064be:	4618      	mov	r0, r3
  4064c0:	3718      	adds	r7, #24
  4064c2:	46bd      	mov	sp, r7
  4064c4:	bd80      	pop	{r7, pc}
  4064c6:	bf00      	nop
  4064c8:	00406395 	.word	0x00406395

004064cc <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  4064cc:	b480      	push	{r7}
  4064ce:	b083      	sub	sp, #12
  4064d0:	af00      	add	r7, sp, #0
  4064d2:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  4064d4:	687b      	ldr	r3, [r7, #4]
  4064d6:	2280      	movs	r2, #128	; 0x80
  4064d8:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  4064da:	687b      	ldr	r3, [r7, #4]
  4064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4064de:	bf00      	nop
  4064e0:	370c      	adds	r7, #12
  4064e2:	46bd      	mov	sp, r7
  4064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4064e8:	4770      	bx	lr
	...

004064ec <__aeabi_uldivmod>:
  4064ec:	b953      	cbnz	r3, 406504 <__aeabi_uldivmod+0x18>
  4064ee:	b94a      	cbnz	r2, 406504 <__aeabi_uldivmod+0x18>
  4064f0:	2900      	cmp	r1, #0
  4064f2:	bf08      	it	eq
  4064f4:	2800      	cmpeq	r0, #0
  4064f6:	bf1c      	itt	ne
  4064f8:	f04f 31ff 	movne.w	r1, #4294967295
  4064fc:	f04f 30ff 	movne.w	r0, #4294967295
  406500:	f000 b97a 	b.w	4067f8 <__aeabi_idiv0>
  406504:	f1ad 0c08 	sub.w	ip, sp, #8
  406508:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40650c:	f000 f806 	bl	40651c <__udivmoddi4>
  406510:	f8dd e004 	ldr.w	lr, [sp, #4]
  406514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406518:	b004      	add	sp, #16
  40651a:	4770      	bx	lr

0040651c <__udivmoddi4>:
  40651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406520:	468c      	mov	ip, r1
  406522:	460d      	mov	r5, r1
  406524:	4604      	mov	r4, r0
  406526:	9e08      	ldr	r6, [sp, #32]
  406528:	2b00      	cmp	r3, #0
  40652a:	d151      	bne.n	4065d0 <__udivmoddi4+0xb4>
  40652c:	428a      	cmp	r2, r1
  40652e:	4617      	mov	r7, r2
  406530:	d96d      	bls.n	40660e <__udivmoddi4+0xf2>
  406532:	fab2 fe82 	clz	lr, r2
  406536:	f1be 0f00 	cmp.w	lr, #0
  40653a:	d00b      	beq.n	406554 <__udivmoddi4+0x38>
  40653c:	f1ce 0c20 	rsb	ip, lr, #32
  406540:	fa01 f50e 	lsl.w	r5, r1, lr
  406544:	fa20 fc0c 	lsr.w	ip, r0, ip
  406548:	fa02 f70e 	lsl.w	r7, r2, lr
  40654c:	ea4c 0c05 	orr.w	ip, ip, r5
  406550:	fa00 f40e 	lsl.w	r4, r0, lr
  406554:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406558:	0c25      	lsrs	r5, r4, #16
  40655a:	fbbc f8fa 	udiv	r8, ip, sl
  40655e:	fa1f f987 	uxth.w	r9, r7
  406562:	fb0a cc18 	mls	ip, sl, r8, ip
  406566:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40656a:	fb08 f309 	mul.w	r3, r8, r9
  40656e:	42ab      	cmp	r3, r5
  406570:	d90a      	bls.n	406588 <__udivmoddi4+0x6c>
  406572:	19ed      	adds	r5, r5, r7
  406574:	f108 32ff 	add.w	r2, r8, #4294967295
  406578:	f080 8123 	bcs.w	4067c2 <__udivmoddi4+0x2a6>
  40657c:	42ab      	cmp	r3, r5
  40657e:	f240 8120 	bls.w	4067c2 <__udivmoddi4+0x2a6>
  406582:	f1a8 0802 	sub.w	r8, r8, #2
  406586:	443d      	add	r5, r7
  406588:	1aed      	subs	r5, r5, r3
  40658a:	b2a4      	uxth	r4, r4
  40658c:	fbb5 f0fa 	udiv	r0, r5, sl
  406590:	fb0a 5510 	mls	r5, sl, r0, r5
  406594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406598:	fb00 f909 	mul.w	r9, r0, r9
  40659c:	45a1      	cmp	r9, r4
  40659e:	d909      	bls.n	4065b4 <__udivmoddi4+0x98>
  4065a0:	19e4      	adds	r4, r4, r7
  4065a2:	f100 33ff 	add.w	r3, r0, #4294967295
  4065a6:	f080 810a 	bcs.w	4067be <__udivmoddi4+0x2a2>
  4065aa:	45a1      	cmp	r9, r4
  4065ac:	f240 8107 	bls.w	4067be <__udivmoddi4+0x2a2>
  4065b0:	3802      	subs	r0, #2
  4065b2:	443c      	add	r4, r7
  4065b4:	eba4 0409 	sub.w	r4, r4, r9
  4065b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4065bc:	2100      	movs	r1, #0
  4065be:	2e00      	cmp	r6, #0
  4065c0:	d061      	beq.n	406686 <__udivmoddi4+0x16a>
  4065c2:	fa24 f40e 	lsr.w	r4, r4, lr
  4065c6:	2300      	movs	r3, #0
  4065c8:	6034      	str	r4, [r6, #0]
  4065ca:	6073      	str	r3, [r6, #4]
  4065cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4065d0:	428b      	cmp	r3, r1
  4065d2:	d907      	bls.n	4065e4 <__udivmoddi4+0xc8>
  4065d4:	2e00      	cmp	r6, #0
  4065d6:	d054      	beq.n	406682 <__udivmoddi4+0x166>
  4065d8:	2100      	movs	r1, #0
  4065da:	e886 0021 	stmia.w	r6, {r0, r5}
  4065de:	4608      	mov	r0, r1
  4065e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4065e4:	fab3 f183 	clz	r1, r3
  4065e8:	2900      	cmp	r1, #0
  4065ea:	f040 808e 	bne.w	40670a <__udivmoddi4+0x1ee>
  4065ee:	42ab      	cmp	r3, r5
  4065f0:	d302      	bcc.n	4065f8 <__udivmoddi4+0xdc>
  4065f2:	4282      	cmp	r2, r0
  4065f4:	f200 80fa 	bhi.w	4067ec <__udivmoddi4+0x2d0>
  4065f8:	1a84      	subs	r4, r0, r2
  4065fa:	eb65 0503 	sbc.w	r5, r5, r3
  4065fe:	2001      	movs	r0, #1
  406600:	46ac      	mov	ip, r5
  406602:	2e00      	cmp	r6, #0
  406604:	d03f      	beq.n	406686 <__udivmoddi4+0x16a>
  406606:	e886 1010 	stmia.w	r6, {r4, ip}
  40660a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40660e:	b912      	cbnz	r2, 406616 <__udivmoddi4+0xfa>
  406610:	2701      	movs	r7, #1
  406612:	fbb7 f7f2 	udiv	r7, r7, r2
  406616:	fab7 fe87 	clz	lr, r7
  40661a:	f1be 0f00 	cmp.w	lr, #0
  40661e:	d134      	bne.n	40668a <__udivmoddi4+0x16e>
  406620:	1beb      	subs	r3, r5, r7
  406622:	0c3a      	lsrs	r2, r7, #16
  406624:	fa1f fc87 	uxth.w	ip, r7
  406628:	2101      	movs	r1, #1
  40662a:	fbb3 f8f2 	udiv	r8, r3, r2
  40662e:	0c25      	lsrs	r5, r4, #16
  406630:	fb02 3318 	mls	r3, r2, r8, r3
  406634:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406638:	fb0c f308 	mul.w	r3, ip, r8
  40663c:	42ab      	cmp	r3, r5
  40663e:	d907      	bls.n	406650 <__udivmoddi4+0x134>
  406640:	19ed      	adds	r5, r5, r7
  406642:	f108 30ff 	add.w	r0, r8, #4294967295
  406646:	d202      	bcs.n	40664e <__udivmoddi4+0x132>
  406648:	42ab      	cmp	r3, r5
  40664a:	f200 80d1 	bhi.w	4067f0 <__udivmoddi4+0x2d4>
  40664e:	4680      	mov	r8, r0
  406650:	1aed      	subs	r5, r5, r3
  406652:	b2a3      	uxth	r3, r4
  406654:	fbb5 f0f2 	udiv	r0, r5, r2
  406658:	fb02 5510 	mls	r5, r2, r0, r5
  40665c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406660:	fb0c fc00 	mul.w	ip, ip, r0
  406664:	45a4      	cmp	ip, r4
  406666:	d907      	bls.n	406678 <__udivmoddi4+0x15c>
  406668:	19e4      	adds	r4, r4, r7
  40666a:	f100 33ff 	add.w	r3, r0, #4294967295
  40666e:	d202      	bcs.n	406676 <__udivmoddi4+0x15a>
  406670:	45a4      	cmp	ip, r4
  406672:	f200 80b8 	bhi.w	4067e6 <__udivmoddi4+0x2ca>
  406676:	4618      	mov	r0, r3
  406678:	eba4 040c 	sub.w	r4, r4, ip
  40667c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406680:	e79d      	b.n	4065be <__udivmoddi4+0xa2>
  406682:	4631      	mov	r1, r6
  406684:	4630      	mov	r0, r6
  406686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40668a:	f1ce 0420 	rsb	r4, lr, #32
  40668e:	fa05 f30e 	lsl.w	r3, r5, lr
  406692:	fa07 f70e 	lsl.w	r7, r7, lr
  406696:	fa20 f804 	lsr.w	r8, r0, r4
  40669a:	0c3a      	lsrs	r2, r7, #16
  40669c:	fa25 f404 	lsr.w	r4, r5, r4
  4066a0:	ea48 0803 	orr.w	r8, r8, r3
  4066a4:	fbb4 f1f2 	udiv	r1, r4, r2
  4066a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4066ac:	fb02 4411 	mls	r4, r2, r1, r4
  4066b0:	fa1f fc87 	uxth.w	ip, r7
  4066b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4066b8:	fb01 f30c 	mul.w	r3, r1, ip
  4066bc:	42ab      	cmp	r3, r5
  4066be:	fa00 f40e 	lsl.w	r4, r0, lr
  4066c2:	d909      	bls.n	4066d8 <__udivmoddi4+0x1bc>
  4066c4:	19ed      	adds	r5, r5, r7
  4066c6:	f101 30ff 	add.w	r0, r1, #4294967295
  4066ca:	f080 808a 	bcs.w	4067e2 <__udivmoddi4+0x2c6>
  4066ce:	42ab      	cmp	r3, r5
  4066d0:	f240 8087 	bls.w	4067e2 <__udivmoddi4+0x2c6>
  4066d4:	3902      	subs	r1, #2
  4066d6:	443d      	add	r5, r7
  4066d8:	1aeb      	subs	r3, r5, r3
  4066da:	fa1f f588 	uxth.w	r5, r8
  4066de:	fbb3 f0f2 	udiv	r0, r3, r2
  4066e2:	fb02 3310 	mls	r3, r2, r0, r3
  4066e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4066ea:	fb00 f30c 	mul.w	r3, r0, ip
  4066ee:	42ab      	cmp	r3, r5
  4066f0:	d907      	bls.n	406702 <__udivmoddi4+0x1e6>
  4066f2:	19ed      	adds	r5, r5, r7
  4066f4:	f100 38ff 	add.w	r8, r0, #4294967295
  4066f8:	d26f      	bcs.n	4067da <__udivmoddi4+0x2be>
  4066fa:	42ab      	cmp	r3, r5
  4066fc:	d96d      	bls.n	4067da <__udivmoddi4+0x2be>
  4066fe:	3802      	subs	r0, #2
  406700:	443d      	add	r5, r7
  406702:	1aeb      	subs	r3, r5, r3
  406704:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406708:	e78f      	b.n	40662a <__udivmoddi4+0x10e>
  40670a:	f1c1 0720 	rsb	r7, r1, #32
  40670e:	fa22 f807 	lsr.w	r8, r2, r7
  406712:	408b      	lsls	r3, r1
  406714:	fa05 f401 	lsl.w	r4, r5, r1
  406718:	ea48 0303 	orr.w	r3, r8, r3
  40671c:	fa20 fe07 	lsr.w	lr, r0, r7
  406720:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406724:	40fd      	lsrs	r5, r7
  406726:	ea4e 0e04 	orr.w	lr, lr, r4
  40672a:	fbb5 f9fc 	udiv	r9, r5, ip
  40672e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406732:	fb0c 5519 	mls	r5, ip, r9, r5
  406736:	fa1f f883 	uxth.w	r8, r3
  40673a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40673e:	fb09 f408 	mul.w	r4, r9, r8
  406742:	42ac      	cmp	r4, r5
  406744:	fa02 f201 	lsl.w	r2, r2, r1
  406748:	fa00 fa01 	lsl.w	sl, r0, r1
  40674c:	d908      	bls.n	406760 <__udivmoddi4+0x244>
  40674e:	18ed      	adds	r5, r5, r3
  406750:	f109 30ff 	add.w	r0, r9, #4294967295
  406754:	d243      	bcs.n	4067de <__udivmoddi4+0x2c2>
  406756:	42ac      	cmp	r4, r5
  406758:	d941      	bls.n	4067de <__udivmoddi4+0x2c2>
  40675a:	f1a9 0902 	sub.w	r9, r9, #2
  40675e:	441d      	add	r5, r3
  406760:	1b2d      	subs	r5, r5, r4
  406762:	fa1f fe8e 	uxth.w	lr, lr
  406766:	fbb5 f0fc 	udiv	r0, r5, ip
  40676a:	fb0c 5510 	mls	r5, ip, r0, r5
  40676e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406772:	fb00 f808 	mul.w	r8, r0, r8
  406776:	45a0      	cmp	r8, r4
  406778:	d907      	bls.n	40678a <__udivmoddi4+0x26e>
  40677a:	18e4      	adds	r4, r4, r3
  40677c:	f100 35ff 	add.w	r5, r0, #4294967295
  406780:	d229      	bcs.n	4067d6 <__udivmoddi4+0x2ba>
  406782:	45a0      	cmp	r8, r4
  406784:	d927      	bls.n	4067d6 <__udivmoddi4+0x2ba>
  406786:	3802      	subs	r0, #2
  406788:	441c      	add	r4, r3
  40678a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40678e:	eba4 0408 	sub.w	r4, r4, r8
  406792:	fba0 8902 	umull	r8, r9, r0, r2
  406796:	454c      	cmp	r4, r9
  406798:	46c6      	mov	lr, r8
  40679a:	464d      	mov	r5, r9
  40679c:	d315      	bcc.n	4067ca <__udivmoddi4+0x2ae>
  40679e:	d012      	beq.n	4067c6 <__udivmoddi4+0x2aa>
  4067a0:	b156      	cbz	r6, 4067b8 <__udivmoddi4+0x29c>
  4067a2:	ebba 030e 	subs.w	r3, sl, lr
  4067a6:	eb64 0405 	sbc.w	r4, r4, r5
  4067aa:	fa04 f707 	lsl.w	r7, r4, r7
  4067ae:	40cb      	lsrs	r3, r1
  4067b0:	431f      	orrs	r7, r3
  4067b2:	40cc      	lsrs	r4, r1
  4067b4:	6037      	str	r7, [r6, #0]
  4067b6:	6074      	str	r4, [r6, #4]
  4067b8:	2100      	movs	r1, #0
  4067ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4067be:	4618      	mov	r0, r3
  4067c0:	e6f8      	b.n	4065b4 <__udivmoddi4+0x98>
  4067c2:	4690      	mov	r8, r2
  4067c4:	e6e0      	b.n	406588 <__udivmoddi4+0x6c>
  4067c6:	45c2      	cmp	sl, r8
  4067c8:	d2ea      	bcs.n	4067a0 <__udivmoddi4+0x284>
  4067ca:	ebb8 0e02 	subs.w	lr, r8, r2
  4067ce:	eb69 0503 	sbc.w	r5, r9, r3
  4067d2:	3801      	subs	r0, #1
  4067d4:	e7e4      	b.n	4067a0 <__udivmoddi4+0x284>
  4067d6:	4628      	mov	r0, r5
  4067d8:	e7d7      	b.n	40678a <__udivmoddi4+0x26e>
  4067da:	4640      	mov	r0, r8
  4067dc:	e791      	b.n	406702 <__udivmoddi4+0x1e6>
  4067de:	4681      	mov	r9, r0
  4067e0:	e7be      	b.n	406760 <__udivmoddi4+0x244>
  4067e2:	4601      	mov	r1, r0
  4067e4:	e778      	b.n	4066d8 <__udivmoddi4+0x1bc>
  4067e6:	3802      	subs	r0, #2
  4067e8:	443c      	add	r4, r7
  4067ea:	e745      	b.n	406678 <__udivmoddi4+0x15c>
  4067ec:	4608      	mov	r0, r1
  4067ee:	e708      	b.n	406602 <__udivmoddi4+0xe6>
  4067f0:	f1a8 0802 	sub.w	r8, r8, #2
  4067f4:	443d      	add	r5, r7
  4067f6:	e72b      	b.n	406650 <__udivmoddi4+0x134>

004067f8 <__aeabi_idiv0>:
  4067f8:	4770      	bx	lr
  4067fa:	bf00      	nop

004067fc <__libc_init_array>:
  4067fc:	b570      	push	{r4, r5, r6, lr}
  4067fe:	4e0f      	ldr	r6, [pc, #60]	; (40683c <__libc_init_array+0x40>)
  406800:	4d0f      	ldr	r5, [pc, #60]	; (406840 <__libc_init_array+0x44>)
  406802:	1b76      	subs	r6, r6, r5
  406804:	10b6      	asrs	r6, r6, #2
  406806:	bf18      	it	ne
  406808:	2400      	movne	r4, #0
  40680a:	d005      	beq.n	406818 <__libc_init_array+0x1c>
  40680c:	3401      	adds	r4, #1
  40680e:	f855 3b04 	ldr.w	r3, [r5], #4
  406812:	4798      	blx	r3
  406814:	42a6      	cmp	r6, r4
  406816:	d1f9      	bne.n	40680c <__libc_init_array+0x10>
  406818:	4e0a      	ldr	r6, [pc, #40]	; (406844 <__libc_init_array+0x48>)
  40681a:	4d0b      	ldr	r5, [pc, #44]	; (406848 <__libc_init_array+0x4c>)
  40681c:	1b76      	subs	r6, r6, r5
  40681e:	f005 f883 	bl	40b928 <_init>
  406822:	10b6      	asrs	r6, r6, #2
  406824:	bf18      	it	ne
  406826:	2400      	movne	r4, #0
  406828:	d006      	beq.n	406838 <__libc_init_array+0x3c>
  40682a:	3401      	adds	r4, #1
  40682c:	f855 3b04 	ldr.w	r3, [r5], #4
  406830:	4798      	blx	r3
  406832:	42a6      	cmp	r6, r4
  406834:	d1f9      	bne.n	40682a <__libc_init_array+0x2e>
  406836:	bd70      	pop	{r4, r5, r6, pc}
  406838:	bd70      	pop	{r4, r5, r6, pc}
  40683a:	bf00      	nop
  40683c:	0040b934 	.word	0x0040b934
  406840:	0040b934 	.word	0x0040b934
  406844:	0040b93c 	.word	0x0040b93c
  406848:	0040b934 	.word	0x0040b934

0040684c <memcpy>:
  40684c:	4684      	mov	ip, r0
  40684e:	ea41 0300 	orr.w	r3, r1, r0
  406852:	f013 0303 	ands.w	r3, r3, #3
  406856:	d16d      	bne.n	406934 <memcpy+0xe8>
  406858:	3a40      	subs	r2, #64	; 0x40
  40685a:	d341      	bcc.n	4068e0 <memcpy+0x94>
  40685c:	f851 3b04 	ldr.w	r3, [r1], #4
  406860:	f840 3b04 	str.w	r3, [r0], #4
  406864:	f851 3b04 	ldr.w	r3, [r1], #4
  406868:	f840 3b04 	str.w	r3, [r0], #4
  40686c:	f851 3b04 	ldr.w	r3, [r1], #4
  406870:	f840 3b04 	str.w	r3, [r0], #4
  406874:	f851 3b04 	ldr.w	r3, [r1], #4
  406878:	f840 3b04 	str.w	r3, [r0], #4
  40687c:	f851 3b04 	ldr.w	r3, [r1], #4
  406880:	f840 3b04 	str.w	r3, [r0], #4
  406884:	f851 3b04 	ldr.w	r3, [r1], #4
  406888:	f840 3b04 	str.w	r3, [r0], #4
  40688c:	f851 3b04 	ldr.w	r3, [r1], #4
  406890:	f840 3b04 	str.w	r3, [r0], #4
  406894:	f851 3b04 	ldr.w	r3, [r1], #4
  406898:	f840 3b04 	str.w	r3, [r0], #4
  40689c:	f851 3b04 	ldr.w	r3, [r1], #4
  4068a0:	f840 3b04 	str.w	r3, [r0], #4
  4068a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4068a8:	f840 3b04 	str.w	r3, [r0], #4
  4068ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4068b0:	f840 3b04 	str.w	r3, [r0], #4
  4068b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4068b8:	f840 3b04 	str.w	r3, [r0], #4
  4068bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4068c0:	f840 3b04 	str.w	r3, [r0], #4
  4068c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4068c8:	f840 3b04 	str.w	r3, [r0], #4
  4068cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4068d0:	f840 3b04 	str.w	r3, [r0], #4
  4068d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4068d8:	f840 3b04 	str.w	r3, [r0], #4
  4068dc:	3a40      	subs	r2, #64	; 0x40
  4068de:	d2bd      	bcs.n	40685c <memcpy+0x10>
  4068e0:	3230      	adds	r2, #48	; 0x30
  4068e2:	d311      	bcc.n	406908 <memcpy+0xbc>
  4068e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4068e8:	f840 3b04 	str.w	r3, [r0], #4
  4068ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4068f0:	f840 3b04 	str.w	r3, [r0], #4
  4068f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4068f8:	f840 3b04 	str.w	r3, [r0], #4
  4068fc:	f851 3b04 	ldr.w	r3, [r1], #4
  406900:	f840 3b04 	str.w	r3, [r0], #4
  406904:	3a10      	subs	r2, #16
  406906:	d2ed      	bcs.n	4068e4 <memcpy+0x98>
  406908:	320c      	adds	r2, #12
  40690a:	d305      	bcc.n	406918 <memcpy+0xcc>
  40690c:	f851 3b04 	ldr.w	r3, [r1], #4
  406910:	f840 3b04 	str.w	r3, [r0], #4
  406914:	3a04      	subs	r2, #4
  406916:	d2f9      	bcs.n	40690c <memcpy+0xc0>
  406918:	3204      	adds	r2, #4
  40691a:	d008      	beq.n	40692e <memcpy+0xe2>
  40691c:	07d2      	lsls	r2, r2, #31
  40691e:	bf1c      	itt	ne
  406920:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406924:	f800 3b01 	strbne.w	r3, [r0], #1
  406928:	d301      	bcc.n	40692e <memcpy+0xe2>
  40692a:	880b      	ldrh	r3, [r1, #0]
  40692c:	8003      	strh	r3, [r0, #0]
  40692e:	4660      	mov	r0, ip
  406930:	4770      	bx	lr
  406932:	bf00      	nop
  406934:	2a08      	cmp	r2, #8
  406936:	d313      	bcc.n	406960 <memcpy+0x114>
  406938:	078b      	lsls	r3, r1, #30
  40693a:	d08d      	beq.n	406858 <memcpy+0xc>
  40693c:	f010 0303 	ands.w	r3, r0, #3
  406940:	d08a      	beq.n	406858 <memcpy+0xc>
  406942:	f1c3 0304 	rsb	r3, r3, #4
  406946:	1ad2      	subs	r2, r2, r3
  406948:	07db      	lsls	r3, r3, #31
  40694a:	bf1c      	itt	ne
  40694c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406950:	f800 3b01 	strbne.w	r3, [r0], #1
  406954:	d380      	bcc.n	406858 <memcpy+0xc>
  406956:	f831 3b02 	ldrh.w	r3, [r1], #2
  40695a:	f820 3b02 	strh.w	r3, [r0], #2
  40695e:	e77b      	b.n	406858 <memcpy+0xc>
  406960:	3a04      	subs	r2, #4
  406962:	d3d9      	bcc.n	406918 <memcpy+0xcc>
  406964:	3a01      	subs	r2, #1
  406966:	f811 3b01 	ldrb.w	r3, [r1], #1
  40696a:	f800 3b01 	strb.w	r3, [r0], #1
  40696e:	d2f9      	bcs.n	406964 <memcpy+0x118>
  406970:	780b      	ldrb	r3, [r1, #0]
  406972:	7003      	strb	r3, [r0, #0]
  406974:	784b      	ldrb	r3, [r1, #1]
  406976:	7043      	strb	r3, [r0, #1]
  406978:	788b      	ldrb	r3, [r1, #2]
  40697a:	7083      	strb	r3, [r0, #2]
  40697c:	4660      	mov	r0, ip
  40697e:	4770      	bx	lr

00406980 <memset>:
  406980:	b470      	push	{r4, r5, r6}
  406982:	0786      	lsls	r6, r0, #30
  406984:	d046      	beq.n	406a14 <memset+0x94>
  406986:	1e54      	subs	r4, r2, #1
  406988:	2a00      	cmp	r2, #0
  40698a:	d041      	beq.n	406a10 <memset+0x90>
  40698c:	b2ca      	uxtb	r2, r1
  40698e:	4603      	mov	r3, r0
  406990:	e002      	b.n	406998 <memset+0x18>
  406992:	f114 34ff 	adds.w	r4, r4, #4294967295
  406996:	d33b      	bcc.n	406a10 <memset+0x90>
  406998:	f803 2b01 	strb.w	r2, [r3], #1
  40699c:	079d      	lsls	r5, r3, #30
  40699e:	d1f8      	bne.n	406992 <memset+0x12>
  4069a0:	2c03      	cmp	r4, #3
  4069a2:	d92e      	bls.n	406a02 <memset+0x82>
  4069a4:	b2cd      	uxtb	r5, r1
  4069a6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4069aa:	2c0f      	cmp	r4, #15
  4069ac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4069b0:	d919      	bls.n	4069e6 <memset+0x66>
  4069b2:	f103 0210 	add.w	r2, r3, #16
  4069b6:	4626      	mov	r6, r4
  4069b8:	3e10      	subs	r6, #16
  4069ba:	2e0f      	cmp	r6, #15
  4069bc:	f842 5c10 	str.w	r5, [r2, #-16]
  4069c0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4069c4:	f842 5c08 	str.w	r5, [r2, #-8]
  4069c8:	f842 5c04 	str.w	r5, [r2, #-4]
  4069cc:	f102 0210 	add.w	r2, r2, #16
  4069d0:	d8f2      	bhi.n	4069b8 <memset+0x38>
  4069d2:	f1a4 0210 	sub.w	r2, r4, #16
  4069d6:	f022 020f 	bic.w	r2, r2, #15
  4069da:	f004 040f 	and.w	r4, r4, #15
  4069de:	3210      	adds	r2, #16
  4069e0:	2c03      	cmp	r4, #3
  4069e2:	4413      	add	r3, r2
  4069e4:	d90d      	bls.n	406a02 <memset+0x82>
  4069e6:	461e      	mov	r6, r3
  4069e8:	4622      	mov	r2, r4
  4069ea:	3a04      	subs	r2, #4
  4069ec:	2a03      	cmp	r2, #3
  4069ee:	f846 5b04 	str.w	r5, [r6], #4
  4069f2:	d8fa      	bhi.n	4069ea <memset+0x6a>
  4069f4:	1f22      	subs	r2, r4, #4
  4069f6:	f022 0203 	bic.w	r2, r2, #3
  4069fa:	3204      	adds	r2, #4
  4069fc:	4413      	add	r3, r2
  4069fe:	f004 0403 	and.w	r4, r4, #3
  406a02:	b12c      	cbz	r4, 406a10 <memset+0x90>
  406a04:	b2c9      	uxtb	r1, r1
  406a06:	441c      	add	r4, r3
  406a08:	f803 1b01 	strb.w	r1, [r3], #1
  406a0c:	429c      	cmp	r4, r3
  406a0e:	d1fb      	bne.n	406a08 <memset+0x88>
  406a10:	bc70      	pop	{r4, r5, r6}
  406a12:	4770      	bx	lr
  406a14:	4614      	mov	r4, r2
  406a16:	4603      	mov	r3, r0
  406a18:	e7c2      	b.n	4069a0 <memset+0x20>
  406a1a:	bf00      	nop

00406a1c <sprintf>:
  406a1c:	b40e      	push	{r1, r2, r3}
  406a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
  406a20:	b09c      	sub	sp, #112	; 0x70
  406a22:	ab21      	add	r3, sp, #132	; 0x84
  406a24:	490f      	ldr	r1, [pc, #60]	; (406a64 <sprintf+0x48>)
  406a26:	f853 2b04 	ldr.w	r2, [r3], #4
  406a2a:	9301      	str	r3, [sp, #4]
  406a2c:	4605      	mov	r5, r0
  406a2e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  406a32:	6808      	ldr	r0, [r1, #0]
  406a34:	9502      	str	r5, [sp, #8]
  406a36:	f44f 7702 	mov.w	r7, #520	; 0x208
  406a3a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  406a3e:	a902      	add	r1, sp, #8
  406a40:	9506      	str	r5, [sp, #24]
  406a42:	f8ad 7014 	strh.w	r7, [sp, #20]
  406a46:	9404      	str	r4, [sp, #16]
  406a48:	9407      	str	r4, [sp, #28]
  406a4a:	f8ad 6016 	strh.w	r6, [sp, #22]
  406a4e:	f000 f8b7 	bl	406bc0 <_svfprintf_r>
  406a52:	9b02      	ldr	r3, [sp, #8]
  406a54:	2200      	movs	r2, #0
  406a56:	701a      	strb	r2, [r3, #0]
  406a58:	b01c      	add	sp, #112	; 0x70
  406a5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  406a5e:	b003      	add	sp, #12
  406a60:	4770      	bx	lr
  406a62:	bf00      	nop
  406a64:	20000020 	.word	0x20000020
	...

00406a80 <strlen>:
  406a80:	f890 f000 	pld	[r0]
  406a84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406a88:	f020 0107 	bic.w	r1, r0, #7
  406a8c:	f06f 0c00 	mvn.w	ip, #0
  406a90:	f010 0407 	ands.w	r4, r0, #7
  406a94:	f891 f020 	pld	[r1, #32]
  406a98:	f040 8049 	bne.w	406b2e <strlen+0xae>
  406a9c:	f04f 0400 	mov.w	r4, #0
  406aa0:	f06f 0007 	mvn.w	r0, #7
  406aa4:	e9d1 2300 	ldrd	r2, r3, [r1]
  406aa8:	f891 f040 	pld	[r1, #64]	; 0x40
  406aac:	f100 0008 	add.w	r0, r0, #8
  406ab0:	fa82 f24c 	uadd8	r2, r2, ip
  406ab4:	faa4 f28c 	sel	r2, r4, ip
  406ab8:	fa83 f34c 	uadd8	r3, r3, ip
  406abc:	faa2 f38c 	sel	r3, r2, ip
  406ac0:	bb4b      	cbnz	r3, 406b16 <strlen+0x96>
  406ac2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406ac6:	fa82 f24c 	uadd8	r2, r2, ip
  406aca:	f100 0008 	add.w	r0, r0, #8
  406ace:	faa4 f28c 	sel	r2, r4, ip
  406ad2:	fa83 f34c 	uadd8	r3, r3, ip
  406ad6:	faa2 f38c 	sel	r3, r2, ip
  406ada:	b9e3      	cbnz	r3, 406b16 <strlen+0x96>
  406adc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406ae0:	fa82 f24c 	uadd8	r2, r2, ip
  406ae4:	f100 0008 	add.w	r0, r0, #8
  406ae8:	faa4 f28c 	sel	r2, r4, ip
  406aec:	fa83 f34c 	uadd8	r3, r3, ip
  406af0:	faa2 f38c 	sel	r3, r2, ip
  406af4:	b97b      	cbnz	r3, 406b16 <strlen+0x96>
  406af6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406afa:	f101 0120 	add.w	r1, r1, #32
  406afe:	fa82 f24c 	uadd8	r2, r2, ip
  406b02:	f100 0008 	add.w	r0, r0, #8
  406b06:	faa4 f28c 	sel	r2, r4, ip
  406b0a:	fa83 f34c 	uadd8	r3, r3, ip
  406b0e:	faa2 f38c 	sel	r3, r2, ip
  406b12:	2b00      	cmp	r3, #0
  406b14:	d0c6      	beq.n	406aa4 <strlen+0x24>
  406b16:	2a00      	cmp	r2, #0
  406b18:	bf04      	itt	eq
  406b1a:	3004      	addeq	r0, #4
  406b1c:	461a      	moveq	r2, r3
  406b1e:	ba12      	rev	r2, r2
  406b20:	fab2 f282 	clz	r2, r2
  406b24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406b28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406b2c:	4770      	bx	lr
  406b2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406b32:	f004 0503 	and.w	r5, r4, #3
  406b36:	f1c4 0000 	rsb	r0, r4, #0
  406b3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406b3e:	f014 0f04 	tst.w	r4, #4
  406b42:	f891 f040 	pld	[r1, #64]	; 0x40
  406b46:	fa0c f505 	lsl.w	r5, ip, r5
  406b4a:	ea62 0205 	orn	r2, r2, r5
  406b4e:	bf1c      	itt	ne
  406b50:	ea63 0305 	ornne	r3, r3, r5
  406b54:	4662      	movne	r2, ip
  406b56:	f04f 0400 	mov.w	r4, #0
  406b5a:	e7a9      	b.n	406ab0 <strlen+0x30>

00406b5c <strncpy>:
  406b5c:	ea40 0301 	orr.w	r3, r0, r1
  406b60:	f013 0f03 	tst.w	r3, #3
  406b64:	b470      	push	{r4, r5, r6}
  406b66:	4603      	mov	r3, r0
  406b68:	d024      	beq.n	406bb4 <strncpy+0x58>
  406b6a:	b1a2      	cbz	r2, 406b96 <strncpy+0x3a>
  406b6c:	780c      	ldrb	r4, [r1, #0]
  406b6e:	701c      	strb	r4, [r3, #0]
  406b70:	3a01      	subs	r2, #1
  406b72:	3301      	adds	r3, #1
  406b74:	3101      	adds	r1, #1
  406b76:	b13c      	cbz	r4, 406b88 <strncpy+0x2c>
  406b78:	b16a      	cbz	r2, 406b96 <strncpy+0x3a>
  406b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
  406b7e:	f803 4b01 	strb.w	r4, [r3], #1
  406b82:	3a01      	subs	r2, #1
  406b84:	2c00      	cmp	r4, #0
  406b86:	d1f7      	bne.n	406b78 <strncpy+0x1c>
  406b88:	b12a      	cbz	r2, 406b96 <strncpy+0x3a>
  406b8a:	441a      	add	r2, r3
  406b8c:	2100      	movs	r1, #0
  406b8e:	f803 1b01 	strb.w	r1, [r3], #1
  406b92:	429a      	cmp	r2, r3
  406b94:	d1fb      	bne.n	406b8e <strncpy+0x32>
  406b96:	bc70      	pop	{r4, r5, r6}
  406b98:	4770      	bx	lr
  406b9a:	460e      	mov	r6, r1
  406b9c:	f851 5b04 	ldr.w	r5, [r1], #4
  406ba0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  406ba4:	ea24 0405 	bic.w	r4, r4, r5
  406ba8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  406bac:	d105      	bne.n	406bba <strncpy+0x5e>
  406bae:	f843 5b04 	str.w	r5, [r3], #4
  406bb2:	3a04      	subs	r2, #4
  406bb4:	2a03      	cmp	r2, #3
  406bb6:	d8f0      	bhi.n	406b9a <strncpy+0x3e>
  406bb8:	e7d7      	b.n	406b6a <strncpy+0xe>
  406bba:	4631      	mov	r1, r6
  406bbc:	e7d6      	b.n	406b6c <strncpy+0x10>
  406bbe:	bf00      	nop

00406bc0 <_svfprintf_r>:
  406bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406bc4:	b0c3      	sub	sp, #268	; 0x10c
  406bc6:	460c      	mov	r4, r1
  406bc8:	910b      	str	r1, [sp, #44]	; 0x2c
  406bca:	4692      	mov	sl, r2
  406bcc:	930f      	str	r3, [sp, #60]	; 0x3c
  406bce:	900c      	str	r0, [sp, #48]	; 0x30
  406bd0:	f002 fa32 	bl	409038 <_localeconv_r>
  406bd4:	6803      	ldr	r3, [r0, #0]
  406bd6:	931a      	str	r3, [sp, #104]	; 0x68
  406bd8:	4618      	mov	r0, r3
  406bda:	f7ff ff51 	bl	406a80 <strlen>
  406bde:	89a3      	ldrh	r3, [r4, #12]
  406be0:	9019      	str	r0, [sp, #100]	; 0x64
  406be2:	0619      	lsls	r1, r3, #24
  406be4:	d503      	bpl.n	406bee <_svfprintf_r+0x2e>
  406be6:	6923      	ldr	r3, [r4, #16]
  406be8:	2b00      	cmp	r3, #0
  406bea:	f001 8003 	beq.w	407bf4 <_svfprintf_r+0x1034>
  406bee:	2300      	movs	r3, #0
  406bf0:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  406bf4:	9313      	str	r3, [sp, #76]	; 0x4c
  406bf6:	9315      	str	r3, [sp, #84]	; 0x54
  406bf8:	9314      	str	r3, [sp, #80]	; 0x50
  406bfa:	9327      	str	r3, [sp, #156]	; 0x9c
  406bfc:	9326      	str	r3, [sp, #152]	; 0x98
  406bfe:	9318      	str	r3, [sp, #96]	; 0x60
  406c00:	931b      	str	r3, [sp, #108]	; 0x6c
  406c02:	9309      	str	r3, [sp, #36]	; 0x24
  406c04:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  406c08:	46c8      	mov	r8, r9
  406c0a:	9316      	str	r3, [sp, #88]	; 0x58
  406c0c:	9317      	str	r3, [sp, #92]	; 0x5c
  406c0e:	f89a 3000 	ldrb.w	r3, [sl]
  406c12:	4654      	mov	r4, sl
  406c14:	b1e3      	cbz	r3, 406c50 <_svfprintf_r+0x90>
  406c16:	2b25      	cmp	r3, #37	; 0x25
  406c18:	d102      	bne.n	406c20 <_svfprintf_r+0x60>
  406c1a:	e019      	b.n	406c50 <_svfprintf_r+0x90>
  406c1c:	2b25      	cmp	r3, #37	; 0x25
  406c1e:	d003      	beq.n	406c28 <_svfprintf_r+0x68>
  406c20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406c24:	2b00      	cmp	r3, #0
  406c26:	d1f9      	bne.n	406c1c <_svfprintf_r+0x5c>
  406c28:	eba4 050a 	sub.w	r5, r4, sl
  406c2c:	b185      	cbz	r5, 406c50 <_svfprintf_r+0x90>
  406c2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406c30:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406c32:	f8c8 a000 	str.w	sl, [r8]
  406c36:	3301      	adds	r3, #1
  406c38:	442a      	add	r2, r5
  406c3a:	2b07      	cmp	r3, #7
  406c3c:	f8c8 5004 	str.w	r5, [r8, #4]
  406c40:	9227      	str	r2, [sp, #156]	; 0x9c
  406c42:	9326      	str	r3, [sp, #152]	; 0x98
  406c44:	dc7f      	bgt.n	406d46 <_svfprintf_r+0x186>
  406c46:	f108 0808 	add.w	r8, r8, #8
  406c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406c4c:	442b      	add	r3, r5
  406c4e:	9309      	str	r3, [sp, #36]	; 0x24
  406c50:	7823      	ldrb	r3, [r4, #0]
  406c52:	2b00      	cmp	r3, #0
  406c54:	d07f      	beq.n	406d56 <_svfprintf_r+0x196>
  406c56:	2300      	movs	r3, #0
  406c58:	461a      	mov	r2, r3
  406c5a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406c5e:	4619      	mov	r1, r3
  406c60:	930d      	str	r3, [sp, #52]	; 0x34
  406c62:	469b      	mov	fp, r3
  406c64:	f04f 30ff 	mov.w	r0, #4294967295
  406c68:	7863      	ldrb	r3, [r4, #1]
  406c6a:	900a      	str	r0, [sp, #40]	; 0x28
  406c6c:	f104 0a01 	add.w	sl, r4, #1
  406c70:	f10a 0a01 	add.w	sl, sl, #1
  406c74:	f1a3 0020 	sub.w	r0, r3, #32
  406c78:	2858      	cmp	r0, #88	; 0x58
  406c7a:	f200 83c1 	bhi.w	407400 <_svfprintf_r+0x840>
  406c7e:	e8df f010 	tbh	[pc, r0, lsl #1]
  406c82:	0238      	.short	0x0238
  406c84:	03bf03bf 	.word	0x03bf03bf
  406c88:	03bf0240 	.word	0x03bf0240
  406c8c:	03bf03bf 	.word	0x03bf03bf
  406c90:	03bf03bf 	.word	0x03bf03bf
  406c94:	024503bf 	.word	0x024503bf
  406c98:	03bf0203 	.word	0x03bf0203
  406c9c:	026b005d 	.word	0x026b005d
  406ca0:	028603bf 	.word	0x028603bf
  406ca4:	039d039d 	.word	0x039d039d
  406ca8:	039d039d 	.word	0x039d039d
  406cac:	039d039d 	.word	0x039d039d
  406cb0:	039d039d 	.word	0x039d039d
  406cb4:	03bf039d 	.word	0x03bf039d
  406cb8:	03bf03bf 	.word	0x03bf03bf
  406cbc:	03bf03bf 	.word	0x03bf03bf
  406cc0:	03bf03bf 	.word	0x03bf03bf
  406cc4:	03bf03bf 	.word	0x03bf03bf
  406cc8:	033703bf 	.word	0x033703bf
  406ccc:	03bf0357 	.word	0x03bf0357
  406cd0:	03bf0357 	.word	0x03bf0357
  406cd4:	03bf03bf 	.word	0x03bf03bf
  406cd8:	039803bf 	.word	0x039803bf
  406cdc:	03bf03bf 	.word	0x03bf03bf
  406ce0:	03bf03ad 	.word	0x03bf03ad
  406ce4:	03bf03bf 	.word	0x03bf03bf
  406ce8:	03bf03bf 	.word	0x03bf03bf
  406cec:	03bf0259 	.word	0x03bf0259
  406cf0:	031e03bf 	.word	0x031e03bf
  406cf4:	03bf03bf 	.word	0x03bf03bf
  406cf8:	03bf03bf 	.word	0x03bf03bf
  406cfc:	03bf03bf 	.word	0x03bf03bf
  406d00:	03bf03bf 	.word	0x03bf03bf
  406d04:	03bf03bf 	.word	0x03bf03bf
  406d08:	02db02c6 	.word	0x02db02c6
  406d0c:	03570357 	.word	0x03570357
  406d10:	028b0357 	.word	0x028b0357
  406d14:	03bf02db 	.word	0x03bf02db
  406d18:	029003bf 	.word	0x029003bf
  406d1c:	029d03bf 	.word	0x029d03bf
  406d20:	02b401cc 	.word	0x02b401cc
  406d24:	03bf0208 	.word	0x03bf0208
  406d28:	03bf01e1 	.word	0x03bf01e1
  406d2c:	03bf007e 	.word	0x03bf007e
  406d30:	020d03bf 	.word	0x020d03bf
  406d34:	980d      	ldr	r0, [sp, #52]	; 0x34
  406d36:	930f      	str	r3, [sp, #60]	; 0x3c
  406d38:	4240      	negs	r0, r0
  406d3a:	900d      	str	r0, [sp, #52]	; 0x34
  406d3c:	f04b 0b04 	orr.w	fp, fp, #4
  406d40:	f89a 3000 	ldrb.w	r3, [sl]
  406d44:	e794      	b.n	406c70 <_svfprintf_r+0xb0>
  406d46:	aa25      	add	r2, sp, #148	; 0x94
  406d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406d4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  406d4c:	f002 ffa0 	bl	409c90 <__ssprint_r>
  406d50:	b940      	cbnz	r0, 406d64 <_svfprintf_r+0x1a4>
  406d52:	46c8      	mov	r8, r9
  406d54:	e779      	b.n	406c4a <_svfprintf_r+0x8a>
  406d56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  406d58:	b123      	cbz	r3, 406d64 <_svfprintf_r+0x1a4>
  406d5a:	980c      	ldr	r0, [sp, #48]	; 0x30
  406d5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406d5e:	aa25      	add	r2, sp, #148	; 0x94
  406d60:	f002 ff96 	bl	409c90 <__ssprint_r>
  406d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406d66:	899b      	ldrh	r3, [r3, #12]
  406d68:	f013 0f40 	tst.w	r3, #64	; 0x40
  406d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406d6e:	bf18      	it	ne
  406d70:	f04f 33ff 	movne.w	r3, #4294967295
  406d74:	9309      	str	r3, [sp, #36]	; 0x24
  406d76:	9809      	ldr	r0, [sp, #36]	; 0x24
  406d78:	b043      	add	sp, #268	; 0x10c
  406d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d7e:	f01b 0f20 	tst.w	fp, #32
  406d82:	9311      	str	r3, [sp, #68]	; 0x44
  406d84:	f040 81dd 	bne.w	407142 <_svfprintf_r+0x582>
  406d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406d8a:	f01b 0f10 	tst.w	fp, #16
  406d8e:	4613      	mov	r3, r2
  406d90:	f040 856e 	bne.w	407870 <_svfprintf_r+0xcb0>
  406d94:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406d98:	f000 856a 	beq.w	407870 <_svfprintf_r+0xcb0>
  406d9c:	8814      	ldrh	r4, [r2, #0]
  406d9e:	3204      	adds	r2, #4
  406da0:	2500      	movs	r5, #0
  406da2:	2301      	movs	r3, #1
  406da4:	920f      	str	r2, [sp, #60]	; 0x3c
  406da6:	2700      	movs	r7, #0
  406da8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406dac:	990a      	ldr	r1, [sp, #40]	; 0x28
  406dae:	1c4a      	adds	r2, r1, #1
  406db0:	f000 8265 	beq.w	40727e <_svfprintf_r+0x6be>
  406db4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  406db8:	9207      	str	r2, [sp, #28]
  406dba:	ea54 0205 	orrs.w	r2, r4, r5
  406dbe:	f040 8264 	bne.w	40728a <_svfprintf_r+0x6ca>
  406dc2:	2900      	cmp	r1, #0
  406dc4:	f040 843c 	bne.w	407640 <_svfprintf_r+0xa80>
  406dc8:	2b00      	cmp	r3, #0
  406dca:	f040 84d7 	bne.w	40777c <_svfprintf_r+0xbbc>
  406dce:	f01b 0301 	ands.w	r3, fp, #1
  406dd2:	930e      	str	r3, [sp, #56]	; 0x38
  406dd4:	f000 8604 	beq.w	4079e0 <_svfprintf_r+0xe20>
  406dd8:	ae42      	add	r6, sp, #264	; 0x108
  406dda:	2330      	movs	r3, #48	; 0x30
  406ddc:	f806 3d41 	strb.w	r3, [r6, #-65]!
  406de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406de2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406de4:	4293      	cmp	r3, r2
  406de6:	bfb8      	it	lt
  406de8:	4613      	movlt	r3, r2
  406dea:	9308      	str	r3, [sp, #32]
  406dec:	2300      	movs	r3, #0
  406dee:	9312      	str	r3, [sp, #72]	; 0x48
  406df0:	b117      	cbz	r7, 406df8 <_svfprintf_r+0x238>
  406df2:	9b08      	ldr	r3, [sp, #32]
  406df4:	3301      	adds	r3, #1
  406df6:	9308      	str	r3, [sp, #32]
  406df8:	9b07      	ldr	r3, [sp, #28]
  406dfa:	f013 0302 	ands.w	r3, r3, #2
  406dfe:	9310      	str	r3, [sp, #64]	; 0x40
  406e00:	d002      	beq.n	406e08 <_svfprintf_r+0x248>
  406e02:	9b08      	ldr	r3, [sp, #32]
  406e04:	3302      	adds	r3, #2
  406e06:	9308      	str	r3, [sp, #32]
  406e08:	9b07      	ldr	r3, [sp, #28]
  406e0a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  406e0e:	f040 830e 	bne.w	40742e <_svfprintf_r+0x86e>
  406e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406e14:	9a08      	ldr	r2, [sp, #32]
  406e16:	eba3 0b02 	sub.w	fp, r3, r2
  406e1a:	f1bb 0f00 	cmp.w	fp, #0
  406e1e:	f340 8306 	ble.w	40742e <_svfprintf_r+0x86e>
  406e22:	f1bb 0f10 	cmp.w	fp, #16
  406e26:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406e28:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406e2a:	dd29      	ble.n	406e80 <_svfprintf_r+0x2c0>
  406e2c:	4643      	mov	r3, r8
  406e2e:	4621      	mov	r1, r4
  406e30:	46a8      	mov	r8, r5
  406e32:	2710      	movs	r7, #16
  406e34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406e36:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406e38:	e006      	b.n	406e48 <_svfprintf_r+0x288>
  406e3a:	f1ab 0b10 	sub.w	fp, fp, #16
  406e3e:	f1bb 0f10 	cmp.w	fp, #16
  406e42:	f103 0308 	add.w	r3, r3, #8
  406e46:	dd18      	ble.n	406e7a <_svfprintf_r+0x2ba>
  406e48:	3201      	adds	r2, #1
  406e4a:	48b7      	ldr	r0, [pc, #732]	; (407128 <_svfprintf_r+0x568>)
  406e4c:	9226      	str	r2, [sp, #152]	; 0x98
  406e4e:	3110      	adds	r1, #16
  406e50:	2a07      	cmp	r2, #7
  406e52:	9127      	str	r1, [sp, #156]	; 0x9c
  406e54:	e883 0081 	stmia.w	r3, {r0, r7}
  406e58:	ddef      	ble.n	406e3a <_svfprintf_r+0x27a>
  406e5a:	aa25      	add	r2, sp, #148	; 0x94
  406e5c:	4629      	mov	r1, r5
  406e5e:	4620      	mov	r0, r4
  406e60:	f002 ff16 	bl	409c90 <__ssprint_r>
  406e64:	2800      	cmp	r0, #0
  406e66:	f47f af7d 	bne.w	406d64 <_svfprintf_r+0x1a4>
  406e6a:	f1ab 0b10 	sub.w	fp, fp, #16
  406e6e:	f1bb 0f10 	cmp.w	fp, #16
  406e72:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406e74:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406e76:	464b      	mov	r3, r9
  406e78:	dce6      	bgt.n	406e48 <_svfprintf_r+0x288>
  406e7a:	4645      	mov	r5, r8
  406e7c:	460c      	mov	r4, r1
  406e7e:	4698      	mov	r8, r3
  406e80:	3201      	adds	r2, #1
  406e82:	4ba9      	ldr	r3, [pc, #676]	; (407128 <_svfprintf_r+0x568>)
  406e84:	9226      	str	r2, [sp, #152]	; 0x98
  406e86:	445c      	add	r4, fp
  406e88:	2a07      	cmp	r2, #7
  406e8a:	9427      	str	r4, [sp, #156]	; 0x9c
  406e8c:	e888 0808 	stmia.w	r8, {r3, fp}
  406e90:	f300 8498 	bgt.w	4077c4 <_svfprintf_r+0xc04>
  406e94:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406e98:	f108 0808 	add.w	r8, r8, #8
  406e9c:	b177      	cbz	r7, 406ebc <_svfprintf_r+0x2fc>
  406e9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406ea0:	3301      	adds	r3, #1
  406ea2:	3401      	adds	r4, #1
  406ea4:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  406ea8:	2201      	movs	r2, #1
  406eaa:	2b07      	cmp	r3, #7
  406eac:	9427      	str	r4, [sp, #156]	; 0x9c
  406eae:	9326      	str	r3, [sp, #152]	; 0x98
  406eb0:	e888 0006 	stmia.w	r8, {r1, r2}
  406eb4:	f300 83db 	bgt.w	40766e <_svfprintf_r+0xaae>
  406eb8:	f108 0808 	add.w	r8, r8, #8
  406ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406ebe:	b16b      	cbz	r3, 406edc <_svfprintf_r+0x31c>
  406ec0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406ec2:	3301      	adds	r3, #1
  406ec4:	3402      	adds	r4, #2
  406ec6:	a91e      	add	r1, sp, #120	; 0x78
  406ec8:	2202      	movs	r2, #2
  406eca:	2b07      	cmp	r3, #7
  406ecc:	9427      	str	r4, [sp, #156]	; 0x9c
  406ece:	9326      	str	r3, [sp, #152]	; 0x98
  406ed0:	e888 0006 	stmia.w	r8, {r1, r2}
  406ed4:	f300 83d6 	bgt.w	407684 <_svfprintf_r+0xac4>
  406ed8:	f108 0808 	add.w	r8, r8, #8
  406edc:	2d80      	cmp	r5, #128	; 0x80
  406ede:	f000 8315 	beq.w	40750c <_svfprintf_r+0x94c>
  406ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ee4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406ee6:	1a9f      	subs	r7, r3, r2
  406ee8:	2f00      	cmp	r7, #0
  406eea:	dd36      	ble.n	406f5a <_svfprintf_r+0x39a>
  406eec:	2f10      	cmp	r7, #16
  406eee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406ef0:	4d8e      	ldr	r5, [pc, #568]	; (40712c <_svfprintf_r+0x56c>)
  406ef2:	dd27      	ble.n	406f44 <_svfprintf_r+0x384>
  406ef4:	4642      	mov	r2, r8
  406ef6:	4621      	mov	r1, r4
  406ef8:	46b0      	mov	r8, r6
  406efa:	f04f 0b10 	mov.w	fp, #16
  406efe:	462e      	mov	r6, r5
  406f00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406f02:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406f04:	e004      	b.n	406f10 <_svfprintf_r+0x350>
  406f06:	3f10      	subs	r7, #16
  406f08:	2f10      	cmp	r7, #16
  406f0a:	f102 0208 	add.w	r2, r2, #8
  406f0e:	dd15      	ble.n	406f3c <_svfprintf_r+0x37c>
  406f10:	3301      	adds	r3, #1
  406f12:	3110      	adds	r1, #16
  406f14:	2b07      	cmp	r3, #7
  406f16:	9127      	str	r1, [sp, #156]	; 0x9c
  406f18:	9326      	str	r3, [sp, #152]	; 0x98
  406f1a:	e882 0840 	stmia.w	r2, {r6, fp}
  406f1e:	ddf2      	ble.n	406f06 <_svfprintf_r+0x346>
  406f20:	aa25      	add	r2, sp, #148	; 0x94
  406f22:	4629      	mov	r1, r5
  406f24:	4620      	mov	r0, r4
  406f26:	f002 feb3 	bl	409c90 <__ssprint_r>
  406f2a:	2800      	cmp	r0, #0
  406f2c:	f47f af1a 	bne.w	406d64 <_svfprintf_r+0x1a4>
  406f30:	3f10      	subs	r7, #16
  406f32:	2f10      	cmp	r7, #16
  406f34:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406f36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f38:	464a      	mov	r2, r9
  406f3a:	dce9      	bgt.n	406f10 <_svfprintf_r+0x350>
  406f3c:	4635      	mov	r5, r6
  406f3e:	460c      	mov	r4, r1
  406f40:	4646      	mov	r6, r8
  406f42:	4690      	mov	r8, r2
  406f44:	3301      	adds	r3, #1
  406f46:	443c      	add	r4, r7
  406f48:	2b07      	cmp	r3, #7
  406f4a:	9427      	str	r4, [sp, #156]	; 0x9c
  406f4c:	9326      	str	r3, [sp, #152]	; 0x98
  406f4e:	e888 00a0 	stmia.w	r8, {r5, r7}
  406f52:	f300 8381 	bgt.w	407658 <_svfprintf_r+0xa98>
  406f56:	f108 0808 	add.w	r8, r8, #8
  406f5a:	9b07      	ldr	r3, [sp, #28]
  406f5c:	05df      	lsls	r7, r3, #23
  406f5e:	f100 8268 	bmi.w	407432 <_svfprintf_r+0x872>
  406f62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f64:	990e      	ldr	r1, [sp, #56]	; 0x38
  406f66:	f8c8 6000 	str.w	r6, [r8]
  406f6a:	3301      	adds	r3, #1
  406f6c:	440c      	add	r4, r1
  406f6e:	2b07      	cmp	r3, #7
  406f70:	9427      	str	r4, [sp, #156]	; 0x9c
  406f72:	f8c8 1004 	str.w	r1, [r8, #4]
  406f76:	9326      	str	r3, [sp, #152]	; 0x98
  406f78:	f300 834d 	bgt.w	407616 <_svfprintf_r+0xa56>
  406f7c:	f108 0808 	add.w	r8, r8, #8
  406f80:	9b07      	ldr	r3, [sp, #28]
  406f82:	075b      	lsls	r3, r3, #29
  406f84:	d53a      	bpl.n	406ffc <_svfprintf_r+0x43c>
  406f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406f88:	9a08      	ldr	r2, [sp, #32]
  406f8a:	1a9d      	subs	r5, r3, r2
  406f8c:	2d00      	cmp	r5, #0
  406f8e:	dd35      	ble.n	406ffc <_svfprintf_r+0x43c>
  406f90:	2d10      	cmp	r5, #16
  406f92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f94:	dd20      	ble.n	406fd8 <_svfprintf_r+0x418>
  406f96:	2610      	movs	r6, #16
  406f98:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406f9a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  406f9e:	e004      	b.n	406faa <_svfprintf_r+0x3ea>
  406fa0:	3d10      	subs	r5, #16
  406fa2:	2d10      	cmp	r5, #16
  406fa4:	f108 0808 	add.w	r8, r8, #8
  406fa8:	dd16      	ble.n	406fd8 <_svfprintf_r+0x418>
  406faa:	3301      	adds	r3, #1
  406fac:	4a5e      	ldr	r2, [pc, #376]	; (407128 <_svfprintf_r+0x568>)
  406fae:	9326      	str	r3, [sp, #152]	; 0x98
  406fb0:	3410      	adds	r4, #16
  406fb2:	2b07      	cmp	r3, #7
  406fb4:	9427      	str	r4, [sp, #156]	; 0x9c
  406fb6:	e888 0044 	stmia.w	r8, {r2, r6}
  406fba:	ddf1      	ble.n	406fa0 <_svfprintf_r+0x3e0>
  406fbc:	aa25      	add	r2, sp, #148	; 0x94
  406fbe:	4659      	mov	r1, fp
  406fc0:	4638      	mov	r0, r7
  406fc2:	f002 fe65 	bl	409c90 <__ssprint_r>
  406fc6:	2800      	cmp	r0, #0
  406fc8:	f47f aecc 	bne.w	406d64 <_svfprintf_r+0x1a4>
  406fcc:	3d10      	subs	r5, #16
  406fce:	2d10      	cmp	r5, #16
  406fd0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406fd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406fd4:	46c8      	mov	r8, r9
  406fd6:	dce8      	bgt.n	406faa <_svfprintf_r+0x3ea>
  406fd8:	3301      	adds	r3, #1
  406fda:	4a53      	ldr	r2, [pc, #332]	; (407128 <_svfprintf_r+0x568>)
  406fdc:	9326      	str	r3, [sp, #152]	; 0x98
  406fde:	442c      	add	r4, r5
  406fe0:	2b07      	cmp	r3, #7
  406fe2:	9427      	str	r4, [sp, #156]	; 0x9c
  406fe4:	e888 0024 	stmia.w	r8, {r2, r5}
  406fe8:	dd08      	ble.n	406ffc <_svfprintf_r+0x43c>
  406fea:	aa25      	add	r2, sp, #148	; 0x94
  406fec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406fee:	980c      	ldr	r0, [sp, #48]	; 0x30
  406ff0:	f002 fe4e 	bl	409c90 <__ssprint_r>
  406ff4:	2800      	cmp	r0, #0
  406ff6:	f47f aeb5 	bne.w	406d64 <_svfprintf_r+0x1a4>
  406ffa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407000:	9908      	ldr	r1, [sp, #32]
  407002:	428a      	cmp	r2, r1
  407004:	bfac      	ite	ge
  407006:	189b      	addge	r3, r3, r2
  407008:	185b      	addlt	r3, r3, r1
  40700a:	9309      	str	r3, [sp, #36]	; 0x24
  40700c:	2c00      	cmp	r4, #0
  40700e:	f040 830d 	bne.w	40762c <_svfprintf_r+0xa6c>
  407012:	2300      	movs	r3, #0
  407014:	9326      	str	r3, [sp, #152]	; 0x98
  407016:	46c8      	mov	r8, r9
  407018:	e5f9      	b.n	406c0e <_svfprintf_r+0x4e>
  40701a:	9311      	str	r3, [sp, #68]	; 0x44
  40701c:	f01b 0320 	ands.w	r3, fp, #32
  407020:	f040 81e3 	bne.w	4073ea <_svfprintf_r+0x82a>
  407024:	f01b 0210 	ands.w	r2, fp, #16
  407028:	f040 842e 	bne.w	407888 <_svfprintf_r+0xcc8>
  40702c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  407030:	f000 842a 	beq.w	407888 <_svfprintf_r+0xcc8>
  407034:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407036:	4613      	mov	r3, r2
  407038:	460a      	mov	r2, r1
  40703a:	3204      	adds	r2, #4
  40703c:	880c      	ldrh	r4, [r1, #0]
  40703e:	920f      	str	r2, [sp, #60]	; 0x3c
  407040:	2500      	movs	r5, #0
  407042:	e6b0      	b.n	406da6 <_svfprintf_r+0x1e6>
  407044:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407046:	9311      	str	r3, [sp, #68]	; 0x44
  407048:	6816      	ldr	r6, [r2, #0]
  40704a:	2400      	movs	r4, #0
  40704c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  407050:	1d15      	adds	r5, r2, #4
  407052:	2e00      	cmp	r6, #0
  407054:	f000 86a7 	beq.w	407da6 <_svfprintf_r+0x11e6>
  407058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40705a:	1c53      	adds	r3, r2, #1
  40705c:	f000 8609 	beq.w	407c72 <_svfprintf_r+0x10b2>
  407060:	4621      	mov	r1, r4
  407062:	4630      	mov	r0, r6
  407064:	f002 faac 	bl	4095c0 <memchr>
  407068:	2800      	cmp	r0, #0
  40706a:	f000 86e1 	beq.w	407e30 <_svfprintf_r+0x1270>
  40706e:	1b83      	subs	r3, r0, r6
  407070:	930e      	str	r3, [sp, #56]	; 0x38
  407072:	940a      	str	r4, [sp, #40]	; 0x28
  407074:	950f      	str	r5, [sp, #60]	; 0x3c
  407076:	f8cd b01c 	str.w	fp, [sp, #28]
  40707a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40707e:	9308      	str	r3, [sp, #32]
  407080:	9412      	str	r4, [sp, #72]	; 0x48
  407082:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407086:	e6b3      	b.n	406df0 <_svfprintf_r+0x230>
  407088:	f89a 3000 	ldrb.w	r3, [sl]
  40708c:	2201      	movs	r2, #1
  40708e:	212b      	movs	r1, #43	; 0x2b
  407090:	e5ee      	b.n	406c70 <_svfprintf_r+0xb0>
  407092:	f04b 0b20 	orr.w	fp, fp, #32
  407096:	f89a 3000 	ldrb.w	r3, [sl]
  40709a:	e5e9      	b.n	406c70 <_svfprintf_r+0xb0>
  40709c:	9311      	str	r3, [sp, #68]	; 0x44
  40709e:	2a00      	cmp	r2, #0
  4070a0:	f040 8795 	bne.w	407fce <_svfprintf_r+0x140e>
  4070a4:	4b22      	ldr	r3, [pc, #136]	; (407130 <_svfprintf_r+0x570>)
  4070a6:	9318      	str	r3, [sp, #96]	; 0x60
  4070a8:	f01b 0f20 	tst.w	fp, #32
  4070ac:	f040 8111 	bne.w	4072d2 <_svfprintf_r+0x712>
  4070b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4070b2:	f01b 0f10 	tst.w	fp, #16
  4070b6:	4613      	mov	r3, r2
  4070b8:	f040 83e1 	bne.w	40787e <_svfprintf_r+0xcbe>
  4070bc:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4070c0:	f000 83dd 	beq.w	40787e <_svfprintf_r+0xcbe>
  4070c4:	3304      	adds	r3, #4
  4070c6:	8814      	ldrh	r4, [r2, #0]
  4070c8:	930f      	str	r3, [sp, #60]	; 0x3c
  4070ca:	2500      	movs	r5, #0
  4070cc:	f01b 0f01 	tst.w	fp, #1
  4070d0:	f000 810c 	beq.w	4072ec <_svfprintf_r+0x72c>
  4070d4:	ea54 0305 	orrs.w	r3, r4, r5
  4070d8:	f000 8108 	beq.w	4072ec <_svfprintf_r+0x72c>
  4070dc:	2330      	movs	r3, #48	; 0x30
  4070de:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4070e2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4070e6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4070ea:	f04b 0b02 	orr.w	fp, fp, #2
  4070ee:	2302      	movs	r3, #2
  4070f0:	e659      	b.n	406da6 <_svfprintf_r+0x1e6>
  4070f2:	f89a 3000 	ldrb.w	r3, [sl]
  4070f6:	2900      	cmp	r1, #0
  4070f8:	f47f adba 	bne.w	406c70 <_svfprintf_r+0xb0>
  4070fc:	2201      	movs	r2, #1
  4070fe:	2120      	movs	r1, #32
  407100:	e5b6      	b.n	406c70 <_svfprintf_r+0xb0>
  407102:	f04b 0b01 	orr.w	fp, fp, #1
  407106:	f89a 3000 	ldrb.w	r3, [sl]
  40710a:	e5b1      	b.n	406c70 <_svfprintf_r+0xb0>
  40710c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40710e:	6823      	ldr	r3, [r4, #0]
  407110:	930d      	str	r3, [sp, #52]	; 0x34
  407112:	4618      	mov	r0, r3
  407114:	2800      	cmp	r0, #0
  407116:	4623      	mov	r3, r4
  407118:	f103 0304 	add.w	r3, r3, #4
  40711c:	f6ff ae0a 	blt.w	406d34 <_svfprintf_r+0x174>
  407120:	930f      	str	r3, [sp, #60]	; 0x3c
  407122:	f89a 3000 	ldrb.w	r3, [sl]
  407126:	e5a3      	b.n	406c70 <_svfprintf_r+0xb0>
  407128:	0040b6e8 	.word	0x0040b6e8
  40712c:	0040b6f8 	.word	0x0040b6f8
  407130:	0040b6c8 	.word	0x0040b6c8
  407134:	f04b 0b10 	orr.w	fp, fp, #16
  407138:	f01b 0f20 	tst.w	fp, #32
  40713c:	9311      	str	r3, [sp, #68]	; 0x44
  40713e:	f43f ae23 	beq.w	406d88 <_svfprintf_r+0x1c8>
  407142:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407144:	3507      	adds	r5, #7
  407146:	f025 0307 	bic.w	r3, r5, #7
  40714a:	f103 0208 	add.w	r2, r3, #8
  40714e:	e9d3 4500 	ldrd	r4, r5, [r3]
  407152:	920f      	str	r2, [sp, #60]	; 0x3c
  407154:	2301      	movs	r3, #1
  407156:	e626      	b.n	406da6 <_svfprintf_r+0x1e6>
  407158:	f89a 3000 	ldrb.w	r3, [sl]
  40715c:	2b2a      	cmp	r3, #42	; 0x2a
  40715e:	f10a 0401 	add.w	r4, sl, #1
  407162:	f000 8727 	beq.w	407fb4 <_svfprintf_r+0x13f4>
  407166:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40716a:	2809      	cmp	r0, #9
  40716c:	46a2      	mov	sl, r4
  40716e:	f200 86ad 	bhi.w	407ecc <_svfprintf_r+0x130c>
  407172:	2300      	movs	r3, #0
  407174:	461c      	mov	r4, r3
  407176:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40717a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40717e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  407182:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  407186:	2809      	cmp	r0, #9
  407188:	d9f5      	bls.n	407176 <_svfprintf_r+0x5b6>
  40718a:	940a      	str	r4, [sp, #40]	; 0x28
  40718c:	e572      	b.n	406c74 <_svfprintf_r+0xb4>
  40718e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  407192:	f89a 3000 	ldrb.w	r3, [sl]
  407196:	e56b      	b.n	406c70 <_svfprintf_r+0xb0>
  407198:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40719c:	f89a 3000 	ldrb.w	r3, [sl]
  4071a0:	e566      	b.n	406c70 <_svfprintf_r+0xb0>
  4071a2:	f89a 3000 	ldrb.w	r3, [sl]
  4071a6:	2b6c      	cmp	r3, #108	; 0x6c
  4071a8:	bf03      	ittte	eq
  4071aa:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  4071ae:	f04b 0b20 	orreq.w	fp, fp, #32
  4071b2:	f10a 0a01 	addeq.w	sl, sl, #1
  4071b6:	f04b 0b10 	orrne.w	fp, fp, #16
  4071ba:	e559      	b.n	406c70 <_svfprintf_r+0xb0>
  4071bc:	2a00      	cmp	r2, #0
  4071be:	f040 8711 	bne.w	407fe4 <_svfprintf_r+0x1424>
  4071c2:	f01b 0f20 	tst.w	fp, #32
  4071c6:	f040 84f9 	bne.w	407bbc <_svfprintf_r+0xffc>
  4071ca:	f01b 0f10 	tst.w	fp, #16
  4071ce:	f040 84ac 	bne.w	407b2a <_svfprintf_r+0xf6a>
  4071d2:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4071d6:	f000 84a8 	beq.w	407b2a <_svfprintf_r+0xf6a>
  4071da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4071dc:	6813      	ldr	r3, [r2, #0]
  4071de:	3204      	adds	r2, #4
  4071e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4071e2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  4071e6:	801a      	strh	r2, [r3, #0]
  4071e8:	e511      	b.n	406c0e <_svfprintf_r+0x4e>
  4071ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4071ec:	4bb3      	ldr	r3, [pc, #716]	; (4074bc <_svfprintf_r+0x8fc>)
  4071ee:	680c      	ldr	r4, [r1, #0]
  4071f0:	9318      	str	r3, [sp, #96]	; 0x60
  4071f2:	2230      	movs	r2, #48	; 0x30
  4071f4:	2378      	movs	r3, #120	; 0x78
  4071f6:	3104      	adds	r1, #4
  4071f8:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4071fc:	9311      	str	r3, [sp, #68]	; 0x44
  4071fe:	f04b 0b02 	orr.w	fp, fp, #2
  407202:	910f      	str	r1, [sp, #60]	; 0x3c
  407204:	2500      	movs	r5, #0
  407206:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40720a:	2302      	movs	r3, #2
  40720c:	e5cb      	b.n	406da6 <_svfprintf_r+0x1e6>
  40720e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407210:	9311      	str	r3, [sp, #68]	; 0x44
  407212:	680a      	ldr	r2, [r1, #0]
  407214:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  407218:	2300      	movs	r3, #0
  40721a:	460a      	mov	r2, r1
  40721c:	461f      	mov	r7, r3
  40721e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407222:	3204      	adds	r2, #4
  407224:	2301      	movs	r3, #1
  407226:	9308      	str	r3, [sp, #32]
  407228:	f8cd b01c 	str.w	fp, [sp, #28]
  40722c:	970a      	str	r7, [sp, #40]	; 0x28
  40722e:	9712      	str	r7, [sp, #72]	; 0x48
  407230:	920f      	str	r2, [sp, #60]	; 0x3c
  407232:	930e      	str	r3, [sp, #56]	; 0x38
  407234:	ae28      	add	r6, sp, #160	; 0xa0
  407236:	e5df      	b.n	406df8 <_svfprintf_r+0x238>
  407238:	9311      	str	r3, [sp, #68]	; 0x44
  40723a:	2a00      	cmp	r2, #0
  40723c:	f040 86ea 	bne.w	408014 <_svfprintf_r+0x1454>
  407240:	f01b 0f20 	tst.w	fp, #32
  407244:	d15d      	bne.n	407302 <_svfprintf_r+0x742>
  407246:	f01b 0f10 	tst.w	fp, #16
  40724a:	f040 8308 	bne.w	40785e <_svfprintf_r+0xc9e>
  40724e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  407252:	f000 8304 	beq.w	40785e <_svfprintf_r+0xc9e>
  407256:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407258:	f9b1 4000 	ldrsh.w	r4, [r1]
  40725c:	3104      	adds	r1, #4
  40725e:	17e5      	asrs	r5, r4, #31
  407260:	4622      	mov	r2, r4
  407262:	462b      	mov	r3, r5
  407264:	910f      	str	r1, [sp, #60]	; 0x3c
  407266:	2a00      	cmp	r2, #0
  407268:	f173 0300 	sbcs.w	r3, r3, #0
  40726c:	db58      	blt.n	407320 <_svfprintf_r+0x760>
  40726e:	990a      	ldr	r1, [sp, #40]	; 0x28
  407270:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407274:	1c4a      	adds	r2, r1, #1
  407276:	f04f 0301 	mov.w	r3, #1
  40727a:	f47f ad9b 	bne.w	406db4 <_svfprintf_r+0x1f4>
  40727e:	ea54 0205 	orrs.w	r2, r4, r5
  407282:	f000 81df 	beq.w	407644 <_svfprintf_r+0xa84>
  407286:	f8cd b01c 	str.w	fp, [sp, #28]
  40728a:	2b01      	cmp	r3, #1
  40728c:	f000 827b 	beq.w	407786 <_svfprintf_r+0xbc6>
  407290:	2b02      	cmp	r3, #2
  407292:	f040 8206 	bne.w	4076a2 <_svfprintf_r+0xae2>
  407296:	9818      	ldr	r0, [sp, #96]	; 0x60
  407298:	464e      	mov	r6, r9
  40729a:	0923      	lsrs	r3, r4, #4
  40729c:	f004 010f 	and.w	r1, r4, #15
  4072a0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  4072a4:	092a      	lsrs	r2, r5, #4
  4072a6:	461c      	mov	r4, r3
  4072a8:	4615      	mov	r5, r2
  4072aa:	5c43      	ldrb	r3, [r0, r1]
  4072ac:	f806 3d01 	strb.w	r3, [r6, #-1]!
  4072b0:	ea54 0305 	orrs.w	r3, r4, r5
  4072b4:	d1f1      	bne.n	40729a <_svfprintf_r+0x6da>
  4072b6:	eba9 0306 	sub.w	r3, r9, r6
  4072ba:	930e      	str	r3, [sp, #56]	; 0x38
  4072bc:	e590      	b.n	406de0 <_svfprintf_r+0x220>
  4072be:	9311      	str	r3, [sp, #68]	; 0x44
  4072c0:	2a00      	cmp	r2, #0
  4072c2:	f040 86a3 	bne.w	40800c <_svfprintf_r+0x144c>
  4072c6:	4b7e      	ldr	r3, [pc, #504]	; (4074c0 <_svfprintf_r+0x900>)
  4072c8:	9318      	str	r3, [sp, #96]	; 0x60
  4072ca:	f01b 0f20 	tst.w	fp, #32
  4072ce:	f43f aeef 	beq.w	4070b0 <_svfprintf_r+0x4f0>
  4072d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4072d4:	3507      	adds	r5, #7
  4072d6:	f025 0307 	bic.w	r3, r5, #7
  4072da:	f103 0208 	add.w	r2, r3, #8
  4072de:	f01b 0f01 	tst.w	fp, #1
  4072e2:	920f      	str	r2, [sp, #60]	; 0x3c
  4072e4:	e9d3 4500 	ldrd	r4, r5, [r3]
  4072e8:	f47f aef4 	bne.w	4070d4 <_svfprintf_r+0x514>
  4072ec:	2302      	movs	r3, #2
  4072ee:	e55a      	b.n	406da6 <_svfprintf_r+0x1e6>
  4072f0:	9311      	str	r3, [sp, #68]	; 0x44
  4072f2:	2a00      	cmp	r2, #0
  4072f4:	f040 8686 	bne.w	408004 <_svfprintf_r+0x1444>
  4072f8:	f04b 0b10 	orr.w	fp, fp, #16
  4072fc:	f01b 0f20 	tst.w	fp, #32
  407300:	d0a1      	beq.n	407246 <_svfprintf_r+0x686>
  407302:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407304:	3507      	adds	r5, #7
  407306:	f025 0507 	bic.w	r5, r5, #7
  40730a:	e9d5 2300 	ldrd	r2, r3, [r5]
  40730e:	2a00      	cmp	r2, #0
  407310:	f105 0108 	add.w	r1, r5, #8
  407314:	461d      	mov	r5, r3
  407316:	f173 0300 	sbcs.w	r3, r3, #0
  40731a:	910f      	str	r1, [sp, #60]	; 0x3c
  40731c:	4614      	mov	r4, r2
  40731e:	daa6      	bge.n	40726e <_svfprintf_r+0x6ae>
  407320:	272d      	movs	r7, #45	; 0x2d
  407322:	4264      	negs	r4, r4
  407324:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  407328:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40732c:	2301      	movs	r3, #1
  40732e:	e53d      	b.n	406dac <_svfprintf_r+0x1ec>
  407330:	9311      	str	r3, [sp, #68]	; 0x44
  407332:	2a00      	cmp	r2, #0
  407334:	f040 8662 	bne.w	407ffc <_svfprintf_r+0x143c>
  407338:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40733a:	3507      	adds	r5, #7
  40733c:	f025 0307 	bic.w	r3, r5, #7
  407340:	f103 0208 	add.w	r2, r3, #8
  407344:	920f      	str	r2, [sp, #60]	; 0x3c
  407346:	681a      	ldr	r2, [r3, #0]
  407348:	9215      	str	r2, [sp, #84]	; 0x54
  40734a:	685b      	ldr	r3, [r3, #4]
  40734c:	9314      	str	r3, [sp, #80]	; 0x50
  40734e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407350:	9d15      	ldr	r5, [sp, #84]	; 0x54
  407352:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  407356:	4628      	mov	r0, r5
  407358:	4621      	mov	r1, r4
  40735a:	f04f 32ff 	mov.w	r2, #4294967295
  40735e:	4b59      	ldr	r3, [pc, #356]	; (4074c4 <_svfprintf_r+0x904>)
  407360:	f003 fd5c 	bl	40ae1c <__aeabi_dcmpun>
  407364:	2800      	cmp	r0, #0
  407366:	f040 834a 	bne.w	4079fe <_svfprintf_r+0xe3e>
  40736a:	4628      	mov	r0, r5
  40736c:	4621      	mov	r1, r4
  40736e:	f04f 32ff 	mov.w	r2, #4294967295
  407372:	4b54      	ldr	r3, [pc, #336]	; (4074c4 <_svfprintf_r+0x904>)
  407374:	f003 fd34 	bl	40ade0 <__aeabi_dcmple>
  407378:	2800      	cmp	r0, #0
  40737a:	f040 8340 	bne.w	4079fe <_svfprintf_r+0xe3e>
  40737e:	a815      	add	r0, sp, #84	; 0x54
  407380:	c80d      	ldmia	r0, {r0, r2, r3}
  407382:	9914      	ldr	r1, [sp, #80]	; 0x50
  407384:	f003 fd22 	bl	40adcc <__aeabi_dcmplt>
  407388:	2800      	cmp	r0, #0
  40738a:	f040 8530 	bne.w	407dee <_svfprintf_r+0x122e>
  40738e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407392:	4e4d      	ldr	r6, [pc, #308]	; (4074c8 <_svfprintf_r+0x908>)
  407394:	4b4d      	ldr	r3, [pc, #308]	; (4074cc <_svfprintf_r+0x90c>)
  407396:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40739a:	9007      	str	r0, [sp, #28]
  40739c:	9811      	ldr	r0, [sp, #68]	; 0x44
  40739e:	2203      	movs	r2, #3
  4073a0:	2100      	movs	r1, #0
  4073a2:	9208      	str	r2, [sp, #32]
  4073a4:	910a      	str	r1, [sp, #40]	; 0x28
  4073a6:	2847      	cmp	r0, #71	; 0x47
  4073a8:	bfd8      	it	le
  4073aa:	461e      	movle	r6, r3
  4073ac:	920e      	str	r2, [sp, #56]	; 0x38
  4073ae:	9112      	str	r1, [sp, #72]	; 0x48
  4073b0:	e51e      	b.n	406df0 <_svfprintf_r+0x230>
  4073b2:	f04b 0b08 	orr.w	fp, fp, #8
  4073b6:	f89a 3000 	ldrb.w	r3, [sl]
  4073ba:	e459      	b.n	406c70 <_svfprintf_r+0xb0>
  4073bc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4073c0:	2300      	movs	r3, #0
  4073c2:	461c      	mov	r4, r3
  4073c4:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4073c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4073cc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4073d0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4073d4:	2809      	cmp	r0, #9
  4073d6:	d9f5      	bls.n	4073c4 <_svfprintf_r+0x804>
  4073d8:	940d      	str	r4, [sp, #52]	; 0x34
  4073da:	e44b      	b.n	406c74 <_svfprintf_r+0xb4>
  4073dc:	f04b 0b10 	orr.w	fp, fp, #16
  4073e0:	9311      	str	r3, [sp, #68]	; 0x44
  4073e2:	f01b 0320 	ands.w	r3, fp, #32
  4073e6:	f43f ae1d 	beq.w	407024 <_svfprintf_r+0x464>
  4073ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4073ec:	3507      	adds	r5, #7
  4073ee:	f025 0307 	bic.w	r3, r5, #7
  4073f2:	f103 0208 	add.w	r2, r3, #8
  4073f6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4073fa:	920f      	str	r2, [sp, #60]	; 0x3c
  4073fc:	2300      	movs	r3, #0
  4073fe:	e4d2      	b.n	406da6 <_svfprintf_r+0x1e6>
  407400:	9311      	str	r3, [sp, #68]	; 0x44
  407402:	2a00      	cmp	r2, #0
  407404:	f040 85e7 	bne.w	407fd6 <_svfprintf_r+0x1416>
  407408:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40740a:	2a00      	cmp	r2, #0
  40740c:	f43f aca3 	beq.w	406d56 <_svfprintf_r+0x196>
  407410:	2300      	movs	r3, #0
  407412:	2101      	movs	r1, #1
  407414:	461f      	mov	r7, r3
  407416:	9108      	str	r1, [sp, #32]
  407418:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40741c:	f8cd b01c 	str.w	fp, [sp, #28]
  407420:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  407424:	930a      	str	r3, [sp, #40]	; 0x28
  407426:	9312      	str	r3, [sp, #72]	; 0x48
  407428:	910e      	str	r1, [sp, #56]	; 0x38
  40742a:	ae28      	add	r6, sp, #160	; 0xa0
  40742c:	e4e4      	b.n	406df8 <_svfprintf_r+0x238>
  40742e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407430:	e534      	b.n	406e9c <_svfprintf_r+0x2dc>
  407432:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407434:	2b65      	cmp	r3, #101	; 0x65
  407436:	f340 80a7 	ble.w	407588 <_svfprintf_r+0x9c8>
  40743a:	a815      	add	r0, sp, #84	; 0x54
  40743c:	c80d      	ldmia	r0, {r0, r2, r3}
  40743e:	9914      	ldr	r1, [sp, #80]	; 0x50
  407440:	f003 fcba 	bl	40adb8 <__aeabi_dcmpeq>
  407444:	2800      	cmp	r0, #0
  407446:	f000 8150 	beq.w	4076ea <_svfprintf_r+0xb2a>
  40744a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40744c:	4a20      	ldr	r2, [pc, #128]	; (4074d0 <_svfprintf_r+0x910>)
  40744e:	f8c8 2000 	str.w	r2, [r8]
  407452:	3301      	adds	r3, #1
  407454:	3401      	adds	r4, #1
  407456:	2201      	movs	r2, #1
  407458:	2b07      	cmp	r3, #7
  40745a:	9427      	str	r4, [sp, #156]	; 0x9c
  40745c:	9326      	str	r3, [sp, #152]	; 0x98
  40745e:	f8c8 2004 	str.w	r2, [r8, #4]
  407462:	f300 836a 	bgt.w	407b3a <_svfprintf_r+0xf7a>
  407466:	f108 0808 	add.w	r8, r8, #8
  40746a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40746c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40746e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407470:	4293      	cmp	r3, r2
  407472:	db03      	blt.n	40747c <_svfprintf_r+0x8bc>
  407474:	9b07      	ldr	r3, [sp, #28]
  407476:	07dd      	lsls	r5, r3, #31
  407478:	f57f ad82 	bpl.w	406f80 <_svfprintf_r+0x3c0>
  40747c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40747e:	9919      	ldr	r1, [sp, #100]	; 0x64
  407480:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407482:	f8c8 2000 	str.w	r2, [r8]
  407486:	3301      	adds	r3, #1
  407488:	440c      	add	r4, r1
  40748a:	2b07      	cmp	r3, #7
  40748c:	f8c8 1004 	str.w	r1, [r8, #4]
  407490:	9427      	str	r4, [sp, #156]	; 0x9c
  407492:	9326      	str	r3, [sp, #152]	; 0x98
  407494:	f300 839e 	bgt.w	407bd4 <_svfprintf_r+0x1014>
  407498:	f108 0808 	add.w	r8, r8, #8
  40749c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40749e:	1e5e      	subs	r6, r3, #1
  4074a0:	2e00      	cmp	r6, #0
  4074a2:	f77f ad6d 	ble.w	406f80 <_svfprintf_r+0x3c0>
  4074a6:	2e10      	cmp	r6, #16
  4074a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4074aa:	4d0a      	ldr	r5, [pc, #40]	; (4074d4 <_svfprintf_r+0x914>)
  4074ac:	f340 81f5 	ble.w	40789a <_svfprintf_r+0xcda>
  4074b0:	4622      	mov	r2, r4
  4074b2:	2710      	movs	r7, #16
  4074b4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4074b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4074ba:	e013      	b.n	4074e4 <_svfprintf_r+0x924>
  4074bc:	0040b6c8 	.word	0x0040b6c8
  4074c0:	0040b6b4 	.word	0x0040b6b4
  4074c4:	7fefffff 	.word	0x7fefffff
  4074c8:	0040b6a8 	.word	0x0040b6a8
  4074cc:	0040b6a4 	.word	0x0040b6a4
  4074d0:	0040b6e4 	.word	0x0040b6e4
  4074d4:	0040b6f8 	.word	0x0040b6f8
  4074d8:	f108 0808 	add.w	r8, r8, #8
  4074dc:	3e10      	subs	r6, #16
  4074de:	2e10      	cmp	r6, #16
  4074e0:	f340 81da 	ble.w	407898 <_svfprintf_r+0xcd8>
  4074e4:	3301      	adds	r3, #1
  4074e6:	3210      	adds	r2, #16
  4074e8:	2b07      	cmp	r3, #7
  4074ea:	9227      	str	r2, [sp, #156]	; 0x9c
  4074ec:	9326      	str	r3, [sp, #152]	; 0x98
  4074ee:	e888 00a0 	stmia.w	r8, {r5, r7}
  4074f2:	ddf1      	ble.n	4074d8 <_svfprintf_r+0x918>
  4074f4:	aa25      	add	r2, sp, #148	; 0x94
  4074f6:	4621      	mov	r1, r4
  4074f8:	4658      	mov	r0, fp
  4074fa:	f002 fbc9 	bl	409c90 <__ssprint_r>
  4074fe:	2800      	cmp	r0, #0
  407500:	f47f ac30 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407504:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407506:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407508:	46c8      	mov	r8, r9
  40750a:	e7e7      	b.n	4074dc <_svfprintf_r+0x91c>
  40750c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40750e:	9a08      	ldr	r2, [sp, #32]
  407510:	1a9f      	subs	r7, r3, r2
  407512:	2f00      	cmp	r7, #0
  407514:	f77f ace5 	ble.w	406ee2 <_svfprintf_r+0x322>
  407518:	2f10      	cmp	r7, #16
  40751a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40751c:	4db6      	ldr	r5, [pc, #728]	; (4077f8 <_svfprintf_r+0xc38>)
  40751e:	dd27      	ble.n	407570 <_svfprintf_r+0x9b0>
  407520:	4642      	mov	r2, r8
  407522:	4621      	mov	r1, r4
  407524:	46b0      	mov	r8, r6
  407526:	f04f 0b10 	mov.w	fp, #16
  40752a:	462e      	mov	r6, r5
  40752c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40752e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407530:	e004      	b.n	40753c <_svfprintf_r+0x97c>
  407532:	3f10      	subs	r7, #16
  407534:	2f10      	cmp	r7, #16
  407536:	f102 0208 	add.w	r2, r2, #8
  40753a:	dd15      	ble.n	407568 <_svfprintf_r+0x9a8>
  40753c:	3301      	adds	r3, #1
  40753e:	3110      	adds	r1, #16
  407540:	2b07      	cmp	r3, #7
  407542:	9127      	str	r1, [sp, #156]	; 0x9c
  407544:	9326      	str	r3, [sp, #152]	; 0x98
  407546:	e882 0840 	stmia.w	r2, {r6, fp}
  40754a:	ddf2      	ble.n	407532 <_svfprintf_r+0x972>
  40754c:	aa25      	add	r2, sp, #148	; 0x94
  40754e:	4629      	mov	r1, r5
  407550:	4620      	mov	r0, r4
  407552:	f002 fb9d 	bl	409c90 <__ssprint_r>
  407556:	2800      	cmp	r0, #0
  407558:	f47f ac04 	bne.w	406d64 <_svfprintf_r+0x1a4>
  40755c:	3f10      	subs	r7, #16
  40755e:	2f10      	cmp	r7, #16
  407560:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407562:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407564:	464a      	mov	r2, r9
  407566:	dce9      	bgt.n	40753c <_svfprintf_r+0x97c>
  407568:	4635      	mov	r5, r6
  40756a:	460c      	mov	r4, r1
  40756c:	4646      	mov	r6, r8
  40756e:	4690      	mov	r8, r2
  407570:	3301      	adds	r3, #1
  407572:	443c      	add	r4, r7
  407574:	2b07      	cmp	r3, #7
  407576:	9427      	str	r4, [sp, #156]	; 0x9c
  407578:	9326      	str	r3, [sp, #152]	; 0x98
  40757a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40757e:	f300 8232 	bgt.w	4079e6 <_svfprintf_r+0xe26>
  407582:	f108 0808 	add.w	r8, r8, #8
  407586:	e4ac      	b.n	406ee2 <_svfprintf_r+0x322>
  407588:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40758a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40758c:	2b01      	cmp	r3, #1
  40758e:	f340 81fe 	ble.w	40798e <_svfprintf_r+0xdce>
  407592:	3701      	adds	r7, #1
  407594:	3401      	adds	r4, #1
  407596:	2301      	movs	r3, #1
  407598:	2f07      	cmp	r7, #7
  40759a:	9427      	str	r4, [sp, #156]	; 0x9c
  40759c:	9726      	str	r7, [sp, #152]	; 0x98
  40759e:	f8c8 6000 	str.w	r6, [r8]
  4075a2:	f8c8 3004 	str.w	r3, [r8, #4]
  4075a6:	f300 8203 	bgt.w	4079b0 <_svfprintf_r+0xdf0>
  4075aa:	f108 0808 	add.w	r8, r8, #8
  4075ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4075b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4075b2:	f8c8 3000 	str.w	r3, [r8]
  4075b6:	3701      	adds	r7, #1
  4075b8:	4414      	add	r4, r2
  4075ba:	2f07      	cmp	r7, #7
  4075bc:	9427      	str	r4, [sp, #156]	; 0x9c
  4075be:	9726      	str	r7, [sp, #152]	; 0x98
  4075c0:	f8c8 2004 	str.w	r2, [r8, #4]
  4075c4:	f300 8200 	bgt.w	4079c8 <_svfprintf_r+0xe08>
  4075c8:	f108 0808 	add.w	r8, r8, #8
  4075cc:	a815      	add	r0, sp, #84	; 0x54
  4075ce:	c80d      	ldmia	r0, {r0, r2, r3}
  4075d0:	9914      	ldr	r1, [sp, #80]	; 0x50
  4075d2:	f003 fbf1 	bl	40adb8 <__aeabi_dcmpeq>
  4075d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4075d8:	2800      	cmp	r0, #0
  4075da:	f040 8101 	bne.w	4077e0 <_svfprintf_r+0xc20>
  4075de:	3b01      	subs	r3, #1
  4075e0:	3701      	adds	r7, #1
  4075e2:	3601      	adds	r6, #1
  4075e4:	441c      	add	r4, r3
  4075e6:	2f07      	cmp	r7, #7
  4075e8:	9726      	str	r7, [sp, #152]	; 0x98
  4075ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4075ec:	f8c8 6000 	str.w	r6, [r8]
  4075f0:	f8c8 3004 	str.w	r3, [r8, #4]
  4075f4:	f300 8127 	bgt.w	407846 <_svfprintf_r+0xc86>
  4075f8:	f108 0808 	add.w	r8, r8, #8
  4075fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4075fe:	f8c8 2004 	str.w	r2, [r8, #4]
  407602:	3701      	adds	r7, #1
  407604:	4414      	add	r4, r2
  407606:	ab21      	add	r3, sp, #132	; 0x84
  407608:	2f07      	cmp	r7, #7
  40760a:	9427      	str	r4, [sp, #156]	; 0x9c
  40760c:	9726      	str	r7, [sp, #152]	; 0x98
  40760e:	f8c8 3000 	str.w	r3, [r8]
  407612:	f77f acb3 	ble.w	406f7c <_svfprintf_r+0x3bc>
  407616:	aa25      	add	r2, sp, #148	; 0x94
  407618:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40761a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40761c:	f002 fb38 	bl	409c90 <__ssprint_r>
  407620:	2800      	cmp	r0, #0
  407622:	f47f ab9f 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407626:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407628:	46c8      	mov	r8, r9
  40762a:	e4a9      	b.n	406f80 <_svfprintf_r+0x3c0>
  40762c:	aa25      	add	r2, sp, #148	; 0x94
  40762e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407630:	980c      	ldr	r0, [sp, #48]	; 0x30
  407632:	f002 fb2d 	bl	409c90 <__ssprint_r>
  407636:	2800      	cmp	r0, #0
  407638:	f43f aceb 	beq.w	407012 <_svfprintf_r+0x452>
  40763c:	f7ff bb92 	b.w	406d64 <_svfprintf_r+0x1a4>
  407640:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407644:	2b01      	cmp	r3, #1
  407646:	f000 8134 	beq.w	4078b2 <_svfprintf_r+0xcf2>
  40764a:	2b02      	cmp	r3, #2
  40764c:	d125      	bne.n	40769a <_svfprintf_r+0xada>
  40764e:	f8cd b01c 	str.w	fp, [sp, #28]
  407652:	2400      	movs	r4, #0
  407654:	2500      	movs	r5, #0
  407656:	e61e      	b.n	407296 <_svfprintf_r+0x6d6>
  407658:	aa25      	add	r2, sp, #148	; 0x94
  40765a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40765c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40765e:	f002 fb17 	bl	409c90 <__ssprint_r>
  407662:	2800      	cmp	r0, #0
  407664:	f47f ab7e 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407668:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40766a:	46c8      	mov	r8, r9
  40766c:	e475      	b.n	406f5a <_svfprintf_r+0x39a>
  40766e:	aa25      	add	r2, sp, #148	; 0x94
  407670:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407672:	980c      	ldr	r0, [sp, #48]	; 0x30
  407674:	f002 fb0c 	bl	409c90 <__ssprint_r>
  407678:	2800      	cmp	r0, #0
  40767a:	f47f ab73 	bne.w	406d64 <_svfprintf_r+0x1a4>
  40767e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407680:	46c8      	mov	r8, r9
  407682:	e41b      	b.n	406ebc <_svfprintf_r+0x2fc>
  407684:	aa25      	add	r2, sp, #148	; 0x94
  407686:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407688:	980c      	ldr	r0, [sp, #48]	; 0x30
  40768a:	f002 fb01 	bl	409c90 <__ssprint_r>
  40768e:	2800      	cmp	r0, #0
  407690:	f47f ab68 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407694:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407696:	46c8      	mov	r8, r9
  407698:	e420      	b.n	406edc <_svfprintf_r+0x31c>
  40769a:	f8cd b01c 	str.w	fp, [sp, #28]
  40769e:	2400      	movs	r4, #0
  4076a0:	2500      	movs	r5, #0
  4076a2:	4649      	mov	r1, r9
  4076a4:	e000      	b.n	4076a8 <_svfprintf_r+0xae8>
  4076a6:	4631      	mov	r1, r6
  4076a8:	08e2      	lsrs	r2, r4, #3
  4076aa:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4076ae:	08e8      	lsrs	r0, r5, #3
  4076b0:	f004 0307 	and.w	r3, r4, #7
  4076b4:	4605      	mov	r5, r0
  4076b6:	4614      	mov	r4, r2
  4076b8:	3330      	adds	r3, #48	; 0x30
  4076ba:	ea54 0205 	orrs.w	r2, r4, r5
  4076be:	f801 3c01 	strb.w	r3, [r1, #-1]
  4076c2:	f101 36ff 	add.w	r6, r1, #4294967295
  4076c6:	d1ee      	bne.n	4076a6 <_svfprintf_r+0xae6>
  4076c8:	9a07      	ldr	r2, [sp, #28]
  4076ca:	07d2      	lsls	r2, r2, #31
  4076cc:	f57f adf3 	bpl.w	4072b6 <_svfprintf_r+0x6f6>
  4076d0:	2b30      	cmp	r3, #48	; 0x30
  4076d2:	f43f adf0 	beq.w	4072b6 <_svfprintf_r+0x6f6>
  4076d6:	3902      	subs	r1, #2
  4076d8:	2330      	movs	r3, #48	; 0x30
  4076da:	f806 3c01 	strb.w	r3, [r6, #-1]
  4076de:	eba9 0301 	sub.w	r3, r9, r1
  4076e2:	930e      	str	r3, [sp, #56]	; 0x38
  4076e4:	460e      	mov	r6, r1
  4076e6:	f7ff bb7b 	b.w	406de0 <_svfprintf_r+0x220>
  4076ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4076ec:	2900      	cmp	r1, #0
  4076ee:	f340 822e 	ble.w	407b4e <_svfprintf_r+0xf8e>
  4076f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4076f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4076f6:	4293      	cmp	r3, r2
  4076f8:	bfa8      	it	ge
  4076fa:	4613      	movge	r3, r2
  4076fc:	2b00      	cmp	r3, #0
  4076fe:	461f      	mov	r7, r3
  407700:	dd0d      	ble.n	40771e <_svfprintf_r+0xb5e>
  407702:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407704:	f8c8 6000 	str.w	r6, [r8]
  407708:	3301      	adds	r3, #1
  40770a:	443c      	add	r4, r7
  40770c:	2b07      	cmp	r3, #7
  40770e:	9427      	str	r4, [sp, #156]	; 0x9c
  407710:	f8c8 7004 	str.w	r7, [r8, #4]
  407714:	9326      	str	r3, [sp, #152]	; 0x98
  407716:	f300 831f 	bgt.w	407d58 <_svfprintf_r+0x1198>
  40771a:	f108 0808 	add.w	r8, r8, #8
  40771e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407720:	2f00      	cmp	r7, #0
  407722:	bfa8      	it	ge
  407724:	1bdb      	subge	r3, r3, r7
  407726:	2b00      	cmp	r3, #0
  407728:	461f      	mov	r7, r3
  40772a:	f340 80d6 	ble.w	4078da <_svfprintf_r+0xd1a>
  40772e:	2f10      	cmp	r7, #16
  407730:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407732:	4d31      	ldr	r5, [pc, #196]	; (4077f8 <_svfprintf_r+0xc38>)
  407734:	f340 81ed 	ble.w	407b12 <_svfprintf_r+0xf52>
  407738:	4642      	mov	r2, r8
  40773a:	4621      	mov	r1, r4
  40773c:	46b0      	mov	r8, r6
  40773e:	f04f 0b10 	mov.w	fp, #16
  407742:	462e      	mov	r6, r5
  407744:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407746:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407748:	e004      	b.n	407754 <_svfprintf_r+0xb94>
  40774a:	3208      	adds	r2, #8
  40774c:	3f10      	subs	r7, #16
  40774e:	2f10      	cmp	r7, #16
  407750:	f340 81db 	ble.w	407b0a <_svfprintf_r+0xf4a>
  407754:	3301      	adds	r3, #1
  407756:	3110      	adds	r1, #16
  407758:	2b07      	cmp	r3, #7
  40775a:	9127      	str	r1, [sp, #156]	; 0x9c
  40775c:	9326      	str	r3, [sp, #152]	; 0x98
  40775e:	e882 0840 	stmia.w	r2, {r6, fp}
  407762:	ddf2      	ble.n	40774a <_svfprintf_r+0xb8a>
  407764:	aa25      	add	r2, sp, #148	; 0x94
  407766:	4629      	mov	r1, r5
  407768:	4620      	mov	r0, r4
  40776a:	f002 fa91 	bl	409c90 <__ssprint_r>
  40776e:	2800      	cmp	r0, #0
  407770:	f47f aaf8 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407774:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407776:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407778:	464a      	mov	r2, r9
  40777a:	e7e7      	b.n	40774c <_svfprintf_r+0xb8c>
  40777c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40777e:	930e      	str	r3, [sp, #56]	; 0x38
  407780:	464e      	mov	r6, r9
  407782:	f7ff bb2d 	b.w	406de0 <_svfprintf_r+0x220>
  407786:	2d00      	cmp	r5, #0
  407788:	bf08      	it	eq
  40778a:	2c0a      	cmpeq	r4, #10
  40778c:	f0c0 808f 	bcc.w	4078ae <_svfprintf_r+0xcee>
  407790:	464e      	mov	r6, r9
  407792:	4620      	mov	r0, r4
  407794:	4629      	mov	r1, r5
  407796:	220a      	movs	r2, #10
  407798:	2300      	movs	r3, #0
  40779a:	f7fe fea7 	bl	4064ec <__aeabi_uldivmod>
  40779e:	3230      	adds	r2, #48	; 0x30
  4077a0:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4077a4:	4620      	mov	r0, r4
  4077a6:	4629      	mov	r1, r5
  4077a8:	2300      	movs	r3, #0
  4077aa:	220a      	movs	r2, #10
  4077ac:	f7fe fe9e 	bl	4064ec <__aeabi_uldivmod>
  4077b0:	4604      	mov	r4, r0
  4077b2:	460d      	mov	r5, r1
  4077b4:	ea54 0305 	orrs.w	r3, r4, r5
  4077b8:	d1eb      	bne.n	407792 <_svfprintf_r+0xbd2>
  4077ba:	eba9 0306 	sub.w	r3, r9, r6
  4077be:	930e      	str	r3, [sp, #56]	; 0x38
  4077c0:	f7ff bb0e 	b.w	406de0 <_svfprintf_r+0x220>
  4077c4:	aa25      	add	r2, sp, #148	; 0x94
  4077c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4077c8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4077ca:	f002 fa61 	bl	409c90 <__ssprint_r>
  4077ce:	2800      	cmp	r0, #0
  4077d0:	f47f aac8 	bne.w	406d64 <_svfprintf_r+0x1a4>
  4077d4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4077d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4077da:	46c8      	mov	r8, r9
  4077dc:	f7ff bb5e 	b.w	406e9c <_svfprintf_r+0x2dc>
  4077e0:	1e5e      	subs	r6, r3, #1
  4077e2:	2e00      	cmp	r6, #0
  4077e4:	f77f af0a 	ble.w	4075fc <_svfprintf_r+0xa3c>
  4077e8:	2e10      	cmp	r6, #16
  4077ea:	4d03      	ldr	r5, [pc, #12]	; (4077f8 <_svfprintf_r+0xc38>)
  4077ec:	dd22      	ble.n	407834 <_svfprintf_r+0xc74>
  4077ee:	4622      	mov	r2, r4
  4077f0:	f04f 0b10 	mov.w	fp, #16
  4077f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4077f6:	e006      	b.n	407806 <_svfprintf_r+0xc46>
  4077f8:	0040b6f8 	.word	0x0040b6f8
  4077fc:	3e10      	subs	r6, #16
  4077fe:	2e10      	cmp	r6, #16
  407800:	f108 0808 	add.w	r8, r8, #8
  407804:	dd15      	ble.n	407832 <_svfprintf_r+0xc72>
  407806:	3701      	adds	r7, #1
  407808:	3210      	adds	r2, #16
  40780a:	2f07      	cmp	r7, #7
  40780c:	9227      	str	r2, [sp, #156]	; 0x9c
  40780e:	9726      	str	r7, [sp, #152]	; 0x98
  407810:	e888 0820 	stmia.w	r8, {r5, fp}
  407814:	ddf2      	ble.n	4077fc <_svfprintf_r+0xc3c>
  407816:	aa25      	add	r2, sp, #148	; 0x94
  407818:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40781a:	4620      	mov	r0, r4
  40781c:	f002 fa38 	bl	409c90 <__ssprint_r>
  407820:	2800      	cmp	r0, #0
  407822:	f47f aa9f 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407826:	3e10      	subs	r6, #16
  407828:	2e10      	cmp	r6, #16
  40782a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40782c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40782e:	46c8      	mov	r8, r9
  407830:	dce9      	bgt.n	407806 <_svfprintf_r+0xc46>
  407832:	4614      	mov	r4, r2
  407834:	3701      	adds	r7, #1
  407836:	4434      	add	r4, r6
  407838:	2f07      	cmp	r7, #7
  40783a:	9427      	str	r4, [sp, #156]	; 0x9c
  40783c:	9726      	str	r7, [sp, #152]	; 0x98
  40783e:	e888 0060 	stmia.w	r8, {r5, r6}
  407842:	f77f aed9 	ble.w	4075f8 <_svfprintf_r+0xa38>
  407846:	aa25      	add	r2, sp, #148	; 0x94
  407848:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40784a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40784c:	f002 fa20 	bl	409c90 <__ssprint_r>
  407850:	2800      	cmp	r0, #0
  407852:	f47f aa87 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407856:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407858:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40785a:	46c8      	mov	r8, r9
  40785c:	e6ce      	b.n	4075fc <_svfprintf_r+0xa3c>
  40785e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407860:	6814      	ldr	r4, [r2, #0]
  407862:	4613      	mov	r3, r2
  407864:	3304      	adds	r3, #4
  407866:	17e5      	asrs	r5, r4, #31
  407868:	930f      	str	r3, [sp, #60]	; 0x3c
  40786a:	4622      	mov	r2, r4
  40786c:	462b      	mov	r3, r5
  40786e:	e4fa      	b.n	407266 <_svfprintf_r+0x6a6>
  407870:	3204      	adds	r2, #4
  407872:	681c      	ldr	r4, [r3, #0]
  407874:	920f      	str	r2, [sp, #60]	; 0x3c
  407876:	2301      	movs	r3, #1
  407878:	2500      	movs	r5, #0
  40787a:	f7ff ba94 	b.w	406da6 <_svfprintf_r+0x1e6>
  40787e:	681c      	ldr	r4, [r3, #0]
  407880:	3304      	adds	r3, #4
  407882:	930f      	str	r3, [sp, #60]	; 0x3c
  407884:	2500      	movs	r5, #0
  407886:	e421      	b.n	4070cc <_svfprintf_r+0x50c>
  407888:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40788a:	460a      	mov	r2, r1
  40788c:	3204      	adds	r2, #4
  40788e:	680c      	ldr	r4, [r1, #0]
  407890:	920f      	str	r2, [sp, #60]	; 0x3c
  407892:	2500      	movs	r5, #0
  407894:	f7ff ba87 	b.w	406da6 <_svfprintf_r+0x1e6>
  407898:	4614      	mov	r4, r2
  40789a:	3301      	adds	r3, #1
  40789c:	4434      	add	r4, r6
  40789e:	2b07      	cmp	r3, #7
  4078a0:	9427      	str	r4, [sp, #156]	; 0x9c
  4078a2:	9326      	str	r3, [sp, #152]	; 0x98
  4078a4:	e888 0060 	stmia.w	r8, {r5, r6}
  4078a8:	f77f ab68 	ble.w	406f7c <_svfprintf_r+0x3bc>
  4078ac:	e6b3      	b.n	407616 <_svfprintf_r+0xa56>
  4078ae:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4078b2:	f8cd b01c 	str.w	fp, [sp, #28]
  4078b6:	ae42      	add	r6, sp, #264	; 0x108
  4078b8:	3430      	adds	r4, #48	; 0x30
  4078ba:	2301      	movs	r3, #1
  4078bc:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4078c0:	930e      	str	r3, [sp, #56]	; 0x38
  4078c2:	f7ff ba8d 	b.w	406de0 <_svfprintf_r+0x220>
  4078c6:	aa25      	add	r2, sp, #148	; 0x94
  4078c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4078ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4078cc:	f002 f9e0 	bl	409c90 <__ssprint_r>
  4078d0:	2800      	cmp	r0, #0
  4078d2:	f47f aa47 	bne.w	406d64 <_svfprintf_r+0x1a4>
  4078d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4078d8:	46c8      	mov	r8, r9
  4078da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4078dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4078de:	429a      	cmp	r2, r3
  4078e0:	db44      	blt.n	40796c <_svfprintf_r+0xdac>
  4078e2:	9b07      	ldr	r3, [sp, #28]
  4078e4:	07d9      	lsls	r1, r3, #31
  4078e6:	d441      	bmi.n	40796c <_svfprintf_r+0xdac>
  4078e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4078ea:	9812      	ldr	r0, [sp, #72]	; 0x48
  4078ec:	1a9a      	subs	r2, r3, r2
  4078ee:	1a1d      	subs	r5, r3, r0
  4078f0:	4295      	cmp	r5, r2
  4078f2:	bfa8      	it	ge
  4078f4:	4615      	movge	r5, r2
  4078f6:	2d00      	cmp	r5, #0
  4078f8:	dd0e      	ble.n	407918 <_svfprintf_r+0xd58>
  4078fa:	9926      	ldr	r1, [sp, #152]	; 0x98
  4078fc:	f8c8 5004 	str.w	r5, [r8, #4]
  407900:	3101      	adds	r1, #1
  407902:	4406      	add	r6, r0
  407904:	442c      	add	r4, r5
  407906:	2907      	cmp	r1, #7
  407908:	f8c8 6000 	str.w	r6, [r8]
  40790c:	9427      	str	r4, [sp, #156]	; 0x9c
  40790e:	9126      	str	r1, [sp, #152]	; 0x98
  407910:	f300 823b 	bgt.w	407d8a <_svfprintf_r+0x11ca>
  407914:	f108 0808 	add.w	r8, r8, #8
  407918:	2d00      	cmp	r5, #0
  40791a:	bfac      	ite	ge
  40791c:	1b56      	subge	r6, r2, r5
  40791e:	4616      	movlt	r6, r2
  407920:	2e00      	cmp	r6, #0
  407922:	f77f ab2d 	ble.w	406f80 <_svfprintf_r+0x3c0>
  407926:	2e10      	cmp	r6, #16
  407928:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40792a:	4db0      	ldr	r5, [pc, #704]	; (407bec <_svfprintf_r+0x102c>)
  40792c:	ddb5      	ble.n	40789a <_svfprintf_r+0xcda>
  40792e:	4622      	mov	r2, r4
  407930:	2710      	movs	r7, #16
  407932:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407936:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407938:	e004      	b.n	407944 <_svfprintf_r+0xd84>
  40793a:	f108 0808 	add.w	r8, r8, #8
  40793e:	3e10      	subs	r6, #16
  407940:	2e10      	cmp	r6, #16
  407942:	dda9      	ble.n	407898 <_svfprintf_r+0xcd8>
  407944:	3301      	adds	r3, #1
  407946:	3210      	adds	r2, #16
  407948:	2b07      	cmp	r3, #7
  40794a:	9227      	str	r2, [sp, #156]	; 0x9c
  40794c:	9326      	str	r3, [sp, #152]	; 0x98
  40794e:	e888 00a0 	stmia.w	r8, {r5, r7}
  407952:	ddf2      	ble.n	40793a <_svfprintf_r+0xd7a>
  407954:	aa25      	add	r2, sp, #148	; 0x94
  407956:	4621      	mov	r1, r4
  407958:	4658      	mov	r0, fp
  40795a:	f002 f999 	bl	409c90 <__ssprint_r>
  40795e:	2800      	cmp	r0, #0
  407960:	f47f aa00 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407964:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407966:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407968:	46c8      	mov	r8, r9
  40796a:	e7e8      	b.n	40793e <_svfprintf_r+0xd7e>
  40796c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40796e:	9819      	ldr	r0, [sp, #100]	; 0x64
  407970:	991a      	ldr	r1, [sp, #104]	; 0x68
  407972:	f8c8 1000 	str.w	r1, [r8]
  407976:	3301      	adds	r3, #1
  407978:	4404      	add	r4, r0
  40797a:	2b07      	cmp	r3, #7
  40797c:	9427      	str	r4, [sp, #156]	; 0x9c
  40797e:	f8c8 0004 	str.w	r0, [r8, #4]
  407982:	9326      	str	r3, [sp, #152]	; 0x98
  407984:	f300 81f5 	bgt.w	407d72 <_svfprintf_r+0x11b2>
  407988:	f108 0808 	add.w	r8, r8, #8
  40798c:	e7ac      	b.n	4078e8 <_svfprintf_r+0xd28>
  40798e:	9b07      	ldr	r3, [sp, #28]
  407990:	07da      	lsls	r2, r3, #31
  407992:	f53f adfe 	bmi.w	407592 <_svfprintf_r+0x9d2>
  407996:	3701      	adds	r7, #1
  407998:	3401      	adds	r4, #1
  40799a:	2301      	movs	r3, #1
  40799c:	2f07      	cmp	r7, #7
  40799e:	9427      	str	r4, [sp, #156]	; 0x9c
  4079a0:	9726      	str	r7, [sp, #152]	; 0x98
  4079a2:	f8c8 6000 	str.w	r6, [r8]
  4079a6:	f8c8 3004 	str.w	r3, [r8, #4]
  4079aa:	f77f ae25 	ble.w	4075f8 <_svfprintf_r+0xa38>
  4079ae:	e74a      	b.n	407846 <_svfprintf_r+0xc86>
  4079b0:	aa25      	add	r2, sp, #148	; 0x94
  4079b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4079b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4079b6:	f002 f96b 	bl	409c90 <__ssprint_r>
  4079ba:	2800      	cmp	r0, #0
  4079bc:	f47f a9d2 	bne.w	406d64 <_svfprintf_r+0x1a4>
  4079c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4079c2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4079c4:	46c8      	mov	r8, r9
  4079c6:	e5f2      	b.n	4075ae <_svfprintf_r+0x9ee>
  4079c8:	aa25      	add	r2, sp, #148	; 0x94
  4079ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4079cc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4079ce:	f002 f95f 	bl	409c90 <__ssprint_r>
  4079d2:	2800      	cmp	r0, #0
  4079d4:	f47f a9c6 	bne.w	406d64 <_svfprintf_r+0x1a4>
  4079d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4079da:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4079dc:	46c8      	mov	r8, r9
  4079de:	e5f5      	b.n	4075cc <_svfprintf_r+0xa0c>
  4079e0:	464e      	mov	r6, r9
  4079e2:	f7ff b9fd 	b.w	406de0 <_svfprintf_r+0x220>
  4079e6:	aa25      	add	r2, sp, #148	; 0x94
  4079e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4079ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4079ec:	f002 f950 	bl	409c90 <__ssprint_r>
  4079f0:	2800      	cmp	r0, #0
  4079f2:	f47f a9b7 	bne.w	406d64 <_svfprintf_r+0x1a4>
  4079f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4079f8:	46c8      	mov	r8, r9
  4079fa:	f7ff ba72 	b.w	406ee2 <_svfprintf_r+0x322>
  4079fe:	9c15      	ldr	r4, [sp, #84]	; 0x54
  407a00:	4622      	mov	r2, r4
  407a02:	4620      	mov	r0, r4
  407a04:	9c14      	ldr	r4, [sp, #80]	; 0x50
  407a06:	4623      	mov	r3, r4
  407a08:	4621      	mov	r1, r4
  407a0a:	f003 fa07 	bl	40ae1c <__aeabi_dcmpun>
  407a0e:	2800      	cmp	r0, #0
  407a10:	f040 8286 	bne.w	407f20 <_svfprintf_r+0x1360>
  407a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407a16:	3301      	adds	r3, #1
  407a18:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407a1a:	f023 0320 	bic.w	r3, r3, #32
  407a1e:	930e      	str	r3, [sp, #56]	; 0x38
  407a20:	f000 81e2 	beq.w	407de8 <_svfprintf_r+0x1228>
  407a24:	2b47      	cmp	r3, #71	; 0x47
  407a26:	f000 811e 	beq.w	407c66 <_svfprintf_r+0x10a6>
  407a2a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  407a2e:	9307      	str	r3, [sp, #28]
  407a30:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407a32:	1e1f      	subs	r7, r3, #0
  407a34:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407a36:	9308      	str	r3, [sp, #32]
  407a38:	bfbb      	ittet	lt
  407a3a:	463b      	movlt	r3, r7
  407a3c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  407a40:	2300      	movge	r3, #0
  407a42:	232d      	movlt	r3, #45	; 0x2d
  407a44:	9310      	str	r3, [sp, #64]	; 0x40
  407a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407a48:	2b66      	cmp	r3, #102	; 0x66
  407a4a:	f000 81bb 	beq.w	407dc4 <_svfprintf_r+0x1204>
  407a4e:	2b46      	cmp	r3, #70	; 0x46
  407a50:	f000 80df 	beq.w	407c12 <_svfprintf_r+0x1052>
  407a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407a56:	9a08      	ldr	r2, [sp, #32]
  407a58:	2b45      	cmp	r3, #69	; 0x45
  407a5a:	bf0c      	ite	eq
  407a5c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  407a5e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  407a60:	a823      	add	r0, sp, #140	; 0x8c
  407a62:	a920      	add	r1, sp, #128	; 0x80
  407a64:	bf08      	it	eq
  407a66:	1c5d      	addeq	r5, r3, #1
  407a68:	9004      	str	r0, [sp, #16]
  407a6a:	9103      	str	r1, [sp, #12]
  407a6c:	a81f      	add	r0, sp, #124	; 0x7c
  407a6e:	2102      	movs	r1, #2
  407a70:	463b      	mov	r3, r7
  407a72:	9002      	str	r0, [sp, #8]
  407a74:	9501      	str	r5, [sp, #4]
  407a76:	9100      	str	r1, [sp, #0]
  407a78:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a7a:	f000 fb99 	bl	4081b0 <_dtoa_r>
  407a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407a80:	2b67      	cmp	r3, #103	; 0x67
  407a82:	4606      	mov	r6, r0
  407a84:	f040 81e0 	bne.w	407e48 <_svfprintf_r+0x1288>
  407a88:	f01b 0f01 	tst.w	fp, #1
  407a8c:	f000 8246 	beq.w	407f1c <_svfprintf_r+0x135c>
  407a90:	1974      	adds	r4, r6, r5
  407a92:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407a94:	9808      	ldr	r0, [sp, #32]
  407a96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407a98:	4639      	mov	r1, r7
  407a9a:	f003 f98d 	bl	40adb8 <__aeabi_dcmpeq>
  407a9e:	2800      	cmp	r0, #0
  407aa0:	f040 8165 	bne.w	407d6e <_svfprintf_r+0x11ae>
  407aa4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407aa6:	42a3      	cmp	r3, r4
  407aa8:	d206      	bcs.n	407ab8 <_svfprintf_r+0xef8>
  407aaa:	2130      	movs	r1, #48	; 0x30
  407aac:	1c5a      	adds	r2, r3, #1
  407aae:	9223      	str	r2, [sp, #140]	; 0x8c
  407ab0:	7019      	strb	r1, [r3, #0]
  407ab2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407ab4:	429c      	cmp	r4, r3
  407ab6:	d8f9      	bhi.n	407aac <_svfprintf_r+0xeec>
  407ab8:	1b9b      	subs	r3, r3, r6
  407aba:	9313      	str	r3, [sp, #76]	; 0x4c
  407abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407abe:	2b47      	cmp	r3, #71	; 0x47
  407ac0:	f000 80e9 	beq.w	407c96 <_svfprintf_r+0x10d6>
  407ac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407ac6:	2b65      	cmp	r3, #101	; 0x65
  407ac8:	f340 81cd 	ble.w	407e66 <_svfprintf_r+0x12a6>
  407acc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407ace:	2b66      	cmp	r3, #102	; 0x66
  407ad0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407ad2:	9312      	str	r3, [sp, #72]	; 0x48
  407ad4:	f000 819e 	beq.w	407e14 <_svfprintf_r+0x1254>
  407ad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407ada:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407adc:	4619      	mov	r1, r3
  407ade:	4291      	cmp	r1, r2
  407ae0:	f300 818a 	bgt.w	407df8 <_svfprintf_r+0x1238>
  407ae4:	f01b 0f01 	tst.w	fp, #1
  407ae8:	f040 8213 	bne.w	407f12 <_svfprintf_r+0x1352>
  407aec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407af0:	9308      	str	r3, [sp, #32]
  407af2:	2367      	movs	r3, #103	; 0x67
  407af4:	920e      	str	r2, [sp, #56]	; 0x38
  407af6:	9311      	str	r3, [sp, #68]	; 0x44
  407af8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407afa:	2b00      	cmp	r3, #0
  407afc:	f040 80c4 	bne.w	407c88 <_svfprintf_r+0x10c8>
  407b00:	930a      	str	r3, [sp, #40]	; 0x28
  407b02:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407b06:	f7ff b973 	b.w	406df0 <_svfprintf_r+0x230>
  407b0a:	4635      	mov	r5, r6
  407b0c:	460c      	mov	r4, r1
  407b0e:	4646      	mov	r6, r8
  407b10:	4690      	mov	r8, r2
  407b12:	3301      	adds	r3, #1
  407b14:	443c      	add	r4, r7
  407b16:	2b07      	cmp	r3, #7
  407b18:	9427      	str	r4, [sp, #156]	; 0x9c
  407b1a:	9326      	str	r3, [sp, #152]	; 0x98
  407b1c:	e888 00a0 	stmia.w	r8, {r5, r7}
  407b20:	f73f aed1 	bgt.w	4078c6 <_svfprintf_r+0xd06>
  407b24:	f108 0808 	add.w	r8, r8, #8
  407b28:	e6d7      	b.n	4078da <_svfprintf_r+0xd1a>
  407b2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407b2c:	6813      	ldr	r3, [r2, #0]
  407b2e:	3204      	adds	r2, #4
  407b30:	920f      	str	r2, [sp, #60]	; 0x3c
  407b32:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407b34:	601a      	str	r2, [r3, #0]
  407b36:	f7ff b86a 	b.w	406c0e <_svfprintf_r+0x4e>
  407b3a:	aa25      	add	r2, sp, #148	; 0x94
  407b3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407b3e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407b40:	f002 f8a6 	bl	409c90 <__ssprint_r>
  407b44:	2800      	cmp	r0, #0
  407b46:	f47f a90d 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407b4a:	46c8      	mov	r8, r9
  407b4c:	e48d      	b.n	40746a <_svfprintf_r+0x8aa>
  407b4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407b50:	4a27      	ldr	r2, [pc, #156]	; (407bf0 <_svfprintf_r+0x1030>)
  407b52:	f8c8 2000 	str.w	r2, [r8]
  407b56:	3301      	adds	r3, #1
  407b58:	3401      	adds	r4, #1
  407b5a:	2201      	movs	r2, #1
  407b5c:	2b07      	cmp	r3, #7
  407b5e:	9427      	str	r4, [sp, #156]	; 0x9c
  407b60:	9326      	str	r3, [sp, #152]	; 0x98
  407b62:	f8c8 2004 	str.w	r2, [r8, #4]
  407b66:	dc72      	bgt.n	407c4e <_svfprintf_r+0x108e>
  407b68:	f108 0808 	add.w	r8, r8, #8
  407b6c:	b929      	cbnz	r1, 407b7a <_svfprintf_r+0xfba>
  407b6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407b70:	b91b      	cbnz	r3, 407b7a <_svfprintf_r+0xfba>
  407b72:	9b07      	ldr	r3, [sp, #28]
  407b74:	07d8      	lsls	r0, r3, #31
  407b76:	f57f aa03 	bpl.w	406f80 <_svfprintf_r+0x3c0>
  407b7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407b7c:	9819      	ldr	r0, [sp, #100]	; 0x64
  407b7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407b80:	f8c8 2000 	str.w	r2, [r8]
  407b84:	3301      	adds	r3, #1
  407b86:	4602      	mov	r2, r0
  407b88:	4422      	add	r2, r4
  407b8a:	2b07      	cmp	r3, #7
  407b8c:	9227      	str	r2, [sp, #156]	; 0x9c
  407b8e:	f8c8 0004 	str.w	r0, [r8, #4]
  407b92:	9326      	str	r3, [sp, #152]	; 0x98
  407b94:	f300 818d 	bgt.w	407eb2 <_svfprintf_r+0x12f2>
  407b98:	f108 0808 	add.w	r8, r8, #8
  407b9c:	2900      	cmp	r1, #0
  407b9e:	f2c0 8165 	blt.w	407e6c <_svfprintf_r+0x12ac>
  407ba2:	9913      	ldr	r1, [sp, #76]	; 0x4c
  407ba4:	f8c8 6000 	str.w	r6, [r8]
  407ba8:	3301      	adds	r3, #1
  407baa:	188c      	adds	r4, r1, r2
  407bac:	2b07      	cmp	r3, #7
  407bae:	9427      	str	r4, [sp, #156]	; 0x9c
  407bb0:	9326      	str	r3, [sp, #152]	; 0x98
  407bb2:	f8c8 1004 	str.w	r1, [r8, #4]
  407bb6:	f77f a9e1 	ble.w	406f7c <_svfprintf_r+0x3bc>
  407bba:	e52c      	b.n	407616 <_svfprintf_r+0xa56>
  407bbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407bbe:	9909      	ldr	r1, [sp, #36]	; 0x24
  407bc0:	6813      	ldr	r3, [r2, #0]
  407bc2:	17cd      	asrs	r5, r1, #31
  407bc4:	4608      	mov	r0, r1
  407bc6:	3204      	adds	r2, #4
  407bc8:	4629      	mov	r1, r5
  407bca:	920f      	str	r2, [sp, #60]	; 0x3c
  407bcc:	e9c3 0100 	strd	r0, r1, [r3]
  407bd0:	f7ff b81d 	b.w	406c0e <_svfprintf_r+0x4e>
  407bd4:	aa25      	add	r2, sp, #148	; 0x94
  407bd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407bd8:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bda:	f002 f859 	bl	409c90 <__ssprint_r>
  407bde:	2800      	cmp	r0, #0
  407be0:	f47f a8c0 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407be4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407be6:	46c8      	mov	r8, r9
  407be8:	e458      	b.n	40749c <_svfprintf_r+0x8dc>
  407bea:	bf00      	nop
  407bec:	0040b6f8 	.word	0x0040b6f8
  407bf0:	0040b6e4 	.word	0x0040b6e4
  407bf4:	2140      	movs	r1, #64	; 0x40
  407bf6:	980c      	ldr	r0, [sp, #48]	; 0x30
  407bf8:	f001 fa30 	bl	40905c <_malloc_r>
  407bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407bfe:	6010      	str	r0, [r2, #0]
  407c00:	6110      	str	r0, [r2, #16]
  407c02:	2800      	cmp	r0, #0
  407c04:	f000 81f2 	beq.w	407fec <_svfprintf_r+0x142c>
  407c08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407c0a:	2340      	movs	r3, #64	; 0x40
  407c0c:	6153      	str	r3, [r2, #20]
  407c0e:	f7fe bfee 	b.w	406bee <_svfprintf_r+0x2e>
  407c12:	a823      	add	r0, sp, #140	; 0x8c
  407c14:	a920      	add	r1, sp, #128	; 0x80
  407c16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407c18:	9004      	str	r0, [sp, #16]
  407c1a:	9103      	str	r1, [sp, #12]
  407c1c:	a81f      	add	r0, sp, #124	; 0x7c
  407c1e:	2103      	movs	r1, #3
  407c20:	9002      	str	r0, [sp, #8]
  407c22:	9a08      	ldr	r2, [sp, #32]
  407c24:	9401      	str	r4, [sp, #4]
  407c26:	463b      	mov	r3, r7
  407c28:	9100      	str	r1, [sp, #0]
  407c2a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c2c:	f000 fac0 	bl	4081b0 <_dtoa_r>
  407c30:	4625      	mov	r5, r4
  407c32:	4606      	mov	r6, r0
  407c34:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407c36:	2b46      	cmp	r3, #70	; 0x46
  407c38:	eb06 0405 	add.w	r4, r6, r5
  407c3c:	f47f af29 	bne.w	407a92 <_svfprintf_r+0xed2>
  407c40:	7833      	ldrb	r3, [r6, #0]
  407c42:	2b30      	cmp	r3, #48	; 0x30
  407c44:	f000 8178 	beq.w	407f38 <_svfprintf_r+0x1378>
  407c48:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  407c4a:	442c      	add	r4, r5
  407c4c:	e721      	b.n	407a92 <_svfprintf_r+0xed2>
  407c4e:	aa25      	add	r2, sp, #148	; 0x94
  407c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407c52:	980c      	ldr	r0, [sp, #48]	; 0x30
  407c54:	f002 f81c 	bl	409c90 <__ssprint_r>
  407c58:	2800      	cmp	r0, #0
  407c5a:	f47f a883 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407c5e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407c60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407c62:	46c8      	mov	r8, r9
  407c64:	e782      	b.n	407b6c <_svfprintf_r+0xfac>
  407c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407c68:	2b00      	cmp	r3, #0
  407c6a:	bf08      	it	eq
  407c6c:	2301      	moveq	r3, #1
  407c6e:	930a      	str	r3, [sp, #40]	; 0x28
  407c70:	e6db      	b.n	407a2a <_svfprintf_r+0xe6a>
  407c72:	4630      	mov	r0, r6
  407c74:	940a      	str	r4, [sp, #40]	; 0x28
  407c76:	f7fe ff03 	bl	406a80 <strlen>
  407c7a:	950f      	str	r5, [sp, #60]	; 0x3c
  407c7c:	900e      	str	r0, [sp, #56]	; 0x38
  407c7e:	f8cd b01c 	str.w	fp, [sp, #28]
  407c82:	4603      	mov	r3, r0
  407c84:	f7ff b9f9 	b.w	40707a <_svfprintf_r+0x4ba>
  407c88:	272d      	movs	r7, #45	; 0x2d
  407c8a:	2300      	movs	r3, #0
  407c8c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407c90:	930a      	str	r3, [sp, #40]	; 0x28
  407c92:	f7ff b8ae 	b.w	406df2 <_svfprintf_r+0x232>
  407c96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407c98:	9312      	str	r3, [sp, #72]	; 0x48
  407c9a:	461a      	mov	r2, r3
  407c9c:	3303      	adds	r3, #3
  407c9e:	db04      	blt.n	407caa <_svfprintf_r+0x10ea>
  407ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407ca2:	4619      	mov	r1, r3
  407ca4:	4291      	cmp	r1, r2
  407ca6:	f6bf af17 	bge.w	407ad8 <_svfprintf_r+0xf18>
  407caa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407cac:	3b02      	subs	r3, #2
  407cae:	9311      	str	r3, [sp, #68]	; 0x44
  407cb0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  407cb4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  407cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407cba:	3b01      	subs	r3, #1
  407cbc:	2b00      	cmp	r3, #0
  407cbe:	931f      	str	r3, [sp, #124]	; 0x7c
  407cc0:	bfbd      	ittte	lt
  407cc2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  407cc4:	f1c3 0301 	rsblt	r3, r3, #1
  407cc8:	222d      	movlt	r2, #45	; 0x2d
  407cca:	222b      	movge	r2, #43	; 0x2b
  407ccc:	2b09      	cmp	r3, #9
  407cce:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  407cd2:	f340 8116 	ble.w	407f02 <_svfprintf_r+0x1342>
  407cd6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  407cda:	4620      	mov	r0, r4
  407cdc:	4dab      	ldr	r5, [pc, #684]	; (407f8c <_svfprintf_r+0x13cc>)
  407cde:	e000      	b.n	407ce2 <_svfprintf_r+0x1122>
  407ce0:	4610      	mov	r0, r2
  407ce2:	fb85 1203 	smull	r1, r2, r5, r3
  407ce6:	17d9      	asrs	r1, r3, #31
  407ce8:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407cec:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  407cf0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  407cf4:	3230      	adds	r2, #48	; 0x30
  407cf6:	2909      	cmp	r1, #9
  407cf8:	f800 2c01 	strb.w	r2, [r0, #-1]
  407cfc:	460b      	mov	r3, r1
  407cfe:	f100 32ff 	add.w	r2, r0, #4294967295
  407d02:	dced      	bgt.n	407ce0 <_svfprintf_r+0x1120>
  407d04:	3330      	adds	r3, #48	; 0x30
  407d06:	3802      	subs	r0, #2
  407d08:	b2d9      	uxtb	r1, r3
  407d0a:	4284      	cmp	r4, r0
  407d0c:	f802 1c01 	strb.w	r1, [r2, #-1]
  407d10:	f240 8165 	bls.w	407fde <_svfprintf_r+0x141e>
  407d14:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  407d18:	4613      	mov	r3, r2
  407d1a:	e001      	b.n	407d20 <_svfprintf_r+0x1160>
  407d1c:	f813 1b01 	ldrb.w	r1, [r3], #1
  407d20:	f800 1b01 	strb.w	r1, [r0], #1
  407d24:	42a3      	cmp	r3, r4
  407d26:	d1f9      	bne.n	407d1c <_svfprintf_r+0x115c>
  407d28:	3301      	adds	r3, #1
  407d2a:	1a9b      	subs	r3, r3, r2
  407d2c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  407d30:	4413      	add	r3, r2
  407d32:	aa21      	add	r2, sp, #132	; 0x84
  407d34:	1a9b      	subs	r3, r3, r2
  407d36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407d38:	931b      	str	r3, [sp, #108]	; 0x6c
  407d3a:	2a01      	cmp	r2, #1
  407d3c:	4413      	add	r3, r2
  407d3e:	930e      	str	r3, [sp, #56]	; 0x38
  407d40:	f340 8119 	ble.w	407f76 <_svfprintf_r+0x13b6>
  407d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407d46:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407d48:	4413      	add	r3, r2
  407d4a:	930e      	str	r3, [sp, #56]	; 0x38
  407d4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407d50:	9308      	str	r3, [sp, #32]
  407d52:	2300      	movs	r3, #0
  407d54:	9312      	str	r3, [sp, #72]	; 0x48
  407d56:	e6cf      	b.n	407af8 <_svfprintf_r+0xf38>
  407d58:	aa25      	add	r2, sp, #148	; 0x94
  407d5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d5c:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d5e:	f001 ff97 	bl	409c90 <__ssprint_r>
  407d62:	2800      	cmp	r0, #0
  407d64:	f47e affe 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407d68:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407d6a:	46c8      	mov	r8, r9
  407d6c:	e4d7      	b.n	40771e <_svfprintf_r+0xb5e>
  407d6e:	4623      	mov	r3, r4
  407d70:	e6a2      	b.n	407ab8 <_svfprintf_r+0xef8>
  407d72:	aa25      	add	r2, sp, #148	; 0x94
  407d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d76:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d78:	f001 ff8a 	bl	409c90 <__ssprint_r>
  407d7c:	2800      	cmp	r0, #0
  407d7e:	f47e aff1 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407d82:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407d84:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407d86:	46c8      	mov	r8, r9
  407d88:	e5ae      	b.n	4078e8 <_svfprintf_r+0xd28>
  407d8a:	aa25      	add	r2, sp, #148	; 0x94
  407d8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407d8e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407d90:	f001 ff7e 	bl	409c90 <__ssprint_r>
  407d94:	2800      	cmp	r0, #0
  407d96:	f47e afe5 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407d9a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407d9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407d9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407da0:	1a9a      	subs	r2, r3, r2
  407da2:	46c8      	mov	r8, r9
  407da4:	e5b8      	b.n	407918 <_svfprintf_r+0xd58>
  407da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407da8:	9612      	str	r6, [sp, #72]	; 0x48
  407daa:	2b06      	cmp	r3, #6
  407dac:	bf28      	it	cs
  407dae:	2306      	movcs	r3, #6
  407db0:	960a      	str	r6, [sp, #40]	; 0x28
  407db2:	4637      	mov	r7, r6
  407db4:	9308      	str	r3, [sp, #32]
  407db6:	950f      	str	r5, [sp, #60]	; 0x3c
  407db8:	f8cd b01c 	str.w	fp, [sp, #28]
  407dbc:	930e      	str	r3, [sp, #56]	; 0x38
  407dbe:	4e74      	ldr	r6, [pc, #464]	; (407f90 <_svfprintf_r+0x13d0>)
  407dc0:	f7ff b816 	b.w	406df0 <_svfprintf_r+0x230>
  407dc4:	a823      	add	r0, sp, #140	; 0x8c
  407dc6:	a920      	add	r1, sp, #128	; 0x80
  407dc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407dca:	9004      	str	r0, [sp, #16]
  407dcc:	9103      	str	r1, [sp, #12]
  407dce:	a81f      	add	r0, sp, #124	; 0x7c
  407dd0:	2103      	movs	r1, #3
  407dd2:	9002      	str	r0, [sp, #8]
  407dd4:	9a08      	ldr	r2, [sp, #32]
  407dd6:	9501      	str	r5, [sp, #4]
  407dd8:	463b      	mov	r3, r7
  407dda:	9100      	str	r1, [sp, #0]
  407ddc:	980c      	ldr	r0, [sp, #48]	; 0x30
  407dde:	f000 f9e7 	bl	4081b0 <_dtoa_r>
  407de2:	4606      	mov	r6, r0
  407de4:	1944      	adds	r4, r0, r5
  407de6:	e72b      	b.n	407c40 <_svfprintf_r+0x1080>
  407de8:	2306      	movs	r3, #6
  407dea:	930a      	str	r3, [sp, #40]	; 0x28
  407dec:	e61d      	b.n	407a2a <_svfprintf_r+0xe6a>
  407dee:	272d      	movs	r7, #45	; 0x2d
  407df0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407df4:	f7ff bacd 	b.w	407392 <_svfprintf_r+0x7d2>
  407df8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407dfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407dfc:	4413      	add	r3, r2
  407dfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407e00:	930e      	str	r3, [sp, #56]	; 0x38
  407e02:	2a00      	cmp	r2, #0
  407e04:	f340 80b0 	ble.w	407f68 <_svfprintf_r+0x13a8>
  407e08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407e0c:	9308      	str	r3, [sp, #32]
  407e0e:	2367      	movs	r3, #103	; 0x67
  407e10:	9311      	str	r3, [sp, #68]	; 0x44
  407e12:	e671      	b.n	407af8 <_svfprintf_r+0xf38>
  407e14:	2b00      	cmp	r3, #0
  407e16:	f340 80c3 	ble.w	407fa0 <_svfprintf_r+0x13e0>
  407e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407e1c:	2a00      	cmp	r2, #0
  407e1e:	f040 8099 	bne.w	407f54 <_svfprintf_r+0x1394>
  407e22:	f01b 0f01 	tst.w	fp, #1
  407e26:	f040 8095 	bne.w	407f54 <_svfprintf_r+0x1394>
  407e2a:	9308      	str	r3, [sp, #32]
  407e2c:	930e      	str	r3, [sp, #56]	; 0x38
  407e2e:	e663      	b.n	407af8 <_svfprintf_r+0xf38>
  407e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e32:	9308      	str	r3, [sp, #32]
  407e34:	930e      	str	r3, [sp, #56]	; 0x38
  407e36:	900a      	str	r0, [sp, #40]	; 0x28
  407e38:	950f      	str	r5, [sp, #60]	; 0x3c
  407e3a:	f8cd b01c 	str.w	fp, [sp, #28]
  407e3e:	9012      	str	r0, [sp, #72]	; 0x48
  407e40:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407e44:	f7fe bfd4 	b.w	406df0 <_svfprintf_r+0x230>
  407e48:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407e4a:	2b47      	cmp	r3, #71	; 0x47
  407e4c:	f47f ae20 	bne.w	407a90 <_svfprintf_r+0xed0>
  407e50:	f01b 0f01 	tst.w	fp, #1
  407e54:	f47f aeee 	bne.w	407c34 <_svfprintf_r+0x1074>
  407e58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407e5a:	1b9b      	subs	r3, r3, r6
  407e5c:	9313      	str	r3, [sp, #76]	; 0x4c
  407e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407e60:	2b47      	cmp	r3, #71	; 0x47
  407e62:	f43f af18 	beq.w	407c96 <_svfprintf_r+0x10d6>
  407e66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407e68:	9312      	str	r3, [sp, #72]	; 0x48
  407e6a:	e721      	b.n	407cb0 <_svfprintf_r+0x10f0>
  407e6c:	424f      	negs	r7, r1
  407e6e:	3110      	adds	r1, #16
  407e70:	4d48      	ldr	r5, [pc, #288]	; (407f94 <_svfprintf_r+0x13d4>)
  407e72:	da2f      	bge.n	407ed4 <_svfprintf_r+0x1314>
  407e74:	2410      	movs	r4, #16
  407e76:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407e7a:	e004      	b.n	407e86 <_svfprintf_r+0x12c6>
  407e7c:	f108 0808 	add.w	r8, r8, #8
  407e80:	3f10      	subs	r7, #16
  407e82:	2f10      	cmp	r7, #16
  407e84:	dd26      	ble.n	407ed4 <_svfprintf_r+0x1314>
  407e86:	3301      	adds	r3, #1
  407e88:	3210      	adds	r2, #16
  407e8a:	2b07      	cmp	r3, #7
  407e8c:	9227      	str	r2, [sp, #156]	; 0x9c
  407e8e:	9326      	str	r3, [sp, #152]	; 0x98
  407e90:	f8c8 5000 	str.w	r5, [r8]
  407e94:	f8c8 4004 	str.w	r4, [r8, #4]
  407e98:	ddf0      	ble.n	407e7c <_svfprintf_r+0x12bc>
  407e9a:	aa25      	add	r2, sp, #148	; 0x94
  407e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407e9e:	4658      	mov	r0, fp
  407ea0:	f001 fef6 	bl	409c90 <__ssprint_r>
  407ea4:	2800      	cmp	r0, #0
  407ea6:	f47e af5d 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407eaa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407eac:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407eae:	46c8      	mov	r8, r9
  407eb0:	e7e6      	b.n	407e80 <_svfprintf_r+0x12c0>
  407eb2:	aa25      	add	r2, sp, #148	; 0x94
  407eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407eb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  407eb8:	f001 feea 	bl	409c90 <__ssprint_r>
  407ebc:	2800      	cmp	r0, #0
  407ebe:	f47e af51 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407ec2:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407ec4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407ec6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407ec8:	46c8      	mov	r8, r9
  407eca:	e667      	b.n	407b9c <_svfprintf_r+0xfdc>
  407ecc:	2000      	movs	r0, #0
  407ece:	900a      	str	r0, [sp, #40]	; 0x28
  407ed0:	f7fe bed0 	b.w	406c74 <_svfprintf_r+0xb4>
  407ed4:	3301      	adds	r3, #1
  407ed6:	443a      	add	r2, r7
  407ed8:	2b07      	cmp	r3, #7
  407eda:	e888 00a0 	stmia.w	r8, {r5, r7}
  407ede:	9227      	str	r2, [sp, #156]	; 0x9c
  407ee0:	9326      	str	r3, [sp, #152]	; 0x98
  407ee2:	f108 0808 	add.w	r8, r8, #8
  407ee6:	f77f ae5c 	ble.w	407ba2 <_svfprintf_r+0xfe2>
  407eea:	aa25      	add	r2, sp, #148	; 0x94
  407eec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407eee:	980c      	ldr	r0, [sp, #48]	; 0x30
  407ef0:	f001 fece 	bl	409c90 <__ssprint_r>
  407ef4:	2800      	cmp	r0, #0
  407ef6:	f47e af35 	bne.w	406d64 <_svfprintf_r+0x1a4>
  407efa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407efc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407efe:	46c8      	mov	r8, r9
  407f00:	e64f      	b.n	407ba2 <_svfprintf_r+0xfe2>
  407f02:	3330      	adds	r3, #48	; 0x30
  407f04:	2230      	movs	r2, #48	; 0x30
  407f06:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  407f0a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  407f0e:	ab22      	add	r3, sp, #136	; 0x88
  407f10:	e70f      	b.n	407d32 <_svfprintf_r+0x1172>
  407f12:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407f14:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407f16:	4413      	add	r3, r2
  407f18:	930e      	str	r3, [sp, #56]	; 0x38
  407f1a:	e775      	b.n	407e08 <_svfprintf_r+0x1248>
  407f1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407f1e:	e5cb      	b.n	407ab8 <_svfprintf_r+0xef8>
  407f20:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407f22:	4e1d      	ldr	r6, [pc, #116]	; (407f98 <_svfprintf_r+0x13d8>)
  407f24:	2b00      	cmp	r3, #0
  407f26:	bfb6      	itet	lt
  407f28:	272d      	movlt	r7, #45	; 0x2d
  407f2a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  407f2e:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  407f32:	4b1a      	ldr	r3, [pc, #104]	; (407f9c <_svfprintf_r+0x13dc>)
  407f34:	f7ff ba2f 	b.w	407396 <_svfprintf_r+0x7d6>
  407f38:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407f3a:	9808      	ldr	r0, [sp, #32]
  407f3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407f3e:	4639      	mov	r1, r7
  407f40:	f002 ff3a 	bl	40adb8 <__aeabi_dcmpeq>
  407f44:	2800      	cmp	r0, #0
  407f46:	f47f ae7f 	bne.w	407c48 <_svfprintf_r+0x1088>
  407f4a:	f1c5 0501 	rsb	r5, r5, #1
  407f4e:	951f      	str	r5, [sp, #124]	; 0x7c
  407f50:	442c      	add	r4, r5
  407f52:	e59e      	b.n	407a92 <_svfprintf_r+0xed2>
  407f54:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407f56:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407f58:	4413      	add	r3, r2
  407f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407f5c:	441a      	add	r2, r3
  407f5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407f62:	920e      	str	r2, [sp, #56]	; 0x38
  407f64:	9308      	str	r3, [sp, #32]
  407f66:	e5c7      	b.n	407af8 <_svfprintf_r+0xf38>
  407f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407f6c:	f1c3 0301 	rsb	r3, r3, #1
  407f70:	441a      	add	r2, r3
  407f72:	4613      	mov	r3, r2
  407f74:	e7d0      	b.n	407f18 <_svfprintf_r+0x1358>
  407f76:	f01b 0301 	ands.w	r3, fp, #1
  407f7a:	9312      	str	r3, [sp, #72]	; 0x48
  407f7c:	f47f aee2 	bne.w	407d44 <_svfprintf_r+0x1184>
  407f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407f82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407f86:	9308      	str	r3, [sp, #32]
  407f88:	e5b6      	b.n	407af8 <_svfprintf_r+0xf38>
  407f8a:	bf00      	nop
  407f8c:	66666667 	.word	0x66666667
  407f90:	0040b6dc 	.word	0x0040b6dc
  407f94:	0040b6f8 	.word	0x0040b6f8
  407f98:	0040b6b0 	.word	0x0040b6b0
  407f9c:	0040b6ac 	.word	0x0040b6ac
  407fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407fa2:	b913      	cbnz	r3, 407faa <_svfprintf_r+0x13ea>
  407fa4:	f01b 0f01 	tst.w	fp, #1
  407fa8:	d002      	beq.n	407fb0 <_svfprintf_r+0x13f0>
  407faa:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407fac:	3301      	adds	r3, #1
  407fae:	e7d4      	b.n	407f5a <_svfprintf_r+0x139a>
  407fb0:	2301      	movs	r3, #1
  407fb2:	e73a      	b.n	407e2a <_svfprintf_r+0x126a>
  407fb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407fb6:	f89a 3001 	ldrb.w	r3, [sl, #1]
  407fba:	6828      	ldr	r0, [r5, #0]
  407fbc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  407fc0:	900a      	str	r0, [sp, #40]	; 0x28
  407fc2:	4628      	mov	r0, r5
  407fc4:	3004      	adds	r0, #4
  407fc6:	46a2      	mov	sl, r4
  407fc8:	900f      	str	r0, [sp, #60]	; 0x3c
  407fca:	f7fe be51 	b.w	406c70 <_svfprintf_r+0xb0>
  407fce:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fd2:	f7ff b867 	b.w	4070a4 <_svfprintf_r+0x4e4>
  407fd6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fda:	f7ff ba15 	b.w	407408 <_svfprintf_r+0x848>
  407fde:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  407fe2:	e6a6      	b.n	407d32 <_svfprintf_r+0x1172>
  407fe4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407fe8:	f7ff b8eb 	b.w	4071c2 <_svfprintf_r+0x602>
  407fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407fee:	230c      	movs	r3, #12
  407ff0:	6013      	str	r3, [r2, #0]
  407ff2:	f04f 33ff 	mov.w	r3, #4294967295
  407ff6:	9309      	str	r3, [sp, #36]	; 0x24
  407ff8:	f7fe bebd 	b.w	406d76 <_svfprintf_r+0x1b6>
  407ffc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408000:	f7ff b99a 	b.w	407338 <_svfprintf_r+0x778>
  408004:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408008:	f7ff b976 	b.w	4072f8 <_svfprintf_r+0x738>
  40800c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408010:	f7ff b959 	b.w	4072c6 <_svfprintf_r+0x706>
  408014:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  408018:	f7ff b912 	b.w	407240 <_svfprintf_r+0x680>

0040801c <_vsprintf_r>:
  40801c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40801e:	b09b      	sub	sp, #108	; 0x6c
  408020:	460d      	mov	r5, r1
  408022:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  408026:	f44f 7702 	mov.w	r7, #520	; 0x208
  40802a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40802e:	4669      	mov	r1, sp
  408030:	9500      	str	r5, [sp, #0]
  408032:	9504      	str	r5, [sp, #16]
  408034:	f8ad 700c 	strh.w	r7, [sp, #12]
  408038:	9402      	str	r4, [sp, #8]
  40803a:	9405      	str	r4, [sp, #20]
  40803c:	f8ad 600e 	strh.w	r6, [sp, #14]
  408040:	f7fe fdbe 	bl	406bc0 <_svfprintf_r>
  408044:	9b00      	ldr	r3, [sp, #0]
  408046:	2200      	movs	r2, #0
  408048:	701a      	strb	r2, [r3, #0]
  40804a:	b01b      	add	sp, #108	; 0x6c
  40804c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40804e:	bf00      	nop

00408050 <vsprintf>:
  408050:	b410      	push	{r4}
  408052:	4c04      	ldr	r4, [pc, #16]	; (408064 <vsprintf+0x14>)
  408054:	4613      	mov	r3, r2
  408056:	460a      	mov	r2, r1
  408058:	4601      	mov	r1, r0
  40805a:	6820      	ldr	r0, [r4, #0]
  40805c:	bc10      	pop	{r4}
  40805e:	f7ff bfdd 	b.w	40801c <_vsprintf_r>
  408062:	bf00      	nop
  408064:	20000020 	.word	0x20000020

00408068 <register_fini>:
  408068:	4b02      	ldr	r3, [pc, #8]	; (408074 <register_fini+0xc>)
  40806a:	b113      	cbz	r3, 408072 <register_fini+0xa>
  40806c:	4802      	ldr	r0, [pc, #8]	; (408078 <register_fini+0x10>)
  40806e:	f000 b805 	b.w	40807c <atexit>
  408072:	4770      	bx	lr
  408074:	00000000 	.word	0x00000000
  408078:	00409005 	.word	0x00409005

0040807c <atexit>:
  40807c:	2300      	movs	r3, #0
  40807e:	4601      	mov	r1, r0
  408080:	461a      	mov	r2, r3
  408082:	4618      	mov	r0, r3
  408084:	f001 be82 	b.w	409d8c <__register_exitproc>

00408088 <quorem>:
  408088:	6902      	ldr	r2, [r0, #16]
  40808a:	690b      	ldr	r3, [r1, #16]
  40808c:	4293      	cmp	r3, r2
  40808e:	f300 808d 	bgt.w	4081ac <quorem+0x124>
  408092:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408096:	f103 38ff 	add.w	r8, r3, #4294967295
  40809a:	f101 0714 	add.w	r7, r1, #20
  40809e:	f100 0b14 	add.w	fp, r0, #20
  4080a2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4080a6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4080aa:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4080ae:	b083      	sub	sp, #12
  4080b0:	3201      	adds	r2, #1
  4080b2:	fbb3 f9f2 	udiv	r9, r3, r2
  4080b6:	eb0b 0304 	add.w	r3, fp, r4
  4080ba:	9400      	str	r4, [sp, #0]
  4080bc:	eb07 0a04 	add.w	sl, r7, r4
  4080c0:	9301      	str	r3, [sp, #4]
  4080c2:	f1b9 0f00 	cmp.w	r9, #0
  4080c6:	d039      	beq.n	40813c <quorem+0xb4>
  4080c8:	2500      	movs	r5, #0
  4080ca:	462e      	mov	r6, r5
  4080cc:	46bc      	mov	ip, r7
  4080ce:	46de      	mov	lr, fp
  4080d0:	f85c 4b04 	ldr.w	r4, [ip], #4
  4080d4:	f8de 3000 	ldr.w	r3, [lr]
  4080d8:	b2a2      	uxth	r2, r4
  4080da:	fb09 5502 	mla	r5, r9, r2, r5
  4080de:	0c22      	lsrs	r2, r4, #16
  4080e0:	0c2c      	lsrs	r4, r5, #16
  4080e2:	fb09 4202 	mla	r2, r9, r2, r4
  4080e6:	b2ad      	uxth	r5, r5
  4080e8:	1b75      	subs	r5, r6, r5
  4080ea:	b296      	uxth	r6, r2
  4080ec:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4080f0:	fa15 f383 	uxtah	r3, r5, r3
  4080f4:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4080f8:	b29b      	uxth	r3, r3
  4080fa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4080fe:	45e2      	cmp	sl, ip
  408100:	ea4f 4512 	mov.w	r5, r2, lsr #16
  408104:	f84e 3b04 	str.w	r3, [lr], #4
  408108:	ea4f 4626 	mov.w	r6, r6, asr #16
  40810c:	d2e0      	bcs.n	4080d0 <quorem+0x48>
  40810e:	9b00      	ldr	r3, [sp, #0]
  408110:	f85b 3003 	ldr.w	r3, [fp, r3]
  408114:	b993      	cbnz	r3, 40813c <quorem+0xb4>
  408116:	9c01      	ldr	r4, [sp, #4]
  408118:	1f23      	subs	r3, r4, #4
  40811a:	459b      	cmp	fp, r3
  40811c:	d20c      	bcs.n	408138 <quorem+0xb0>
  40811e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  408122:	b94b      	cbnz	r3, 408138 <quorem+0xb0>
  408124:	f1a4 0308 	sub.w	r3, r4, #8
  408128:	e002      	b.n	408130 <quorem+0xa8>
  40812a:	681a      	ldr	r2, [r3, #0]
  40812c:	3b04      	subs	r3, #4
  40812e:	b91a      	cbnz	r2, 408138 <quorem+0xb0>
  408130:	459b      	cmp	fp, r3
  408132:	f108 38ff 	add.w	r8, r8, #4294967295
  408136:	d3f8      	bcc.n	40812a <quorem+0xa2>
  408138:	f8c0 8010 	str.w	r8, [r0, #16]
  40813c:	4604      	mov	r4, r0
  40813e:	f001 fc99 	bl	409a74 <__mcmp>
  408142:	2800      	cmp	r0, #0
  408144:	db2e      	blt.n	4081a4 <quorem+0x11c>
  408146:	f109 0901 	add.w	r9, r9, #1
  40814a:	465d      	mov	r5, fp
  40814c:	2300      	movs	r3, #0
  40814e:	f857 1b04 	ldr.w	r1, [r7], #4
  408152:	6828      	ldr	r0, [r5, #0]
  408154:	b28a      	uxth	r2, r1
  408156:	1a9a      	subs	r2, r3, r2
  408158:	0c0b      	lsrs	r3, r1, #16
  40815a:	fa12 f280 	uxtah	r2, r2, r0
  40815e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  408162:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408166:	b292      	uxth	r2, r2
  408168:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40816c:	45ba      	cmp	sl, r7
  40816e:	f845 2b04 	str.w	r2, [r5], #4
  408172:	ea4f 4323 	mov.w	r3, r3, asr #16
  408176:	d2ea      	bcs.n	40814e <quorem+0xc6>
  408178:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40817c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  408180:	b982      	cbnz	r2, 4081a4 <quorem+0x11c>
  408182:	1f1a      	subs	r2, r3, #4
  408184:	4593      	cmp	fp, r2
  408186:	d20b      	bcs.n	4081a0 <quorem+0x118>
  408188:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40818c:	b942      	cbnz	r2, 4081a0 <quorem+0x118>
  40818e:	3b08      	subs	r3, #8
  408190:	e002      	b.n	408198 <quorem+0x110>
  408192:	681a      	ldr	r2, [r3, #0]
  408194:	3b04      	subs	r3, #4
  408196:	b91a      	cbnz	r2, 4081a0 <quorem+0x118>
  408198:	459b      	cmp	fp, r3
  40819a:	f108 38ff 	add.w	r8, r8, #4294967295
  40819e:	d3f8      	bcc.n	408192 <quorem+0x10a>
  4081a0:	f8c4 8010 	str.w	r8, [r4, #16]
  4081a4:	4648      	mov	r0, r9
  4081a6:	b003      	add	sp, #12
  4081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081ac:	2000      	movs	r0, #0
  4081ae:	4770      	bx	lr

004081b0 <_dtoa_r>:
  4081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4081b4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4081b6:	b09b      	sub	sp, #108	; 0x6c
  4081b8:	4604      	mov	r4, r0
  4081ba:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  4081bc:	4692      	mov	sl, r2
  4081be:	469b      	mov	fp, r3
  4081c0:	b141      	cbz	r1, 4081d4 <_dtoa_r+0x24>
  4081c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4081c4:	604a      	str	r2, [r1, #4]
  4081c6:	2301      	movs	r3, #1
  4081c8:	4093      	lsls	r3, r2
  4081ca:	608b      	str	r3, [r1, #8]
  4081cc:	f001 fa7a 	bl	4096c4 <_Bfree>
  4081d0:	2300      	movs	r3, #0
  4081d2:	6423      	str	r3, [r4, #64]	; 0x40
  4081d4:	f1bb 0f00 	cmp.w	fp, #0
  4081d8:	465d      	mov	r5, fp
  4081da:	db35      	blt.n	408248 <_dtoa_r+0x98>
  4081dc:	2300      	movs	r3, #0
  4081de:	6033      	str	r3, [r6, #0]
  4081e0:	4b9d      	ldr	r3, [pc, #628]	; (408458 <_dtoa_r+0x2a8>)
  4081e2:	43ab      	bics	r3, r5
  4081e4:	d015      	beq.n	408212 <_dtoa_r+0x62>
  4081e6:	4650      	mov	r0, sl
  4081e8:	4659      	mov	r1, fp
  4081ea:	2200      	movs	r2, #0
  4081ec:	2300      	movs	r3, #0
  4081ee:	f002 fde3 	bl	40adb8 <__aeabi_dcmpeq>
  4081f2:	4680      	mov	r8, r0
  4081f4:	2800      	cmp	r0, #0
  4081f6:	d02d      	beq.n	408254 <_dtoa_r+0xa4>
  4081f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4081fa:	2301      	movs	r3, #1
  4081fc:	6013      	str	r3, [r2, #0]
  4081fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408200:	2b00      	cmp	r3, #0
  408202:	f000 80bd 	beq.w	408380 <_dtoa_r+0x1d0>
  408206:	4895      	ldr	r0, [pc, #596]	; (40845c <_dtoa_r+0x2ac>)
  408208:	6018      	str	r0, [r3, #0]
  40820a:	3801      	subs	r0, #1
  40820c:	b01b      	add	sp, #108	; 0x6c
  40820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408212:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408214:	f242 730f 	movw	r3, #9999	; 0x270f
  408218:	6013      	str	r3, [r2, #0]
  40821a:	f1ba 0f00 	cmp.w	sl, #0
  40821e:	d10d      	bne.n	40823c <_dtoa_r+0x8c>
  408220:	f3c5 0513 	ubfx	r5, r5, #0, #20
  408224:	b955      	cbnz	r5, 40823c <_dtoa_r+0x8c>
  408226:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408228:	488d      	ldr	r0, [pc, #564]	; (408460 <_dtoa_r+0x2b0>)
  40822a:	2b00      	cmp	r3, #0
  40822c:	d0ee      	beq.n	40820c <_dtoa_r+0x5c>
  40822e:	f100 0308 	add.w	r3, r0, #8
  408232:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  408234:	6013      	str	r3, [r2, #0]
  408236:	b01b      	add	sp, #108	; 0x6c
  408238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40823c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40823e:	4889      	ldr	r0, [pc, #548]	; (408464 <_dtoa_r+0x2b4>)
  408240:	2b00      	cmp	r3, #0
  408242:	d0e3      	beq.n	40820c <_dtoa_r+0x5c>
  408244:	1cc3      	adds	r3, r0, #3
  408246:	e7f4      	b.n	408232 <_dtoa_r+0x82>
  408248:	2301      	movs	r3, #1
  40824a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40824e:	6033      	str	r3, [r6, #0]
  408250:	46ab      	mov	fp, r5
  408252:	e7c5      	b.n	4081e0 <_dtoa_r+0x30>
  408254:	aa18      	add	r2, sp, #96	; 0x60
  408256:	ab19      	add	r3, sp, #100	; 0x64
  408258:	9201      	str	r2, [sp, #4]
  40825a:	9300      	str	r3, [sp, #0]
  40825c:	4652      	mov	r2, sl
  40825e:	465b      	mov	r3, fp
  408260:	4620      	mov	r0, r4
  408262:	f001 fca7 	bl	409bb4 <__d2b>
  408266:	0d2b      	lsrs	r3, r5, #20
  408268:	4681      	mov	r9, r0
  40826a:	d071      	beq.n	408350 <_dtoa_r+0x1a0>
  40826c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  408270:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  408274:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408276:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40827a:	4650      	mov	r0, sl
  40827c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  408280:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  408284:	2200      	movs	r2, #0
  408286:	4b78      	ldr	r3, [pc, #480]	; (408468 <_dtoa_r+0x2b8>)
  408288:	f002 f97a 	bl	40a580 <__aeabi_dsub>
  40828c:	a36c      	add	r3, pc, #432	; (adr r3, 408440 <_dtoa_r+0x290>)
  40828e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408292:	f002 fb29 	bl	40a8e8 <__aeabi_dmul>
  408296:	a36c      	add	r3, pc, #432	; (adr r3, 408448 <_dtoa_r+0x298>)
  408298:	e9d3 2300 	ldrd	r2, r3, [r3]
  40829c:	f002 f972 	bl	40a584 <__adddf3>
  4082a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4082a4:	4630      	mov	r0, r6
  4082a6:	f002 fab9 	bl	40a81c <__aeabi_i2d>
  4082aa:	a369      	add	r3, pc, #420	; (adr r3, 408450 <_dtoa_r+0x2a0>)
  4082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082b0:	f002 fb1a 	bl	40a8e8 <__aeabi_dmul>
  4082b4:	4602      	mov	r2, r0
  4082b6:	460b      	mov	r3, r1
  4082b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4082bc:	f002 f962 	bl	40a584 <__adddf3>
  4082c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4082c4:	f002 fdc0 	bl	40ae48 <__aeabi_d2iz>
  4082c8:	2200      	movs	r2, #0
  4082ca:	9002      	str	r0, [sp, #8]
  4082cc:	2300      	movs	r3, #0
  4082ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4082d2:	f002 fd7b 	bl	40adcc <__aeabi_dcmplt>
  4082d6:	2800      	cmp	r0, #0
  4082d8:	f040 8173 	bne.w	4085c2 <_dtoa_r+0x412>
  4082dc:	9d02      	ldr	r5, [sp, #8]
  4082de:	2d16      	cmp	r5, #22
  4082e0:	f200 815d 	bhi.w	40859e <_dtoa_r+0x3ee>
  4082e4:	4b61      	ldr	r3, [pc, #388]	; (40846c <_dtoa_r+0x2bc>)
  4082e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  4082ea:	e9d3 0100 	ldrd	r0, r1, [r3]
  4082ee:	4652      	mov	r2, sl
  4082f0:	465b      	mov	r3, fp
  4082f2:	f002 fd89 	bl	40ae08 <__aeabi_dcmpgt>
  4082f6:	2800      	cmp	r0, #0
  4082f8:	f000 81c5 	beq.w	408686 <_dtoa_r+0x4d6>
  4082fc:	1e6b      	subs	r3, r5, #1
  4082fe:	9302      	str	r3, [sp, #8]
  408300:	2300      	movs	r3, #0
  408302:	930e      	str	r3, [sp, #56]	; 0x38
  408304:	1bbf      	subs	r7, r7, r6
  408306:	1e7b      	subs	r3, r7, #1
  408308:	9306      	str	r3, [sp, #24]
  40830a:	f100 8154 	bmi.w	4085b6 <_dtoa_r+0x406>
  40830e:	2300      	movs	r3, #0
  408310:	9308      	str	r3, [sp, #32]
  408312:	9b02      	ldr	r3, [sp, #8]
  408314:	2b00      	cmp	r3, #0
  408316:	f2c0 8145 	blt.w	4085a4 <_dtoa_r+0x3f4>
  40831a:	9a06      	ldr	r2, [sp, #24]
  40831c:	930d      	str	r3, [sp, #52]	; 0x34
  40831e:	4611      	mov	r1, r2
  408320:	4419      	add	r1, r3
  408322:	2300      	movs	r3, #0
  408324:	9106      	str	r1, [sp, #24]
  408326:	930c      	str	r3, [sp, #48]	; 0x30
  408328:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40832a:	2b09      	cmp	r3, #9
  40832c:	d82a      	bhi.n	408384 <_dtoa_r+0x1d4>
  40832e:	2b05      	cmp	r3, #5
  408330:	f340 865b 	ble.w	408fea <_dtoa_r+0xe3a>
  408334:	3b04      	subs	r3, #4
  408336:	9324      	str	r3, [sp, #144]	; 0x90
  408338:	2500      	movs	r5, #0
  40833a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40833c:	3b02      	subs	r3, #2
  40833e:	2b03      	cmp	r3, #3
  408340:	f200 8642 	bhi.w	408fc8 <_dtoa_r+0xe18>
  408344:	e8df f013 	tbh	[pc, r3, lsl #1]
  408348:	02c903d4 	.word	0x02c903d4
  40834c:	046103df 	.word	0x046103df
  408350:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408352:	9e19      	ldr	r6, [sp, #100]	; 0x64
  408354:	443e      	add	r6, r7
  408356:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40835a:	2b20      	cmp	r3, #32
  40835c:	f340 818e 	ble.w	40867c <_dtoa_r+0x4cc>
  408360:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  408364:	f206 4012 	addw	r0, r6, #1042	; 0x412
  408368:	409d      	lsls	r5, r3
  40836a:	fa2a f000 	lsr.w	r0, sl, r0
  40836e:	4328      	orrs	r0, r5
  408370:	f002 fa44 	bl	40a7fc <__aeabi_ui2d>
  408374:	2301      	movs	r3, #1
  408376:	3e01      	subs	r6, #1
  408378:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40837c:	9314      	str	r3, [sp, #80]	; 0x50
  40837e:	e781      	b.n	408284 <_dtoa_r+0xd4>
  408380:	483b      	ldr	r0, [pc, #236]	; (408470 <_dtoa_r+0x2c0>)
  408382:	e743      	b.n	40820c <_dtoa_r+0x5c>
  408384:	2100      	movs	r1, #0
  408386:	6461      	str	r1, [r4, #68]	; 0x44
  408388:	4620      	mov	r0, r4
  40838a:	9125      	str	r1, [sp, #148]	; 0x94
  40838c:	f001 f974 	bl	409678 <_Balloc>
  408390:	f04f 33ff 	mov.w	r3, #4294967295
  408394:	930a      	str	r3, [sp, #40]	; 0x28
  408396:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408398:	930f      	str	r3, [sp, #60]	; 0x3c
  40839a:	2301      	movs	r3, #1
  40839c:	9004      	str	r0, [sp, #16]
  40839e:	6420      	str	r0, [r4, #64]	; 0x40
  4083a0:	9224      	str	r2, [sp, #144]	; 0x90
  4083a2:	930b      	str	r3, [sp, #44]	; 0x2c
  4083a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4083a6:	2b00      	cmp	r3, #0
  4083a8:	f2c0 80d9 	blt.w	40855e <_dtoa_r+0x3ae>
  4083ac:	9a02      	ldr	r2, [sp, #8]
  4083ae:	2a0e      	cmp	r2, #14
  4083b0:	f300 80d5 	bgt.w	40855e <_dtoa_r+0x3ae>
  4083b4:	4b2d      	ldr	r3, [pc, #180]	; (40846c <_dtoa_r+0x2bc>)
  4083b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4083be:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4083c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4083c4:	2b00      	cmp	r3, #0
  4083c6:	f2c0 83ba 	blt.w	408b3e <_dtoa_r+0x98e>
  4083ca:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  4083ce:	4650      	mov	r0, sl
  4083d0:	462a      	mov	r2, r5
  4083d2:	4633      	mov	r3, r6
  4083d4:	4659      	mov	r1, fp
  4083d6:	f002 fbb1 	bl	40ab3c <__aeabi_ddiv>
  4083da:	f002 fd35 	bl	40ae48 <__aeabi_d2iz>
  4083de:	4680      	mov	r8, r0
  4083e0:	f002 fa1c 	bl	40a81c <__aeabi_i2d>
  4083e4:	462a      	mov	r2, r5
  4083e6:	4633      	mov	r3, r6
  4083e8:	f002 fa7e 	bl	40a8e8 <__aeabi_dmul>
  4083ec:	460b      	mov	r3, r1
  4083ee:	4602      	mov	r2, r0
  4083f0:	4659      	mov	r1, fp
  4083f2:	4650      	mov	r0, sl
  4083f4:	f002 f8c4 	bl	40a580 <__aeabi_dsub>
  4083f8:	9d04      	ldr	r5, [sp, #16]
  4083fa:	f108 0330 	add.w	r3, r8, #48	; 0x30
  4083fe:	702b      	strb	r3, [r5, #0]
  408400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408402:	2b01      	cmp	r3, #1
  408404:	4606      	mov	r6, r0
  408406:	460f      	mov	r7, r1
  408408:	f105 0501 	add.w	r5, r5, #1
  40840c:	d068      	beq.n	4084e0 <_dtoa_r+0x330>
  40840e:	2200      	movs	r2, #0
  408410:	4b18      	ldr	r3, [pc, #96]	; (408474 <_dtoa_r+0x2c4>)
  408412:	f002 fa69 	bl	40a8e8 <__aeabi_dmul>
  408416:	2200      	movs	r2, #0
  408418:	2300      	movs	r3, #0
  40841a:	4606      	mov	r6, r0
  40841c:	460f      	mov	r7, r1
  40841e:	f002 fccb 	bl	40adb8 <__aeabi_dcmpeq>
  408422:	2800      	cmp	r0, #0
  408424:	f040 8088 	bne.w	408538 <_dtoa_r+0x388>
  408428:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40842c:	f04f 0a00 	mov.w	sl, #0
  408430:	f8df b040 	ldr.w	fp, [pc, #64]	; 408474 <_dtoa_r+0x2c4>
  408434:	940c      	str	r4, [sp, #48]	; 0x30
  408436:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40843a:	e028      	b.n	40848e <_dtoa_r+0x2de>
  40843c:	f3af 8000 	nop.w
  408440:	636f4361 	.word	0x636f4361
  408444:	3fd287a7 	.word	0x3fd287a7
  408448:	8b60c8b3 	.word	0x8b60c8b3
  40844c:	3fc68a28 	.word	0x3fc68a28
  408450:	509f79fb 	.word	0x509f79fb
  408454:	3fd34413 	.word	0x3fd34413
  408458:	7ff00000 	.word	0x7ff00000
  40845c:	0040b6e5 	.word	0x0040b6e5
  408460:	0040b708 	.word	0x0040b708
  408464:	0040b714 	.word	0x0040b714
  408468:	3ff80000 	.word	0x3ff80000
  40846c:	0040b740 	.word	0x0040b740
  408470:	0040b6e4 	.word	0x0040b6e4
  408474:	40240000 	.word	0x40240000
  408478:	f002 fa36 	bl	40a8e8 <__aeabi_dmul>
  40847c:	2200      	movs	r2, #0
  40847e:	2300      	movs	r3, #0
  408480:	4606      	mov	r6, r0
  408482:	460f      	mov	r7, r1
  408484:	f002 fc98 	bl	40adb8 <__aeabi_dcmpeq>
  408488:	2800      	cmp	r0, #0
  40848a:	f040 83c1 	bne.w	408c10 <_dtoa_r+0xa60>
  40848e:	4642      	mov	r2, r8
  408490:	464b      	mov	r3, r9
  408492:	4630      	mov	r0, r6
  408494:	4639      	mov	r1, r7
  408496:	f002 fb51 	bl	40ab3c <__aeabi_ddiv>
  40849a:	f002 fcd5 	bl	40ae48 <__aeabi_d2iz>
  40849e:	4604      	mov	r4, r0
  4084a0:	f002 f9bc 	bl	40a81c <__aeabi_i2d>
  4084a4:	4642      	mov	r2, r8
  4084a6:	464b      	mov	r3, r9
  4084a8:	f002 fa1e 	bl	40a8e8 <__aeabi_dmul>
  4084ac:	4602      	mov	r2, r0
  4084ae:	460b      	mov	r3, r1
  4084b0:	4630      	mov	r0, r6
  4084b2:	4639      	mov	r1, r7
  4084b4:	f002 f864 	bl	40a580 <__aeabi_dsub>
  4084b8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  4084bc:	9e04      	ldr	r6, [sp, #16]
  4084be:	f805 eb01 	strb.w	lr, [r5], #1
  4084c2:	eba5 0e06 	sub.w	lr, r5, r6
  4084c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4084c8:	45b6      	cmp	lr, r6
  4084ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4084ce:	4652      	mov	r2, sl
  4084d0:	465b      	mov	r3, fp
  4084d2:	d1d1      	bne.n	408478 <_dtoa_r+0x2c8>
  4084d4:	46a0      	mov	r8, r4
  4084d6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4084da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4084dc:	4606      	mov	r6, r0
  4084de:	460f      	mov	r7, r1
  4084e0:	4632      	mov	r2, r6
  4084e2:	463b      	mov	r3, r7
  4084e4:	4630      	mov	r0, r6
  4084e6:	4639      	mov	r1, r7
  4084e8:	f002 f84c 	bl	40a584 <__adddf3>
  4084ec:	4606      	mov	r6, r0
  4084ee:	460f      	mov	r7, r1
  4084f0:	4602      	mov	r2, r0
  4084f2:	460b      	mov	r3, r1
  4084f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4084f8:	f002 fc68 	bl	40adcc <__aeabi_dcmplt>
  4084fc:	b948      	cbnz	r0, 408512 <_dtoa_r+0x362>
  4084fe:	4632      	mov	r2, r6
  408500:	463b      	mov	r3, r7
  408502:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408506:	f002 fc57 	bl	40adb8 <__aeabi_dcmpeq>
  40850a:	b1a8      	cbz	r0, 408538 <_dtoa_r+0x388>
  40850c:	f018 0f01 	tst.w	r8, #1
  408510:	d012      	beq.n	408538 <_dtoa_r+0x388>
  408512:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408516:	9a04      	ldr	r2, [sp, #16]
  408518:	1e6b      	subs	r3, r5, #1
  40851a:	e004      	b.n	408526 <_dtoa_r+0x376>
  40851c:	429a      	cmp	r2, r3
  40851e:	f000 8401 	beq.w	408d24 <_dtoa_r+0xb74>
  408522:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  408526:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40852a:	f103 0501 	add.w	r5, r3, #1
  40852e:	d0f5      	beq.n	40851c <_dtoa_r+0x36c>
  408530:	f108 0801 	add.w	r8, r8, #1
  408534:	f883 8000 	strb.w	r8, [r3]
  408538:	4649      	mov	r1, r9
  40853a:	4620      	mov	r0, r4
  40853c:	f001 f8c2 	bl	4096c4 <_Bfree>
  408540:	2200      	movs	r2, #0
  408542:	9b02      	ldr	r3, [sp, #8]
  408544:	702a      	strb	r2, [r5, #0]
  408546:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408548:	3301      	adds	r3, #1
  40854a:	6013      	str	r3, [r2, #0]
  40854c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40854e:	2b00      	cmp	r3, #0
  408550:	f000 839e 	beq.w	408c90 <_dtoa_r+0xae0>
  408554:	9804      	ldr	r0, [sp, #16]
  408556:	601d      	str	r5, [r3, #0]
  408558:	b01b      	add	sp, #108	; 0x6c
  40855a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40855e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408560:	2a00      	cmp	r2, #0
  408562:	d03e      	beq.n	4085e2 <_dtoa_r+0x432>
  408564:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408566:	2a01      	cmp	r2, #1
  408568:	f340 8311 	ble.w	408b8e <_dtoa_r+0x9de>
  40856c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40856e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408570:	1e5f      	subs	r7, r3, #1
  408572:	42ba      	cmp	r2, r7
  408574:	f2c0 838f 	blt.w	408c96 <_dtoa_r+0xae6>
  408578:	1bd7      	subs	r7, r2, r7
  40857a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40857c:	2b00      	cmp	r3, #0
  40857e:	f2c0 848b 	blt.w	408e98 <_dtoa_r+0xce8>
  408582:	9d08      	ldr	r5, [sp, #32]
  408584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408586:	9a08      	ldr	r2, [sp, #32]
  408588:	441a      	add	r2, r3
  40858a:	9208      	str	r2, [sp, #32]
  40858c:	9a06      	ldr	r2, [sp, #24]
  40858e:	2101      	movs	r1, #1
  408590:	441a      	add	r2, r3
  408592:	4620      	mov	r0, r4
  408594:	9206      	str	r2, [sp, #24]
  408596:	f001 f92f 	bl	4097f8 <__i2b>
  40859a:	4606      	mov	r6, r0
  40859c:	e024      	b.n	4085e8 <_dtoa_r+0x438>
  40859e:	2301      	movs	r3, #1
  4085a0:	930e      	str	r3, [sp, #56]	; 0x38
  4085a2:	e6af      	b.n	408304 <_dtoa_r+0x154>
  4085a4:	9a08      	ldr	r2, [sp, #32]
  4085a6:	9b02      	ldr	r3, [sp, #8]
  4085a8:	1ad2      	subs	r2, r2, r3
  4085aa:	425b      	negs	r3, r3
  4085ac:	930c      	str	r3, [sp, #48]	; 0x30
  4085ae:	2300      	movs	r3, #0
  4085b0:	9208      	str	r2, [sp, #32]
  4085b2:	930d      	str	r3, [sp, #52]	; 0x34
  4085b4:	e6b8      	b.n	408328 <_dtoa_r+0x178>
  4085b6:	f1c7 0301 	rsb	r3, r7, #1
  4085ba:	9308      	str	r3, [sp, #32]
  4085bc:	2300      	movs	r3, #0
  4085be:	9306      	str	r3, [sp, #24]
  4085c0:	e6a7      	b.n	408312 <_dtoa_r+0x162>
  4085c2:	9d02      	ldr	r5, [sp, #8]
  4085c4:	4628      	mov	r0, r5
  4085c6:	f002 f929 	bl	40a81c <__aeabi_i2d>
  4085ca:	4602      	mov	r2, r0
  4085cc:	460b      	mov	r3, r1
  4085ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4085d2:	f002 fbf1 	bl	40adb8 <__aeabi_dcmpeq>
  4085d6:	2800      	cmp	r0, #0
  4085d8:	f47f ae80 	bne.w	4082dc <_dtoa_r+0x12c>
  4085dc:	1e6b      	subs	r3, r5, #1
  4085de:	9302      	str	r3, [sp, #8]
  4085e0:	e67c      	b.n	4082dc <_dtoa_r+0x12c>
  4085e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4085e4:	9d08      	ldr	r5, [sp, #32]
  4085e6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4085e8:	2d00      	cmp	r5, #0
  4085ea:	dd0c      	ble.n	408606 <_dtoa_r+0x456>
  4085ec:	9906      	ldr	r1, [sp, #24]
  4085ee:	2900      	cmp	r1, #0
  4085f0:	460b      	mov	r3, r1
  4085f2:	dd08      	ble.n	408606 <_dtoa_r+0x456>
  4085f4:	42a9      	cmp	r1, r5
  4085f6:	9a08      	ldr	r2, [sp, #32]
  4085f8:	bfa8      	it	ge
  4085fa:	462b      	movge	r3, r5
  4085fc:	1ad2      	subs	r2, r2, r3
  4085fe:	1aed      	subs	r5, r5, r3
  408600:	1acb      	subs	r3, r1, r3
  408602:	9208      	str	r2, [sp, #32]
  408604:	9306      	str	r3, [sp, #24]
  408606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408608:	b1d3      	cbz	r3, 408640 <_dtoa_r+0x490>
  40860a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40860c:	2b00      	cmp	r3, #0
  40860e:	f000 82b7 	beq.w	408b80 <_dtoa_r+0x9d0>
  408612:	2f00      	cmp	r7, #0
  408614:	dd10      	ble.n	408638 <_dtoa_r+0x488>
  408616:	4631      	mov	r1, r6
  408618:	463a      	mov	r2, r7
  40861a:	4620      	mov	r0, r4
  40861c:	f001 f988 	bl	409930 <__pow5mult>
  408620:	464a      	mov	r2, r9
  408622:	4601      	mov	r1, r0
  408624:	4606      	mov	r6, r0
  408626:	4620      	mov	r0, r4
  408628:	f001 f8f0 	bl	40980c <__multiply>
  40862c:	4649      	mov	r1, r9
  40862e:	4680      	mov	r8, r0
  408630:	4620      	mov	r0, r4
  408632:	f001 f847 	bl	4096c4 <_Bfree>
  408636:	46c1      	mov	r9, r8
  408638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40863a:	1bda      	subs	r2, r3, r7
  40863c:	f040 82a1 	bne.w	408b82 <_dtoa_r+0x9d2>
  408640:	2101      	movs	r1, #1
  408642:	4620      	mov	r0, r4
  408644:	f001 f8d8 	bl	4097f8 <__i2b>
  408648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40864a:	2b00      	cmp	r3, #0
  40864c:	4680      	mov	r8, r0
  40864e:	dd1c      	ble.n	40868a <_dtoa_r+0x4da>
  408650:	4601      	mov	r1, r0
  408652:	461a      	mov	r2, r3
  408654:	4620      	mov	r0, r4
  408656:	f001 f96b 	bl	409930 <__pow5mult>
  40865a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40865c:	2b01      	cmp	r3, #1
  40865e:	4680      	mov	r8, r0
  408660:	f340 8254 	ble.w	408b0c <_dtoa_r+0x95c>
  408664:	2300      	movs	r3, #0
  408666:	930c      	str	r3, [sp, #48]	; 0x30
  408668:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40866c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  408670:	6918      	ldr	r0, [r3, #16]
  408672:	f001 f871 	bl	409758 <__hi0bits>
  408676:	f1c0 0020 	rsb	r0, r0, #32
  40867a:	e010      	b.n	40869e <_dtoa_r+0x4ee>
  40867c:	f1c3 0520 	rsb	r5, r3, #32
  408680:	fa0a f005 	lsl.w	r0, sl, r5
  408684:	e674      	b.n	408370 <_dtoa_r+0x1c0>
  408686:	900e      	str	r0, [sp, #56]	; 0x38
  408688:	e63c      	b.n	408304 <_dtoa_r+0x154>
  40868a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40868c:	2b01      	cmp	r3, #1
  40868e:	f340 8287 	ble.w	408ba0 <_dtoa_r+0x9f0>
  408692:	2300      	movs	r3, #0
  408694:	930c      	str	r3, [sp, #48]	; 0x30
  408696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408698:	2001      	movs	r0, #1
  40869a:	2b00      	cmp	r3, #0
  40869c:	d1e4      	bne.n	408668 <_dtoa_r+0x4b8>
  40869e:	9a06      	ldr	r2, [sp, #24]
  4086a0:	4410      	add	r0, r2
  4086a2:	f010 001f 	ands.w	r0, r0, #31
  4086a6:	f000 80a1 	beq.w	4087ec <_dtoa_r+0x63c>
  4086aa:	f1c0 0320 	rsb	r3, r0, #32
  4086ae:	2b04      	cmp	r3, #4
  4086b0:	f340 849e 	ble.w	408ff0 <_dtoa_r+0xe40>
  4086b4:	9b08      	ldr	r3, [sp, #32]
  4086b6:	f1c0 001c 	rsb	r0, r0, #28
  4086ba:	4403      	add	r3, r0
  4086bc:	9308      	str	r3, [sp, #32]
  4086be:	4613      	mov	r3, r2
  4086c0:	4403      	add	r3, r0
  4086c2:	4405      	add	r5, r0
  4086c4:	9306      	str	r3, [sp, #24]
  4086c6:	9b08      	ldr	r3, [sp, #32]
  4086c8:	2b00      	cmp	r3, #0
  4086ca:	dd05      	ble.n	4086d8 <_dtoa_r+0x528>
  4086cc:	4649      	mov	r1, r9
  4086ce:	461a      	mov	r2, r3
  4086d0:	4620      	mov	r0, r4
  4086d2:	f001 f97d 	bl	4099d0 <__lshift>
  4086d6:	4681      	mov	r9, r0
  4086d8:	9b06      	ldr	r3, [sp, #24]
  4086da:	2b00      	cmp	r3, #0
  4086dc:	dd05      	ble.n	4086ea <_dtoa_r+0x53a>
  4086de:	4641      	mov	r1, r8
  4086e0:	461a      	mov	r2, r3
  4086e2:	4620      	mov	r0, r4
  4086e4:	f001 f974 	bl	4099d0 <__lshift>
  4086e8:	4680      	mov	r8, r0
  4086ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4086ec:	2b00      	cmp	r3, #0
  4086ee:	f040 8086 	bne.w	4087fe <_dtoa_r+0x64e>
  4086f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4086f4:	2b00      	cmp	r3, #0
  4086f6:	f340 8266 	ble.w	408bc6 <_dtoa_r+0xa16>
  4086fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4086fc:	2b00      	cmp	r3, #0
  4086fe:	f000 8098 	beq.w	408832 <_dtoa_r+0x682>
  408702:	2d00      	cmp	r5, #0
  408704:	dd05      	ble.n	408712 <_dtoa_r+0x562>
  408706:	4631      	mov	r1, r6
  408708:	462a      	mov	r2, r5
  40870a:	4620      	mov	r0, r4
  40870c:	f001 f960 	bl	4099d0 <__lshift>
  408710:	4606      	mov	r6, r0
  408712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408714:	2b00      	cmp	r3, #0
  408716:	f040 8337 	bne.w	408d88 <_dtoa_r+0xbd8>
  40871a:	9606      	str	r6, [sp, #24]
  40871c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40871e:	9a04      	ldr	r2, [sp, #16]
  408720:	f8dd b018 	ldr.w	fp, [sp, #24]
  408724:	3b01      	subs	r3, #1
  408726:	18d3      	adds	r3, r2, r3
  408728:	930b      	str	r3, [sp, #44]	; 0x2c
  40872a:	f00a 0301 	and.w	r3, sl, #1
  40872e:	930c      	str	r3, [sp, #48]	; 0x30
  408730:	4617      	mov	r7, r2
  408732:	46c2      	mov	sl, r8
  408734:	4651      	mov	r1, sl
  408736:	4648      	mov	r0, r9
  408738:	f7ff fca6 	bl	408088 <quorem>
  40873c:	4631      	mov	r1, r6
  40873e:	4605      	mov	r5, r0
  408740:	4648      	mov	r0, r9
  408742:	f001 f997 	bl	409a74 <__mcmp>
  408746:	465a      	mov	r2, fp
  408748:	900a      	str	r0, [sp, #40]	; 0x28
  40874a:	4651      	mov	r1, sl
  40874c:	4620      	mov	r0, r4
  40874e:	f001 f9ad 	bl	409aac <__mdiff>
  408752:	68c2      	ldr	r2, [r0, #12]
  408754:	4680      	mov	r8, r0
  408756:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40875a:	2a00      	cmp	r2, #0
  40875c:	f040 822b 	bne.w	408bb6 <_dtoa_r+0xa06>
  408760:	4601      	mov	r1, r0
  408762:	4648      	mov	r0, r9
  408764:	9308      	str	r3, [sp, #32]
  408766:	f001 f985 	bl	409a74 <__mcmp>
  40876a:	4641      	mov	r1, r8
  40876c:	9006      	str	r0, [sp, #24]
  40876e:	4620      	mov	r0, r4
  408770:	f000 ffa8 	bl	4096c4 <_Bfree>
  408774:	9a06      	ldr	r2, [sp, #24]
  408776:	9b08      	ldr	r3, [sp, #32]
  408778:	b932      	cbnz	r2, 408788 <_dtoa_r+0x5d8>
  40877a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40877c:	b921      	cbnz	r1, 408788 <_dtoa_r+0x5d8>
  40877e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408780:	2a00      	cmp	r2, #0
  408782:	f000 83ef 	beq.w	408f64 <_dtoa_r+0xdb4>
  408786:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408788:	990a      	ldr	r1, [sp, #40]	; 0x28
  40878a:	2900      	cmp	r1, #0
  40878c:	f2c0 829f 	blt.w	408cce <_dtoa_r+0xb1e>
  408790:	d105      	bne.n	40879e <_dtoa_r+0x5ee>
  408792:	9924      	ldr	r1, [sp, #144]	; 0x90
  408794:	b919      	cbnz	r1, 40879e <_dtoa_r+0x5ee>
  408796:	990c      	ldr	r1, [sp, #48]	; 0x30
  408798:	2900      	cmp	r1, #0
  40879a:	f000 8298 	beq.w	408cce <_dtoa_r+0xb1e>
  40879e:	2a00      	cmp	r2, #0
  4087a0:	f300 8306 	bgt.w	408db0 <_dtoa_r+0xc00>
  4087a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4087a6:	703b      	strb	r3, [r7, #0]
  4087a8:	f107 0801 	add.w	r8, r7, #1
  4087ac:	4297      	cmp	r7, r2
  4087ae:	4645      	mov	r5, r8
  4087b0:	f000 830c 	beq.w	408dcc <_dtoa_r+0xc1c>
  4087b4:	4649      	mov	r1, r9
  4087b6:	2300      	movs	r3, #0
  4087b8:	220a      	movs	r2, #10
  4087ba:	4620      	mov	r0, r4
  4087bc:	f000 ff8c 	bl	4096d8 <__multadd>
  4087c0:	455e      	cmp	r6, fp
  4087c2:	4681      	mov	r9, r0
  4087c4:	4631      	mov	r1, r6
  4087c6:	f04f 0300 	mov.w	r3, #0
  4087ca:	f04f 020a 	mov.w	r2, #10
  4087ce:	4620      	mov	r0, r4
  4087d0:	f000 81eb 	beq.w	408baa <_dtoa_r+0x9fa>
  4087d4:	f000 ff80 	bl	4096d8 <__multadd>
  4087d8:	4659      	mov	r1, fp
  4087da:	4606      	mov	r6, r0
  4087dc:	2300      	movs	r3, #0
  4087de:	220a      	movs	r2, #10
  4087e0:	4620      	mov	r0, r4
  4087e2:	f000 ff79 	bl	4096d8 <__multadd>
  4087e6:	4647      	mov	r7, r8
  4087e8:	4683      	mov	fp, r0
  4087ea:	e7a3      	b.n	408734 <_dtoa_r+0x584>
  4087ec:	201c      	movs	r0, #28
  4087ee:	9b08      	ldr	r3, [sp, #32]
  4087f0:	4403      	add	r3, r0
  4087f2:	9308      	str	r3, [sp, #32]
  4087f4:	9b06      	ldr	r3, [sp, #24]
  4087f6:	4403      	add	r3, r0
  4087f8:	4405      	add	r5, r0
  4087fa:	9306      	str	r3, [sp, #24]
  4087fc:	e763      	b.n	4086c6 <_dtoa_r+0x516>
  4087fe:	4641      	mov	r1, r8
  408800:	4648      	mov	r0, r9
  408802:	f001 f937 	bl	409a74 <__mcmp>
  408806:	2800      	cmp	r0, #0
  408808:	f6bf af73 	bge.w	4086f2 <_dtoa_r+0x542>
  40880c:	9f02      	ldr	r7, [sp, #8]
  40880e:	4649      	mov	r1, r9
  408810:	2300      	movs	r3, #0
  408812:	220a      	movs	r2, #10
  408814:	4620      	mov	r0, r4
  408816:	3f01      	subs	r7, #1
  408818:	9702      	str	r7, [sp, #8]
  40881a:	f000 ff5d 	bl	4096d8 <__multadd>
  40881e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408820:	4681      	mov	r9, r0
  408822:	2b00      	cmp	r3, #0
  408824:	f040 83b6 	bne.w	408f94 <_dtoa_r+0xde4>
  408828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40882a:	2b00      	cmp	r3, #0
  40882c:	f340 83bf 	ble.w	408fae <_dtoa_r+0xdfe>
  408830:	930a      	str	r3, [sp, #40]	; 0x28
  408832:	f8dd b010 	ldr.w	fp, [sp, #16]
  408836:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408838:	465d      	mov	r5, fp
  40883a:	e002      	b.n	408842 <_dtoa_r+0x692>
  40883c:	f000 ff4c 	bl	4096d8 <__multadd>
  408840:	4681      	mov	r9, r0
  408842:	4641      	mov	r1, r8
  408844:	4648      	mov	r0, r9
  408846:	f7ff fc1f 	bl	408088 <quorem>
  40884a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40884e:	f805 ab01 	strb.w	sl, [r5], #1
  408852:	eba5 030b 	sub.w	r3, r5, fp
  408856:	42bb      	cmp	r3, r7
  408858:	f04f 020a 	mov.w	r2, #10
  40885c:	f04f 0300 	mov.w	r3, #0
  408860:	4649      	mov	r1, r9
  408862:	4620      	mov	r0, r4
  408864:	dbea      	blt.n	40883c <_dtoa_r+0x68c>
  408866:	9b04      	ldr	r3, [sp, #16]
  408868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40886a:	2a01      	cmp	r2, #1
  40886c:	bfac      	ite	ge
  40886e:	189b      	addge	r3, r3, r2
  408870:	3301      	addlt	r3, #1
  408872:	461d      	mov	r5, r3
  408874:	f04f 0b00 	mov.w	fp, #0
  408878:	4649      	mov	r1, r9
  40887a:	2201      	movs	r2, #1
  40887c:	4620      	mov	r0, r4
  40887e:	f001 f8a7 	bl	4099d0 <__lshift>
  408882:	4641      	mov	r1, r8
  408884:	4681      	mov	r9, r0
  408886:	f001 f8f5 	bl	409a74 <__mcmp>
  40888a:	2800      	cmp	r0, #0
  40888c:	f340 823d 	ble.w	408d0a <_dtoa_r+0xb5a>
  408890:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  408894:	9904      	ldr	r1, [sp, #16]
  408896:	1e6b      	subs	r3, r5, #1
  408898:	e004      	b.n	4088a4 <_dtoa_r+0x6f4>
  40889a:	428b      	cmp	r3, r1
  40889c:	f000 81ae 	beq.w	408bfc <_dtoa_r+0xa4c>
  4088a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4088a4:	2a39      	cmp	r2, #57	; 0x39
  4088a6:	f103 0501 	add.w	r5, r3, #1
  4088aa:	d0f6      	beq.n	40889a <_dtoa_r+0x6ea>
  4088ac:	3201      	adds	r2, #1
  4088ae:	701a      	strb	r2, [r3, #0]
  4088b0:	4641      	mov	r1, r8
  4088b2:	4620      	mov	r0, r4
  4088b4:	f000 ff06 	bl	4096c4 <_Bfree>
  4088b8:	2e00      	cmp	r6, #0
  4088ba:	f43f ae3d 	beq.w	408538 <_dtoa_r+0x388>
  4088be:	f1bb 0f00 	cmp.w	fp, #0
  4088c2:	d005      	beq.n	4088d0 <_dtoa_r+0x720>
  4088c4:	45b3      	cmp	fp, r6
  4088c6:	d003      	beq.n	4088d0 <_dtoa_r+0x720>
  4088c8:	4659      	mov	r1, fp
  4088ca:	4620      	mov	r0, r4
  4088cc:	f000 fefa 	bl	4096c4 <_Bfree>
  4088d0:	4631      	mov	r1, r6
  4088d2:	4620      	mov	r0, r4
  4088d4:	f000 fef6 	bl	4096c4 <_Bfree>
  4088d8:	e62e      	b.n	408538 <_dtoa_r+0x388>
  4088da:	2300      	movs	r3, #0
  4088dc:	930b      	str	r3, [sp, #44]	; 0x2c
  4088de:	9b02      	ldr	r3, [sp, #8]
  4088e0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4088e2:	4413      	add	r3, r2
  4088e4:	930f      	str	r3, [sp, #60]	; 0x3c
  4088e6:	3301      	adds	r3, #1
  4088e8:	2b01      	cmp	r3, #1
  4088ea:	461f      	mov	r7, r3
  4088ec:	461e      	mov	r6, r3
  4088ee:	930a      	str	r3, [sp, #40]	; 0x28
  4088f0:	bfb8      	it	lt
  4088f2:	2701      	movlt	r7, #1
  4088f4:	2100      	movs	r1, #0
  4088f6:	2f17      	cmp	r7, #23
  4088f8:	6461      	str	r1, [r4, #68]	; 0x44
  4088fa:	d90a      	bls.n	408912 <_dtoa_r+0x762>
  4088fc:	2201      	movs	r2, #1
  4088fe:	2304      	movs	r3, #4
  408900:	005b      	lsls	r3, r3, #1
  408902:	f103 0014 	add.w	r0, r3, #20
  408906:	4287      	cmp	r7, r0
  408908:	4611      	mov	r1, r2
  40890a:	f102 0201 	add.w	r2, r2, #1
  40890e:	d2f7      	bcs.n	408900 <_dtoa_r+0x750>
  408910:	6461      	str	r1, [r4, #68]	; 0x44
  408912:	4620      	mov	r0, r4
  408914:	f000 feb0 	bl	409678 <_Balloc>
  408918:	2e0e      	cmp	r6, #14
  40891a:	9004      	str	r0, [sp, #16]
  40891c:	6420      	str	r0, [r4, #64]	; 0x40
  40891e:	f63f ad41 	bhi.w	4083a4 <_dtoa_r+0x1f4>
  408922:	2d00      	cmp	r5, #0
  408924:	f43f ad3e 	beq.w	4083a4 <_dtoa_r+0x1f4>
  408928:	9902      	ldr	r1, [sp, #8]
  40892a:	2900      	cmp	r1, #0
  40892c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  408930:	f340 8202 	ble.w	408d38 <_dtoa_r+0xb88>
  408934:	4bb8      	ldr	r3, [pc, #736]	; (408c18 <_dtoa_r+0xa68>)
  408936:	f001 020f 	and.w	r2, r1, #15
  40893a:	110d      	asrs	r5, r1, #4
  40893c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408940:	06e9      	lsls	r1, r5, #27
  408942:	e9d3 6700 	ldrd	r6, r7, [r3]
  408946:	f140 81ae 	bpl.w	408ca6 <_dtoa_r+0xaf6>
  40894a:	4bb4      	ldr	r3, [pc, #720]	; (408c1c <_dtoa_r+0xa6c>)
  40894c:	4650      	mov	r0, sl
  40894e:	4659      	mov	r1, fp
  408950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  408954:	f002 f8f2 	bl	40ab3c <__aeabi_ddiv>
  408958:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40895c:	f005 050f 	and.w	r5, r5, #15
  408960:	f04f 0a03 	mov.w	sl, #3
  408964:	b18d      	cbz	r5, 40898a <_dtoa_r+0x7da>
  408966:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 408c1c <_dtoa_r+0xa6c>
  40896a:	07ea      	lsls	r2, r5, #31
  40896c:	d509      	bpl.n	408982 <_dtoa_r+0x7d2>
  40896e:	4630      	mov	r0, r6
  408970:	4639      	mov	r1, r7
  408972:	e9d8 2300 	ldrd	r2, r3, [r8]
  408976:	f001 ffb7 	bl	40a8e8 <__aeabi_dmul>
  40897a:	f10a 0a01 	add.w	sl, sl, #1
  40897e:	4606      	mov	r6, r0
  408980:	460f      	mov	r7, r1
  408982:	106d      	asrs	r5, r5, #1
  408984:	f108 0808 	add.w	r8, r8, #8
  408988:	d1ef      	bne.n	40896a <_dtoa_r+0x7ba>
  40898a:	463b      	mov	r3, r7
  40898c:	4632      	mov	r2, r6
  40898e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  408992:	f002 f8d3 	bl	40ab3c <__aeabi_ddiv>
  408996:	4607      	mov	r7, r0
  408998:	4688      	mov	r8, r1
  40899a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40899c:	b143      	cbz	r3, 4089b0 <_dtoa_r+0x800>
  40899e:	2200      	movs	r2, #0
  4089a0:	4b9f      	ldr	r3, [pc, #636]	; (408c20 <_dtoa_r+0xa70>)
  4089a2:	4638      	mov	r0, r7
  4089a4:	4641      	mov	r1, r8
  4089a6:	f002 fa11 	bl	40adcc <__aeabi_dcmplt>
  4089aa:	2800      	cmp	r0, #0
  4089ac:	f040 8286 	bne.w	408ebc <_dtoa_r+0xd0c>
  4089b0:	4650      	mov	r0, sl
  4089b2:	f001 ff33 	bl	40a81c <__aeabi_i2d>
  4089b6:	463a      	mov	r2, r7
  4089b8:	4643      	mov	r3, r8
  4089ba:	f001 ff95 	bl	40a8e8 <__aeabi_dmul>
  4089be:	4b99      	ldr	r3, [pc, #612]	; (408c24 <_dtoa_r+0xa74>)
  4089c0:	2200      	movs	r2, #0
  4089c2:	f001 fddf 	bl	40a584 <__adddf3>
  4089c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4089c8:	4605      	mov	r5, r0
  4089ca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4089ce:	2b00      	cmp	r3, #0
  4089d0:	f000 813e 	beq.w	408c50 <_dtoa_r+0xaa0>
  4089d4:	9b02      	ldr	r3, [sp, #8]
  4089d6:	9315      	str	r3, [sp, #84]	; 0x54
  4089d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4089da:	9312      	str	r3, [sp, #72]	; 0x48
  4089dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4089de:	2b00      	cmp	r3, #0
  4089e0:	f000 81fa 	beq.w	408dd8 <_dtoa_r+0xc28>
  4089e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4089e6:	4b8c      	ldr	r3, [pc, #560]	; (408c18 <_dtoa_r+0xa68>)
  4089e8:	498f      	ldr	r1, [pc, #572]	; (408c28 <_dtoa_r+0xa78>)
  4089ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4089ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4089f2:	2000      	movs	r0, #0
  4089f4:	f002 f8a2 	bl	40ab3c <__aeabi_ddiv>
  4089f8:	462a      	mov	r2, r5
  4089fa:	4633      	mov	r3, r6
  4089fc:	f001 fdc0 	bl	40a580 <__aeabi_dsub>
  408a00:	4682      	mov	sl, r0
  408a02:	468b      	mov	fp, r1
  408a04:	4638      	mov	r0, r7
  408a06:	4641      	mov	r1, r8
  408a08:	f002 fa1e 	bl	40ae48 <__aeabi_d2iz>
  408a0c:	4605      	mov	r5, r0
  408a0e:	f001 ff05 	bl	40a81c <__aeabi_i2d>
  408a12:	4602      	mov	r2, r0
  408a14:	460b      	mov	r3, r1
  408a16:	4638      	mov	r0, r7
  408a18:	4641      	mov	r1, r8
  408a1a:	f001 fdb1 	bl	40a580 <__aeabi_dsub>
  408a1e:	3530      	adds	r5, #48	; 0x30
  408a20:	fa5f f885 	uxtb.w	r8, r5
  408a24:	9d04      	ldr	r5, [sp, #16]
  408a26:	4606      	mov	r6, r0
  408a28:	460f      	mov	r7, r1
  408a2a:	f885 8000 	strb.w	r8, [r5]
  408a2e:	4602      	mov	r2, r0
  408a30:	460b      	mov	r3, r1
  408a32:	4650      	mov	r0, sl
  408a34:	4659      	mov	r1, fp
  408a36:	3501      	adds	r5, #1
  408a38:	f002 f9e6 	bl	40ae08 <__aeabi_dcmpgt>
  408a3c:	2800      	cmp	r0, #0
  408a3e:	d154      	bne.n	408aea <_dtoa_r+0x93a>
  408a40:	4632      	mov	r2, r6
  408a42:	463b      	mov	r3, r7
  408a44:	2000      	movs	r0, #0
  408a46:	4976      	ldr	r1, [pc, #472]	; (408c20 <_dtoa_r+0xa70>)
  408a48:	f001 fd9a 	bl	40a580 <__aeabi_dsub>
  408a4c:	4602      	mov	r2, r0
  408a4e:	460b      	mov	r3, r1
  408a50:	4650      	mov	r0, sl
  408a52:	4659      	mov	r1, fp
  408a54:	f002 f9d8 	bl	40ae08 <__aeabi_dcmpgt>
  408a58:	2800      	cmp	r0, #0
  408a5a:	f040 8270 	bne.w	408f3e <_dtoa_r+0xd8e>
  408a5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408a60:	2a01      	cmp	r2, #1
  408a62:	f000 8111 	beq.w	408c88 <_dtoa_r+0xad8>
  408a66:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408a68:	9a04      	ldr	r2, [sp, #16]
  408a6a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408a6e:	4413      	add	r3, r2
  408a70:	4699      	mov	r9, r3
  408a72:	e00d      	b.n	408a90 <_dtoa_r+0x8e0>
  408a74:	2000      	movs	r0, #0
  408a76:	496a      	ldr	r1, [pc, #424]	; (408c20 <_dtoa_r+0xa70>)
  408a78:	f001 fd82 	bl	40a580 <__aeabi_dsub>
  408a7c:	4652      	mov	r2, sl
  408a7e:	465b      	mov	r3, fp
  408a80:	f002 f9a4 	bl	40adcc <__aeabi_dcmplt>
  408a84:	2800      	cmp	r0, #0
  408a86:	f040 8258 	bne.w	408f3a <_dtoa_r+0xd8a>
  408a8a:	454d      	cmp	r5, r9
  408a8c:	f000 80fa 	beq.w	408c84 <_dtoa_r+0xad4>
  408a90:	4650      	mov	r0, sl
  408a92:	4659      	mov	r1, fp
  408a94:	2200      	movs	r2, #0
  408a96:	4b65      	ldr	r3, [pc, #404]	; (408c2c <_dtoa_r+0xa7c>)
  408a98:	f001 ff26 	bl	40a8e8 <__aeabi_dmul>
  408a9c:	2200      	movs	r2, #0
  408a9e:	4b63      	ldr	r3, [pc, #396]	; (408c2c <_dtoa_r+0xa7c>)
  408aa0:	4682      	mov	sl, r0
  408aa2:	468b      	mov	fp, r1
  408aa4:	4630      	mov	r0, r6
  408aa6:	4639      	mov	r1, r7
  408aa8:	f001 ff1e 	bl	40a8e8 <__aeabi_dmul>
  408aac:	460f      	mov	r7, r1
  408aae:	4606      	mov	r6, r0
  408ab0:	f002 f9ca 	bl	40ae48 <__aeabi_d2iz>
  408ab4:	4680      	mov	r8, r0
  408ab6:	f001 feb1 	bl	40a81c <__aeabi_i2d>
  408aba:	4602      	mov	r2, r0
  408abc:	460b      	mov	r3, r1
  408abe:	4630      	mov	r0, r6
  408ac0:	4639      	mov	r1, r7
  408ac2:	f001 fd5d 	bl	40a580 <__aeabi_dsub>
  408ac6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408aca:	fa5f f888 	uxtb.w	r8, r8
  408ace:	4652      	mov	r2, sl
  408ad0:	465b      	mov	r3, fp
  408ad2:	f805 8b01 	strb.w	r8, [r5], #1
  408ad6:	4606      	mov	r6, r0
  408ad8:	460f      	mov	r7, r1
  408ada:	f002 f977 	bl	40adcc <__aeabi_dcmplt>
  408ade:	4632      	mov	r2, r6
  408ae0:	463b      	mov	r3, r7
  408ae2:	2800      	cmp	r0, #0
  408ae4:	d0c6      	beq.n	408a74 <_dtoa_r+0x8c4>
  408ae6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408aea:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408aec:	9302      	str	r3, [sp, #8]
  408aee:	e523      	b.n	408538 <_dtoa_r+0x388>
  408af0:	2300      	movs	r3, #0
  408af2:	930b      	str	r3, [sp, #44]	; 0x2c
  408af4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408af6:	2b00      	cmp	r3, #0
  408af8:	f340 80dc 	ble.w	408cb4 <_dtoa_r+0xb04>
  408afc:	461f      	mov	r7, r3
  408afe:	461e      	mov	r6, r3
  408b00:	930f      	str	r3, [sp, #60]	; 0x3c
  408b02:	930a      	str	r3, [sp, #40]	; 0x28
  408b04:	e6f6      	b.n	4088f4 <_dtoa_r+0x744>
  408b06:	2301      	movs	r3, #1
  408b08:	930b      	str	r3, [sp, #44]	; 0x2c
  408b0a:	e7f3      	b.n	408af4 <_dtoa_r+0x944>
  408b0c:	f1ba 0f00 	cmp.w	sl, #0
  408b10:	f47f ada8 	bne.w	408664 <_dtoa_r+0x4b4>
  408b14:	f3cb 0313 	ubfx	r3, fp, #0, #20
  408b18:	2b00      	cmp	r3, #0
  408b1a:	f47f adba 	bne.w	408692 <_dtoa_r+0x4e2>
  408b1e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  408b22:	0d3f      	lsrs	r7, r7, #20
  408b24:	053f      	lsls	r7, r7, #20
  408b26:	2f00      	cmp	r7, #0
  408b28:	f000 820d 	beq.w	408f46 <_dtoa_r+0xd96>
  408b2c:	9b08      	ldr	r3, [sp, #32]
  408b2e:	3301      	adds	r3, #1
  408b30:	9308      	str	r3, [sp, #32]
  408b32:	9b06      	ldr	r3, [sp, #24]
  408b34:	3301      	adds	r3, #1
  408b36:	9306      	str	r3, [sp, #24]
  408b38:	2301      	movs	r3, #1
  408b3a:	930c      	str	r3, [sp, #48]	; 0x30
  408b3c:	e5ab      	b.n	408696 <_dtoa_r+0x4e6>
  408b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408b40:	2b00      	cmp	r3, #0
  408b42:	f73f ac42 	bgt.w	4083ca <_dtoa_r+0x21a>
  408b46:	f040 8221 	bne.w	408f8c <_dtoa_r+0xddc>
  408b4a:	2200      	movs	r2, #0
  408b4c:	4b38      	ldr	r3, [pc, #224]	; (408c30 <_dtoa_r+0xa80>)
  408b4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408b52:	f001 fec9 	bl	40a8e8 <__aeabi_dmul>
  408b56:	4652      	mov	r2, sl
  408b58:	465b      	mov	r3, fp
  408b5a:	f002 f94b 	bl	40adf4 <__aeabi_dcmpge>
  408b5e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  408b62:	4646      	mov	r6, r8
  408b64:	2800      	cmp	r0, #0
  408b66:	d041      	beq.n	408bec <_dtoa_r+0xa3c>
  408b68:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408b6a:	9d04      	ldr	r5, [sp, #16]
  408b6c:	43db      	mvns	r3, r3
  408b6e:	9302      	str	r3, [sp, #8]
  408b70:	4641      	mov	r1, r8
  408b72:	4620      	mov	r0, r4
  408b74:	f000 fda6 	bl	4096c4 <_Bfree>
  408b78:	2e00      	cmp	r6, #0
  408b7a:	f43f acdd 	beq.w	408538 <_dtoa_r+0x388>
  408b7e:	e6a7      	b.n	4088d0 <_dtoa_r+0x720>
  408b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408b82:	4649      	mov	r1, r9
  408b84:	4620      	mov	r0, r4
  408b86:	f000 fed3 	bl	409930 <__pow5mult>
  408b8a:	4681      	mov	r9, r0
  408b8c:	e558      	b.n	408640 <_dtoa_r+0x490>
  408b8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408b90:	2a00      	cmp	r2, #0
  408b92:	f000 8187 	beq.w	408ea4 <_dtoa_r+0xcf4>
  408b96:	f203 4333 	addw	r3, r3, #1075	; 0x433
  408b9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408b9c:	9d08      	ldr	r5, [sp, #32]
  408b9e:	e4f2      	b.n	408586 <_dtoa_r+0x3d6>
  408ba0:	f1ba 0f00 	cmp.w	sl, #0
  408ba4:	f47f ad75 	bne.w	408692 <_dtoa_r+0x4e2>
  408ba8:	e7b4      	b.n	408b14 <_dtoa_r+0x964>
  408baa:	f000 fd95 	bl	4096d8 <__multadd>
  408bae:	4647      	mov	r7, r8
  408bb0:	4606      	mov	r6, r0
  408bb2:	4683      	mov	fp, r0
  408bb4:	e5be      	b.n	408734 <_dtoa_r+0x584>
  408bb6:	4601      	mov	r1, r0
  408bb8:	4620      	mov	r0, r4
  408bba:	9306      	str	r3, [sp, #24]
  408bbc:	f000 fd82 	bl	4096c4 <_Bfree>
  408bc0:	2201      	movs	r2, #1
  408bc2:	9b06      	ldr	r3, [sp, #24]
  408bc4:	e5e0      	b.n	408788 <_dtoa_r+0x5d8>
  408bc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408bc8:	2b02      	cmp	r3, #2
  408bca:	f77f ad96 	ble.w	4086fa <_dtoa_r+0x54a>
  408bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408bd0:	2b00      	cmp	r3, #0
  408bd2:	d1c9      	bne.n	408b68 <_dtoa_r+0x9b8>
  408bd4:	4641      	mov	r1, r8
  408bd6:	2205      	movs	r2, #5
  408bd8:	4620      	mov	r0, r4
  408bda:	f000 fd7d 	bl	4096d8 <__multadd>
  408bde:	4601      	mov	r1, r0
  408be0:	4680      	mov	r8, r0
  408be2:	4648      	mov	r0, r9
  408be4:	f000 ff46 	bl	409a74 <__mcmp>
  408be8:	2800      	cmp	r0, #0
  408bea:	ddbd      	ble.n	408b68 <_dtoa_r+0x9b8>
  408bec:	9a02      	ldr	r2, [sp, #8]
  408bee:	9904      	ldr	r1, [sp, #16]
  408bf0:	2331      	movs	r3, #49	; 0x31
  408bf2:	3201      	adds	r2, #1
  408bf4:	9202      	str	r2, [sp, #8]
  408bf6:	700b      	strb	r3, [r1, #0]
  408bf8:	1c4d      	adds	r5, r1, #1
  408bfa:	e7b9      	b.n	408b70 <_dtoa_r+0x9c0>
  408bfc:	9a02      	ldr	r2, [sp, #8]
  408bfe:	3201      	adds	r2, #1
  408c00:	9202      	str	r2, [sp, #8]
  408c02:	9a04      	ldr	r2, [sp, #16]
  408c04:	2331      	movs	r3, #49	; 0x31
  408c06:	7013      	strb	r3, [r2, #0]
  408c08:	e652      	b.n	4088b0 <_dtoa_r+0x700>
  408c0a:	2301      	movs	r3, #1
  408c0c:	930b      	str	r3, [sp, #44]	; 0x2c
  408c0e:	e666      	b.n	4088de <_dtoa_r+0x72e>
  408c10:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  408c14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408c16:	e48f      	b.n	408538 <_dtoa_r+0x388>
  408c18:	0040b740 	.word	0x0040b740
  408c1c:	0040b718 	.word	0x0040b718
  408c20:	3ff00000 	.word	0x3ff00000
  408c24:	401c0000 	.word	0x401c0000
  408c28:	3fe00000 	.word	0x3fe00000
  408c2c:	40240000 	.word	0x40240000
  408c30:	40140000 	.word	0x40140000
  408c34:	4650      	mov	r0, sl
  408c36:	f001 fdf1 	bl	40a81c <__aeabi_i2d>
  408c3a:	463a      	mov	r2, r7
  408c3c:	4643      	mov	r3, r8
  408c3e:	f001 fe53 	bl	40a8e8 <__aeabi_dmul>
  408c42:	2200      	movs	r2, #0
  408c44:	4bc1      	ldr	r3, [pc, #772]	; (408f4c <_dtoa_r+0xd9c>)
  408c46:	f001 fc9d 	bl	40a584 <__adddf3>
  408c4a:	4605      	mov	r5, r0
  408c4c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408c50:	4641      	mov	r1, r8
  408c52:	2200      	movs	r2, #0
  408c54:	4bbe      	ldr	r3, [pc, #760]	; (408f50 <_dtoa_r+0xda0>)
  408c56:	4638      	mov	r0, r7
  408c58:	f001 fc92 	bl	40a580 <__aeabi_dsub>
  408c5c:	462a      	mov	r2, r5
  408c5e:	4633      	mov	r3, r6
  408c60:	4682      	mov	sl, r0
  408c62:	468b      	mov	fp, r1
  408c64:	f002 f8d0 	bl	40ae08 <__aeabi_dcmpgt>
  408c68:	4680      	mov	r8, r0
  408c6a:	2800      	cmp	r0, #0
  408c6c:	f040 8110 	bne.w	408e90 <_dtoa_r+0xce0>
  408c70:	462a      	mov	r2, r5
  408c72:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  408c76:	4650      	mov	r0, sl
  408c78:	4659      	mov	r1, fp
  408c7a:	f002 f8a7 	bl	40adcc <__aeabi_dcmplt>
  408c7e:	b118      	cbz	r0, 408c88 <_dtoa_r+0xad8>
  408c80:	4646      	mov	r6, r8
  408c82:	e771      	b.n	408b68 <_dtoa_r+0x9b8>
  408c84:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408c88:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  408c8c:	f7ff bb8a 	b.w	4083a4 <_dtoa_r+0x1f4>
  408c90:	9804      	ldr	r0, [sp, #16]
  408c92:	f7ff babb 	b.w	40820c <_dtoa_r+0x5c>
  408c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408c98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  408c9a:	970c      	str	r7, [sp, #48]	; 0x30
  408c9c:	1afb      	subs	r3, r7, r3
  408c9e:	441a      	add	r2, r3
  408ca0:	920d      	str	r2, [sp, #52]	; 0x34
  408ca2:	2700      	movs	r7, #0
  408ca4:	e469      	b.n	40857a <_dtoa_r+0x3ca>
  408ca6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  408caa:	f04f 0a02 	mov.w	sl, #2
  408cae:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  408cb2:	e657      	b.n	408964 <_dtoa_r+0x7b4>
  408cb4:	2100      	movs	r1, #0
  408cb6:	2301      	movs	r3, #1
  408cb8:	6461      	str	r1, [r4, #68]	; 0x44
  408cba:	4620      	mov	r0, r4
  408cbc:	9325      	str	r3, [sp, #148]	; 0x94
  408cbe:	f000 fcdb 	bl	409678 <_Balloc>
  408cc2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408cc4:	9004      	str	r0, [sp, #16]
  408cc6:	6420      	str	r0, [r4, #64]	; 0x40
  408cc8:	930a      	str	r3, [sp, #40]	; 0x28
  408cca:	930f      	str	r3, [sp, #60]	; 0x3c
  408ccc:	e629      	b.n	408922 <_dtoa_r+0x772>
  408cce:	2a00      	cmp	r2, #0
  408cd0:	46d0      	mov	r8, sl
  408cd2:	f8cd b018 	str.w	fp, [sp, #24]
  408cd6:	469a      	mov	sl, r3
  408cd8:	dd11      	ble.n	408cfe <_dtoa_r+0xb4e>
  408cda:	4649      	mov	r1, r9
  408cdc:	2201      	movs	r2, #1
  408cde:	4620      	mov	r0, r4
  408ce0:	f000 fe76 	bl	4099d0 <__lshift>
  408ce4:	4641      	mov	r1, r8
  408ce6:	4681      	mov	r9, r0
  408ce8:	f000 fec4 	bl	409a74 <__mcmp>
  408cec:	2800      	cmp	r0, #0
  408cee:	f340 8146 	ble.w	408f7e <_dtoa_r+0xdce>
  408cf2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  408cf6:	f000 8106 	beq.w	408f06 <_dtoa_r+0xd56>
  408cfa:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  408cfe:	46b3      	mov	fp, r6
  408d00:	f887 a000 	strb.w	sl, [r7]
  408d04:	1c7d      	adds	r5, r7, #1
  408d06:	9e06      	ldr	r6, [sp, #24]
  408d08:	e5d2      	b.n	4088b0 <_dtoa_r+0x700>
  408d0a:	d104      	bne.n	408d16 <_dtoa_r+0xb66>
  408d0c:	f01a 0f01 	tst.w	sl, #1
  408d10:	d001      	beq.n	408d16 <_dtoa_r+0xb66>
  408d12:	e5bd      	b.n	408890 <_dtoa_r+0x6e0>
  408d14:	4615      	mov	r5, r2
  408d16:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408d1a:	2b30      	cmp	r3, #48	; 0x30
  408d1c:	f105 32ff 	add.w	r2, r5, #4294967295
  408d20:	d0f8      	beq.n	408d14 <_dtoa_r+0xb64>
  408d22:	e5c5      	b.n	4088b0 <_dtoa_r+0x700>
  408d24:	9904      	ldr	r1, [sp, #16]
  408d26:	2230      	movs	r2, #48	; 0x30
  408d28:	700a      	strb	r2, [r1, #0]
  408d2a:	9a02      	ldr	r2, [sp, #8]
  408d2c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408d30:	3201      	adds	r2, #1
  408d32:	9202      	str	r2, [sp, #8]
  408d34:	f7ff bbfc 	b.w	408530 <_dtoa_r+0x380>
  408d38:	f000 80bb 	beq.w	408eb2 <_dtoa_r+0xd02>
  408d3c:	9b02      	ldr	r3, [sp, #8]
  408d3e:	425d      	negs	r5, r3
  408d40:	4b84      	ldr	r3, [pc, #528]	; (408f54 <_dtoa_r+0xda4>)
  408d42:	f005 020f 	and.w	r2, r5, #15
  408d46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408d4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  408d52:	f001 fdc9 	bl	40a8e8 <__aeabi_dmul>
  408d56:	112d      	asrs	r5, r5, #4
  408d58:	4607      	mov	r7, r0
  408d5a:	4688      	mov	r8, r1
  408d5c:	f000 812c 	beq.w	408fb8 <_dtoa_r+0xe08>
  408d60:	4e7d      	ldr	r6, [pc, #500]	; (408f58 <_dtoa_r+0xda8>)
  408d62:	f04f 0a02 	mov.w	sl, #2
  408d66:	07eb      	lsls	r3, r5, #31
  408d68:	d509      	bpl.n	408d7e <_dtoa_r+0xbce>
  408d6a:	4638      	mov	r0, r7
  408d6c:	4641      	mov	r1, r8
  408d6e:	e9d6 2300 	ldrd	r2, r3, [r6]
  408d72:	f001 fdb9 	bl	40a8e8 <__aeabi_dmul>
  408d76:	f10a 0a01 	add.w	sl, sl, #1
  408d7a:	4607      	mov	r7, r0
  408d7c:	4688      	mov	r8, r1
  408d7e:	106d      	asrs	r5, r5, #1
  408d80:	f106 0608 	add.w	r6, r6, #8
  408d84:	d1ef      	bne.n	408d66 <_dtoa_r+0xbb6>
  408d86:	e608      	b.n	40899a <_dtoa_r+0x7ea>
  408d88:	6871      	ldr	r1, [r6, #4]
  408d8a:	4620      	mov	r0, r4
  408d8c:	f000 fc74 	bl	409678 <_Balloc>
  408d90:	6933      	ldr	r3, [r6, #16]
  408d92:	3302      	adds	r3, #2
  408d94:	009a      	lsls	r2, r3, #2
  408d96:	4605      	mov	r5, r0
  408d98:	f106 010c 	add.w	r1, r6, #12
  408d9c:	300c      	adds	r0, #12
  408d9e:	f7fd fd55 	bl	40684c <memcpy>
  408da2:	4629      	mov	r1, r5
  408da4:	2201      	movs	r2, #1
  408da6:	4620      	mov	r0, r4
  408da8:	f000 fe12 	bl	4099d0 <__lshift>
  408dac:	9006      	str	r0, [sp, #24]
  408dae:	e4b5      	b.n	40871c <_dtoa_r+0x56c>
  408db0:	2b39      	cmp	r3, #57	; 0x39
  408db2:	f8cd b018 	str.w	fp, [sp, #24]
  408db6:	46d0      	mov	r8, sl
  408db8:	f000 80a5 	beq.w	408f06 <_dtoa_r+0xd56>
  408dbc:	f103 0a01 	add.w	sl, r3, #1
  408dc0:	46b3      	mov	fp, r6
  408dc2:	f887 a000 	strb.w	sl, [r7]
  408dc6:	1c7d      	adds	r5, r7, #1
  408dc8:	9e06      	ldr	r6, [sp, #24]
  408dca:	e571      	b.n	4088b0 <_dtoa_r+0x700>
  408dcc:	465a      	mov	r2, fp
  408dce:	46d0      	mov	r8, sl
  408dd0:	46b3      	mov	fp, r6
  408dd2:	469a      	mov	sl, r3
  408dd4:	4616      	mov	r6, r2
  408dd6:	e54f      	b.n	408878 <_dtoa_r+0x6c8>
  408dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408dda:	495e      	ldr	r1, [pc, #376]	; (408f54 <_dtoa_r+0xda4>)
  408ddc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408de0:	462a      	mov	r2, r5
  408de2:	4633      	mov	r3, r6
  408de4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  408de8:	f001 fd7e 	bl	40a8e8 <__aeabi_dmul>
  408dec:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  408df0:	4638      	mov	r0, r7
  408df2:	4641      	mov	r1, r8
  408df4:	f002 f828 	bl	40ae48 <__aeabi_d2iz>
  408df8:	4605      	mov	r5, r0
  408dfa:	f001 fd0f 	bl	40a81c <__aeabi_i2d>
  408dfe:	460b      	mov	r3, r1
  408e00:	4602      	mov	r2, r0
  408e02:	4641      	mov	r1, r8
  408e04:	4638      	mov	r0, r7
  408e06:	f001 fbbb 	bl	40a580 <__aeabi_dsub>
  408e0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408e0c:	460f      	mov	r7, r1
  408e0e:	9904      	ldr	r1, [sp, #16]
  408e10:	3530      	adds	r5, #48	; 0x30
  408e12:	2b01      	cmp	r3, #1
  408e14:	700d      	strb	r5, [r1, #0]
  408e16:	4606      	mov	r6, r0
  408e18:	f101 0501 	add.w	r5, r1, #1
  408e1c:	d026      	beq.n	408e6c <_dtoa_r+0xcbc>
  408e1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408e20:	9a04      	ldr	r2, [sp, #16]
  408e22:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408f60 <_dtoa_r+0xdb0>
  408e26:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  408e2a:	4413      	add	r3, r2
  408e2c:	f04f 0a00 	mov.w	sl, #0
  408e30:	4699      	mov	r9, r3
  408e32:	4652      	mov	r2, sl
  408e34:	465b      	mov	r3, fp
  408e36:	4630      	mov	r0, r6
  408e38:	4639      	mov	r1, r7
  408e3a:	f001 fd55 	bl	40a8e8 <__aeabi_dmul>
  408e3e:	460f      	mov	r7, r1
  408e40:	4606      	mov	r6, r0
  408e42:	f002 f801 	bl	40ae48 <__aeabi_d2iz>
  408e46:	4680      	mov	r8, r0
  408e48:	f001 fce8 	bl	40a81c <__aeabi_i2d>
  408e4c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408e50:	4602      	mov	r2, r0
  408e52:	460b      	mov	r3, r1
  408e54:	4630      	mov	r0, r6
  408e56:	4639      	mov	r1, r7
  408e58:	f001 fb92 	bl	40a580 <__aeabi_dsub>
  408e5c:	f805 8b01 	strb.w	r8, [r5], #1
  408e60:	454d      	cmp	r5, r9
  408e62:	4606      	mov	r6, r0
  408e64:	460f      	mov	r7, r1
  408e66:	d1e4      	bne.n	408e32 <_dtoa_r+0xc82>
  408e68:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408e6c:	4b3b      	ldr	r3, [pc, #236]	; (408f5c <_dtoa_r+0xdac>)
  408e6e:	2200      	movs	r2, #0
  408e70:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408e74:	f001 fb86 	bl	40a584 <__adddf3>
  408e78:	4632      	mov	r2, r6
  408e7a:	463b      	mov	r3, r7
  408e7c:	f001 ffa6 	bl	40adcc <__aeabi_dcmplt>
  408e80:	2800      	cmp	r0, #0
  408e82:	d046      	beq.n	408f12 <_dtoa_r+0xd62>
  408e84:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408e86:	9302      	str	r3, [sp, #8]
  408e88:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408e8c:	f7ff bb43 	b.w	408516 <_dtoa_r+0x366>
  408e90:	f04f 0800 	mov.w	r8, #0
  408e94:	4646      	mov	r6, r8
  408e96:	e6a9      	b.n	408bec <_dtoa_r+0xa3c>
  408e98:	9b08      	ldr	r3, [sp, #32]
  408e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408e9c:	1a9d      	subs	r5, r3, r2
  408e9e:	2300      	movs	r3, #0
  408ea0:	f7ff bb71 	b.w	408586 <_dtoa_r+0x3d6>
  408ea4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  408ea6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408ea8:	9d08      	ldr	r5, [sp, #32]
  408eaa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  408eae:	f7ff bb6a 	b.w	408586 <_dtoa_r+0x3d6>
  408eb2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  408eb6:	f04f 0a02 	mov.w	sl, #2
  408eba:	e56e      	b.n	40899a <_dtoa_r+0x7ea>
  408ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408ebe:	2b00      	cmp	r3, #0
  408ec0:	f43f aeb8 	beq.w	408c34 <_dtoa_r+0xa84>
  408ec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408ec6:	2b00      	cmp	r3, #0
  408ec8:	f77f aede 	ble.w	408c88 <_dtoa_r+0xad8>
  408ecc:	2200      	movs	r2, #0
  408ece:	4b24      	ldr	r3, [pc, #144]	; (408f60 <_dtoa_r+0xdb0>)
  408ed0:	4638      	mov	r0, r7
  408ed2:	4641      	mov	r1, r8
  408ed4:	f001 fd08 	bl	40a8e8 <__aeabi_dmul>
  408ed8:	4607      	mov	r7, r0
  408eda:	4688      	mov	r8, r1
  408edc:	f10a 0001 	add.w	r0, sl, #1
  408ee0:	f001 fc9c 	bl	40a81c <__aeabi_i2d>
  408ee4:	463a      	mov	r2, r7
  408ee6:	4643      	mov	r3, r8
  408ee8:	f001 fcfe 	bl	40a8e8 <__aeabi_dmul>
  408eec:	2200      	movs	r2, #0
  408eee:	4b17      	ldr	r3, [pc, #92]	; (408f4c <_dtoa_r+0xd9c>)
  408ef0:	f001 fb48 	bl	40a584 <__adddf3>
  408ef4:	9a02      	ldr	r2, [sp, #8]
  408ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408ef8:	9312      	str	r3, [sp, #72]	; 0x48
  408efa:	3a01      	subs	r2, #1
  408efc:	4605      	mov	r5, r0
  408efe:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408f02:	9215      	str	r2, [sp, #84]	; 0x54
  408f04:	e56a      	b.n	4089dc <_dtoa_r+0x82c>
  408f06:	2239      	movs	r2, #57	; 0x39
  408f08:	46b3      	mov	fp, r6
  408f0a:	703a      	strb	r2, [r7, #0]
  408f0c:	9e06      	ldr	r6, [sp, #24]
  408f0e:	1c7d      	adds	r5, r7, #1
  408f10:	e4c0      	b.n	408894 <_dtoa_r+0x6e4>
  408f12:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  408f16:	2000      	movs	r0, #0
  408f18:	4910      	ldr	r1, [pc, #64]	; (408f5c <_dtoa_r+0xdac>)
  408f1a:	f001 fb31 	bl	40a580 <__aeabi_dsub>
  408f1e:	4632      	mov	r2, r6
  408f20:	463b      	mov	r3, r7
  408f22:	f001 ff71 	bl	40ae08 <__aeabi_dcmpgt>
  408f26:	b908      	cbnz	r0, 408f2c <_dtoa_r+0xd7c>
  408f28:	e6ae      	b.n	408c88 <_dtoa_r+0xad8>
  408f2a:	4615      	mov	r5, r2
  408f2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408f30:	2b30      	cmp	r3, #48	; 0x30
  408f32:	f105 32ff 	add.w	r2, r5, #4294967295
  408f36:	d0f8      	beq.n	408f2a <_dtoa_r+0xd7a>
  408f38:	e5d7      	b.n	408aea <_dtoa_r+0x93a>
  408f3a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408f40:	9302      	str	r3, [sp, #8]
  408f42:	f7ff bae8 	b.w	408516 <_dtoa_r+0x366>
  408f46:	970c      	str	r7, [sp, #48]	; 0x30
  408f48:	f7ff bba5 	b.w	408696 <_dtoa_r+0x4e6>
  408f4c:	401c0000 	.word	0x401c0000
  408f50:	40140000 	.word	0x40140000
  408f54:	0040b740 	.word	0x0040b740
  408f58:	0040b718 	.word	0x0040b718
  408f5c:	3fe00000 	.word	0x3fe00000
  408f60:	40240000 	.word	0x40240000
  408f64:	2b39      	cmp	r3, #57	; 0x39
  408f66:	f8cd b018 	str.w	fp, [sp, #24]
  408f6a:	46d0      	mov	r8, sl
  408f6c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408f70:	469a      	mov	sl, r3
  408f72:	d0c8      	beq.n	408f06 <_dtoa_r+0xd56>
  408f74:	f1bb 0f00 	cmp.w	fp, #0
  408f78:	f73f aebf 	bgt.w	408cfa <_dtoa_r+0xb4a>
  408f7c:	e6bf      	b.n	408cfe <_dtoa_r+0xb4e>
  408f7e:	f47f aebe 	bne.w	408cfe <_dtoa_r+0xb4e>
  408f82:	f01a 0f01 	tst.w	sl, #1
  408f86:	f43f aeba 	beq.w	408cfe <_dtoa_r+0xb4e>
  408f8a:	e6b2      	b.n	408cf2 <_dtoa_r+0xb42>
  408f8c:	f04f 0800 	mov.w	r8, #0
  408f90:	4646      	mov	r6, r8
  408f92:	e5e9      	b.n	408b68 <_dtoa_r+0x9b8>
  408f94:	4631      	mov	r1, r6
  408f96:	2300      	movs	r3, #0
  408f98:	220a      	movs	r2, #10
  408f9a:	4620      	mov	r0, r4
  408f9c:	f000 fb9c 	bl	4096d8 <__multadd>
  408fa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408fa2:	2b00      	cmp	r3, #0
  408fa4:	4606      	mov	r6, r0
  408fa6:	dd0a      	ble.n	408fbe <_dtoa_r+0xe0e>
  408fa8:	930a      	str	r3, [sp, #40]	; 0x28
  408faa:	f7ff bbaa 	b.w	408702 <_dtoa_r+0x552>
  408fae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408fb0:	2b02      	cmp	r3, #2
  408fb2:	dc23      	bgt.n	408ffc <_dtoa_r+0xe4c>
  408fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408fb6:	e43b      	b.n	408830 <_dtoa_r+0x680>
  408fb8:	f04f 0a02 	mov.w	sl, #2
  408fbc:	e4ed      	b.n	40899a <_dtoa_r+0x7ea>
  408fbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408fc0:	2b02      	cmp	r3, #2
  408fc2:	dc1b      	bgt.n	408ffc <_dtoa_r+0xe4c>
  408fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408fc6:	e7ef      	b.n	408fa8 <_dtoa_r+0xdf8>
  408fc8:	2500      	movs	r5, #0
  408fca:	6465      	str	r5, [r4, #68]	; 0x44
  408fcc:	4629      	mov	r1, r5
  408fce:	4620      	mov	r0, r4
  408fd0:	f000 fb52 	bl	409678 <_Balloc>
  408fd4:	f04f 33ff 	mov.w	r3, #4294967295
  408fd8:	930a      	str	r3, [sp, #40]	; 0x28
  408fda:	930f      	str	r3, [sp, #60]	; 0x3c
  408fdc:	2301      	movs	r3, #1
  408fde:	9004      	str	r0, [sp, #16]
  408fe0:	9525      	str	r5, [sp, #148]	; 0x94
  408fe2:	6420      	str	r0, [r4, #64]	; 0x40
  408fe4:	930b      	str	r3, [sp, #44]	; 0x2c
  408fe6:	f7ff b9dd 	b.w	4083a4 <_dtoa_r+0x1f4>
  408fea:	2501      	movs	r5, #1
  408fec:	f7ff b9a5 	b.w	40833a <_dtoa_r+0x18a>
  408ff0:	f43f ab69 	beq.w	4086c6 <_dtoa_r+0x516>
  408ff4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408ff8:	f7ff bbf9 	b.w	4087ee <_dtoa_r+0x63e>
  408ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408ffe:	930a      	str	r3, [sp, #40]	; 0x28
  409000:	e5e5      	b.n	408bce <_dtoa_r+0xa1e>
  409002:	bf00      	nop

00409004 <__libc_fini_array>:
  409004:	b538      	push	{r3, r4, r5, lr}
  409006:	4c0a      	ldr	r4, [pc, #40]	; (409030 <__libc_fini_array+0x2c>)
  409008:	4d0a      	ldr	r5, [pc, #40]	; (409034 <__libc_fini_array+0x30>)
  40900a:	1b64      	subs	r4, r4, r5
  40900c:	10a4      	asrs	r4, r4, #2
  40900e:	d00a      	beq.n	409026 <__libc_fini_array+0x22>
  409010:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  409014:	3b01      	subs	r3, #1
  409016:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40901a:	3c01      	subs	r4, #1
  40901c:	f855 3904 	ldr.w	r3, [r5], #-4
  409020:	4798      	blx	r3
  409022:	2c00      	cmp	r4, #0
  409024:	d1f9      	bne.n	40901a <__libc_fini_array+0x16>
  409026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40902a:	f002 bc87 	b.w	40b93c <_fini>
  40902e:	bf00      	nop
  409030:	0040b94c 	.word	0x0040b94c
  409034:	0040b948 	.word	0x0040b948

00409038 <_localeconv_r>:
  409038:	4a04      	ldr	r2, [pc, #16]	; (40904c <_localeconv_r+0x14>)
  40903a:	4b05      	ldr	r3, [pc, #20]	; (409050 <_localeconv_r+0x18>)
  40903c:	6812      	ldr	r2, [r2, #0]
  40903e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  409040:	2800      	cmp	r0, #0
  409042:	bf08      	it	eq
  409044:	4618      	moveq	r0, r3
  409046:	30f0      	adds	r0, #240	; 0xf0
  409048:	4770      	bx	lr
  40904a:	bf00      	nop
  40904c:	20000020 	.word	0x20000020
  409050:	20000864 	.word	0x20000864

00409054 <__retarget_lock_acquire_recursive>:
  409054:	4770      	bx	lr
  409056:	bf00      	nop

00409058 <__retarget_lock_release_recursive>:
  409058:	4770      	bx	lr
  40905a:	bf00      	nop

0040905c <_malloc_r>:
  40905c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409060:	f101 060b 	add.w	r6, r1, #11
  409064:	2e16      	cmp	r6, #22
  409066:	b083      	sub	sp, #12
  409068:	4605      	mov	r5, r0
  40906a:	f240 809e 	bls.w	4091aa <_malloc_r+0x14e>
  40906e:	f036 0607 	bics.w	r6, r6, #7
  409072:	f100 80bd 	bmi.w	4091f0 <_malloc_r+0x194>
  409076:	42b1      	cmp	r1, r6
  409078:	f200 80ba 	bhi.w	4091f0 <_malloc_r+0x194>
  40907c:	f000 faf0 	bl	409660 <__malloc_lock>
  409080:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  409084:	f0c0 8293 	bcc.w	4095ae <_malloc_r+0x552>
  409088:	0a73      	lsrs	r3, r6, #9
  40908a:	f000 80b8 	beq.w	4091fe <_malloc_r+0x1a2>
  40908e:	2b04      	cmp	r3, #4
  409090:	f200 8179 	bhi.w	409386 <_malloc_r+0x32a>
  409094:	09b3      	lsrs	r3, r6, #6
  409096:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40909a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40909e:	00c3      	lsls	r3, r0, #3
  4090a0:	4fbf      	ldr	r7, [pc, #764]	; (4093a0 <_malloc_r+0x344>)
  4090a2:	443b      	add	r3, r7
  4090a4:	f1a3 0108 	sub.w	r1, r3, #8
  4090a8:	685c      	ldr	r4, [r3, #4]
  4090aa:	42a1      	cmp	r1, r4
  4090ac:	d106      	bne.n	4090bc <_malloc_r+0x60>
  4090ae:	e00c      	b.n	4090ca <_malloc_r+0x6e>
  4090b0:	2a00      	cmp	r2, #0
  4090b2:	f280 80aa 	bge.w	40920a <_malloc_r+0x1ae>
  4090b6:	68e4      	ldr	r4, [r4, #12]
  4090b8:	42a1      	cmp	r1, r4
  4090ba:	d006      	beq.n	4090ca <_malloc_r+0x6e>
  4090bc:	6863      	ldr	r3, [r4, #4]
  4090be:	f023 0303 	bic.w	r3, r3, #3
  4090c2:	1b9a      	subs	r2, r3, r6
  4090c4:	2a0f      	cmp	r2, #15
  4090c6:	ddf3      	ble.n	4090b0 <_malloc_r+0x54>
  4090c8:	4670      	mov	r0, lr
  4090ca:	693c      	ldr	r4, [r7, #16]
  4090cc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4093b4 <_malloc_r+0x358>
  4090d0:	4574      	cmp	r4, lr
  4090d2:	f000 81ab 	beq.w	40942c <_malloc_r+0x3d0>
  4090d6:	6863      	ldr	r3, [r4, #4]
  4090d8:	f023 0303 	bic.w	r3, r3, #3
  4090dc:	1b9a      	subs	r2, r3, r6
  4090de:	2a0f      	cmp	r2, #15
  4090e0:	f300 8190 	bgt.w	409404 <_malloc_r+0x3a8>
  4090e4:	2a00      	cmp	r2, #0
  4090e6:	f8c7 e014 	str.w	lr, [r7, #20]
  4090ea:	f8c7 e010 	str.w	lr, [r7, #16]
  4090ee:	f280 809d 	bge.w	40922c <_malloc_r+0x1d0>
  4090f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4090f6:	f080 8161 	bcs.w	4093bc <_malloc_r+0x360>
  4090fa:	08db      	lsrs	r3, r3, #3
  4090fc:	f103 0c01 	add.w	ip, r3, #1
  409100:	1099      	asrs	r1, r3, #2
  409102:	687a      	ldr	r2, [r7, #4]
  409104:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  409108:	f8c4 8008 	str.w	r8, [r4, #8]
  40910c:	2301      	movs	r3, #1
  40910e:	408b      	lsls	r3, r1
  409110:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  409114:	4313      	orrs	r3, r2
  409116:	3908      	subs	r1, #8
  409118:	60e1      	str	r1, [r4, #12]
  40911a:	607b      	str	r3, [r7, #4]
  40911c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  409120:	f8c8 400c 	str.w	r4, [r8, #12]
  409124:	1082      	asrs	r2, r0, #2
  409126:	2401      	movs	r4, #1
  409128:	4094      	lsls	r4, r2
  40912a:	429c      	cmp	r4, r3
  40912c:	f200 808b 	bhi.w	409246 <_malloc_r+0x1ea>
  409130:	421c      	tst	r4, r3
  409132:	d106      	bne.n	409142 <_malloc_r+0xe6>
  409134:	f020 0003 	bic.w	r0, r0, #3
  409138:	0064      	lsls	r4, r4, #1
  40913a:	421c      	tst	r4, r3
  40913c:	f100 0004 	add.w	r0, r0, #4
  409140:	d0fa      	beq.n	409138 <_malloc_r+0xdc>
  409142:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  409146:	46cc      	mov	ip, r9
  409148:	4680      	mov	r8, r0
  40914a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40914e:	459c      	cmp	ip, r3
  409150:	d107      	bne.n	409162 <_malloc_r+0x106>
  409152:	e16d      	b.n	409430 <_malloc_r+0x3d4>
  409154:	2a00      	cmp	r2, #0
  409156:	f280 817b 	bge.w	409450 <_malloc_r+0x3f4>
  40915a:	68db      	ldr	r3, [r3, #12]
  40915c:	459c      	cmp	ip, r3
  40915e:	f000 8167 	beq.w	409430 <_malloc_r+0x3d4>
  409162:	6859      	ldr	r1, [r3, #4]
  409164:	f021 0103 	bic.w	r1, r1, #3
  409168:	1b8a      	subs	r2, r1, r6
  40916a:	2a0f      	cmp	r2, #15
  40916c:	ddf2      	ble.n	409154 <_malloc_r+0xf8>
  40916e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  409172:	f8d3 8008 	ldr.w	r8, [r3, #8]
  409176:	9300      	str	r3, [sp, #0]
  409178:	199c      	adds	r4, r3, r6
  40917a:	4628      	mov	r0, r5
  40917c:	f046 0601 	orr.w	r6, r6, #1
  409180:	f042 0501 	orr.w	r5, r2, #1
  409184:	605e      	str	r6, [r3, #4]
  409186:	f8c8 c00c 	str.w	ip, [r8, #12]
  40918a:	f8cc 8008 	str.w	r8, [ip, #8]
  40918e:	617c      	str	r4, [r7, #20]
  409190:	613c      	str	r4, [r7, #16]
  409192:	f8c4 e00c 	str.w	lr, [r4, #12]
  409196:	f8c4 e008 	str.w	lr, [r4, #8]
  40919a:	6065      	str	r5, [r4, #4]
  40919c:	505a      	str	r2, [r3, r1]
  40919e:	f000 fa65 	bl	40966c <__malloc_unlock>
  4091a2:	9b00      	ldr	r3, [sp, #0]
  4091a4:	f103 0408 	add.w	r4, r3, #8
  4091a8:	e01e      	b.n	4091e8 <_malloc_r+0x18c>
  4091aa:	2910      	cmp	r1, #16
  4091ac:	d820      	bhi.n	4091f0 <_malloc_r+0x194>
  4091ae:	f000 fa57 	bl	409660 <__malloc_lock>
  4091b2:	2610      	movs	r6, #16
  4091b4:	2318      	movs	r3, #24
  4091b6:	2002      	movs	r0, #2
  4091b8:	4f79      	ldr	r7, [pc, #484]	; (4093a0 <_malloc_r+0x344>)
  4091ba:	443b      	add	r3, r7
  4091bc:	f1a3 0208 	sub.w	r2, r3, #8
  4091c0:	685c      	ldr	r4, [r3, #4]
  4091c2:	4294      	cmp	r4, r2
  4091c4:	f000 813d 	beq.w	409442 <_malloc_r+0x3e6>
  4091c8:	6863      	ldr	r3, [r4, #4]
  4091ca:	68e1      	ldr	r1, [r4, #12]
  4091cc:	68a6      	ldr	r6, [r4, #8]
  4091ce:	f023 0303 	bic.w	r3, r3, #3
  4091d2:	4423      	add	r3, r4
  4091d4:	4628      	mov	r0, r5
  4091d6:	685a      	ldr	r2, [r3, #4]
  4091d8:	60f1      	str	r1, [r6, #12]
  4091da:	f042 0201 	orr.w	r2, r2, #1
  4091de:	608e      	str	r6, [r1, #8]
  4091e0:	605a      	str	r2, [r3, #4]
  4091e2:	f000 fa43 	bl	40966c <__malloc_unlock>
  4091e6:	3408      	adds	r4, #8
  4091e8:	4620      	mov	r0, r4
  4091ea:	b003      	add	sp, #12
  4091ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091f0:	2400      	movs	r4, #0
  4091f2:	230c      	movs	r3, #12
  4091f4:	4620      	mov	r0, r4
  4091f6:	602b      	str	r3, [r5, #0]
  4091f8:	b003      	add	sp, #12
  4091fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4091fe:	2040      	movs	r0, #64	; 0x40
  409200:	f44f 7300 	mov.w	r3, #512	; 0x200
  409204:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  409208:	e74a      	b.n	4090a0 <_malloc_r+0x44>
  40920a:	4423      	add	r3, r4
  40920c:	68e1      	ldr	r1, [r4, #12]
  40920e:	685a      	ldr	r2, [r3, #4]
  409210:	68a6      	ldr	r6, [r4, #8]
  409212:	f042 0201 	orr.w	r2, r2, #1
  409216:	60f1      	str	r1, [r6, #12]
  409218:	4628      	mov	r0, r5
  40921a:	608e      	str	r6, [r1, #8]
  40921c:	605a      	str	r2, [r3, #4]
  40921e:	f000 fa25 	bl	40966c <__malloc_unlock>
  409222:	3408      	adds	r4, #8
  409224:	4620      	mov	r0, r4
  409226:	b003      	add	sp, #12
  409228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40922c:	4423      	add	r3, r4
  40922e:	4628      	mov	r0, r5
  409230:	685a      	ldr	r2, [r3, #4]
  409232:	f042 0201 	orr.w	r2, r2, #1
  409236:	605a      	str	r2, [r3, #4]
  409238:	f000 fa18 	bl	40966c <__malloc_unlock>
  40923c:	3408      	adds	r4, #8
  40923e:	4620      	mov	r0, r4
  409240:	b003      	add	sp, #12
  409242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409246:	68bc      	ldr	r4, [r7, #8]
  409248:	6863      	ldr	r3, [r4, #4]
  40924a:	f023 0803 	bic.w	r8, r3, #3
  40924e:	45b0      	cmp	r8, r6
  409250:	d304      	bcc.n	40925c <_malloc_r+0x200>
  409252:	eba8 0306 	sub.w	r3, r8, r6
  409256:	2b0f      	cmp	r3, #15
  409258:	f300 8085 	bgt.w	409366 <_malloc_r+0x30a>
  40925c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4093b8 <_malloc_r+0x35c>
  409260:	4b50      	ldr	r3, [pc, #320]	; (4093a4 <_malloc_r+0x348>)
  409262:	f8d9 2000 	ldr.w	r2, [r9]
  409266:	681b      	ldr	r3, [r3, #0]
  409268:	3201      	adds	r2, #1
  40926a:	4433      	add	r3, r6
  40926c:	eb04 0a08 	add.w	sl, r4, r8
  409270:	f000 8155 	beq.w	40951e <_malloc_r+0x4c2>
  409274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  409278:	330f      	adds	r3, #15
  40927a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40927e:	f02b 0b0f 	bic.w	fp, fp, #15
  409282:	4659      	mov	r1, fp
  409284:	4628      	mov	r0, r5
  409286:	f000 fcf1 	bl	409c6c <_sbrk_r>
  40928a:	1c41      	adds	r1, r0, #1
  40928c:	4602      	mov	r2, r0
  40928e:	f000 80fc 	beq.w	40948a <_malloc_r+0x42e>
  409292:	4582      	cmp	sl, r0
  409294:	f200 80f7 	bhi.w	409486 <_malloc_r+0x42a>
  409298:	4b43      	ldr	r3, [pc, #268]	; (4093a8 <_malloc_r+0x34c>)
  40929a:	6819      	ldr	r1, [r3, #0]
  40929c:	4459      	add	r1, fp
  40929e:	6019      	str	r1, [r3, #0]
  4092a0:	f000 814d 	beq.w	40953e <_malloc_r+0x4e2>
  4092a4:	f8d9 0000 	ldr.w	r0, [r9]
  4092a8:	3001      	adds	r0, #1
  4092aa:	bf1b      	ittet	ne
  4092ac:	eba2 0a0a 	subne.w	sl, r2, sl
  4092b0:	4451      	addne	r1, sl
  4092b2:	f8c9 2000 	streq.w	r2, [r9]
  4092b6:	6019      	strne	r1, [r3, #0]
  4092b8:	f012 0107 	ands.w	r1, r2, #7
  4092bc:	f000 8115 	beq.w	4094ea <_malloc_r+0x48e>
  4092c0:	f1c1 0008 	rsb	r0, r1, #8
  4092c4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4092c8:	4402      	add	r2, r0
  4092ca:	3108      	adds	r1, #8
  4092cc:	eb02 090b 	add.w	r9, r2, fp
  4092d0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4092d4:	eba1 0909 	sub.w	r9, r1, r9
  4092d8:	4649      	mov	r1, r9
  4092da:	4628      	mov	r0, r5
  4092dc:	9301      	str	r3, [sp, #4]
  4092de:	9200      	str	r2, [sp, #0]
  4092e0:	f000 fcc4 	bl	409c6c <_sbrk_r>
  4092e4:	1c43      	adds	r3, r0, #1
  4092e6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4092ea:	f000 8143 	beq.w	409574 <_malloc_r+0x518>
  4092ee:	1a80      	subs	r0, r0, r2
  4092f0:	4448      	add	r0, r9
  4092f2:	f040 0001 	orr.w	r0, r0, #1
  4092f6:	6819      	ldr	r1, [r3, #0]
  4092f8:	60ba      	str	r2, [r7, #8]
  4092fa:	4449      	add	r1, r9
  4092fc:	42bc      	cmp	r4, r7
  4092fe:	6050      	str	r0, [r2, #4]
  409300:	6019      	str	r1, [r3, #0]
  409302:	d017      	beq.n	409334 <_malloc_r+0x2d8>
  409304:	f1b8 0f0f 	cmp.w	r8, #15
  409308:	f240 80fb 	bls.w	409502 <_malloc_r+0x4a6>
  40930c:	6860      	ldr	r0, [r4, #4]
  40930e:	f1a8 020c 	sub.w	r2, r8, #12
  409312:	f022 0207 	bic.w	r2, r2, #7
  409316:	eb04 0e02 	add.w	lr, r4, r2
  40931a:	f000 0001 	and.w	r0, r0, #1
  40931e:	f04f 0c05 	mov.w	ip, #5
  409322:	4310      	orrs	r0, r2
  409324:	2a0f      	cmp	r2, #15
  409326:	6060      	str	r0, [r4, #4]
  409328:	f8ce c004 	str.w	ip, [lr, #4]
  40932c:	f8ce c008 	str.w	ip, [lr, #8]
  409330:	f200 8117 	bhi.w	409562 <_malloc_r+0x506>
  409334:	4b1d      	ldr	r3, [pc, #116]	; (4093ac <_malloc_r+0x350>)
  409336:	68bc      	ldr	r4, [r7, #8]
  409338:	681a      	ldr	r2, [r3, #0]
  40933a:	4291      	cmp	r1, r2
  40933c:	bf88      	it	hi
  40933e:	6019      	strhi	r1, [r3, #0]
  409340:	4b1b      	ldr	r3, [pc, #108]	; (4093b0 <_malloc_r+0x354>)
  409342:	681a      	ldr	r2, [r3, #0]
  409344:	4291      	cmp	r1, r2
  409346:	6862      	ldr	r2, [r4, #4]
  409348:	bf88      	it	hi
  40934a:	6019      	strhi	r1, [r3, #0]
  40934c:	f022 0203 	bic.w	r2, r2, #3
  409350:	4296      	cmp	r6, r2
  409352:	eba2 0306 	sub.w	r3, r2, r6
  409356:	d801      	bhi.n	40935c <_malloc_r+0x300>
  409358:	2b0f      	cmp	r3, #15
  40935a:	dc04      	bgt.n	409366 <_malloc_r+0x30a>
  40935c:	4628      	mov	r0, r5
  40935e:	f000 f985 	bl	40966c <__malloc_unlock>
  409362:	2400      	movs	r4, #0
  409364:	e740      	b.n	4091e8 <_malloc_r+0x18c>
  409366:	19a2      	adds	r2, r4, r6
  409368:	f043 0301 	orr.w	r3, r3, #1
  40936c:	f046 0601 	orr.w	r6, r6, #1
  409370:	6066      	str	r6, [r4, #4]
  409372:	4628      	mov	r0, r5
  409374:	60ba      	str	r2, [r7, #8]
  409376:	6053      	str	r3, [r2, #4]
  409378:	f000 f978 	bl	40966c <__malloc_unlock>
  40937c:	3408      	adds	r4, #8
  40937e:	4620      	mov	r0, r4
  409380:	b003      	add	sp, #12
  409382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409386:	2b14      	cmp	r3, #20
  409388:	d971      	bls.n	40946e <_malloc_r+0x412>
  40938a:	2b54      	cmp	r3, #84	; 0x54
  40938c:	f200 80a3 	bhi.w	4094d6 <_malloc_r+0x47a>
  409390:	0b33      	lsrs	r3, r6, #12
  409392:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  409396:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40939a:	00c3      	lsls	r3, r0, #3
  40939c:	e680      	b.n	4090a0 <_malloc_r+0x44>
  40939e:	bf00      	nop
  4093a0:	20000454 	.word	0x20000454
  4093a4:	2000ac18 	.word	0x2000ac18
  4093a8:	2000abe8 	.word	0x2000abe8
  4093ac:	2000ac10 	.word	0x2000ac10
  4093b0:	2000ac14 	.word	0x2000ac14
  4093b4:	2000045c 	.word	0x2000045c
  4093b8:	2000085c 	.word	0x2000085c
  4093bc:	0a5a      	lsrs	r2, r3, #9
  4093be:	2a04      	cmp	r2, #4
  4093c0:	d95b      	bls.n	40947a <_malloc_r+0x41e>
  4093c2:	2a14      	cmp	r2, #20
  4093c4:	f200 80ae 	bhi.w	409524 <_malloc_r+0x4c8>
  4093c8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4093cc:	00c9      	lsls	r1, r1, #3
  4093ce:	325b      	adds	r2, #91	; 0x5b
  4093d0:	eb07 0c01 	add.w	ip, r7, r1
  4093d4:	5879      	ldr	r1, [r7, r1]
  4093d6:	f1ac 0c08 	sub.w	ip, ip, #8
  4093da:	458c      	cmp	ip, r1
  4093dc:	f000 8088 	beq.w	4094f0 <_malloc_r+0x494>
  4093e0:	684a      	ldr	r2, [r1, #4]
  4093e2:	f022 0203 	bic.w	r2, r2, #3
  4093e6:	4293      	cmp	r3, r2
  4093e8:	d273      	bcs.n	4094d2 <_malloc_r+0x476>
  4093ea:	6889      	ldr	r1, [r1, #8]
  4093ec:	458c      	cmp	ip, r1
  4093ee:	d1f7      	bne.n	4093e0 <_malloc_r+0x384>
  4093f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4093f4:	687b      	ldr	r3, [r7, #4]
  4093f6:	60e2      	str	r2, [r4, #12]
  4093f8:	f8c4 c008 	str.w	ip, [r4, #8]
  4093fc:	6094      	str	r4, [r2, #8]
  4093fe:	f8cc 400c 	str.w	r4, [ip, #12]
  409402:	e68f      	b.n	409124 <_malloc_r+0xc8>
  409404:	19a1      	adds	r1, r4, r6
  409406:	f046 0c01 	orr.w	ip, r6, #1
  40940a:	f042 0601 	orr.w	r6, r2, #1
  40940e:	f8c4 c004 	str.w	ip, [r4, #4]
  409412:	4628      	mov	r0, r5
  409414:	6179      	str	r1, [r7, #20]
  409416:	6139      	str	r1, [r7, #16]
  409418:	f8c1 e00c 	str.w	lr, [r1, #12]
  40941c:	f8c1 e008 	str.w	lr, [r1, #8]
  409420:	604e      	str	r6, [r1, #4]
  409422:	50e2      	str	r2, [r4, r3]
  409424:	f000 f922 	bl	40966c <__malloc_unlock>
  409428:	3408      	adds	r4, #8
  40942a:	e6dd      	b.n	4091e8 <_malloc_r+0x18c>
  40942c:	687b      	ldr	r3, [r7, #4]
  40942e:	e679      	b.n	409124 <_malloc_r+0xc8>
  409430:	f108 0801 	add.w	r8, r8, #1
  409434:	f018 0f03 	tst.w	r8, #3
  409438:	f10c 0c08 	add.w	ip, ip, #8
  40943c:	f47f ae85 	bne.w	40914a <_malloc_r+0xee>
  409440:	e02d      	b.n	40949e <_malloc_r+0x442>
  409442:	68dc      	ldr	r4, [r3, #12]
  409444:	42a3      	cmp	r3, r4
  409446:	bf08      	it	eq
  409448:	3002      	addeq	r0, #2
  40944a:	f43f ae3e 	beq.w	4090ca <_malloc_r+0x6e>
  40944e:	e6bb      	b.n	4091c8 <_malloc_r+0x16c>
  409450:	4419      	add	r1, r3
  409452:	461c      	mov	r4, r3
  409454:	684a      	ldr	r2, [r1, #4]
  409456:	68db      	ldr	r3, [r3, #12]
  409458:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40945c:	f042 0201 	orr.w	r2, r2, #1
  409460:	604a      	str	r2, [r1, #4]
  409462:	4628      	mov	r0, r5
  409464:	60f3      	str	r3, [r6, #12]
  409466:	609e      	str	r6, [r3, #8]
  409468:	f000 f900 	bl	40966c <__malloc_unlock>
  40946c:	e6bc      	b.n	4091e8 <_malloc_r+0x18c>
  40946e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  409472:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  409476:	00c3      	lsls	r3, r0, #3
  409478:	e612      	b.n	4090a0 <_malloc_r+0x44>
  40947a:	099a      	lsrs	r2, r3, #6
  40947c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  409480:	00c9      	lsls	r1, r1, #3
  409482:	3238      	adds	r2, #56	; 0x38
  409484:	e7a4      	b.n	4093d0 <_malloc_r+0x374>
  409486:	42bc      	cmp	r4, r7
  409488:	d054      	beq.n	409534 <_malloc_r+0x4d8>
  40948a:	68bc      	ldr	r4, [r7, #8]
  40948c:	6862      	ldr	r2, [r4, #4]
  40948e:	f022 0203 	bic.w	r2, r2, #3
  409492:	e75d      	b.n	409350 <_malloc_r+0x2f4>
  409494:	f859 3908 	ldr.w	r3, [r9], #-8
  409498:	4599      	cmp	r9, r3
  40949a:	f040 8086 	bne.w	4095aa <_malloc_r+0x54e>
  40949e:	f010 0f03 	tst.w	r0, #3
  4094a2:	f100 30ff 	add.w	r0, r0, #4294967295
  4094a6:	d1f5      	bne.n	409494 <_malloc_r+0x438>
  4094a8:	687b      	ldr	r3, [r7, #4]
  4094aa:	ea23 0304 	bic.w	r3, r3, r4
  4094ae:	607b      	str	r3, [r7, #4]
  4094b0:	0064      	lsls	r4, r4, #1
  4094b2:	429c      	cmp	r4, r3
  4094b4:	f63f aec7 	bhi.w	409246 <_malloc_r+0x1ea>
  4094b8:	2c00      	cmp	r4, #0
  4094ba:	f43f aec4 	beq.w	409246 <_malloc_r+0x1ea>
  4094be:	421c      	tst	r4, r3
  4094c0:	4640      	mov	r0, r8
  4094c2:	f47f ae3e 	bne.w	409142 <_malloc_r+0xe6>
  4094c6:	0064      	lsls	r4, r4, #1
  4094c8:	421c      	tst	r4, r3
  4094ca:	f100 0004 	add.w	r0, r0, #4
  4094ce:	d0fa      	beq.n	4094c6 <_malloc_r+0x46a>
  4094d0:	e637      	b.n	409142 <_malloc_r+0xe6>
  4094d2:	468c      	mov	ip, r1
  4094d4:	e78c      	b.n	4093f0 <_malloc_r+0x394>
  4094d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4094da:	d815      	bhi.n	409508 <_malloc_r+0x4ac>
  4094dc:	0bf3      	lsrs	r3, r6, #15
  4094de:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4094e2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4094e6:	00c3      	lsls	r3, r0, #3
  4094e8:	e5da      	b.n	4090a0 <_malloc_r+0x44>
  4094ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4094ee:	e6ed      	b.n	4092cc <_malloc_r+0x270>
  4094f0:	687b      	ldr	r3, [r7, #4]
  4094f2:	1092      	asrs	r2, r2, #2
  4094f4:	2101      	movs	r1, #1
  4094f6:	fa01 f202 	lsl.w	r2, r1, r2
  4094fa:	4313      	orrs	r3, r2
  4094fc:	607b      	str	r3, [r7, #4]
  4094fe:	4662      	mov	r2, ip
  409500:	e779      	b.n	4093f6 <_malloc_r+0x39a>
  409502:	2301      	movs	r3, #1
  409504:	6053      	str	r3, [r2, #4]
  409506:	e729      	b.n	40935c <_malloc_r+0x300>
  409508:	f240 5254 	movw	r2, #1364	; 0x554
  40950c:	4293      	cmp	r3, r2
  40950e:	d822      	bhi.n	409556 <_malloc_r+0x4fa>
  409510:	0cb3      	lsrs	r3, r6, #18
  409512:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  409516:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40951a:	00c3      	lsls	r3, r0, #3
  40951c:	e5c0      	b.n	4090a0 <_malloc_r+0x44>
  40951e:	f103 0b10 	add.w	fp, r3, #16
  409522:	e6ae      	b.n	409282 <_malloc_r+0x226>
  409524:	2a54      	cmp	r2, #84	; 0x54
  409526:	d829      	bhi.n	40957c <_malloc_r+0x520>
  409528:	0b1a      	lsrs	r2, r3, #12
  40952a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40952e:	00c9      	lsls	r1, r1, #3
  409530:	326e      	adds	r2, #110	; 0x6e
  409532:	e74d      	b.n	4093d0 <_malloc_r+0x374>
  409534:	4b20      	ldr	r3, [pc, #128]	; (4095b8 <_malloc_r+0x55c>)
  409536:	6819      	ldr	r1, [r3, #0]
  409538:	4459      	add	r1, fp
  40953a:	6019      	str	r1, [r3, #0]
  40953c:	e6b2      	b.n	4092a4 <_malloc_r+0x248>
  40953e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  409542:	2800      	cmp	r0, #0
  409544:	f47f aeae 	bne.w	4092a4 <_malloc_r+0x248>
  409548:	eb08 030b 	add.w	r3, r8, fp
  40954c:	68ba      	ldr	r2, [r7, #8]
  40954e:	f043 0301 	orr.w	r3, r3, #1
  409552:	6053      	str	r3, [r2, #4]
  409554:	e6ee      	b.n	409334 <_malloc_r+0x2d8>
  409556:	207f      	movs	r0, #127	; 0x7f
  409558:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40955c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  409560:	e59e      	b.n	4090a0 <_malloc_r+0x44>
  409562:	f104 0108 	add.w	r1, r4, #8
  409566:	4628      	mov	r0, r5
  409568:	9300      	str	r3, [sp, #0]
  40956a:	f000 fcf1 	bl	409f50 <_free_r>
  40956e:	9b00      	ldr	r3, [sp, #0]
  409570:	6819      	ldr	r1, [r3, #0]
  409572:	e6df      	b.n	409334 <_malloc_r+0x2d8>
  409574:	2001      	movs	r0, #1
  409576:	f04f 0900 	mov.w	r9, #0
  40957a:	e6bc      	b.n	4092f6 <_malloc_r+0x29a>
  40957c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409580:	d805      	bhi.n	40958e <_malloc_r+0x532>
  409582:	0bda      	lsrs	r2, r3, #15
  409584:	f102 0178 	add.w	r1, r2, #120	; 0x78
  409588:	00c9      	lsls	r1, r1, #3
  40958a:	3277      	adds	r2, #119	; 0x77
  40958c:	e720      	b.n	4093d0 <_malloc_r+0x374>
  40958e:	f240 5154 	movw	r1, #1364	; 0x554
  409592:	428a      	cmp	r2, r1
  409594:	d805      	bhi.n	4095a2 <_malloc_r+0x546>
  409596:	0c9a      	lsrs	r2, r3, #18
  409598:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40959c:	00c9      	lsls	r1, r1, #3
  40959e:	327c      	adds	r2, #124	; 0x7c
  4095a0:	e716      	b.n	4093d0 <_malloc_r+0x374>
  4095a2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4095a6:	227e      	movs	r2, #126	; 0x7e
  4095a8:	e712      	b.n	4093d0 <_malloc_r+0x374>
  4095aa:	687b      	ldr	r3, [r7, #4]
  4095ac:	e780      	b.n	4094b0 <_malloc_r+0x454>
  4095ae:	08f0      	lsrs	r0, r6, #3
  4095b0:	f106 0308 	add.w	r3, r6, #8
  4095b4:	e600      	b.n	4091b8 <_malloc_r+0x15c>
  4095b6:	bf00      	nop
  4095b8:	2000abe8 	.word	0x2000abe8
  4095bc:	00000000 	.word	0x00000000

004095c0 <memchr>:
  4095c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4095c4:	2a10      	cmp	r2, #16
  4095c6:	db2b      	blt.n	409620 <memchr+0x60>
  4095c8:	f010 0f07 	tst.w	r0, #7
  4095cc:	d008      	beq.n	4095e0 <memchr+0x20>
  4095ce:	f810 3b01 	ldrb.w	r3, [r0], #1
  4095d2:	3a01      	subs	r2, #1
  4095d4:	428b      	cmp	r3, r1
  4095d6:	d02d      	beq.n	409634 <memchr+0x74>
  4095d8:	f010 0f07 	tst.w	r0, #7
  4095dc:	b342      	cbz	r2, 409630 <memchr+0x70>
  4095de:	d1f6      	bne.n	4095ce <memchr+0xe>
  4095e0:	b4f0      	push	{r4, r5, r6, r7}
  4095e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4095e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4095ea:	f022 0407 	bic.w	r4, r2, #7
  4095ee:	f07f 0700 	mvns.w	r7, #0
  4095f2:	2300      	movs	r3, #0
  4095f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4095f8:	3c08      	subs	r4, #8
  4095fa:	ea85 0501 	eor.w	r5, r5, r1
  4095fe:	ea86 0601 	eor.w	r6, r6, r1
  409602:	fa85 f547 	uadd8	r5, r5, r7
  409606:	faa3 f587 	sel	r5, r3, r7
  40960a:	fa86 f647 	uadd8	r6, r6, r7
  40960e:	faa5 f687 	sel	r6, r5, r7
  409612:	b98e      	cbnz	r6, 409638 <memchr+0x78>
  409614:	d1ee      	bne.n	4095f4 <memchr+0x34>
  409616:	bcf0      	pop	{r4, r5, r6, r7}
  409618:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40961c:	f002 0207 	and.w	r2, r2, #7
  409620:	b132      	cbz	r2, 409630 <memchr+0x70>
  409622:	f810 3b01 	ldrb.w	r3, [r0], #1
  409626:	3a01      	subs	r2, #1
  409628:	ea83 0301 	eor.w	r3, r3, r1
  40962c:	b113      	cbz	r3, 409634 <memchr+0x74>
  40962e:	d1f8      	bne.n	409622 <memchr+0x62>
  409630:	2000      	movs	r0, #0
  409632:	4770      	bx	lr
  409634:	3801      	subs	r0, #1
  409636:	4770      	bx	lr
  409638:	2d00      	cmp	r5, #0
  40963a:	bf06      	itte	eq
  40963c:	4635      	moveq	r5, r6
  40963e:	3803      	subeq	r0, #3
  409640:	3807      	subne	r0, #7
  409642:	f015 0f01 	tst.w	r5, #1
  409646:	d107      	bne.n	409658 <memchr+0x98>
  409648:	3001      	adds	r0, #1
  40964a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40964e:	bf02      	ittt	eq
  409650:	3001      	addeq	r0, #1
  409652:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  409656:	3001      	addeq	r0, #1
  409658:	bcf0      	pop	{r4, r5, r6, r7}
  40965a:	3801      	subs	r0, #1
  40965c:	4770      	bx	lr
  40965e:	bf00      	nop

00409660 <__malloc_lock>:
  409660:	4801      	ldr	r0, [pc, #4]	; (409668 <__malloc_lock+0x8>)
  409662:	f7ff bcf7 	b.w	409054 <__retarget_lock_acquire_recursive>
  409666:	bf00      	nop
  409668:	2000ac5c 	.word	0x2000ac5c

0040966c <__malloc_unlock>:
  40966c:	4801      	ldr	r0, [pc, #4]	; (409674 <__malloc_unlock+0x8>)
  40966e:	f7ff bcf3 	b.w	409058 <__retarget_lock_release_recursive>
  409672:	bf00      	nop
  409674:	2000ac5c 	.word	0x2000ac5c

00409678 <_Balloc>:
  409678:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40967a:	b570      	push	{r4, r5, r6, lr}
  40967c:	4605      	mov	r5, r0
  40967e:	460c      	mov	r4, r1
  409680:	b14b      	cbz	r3, 409696 <_Balloc+0x1e>
  409682:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  409686:	b180      	cbz	r0, 4096aa <_Balloc+0x32>
  409688:	6802      	ldr	r2, [r0, #0]
  40968a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40968e:	2300      	movs	r3, #0
  409690:	6103      	str	r3, [r0, #16]
  409692:	60c3      	str	r3, [r0, #12]
  409694:	bd70      	pop	{r4, r5, r6, pc}
  409696:	2221      	movs	r2, #33	; 0x21
  409698:	2104      	movs	r1, #4
  40969a:	f000 fbd9 	bl	409e50 <_calloc_r>
  40969e:	64e8      	str	r0, [r5, #76]	; 0x4c
  4096a0:	4603      	mov	r3, r0
  4096a2:	2800      	cmp	r0, #0
  4096a4:	d1ed      	bne.n	409682 <_Balloc+0xa>
  4096a6:	2000      	movs	r0, #0
  4096a8:	bd70      	pop	{r4, r5, r6, pc}
  4096aa:	2101      	movs	r1, #1
  4096ac:	fa01 f604 	lsl.w	r6, r1, r4
  4096b0:	1d72      	adds	r2, r6, #5
  4096b2:	4628      	mov	r0, r5
  4096b4:	0092      	lsls	r2, r2, #2
  4096b6:	f000 fbcb 	bl	409e50 <_calloc_r>
  4096ba:	2800      	cmp	r0, #0
  4096bc:	d0f3      	beq.n	4096a6 <_Balloc+0x2e>
  4096be:	6044      	str	r4, [r0, #4]
  4096c0:	6086      	str	r6, [r0, #8]
  4096c2:	e7e4      	b.n	40968e <_Balloc+0x16>

004096c4 <_Bfree>:
  4096c4:	b131      	cbz	r1, 4096d4 <_Bfree+0x10>
  4096c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4096c8:	684a      	ldr	r2, [r1, #4]
  4096ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4096ce:	6008      	str	r0, [r1, #0]
  4096d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4096d4:	4770      	bx	lr
  4096d6:	bf00      	nop

004096d8 <__multadd>:
  4096d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4096da:	690c      	ldr	r4, [r1, #16]
  4096dc:	b083      	sub	sp, #12
  4096de:	460d      	mov	r5, r1
  4096e0:	4606      	mov	r6, r0
  4096e2:	f101 0e14 	add.w	lr, r1, #20
  4096e6:	2700      	movs	r7, #0
  4096e8:	f8de 0000 	ldr.w	r0, [lr]
  4096ec:	b281      	uxth	r1, r0
  4096ee:	fb02 3301 	mla	r3, r2, r1, r3
  4096f2:	0c01      	lsrs	r1, r0, #16
  4096f4:	0c18      	lsrs	r0, r3, #16
  4096f6:	fb02 0101 	mla	r1, r2, r1, r0
  4096fa:	b29b      	uxth	r3, r3
  4096fc:	3701      	adds	r7, #1
  4096fe:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  409702:	42bc      	cmp	r4, r7
  409704:	f84e 3b04 	str.w	r3, [lr], #4
  409708:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40970c:	dcec      	bgt.n	4096e8 <__multadd+0x10>
  40970e:	b13b      	cbz	r3, 409720 <__multadd+0x48>
  409710:	68aa      	ldr	r2, [r5, #8]
  409712:	4294      	cmp	r4, r2
  409714:	da07      	bge.n	409726 <__multadd+0x4e>
  409716:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40971a:	3401      	adds	r4, #1
  40971c:	6153      	str	r3, [r2, #20]
  40971e:	612c      	str	r4, [r5, #16]
  409720:	4628      	mov	r0, r5
  409722:	b003      	add	sp, #12
  409724:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409726:	6869      	ldr	r1, [r5, #4]
  409728:	9301      	str	r3, [sp, #4]
  40972a:	3101      	adds	r1, #1
  40972c:	4630      	mov	r0, r6
  40972e:	f7ff ffa3 	bl	409678 <_Balloc>
  409732:	692a      	ldr	r2, [r5, #16]
  409734:	3202      	adds	r2, #2
  409736:	f105 010c 	add.w	r1, r5, #12
  40973a:	4607      	mov	r7, r0
  40973c:	0092      	lsls	r2, r2, #2
  40973e:	300c      	adds	r0, #12
  409740:	f7fd f884 	bl	40684c <memcpy>
  409744:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  409746:	6869      	ldr	r1, [r5, #4]
  409748:	9b01      	ldr	r3, [sp, #4]
  40974a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40974e:	6028      	str	r0, [r5, #0]
  409750:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  409754:	463d      	mov	r5, r7
  409756:	e7de      	b.n	409716 <__multadd+0x3e>

00409758 <__hi0bits>:
  409758:	0c02      	lsrs	r2, r0, #16
  40975a:	0412      	lsls	r2, r2, #16
  40975c:	4603      	mov	r3, r0
  40975e:	b9b2      	cbnz	r2, 40978e <__hi0bits+0x36>
  409760:	0403      	lsls	r3, r0, #16
  409762:	2010      	movs	r0, #16
  409764:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  409768:	bf04      	itt	eq
  40976a:	021b      	lsleq	r3, r3, #8
  40976c:	3008      	addeq	r0, #8
  40976e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  409772:	bf04      	itt	eq
  409774:	011b      	lsleq	r3, r3, #4
  409776:	3004      	addeq	r0, #4
  409778:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40977c:	bf04      	itt	eq
  40977e:	009b      	lsleq	r3, r3, #2
  409780:	3002      	addeq	r0, #2
  409782:	2b00      	cmp	r3, #0
  409784:	db02      	blt.n	40978c <__hi0bits+0x34>
  409786:	005b      	lsls	r3, r3, #1
  409788:	d403      	bmi.n	409792 <__hi0bits+0x3a>
  40978a:	2020      	movs	r0, #32
  40978c:	4770      	bx	lr
  40978e:	2000      	movs	r0, #0
  409790:	e7e8      	b.n	409764 <__hi0bits+0xc>
  409792:	3001      	adds	r0, #1
  409794:	4770      	bx	lr
  409796:	bf00      	nop

00409798 <__lo0bits>:
  409798:	6803      	ldr	r3, [r0, #0]
  40979a:	f013 0207 	ands.w	r2, r3, #7
  40979e:	4601      	mov	r1, r0
  4097a0:	d007      	beq.n	4097b2 <__lo0bits+0x1a>
  4097a2:	07da      	lsls	r2, r3, #31
  4097a4:	d421      	bmi.n	4097ea <__lo0bits+0x52>
  4097a6:	0798      	lsls	r0, r3, #30
  4097a8:	d421      	bmi.n	4097ee <__lo0bits+0x56>
  4097aa:	089b      	lsrs	r3, r3, #2
  4097ac:	600b      	str	r3, [r1, #0]
  4097ae:	2002      	movs	r0, #2
  4097b0:	4770      	bx	lr
  4097b2:	b298      	uxth	r0, r3
  4097b4:	b198      	cbz	r0, 4097de <__lo0bits+0x46>
  4097b6:	4610      	mov	r0, r2
  4097b8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4097bc:	bf04      	itt	eq
  4097be:	0a1b      	lsreq	r3, r3, #8
  4097c0:	3008      	addeq	r0, #8
  4097c2:	071a      	lsls	r2, r3, #28
  4097c4:	bf04      	itt	eq
  4097c6:	091b      	lsreq	r3, r3, #4
  4097c8:	3004      	addeq	r0, #4
  4097ca:	079a      	lsls	r2, r3, #30
  4097cc:	bf04      	itt	eq
  4097ce:	089b      	lsreq	r3, r3, #2
  4097d0:	3002      	addeq	r0, #2
  4097d2:	07da      	lsls	r2, r3, #31
  4097d4:	d407      	bmi.n	4097e6 <__lo0bits+0x4e>
  4097d6:	085b      	lsrs	r3, r3, #1
  4097d8:	d104      	bne.n	4097e4 <__lo0bits+0x4c>
  4097da:	2020      	movs	r0, #32
  4097dc:	4770      	bx	lr
  4097de:	0c1b      	lsrs	r3, r3, #16
  4097e0:	2010      	movs	r0, #16
  4097e2:	e7e9      	b.n	4097b8 <__lo0bits+0x20>
  4097e4:	3001      	adds	r0, #1
  4097e6:	600b      	str	r3, [r1, #0]
  4097e8:	4770      	bx	lr
  4097ea:	2000      	movs	r0, #0
  4097ec:	4770      	bx	lr
  4097ee:	085b      	lsrs	r3, r3, #1
  4097f0:	600b      	str	r3, [r1, #0]
  4097f2:	2001      	movs	r0, #1
  4097f4:	4770      	bx	lr
  4097f6:	bf00      	nop

004097f8 <__i2b>:
  4097f8:	b510      	push	{r4, lr}
  4097fa:	460c      	mov	r4, r1
  4097fc:	2101      	movs	r1, #1
  4097fe:	f7ff ff3b 	bl	409678 <_Balloc>
  409802:	2201      	movs	r2, #1
  409804:	6144      	str	r4, [r0, #20]
  409806:	6102      	str	r2, [r0, #16]
  409808:	bd10      	pop	{r4, pc}
  40980a:	bf00      	nop

0040980c <__multiply>:
  40980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409810:	690c      	ldr	r4, [r1, #16]
  409812:	6915      	ldr	r5, [r2, #16]
  409814:	42ac      	cmp	r4, r5
  409816:	b083      	sub	sp, #12
  409818:	468b      	mov	fp, r1
  40981a:	4616      	mov	r6, r2
  40981c:	da04      	bge.n	409828 <__multiply+0x1c>
  40981e:	4622      	mov	r2, r4
  409820:	46b3      	mov	fp, r6
  409822:	462c      	mov	r4, r5
  409824:	460e      	mov	r6, r1
  409826:	4615      	mov	r5, r2
  409828:	f8db 3008 	ldr.w	r3, [fp, #8]
  40982c:	f8db 1004 	ldr.w	r1, [fp, #4]
  409830:	eb04 0805 	add.w	r8, r4, r5
  409834:	4598      	cmp	r8, r3
  409836:	bfc8      	it	gt
  409838:	3101      	addgt	r1, #1
  40983a:	f7ff ff1d 	bl	409678 <_Balloc>
  40983e:	f100 0914 	add.w	r9, r0, #20
  409842:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  409846:	45d1      	cmp	r9, sl
  409848:	9000      	str	r0, [sp, #0]
  40984a:	d205      	bcs.n	409858 <__multiply+0x4c>
  40984c:	464b      	mov	r3, r9
  40984e:	2100      	movs	r1, #0
  409850:	f843 1b04 	str.w	r1, [r3], #4
  409854:	459a      	cmp	sl, r3
  409856:	d8fb      	bhi.n	409850 <__multiply+0x44>
  409858:	f106 0c14 	add.w	ip, r6, #20
  40985c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  409860:	f10b 0b14 	add.w	fp, fp, #20
  409864:	459c      	cmp	ip, r3
  409866:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40986a:	d24c      	bcs.n	409906 <__multiply+0xfa>
  40986c:	f8cd a004 	str.w	sl, [sp, #4]
  409870:	469a      	mov	sl, r3
  409872:	f8dc 5000 	ldr.w	r5, [ip]
  409876:	b2af      	uxth	r7, r5
  409878:	b1ef      	cbz	r7, 4098b6 <__multiply+0xaa>
  40987a:	2100      	movs	r1, #0
  40987c:	464d      	mov	r5, r9
  40987e:	465e      	mov	r6, fp
  409880:	460c      	mov	r4, r1
  409882:	f856 2b04 	ldr.w	r2, [r6], #4
  409886:	6828      	ldr	r0, [r5, #0]
  409888:	b293      	uxth	r3, r2
  40988a:	b281      	uxth	r1, r0
  40988c:	fb07 1303 	mla	r3, r7, r3, r1
  409890:	0c12      	lsrs	r2, r2, #16
  409892:	0c01      	lsrs	r1, r0, #16
  409894:	4423      	add	r3, r4
  409896:	fb07 1102 	mla	r1, r7, r2, r1
  40989a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40989e:	b29b      	uxth	r3, r3
  4098a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4098a4:	45b6      	cmp	lr, r6
  4098a6:	f845 3b04 	str.w	r3, [r5], #4
  4098aa:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4098ae:	d8e8      	bhi.n	409882 <__multiply+0x76>
  4098b0:	602c      	str	r4, [r5, #0]
  4098b2:	f8dc 5000 	ldr.w	r5, [ip]
  4098b6:	0c2d      	lsrs	r5, r5, #16
  4098b8:	d01d      	beq.n	4098f6 <__multiply+0xea>
  4098ba:	f8d9 3000 	ldr.w	r3, [r9]
  4098be:	4648      	mov	r0, r9
  4098c0:	461c      	mov	r4, r3
  4098c2:	4659      	mov	r1, fp
  4098c4:	2200      	movs	r2, #0
  4098c6:	880e      	ldrh	r6, [r1, #0]
  4098c8:	0c24      	lsrs	r4, r4, #16
  4098ca:	fb05 4406 	mla	r4, r5, r6, r4
  4098ce:	4422      	add	r2, r4
  4098d0:	b29b      	uxth	r3, r3
  4098d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4098d6:	f840 3b04 	str.w	r3, [r0], #4
  4098da:	f851 3b04 	ldr.w	r3, [r1], #4
  4098de:	6804      	ldr	r4, [r0, #0]
  4098e0:	0c1b      	lsrs	r3, r3, #16
  4098e2:	b2a6      	uxth	r6, r4
  4098e4:	fb05 6303 	mla	r3, r5, r3, r6
  4098e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4098ec:	458e      	cmp	lr, r1
  4098ee:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4098f2:	d8e8      	bhi.n	4098c6 <__multiply+0xba>
  4098f4:	6003      	str	r3, [r0, #0]
  4098f6:	f10c 0c04 	add.w	ip, ip, #4
  4098fa:	45e2      	cmp	sl, ip
  4098fc:	f109 0904 	add.w	r9, r9, #4
  409900:	d8b7      	bhi.n	409872 <__multiply+0x66>
  409902:	f8dd a004 	ldr.w	sl, [sp, #4]
  409906:	f1b8 0f00 	cmp.w	r8, #0
  40990a:	dd0b      	ble.n	409924 <__multiply+0x118>
  40990c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  409910:	f1aa 0a04 	sub.w	sl, sl, #4
  409914:	b11b      	cbz	r3, 40991e <__multiply+0x112>
  409916:	e005      	b.n	409924 <__multiply+0x118>
  409918:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40991c:	b913      	cbnz	r3, 409924 <__multiply+0x118>
  40991e:	f1b8 0801 	subs.w	r8, r8, #1
  409922:	d1f9      	bne.n	409918 <__multiply+0x10c>
  409924:	9800      	ldr	r0, [sp, #0]
  409926:	f8c0 8010 	str.w	r8, [r0, #16]
  40992a:	b003      	add	sp, #12
  40992c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409930 <__pow5mult>:
  409930:	f012 0303 	ands.w	r3, r2, #3
  409934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409938:	4614      	mov	r4, r2
  40993a:	4607      	mov	r7, r0
  40993c:	d12e      	bne.n	40999c <__pow5mult+0x6c>
  40993e:	460d      	mov	r5, r1
  409940:	10a4      	asrs	r4, r4, #2
  409942:	d01c      	beq.n	40997e <__pow5mult+0x4e>
  409944:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  409946:	b396      	cbz	r6, 4099ae <__pow5mult+0x7e>
  409948:	07e3      	lsls	r3, r4, #31
  40994a:	f04f 0800 	mov.w	r8, #0
  40994e:	d406      	bmi.n	40995e <__pow5mult+0x2e>
  409950:	1064      	asrs	r4, r4, #1
  409952:	d014      	beq.n	40997e <__pow5mult+0x4e>
  409954:	6830      	ldr	r0, [r6, #0]
  409956:	b1a8      	cbz	r0, 409984 <__pow5mult+0x54>
  409958:	4606      	mov	r6, r0
  40995a:	07e3      	lsls	r3, r4, #31
  40995c:	d5f8      	bpl.n	409950 <__pow5mult+0x20>
  40995e:	4632      	mov	r2, r6
  409960:	4629      	mov	r1, r5
  409962:	4638      	mov	r0, r7
  409964:	f7ff ff52 	bl	40980c <__multiply>
  409968:	b1b5      	cbz	r5, 409998 <__pow5mult+0x68>
  40996a:	686a      	ldr	r2, [r5, #4]
  40996c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40996e:	1064      	asrs	r4, r4, #1
  409970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409974:	6029      	str	r1, [r5, #0]
  409976:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40997a:	4605      	mov	r5, r0
  40997c:	d1ea      	bne.n	409954 <__pow5mult+0x24>
  40997e:	4628      	mov	r0, r5
  409980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409984:	4632      	mov	r2, r6
  409986:	4631      	mov	r1, r6
  409988:	4638      	mov	r0, r7
  40998a:	f7ff ff3f 	bl	40980c <__multiply>
  40998e:	6030      	str	r0, [r6, #0]
  409990:	f8c0 8000 	str.w	r8, [r0]
  409994:	4606      	mov	r6, r0
  409996:	e7e0      	b.n	40995a <__pow5mult+0x2a>
  409998:	4605      	mov	r5, r0
  40999a:	e7d9      	b.n	409950 <__pow5mult+0x20>
  40999c:	1e5a      	subs	r2, r3, #1
  40999e:	4d0b      	ldr	r5, [pc, #44]	; (4099cc <__pow5mult+0x9c>)
  4099a0:	2300      	movs	r3, #0
  4099a2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4099a6:	f7ff fe97 	bl	4096d8 <__multadd>
  4099aa:	4605      	mov	r5, r0
  4099ac:	e7c8      	b.n	409940 <__pow5mult+0x10>
  4099ae:	2101      	movs	r1, #1
  4099b0:	4638      	mov	r0, r7
  4099b2:	f7ff fe61 	bl	409678 <_Balloc>
  4099b6:	f240 2171 	movw	r1, #625	; 0x271
  4099ba:	2201      	movs	r2, #1
  4099bc:	2300      	movs	r3, #0
  4099be:	6141      	str	r1, [r0, #20]
  4099c0:	6102      	str	r2, [r0, #16]
  4099c2:	4606      	mov	r6, r0
  4099c4:	64b8      	str	r0, [r7, #72]	; 0x48
  4099c6:	6003      	str	r3, [r0, #0]
  4099c8:	e7be      	b.n	409948 <__pow5mult+0x18>
  4099ca:	bf00      	nop
  4099cc:	0040b808 	.word	0x0040b808

004099d0 <__lshift>:
  4099d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4099d4:	4691      	mov	r9, r2
  4099d6:	690a      	ldr	r2, [r1, #16]
  4099d8:	688b      	ldr	r3, [r1, #8]
  4099da:	ea4f 1469 	mov.w	r4, r9, asr #5
  4099de:	eb04 0802 	add.w	r8, r4, r2
  4099e2:	f108 0501 	add.w	r5, r8, #1
  4099e6:	429d      	cmp	r5, r3
  4099e8:	460e      	mov	r6, r1
  4099ea:	4607      	mov	r7, r0
  4099ec:	6849      	ldr	r1, [r1, #4]
  4099ee:	dd04      	ble.n	4099fa <__lshift+0x2a>
  4099f0:	005b      	lsls	r3, r3, #1
  4099f2:	429d      	cmp	r5, r3
  4099f4:	f101 0101 	add.w	r1, r1, #1
  4099f8:	dcfa      	bgt.n	4099f0 <__lshift+0x20>
  4099fa:	4638      	mov	r0, r7
  4099fc:	f7ff fe3c 	bl	409678 <_Balloc>
  409a00:	2c00      	cmp	r4, #0
  409a02:	f100 0314 	add.w	r3, r0, #20
  409a06:	dd06      	ble.n	409a16 <__lshift+0x46>
  409a08:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  409a0c:	2100      	movs	r1, #0
  409a0e:	f843 1b04 	str.w	r1, [r3], #4
  409a12:	429a      	cmp	r2, r3
  409a14:	d1fb      	bne.n	409a0e <__lshift+0x3e>
  409a16:	6934      	ldr	r4, [r6, #16]
  409a18:	f106 0114 	add.w	r1, r6, #20
  409a1c:	f019 091f 	ands.w	r9, r9, #31
  409a20:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  409a24:	d01d      	beq.n	409a62 <__lshift+0x92>
  409a26:	f1c9 0c20 	rsb	ip, r9, #32
  409a2a:	2200      	movs	r2, #0
  409a2c:	680c      	ldr	r4, [r1, #0]
  409a2e:	fa04 f409 	lsl.w	r4, r4, r9
  409a32:	4314      	orrs	r4, r2
  409a34:	f843 4b04 	str.w	r4, [r3], #4
  409a38:	f851 2b04 	ldr.w	r2, [r1], #4
  409a3c:	458e      	cmp	lr, r1
  409a3e:	fa22 f20c 	lsr.w	r2, r2, ip
  409a42:	d8f3      	bhi.n	409a2c <__lshift+0x5c>
  409a44:	601a      	str	r2, [r3, #0]
  409a46:	b10a      	cbz	r2, 409a4c <__lshift+0x7c>
  409a48:	f108 0502 	add.w	r5, r8, #2
  409a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409a4e:	6872      	ldr	r2, [r6, #4]
  409a50:	3d01      	subs	r5, #1
  409a52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409a56:	6105      	str	r5, [r0, #16]
  409a58:	6031      	str	r1, [r6, #0]
  409a5a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  409a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409a62:	3b04      	subs	r3, #4
  409a64:	f851 2b04 	ldr.w	r2, [r1], #4
  409a68:	f843 2f04 	str.w	r2, [r3, #4]!
  409a6c:	458e      	cmp	lr, r1
  409a6e:	d8f9      	bhi.n	409a64 <__lshift+0x94>
  409a70:	e7ec      	b.n	409a4c <__lshift+0x7c>
  409a72:	bf00      	nop

00409a74 <__mcmp>:
  409a74:	b430      	push	{r4, r5}
  409a76:	690b      	ldr	r3, [r1, #16]
  409a78:	4605      	mov	r5, r0
  409a7a:	6900      	ldr	r0, [r0, #16]
  409a7c:	1ac0      	subs	r0, r0, r3
  409a7e:	d10f      	bne.n	409aa0 <__mcmp+0x2c>
  409a80:	009b      	lsls	r3, r3, #2
  409a82:	3514      	adds	r5, #20
  409a84:	3114      	adds	r1, #20
  409a86:	4419      	add	r1, r3
  409a88:	442b      	add	r3, r5
  409a8a:	e001      	b.n	409a90 <__mcmp+0x1c>
  409a8c:	429d      	cmp	r5, r3
  409a8e:	d207      	bcs.n	409aa0 <__mcmp+0x2c>
  409a90:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409a94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  409a98:	4294      	cmp	r4, r2
  409a9a:	d0f7      	beq.n	409a8c <__mcmp+0x18>
  409a9c:	d302      	bcc.n	409aa4 <__mcmp+0x30>
  409a9e:	2001      	movs	r0, #1
  409aa0:	bc30      	pop	{r4, r5}
  409aa2:	4770      	bx	lr
  409aa4:	f04f 30ff 	mov.w	r0, #4294967295
  409aa8:	e7fa      	b.n	409aa0 <__mcmp+0x2c>
  409aaa:	bf00      	nop

00409aac <__mdiff>:
  409aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409ab0:	690f      	ldr	r7, [r1, #16]
  409ab2:	460e      	mov	r6, r1
  409ab4:	6911      	ldr	r1, [r2, #16]
  409ab6:	1a7f      	subs	r7, r7, r1
  409ab8:	2f00      	cmp	r7, #0
  409aba:	4690      	mov	r8, r2
  409abc:	d117      	bne.n	409aee <__mdiff+0x42>
  409abe:	0089      	lsls	r1, r1, #2
  409ac0:	f106 0514 	add.w	r5, r6, #20
  409ac4:	f102 0e14 	add.w	lr, r2, #20
  409ac8:	186b      	adds	r3, r5, r1
  409aca:	4471      	add	r1, lr
  409acc:	e001      	b.n	409ad2 <__mdiff+0x26>
  409ace:	429d      	cmp	r5, r3
  409ad0:	d25c      	bcs.n	409b8c <__mdiff+0xe0>
  409ad2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  409ad6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  409ada:	42a2      	cmp	r2, r4
  409adc:	d0f7      	beq.n	409ace <__mdiff+0x22>
  409ade:	d25e      	bcs.n	409b9e <__mdiff+0xf2>
  409ae0:	4633      	mov	r3, r6
  409ae2:	462c      	mov	r4, r5
  409ae4:	4646      	mov	r6, r8
  409ae6:	4675      	mov	r5, lr
  409ae8:	4698      	mov	r8, r3
  409aea:	2701      	movs	r7, #1
  409aec:	e005      	b.n	409afa <__mdiff+0x4e>
  409aee:	db58      	blt.n	409ba2 <__mdiff+0xf6>
  409af0:	f106 0514 	add.w	r5, r6, #20
  409af4:	f108 0414 	add.w	r4, r8, #20
  409af8:	2700      	movs	r7, #0
  409afa:	6871      	ldr	r1, [r6, #4]
  409afc:	f7ff fdbc 	bl	409678 <_Balloc>
  409b00:	f8d8 3010 	ldr.w	r3, [r8, #16]
  409b04:	6936      	ldr	r6, [r6, #16]
  409b06:	60c7      	str	r7, [r0, #12]
  409b08:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  409b0c:	46a6      	mov	lr, r4
  409b0e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  409b12:	f100 0414 	add.w	r4, r0, #20
  409b16:	2300      	movs	r3, #0
  409b18:	f85e 1b04 	ldr.w	r1, [lr], #4
  409b1c:	f855 8b04 	ldr.w	r8, [r5], #4
  409b20:	b28a      	uxth	r2, r1
  409b22:	fa13 f388 	uxtah	r3, r3, r8
  409b26:	0c09      	lsrs	r1, r1, #16
  409b28:	1a9a      	subs	r2, r3, r2
  409b2a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  409b2e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  409b32:	b292      	uxth	r2, r2
  409b34:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409b38:	45f4      	cmp	ip, lr
  409b3a:	f844 2b04 	str.w	r2, [r4], #4
  409b3e:	ea4f 4323 	mov.w	r3, r3, asr #16
  409b42:	d8e9      	bhi.n	409b18 <__mdiff+0x6c>
  409b44:	42af      	cmp	r7, r5
  409b46:	d917      	bls.n	409b78 <__mdiff+0xcc>
  409b48:	46a4      	mov	ip, r4
  409b4a:	46ae      	mov	lr, r5
  409b4c:	f85e 2b04 	ldr.w	r2, [lr], #4
  409b50:	fa13 f382 	uxtah	r3, r3, r2
  409b54:	1419      	asrs	r1, r3, #16
  409b56:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  409b5a:	b29b      	uxth	r3, r3
  409b5c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409b60:	4577      	cmp	r7, lr
  409b62:	f84c 2b04 	str.w	r2, [ip], #4
  409b66:	ea4f 4321 	mov.w	r3, r1, asr #16
  409b6a:	d8ef      	bhi.n	409b4c <__mdiff+0xa0>
  409b6c:	43ed      	mvns	r5, r5
  409b6e:	442f      	add	r7, r5
  409b70:	f027 0703 	bic.w	r7, r7, #3
  409b74:	3704      	adds	r7, #4
  409b76:	443c      	add	r4, r7
  409b78:	3c04      	subs	r4, #4
  409b7a:	b922      	cbnz	r2, 409b86 <__mdiff+0xda>
  409b7c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409b80:	3e01      	subs	r6, #1
  409b82:	2b00      	cmp	r3, #0
  409b84:	d0fa      	beq.n	409b7c <__mdiff+0xd0>
  409b86:	6106      	str	r6, [r0, #16]
  409b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409b8c:	2100      	movs	r1, #0
  409b8e:	f7ff fd73 	bl	409678 <_Balloc>
  409b92:	2201      	movs	r2, #1
  409b94:	2300      	movs	r3, #0
  409b96:	6102      	str	r2, [r0, #16]
  409b98:	6143      	str	r3, [r0, #20]
  409b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409b9e:	4674      	mov	r4, lr
  409ba0:	e7ab      	b.n	409afa <__mdiff+0x4e>
  409ba2:	4633      	mov	r3, r6
  409ba4:	f106 0414 	add.w	r4, r6, #20
  409ba8:	f102 0514 	add.w	r5, r2, #20
  409bac:	4616      	mov	r6, r2
  409bae:	2701      	movs	r7, #1
  409bb0:	4698      	mov	r8, r3
  409bb2:	e7a2      	b.n	409afa <__mdiff+0x4e>

00409bb4 <__d2b>:
  409bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409bb8:	b082      	sub	sp, #8
  409bba:	2101      	movs	r1, #1
  409bbc:	461c      	mov	r4, r3
  409bbe:	f3c3 570a 	ubfx	r7, r3, #20, #11
  409bc2:	4615      	mov	r5, r2
  409bc4:	9e08      	ldr	r6, [sp, #32]
  409bc6:	f7ff fd57 	bl	409678 <_Balloc>
  409bca:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409bce:	4680      	mov	r8, r0
  409bd0:	b10f      	cbz	r7, 409bd6 <__d2b+0x22>
  409bd2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409bd6:	9401      	str	r4, [sp, #4]
  409bd8:	b31d      	cbz	r5, 409c22 <__d2b+0x6e>
  409bda:	a802      	add	r0, sp, #8
  409bdc:	f840 5d08 	str.w	r5, [r0, #-8]!
  409be0:	f7ff fdda 	bl	409798 <__lo0bits>
  409be4:	2800      	cmp	r0, #0
  409be6:	d134      	bne.n	409c52 <__d2b+0x9e>
  409be8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409bec:	f8c8 2014 	str.w	r2, [r8, #20]
  409bf0:	2b00      	cmp	r3, #0
  409bf2:	bf0c      	ite	eq
  409bf4:	2101      	moveq	r1, #1
  409bf6:	2102      	movne	r1, #2
  409bf8:	f8c8 3018 	str.w	r3, [r8, #24]
  409bfc:	f8c8 1010 	str.w	r1, [r8, #16]
  409c00:	b9df      	cbnz	r7, 409c3a <__d2b+0x86>
  409c02:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409c06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409c0a:	6030      	str	r0, [r6, #0]
  409c0c:	6918      	ldr	r0, [r3, #16]
  409c0e:	f7ff fda3 	bl	409758 <__hi0bits>
  409c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409c14:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409c18:	6018      	str	r0, [r3, #0]
  409c1a:	4640      	mov	r0, r8
  409c1c:	b002      	add	sp, #8
  409c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409c22:	a801      	add	r0, sp, #4
  409c24:	f7ff fdb8 	bl	409798 <__lo0bits>
  409c28:	9b01      	ldr	r3, [sp, #4]
  409c2a:	f8c8 3014 	str.w	r3, [r8, #20]
  409c2e:	2101      	movs	r1, #1
  409c30:	3020      	adds	r0, #32
  409c32:	f8c8 1010 	str.w	r1, [r8, #16]
  409c36:	2f00      	cmp	r7, #0
  409c38:	d0e3      	beq.n	409c02 <__d2b+0x4e>
  409c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409c3c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409c40:	4407      	add	r7, r0
  409c42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409c46:	6037      	str	r7, [r6, #0]
  409c48:	6018      	str	r0, [r3, #0]
  409c4a:	4640      	mov	r0, r8
  409c4c:	b002      	add	sp, #8
  409c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409c52:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409c56:	f1c0 0220 	rsb	r2, r0, #32
  409c5a:	fa03 f202 	lsl.w	r2, r3, r2
  409c5e:	430a      	orrs	r2, r1
  409c60:	40c3      	lsrs	r3, r0
  409c62:	9301      	str	r3, [sp, #4]
  409c64:	f8c8 2014 	str.w	r2, [r8, #20]
  409c68:	e7c2      	b.n	409bf0 <__d2b+0x3c>
  409c6a:	bf00      	nop

00409c6c <_sbrk_r>:
  409c6c:	b538      	push	{r3, r4, r5, lr}
  409c6e:	4c07      	ldr	r4, [pc, #28]	; (409c8c <_sbrk_r+0x20>)
  409c70:	2300      	movs	r3, #0
  409c72:	4605      	mov	r5, r0
  409c74:	4608      	mov	r0, r1
  409c76:	6023      	str	r3, [r4, #0]
  409c78:	f7fb fad4 	bl	405224 <_sbrk>
  409c7c:	1c43      	adds	r3, r0, #1
  409c7e:	d000      	beq.n	409c82 <_sbrk_r+0x16>
  409c80:	bd38      	pop	{r3, r4, r5, pc}
  409c82:	6823      	ldr	r3, [r4, #0]
  409c84:	2b00      	cmp	r3, #0
  409c86:	d0fb      	beq.n	409c80 <_sbrk_r+0x14>
  409c88:	602b      	str	r3, [r5, #0]
  409c8a:	bd38      	pop	{r3, r4, r5, pc}
  409c8c:	2000ac70 	.word	0x2000ac70

00409c90 <__ssprint_r>:
  409c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409c94:	6893      	ldr	r3, [r2, #8]
  409c96:	b083      	sub	sp, #12
  409c98:	4690      	mov	r8, r2
  409c9a:	2b00      	cmp	r3, #0
  409c9c:	d070      	beq.n	409d80 <__ssprint_r+0xf0>
  409c9e:	4682      	mov	sl, r0
  409ca0:	460c      	mov	r4, r1
  409ca2:	6817      	ldr	r7, [r2, #0]
  409ca4:	688d      	ldr	r5, [r1, #8]
  409ca6:	6808      	ldr	r0, [r1, #0]
  409ca8:	e042      	b.n	409d30 <__ssprint_r+0xa0>
  409caa:	89a3      	ldrh	r3, [r4, #12]
  409cac:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409cb0:	d02e      	beq.n	409d10 <__ssprint_r+0x80>
  409cb2:	6965      	ldr	r5, [r4, #20]
  409cb4:	6921      	ldr	r1, [r4, #16]
  409cb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  409cba:	eba0 0b01 	sub.w	fp, r0, r1
  409cbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  409cc2:	f10b 0001 	add.w	r0, fp, #1
  409cc6:	106d      	asrs	r5, r5, #1
  409cc8:	4430      	add	r0, r6
  409cca:	42a8      	cmp	r0, r5
  409ccc:	462a      	mov	r2, r5
  409cce:	bf84      	itt	hi
  409cd0:	4605      	movhi	r5, r0
  409cd2:	462a      	movhi	r2, r5
  409cd4:	055b      	lsls	r3, r3, #21
  409cd6:	d538      	bpl.n	409d4a <__ssprint_r+0xba>
  409cd8:	4611      	mov	r1, r2
  409cda:	4650      	mov	r0, sl
  409cdc:	f7ff f9be 	bl	40905c <_malloc_r>
  409ce0:	2800      	cmp	r0, #0
  409ce2:	d03c      	beq.n	409d5e <__ssprint_r+0xce>
  409ce4:	465a      	mov	r2, fp
  409ce6:	6921      	ldr	r1, [r4, #16]
  409ce8:	9001      	str	r0, [sp, #4]
  409cea:	f7fc fdaf 	bl	40684c <memcpy>
  409cee:	89a2      	ldrh	r2, [r4, #12]
  409cf0:	9b01      	ldr	r3, [sp, #4]
  409cf2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409cfa:	81a2      	strh	r2, [r4, #12]
  409cfc:	eba5 020b 	sub.w	r2, r5, fp
  409d00:	eb03 000b 	add.w	r0, r3, fp
  409d04:	6165      	str	r5, [r4, #20]
  409d06:	6123      	str	r3, [r4, #16]
  409d08:	6020      	str	r0, [r4, #0]
  409d0a:	60a2      	str	r2, [r4, #8]
  409d0c:	4635      	mov	r5, r6
  409d0e:	46b3      	mov	fp, r6
  409d10:	465a      	mov	r2, fp
  409d12:	4649      	mov	r1, r9
  409d14:	f000 fa18 	bl	40a148 <memmove>
  409d18:	f8d8 3008 	ldr.w	r3, [r8, #8]
  409d1c:	68a2      	ldr	r2, [r4, #8]
  409d1e:	6820      	ldr	r0, [r4, #0]
  409d20:	1b55      	subs	r5, r2, r5
  409d22:	4458      	add	r0, fp
  409d24:	1b9e      	subs	r6, r3, r6
  409d26:	60a5      	str	r5, [r4, #8]
  409d28:	6020      	str	r0, [r4, #0]
  409d2a:	f8c8 6008 	str.w	r6, [r8, #8]
  409d2e:	b33e      	cbz	r6, 409d80 <__ssprint_r+0xf0>
  409d30:	687e      	ldr	r6, [r7, #4]
  409d32:	463b      	mov	r3, r7
  409d34:	3708      	adds	r7, #8
  409d36:	2e00      	cmp	r6, #0
  409d38:	d0fa      	beq.n	409d30 <__ssprint_r+0xa0>
  409d3a:	42ae      	cmp	r6, r5
  409d3c:	f8d3 9000 	ldr.w	r9, [r3]
  409d40:	46ab      	mov	fp, r5
  409d42:	d2b2      	bcs.n	409caa <__ssprint_r+0x1a>
  409d44:	4635      	mov	r5, r6
  409d46:	46b3      	mov	fp, r6
  409d48:	e7e2      	b.n	409d10 <__ssprint_r+0x80>
  409d4a:	4650      	mov	r0, sl
  409d4c:	f000 fa60 	bl	40a210 <_realloc_r>
  409d50:	4603      	mov	r3, r0
  409d52:	2800      	cmp	r0, #0
  409d54:	d1d2      	bne.n	409cfc <__ssprint_r+0x6c>
  409d56:	6921      	ldr	r1, [r4, #16]
  409d58:	4650      	mov	r0, sl
  409d5a:	f000 f8f9 	bl	409f50 <_free_r>
  409d5e:	230c      	movs	r3, #12
  409d60:	f8ca 3000 	str.w	r3, [sl]
  409d64:	89a3      	ldrh	r3, [r4, #12]
  409d66:	2200      	movs	r2, #0
  409d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409d6c:	f04f 30ff 	mov.w	r0, #4294967295
  409d70:	81a3      	strh	r3, [r4, #12]
  409d72:	f8c8 2008 	str.w	r2, [r8, #8]
  409d76:	f8c8 2004 	str.w	r2, [r8, #4]
  409d7a:	b003      	add	sp, #12
  409d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409d80:	2000      	movs	r0, #0
  409d82:	f8c8 0004 	str.w	r0, [r8, #4]
  409d86:	b003      	add	sp, #12
  409d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409d8c <__register_exitproc>:
  409d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409d90:	4d2c      	ldr	r5, [pc, #176]	; (409e44 <__register_exitproc+0xb8>)
  409d92:	4606      	mov	r6, r0
  409d94:	6828      	ldr	r0, [r5, #0]
  409d96:	4698      	mov	r8, r3
  409d98:	460f      	mov	r7, r1
  409d9a:	4691      	mov	r9, r2
  409d9c:	f7ff f95a 	bl	409054 <__retarget_lock_acquire_recursive>
  409da0:	4b29      	ldr	r3, [pc, #164]	; (409e48 <__register_exitproc+0xbc>)
  409da2:	681c      	ldr	r4, [r3, #0]
  409da4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409da8:	2b00      	cmp	r3, #0
  409daa:	d03e      	beq.n	409e2a <__register_exitproc+0x9e>
  409dac:	685a      	ldr	r2, [r3, #4]
  409dae:	2a1f      	cmp	r2, #31
  409db0:	dc1c      	bgt.n	409dec <__register_exitproc+0x60>
  409db2:	f102 0e01 	add.w	lr, r2, #1
  409db6:	b176      	cbz	r6, 409dd6 <__register_exitproc+0x4a>
  409db8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409dbc:	2401      	movs	r4, #1
  409dbe:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  409dc2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  409dc6:	4094      	lsls	r4, r2
  409dc8:	4320      	orrs	r0, r4
  409dca:	2e02      	cmp	r6, #2
  409dcc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  409dd0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409dd4:	d023      	beq.n	409e1e <__register_exitproc+0x92>
  409dd6:	3202      	adds	r2, #2
  409dd8:	f8c3 e004 	str.w	lr, [r3, #4]
  409ddc:	6828      	ldr	r0, [r5, #0]
  409dde:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  409de2:	f7ff f939 	bl	409058 <__retarget_lock_release_recursive>
  409de6:	2000      	movs	r0, #0
  409de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409dec:	4b17      	ldr	r3, [pc, #92]	; (409e4c <__register_exitproc+0xc0>)
  409dee:	b30b      	cbz	r3, 409e34 <__register_exitproc+0xa8>
  409df0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409df4:	f3af 8000 	nop.w
  409df8:	4603      	mov	r3, r0
  409dfa:	b1d8      	cbz	r0, 409e34 <__register_exitproc+0xa8>
  409dfc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409e00:	6002      	str	r2, [r0, #0]
  409e02:	2100      	movs	r1, #0
  409e04:	6041      	str	r1, [r0, #4]
  409e06:	460a      	mov	r2, r1
  409e08:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409e0c:	f04f 0e01 	mov.w	lr, #1
  409e10:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409e14:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409e18:	2e00      	cmp	r6, #0
  409e1a:	d0dc      	beq.n	409dd6 <__register_exitproc+0x4a>
  409e1c:	e7cc      	b.n	409db8 <__register_exitproc+0x2c>
  409e1e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409e22:	430c      	orrs	r4, r1
  409e24:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409e28:	e7d5      	b.n	409dd6 <__register_exitproc+0x4a>
  409e2a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  409e2e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409e32:	e7bb      	b.n	409dac <__register_exitproc+0x20>
  409e34:	6828      	ldr	r0, [r5, #0]
  409e36:	f7ff f90f 	bl	409058 <__retarget_lock_release_recursive>
  409e3a:	f04f 30ff 	mov.w	r0, #4294967295
  409e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409e42:	bf00      	nop
  409e44:	20000450 	.word	0x20000450
  409e48:	0040b6a0 	.word	0x0040b6a0
  409e4c:	00000000 	.word	0x00000000

00409e50 <_calloc_r>:
  409e50:	b510      	push	{r4, lr}
  409e52:	fb02 f101 	mul.w	r1, r2, r1
  409e56:	f7ff f901 	bl	40905c <_malloc_r>
  409e5a:	4604      	mov	r4, r0
  409e5c:	b1d8      	cbz	r0, 409e96 <_calloc_r+0x46>
  409e5e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409e62:	f022 0203 	bic.w	r2, r2, #3
  409e66:	3a04      	subs	r2, #4
  409e68:	2a24      	cmp	r2, #36	; 0x24
  409e6a:	d818      	bhi.n	409e9e <_calloc_r+0x4e>
  409e6c:	2a13      	cmp	r2, #19
  409e6e:	d914      	bls.n	409e9a <_calloc_r+0x4a>
  409e70:	2300      	movs	r3, #0
  409e72:	2a1b      	cmp	r2, #27
  409e74:	6003      	str	r3, [r0, #0]
  409e76:	6043      	str	r3, [r0, #4]
  409e78:	d916      	bls.n	409ea8 <_calloc_r+0x58>
  409e7a:	2a24      	cmp	r2, #36	; 0x24
  409e7c:	6083      	str	r3, [r0, #8]
  409e7e:	60c3      	str	r3, [r0, #12]
  409e80:	bf11      	iteee	ne
  409e82:	f100 0210 	addne.w	r2, r0, #16
  409e86:	6103      	streq	r3, [r0, #16]
  409e88:	6143      	streq	r3, [r0, #20]
  409e8a:	f100 0218 	addeq.w	r2, r0, #24
  409e8e:	2300      	movs	r3, #0
  409e90:	6013      	str	r3, [r2, #0]
  409e92:	6053      	str	r3, [r2, #4]
  409e94:	6093      	str	r3, [r2, #8]
  409e96:	4620      	mov	r0, r4
  409e98:	bd10      	pop	{r4, pc}
  409e9a:	4602      	mov	r2, r0
  409e9c:	e7f7      	b.n	409e8e <_calloc_r+0x3e>
  409e9e:	2100      	movs	r1, #0
  409ea0:	f7fc fd6e 	bl	406980 <memset>
  409ea4:	4620      	mov	r0, r4
  409ea6:	bd10      	pop	{r4, pc}
  409ea8:	f100 0208 	add.w	r2, r0, #8
  409eac:	e7ef      	b.n	409e8e <_calloc_r+0x3e>
  409eae:	bf00      	nop

00409eb0 <_malloc_trim_r>:
  409eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409eb2:	4f24      	ldr	r7, [pc, #144]	; (409f44 <_malloc_trim_r+0x94>)
  409eb4:	460c      	mov	r4, r1
  409eb6:	4606      	mov	r6, r0
  409eb8:	f7ff fbd2 	bl	409660 <__malloc_lock>
  409ebc:	68bb      	ldr	r3, [r7, #8]
  409ebe:	685d      	ldr	r5, [r3, #4]
  409ec0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  409ec4:	310f      	adds	r1, #15
  409ec6:	f025 0503 	bic.w	r5, r5, #3
  409eca:	4429      	add	r1, r5
  409ecc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  409ed0:	f021 010f 	bic.w	r1, r1, #15
  409ed4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  409ed8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  409edc:	db07      	blt.n	409eee <_malloc_trim_r+0x3e>
  409ede:	2100      	movs	r1, #0
  409ee0:	4630      	mov	r0, r6
  409ee2:	f7ff fec3 	bl	409c6c <_sbrk_r>
  409ee6:	68bb      	ldr	r3, [r7, #8]
  409ee8:	442b      	add	r3, r5
  409eea:	4298      	cmp	r0, r3
  409eec:	d004      	beq.n	409ef8 <_malloc_trim_r+0x48>
  409eee:	4630      	mov	r0, r6
  409ef0:	f7ff fbbc 	bl	40966c <__malloc_unlock>
  409ef4:	2000      	movs	r0, #0
  409ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409ef8:	4261      	negs	r1, r4
  409efa:	4630      	mov	r0, r6
  409efc:	f7ff feb6 	bl	409c6c <_sbrk_r>
  409f00:	3001      	adds	r0, #1
  409f02:	d00d      	beq.n	409f20 <_malloc_trim_r+0x70>
  409f04:	4b10      	ldr	r3, [pc, #64]	; (409f48 <_malloc_trim_r+0x98>)
  409f06:	68ba      	ldr	r2, [r7, #8]
  409f08:	6819      	ldr	r1, [r3, #0]
  409f0a:	1b2d      	subs	r5, r5, r4
  409f0c:	f045 0501 	orr.w	r5, r5, #1
  409f10:	4630      	mov	r0, r6
  409f12:	1b09      	subs	r1, r1, r4
  409f14:	6055      	str	r5, [r2, #4]
  409f16:	6019      	str	r1, [r3, #0]
  409f18:	f7ff fba8 	bl	40966c <__malloc_unlock>
  409f1c:	2001      	movs	r0, #1
  409f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409f20:	2100      	movs	r1, #0
  409f22:	4630      	mov	r0, r6
  409f24:	f7ff fea2 	bl	409c6c <_sbrk_r>
  409f28:	68ba      	ldr	r2, [r7, #8]
  409f2a:	1a83      	subs	r3, r0, r2
  409f2c:	2b0f      	cmp	r3, #15
  409f2e:	ddde      	ble.n	409eee <_malloc_trim_r+0x3e>
  409f30:	4c06      	ldr	r4, [pc, #24]	; (409f4c <_malloc_trim_r+0x9c>)
  409f32:	4905      	ldr	r1, [pc, #20]	; (409f48 <_malloc_trim_r+0x98>)
  409f34:	6824      	ldr	r4, [r4, #0]
  409f36:	f043 0301 	orr.w	r3, r3, #1
  409f3a:	1b00      	subs	r0, r0, r4
  409f3c:	6053      	str	r3, [r2, #4]
  409f3e:	6008      	str	r0, [r1, #0]
  409f40:	e7d5      	b.n	409eee <_malloc_trim_r+0x3e>
  409f42:	bf00      	nop
  409f44:	20000454 	.word	0x20000454
  409f48:	2000abe8 	.word	0x2000abe8
  409f4c:	2000085c 	.word	0x2000085c

00409f50 <_free_r>:
  409f50:	2900      	cmp	r1, #0
  409f52:	d044      	beq.n	409fde <_free_r+0x8e>
  409f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409f58:	460d      	mov	r5, r1
  409f5a:	4680      	mov	r8, r0
  409f5c:	f7ff fb80 	bl	409660 <__malloc_lock>
  409f60:	f855 7c04 	ldr.w	r7, [r5, #-4]
  409f64:	4969      	ldr	r1, [pc, #420]	; (40a10c <_free_r+0x1bc>)
  409f66:	f027 0301 	bic.w	r3, r7, #1
  409f6a:	f1a5 0408 	sub.w	r4, r5, #8
  409f6e:	18e2      	adds	r2, r4, r3
  409f70:	688e      	ldr	r6, [r1, #8]
  409f72:	6850      	ldr	r0, [r2, #4]
  409f74:	42b2      	cmp	r2, r6
  409f76:	f020 0003 	bic.w	r0, r0, #3
  409f7a:	d05e      	beq.n	40a03a <_free_r+0xea>
  409f7c:	07fe      	lsls	r6, r7, #31
  409f7e:	6050      	str	r0, [r2, #4]
  409f80:	d40b      	bmi.n	409f9a <_free_r+0x4a>
  409f82:	f855 7c08 	ldr.w	r7, [r5, #-8]
  409f86:	1be4      	subs	r4, r4, r7
  409f88:	f101 0e08 	add.w	lr, r1, #8
  409f8c:	68a5      	ldr	r5, [r4, #8]
  409f8e:	4575      	cmp	r5, lr
  409f90:	443b      	add	r3, r7
  409f92:	d06d      	beq.n	40a070 <_free_r+0x120>
  409f94:	68e7      	ldr	r7, [r4, #12]
  409f96:	60ef      	str	r7, [r5, #12]
  409f98:	60bd      	str	r5, [r7, #8]
  409f9a:	1815      	adds	r5, r2, r0
  409f9c:	686d      	ldr	r5, [r5, #4]
  409f9e:	07ed      	lsls	r5, r5, #31
  409fa0:	d53e      	bpl.n	40a020 <_free_r+0xd0>
  409fa2:	f043 0201 	orr.w	r2, r3, #1
  409fa6:	6062      	str	r2, [r4, #4]
  409fa8:	50e3      	str	r3, [r4, r3]
  409faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409fae:	d217      	bcs.n	409fe0 <_free_r+0x90>
  409fb0:	08db      	lsrs	r3, r3, #3
  409fb2:	1c58      	adds	r0, r3, #1
  409fb4:	109a      	asrs	r2, r3, #2
  409fb6:	684d      	ldr	r5, [r1, #4]
  409fb8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  409fbc:	60a7      	str	r7, [r4, #8]
  409fbe:	2301      	movs	r3, #1
  409fc0:	4093      	lsls	r3, r2
  409fc2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  409fc6:	432b      	orrs	r3, r5
  409fc8:	3a08      	subs	r2, #8
  409fca:	60e2      	str	r2, [r4, #12]
  409fcc:	604b      	str	r3, [r1, #4]
  409fce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  409fd2:	60fc      	str	r4, [r7, #12]
  409fd4:	4640      	mov	r0, r8
  409fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409fda:	f7ff bb47 	b.w	40966c <__malloc_unlock>
  409fde:	4770      	bx	lr
  409fe0:	0a5a      	lsrs	r2, r3, #9
  409fe2:	2a04      	cmp	r2, #4
  409fe4:	d852      	bhi.n	40a08c <_free_r+0x13c>
  409fe6:	099a      	lsrs	r2, r3, #6
  409fe8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  409fec:	00ff      	lsls	r7, r7, #3
  409fee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  409ff2:	19c8      	adds	r0, r1, r7
  409ff4:	59ca      	ldr	r2, [r1, r7]
  409ff6:	3808      	subs	r0, #8
  409ff8:	4290      	cmp	r0, r2
  409ffa:	d04f      	beq.n	40a09c <_free_r+0x14c>
  409ffc:	6851      	ldr	r1, [r2, #4]
  409ffe:	f021 0103 	bic.w	r1, r1, #3
  40a002:	428b      	cmp	r3, r1
  40a004:	d232      	bcs.n	40a06c <_free_r+0x11c>
  40a006:	6892      	ldr	r2, [r2, #8]
  40a008:	4290      	cmp	r0, r2
  40a00a:	d1f7      	bne.n	409ffc <_free_r+0xac>
  40a00c:	68c3      	ldr	r3, [r0, #12]
  40a00e:	60a0      	str	r0, [r4, #8]
  40a010:	60e3      	str	r3, [r4, #12]
  40a012:	609c      	str	r4, [r3, #8]
  40a014:	60c4      	str	r4, [r0, #12]
  40a016:	4640      	mov	r0, r8
  40a018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40a01c:	f7ff bb26 	b.w	40966c <__malloc_unlock>
  40a020:	6895      	ldr	r5, [r2, #8]
  40a022:	4f3b      	ldr	r7, [pc, #236]	; (40a110 <_free_r+0x1c0>)
  40a024:	42bd      	cmp	r5, r7
  40a026:	4403      	add	r3, r0
  40a028:	d040      	beq.n	40a0ac <_free_r+0x15c>
  40a02a:	68d0      	ldr	r0, [r2, #12]
  40a02c:	60e8      	str	r0, [r5, #12]
  40a02e:	f043 0201 	orr.w	r2, r3, #1
  40a032:	6085      	str	r5, [r0, #8]
  40a034:	6062      	str	r2, [r4, #4]
  40a036:	50e3      	str	r3, [r4, r3]
  40a038:	e7b7      	b.n	409faa <_free_r+0x5a>
  40a03a:	07ff      	lsls	r7, r7, #31
  40a03c:	4403      	add	r3, r0
  40a03e:	d407      	bmi.n	40a050 <_free_r+0x100>
  40a040:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40a044:	1aa4      	subs	r4, r4, r2
  40a046:	4413      	add	r3, r2
  40a048:	68a0      	ldr	r0, [r4, #8]
  40a04a:	68e2      	ldr	r2, [r4, #12]
  40a04c:	60c2      	str	r2, [r0, #12]
  40a04e:	6090      	str	r0, [r2, #8]
  40a050:	4a30      	ldr	r2, [pc, #192]	; (40a114 <_free_r+0x1c4>)
  40a052:	6812      	ldr	r2, [r2, #0]
  40a054:	f043 0001 	orr.w	r0, r3, #1
  40a058:	4293      	cmp	r3, r2
  40a05a:	6060      	str	r0, [r4, #4]
  40a05c:	608c      	str	r4, [r1, #8]
  40a05e:	d3b9      	bcc.n	409fd4 <_free_r+0x84>
  40a060:	4b2d      	ldr	r3, [pc, #180]	; (40a118 <_free_r+0x1c8>)
  40a062:	4640      	mov	r0, r8
  40a064:	6819      	ldr	r1, [r3, #0]
  40a066:	f7ff ff23 	bl	409eb0 <_malloc_trim_r>
  40a06a:	e7b3      	b.n	409fd4 <_free_r+0x84>
  40a06c:	4610      	mov	r0, r2
  40a06e:	e7cd      	b.n	40a00c <_free_r+0xbc>
  40a070:	1811      	adds	r1, r2, r0
  40a072:	6849      	ldr	r1, [r1, #4]
  40a074:	07c9      	lsls	r1, r1, #31
  40a076:	d444      	bmi.n	40a102 <_free_r+0x1b2>
  40a078:	6891      	ldr	r1, [r2, #8]
  40a07a:	68d2      	ldr	r2, [r2, #12]
  40a07c:	60ca      	str	r2, [r1, #12]
  40a07e:	4403      	add	r3, r0
  40a080:	f043 0001 	orr.w	r0, r3, #1
  40a084:	6091      	str	r1, [r2, #8]
  40a086:	6060      	str	r0, [r4, #4]
  40a088:	50e3      	str	r3, [r4, r3]
  40a08a:	e7a3      	b.n	409fd4 <_free_r+0x84>
  40a08c:	2a14      	cmp	r2, #20
  40a08e:	d816      	bhi.n	40a0be <_free_r+0x16e>
  40a090:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40a094:	00ff      	lsls	r7, r7, #3
  40a096:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40a09a:	e7aa      	b.n	409ff2 <_free_r+0xa2>
  40a09c:	10aa      	asrs	r2, r5, #2
  40a09e:	2301      	movs	r3, #1
  40a0a0:	684d      	ldr	r5, [r1, #4]
  40a0a2:	4093      	lsls	r3, r2
  40a0a4:	432b      	orrs	r3, r5
  40a0a6:	604b      	str	r3, [r1, #4]
  40a0a8:	4603      	mov	r3, r0
  40a0aa:	e7b0      	b.n	40a00e <_free_r+0xbe>
  40a0ac:	f043 0201 	orr.w	r2, r3, #1
  40a0b0:	614c      	str	r4, [r1, #20]
  40a0b2:	610c      	str	r4, [r1, #16]
  40a0b4:	60e5      	str	r5, [r4, #12]
  40a0b6:	60a5      	str	r5, [r4, #8]
  40a0b8:	6062      	str	r2, [r4, #4]
  40a0ba:	50e3      	str	r3, [r4, r3]
  40a0bc:	e78a      	b.n	409fd4 <_free_r+0x84>
  40a0be:	2a54      	cmp	r2, #84	; 0x54
  40a0c0:	d806      	bhi.n	40a0d0 <_free_r+0x180>
  40a0c2:	0b1a      	lsrs	r2, r3, #12
  40a0c4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40a0c8:	00ff      	lsls	r7, r7, #3
  40a0ca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40a0ce:	e790      	b.n	409ff2 <_free_r+0xa2>
  40a0d0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a0d4:	d806      	bhi.n	40a0e4 <_free_r+0x194>
  40a0d6:	0bda      	lsrs	r2, r3, #15
  40a0d8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40a0dc:	00ff      	lsls	r7, r7, #3
  40a0de:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40a0e2:	e786      	b.n	409ff2 <_free_r+0xa2>
  40a0e4:	f240 5054 	movw	r0, #1364	; 0x554
  40a0e8:	4282      	cmp	r2, r0
  40a0ea:	d806      	bhi.n	40a0fa <_free_r+0x1aa>
  40a0ec:	0c9a      	lsrs	r2, r3, #18
  40a0ee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40a0f2:	00ff      	lsls	r7, r7, #3
  40a0f4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40a0f8:	e77b      	b.n	409ff2 <_free_r+0xa2>
  40a0fa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40a0fe:	257e      	movs	r5, #126	; 0x7e
  40a100:	e777      	b.n	409ff2 <_free_r+0xa2>
  40a102:	f043 0101 	orr.w	r1, r3, #1
  40a106:	6061      	str	r1, [r4, #4]
  40a108:	6013      	str	r3, [r2, #0]
  40a10a:	e763      	b.n	409fd4 <_free_r+0x84>
  40a10c:	20000454 	.word	0x20000454
  40a110:	2000045c 	.word	0x2000045c
  40a114:	20000860 	.word	0x20000860
  40a118:	2000ac18 	.word	0x2000ac18

0040a11c <__ascii_mbtowc>:
  40a11c:	b082      	sub	sp, #8
  40a11e:	b149      	cbz	r1, 40a134 <__ascii_mbtowc+0x18>
  40a120:	b15a      	cbz	r2, 40a13a <__ascii_mbtowc+0x1e>
  40a122:	b16b      	cbz	r3, 40a140 <__ascii_mbtowc+0x24>
  40a124:	7813      	ldrb	r3, [r2, #0]
  40a126:	600b      	str	r3, [r1, #0]
  40a128:	7812      	ldrb	r2, [r2, #0]
  40a12a:	1c10      	adds	r0, r2, #0
  40a12c:	bf18      	it	ne
  40a12e:	2001      	movne	r0, #1
  40a130:	b002      	add	sp, #8
  40a132:	4770      	bx	lr
  40a134:	a901      	add	r1, sp, #4
  40a136:	2a00      	cmp	r2, #0
  40a138:	d1f3      	bne.n	40a122 <__ascii_mbtowc+0x6>
  40a13a:	4610      	mov	r0, r2
  40a13c:	b002      	add	sp, #8
  40a13e:	4770      	bx	lr
  40a140:	f06f 0001 	mvn.w	r0, #1
  40a144:	e7f4      	b.n	40a130 <__ascii_mbtowc+0x14>
  40a146:	bf00      	nop

0040a148 <memmove>:
  40a148:	4288      	cmp	r0, r1
  40a14a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a14c:	d90d      	bls.n	40a16a <memmove+0x22>
  40a14e:	188b      	adds	r3, r1, r2
  40a150:	4298      	cmp	r0, r3
  40a152:	d20a      	bcs.n	40a16a <memmove+0x22>
  40a154:	1884      	adds	r4, r0, r2
  40a156:	2a00      	cmp	r2, #0
  40a158:	d051      	beq.n	40a1fe <memmove+0xb6>
  40a15a:	4622      	mov	r2, r4
  40a15c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40a160:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40a164:	4299      	cmp	r1, r3
  40a166:	d1f9      	bne.n	40a15c <memmove+0x14>
  40a168:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a16a:	2a0f      	cmp	r2, #15
  40a16c:	d948      	bls.n	40a200 <memmove+0xb8>
  40a16e:	ea41 0300 	orr.w	r3, r1, r0
  40a172:	079b      	lsls	r3, r3, #30
  40a174:	d146      	bne.n	40a204 <memmove+0xbc>
  40a176:	f100 0410 	add.w	r4, r0, #16
  40a17a:	f101 0310 	add.w	r3, r1, #16
  40a17e:	4615      	mov	r5, r2
  40a180:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40a184:	f844 6c10 	str.w	r6, [r4, #-16]
  40a188:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40a18c:	f844 6c0c 	str.w	r6, [r4, #-12]
  40a190:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40a194:	f844 6c08 	str.w	r6, [r4, #-8]
  40a198:	3d10      	subs	r5, #16
  40a19a:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40a19e:	f844 6c04 	str.w	r6, [r4, #-4]
  40a1a2:	2d0f      	cmp	r5, #15
  40a1a4:	f103 0310 	add.w	r3, r3, #16
  40a1a8:	f104 0410 	add.w	r4, r4, #16
  40a1ac:	d8e8      	bhi.n	40a180 <memmove+0x38>
  40a1ae:	f1a2 0310 	sub.w	r3, r2, #16
  40a1b2:	f023 030f 	bic.w	r3, r3, #15
  40a1b6:	f002 0e0f 	and.w	lr, r2, #15
  40a1ba:	3310      	adds	r3, #16
  40a1bc:	f1be 0f03 	cmp.w	lr, #3
  40a1c0:	4419      	add	r1, r3
  40a1c2:	4403      	add	r3, r0
  40a1c4:	d921      	bls.n	40a20a <memmove+0xc2>
  40a1c6:	1f1e      	subs	r6, r3, #4
  40a1c8:	460d      	mov	r5, r1
  40a1ca:	4674      	mov	r4, lr
  40a1cc:	3c04      	subs	r4, #4
  40a1ce:	f855 7b04 	ldr.w	r7, [r5], #4
  40a1d2:	f846 7f04 	str.w	r7, [r6, #4]!
  40a1d6:	2c03      	cmp	r4, #3
  40a1d8:	d8f8      	bhi.n	40a1cc <memmove+0x84>
  40a1da:	f1ae 0404 	sub.w	r4, lr, #4
  40a1de:	f024 0403 	bic.w	r4, r4, #3
  40a1e2:	3404      	adds	r4, #4
  40a1e4:	4421      	add	r1, r4
  40a1e6:	4423      	add	r3, r4
  40a1e8:	f002 0203 	and.w	r2, r2, #3
  40a1ec:	b162      	cbz	r2, 40a208 <memmove+0xc0>
  40a1ee:	3b01      	subs	r3, #1
  40a1f0:	440a      	add	r2, r1
  40a1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
  40a1f6:	f803 4f01 	strb.w	r4, [r3, #1]!
  40a1fa:	428a      	cmp	r2, r1
  40a1fc:	d1f9      	bne.n	40a1f2 <memmove+0xaa>
  40a1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a200:	4603      	mov	r3, r0
  40a202:	e7f3      	b.n	40a1ec <memmove+0xa4>
  40a204:	4603      	mov	r3, r0
  40a206:	e7f2      	b.n	40a1ee <memmove+0xa6>
  40a208:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a20a:	4672      	mov	r2, lr
  40a20c:	e7ee      	b.n	40a1ec <memmove+0xa4>
  40a20e:	bf00      	nop

0040a210 <_realloc_r>:
  40a210:	2900      	cmp	r1, #0
  40a212:	f000 8095 	beq.w	40a340 <_realloc_r+0x130>
  40a216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a21a:	460d      	mov	r5, r1
  40a21c:	4616      	mov	r6, r2
  40a21e:	b083      	sub	sp, #12
  40a220:	4680      	mov	r8, r0
  40a222:	f106 070b 	add.w	r7, r6, #11
  40a226:	f7ff fa1b 	bl	409660 <__malloc_lock>
  40a22a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40a22e:	2f16      	cmp	r7, #22
  40a230:	f02e 0403 	bic.w	r4, lr, #3
  40a234:	f1a5 0908 	sub.w	r9, r5, #8
  40a238:	d83c      	bhi.n	40a2b4 <_realloc_r+0xa4>
  40a23a:	2210      	movs	r2, #16
  40a23c:	4617      	mov	r7, r2
  40a23e:	42be      	cmp	r6, r7
  40a240:	d83d      	bhi.n	40a2be <_realloc_r+0xae>
  40a242:	4294      	cmp	r4, r2
  40a244:	da43      	bge.n	40a2ce <_realloc_r+0xbe>
  40a246:	4bc4      	ldr	r3, [pc, #784]	; (40a558 <_realloc_r+0x348>)
  40a248:	6899      	ldr	r1, [r3, #8]
  40a24a:	eb09 0004 	add.w	r0, r9, r4
  40a24e:	4288      	cmp	r0, r1
  40a250:	f000 80b4 	beq.w	40a3bc <_realloc_r+0x1ac>
  40a254:	6843      	ldr	r3, [r0, #4]
  40a256:	f023 0101 	bic.w	r1, r3, #1
  40a25a:	4401      	add	r1, r0
  40a25c:	6849      	ldr	r1, [r1, #4]
  40a25e:	07c9      	lsls	r1, r1, #31
  40a260:	d54c      	bpl.n	40a2fc <_realloc_r+0xec>
  40a262:	f01e 0f01 	tst.w	lr, #1
  40a266:	f000 809b 	beq.w	40a3a0 <_realloc_r+0x190>
  40a26a:	4631      	mov	r1, r6
  40a26c:	4640      	mov	r0, r8
  40a26e:	f7fe fef5 	bl	40905c <_malloc_r>
  40a272:	4606      	mov	r6, r0
  40a274:	2800      	cmp	r0, #0
  40a276:	d03a      	beq.n	40a2ee <_realloc_r+0xde>
  40a278:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40a27c:	f023 0301 	bic.w	r3, r3, #1
  40a280:	444b      	add	r3, r9
  40a282:	f1a0 0208 	sub.w	r2, r0, #8
  40a286:	429a      	cmp	r2, r3
  40a288:	f000 8121 	beq.w	40a4ce <_realloc_r+0x2be>
  40a28c:	1f22      	subs	r2, r4, #4
  40a28e:	2a24      	cmp	r2, #36	; 0x24
  40a290:	f200 8107 	bhi.w	40a4a2 <_realloc_r+0x292>
  40a294:	2a13      	cmp	r2, #19
  40a296:	f200 80db 	bhi.w	40a450 <_realloc_r+0x240>
  40a29a:	4603      	mov	r3, r0
  40a29c:	462a      	mov	r2, r5
  40a29e:	6811      	ldr	r1, [r2, #0]
  40a2a0:	6019      	str	r1, [r3, #0]
  40a2a2:	6851      	ldr	r1, [r2, #4]
  40a2a4:	6059      	str	r1, [r3, #4]
  40a2a6:	6892      	ldr	r2, [r2, #8]
  40a2a8:	609a      	str	r2, [r3, #8]
  40a2aa:	4629      	mov	r1, r5
  40a2ac:	4640      	mov	r0, r8
  40a2ae:	f7ff fe4f 	bl	409f50 <_free_r>
  40a2b2:	e01c      	b.n	40a2ee <_realloc_r+0xde>
  40a2b4:	f027 0707 	bic.w	r7, r7, #7
  40a2b8:	2f00      	cmp	r7, #0
  40a2ba:	463a      	mov	r2, r7
  40a2bc:	dabf      	bge.n	40a23e <_realloc_r+0x2e>
  40a2be:	2600      	movs	r6, #0
  40a2c0:	230c      	movs	r3, #12
  40a2c2:	4630      	mov	r0, r6
  40a2c4:	f8c8 3000 	str.w	r3, [r8]
  40a2c8:	b003      	add	sp, #12
  40a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a2ce:	462e      	mov	r6, r5
  40a2d0:	1be3      	subs	r3, r4, r7
  40a2d2:	2b0f      	cmp	r3, #15
  40a2d4:	d81e      	bhi.n	40a314 <_realloc_r+0x104>
  40a2d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40a2da:	f003 0301 	and.w	r3, r3, #1
  40a2de:	4323      	orrs	r3, r4
  40a2e0:	444c      	add	r4, r9
  40a2e2:	f8c9 3004 	str.w	r3, [r9, #4]
  40a2e6:	6863      	ldr	r3, [r4, #4]
  40a2e8:	f043 0301 	orr.w	r3, r3, #1
  40a2ec:	6063      	str	r3, [r4, #4]
  40a2ee:	4640      	mov	r0, r8
  40a2f0:	f7ff f9bc 	bl	40966c <__malloc_unlock>
  40a2f4:	4630      	mov	r0, r6
  40a2f6:	b003      	add	sp, #12
  40a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a2fc:	f023 0303 	bic.w	r3, r3, #3
  40a300:	18e1      	adds	r1, r4, r3
  40a302:	4291      	cmp	r1, r2
  40a304:	db1f      	blt.n	40a346 <_realloc_r+0x136>
  40a306:	68c3      	ldr	r3, [r0, #12]
  40a308:	6882      	ldr	r2, [r0, #8]
  40a30a:	462e      	mov	r6, r5
  40a30c:	60d3      	str	r3, [r2, #12]
  40a30e:	460c      	mov	r4, r1
  40a310:	609a      	str	r2, [r3, #8]
  40a312:	e7dd      	b.n	40a2d0 <_realloc_r+0xc0>
  40a314:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40a318:	eb09 0107 	add.w	r1, r9, r7
  40a31c:	f002 0201 	and.w	r2, r2, #1
  40a320:	444c      	add	r4, r9
  40a322:	f043 0301 	orr.w	r3, r3, #1
  40a326:	4317      	orrs	r7, r2
  40a328:	f8c9 7004 	str.w	r7, [r9, #4]
  40a32c:	604b      	str	r3, [r1, #4]
  40a32e:	6863      	ldr	r3, [r4, #4]
  40a330:	f043 0301 	orr.w	r3, r3, #1
  40a334:	3108      	adds	r1, #8
  40a336:	6063      	str	r3, [r4, #4]
  40a338:	4640      	mov	r0, r8
  40a33a:	f7ff fe09 	bl	409f50 <_free_r>
  40a33e:	e7d6      	b.n	40a2ee <_realloc_r+0xde>
  40a340:	4611      	mov	r1, r2
  40a342:	f7fe be8b 	b.w	40905c <_malloc_r>
  40a346:	f01e 0f01 	tst.w	lr, #1
  40a34a:	d18e      	bne.n	40a26a <_realloc_r+0x5a>
  40a34c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a350:	eba9 0a01 	sub.w	sl, r9, r1
  40a354:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a358:	f021 0103 	bic.w	r1, r1, #3
  40a35c:	440b      	add	r3, r1
  40a35e:	4423      	add	r3, r4
  40a360:	4293      	cmp	r3, r2
  40a362:	db25      	blt.n	40a3b0 <_realloc_r+0x1a0>
  40a364:	68c2      	ldr	r2, [r0, #12]
  40a366:	6881      	ldr	r1, [r0, #8]
  40a368:	4656      	mov	r6, sl
  40a36a:	60ca      	str	r2, [r1, #12]
  40a36c:	6091      	str	r1, [r2, #8]
  40a36e:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a372:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a376:	1f22      	subs	r2, r4, #4
  40a378:	2a24      	cmp	r2, #36	; 0x24
  40a37a:	60c1      	str	r1, [r0, #12]
  40a37c:	6088      	str	r0, [r1, #8]
  40a37e:	f200 8094 	bhi.w	40a4aa <_realloc_r+0x29a>
  40a382:	2a13      	cmp	r2, #19
  40a384:	d96f      	bls.n	40a466 <_realloc_r+0x256>
  40a386:	6829      	ldr	r1, [r5, #0]
  40a388:	f8ca 1008 	str.w	r1, [sl, #8]
  40a38c:	6869      	ldr	r1, [r5, #4]
  40a38e:	f8ca 100c 	str.w	r1, [sl, #12]
  40a392:	2a1b      	cmp	r2, #27
  40a394:	f200 80a2 	bhi.w	40a4dc <_realloc_r+0x2cc>
  40a398:	3508      	adds	r5, #8
  40a39a:	f10a 0210 	add.w	r2, sl, #16
  40a39e:	e063      	b.n	40a468 <_realloc_r+0x258>
  40a3a0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40a3a4:	eba9 0a03 	sub.w	sl, r9, r3
  40a3a8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a3ac:	f021 0103 	bic.w	r1, r1, #3
  40a3b0:	1863      	adds	r3, r4, r1
  40a3b2:	4293      	cmp	r3, r2
  40a3b4:	f6ff af59 	blt.w	40a26a <_realloc_r+0x5a>
  40a3b8:	4656      	mov	r6, sl
  40a3ba:	e7d8      	b.n	40a36e <_realloc_r+0x15e>
  40a3bc:	6841      	ldr	r1, [r0, #4]
  40a3be:	f021 0b03 	bic.w	fp, r1, #3
  40a3c2:	44a3      	add	fp, r4
  40a3c4:	f107 0010 	add.w	r0, r7, #16
  40a3c8:	4583      	cmp	fp, r0
  40a3ca:	da56      	bge.n	40a47a <_realloc_r+0x26a>
  40a3cc:	f01e 0f01 	tst.w	lr, #1
  40a3d0:	f47f af4b 	bne.w	40a26a <_realloc_r+0x5a>
  40a3d4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40a3d8:	eba9 0a01 	sub.w	sl, r9, r1
  40a3dc:	f8da 1004 	ldr.w	r1, [sl, #4]
  40a3e0:	f021 0103 	bic.w	r1, r1, #3
  40a3e4:	448b      	add	fp, r1
  40a3e6:	4558      	cmp	r0, fp
  40a3e8:	dce2      	bgt.n	40a3b0 <_realloc_r+0x1a0>
  40a3ea:	4656      	mov	r6, sl
  40a3ec:	f8da 100c 	ldr.w	r1, [sl, #12]
  40a3f0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40a3f4:	1f22      	subs	r2, r4, #4
  40a3f6:	2a24      	cmp	r2, #36	; 0x24
  40a3f8:	60c1      	str	r1, [r0, #12]
  40a3fa:	6088      	str	r0, [r1, #8]
  40a3fc:	f200 808f 	bhi.w	40a51e <_realloc_r+0x30e>
  40a400:	2a13      	cmp	r2, #19
  40a402:	f240 808a 	bls.w	40a51a <_realloc_r+0x30a>
  40a406:	6829      	ldr	r1, [r5, #0]
  40a408:	f8ca 1008 	str.w	r1, [sl, #8]
  40a40c:	6869      	ldr	r1, [r5, #4]
  40a40e:	f8ca 100c 	str.w	r1, [sl, #12]
  40a412:	2a1b      	cmp	r2, #27
  40a414:	f200 808a 	bhi.w	40a52c <_realloc_r+0x31c>
  40a418:	3508      	adds	r5, #8
  40a41a:	f10a 0210 	add.w	r2, sl, #16
  40a41e:	6829      	ldr	r1, [r5, #0]
  40a420:	6011      	str	r1, [r2, #0]
  40a422:	6869      	ldr	r1, [r5, #4]
  40a424:	6051      	str	r1, [r2, #4]
  40a426:	68a9      	ldr	r1, [r5, #8]
  40a428:	6091      	str	r1, [r2, #8]
  40a42a:	eb0a 0107 	add.w	r1, sl, r7
  40a42e:	ebab 0207 	sub.w	r2, fp, r7
  40a432:	f042 0201 	orr.w	r2, r2, #1
  40a436:	6099      	str	r1, [r3, #8]
  40a438:	604a      	str	r2, [r1, #4]
  40a43a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40a43e:	f003 0301 	and.w	r3, r3, #1
  40a442:	431f      	orrs	r7, r3
  40a444:	4640      	mov	r0, r8
  40a446:	f8ca 7004 	str.w	r7, [sl, #4]
  40a44a:	f7ff f90f 	bl	40966c <__malloc_unlock>
  40a44e:	e751      	b.n	40a2f4 <_realloc_r+0xe4>
  40a450:	682b      	ldr	r3, [r5, #0]
  40a452:	6003      	str	r3, [r0, #0]
  40a454:	686b      	ldr	r3, [r5, #4]
  40a456:	6043      	str	r3, [r0, #4]
  40a458:	2a1b      	cmp	r2, #27
  40a45a:	d82d      	bhi.n	40a4b8 <_realloc_r+0x2a8>
  40a45c:	f100 0308 	add.w	r3, r0, #8
  40a460:	f105 0208 	add.w	r2, r5, #8
  40a464:	e71b      	b.n	40a29e <_realloc_r+0x8e>
  40a466:	4632      	mov	r2, r6
  40a468:	6829      	ldr	r1, [r5, #0]
  40a46a:	6011      	str	r1, [r2, #0]
  40a46c:	6869      	ldr	r1, [r5, #4]
  40a46e:	6051      	str	r1, [r2, #4]
  40a470:	68a9      	ldr	r1, [r5, #8]
  40a472:	6091      	str	r1, [r2, #8]
  40a474:	461c      	mov	r4, r3
  40a476:	46d1      	mov	r9, sl
  40a478:	e72a      	b.n	40a2d0 <_realloc_r+0xc0>
  40a47a:	eb09 0107 	add.w	r1, r9, r7
  40a47e:	ebab 0b07 	sub.w	fp, fp, r7
  40a482:	f04b 0201 	orr.w	r2, fp, #1
  40a486:	6099      	str	r1, [r3, #8]
  40a488:	604a      	str	r2, [r1, #4]
  40a48a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40a48e:	f003 0301 	and.w	r3, r3, #1
  40a492:	431f      	orrs	r7, r3
  40a494:	4640      	mov	r0, r8
  40a496:	f845 7c04 	str.w	r7, [r5, #-4]
  40a49a:	f7ff f8e7 	bl	40966c <__malloc_unlock>
  40a49e:	462e      	mov	r6, r5
  40a4a0:	e728      	b.n	40a2f4 <_realloc_r+0xe4>
  40a4a2:	4629      	mov	r1, r5
  40a4a4:	f7ff fe50 	bl	40a148 <memmove>
  40a4a8:	e6ff      	b.n	40a2aa <_realloc_r+0x9a>
  40a4aa:	4629      	mov	r1, r5
  40a4ac:	4630      	mov	r0, r6
  40a4ae:	461c      	mov	r4, r3
  40a4b0:	46d1      	mov	r9, sl
  40a4b2:	f7ff fe49 	bl	40a148 <memmove>
  40a4b6:	e70b      	b.n	40a2d0 <_realloc_r+0xc0>
  40a4b8:	68ab      	ldr	r3, [r5, #8]
  40a4ba:	6083      	str	r3, [r0, #8]
  40a4bc:	68eb      	ldr	r3, [r5, #12]
  40a4be:	60c3      	str	r3, [r0, #12]
  40a4c0:	2a24      	cmp	r2, #36	; 0x24
  40a4c2:	d017      	beq.n	40a4f4 <_realloc_r+0x2e4>
  40a4c4:	f100 0310 	add.w	r3, r0, #16
  40a4c8:	f105 0210 	add.w	r2, r5, #16
  40a4cc:	e6e7      	b.n	40a29e <_realloc_r+0x8e>
  40a4ce:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40a4d2:	f023 0303 	bic.w	r3, r3, #3
  40a4d6:	441c      	add	r4, r3
  40a4d8:	462e      	mov	r6, r5
  40a4da:	e6f9      	b.n	40a2d0 <_realloc_r+0xc0>
  40a4dc:	68a9      	ldr	r1, [r5, #8]
  40a4de:	f8ca 1010 	str.w	r1, [sl, #16]
  40a4e2:	68e9      	ldr	r1, [r5, #12]
  40a4e4:	f8ca 1014 	str.w	r1, [sl, #20]
  40a4e8:	2a24      	cmp	r2, #36	; 0x24
  40a4ea:	d00c      	beq.n	40a506 <_realloc_r+0x2f6>
  40a4ec:	3510      	adds	r5, #16
  40a4ee:	f10a 0218 	add.w	r2, sl, #24
  40a4f2:	e7b9      	b.n	40a468 <_realloc_r+0x258>
  40a4f4:	692b      	ldr	r3, [r5, #16]
  40a4f6:	6103      	str	r3, [r0, #16]
  40a4f8:	696b      	ldr	r3, [r5, #20]
  40a4fa:	6143      	str	r3, [r0, #20]
  40a4fc:	f105 0218 	add.w	r2, r5, #24
  40a500:	f100 0318 	add.w	r3, r0, #24
  40a504:	e6cb      	b.n	40a29e <_realloc_r+0x8e>
  40a506:	692a      	ldr	r2, [r5, #16]
  40a508:	f8ca 2018 	str.w	r2, [sl, #24]
  40a50c:	696a      	ldr	r2, [r5, #20]
  40a50e:	f8ca 201c 	str.w	r2, [sl, #28]
  40a512:	3518      	adds	r5, #24
  40a514:	f10a 0220 	add.w	r2, sl, #32
  40a518:	e7a6      	b.n	40a468 <_realloc_r+0x258>
  40a51a:	4632      	mov	r2, r6
  40a51c:	e77f      	b.n	40a41e <_realloc_r+0x20e>
  40a51e:	4629      	mov	r1, r5
  40a520:	4630      	mov	r0, r6
  40a522:	9301      	str	r3, [sp, #4]
  40a524:	f7ff fe10 	bl	40a148 <memmove>
  40a528:	9b01      	ldr	r3, [sp, #4]
  40a52a:	e77e      	b.n	40a42a <_realloc_r+0x21a>
  40a52c:	68a9      	ldr	r1, [r5, #8]
  40a52e:	f8ca 1010 	str.w	r1, [sl, #16]
  40a532:	68e9      	ldr	r1, [r5, #12]
  40a534:	f8ca 1014 	str.w	r1, [sl, #20]
  40a538:	2a24      	cmp	r2, #36	; 0x24
  40a53a:	d003      	beq.n	40a544 <_realloc_r+0x334>
  40a53c:	3510      	adds	r5, #16
  40a53e:	f10a 0218 	add.w	r2, sl, #24
  40a542:	e76c      	b.n	40a41e <_realloc_r+0x20e>
  40a544:	692a      	ldr	r2, [r5, #16]
  40a546:	f8ca 2018 	str.w	r2, [sl, #24]
  40a54a:	696a      	ldr	r2, [r5, #20]
  40a54c:	f8ca 201c 	str.w	r2, [sl, #28]
  40a550:	3518      	adds	r5, #24
  40a552:	f10a 0220 	add.w	r2, sl, #32
  40a556:	e762      	b.n	40a41e <_realloc_r+0x20e>
  40a558:	20000454 	.word	0x20000454

0040a55c <__ascii_wctomb>:
  40a55c:	b121      	cbz	r1, 40a568 <__ascii_wctomb+0xc>
  40a55e:	2aff      	cmp	r2, #255	; 0xff
  40a560:	d804      	bhi.n	40a56c <__ascii_wctomb+0x10>
  40a562:	700a      	strb	r2, [r1, #0]
  40a564:	2001      	movs	r0, #1
  40a566:	4770      	bx	lr
  40a568:	4608      	mov	r0, r1
  40a56a:	4770      	bx	lr
  40a56c:	238a      	movs	r3, #138	; 0x8a
  40a56e:	6003      	str	r3, [r0, #0]
  40a570:	f04f 30ff 	mov.w	r0, #4294967295
  40a574:	4770      	bx	lr
  40a576:	bf00      	nop

0040a578 <__aeabi_drsub>:
  40a578:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a57c:	e002      	b.n	40a584 <__adddf3>
  40a57e:	bf00      	nop

0040a580 <__aeabi_dsub>:
  40a580:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a584 <__adddf3>:
  40a584:	b530      	push	{r4, r5, lr}
  40a586:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a58a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a58e:	ea94 0f05 	teq	r4, r5
  40a592:	bf08      	it	eq
  40a594:	ea90 0f02 	teqeq	r0, r2
  40a598:	bf1f      	itttt	ne
  40a59a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a59e:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a5a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a5a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a5aa:	f000 80e2 	beq.w	40a772 <__adddf3+0x1ee>
  40a5ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a5b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a5b6:	bfb8      	it	lt
  40a5b8:	426d      	neglt	r5, r5
  40a5ba:	dd0c      	ble.n	40a5d6 <__adddf3+0x52>
  40a5bc:	442c      	add	r4, r5
  40a5be:	ea80 0202 	eor.w	r2, r0, r2
  40a5c2:	ea81 0303 	eor.w	r3, r1, r3
  40a5c6:	ea82 0000 	eor.w	r0, r2, r0
  40a5ca:	ea83 0101 	eor.w	r1, r3, r1
  40a5ce:	ea80 0202 	eor.w	r2, r0, r2
  40a5d2:	ea81 0303 	eor.w	r3, r1, r3
  40a5d6:	2d36      	cmp	r5, #54	; 0x36
  40a5d8:	bf88      	it	hi
  40a5da:	bd30      	pophi	{r4, r5, pc}
  40a5dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a5e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a5e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a5e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a5ec:	d002      	beq.n	40a5f4 <__adddf3+0x70>
  40a5ee:	4240      	negs	r0, r0
  40a5f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a5f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a5f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a5fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a600:	d002      	beq.n	40a608 <__adddf3+0x84>
  40a602:	4252      	negs	r2, r2
  40a604:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a608:	ea94 0f05 	teq	r4, r5
  40a60c:	f000 80a7 	beq.w	40a75e <__adddf3+0x1da>
  40a610:	f1a4 0401 	sub.w	r4, r4, #1
  40a614:	f1d5 0e20 	rsbs	lr, r5, #32
  40a618:	db0d      	blt.n	40a636 <__adddf3+0xb2>
  40a61a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a61e:	fa22 f205 	lsr.w	r2, r2, r5
  40a622:	1880      	adds	r0, r0, r2
  40a624:	f141 0100 	adc.w	r1, r1, #0
  40a628:	fa03 f20e 	lsl.w	r2, r3, lr
  40a62c:	1880      	adds	r0, r0, r2
  40a62e:	fa43 f305 	asr.w	r3, r3, r5
  40a632:	4159      	adcs	r1, r3
  40a634:	e00e      	b.n	40a654 <__adddf3+0xd0>
  40a636:	f1a5 0520 	sub.w	r5, r5, #32
  40a63a:	f10e 0e20 	add.w	lr, lr, #32
  40a63e:	2a01      	cmp	r2, #1
  40a640:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a644:	bf28      	it	cs
  40a646:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a64a:	fa43 f305 	asr.w	r3, r3, r5
  40a64e:	18c0      	adds	r0, r0, r3
  40a650:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a654:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a658:	d507      	bpl.n	40a66a <__adddf3+0xe6>
  40a65a:	f04f 0e00 	mov.w	lr, #0
  40a65e:	f1dc 0c00 	rsbs	ip, ip, #0
  40a662:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a666:	eb6e 0101 	sbc.w	r1, lr, r1
  40a66a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a66e:	d31b      	bcc.n	40a6a8 <__adddf3+0x124>
  40a670:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a674:	d30c      	bcc.n	40a690 <__adddf3+0x10c>
  40a676:	0849      	lsrs	r1, r1, #1
  40a678:	ea5f 0030 	movs.w	r0, r0, rrx
  40a67c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a680:	f104 0401 	add.w	r4, r4, #1
  40a684:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a688:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a68c:	f080 809a 	bcs.w	40a7c4 <__adddf3+0x240>
  40a690:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a694:	bf08      	it	eq
  40a696:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a69a:	f150 0000 	adcs.w	r0, r0, #0
  40a69e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a6a2:	ea41 0105 	orr.w	r1, r1, r5
  40a6a6:	bd30      	pop	{r4, r5, pc}
  40a6a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a6ac:	4140      	adcs	r0, r0
  40a6ae:	eb41 0101 	adc.w	r1, r1, r1
  40a6b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a6b6:	f1a4 0401 	sub.w	r4, r4, #1
  40a6ba:	d1e9      	bne.n	40a690 <__adddf3+0x10c>
  40a6bc:	f091 0f00 	teq	r1, #0
  40a6c0:	bf04      	itt	eq
  40a6c2:	4601      	moveq	r1, r0
  40a6c4:	2000      	moveq	r0, #0
  40a6c6:	fab1 f381 	clz	r3, r1
  40a6ca:	bf08      	it	eq
  40a6cc:	3320      	addeq	r3, #32
  40a6ce:	f1a3 030b 	sub.w	r3, r3, #11
  40a6d2:	f1b3 0220 	subs.w	r2, r3, #32
  40a6d6:	da0c      	bge.n	40a6f2 <__adddf3+0x16e>
  40a6d8:	320c      	adds	r2, #12
  40a6da:	dd08      	ble.n	40a6ee <__adddf3+0x16a>
  40a6dc:	f102 0c14 	add.w	ip, r2, #20
  40a6e0:	f1c2 020c 	rsb	r2, r2, #12
  40a6e4:	fa01 f00c 	lsl.w	r0, r1, ip
  40a6e8:	fa21 f102 	lsr.w	r1, r1, r2
  40a6ec:	e00c      	b.n	40a708 <__adddf3+0x184>
  40a6ee:	f102 0214 	add.w	r2, r2, #20
  40a6f2:	bfd8      	it	le
  40a6f4:	f1c2 0c20 	rsble	ip, r2, #32
  40a6f8:	fa01 f102 	lsl.w	r1, r1, r2
  40a6fc:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a700:	bfdc      	itt	le
  40a702:	ea41 010c 	orrle.w	r1, r1, ip
  40a706:	4090      	lslle	r0, r2
  40a708:	1ae4      	subs	r4, r4, r3
  40a70a:	bfa2      	ittt	ge
  40a70c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a710:	4329      	orrge	r1, r5
  40a712:	bd30      	popge	{r4, r5, pc}
  40a714:	ea6f 0404 	mvn.w	r4, r4
  40a718:	3c1f      	subs	r4, #31
  40a71a:	da1c      	bge.n	40a756 <__adddf3+0x1d2>
  40a71c:	340c      	adds	r4, #12
  40a71e:	dc0e      	bgt.n	40a73e <__adddf3+0x1ba>
  40a720:	f104 0414 	add.w	r4, r4, #20
  40a724:	f1c4 0220 	rsb	r2, r4, #32
  40a728:	fa20 f004 	lsr.w	r0, r0, r4
  40a72c:	fa01 f302 	lsl.w	r3, r1, r2
  40a730:	ea40 0003 	orr.w	r0, r0, r3
  40a734:	fa21 f304 	lsr.w	r3, r1, r4
  40a738:	ea45 0103 	orr.w	r1, r5, r3
  40a73c:	bd30      	pop	{r4, r5, pc}
  40a73e:	f1c4 040c 	rsb	r4, r4, #12
  40a742:	f1c4 0220 	rsb	r2, r4, #32
  40a746:	fa20 f002 	lsr.w	r0, r0, r2
  40a74a:	fa01 f304 	lsl.w	r3, r1, r4
  40a74e:	ea40 0003 	orr.w	r0, r0, r3
  40a752:	4629      	mov	r1, r5
  40a754:	bd30      	pop	{r4, r5, pc}
  40a756:	fa21 f004 	lsr.w	r0, r1, r4
  40a75a:	4629      	mov	r1, r5
  40a75c:	bd30      	pop	{r4, r5, pc}
  40a75e:	f094 0f00 	teq	r4, #0
  40a762:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a766:	bf06      	itte	eq
  40a768:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a76c:	3401      	addeq	r4, #1
  40a76e:	3d01      	subne	r5, #1
  40a770:	e74e      	b.n	40a610 <__adddf3+0x8c>
  40a772:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a776:	bf18      	it	ne
  40a778:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a77c:	d029      	beq.n	40a7d2 <__adddf3+0x24e>
  40a77e:	ea94 0f05 	teq	r4, r5
  40a782:	bf08      	it	eq
  40a784:	ea90 0f02 	teqeq	r0, r2
  40a788:	d005      	beq.n	40a796 <__adddf3+0x212>
  40a78a:	ea54 0c00 	orrs.w	ip, r4, r0
  40a78e:	bf04      	itt	eq
  40a790:	4619      	moveq	r1, r3
  40a792:	4610      	moveq	r0, r2
  40a794:	bd30      	pop	{r4, r5, pc}
  40a796:	ea91 0f03 	teq	r1, r3
  40a79a:	bf1e      	ittt	ne
  40a79c:	2100      	movne	r1, #0
  40a79e:	2000      	movne	r0, #0
  40a7a0:	bd30      	popne	{r4, r5, pc}
  40a7a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a7a6:	d105      	bne.n	40a7b4 <__adddf3+0x230>
  40a7a8:	0040      	lsls	r0, r0, #1
  40a7aa:	4149      	adcs	r1, r1
  40a7ac:	bf28      	it	cs
  40a7ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a7b2:	bd30      	pop	{r4, r5, pc}
  40a7b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a7b8:	bf3c      	itt	cc
  40a7ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a7be:	bd30      	popcc	{r4, r5, pc}
  40a7c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a7c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a7c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a7cc:	f04f 0000 	mov.w	r0, #0
  40a7d0:	bd30      	pop	{r4, r5, pc}
  40a7d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a7d6:	bf1a      	itte	ne
  40a7d8:	4619      	movne	r1, r3
  40a7da:	4610      	movne	r0, r2
  40a7dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a7e0:	bf1c      	itt	ne
  40a7e2:	460b      	movne	r3, r1
  40a7e4:	4602      	movne	r2, r0
  40a7e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a7ea:	bf06      	itte	eq
  40a7ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a7f0:	ea91 0f03 	teqeq	r1, r3
  40a7f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a7f8:	bd30      	pop	{r4, r5, pc}
  40a7fa:	bf00      	nop

0040a7fc <__aeabi_ui2d>:
  40a7fc:	f090 0f00 	teq	r0, #0
  40a800:	bf04      	itt	eq
  40a802:	2100      	moveq	r1, #0
  40a804:	4770      	bxeq	lr
  40a806:	b530      	push	{r4, r5, lr}
  40a808:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a80c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a810:	f04f 0500 	mov.w	r5, #0
  40a814:	f04f 0100 	mov.w	r1, #0
  40a818:	e750      	b.n	40a6bc <__adddf3+0x138>
  40a81a:	bf00      	nop

0040a81c <__aeabi_i2d>:
  40a81c:	f090 0f00 	teq	r0, #0
  40a820:	bf04      	itt	eq
  40a822:	2100      	moveq	r1, #0
  40a824:	4770      	bxeq	lr
  40a826:	b530      	push	{r4, r5, lr}
  40a828:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a82c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a830:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a834:	bf48      	it	mi
  40a836:	4240      	negmi	r0, r0
  40a838:	f04f 0100 	mov.w	r1, #0
  40a83c:	e73e      	b.n	40a6bc <__adddf3+0x138>
  40a83e:	bf00      	nop

0040a840 <__aeabi_f2d>:
  40a840:	0042      	lsls	r2, r0, #1
  40a842:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a846:	ea4f 0131 	mov.w	r1, r1, rrx
  40a84a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a84e:	bf1f      	itttt	ne
  40a850:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a854:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a858:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a85c:	4770      	bxne	lr
  40a85e:	f092 0f00 	teq	r2, #0
  40a862:	bf14      	ite	ne
  40a864:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a868:	4770      	bxeq	lr
  40a86a:	b530      	push	{r4, r5, lr}
  40a86c:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a870:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a874:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a878:	e720      	b.n	40a6bc <__adddf3+0x138>
  40a87a:	bf00      	nop

0040a87c <__aeabi_ul2d>:
  40a87c:	ea50 0201 	orrs.w	r2, r0, r1
  40a880:	bf08      	it	eq
  40a882:	4770      	bxeq	lr
  40a884:	b530      	push	{r4, r5, lr}
  40a886:	f04f 0500 	mov.w	r5, #0
  40a88a:	e00a      	b.n	40a8a2 <__aeabi_l2d+0x16>

0040a88c <__aeabi_l2d>:
  40a88c:	ea50 0201 	orrs.w	r2, r0, r1
  40a890:	bf08      	it	eq
  40a892:	4770      	bxeq	lr
  40a894:	b530      	push	{r4, r5, lr}
  40a896:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a89a:	d502      	bpl.n	40a8a2 <__aeabi_l2d+0x16>
  40a89c:	4240      	negs	r0, r0
  40a89e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a8a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a8a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a8aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a8ae:	f43f aedc 	beq.w	40a66a <__adddf3+0xe6>
  40a8b2:	f04f 0203 	mov.w	r2, #3
  40a8b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a8ba:	bf18      	it	ne
  40a8bc:	3203      	addne	r2, #3
  40a8be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a8c2:	bf18      	it	ne
  40a8c4:	3203      	addne	r2, #3
  40a8c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a8ca:	f1c2 0320 	rsb	r3, r2, #32
  40a8ce:	fa00 fc03 	lsl.w	ip, r0, r3
  40a8d2:	fa20 f002 	lsr.w	r0, r0, r2
  40a8d6:	fa01 fe03 	lsl.w	lr, r1, r3
  40a8da:	ea40 000e 	orr.w	r0, r0, lr
  40a8de:	fa21 f102 	lsr.w	r1, r1, r2
  40a8e2:	4414      	add	r4, r2
  40a8e4:	e6c1      	b.n	40a66a <__adddf3+0xe6>
  40a8e6:	bf00      	nop

0040a8e8 <__aeabi_dmul>:
  40a8e8:	b570      	push	{r4, r5, r6, lr}
  40a8ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a8ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a8f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a8f6:	bf1d      	ittte	ne
  40a8f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a8fc:	ea94 0f0c 	teqne	r4, ip
  40a900:	ea95 0f0c 	teqne	r5, ip
  40a904:	f000 f8de 	bleq	40aac4 <__aeabi_dmul+0x1dc>
  40a908:	442c      	add	r4, r5
  40a90a:	ea81 0603 	eor.w	r6, r1, r3
  40a90e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a912:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a916:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a91a:	bf18      	it	ne
  40a91c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a928:	d038      	beq.n	40a99c <__aeabi_dmul+0xb4>
  40a92a:	fba0 ce02 	umull	ip, lr, r0, r2
  40a92e:	f04f 0500 	mov.w	r5, #0
  40a932:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a936:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a93a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a93e:	f04f 0600 	mov.w	r6, #0
  40a942:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a946:	f09c 0f00 	teq	ip, #0
  40a94a:	bf18      	it	ne
  40a94c:	f04e 0e01 	orrne.w	lr, lr, #1
  40a950:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a954:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a958:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a95c:	d204      	bcs.n	40a968 <__aeabi_dmul+0x80>
  40a95e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a962:	416d      	adcs	r5, r5
  40a964:	eb46 0606 	adc.w	r6, r6, r6
  40a968:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a96c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a970:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a974:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a978:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a97c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a980:	bf88      	it	hi
  40a982:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a986:	d81e      	bhi.n	40a9c6 <__aeabi_dmul+0xde>
  40a988:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a98c:	bf08      	it	eq
  40a98e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a992:	f150 0000 	adcs.w	r0, r0, #0
  40a996:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a99a:	bd70      	pop	{r4, r5, r6, pc}
  40a99c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a9a0:	ea46 0101 	orr.w	r1, r6, r1
  40a9a4:	ea40 0002 	orr.w	r0, r0, r2
  40a9a8:	ea81 0103 	eor.w	r1, r1, r3
  40a9ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a9b0:	bfc2      	ittt	gt
  40a9b2:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a9b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a9ba:	bd70      	popgt	{r4, r5, r6, pc}
  40a9bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a9c0:	f04f 0e00 	mov.w	lr, #0
  40a9c4:	3c01      	subs	r4, #1
  40a9c6:	f300 80ab 	bgt.w	40ab20 <__aeabi_dmul+0x238>
  40a9ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40a9ce:	bfde      	ittt	le
  40a9d0:	2000      	movle	r0, #0
  40a9d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40a9d6:	bd70      	pople	{r4, r5, r6, pc}
  40a9d8:	f1c4 0400 	rsb	r4, r4, #0
  40a9dc:	3c20      	subs	r4, #32
  40a9de:	da35      	bge.n	40aa4c <__aeabi_dmul+0x164>
  40a9e0:	340c      	adds	r4, #12
  40a9e2:	dc1b      	bgt.n	40aa1c <__aeabi_dmul+0x134>
  40a9e4:	f104 0414 	add.w	r4, r4, #20
  40a9e8:	f1c4 0520 	rsb	r5, r4, #32
  40a9ec:	fa00 f305 	lsl.w	r3, r0, r5
  40a9f0:	fa20 f004 	lsr.w	r0, r0, r4
  40a9f4:	fa01 f205 	lsl.w	r2, r1, r5
  40a9f8:	ea40 0002 	orr.w	r0, r0, r2
  40a9fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40aa00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40aa04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40aa08:	fa21 f604 	lsr.w	r6, r1, r4
  40aa0c:	eb42 0106 	adc.w	r1, r2, r6
  40aa10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aa14:	bf08      	it	eq
  40aa16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aa1a:	bd70      	pop	{r4, r5, r6, pc}
  40aa1c:	f1c4 040c 	rsb	r4, r4, #12
  40aa20:	f1c4 0520 	rsb	r5, r4, #32
  40aa24:	fa00 f304 	lsl.w	r3, r0, r4
  40aa28:	fa20 f005 	lsr.w	r0, r0, r5
  40aa2c:	fa01 f204 	lsl.w	r2, r1, r4
  40aa30:	ea40 0002 	orr.w	r0, r0, r2
  40aa34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aa38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40aa3c:	f141 0100 	adc.w	r1, r1, #0
  40aa40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aa44:	bf08      	it	eq
  40aa46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aa4a:	bd70      	pop	{r4, r5, r6, pc}
  40aa4c:	f1c4 0520 	rsb	r5, r4, #32
  40aa50:	fa00 f205 	lsl.w	r2, r0, r5
  40aa54:	ea4e 0e02 	orr.w	lr, lr, r2
  40aa58:	fa20 f304 	lsr.w	r3, r0, r4
  40aa5c:	fa01 f205 	lsl.w	r2, r1, r5
  40aa60:	ea43 0302 	orr.w	r3, r3, r2
  40aa64:	fa21 f004 	lsr.w	r0, r1, r4
  40aa68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aa6c:	fa21 f204 	lsr.w	r2, r1, r4
  40aa70:	ea20 0002 	bic.w	r0, r0, r2
  40aa74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40aa78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aa7c:	bf08      	it	eq
  40aa7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aa82:	bd70      	pop	{r4, r5, r6, pc}
  40aa84:	f094 0f00 	teq	r4, #0
  40aa88:	d10f      	bne.n	40aaaa <__aeabi_dmul+0x1c2>
  40aa8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40aa8e:	0040      	lsls	r0, r0, #1
  40aa90:	eb41 0101 	adc.w	r1, r1, r1
  40aa94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aa98:	bf08      	it	eq
  40aa9a:	3c01      	subeq	r4, #1
  40aa9c:	d0f7      	beq.n	40aa8e <__aeabi_dmul+0x1a6>
  40aa9e:	ea41 0106 	orr.w	r1, r1, r6
  40aaa2:	f095 0f00 	teq	r5, #0
  40aaa6:	bf18      	it	ne
  40aaa8:	4770      	bxne	lr
  40aaaa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40aaae:	0052      	lsls	r2, r2, #1
  40aab0:	eb43 0303 	adc.w	r3, r3, r3
  40aab4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40aab8:	bf08      	it	eq
  40aaba:	3d01      	subeq	r5, #1
  40aabc:	d0f7      	beq.n	40aaae <__aeabi_dmul+0x1c6>
  40aabe:	ea43 0306 	orr.w	r3, r3, r6
  40aac2:	4770      	bx	lr
  40aac4:	ea94 0f0c 	teq	r4, ip
  40aac8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40aacc:	bf18      	it	ne
  40aace:	ea95 0f0c 	teqne	r5, ip
  40aad2:	d00c      	beq.n	40aaee <__aeabi_dmul+0x206>
  40aad4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aad8:	bf18      	it	ne
  40aada:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40aade:	d1d1      	bne.n	40aa84 <__aeabi_dmul+0x19c>
  40aae0:	ea81 0103 	eor.w	r1, r1, r3
  40aae4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aae8:	f04f 0000 	mov.w	r0, #0
  40aaec:	bd70      	pop	{r4, r5, r6, pc}
  40aaee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40aaf2:	bf06      	itte	eq
  40aaf4:	4610      	moveq	r0, r2
  40aaf6:	4619      	moveq	r1, r3
  40aaf8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40aafc:	d019      	beq.n	40ab32 <__aeabi_dmul+0x24a>
  40aafe:	ea94 0f0c 	teq	r4, ip
  40ab02:	d102      	bne.n	40ab0a <__aeabi_dmul+0x222>
  40ab04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40ab08:	d113      	bne.n	40ab32 <__aeabi_dmul+0x24a>
  40ab0a:	ea95 0f0c 	teq	r5, ip
  40ab0e:	d105      	bne.n	40ab1c <__aeabi_dmul+0x234>
  40ab10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40ab14:	bf1c      	itt	ne
  40ab16:	4610      	movne	r0, r2
  40ab18:	4619      	movne	r1, r3
  40ab1a:	d10a      	bne.n	40ab32 <__aeabi_dmul+0x24a>
  40ab1c:	ea81 0103 	eor.w	r1, r1, r3
  40ab20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ab24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ab28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ab2c:	f04f 0000 	mov.w	r0, #0
  40ab30:	bd70      	pop	{r4, r5, r6, pc}
  40ab32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ab36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40ab3a:	bd70      	pop	{r4, r5, r6, pc}

0040ab3c <__aeabi_ddiv>:
  40ab3c:	b570      	push	{r4, r5, r6, lr}
  40ab3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ab42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ab46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ab4a:	bf1d      	ittte	ne
  40ab4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ab50:	ea94 0f0c 	teqne	r4, ip
  40ab54:	ea95 0f0c 	teqne	r5, ip
  40ab58:	f000 f8a7 	bleq	40acaa <__aeabi_ddiv+0x16e>
  40ab5c:	eba4 0405 	sub.w	r4, r4, r5
  40ab60:	ea81 0e03 	eor.w	lr, r1, r3
  40ab64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ab68:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40ab6c:	f000 8088 	beq.w	40ac80 <__aeabi_ddiv+0x144>
  40ab70:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40ab74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40ab78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40ab7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40ab80:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40ab84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40ab88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40ab8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40ab90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40ab94:	429d      	cmp	r5, r3
  40ab96:	bf08      	it	eq
  40ab98:	4296      	cmpeq	r6, r2
  40ab9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40ab9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40aba2:	d202      	bcs.n	40abaa <__aeabi_ddiv+0x6e>
  40aba4:	085b      	lsrs	r3, r3, #1
  40aba6:	ea4f 0232 	mov.w	r2, r2, rrx
  40abaa:	1ab6      	subs	r6, r6, r2
  40abac:	eb65 0503 	sbc.w	r5, r5, r3
  40abb0:	085b      	lsrs	r3, r3, #1
  40abb2:	ea4f 0232 	mov.w	r2, r2, rrx
  40abb6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40abba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40abbe:	ebb6 0e02 	subs.w	lr, r6, r2
  40abc2:	eb75 0e03 	sbcs.w	lr, r5, r3
  40abc6:	bf22      	ittt	cs
  40abc8:	1ab6      	subcs	r6, r6, r2
  40abca:	4675      	movcs	r5, lr
  40abcc:	ea40 000c 	orrcs.w	r0, r0, ip
  40abd0:	085b      	lsrs	r3, r3, #1
  40abd2:	ea4f 0232 	mov.w	r2, r2, rrx
  40abd6:	ebb6 0e02 	subs.w	lr, r6, r2
  40abda:	eb75 0e03 	sbcs.w	lr, r5, r3
  40abde:	bf22      	ittt	cs
  40abe0:	1ab6      	subcs	r6, r6, r2
  40abe2:	4675      	movcs	r5, lr
  40abe4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40abe8:	085b      	lsrs	r3, r3, #1
  40abea:	ea4f 0232 	mov.w	r2, r2, rrx
  40abee:	ebb6 0e02 	subs.w	lr, r6, r2
  40abf2:	eb75 0e03 	sbcs.w	lr, r5, r3
  40abf6:	bf22      	ittt	cs
  40abf8:	1ab6      	subcs	r6, r6, r2
  40abfa:	4675      	movcs	r5, lr
  40abfc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40ac00:	085b      	lsrs	r3, r3, #1
  40ac02:	ea4f 0232 	mov.w	r2, r2, rrx
  40ac06:	ebb6 0e02 	subs.w	lr, r6, r2
  40ac0a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ac0e:	bf22      	ittt	cs
  40ac10:	1ab6      	subcs	r6, r6, r2
  40ac12:	4675      	movcs	r5, lr
  40ac14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40ac18:	ea55 0e06 	orrs.w	lr, r5, r6
  40ac1c:	d018      	beq.n	40ac50 <__aeabi_ddiv+0x114>
  40ac1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40ac22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40ac26:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40ac2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40ac2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40ac32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40ac36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40ac3a:	d1c0      	bne.n	40abbe <__aeabi_ddiv+0x82>
  40ac3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ac40:	d10b      	bne.n	40ac5a <__aeabi_ddiv+0x11e>
  40ac42:	ea41 0100 	orr.w	r1, r1, r0
  40ac46:	f04f 0000 	mov.w	r0, #0
  40ac4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40ac4e:	e7b6      	b.n	40abbe <__aeabi_ddiv+0x82>
  40ac50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ac54:	bf04      	itt	eq
  40ac56:	4301      	orreq	r1, r0
  40ac58:	2000      	moveq	r0, #0
  40ac5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40ac5e:	bf88      	it	hi
  40ac60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40ac64:	f63f aeaf 	bhi.w	40a9c6 <__aeabi_dmul+0xde>
  40ac68:	ebb5 0c03 	subs.w	ip, r5, r3
  40ac6c:	bf04      	itt	eq
  40ac6e:	ebb6 0c02 	subseq.w	ip, r6, r2
  40ac72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40ac76:	f150 0000 	adcs.w	r0, r0, #0
  40ac7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40ac7e:	bd70      	pop	{r4, r5, r6, pc}
  40ac80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40ac84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40ac88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40ac8c:	bfc2      	ittt	gt
  40ac8e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40ac92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40ac96:	bd70      	popgt	{r4, r5, r6, pc}
  40ac98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40ac9c:	f04f 0e00 	mov.w	lr, #0
  40aca0:	3c01      	subs	r4, #1
  40aca2:	e690      	b.n	40a9c6 <__aeabi_dmul+0xde>
  40aca4:	ea45 0e06 	orr.w	lr, r5, r6
  40aca8:	e68d      	b.n	40a9c6 <__aeabi_dmul+0xde>
  40acaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40acae:	ea94 0f0c 	teq	r4, ip
  40acb2:	bf08      	it	eq
  40acb4:	ea95 0f0c 	teqeq	r5, ip
  40acb8:	f43f af3b 	beq.w	40ab32 <__aeabi_dmul+0x24a>
  40acbc:	ea94 0f0c 	teq	r4, ip
  40acc0:	d10a      	bne.n	40acd8 <__aeabi_ddiv+0x19c>
  40acc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40acc6:	f47f af34 	bne.w	40ab32 <__aeabi_dmul+0x24a>
  40acca:	ea95 0f0c 	teq	r5, ip
  40acce:	f47f af25 	bne.w	40ab1c <__aeabi_dmul+0x234>
  40acd2:	4610      	mov	r0, r2
  40acd4:	4619      	mov	r1, r3
  40acd6:	e72c      	b.n	40ab32 <__aeabi_dmul+0x24a>
  40acd8:	ea95 0f0c 	teq	r5, ip
  40acdc:	d106      	bne.n	40acec <__aeabi_ddiv+0x1b0>
  40acde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ace2:	f43f aefd 	beq.w	40aae0 <__aeabi_dmul+0x1f8>
  40ace6:	4610      	mov	r0, r2
  40ace8:	4619      	mov	r1, r3
  40acea:	e722      	b.n	40ab32 <__aeabi_dmul+0x24a>
  40acec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40acf0:	bf18      	it	ne
  40acf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40acf6:	f47f aec5 	bne.w	40aa84 <__aeabi_dmul+0x19c>
  40acfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40acfe:	f47f af0d 	bne.w	40ab1c <__aeabi_dmul+0x234>
  40ad02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40ad06:	f47f aeeb 	bne.w	40aae0 <__aeabi_dmul+0x1f8>
  40ad0a:	e712      	b.n	40ab32 <__aeabi_dmul+0x24a>

0040ad0c <__gedf2>:
  40ad0c:	f04f 3cff 	mov.w	ip, #4294967295
  40ad10:	e006      	b.n	40ad20 <__cmpdf2+0x4>
  40ad12:	bf00      	nop

0040ad14 <__ledf2>:
  40ad14:	f04f 0c01 	mov.w	ip, #1
  40ad18:	e002      	b.n	40ad20 <__cmpdf2+0x4>
  40ad1a:	bf00      	nop

0040ad1c <__cmpdf2>:
  40ad1c:	f04f 0c01 	mov.w	ip, #1
  40ad20:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ad24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ad28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ad2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ad30:	bf18      	it	ne
  40ad32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40ad36:	d01b      	beq.n	40ad70 <__cmpdf2+0x54>
  40ad38:	b001      	add	sp, #4
  40ad3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40ad3e:	bf0c      	ite	eq
  40ad40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40ad44:	ea91 0f03 	teqne	r1, r3
  40ad48:	bf02      	ittt	eq
  40ad4a:	ea90 0f02 	teqeq	r0, r2
  40ad4e:	2000      	moveq	r0, #0
  40ad50:	4770      	bxeq	lr
  40ad52:	f110 0f00 	cmn.w	r0, #0
  40ad56:	ea91 0f03 	teq	r1, r3
  40ad5a:	bf58      	it	pl
  40ad5c:	4299      	cmppl	r1, r3
  40ad5e:	bf08      	it	eq
  40ad60:	4290      	cmpeq	r0, r2
  40ad62:	bf2c      	ite	cs
  40ad64:	17d8      	asrcs	r0, r3, #31
  40ad66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40ad6a:	f040 0001 	orr.w	r0, r0, #1
  40ad6e:	4770      	bx	lr
  40ad70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ad74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ad78:	d102      	bne.n	40ad80 <__cmpdf2+0x64>
  40ad7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ad7e:	d107      	bne.n	40ad90 <__cmpdf2+0x74>
  40ad80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ad84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ad88:	d1d6      	bne.n	40ad38 <__cmpdf2+0x1c>
  40ad8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ad8e:	d0d3      	beq.n	40ad38 <__cmpdf2+0x1c>
  40ad90:	f85d 0b04 	ldr.w	r0, [sp], #4
  40ad94:	4770      	bx	lr
  40ad96:	bf00      	nop

0040ad98 <__aeabi_cdrcmple>:
  40ad98:	4684      	mov	ip, r0
  40ad9a:	4610      	mov	r0, r2
  40ad9c:	4662      	mov	r2, ip
  40ad9e:	468c      	mov	ip, r1
  40ada0:	4619      	mov	r1, r3
  40ada2:	4663      	mov	r3, ip
  40ada4:	e000      	b.n	40ada8 <__aeabi_cdcmpeq>
  40ada6:	bf00      	nop

0040ada8 <__aeabi_cdcmpeq>:
  40ada8:	b501      	push	{r0, lr}
  40adaa:	f7ff ffb7 	bl	40ad1c <__cmpdf2>
  40adae:	2800      	cmp	r0, #0
  40adb0:	bf48      	it	mi
  40adb2:	f110 0f00 	cmnmi.w	r0, #0
  40adb6:	bd01      	pop	{r0, pc}

0040adb8 <__aeabi_dcmpeq>:
  40adb8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40adbc:	f7ff fff4 	bl	40ada8 <__aeabi_cdcmpeq>
  40adc0:	bf0c      	ite	eq
  40adc2:	2001      	moveq	r0, #1
  40adc4:	2000      	movne	r0, #0
  40adc6:	f85d fb08 	ldr.w	pc, [sp], #8
  40adca:	bf00      	nop

0040adcc <__aeabi_dcmplt>:
  40adcc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40add0:	f7ff ffea 	bl	40ada8 <__aeabi_cdcmpeq>
  40add4:	bf34      	ite	cc
  40add6:	2001      	movcc	r0, #1
  40add8:	2000      	movcs	r0, #0
  40adda:	f85d fb08 	ldr.w	pc, [sp], #8
  40adde:	bf00      	nop

0040ade0 <__aeabi_dcmple>:
  40ade0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ade4:	f7ff ffe0 	bl	40ada8 <__aeabi_cdcmpeq>
  40ade8:	bf94      	ite	ls
  40adea:	2001      	movls	r0, #1
  40adec:	2000      	movhi	r0, #0
  40adee:	f85d fb08 	ldr.w	pc, [sp], #8
  40adf2:	bf00      	nop

0040adf4 <__aeabi_dcmpge>:
  40adf4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40adf8:	f7ff ffce 	bl	40ad98 <__aeabi_cdrcmple>
  40adfc:	bf94      	ite	ls
  40adfe:	2001      	movls	r0, #1
  40ae00:	2000      	movhi	r0, #0
  40ae02:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae06:	bf00      	nop

0040ae08 <__aeabi_dcmpgt>:
  40ae08:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae0c:	f7ff ffc4 	bl	40ad98 <__aeabi_cdrcmple>
  40ae10:	bf34      	ite	cc
  40ae12:	2001      	movcc	r0, #1
  40ae14:	2000      	movcs	r0, #0
  40ae16:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae1a:	bf00      	nop

0040ae1c <__aeabi_dcmpun>:
  40ae1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ae20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ae24:	d102      	bne.n	40ae2c <__aeabi_dcmpun+0x10>
  40ae26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ae2a:	d10a      	bne.n	40ae42 <__aeabi_dcmpun+0x26>
  40ae2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ae30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ae34:	d102      	bne.n	40ae3c <__aeabi_dcmpun+0x20>
  40ae36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ae3a:	d102      	bne.n	40ae42 <__aeabi_dcmpun+0x26>
  40ae3c:	f04f 0000 	mov.w	r0, #0
  40ae40:	4770      	bx	lr
  40ae42:	f04f 0001 	mov.w	r0, #1
  40ae46:	4770      	bx	lr

0040ae48 <__aeabi_d2iz>:
  40ae48:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40ae4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40ae50:	d215      	bcs.n	40ae7e <__aeabi_d2iz+0x36>
  40ae52:	d511      	bpl.n	40ae78 <__aeabi_d2iz+0x30>
  40ae54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40ae58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40ae5c:	d912      	bls.n	40ae84 <__aeabi_d2iz+0x3c>
  40ae5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40ae62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40ae66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40ae6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40ae6e:	fa23 f002 	lsr.w	r0, r3, r2
  40ae72:	bf18      	it	ne
  40ae74:	4240      	negne	r0, r0
  40ae76:	4770      	bx	lr
  40ae78:	f04f 0000 	mov.w	r0, #0
  40ae7c:	4770      	bx	lr
  40ae7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40ae82:	d105      	bne.n	40ae90 <__aeabi_d2iz+0x48>
  40ae84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40ae88:	bf08      	it	eq
  40ae8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40ae8e:	4770      	bx	lr
  40ae90:	f04f 0000 	mov.w	r0, #0
  40ae94:	4770      	bx	lr
  40ae96:	bf00      	nop
  40ae98:	454c4449 	.word	0x454c4449
  40ae9c:	00000000 	.word	0x00000000
  40aea0:	00000a0d 	.word	0x00000a0d
  40aea4:	09097325 	.word	0x09097325
  40aea8:	25096325 	.word	0x25096325
  40aeac:	75250975 	.word	0x75250975
  40aeb0:	0d752509 	.word	0x0d752509
  40aeb4:	0000000a 	.word	0x0000000a
  40aeb8:	20726d54 	.word	0x20726d54
  40aebc:	00637653 	.word	0x00637653
  40aec0:	203a7325 	.word	0x203a7325
  40aec4:	64255353 	.word	0x64255353
  40aec8:	00000000 	.word	0x00000000

0040aecc <IO_SENSOR>:
	...
  40aedc:	400e1000 0000000a 00004000 0000002e     ...@.....@......
  40aeec:	400e1000 0000000a 00002000 0000002d     ...@..... ..-...
  40aefc:	400e1400 0000000c 00000001 00000060     ...@........`...
  40af0c:	400e1400 0000000c 80000000 0000007f     ...@............
  40af1c:	400e1600 0000000d 00000008 00000083     ...@............
  40af2c:	400e1600 0000000d 00000001 00000080     ...@............
  40af3c:	400e1600 0000000d 00000002 00000081     ...@............
  40af4c:	400e1600 0000000d 00000004 00000082     ...@............
  40af5c:	400e1200 0000000b 08000000 0000005b     ...@........[...
  40af6c:	400e1200 0000000b 00000001 00000040     ...@........@...
  40af7c:	400e1200 0000000b 04000000 0000005a     ...@........Z...
  40af8c:	400e1200 0000000b 80000000 0000005f     ...@........_...
  40af9c:	400e1200 0000000b 40000000 0000005e     ...@.......@^...
  40afac:	400e1200 0000000b 20000000 0000005d     ...@....... ]...
  40afbc:	400e1200 0000000b 00002000 0000004d     ...@..... ..M...
  40afcc:	400e1000 0000000a 00000001 00000020     ...@........ ...
  40afdc:	400e1000 0000000a 00000002 00000021     ...@........!...
  40afec:	400e0e00 00000009 00100000 00000014     ...@............
  40affc:	400e0e00 00000009 00020000 00000011     ...@............
  40b00c:	400e1600 0000000d 00000010 00000084     ...@............
  40b01c:	400e0e00 00000009 00080000 00000013     ...@............
  40b02c:	400e1600 0000000d 00000020 00000085     ...@.... .......
  40b03c:	400e1000 0000000a 00000004 00000022     ...@........"...
  40b04c:	400e0e00 00000009 00040000 00000012     ...@............
  40b05c:	400e0e00 00000009 00200000 00000015     ...@...... .....
  40b06c:	400e1000 0000000a 00000008 00000023     ...@........#...
  40b07c:	400e1400 0000000c 04000000 0000007a     ...@........z...
  40b08c:	400e1400 0000000c 40000000 0000007e     ...@.......@~...
  40b09c:	400e0e00 00000009 00800000 00000017     ...@............
  40b0ac:	400e0e00 00000009 00004000 0000000e     ...@.....@......
  40b0bc:	400e1400 0000000c 00200000 00000075     ...@...... .u...
  40b0cc:	400e1400 0000000c 02000000 00000079     ...@........y...
  40b0dc:	400e0e00 00000009 00010000 00000010     ...@............
  40b0ec:	400e1400 0000000c 00100000 00000074     ...@........t...
  40b0fc:	400e0e00 00000009 00008000 0000000f     ...@............
  40b10c:	400e1200 0000000b 00000080 00000047     ...@........G...
  40b11c:	400e1400 0000000c 08000000 0000007b     ...@........{...
  40b12c:	400e0e00 00000009 00400000 00000016     ...@......@.....
  40b13c:	400e1200 0000000b 00000002 00000041     ...@........A...
  40b14c:	400e1200 0000000b 00000004 00000042     ...@........B...
  40b15c:	400e1200 0000000b 00000008 00000043     ...@........C...
  40b16c:	400e1200 0000000b 00000010 00000044     ...@........D...
  40b17c:	400e0e00 00000009 00002000 0000000d     ...@..... ......
  40b18c:	400e1200 0000000b 00000020 00000045     ...@.... ...E...
  40b19c:	400e1200 0000000b 00000040 00000046     ...@....@...F...
  40b1ac:	400e1400 0000000c 01000000 00000078     ...@........x...
  40b1bc:	400e0e00 00000009 01000000 00000018     ...@............
  40b1cc:	400e1400 0000000c 00800000 00000077     ...@........w...
  40b1dc:	400e0e00 00000009 02000000 00000019     ...@............
  40b1ec:	400e1400 0000000c 00400000 00000076     ...@......@.v...
  40b1fc:	400e1400 0000000c 00080000 00000073     ...@........s...
  40b20c:	400e0e00 00000009 00001000 0000000c     ...@............
  40b21c:	400e1400 0000000c 00040000 00000072     ...@........r...
  40b22c:	400e0e00 00000009 00000800 0000000b     ...@............
  40b23c:	400e1400 0000000c 00002000 0000006d     ...@..... ..m...
  40b24c:	400e1200 0000000b 00000200 00000049     ...@........I...
  40b25c:	400e1400 0000000c 00004000 0000006e     ...@.....@..n...
  40b26c:	400e1400 0000000c 10000000 0000007c     ...@........|...
  40b27c:	400e1200 0000000b 10000000 0000005c     ...@........\...
  40b28c:	400e1000 0000000a 00000040 00000026     ...@....@...&...
  40b29c:	400e0e00 00000009 00000040 00000006     ...@....@.......
  40b2ac:	400e1400 0000000c 00020000 00000071     ...@........q...
  40b2bc:	400e1400 0000000c 00010000 00000070     ...@........p...
  40b2cc:	400e1200 0000000b 00000100 00000048     ...@........H...
  40b2dc:	400e1400 0000000c 00001000 0000006c     ...@........l...
  40b2ec:	400e1200 0000000b 00000800 0000004b     ...@........K...
  40b2fc:	400e0e00 00000009 00000004 00000002     ...@............
  40b30c:	400e1000 0000000a 00001000 0000002c     ...@........,...
  40b31c:	400e1200 0000000b 00004000 0000004e     ...@.....@..N...
  40b32c:	400e1400 0000000c 00000080 00000067     ...@........g...
  40b33c:	400e1000 0000000a 00000080 00000027     ...@........'...
  40b34c:	400e1200 0000000b 00000400 0000004a     ...@........J...
  40b35c:	400e1400 0000000c 00000800 0000006b     ...@........k...
  40b36c:	400e0e00 00000009 00000002 00000001     ...@............
  40b37c:	400e1200 0000000b 00010000 00000050     ...@........P...
  40b38c:	400e1400 0000000c 00000400 0000006a     ...@........j...
  40b39c:	400e0e00 00000009 00000001 00000000     ...@............
  40b3ac:	400e1200 0000000b 00020000 00000051     ...@........Q...
  40b3bc:	400e1200 0000000b 00080000 00000053     ...@........S...
  40b3cc:	400e1000 0000000a 00000010 00000024     ...@........$...
  40b3dc:	400e1400 0000000c 00008000 0000006f     ...@........o...
  40b3ec:	400e1400 0000000c 20000000 0000007d     ...@....... }...
  40b3fc:	400e1000 0000000a 00000020 00000025     ...@.... ...%...
  40b40c:	400e1400 0000000c 00000200 00000069     ...@........i...
  40b41c:	400e1200 0000000b 00040000 00000052     ...@........R...
  40b42c:	400e1400 0000000c 00000100 00000068     ...@........h...
  40b43c:	400e0e00 00000009 00000040 00000006     ...@....@.......
  40b44c:	400e1200 0000000b 00100000 00000054     ...@........T...
  40b45c:	400e1200 0000000b 00400000 00000056     ...@......@.V...
  40b46c:	400e1400 0000000c 00000040 00000066     ...@....@...f...
  40b47c:	400e1200 0000000b 00200000 00000055     ...@...... .U...
  40b48c:	400e1200 0000000b 01000000 00000058     ...@........X...
  40b49c:	400e1400 0000000c 00000020 00000065     ...@.... ...e...
  40b4ac:	400e1400 0000000c 00000010 00000064     ...@........d...
  40b4bc:	400e1400 0000000c 00000008 00000063     ...@........c...
  40b4cc:	400e1200 0000000b 00800000 00000057     ...@........W...
  40b4dc:	400e1400 0000000c 00000004 00000062     ...@........b...
  40b4ec:	400e1400 0000000c 00000002 00000061     ...@........a...
  40b4fc:	400e1200 0000000b 02000000 00000059     ...@........Y...
  40b50c:	64323025 64323025 64323025 3230253a     %02d%02d%02d:%02
  40b51c:	32302564 32302564 00000064              d%02d%02d...

0040b528 <SSD1311_CFG_SCRIPT>:
  40b528:	08020000 71022a02 72020003 79020003     .....*.q...r...y
  40b538:	7f028102 6002d502 7802d902 1002da02     .......`...x....
  40b548:	4002db02 0302dc02 78027804 06020902     ...@.....x.x....
  40b558:	01022802 06020202 05040c02 00000101     .(..............
  40b568:	6d617845 54656c70 006b7361 61706143     ExampleTask.Capa
  40b578:	79746963 6c25203a 00000a75 61733a30     city: %lu...0:sa
  40b588:	72615f6d 64735f6d 7478742e 00000000     m_arm_sd.txt....

0040b598 <sd_mmc_trans_units>:
  40b598:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0040b5b4 <sd_trans_multipliers>:
  40b5b4:	00000000 0000000a 0000000c 0000000d     ................
  40b5c4:	0000000f 00000014 00000019 0000001e     ................
  40b5d4:	00000023 00000028 0000002d 00000032     #...(...-...2...
  40b5e4:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040b5f4 <mmc_trans_multipliers>:
  40b5f4:	00000000 0000000a 0000000c 0000000d     ................
  40b604:	0000000f 00000014 0000001a 0000001e     ................
  40b614:	00000023 00000028 0000002d 00000034     #...(...-...4...
  40b624:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040b634 <can_bit_time>:
  40b634:	02020308 02094b03 43020303 0303030a     .....K.....C....
  40b644:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
  40b654:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
  40b664:	05050510 06114504 47040505 06060512     .....E.....G....
  40b674:	06134304 44040606 06060714 08154604     .C.....D.....F..
  40b684:	47040606 07070716 08174404 46040708     ...G.....D.....F
  40b694:	08080718 08194304 44040808              .....C.....D

0040b6a0 <_global_impure_ptr>:
  40b6a0:	20000028 00464e49 00666e69 004e414e     (.. INF.inf.NAN.
  40b6b0:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40b6c0:	46454443 00000000 33323130 37363534     CDEF....01234567
  40b6d0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40b6e0:	0000296c 00000030                       l)..0...

0040b6e8 <blanks.7223>:
  40b6e8:	20202020 20202020 20202020 20202020                     

0040b6f8 <zeroes.7224>:
  40b6f8:	30303030 30303030 30303030 30303030     0000000000000000
  40b708:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0040b718 <__mprec_bigtens>:
  40b718:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40b728:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40b738:	7f73bf3c 75154fdd                       <.s..O.u

0040b740 <__mprec_tens>:
  40b740:	00000000 3ff00000 00000000 40240000     .......?......$@
  40b750:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40b760:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40b770:	00000000 412e8480 00000000 416312d0     .......A......cA
  40b780:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40b790:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40b7a0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40b7b0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40b7c0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40b7d0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40b7e0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40b7f0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40b800:	79d99db4 44ea7843                       ...yCx.D

0040b808 <p05.6055>:
  40b808:	00000005 00000019 0000007d 00000043     ........}...C...
  40b818:	49534f50 00000058 0000002e              POSIX.......

0040b824 <_ctype_>:
  40b824:	20202000 20202020 28282020 20282828     .         ((((( 
  40b834:	20202020 20202020 20202020 20202020                     
  40b844:	10108820 10101010 10101010 10101010      ...............
  40b854:	04040410 04040404 10040404 10101010     ................
  40b864:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40b874:	01010101 01010101 01010101 10101010     ................
  40b884:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40b894:	02020202 02020202 02020202 10101010     ................
  40b8a4:	00000020 00000000 00000000 00000000      ...............
	...

0040b928 <_init>:
  40b928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b92a:	bf00      	nop
  40b92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b92e:	bc08      	pop	{r3}
  40b930:	469e      	mov	lr, r3
  40b932:	4770      	bx	lr

0040b934 <__init_array_start>:
  40b934:	00408069 	.word	0x00408069

0040b938 <__frame_dummy_init_array_entry>:
  40b938:	0040011d                                ..@.

0040b93c <_fini>:
  40b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b93e:	bf00      	nop
  40b940:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40b942:	bc08      	pop	{r3}
  40b944:	469e      	mov	lr, r3
  40b946:	4770      	bx	lr

0040b948 <__fini_array_start>:
  40b948:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <uxCriticalNesting>:
2000000c:	aaaa aaaa                                   ....

20000010 <xFreeBytesRemaining>:
20000010:	a000 0000                                   ....

20000014 <xNextTaskUnblockTime>:
20000014:	ffff ffff                                   ....

20000018 <g_interrupt_enabled>:
20000018:	0001 0000                                   ....

2000001c <SystemCoreClock>:
2000001c:	0900 003d                                   ..=.

20000020 <_impure_ptr>:
20000020:	0028 2000 0000 0000                         (.. ....

20000028 <impure_data>:
20000028:	0000 0000 0314 2000 037c 2000 03e4 2000     ....... |.. ... 
	...
200000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000450 <__atexit_recursive_mutex>:
20000450:	ac4c 2000                                   L.. 

20000454 <__malloc_av_>:
	...
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 
2000084c:	0844 2000 0844 2000 084c 2000 084c 2000     D.. D.. L.. L.. 

2000085c <__malloc_sbrk_base>:
2000085c:	ffff ffff                                   ....

20000860 <__malloc_trim_threshold>:
20000860:	0000 0002                                   ....

20000864 <__global_locale>:
20000864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000944:	a55d 0040 a11d 0040 0000 0000 b824 0040     ].@...@.....$.@.
20000954:	b820 0040 b6c4 0040 b6c4 0040 b6c4 0040      .@...@...@...@.
20000964:	b6c4 0040 b6c4 0040 b6c4 0040 b6c4 0040     ..@...@...@...@.
20000974:	b6c4 0040 b6c4 0040 ffff ffff ffff ffff     ..@...@.........
20000984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
